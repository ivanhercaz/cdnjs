{"version":3,"sources":["webpack://pnp/webpack/universalModuleDefinition","webpack://pnp/webpack/bootstrap","webpack://pnp/./packages/common/safe-global.ts","webpack://pnp/./node_modules/adal-angular/dist/adal.min.js","webpack://pnp/(webpack)/buildin/global.js","webpack://pnp/./packages/logging/logger.ts","webpack://pnp/./packages/logging/listeners.ts","webpack://pnp/./packages/common/util.ts","webpack://pnp/./packages/common/collections.ts","webpack://pnp/./packages/common/libconfig.ts","webpack://pnp/./node_modules/tslib/tslib.es6.js","webpack://pnp/./packages/common/net.ts","webpack://pnp/./packages/common/storage.ts","webpack://pnp/./packages/config-store/configuration.ts","webpack://pnp/./packages/config-store/providers/cachingConfigurationProvider.ts","webpack://pnp/./packages/odata/batch.ts","webpack://pnp/./packages/odata/caching.ts","webpack://pnp/./packages/odata/add-prop.ts","webpack://pnp/./packages/odata/invokable-extensions.ts","webpack://pnp/./packages/odata/invokable-binder.ts","webpack://pnp/./packages/odata/parsers.ts","webpack://pnp/./packages/odata/queryable.ts","webpack://pnp/./packages/odata/pipeline.ts","webpack://pnp/./packages/odata/pipeline-binder.ts","webpack://pnp/./packages/odata/request-builders.ts","webpack://pnp/./packages/sp/utils/metadata.ts","webpack://pnp/./packages/sp/splibconfig.ts","webpack://pnp/./packages/sp/utils/extractweburl.ts","webpack://pnp/./packages/sp/telemetry.ts","webpack://pnp/./packages/sp/sphttpclient.ts","webpack://pnp/./packages/sp/utils/toabsoluteurl.ts","webpack://pnp/./packages/sp/operations.ts","webpack://pnp/./packages/sp/sharepointqueryable.ts","webpack://pnp/./packages/sp/decorators.ts","webpack://pnp/./packages/sp/odata.ts","webpack://pnp/./packages/sp/batch.ts","webpack://pnp/./packages/sp/rest.ts","webpack://pnp/./packages/sp/utils/escapeQueryStrValue.ts","webpack://pnp/./packages/sp/sites/types.ts","webpack://pnp/./packages/sp/sites/index.ts","webpack://pnp/./packages/sp/webs/types.ts","webpack://pnp/./packages/sp/utils/toResourcePath.ts","webpack://pnp/./packages/sp/lists/types.ts","webpack://pnp/./packages/sp/lists/web.ts","webpack://pnp/./packages/sp/items/types.ts","webpack://pnp/./packages/sp/items/list.ts","webpack://pnp/./packages/config-store/providers/spListConfigurationProvider.ts","webpack://pnp/./packages/sp-addinhelpers/node_modules/tslib/tslib.es6.js","webpack://pnp/./packages/sp-addinhelpers/sprequestexecutorclient.ts","webpack://pnp/./packages/sp/types.ts","webpack://pnp/./packages/sp/utils/objectToSPKeyValueCollection.ts","webpack://pnp/./packages/sp/utils/file-names.ts","webpack://pnp/./packages/sp/webs/index.ts","webpack://pnp/./packages/sp-addinhelpers/sprestaddin.ts","webpack://pnp/./packages/graph/types.ts","webpack://pnp/./packages/adaljsclient/adalclient.ts","webpack://pnp/./packages/graph/graphlibconfig.ts","webpack://pnp/./packages/sp/files/types.ts","webpack://pnp/./packages/graph/graphhttpclient.ts","webpack://pnp/./packages/graph/operations.ts","webpack://pnp/./packages/graph/graphqueryable.ts","webpack://pnp/./packages/graph/batch.ts","webpack://pnp/./packages/graph/rest.ts","webpack://pnp/./packages/sp/appcatalog/types.ts","webpack://pnp/./packages/sp/appcatalog/web.ts","webpack://pnp/./packages/sp/appcatalog/index.ts","webpack://pnp/./packages/sp/attachments/types.ts","webpack://pnp/./packages/sp/clientside-pages/funcs.ts","webpack://pnp/./packages/sp/attachments/item.ts","webpack://pnp/./packages/sp/files/web.ts","webpack://pnp/./packages/sp/comments/types.ts","webpack://pnp/./packages/sp/clientside-pages/types.ts","webpack://pnp/./packages/sp/comments/item.ts","webpack://pnp/./packages/sp/clientside-pages/web.ts","webpack://pnp/./packages/sp/folders/types.ts","webpack://pnp/./packages/sp/column-defaults/list.ts","webpack://pnp/./packages/sp/column-defaults/folder.ts","webpack://pnp/./packages/sp/content-types/types.ts","webpack://pnp/./packages/sp/content-types/web.ts","webpack://pnp/./packages/sp/content-types/item.ts","webpack://pnp/./packages/sp/content-types/list.ts","webpack://pnp/./packages/sp/features/types.ts","webpack://pnp/./packages/sp/features/site.ts","webpack://pnp/./packages/sp/features/web.ts","webpack://pnp/./packages/sp/fields/types.ts","webpack://pnp/./packages/sp/fields/web.ts","webpack://pnp/./packages/sp/fields/list.ts","webpack://pnp/./packages/sp/files/folder.ts","webpack://pnp/./packages/sp/files/item.ts","webpack://pnp/./packages/sp/folders/item.ts","webpack://pnp/./packages/sp/folders/list.ts","webpack://pnp/./packages/sp/folders/web.ts","webpack://pnp/./packages/sp/forms/types.ts","webpack://pnp/./packages/sp/forms/list.ts","webpack://pnp/./packages/sp/hubsites/types.ts","webpack://pnp/./packages/sp/hubsites/site.ts","webpack://pnp/./packages/sp/hubsites/web.ts","webpack://pnp/./packages/sp/hubsites/index.ts","webpack://pnp/./packages/sp/navigation/types.ts","webpack://pnp/./packages/sp/navigation/web.ts","webpack://pnp/./packages/sp/navigation/index.ts","webpack://pnp/./packages/sp/profiles/types.ts","webpack://pnp/./packages/sp/profiles/index.ts","webpack://pnp/./packages/sp/regional-settings/types.ts","webpack://pnp/./packages/sp/regional-settings/funcs.ts","webpack://pnp/./packages/sp/regional-settings/web.ts","webpack://pnp/./packages/sp/user-custom-actions/types.ts","webpack://pnp/./packages/sp/regional-settings/user-custom-actions.ts","webpack://pnp/./packages/sp/regional-settings/list.ts","webpack://pnp/./packages/sp/regional-settings/field.ts","webpack://pnp/./packages/sp/regional-settings/content-type.ts","webpack://pnp/./packages/sp/related-items/types.ts","webpack://pnp/./packages/sp/search/query.ts","webpack://pnp/./packages/sp/search/types.ts","webpack://pnp/./packages/sp/search/suggest.ts","webpack://pnp/./packages/sp/search/index.ts","webpack://pnp/./packages/sp/site-users/types.ts","webpack://pnp/./packages/sp/security/types.ts","webpack://pnp/./packages/sp/sharing/types.ts","webpack://pnp/./packages/sp/site-groups/types.ts","webpack://pnp/./packages/sp/security/funcs.ts","webpack://pnp/./packages/sp/sharing/funcs.ts","webpack://pnp/./packages/sp/security/item.ts","webpack://pnp/./packages/sp/security/list.ts","webpack://pnp/./packages/sp/security/web.ts","webpack://pnp/./packages/sp/sharing/file.ts","webpack://pnp/./packages/sp/sharing/folder.ts","webpack://pnp/./packages/sp/sharing/item.ts","webpack://pnp/./packages/sp/sharing/web.ts","webpack://pnp/./packages/sp/site-designs/types.ts","webpack://pnp/./packages/sp/site-designs/web.ts","webpack://pnp/./packages/sp/site-designs/index.ts","webpack://pnp/./packages/sp/site-groups/web.ts","webpack://pnp/./packages/sp/site-scripts/types.ts","webpack://pnp/./packages/sp/site-scripts/web.ts","webpack://pnp/./packages/sp/site-scripts/list.ts","webpack://pnp/./packages/sp/site-scripts/index.ts","webpack://pnp/./packages/sp/site-users/web.ts","webpack://pnp/./packages/sp/social/types.ts","webpack://pnp/./packages/sp/social/index.ts","webpack://pnp/./packages/sp/sputilities/types.ts","webpack://pnp/./packages/sp/sputilities/index.ts","webpack://pnp/./packages/sp/subscriptions/types.ts","webpack://pnp/./packages/sp/subscriptions/list.ts","webpack://pnp/./packages/sp/user-custom-actions/list.ts","webpack://pnp/./packages/sp/user-custom-actions/web.ts","webpack://pnp/./packages/sp/user-custom-actions/site.ts","webpack://pnp/./packages/sp/views/types.ts","webpack://pnp/./packages/sp/views/list.ts","webpack://pnp/./packages/sp/webparts/types.ts","webpack://pnp/./packages/sp/webparts/file.ts","webpack://pnp/./packages/sp/presets/all.ts","webpack://pnp/./packages/graph/decorators.ts","webpack://pnp/./packages/graph/conversations/types.ts","webpack://pnp/./packages/graph/attachments/types.ts","webpack://pnp/./packages/graph/utils/type.ts","webpack://pnp/./packages/graph/attachments/conversations.ts","webpack://pnp/./packages/graph/directory-objects/types.ts","webpack://pnp/./packages/graph/groups/types.ts","webpack://pnp/./packages/graph/calendars/types.ts","webpack://pnp/./packages/graph/calendars/groups.ts","webpack://pnp/./packages/graph/users/types.ts","webpack://pnp/./packages/graph/contacts/types.ts","webpack://pnp/./packages/graph/contacts/users.ts","webpack://pnp/./packages/graph/conversations/groups.ts","webpack://pnp/./packages/graph/directory-objects/index.ts","webpack://pnp/./packages/graph/groups/index.ts","webpack://pnp/./packages/graph/insights/types.ts","webpack://pnp/./packages/graph/insights/users.ts","webpack://pnp/./packages/graph/invitations/types.ts","webpack://pnp/./packages/graph/invitations/index.ts","webpack://pnp/./packages/graph/members/types.ts","webpack://pnp/./packages/graph/members/groups.ts","webpack://pnp/./packages/graph/messages/types.ts","webpack://pnp/./packages/graph/messages/users.ts","webpack://pnp/./packages/graph/onedrive/types.ts","webpack://pnp/./packages/graph/onedrive/users.ts","webpack://pnp/./packages/graph/onenote/types.ts","webpack://pnp/./packages/graph/onenote/users.ts","webpack://pnp/./packages/graph/photos/types.ts","webpack://pnp/./packages/graph/photos/groups.ts","webpack://pnp/./packages/graph/planner/types.ts","webpack://pnp/./packages/graph/planner/groups.ts","webpack://pnp/./packages/graph/planner/users.ts","webpack://pnp/./packages/graph/planner/index.ts","webpack://pnp/./packages/graph/subscriptions/types.ts","webpack://pnp/./packages/graph/subscriptions/index.ts","webpack://pnp/./packages/graph/teams/types.ts","webpack://pnp/./packages/graph/teams/users.ts","webpack://pnp/./packages/graph/teams/index.ts","webpack://pnp/./packages/graph/users/index.ts","webpack://pnp/./packages/pnpjs/index.ts","webpack://pnp/./packages/pnpjs/pnplibconfig.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","safeGlobal","global","AuthenticationContext","a","this","REQUEST_TYPE","LOGIN","RENEW_TOKEN","UNKNOWN","RESPONSE_TYPE","ID_TOKEN_TOKEN","TOKEN","CONSTANTS","ACCESS_TOKEN","EXPIRES_IN","ID_TOKEN","ERROR_DESCRIPTION","SESSION_STATE","ERROR","STORAGE","TOKEN_KEYS","ACCESS_TOKEN_KEY","EXPIRATION_KEY","STATE_LOGIN","STATE_RENEW","NONCE_IDTOKEN","USERNAME","IDTOKEN","LOGIN_REQUEST","LOGIN_ERROR","RENEW_STATUS","ANGULAR_LOGIN_REQUEST","RESOURCE_DELIMETER","CACHE_DELIMETER","LOADFRAME_TIMEOUT","TOKEN_RENEW_STATUS_CANCELED","TOKEN_RENEW_STATUS_COMPLETED","TOKEN_RENEW_STATUS_IN_PROGRESS","LOGGING_LEVEL","WARN","INFO","VERBOSE","LEVEL_STRING_MAP","0","1","2","3","POPUP_WIDTH","POPUP_HEIGHT","_singletonInstance","instance","config","callback","popUp","isAngular","_user","_activeRenewals","_loginInProgress","_acquireTokenInProgress","_renewStates","_callBackMappedToRenewStates","_callBacksMappedToRenewStates","_openedWindows","_requestType","_adalInstance","displayCall","Error","clientId","_cloneConfig","navigateToLoginRequestUrl","loginResource","redirectUri","location","href","split","postLogoutRedirectUri","anonymousEndpoints","loadFrameTimeout","Logging","piiLoggingEnabled","level","log","login","info","_guid","state","_idTokenNonce","b","_getItem","_saveItem","verbose","_getNavigateUrl","encodeURIComponent","push","registerCallback","_loginPopup","promptUser","_openPopup","e","screenLeft","screenX","f","screenTop","screenY","g","innerWidth","document","documentElement","clientWidth","body","h","innerHeight","clientHeight","j","k","open","focus","warn","message","_handlePopupError","indexOf","setInterval","closed","_broadcast","clearInterval","encodeURI","hash","handleWindowCallback","close","bubbles","cancelable","detail","createEvent","initCustomEvent","CustomEvent","Event","dispatchEvent","loginInProgress","_hasResource","_isEmpty","getCachedToken","expireOffsetSeconds","_now","getCachedUser","_createUser","length","_renewToken","_addAdalFrame","_urlRemoveQueryStringParameter","_addHintParameters","verbosePii","src","_loadFrameTimeout","_renewIdToken","_urlContainsQueryStringParameter","RegExp","test","replace","_loadFrame","setTimeout","acquireToken","extraQueryParameter","acquireTokenPopup","acquireTokenRedirect","infoPii","clearCache","clearCacheForResource","logOut","logOutUri","tenant","getUser","profile","sid","upn","_extractIdToken","aud","toLowerCase","userName","email","_getHash","substring","isCallback","_deserialize","getLoginError","getRequestInfo","valid","parameters","stateMatch","stateResponse","requestType","_matchState","parent","_matchNonce","nonce","_getResourceFromState","saveTokenFromHash","error","error_description","_expiresIn","exp","getResourceForEndpoint","endpoints","_getHostFromUri","String","opener","_serialize","_addLibMetadata","_decodeJwt","JWSPayload","_base64DecodeStringUrlSafe","JSON","parse","atob","decodeURIComponent","escape","_decode","charAt","fromCharCode","exec","header","JWSSig","_convertUrlSafeToRegularBase64EncodedString","slice","correlationId","join","_decimalToHex","toString","crypto","msCrypto","getRandomValues","Uint8Array","Math","random","parseInt","round","Date","getTime","getElementById","createElement","opera","navigator","userAgent","setAttribute","style","visibility","position","width","height","borderWidth","getElementsByTagName","appendChild","insertAdjacentHTML","frames","cacheLocation","_supportsLocalStorage","localStorage","setItem","_supportsSessionStorage","sessionStorage","getItem","removeItem","_libVersion","toUTCString","stack","errorPii","warnPii","inject","Function","LogLevel","Logger","activeLogLevel","undefined","_instance","LoggerImpl","subscribe","listeners","forEach","listener","clearSubscribers","count","write","writeJSON","json","stringify","entry","err","data","subscribers","map","subscriber","msg","format","console","method","getCtxCallback","context","apply","params","dateAdd","date","interval","units","ret","setFullYear","getFullYear","setMonth","getMonth","setDate","getDate","setTime","combine","paths","filter","path","stringIsNullOrEmpty","getRandomString","chars","text","Array","floor","getGUID","now","isFunc","objectDefinedNotNull","obj","isArray","array","constructor","target","source","noOverwrite","check","getOwnPropertyNames","v","reduce","isUrlAbsolute","url","sanitizeGuid","guid","matches","jsS","hOP","getHashCode","charCodeAt","objectEntries","entries","keys","objectToMap","Map","mergeMaps","maps","set","_v","assign","RuntimeConfig","extendStatics","setPrototypeOf","__proto__","__extends","__","__decorate","decorators","desc","arguments","getOwnPropertyDescriptor","Reflect","decorate","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","rejected","result","done","then","__generator","y","_","label","sent","trys","ops","verb","iterator","op","TypeError","pop","__values","__read","ar","__spread","concat","mergeHeaders","Request","headers","append","mergeOptions","getADALResource","u","URL","protocol","hostname","fetch","options","_token","token","Headers","getToken","resource","aadTokenProviderFactory","getTokenProvider","store","defaultTimeoutMinutes","enabled","enableCacheExpiration","cacheExpirationHandler","PnPClientStorageWrapper","MemoryStorage","persistable","expiration","delete","put","expire","createPersistable","getOrPut","deleteExpired","defaultTimeout","defaultCachingTimeoutSeconds","pnp","cacheExpirationIntervalMilliseconds","catch","_store","size","clear","index","from","_local","_session","_settings","add","addJSON","load","provider","getConfiguration","getJSON","wrappedProvider","cacheKey","cacheStore","selectPnPCache","getWrappedProvider","providedConfig","pnpCache","PnPClientStorage","local","session","_batchId","_reqs","_deps","_rDeps","_index","sort","info1","info2","track","batchee","batch","batchIndex","id","requestId","toUpperCase","parser","addDependency","resolver","addResolveBatchDependency","execute","all","executeImpl","storeName","defaultCachingStore","CachingOptions","storage","cacheOptions","response","cacheData","addProp","configurable","_enableExtensions","globaExtensions","ObjExtensionsSym","extendGlobal","extendCol","extendObj","extensions","has","extendFactory","clearGlobalExtensions","disableExtensions","enableExtensions","applyFactoryExtensions","args","extensionOrDefault","or","extension","rest","invoker","invokableFactory","defaultAction","as","ags","ie11","Proxy","_thisArg","argArray","receiver","handleError","parseImpl","parseFloat","status","txt","parseODataJSON","ok","init","results","blob","arrayBuffer","buffer","statusText","isHttpRequestError","clone","HttpRequestError","cloneQueryableData","parsed","batchDependency","cachingOptions","clientFactory","dataSeed","_data","cloneParentWasCaching","parentUrl","query","useCaching","toUrl","pathPart","configure","configureFrom","usingCaching","globalCacheDisable","usingParser","withPipeline","pipeline","pipes","inBatch","hasBatch","addBatchDependency","cloneTo","settings","includeBatch","cloneParentCacheOptions","setResult","hasResult","shift","pipe","promise","ctx","returnResult","isBatched","requestPipelineMethod","alwaysRun","propertyKey","descriptor","logStart","caching","hydrate","CachingParserWrapper","send","batchId","client","opts","logEnd","getDefaultPipeline","pipelineBinder","defaultPipelineBinder","previous","metadata","type","emptyGuid","SPRuntimeConfig","spPart","baseUrl","spfxContext","pageContext","web","absoluteUrl","fetchClientFactory","extractWebUrl","candidateUrl","substr","tag","originalMethod","getClientTag","deleteFromCollection","methodName","isTagged","_impl","_digestCache","webUrl","cachedDigest","digests","fetchRaw","cache","credentials","resp","GetContextWebInformation","newCachedDigest","FormDigestTimeoutSeconds","FormDigestValue","getDigestFactory","clientTag","digest","rawHeaders","retry","setRetry","delay","attempts","retryCount","post","patch","toAbsoluteUrl","_spPageContextInfo","webAbsoluteUrl","webServerRelativeUrl","spClientBinder","operation","toUrlAndQuery","spGet","_forceCaching","spPost","spDelete","spPatch","spPostDelete","spPostDeleteETag","eTag","spInvokableFactory","lastIndexOf","aliasedParams","match","labelName","char","select","selects","expand","expands","additionalPath","getParent","SharePointQueryable","orderBy","ascending","skip","top","SharePointQueryableCollection","_update","mapper","props","SharePointQueryableInstance","deleteable","deleteableWithETag","defaultPath","odataUrlFrom","candidate","parts","__metadata","uri","editLink","spODataEntity","spODataEntityArray","ParseResponse","responses","statusRegExp","lines","line","trim","Response","requests","absoluteRequestUrl","batchBody","currentChangeSetId","reqInfo","castHeaders","batchOptions","SPBatch","request","_options","_baseUrl","SPRest","setup","escapeQueryStrValue","Web","getRootWeb","rootWeb","Url","getContextInfo","q","Site","SupportedSchemaVersions","createBatch","site","siteId","Id","getDocumentLibraries","absoluteWebUrl","GetDocumentLibraries","getWebUrlFromPageUrl","absolutePageUrl","GetWebUrlFromPageUrl","getChanges","postBody","openWebById","webId","createCommunicationSite","title","lcid","shareByEmailEnabled","description","classification","siteDesignId","hubSiteId","owner","createCommunicationSiteFromProps","Classification","Description","HubSiteId","Lcid","Owner","ShareByEmailEnabled","SiteDesignId","Title","WebTemplate","WebTemplateExtensionId","createModernTeamSite","displayName","alias","isPublic","owners","createModernTeamSiteFromProps","optionalParams","CreationOptions","Owners","_Site","template","language","inheritPermissions","Language","UseSamePermissionsAsParentSite","Webs","_Webs","getParentWeb","ParentWeb","getSubwebsFilteredForCurrentUser","nWebTemplateFilter","nConfigurationFilter","update","properties","applyTheme","colorPaletteUrl","fontSchemeUrl","backgroundImageUrl","shareGenerated","applyWebTemplate","availableWebTemplates","includeCrossLanugage","mapToIcon","filename","progId","getStorageEntity","setStorageEntity","comments","removeStorageEntity","_Web","toResourcePath","DecodedUrl","RenderListDataOptions","ControlMode","getById","List","getByTitle","enableContentTypes","additionalSettings","addSettings","list","ensure","addOrUpdateSettings","ContentTypesEnabled","created","ensureSiteAssetsLibrary","Lists","ensureSitePagesLibrary","_Lists","getItemsByCAMLQuery","getListItemChangesSinceToken","recycle","Recycle","renderListData","viewXml","RenderListData","renderListDataAsStream","overrideParameters","queryParams","RenderOptions","renderListFormData","itemId","formId","RenderListFormData","reserveListItemId","ReserveListItemId","getListItemEntityTypeFullName","ListItemEntityTypeFullName","addValidateUpdateItemUsingPath","formValues","decodedUrl","bNewDocumentUpdate","checkInComment","additionalProps","addProps","FolderPath","leafName","LeafName","objectType","UnderlyingObjectType","listItemCreateInfo","res","AddValidateUpdateItemUsingPath","getList","listRelativeUrl","getCatalog","Item","getItemByStringId","stringId","reverse","getPaged","getAll","requestSize","acceptHeader","items","Items","itemsCollector","gatherer","last","hasNext","getNext","listItemEntityTypeFullName","removeDependency","ensureListItemEntityTypeName","listItemEntityType","item","candidatelistItemEntityTypeFullName","_Items","ItemVersions","poster","getWopiFrameUrl","action","GetWOPIFrameUrl","validateUpdateListItem","versionId","ItemVersion","_ItemVersions","nextUrl","_parent","__next","listTitle","keyFieldName","valueFieldName","lists","asCaching","convertToResponse","spResponse","responseHeaders","statusCode","SP","RequestExecutor","temp","addinWebUrl","executor","requestOptions","success","binaryStringRequestBody","executeAsync","PrincipalType","PrincipalSource","PageType","objectToSPKeyValueCollection","Key","Value","ValueType","InvalidFileFolderNameCharsOnlineRegex","InvalidFileFolderNameCharsOnPremiseRegex","containsInvalidFileFolderChars","input","onPremise","stripInvalidFileFolderChars","replacer","crossDomainSite","addInWebUrl","hostWebUrl","_cdImpl","crossDomainWeb","urlPart","endpoint","GraphEndpoints","Beta","V1","regex","replaces","_displayCallback","_loginPromise","fromSPFxContext","ensureAuthContext","AdalClient","_authContext","tok","popupWindow","pollTimer","CheckinType","MoveOperations","TemplateFileType","GraphRuntimeConfig","graphPart","retryContext","graphClientBinder","graphGet","graphPost","graphDelete","graphPatch","graphPut","graphInvokableFactory","setEndpoint","num","skipToken","GraphQueryableCollection","search","GraphQueryableInstance","batchUrl","maxRequests","makeUrlRelative","formatRequests","requestFragment","parseResponse","graphResponse","code","parsedResponses","fill","responseId","nextLink","requestsChunk","splice","batchRequest","GraphBatch","parsedResponse","chain","graph","getByName","File","content","shouldOverWrite","Files","file","addUsingPath","Overwrite","AutoCheckoutOnInvalidData","XorHash","addChunked","progress","chunkSize","setContentChunked","addTemplateFile","fileUrl","templateFileType","_Files","Versions","approve","comment","cancelUpload","uploadId","checkin","checkinType","Major","checkout","copyTo","copyByPath","destUrl","KeepBoth","srcUrl","webBaseUrl","hostUrl","destPath","ResetAuthorAndCreatedOnCopy","ShouldBypassSharedLocks","srcPath","deny","moveTo","moveOperations","moveByPath","publish","undoCheckout","unpublish","getText","getBlob","getBuffer","setContent","listItemAllFields","fileSize","totalBlocks","blockNumber","currentPointer","stage","startUpload","continueUpload","finishUpload","fragment","StartUpload","fileOffset","ContinueUpload","Version","deleteAll","deleteById","recycleByID","deleteByLabel","recycleByLabel","restoreByLabel","_Versions","getAppById","App","syncSolutionToTeams","useSharePointItemId","appId","listId","listItems","AppCatalog","adder","deploy","skipFeatureDeployment","do","retract","install","uninstall","upgrade","remove","getAppCatalog","getTenantAppCatalogWeb","CorporateCatalogUrl","Attachment","Attachments","addMultiple","files","deleteMultiple","recycleMultiple","_Attachments","getParsed","getNextOrder","collection","max","order","reindex","columns","controls","getFileByServerRelativeUrl","fileRelativeUrl","getFileByServerRelativePath","getFileById","uniqueId","getFileByUrl","PromotedState","Comments","Comment","_Comments","Replies","like","unlike","_Replies","initFrom","ClientsidePage","getLikedBy","getLikedByInformation","noInit","sections","commentsDisabled","_bannerImageDirty","_pageSettings","controlType","pageSettingsSlice","isDefaultDescription","isDefaultThumbnail","_layoutPart","_ClientsidePage","getDefaultLayoutPart","fromJSON","dataVersion","instanceId","authorByline","authors","layoutType","showPublishDate","showTopicHeader","textAlignment","topicHeader","serverProcessedContent","htmlStrings","searchablePlainTexts","imageSources","links","PageLayoutType","BannerImageUrl","TopicHeader","findIndex","layoutIndex","AuthorByline","hasVerticalSection","addVerticalSection","addSection","section","sectionIndex","pageData","canvasControls","CanvasContent1","layouts","LayoutWebpartsContent","setControls","CommentsDisabled","save","origImgUrl","imgFile","r1","r2","r3","UniqueId","ParentList","bannerImageUrl","imageSource","customMetadata","IsPageCheckedOutToCurrentUser","saveBody","getCanvasContent1","getLayoutWebpartsContent","updater","discardPageCheckout","promoteToNews","promoteNewsImpl","findControlById","findControl","predicate","copy","pageName","promotedState","CreateClientsidePage","pageLayout","page","getControls","setBannerImage","imageSourceType","translateX","translateY","altText","setAuthorById","authorId","userLoginData","setAuthorByLoginName","LoginName","authorLoginName","role","UserPrincipalName","initer","listData","itemData","mergeColumnToTree","part","mergePartToTree","textData","innerHTML","canvasData","column","displayMode","emphasis","getEmphasisObj","control","zoneEmphasis","VersionInfo","LastVersionCreatedBy","LastVersionCreated","positionData","sectionFactor","zoneIndex","getOrCreateSection","addColumn","addControl","ClientsidePageFromFile","pageInitData","newPage","_emphasis","_memId","_order","_layoutIndex","factor","defaultColumn","CanvasColumn","Default","_section","getControl","_column","onColumnChange","setData","ClientsideText","anchorComponentId","startsWith","controlIndex","col","addedFromPersistedData","editorType","ClientsideWebpart","fromComponentDef","definition","import","webPartData","reservedHeight","reservedWidth","setProperties","getProperties","component","componendId","preconfiguredEntries","Manifest","default","webPartId","getClientsideWebParts","addClientsidePage","layout","loadClientsidePage","Folder","Folders","folder","serverRelativeUrl","overwrite","_Folders","getShareable","shareable","getDefaultColumnValues","rootFolder","ServerRelativePath","baseFilePath","xml","setDefaultColumnValues","defaults","fieldDefs","tags","fieldDefault","fd","InternalName","fieldDef","TypeAsString","wssId","termName","termId","eventReceivers","eventReceiverCreationInformation","EventType","ReceiverAssembly","ReceiverClass","ReceiverName","SequenceNumber","Synchronization","folderProps","serRelPath","vti_x005f_listname","fieldDefaults","merge","docLib","folderPath","existingDefaults","filteredExistingDefaults","existing","find","ed","clearDefaultColumnValues","addAvailableContentType","contentTypeId","ContentTypes","contentType","ContentType","group","_ContentTypes","FieldLinks","FieldLink","_FieldLinks","force","Features","featdefScope","featureId","feature","Feature","_Features","deactivate","DefinitionId","FieldTypes","DateTimeFieldFormatType","DateTimeFieldFriendlyFormatType","AddFieldOptions","CalendarType","UrlFieldFormatType","FieldUserSelectionMode","ChoiceFieldFormatType","Field","getByInternalNameOrTitle","createFieldAsXml","SchemaXml","Fields","field","fieldType","addText","maxLength","FieldTypeKind","MaxLength","addCalculated","formula","dateFormat","outputType","Text","DateFormat","Formula","OutputType","addDateTime","displayFormat","calendarType","friendlyDisplayFormat","DateOnly","Gregorian","Unspecified","DateTimeCalendarType","DisplayFormat","FriendlyDisplayFormat","addNumber","minValue","maxValue","MinimumValue","MaximumValue","addCurrency","currencyLocalId","CurrencyLocaleId","addMultilineText","numberOfLines","richText","restrictedMode","appendOnly","allowHyperlink","AllowHyperlink","AppendOnly","NumberOfLines","RestrictedMode","RichText","addUrl","Hyperlink","addUser","selectionMode","SelectionMode","addLookup","lookupListId","lookupFieldName","LookupFieldName","LookupListId","addChoice","choices","fillIn","Dropdown","Choices","EditFormat","FillInChoice","addMultiChoice","addBoolean","addDependentLookupField","primaryLookupFieldId","showField","addLocation","_Fields","req","setShowInDisplayForm","show","setShowInEditForm","setShowInNewForm","getFolderByServerRelativeUrl","folderRelativeUrl","getFolderByServerRelativePath","getFolderById","Form","_Forms","Forms","HubSite","_HubSites","HubSites","getSite","SiteUrl","joinHubSite","registerHubSite","unRegisterHubSite","hubSiteData","forceRefresh","syncHubSiteTheme","NavigationNode","visible","IsVisible","NavigationNodes","node","moveAfter","nodeId","previousNodeId","_Navigation","Navigation","getMenuState","menuNodeKey","depth","mapProviderName","customProperties","NavigationService","getMenuNodeKey","currentUrl","UrlZone","clientPeoplePickerQuery","profileLoader","Profiles","amIFollowedBy","loginName","amIFollowing","getFollowedTags","maxCount","getFollowersFor","_Profiles","getPeopleFollowedBy","getPropertiesFor","getUserProfilePropertyFor","propertyName","hideSuggestion","isFollowing","follower","followee","setMyProfilePic","profilePicSource","reader","FileReader","onload","readAsArrayBuffer","Uint16Array","setSingleValueProfileProperty","accountName","propertyValue","setMultiValuedProfileProperty","propertyValues","createPersonalSiteEnqueueBulk","emails","ownerUserProfile","userProfile","createPersonalSite","interactiveRequest","shareAllSocialData","share","clientPeoplePickerResolveUser","clientPeoplePickerSearchUser","ProfileLoaderFactory","ProfileLoader","ClientPeoplePickerFactory","getBodyFrom","ClientPeoplePickerResolveUser","ClientPeoplePickerSearchUser","ClientPeoplePickerQuery","TimeZone","TimeZones","getInstalledLanguages","_RegionalSettings","RegionalSettings","utcToLocalTime","utcTime","dateIsoString","toISOString","UTCToLocalTime","localTimeToUTC","localTime","getTimezoneOffset","LocalTimeToUTC","_TimeZone","_TimeZones","getValueForUICultureBinder","propName","cultureName","titleResource","descriptionResource","UserCustomActionRegistrationType","UserCustomActionScope","UserCustomAction","UserCustomActions","_UserCustomActions","getRelatedItems","sourceListName","sourceItemId","RelatedItemManager","SourceItemID","SourceListName","getPageOneRelatedItems","addSingleLink","sourceWebUrl","targetListName","targetItemID","targetWebUrl","tryAddReverseLink","SourceWebUrl","TargetItemID","TargetListName","TargetWebUrl","TryAddReverseLink","addSingleLinkToUrl","targetItemUrl","TargetItemUrl","addSingleLinkFromUrl","sourceItemUrl","targetItemId","SourceItemUrl","deleteSingleLink","tryDeleteReverseLink","TryDeleteReverseLink","_RelatedItemManager","funcs","toPropCase","str","$1","SearchQueryBuilder","queryText","_query","Querytext","self","proxy","pk","mappedPk","propKey","SortDirection","ReorderingRuleMatchType","QueryPropertyValueType","queryRegex","queryInit","parseQuery","HitHighlightedProperties","fixArrProp","Properties","RefinementFilters","ReorderingRules","SelectProperties","SortList","prop","toSearchQuery","_Search","Search","rawResponse","_url","_raw","_primary","postquery","RawSearchResults","ElapsedTime","PrimaryQueryResult","RelevantResults","RowCount","TotalRows","TotalRowsIncludingDuplicates","formatSearchResults","Table","Rows","getPage","pageNumber","pageSize","rows","RowLimit","StartRow","rawResults","tempResults","tempResult","cells","Cells","cell","writable","mapQueryToQueryString","PeopleNames","s_1","suggest","s_2","PersonalResults","Queries","querytext","querySetter","checkProp","sp","_Suggest","Suggest","Documents","ItemsMatchingContentType","ItemsMatchingTag","ItemsRelatedToCurrentUser","ItemsWithSameKeywordAsThisItem","LocalPeopleResults","LocalReportsAndDataResults","LocalSharePointResults","LocalVideoResults","Pages","Pictures","Popular","RecentlyChangedItems","RecommendedItems","Wiki","searchWithCaching","searchSuggest","PermissionKind","SharingRole","SPSharedObjectType","SharingDomainRestrictionMode","SharingOperationStatusCode","SharingLinkKind","RoleType","SiteUser","getByEmail","getByLoginName","removeById","SiteUsers","removeByLoginName","_SiteUsers","user","SiteGroups","SiteGroup","groupName","_SiteGroups","retGroup","setUserAsOwner","userId","RoleAssignment","principalId","roleDefId","RoleAssignments","_RoleAssignments","RoleDefinition","getByType","roleTypeKind","basePermissions","BasePermissions","Name","Order","_RoleDefinitions","RoleDefinitions","getUserEffectivePermissions","GetUserEffectivePermissions","getCurrentUserEffectivePermissions","EffectiveBasePermissions","breakRoleInheritance","copyRoleAssignments","clearSubscopes","resetRoleInheritance","userHasPermissions","permission","perms","hasPermissions","currentUserHasPermissions","perm","FullMask","High","Low","shareObject","bypass","sendShareObjectRequest","getRoleValue","includeAnonymousLinkInEmail","propagateAcl","useSimplifiedRoles","roleValue","loginNames","userStr","peoplePickerInput","emailData","emailBody","emailSubject","subject","sendEmail","getShareLink","kind","expString","createLink","linkKind","checkPermissions","recipients","getSharingInformation","getObjectSharingSettings","unshareObject","deleteLinkByKind","unshareLink","shareId","shareWith","requireSignin","roleFilter","Edit","Contributor","Reader","def","w","Guest","View","checkSharingPermissions","unshare","deleteSharingLinkByKind","shareEverything","dependency","shareObjectRaw","createSiteDesign","creationInfo","SiteDesignsCloneFactory","applySiteDesign","getSiteDesigns","getSiteDesignMetadata","updateSiteDesign","updateInfo","deleteSiteDesign","getSiteDesignRights","grantSiteDesignRights","principalNames","grantedRights","revokeSiteDesignRights","addSiteDesignTask","addSiteDesignTaskToCurrentWeb","getSiteDesignTask","task","getSiteDesignRun","getSiteDesignRunStatus","runId","SiteDesigns","getSiteDesignRuns","createDefaultAssociatedGroups","groupNameSeed","siteOwner","siteOwner2","SiteScriptActionOutcome","getSiteScripts","SiteScriptsCloneFactory","createSiteScript","getSiteScriptMetadata","deleteSiteScript","updateSiteScript","Content","getSiteScriptFromList","listUrl","getSiteScriptFromWeb","executeSiteScriptAction","actionDefinition","SiteScripts","getSiteScript","extractInfo","absoluteListUrl","ensureUser","logonName","getUserById","SocialActorType","SocialActorTypes","SocialFollowResult","SocialStatusCode","MySocial","getFollowedSitesUri","SocialCloneFactory","FollowedSitesUri","getFollowedDocumentsUri","FollowedDocumentsUri","follow","actorInfo","createSocialActorInfoRequestBody","isFollowed","stopFollowing","_Social","Social","followed","types","MySocialCloneFactory","Followed","followedCount","FollowedCount","followers","Followers","suggestions","Suggestions","_MySocial","excute","Body","From","Subject","To","CC","BCC","AdditionalHeaders","UtilitiesCloneFactory","getCurrentUserEmailAddresses","resolvePrincipal","scopes","sources","inputIsEmailOnly","addToUserInfoList","matchUserInfoList","searchPrincipals","createEmailBodyForInvitation","pageAddress","expandGroupsToPrincipals","inputs","createWikiPage","Utilities","subscriptionId","Subscription","notificationUrl","expirationDate","clientState","subscription","_Subscriptions","Subscriptions","expirationDateTime","ViewScope","personalView","Views","view","_Views","ViewFields","renderAsHtml","setViewXml","getSchemaXml","fieldTitleOrInternalName","move","removeAll","fieldInternalName","_ViewFields","getView","viewId","WebPartsPersonalizationScope","WebPartDefinitions","export","LimitedWebPartManagerCloneFactory","webPartXml","LimitedWebPartManager","WebPartDefinition","getByControlId","saveChanges","zoneId","getLimitedWebPartManager","scope","Shared","updateable","updateableWithETag","addable","Conversation","Threads","_Conversation","Conversations","_Conversations","Thread","Posts","reply","_Thread","_Threads","forward","Post","_Post","_Posts","Senders","remover","addFile","bytes","contentBytes","DirectoryObjectTypes","GroupType","getMemberObjects","securityEnabledOnly","DirectoryObject","getMemberGroups","checkMemberGroups","groupIds","_DirectoryObject","DirectoryObjects","getByIds","ids","directoryObject","_DirectoryObjects","addFavorite","Group","removeFavorite","resetUnseenCount","subscribeByMail","unsubscribeByMail","getCalendarView","start","end","_Group","Groups","mailNickname","groupType","additionalProperties","mailEnabled","Office365","securityEnabled","Security","groupTypes","_Groups","Calendars","_Calendars","Calendar","Events","_Event","event","_Events","People","_User","User","Users","_Users","_People","Contact","_Contact","Contacts","givenName","surName","emailAddresses","businessPhones","contact","_Contacts","ContactFolder","ContactFolders","_ContactFolder","parentFolderId","contactFolder","_ContactFolders","Insights","TrendingInsights","UsedInsights","SharedInsights","_Insights","TrendingInsight","Resource","_TrendingInsights","UsedInsight","_UsedInsights","SharedInsight","_SharedInsights","_Resource","Invitations","invitedUserEmailAddress","inviteRedirectUrl","_Invitations","Member","Members","_Members","Message","Messages","_Messages","MailFolder","MailFolders","_MailFolders","MailboxSettings","_MailboxSettings","sendMail","Drive","Root","DriveItems","getItemById","DriveItem","_Drive","Drives","_Drives","searcher","_Root","parentReference","getContent","_DriveItem","_DriveItems","OneNote","Notebooks","Sections","_OneNote","Notebook","notebook","_Notebooks","Section","_Sections","Photo","_Photo","Planner","Plans","Tasks","Buckets","_Planner","Plan","_Plan","plan","_Plans","Task","_Task","planId","assignments","bucketId","_Tasks","Bucket","_Bucket","orderHint","bucket","_Buckets","_Subscription","changeType","Team","Channels","archive","shouldSetSpoSiteReadOnlyForMembers","unarchive","cloneTeam","partsToClone","_Team","Teams","_Teams","Channel","Tabs","channel","_Channels","Tab","_Tab","appUrl","tab","_Tabs","createTeam","team","util","Def"],"mappings":"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","file":"pnp.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"pnp\"] = factory();\n\telse\n\t\troot[\"pnp\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","// this is the ambient nodejs global var which may or may not exist\ndeclare var global: any;\n\n// all the things we expect to maybe exist on global\nexport interface IGlobal {\n    _spPageContextInfo?: {\n        webAbsoluteUrl?: string;\n        webServerRelativeUrl?: string\n    };\n\n    location?: string;\n\n    fetch(url: string, options: any): Promise<Response>;\n}\n\n// export either window or global\nexport const safeGlobal: IGlobal = typeof global === \"undefined\" ? window : global;\n","/*! adal-angular v1.0.17 2018-02-27 */\r\nvar AuthenticationContext=function(){\"use strict\";return AuthenticationContext=function(a){if(this.REQUEST_TYPE={LOGIN:\"LOGIN\",RENEW_TOKEN:\"RENEW_TOKEN\",UNKNOWN:\"UNKNOWN\"},this.RESPONSE_TYPE={ID_TOKEN_TOKEN:\"id_token token\",TOKEN:\"token\"},this.CONSTANTS={ACCESS_TOKEN:\"access_token\",EXPIRES_IN:\"expires_in\",ID_TOKEN:\"id_token\",ERROR_DESCRIPTION:\"error_description\",SESSION_STATE:\"session_state\",ERROR:\"error\",STORAGE:{TOKEN_KEYS:\"adal.token.keys\",ACCESS_TOKEN_KEY:\"adal.access.token.key\",EXPIRATION_KEY:\"adal.expiration.key\",STATE_LOGIN:\"adal.state.login\",STATE_RENEW:\"adal.state.renew\",NONCE_IDTOKEN:\"adal.nonce.idtoken\",SESSION_STATE:\"adal.session.state\",USERNAME:\"adal.username\",IDTOKEN:\"adal.idtoken\",ERROR:\"adal.error\",ERROR_DESCRIPTION:\"adal.error.description\",LOGIN_REQUEST:\"adal.login.request\",LOGIN_ERROR:\"adal.login.error\",RENEW_STATUS:\"adal.token.renew.status\",ANGULAR_LOGIN_REQUEST:\"adal.angular.login.request\"},RESOURCE_DELIMETER:\"|\",CACHE_DELIMETER:\"||\",LOADFRAME_TIMEOUT:6e3,TOKEN_RENEW_STATUS_CANCELED:\"Canceled\",TOKEN_RENEW_STATUS_COMPLETED:\"Completed\",TOKEN_RENEW_STATUS_IN_PROGRESS:\"In Progress\",LOGGING_LEVEL:{ERROR:0,WARN:1,INFO:2,VERBOSE:3},LEVEL_STRING_MAP:{0:\"ERROR:\",1:\"WARNING:\",2:\"INFO:\",3:\"VERBOSE:\"},POPUP_WIDTH:483,POPUP_HEIGHT:600},AuthenticationContext.prototype._singletonInstance)return AuthenticationContext.prototype._singletonInstance;if(AuthenticationContext.prototype._singletonInstance=this,this.instance=\"https://login.microsoftonline.com/\",this.config={},this.callback=null,this.popUp=!1,this.isAngular=!1,this._user=null,this._activeRenewals={},this._loginInProgress=!1,this._acquireTokenInProgress=!1,this._renewStates=[],this._callBackMappedToRenewStates={},this._callBacksMappedToRenewStates={},this._openedWindows=[],this._requestType=this.REQUEST_TYPE.LOGIN,window._adalInstance=this,a.displayCall&&\"function\"!=typeof a.displayCall)throw new Error(\"displayCall is not a function\");if(!a.clientId)throw new Error(\"clientId is required\");this.config=this._cloneConfig(a),void 0===this.config.navigateToLoginRequestUrl&&(this.config.navigateToLoginRequestUrl=!0),this.config.popUp&&(this.popUp=!0),this.config.callback&&\"function\"==typeof this.config.callback&&(this.callback=this.config.callback),this.config.instance&&(this.instance=this.config.instance),this.config.loginResource||(this.config.loginResource=this.config.clientId),this.config.redirectUri||(this.config.redirectUri=window.location.href.split(\"?\")[0].split(\"#\")[0]),this.config.postLogoutRedirectUri||(this.config.postLogoutRedirectUri=window.location.href.split(\"?\")[0].split(\"#\")[0]),this.config.anonymousEndpoints||(this.config.anonymousEndpoints=[]),this.config.isAngular&&(this.isAngular=this.config.isAngular),this.config.loadFrameTimeout&&(this.CONSTANTS.LOADFRAME_TIMEOUT=this.config.loadFrameTimeout)},\"undefined\"!=typeof window&&(window.Logging={piiLoggingEnabled:!1,level:0,log:function(a){}}),AuthenticationContext.prototype.login=function(){if(this._loginInProgress)return void this.info(\"Login in progress\");this._loginInProgress=!0;var a=this._guid();this.config.state=a,this._idTokenNonce=this._guid();var b=this._getItem(this.CONSTANTS.STORAGE.ANGULAR_LOGIN_REQUEST);b&&\"\"!==b?this._saveItem(this.CONSTANTS.STORAGE.ANGULAR_LOGIN_REQUEST,\"\"):b=window.location.href,this.verbose(\"Expected state: \"+a+\" startPage:\"+b),this._saveItem(this.CONSTANTS.STORAGE.LOGIN_REQUEST,b),this._saveItem(this.CONSTANTS.STORAGE.LOGIN_ERROR,\"\"),this._saveItem(this.CONSTANTS.STORAGE.STATE_LOGIN,a,!0),this._saveItem(this.CONSTANTS.STORAGE.NONCE_IDTOKEN,this._idTokenNonce,!0),this._saveItem(this.CONSTANTS.STORAGE.ERROR,\"\"),this._saveItem(this.CONSTANTS.STORAGE.ERROR_DESCRIPTION,\"\");var c=this._getNavigateUrl(\"id_token\",null)+\"&nonce=\"+encodeURIComponent(this._idTokenNonce);this.config.displayCall?this.config.displayCall(c):this.popUp?(this._saveItem(this.CONSTANTS.STORAGE.STATE_LOGIN,\"\"),this._renewStates.push(a),this.registerCallback(a,this.config.clientId,this.callback),this._loginPopup(c)):this.promptUser(c)},AuthenticationContext.prototype._openPopup=function(a,b,c,d){try{var e=window.screenLeft?window.screenLeft:window.screenX,f=window.screenTop?window.screenTop:window.screenY,g=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,h=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight,i=g/2-c/2+e,j=h/2-d/2+f,k=window.open(a,b,\"width=\"+c+\", height=\"+d+\", top=\"+j+\", left=\"+i);return k.focus&&k.focus(),k}catch(a){return this.warn(\"Error opening popup, \"+a.message),this._loginInProgress=!1,this._acquireTokenInProgress=!1,null}},AuthenticationContext.prototype._handlePopupError=function(a,b,c,d,e){this.warn(d),this._saveItem(this.CONSTANTS.STORAGE.ERROR,c),this._saveItem(this.CONSTANTS.STORAGE.ERROR_DESCRIPTION,d),this._saveItem(this.CONSTANTS.STORAGE.LOGIN_ERROR,e),b&&this._activeRenewals[b]&&(this._activeRenewals[b]=null),this._loginInProgress=!1,this._acquireTokenInProgress=!1,a&&a(d,null,c)},AuthenticationContext.prototype._loginPopup=function(a,b,c){var d=this._openPopup(a,\"login\",this.CONSTANTS.POPUP_WIDTH,this.CONSTANTS.POPUP_HEIGHT),e=c||this.callback;if(null==d){var f=\"Popup Window is null. This can happen if you are using IE\";return void this._handlePopupError(e,b,\"Error opening popup\",f,f)}if(this._openedWindows.push(d),-1!=this.config.redirectUri.indexOf(\"#\"))var g=this.config.redirectUri.split(\"#\")[0];else var g=this.config.redirectUri;var h=this,i=window.setInterval(function(){if(!d||d.closed||void 0===d.closed){var a=\"Popup Window closed\",c=\"Popup Window closed by UI action/ Popup Window handle destroyed due to cross zone navigation in IE/Edge\";return h.isAngular&&h._broadcast(\"adal:popUpClosed\",c+h.CONSTANTS.RESOURCE_DELIMETER+a),h._handlePopupError(e,b,a,c,c),void window.clearInterval(i)}try{var f=d.location;if(-1!=encodeURI(f.href).indexOf(encodeURI(g)))return h.isAngular?h._broadcast(\"adal:popUpHashChanged\",f.hash):h.handleWindowCallback(f.hash),window.clearInterval(i),h._loginInProgress=!1,h._acquireTokenInProgress=!1,h.info(\"Closing popup window\"),h._openedWindows=[],void d.close()}catch(a){}},1)},AuthenticationContext.prototype._broadcast=function(a,b){!function(){function a(a,b){b=b||{bubbles:!1,cancelable:!1,detail:void 0};var c=document.createEvent(\"CustomEvent\");return c.initCustomEvent(a,b.bubbles,b.cancelable,b.detail),c}if(\"function\"==typeof window.CustomEvent)return!1;a.prototype=window.Event.prototype,window.CustomEvent=a}();var c=new CustomEvent(a,{detail:b});window.dispatchEvent(c)},AuthenticationContext.prototype.loginInProgress=function(){return this._loginInProgress},AuthenticationContext.prototype._hasResource=function(a){var b=this._getItem(this.CONSTANTS.STORAGE.TOKEN_KEYS);return b&&!this._isEmpty(b)&&b.indexOf(a+this.CONSTANTS.RESOURCE_DELIMETER)>-1},AuthenticationContext.prototype.getCachedToken=function(a){if(!this._hasResource(a))return null;var b=this._getItem(this.CONSTANTS.STORAGE.ACCESS_TOKEN_KEY+a),c=this._getItem(this.CONSTANTS.STORAGE.EXPIRATION_KEY+a),d=this.config.expireOffsetSeconds||300;return c&&c>this._now()+d?b:(this._saveItem(this.CONSTANTS.STORAGE.ACCESS_TOKEN_KEY+a,\"\"),this._saveItem(this.CONSTANTS.STORAGE.EXPIRATION_KEY+a,0),null)},AuthenticationContext.prototype.getCachedUser=function(){if(this._user)return this._user;var a=this._getItem(this.CONSTANTS.STORAGE.IDTOKEN);return this._user=this._createUser(a),this._user},AuthenticationContext.prototype.registerCallback=function(a,b,c){this._activeRenewals[b]=a,this._callBacksMappedToRenewStates[a]||(this._callBacksMappedToRenewStates[a]=[]);var d=this;this._callBacksMappedToRenewStates[a].push(c),this._callBackMappedToRenewStates[a]||(this._callBackMappedToRenewStates[a]=function(c,e,f,g){d._activeRenewals[b]=null;for(var h=0;h<d._callBacksMappedToRenewStates[a].length;++h)try{d._callBacksMappedToRenewStates[a][h](c,e,f,g)}catch(f){d.warn(f)}d._callBacksMappedToRenewStates[a]=null,d._callBackMappedToRenewStates[a]=null})},AuthenticationContext.prototype._renewToken=function(a,b,c){this.info(\"renewToken is called for resource:\"+a);var d=this._addAdalFrame(\"adalRenewFrame\"+a),e=this._guid()+\"|\"+a;this.config.state=e,this._renewStates.push(e),this.verbose(\"Renew token Expected state: \"+e),c=c||\"token\";var f=this._urlRemoveQueryStringParameter(this._getNavigateUrl(c,a),\"prompt\");c===this.RESPONSE_TYPE.ID_TOKEN_TOKEN&&(this._idTokenNonce=this._guid(),this._saveItem(this.CONSTANTS.STORAGE.NONCE_IDTOKEN,this._idTokenNonce,!0),f+=\"&nonce=\"+encodeURIComponent(this._idTokenNonce)),f+=\"&prompt=none\",f=this._addHintParameters(f),this.registerCallback(e,a,b),this.verbosePii(\"Navigate to:\"+f),d.src=\"about:blank\",this._loadFrameTimeout(f,\"adalRenewFrame\"+a,a)},AuthenticationContext.prototype._renewIdToken=function(a,b){this.info(\"renewIdToken is called\");var c=this._addAdalFrame(\"adalIdTokenFrame\"),d=this._guid()+\"|\"+this.config.clientId;this._idTokenNonce=this._guid(),this._saveItem(this.CONSTANTS.STORAGE.NONCE_IDTOKEN,this._idTokenNonce,!0),this.config.state=d,this._renewStates.push(d),this.verbose(\"Renew Idtoken Expected state: \"+d);var e=null===b||void 0===b?null:this.config.clientId,b=b||\"id_token\",f=this._urlRemoveQueryStringParameter(this._getNavigateUrl(b,e),\"prompt\");f+=\"&prompt=none\",f=this._addHintParameters(f),f+=\"&nonce=\"+encodeURIComponent(this._idTokenNonce),this.registerCallback(d,this.config.clientId,a),this.verbosePii(\"Navigate to:\"+f),c.src=\"about:blank\",this._loadFrameTimeout(f,\"adalIdTokenFrame\",this.config.clientId)},AuthenticationContext.prototype._urlContainsQueryStringParameter=function(a,b){return new RegExp(\"[\\\\?&]\"+a+\"=\").test(b)},AuthenticationContext.prototype._urlRemoveQueryStringParameter=function(a,b){var c=new RegExp(\"(\\\\&\"+b+\"=)[^&]+\");return a=a.replace(c,\"\"),c=new RegExp(\"(\"+b+\"=)[^&]+&\"),a=a.replace(c,\"\"),c=new RegExp(\"(\"+b+\"=)[^&]+\"),a=a.replace(c,\"\")},AuthenticationContext.prototype._loadFrameTimeout=function(a,b,c){this.verbose(\"Set loading state to pending for: \"+c),this._saveItem(this.CONSTANTS.STORAGE.RENEW_STATUS+c,this.CONSTANTS.TOKEN_RENEW_STATUS_IN_PROGRESS),this._loadFrame(a,b);var d=this;setTimeout(function(){if(d._getItem(d.CONSTANTS.STORAGE.RENEW_STATUS+c)===d.CONSTANTS.TOKEN_RENEW_STATUS_IN_PROGRESS){d.verbose(\"Loading frame has timed out after: \"+d.CONSTANTS.LOADFRAME_TIMEOUT/1e3+\" seconds for resource \"+c);var a=d._activeRenewals[c];a&&d._callBackMappedToRenewStates[a]&&d._callBackMappedToRenewStates[a](\"Token renewal operation failed due to timeout\",null,\"Token Renewal Failed\"),d._saveItem(d.CONSTANTS.STORAGE.RENEW_STATUS+c,d.CONSTANTS.TOKEN_RENEW_STATUS_CANCELED)}},d.CONSTANTS.LOADFRAME_TIMEOUT)},AuthenticationContext.prototype._loadFrame=function(a,b){var c=this;c.info(\"LoadFrame: \"+b);var d=b;setTimeout(function(){var b=c._addAdalFrame(d);\"\"!==b.src&&\"about:blank\"!==b.src||(b.src=a,c._loadFrame(a,d))},500)},AuthenticationContext.prototype.acquireToken=function(a,b){if(this._isEmpty(a))return this.warn(\"resource is required\"),void b(\"resource is required\",null,\"resource is required\");var c=this.getCachedToken(a);return c?(this.info(\"Token is already in cache for resource:\"+a),void b(null,c,null)):this._user||this.config.extraQueryParameter&&-1!==this.config.extraQueryParameter.indexOf(\"login_hint\")?void(this._activeRenewals[a]?this.registerCallback(this._activeRenewals[a],a,b):(this._requestType=this.REQUEST_TYPE.RENEW_TOKEN,a===this.config.clientId?this._user?(this.verbose(\"renewing idtoken\"),this._renewIdToken(b)):(this.verbose(\"renewing idtoken and access_token\"),this._renewIdToken(b,this.RESPONSE_TYPE.ID_TOKEN_TOKEN)):this._user?(this.verbose(\"renewing access_token\"),this._renewToken(a,b)):(this.verbose(\"renewing idtoken and access_token\"),this._renewToken(a,b,this.RESPONSE_TYPE.ID_TOKEN_TOKEN)))):(this.warn(\"User login is required\"),void b(\"User login is required\",null,\"login required\"))},AuthenticationContext.prototype.acquireTokenPopup=function(a,b,c,d){if(this._isEmpty(a))return this.warn(\"resource is required\"),void d(\"resource is required\",null,\"resource is required\");if(!this._user)return this.warn(\"User login is required\"),void d(\"User login is required\",null,\"login required\");if(this._acquireTokenInProgress)return this.warn(\"Acquire token interactive is already in progress\"),void d(\"Acquire token interactive is already in progress\",null,\"Acquire token interactive is already in progress\");var e=this._guid()+\"|\"+a;this.config.state=e,this._renewStates.push(e),this._requestType=this.REQUEST_TYPE.RENEW_TOKEN,this.verbose(\"Renew token Expected state: \"+e);var f=this._urlRemoveQueryStringParameter(this._getNavigateUrl(\"token\",a),\"prompt\");if(f+=\"&prompt=select_account\",b&&(f+=b),c&&-1===f.indexOf(\"&claims\"))f+=\"&claims=\"+encodeURIComponent(c);else if(c&&-1!==f.indexOf(\"&claims\"))throw new Error(\"Claims cannot be passed as an extraQueryParameter\");f=this._addHintParameters(f),this._acquireTokenInProgress=!0,this.info(\"acquireToken interactive is called for the resource \"+a),this.registerCallback(e,a,d),this._loginPopup(f,a,d)},AuthenticationContext.prototype.acquireTokenRedirect=function(a,b,c){if(this._isEmpty(a))return this.warn(\"resource is required\"),void d(\"resource is required\",null,\"resource is required\");var d=this.callback;if(!this._user)return this.warn(\"User login is required\"),void d(\"User login is required\",null,\"login required\");if(this._acquireTokenInProgress)return this.warn(\"Acquire token interactive is already in progress\"),void d(\"Acquire token interactive is already in progress\",null,\"Acquire token interactive is already in progress\");var e=this._guid()+\"|\"+a;this.config.state=e,this.verbose(\"Renew token Expected state: \"+e);var f=this._urlRemoveQueryStringParameter(this._getNavigateUrl(\"token\",a),\"prompt\");if(f+=\"&prompt=select_account\",b&&(f+=b),c&&-1===f.indexOf(\"&claims\"))f+=\"&claims=\"+encodeURIComponent(c);else if(c&&-1!==f.indexOf(\"&claims\"))throw new Error(\"Claims cannot be passed as an extraQueryParameter\");f=this._addHintParameters(f),this._acquireTokenInProgress=!0,this.info(\"acquireToken interactive is called for the resource \"+a),this._saveItem(this.CONSTANTS.STORAGE.LOGIN_REQUEST,window.location.href),this._saveItem(this.CONSTANTS.STORAGE.STATE_RENEW,e,!0),this.promptUser(f)},AuthenticationContext.prototype.promptUser=function(a){a?(this.infoPii(\"Navigate to:\"+a),window.location.replace(a)):this.info(\"Navigate url is empty\")},AuthenticationContext.prototype.clearCache=function(){this._saveItem(this.CONSTANTS.STORAGE.LOGIN_REQUEST,\"\"),this._saveItem(this.CONSTANTS.STORAGE.ANGULAR_LOGIN_REQUEST,\"\"),this._saveItem(this.CONSTANTS.STORAGE.SESSION_STATE,\"\"),this._saveItem(this.CONSTANTS.STORAGE.STATE_LOGIN,\"\"),this._saveItem(this.CONSTANTS.STORAGE.STATE_RENEW,\"\"),this._renewStates=[],this._saveItem(this.CONSTANTS.STORAGE.NONCE_IDTOKEN,\"\"),this._saveItem(this.CONSTANTS.STORAGE.IDTOKEN,\"\"),this._saveItem(this.CONSTANTS.STORAGE.ERROR,\"\"),this._saveItem(this.CONSTANTS.STORAGE.ERROR_DESCRIPTION,\"\"),this._saveItem(this.CONSTANTS.STORAGE.LOGIN_ERROR,\"\"),this._saveItem(this.CONSTANTS.STORAGE.LOGIN_ERROR,\"\");var a=this._getItem(this.CONSTANTS.STORAGE.TOKEN_KEYS);if(!this._isEmpty(a)){a=a.split(this.CONSTANTS.RESOURCE_DELIMETER);for(var b=0;b<a.length&&\"\"!==a[b];b++)this._saveItem(this.CONSTANTS.STORAGE.ACCESS_TOKEN_KEY+a[b],\"\"),this._saveItem(this.CONSTANTS.STORAGE.EXPIRATION_KEY+a[b],0)}this._saveItem(this.CONSTANTS.STORAGE.TOKEN_KEYS,\"\")},AuthenticationContext.prototype.clearCacheForResource=function(a){this._saveItem(this.CONSTANTS.STORAGE.STATE_RENEW,\"\"),this._saveItem(this.CONSTANTS.STORAGE.ERROR,\"\"),this._saveItem(this.CONSTANTS.STORAGE.ERROR_DESCRIPTION,\"\"),this._hasResource(a)&&(this._saveItem(this.CONSTANTS.STORAGE.ACCESS_TOKEN_KEY+a,\"\"),this._saveItem(this.CONSTANTS.STORAGE.EXPIRATION_KEY+a,0))},AuthenticationContext.prototype.logOut=function(){this.clearCache(),this._user=null;var a;if(this.config.logOutUri)a=this.config.logOutUri;else{var b=\"common\",c=\"\";this.config.tenant&&(b=this.config.tenant),this.config.postLogoutRedirectUri&&(c=\"post_logout_redirect_uri=\"+encodeURIComponent(this.config.postLogoutRedirectUri)),a=this.instance+b+\"/oauth2/logout?\"+c}this.infoPii(\"Logout navigate to: \"+a),this.promptUser(a)},AuthenticationContext.prototype._isEmpty=function(a){return void 0===a||!a||0===a.length},AuthenticationContext.prototype.getUser=function(a){if(\"function\"!=typeof a)throw new Error(\"callback is not a function\");if(this._user)return void a(null,this._user);var b=this._getItem(this.CONSTANTS.STORAGE.IDTOKEN);this._isEmpty(b)?(this.warn(\"User information is not available\"),a(\"User information is not available\",null)):(this.info(\"User exists in cache: \"),this._user=this._createUser(b),a(null,this._user))},AuthenticationContext.prototype._addHintParameters=function(a){if(this._user&&this._user.profile)if(this._user.profile.sid&&-1!==a.indexOf(\"&prompt=none\"))this._urlContainsQueryStringParameter(\"sid\",a)||(a+=\"&sid=\"+encodeURIComponent(this._user.profile.sid));else if(this._user.profile.upn&&(this._urlContainsQueryStringParameter(\"login_hint\",a)||(a+=\"&login_hint=\"+encodeURIComponent(this._user.profile.upn)),!this._urlContainsQueryStringParameter(\"domain_hint\",a)&&this._user.profile.upn.indexOf(\"@\")>-1)){var b=this._user.profile.upn.split(\"@\");a+=\"&domain_hint=\"+encodeURIComponent(b[b.length-1])}return a},AuthenticationContext.prototype._createUser=function(a){var b=null,c=this._extractIdToken(a);return c&&c.hasOwnProperty(\"aud\")&&(c.aud.toLowerCase()===this.config.clientId.toLowerCase()?(b={userName:\"\",profile:c},c.hasOwnProperty(\"upn\")?b.userName=c.upn:c.hasOwnProperty(\"email\")&&(b.userName=c.email)):this.warn(\"IdToken has invalid aud field\")),b},AuthenticationContext.prototype._getHash=function(a){return a.indexOf(\"#/\")>-1?a=a.substring(a.indexOf(\"#/\")+2):a.indexOf(\"#\")>-1&&(a=a.substring(1)),a},AuthenticationContext.prototype.isCallback=function(a){a=this._getHash(a);var b=this._deserialize(a);return b.hasOwnProperty(this.CONSTANTS.ERROR_DESCRIPTION)||b.hasOwnProperty(this.CONSTANTS.ACCESS_TOKEN)||b.hasOwnProperty(this.CONSTANTS.ID_TOKEN)},AuthenticationContext.prototype.getLoginError=function(){return this._getItem(this.CONSTANTS.STORAGE.LOGIN_ERROR)},AuthenticationContext.prototype.getRequestInfo=function(a){a=this._getHash(a);var b=this._deserialize(a),c={valid:!1,parameters:{},stateMatch:!1,stateResponse:\"\",requestType:this.REQUEST_TYPE.UNKNOWN};if(b&&(c.parameters=b,b.hasOwnProperty(this.CONSTANTS.ERROR_DESCRIPTION)||b.hasOwnProperty(this.CONSTANTS.ACCESS_TOKEN)||b.hasOwnProperty(this.CONSTANTS.ID_TOKEN))){c.valid=!0;var d=\"\";if(!b.hasOwnProperty(\"state\"))return this.warn(\"No state returned\"),c;if(this.verbose(\"State: \"+b.state),d=b.state,c.stateResponse=d,this._matchState(c))return c;if(!c.stateMatch&&window.parent){c.requestType=this._requestType;for(var e=this._renewStates,f=0;f<e.length;f++)if(e[f]===c.stateResponse){c.stateMatch=!0;break}}}return c},AuthenticationContext.prototype._matchNonce=function(a){var b=this._getItem(this.CONSTANTS.STORAGE.NONCE_IDTOKEN);if(b){b=b.split(this.CONSTANTS.CACHE_DELIMETER);for(var c=0;c<b.length;c++)if(b[c]===a.profile.nonce)return!0}return!1},AuthenticationContext.prototype._matchState=function(a){var b=this._getItem(this.CONSTANTS.STORAGE.STATE_LOGIN);if(b){b=b.split(this.CONSTANTS.CACHE_DELIMETER);for(var c=0;c<b.length;c++)if(b[c]===a.stateResponse)return a.requestType=this.REQUEST_TYPE.LOGIN,a.stateMatch=!0,!0}var d=this._getItem(this.CONSTANTS.STORAGE.STATE_RENEW);if(d){d=d.split(this.CONSTANTS.CACHE_DELIMETER);for(var c=0;c<d.length;c++)if(d[c]===a.stateResponse)return a.requestType=this.REQUEST_TYPE.RENEW_TOKEN,a.stateMatch=!0,!0}return!1},AuthenticationContext.prototype._getResourceFromState=function(a){if(a){var b=a.indexOf(\"|\");if(b>-1&&b+1<a.length)return a.substring(b+1)}return\"\"},AuthenticationContext.prototype.saveTokenFromHash=function(a){this.info(\"State status:\"+a.stateMatch+\"; Request type:\"+a.requestType),this._saveItem(this.CONSTANTS.STORAGE.ERROR,\"\"),this._saveItem(this.CONSTANTS.STORAGE.ERROR_DESCRIPTION,\"\");var b=this._getResourceFromState(a.stateResponse);if(a.parameters.hasOwnProperty(this.CONSTANTS.ERROR_DESCRIPTION))this.infoPii(\"Error :\"+a.parameters.error+\"; Error description:\"+a.parameters[this.CONSTANTS.ERROR_DESCRIPTION]),this._saveItem(this.CONSTANTS.STORAGE.ERROR,a.parameters.error),this._saveItem(this.CONSTANTS.STORAGE.ERROR_DESCRIPTION,a.parameters[this.CONSTANTS.ERROR_DESCRIPTION]),a.requestType===this.REQUEST_TYPE.LOGIN&&(this._loginInProgress=!1,this._saveItem(this.CONSTANTS.STORAGE.LOGIN_ERROR,a.parameters.error_description));else if(a.stateMatch){this.info(\"State is right\"),a.parameters.hasOwnProperty(this.CONSTANTS.SESSION_STATE)&&this._saveItem(this.CONSTANTS.STORAGE.SESSION_STATE,a.parameters[this.CONSTANTS.SESSION_STATE]);var c;a.parameters.hasOwnProperty(this.CONSTANTS.ACCESS_TOKEN)&&(this.info(\"Fragment has access token\"),this._hasResource(b)||(c=this._getItem(this.CONSTANTS.STORAGE.TOKEN_KEYS)||\"\",this._saveItem(this.CONSTANTS.STORAGE.TOKEN_KEYS,c+b+this.CONSTANTS.RESOURCE_DELIMETER)),this._saveItem(this.CONSTANTS.STORAGE.ACCESS_TOKEN_KEY+b,a.parameters[this.CONSTANTS.ACCESS_TOKEN]),this._saveItem(this.CONSTANTS.STORAGE.EXPIRATION_KEY+b,this._expiresIn(a.parameters[this.CONSTANTS.EXPIRES_IN]))),a.parameters.hasOwnProperty(this.CONSTANTS.ID_TOKEN)&&(this.info(\"Fragment has id token\"),this._loginInProgress=!1,this._user=this._createUser(a.parameters[this.CONSTANTS.ID_TOKEN]),this._user&&this._user.profile?this._matchNonce(this._user)?(this._saveItem(this.CONSTANTS.STORAGE.IDTOKEN,a.parameters[this.CONSTANTS.ID_TOKEN]),b=this.config.loginResource?this.config.loginResource:this.config.clientId,this._hasResource(b)||(c=this._getItem(this.CONSTANTS.STORAGE.TOKEN_KEYS)||\"\",this._saveItem(this.CONSTANTS.STORAGE.TOKEN_KEYS,c+b+this.CONSTANTS.RESOURCE_DELIMETER)),this._saveItem(this.CONSTANTS.STORAGE.ACCESS_TOKEN_KEY+b,a.parameters[this.CONSTANTS.ID_TOKEN]),this._saveItem(this.CONSTANTS.STORAGE.EXPIRATION_KEY+b,this._user.profile.exp)):(this._saveItem(this.CONSTANTS.STORAGE.LOGIN_ERROR,\"Nonce received: \"+this._user.profile.nonce+\" is not same as requested: \"+this._getItem(this.CONSTANTS.STORAGE.NONCE_IDTOKEN)),this._user=null):(a.parameters.error=\"invalid id_token\",a.parameters.error_description=\"Invalid id_token. id_token: \"+a.parameters[this.CONSTANTS.ID_TOKEN],this._saveItem(this.CONSTANTS.STORAGE.ERROR,\"invalid id_token\"),this._saveItem(this.CONSTANTS.STORAGE.ERROR_DESCRIPTION,\"Invalid id_token. id_token: \"+a.parameters[this.CONSTANTS.ID_TOKEN])))}else a.parameters.error=\"Invalid_state\",a.parameters.error_description=\"Invalid_state. state: \"+a.stateResponse,this._saveItem(this.CONSTANTS.STORAGE.ERROR,\"Invalid_state\"),this._saveItem(this.CONSTANTS.STORAGE.ERROR_DESCRIPTION,\"Invalid_state. state: \"+a.stateResponse);this._saveItem(this.CONSTANTS.STORAGE.RENEW_STATUS+b,this.CONSTANTS.TOKEN_RENEW_STATUS_COMPLETED)},AuthenticationContext.prototype.getResourceForEndpoint=function(a){if(this.config&&this.config.anonymousEndpoints)for(var b=0;b<this.config.anonymousEndpoints.length;b++)if(a.indexOf(this.config.anonymousEndpoints[b])>-1)return null;if(this.config&&this.config.endpoints)for(var c in this.config.endpoints)if(a.indexOf(c)>-1)return this.config.endpoints[c];return a.indexOf(\"http://\")>-1||a.indexOf(\"https://\")>-1?this._getHostFromUri(a)===this._getHostFromUri(this.config.redirectUri)?this.config.loginResource:null:this.config.loginResource},AuthenticationContext.prototype._getHostFromUri=function(a){var b=String(a).replace(/^(https?:)\\/\\//,\"\");return b=b.split(\"/\")[0]},AuthenticationContext.prototype.handleWindowCallback=function(a){if(null==a&&(a=window.location.hash),this.isCallback(a)){var b=null,c=!1;this._openedWindows.length>0&&this._openedWindows[this._openedWindows.length-1].opener&&this._openedWindows[this._openedWindows.length-1].opener._adalInstance?(b=this._openedWindows[this._openedWindows.length-1].opener._adalInstance,c=!0):window.parent&&window.parent._adalInstance&&(b=window.parent._adalInstance);var d,e,f=b.getRequestInfo(a),g=null;e=c||window.parent!==window?b._callBackMappedToRenewStates[f.stateResponse]:b.callback,b.info(\"Returned from redirect url\"),b.saveTokenFromHash(f),f.requestType===this.REQUEST_TYPE.RENEW_TOKEN&&window.parent?(window.parent!==window?b.verbose(\"Window is in iframe, acquiring token silently\"):b.verbose(\"acquiring token interactive in progress\"),d=f.parameters[b.CONSTANTS.ACCESS_TOKEN]||f.parameters[b.CONSTANTS.ID_TOKEN],g=b.CONSTANTS.ACCESS_TOKEN):f.requestType===this.REQUEST_TYPE.LOGIN&&(d=f.parameters[b.CONSTANTS.ID_TOKEN],g=b.CONSTANTS.ID_TOKEN);var h=f.parameters[b.CONSTANTS.ERROR_DESCRIPTION],i=f.parameters[b.CONSTANTS.ERROR];try{e&&e(h,d,i,g)}catch(a){b.error(\"Error occurred in user defined callback function: \"+a)}window.parent!==window||c||(b.config.navigateToLoginRequestUrl?window.location.href=b._getItem(b.CONSTANTS.STORAGE.LOGIN_REQUEST):window.location.hash=\"\")}},AuthenticationContext.prototype._getNavigateUrl=function(a,b){var c=\"common\";this.config.tenant&&(c=this.config.tenant);var d=this.instance+c+\"/oauth2/authorize\"+this._serialize(a,this.config,b)+this._addLibMetadata();return this.info(\"Navigate url:\"+d),d},AuthenticationContext.prototype._extractIdToken=function(a){var b=this._decodeJwt(a);if(!b)return null;try{var c=b.JWSPayload,d=this._base64DecodeStringUrlSafe(c);return d?JSON.parse(d):(this.info(\"The returned id_token could not be base64 url safe decoded.\"),null)}catch(a){this.error(\"The returned id_token could not be decoded\",a)}return null},AuthenticationContext.prototype._base64DecodeStringUrlSafe=function(a){return a=a.replace(/-/g,\"+\").replace(/_/g,\"/\"),window.atob?decodeURIComponent(escape(window.atob(a))):decodeURIComponent(escape(this._decode(a)))},AuthenticationContext.prototype._decode=function(a){var b=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";a=String(a).replace(/=+$/,\"\");var c=a.length;if(c%4==1)throw new Error(\"The token to be decoded is not correctly encoded.\");for(var d,e,f,g,h,i,j,k,l=\"\",m=0;m<c;m+=4){if(d=b.indexOf(a.charAt(m)),e=b.indexOf(a.charAt(m+1)),f=b.indexOf(a.charAt(m+2)),g=b.indexOf(a.charAt(m+3)),m+2===c-1){h=d<<18|e<<12|f<<6,i=h>>16&255,j=h>>8&255,l+=String.fromCharCode(i,j);break}if(m+1===c-1){h=d<<18|e<<12,i=h>>16&255,l+=String.fromCharCode(i);break}h=d<<18|e<<12|f<<6|g,i=h>>16&255,j=h>>8&255,k=255&h,l+=String.fromCharCode(i,j,k)}return l},AuthenticationContext.prototype._decodeJwt=function(a){if(this._isEmpty(a))return null;var b=/^([^\\.\\s]*)\\.([^\\.\\s]+)\\.([^\\.\\s]*)$/,c=b.exec(a);return!c||c.length<4?(this.warn(\"The returned id_token is not parseable.\"),null):{header:c[1],JWSPayload:c[2],JWSSig:c[3]}},AuthenticationContext.prototype._convertUrlSafeToRegularBase64EncodedString=function(a){return a.replace(\"-\",\"+\").replace(\"_\",\"/\")},AuthenticationContext.prototype._serialize=function(a,b,c){var d=[];if(null!==b){d.push(\"?response_type=\"+a),d.push(\"client_id=\"+encodeURIComponent(b.clientId)),c&&d.push(\"resource=\"+encodeURIComponent(c)),d.push(\"redirect_uri=\"+encodeURIComponent(b.redirectUri)),d.push(\"state=\"+encodeURIComponent(b.state)),b.hasOwnProperty(\"slice\")&&d.push(\"slice=\"+encodeURIComponent(b.slice)),b.hasOwnProperty(\"extraQueryParameter\")&&d.push(b.extraQueryParameter);var e=b.correlationId?b.correlationId:this._guid();d.push(\"client-request-id=\"+encodeURIComponent(e))}return d.join(\"&\")},AuthenticationContext.prototype._deserialize=function(a){var b,c=/\\+/g,d=/([^&=]+)=([^&]*)/g,e=function(a){return decodeURIComponent(a.replace(c,\" \"))},f={};for(b=d.exec(a);b;)f[e(b[1])]=e(b[2]),b=d.exec(a);return f},AuthenticationContext.prototype._decimalToHex=function(a){for(var b=a.toString(16);b.length<2;)b=\"0\"+b;return b},AuthenticationContext.prototype._guid=function(){var a=window.crypto||window.msCrypto;if(a&&a.getRandomValues){var b=new Uint8Array(16);return a.getRandomValues(b),b[6]|=64,b[6]&=79,b[8]|=128,b[8]&=191,this._decimalToHex(b[0])+this._decimalToHex(b[1])+this._decimalToHex(b[2])+this._decimalToHex(b[3])+\"-\"+this._decimalToHex(b[4])+this._decimalToHex(b[5])+\"-\"+this._decimalToHex(b[6])+this._decimalToHex(b[7])+\"-\"+this._decimalToHex(b[8])+this._decimalToHex(b[9])+\"-\"+this._decimalToHex(b[10])+this._decimalToHex(b[11])+this._decimalToHex(b[12])+this._decimalToHex(b[13])+this._decimalToHex(b[14])+this._decimalToHex(b[15])}for(var c=\"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\",d=\"0123456789abcdef\",e=0,f=\"\",g=0;g<36;g++)\"-\"!==c[g]&&\"4\"!==c[g]&&(e=16*Math.random()|0),\"x\"===c[g]?f+=d[e]:\"y\"===c[g]?(e&=3,e|=8,f+=d[e]):f+=c[g];return f},AuthenticationContext.prototype._expiresIn=function(a){return a||(a=3599),this._now()+parseInt(a,10)},AuthenticationContext.prototype._now=function(){return Math.round((new Date).getTime()/1e3)},AuthenticationContext.prototype._addAdalFrame=function(a){if(void 0!==a){this.info(\"Add adal frame to document:\"+a);var b=document.getElementById(a);if(!b){if(document.createElement&&document.documentElement&&(window.opera||-1===window.navigator.userAgent.indexOf(\"MSIE 5.0\"))){var c=document.createElement(\"iframe\");c.setAttribute(\"id\",a),c.setAttribute(\"aria-hidden\",\"true\"),c.style.visibility=\"hidden\",c.style.position=\"absolute\",c.style.width=c.style.height=c.borderWidth=\"0px\",b=document.getElementsByTagName(\"body\")[0].appendChild(c)}else document.body&&document.body.insertAdjacentHTML&&document.body.insertAdjacentHTML(\"beforeEnd\",'<iframe name=\"'+a+'\" id=\"'+a+'\" style=\"display:none\"></iframe>');window.frames&&window.frames[a]&&(b=window.frames[a])}return b}},AuthenticationContext.prototype._saveItem=function(a,b,c){if(this.config&&this.config.cacheLocation&&\"localStorage\"===this.config.cacheLocation){if(!this._supportsLocalStorage())return this.info(\"Local storage is not supported\"),!1;if(c){var d=this._getItem(a)||\"\";localStorage.setItem(a,d+b+this.CONSTANTS.CACHE_DELIMETER)}else localStorage.setItem(a,b);return!0}return this._supportsSessionStorage()?(sessionStorage.setItem(a,b),!0):(this.info(\"Session storage is not supported\"),!1)},AuthenticationContext.prototype._getItem=function(a){return this.config&&this.config.cacheLocation&&\"localStorage\"===this.config.cacheLocation?this._supportsLocalStorage()?localStorage.getItem(a):(this.info(\"Local storage is not supported\"),null):this._supportsSessionStorage()?sessionStorage.getItem(a):(this.info(\"Session storage is not supported\"),null)},AuthenticationContext.prototype._supportsLocalStorage=function(){try{return!!window.localStorage&&(window.localStorage.setItem(\"storageTest\",\"A\"),\"A\"==window.localStorage.getItem(\"storageTest\")&&(window.localStorage.removeItem(\"storageTest\"),!window.localStorage.getItem(\"storageTest\")))}catch(a){return!1}},AuthenticationContext.prototype._supportsSessionStorage=function(){try{return!!window.sessionStorage&&(window.sessionStorage.setItem(\"storageTest\",\"A\"),\"A\"==window.sessionStorage.getItem(\"storageTest\")&&(window.sessionStorage.removeItem(\"storageTest\"),!window.sessionStorage.getItem(\"storageTest\")))}catch(a){return!1}},AuthenticationContext.prototype._cloneConfig=function(a){if(null===a||\"object\"!=typeof a)return a;var b={};for(var c in a)a.hasOwnProperty(c)&&(b[c]=a[c]);return b},AuthenticationContext.prototype._addLibMetadata=function(){return\"&x-client-SKU=Js&x-client-Ver=\"+this._libVersion()},AuthenticationContext.prototype.log=function(a,b,c,d){if(a<=Logging.level){if(!Logging.piiLoggingEnabled&&d)return;var e=(new Date).toUTCString(),f=\"\";f=this.config.correlationId?e+\":\"+this.config.correlationId+\"-\"+this._libVersion()+\"-\"+this.CONSTANTS.LEVEL_STRING_MAP[a]+\" \"+b:e+\":\"+this._libVersion()+\"-\"+this.CONSTANTS.LEVEL_STRING_MAP[a]+\" \"+b,c&&(f+=\"\\nstack:\\n\"+c.stack),Logging.log(f)}},AuthenticationContext.prototype.error=function(a,b){this.log(this.CONSTANTS.LOGGING_LEVEL.ERROR,a,b)},AuthenticationContext.prototype.warn=function(a){this.log(this.CONSTANTS.LOGGING_LEVEL.WARN,a,null)},AuthenticationContext.prototype.info=function(a){\r\nthis.log(this.CONSTANTS.LOGGING_LEVEL.INFO,a,null)},AuthenticationContext.prototype.verbose=function(a){this.log(this.CONSTANTS.LOGGING_LEVEL.VERBOSE,a,null)},AuthenticationContext.prototype.errorPii=function(a,b){this.log(this.CONSTANTS.LOGGING_LEVEL.ERROR,a,b,!0)},AuthenticationContext.prototype.warnPii=function(a){this.log(this.CONSTANTS.LOGGING_LEVEL.WARN,a,null,!0)},AuthenticationContext.prototype.infoPii=function(a){this.log(this.CONSTANTS.LOGGING_LEVEL.INFO,a,null,!0)},AuthenticationContext.prototype.verbosePii=function(a){this.log(this.CONSTANTS.LOGGING_LEVEL.VERBOSE,a,null,!0)},AuthenticationContext.prototype._libVersion=function(){return\"1.0.17\"},\"undefined\"!=typeof module&&module.exports&&(module.exports=AuthenticationContext,module.exports.inject=function(a){return new AuthenticationContext(a)}),AuthenticationContext}();","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * Class used to subscribe ILogListener and log messages throughout an application\n *\n */\nexport class Logger {\n\n  private static _instance: LoggerImpl;\n\n  /**\n   * Gets or sets the active log level to apply for log filtering\n   */\n  public static get activeLogLevel(): LogLevel {\n    return Logger.instance.activeLogLevel;\n  }\n\n  public static set activeLogLevel(value: LogLevel) {\n    Logger.instance.activeLogLevel = value;\n  }\n\n  private static get instance(): LoggerImpl {\n    if (Logger._instance === undefined || Logger._instance === null) {\n      Logger._instance = new LoggerImpl();\n    }\n    return Logger._instance;\n  }\n\n  /**\n   * Adds ILogListener instances to the set of subscribed listeners\n   *\n   * @param listeners One or more listeners to subscribe to this log\n   */\n  public static subscribe(...listeners: ILogListener[]): void {\n    listeners.forEach(listener => Logger.instance.subscribe(listener));\n  }\n\n  /**\n   * Clears the subscribers collection, returning the collection before modification\n   */\n  public static clearSubscribers(): ILogListener[] {\n    return Logger.instance.clearSubscribers();\n  }\n\n  /**\n   * Gets the current subscriber count\n   */\n  public static get count(): number {\n    return Logger.instance.count;\n  }\n\n  /**\n   * Writes the supplied string to the subscribed listeners\n   *\n   * @param message The message to write\n   * @param level [Optional] if supplied will be used as the level of the entry (Default: LogLevel.Info)\n   */\n  public static write(message: string, level: LogLevel = LogLevel.Info) {\n    Logger.instance.log({ level: level, message: message });\n  }\n\n  /**\n   * Writes the supplied string to the subscribed listeners\n   *\n   * @param json The json object to stringify and write\n   * @param level [Optional] if supplied will be used as the level of the entry (Default: LogLevel.Info)\n   */\n  public static writeJSON(json: any, level: LogLevel = LogLevel.Info) {\n    this.write(JSON.stringify(json), level);\n  }\n\n  /**\n   * Logs the supplied entry to the subscribed listeners\n   *\n   * @param entry The message to log\n   */\n  public static log(entry: ILogEntry) {\n    Logger.instance.log(entry);\n  }\n\n  /**\n   * Logs an error object to the subscribed listeners\n   * \n   * @param err The error object\n   */\n  public static error(err: Error) {\n    Logger.instance.log({ data: err, level: LogLevel.Error, message: err.message });\n  }\n}\n\nclass LoggerImpl {\n\n  constructor(public activeLogLevel: LogLevel = LogLevel.Warning, private subscribers: ILogListener[] = []) { }\n\n  public subscribe(listener: ILogListener): void {\n    this.subscribers.push(listener);\n  }\n\n  public clearSubscribers(): ILogListener[] {\n    const s = this.subscribers.slice(0);\n    this.subscribers.length = 0;\n    return s;\n  }\n\n  public get count(): number {\n    return this.subscribers.length;\n  }\n\n  public write(message: string, level: LogLevel = LogLevel.Info) {\n    this.log({ level: level, message: message });\n  }\n\n  public log(entry: ILogEntry) {\n    if (entry !== undefined && this.activeLogLevel <= entry.level) {\n      this.subscribers.map(subscriber => subscriber.log(entry));\n    }\n  }\n}\n\n/**\n * A set of logging levels\n */\nexport const enum LogLevel {\n  Verbose = 0,\n  Info = 1,\n  Warning = 2,\n  Error = 3,\n  Off = 99,\n}\n\n/**\n * Interface that defines a log entry\n *\n */\nexport interface ILogEntry {\n  /**\n   * The main message to be logged\n   */\n  message: string;\n  /**\n   * The level of information this message represents\n   */\n  level: LogLevel;\n  /**\n   * Any associated data that a given logging listener may choose to log or ignore\n   */\n  data?: any;\n}\n\n/**\n * Interface that defines a log listener\n *\n */\nexport interface ILogListener {\n  /**\n   * Any associated data that a given logging listener may choose to log or ignore\n   *\n   * @param entry The information to be logged\n   */\n  log(entry: ILogEntry): void;\n}\n","import { ILogEntry, LogLevel, ILogListener } from \"./logger\";\n\n/**\n * Implementation of LogListener which logs to the console\n *\n */\nexport class ConsoleListener implements ILogListener {\n\n    /**\n     * Any associated data that a given logging listener may choose to log or ignore\n     *\n     * @param entry The information to be logged\n     */\n    public log(entry: ILogEntry): void {\n\n        const msg = this.format(entry);\n\n        switch (entry.level) {\n            case LogLevel.Verbose:\n            case LogLevel.Info:\n                console.log(msg);\n                break;\n            case LogLevel.Warning:\n                console.warn(msg);\n                break;\n            case LogLevel.Error:\n                console.error(msg);\n                break;\n        }\n    }\n\n    /**\n     * Formats the message\n     *\n     * @param entry The information to format into a string\n     */\n    private format(entry: ILogEntry): string {\n        const msg = [];\n        msg.push(\"Message: \" + entry.message);\n        if (entry.data !== undefined) {\n            try {\n                msg.push(\" Data: \" + JSON.stringify(entry.data));\n            } catch (e) {\n                msg.push(` Data: Error in stringify of supplied data ${e}`);\n            }\n        }\n\n        return msg.join(\"\");\n    }\n}\n\n/**\n * Implementation of LogListener which logs to the supplied function\n *\n */\nexport class FunctionListener implements ILogListener {\n\n    /**\n     * Creates a new instance of the FunctionListener class\n     *\n     * @constructor\n     * @param  method The method to which any logging data will be passed\n     */\n    constructor(private method: (entry: ILogEntry) => void) { }\n\n    /**\n     * Any associated data that a given logging listener may choose to log or ignore\n     *\n     * @param entry The information to be logged\n     */\n    public log(entry: ILogEntry): void {\n        this.method(entry);\n    }\n}\n","import { ITypedHash } from \"./collections\";\n\n/**\n * Gets a callback function which will maintain context across async calls.\n * Allows for the calling pattern getCtxCallback(thisobj, method, methodarg1, methodarg2, ...)\n *\n * @param context The object that will be the 'this' value in the callback\n * @param method The method to which we will apply the context and parameters\n * @param params Optional, additional arguments to supply to the wrapped method when it is invoked\n */\nexport function getCtxCallback(context: any, method: Function, ...params: any[]): Function {\n    return function () {\n        method.apply(context, params);\n    };\n}\n\nexport type DateAddInterval = \"year\" | \"quarter\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\";\n\n/**\n * Adds a value to a date\n *\n * @param date The date to which we will add units, done in local time\n * @param interval The name of the interval to add, one of: ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second']\n * @param units The amount to add to date of the given interval\n *\n * http://stackoverflow.com/questions/1197928/how-to-add-30-minutes-to-a-javascript-date-object\n */\nexport function dateAdd(date: Date, interval: DateAddInterval, units: number): Date | undefined {\n    let ret: Date | undefined = new Date(date.toString()); // don't change original date\n    switch (interval.toLowerCase()) {\n        case \"year\": ret.setFullYear(ret.getFullYear() + units); break;\n        case \"quarter\": ret.setMonth(ret.getMonth() + 3 * units); break;\n        case \"month\": ret.setMonth(ret.getMonth() + units); break;\n        case \"week\": ret.setDate(ret.getDate() + 7 * units); break;\n        case \"day\": ret.setDate(ret.getDate() + units); break;\n        case \"hour\": ret.setTime(ret.getTime() + units * 3600000); break;\n        case \"minute\": ret.setTime(ret.getTime() + units * 60000); break;\n        case \"second\": ret.setTime(ret.getTime() + units * 1000); break;\n        default: ret = undefined; break;\n    }\n    return ret;\n}\n\n/**\n * Combines an arbitrary set of paths ensuring and normalizes the slashes\n *\n * @param paths 0 to n path parts to combine\n */\nexport function combine(...paths: string[]): string {\n\n    return paths\n        .filter(path => !stringIsNullOrEmpty(path))\n        .map(path => path.replace(/^[\\\\|\\/]/, \"\").replace(/[\\\\|\\/]$/, \"\"))\n        .join(\"/\")\n        .replace(/\\\\/g, \"/\");\n}\n\n/**\n * Gets a random string of chars length\n * \n * https://stackoverflow.com/questions/1349404/generate-random-string-characters-in-javascript\n *\n * @param chars The length of the random string to generate\n */\nexport function getRandomString(chars: number): string {\n    const text = new Array(chars);\n    for (let i = 0; i < chars; i++) {\n        text[i] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\".charAt(Math.floor(Math.random() * 62));\n    }\n    return text.join(\"\");\n}\n\n/**\n * Gets a random GUID value\n *\n * http://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\n */\n/* tslint:disable no-bitwise */\nexport function getGUID(): string {\n    let d = Date.now();\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n        const r = (d + Math.random() * 16) % 16 | 0;\n        d = Math.floor(d / 16);\n        return (c === \"x\" ? r : (r & 0x3 | 0x8)).toString(16);\n    });\n}\n/* tslint:enable */\n\n/**\n * Determines if a given value is a function\n *\n * @param cf The thing to test for functionness\n */\nexport function isFunc(f: any): boolean {\n    return typeof f === \"function\";\n}\n\n/**\n * Determines if an object is both defined and not null\n * @param obj Object to test\n */\nexport function objectDefinedNotNull(obj: any): boolean {\n    return typeof obj !== \"undefined\" && obj !== null;\n}\n\n/**\n * @returns whether the provided parameter is a JavaScript Array or not.\n*/\nexport function isArray(array: any): boolean {\n\n    return Array.isArray ? Array.isArray(array) : array && typeof array.length === \"number\" && array.constructor === Array;\n}\n\n/**\n * Provides functionality to extend the given object by doing a shallow copy\n *\n * @param target The object to which properties will be copied\n * @param source The source object from which properties will be copied\n * @param noOverwrite If true existing properties on the target are not overwritten from the source\n * @param filter If provided allows additional filtering on what properties are copied (propName: string) => boolean\n *\n */\nexport function assign<T extends ITypedHash<any> = any, S extends ITypedHash<any> = any>(target: T, source: S, noOverwrite = false,\n    filter: (propName: string) => boolean = () => true): T & S {\n\n    if (!objectDefinedNotNull(source)) {\n        return <T & S>target;\n    }\n\n    // ensure we don't overwrite things we don't want overwritten\n    const check: (o: any, i: string) => Boolean = noOverwrite ? (o, i) => !(i in o) : () => true;\n\n    // final filter we will use\n    const f = (v: string) => check(target, v) && filter(v);\n\n    return Object.getOwnPropertyNames(source)\n        .filter(f)\n        .reduce((t: any, v: string) => {\n            t[v] = source[v];\n            return t;\n        }, target);\n}\n\n/**\n * Determines if a given url is absolute\n *\n * @param url The url to check to see if it is absolute\n */\nexport function isUrlAbsolute(url: string): boolean {\n    return /^https?:\\/\\/|^\\/\\//i.test(url);\n}\n\n/**\n * Determines if a string is null or empty or undefined\n *\n * @param s The string to test\n */\nexport function stringIsNullOrEmpty(s: string): boolean {\n    return s === undefined || s === null || s.length < 1;\n}\n\n/**\n * Ensures guid values are represented consistently as \"ea123463-137d-4ae3-89b8-cf3fc578ca05\"\n * \n * @param guid The candidate guid\n */\nexport function sanitizeGuid(guid: string): string {\n\n    if (stringIsNullOrEmpty(guid)) {\n        return guid;\n    }\n\n    const matches = /([0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12})/i.exec(guid);\n\n    return matches === null ? guid : matches[1];\n}\n\n/**\n * Shorthand for JSON.stringify\n * \n * @param o Any type of object\n */\nexport function jsS(o: any): string {\n    return JSON.stringify(o);\n}\n\n/**\n * Shorthand for Object.hasOwnProperty\n * \n * @param o Object to check for\n * @param p Name of the property\n */\nexport function hOP(o: any, p: string): boolean {\n    return Object.hasOwnProperty.call(o, p);\n}\n\n/**\n * Generates a ~unique hash code\n * \n * From: https://stackoverflow.com/questions/6122571/simple-non-secure-hash-function-for-javascript\n */\n// tslint:disable:no-bitwise\nexport function getHashCode(s: string): number {\n    let hash = 0;\n    if (s.length === 0) {\n        return hash;\n    }\n\n    for (let i = 0; i < s.length; i++) {\n        const chr = s.charCodeAt(i);\n        hash = ((hash << 5) - hash) + chr;\n        hash |= 0; // Convert to 32bit integer\n    }\n    return hash;\n}\n// tslint:enable:no-bitwise\n","import { isFunc } from \"./util\";\n\ndeclare var Object: {\n    entries?: any;\n    keys(o: any): any;\n};\n\n/**\n * Interface defining an object with a known property type\n */\nexport interface ITypedHash<T> {\n    [key: string]: T;\n}\n\n/**\n * Used to calculate the object properties, with polyfill if needed\n */\nconst objectEntries: any = isFunc(Object.entries) ? Object.entries : (o: any): [any, any][] => Object.keys(o).map((k: any) => [k, o[k]]);\n\n/**\n * Converts the supplied object to a map\n * \n * @param o The object to map\n */\nexport function objectToMap<K, V>(o: any): Map<K, V> {\n    if (o !== undefined && o !== null) {\n        return new Map(objectEntries(o));\n    }\n    return new Map();\n}\n\n/**\n * Merges to Map instances together, overwriting values in target with matching keys, last in wins\n * \n * @param target map into which the other maps are merged\n * @param maps One or more maps to merge into the target \n */\nexport function mergeMaps<K, V>(target: Map<K, V>, ...maps: Map<K, V>[]): Map<K, V> {\n    for (let i = 0; i < maps.length; i++) {\n        maps[i].forEach((v: V, k: K) => {\n            target.set(k, v);\n        });\n    }\n\n    return target;\n}\n","import { ITypedHash, mergeMaps, objectToMap } from \"./collections\";\nimport { ISPFXContext } from \"./spfxcontextinterface\";\n\nexport interface ILibraryConfiguration {\n\n    /**\n     * Allows caching to be global disabled, default: false\n     */\n    globalCacheDisable?: boolean;\n\n    /**\n     * Defines the default store used by the usingCaching method, default: session\n     */\n    defaultCachingStore?: \"session\" | \"local\";\n\n    /**\n     * Defines the default timeout in seconds used by the usingCaching method, default 30\n     */\n    defaultCachingTimeoutSeconds?: number;\n\n    /**\n     * If true a timeout expired items will be removed from the cache in intervals determined by cacheTimeoutInterval\n     */\n    enableCacheExpiration?: boolean;\n\n    /**\n     * Determines the interval in milliseconds at which the cache is checked to see if items have expired (min: 100)\n     */\n    cacheExpirationIntervalMilliseconds?: number;\n\n    /**\n     * Used to supply the current context from an SPFx webpart to the library\n     */\n    spfxContext?: ISPFXContext;\n\n    /**\n     * Used to place the library in ie11 compat mode. Some features may not work as expected\n     */\n    ie11?: boolean;\n}\n\nexport function setup(config: ILibraryConfiguration): void {\n    RuntimeConfig.assign(config);\n}\n\n// lable mapping for known config values\nconst s = [\n    \"defaultCachingStore\",\n    \"defaultCachingTimeoutSeconds\",\n    \"globalCacheDisable\",\n    \"enableCacheExpiration\",\n    \"cacheExpirationIntervalMilliseconds\",\n    \"spfxContext\",\n    \"ie11\",\n];\n\nexport class RuntimeConfigImpl {\n\n    constructor(private _v = new Map<string, any>()) {\n\n        // setup defaults\n        this._v.set(s[0], \"session\");\n        this._v.set(s[1], 60);\n        this._v.set(s[2], false);\n        this._v.set(s[3], false);\n        this._v.set(s[4], 750);\n        this._v.set(s[5], null);\n        this._v.set(s[6], false);\n    }\n\n    /**\n     * \n     * @param config The set of properties to add to the globa configuration instance\n     */\n    public assign(config: ITypedHash<any>): void {\n        this._v = mergeMaps(this._v, objectToMap(config));\n    }\n\n    public get(key: string): any {\n        return this._v.get(key);\n    }\n\n    public get defaultCachingStore(): \"session\" | \"local\" {\n        return this.get(s[0]);\n    }\n\n    public get defaultCachingTimeoutSeconds(): number {\n        return this.get(s[1]);\n    }\n\n    public get globalCacheDisable(): boolean {\n        return this.get(s[2]);\n    }\n\n    public get enableCacheExpiration(): boolean {\n        return this.get(s[3]);\n    }\n\n    public get cacheExpirationIntervalMilliseconds(): number {\n        return this.get(s[4]);\n    }\n\n    public get spfxContext(): ISPFXContext {\n        return this.get(s[5]);\n    }\n\n    public get ie11(): boolean {\n        return this.get(s[6]);\n    }\n}\n\nconst _runtimeConfig = new RuntimeConfigImpl();\n\nexport let RuntimeConfig = _runtimeConfig;\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { assign, objectDefinedNotNull } from \"./util\";\nimport { ISPFXContext } from \"./spfxcontextinterface\";\nimport { safeGlobal } from \"./safe-global\";\n\nexport interface IConfigOptions {\n    headers?: string[][] | { [key: string]: string } | Headers;\n    mode?: \"navigate\" | \"same-origin\" | \"no-cors\" | \"cors\";\n    credentials?: \"omit\" | \"same-origin\" | \"include\";\n    cache?: \"default\" | \"no-store\" | \"reload\" | \"no-cache\" | \"force-cache\" | \"only-if-cached\";\n}\n\nexport interface IFetchOptions extends IConfigOptions {\n    method?: string;\n    body?: any;\n}\n\nexport interface IHttpClientImpl {\n    fetch(url: string, options: IFetchOptions): Promise<Response>;\n}\n\nexport interface IRequestClient {\n    fetch(url: string, options?: IFetchOptions): Promise<Response>;\n    fetchRaw(url: string, options?: IFetchOptions): Promise<Response>;\n    get(url: string, options?: IFetchOptions): Promise<Response>;\n    post(url: string, options?: IFetchOptions): Promise<Response>;\n    patch(url: string, options?: IFetchOptions): Promise<Response>;\n    delete(url: string, options?: IFetchOptions): Promise<Response>;\n}\n\nexport function mergeHeaders(target: Headers, source: HeadersInit): void {\n\n    if (objectDefinedNotNull(source)) {\n        const temp = new Request(\"\", { headers: source });\n        temp.headers.forEach((value: string, name: string) => {\n            target.append(name, value);\n        });\n    }\n}\n\nexport function mergeOptions(target: IConfigOptions, source: IConfigOptions): void {\n\n    if (objectDefinedNotNull(source)) {\n        const headers = assign(target.headers || {}, source.headers!);\n        target = assign(target, source);\n        target.headers = headers;\n    }\n}\n\n/**\n * Parses out the root of the request url to use as the resource when getting the token\n * \n  * @param url The url to parse\n */\nexport function getADALResource(url: string): string {\n    const u = new URL(url);\n    return `${u.protocol}//${u.hostname}`;\n}\n\n/**\n * Makes requests using the global/window fetch API\n */\nexport class FetchClient implements IHttpClientImpl {\n\n    public fetch(url: string, options: IFetchOptions): Promise<Response> {\n\n        return safeGlobal.fetch(url, options);\n    }\n}\n\n/**\n * Makes requests using the fetch API adding the supplied token to the Authorization header\n */\nexport class BearerTokenFetchClient extends FetchClient {\n\n    constructor(private _token: string | null) {\n        super();\n    }\n\n    public get token() {\n        return this._token || \"\";\n    }\n\n    public set token(token: string) {\n        this._token = token;\n    }\n\n    public fetch(url: string, options: IFetchOptions = {}): Promise<Response> {\n\n        const headers = new Headers();\n\n        mergeHeaders(headers, options.headers);\n\n        headers.set(\"Authorization\", `Bearer ${this._token}`);\n\n        options.headers = headers;\n\n        return super.fetch(url, options);\n    }\n}\n\n/**\n * Client wrapping the aadTokenProvider available from SPFx >= 1.6\n */\nexport class SPFxAdalClient extends BearerTokenFetchClient {\n\n    /**\n     * \n     * @param context provide the appropriate SPFx Context object\n     */\n    constructor(private context: ISPFXContext) {\n        super(null);\n    }\n\n    /**\n     * Executes a fetch request using the supplied url and options\n     * \n     * @param url Absolute url of the request\n     * @param options Any options\n     */\n    public async fetch(url: string, options: IFetchOptions): Promise<Response> {\n\n        const token = await this.getToken(getADALResource(url));\n        this.token = token;\n        return super.fetch(url, options);\n    }\n\n    /**\n     * Gets an AAD token for the provided resource using the SPFx AADTokenProvider\n     * \n     * @param resource Resource for which a token is to be requested (ex: https://graph.microsoft.com)\n     */\n    public async getToken(resource: string): Promise<string> {\n\n        const provider = await this.context.aadTokenProviderFactory.getTokenProvider();\n        return provider.getToken(resource);\n    }\n}\n","import { dateAdd, getCtxCallback, jsS, objectDefinedNotNull } from \"./util\";\nimport { RuntimeConfig } from \"./libconfig\";\n\n/**\n * A wrapper class to provide a consistent interface to browser based storage\n *\n */\nexport class PnPClientStorageWrapper implements IPnPClientStore {\n\n    /**\n     * True if the wrapped storage is available; otherwise, false\n     */\n    public enabled: boolean;\n\n    /**\n     * Creates a new instance of the PnPClientStorageWrapper class\n     *\n     * @constructor\n     */\n    constructor(private store: Storage, public defaultTimeoutMinutes = -1) {\n\n        this.enabled = this.test();\n\n        // if the cache timeout is enabled call the handler\n        // this will clear any expired items and set the timeout function\n        if (RuntimeConfig.enableCacheExpiration) {\n            this.cacheExpirationHandler();\n        }\n    }\n\n    public static bind(store: Storage): IPnPClientStore {\n        return new PnPClientStorageWrapper(typeof (store) === \"undefined\" ? new MemoryStorage() : store);\n    }\n\n    /**\n     * Get a value from storage, or null if that value does not exist\n     *\n     * @param key The key whose value we want to retrieve\n     */\n    public get<T>(key: string): T | null {\n\n        if (!this.enabled) {\n            return null;\n        }\n\n        const o = this.store.getItem(key);\n\n        if (!objectDefinedNotNull(o)) {\n            return null;\n        }\n\n        const persistable = JSON.parse(o);\n\n        if (new Date(persistable.expiration) <= new Date()) {\n            this.delete(key);\n            return null;\n\n        } else {\n\n            return persistable.value as T;\n        }\n    }\n\n    /**\n     * Adds a value to the underlying storage\n     *\n     * @param key The key to use when storing the provided value\n     * @param o The value to store\n     * @param expire Optional, if provided the expiration of the item, otherwise the default is used\n     */\n    public put(key: string, o: any, expire?: Date): void {\n        if (this.enabled) {\n            this.store.setItem(key, this.createPersistable(o, expire));\n        }\n    }\n\n    /**\n     * Deletes a value from the underlying storage\n     *\n     * @param key The key of the pair we want to remove from storage\n     */\n    public delete(key: string): void {\n        if (this.enabled) {\n            this.store.removeItem(key);\n        }\n    }\n\n    /**\n     * Gets an item from the underlying storage, or adds it if it does not exist using the supplied getter function\n     *\n     * @param key The key to use when storing the provided value\n     * @param getter A function which will upon execution provide the desired value\n     * @param expire Optional, if provided the expiration of the item, otherwise the default is used\n     */\n    public async getOrPut<T>(key: string, getter: () => Promise<T>, expire?: Date): Promise<T> {\n\n        if (!this.enabled) {\n            return getter();\n        }\n\n        let o = this.get<T>(key);\n\n        if (o === null) {\n            o = await getter();\n            this.put(key, o, expire);\n        }\n\n        return o;\n    }\n\n    /**\n     * Deletes any expired items placed in the store by the pnp library, leaves other items untouched\n     */\n    public async deleteExpired(): Promise<void> {\n\n        if (!this.enabled) {\n            return;\n        }\n\n        for (let i = 0; i < this.store.length; i++) {\n            const key = this.store.key(i);\n            if (key !== null) {\n                // test the stored item to see if we stored it\n                if (/[\"|']?pnp[\"|']? ?: ?1/i.test(<string>this.store.getItem(key))) {\n                    // get those items as get will delete from cache if they are expired\n                    await this.get(key);\n                }\n            }\n        }\n    }\n\n    /**\n     * Used to determine if the wrapped storage is available currently\n     */\n    private test(): boolean {\n        const str = \"t\";\n        try {\n            this.store.setItem(str, str);\n            this.store.removeItem(str);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    /**\n     * Creates the persistable to store\n     */\n    private createPersistable(o: any, expire?: Date): string {\n        if (expire === undefined) {\n\n            // ensure we are by default inline with the global library setting\n            let defaultTimeout = RuntimeConfig.defaultCachingTimeoutSeconds;\n            if (this.defaultTimeoutMinutes > 0) {\n                defaultTimeout = this.defaultTimeoutMinutes * 60;\n            }\n            expire = dateAdd(new Date(), \"second\", defaultTimeout);\n        }\n\n        return jsS({ pnp: 1, expiration: expire, value: o });\n    }\n\n    /**\n     * Deletes expired items added by this library in this.store and sets a timeout to call itself\n     */\n    private cacheExpirationHandler(): void {\n\n        if (!this.enabled) {\n            return;\n        }\n\n        this.deleteExpired().then(_ => {\n\n            // call ourself in the future\n            setTimeout(getCtxCallback(this, this.cacheExpirationHandler), RuntimeConfig.cacheExpirationIntervalMilliseconds);\n        }).catch(console.error);\n    }\n}\n\n/**\n * Interface which defines the operations provided by a client storage object\n */\nexport interface IPnPClientStore {\n    /**\n     * True if the wrapped storage is available; otherwise, false\n     */\n    enabled: boolean;\n\n    /**\n     * Get a value from storage, or null if that value does not exist\n     *\n     * @param key The key whose value we want to retrieve\n     */\n    get(key: string): any;\n\n    /**\n     * Adds a value to the underlying storage\n     *\n     * @param key The key to use when storing the provided value\n     * @param o The value to store\n     * @param expire Optional, if provided the expiration of the item, otherwise the default is used\n     */\n    put(key: string, o: any, expire?: Date): void;\n\n    /**\n     * Deletes a value from the underlying storage\n     *\n     * @param key The key of the pair we want to remove from storage\n     */\n    delete(key: string): void;\n\n    /**\n     * Gets an item from the underlying storage, or adds it if it does not exist using the supplied getter function\n     *\n     * @param key The key to use when storing the provided value\n     * @param getter A function which will upon execution provide the desired value\n     * @param expire Optional, if provided the expiration of the item, otherwise the default is used\n     */\n    getOrPut<T>(key: string, getter: () => Promise<T>, expire?: Date): Promise<T>;\n\n    /**\n     * Removes any expired items placed in the store by the pnp library, leaves other items untouched\n     */\n    deleteExpired(): Promise<void>;\n}\n\n/**\n * A thin implementation of in-memory storage for use in nodejs\n */\nclass MemoryStorage {\n\n    constructor(private _store = new Map<string, any>()) { }\n\n    public get length(): number {\n        return this._store.size;\n    }\n\n    public clear(): void {\n        this._store.clear();\n    }\n\n    public getItem(key: string): any {\n        return this._store.get(key);\n    }\n\n    public key(index: number): string {\n        return Array.from(this._store)[index][0];\n    }\n\n    public removeItem(key: string): void {\n        this._store.delete(key);\n    }\n\n    public setItem(key: string, data: string): void {\n        this._store.set(key, data);\n    }\n\n    [key: string]: any;\n    [index: number]: string;\n}\n\n/**\n * A class that will establish wrappers for both local and session storage\n */\nexport class PnPClientStorage {\n\n    /**\n     * Creates a new instance of the PnPClientStorage class\n     *\n     * @constructor\n     */\n    constructor(private _local: IPnPClientStore | null = null, private _session: IPnPClientStore | null = null) { }\n\n    /**\n     * Provides access to the local storage of the browser\n     */\n    public get local(): IPnPClientStore {\n\n        if (this._local === null) {\n            this._local = PnPClientStorageWrapper.bind(localStorage);\n        }\n\n        return this._local;\n    }\n\n    /**\n     * Provides access to the session storage of the browser\n     */\n    public get session(): IPnPClientStore {\n\n        if (this._session === null) {\n            this._session = PnPClientStorageWrapper.bind(sessionStorage);\n        }\n\n        return this._session;\n    }\n}\n","import { ITypedHash, mergeMaps, objectToMap, jsS } from \"@pnp/common\";\n\n/**\n * Interface for configuration providers\n *\n */\nexport interface IConfigurationProvider {\n\n    /**\n     * Gets the configuration from the provider\n     */\n    getConfiguration(): Promise<ITypedHash<string>>;\n}\n\n/**\n * Class used to manage the current application settings\n *\n */\nexport class Settings {\n\n    /**\n     * Creates a new instance of the settings class\n     *\n     * @constructor\n     */\n    constructor(private _settings = new Map<string, string>()) {\n    }\n\n    /**\n     * Adds a new single setting, or overwrites a previous setting with the same key\n     *\n     * @param {string} key The key used to store this setting\n     * @param {string} value The setting value to store\n     */\n    public add(key: string, value: string) {\n        this._settings.set(key, value);\n    }\n\n    /**\n     * Adds a JSON value to the collection as a string, you must use getJSON to rehydrate the object when read\n     *\n     * @param {string} key The key used to store this setting\n     * @param {any} value The setting value to store\n     */\n    public addJSON(key: string, value: any) {\n        this._settings.set(key, jsS(value));\n    }\n\n    /**\n     * Applies the supplied hash to the setting collection overwriting any existing value, or created new values\n     *\n     * @param {ITypedHash<any>} hash The set of values to add\n     */\n    public apply(hash: ITypedHash<any>): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            try {\n                this._settings = mergeMaps(this._settings, objectToMap(hash));\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    /**\n     * Loads configuration settings into the collection from the supplied provider and returns a Promise\n     *\n     * @param {IConfigurationProvider} provider The provider from which we will load the settings\n     */\n    public load(provider: IConfigurationProvider): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            provider.getConfiguration().then((value) => {\n                this._settings = mergeMaps(this._settings, objectToMap(value));\n                resolve();\n            }).catch(reject);\n        });\n    }\n\n    /**\n     * Gets a value from the configuration\n     *\n     * @param {string} key The key whose value we want to return. Returns null if the key does not exist\n     * @return {string} string value from the configuration\n     */\n    public get(key: string): string | null {\n        return this._settings.get(key) || null;\n    }\n\n    /**\n     * Gets a JSON value, rehydrating the stored string to the original object\n     *\n     * @param {string} key The key whose value we want to return. Returns null if the key does not exist\n     * @return {any} object from the configuration\n     */\n    public getJSON(key: string): any {\n        const o = this.get(key);\n        if (o === undefined || o === null) {\n            return o;\n        }\n\n        return JSON.parse(o);\n    }\n}\n","import { IConfigurationProvider } from \"../configuration\";\nimport { ITypedHash, IPnPClientStore, PnPClientStorage } from \"@pnp/common\";\n\n/**\n * A caching provider which can wrap other non-caching providers\n *\n */\nexport default class CachingConfigurationProvider implements IConfigurationProvider {\n\n    private store: IPnPClientStore;\n\n    /**\n     * Creates a new caching configuration provider\n     * @constructor\n     * @param {IConfigurationProvider} wrappedProvider Provider which will be used to fetch the configuration\n     * @param {string} cacheKey Key that will be used to store cached items to the cache\n     * @param {IPnPClientStore} cacheStore OPTIONAL storage, which will be used to store cached settings.\n     */\n    constructor(private wrappedProvider: IConfigurationProvider, private cacheKey: string, cacheStore?: IPnPClientStore) {\n        this.wrappedProvider = wrappedProvider;\n        this.store = (cacheStore) ? cacheStore : this.selectPnPCache();\n    }\n\n    /**\n     * Gets the wrapped configuration providers\n     *\n     * @return {IConfigurationProvider} Wrapped configuration provider\n     */\n    public getWrappedProvider(): IConfigurationProvider {\n        return this.wrappedProvider;\n    }\n\n    /**\n     * Loads the configuration values either from the cache or from the wrapped provider\n     *\n     * @return {Promise<ITypedHash<string>>} Promise of loaded configuration values\n     */\n    public getConfiguration(): Promise<ITypedHash<string>> {\n        // Cache not available, pass control to the wrapped provider\n        if ((!this.store) || (!this.store.enabled)) {\n            return this.wrappedProvider.getConfiguration();\n        }\n\n        return this.store.getOrPut(this.cacheKey, () => {\n            return this.wrappedProvider.getConfiguration().then((providedConfig) => {\n                this.store.put(this.cacheKey, providedConfig);\n                return providedConfig;\n            });\n        });\n    }\n\n    private selectPnPCache(): IPnPClientStore {\n        const pnpCache = new PnPClientStorage();\n        if ((pnpCache.local) && (pnpCache.local.enabled)) {\n            return pnpCache.local;\n        }\n        if ((pnpCache.session) && (pnpCache.session.enabled)) {\n            return pnpCache.session;\n        }\n        throw Error(\"Cannot create a caching configuration provider since cache is not available.\");\n    }\n}\n","import { IFetchOptions, getGUID } from \"@pnp/common\";\nimport { IODataParser } from \"./parsers\";\nimport { IQueryable } from \"./queryable\";\nimport { IRequestContext } from \"./pipeline\";\n\nexport interface IODataBatchRequestInfo {\n    url: string;\n    method: string;\n    options: IFetchOptions;\n    parser: IODataParser<any>;\n    resolve: ((d: any) => void) | null;\n    reject: ((error: any) => void) | null;\n    id: string;\n    index: number;\n}\n\nexport abstract class Batch {\n\n    protected _deps: Promise<void>[];\n    protected _reqs: IODataBatchRequestInfo[];\n    protected _rDeps: Promise<void>[];\n    private _index: number;\n\n    constructor(private _batchId = getGUID()) {\n        this._reqs = [];\n        this._deps = [];\n        this._rDeps = [];\n        this._index = -1;\n    }\n\n    public get batchId(): string {\n        return this._batchId;\n    }\n\n    /**\n     * The requests contained in this batch\n     */\n    protected get requests(): IODataBatchRequestInfo[] {\n        // we sort these each time this is accessed\n        return this._reqs.sort((info1, info2) => info1.index - info2.index);\n    }\n\n    /**\n     * Not meant for use directly\n     * \n     * @param batchee The IQueryable for this batch to track in order\n     */\n    public track(batchee: IQueryable<any>): void {\n\n        batchee.data.batch = this;\n\n        // we need to track the order requests are added to the batch to ensure we always\n        // operate on them in order\n        if (typeof batchee.data.batchIndex === \"undefined\" || batchee.data.batchIndex < 0) {\n            batchee.data.batchIndex = ++this._index;\n        }\n    }\n\n    /**\n     * Adds the given request context to the batch for execution\n     * \n     * @param context Details of the request to batch\n     */\n    public add<T = any>(context: IRequestContext<T>): Promise<T> {\n\n        const info: IODataBatchRequestInfo = {\n            id: context.requestId,\n            index: context.batchIndex,\n            method: context.method.toUpperCase(),\n            options: context.options,\n            parser: context.parser,\n            reject: null,\n            resolve: null,\n            url: context.url,\n        };\n\n        // we create a new promise that will be resolved within the batch\n        const p = new Promise<T>((resolve, reject) => {\n            info.resolve = resolve;\n            info.reject = reject;\n        });\n\n        this._reqs.push(info);\n\n        return p;\n    }\n\n    /**\n     * Adds a dependency insuring that some set of actions will occur before a batch is processed.\n     * MUST be cleared using the returned resolve delegate to allow batches to run\n     */\n    public addDependency(): () => void {\n\n        let resolver: () => void = () => void (0);\n\n        this._deps.push(new Promise<void>((resolve) => {\n            resolver = resolve;\n        }));\n\n        return resolver;\n    }\n\n    /**\n     * The batch's execute method will not resolve util any promises added here resolve\n     * \n     * @param p The dependent promise\n     */\n    public addResolveBatchDependency(p: Promise<any>): void {\n        this._rDeps.push(p);\n    }\n\n    /**\n     * Execute the current batch and resolve the associated promises\n     *\n     * @returns A promise which will be resolved once all of the batch's child promises have resolved\n     */\n    public execute(): Promise<void> {\n\n        // we need to check the dependencies twice due to how different engines handle things.\n        // We can get a second set of promises added during the first set resolving\n        return Promise.all(this._deps)\n            .then(() => Promise.all(this._deps))\n            .then(() => this.executeImpl())\n            .then(() => Promise.all(this._rDeps))\n            .then(() => void (0));\n    }\n\n    protected abstract executeImpl(): Promise<void>;\n}\n","import { IODataParser } from \"./parsers\";\nimport { RuntimeConfig, dateAdd, IPnPClientStore, PnPClientStorage } from \"@pnp/common\";\n\nexport interface ICachingOptions {\n    expiration?: Date;\n    storeName?: \"session\" | \"local\";\n    key: string;\n}\n\nexport class CachingOptions implements ICachingOptions {\n\n    protected static storage = new PnPClientStorage();\n\n    constructor(\n        public key: string,\n        public storeName: \"session\" | \"local\" = RuntimeConfig.defaultCachingStore,\n        public expiration = dateAdd(new Date(), \"second\", RuntimeConfig.defaultCachingTimeoutSeconds)) { }\n\n    public get store(): IPnPClientStore {\n        if (this.storeName === \"local\") {\n            return CachingOptions.storage.local;\n        } else {\n            return CachingOptions.storage.session;\n        }\n    }\n}\n\nexport class CachingParserWrapper<T> implements IODataParser<T> {\n\n    constructor(public parser: IODataParser<T>, public cacheOptions: CachingOptions) { }\n\n    public parse(response: Response): Promise<T> {\n        return this.parser.parse(response).then(r => this.cacheData(r));\n    }\n\n    protected cacheData(data: any): any {\n        if (this.cacheOptions.store !== null) {\n            this.cacheOptions.store.put(this.cacheOptions.key, data, this.cacheOptions.expiration);\n        }\n        return data;\n    }\n}\n","/**\n * Adds a property to a target instance\n * \n * @param target The object to whose prototype we will add a property\n * @param name Property name\n * @param factory Factory method used to produce the property value\n * @param path Any additional path required to produce the value\n */\nexport function addProp<T, U>(target: { prototype: any }, name: string, factory: (arg: U, p?: string) => T, path?: string): void {\n\n    Reflect.defineProperty(target.prototype, name, {\n        configurable: true,\n        enumerable: true,\n        get: function (this: U): T {\n            return factory(this, path);\n        },\n    });\n}\n","import { isFunc, isArray, ITypedHash } from \"@pnp/common\";\n\nexport type ValidProxyMethods = \"apply\" | \"get\" | \"has\" | \"set\";\n\nexport type ExtensionDelegateType<T extends object> = { (op: string, target: T, ...rest: any[]): void };\n\nexport type ExtensionType<T extends object = {}> = Pick<ProxyHandler<T>, ValidProxyMethods> | ExtensionDelegateType<T> | ITypedHash<any>;\n\nlet _enableExtensions = false;\nconst globaExtensions: ExtensionType[] = [];\n\nconst ObjExtensionsSym = Symbol(\"__extensions\");\n\n/**\n * Creates global extensions across all invokable objects\n * \n * @param e The global extensions to apply\n */\nexport const extendGlobal = (e: ExtensionType | ExtensionType[]) => {\n\n    _enableExtensions = true;\n    extendCol(globaExtensions, e);\n};\n\n/**\n * Applies the supplied extensions to a single instance\n * \n * @param target Object to which extensions are applied\n * @param extensions Extensions to apply\n */\nexport const extendObj = <T extends object>(target: T, extensions: ExtensionType | ExtensionType[]): T => {\n\n    _enableExtensions = true;\n\n    if (!Reflect.has(target, ObjExtensionsSym)) {\n        Reflect.set(target, ObjExtensionsSym, []);\n    }\n\n    extendCol(<ExtensionType[]>Reflect.get(target, ObjExtensionsSym), extensions);\n\n    return target;\n};\n\n/**\n * Allows applying extensions to all instances created from the supplied factory\n * \n * @param factory The Invokable Factory method to extend\n * @param extensions Extensions to apply\n */\nexport const extendFactory = <T extends (...args: any[]) => any>(factory: T, extensions: ExtensionType | ExtensionType[]): void => {\n\n    _enableExtensions = true;\n\n    if ((<any>factory).__proto__[ObjExtensionsSym] === undefined) {\n        (<any>factory).__proto__[ObjExtensionsSym] = [];\n    }\n\n    extendCol((<any>factory).__proto__[ObjExtensionsSym], extensions);\n};\n\nfunction extendCol(a: ExtensionType[], e: ExtensionType | ExtensionType[]) {\n    if (isArray(e)) {\n        // @ts-ignore\n        a.push(...e);\n    } else {\n        // @ts-ignore\n        a.push(e);\n    }\n}\n\n/**\n * Clears all global extensions\n */\nexport const clearGlobalExtensions = () => {\n    globaExtensions.length = 0;\n};\n\n/**\n * Disables all extensions\n */\nexport const disableExtensions = () => {\n    _enableExtensions = false;\n};\n\n/**\n * Enables all extensions\n */\nexport const enableExtensions = () => {\n    _enableExtensions = true;\n};\n\n/**\n * Applies a set of extension previously applied to a factory using extendFactory to an object created from that factory\n * \n * @param factory \n * @param args \n */\nexport const applyFactoryExtensions = <T extends object = {}>(factory: (args: any[]) => T, args: any[]): T => {\n\n    let o = factory(args);\n\n    if ((<any>factory).__proto__[ObjExtensionsSym]) {\n        o = extendObj(o, (<any>factory).__proto__[ObjExtensionsSym]);\n    }\n\n    return o;\n};\n\nexport function extensionOrDefault(op: ValidProxyMethods, or: (...args: any[]) => any, target: any, ...rest: any[]): any {\n\n    if (_enableExtensions) {\n\n        const extensions: ExtensionType[] = [];\n\n        // we need to first invoke extensions tied to only this object\n        if (Reflect.has(target, ObjExtensionsSym)) {\n            extensions.push(...Reflect.get(target, ObjExtensionsSym));\n        }\n\n        // second we need to process any global extensions\n        extensions.push(...globaExtensions);\n\n        for (let i = 0; i < extensions.length; i++) {\n            const extension = extensions[i];\n\n            let result = undefined;\n\n            if (isFunc(extension)) {\n\n                // this extension is a function which we call\n                result = (<any>extension)(op, target, ...rest);\n\n            } else if (op === \"get\" && Reflect.has(extension, rest[0])) {\n\n                // this extension is a named extension meaning we are overriding a specific method/property\n                result = Reflect.get(extension, rest[0], target);\n\n            } else if (Reflect.has(extension, op)) {\n\n                // this extension is a ProxyHandler that has a handler defined for {op} so we pass control and see if we get a result\n                result = Reflect.get(extension, op)(target, ...rest);\n            }\n\n            if (typeof result !== \"undefined\") {\n                // if a extension returned a result, we return that\n                // this means that this extension overrides any other extensions and no more are executed\n                // first extension in the list to return \"wins\"\n                return result;\n            }\n        }\n    }\n\n    return or(target, ...rest);\n}\n","import { IQueryable } from \"./queryable\";\nimport { IRequestContext } from \"./pipeline\";\nimport { IFetchOptions, RuntimeConfig } from \"@pnp/common\";\nimport { extensionOrDefault, applyFactoryExtensions } from \"./invokable-extensions\";\n\nexport type IHybrid<R = any, T = any> = T & {\n    (this: T, ...args: any[]): Promise<R>;\n};\n\nexport type IInvoker<R> = (this: IQueryable<any>, ...args: any[]) => Promise<R>;\n\nconst invokableBinder = (invoker: IInvoker<IQueryable<any>>) => <R>(constructor: { new(...args: any[]): any }): (...args: any[]) => R => {\n\n    return (...args: any[]) => {\n\n        const factory = (as: any[]) => {\n            const r = Object.assign(function (...ags: any[]) { return invoker.apply(r, ags); }, new constructor(...as));\n            Reflect.setPrototypeOf(r, constructor.prototype);\n            return r;\n        };\n\n        if (RuntimeConfig.ie11) {\n\n            return factory(args);\n        } else {\n\n            return new Proxy<IHybrid<R>>(applyFactoryExtensions(factory, args), {\n                apply: (target: any, _thisArg: any, argArray?: any) => {\n                    return extensionOrDefault(\"apply\", (...a: any[]) => Reflect.apply(a[0], a[1], a[2]), target, _thisArg, argArray);\n                },\n                get: (target: any, p: PropertyKey, receiver: any) => {\n                    return extensionOrDefault(\"get\", (...a: any[]) => Reflect.get(a[0], a[1], a[2]), target, p, receiver);\n                },\n                has: (target: any, p: PropertyKey) => {\n                    return extensionOrDefault(\"has\", (...a: any[]) => Reflect.has(a[0], a[1]), target, p);\n                },\n                set: (target: any, p: PropertyKey, value: any, receiver: any) => {\n                    return extensionOrDefault(\"set\", (...a: any[]) => Reflect.set(a[0], a[1], a[2], a[3]), target, p, value, receiver);\n                },\n            });\n        }\n    };\n};\n\nexport const invokableFactory = invokableBinder(function <R = any>(this: IQueryable<R>, options?: IFetchOptions): Promise<R> {\n    return this.defaultAction(options);\n});\n\nexport interface IInvokable<R = any> {\n    <T = R>(options?: Partial<IRequestContext<T>>): Promise<T>;\n}\n","import { isFunc, hOP } from \"@pnp/common\";\n\nexport interface IODataParser<T> {\n    hydrate?: (d: any) => T;\n    parse(r: Response): Promise<T>;\n}\n\nexport class ODataParser<T = any> implements IODataParser<T> {\n\n    public parse(r: Response): Promise<T> {\n\n        return new Promise<T>((resolve, reject) => {\n\n            if (this.handleError(r, reject)) {\n\n                this.parseImpl(r, resolve, reject);\n            }\n        });\n    }\n\n    protected parseImpl(r: Response, resolve: (value?: T | PromiseLike<T>) => void, reject: (reason?: Error) => void): void {\n\n        if ((r.headers.has(\"Content-Length\") && parseFloat(r.headers.get(\"Content-Length\")!) === 0) || r.status === 204) {\n\n            resolve(<T>{});\n        } else {\n\n            // patch to handle cases of 200 response with no or whitespace only bodies (#487 & #545)\n            r.text()\n                .then(txt => txt.replace(/\\s/ig, \"\").length > 0 ? JSON.parse(txt) : {})\n                .then(json => resolve(this.parseODataJSON<T>(json)))\n                .catch(e => reject(e));\n        }\n    }\n\n    /**\n     * Handles a response with ok === false by parsing the body and creating a ProcessHttpClientResponseException\n     * which is passed to the reject delegate. This method returns true if there is no error, otherwise false\n     *\n     * @param r Current response object\n     * @param reject reject delegate for the surrounding promise\n     */\n    protected handleError(r: Response, reject: (err?: Error) => void): boolean {\n\n        if (!r.ok) {\n            HttpRequestError.init(r).then(reject);\n        }\n\n        return r.ok;\n    }\n\n    /**\n     * Normalizes the json response by removing the various nested levels\n     *\n     * @param json json object to parse\n     */\n    protected parseODataJSON<U>(json: any): U {\n\n        let result = json;\n\n        if (hOP(json, \"d\")) {\n\n            if (hOP(json.d, \"results\")) {\n\n                result = json.d.results;\n            } else {\n\n                result = json.d;\n            }\n        } else if (hOP(json, \"value\")) {\n\n            result = json.value;\n        }\n\n        return result;\n    }\n}\n\nexport class TextParser extends ODataParser<string> {\n\n    protected parseImpl(r: Response, resolve: (value: any) => void): void {\n\n        r.text().then(resolve);\n    }\n}\n\nexport class BlobParser extends ODataParser<Blob> {\n\n    protected parseImpl(r: Response, resolve: (value: any) => void): void {\n\n        r.blob().then(resolve);\n    }\n}\n\nexport class JSONParser extends ODataParser<any> {\n\n    protected parseImpl(r: Response, resolve: (value: any) => void): void {\n\n        r.json().then(resolve);\n    }\n}\n\nexport class BufferParser extends ODataParser<ArrayBuffer> {\n\n    protected parseImpl(r: Response, resolve: (value: any) => void): void {\n\n        if (isFunc(r.arrayBuffer)) {\n\n            r.arrayBuffer().then(resolve);\n        } else {\n\n            (<any>r).buffer().then(resolve);\n        }\n    }\n}\n\nexport class LambdaParser<T = any> extends ODataParser<T> {\n\n    constructor(private parser: (r: Response) => Promise<T>) {\n        super();\n    }\n\n    protected parseImpl(r: Response, resolve: (value: any) => void): void {\n\n        this.parser(r).then(resolve);\n    }\n}\n\nexport class HttpRequestError extends Error {\n\n    public isHttpRequestError = true;\n\n    constructor(message: string, public response: Response, public status = response.status, public statusText = response.statusText) {\n        super(message);\n    }\n\n    public static async init(r: Response): Promise<HttpRequestError> {\n\n        const t = await r.clone().text();\n        return new HttpRequestError(`Error making HttpClient request in queryable [${r.status}] ${r.statusText} ::> ${t}`, r.clone());\n    }\n}\n","import {\n    combine,\n    RuntimeConfig,\n    IFetchOptions,\n    IConfigOptions,\n    mergeOptions,\n    objectDefinedNotNull,\n    IRequestClient,\n} from \"@pnp/common\";\nimport { ICachingOptions } from \"./caching\";\nimport { Batch } from \"./batch\";\nimport { PipelineMethod } from \"./pipeline\";\nimport { IODataParser, ODataParser } from \"./parsers\";\n\nexport function cloneQueryableData(source: Partial<IQueryableData>): Partial<IQueryableData> {\n\n    const s = JSON.stringify(source, (key: string, value: any) => {\n\n        switch (key) {\n            case \"query\":\n                return JSON.stringify([...(<Map<string, string>>value)]);\n            case \"batch\":\n                return \"-\";\n            case \"batchDependency\":\n                return \"-\";\n            case \"cachingOptions\":\n                return \"-\";\n            case \"clientFactory\":\n                return \"-\";\n            case \"parser\":\n                return \"-\";\n            default:\n                return value;\n        }\n    }, 0);\n\n    const parsed = JSON.parse(s, (key: any, value: any) => {\n        switch (key) {\n            case \"query\":\n                return new Map(JSON.parse(value));\n            case \"batch\":\n                return source.batch;\n            case \"batchDependency\":\n                return source.batchDependency;\n            case \"cachingOptions\":\n                return source.cachingOptions;\n            case \"clientFactory\":\n                return source.clientFactory;\n            case \"parser\":\n                return source.parser;\n            default:\n                return value;\n        }\n    });\n\n    // this handles bodies that cannot be JSON encoded (Blob, etc)\n    if (source.options && source.options.body) {\n        parsed.options.body = source.options.body;\n    }\n\n    return parsed;\n}\n\nexport interface IQueryableData<DefaultActionType = any> {\n    batch: Batch | null;\n    batchIndex: number;\n    batchDependency: () => void | null;\n    cachingOptions: ICachingOptions | null;\n    cloneParentCacheOptions: ICachingOptions | null;\n    cloneParentWasCaching: boolean;\n    query: Map<string, string>;\n    options: IFetchOptions | null;\n    url: string;\n    parentUrl: string;\n    useCaching: boolean;\n    pipes?: PipelineMethod<DefaultActionType>[];\n    parser?: IODataParser<DefaultActionType>;\n    clientFactory?: () => IRequestClient;\n    method?: string;\n}\n\nexport interface IQueryable<DefaultActionType> {\n    data: Partial<IQueryableData<DefaultActionType>>;\n    query: Map<string, string>;\n    append(pathPart: string): void;\n    inBatch(batch: Batch): this;\n    addBatchDependency(): () => void;\n    toUrlAndQuery(): string;\n    toUrl(): string;\n    concat(pathPart: string): this;\n    configure(options: IConfigOptions): this;\n    configureFrom(o: IQueryable<DefaultActionType>): this;\n    usingCaching(options?: ICachingOptions): this;\n    usingParser(parser: IODataParser<any>): this;\n    withPipeline(pipeline: PipelineMethod<DefaultActionType>[]): this;\n    defaultAction(options?: IFetchOptions): Promise<DefaultActionType>;\n}\n\nexport abstract class Queryable<DefaultActionType = any> implements IQueryable<DefaultActionType> {\n\n    private _data: Partial<IQueryableData<DefaultActionType>>;\n\n    constructor(dataSeed: Partial<IQueryableData<DefaultActionType>> = {}) {\n\n        this._data = Object.assign({}, {\n            cloneParentWasCaching: false,\n            options: {},\n            parentUrl: \"\",\n            parser: new ODataParser<DefaultActionType>(),\n            query: new Map<string, string>(),\n            url: \"\",\n            useCaching: false,\n        }, cloneQueryableData(dataSeed));\n    }\n\n    public get data(): Partial<IQueryableData<DefaultActionType>> {\n        return this._data;\n    }\n\n    public set data(value: Partial<IQueryableData<DefaultActionType>>) {\n        this._data = Object.assign({}, cloneQueryableData(this.data), cloneQueryableData(value));\n    }\n\n    /**\n     * Gets the full url with query information\n     *\n     */\n    public abstract toUrlAndQuery(): string;\n\n    /**\n     * The default action for this \n     */\n    public abstract defaultAction(options?: IFetchOptions): Promise<DefaultActionType>;\n\n    /**\n    * Gets the currentl url\n    *\n    */\n    public toUrl(): string {\n        return this.data.url;\n    }\n\n    /**\n     * Directly concatonates the supplied string to the current url, not normalizing \"/\" chars\n     *\n     * @param pathPart The string to concatonate to the url\n     */\n    public concat(pathPart: string): this {\n        this.data.url += pathPart;\n        return this;\n    }\n\n    /**\n     * Provides access to the query builder for this url\n     *\n     */\n    public get query(): Map<string, string> {\n        return this.data.query;\n    }\n\n    /**\n     * Sets custom options for current object and all derived objects accessible via chaining\n     * \n     * @param options custom options\n     */\n    public configure(options: IConfigOptions): this {\n        mergeOptions(this.data.options, options);\n        return this;\n    }\n\n    /**\n     * Configures this instance from the configure options of the supplied instance\n     * \n     * @param o Instance from which options should be taken\n     */\n    public configureFrom(o: IQueryable<any>): this {\n        mergeOptions(this.data.options, o.data.options);\n        return this;\n    }\n\n    /**\n     * Enables caching for this request\n     *\n     * @param options Defines the options used when caching this request\n     */\n    public usingCaching(options?: ICachingOptions): this {\n        if (!RuntimeConfig.globalCacheDisable) {\n            this.data.useCaching = true;\n            if (options !== undefined) {\n                this.data.cachingOptions = options;\n            }\n        }\n        return this;\n    }\n\n    public usingParser(parser: IODataParser<any>): this {\n        this.data.parser = parser;\n        return this;\n    }\n\n    /**\n     * Allows you to set a request specific processing pipeline\n     * \n     * @param pipeline The set of methods, in order, to execute a given request\n     */\n    public withPipeline(pipeline: PipelineMethod<DefaultActionType>[]): this {\n        this.data.pipes = pipeline.slice(0);\n        return this;\n    }\n\n    /**\n     * Appends the given string and normalizes \"/\" chars\n     *\n     * @param pathPart The string to append\n     */\n    public append(pathPart: string): void {\n        this.data.url = combine(this.data.url, pathPart);\n    }\n\n    /**\n     * Adds this query to the supplied batch\n     *\n     * @example\n     * ```\n     *\n     * let b = pnp.sp.createBatch();\n     * pnp.sp.web.inBatch(b).get().then(...);\n     * b.execute().then(...)\n     * ```\n     */\n    public inBatch(batch: Batch): this {\n\n        if (this.hasBatch) {\n            throw Error(\"This query is already part of a batch.\");\n        }\n\n        if (objectDefinedNotNull(batch)) {\n            batch.track(this);\n        }\n\n        return this;\n    }\n\n    /**\n     * Blocks a batch call from occuring, MUST be cleared by calling the returned function\n    */\n    public addBatchDependency(): () => void {\n        if (objectDefinedNotNull(this.data.batch)) {\n            return this.data.batch.addDependency();\n        }\n\n        return () => null;\n    }\n\n    /**\n     * Indicates if the current query has a batch associated\n     *\n     */\n    protected get hasBatch(): boolean {\n        return objectDefinedNotNull(this.data.batch);\n    }\n\n    /**\n     * The batch currently associated with this query or null\n     *\n     */\n    protected get batch(): Batch | null {\n        return this.hasBatch ? this.data.batch : null;\n    }\n\n    /**\n     * Gets the parent url used when creating this instance\n     *\n     */\n    protected get parentUrl(): string {\n        return this.data.parentUrl;\n    }\n\n    /**\n     * Clones this instance's data to target\n     * \n     * @param target Instance to which data is written\n     * @param settings [Optional] Settings controlling how clone is applied\n     */\n    protected cloneTo<T extends IQueryable<any>>(target: T, settings: { includeBatch: boolean } = { includeBatch: true }): T {\n\n        target.data = Object.assign({}, cloneQueryableData(this.data), <Partial<IQueryableData<DefaultActionType>>>{\n            batch: null,\n            cloneParentCacheOptions: null,\n            cloneParentWasCaching: false,\n        }, cloneQueryableData(target.data));\n\n        target.configureFrom(this);\n\n        if (settings.includeBatch) {\n            target.inBatch(this.batch);\n        }\n\n        if (this.data.useCaching) {\n            target.data.cloneParentWasCaching = true;\n            target.data.cloneParentCacheOptions = this.data.cachingOptions;\n        }\n\n        return target;\n    }\n}\n","import { IRequestClient, assign, isFunc, hOP } from \"@pnp/common\";\nimport { LogLevel, Logger } from \"@pnp/logging\";\nimport { CachingOptions, CachingParserWrapper } from \"./caching\";\nimport { IQueryableData } from \"./queryable\";\n\n/**\n * Defines the context for a given request to be processed in the pipeline\n */\nexport interface IRequestContext<ReturnType> extends IQueryableData<ReturnType> {\n    result?: ReturnType;\n    clientFactory: () => IRequestClient;\n    hasResult: boolean;\n    isBatched: boolean;\n    requestId: string;\n    method: string;\n}\n\nexport type PipelineMethod<ReturnType> = (c: IRequestContext<ReturnType>) => Promise<IRequestContext<ReturnType>>;\n\n/**\n * Resolves the context's result value\n *\n * @param context The current context\n */\nfunction returnResult<T = any>(context: IRequestContext<T>): Promise<T> {\n\n    Logger.log({\n        data: Logger.activeLogLevel === LogLevel.Verbose ? context.result : {},\n        level: LogLevel.Info,\n        message: `[${context.requestId}] (${(new Date()).getTime()}) Returning result from pipeline. Set logging to verbose to see data.`,\n    });\n\n    return Promise.resolve(context.result!);\n}\n\n/**\n * Sets the result on the context\n */\nexport function setResult<T = any>(context: IRequestContext<T>, value: any): Promise<IRequestContext<T>> {\n\n    return new Promise<IRequestContext<T>>((resolve) => {\n\n        context.result = value;\n        context.hasResult = true;\n        resolve(context);\n    });\n}\n\n/**\n * Invokes the next method in the provided context's pipeline\n *\n * @param c The current request context\n */\nfunction next<T = any>(c: IRequestContext<T>): Promise<IRequestContext<T>> {\n\n    return c.pipes.length > 0 ? c.pipes.shift()(c) : Promise.resolve(c);\n}\n\n/**\n * Executes the current request context's pipeline\n *\n * @param context Current context\n */\nexport function pipe<T = any>(context: IRequestContext<T>): Promise<T> {\n\n    if (context.pipes.length < 1) {\n        Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Request pipeline contains no methods!`, LogLevel.Error);\n        throw Error(\"Request pipeline contains no methods!\");\n    }\n\n    const promise = next(context).then(ctx => returnResult(ctx)).catch((e: Error) => {\n        Logger.error(e);\n        throw e;\n    });\n\n    if (context.isBatched) {\n        // this will block the batch's execute method from returning until the child requets have been resolved\n        context.batch.addResolveBatchDependency(promise);\n    }\n\n    return promise;\n}\n\n/**\n * decorator factory applied to methods in the pipeline to control behavior\n */\nexport function requestPipelineMethod(alwaysRun = false) {\n\n    return (target: any, propertyKey: string, descriptor: PropertyDescriptor) => {\n\n        const method = descriptor.value;\n\n        descriptor.value = function (...args: any[]) {\n\n            // if we have a result already in the pipeline, pass it along and don't call the tagged method\n            if (!alwaysRun && args.length > 0 && hOP(args[0], \"hasResult\") && args[0].hasResult) {\n                Logger.write(`[${args[0].requestId}] (${(new Date()).getTime()}) Skipping request pipeline method ${propertyKey}, existing result in pipeline.`, LogLevel.Verbose);\n                return Promise.resolve(args[0]);\n            }\n\n            // apply the tagged method\n            Logger.write(`[${args[0].requestId}] (${(new Date()).getTime()}) Calling request pipeline method ${propertyKey}.`, LogLevel.Verbose);\n\n            // then chain the next method in the context's pipeline - allows for dynamic pipeline\n            return method.apply(target, args).then((ctx: IRequestContext<any>) => next(ctx));\n        };\n    };\n}\n\n/**\n * Contains the methods used within the request pipeline\n */\nexport class PipelineMethods {\n\n    /**\n     * Logs the start of the request\n     */\n    @requestPipelineMethod(true)\n    public static logStart<T = any>(context: IRequestContext<T>): Promise<IRequestContext<T>> {\n        return new Promise<IRequestContext<T>>(resolve => {\n\n            Logger.log({\n                data: Logger.activeLogLevel === LogLevel.Info ? {} : context,\n                level: LogLevel.Info,\n                message: `[${context.requestId}] (${(new Date()).getTime()}) Beginning ${context.method} request (${context.url})`,\n            });\n\n            resolve(context);\n        });\n    }\n\n    /**\n     * Handles caching of the request\n     */\n    @requestPipelineMethod()\n    public static caching<T = any>(context: IRequestContext<T>): Promise<IRequestContext<T>> {\n\n        return new Promise<IRequestContext<T>>(resolve => {\n\n            // handle caching, if applicable\n            if (context.useCaching) {\n\n                Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Caching is enabled for request, checking cache...`, LogLevel.Info);\n\n                let cacheOptions = new CachingOptions(context.url.toLowerCase());\n                if (context.cachingOptions !== undefined) {\n                    cacheOptions = assign(cacheOptions, context.cachingOptions);\n                }\n\n                // we may not have a valid store\n                if (cacheOptions.store !== null) {\n\n                    // check if we have the data in cache and if so resolve the promise and return\n                    let data = cacheOptions.store.get(cacheOptions.key);\n\n                    if (data !== null) {\n\n                        Logger.log({\n                            data: Logger.activeLogLevel === LogLevel.Info ? {} : data,\n                            level: LogLevel.Info,\n                            message: `[${context.requestId}] (${(new Date()).getTime()}) Value returned from cache.`,\n                        });\n\n                        // ensure we clear any held batch dependency we are resolving from the cache\n                        if (isFunc(context.batchDependency)) {\n                            context.batchDependency();\n                        }\n                        // handle the case where a parser needs to take special actions with a cached result\n                        if (hOP(context.parser, \"hydrate\")) {\n                            data = context.parser.hydrate(data);\n                        }\n                        return setResult(context, data).then(ctx => resolve(ctx));\n                    }\n                }\n\n                Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Value not found in cache.`, LogLevel.Info);\n\n                // if we don't then wrap the supplied parser in the caching parser wrapper\n                // and send things on their way\n                context.parser = new CachingParserWrapper(context.parser, cacheOptions);\n            }\n\n            return resolve(context);\n        });\n    }\n\n    /**\n     * Sends the request\n     */\n    @requestPipelineMethod()\n    public static send<T = any>(context: IRequestContext<T>): Promise<IRequestContext<T>> {\n\n        return new Promise<IRequestContext<T>>((resolve, reject) => {\n            // send or batch the request\n            if (context.isBatched) {\n\n                const p = context.batch.add(context);\n\n                // we release the dependency here to ensure the batch does not execute until the request is added to the batch\n                if (isFunc(context.batchDependency)) {\n                    context.batchDependency();\n                }\n\n                Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Batching request in batch ${context.batch.batchId}.`, LogLevel.Info);\n\n                // we set the result as the promise which will be resolved by the batch's execution\n                resolve(setResult(context, p));\n\n            } else {\n\n                Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Sending request.`, LogLevel.Info);\n\n                // we are not part of a batch, so proceed as normal\n                const client = context.clientFactory();\n                const opts = assign(context.options || {}, { method: context.method });\n                client.fetch(context.url, opts)\n                    .then(response => context.parser.parse(response))\n                    .then(result => setResult(context, result))\n                    .then(ctx => resolve(ctx))\n                    .catch(e => reject(e));\n            }\n        });\n    }\n\n    /**\n     * Logs the end of the request\n     */\n    @requestPipelineMethod(true)\n    public static logEnd<T = any>(context: IRequestContext<T>): Promise<IRequestContext<T>> {\n\n        return new Promise<IRequestContext<T>>(resolve => {\n\n            if (context.isBatched) {\n\n                Logger.log({\n                    data: Logger.activeLogLevel === LogLevel.Info ? {} : context,\n                    level: LogLevel.Info,\n                    message: `[${context.requestId}] (${(new Date()).getTime()}) ${context.method} request will complete in batch ${context.batch.batchId}.`,\n                });\n\n            } else {\n\n                Logger.log({\n                    data: Logger.activeLogLevel === LogLevel.Info ? {} : context,\n                    level: LogLevel.Info,\n                    message: `[${context.requestId}] (${(new Date()).getTime()}) Completing ${context.method} request.`,\n                });\n            }\n\n            resolve(context);\n        });\n    }\n}\n\nexport function getDefaultPipeline() {\n    return [\n        PipelineMethods.logStart,\n        PipelineMethods.caching,\n        PipelineMethods.send,\n        PipelineMethods.logEnd,\n    ].slice(0);\n}\n","import { IODataParser, ODataParser } from \"./parsers\";\nimport { IFetchOptions, IRequestClient, getGUID, objectDefinedNotNull } from \"@pnp/common\";\nimport { IQueryableData, cloneQueryableData } from \"./queryable\";\nimport { PipelineMethod, pipe, getDefaultPipeline } from \"./pipeline\";\n\nexport interface IRequestOptions<T> extends IFetchOptions {\n    parser: IODataParser<T>;\n}\n\nexport interface IClientFactoryBinder {\n    (clientFactory: () => IRequestClient): IMethodBinder;\n}\n\nexport interface IPipelineBinder {\n    (pipeline: PipelineMethod<any>[]): IClientFactoryBinder;\n}\n\nexport interface IMethodBinder {\n    (method: string): IOperation;\n}\n\nexport interface IOperation {\n    <ReturnType>(o: Partial<IQueryableData<ReturnType>>): Promise<ReturnType>;\n}\n\n// first we bind the pipeline we will use for all requests within this closure\nexport function pipelineBinder(pipes: PipelineMethod<any>[]): IClientFactoryBinder {\n\n    // then we bind the client factory we'll use (typically done in an implementing library such as sp)\n    return function (clientFactory: () => IRequestClient): IMethodBinder {\n\n        // then we create a binder we can apply for each type of method (GET, POST, etc.)\n        return function (method: string): IOperation {\n\n            // finally we get a function back to which we can pass an IQueryableData instance and execute the request it defines\n            return function <ReturnType = any>(o: Partial<IQueryableData<ReturnType>>): Promise<ReturnType> {\n\n                // send the IQueryableData down the pipeline\n                return pipe(Object.assign({}, {\n                    batch: null,\n                    batchDependency: null,\n                    batchIndex: -1,\n                    cachingOptions: null,\n                    clientFactory,\n                    cloneParentCacheOptions: null,\n                    cloneParentWasCaching: false,\n                    hasResult: false,\n                    isBatched: objectDefinedNotNull(o.batch),\n                    method,\n                    options: null,\n                    parentUrl: \"\",\n                    parser: new ODataParser<ReturnType>(),\n                    pipes: pipes.slice(0),\n                    query: new Map<string, string>(),\n                    requestId: getGUID(),\n                    url: \"\",\n                    useCaching: /^get$/i.test(o.method) && o.useCaching,\n                }, cloneQueryableData(o)));\n            };\n        };\n    };\n}\n\nexport const defaultPipelineBinder: IClientFactoryBinder = pipelineBinder(getDefaultPipeline());\n","import { jsS, ITypedHash } from \"@pnp/common\";\n\nexport function body<T = unknown, U = any>(o: U, previous?: T): T & { body: string } {\n    return Object.assign({ body: jsS(o) }, previous);\n}\n\nexport function headers<T = unknown, U extends ITypedHash<string> = {}>(o: U, previous?: T): T & { headers: U } {\n    return Object.assign({ headers: o }, previous);\n}\n","export function metadata(type: string) {\n    return {\n        \"__metadata\": { \"type\": type },\n    };\n}\n","import {\n    ILibraryConfiguration,\n    ITypedHash,\n    RuntimeConfig,\n    IHttpClientImpl,\n    FetchClient,\n    objectDefinedNotNull,\n} from \"@pnp/common\";\n\nexport const emptyGuid = \"00000000-0000-0000-0000-000000000000\";\n\nexport interface SPConfigurationPart {\n    sp?: {\n        /**\n         * Any headers to apply to all requests\n         */\n        headers?: ITypedHash<string>;\n\n        /**\n         * The base url used for all requests\n         */\n        baseUrl?: string;\n\n        /**\n         * Defines a factory method used to create fetch clients\n         */\n        fetchClientFactory?: () => IHttpClientImpl;\n    };\n}\n\nexport interface SPConfiguration extends ILibraryConfiguration, SPConfigurationPart { }\n\nexport function setup(config: SPConfiguration): void {\n    RuntimeConfig.assign(config);\n}\n\nexport class SPRuntimeConfigImpl {\n\n    public get headers(): ITypedHash<string> {\n\n        const spPart = RuntimeConfig.get(\"sp\");\n        if (spPart !== undefined && spPart.headers !== undefined) {\n            return spPart.headers;\n        }\n\n        return {};\n    }\n\n    public get baseUrl(): string | null {\n\n        const spPart = RuntimeConfig.get(\"sp\");\n        if (spPart !== undefined && spPart.baseUrl !== undefined) {\n            return spPart.baseUrl;\n        }\n\n        if (objectDefinedNotNull(RuntimeConfig.spfxContext)) {\n            return RuntimeConfig.spfxContext.pageContext.web.absoluteUrl;\n        }\n\n        return null;\n    }\n\n    public get fetchClientFactory(): () => IHttpClientImpl {\n\n        const spPart = RuntimeConfig.get(\"sp\");\n        if (spPart !== undefined && spPart.fetchClientFactory !== undefined) {\n            return spPart.fetchClientFactory;\n        } else {\n            return () => new FetchClient();\n        }\n    }\n}\n\nexport let SPRuntimeConfig = new SPRuntimeConfigImpl();\n","import { stringIsNullOrEmpty } from \"@pnp/common\";\n\nexport function extractWebUrl(candidateUrl: string): string {\n\n    if (stringIsNullOrEmpty(candidateUrl)) {\n        return \"\";\n    }\n\n    let index = candidateUrl.indexOf(\"_api/\");\n\n    if (index < 0) {\n        index = candidateUrl.indexOf(\"_vti_bin/\");\n    }\n\n    if (index > -1) {\n        return candidateUrl.substr(0, index);\n    }\n\n    // if all else fails just give them what they gave us back\n    return candidateUrl;\n}\n","import { ISharePointQueryable } from \"./sharepointqueryable\";\nimport { stringIsNullOrEmpty } from \"@pnp/common\";\nimport { headers } from \"@pnp/odata\";\n\n/**\n * Includes this method name in the X-ClientService-ClientTag used to record pnpjs usage\n * \n * @param name Method name, displayed in the \n */\nexport function tag(name: string) {\n    return function (target: any, key: string, descriptor: PropertyDescriptor) {\n\n        if (descriptor === undefined) {\n            descriptor = Object.getOwnPropertyDescriptor(target, key);\n        }\n        const originalMethod = descriptor.value;\n\n        descriptor.value = async function (this: ISharePointQueryable, ...args: any[]) {\n\n            this.configure(headers({ \"X-PnPjs-Tracking\": name }));\n            return originalMethod.apply(this, args);\n        };\n\n        return descriptor;\n    };\n}\ntag.getClientTag = (h: Headers, deleteFromCollection = true): string => {\n    if (h.has(\"X-PnPjs-Tracking\")) {\n        const methodName = h.get(\"X-PnPjs-Tracking\");\n        if (deleteFromCollection) {\n            h.delete(\"X-PnPjs-Tracking\");\n        }\n        if (!stringIsNullOrEmpty(methodName)) {\n            return methodName;\n        }\n    }\n    return \"\";\n};\ntag.configure = <T extends ISharePointQueryable>(o: T, name: string): T => {\n    return o.configure(headers({ \"X-PnPjs-Tracking\": name }));\n};\ntag.isTagged = <T extends ISharePointQueryable>(o: T): T => {\n    return o.data.options.headers && o.data.options.headers[\"X-PnPjs-Tracking\"];\n};\n","import {\n    assign,\n    mergeHeaders,\n    IFetchOptions,\n    IRequestClient,\n    getCtxCallback,\n    IHttpClientImpl,\n    combine,\n    dateAdd,\n} from \"@pnp/common\";\nimport { SPRuntimeConfig } from \"./splibconfig\";\nimport { extractWebUrl } from \"./utils/extractweburl\";\nimport { tag } from \"./telemetry\";\nimport { ODataParser } from \"@pnp/odata\";\n\nexport class SPHttpClient implements IRequestClient {\n\n    private _digestCache: IGetDigest;\n\n    constructor(private _impl: IHttpClientImpl = SPRuntimeConfig.fetchClientFactory()) {\n        this._digestCache = getDigestFactory(this);\n    }\n\n    public async fetch(url: string, options: IFetchOptions = {}): Promise<Response> {\n\n        let opts = assign(options, { cache: \"no-cache\", credentials: \"same-origin\" }, true);\n\n        const headers = new Headers();\n\n        // first we add the global headers so they can be overwritten by any passed in locally to this call\n        mergeHeaders(headers, SPRuntimeConfig.headers);\n\n        // second we add the local options so we can overwrite the globals\n        mergeHeaders(headers, options.headers);\n\n        // lastly we apply any default headers we need that may not exist\n        if (!headers.has(\"Accept\")) {\n            headers.append(\"Accept\", \"application/json\");\n        }\n\n        if (!headers.has(\"Content-Type\")) {\n            headers.append(\"Content-Type\", \"application/json;odata=verbose;charset=utf-8\");\n        }\n\n        if (!headers.has(\"X-ClientService-ClientTag\")) {\n\n            const methodName = tag.getClientTag(headers);\n            let clientTag = `PnPCoreJS:$$Version$$:${methodName}`;\n\n            if (clientTag.length > 32) {\n                clientTag = clientTag.substr(0, 32);\n            }\n\n            headers.append(\"X-ClientService-ClientTag\", clientTag);\n        }\n\n        opts = assign(opts, { headers: headers });\n\n        // if we have either a request digest or an authorization header we don't need a digest\n        if (opts.method && opts.method.toUpperCase() !== \"GET\" && !headers.has(\"X-RequestDigest\") && !headers.has(\"Authorization\")) {\n\n            const digest = await this._digestCache(extractWebUrl(url));\n            headers.append(\"X-RequestDigest\", digest);\n        }\n\n        return this.fetchRaw(url, opts);\n    }\n\n    public fetchRaw(url: string, options: IFetchOptions = {}): Promise<Response> {\n\n        // here we need to normalize the headers\n        const rawHeaders = new Headers();\n        mergeHeaders(rawHeaders, options.headers);\n        options = assign(options, { headers: rawHeaders });\n\n        const retry = (ctx: IRetryContext): void => {\n\n            // handles setting the proper timeout for a retry\n            const setRetry = (response: Response) => {\n                let delay: number;\n\n                if (response.headers.has(\"Retry-After\")) {\n                    // if we have gotten a header, use that value as the delay value in seconds\n                    delay = parseInt(response.headers.get(\"Retry-After\"), 10) * 1000;\n                } else {\n                    // grab our current delay\n                    delay = ctx.delay;\n\n                    // Increment our counters.\n                    ctx.delay *= 2;\n                }\n\n                ctx.attempts++;\n\n                // If we have exceeded the retry count, reject.\n                if (ctx.retryCount <= ctx.attempts) {\n                    ctx.reject(Error(`Retry count exceeded (${ctx.retryCount}) for request. Response status: [${response.status}] ${response.statusText}`));\n                } else {\n                    // Set our retry timeout for {delay} milliseconds.\n                    setTimeout(getCtxCallback(this, retry, ctx), delay);\n                }\n            };\n\n            // send the actual request\n            this._impl.fetch(url, options).then((response) => {\n\n                if (response.status === 429) {\n                    // we have been throttled\n                    setRetry(response);\n                } else {\n                    ctx.resolve(response);\n                }\n\n            }).catch((response: Response) => {\n\n                if (response.status === 503 || response.status === 504) {\n                    // http status code 503 or 504, we can retry this\n                    setRetry(response);\n                } else {\n                    ctx.reject(response);\n                }\n            });\n        };\n\n        return new Promise((resolve, reject) => {\n\n            retry.call(this, <IRetryContext>{\n                attempts: 0,\n                delay: 100,\n                reject: reject,\n                resolve: resolve,\n                retryCount: 7,\n            });\n        });\n    }\n\n    public get(url: string, options: IFetchOptions = {}): Promise<Response> {\n        const opts = assign(options, { method: \"GET\" });\n        return this.fetch(url, opts);\n    }\n\n    public post(url: string, options: IFetchOptions = {}): Promise<Response> {\n        const opts = assign(options, { method: \"POST\" });\n        return this.fetch(url, opts);\n    }\n\n    public patch(url: string, options: IFetchOptions = {}): Promise<Response> {\n        const opts = assign(options, { method: \"PATCH\" });\n        return this.fetch(url, opts);\n    }\n\n    public delete(url: string, options: IFetchOptions = {}): Promise<Response> {\n        const opts = assign(options, { method: \"DELETE\" });\n        return this.fetch(url, opts);\n    }\n}\n\ninterface IRetryContext {\n    attempts: number;\n    delay: number;\n    reject: (reason?: any) => void;\n    resolve: (value?: Response | PromiseLike<Response>) => void;\n    retryCount: number;\n}\n\ninterface ICachedDigest {\n    expiration: Date;\n    value: string;\n}\n\ninterface IGetDigest {\n    (webUrl: string): Promise<string>;\n}\n\n// allows for the caching of digests across all HttpClient's which each have their own DigestCache wrapper.\nconst digests = new Map<string, ICachedDigest>();\n\nfunction getDigestFactory(client: SPHttpClient): IGetDigest {\n\n    return async (webUrl: string) => {\n\n        const cachedDigest: ICachedDigest = digests.get(webUrl);\n\n        if (cachedDigest !== undefined) {\n            const now = new Date();\n            if (now < cachedDigest.expiration) {\n                return cachedDigest.value;\n            }\n        }\n\n        const url = combine(webUrl, \"/_api/contextinfo\");\n\n        const headers = {\n            \"Accept\": \"application/json;odata=verbose\",\n            \"Content-Type\": \"application/json;odata=verbose;charset=utf-8\",\n        };\n\n        const resp = await client.fetchRaw(url, {\n            cache: \"no-cache\",\n            credentials: \"same-origin\",\n            headers: assign(headers, SPRuntimeConfig.headers, true),\n            method: \"POST\",\n        });\n\n        const parsed = await (new ODataParser()).parse(resp).then(r => r.GetContextWebInformation);\n\n        const newCachedDigest: ICachedDigest = {\n            expiration: dateAdd(new Date(), \"second\", parsed.FormDigestTimeoutSeconds),\n            value: parsed.FormDigestValue,\n        };\n\n        digests.set(webUrl, newCachedDigest);\n\n        return newCachedDigest.value;\n    };\n}\n","import { combine, isUrlAbsolute, hOP, safeGlobal } from \"@pnp/common\";\nimport { SPRuntimeConfig } from \"../splibconfig\";\n\n/**\n * Ensures that a given url is absolute for the current web based on context\n *\n * @param candidateUrl The url to make absolute\n *\n */\nexport function toAbsoluteUrl(candidateUrl: string): Promise<string> {\n\n    return new Promise((resolve) => {\n\n        if (isUrlAbsolute(candidateUrl)) {\n            // if we are already absolute, then just return the url\n            return resolve(candidateUrl);\n        }\n\n        if (SPRuntimeConfig.baseUrl !== null) {\n            // base url specified either with baseUrl of spfxContext config property\n            return resolve(combine(SPRuntimeConfig.baseUrl, candidateUrl));\n        }\n\n        if (safeGlobal._spPageContextInfo !== undefined) {\n\n            // operating in classic pages\n            if (hOP(safeGlobal._spPageContextInfo, \"webAbsoluteUrl\")) {\n                return resolve(combine(safeGlobal._spPageContextInfo.webAbsoluteUrl, candidateUrl));\n            } else if (hOP(safeGlobal._spPageContextInfo, \"webServerRelativeUrl\")) {\n                return resolve(combine(safeGlobal._spPageContextInfo.webServerRelativeUrl, candidateUrl));\n            }\n        }\n\n        // does window.location exist and have a certain path part in it?\n        if (safeGlobal.location !== undefined) {\n            const baseUrl = safeGlobal.location.toString().toLowerCase();\n            [\"/_layouts/\", \"/siteassets/\"].forEach((s: string) => {\n                const index = baseUrl.indexOf(s);\n                if (index > 0) {\n                    return resolve(combine(baseUrl.substr(0, index), candidateUrl));\n                }\n            });\n        }\n\n        return resolve(candidateUrl);\n    });\n}\n","import { defaultPipelineBinder, IOperation, cloneQueryableData, headers } from \"@pnp/odata\";\nimport { SPHttpClient } from \"./sphttpclient\";\nimport { ISharePointQueryable } from \"./sharepointqueryable\";\nimport { IFetchOptions, mergeOptions, objectDefinedNotNull } from \"@pnp/common\";\nimport { toAbsoluteUrl } from \"./utils/toabsoluteurl\";\n\nconst spClientBinder = defaultPipelineBinder(() => new SPHttpClient());\n\nconst send = (method: \"GET\" | \"POST\" | \"DELETE\" | \"PATCH\" | \"PUT\"): <T = any>(o: ISharePointQueryable, options?: IFetchOptions) => Promise<T> => {\n\n    const operation: IOperation = spClientBinder(method);\n\n    return async function <T = any>(o: ISharePointQueryable, options?: IFetchOptions): Promise<T> {\n\n        const data = cloneQueryableData(o.data);\n        const batchDependency = objectDefinedNotNull(data.batch) ? data.batch.addDependency() : () => { return; };\n        const url = await toAbsoluteUrl(o.toUrlAndQuery());\n\n        mergeOptions(data.options, options);\n\n        return operation(Object.assign({}, data, {\n            batchDependency,\n            url,\n        }));\n    };\n};\n\nexport const spGet = <T = any>(o: ISharePointQueryable<any>, options?: IFetchOptions): Promise<T> => {\n    // Fix for #304 - when we clone objects we in some cases then execute a get request\n    // in these cases the caching settings were getting dropped from the request\n    // this tracks if the object from which this was cloned was caching and applies that to an immediate get request\n    // does not affect objects cloned from this as we are using different fields to track the settings so it won't\n    // be triggered\n    if (o.data.cloneParentWasCaching) {\n        o.usingCaching(o.data.cloneParentCacheOptions);\n    }\n\n    // if we are forcing caching set that in the data here\n    if ((<any>o)._forceCaching) {\n        o.data.useCaching = true;\n    }\n\n    return send(\"GET\")(o, options);\n};\n\nexport const spPost = send(\"POST\");\n\nexport const spDelete = send(\"DELETE\");\n\nexport const spPatch = send(\"PATCH\");\n\nexport const spPostDelete = <T = any>(o: ISharePointQueryable<any>, options?: IFetchOptions): Promise<T> => {\n    const opts = Object.assign(headers({ \"X-HTTP-Method\": \"DELETE\" }), options);\n    return spPost<T>(o, opts);\n};\n\nexport const spPostDeleteETag = <T = any>(o: ISharePointQueryable<any>, options?: IFetchOptions, eTag = \"*\"): Promise<T> => {\n    const opts = Object.assign(headers({ \"X-HTTP-Method\": \"DELETE\", \"IF-Match\": eTag }), options);\n    return spPost<T>(o, opts);\n};\n","import { combine, isUrlAbsolute, assign, jsS, IFetchOptions } from \"@pnp/common\";\nimport { Queryable, invokableFactory, IInvokable } from \"@pnp/odata\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\nimport { SPBatch } from \"./batch\";\nimport { metadata } from \"./utils/metadata\";\nimport { spGet, spPost, spPostDelete, spPostDeleteETag } from \"./operations\";\nimport { tag } from \"./telemetry\";\n\nexport interface ISharePointQueryableConstructor<T extends ISharePointQueryable = ISharePointQueryable> {\n    new(baseUrl: string | ISharePointQueryable, path?: string): T;\n}\n\nexport type ISPInvokableFactory<R = any> = (baseUrl: string | ISharePointQueryable, path?: string) => R;\n\nexport const spInvokableFactory = <R>(f: any): ISPInvokableFactory<R> => {\n    return invokableFactory<R>(f);\n};\n\n/**\n * SharePointQueryable Base Class\n *\n */\nexport class _SharePointQueryable<GetType = any> extends Queryable<GetType> {\n\n    protected _forceCaching: boolean;\n\n    /**\n     * Creates a new instance of the SharePointQueryable class\n     *\n     * @constructor\n     * @param baseUrl A string or SharePointQueryable that should form the base part of the url\n     *\n     */\n    constructor(baseUrl: string | ISharePointQueryable, path?: string) {\n\n        let url = \"\";\n        let parentUrl = \"\";\n        const query = new Map<string, string>();\n\n        if (typeof baseUrl === \"string\") {\n            // we need to do some extra parsing to get the parent url correct if we are\n            // being created from just a string.\n\n            if (isUrlAbsolute(baseUrl) || baseUrl.lastIndexOf(\"/\") < 0) {\n                parentUrl = baseUrl;\n                url = combine(baseUrl, path);\n            } else if (baseUrl.lastIndexOf(\"/\") > baseUrl.lastIndexOf(\"(\")) {\n                // .../items(19)/fields\n                const index = baseUrl.lastIndexOf(\"/\");\n                parentUrl = baseUrl.slice(0, index);\n                path = combine(baseUrl.slice(index), path);\n                url = combine(parentUrl, path);\n            } else {\n                // .../items(19)\n                const index = baseUrl.lastIndexOf(\"(\");\n                parentUrl = baseUrl.slice(0, index);\n                url = combine(baseUrl, path);\n            }\n        } else {\n\n            parentUrl = baseUrl.toUrl();\n            url = combine(parentUrl, path || \"\");\n            const target = baseUrl.query.get(\"@target\");\n            if (target !== undefined) {\n                query.set(\"@target\", target);\n            }\n        }\n\n        // init base with correct values for data seed\n        super({\n            parentUrl,\n            query,\n            url,\n        });\n\n        // post init actions\n        if (typeof baseUrl !== \"string\") {\n            this.configureFrom(baseUrl);\n        }\n        this._forceCaching = false;\n    }\n\n    /**\n     * Gets the full url with query information\n     */\n    public toUrlAndQuery(): string {\n\n        const aliasedParams = new Map<string, string>(this.query);\n\n        let url = this.toUrl().replace(/'!(@.*?)::(.*?)'/ig, (match, labelName, value) => {\n            Logger.write(`Rewriting aliased parameter from match ${match} to label: ${labelName} value: ${value}`, LogLevel.Verbose);\n            aliasedParams.set(labelName, `'${value}'`);\n            return labelName;\n        });\n\n        if (aliasedParams.size > 0) {\n            const char = url.indexOf(\"?\") > -1 ? \"&\" : \"?\";\n            url += `${char}${Array.from(aliasedParams).map((v: [string, string]) => v[0] + \"=\" + v[1]).join(\"&\")}`;\n        }\n\n        return url;\n    }\n\n    /**\n     * Choose which fields to return\n     *\n     * @param selects One or more fields to return\n     */\n    public select(...selects: string[]): this {\n        if (selects.length > 0) {\n            this.query.set(\"$select\", selects.join(\",\"));\n        }\n        return this;\n    }\n\n    public get<T = GetType>(options?: IFetchOptions): Promise<T> {\n        return spGet<T>(<any>this, options);\n    }\n\n    /**\n     * Expands fields such as lookups to get additional data\n     *\n     * @param expands The Fields for which to expand the values\n     */\n    public expand(...expands: string[]): this {\n        if (expands.length > 0) {\n            this.query.set(\"$expand\", expands.join(\",\"));\n        }\n        return this;\n    }\n\n    /**\n     * Clones this SharePointQueryable into a new SharePointQueryable instance of T\n     * @param factory Constructor used to create the new instance\n     * @param additionalPath Any additional path to include in the clone\n     * @param includeBatch If true this instance's batch will be added to the cloned instance\n     */\n    public clone<T extends ISharePointQueryable>(factory: (...args: any[]) => T, additionalPath?: string, includeBatch = true): T {\n\n        const clone: T = super.cloneTo(factory(this, additionalPath), { includeBatch });\n\n        // handle sp specific clone actions\n        const t = \"@target\";\n        if (this.query.has(t)) {\n            clone.query.set(t, this.query.get(t));\n        }\n\n        return clone;\n    }\n\n    /**\n     * The default action for this object (unless overridden spGet)\n     * \n     * @param options optional request options\n     */\n    public defaultAction(options?: IFetchOptions): Promise<GetType> {\n        return spGet(this, options);\n    }\n\n    /**\n     * Gets a parent for this instance as specified\n     *\n     * @param factory The contructor for the class to create\n     */\n    protected getParent<T extends ISharePointQueryable>(\n        factory: ISPInvokableFactory<any>,\n        baseUrl: string | ISharePointQueryable = this.parentUrl,\n        path?: string,\n        batch?: SPBatch): T {\n\n        let parent = factory(baseUrl, path).configureFrom(this);\n\n        const t = \"@target\";\n        if (this.query.has(t)) {\n            parent.query.set(t, this.query.get(t));\n        }\n        if (batch !== undefined) {\n            parent = parent.inBatch(batch);\n        }\n        return parent;\n    }\n}\nexport interface ISharePointQueryable<GetType = any> extends _SharePointQueryable<GetType>, IInvokable<GetType> { }\nexport interface _SharePointQueryable<GetType = any> extends IInvokable<GetType> { }\nexport const SharePointQueryable = spInvokableFactory<ISharePointQueryable>(_SharePointQueryable);\n\n/**\n * Represents a REST collection which can be filtered, paged, and selected\n *\n */\nexport class _SharePointQueryableCollection<GetType = any[]> extends _SharePointQueryable<GetType> {\n\n    /**\n     * Filters the returned collection (https://msdn.microsoft.com/en-us/library/office/fp142385.aspx#bk_supported)\n     *\n     * @param filter The string representing the filter query\n     */\n    public filter(filter: string): this {\n        this.query.set(\"$filter\", filter);\n        return this;\n    }\n\n    /**\n     * Orders based on the supplied fields\n     *\n     * @param orderby The name of the field on which to sort\n     * @param ascending If false DESC is appended, otherwise ASC (default)\n     */\n    public orderBy(orderBy: string, ascending = true): this {\n        const o = \"$orderby\";\n        const query = this.query.has(o) ? this.query.get(o).split(\",\") : [];\n        query.push(`${orderBy} ${ascending ? \"asc\" : \"desc\"}`);\n        this.query.set(o, query.join(\",\"));\n        return this;\n    }\n\n    /**\n     * Skips the specified number of items\n     *\n     * @param skip The number of items to skip\n     */\n    public skip(skip: number): this {\n        this.query.set(\"$skip\", skip.toString());\n        return this;\n    }\n\n    /**\n     * Limits the query to only return the specified number of items\n     *\n     * @param top The query row limit\n     */\n    public top(top: number): this {\n        this.query.set(\"$top\", top.toString());\n        return this;\n    }\n}\nexport interface _SharePointQueryableCollection<GetType = any[]> extends IInvokable<GetType> { }\nexport interface ISharePointQueryableCollection<GetType = any[]> extends _SharePointQueryableCollection<GetType>, IInvokable<GetType> { }\nexport const SharePointQueryableCollection = spInvokableFactory<ISharePointQueryableCollection>(_SharePointQueryableCollection);\n\n/**\n * Represents an instance that can be selected\n *\n */\nexport class _SharePointQueryableInstance<GetType = any> extends _SharePointQueryable<GetType> {\n\n    /**\n     * Curries the update function into the common pieces\n     * \n     * @param type \n     * @param mapper \n     */\n    protected _update<Return, Props = any>(type: string, mapper: (data: any, props: Props) => Return): (props: Props) => Promise<Return> {\n        return (props: any) => spPost(tag.configure(this, `${type}.Update`), {\n            body: jsS(assign(metadata(type), props)),\n            headers: {\n                \"X-HTTP-Method\": \"MERGE\",\n            },\n        }).then((d: any) => mapper(d, props));\n    }\n}\nexport interface ISharePointQueryableInstance<GetType = any> extends _SharePointQueryableInstance<GetType>, IInvokable<GetType> { }\nexport interface _SharePointQueryableInstance<GetType = any> extends IInvokable<GetType> { }\nexport const SharePointQueryableInstance = spInvokableFactory<ISharePointQueryableInstance>(_SharePointQueryableInstance);\n\n/**\n * Adds the a delete method to the tagged class taking no parameters and calling spPostDelete\n */\nexport function deleteable(t: string) {\n\n    return function (this: ISharePointQueryable): Promise<void> {\n        return spPostDelete<void>(tag.configure(this, `${t}.delete`));\n    };\n}\n\nexport interface IDeleteable {\n    /**\n     * Delete this instance\n     */\n    delete(): Promise<void>;\n}\n\nexport function deleteableWithETag(t: string) {\n\n    return function (this: ISharePointQueryable, eTag = \"*\"): Promise<void> {\n        return spPostDeleteETag<void>(tag.configure(this, `${t}.delete`), {}, eTag);\n    };\n}\n\nexport interface IDeleteableWithETag {\n    /**\n     * Delete this instance\n     *\n     * @param eTag Value used in the IF-Match header, by default \"*\"\n     */\n    delete(eTag?: string): Promise<void>;\n}\n","/**\n * Class Decorators\n */\n\n/**\n * Decorator used to specify the default path for SharePointQueryable objects\n * \n * @param path \n */\nexport function defaultPath(path: string) {\n\n    return function <T extends { new(...args: any[]): {} }>(target: T) {\n\n        return class extends target {\n            constructor(...args: any[]) {\n                super(args[0], args.length > 1 && args[1] !== undefined ? args[1] : path);\n            }\n        };\n    };\n}\n\n // TODO::?\n// performance tracking method decorator\n// redirect to graph api\n\n\n\n\n","import { ISPInvokableFactory } from \"./sharepointqueryable\";\nimport { assign, combine, hOP, isUrlAbsolute } from \"@pnp/common\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\nimport { ODataParser } from \"@pnp/odata\";\nimport { extractWebUrl } from \"./utils/extractweburl\";\n\nexport function odataUrlFrom(candidate: any): string {\n\n    const parts: string[] = [];\n    const s = [\"odata.type\", \"odata.editLink\", \"__metadata\", \"odata.metadata\", \"odata.id\"];\n\n    if (hOP(candidate, s[0]) && candidate[s[0]] === \"SP.Web\") {\n\n        // webs return an absolute url in the id\n        if (hOP(candidate, s[4])) {\n            parts.push(candidate[s[4]]);\n        } else if (hOP(candidate, s[2])) {\n            // we are dealing with verbose, which has an absolute uri\n            parts.push(candidate.__metadata.uri);\n        }\n\n    } else {\n\n        if (hOP(candidate, s[3]) && hOP(candidate, s[1])) {\n            // we are dealign with minimal metadata (default)\n\n            // some entities return an abosolute url in the editlink while for others it is relative\n            // without the _api. This code is meant to handle both situations\n            const editLink = isUrlAbsolute(candidate[s[1]]) ? candidate[s[1]].split(\"_api\")[1] : candidate[s[1]];\n\n            parts.push(extractWebUrl(candidate[s[3]]), \"_api\", editLink);\n        } else if (hOP(candidate, s[1])) {\n            parts.push(\"_api\", candidate[s[1]]);\n        } else if (hOP(candidate, s[2])) {\n            // we are dealing with verbose, which has an absolute uri\n            parts.push(candidate.__metadata.uri);\n        }\n    }\n\n    if (parts.length < 1) {\n        Logger.write(\"No uri information found in ODataEntity parsing, chaining will fail for this object.\", LogLevel.Warning);\n        return \"\";\n    }\n\n    return combine(...parts);\n}\n\nclass SPODataEntityParserImpl<T, D> extends ODataParser<T & D> {\n\n    constructor(protected factory: ISPInvokableFactory<any>) {\n        super();\n    }\n\n    public hydrate = (d: D) => {\n        const o = this.factory(odataUrlFrom(d), null);\n        return assign(o, d);\n    }\n\n    public parse(r: Response): Promise<T & D> {\n        return super.parse(r).then((d: any) => {\n            const o = this.factory(odataUrlFrom(d), null);\n            return assign<T, D>(o, d);\n        });\n    }\n}\n\nclass SPODataEntityArrayParserImpl<T, D> extends ODataParser<(T & D)[]> {\n\n    constructor(protected factory: ISPInvokableFactory<T>) {\n        super();\n    }\n\n    public hydrate = (d: D[]) => {\n        return d.map(v => {\n            const o = this.factory(odataUrlFrom(v), null);\n            return assign(o, v);\n        });\n    }\n\n    public parse(r: Response): Promise<(T & D)[]> {\n        return super.parse(r).then((d: D[]) => {\n            return d.map(v => {\n                const o = this.factory(odataUrlFrom(v), null);\n                return assign(o, v);\n            });\n        });\n    }\n}\n\nexport function spODataEntity<T, DataType = any>(factory: ISPInvokableFactory<T>): ODataParser<T & DataType> {\n    return new SPODataEntityParserImpl<T, DataType>(factory);\n}\n\nexport function spODataEntityArray<T, DataType = any>(factory: ISPInvokableFactory<T>): ODataParser<(T & DataType)[]> {\n    return new SPODataEntityArrayParserImpl<T, DataType>(factory);\n}\n","import { Batch } from \"@pnp/odata\";\nimport { getGUID, isUrlAbsolute, combine, mergeHeaders, hOP } from \"@pnp/common\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\nimport { SPHttpClient } from \"./sphttpclient\";\nimport { SPRuntimeConfig } from \"./splibconfig\";\nimport { toAbsoluteUrl } from \"./utils/toabsoluteurl\";\n\n/**\n * Manages a batch of OData operations\n */\nexport class SPBatch extends Batch {\n\n    constructor(private baseUrl: string) {\n        super();\n    }\n\n    /**\n     * Parses the response from a batch request into an array of Response instances\n     *\n     * @param body Text body of the response from the batch request\n     */\n    public static ParseResponse(body: string): Response[] {\n\n        const responses: Response[] = [];\n        const header = \"--batchresponse_\";\n        // Ex. \"HTTP/1.1 500 Internal Server Error\"\n        const statusRegExp = new RegExp(\"^HTTP/[0-9.]+ +([0-9]+) +(.*)\", \"i\");\n        const lines = body.split(\"\\n\");\n        let state = \"batch\";\n        let status: number;\n        let statusText: string;\n        for (let i = 0; i < lines.length; ++i) {\n            const line = lines[i];\n            switch (state) {\n                case \"batch\":\n                    if (line.substr(0, header.length) === header) {\n                        state = \"batchHeaders\";\n                    } else {\n                        if (line.trim() !== \"\") {\n                            throw Error(`Invalid response, line ${i}`);\n                        }\n                    }\n                    break;\n                case \"batchHeaders\":\n                    if (line.trim() === \"\") {\n                        state = \"status\";\n                    }\n                    break;\n                case \"status\":\n                    const parts = statusRegExp.exec(line);\n                    if (parts.length !== 3) {\n                        throw Error(`Invalid status, line ${i}`);\n                    }\n                    status = parseInt(parts[1], 10);\n                    statusText = parts[2];\n                    state = \"statusHeaders\";\n                    break;\n                case \"statusHeaders\":\n                    if (line.trim() === \"\") {\n                        state = \"body\";\n                    }\n                    break;\n                case \"body\":\n                    responses.push((status === 204) ? new Response() : new Response(line, { status: status, statusText: statusText }));\n                    state = \"batch\";\n                    break;\n            }\n        }\n\n        if (state !== \"status\") {\n            throw Error(\"Unexpected end of input\");\n        }\n\n        return responses;\n    }\n\n    protected async executeImpl(): Promise<void> {\n\n        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Executing batch with ${this.requests.length} requests.`, LogLevel.Info);\n\n        // if we don't have any requests, don't bother sending anything\n        // this could be due to caching further upstream, or just an empty batch\n        if (this.requests.length < 1) {\n            Logger.write(`Resolving empty batch.`, LogLevel.Info);\n            return;\n        }\n\n        // creating the client here allows the url to be populated for nodejs client as well as potentially\n        // any other hacks needed for other types of clients. Essentially allows the absoluteRequestUrl\n        // below to be correct\n        const client = new SPHttpClient();\n\n        // due to timing we need to get the absolute url here so we can use it for all the individual requests\n        // and for sending the entire batch\n        const absoluteRequestUrl = await toAbsoluteUrl(this.baseUrl);\n\n        // build all the requests, send them, pipe results in order to parsers\n        const batchBody: string[] = [];\n\n        let currentChangeSetId = \"\";\n\n        for (let i = 0; i < this.requests.length; i++) {\n            const reqInfo = this.requests[i];\n\n            if (reqInfo.method === \"GET\") {\n\n                if (currentChangeSetId.length > 0) {\n                    // end an existing change set\n                    batchBody.push(`--changeset_${currentChangeSetId}--\\n\\n`);\n                    currentChangeSetId = \"\";\n                }\n\n                batchBody.push(`--batch_${this.batchId}\\n`);\n\n            } else {\n\n                if (currentChangeSetId.length < 1) {\n                    // start new change set\n                    currentChangeSetId = getGUID();\n                    batchBody.push(`--batch_${this.batchId}\\n`);\n                    batchBody.push(`Content-Type: multipart/mixed; boundary=\"changeset_${currentChangeSetId}\"\\n\\n`);\n                }\n\n                batchBody.push(`--changeset_${currentChangeSetId}\\n`);\n            }\n\n            // common batch part prefix\n            batchBody.push(`Content-Type: application/http\\n`);\n            batchBody.push(`Content-Transfer-Encoding: binary\\n\\n`);\n\n            // these are the per-request headers\n            const headers = new Headers();\n\n            // this is the url of the individual request within the batch\n            const url = isUrlAbsolute(reqInfo.url) ? reqInfo.url : combine(absoluteRequestUrl, reqInfo.url);\n\n            Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Adding request ${reqInfo.method} ${url} to batch.`, LogLevel.Verbose);\n\n            if (reqInfo.method !== \"GET\") {\n\n                let method = reqInfo.method;\n\n                const castHeaders: any = reqInfo.options.headers;\n                if (hOP(reqInfo, \"options\") && hOP(reqInfo.options, \"headers\") && castHeaders[\"X-HTTP-Method\"] !== undefined) {\n\n                    method = castHeaders[\"X-HTTP-Method\"];\n                    delete castHeaders[\"X-HTTP-Method\"];\n                }\n\n                batchBody.push(`${method} ${url} HTTP/1.1\\n`);\n\n                headers.set(\"Content-Type\", \"application/json;odata=verbose;charset=utf-8\");\n\n            } else {\n                batchBody.push(`${reqInfo.method} ${url} HTTP/1.1\\n`);\n            }\n\n            // merge global config headers\n            mergeHeaders(headers, SPRuntimeConfig.headers);\n\n            // merge per-request headers\n            if (reqInfo.options) {\n                mergeHeaders(headers, reqInfo.options.headers);\n            }\n\n            // lastly we apply any default headers we need that may not exist\n            if (!headers.has(\"Accept\")) {\n                headers.append(\"Accept\", \"application/json\");\n            }\n\n            if (!headers.has(\"Content-Type\")) {\n                headers.append(\"Content-Type\", \"application/json;odata=verbose;charset=utf-8\");\n            }\n\n            if (!headers.has(\"X-ClientService-ClientTag\")) {\n                headers.append(\"X-ClientService-ClientTag\", \"PnPCoreJS:@pnp-$$Version$$:batch\");\n            }\n\n            // write headers into batch body\n            headers.forEach((value: string, name: string) => {\n                batchBody.push(`${name}: ${value}\\n`);\n            });\n\n            batchBody.push(\"\\n\");\n\n            if (reqInfo.options.body) {\n                batchBody.push(`${reqInfo.options.body}\\n\\n`);\n            }\n        }\n\n        if (currentChangeSetId.length > 0) {\n            // Close the changeset\n            batchBody.push(`--changeset_${currentChangeSetId}--\\n\\n`);\n            currentChangeSetId = \"\";\n        }\n\n        batchBody.push(`--batch_${this.batchId}--\\n`);\n\n        const batchOptions = {\n            \"body\": batchBody.join(\"\"),\n            \"headers\": {\n                \"Content-Type\": `multipart/mixed; boundary=batch_${this.batchId}`,\n            },\n            \"method\": \"POST\",\n        };\n\n        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Sending batch request.`, LogLevel.Info);\n\n        const fetchResponse = await client.fetch(combine(absoluteRequestUrl, \"/_api/$batch\"), batchOptions);\n        const text = await fetchResponse.text();\n        const responses = SPBatch.ParseResponse(text);\n\n        if (responses.length !== this.requests.length) {\n            throw Error(\"Could not properly parse responses to match requests in batch.\");\n        }\n\n        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Resolving batched requests.`, LogLevel.Info);\n\n        // this structure ensures that we resolve the batched requests in the order we expect\n        // using async this is not guaranteed depending on the requests\n        return responses.reduce((p, response, index) => p.then(async _ => {\n\n            const request = this.requests[index];\n\n            Logger.write(`[${request.id}] (${(new Date()).getTime()}) Resolving request in batch ${this.batchId}.`, LogLevel.Info);\n\n            try {\n\n                request.resolve(await request.parser.parse(response));\n\n            } catch (e) {\n\n                request.reject(e);\n            }\n\n        }), Promise.resolve(void (0)));\n    }\n}\n","import { IConfigOptions, ISPFXContext } from \"@pnp/common\";\nimport {\n    setup as _setup,\n    SPConfiguration,\n} from \"./splibconfig\";\n\n/**\n * Root of the SharePoint REST module\n */\nexport class SPRest {\n\n    /** \n     * Creates a new instance of the SPRest class\n     * \n     * @param options Additional options\n     * @param baseUrl A string that should form the base part of the url\n     */\n    constructor(protected _options: IConfigOptions = {}, protected _baseUrl = \"\") { }\n\n    /**\n     * Configures instance with additional options and baseUrl.\n     * Provided configuration used by other objects in a chain\n     * \n     * @param options Additional options\n     * @param baseUrl A string that should form the base part of the url\n     */\n    public configure(options: IConfigOptions, baseUrl = \"\"): SPRest {\n        return new SPRest(options, baseUrl);\n    }\n\n    /**\n     * Global SharePoint configuration options\n     * \n     * @param config The SharePoint configuration to apply\n     */\n    public setup(config: SPConfiguration | ISPFXContext) {\n\n        if ((<ISPFXContext>config).pageContext) {\n            _setup({\n                spfxContext: <ISPFXContext>config,\n            });\n        } else {\n            _setup(<SPConfiguration>config);\n        }\n    }\n}\n\nexport const sp = new SPRest();\n","import { stringIsNullOrEmpty } from \"@pnp/common\";\nimport { LogLevel, Logger } from \"@pnp/logging\";\n\nexport function escapeQueryStrValue(value: string): string {\n\n    if (stringIsNullOrEmpty(value)) {\n        return \"\";\n    }\n\n    // replace all instance of ' with ''\n\n    if (/!(@.*?)::(.*?)/ig.test(value)) {\n        // to ensure our param aliasing still works we need to treat these special or we'll hear about it\n        // so we encode JUST the part that will end up in the url\n        return value.replace(/!(@.*?)::(.*)$/ig, (match, labelName, v) => {\n            Logger.write(`Rewriting aliased parameter from match ${match} to label: ${labelName} value: ${v}`, LogLevel.Verbose);\n            return `!${labelName}::${encodeURIComponent(v.replace(/\\'/ig, \"''\"))}`;\n        });\n    } else {\n        return encodeURIComponent(value.replace(/\\'/ig, \"''\"));\n    }\n}\n","import { SharePointQueryable, _SharePointQueryableInstance, spInvokableFactory } from \"../sharepointqueryable\";\nimport { defaultPath } from \"../decorators\";\nimport { Web, IWeb } from \"../webs/types\";\nimport { hOP, assign } from \"@pnp/common\";\nimport { body } from \"@pnp/odata\";\nimport { odataUrlFrom } from \"../odata\";\nimport { spPost } from \"../operations\";\nimport { SPBatch } from \"../batch\";\nimport { escapeQueryStrValue } from \"../utils/escapeQueryStrValue\";\nimport { IChangeQuery } from \"../types\";\nimport { tag } from \"../telemetry\";\nimport { metadata } from \"../utils/metadata\";\nimport { extractWebUrl } from \"../utils/extractweburl\";\nimport { emptyGuid } from \"../splibconfig\";\n\n@defaultPath(\"_api/site\")\nexport class _Site extends _SharePointQueryableInstance {\n\n    /**\n    * Gets the root web of the site collection\n    *\n    */\n    public get rootWeb(): IWeb {\n        return tag.configure(Web(this, \"rootweb\"), \"si.rootWeb\");\n    }\n\n    /**\n     * Gets a Web instance representing the root web of the site collection\n     * correctly setup for chaining within the library\n     */\n    public async getRootWeb(): Promise<IWeb> {\n        const web = await this.rootWeb.select(\"Url\")<{ Url: string }>();\n        return tag.configure(Web(web.Url), \"si.getRootWeb\");\n    }\n\n    /**\n    * Gets the context information for this site collection\n    */\n    public async getContextInfo(): Promise<IContextInfo> {\n\n        const q = tag.configure(Site(this.parentUrl, \"_api/contextinfo\"), \"si.getContextInfo\");\n        const data = await spPost(q);\n\n        if (hOP(data, \"GetContextWebInformation\")) {\n            const info = data.GetContextWebInformation;\n            info.SupportedSchemaVersions = info.SupportedSchemaVersions.results;\n            return info;\n        } else {\n            return data;\n        }\n    }\n\n    public createBatch(): SPBatch {\n        return new SPBatch(this.parentUrl);\n    }\n\n    /**\n    * Deletes the current site\n    *\n    */\n    public async delete(): Promise<void> {\n\n        const site = await this.clone(Site, \"\").select(\"Id\")<{ Id: string }>();\n        const q = tag.configure(Site(this.parentUrl, \"_api/SPSiteManager/Delete\"), \"si.delete\");\n        await spPost(q, body({ siteId: site.Id }));\n    }\n\n    /**\n     * Gets the document libraries on a site. Static method. (SharePoint Online only)\n     *\n     * @param absoluteWebUrl The absolute url of the web whose document libraries should be returned\n     */\n    public async getDocumentLibraries(absoluteWebUrl: string): Promise<IDocumentLibraryInformation[]> {\n\n        const q = tag.configure(SharePointQueryable(\"\", \"_api/sp.web.getdocumentlibraries(@v)\"), \"si.getDocumentLibraries\");\n        q.query.set(\"@v\", `'${escapeQueryStrValue(absoluteWebUrl)}'`);\n        const data = await q();\n        return hOP(data, \"GetDocumentLibraries\") ? data.GetDocumentLibraries : data;\n    }\n\n    /**\n     * Gets the site url from a page url\n     *\n     * @param absolutePageUrl The absolute url of the page\n     */\n    public async getWebUrlFromPageUrl(absolutePageUrl: string): Promise<string> {\n\n        const q = tag.configure(SharePointQueryable(\"\", \"_api/sp.web.getweburlfrompageurl(@v)\"), \"si.getWebUrlFromPageUrl\");\n        q.query.set(\"@v\", `'${escapeQueryStrValue(absolutePageUrl)}'`);\n        const data = await q();\n        return hOP(data, \"GetWebUrlFromPageUrl\") ? data.GetWebUrlFromPageUrl : data;\n    }\n\n    /**\n     * Returns the collection of changes from the change log that have occurred within the list, based on the specified query\n     *\n     * @param query The change query\n     */\n    @tag(\"si.getChanges\")\n    public getChanges(query: IChangeQuery): Promise<any> {\n\n        const postBody = body({ \"query\": assign(metadata(\"SP.ChangeQuery\"), query) });\n        return spPost(this.clone(Web, \"getchanges\"), postBody);\n    }\n\n    /**\n    * Opens a web by id (using POST)\n    *\n    * @param webId The GUID id of the web to open\n    */\n    @tag(\"si.openWebById\")\n    public async openWebById(webId: string): Promise<IOpenWebByIdResult> {\n\n        const data = await spPost(this.clone(Site, `openWebById('${webId}')`));\n        return {\n            data,\n            web: Web(extractWebUrl(odataUrlFrom(data))),\n        };\n    }\n\n    /**\n     * Creates a Modern communication site.\n     * \n     * @param title The title of the site to create\n     * @param lcid The language to use for the site. If not specified will default to 1033 (English).\n     * @param shareByEmailEnabled If set to true, it will enable sharing files via Email. By default it is set to false\n     * @param url The fully qualified URL (e.g. https://yourtenant.sharepoint.com/sites/mysitecollection) of the site.\n     * @param description The description of the communication site.\n     * @param classification The Site classification to use. For instance 'Contoso Classified'. See https://www.youtube.com/watch?v=E-8Z2ggHcS0 for more information\n     * @param siteDesignId The Guid of the site design to be used.\n     *                     You can use the below default OOTB GUIDs:\n     *                     Topic: 00000000-0000-0000-0000-000000000000\n     *                     Showcase: 6142d2a0-63a5-4ba0-aede-d9fefca2c767\n     *                     Blank: f6cc5403-0d63-442e-96c0-285923709ffc \n     * @param hubSiteId The id of the hub site to which the new site should be associated\n     * @param owner Optional owner value, required if executing the method in app only mode\n     */\n    public async createCommunicationSite(\n        title: string,\n        lcid = 1033,\n        shareByEmailEnabled = false,\n        url: string,\n        description?: string,\n        classification?: string,\n        siteDesignId?: string,\n        hubSiteId?: string,\n        owner?: string,\n    ): Promise<ISiteCreationResponse> {\n\n        return this.createCommunicationSiteFromProps({\n            Classification: classification,\n            Description: description,\n            HubSiteId: hubSiteId,\n            Lcid: lcid,\n            Owner: owner,\n            ShareByEmailEnabled: shareByEmailEnabled,\n            SiteDesignId: siteDesignId,\n            Title: title,\n            Url: url,\n        });\n    }\n\n    public async createCommunicationSiteFromProps(props: ICreateCommSiteProps): Promise<ISiteCreationResponse> {\n\n        // handle defaults\n        const p = Object.assign({}, {\n            Classification: \"\",\n            Description: \"\",\n            HubSiteId: emptyGuid,\n            Lcid: 1033,\n            ShareByEmailEnabled: false,\n            SiteDesignId: emptyGuid,\n            WebTemplate: \"SITEPAGEPUBLISHING#0\",\n            WebTemplateExtensionId: emptyGuid,\n        }, props);\n\n        const postBody = body({\n            \"request\": assign(metadata(\"Microsoft.SharePoint.Portal.SPSiteCreationRequest\"), p),\n        });\n\n        return spPost(Site(extractWebUrl(this.toUrl()), \"/_api/SPSiteManager/Create\"), postBody);\n    }\n\n    /**\n    * Creates a Modern team site backed by Office 365 group. For use in SP Online only. This will not work with App-only tokens\n    * \n    * @param displayName The title or display name of the Modern team site to be created\n    * @param alias Alias of the underlying Office 365 Group\n    * @param isPublic Defines whether the Office 365 Group will be public (default), or private.\n    * @param lcid The language to use for the site. If not specified will default to English (1033).\n    * @param description The description of the site to be created.\n    * @param classification The Site classification to use. For instance 'Contoso Classified'. See https://www.youtube.com/watch?v=E-8Z2ggHcS0 for more information\n    * @param owners The Owners of the site to be created     \n    */\n    public async createModernTeamSite(\n        displayName: string,\n        alias: string,\n        isPublic?: boolean,\n        lcid?: number,\n        description?: string,\n        classification?: string,\n        owners?: string[],\n        hubSiteId?: string,\n        siteDesignId?: string,\n    ): Promise<ISiteCreationResponse> {\n\n        return this.createModernTeamSiteFromProps({\n            alias,\n            classification,\n            description,\n            displayName,\n            hubSiteId,\n            isPublic,\n            lcid,\n            owners,\n            siteDesignId,\n        });\n    }\n\n    public async createModernTeamSiteFromProps(props: ICreateTeamSiteProps): Promise<ISiteCreationResponse> {\n\n        // handle defaults\n        const p = Object.assign({}, {\n            classification: \"\",\n            description: \"\",\n            hubSiteId: emptyGuid,\n            isPublic: true,\n            lcid: 1033,\n            owners: [],\n        }, props);\n\n        const postBody = {\n            alias: p.alias,\n            displayName: p.displayName,\n            isPublic: p.isPublic,\n            optionalParams: {\n                Classification: p.classification,\n                CreationOptions: {\n                    \"results\": [`SPSiteLanguage:${p.lcid}`, `HubSiteId:${p.hubSiteId}`],\n                },\n                Description: p.description,\n                Owners: {\n                    \"results\": p.owners,\n                },\n            },\n        };\n\n        if (p.siteDesignId) {\n            postBody.optionalParams.CreationOptions.results.push(`implicit_formula_292aa8a00786498a87a5ca52d9f4214a_${p.siteDesignId}`);\n        }\n\n        return spPost(Site(extractWebUrl(this.toUrl()), \"/_api/GroupSiteManager/CreateGroupEx\"), body(postBody));\n    }\n}\nexport interface ISite extends _Site { }\nexport const Site = spInvokableFactory<ISite>(_Site);\n\n/**\n * The result of opening a web by id: contains the data returned as well as a chainable web instance\n */\nexport interface IOpenWebByIdResult {\n    data: any;\n    web: IWeb;\n}\n\n/**\n * This is the interface to expose data i.e. context information of a site\n */\nexport interface IContextInfo {\n    FormDigestTimeoutSeconds?: number;\n    FormDigestValue?: number;\n    LibraryVersion?: string;\n    SiteFullUrl?: string;\n    SupportedSchemaVersions?: string[];\n    WebFullUrl?: string;\n}\n\n/**\n * This is the interface to expose data for Document Library\n */\nexport interface IDocumentLibraryInformation {\n    AbsoluteUrl?: string;\n    Modified?: Date;\n    ModifiedFriendlyDisplay?: string;\n    ServerRelativeUrl?: string;\n    Title?: string;\n}\n\nexport interface ICreateCommSiteProps {\n    Classification?: string;\n    Description?: string;\n    HubSiteId?: string;\n    Lcid?: number;\n    Owner?: string;\n    ShareByEmailEnabled?: boolean;\n    SiteDesignId?: string;\n    Title: string;\n    Url: string;\n    WebTemplate?: \"SITEPAGEPUBLISHING#0\" | \"STS#3\";\n    WebTemplateExtensionId?: string;\n}\n\nexport interface ICreateTeamSiteProps {\n    displayName: string;\n    alias: string;\n    isPublic?: boolean;\n    lcid?: number;\n    description?: string;\n    classification?: string;\n    owners?: string[];\n    hubSiteId?: string;\n    siteDesignId?: string;\n}\n\nexport interface ISiteCreationResponse {\n    \"SiteId\": string;\n    \"SiteStatus\": 0 | 1 | 2 | 3;\n    \"SiteUrl\": string;\n}\n","import { SPRest } from \"../rest\";\nimport { ISite, Site } from \"./types\";\n\nexport {\n    IOpenWebByIdResult,\n    ISite,\n    Site,\n    IContextInfo,\n    IDocumentLibraryInformation,\n} from \"./types\";\n\ndeclare module \"../rest\" {\n    interface SPRest {\n        readonly site: ISite;\n    }\n}\n\nReflect.defineProperty(SPRest.prototype, \"site\", {\n    configurable: true,\n    enumerable: true,\n    get: function (this: SPRest) {\n        return Site(this._baseUrl).configure(this._options);\n    },\n});\n","import { assign, ITypedHash } from \"@pnp/common\";\nimport { body, headers } from \"@pnp/odata\";\nimport {\n    _SharePointQueryableInstance,\n    SharePointQueryableCollection,\n    _SharePointQueryableCollection,\n    ISharePointQueryableCollection,\n    ISharePointQueryableInstance,\n    spInvokableFactory,\n    SharePointQueryableInstance,\n    deleteable,\n    IDeleteable,\n} from \"../sharepointqueryable\";\nimport { defaultPath } from \"../decorators\";\nimport { IChangeQuery } from \"../types\";\nimport { odataUrlFrom } from \"../odata\";\nimport { SPBatch } from \"../batch\";\nimport { metadata } from \"../utils/metadata\";\nimport { Site, IOpenWebByIdResult } from \"../sites\";\nimport { spPost, spGet } from \"../operations\";\nimport { escapeQueryStrValue } from \"../utils/escapeQueryStrValue\";\nimport { tag } from \"../telemetry\";\n\n@defaultPath(\"webs\")\nexport class _Webs extends _SharePointQueryableCollection<IWebInfo[]> {\n\n    /**\n     * Adds a new web to the collection\n     *\n     * @param title The new web's title\n     * @param url The new web's relative url\n     * @param description The new web's description\n     * @param template The new web's template internal name (default = STS)\n     * @param language The locale id that specifies the new web's language (default = 1033 [English, US])\n     * @param inheritPermissions When true, permissions will be inherited from the new web's parent (default = true)\n     */\n    @tag(\"ws.add\")\n    public async add(title: string, url: string, description = \"\", template = \"STS\", language = 1033, inheritPermissions = true): Promise<IWebAddResult> {\n\n        const postBody = body({\n            \"parameters\":\n                assign(metadata(\"SP.WebCreationInformation\"),\n                    {\n                        Description: description,\n                        Language: language,\n                        Title: title,\n                        Url: url,\n                        UseSamePermissionsAsParentSite: inheritPermissions,\n                        WebTemplate: template,\n                    }),\n        });\n\n        const data = await spPost(this.clone(Webs, \"add\"), postBody);\n\n        return {\n            data,\n            web: Web(odataUrlFrom(data).replace(/_api\\/web\\/?/i, \"\")),\n        };\n    }\n}\nexport interface IWebs extends _Webs { }\nexport const Webs = spInvokableFactory<IWebs>(_Webs);\n\n/**\n * Describes a web\n *\n */\n@defaultPath(\"_api/web\")\nexport class _Web extends _SharePointQueryableInstance<IWebInfo> {\n\n    public delete = deleteable(\"w\");\n\n    /**\n     * Gets this web's subwebs\n     *\n     */\n    public get webs(): IWebs {\n        return Webs(this);\n    }\n\n    /**\n     * Gets this web's parent web and data\n     *\n     */\n    @tag(\"w.getParentWeb\")\n    public async getParentWeb(): Promise<IOpenWebByIdResult> {\n        const { ParentWeb } = await spGet(this.select(\"ParentWeb/Id\").expand(\"ParentWeb\"));\n        return ParentWeb ? Site(this.parentUrl).openWebById(ParentWeb.Id) : null;\n    }\n\n    /**\n    * Returns a collection of objects that contain metadata about subsites of the current site in which the current user is a member.\n    *\n    * @param nWebTemplateFilter Specifies the site definition (default = -1)\n    * @param nConfigurationFilter A 16-bit integer that specifies the identifier of a configuration (default = -1)\n    */\n    public getSubwebsFilteredForCurrentUser(nWebTemplateFilter = -1, nConfigurationFilter = -1): IWebs {\n        const o = this.clone(Webs, `getSubwebsFilteredForCurrentUser(nWebTemplateFilter=${nWebTemplateFilter},nConfigurationFilter=${nConfigurationFilter})`);\n        return tag.configure(o, \"w.getSubwebsFilteredForCurrentUser\");\n    }\n\n    /**\n     * Allows access to the web's all properties collection\n     */\n    public get allProperties(): ISharePointQueryableInstance {\n        return tag.configure(this.clone(SharePointQueryableInstance, \"allproperties\"), \"w.allprops\");\n    }\n\n    /**\n     * Gets a collection of WebInfos for this web's subwebs\n     *\n     */\n    public get webinfos(): ISharePointQueryableCollection<IWebInfosData[]> {\n        return tag.configure(SharePointQueryableCollection(this, \"webinfos\"), \"w.webinfos\");\n    }\n\n    /**\n     * Creates a new batch for requests within the context of this web\n     *\n     */\n    public createBatch(): SPBatch {\n        return new SPBatch(this.parentUrl);\n    }\n\n    /**\n     * Updates this web instance with the supplied properties\n     *\n     * @param properties A plain object hash of values to update for the web\n     */\n    @tag(\"w.update\")\n    public async update(properties: ITypedHash<any>): Promise<IWebUpdateResult> {\n\n        const postBody = body(assign(metadata(\"SP.Web\"), properties), headers({ \"X-HTTP-Method\": \"MERGE\" }));\n\n        const data = await spPost(this, postBody);\n\n        return { data, web: <any>this };\n    }\n\n    /**\n     * Applies the theme specified by the contents of each of the files specified in the arguments to the site\n     *\n     * @param colorPaletteUrl The server-relative URL of the color palette file\n     * @param fontSchemeUrl The server-relative URL of the font scheme\n     * @param backgroundImageUrl The server-relative URL of the background image\n     * @param shareGenerated When true, the generated theme files are stored in the root site. When false, they are stored in this web\n     */\n    @tag(\"w.applyTheme\")\n    public applyTheme(colorPaletteUrl: string, fontSchemeUrl: string, backgroundImageUrl: string, shareGenerated: boolean): Promise<void> {\n\n        const postBody = body({\n            backgroundImageUrl,\n            colorPaletteUrl,\n            fontSchemeUrl,\n            shareGenerated,\n        });\n\n        return spPost(this.clone(Web, \"applytheme\"), postBody);\n    }\n\n    /**\n     * Applies the specified site definition or site template to the Web site that has no template applied to it\n     *\n     * @param template Name of the site definition or the name of the site template\n     */\n    @tag(\"w.applyWebTemplate\")\n    public applyWebTemplate(template: string): Promise<void> {\n\n        const q = this.clone(Web, \"applywebtemplate\");\n        q.concat(`(webTemplate='${escapeQueryStrValue(template)}')`);\n        return spPost(q);\n    }\n\n    /**\n     * Returns a collection of site templates available for the site\n     *\n     * @param language The locale id of the site templates to retrieve (default = 1033 [English, US])\n     * @param includeCrossLanguage When true, includes language-neutral site templates; otherwise false (default = true)\n     */\n    public availableWebTemplates(language = 1033, includeCrossLanugage = true): ISharePointQueryableCollection {\n        const path = `getavailablewebtemplates(lcid=${language}, doincludecrosslanguage=${includeCrossLanugage})`;\n        return tag.configure(SharePointQueryableCollection(this, path), \"w.availableWebTemplates\");\n    }\n\n    /**\n     * Returns the collection of changes from the change log that have occurred within the list, based on the specified query\n     *\n     * @param query The change query\n     */\n    @tag(\"w.getChanges\")\n    public getChanges(query: IChangeQuery): Promise<any> {\n        const postBody = body({ \"query\": assign(metadata(\"SP.ChangeQuery\"), query) });\n        return spPost(this.clone(Web, \"getchanges\"), postBody);\n    }\n\n    /**\n     * Returns the name of the image file for the icon that is used to represent the specified file\n     *\n     * @param filename The file name. If this parameter is empty, the server returns an empty string\n     * @param size The size of the icon: 16x16 pixels = 0, 32x32 pixels = 1 (default = 0)\n     * @param progId The ProgID of the application that was used to create the file, in the form OLEServerName.ObjectName\n     */\n    @tag(\"w.mapToIcon\")\n    public mapToIcon(filename: string, size = 0, progId = \"\"): Promise<string> {\n        return spGet(this.clone(Web, `maptoicon(filename='${escapeQueryStrValue(filename)}', progid='${escapeQueryStrValue(progId)}', size=${size})`));\n    }\n\n    /**\n     * Returns the tenant property corresponding to the specified key in the app catalog site\n     *\n     * @param key Id of storage entity to be set\n     */\n    @tag(\"w.getStorageEntity\")\n    public getStorageEntity(key: string): Promise<IStorageEntity> {\n        return spGet(this.clone(Web, `getStorageEntity('${escapeQueryStrValue(key)}')`));\n    }\n\n    /**\n     * This will set the storage entity identified by the given key (MUST be called in the context of the app catalog)\n     *\n     * @param key Id of storage entity to be set\n     * @param value Value of storage entity to be set\n     * @param description Description of storage entity to be set\n     * @param comments Comments of storage entity to be set\n     */\n    @tag(\"w.setStorageEntity\")\n    public setStorageEntity(key: string, value: string, description = \"\", comments = \"\"): Promise<void> {\n        return spPost(this.clone(Web, `setStorageEntity`), body({\n            comments,\n            description,\n            key,\n            value,\n        }));\n    }\n\n    /**\n     * This will remove the storage entity identified by the given key\n     *\n     * @param key Id of storage entity to be removed\n     */\n    @tag(\"w.removeStorageEntity\")\n    public removeStorageEntity(key: string): Promise<void> {\n        return spPost(this.clone(Web, `removeStorageEntity('${escapeQueryStrValue(key)}')`));\n    }\n}\nexport interface IWeb extends _Web, IDeleteable { }\nexport const Web = spInvokableFactory<IWeb>(_Web);\n\n/**\n * Result from adding a web\n *\n */\nexport interface IWebAddResult {\n    data: IWebInfo;\n    web: IWeb;\n}\n\n/**\n * Result from updating a web\n *\n */\nexport interface IWebUpdateResult {\n    data: any;\n    web: IWeb;\n}\n\nexport interface IWebInfosData {\n    Configuration: number;\n    Created: string;\n    Description: string;\n    Id: string;\n    Language: number;\n    LastItemModifiedDate: string;\n    LastItemUserModifiedDate: string;\n    ServerRelativeUrl: string;\n    Title: string;\n    WebTemplate: string;\n    WebTemplateId: number;\n}\n\nexport interface IStorageEntity {\n    Value: string | null;\n    Comment: string | null;\n    Description: string | null;\n}\n\nexport interface IWebInfo {\n    AlternateCssUrl: string;\n    AppInstanceId: string;\n    ClassicWelcomePage: string | null;\n    Configuration: number;\n    Created: string;\n    CurrentChangeToken: { StringValue: string; };\n    CustomMasterUrl: string;\n    Description: string;\n    DesignPackageId: string;\n    DocumentLibraryCalloutOfficeWebAppPreviewersDisabled: boolean;\n    EnableMinimalDownload: boolean;\n    FooterEmphasis: number;\n    FooterEnabled: boolean;\n    FooterLayout: number;\n    HeaderEmphasis: number;\n    HeaderLayout: number;\n    HorizontalQuickLaunch: boolean;\n    Id: string;\n    IsHomepageModernized: boolean;\n    IsMultilingual: boolean;\n    IsRevertHomepageLinkHidden: boolean;\n    Language: number;\n    LastItemModifiedDate: string;\n    LastItemUserModifiedDate: string;\n    MasterUrl: string;\n    MegaMenuEnabled: boolean;\n    NavAudienceTargetingEnabled: boolean;\n    NoCrawl: boolean;\n    ObjectCacheEnabled: boolean;\n    OverwriteTranslationsOnChange: boolean;\n    QuickLaunchEnabled: boolean;\n    RecycleBinEnabled: boolean;\n    ResourcePath: { DecodedUrl: string; };\n    SearchScope: number;\n    ServerRelativeUrl: string;\n    SiteLogoUrl: string | null;\n    SyndicationEnabled: boolean;\n    TenantAdminMembersCanShare: number;\n    Title: string;\n    TreeViewEnabled: boolean;\n    UIVersion: number;\n    UIVersionConfigurationEnabled: boolean;\n    Url: string;\n    WebTemplate: string;\n    WelcomePage: string;\n}\n","export interface IResourcePath {\n    DecodedUrl: string;\n    __metadata: { type: \"SP.ResourcePath\" };\n}\n\nexport function toResourcePath(url: string): IResourcePath {\n    return {\n        DecodedUrl: url,\n        __metadata: { type: \"SP.ResourcePath\" },\n    };\n}\n","import { assign, hOP, isArray, objectDefinedNotNull } from \"@pnp/common\";\nimport { body, headers } from \"@pnp/odata\";\nimport {\n    SharePointQueryable,\n    SharePointQueryableCollection,\n    ISharePointQueryableCollection,\n    _SharePointQueryableInstance,\n    _SharePointQueryableCollection,\n    ISharePointQueryable,\n    spInvokableFactory,\n    deleteableWithETag,\n    IDeleteableWithETag,\n} from \"../sharepointqueryable\";\nimport { IChangeQuery } from \"../types\";\nimport { odataUrlFrom } from \"../odata\";\nimport { metadata } from \"../utils/metadata\";\nimport { defaultPath } from \"../decorators\";\nimport { spPost } from \"../operations\";\nimport { escapeQueryStrValue } from \"../utils/escapeQueryStrValue\";\nimport { tag } from \"../telemetry\";\nimport { IBasePermissions } from \"../security/types\";\nimport { IFieldInfo } from \"../fields/types\";\nimport { IFormInfo } from \"../forms/types\";\nimport { IFolderInfo } from \"../folders/types\";\nimport { IViewInfo } from \"../views/types\";\nimport { IUserCustomActionInfo } from \"../user-custom-actions/types\";\nimport { toResourcePath } from \"../utils/toResourcePath\";\n\n@defaultPath(\"lists\")\nexport class _Lists extends _SharePointQueryableCollection<IListInfo[]> {\n\n    /**\n     * Gets a list from the collection by guid id\n     *\n     * @param id The Id of the list (GUID)\n     */\n    public getById(id: string): IList {\n        return tag.configure(List(this).concat(`('${id}')`), \"ls.getById\");\n    }\n\n    /**\n     * Gets a list from the collection by title\n     *\n     * @param title The title of the list\n     */\n    public getByTitle(title: string): IList {\n        return tag.configure(List(this, `getByTitle('${escapeQueryStrValue(title)}')`), \"ls.getByTitle\");\n    }\n\n    /**\n     * Adds a new list to the collection\n     *\n     * @param title The new list's title\n     * @param description The new list's description\n     * @param template The list template value\n     * @param enableContentTypes If true content types will be allowed and enabled, otherwise they will be disallowed and not enabled\n     * @param additionalSettings Will be passed as part of the list creation body\n     */\n    @tag(\"ls.add\")\n    public async add(title: string, desc = \"\", template = 100, enableContentTypes = false, additionalSettings: Partial<IListInfo> = {}): Promise<IListAddResult> {\n\n        const addSettings = Object.assign({\n            \"AllowContentTypes\": enableContentTypes,\n            \"BaseTemplate\": template,\n            \"ContentTypesEnabled\": enableContentTypes,\n            \"Description\": desc,\n            \"Title\": title,\n        }, metadata(\"SP.List\"), additionalSettings);\n\n        const data = await spPost(this, body(addSettings));\n\n        return { data, list: this.getByTitle(addSettings.Title) };\n    }\n\n    /**\n     * Ensures that the specified list exists in the collection (note: this method not supported for batching)\n     *\n     * @param title The new list's title\n     * @param desc The new list's description\n     * @param template The list template value\n     * @param enableContentTypes If true content types will be allowed and enabled, otherwise they will be disallowed and not enabled\n     * @param additionalSettings Will be passed as part of the list creation body or used to update an existing list\n     */\n    @tag(\"ls.ensure\")\n    public async ensure(\n        title: string,\n        desc = \"\",\n        template = 100,\n        enableContentTypes = false,\n        additionalSettings: Partial<IListInfo> = {}): Promise<IListEnsureResult> {\n\n        if (this.hasBatch) {\n            throw Error(\"The ensure list method is not supported for use in a batch.\");\n        }\n\n        const addOrUpdateSettings = assign(additionalSettings, { Title: title, Description: desc, ContentTypesEnabled: enableContentTypes }, true);\n\n        const list: IList = this.getByTitle(addOrUpdateSettings.Title);\n\n        try {\n\n            // this will throw if the list doesn't exist\n            await list.select(\"Title\")();\n            const data = await list.update(addOrUpdateSettings).then(r => r.data);\n            return { created: false, data, list: this.getByTitle(addOrUpdateSettings.Title) };\n\n        } catch (e) {\n\n            const data = await this.add(title, desc, template, enableContentTypes, addOrUpdateSettings).then(r => r.data);\n            return { created: true, data, list: this.getByTitle(addOrUpdateSettings.Title) };\n        }\n    }\n\n    /**\n     * Gets a list that is the default asset location for images or other files, which the users upload to their wiki pages.\n     */\n    @tag(\"ls.ensureSiteAssetsLibrary\")\n    public async ensureSiteAssetsLibrary(): Promise<IList> {\n        const json = await spPost(this.clone(Lists, \"ensuresiteassetslibrary\"));\n        return List(odataUrlFrom(json));\n    }\n\n    /**\n     * Gets a list that is the default location for wiki pages.\n     */\n    @tag(\"ls.ensureSitePagesLibrary\")\n    public async ensureSitePagesLibrary(): Promise<IList> {\n        const json = await spPost(this.clone(Lists, \"ensuresitepageslibrary\"));\n        return List(odataUrlFrom(json));\n    }\n}\nexport interface ILists extends _Lists { }\nexport const Lists = spInvokableFactory<ILists>(_Lists);\n\nexport class _List extends _SharePointQueryableInstance<IListInfo> {\n\n    public delete = deleteableWithETag(\"l\");\n\n    /**\n     * Gets the effective base permissions of this list\n     *\n     */\n    public get effectiveBasePermissions(): ISharePointQueryable {\n        return tag.configure(SharePointQueryable(this, \"EffectiveBasePermissions\"), \"l.effectiveBasePermissions\");\n    }\n\n    /**\n     * Gets the event receivers attached to this list\n     *\n     */\n    public get eventReceivers(): ISharePointQueryableCollection {\n        return tag.configure(SharePointQueryableCollection(this, \"EventReceivers\"), \"l.eventReceivers\");\n    }\n\n    /**\n     * Gets the related fields of this list\n     *\n     */\n    public get relatedFields(): ISharePointQueryable {\n        return tag.configure(SharePointQueryable(this, \"getRelatedFields\"), \"l.relatedFields\");\n    }\n\n    /**\n     * Gets the IRM settings for this list\n     *\n     */\n    public get informationRightsManagementSettings(): ISharePointQueryable {\n        return tag.configure(SharePointQueryable(this, \"InformationRightsManagementSettings\"), \"l.informationRightsManagementSettings\");\n    }\n\n    /**\n     * Updates this list intance with the supplied properties\n     *\n     * @param properties A plain object hash of values to update for the list\n     * @param eTag Value used in the IF-Match header, by default \"*\"\n     */\n    @tag(\"l.update\")\n    public async update(properties: Partial<IListInfo>, eTag = \"*\"): Promise<IListUpdateResult> {\n\n        const postBody = body(assign(metadata(\"SP.List\"), properties), headers({\n            \"IF-Match\": eTag,\n            \"X-HTTP-Method\": \"MERGE\",\n        }));\n\n        const data = await spPost(this, postBody);\n\n        let list: any = this;\n\n        if (hOP(properties, \"Title\")) {\n            list = this.getParent(List, this.parentUrl, `getByTitle('${properties.Title}')`);\n        }\n\n        return {\n            data,\n            list,\n        };\n    }\n\n    /**\n     * Returns the collection of changes from the change log that have occurred within the list, based on the specified query.\n     * @param query A query that is performed against the change log.\n     */\n    @tag(\"l.getChanges\")\n    public getChanges(query: IChangeQuery): Promise<any> {\n\n        return spPost(this.clone(List, \"getchanges\"), body({ query: assign(metadata(\"SP.ChangeQuery\"), query) }));\n    }\n\n    /**\n     * Returns the collection of items in the list based on the provided CamlQuery\n     * @param query A query that is performed against the list\n     * @param expands An expanded array of n items that contains fields to expand in the CamlQuery\n     */\n    @tag(\"l.CAMLQuery\")\n    public getItemsByCAMLQuery(query: ICamlQuery, ...expands: string[]): Promise<any> {\n\n        const q = this.clone(List, \"getitems\");\n        return spPost(q.expand.apply(q, expands), body({ query: assign(metadata(\"SP.CamlQuery\"), query) }));\n    }\n\n    /**\n     * See: https://msdn.microsoft.com/en-us/library/office/dn292554.aspx\n     * @param query An object that defines the change log item query\n     */\n    @tag(\"l.ChangesSinceToken\")\n    public getListItemChangesSinceToken(query: IChangeLogItemQuery): Promise<string> {\n\n        const o = this.clone(List, \"getlistitemchangessincetoken\").usingParser({ parse(r: Response) { return r.text(); } });\n        return spPost(o, body({ \"query\": assign(metadata(\"SP.ChangeLogItemQuery\"), query) }));\n    }\n\n    /**\n     * Moves the list to the Recycle Bin and returns the identifier of the new Recycle Bin item.\n     */\n    @tag(\"l.recycle\")\n    public async recycle(): Promise<string> {\n        const data = await spPost(this.clone(List, \"recycle\"));\n        return hOP(data, \"Recycle\") ? data.Recycle : data;\n    }\n\n    /**\n     * Renders list data based on the view xml provided\n     * @param viewXml A string object representing a view xml\n     */\n    @tag(\"l.renderListData\")\n    public async renderListData(viewXml: string): Promise<IRenderListData> {\n\n        const q = this.clone(List, \"renderlistdata(@viewXml)\");\n        q.query.set(\"@viewXml\", `'${viewXml}'`);\n        const data = await spPost(q);\n\n        // data will be a string, so we parse it again\n        return JSON.parse(hOP(data, \"RenderListData\") ? data.RenderListData : data);\n    }\n\n    /**\n     * Returns the data for the specified query view\n     *\n     * @param parameters The parameters to be used to render list data as JSON string.\n     * @param overrideParameters The parameters that are used to override and extend the regular SPRenderListDataParameters.\n     * @param queryParams Allows setting of query parameters\n     */\n    @tag(\"l.AsStream\")\n    public renderListDataAsStream(parameters: IRenderListDataParameters, overrideParameters: any = null, queryParams = new Map<string, string>()): Promise<any> {\n\n        if (hOP(parameters, \"RenderOptions\") && isArray(parameters.RenderOptions)) {\n            parameters.RenderOptions = (<RenderListDataOptions[]>parameters.RenderOptions).reduce((v, c) => v + c);\n        }\n\n        const postBody = body({\n            overrideParameters: assign(metadata(\"SP.RenderListDataOverrideParameters\"), overrideParameters),\n            parameters: assign(metadata(\"SP.RenderListDataParameters\"), parameters),\n        });\n\n        const clone = this.clone(List, \"RenderListDataAsStream\", true);\n\n        if (queryParams && queryParams.size > 0) {\n            queryParams.forEach((v, k) => clone.query.set(k, v));\n        }\n\n        return spPost(clone, postBody);\n    }\n\n    /**\n     * Gets the field values and field schema attributes for a list item.\n     * @param itemId Item id of the item to render form data for\n     * @param formId The id of the form\n     * @param mode Enum representing the control mode of the form (Display, Edit, New)\n     */\n    @tag(\"l.renderListFormData\")\n    public async renderListFormData(itemId: number, formId: string, mode: ControlMode): Promise<IListFormData> {\n        const data = await spPost(this.clone(List, `renderlistformdata(itemid=${itemId}, formid='${formId}', mode='${mode}')`));\n        // data will be a string, so we parse it again\n        return JSON.parse(hOP(data, \"RenderListFormData\") ? data.RenderListFormData : data);\n    }\n\n    /**\n     * Reserves a list item ID for idempotent list item creation.\n     */\n    @tag(\"l.reserveListItemId\")\n    public async reserveListItemId(): Promise<number> {\n        const data = await spPost(this.clone(List, \"reservelistitemid\"));\n        return hOP(data, \"ReserveListItemId\") ? data.ReserveListItemId : data;\n    }\n\n    /**\n     * Returns the ListItemEntityTypeFullName for this list, used when adding/updating list items. Does not support batching.\n     */\n    @tag(\"l.getListItemEntityTypeFullName\")\n    public getListItemEntityTypeFullName(): Promise<string> {\n        return this.clone(List, null, false).select(\"ListItemEntityTypeFullName\").get<{ ListItemEntityTypeFullName: string }>().then(o => o.ListItemEntityTypeFullName);\n    }\n\n    /**\n     * Creates an item using path (in a folder), validates and sets its field values.\n     *\n     * @param formValues The fields to change and their new values.\n     * @param decodedUrl Path decoded url; folder's server relative path.\n     * @param bNewDocumentUpdate true if the list item is a document being updated after upload; otherwise false.\n     * @param checkInComment Optional check in comment.\n     * @param additionalProps Optional set of additional properties LeafName new document file name, \n     */\n    @tag(\"l.addValidateUpdateItemUsingPath\")\n    public async addValidateUpdateItemUsingPath(\n        formValues: IListItemFormUpdateValue[],\n        decodedUrl: string,\n        bNewDocumentUpdate = false,\n        checkInComment?: string,\n        additionalProps?: {\n            /**\n             * If creating a document or folder, the name\n             */\n            leafName?: string,\n            /**\n             * 0: File, 1: Folder, 2: Web\n             */\n            objectType?: 0 | 1 | 2,\n        },\n    ): Promise<IListItemFormUpdateValue[]> {\n\n        const addProps: any = {\n            FolderPath: toResourcePath(decodedUrl),\n        };\n\n        if (objectDefinedNotNull(additionalProps)) {\n\n            if (additionalProps.leafName) {\n                addProps.LeafName = toResourcePath(additionalProps.leafName);\n            }\n\n            if (additionalProps.objectType) {\n                addProps.UnderlyingObjectType = additionalProps.objectType;\n            }\n        }\n\n        const res = await spPost(this.clone(List, \"AddValidateUpdateItemUsingPath()\"), body({\n            bNewDocumentUpdate,\n            checkInComment,\n            formValues,\n            listItemCreateInfo: assign(metadata(\"SP.ListItemCreationInformationUsingPath\"), addProps),\n        }));\n\n        return hOP(res, \"AddValidateUpdateItemUsingPath\") ? res.AddValidateUpdateItemUsingPath : res;\n    }\n}\nexport interface IList extends _List, IDeleteableWithETag { }\nexport const List = spInvokableFactory<IList>(_List);\n\n/**\n * Represents the output of the add method\n */\nexport interface IListAddResult {\n    list: IList;\n    data: any;\n}\n\n/**\n * Represents the output of the update method\n */\nexport interface IListUpdateResult {\n    list: IList;\n    data: any;\n}\n\n/**\n * Represents the output of the ensure method\n */\nexport interface IListEnsureResult {\n    list: IList;\n    created: boolean;\n    data: any;\n}\n\n/**\n * Specifies a Collaborative Application Markup Language (CAML) query on a list or joined lists.\n */\nexport interface ICamlQuery {\n\n    /**\n     * Gets or sets a value that indicates whether the query returns dates in Coordinated Universal Time (UTC) format.\n     */\n    DatesInUtc?: boolean;\n\n    /**\n     * Gets or sets a value that specifies the server relative URL of a list folder from which results will be returned.\n     */\n    FolderServerRelativeUrl?: string;\n\n    /**\n     * Gets or sets a value that specifies the information required to get the next page of data for the list view.\n     */\n    ListItemCollectionPosition?: IListItemCollectionPosition;\n\n    /**\n     * Gets or sets value that specifies the XML schema that defines the list view.\n     */\n    ViewXml?: string;\n}\n\n/**\n * Specifies the information required to get the next page of data for a list view.\n */\nexport interface IListItemCollectionPosition {\n    /**\n     * Gets or sets a value that specifies information, as name-value pairs, required to get the next page of data for a list view.\n     */\n    PagingInfo: string;\n}\n\n/**\n * Represents the input parameter of the GetListItemChangesSinceToken method.\n */\nexport interface IChangeLogItemQuery {\n    /**\n     * The change token for the request.\n     */\n    ChangeToken?: string;\n\n    /**\n     * The XML element that defines custom filtering for the query.\n     */\n    Contains?: string;\n\n    /**\n     * The records from the list to return and their return order.\n     */\n    Query?: string;\n\n    /**\n     * The options for modifying the query.\n     */\n    QueryOptions?: string;\n\n    /**\n     * RowLimit\n     */\n    RowLimit?: string;\n\n    /**\n     * The names of the fields to include in the query result.\n     */\n    ViewFields?: string;\n\n    /**\n     * The GUID of the view.\n     */\n    ViewName?: string;\n}\n\n/**\n * Represents the output parameter of the renderListFormData method.\n */\nexport interface IListFormData {\n    ContentType?: string;\n    Title?: string;\n    Author?: string;\n    Editor?: string;\n    Created?: Date;\n    Modified: Date;\n    Attachments?: any;\n    ListSchema?: any;\n    FormControlMode?: number;\n    FieldControlModes?: {\n        Title?: number,\n        Author?: number,\n        Editor?: number,\n        Created?: number,\n        Modified?: number,\n        Attachments?: number,\n    };\n    WebAttributes?: {\n        WebUrl?: string,\n        EffectivePresenceEnabled?: boolean,\n        AllowScriptableWebParts?: boolean,\n        PermissionCustomizePages?: boolean,\n        LCID?: number,\n        CurrentUserId?: number,\n    };\n    ItemAttributes?: {\n        Id?: number,\n        FsObjType?: number,\n        ExternalListItem?: boolean,\n        Url?: string,\n        EffectiveBasePermissionsLow?: number,\n        EffectiveBasePermissionsHigh?: number,\n    };\n    ListAttributes?: {\n        Id?: string,\n        BaseType?: number,\n        Direction?: string,\n        ListTemplateType?: number,\n        DefaultItemOpen?: number,\n        EnableVersioning?: boolean,\n    };\n    CSRCustomLayout?: boolean;\n    PostBackRequired?: boolean;\n    PreviousPostBackHandled?: boolean;\n    UploadMode?: boolean;\n    SubmitButtonID?: string;\n    ItemContentTypeName?: string;\n    ItemContentTypeId?: string;\n    JSLinks?: string;\n}\n\n/**\n * Enum representing the options of the RenderOptions property on IRenderListDataParameters interface\n */\nexport enum RenderListDataOptions {\n    None = 0,\n    ContextInfo = 1,\n    ListData = 2,\n    ListSchema = 4,\n    MenuView = 8,\n    ListContentType = 16,\n    FileSystemItemId = 32,\n    ClientFormSchema = 64,\n    QuickLaunch = 128,\n    Spotlight = 256,\n    Visualization = 512,\n    ViewMetadata = 1024,\n    DisableAutoHyperlink = 2048,\n    EnableMediaTAUrls = 4096,\n    ParentInfo = 8192,\n    PageContextInfo = 16384,\n    ClientSideComponentManifest = 32768,\n}\n/**\n * Represents the parameters to be used to render list data as JSON string in the RenderListDataAsStream method of IList.\n */\nexport interface IRenderListDataParameters {\n    AddRequiredFields?: boolean;\n    AllowMultipleValueFilterForTaxonomyFields?: boolean;\n    AudienceTarget?: boolean;\n    DatesInUtc?: boolean;\n    DeferredRender?: boolean;\n    ExpandGroups?: boolean;\n    FirstGroupOnly?: boolean;\n    FolderServerRelativeUrl?: string;\n    ImageFieldsToTryRewriteToCdnUrls?: string;\n    MergeDefaultView?: boolean;\n    OriginalDate?: boolean;\n    OverrideViewXml?: string;\n    Paging?: string;\n    ReplaceGroup?: boolean;\n    RenderOptions?: RenderListDataOptions[] | number;\n    ViewXml?: string;\n}\n\n/**\n * Represents properties of a list item field and its value.\n */\nexport interface IListItemFormUpdateValue {\n\n    /**\n     * The error message result after validating the value for the field.\n     */\n    ErrorMessage?: string;\n\n    /**\n     * The internal name of the field.\n     */\n    FieldName?: string;\n\n    /**\n     * The value of the field, in string format.\n     */\n    FieldValue?: string;\n\n    /**\n     * Indicates whether there was an error result after validating the value for the field.\n     */\n    HasException?: boolean;\n}\n\n/**\n * Represents the output parameter of the renderListData method.\n */\nexport interface IRenderListData {\n    Row: any[];\n    FirstRow: number;\n    FolderPermissions: string;\n    LastRow: number;\n    FilterLink: string;\n    ForceNoHierarchy: string;\n    HierarchyHasIndention: string;\n}\n\n/**\n * Determines the display mode of the given control or view\n */\nexport enum ControlMode {\n    Display = 1,\n    Edit = 2,\n    New = 3,\n}\n\nexport interface IListInfo {\n    AllowContentTypes: boolean;\n    AllowDeletion: boolean;\n    BaseTemplate: number;\n    BaseType: any;\n    BrowserFileHandling: any;\n    ContentTypes: any[];\n    ContentTypesEnabled: boolean;\n    CrawlNonDefaultViews: boolean;\n    CreatablesInfo: any;\n    Created: string;\n    CurrentChangeToken: any;\n    CustomActionElements: any[];\n    DataSource: any;\n    DefaultContentApprovalWorkflowId: string;\n    DefaultDisplayFormUrl: string;\n    DefaultEditFormUrl: string;\n    DefaultNewFormUrl: string;\n    DefaultView: any;\n    DefaultViewPath: any;\n    DefaultViewUrl: string;\n    Description: string;\n    DescriptionResource: any;\n    Direction: string;\n    DocumentTemplateUrl: string;\n    DraftVersionVisibility: any;\n    EffectiveBasePermissions: IBasePermissions;\n    EffectiveBasePermissionsForUI: IBasePermissions;\n    EnableAssignToEmail: boolean;\n    EnableAttachments: boolean;\n    EnableFolderCreation: boolean;\n    EnableMinorVersions: boolean;\n    EnableModeration: boolean;\n    EnableRequestSignOff: boolean;\n    EnableVersioning: boolean;\n    EntityTypeName: string;\n    EventReceivers: any[];\n    ExcludeFromOfflineClient: boolean;\n    ExemptFromBlockDownloadOfNonViewableFiles: boolean;\n    Fields: Partial<IFieldInfo>[];\n    FileSavePostProcessingEnabled: boolean;\n    ForceCheckout: boolean;\n    Forms: IFormInfo[];\n    HasExternalDataSource: boolean;\n    Hidden: boolean;\n    Id: string;\n    ImagePath: { DecodedUrl: string; };\n    ImageUrl: string;\n    InformationRightsManagementSettings: any[];\n    IrmEnabled: boolean;\n    IrmExpire: boolean;\n    IrmReject: boolean;\n    IsApplicationList: boolean;\n    IsCatalog: boolean;\n    IsPrivate: boolean;\n    IsSiteAssetsLibrary: boolean;\n    IsSystemList: boolean;\n    ItemCount: number;\n    LastItemDeletedDate: string;\n    LastItemModifiedDate: string;\n    LastItemUserModifiedDate: string;\n    ListExperienceOptions: number;\n    ListItemEntityTypeFullName: string;\n    MajorVersionLimit: number;\n    MajorWithMinorVersionsLimit: number;\n    MultipleDataList: boolean;\n    NoCrawl: boolean;\n    OnQuickLaunch: boolean;\n    ParentWebPath: { DecodedUrl: string; };\n    ParentWebUrl: string;\n    ParserDisabled: boolean;\n    ReadSecurity: number;\n    RootFolder: IFolderInfo;\n    SchemaXml: string;\n    ServerTemplateCanCreateFolders: boolean;\n    TemplateFeatureId: string;\n    Title: string;\n    UserCustomActions: IUserCustomActionInfo[];\n    ValidationFormula: string;\n    ValidationMessage: string;\n    Views: IViewInfo[];\n    WorkflowAssociations: any[];\n    WriteSecurity: number;\n}\n","import { addProp } from \"@pnp/odata\";\nimport { _Web, Web } from \"../webs/types\";\nimport { Lists, ILists, IList, List } from \"./types\";\nimport { odataUrlFrom } from \"../odata\";\nimport { ISharePointQueryableCollection, SharePointQueryableCollection } from \"../sharepointqueryable\";\nimport { escapeQueryStrValue } from \"../utils/escapeQueryStrValue\";\n\ndeclare module \"../webs/types\" {\n    interface _Web {\n        readonly lists: ILists;\n        readonly siteUserInfoList: IList;\n        readonly defaultDocumentLibrary: IList;\n        readonly customListTemplates: ISharePointQueryableCollection;\n        getList(listRelativeUrl: string): IList;\n        getCatalog(type: number): Promise<IList>;\n    }\n    interface IWeb {\n\n        /**\n         * Gets the collection of all lists that are contained in the Web site\n         */\n        readonly lists: ILists;\n\n        /**\n         * Gets the UserInfo list of the site collection that contains the Web site\n         */\n        readonly siteUserInfoList: IList;\n\n        /**\n         * Get a reference the default documents library of a web\n         */\n        readonly defaultDocumentLibrary: IList;\n\n        /**\n         * Gets the collection of all list definitions and list templates that are available\n         */\n        readonly customListTemplates: ISharePointQueryableCollection;\n\n        /**\n         * Gets a list by server relative url (list's root folder)\n         *\n         * @param listRelativeUrl The server relative path to the list's root folder (including /sites/ if applicable)\n         */\n        getList(listRelativeUrl: string): IList;\n\n        /**\n         * Returns the list gallery on the site\n         *\n         * @param type The gallery type - WebTemplateCatalog = 111, WebPartCatalog = 113 ListTemplateCatalog = 114,\n         * MasterPageCatalog = 116, SolutionCatalog = 121, ThemeCatalog = 123, DesignCatalog = 124, AppDataCatalog = 125\n         */\n        getCatalog(type: number): Promise<IList>;\n    }\n}\n\naddProp(_Web, \"lists\", Lists);\naddProp(_Web, \"siteUserInfoList\", List, \"siteuserinfolist\");\naddProp(_Web, \"defaultDocumentLibrary\", List, \"DefaultDocumentLibrary\");\naddProp(_Web, \"customListTemplates\", SharePointQueryableCollection, \"getcustomlisttemplates\");\n\n_Web.prototype.getList = function (this: _Web, listRelativeUrl: string): IList {\n    return List(this, `getList('${escapeQueryStrValue(listRelativeUrl)}')`);\n};\n\n_Web.prototype.getCatalog = async function (this: _Web, type: number): Promise<IList> {\n    const data = await this.clone(Web, `getcatalog(${type})`).select(\"Id\").get();\n    return List(odataUrlFrom(data));\n};\n","import {\n    SharePointQueryable,\n    _SharePointQueryableInstance,\n    ISharePointQueryableInstance,\n    _SharePointQueryableCollection,\n    ISharePointQueryable,\n    SharePointQueryableInstance,\n    spInvokableFactory,\n    deleteableWithETag,\n    IDeleteableWithETag,\n} from \"../sharepointqueryable\";\nimport { assign, ITypedHash, hOP } from \"@pnp/common\";\nimport { IListItemFormUpdateValue, List } from \"../lists/types\";\nimport { ODataParser, body, headers } from \"@pnp/odata\";\nimport { IList } from \"../lists\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\nimport { metadata } from \"../utils/metadata\";\nimport { defaultPath } from \"../decorators\";\nimport { spPost } from \"../operations\";\nimport { tag } from \"../telemetry\";\n\n/**\n * Describes a collection of Item objects\n *\n */\n@defaultPath(\"items\")\nexport class _Items extends _SharePointQueryableCollection {\n\n    /**\t\n    * Gets an Item by id\t\n    *\t\n    * @param id The integer id of the item to retrieve\t\n    */\n    public getById(id: number): IItem {\n        return tag.configure(Item(this).concat(`(${id})`), \"is.getById\");\n    }\n\n    /**\n     * Gets BCS Item by string id\n     *\n     * @param stringId The string id of the BCS item to retrieve\n     */\n    public getItemByStringId(stringId: string): IItem {\n        // creates an item with the parent list path and append out method call\n        return tag.configure(Item(this.parentUrl, `getItemByStringId('${stringId}')`), \"is.getItemByStringId\");\n    }\n\n    /**\n     * Skips the specified number of items (https://msdn.microsoft.com/en-us/library/office/fp142385.aspx#sectionSection6)\n     *\n     * @param skip The starting id where the page should start, use with top to specify pages\n     * @param reverse It true the PagedPrev=true parameter is added allowing backwards navigation in the collection\n     */\n    public skip(skip: number, reverse = false): this {\n        if (reverse) {\n            this.query.set(\"$skiptoken\", encodeURIComponent(`Paged=TRUE&PagedPrev=TRUE&p_ID=${skip}`));\n        } else {\n            this.query.set(\"$skiptoken\", encodeURIComponent(`Paged=TRUE&p_ID=${skip}`));\n        }\n        return this;\n    }\n\n    /**\n     * Gets a collection designed to aid in paging through data\n     *\n     */\n    @tag(\"is.getPaged\")\n    public getPaged<T = any[]>(): Promise<PagedItemCollection<T>> {\n        return this.usingParser(new PagedItemCollectionParser<T>(this))();\n    }\n\n    /**\n     * Gets all the items in a list, regardless of count. Does not support batching or caching\n     *\n     *  @param requestSize Number of items to return in each request (Default: 2000)\n     *  @param acceptHeader Allows for setting the value of the Accept header for SP 2013 support\n     */\n    @tag(\"is.getAll\")\n    public getAll(requestSize = 2000, acceptHeader = \"application/json;odata=nometadata\"): Promise<any[]> {\n\n        Logger.write(\"Calling items.getAll should be done sparingly. Ensure this is the correct choice. If you are unsure, it is not.\", LogLevel.Warning);\n\n        // this will be used for the actual query\n        // and we set no metadata here to try and reduce traffic\n        const items = <IItems>Items(this, \"\").top(requestSize).configure({\n            headers: {\n                \"Accept\": acceptHeader,\n            },\n        });\n\n        // let's copy over the odata query params that can be applied\n        // $top - allow setting the page size this way (override what we did above)\n        // $select - allow picking the return fields (good behavior)\n        // $filter - allow setting a filter, though this may fail due for large lists\n        this.query.forEach((v: string, k: string) => {\n            if (/^\\$select|filter|top|expand$/i.test(k)) {\n                items.query.set(k, v);\n            }\n        });\n\n        // give back the promise\n        return new Promise((resolve, reject) => {\n\n            // this will eventually hold the items we return\n            const itemsCollector: any[] = [];\n\n            // action that will gather up our results recursively\n            const gatherer = (last: PagedItemCollection<any>) => {\n\n                // collect that set of results\n                [].push.apply(itemsCollector, last.results);\n\n                // if we have more, repeat - otherwise resolve with the collected items\n                if (last.hasNext) {\n                    last.getNext().then(gatherer).catch(reject);\n                } else {\n                    resolve(itemsCollector);\n                }\n            };\n\n            // start the cycle\n            items.getPaged().then(gatherer).catch(reject);\n        });\n    }\n\n    /**\n     * Adds a new item to the collection\n     *\n     * @param properties The new items's properties\n     * @param listItemEntityTypeFullName The type name of the list's entities\n     */\n    @tag(\"is.add\")\n    public async add(properties: ITypedHash<any> = {}, listItemEntityTypeFullName: string = null): Promise<IItemAddResult> {\n\n        const removeDependency = this.addBatchDependency();\n\n        const listItemEntityType = await this.ensureListItemEntityTypeName(listItemEntityTypeFullName);\n\n        const postBody = body(assign(metadata(listItemEntityType), properties));\n\n        const promise = spPost<{ Id: number }>(this.clone(Items, \"\"), postBody).then((data) => {\n            return {\n                data: data,\n                item: this.getById(data.Id),\n            };\n        });\n\n        removeDependency();\n\n        return promise;\n    }\n\n    /**\n     * Ensures we have the proper list item entity type name, either from the value provided or from the list\n     *\n     * @param candidatelistItemEntityTypeFullName The potential type name\n     */\n    private ensureListItemEntityTypeName(candidatelistItemEntityTypeFullName: string): Promise<string> {\n\n        return candidatelistItemEntityTypeFullName ?\n            Promise.resolve(candidatelistItemEntityTypeFullName) :\n            this.getParent<IList>(List).getListItemEntityTypeFullName();\n    }\n}\nexport interface IItems extends _Items { }\nexport const Items = spInvokableFactory<IItems>(_Items);\n\n/**\n * Descrines a single Item instance\n *\n */\nexport class _Item extends _SharePointQueryableInstance {\n\n    public delete = deleteableWithETag(\"i\");\n\n    /**\n     * Gets the effective base permissions for the item\n     *\n     */\n    public get effectiveBasePermissions(): ISharePointQueryable {\n        return tag.configure(SharePointQueryable(this, \"EffectiveBasePermissions\"), \"i.effectiveBasePermissions\");\n    }\n\n    /**\n     * Gets the effective base permissions for the item in a UI context\n     *\n     */\n    public get effectiveBasePermissionsForUI(): ISharePointQueryable {\n        return tag.configure(SharePointQueryable(this, \"EffectiveBasePermissionsForUI\"), \"i.effectiveBasePermissionsForUI\");\n    }\n\n    /**\n     * Gets the field values for this list item in their HTML representation\n     *\n     */\n    public get fieldValuesAsHTML(): ISharePointQueryableInstance {\n        return tag.configure(SharePointQueryableInstance(this, \"FieldValuesAsHTML\"), \"i.fvHTML\");\n    }\n\n    /**\n     * Gets the field values for this list item in their text representation\n     *\n     */\n    public get fieldValuesAsText(): ISharePointQueryableInstance {\n        return tag.configure(SharePointQueryableInstance(this, \"FieldValuesAsText\"), \"i.fvText\");\n    }\n\n    /**\n     * Gets the field values for this list item for use in editing controls\n     *\n     */\n    public get fieldValuesForEdit(): ISharePointQueryableInstance {\n        return tag.configure(SharePointQueryableInstance(this, \"FieldValuesForEdit\"), \"i.fvEdit\");\n    }\n\n    /**\n     * Gets the collection of versions associated with this item\n     */\n    public get versions(): IItemVersions {\n        return tag.configure(ItemVersions(this), \"i.versions\");\n    }\n\n    public get list(): IList {\n        return this.getParent<IList>(List, this.parentUrl.substr(0, this.parentUrl.lastIndexOf(\"/\")));\n    }\n\n    /**\n     * Updates this list intance with the supplied properties\n     *\n     * @param properties A plain object hash of values to update for the list\n     * @param eTag Value used in the IF-Match header, by default \"*\"\n     * @param listItemEntityTypeFullName The type name of the list's entities\n     */\n    public async update(properties: ITypedHash<any>, eTag = \"*\", listItemEntityTypeFullName: string = null): Promise<IItemUpdateResult> {\n\n        const removeDependency = this.addBatchDependency();\n\n        const listItemEntityType = await this.ensureListItemEntityTypeName(listItemEntityTypeFullName);\n\n        const postBody = body(assign(metadata(listItemEntityType), properties), headers({\n            \"IF-Match\": eTag,\n            \"X-HTTP-Method\": \"MERGE\",\n        }));\n\n        removeDependency();\n\n        const poster = tag.configure(this.clone(Item).usingParser(new ItemUpdatedParser()), \"i.update\");\n        const data = await spPost(poster, postBody);\n\n        return {\n            data,\n            item: this,\n        };\n    }\n\n    /**\n     * Moves the list item to the Recycle Bin and returns the identifier of the new Recycle Bin item.\n     */\n    @tag(\"i.recycle\")\n    public recycle(): Promise<string> {\n        return spPost<string>(this.clone(Item, \"recycle\"));\n    }\n\n    /**\n     * Gets a string representation of the full URL to the WOPI frame.\n     * If there is no associated WOPI application, or no associated action, an empty string is returned.\n     *\n     * @param action Display mode: 0: view, 1: edit, 2: mobileView, 3: interactivePreview\n     */\n    @tag(\"i.getWopiFrameUrl\")\n    public async getWopiFrameUrl(action = 0): Promise<string> {\n        const i = this.clone(Item, \"getWOPIFrameUrl(@action)\");\n        i.query.set(\"@action\", <any>action);\n\n        const data = await spPost(i);\n\n        // handle verbose mode\n        if (hOP(data, \"GetWOPIFrameUrl\")) {\n            return data.GetWOPIFrameUrl;\n        }\n\n        return data;\n    }\n\n    /**\n     * Validates and sets the values of the specified collection of fields for the list item.\n     *\n     * @param formValues The fields to change and their new values.\n     * @param bNewDocumentUpdate true if the list item is a document being updated after upload; otherwise false.\n     */\n    @tag(\"i.validateUpdateListItem\")\n    public validateUpdateListItem(formValues: IListItemFormUpdateValue[], bNewDocumentUpdate = false): Promise<IListItemFormUpdateValue[]> {\n        return spPost(this.clone(Item, \"validateupdatelistitem\"), body({ formValues, bNewDocumentUpdate }));\n    }\n\n    /**\n     * Ensures we have the proper list item entity type name, either from the value provided or from the list\n     *\n     * @param candidatelistItemEntityTypeFullName The potential type name\n     */\n    private ensureListItemEntityTypeName(candidatelistItemEntityTypeFullName: string): Promise<string> {\n\n        return candidatelistItemEntityTypeFullName ?\n            Promise.resolve(candidatelistItemEntityTypeFullName) :\n            this.list.getListItemEntityTypeFullName();\n    }\n}\nexport interface IItem extends _Item, IDeleteableWithETag { }\nexport const Item = spInvokableFactory<IItem>(_Item);\n\n/**\n * Describes a collection of Version objects\n *\n */\n@defaultPath(\"versions\")\nexport class _ItemVersions extends _SharePointQueryableCollection {\n    /**\t\n     * Gets a version by id\t\n     *\t\n     * @param versionId The id of the version to retrieve\t\n     */\n    public getById(versionId: number): IItemVersion {\n        return tag.configure(ItemVersion(this).concat(`(${versionId})`), \"iv.getById\");\n    }\n}\nexport interface IItemVersions extends _ItemVersions { }\nexport const ItemVersions = spInvokableFactory<IItemVersions>(_ItemVersions);\n\n/**\n * Describes a single Version instance\n *\n */\nexport class _ItemVersion extends _SharePointQueryableInstance {\n    public delete = deleteableWithETag(\"iv\");\n}\nexport interface IItemVersion extends _ItemVersion, IDeleteableWithETag { }\nexport const ItemVersion = spInvokableFactory<IItemVersion>(_ItemVersion);\n\n/**\n * Provides paging functionality for list items\n */\nexport class PagedItemCollection<T> {\n\n    constructor(private parent: _Items, private nextUrl: string, public results: T) { }\n\n    /**\n     * If true there are more results available in the set, otherwise there are not\n     */\n    public get hasNext(): boolean {\n        return typeof this.nextUrl === \"string\" && this.nextUrl.length > 0;\n    }\n\n    /**\n     * Gets the next set of results, or resolves to null if no results are available\n     */\n    public getNext(): Promise<PagedItemCollection<T>> {\n\n        if (this.hasNext) {\n            const items = tag.configure(<IItems>Items(this.nextUrl, null).configureFrom(this.parent), \"ip.getNext\");\n            return items.getPaged<T>();\n        }\n\n        return new Promise<any>(r => r(null));\n    }\n}\n\nclass PagedItemCollectionParser<T = any[]> extends ODataParser<PagedItemCollection<T>> {\n\n    constructor(private _parent: _Items) {\n        super();\n    }\n\n    public parse(r: Response): Promise<PagedItemCollection<T>> {\n\n        return new Promise((resolve, reject) => {\n\n            if (this.handleError(r, reject)) {\n                r.json().then(json => {\n                    const nextUrl = hOP(json, \"d\") && hOP(json.d, \"__next\") ? json.d.__next : json[\"odata.nextLink\"];\n                    resolve(new PagedItemCollection<T>(this._parent, nextUrl, this.parseODataJSON(json)));\n                });\n            }\n        });\n    }\n}\n\nclass ItemUpdatedParser extends ODataParser<IItemUpdateResultData> {\n    public parse(r: Response): Promise<IItemUpdateResultData> {\n\n        return new Promise<IItemUpdateResultData>((resolve, reject) => {\n\n            if (this.handleError(r, reject)) {\n                resolve({\n                    \"odata.etag\": r.headers.get(\"etag\"),\n                });\n            }\n        });\n    }\n}\n\nexport interface IItemAddResult {\n    item: IItem;\n    data: any;\n}\n\nexport interface IItemUpdateResult {\n    item: IItem;\n    data: IItemUpdateResultData;\n}\n\nexport interface IItemUpdateResultData {\n    \"odata.etag\": string;\n}\n","import { addProp } from \"@pnp/odata\";\nimport { _List } from \"../lists/types\";\nimport { Items, IItems } from \"./types\";\n\ndeclare module \"../lists/types\" {\n    interface _List {\n        readonly items: IItems;\n    }\n    interface IList {\n        readonly items: IItems;\n    }\n}\n\naddProp(_List, \"items\", Items);\n","import { IConfigurationProvider } from \"../configuration\";\nimport { ITypedHash } from \"@pnp/common\";\nimport { default as CachingConfigurationProvider } from \"./cachingConfigurationProvider\";\nimport { IWeb } from \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists/web\";\nimport \"@pnp/sp/items/list\";\n\n/**\n * A configuration provider which loads configuration values from a SharePoint list\n *\n */\nexport default class SPListConfigurationProvider implements IConfigurationProvider {\n    /**\n     * Creates a new SharePoint list based configuration provider\n     * @constructor\n     * @param {string} webUrl Url of the SharePoint site, where the configuration list is located\n     * @param {string} listTitle Title of the SharePoint list, which contains the configuration settings (optional, default: \"config\")\n     * @param {string} keyFieldName The name of the field in the list to use as the setting key (optional, default: \"Title\")\n     * @param {string} valueFieldName The name of the field in the list to use as the setting value (optional, default: \"Value\")\n     */\n    constructor(public readonly web: IWeb, public readonly listTitle = \"config\", private keyFieldName = \"Title\", private valueFieldName = \"Value\") { }\n\n    /**\n     * Loads the configuration values from the SharePoint list\n     *\n     * @return {Promise<ITypedHash<string>>} Promise of loaded configuration values\n     */\n    public getConfiguration(): Promise<ITypedHash<string>> {\n\n        return this.web.lists.getByTitle(this.listTitle).items.select(this.keyFieldName, this.valueFieldName)<any[]>()\n            .then((data: any[]) => data.reduce((c: any, item: any) => {\n                c[item[this.keyFieldName]] = item[this.valueFieldName];\n                return c;\n            }, {}));\n    }\n\n    /**\n     * Wraps the current provider in a cache enabled provider\n     *\n     * @return {CachingConfigurationProvider} Caching providers which wraps the current provider\n     */\n    public asCaching(cacheKey = `pnp_configcache_splist_${this.web.toUrl()}+${this.listTitle}`): CachingConfigurationProvider {\n        return new CachingConfigurationProvider(this, cacheKey);\n    }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { assign, IHttpClientImpl } from \"@pnp/common\";\n\n/**\n * Makes requests using the SP.RequestExecutor library.\n */\nexport class SPRequestExecutorClient implements IHttpClientImpl {\n    /**\n     * Fetches a URL using the SP.RequestExecutor library.\n     */\n    public fetch(url: string, options: any): Promise<Response> {\n        if (SP === undefined || SP.RequestExecutor === undefined) {\n            throw Error(\"SP.RequestExecutor is undefined. Load the SP.RequestExecutor.js library (/_layouts/15/SP.RequestExecutor.js) before loading the PnP JS Core library.\");\n        }\n\n        const addinWebUrl = url.substring(0, url.indexOf(\"/_api\")),\n            executor = new SP.RequestExecutor(addinWebUrl);\n\n        let headers: { [key: string]: string; } = {},\n            iterator: IterableIterator<[string, string]>,\n            temp: IteratorResult<[string, string]>;\n\n        if (options.headers && options.headers instanceof Headers) {\n            iterator = <IterableIterator<[string, string]>>options.headers.entries();\n            temp = iterator.next();\n            while (!temp.done) {\n                headers[temp.value[0]] = temp.value[1];\n                temp = iterator.next();\n            }\n        } else {\n            headers = <any>options.headers;\n        }\n\n        return new Promise((resolve, reject) => {\n\n            let requestOptions = {\n                error: (error: SP.ResponseInfo) => {\n                    reject(this.convertToResponse(error));\n                },\n                headers: headers,\n                method: options.method,\n                success: (response: SP.ResponseInfo) => {\n                    resolve(this.convertToResponse(response));\n                },\n                url: url,\n            };\n\n            if (options.body) {\n                requestOptions = assign(requestOptions, { body: options.body });\n            } else {\n                requestOptions = assign(requestOptions, { binaryStringRequestBody: true });\n            }\n            executor.executeAsync(requestOptions);\n        });\n    }\n\n    /**\n     * Converts a SharePoint REST API response to a fetch API response.\n     */\n    private convertToResponse = (spResponse: SP.ResponseInfo): Response => {\n        const responseHeaders = new Headers();\n\n        if (spResponse.headers !== undefined) {\n            for (const h in spResponse.headers) {\n                if (spResponse.headers[h]) {\n                    responseHeaders.append(h, spResponse.headers[h]);\n                }\n            }\n        }\n\n        // Cannot have an empty string body when creating a Response with status 204\n        const body = spResponse.statusCode === 204 ? null : spResponse.body;\n\n        return new Response(body, {\n            headers: responseHeaders,\n            status: spResponse.statusCode,\n            statusText: spResponse.statusText,\n        });\n    }\n}\n","// reference: https://msdn.microsoft.com/en-us/library/office/dn600183.aspx\n\n/**\n * Represents the unique sequential location of a change within the change log.\n */\nexport interface IChangeToken {\n    /**\n     * Gets or sets a string value that contains the serialized representation of the change token generated by the protocol server.\n     */\n    StringValue: string;\n}\n\n/**\n * Defines a query that is performed against the change log.\n */\nexport interface IChangeQuery {\n    /**\n     * Gets or sets a value that specifies whether add changes are included in the query.\n     */\n    Add?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to alerts are included in the query.\n     */\n    Alert?: boolean;\n\n    /**\n     * Gets or sets a value that specifies the end date and end time for changes that are returned through the query.\n     */\n    ChangeTokenEnd?: IChangeToken;\n\n    /**\n     * Gets or sets a value that specifies the start date and start time for changes that are returned through the query.\n     */\n    ChangeTokenStart?: IChangeToken;\n\n    /**\n     * Gets or sets a value that specifies whether changes to content types are included in the query.\n     */\n    ContentType?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether deleted objects are included in the query.\n     */\n    DeleteObject?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to fields are included in the query.\n     */\n    Field?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to files are included in the query.\n     */\n    File?: boolean;\n\n    /**\n     * Gets or sets value that specifies whether changes to folders are included in the query.\n     */\n    Folder?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to groups are included in the query.\n     */\n    Group?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether adding users to groups is included in the query.\n     */\n    GroupMembershipAdd?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether deleting users from the groups is included in the query.\n     */\n    GroupMembershipDelete?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether general changes to list items are included in the query.\n     */\n    Item?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to lists are included in the query.\n     */\n    List?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether move changes are included in the query.\n     */\n    Move?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to the navigation structure of a site collection are included in the query.\n     */\n    Navigation?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether renaming changes are included in the query.\n     */\n    Rename?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether restoring items from the recycle bin or from backups is included in the query.\n     */\n    Restore?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether adding role assignments is included in the query.\n     */\n    RoleAssignmentAdd?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether adding role assignments is included in the query.\n     */\n    RoleAssignmentDelete?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether adding role assignments is included in the query.\n     */\n    RoleDefinitionAdd?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether adding role assignments is included in the query.\n     */\n    RoleDefinitionDelete?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether adding role assignments is included in the query.\n     */\n    RoleDefinitionUpdate?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether modifications to security policies are included in the query.\n     */\n    SecurityPolicy?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to site collections are included in the query.\n     */\n    Site?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether updates made using the item SystemUpdate method are included in the query.\n     */\n    SystemUpdate?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether update changes are included in the query.\n     */\n    Update?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to users are included in the query.\n     */\n    User?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to views are included in the query.\n     */\n    View?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to Web sites are included in the query.\n     */\n    Web?: boolean;\n}\n\n/**\n * Specifies the type of a principal.\n */\n/* tslint:disable:no-bitwise */\nexport const enum PrincipalType {\n    /**\n     * Enumeration whose value specifies no principal type.\n     */\n    None = 0,\n    /**\n     * Enumeration whose value specifies a user as the principal type.\n     */\n    User = 1,\n    /**\n     * Enumeration whose value specifies a distribution list as the principal type.\n     */\n    DistributionList = 2,\n    /**\n     * Enumeration whose value specifies a security group as the principal type.\n     */\n    SecurityGroup = 4,\n    /**\n     * Enumeration whose value specifies a group as the principal type.\n     */\n    SharePointGroup = 8,\n    /**\n     * Enumeration whose value specifies all principal types.\n     */\n    All = SharePointGroup | SecurityGroup | DistributionList | User,\n}\n/* tslint:enable:no-bitwise */\n\n/**\n * Specifies the source of a principal.\n */\n/* tslint:disable:no-bitwise */\nexport const enum PrincipalSource {\n    /**\n     * Enumeration whose value specifies no principal source.\n     */\n    None = 0,\n    /**\n     * Enumeration whose value specifies user information list as the principal source.\n     */\n    UserInfoList = 1,\n    /**\n     * Enumeration whose value specifies Active Directory as the principal source.\n     */\n    Windows = 2,\n    /**\n     * Enumeration whose value specifies the current membership provider as the principal source.\n     */\n    MembershipProvider = 4,\n    /**\n     * Enumeration whose value specifies the current role provider as the principal source.\n     */\n    RoleProvider = 8,\n    /**\n     * Enumeration whose value specifies all principal sources.\n     */\n    All = RoleProvider | MembershipProvider | Windows | UserInfoList,\n}\n/* tslint:enable:no-bitwise */\n\nexport interface IPrincipalInfo {\n    Department: string;\n    DisplayName: string;\n    Email: string;\n    JobTitle: string;\n    LoginName: string;\n    Mobile: string;\n    PrincipalId: number;\n    PrincipalType: PrincipalType;\n    SIPAddress: string;\n}\n\nexport enum PageType {\n    Invalid = -1,\n    DefaultView,\n    NormalView,\n    DialogView,\n    View,\n    DisplayForm,\n    DisplayFormDialog,\n    EditForm,\n    EditFormDialog,\n    NewForm,\n    NewFormDialog,\n    SolutionForm,\n    PAGE_MAXITEMS,\n}\n","import { metadata } from \"./metadata\";\nimport { ITypedHash, assign } from \"@pnp/common\";\n\nexport interface ISPKeyValueCollection {\n    __metadata: {\n        type: \"Collection(SP.KeyValue)\";\n    };\n    results: {\n        __metadata: {\n            type: \"SP.KeyValue\",\n        },\n        Key: string;\n        Value: string,\n        ValueType: \"Edm.String\"\n    }[];\n}\n\n/**\n * Creates an object representing a SharePoint Collection(SP.KeyValue)\n * \n * @param obj The plain object defining the properties\n */\nexport function objectToSPKeyValueCollection(obj: ITypedHash<string | number | boolean>): ISPKeyValueCollection {\n\n    return <ISPKeyValueCollection>assign(metadata(\"Collection(SP.KeyValue)\"), {\n        results: Object.keys(obj).map(key => assign(metadata(\"SP.KeyValue\"), {\n            Key: key,\n            Value: Reflect.get(obj, key),\n            ValueType: \"Edm.String\",\n        })),\n    });\n}\n","const InvalidFileFolderNameCharsOnlineRegex = /[\"*:<>?/\\\\|\\x00-\\x1f\\x7f-\\x9f]/g;\nconst InvalidFileFolderNameCharsOnPremiseRegex = /[\"#%*:<>?/\\\\|\\x00-\\x1f\\x7f-\\x9f]/g;\n\n/**\n * Checks if file or folder name contains invalid characters\n *\n * @param input File or folder name to check\n * @param onPremise Set to true for SharePoint On-Premise\n * @returns True if contains invalid chars, false otherwise\n */\nexport function containsInvalidFileFolderChars(input: string, onPremise = false): boolean {\n    if (onPremise) {\n        return InvalidFileFolderNameCharsOnPremiseRegex.test(input);\n    } else {\n        return InvalidFileFolderNameCharsOnlineRegex.test(input);\n    }\n}\n\n/**\n * Removes invalid characters from file or folder name\n *\n * @param input File or folder name\n * @param replacer Value that will replace invalid characters\n * @param onPremise Set to true for SharePoint On-Premise\n * @returns File or folder name with replaced invalid characters\n */\nexport function stripInvalidFileFolderChars(input: string, replacer = \"\", onPremise = false): string {\n    if (onPremise) {\n        return input.replace(InvalidFileFolderNameCharsOnPremiseRegex, replacer);\n    } else {\n        return input.replace(InvalidFileFolderNameCharsOnlineRegex, replacer);\n    }\n}\n","import { Web, IWeb } from \"./types\";\nimport { SPRest } from \"../rest\";\nimport { SPBatch } from \"../batch\";\n\nexport {\n    IWeb,\n    IWebs,\n    Web,\n    IWebAddResult,\n    IWebUpdateResult,\n    Webs,\n    IWebInfo,\n    IStorageEntity,\n    IWebInfosData,\n} from \"./types\";\n\ndeclare module \"../rest\" {\n    interface SPRest {\n\n        /**\n         * Access to the current web instance\n         */\n        readonly web: IWeb;\n\n        /**\n         * Creates a new batch object for use with the SharePointQueryable.addToBatch method\n         *\n         */\n        createBatch(): SPBatch;\n    }\n}\n\nReflect.defineProperty(SPRest.prototype, \"web\", {\n    configurable: true,\n    enumerable: true,\n    get: function (this: SPRest) {\n        return Web(this._baseUrl).configure(this._options);\n    },\n});\n\nSPRest.prototype.createBatch = function (this: SPRest): SPBatch {\n    return this.web.createBatch();\n};\n","import {\n    SPRest,\n} from \"@pnp/sp\";\n\nimport { Web, IWeb } from \"@pnp/sp/webs\";\nimport { Site, ISite } from \"@pnp/sp/sites\";\n\nimport {\n    isUrlAbsolute,\n    combine,\n} from \"@pnp/common\";\n\nimport { ISharePointQueryable } from \"@pnp/sp\";\n\nexport class SPRestAddIn extends SPRest {\n\n    /**\n     * Begins a cross-domain, host site scoped REST request, for use in add-in webs\n     *\n     * @param addInWebUrl The absolute url of the add-in web\n     * @param hostWebUrl The absolute url of the host web\n     */\n    public crossDomainSite(addInWebUrl: string, hostWebUrl: string): ISite {\n        return this._cdImpl(Site, addInWebUrl, hostWebUrl, \"site\");\n    }\n\n    /**\n     * Begins a cross-domain, host web scoped REST request, for use in add-in webs\n     *\n     * @param addInWebUrl The absolute url of the add-in web\n     * @param hostWebUrl The absolute url of the host web\n     */\n    public crossDomainWeb(addInWebUrl: string, hostWebUrl: string): IWeb {\n        return this._cdImpl(Web, addInWebUrl, hostWebUrl, \"web\");\n    }\n\n    /**\n     * Implements the creation of cross domain REST urls\n     *\n     * @param factory The constructor of the object to create Site | Web\n     * @param addInWebUrl The absolute url of the add-in web\n     * @param hostWebUrl The absolute url of the host web\n     * @param urlPart String part to append to the url \"site\" | \"web\"\n     */\n    private _cdImpl<T extends ISharePointQueryable>(\n        factory: (...args: any[]) => T,\n        addInWebUrl: string,\n        hostWebUrl: string,\n        urlPart: string): T {\n\n        if (!isUrlAbsolute(addInWebUrl)) {\n            throw Error(\"The addInWebUrl parameter must be an absolute url.\");\n        }\n\n        if (!isUrlAbsolute(hostWebUrl)) {\n            throw Error(\"The hostWebUrl parameter must be an absolute url.\");\n        }\n\n        const url = combine(addInWebUrl, \"_api/SP.AppContextSite(@target)\");\n\n        const instance = factory(url, urlPart);\n        instance.query.set(\"@target\", \"'\" + encodeURIComponent(hostWebUrl) + \"'\");\n        return instance.configure(this._options);\n    }\n}\n\nexport const sp = new SPRestAddIn();\n","export class GraphEndpoints {\n\n    public static Beta = \"beta\";\n    public static V1 = \"v1.0\";\n\n    /**\n     * \n     * @param url The url to set the endpoint \n     */\n    public static ensure(url: string, endpoint: string): string {\n        const all = [GraphEndpoints.Beta, GraphEndpoints.V1];\n        let regex = new RegExp(endpoint, \"i\");\n        const replaces = all.filter(s => !regex.test(s)).map(s => s.replace(\".\", \"\\\\.\"));\n        regex = new RegExp(`/?(${replaces.join(\"|\")})/`, \"ig\");\n        return url.replace(regex, `/${endpoint}/`);\n    }\n}\n","import { BearerTokenFetchClient, IFetchOptions, ISPFXContext, isUrlAbsolute, SPFxAdalClient , getADALResource } from \"@pnp/common\";\n// @ts-ignore\nimport * as adal from \"adal-angular/dist/adal.min.js\";\n\n/**\n * Azure AD Client for use in the browser\n */\nexport class AdalClient extends BearerTokenFetchClient {\n\n    /**\n     * Our auth context\n     */\n    private static _authContext: adal.AuthenticationContext | null = null;\n\n    /**\n     * Callback used by the adal auth system\n     */\n    private _displayCallback: ((url: string) => void) | null;\n\n    /**\n     * Promise used to ensure the user is logged in\n     */\n    private _loginPromise: Promise<void> | null;\n\n    /**\n     * Creates a new instance of AdalClient\n     * @param clientId Azure App Id\n     * @param tenant Office 365 tenant (Ex: {tenant}.onmicrosoft.com)\n     * @param redirectUri The redirect url used to authenticate the \n     */\n    constructor(public clientId: string, public tenant: string, public redirectUri: string) {\n        super(null);\n        this._displayCallback = null;\n        this._loginPromise = null;\n    }\n\n    /**\n     * Creates a new AdalClient using the values of the supplied SPFx context (requires SPFx >= 1.6)\n     * \n     * @param spfxContext Current SPFx context\n     * @description Using this method requires that the features described in this article\n     * https://docs.microsoft.com/en-us/sharepoint/dev/spfx/use-aadhttpclient are activated in the tenant.\n     */\n    public static fromSPFxContext(spfxContext: ISPFXContext | any): SPFxAdalClient {\n\n        return new SPFxAdalClient(spfxContext);\n    }\n\n    /**\n     * Conducts the fetch opertation against the AAD secured resource\n     * \n     * @param url Absolute URL for the request\n     * @param options Any fetch options passed to the underlying fetch implementation\n     */\n    public async fetch(url: string, options: IFetchOptions): Promise<Response> {\n\n        if (!isUrlAbsolute(url)) {\n            throw Error(\"You must supply absolute urls to AdalClient.fetch.\");\n        }\n\n        // the url we are calling is the resource\n        const token = await this.getToken(getADALResource(url));\n        this.token = token;\n        return super.fetch(url, options);\n    }\n\n    /**\n     * Gets a token based on the current user\n     * \n     * @param resource The resource for which we are requesting a token\n     */\n    public async getToken(resource: string): Promise<string> {\n\n        await this.ensureAuthContext();\n        await this.login();\n\n        let token = null;\n        AdalClient._authContext.acquireToken(resource, (message: string, tok: string) => {\n\n            if (message) {\n                throw Error(message);\n            }\n\n            token = tok;\n        });\n\n        return token;\n    }\n\n    /**\n     * Ensures we have created and setup the adal AuthenticationContext instance\n     */\n    private ensureAuthContext(): Promise<void> {\n\n        return new Promise(resolve => {\n\n            if (AdalClient._authContext === null) {\n                AdalClient._authContext = adal.inject({\n                    clientId: this.clientId,\n                    displayCall: (url: string) => {\n                        if (this._displayCallback) {\n                            this._displayCallback(url);\n                        }\n                    },\n                    navigateToLoginRequestUrl: false,\n                    redirectUri: this.redirectUri,\n                    tenant: this.tenant,\n                });\n            }\n\n            resolve();\n        });\n    }\n\n    /**\n     * Ensures the current user is logged in\n     */\n    private login(): Promise<void> {\n\n        if (this._loginPromise) {\n            return this._loginPromise;\n        }\n\n        this._loginPromise = new Promise((resolve, reject) => {\n\n            if (AdalClient._authContext.getCachedUser()) {\n                return resolve();\n            }\n\n            this._displayCallback = (url: string) => {\n\n                const popupWindow = window.open(url, \"login\", \"width=483, height=600\");\n\n                if (!popupWindow) {\n                    return reject(Error(\"Could not open pop-up window for auth. Likely pop-ups are blocked by the browser.\"));\n                }\n\n                if (popupWindow && popupWindow.focus) {\n                    popupWindow.focus();\n                }\n\n                const pollTimer = window.setInterval(() => {\n\n                    if (!popupWindow || popupWindow.closed || popupWindow.closed === undefined) {\n                        window.clearInterval(pollTimer);\n                    }\n\n                    try {\n                        if (popupWindow.document.URL.indexOf(this.redirectUri) !== -1) {\n                            window.clearInterval(pollTimer);\n                            AdalClient._authContext.handleWindowCallback(popupWindow.location.hash);\n                            popupWindow.close();\n                            resolve();\n                        }\n                    } catch (e) {\n                        reject(e);\n                    }\n                }, 30);\n            };\n\n            // this triggers the login process\n            this.ensureAuthContext().then(_ => {\n                (<any>AdalClient._authContext)._loginInProgress = false;\n                AdalClient._authContext.login();\n                this._displayCallback = null;\n            });\n        });\n\n        return this._loginPromise;\n    }\n}\n","import { ILibraryConfiguration, ITypedHash, RuntimeConfig, IHttpClientImpl } from \"@pnp/common\";\nimport { AdalClient } from \"@pnp/adaljsclient\";\n\nexport interface GraphConfigurationPart {\n    graph?: {\n        /**\n         * Any headers to apply to all requests\n         */\n        headers?: ITypedHash<string>;\n\n        /**\n         * Defines a factory method used to create fetch clients\n         */\n        fetchClientFactory?: () => IHttpClientImpl;\n    };\n}\n\nexport interface GraphConfiguration extends ILibraryConfiguration, GraphConfigurationPart { }\n\nexport function setup(config: GraphConfiguration): void {\n    RuntimeConfig.assign(config);\n}\n\nexport class GraphRuntimeConfigImpl {\n\n    public get headers(): ITypedHash<string> {\n\n        const graphPart = RuntimeConfig.get(\"graph\");\n        if (graphPart !== undefined && graphPart !== null && graphPart.headers !== undefined) {\n            return graphPart.headers;\n        }\n\n        return {};\n    }\n\n    public get fetchClientFactory(): () => IHttpClientImpl {\n\n        const graphPart = RuntimeConfig.get(\"graph\");\n        // use a configured factory firt\n        if (graphPart !== undefined && graphPart !== null && graphPart.fetchClientFactory !== undefined) {\n            return graphPart.fetchClientFactory;\n        }\n\n        // then try and use spfx context if available\n        if (RuntimeConfig.spfxContext !== undefined) {\n            return () => AdalClient.fromSPFxContext(RuntimeConfig.spfxContext);\n        }\n\n        throw Error(\"There is no Graph Client available, either set one using configuraiton or provide a valid SPFx Context using setup.\");\n    }\n}\n\nexport let GraphRuntimeConfig = new GraphRuntimeConfigImpl();\n","import {\n    _SharePointQueryableInstance,\n    ISharePointQueryableInstance,\n    _SharePointQueryableCollection,\n    spInvokableFactory,\n    SharePointQueryableInstance,\n    IDeleteableWithETag,\n    deleteableWithETag,\n} from \"../sharepointqueryable\";\nimport { TextParser, BlobParser, JSONParser, BufferParser, headers, body } from \"@pnp/odata\";\nimport { assign, getGUID, isFunc, stringIsNullOrEmpty, isUrlAbsolute } from \"@pnp/common\";\nimport { Item, IItem } from \"../items\";\nimport { odataUrlFrom } from \"../odata\";\nimport { defaultPath } from \"../decorators\";\nimport { spPost } from \"../operations\";\nimport { escapeQueryStrValue } from \"../utils/escapeQueryStrValue\";\nimport { extractWebUrl } from \"../utils/extractweburl\";\nimport { tag } from \"../telemetry\";\nimport { toResourcePath } from \"../utils/toResourcePath\";\n\n/**\n * Describes a collection of File objects\n *\n */\n@defaultPath(\"files\")\nexport class _Files extends _SharePointQueryableCollection<IFileInfo[]> {\n\n    /**\n     * Gets a File by filename\n     *\n     * @param name The name of the file, including extension.\n     */\n    public getByName(name: string): IFile {\n        if (/\\%#/.test(name)) {\n            throw Error(\"For file names containing % or # please use web.getFileByServerRelativePath\");\n        }\n        return tag.configure(File(this).concat(`('${escapeQueryStrValue(name)}')`), \"fis.getByName\");\n    }\n\n    /**\n     * Uploads a file. Not supported for batching\n     *\n     * @param url The folder-relative url of the file.\n     * @param content The file contents blob.\n     * @param shouldOverWrite Should a file with the same name in the same location be overwritten? (default: true)\n     * @returns The new File and the raw response.\n     */\n    @tag(\"fis.add\")\n    public async add(url: string, content: string | ArrayBuffer | Blob, shouldOverWrite = true): Promise<IFileAddResult> {\n        const response = await spPost(Files(this, `add(overwrite=${shouldOverWrite},url='${escapeQueryStrValue(url)}')`), {\n            body: content,\n        });\n        return {\n            data: response,\n            file: this.getByName(url),\n        };\n    }\n\n    /**\n     * Adds a file using the pound percent safe methods\n     * \n     * @param url Excoded url of the file\n     * @param content The file content\n     * @param parameters Additional parameters to control method behavior\n     */\n    @tag(\"fis.addUsingPath\")\n    public async addUsingPath(url: string, content: string | ArrayBuffer | Blob, parameters: IAddUsingPathProps = { Overwrite: false }): Promise<IFileAddResult> {\n\n        const path = [`AddUsingPath(decodedurl='${escapeQueryStrValue(url)}'`];\n\n        if (parameters) {\n            if (parameters.Overwrite) {\n                path.push(\",Overwrite=true\");\n            }\n            if (parameters.AutoCheckoutOnInvalidData) {\n                path.push(\",AutoCheckoutOnInvalidData=true\");\n            }\n            if (!stringIsNullOrEmpty(parameters.XorHash)) {\n                path.push(`,XorHash=${escapeQueryStrValue(parameters.XorHash)}`);\n            }\n        }\n\n        path.push(\")\");\n\n        const resp: IFileInfo = await spPost(Files(this, path.join(\"\")), { body: content });\n\n        return {\n            data: resp,\n            file: File(odataUrlFrom(resp)),\n        };\n    }\n\n    /**\n     * Uploads a file. Not supported for batching\n     *\n     * @param url The folder-relative url of the file.\n     * @param content The Blob file content to add\n     * @param progress A callback function which can be used to track the progress of the upload\n     * @param shouldOverWrite Should a file with the same name in the same location be overwritten? (default: true)\n     * @param chunkSize The size of each file slice, in bytes (default: 10485760)\n     * @returns The new File and the raw response.\n     */\n    @tag(\"fis.addChunked\")\n    public async addChunked(url: string, content: Blob, progress?: (data: IFileUploadProgressData) => void, shouldOverWrite = true, chunkSize = 10485760): Promise<IFileAddResult> {\n\n        await spPost(this.clone(Files, `add(overwrite=${shouldOverWrite},url='${escapeQueryStrValue(url)}')`, false));\n        const file = this.getByName(url);\n        return await file.setContentChunked(content, progress, chunkSize);\n    }\n\n    /**\n     * Adds a ghosted file to an existing list or document library. Not supported for batching.\n     *\n     * @param fileUrl The server-relative url where you want to save the file.\n     * @param templateFileType The type of use to create the file.\n     * @returns The template file that was added and the raw response.\n     */\n    @tag(\"fis.addTemplateFile\")\n    public async addTemplateFile(fileUrl: string, templateFileType: TemplateFileType): Promise<IFileAddResult> {\n        const response = await spPost(this.clone(Files, `addTemplateFile(urloffile='${escapeQueryStrValue(fileUrl)}',templatefiletype=${templateFileType})`, false));\n        return {\n            data: response,\n            file: File(odataUrlFrom(response)),\n        };\n    }\n}\nexport interface IFiles extends _Files { }\nexport const Files = spInvokableFactory<IFiles>(_Files);\n\n/**\n * Describes a single File instance\n *\n */\nexport class _File extends _SharePointQueryableInstance<IFileInfo> {\n\n    public delete = deleteableWithETag(\"fi\");\n\n    /**\n     * Gets a value that specifies the list item field values for the list item corresponding to the file.\n     *\n     */\n    public get listItemAllFields(): ISharePointQueryableInstance {\n        return tag.configure(SharePointQueryableInstance(this, \"listItemAllFields\"), \"fi.listItemAllFields\");\n    }\n\n    /**\n     * Gets a collection of versions\n     *\n     */\n    public get versions(): IVersions {\n        return tag.configure(Versions(this), \"fi.versions\");\n    }\n\n    /**\n     * Approves the file submitted for content approval with the specified comment.\n     * Only documents in lists that are enabled for content approval can be approved.\n     *\n     * @param comment The comment for the approval.\n     */\n    @tag(\"fi.approve\")\n    public approve(comment = \"\"): Promise<void> {\n        return spPost(this.clone(File, `approve(comment='${escapeQueryStrValue(comment)}')`));\n    }\n\n    /**\n     * Stops the chunk upload session without saving the uploaded data. Does not support batching.\n     * If the file doesn’t already exist in the library, the partially uploaded file will be deleted.\n     * Use this in response to user action (as in a request to cancel an upload) or an error or exception.\n     * Use the uploadId value that was passed to the StartUpload method that started the upload session.\n     * This method is currently available only on Office 365.\n     *\n     * @param uploadId The unique identifier of the upload session.\n     */\n    @tag(\"fi.cancelUpload\")\n    public cancelUpload(uploadId: string): Promise<void> {\n        return spPost(this.clone(File, `cancelUpload(uploadId=guid'${uploadId}')`, false));\n    }\n\n    /**\n     * Checks the file in to a document library based on the check-in type.\n     *\n     * @param comment A comment for the check-in. Its length must be <= 1023.\n     * @param checkinType The check-in type for the file.\n     */\n    @tag(\"fi.checkin\")\n    public checkin(comment = \"\", checkinType = CheckinType.Major): Promise<void> {\n\n        if (comment.length > 1023) {\n            throw Error(\"The maximum comment length is 1023 characters.\");\n        }\n\n        return spPost(this.clone(File, `checkin(comment='${escapeQueryStrValue(comment)}',checkintype=${checkinType})`));\n    }\n\n    /**\n     * Checks out the file from a document library.\n     */\n    @tag(\"fi.checkout\")\n    public checkout(): Promise<void> {\n        return spPost(this.clone(File, \"checkout\"));\n    }\n\n    /**\n     * Copies the file to the destination url.\n     *\n     * @param url The absolute url or server relative url of the destination file path to copy to.\n     * @param shouldOverWrite Should a file with the same name in the same location be overwritten?\n     */\n    @tag(\"fi.copyTo\")\n    public copyTo(url: string, shouldOverWrite = true): Promise<void> {\n        return spPost(this.clone(File, `copyTo(strnewurl='${escapeQueryStrValue(url)}',boverwrite=${shouldOverWrite})`));\n    }\n\n    /**\n     * Copies the file by path to destination path.\n     * Also works with different site collections.\n     *\n     * @param destUrl The absolute url or server relative url of the destination file path to copy to.\n     * @param shouldOverWrite Should a file with the same name in the same location be overwritten?\n     * @param keepBoth Keep both if file with the same name in the same location already exists? Only relevant when shouldOverWrite is set to false.\n     */\n    @tag(\"fi.copyByPath\")\n    public async copyByPath(destUrl: string, shouldOverWrite: boolean, KeepBoth = false): Promise<void> {\n\n        const { ServerRelativeUrl: srcUrl, [\"odata.id\"]: absoluteUrl } = await this.select(\"ServerRelativeUrl\")();\n        const webBaseUrl = extractWebUrl(absoluteUrl);\n        const hostUrl = webBaseUrl.replace(\"://\", \"___\").split(\"/\")[0].replace(\"___\", \"://\");\n        await spPost(File(webBaseUrl, `/_api/SP.MoveCopyUtil.CopyFileByPath(overwrite=@a1)?@a1=${shouldOverWrite}`),\n            body({\n                destPath: toResourcePath(isUrlAbsolute(destUrl) ? destUrl : `${hostUrl}${destUrl}`),\n                options: {\n                    KeepBoth: KeepBoth,\n                    ResetAuthorAndCreatedOnCopy: true,\n                    ShouldBypassSharedLocks: true,\n                    __metadata: {\n                        type: \"SP.MoveCopyOptions\",\n                    },\n                },\n                srcPath: toResourcePath(isUrlAbsolute(srcUrl) ? srcUrl : `${hostUrl}${srcUrl}`),\n            }));\n    }\n\n    /**\n     * Denies approval for a file that was submitted for content approval.\n     * Only documents in lists that are enabled for content approval can be denied.\n     *\n     * @param comment The comment for the denial.\n     */\n    @tag(\"fi.deny\")\n    public deny(comment = \"\"): Promise<void> {\n        if (comment.length > 1023) {\n            throw Error(\"The maximum comment length is 1023 characters.\");\n        }\n        return spPost(this.clone(File, `deny(comment='${escapeQueryStrValue(comment)}')`));\n    }\n\n    /**\n     * Moves the file to the specified destination url.\n     *\n     * @param url The absolute url or server relative url of the destination file path to move to.\n     * @param moveOperations The bitwise MoveOperations value for how to move the file.\n     */\n    @tag(\"fi.moveTo\")\n    public moveTo(url: string, moveOperations = MoveOperations.Overwrite): Promise<void> {\n        return spPost(this.clone(File, `moveTo(newurl='${escapeQueryStrValue(url)}',flags=${moveOperations})`));\n    }\n\n    /**\n     * Moves the file by path to the specified destination url.\n     * Also works with different site collections.\n     *\n     * @param destUrl The absolute url or server relative url of the destination file path to move to.\n     * @param shouldOverWrite Should a file with the same name in the same location be overwritten?\n     * @param keepBoth Keep both if file with the same name in the same location already exists? Only relevant when shouldOverWrite is set to false.\n     */\n    @tag(\"fi.moveByPath\")\n    public async moveByPath(destUrl: string, shouldOverWrite: boolean, KeepBoth = false): Promise<void> {\n\n        const { ServerRelativeUrl: srcUrl, [\"odata.id\"]: absoluteUrl } = await this.select(\"ServerRelativeUrl\")();\n        const webBaseUrl = extractWebUrl(absoluteUrl);\n        const hostUrl = webBaseUrl.replace(\"://\", \"___\").split(\"/\")[0].replace(\"___\", \"://\");\n        await spPost(File(webBaseUrl, `/_api/SP.MoveCopyUtil.MoveFileByPath(overwrite=@a1)?@a1=${shouldOverWrite}`),\n            body({\n                destPath: toResourcePath(isUrlAbsolute(destUrl) ? destUrl : `${hostUrl}${destUrl}`),\n                options: {\n                    KeepBoth: KeepBoth,\n                    ResetAuthorAndCreatedOnCopy: false,\n                    ShouldBypassSharedLocks: true,\n                    __metadata: {\n                        type: \"SP.MoveCopyOptions\",\n                    },\n                },\n                srcPath: toResourcePath(isUrlAbsolute(srcUrl) ? srcUrl : `${hostUrl}${srcUrl}`),\n            }));\n    }\n\n    /**\n     * Submits the file for content approval with the specified comment.\n     *\n     * @param comment The comment for the published file. Its length must be <= 1023.\n     */\n    @tag(\"fi.publish\")\n    public publish(comment = \"\"): Promise<void> {\n        if (comment.length > 1023) {\n            throw Error(\"The maximum comment length is 1023 characters.\");\n        }\n        return spPost(this.clone(File, `publish(comment='${escapeQueryStrValue(comment)}')`));\n    }\n\n    /**\n     * Moves the file to the Recycle Bin and returns the identifier of the new Recycle Bin item.\n     *\n     * @returns The GUID of the recycled file.\n     */\n    @tag(\"fi.recycle\")\n    public recycle(): Promise<string> {\n        return spPost(this.clone(File, \"recycle\"));\n    }\n\n    /**\n     * Reverts an existing checkout for the file.\n     *\n     */\n    @tag(\"fi.undoCheckout\")\n    public undoCheckout(): Promise<void> {\n        return spPost(this.clone(File, \"undoCheckout\"));\n    }\n\n    /**\n     * Removes the file from content approval or unpublish a major version.\n     *\n     * @param comment The comment for the unpublish operation. Its length must be <= 1023.\n     */\n    @tag(\"fi.unpublish\")\n    public unpublish(comment = \"\"): Promise<void> {\n        if (comment.length > 1023) {\n            throw Error(\"The maximum comment length is 1023 characters.\");\n        }\n        return spPost(this.clone(File, `unpublish(comment='${escapeQueryStrValue(comment)}')`));\n    }\n\n    /**\n     * Gets the contents of the file as text. Not supported in batching.\n     *\n     */\n    @tag(\"fi.getText\")\n    public getText(): Promise<string> {\n\n        return this.clone(File, \"$value\", false).usingParser(new TextParser())(headers({ \"binaryStringResponseBody\": \"true\" }));\n    }\n\n    /**\n     * Gets the contents of the file as a blob, does not work in Node.js. Not supported in batching.\n     *\n     */\n    @tag(\"fi.getBlob\")\n    public getBlob(): Promise<Blob> {\n\n        return this.clone(File, \"$value\", false).usingParser(new BlobParser())(headers({ \"binaryStringResponseBody\": \"true\" }));\n    }\n\n    /**\n     * Gets the contents of a file as an ArrayBuffer, works in Node.js. Not supported in batching.\n     */\n    @tag(\"fi.getBuffer\")\n    public getBuffer(): Promise<ArrayBuffer> {\n\n        return this.clone(File, \"$value\", false).usingParser(new BufferParser())(headers({ \"binaryStringResponseBody\": \"true\" }));\n    }\n\n    /**\n     * Gets the contents of a file as an ArrayBuffer, works in Node.js. Not supported in batching.\n     */\n    @tag(\"fi.getJSON\")\n    public getJSON(): Promise<any> {\n\n        return this.clone(File, \"$value\", false).usingParser(new JSONParser())(headers({ \"binaryStringResponseBody\": \"true\" }));\n    }\n\n    /**\n     * Sets the content of a file, for large files use setContentChunked. Not supported in batching.\n     *\n     * @param content The file content\n     *\n     */\n    @tag(\"fi.setContent\")\n    public async setContent(content: string | ArrayBuffer | Blob): Promise<IFile> {\n\n        await spPost(this.clone(File, \"$value\", false), {\n            body: content,\n            headers: {\n                \"X-HTTP-Method\": \"PUT\",\n            },\n        });\n        return File(this);\n    }\n\n    /**\n     * Gets the associated list item for this folder, loading the default properties\n     */\n    @tag(\"fi.getItem\")\n    public async getItem<T>(...selects: string[]): Promise<IItem & T> {\n\n        const q = this.listItemAllFields;\n        const d = await q.select.apply(q, selects)();\n        return assign(Item(odataUrlFrom(d)), d);\n    }\n\n    /**\n     * Sets the contents of a file using a chunked upload approach. Not supported in batching.\n     *\n     * @param file The file to upload\n     * @param progress A callback function which can be used to track the progress of the upload\n     * @param chunkSize The size of each file slice, in bytes (default: 10485760)\n     */\n    public async setContentChunked(file: Blob, progress?: (data: IFileUploadProgressData) => void, chunkSize = 10485760): Promise<IFileAddResult> {\n\n        if (!isFunc(progress)) {\n            progress = () => null;\n        }\n\n        const fileSize = file.size;\n        const totalBlocks = parseInt((fileSize / chunkSize).toString(), 10) + ((fileSize % chunkSize === 0) ? 1 : 0);\n        const uploadId = getGUID();\n\n        // report that we are starting\n        progress({ uploadId, blockNumber: 1, chunkSize, currentPointer: 0, fileSize, stage: \"starting\", totalBlocks });\n        let currentPointer = await this.startUpload(uploadId, file.slice(0, chunkSize));\n\n        // skip the first and last blocks\n        for (let i = 2; i < totalBlocks; i++) {\n            progress({ uploadId, blockNumber: i, chunkSize, currentPointer, fileSize, stage: \"continue\", totalBlocks });\n            currentPointer = await this.continueUpload(uploadId, currentPointer, file.slice(currentPointer, currentPointer + chunkSize));\n        }\n\n        progress({ uploadId, blockNumber: totalBlocks, chunkSize, currentPointer, fileSize, stage: \"finishing\", totalBlocks });\n        return this.finishUpload(uploadId, currentPointer, file.slice(currentPointer));\n    }\n\n    /**\n     * Starts a new chunk upload session and uploads the first fragment.\n     * The current file content is not changed when this method completes.\n     * The method is idempotent (and therefore does not change the result) as long as you use the same values for uploadId and stream.\n     * The upload session ends either when you use the CancelUpload method or when you successfully\n     * complete the upload session by passing the rest of the file contents through the ContinueUpload and FinishUpload methods.\n     * The StartUpload and ContinueUpload methods return the size of the running total of uploaded data in bytes,\n     * so you can pass those return values to subsequent uses of ContinueUpload and FinishUpload.\n     * This method is currently available only on Office 365.\n     *\n     * @param uploadId The unique identifier of the upload session.\n     * @param fragment The file contents.\n     * @returns The size of the total uploaded data in bytes.\n     */\n    @tag(\"fi.startUpload\")\n    protected async startUpload(uploadId: string, fragment: ArrayBuffer | Blob): Promise<number> {\n        let n = await spPost(this.clone(File, `startUpload(uploadId=guid'${uploadId}')`, false), { body: fragment });\n        if (typeof n === \"object\") {\n            // When OData=verbose the payload has the following shape:\n            // { StartUpload: \"10485760\" }\n            n = (n as any).StartUpload;\n        }\n        return parseFloat(n);\n    }\n\n    /**\n     * Continues the chunk upload session with an additional fragment.\n     * The current file content is not changed.\n     * Use the uploadId value that was passed to the StartUpload method that started the upload session.\n     * This method is currently available only on Office 365.\n     *\n     * @param uploadId The unique identifier of the upload session.\n     * @param fileOffset The size of the offset into the file where the fragment starts.\n     * @param fragment The file contents.\n     * @returns The size of the total uploaded data in bytes.\n     */\n    @tag(\"fi.continueUpload\")\n    protected async continueUpload(uploadId: string, fileOffset: number, fragment: ArrayBuffer | Blob): Promise<number> {\n        let n = await spPost(this.clone(File, `continueUpload(uploadId=guid'${uploadId}',fileOffset=${fileOffset})`, false), { body: fragment });\n        if (typeof n === \"object\") {\n            // When OData=verbose the payload has the following shape:\n            // { ContinueUpload: \"20971520\" }\n            n = (n as any).ContinueUpload;\n        }\n        return parseFloat(n);\n    }\n\n    /**\n     * Uploads the last file fragment and commits the file. The current file content is changed when this method completes.\n     * Use the uploadId value that was passed to the StartUpload method that started the upload session.\n     * This method is currently available only on Office 365.\n     *\n     * @param uploadId The unique identifier of the upload session.\n     * @param fileOffset The size of the offset into the file where the fragment starts.\n     * @param fragment The file contents.\n     * @returns The newly uploaded file.\n     */\n    @tag(\"fi.finishUpload\")\n    protected async finishUpload(uploadId: string, fileOffset: number, fragment: ArrayBuffer | Blob): Promise<IFileAddResult> {\n        const response = await spPost(this.clone(File, `finishUpload(uploadId=guid'${uploadId}',fileOffset=${fileOffset})`, false), { body: fragment });\n        return {\n            data: response,\n            file: File(odataUrlFrom(response)),\n        };\n    }\n}\n\nexport interface IFile extends _File, IDeleteableWithETag { }\nexport const File = spInvokableFactory<IFile>(_File);\n\n/**\n * Describes a collection of Version objects\n *\n */\n@defaultPath(\"versions\")\nexport class _Versions extends _SharePointQueryableCollection {\n\n    /**\t\n     * Gets a version by id\t\n     *\t\n     * @param versionId The id of the version to retrieve\t\n     */\n    public getById(versionId: number): IVersion {\n        return tag.configure(Version(this).concat(`(${versionId})`), \"vers.getById\");\n    }\n\n    /**\n     * Deletes all the file version objects in the collection.\n     *\n     */\n    @tag(\"vers.deleteAll\")\n    public deleteAll(): Promise<void> {\n        return spPost(Versions(this, \"deleteAll\"));\n    }\n\n    /**\n     * Deletes the specified version of the file.\n     *\n     * @param versionId The ID of the file version to delete.\n     */\n    @tag(\"vers.deleteById\")\n    public deleteById(versionId: number): Promise<void> {\n        return spPost(this.clone(Versions, `deleteById(vid=${versionId})`));\n    }\n\n    /**\n     * Recycles the specified version of the file.\n     *\n     * @param versionId The ID of the file version to delete.\n     */\n    @tag(\"vers.recycleByID\")\n    public recycleByID(versionId: number): Promise<void> {\n        return spPost(this.clone(Versions, `recycleByID(vid=${versionId})`));\n    }\n\n    /**\n     * Deletes the file version object with the specified version label.\n     *\n     * @param label The version label of the file version to delete, for example: 1.2\n     */\n    @tag(\"vers.deleteByLabel\")\n    public deleteByLabel(label: string): Promise<void> {\n        return spPost(this.clone(Versions, `deleteByLabel(versionlabel='${escapeQueryStrValue(label)}')`));\n    }\n\n    /**\n     * Recycles the file version object with the specified version label.\n     *\n     * @param label The version label of the file version to delete, for example: 1.2\n     */\n    @tag(\"vers.recycleByLabel\")\n    public recycleByLabel(label: string): Promise<void> {\n        return spPost(this.clone(Versions, `recycleByLabel(versionlabel='${escapeQueryStrValue(label)}')`));\n    }\n\n    /**\n     * Creates a new file version from the file specified by the version label.\n     *\n     * @param label The version label of the file version to restore, for example: 1.2\n     */\n    @tag(\"vers.restoreByLabel\")\n    public restoreByLabel(label: string): Promise<void> {\n        return spPost(this.clone(Versions, `restoreByLabel(versionlabel='${escapeQueryStrValue(label)}')`));\n    }\n}\nexport interface IVersions extends _Versions { }\nexport const Versions = spInvokableFactory<IVersions>(_Versions);\n\n/**\n * Describes a single Version instance\n *\n */\nexport class _Version extends _SharePointQueryableInstance {\n    public delete = deleteableWithETag(\"ver\");\n}\nexport interface IVersion extends _Version, IDeleteableWithETag { }\nexport const Version = spInvokableFactory<IVersion>(_Version);\n\n/**\n * Types for document check in. \n * Minor = 0\n * Major = 1\n * Overwrite = 2\n */\nexport enum CheckinType {\n    Minor = 0,\n    Major = 1,\n    Overwrite = 2,\n}\n/**\n * Describes file and result\n */\nexport interface IFileAddResult {\n    file: IFile;\n    data: IFileInfo;\n}\n\n/**\n * File move opertions\n * Overwrite = 1\n * AllowBrokenThickets = 8\n */\nexport enum MoveOperations {\n    Overwrite = 1,\n    AllowBrokenThickets = 8,\n}\n\nexport enum TemplateFileType {\n    StandardPage = 0,\n    WikiPage = 1,\n    FormPage = 2,\n    ClientSidePage = 3,\n}\n\n/**\n * Describes SharePoint file upload progress data\n */\nexport interface IFileUploadProgressData {\n    uploadId: string;\n    stage: \"starting\" | \"continue\" | \"finishing\";\n    blockNumber: number;\n    totalBlocks: number;\n    chunkSize: number;\n    currentPointer: number;\n    fileSize: number;\n}\n\nexport interface IAddUsingPathProps {\n    /**\n     * Overwrite the file if it exists\n     */\n    Overwrite: boolean;\n    /**\n     * specifies whether to auto checkout on invalid Data. It'll be useful if the list contains validation whose requirements upload will not be able to meet.\n     */\n    AutoCheckoutOnInvalidData?: boolean;\n    /**\n     * Specifies a XOR hash of the file data which should be used to ensure end-2-end data integrity, base64 representation\n     */\n    XorHash?: string;\n}\n\nexport interface IFileInfo {\n    readonly \"odata.id\": string;\n    CheckInComment: string;\n    CheckOutType: number;\n    ContentTag: string;\n    CustomizedPageStatus: number;\n    ETag: string;\n    Exists: boolean;\n    IrmEnabled: boolean;\n    Length: string;\n    Level: number;\n    LinkingUri: string | null;\n    LinkingUrl: string;\n    MajorVersion: number;\n    MinorVersion: number;\n    Name: string;\n    ServerRelativeUrl: string;\n    TimeCreated: string;\n    TimeLastModified: string;\n    Title: string | null;\n    UIVersion: number;\n    UIVersionLabel: string;\n    UniqueId: string;\n}\n","import {\n    assign,\n    IRequestClient,\n    mergeHeaders,\n    IFetchOptions,\n    IHttpClientImpl,\n    getCtxCallback,\n} from \"@pnp/common\";\nimport { GraphRuntimeConfig } from \"./graphlibconfig\";\n\nexport class GraphHttpClient implements IRequestClient {\n\n    private _impl: IHttpClientImpl;\n\n    constructor() {\n\n        this._impl = GraphRuntimeConfig.fetchClientFactory();\n    }\n\n    public fetch(url: string, options: IFetchOptions = {}): Promise<Response> {\n\n        const headers = new Headers();\n\n        // first we add the global headers so they can be overwritten by any passed in locally to this call\n        mergeHeaders(headers, GraphRuntimeConfig.headers);\n\n        // second we add the local options so we can overwrite the globals\n        mergeHeaders(headers, options.headers);\n\n        if (!headers.has(\"Content-Type\")) {\n            headers.append(\"Content-Type\", \"application/json\");\n        }\n\n        if (!headers.has(\"SdkVersion\")) {\n            // this marks the requests for understanding by the service\n            headers.append(\"SdkVersion\", \"PnPCoreJS/$$Version$$\");\n        }\n\n        const opts = assign(options, { headers: headers });\n\n        return this.fetchRaw(url, opts);\n    }\n\n    public fetchRaw(url: string, options: IFetchOptions = {}): Promise<Response> {\n\n        // here we need to normalize the headers\n        const rawHeaders = new Headers();\n        mergeHeaders(rawHeaders, options.headers);\n        options = assign(options, { headers: rawHeaders });\n\n        const retry = (ctx: RetryContext): void => {\n\n            this._impl.fetch(url, options).then((response) => ctx.resolve(response)).catch((response) => {\n\n                // Check if request was throttled - http status code 429\n                // Check if request failed due to server unavailable - http status code 503\n                // Check if request failed due to gateway timeout - http status code 504\n                if (response.status !== 429 && response.status !== 503 && response.status !== 504) {\n                    ctx.reject(response);\n                }\n\n                // grab our current delay\n                const delay = ctx.delay;\n\n                // Increment our counters.\n                ctx.delay *= 2;\n                ctx.attempts++;\n\n                // If we have exceeded the retry count, reject.\n                if (ctx.retryCount <= ctx.attempts) {\n                    ctx.reject(response);\n                }\n\n                // Set our retry timeout for {delay} milliseconds.\n                setTimeout(getCtxCallback(this, retry, ctx), delay);\n            });\n        };\n\n        return new Promise((resolve, reject) => {\n\n            const retryContext: RetryContext = {\n                attempts: 0,\n                delay: 100,\n                reject: reject,\n                resolve: resolve,\n                retryCount: 7,\n            };\n\n            retry.call(this, retryContext);\n        });\n    }\n\n    public get(url: string, options: IFetchOptions = {}): Promise<Response> {\n        const opts = assign(options, { method: \"GET\" });\n        return this.fetch(url, opts);\n    }\n\n    public post(url: string, options: IFetchOptions = {}): Promise<Response> {\n        const opts = assign(options, { method: \"POST\" });\n        return this.fetch(url, opts);\n    }\n\n    public patch(url: string, options: IFetchOptions = {}): Promise<Response> {\n        const opts = assign(options, { method: \"PATCH\" });\n        return this.fetch(url, opts);\n    }\n\n    public delete(url: string, options: IFetchOptions = {}): Promise<Response> {\n        const opts = assign(options, { method: \"DELETE\" });\n        return this.fetch(url, opts);\n    }\n}\n\ninterface RetryContext {\n    attempts: number;\n    delay: number;\n    reject: (reason?: any) => void;\n    resolve: (value?: Response | PromiseLike<Response>) => void;\n    retryCount: number;\n}\n","import { IFetchOptions, mergeOptions, objectDefinedNotNull } from \"@pnp/common\";\nimport { defaultPipelineBinder, cloneQueryableData, IOperation } from \"@pnp/odata\";\nimport { GraphHttpClient } from \"./graphhttpclient\";\nimport { IGraphQueryable } from \"./graphqueryable\";\n\nconst graphClientBinder = defaultPipelineBinder(() => new GraphHttpClient());\n\nconst send = <T>(operation: IOperation): (o: IGraphQueryable<T>, options?: IFetchOptions) => Promise<T> => {\n\n    return async function <R = T>(o: IGraphQueryable<R>, options?: IFetchOptions): Promise<R> {\n\n        const data = cloneQueryableData(o.data);\n        const batchDependency = objectDefinedNotNull(data.batch) ? data.batch.addDependency() : () => { return; };\n        const url = o.toUrlAndQuery();\n\n        mergeOptions(data.options, options);\n\n        return operation(Object.assign({}, data, {\n            batchDependency,\n            url,\n        }));\n    };\n};\n\nexport const graphGet = <T = any>(o: IGraphQueryable<any>, options?: IFetchOptions): Promise<T> => send<T>(graphClientBinder(\"GET\"))(o, options);\n\nexport const graphPost = <T = any>(o: IGraphQueryable<any>, options?: IFetchOptions): Promise<T> => send<T>(graphClientBinder(\"POST\"))(o, options);\n\nexport const graphDelete = <T = any>(o: IGraphQueryable<any>, options?: IFetchOptions): Promise<T> => send<T>(graphClientBinder(\"DELETE\"))(o, options);\n\nexport const graphPatch = <T = any>(o: IGraphQueryable<any>, options?: IFetchOptions): Promise<T> => send<T>(graphClientBinder(\"PATCH\"))(o, options);\n\nexport const graphPut = <T = any>(o: IGraphQueryable<any>, options?: IFetchOptions): Promise<T> => send<T>(graphClientBinder(\"PUT\"))(o, options);\n","import { combine, isUrlAbsolute, IFetchOptions } from \"@pnp/common\";\nimport { Queryable, invokableFactory, IInvokable, IQueryable } from \"@pnp/odata\";\nimport { GraphEndpoints } from \"./types\";\nimport { graphGet } from \"./operations\";\n\nexport interface IGraphQueryableConstructor<T> {\n    new(baseUrl: string | IGraphQueryable, path?: string): T;\n}\n\nexport const graphInvokableFactory = <R>(f: any): (baseUrl: string | IGraphQueryable, path?: string) => R => {\n    return invokableFactory<R>(f);\n};\n\n/**\n * Queryable Base Class\n *\n */\nexport class _GraphQueryable<GetType = any> extends Queryable<GetType> implements IGraphQueryable<GetType> {\n\n    /**\n     * Creates a new instance of the Queryable class\n     *\n     * @constructor\n     * @param baseUrl A string or Queryable that should form the base part of the url\n     *\n     */\n    constructor(baseUrl: string | IGraphQueryable, path?: string) {\n\n        let url = \"\";\n        let parentUrl = \"\";\n        const query = new Map<string, string>();\n\n        if (typeof baseUrl === \"string\") {\n            parentUrl = baseUrl;\n            url = combine(parentUrl, path);\n        } else {\n            parentUrl = baseUrl.toUrl();\n            url = combine(parentUrl, path);\n        }\n\n        super({\n            parentUrl,\n            query,\n            url,\n        });\n\n        // post init actions\n        if (typeof baseUrl !== \"string\") {\n            this.configureFrom(baseUrl);\n        }\n    }\n\n    /**\n     * Choose which fields to return\n     *\n     * @param selects One or more fields to return\n     */\n    public select(...selects: string[]): this {\n        if (selects.length > 0) {\n            this.query.set(\"$select\", selects.join(\",\"));\n        }\n        return this;\n    }\n\n    /**\n     * Expands fields such as lookups to get additional data\n     *\n     * @param expands The Fields for which to expand the values\n     */\n    public expand(...expands: string[]): this {\n        if (expands.length > 0) {\n            this.query.set(\"$expand\", expands.join(\",\"));\n        }\n        return this;\n    }\n\n    public defaultAction(options?: IFetchOptions): Promise<GetType> {\n        return graphGet(this, options);\n    }\n\n    public get<T = GetType>(options?: IFetchOptions): Promise<T> {\n        return graphGet<T>(<any>this, options);\n    }\n\n    /**\n     * Gets the full url with query information\n     *\n     */\n    public toUrlAndQuery(): string {\n\n        let url = this.toUrl();\n\n        if (!isUrlAbsolute(url)) {\n            url = combine(\"https://graph.microsoft.com\", url);\n        }\n\n        if (this.query.size > 0) {\n            const char = url.indexOf(\"?\") > -1 ? \"&\" : \"?\";\n            url += `${char}${Array.from(this.query).map((v: [string, string]) => v[0] + \"=\" + v[1]).join(\"&\")}`;\n        }\n\n        return url;\n    }\n\n    /**\n     * Gets a parent for this instance as specified\n     *\n     * @param factory The contructor for the class to create\n     */\n    protected getParent<T extends _GraphQueryable>(\n        factory: IGraphQueryableConstructor<T>,\n        baseUrl: string | IGraphQueryable = this.parentUrl,\n        path?: string): T {\n\n        return new factory(baseUrl, path);\n    }\n\n    /**\n     * Clones this queryable into a new queryable instance of T\n     * @param factory Constructor used to create the new instance\n     * @param additionalPath Any additional path to include in the clone\n     * @param includeBatch If true this instance's batch will be added to the cloned instance\n     */\n    protected clone<T extends IGraphQueryable>(factory: (...args: any[]) => T, additionalPath?: string, includeBatch = true): T {\n\n        return super.cloneTo<T>(factory(this, additionalPath), { includeBatch });\n    }\n\n    protected setEndpoint(endpoint: string): this {\n        this.data.url = GraphEndpoints.ensure(this.data.url, endpoint);\n        return this;\n    }\n}\n\nexport interface IGraphQueryable<GetType = any> extends IInvokable, IQueryable<GetType> {\n\n    /**\n     * Choose which fields to return\n     *\n     * @param selects One or more fields to return\n     */\n    select(...selects: string[]): this;\n\n    /**\n     * Expands fields such as lookups to get additional data\n     *\n     * @param expands The Fields for which to expand the values\n     */\n    expand(...expands: string[]): this;\n\n    defaultAction(options?: IFetchOptions): Promise<GetType>;\n\n    /**\n     * Gets the full url with query information\n     *\n     */\n    toUrlAndQuery(): string;\n\n}\nexport interface _GraphQueryable extends IInvokable { }\nexport const GraphQueryable = graphInvokableFactory<IGraphQueryable>(_GraphQueryable);\n\n/**\n * Represents a REST collection which can be filtered, paged, and selected\n *\n */\nexport class _GraphQueryableCollection<GetType = any[]> extends _GraphQueryable<GetType> implements IGraphQueryableCollection<GetType> {\n\n    /**\n     *\n     * @param filter The string representing the filter query\n     */\n    public filter(filter: string): this {\n        this.query.set(\"$filter\", filter);\n        return this;\n    }\n\n    /**\n     * Orders based on the supplied fields\n     *\n     * @param orderby The name of the field on which to sort\n     * @param ascending If false DESC is appended, otherwise ASC (default)\n     */\n    public orderBy(orderBy: string, ascending = true): this {\n        const o = \"$orderby\";\n        const query = this.query.has(o) ? this.query.get(o).split(\",\") : [];\n        query.push(`${orderBy} ${ascending ? \"asc\" : \"desc\"}`);\n        this.query.set(o, query.join(\",\"));\n        return this;\n    }\n\n    /**\n     * Limits the query to only return the specified number of items\n     *\n     * @param top The query row limit\n     */\n    public top(top: number): this {\n        this.query.set(\"$top\", top.toString());\n        return this;\n    }\n\n    /**\n     * Skips a set number of items in the return set\n     *\n     * @param num Number of items to skip\n     */\n    public skip(num: number): this {\n        this.query.set(\"$skip\", num.toString());\n        return this;\n    }\n\n    /**\n     * \tTo request second and subsequent pages of Graph data\n     */\n    public skipToken(token: string): this {\n        this.query.set(\"$skiptoken\", token);\n        return this;\n    }\n\n    /**\n     * \tRetrieves the total count of matching resources\n     */\n    public get count(): this {\n        this.query.set(\"$count\", \"true\");\n        return this;\n    }\n}\n\nexport interface IGraphQueryableCollection<GetType = any[]> extends IInvokable, IGraphQueryable<GetType> {\n\n    /**\n     * \tRetrieves the total count of matching resources\n     */\n    count: this;\n\n    /**\n     *\n     * @param filter The string representing the filter query\n     */\n    filter(filter: string): this;\n\n    /**\n     * Orders based on the supplied fields\n     *\n     * @param orderby The name of the field on which to sort\n     * @param ascending If false DESC is appended, otherwise ASC (default)\n     */\n    orderBy(orderBy: string, ascending?: boolean): this;\n\n    /**\n     * Limits the query to only return the specified number of items\n     *\n     * @param top The query row limit\n     */\n    top(top: number): this;\n\n    /**\n     * Skips a set number of items in the return set\n     *\n     * @param num Number of items to skip\n     */\n    skip(num: number): this;\n\n    /**\n     * \tTo request second and subsequent pages of Graph data\n     */\n    skipToken(token: string): this;\n}\nexport interface _GraphQueryableCollection extends IInvokable { }\nexport const GraphQueryableCollection = graphInvokableFactory<IGraphQueryableCollection>(_GraphQueryableCollection);\n\nexport class _GraphQueryableSearchableCollection extends _GraphQueryableCollection implements IGraphQueryableSearchableCollection {\n\n    /**\n     * \tTo request second and subsequent pages of Graph data\n     */\n    public search(query: string): this {\n        this.query.set(\"$search\", query);\n        return this;\n    }\n}\n\nexport interface IGraphQueryableSearchableCollection<GetType = any> extends IInvokable, IGraphQueryable<GetType> {\n    search(query: string): this;\n}\nexport interface _GraphQueryableSearchableCollection extends IInvokable { }\nexport const GraphQueryableSearchableCollection = graphInvokableFactory<IGraphQueryableSearchableCollection>(_GraphQueryableSearchableCollection);\n\n\n/**\n * Represents an instance that can be selected\n *\n */\nexport class _GraphQueryableInstance<GetType = any> extends _GraphQueryable<GetType> { }\n\nexport interface IGraphQueryableInstance<GetType = any> extends IInvokable, IGraphQueryable<GetType> { }\nexport interface _GraphQueryableInstance extends IInvokable { }\nexport const GraphQueryableInstance = graphInvokableFactory<IGraphQueryableInstance>(_GraphQueryableInstance);\n","import { Batch, IODataBatchRequestInfo } from \"@pnp/odata\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\nimport { assign, jsS, isUrlAbsolute, hOP } from \"@pnp/common\";\nimport { GraphRuntimeConfig } from \"./graphlibconfig\";\nimport { GraphHttpClient } from \"./graphhttpclient\";\n\ninterface GraphBatchRequestFragment {\n    id: string;\n    method: string;\n    url: string;\n    headers?: string[][] | {\n        [key: string]: string;\n    };\n    body?: any;\n}\n\ninterface GraphBatchRequest {\n    requests: GraphBatchRequestFragment[];\n}\n\ninterface GraphBatchResponseFragment {\n    id: string;\n    status: number;\n    statusText?: string;\n    method: string;\n    url: string;\n    headers?: string[][] | {\n        [key: string]: string;\n    };\n    body?: any;\n}\n\ninterface IGraphBatchResponse {\n    error?: {\n        code: string;\n        innerError: { \"request-id\": string, date: string };\n        message: string;\n    };\n    responses: GraphBatchResponseFragment[];\n    nextLink?: string;\n}\n\nexport class GraphBatch extends Batch {\n\n    constructor(private batchUrl = \"https://graph.microsoft.com/v1.0/$batch\", private maxRequests = 20) {\n        super();\n    }\n\n    /**\n     * Urls come to the batch absolute, but the processor expects relative\n     * @param url Url to ensure is relative\n     */\n    private static makeUrlRelative(url: string): string {\n\n        if (!isUrlAbsolute(url)) {\n            // already not absolute, just give it back\n            return url;\n        }\n\n        let index = url.indexOf(\".com/v1.0/\");\n\n        if (index < 0) {\n\n            index = url.indexOf(\".com/beta/\");\n\n            if (index > -1) {\n\n                // beta url\n                return url.substr(index + 10);\n            }\n\n        } else {\n            // v1.0 url\n            return url.substr(index + 9);\n        }\n\n        // no idea\n        return url;\n    }\n\n    private static formatRequests(requests: IODataBatchRequestInfo[]): GraphBatchRequestFragment[] {\n\n        return requests.map((reqInfo, index) => {\n\n            let requestFragment: GraphBatchRequestFragment = {\n                id: `${++index}`,\n                method: reqInfo.method,\n                url: this.makeUrlRelative(reqInfo.url),\n            };\n\n            let headers = {};\n\n            // merge global config headers\n            if (GraphRuntimeConfig.headers !== undefined && GraphRuntimeConfig.headers !== null) {\n\n                headers = assign(headers, GraphRuntimeConfig.headers);\n            }\n\n            if (reqInfo.options !== undefined) {\n\n                // merge per request headers\n                if (reqInfo.options.headers !== undefined && reqInfo.options.headers !== null) {\n                    headers = assign(headers, reqInfo.options.headers);\n                }\n\n                // all non-get requests need their own content-type header\n                if (reqInfo.method !== \"GET\") {\n                    headers[\"Content-Type\"] = \"application/json\";\n                }\n\n                // add a request body\n                if (reqInfo.options.body !== undefined && reqInfo.options.body !== null) {\n\n                    // we need to parse the body which was previously turned into a string\n                    requestFragment = assign(requestFragment, {\n                        body: JSON.parse(reqInfo.options.body),\n                    });\n                }\n            }\n\n            requestFragment = assign(requestFragment, {\n                headers: headers,\n            });\n\n            return requestFragment;\n        });\n    }\n\n    private static parseResponse(requests: IODataBatchRequestInfo[], graphResponse: IGraphBatchResponse): Promise<{ nextLink: string, responses: Response[] }> {\n\n        return new Promise((resolve, reject) => {\n\n            // we need to see if we have an error and report that\n            if (hOP(graphResponse, \"error\")) {\n                return reject(Error(`Error Porcessing Batch: (${graphResponse.error.code}) ${graphResponse.error.message}`));\n            }\n\n            const parsedResponses: Response[] = new Array(requests.length).fill(null);\n\n            for (let i = 0; i < graphResponse.responses.length; ++i) {\n\n                const response = graphResponse.responses[i];\n                // we create the request id by adding 1 to the index, so we place the response by subtracting one to match\n                // the array of requests and make it easier to map them by index\n                const responseId = parseInt(response.id, 10) - 1;\n\n                if (response.status === 204) {\n\n                    parsedResponses[responseId] = new Response();\n                } else {\n\n                    parsedResponses[responseId] = new Response(JSON.stringify(response.body), response);\n                }\n            }\n\n            resolve({\n                nextLink: graphResponse.nextLink,\n                responses: parsedResponses,\n            });\n        });\n    }\n\n    protected executeImpl(): Promise<void> {\n\n        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Executing batch with ${this.requests.length} requests.`, LogLevel.Info);\n\n        if (this.requests.length < 1) {\n            Logger.write(`Resolving empty batch.`, LogLevel.Info);\n            return Promise.resolve();\n        }\n\n        const client = new GraphHttpClient();\n\n        // create a working copy of our requests\n        const requests = this.requests.slice();\n        let error = false;\n\n\n        return new Promise(async (resolve, reject) => {\n\n            // this is the root of our promise chain\n            while (requests.length > 0) {\n\n                const requestsChunk = requests.splice(0, this.maxRequests);\n\n                const batchRequest: GraphBatchRequest = {\n                    requests: GraphBatch.formatRequests(requestsChunk),\n                };\n\n                const batchOptions = {\n                    body: jsS(batchRequest),\n                    headers: {\n                        \"Accept\": \"application/json\",\n                        \"Content-Type\": \"application/json\",\n                    },\n                    method: \"POST\",\n                };\n\n                Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Sending batch request.`, LogLevel.Info);\n\n                await client.fetch(this.batchUrl, batchOptions)\n                    .then(r => r.json())\n                    .then((j) => GraphBatch.parseResponse(requestsChunk, j))\n                    .then((parsedResponse: { nextLink: string, responses: Response[] }) => {\n\n                        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Resolving batched requests.`, LogLevel.Info);\n\n                        parsedResponse.responses.reduce((chain, response, index) => {\n\n                            const request = requestsChunk[index];\n\n                            Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Resolving batched request ${request.method} ${request.url}.`, LogLevel.Verbose);\n\n                            return chain.then(_ => request.parser.parse(response).then(request.resolve).catch(request.reject));\n\n                        }, Promise.resolve());\n                    }).catch(e => {\n                        reject(e);\n                        error = true;\n                    });\n\n                if (error) {\n                    // do not continue processing on error, we can't know what the downstream effects are\n                    break;\n                }\n            }\n\n            if (!error) {\n                // if we didn't have an error go ahead and resolve the promise as successful\n                resolve();\n            }\n        });\n    }\n}\n","import { _GraphQueryable } from \"./graphqueryable\";\nimport {\n    setup as _setup,\n    GraphConfiguration,\n} from \"./graphlibconfig\";\nimport { GraphBatch } from \"./batch\";\n\nexport class GraphRest extends _GraphQueryable {\n\n    public createBatch(): GraphBatch {\n        return new GraphBatch();\n    }\n\n    public setup(config: GraphConfiguration) {\n        _setup(config);\n    }\n}\n\nexport let graph = new GraphRest(\"v1.0\");\n","import {\n    ISharePointQueryable,\n    _SharePointQueryableInstance,\n    _SharePointQueryableCollection,\n    spInvokableFactory,\n} from \"../sharepointqueryable\";\nimport { spPost } from \"../operations\";\nimport { odataUrlFrom } from \"../odata\";\nimport { extractWebUrl } from \"../utils/extractweburl\";\nimport { File, IFile } from \"../files/types\";\nimport { tag } from \"../telemetry\";\nimport { Web } from \"../webs\";\nimport \"../items\";\n\nexport class _AppCatalog extends _SharePointQueryableCollection {\n\n    constructor(baseUrl: string | ISharePointQueryable, path = \"_api/web/tenantappcatalog/AvailableApps\") {\n        super(extractWebUrl(typeof baseUrl === \"string\" ? baseUrl : baseUrl.toUrl()), path);\n    }\n\n    /**\n     * Get details of specific app from the app catalog\n     * @param id - Specify the guid of the app\n     */\n    public getAppById(id: string): IApp {\n        return tag.configure(App(this, `getById('${id}')`), \"ac.getAppById\");\n    }\n\n    /**\n     * Synchronize a solution to the Microsoft Teams App Catalog\n     * @param id - Specify the guid of the app\n     * @param useSharePointItemId (optional) - By default this REST call requires the SP Item id of the app, not the app id.\n     *                            PnPjs will try to fetch the item id by default, you can still use this parameter to pass your own item id in the first parameter \n     */\n    public async syncSolutionToTeams(id: string | number, useSharePointItemId = false): Promise<void> {\n\n        // This REST call requires that you refer the list item id of the solution in the app catalog site.\n        let appId = null;\n        const webUrl = extractWebUrl(this.toUrl());\n\n        if (useSharePointItemId) {\n\n            appId = id;\n        } else {\n\n            const web = Web(webUrl);\n            const listId = (await web.lists.select(\"Id\").filter(`EntityTypeName eq 'AppCatalog'`)())[0].Id;\n            const listItems = await web.lists.getById(listId).items.filter(`AppProductID eq '${id}'`).top(1)();\n\n            if (listItems && listItems.length > 0) {\n\n                appId = listItems[0].Id;\n            } else {\n\n                throw Error(`Did not find the app with id ${id} in the appcatalog.`);\n            }\n        }\n\n        const poster = tag.configure(AppCatalog(webUrl, `_api/web/tenantappcatalog/SyncSolutionToTeams(id=${appId})`), \"ac.syncSolutionToTeams\");\n\n        return await spPost(poster, {});\n    }\n\n    /**\n     * Uploads an app package. Not supported for batching\n     *\n     * @param filename Filename to create.\n     * @param content app package data (eg: the .app or .sppkg file).\n     * @param shouldOverWrite Should an app with the same name in the same location be overwritten? (default: true)\n     * @returns Promise<IAppAddResult>\n     */\n    public async add(filename: string, content: string | ArrayBuffer | Blob, shouldOverWrite = true): Promise<IAppAddResult> {\n\n        // you don't add to the availableapps collection\n        const adder = tag.configure(AppCatalog(extractWebUrl(this.toUrl()), `_api/web/tenantappcatalog/add(overwrite=${shouldOverWrite},url='${filename}')`), \"ac.add\");\n\n        const r = await spPost(adder, {\n            body: content, headers: {\n                \"binaryStringRequestBody\": \"true\",\n            },\n        });\n\n        return {\n            data: r,\n            file: File(odataUrlFrom(r)),\n        };\n    }\n}\nexport interface IAppCatalog extends _AppCatalog {}\nexport const AppCatalog = spInvokableFactory<IAppCatalog>(_AppCatalog);\n\nexport class _App extends _SharePointQueryableInstance {\n\n    /**\n     * This method deploys an app on the app catalog. It must be called in the context\n     * of the tenant app catalog web or it will fail.\n     * \n     * @param skipFeatureDeployment Deploy the app to the entire tenant\n     */\n    @tag(\"app.deploy\")\n    public deploy(skipFeatureDeployment = false): Promise<void> {\n        return this.do(`Deploy(${skipFeatureDeployment})`);\n    }\n\n    /**\n     * This method retracts a deployed app on the app catalog. It must be called in the context\n     * of the tenant app catalog web or it will fail.\n     */\n    @tag(\"app.retract\")\n    public retract(): Promise<void> {\n        return this.do(\"Retract\");\n    }\n\n    /**\n     * This method allows an app which is already deployed to be installed on a web\n     */\n    @tag(\"app.install\")\n    public install(): Promise<void> {\n        return this.do(\"Install\");\n    }\n\n    /**\n     * This method allows an app which is already installed to be uninstalled on a web\n     * Note: when you use the REST API to uninstall a solution package from the site, it is not relocated to the recycle bin\n     */\n    @tag(\"app.uninstall\")\n    public uninstall(): Promise<void> {\n        return this.do(\"Uninstall\");\n    }\n\n    /**\n     * This method allows an app which is already installed to be upgraded on a web\n     */\n    @tag(\"app.upgrade\")\n    public upgrade(): Promise<void> {\n        return this.do(\"Upgrade\");\n    }\n\n    /**\n     * This method removes an app from the app catalog. It must be called in the context\n     * of the tenant app catalog web or it will fail.\n     */\n    @tag(\"app.remove\")\n    public remove(): Promise<void> {\n        return this.do(\"Remove\");\n    }\n\n    private do(path: string): Promise<void> {\n        return spPost(this.clone(App, path));\n    }\n}\nexport interface IApp extends _App {}\nexport const App = spInvokableFactory<IApp>(_App);\n\n/**\n * Result object after adding an app\n */\nexport interface IAppAddResult {\n    /**\n     * Contains metadata of the added app\n     */\n    data: any;\n    /**\n     * A File instance to the item in SharePoint\n     */\n    file: IFile;\n}\n","import { _Web } from \"../webs/types\";\nimport { AppCatalog, IAppCatalog } from \"./types\";\n\ndeclare module \"../webs/types\" {\n    interface _Web {\n        getAppCatalog(url?: string | _Web): IAppCatalog;\n    }\n    interface IWeb {\n        /**\n         * Gets this web (default) or the web specifed by the optional string case\n         * as an IAppCatalog instance\n         * \n         * @param url [Optional] Url of the web to get (default: current web)\n         */\n        getAppCatalog(url?: string | _Web): IAppCatalog;\n    }\n}\n\n_Web.prototype.getAppCatalog = function (this: _Web, url?: string | _Web): IAppCatalog {\n    return AppCatalog(url || this);\n};\n","import { SPRest } from \"../rest\";\nimport { IWeb, Web } from \"../webs/types\";\n\nimport \"./web\";\nimport { SharePointQueryable } from \"../sharepointqueryable\";\n\nexport {\n    IAppAddResult,\n    IApp,\n    IAppCatalog,\n    App,\n    AppCatalog,\n} from \"./types\";\n\ndeclare module \"../rest\" {\n    interface SPRest {\n        getTenantAppCatalogWeb(): Promise<IWeb>;\n    }\n}\n\nSPRest.prototype.getTenantAppCatalogWeb = async function (this: SPRest): Promise<IWeb> {\n    const data: { CorporateCatalogUrl: string } = await SharePointQueryable(\"/\", \"_api/SP_TenantSettings_Current\")();\n    return Web(data.CorporateCatalogUrl);\n};\n","import { defaultPath } from \"../decorators\";\nimport { spPost } from \"../operations\";\nimport {\n    _SharePointQueryableInstance,\n    _SharePointQueryableCollection,\n    spInvokableFactory,\n    deleteableWithETag,\n    IDeleteableWithETag,\n} from \"../sharepointqueryable\";\nimport { TextParser, BlobParser, JSONParser, BufferParser, ODataParser, headers } from \"@pnp/odata\";\nimport { tag } from \"../telemetry\";\n\n@defaultPath(\"AttachmentFiles\")\nexport class _Attachments extends _SharePointQueryableCollection<IAttachmentInfo[]> {\n\n    /**\n    * Gets a Attachment File by filename\n    *\n    * @param name The name of the file, including extension.\n    */\n    public getByName(name: string): IAttachment {\n        const f = tag.configure(Attachment(this), \"ats.getByName\");\n        f.concat(`('${name}')`);\n        return f;\n    }\n\n    /**\n     * Adds a new attachment to the collection. Not supported for batching.\n     *\n     * @param name The name of the file, including extension.\n     * @param content The Base64 file content.\n     */\n    @tag(\"ats.add\")\n    public async add(name: string, content: string | Blob | ArrayBuffer): Promise<IAttachmentAddResult> {\n        const response = await spPost(this.clone(Attachments, `add(FileName='${name}')`, false), { body: content });\n        return {\n            data: response,\n            file: this.getByName(name),\n        };\n    }\n\n    /**\n     * Adds multiple new attachment to the collection. Not supported for batching.\n     *\n     * @param files The collection of files to add\n     */\n    @tag(\"ats.addMultiple\")\n    public async addMultiple(files: IAttachmentFileInfo[]): Promise<void> {\n\n        for (let i = 0; i < files.length; i++) {\n            await this.add(files[i].name, files[i].content);\n        }\n    }\n\n    /**\n     * Delete multiple attachments from the collection. Not supported for batching.\n     *\n     * @param files The collection of files to delete\n     */\n    @tag(\"ats.deleteMultiple\")\n    public async deleteMultiple(...files: string[]): Promise<void> {\n\n        for (let i = 0; i < files.length; i++) {\n            await this.getByName(files[i]).delete();\n        }\n    }\n\n    /**\n     * Delete multiple attachments from the collection and send to recycle bin. Not supported for batching.\n     *\n     * @param files The collection of files to be deleted and sent to recycle bin\n     */\n    @tag(\"ats.recycleMultiple\")\n    public async recycleMultiple(...files: string[]): Promise<void> {\n        for (let i = 0; i < files.length; i++) {\n            await this.getByName(files[i]).recycle();\n        }\n    }\n}\nexport interface IAttachments extends _Attachments { }\nexport const Attachments = spInvokableFactory<IAttachments>(_Attachments);\n\nexport class _Attachment extends _SharePointQueryableInstance<IAttachmentInfo> {\n\n    public delete = deleteableWithETag(\"at\");\n\n    /**\n     * Gets the contents of the file as text\n     *\n     */\n    @tag(\"at.getText\")\n    public getText(): Promise<string> {\n\n        return this.getParsed(new TextParser());\n    }\n\n    /**\n     * Gets the contents of the file as a blob, does not work in Node.js\n     *\n     */\n    @tag(\"at.getBlob\")\n    public getBlob(): Promise<Blob> {\n\n        return this.getParsed(new BlobParser());\n    }\n\n    /**\n     * Gets the contents of a file as an ArrayBuffer, works in Node.js\n     */\n    @tag(\"at.getBuffer\")\n    public getBuffer(): Promise<ArrayBuffer> {\n\n        return this.getParsed(new BufferParser());\n    }\n\n    /**\n     * Gets the contents of a file as an ArrayBuffer, works in Node.js\n     */\n    @tag(\"at.getJSON\")\n    public getJSON(): Promise<any> {\n\n        return this.getParsed(new JSONParser());\n    }\n\n    /**\n     * Sets the content of a file. Not supported for batching\n     *\n     * @param content The value to set for the file contents\n     */\n    @tag(\"at.setContent\")\n    public async setContent(content: string | ArrayBuffer | Blob): Promise<IAttachment> {\n\n        await spPost(this.clone(Attachment, \"$value\", false), headers({ \"X-HTTP-Method\": \"PUT\" }, {\n            body: content,\n        }));\n\n        return Attachment(this);\n    }\n\n    /**\n     * Delete this attachment file and send it to recycle bin\n     *\n     * @param eTag Value used in the IF-Match header, by default \"*\"\n     */\n    @tag(\"at.recycle\")\n    public recycle(eTag = \"*\"): Promise<void> {\n\n        return spPost(this.clone(Attachment, \"recycleObject\"), headers({\n            \"IF-Match\": eTag,\n            \"X-HTTP-Method\": \"DELETE\",\n        }));\n    }\n\n    private getParsed<T>(parser: ODataParser<T>): Promise<T> {\n\n        return this.clone(Attachment, \"$value\", false).usingParser(parser)();\n    }\n}\nexport interface IAttachment extends _Attachment, IDeleteableWithETag { }\nexport const Attachment = spInvokableFactory<IAttachment>(_Attachment);\n\nexport interface IAttachmentAddResult {\n    file: IAttachment;\n    data: IAttachmentFileInfo;\n}\n\nexport interface IAttachmentFileInfo {\n    name: string;\n    content: string | Blob | ArrayBuffer;\n}\n\nexport interface IAttachmentInfo {\n    FileName: string;\n    FileNameAsPath: {\n        DecodedUrl: string;\n    };\n    ServerRelativePath: {\n        DecodedUrl: string;\n    };\n    ServerRelativeUrl: string;\n}\n","import { hOP } from \"@pnp/common\";\n\n/**\n * Gets the next order value 1 based for the provided collection\n * \n * @param collection Collection of orderable things\n */\nexport function getNextOrder(collection: { order: number }[]): number {\n    return collection.length < 1 ? 1 : (Math.max.apply(null, collection.map(i => i.order)) + 1);\n}\n\n/**\n * Normalizes the order value for all the sections, columns, and controls to be 1 based and stepped (1, 2, 3...)\n * \n * @param collection The collection to normalize\n */\nexport function reindex(collection: { order: number, columns?: { order: number }[], controls?: { order: number }[] }[]): void {\n\n    for (let i = 0; i < collection.length; i++) {\n        collection[i].order = i + 1;\n        if (hOP(collection[i], \"columns\")) {\n            reindex(collection[i].columns);\n        } else if (hOP(collection[i], \"controls\")) {\n            reindex(collection[i].controls);\n        }\n    }\n}\n","import { addProp } from \"@pnp/odata\";\nimport { _Item } from \"../items/types\";\nimport { Attachments, IAttachments } from \"./types\";\n\ndeclare module \"../items/types\" {\n    interface _Item {\n        readonly attachmentFiles: IAttachments;\n    }\n    interface IItem {\n        /**\n         * Read the attachment files data for an item\n         */\n        readonly attachmentFiles: IAttachments;\n    }\n}\n\naddProp(_Item, \"attachmentFiles\", Attachments);\n","import { _Web } from \"../webs/types\";\nimport { File, IFile } from \"./types\";\nimport { escapeQueryStrValue } from \"../utils/escapeQueryStrValue\";\n\ndeclare module \"../webs/types\" {\n    interface _Web {\n        getFileByServerRelativeUrl(fileRelativeUrl: string): IFile;\n        getFileByServerRelativePath(fileRelativeUrl: string): IFile;\n        getFileById(uniqueId: string): IFile;\n        getFileByUrl(fileUrl: string): IFile;\n    }\n    interface IWeb {\n\n        /**\n         * Gets a file by server relative url\n         *\n         * @param fileRelativeUrl The server relative path to the file (including /sites/ if applicable)\n         */\n        getFileByServerRelativeUrl(fileRelativeUrl: string): IFile;\n\n        /**\n         * Gets a file by server relative url if your file name contains # and % characters\n         *\n         * @param fileRelativeUrl The server relative path to the file (including /sites/ if applicable)\n         */\n        getFileByServerRelativePath(fileRelativeUrl: string): IFile;\n\n        /**\n         * Gets a file by id\n         *\n         * @param uniqueId The UniqueId of the file\n         */\n        getFileById(uniqueId: string): IFile;\n\n        /**\n         * Gets a file from a sharing link or absolute url\n         * \n         * @param fileUrl Absolute url of the file to get\n         */\n        getFileByUrl(fileUrl: string): IFile;\n    }\n}\n\n_Web.prototype.getFileByServerRelativeUrl = function (this: _Web, fileRelativeUrl: string): IFile {\n    return File(this, `getFileByServerRelativeUrl('${escapeQueryStrValue(fileRelativeUrl)}')`);\n};\n\n_Web.prototype.getFileByServerRelativePath = function (this: _Web, fileRelativeUrl: string): IFile {\n    return File(this, `getFileByServerRelativePath(decodedUrl='${escapeQueryStrValue(fileRelativeUrl)}')`);\n};\n\n_Web.prototype.getFileById = function (this: _Web, uniqueId: string): IFile {\n    return File(this, `getFileById('${uniqueId}')`);\n};\n\n_Web.prototype.getFileByUrl = function (this: _Web, fileUrl: string): IFile {\n    return File(this, `getFileByUrl('!@p1::${escapeQueryStrValue(fileUrl)}')`);\n};\n","import { defaultPath } from \"../decorators\";\nimport {\n    _SharePointQueryableInstance,\n    _SharePointQueryableCollection,\n    spInvokableFactory,\n} from \"../sharepointqueryable\";\nimport { assign } from \"@pnp/common\";\nimport { odataUrlFrom } from \"../odata\";\nimport { metadata } from \"../utils/metadata\";\nimport { body } from \"@pnp/odata\";\nimport { spPost } from \"../operations\";\nimport { tag } from \"../telemetry\";\n\n@defaultPath(\"comments\")\nexport class _Comments extends _SharePointQueryableCollection<ICommentInfo[]> {\n\n    /**\n     * Adds a new comment to this collection\n     * \n     * @param info Comment information to add\n     */\n    @tag(\"coms.add\")\n    public async add(info: string | ICommentInfo): Promise<IComment & ICommentInfo> {\n\n        if (typeof info === \"string\") {\n            info = <ICommentInfo>{ text: info };\n        }\n\n        const postBody = body(assign(metadata(\"Microsoft.SharePoint.Comments.comment\"), info));\n\n        const d = await spPost(this.clone(Comments, null), postBody);\n\n        return assign(this.getById(d.id), d);\n    }\n\n    /**\n     * Gets a comment by id\n     * \n     * @param id Id of the comment to load\n     */\n    public getById(id: string | number): IComment {\n        return tag.configure(Comment(this).concat(`(${id})`), \"coms.getById\");\n    }\n\n    /**\n     * Deletes all the comments in this collection\n     */\n    public clear(): Promise<boolean> {\n        return spPost<boolean>(tag.configure(this.clone(Comments, \"DeleteAll\"), \"coms.clear\"));\n    }\n}\nexport interface IComments extends _Comments {}\nexport const Comments = spInvokableFactory<IComments>(_Comments);\n\nexport class _Comment extends _SharePointQueryableInstance<ICommentInfo> {\n\n    /**\n     * A comment's replies\n     */\n    public get replies(): IReplies {\n        return tag.configure(Replies(this), \"com.replies\");\n    }\n\n    /**\n     * Likes the comment as the current user\n     */\n    @tag(\"com.like\")\n    public like(): Promise<void> {\n        return spPost(this.clone(Comment, \"Like\"));\n    }\n\n    /**\n     * Unlikes the comment as the current user\n     */\n    @tag(\"com.unlike\")\n    public unlike(): Promise<void> {\n        return spPost(this.clone(Comment, \"Unlike\"));\n    }\n\n    /**\n     * Deletes this comment\n     */\n    @tag(\"com.delete\")\n    public delete(): Promise<void> {\n        return spPost(this.clone(Comment, \"DeleteComment\"));\n    }\n}\nexport interface IComment extends _Comment {}\nexport const Comment = spInvokableFactory<IComment>(_Comment);\n\n@defaultPath(\"replies\")\nexport class _Replies extends _SharePointQueryableCollection<ICommentInfo[]> {\n\n    /**\n     * Adds a new reply to this collection\n     * \n     * @param info Comment information to add\n     */\n    @tag(\"reps.add\")\n    public async add(info: string | ICommentInfo): Promise<IComment & ICommentInfo> {\n\n        if (typeof info === \"string\") {\n            info = <ICommentInfo>{ text: info };\n        }\n\n        const postBody = body(assign(metadata(\"Microsoft.SharePoint.Comments.comment\"), info));\n\n        const d = await spPost(this.clone(Replies, null), postBody);\n\n        return assign(Comment(odataUrlFrom(d)), d);\n    }\n}\nexport interface IReplies extends _Replies {}\nexport const Replies = spInvokableFactory<IReplies>(_Replies);\n\n/**\n * Defines the information for a comment author\n */\nexport interface ICommentAuthorData {\n    email: string;\n    id: number;\n    isActive: boolean;\n    isExternal: boolean;\n    jobTitle: string | null;\n    loginName: string;\n    name: string;\n    principalType: number;\n    userId: any | null;\n}\n\n/**\n * Defines the information for a comment\n */\nexport interface ICommentInfo {\n    author: ICommentAuthorData;\n    createdDate: string;\n    id: string;\n    isLikedByUser: boolean;\n    isReply: boolean;\n    itemId: number;\n    likeCount: number;\n    listId: string;\n    mentions: {\n        loginName: string;\n        email: string;\n        name: string;\n    } | null;\n    parentId: string;\n    replyCount: number;\n    text: string;\n}\n\nexport interface ILikeData {\n    name: string;\n    loginName: string;\n    id: number;\n    email: string;\n    creationDate: string;\n}\n\nexport interface ILikedByInformation {\n    likedBy: {\n        creationDate: string;\n        email: string;\n        id: number;\n        loginName: string;\n        name: string;\n    }[];\n    isLikedByUser: boolean;\n    likeCount: number;\n}\n","import { invokableFactory, body, headers, IQueryable } from \"@pnp/odata\";\nimport { ITypedHash, assign, getGUID, hOP, stringIsNullOrEmpty, objectDefinedNotNull, combine, isUrlAbsolute, isArray } from \"@pnp/common\";\nimport { IFile } from \"../files/types\";\nimport { Item, IItem } from \"../items/types\";\nimport { SharePointQueryable, _SharePointQueryable, ISharePointQueryable, SharePointQueryableCollection } from \"../sharepointqueryable\";\nimport { metadata } from \"../utils/metadata\";\nimport { List } from \"../lists/types\";\nimport { odataUrlFrom } from \"../odata\";\nimport { Web, IWeb } from \"../webs/types\";\nimport { extractWebUrl } from \"../utils/extractweburl\";\nimport { Site } from \"../sites/types\";\nimport { spPost } from \"../operations\";\nimport { getNextOrder, reindex } from \"./funcs\";\nimport \"../files/web\";\nimport \"../comments/item\";\nimport { tag } from \"../telemetry\";\n\n/**\n * Page promotion state\n */\nexport const enum PromotedState {\n    /**\n     * Regular client side page\n     */\n    NotPromoted = 0,\n    /**\n     * Page that will be promoted as news article after publishing\n     */\n    PromoteOnPublish = 1,\n    /**\n     * Page that is promoted as news article\n     */\n    Promoted = 2,\n}\n\n/**\n * Type describing the available page layout types for client side \"modern\" pages\n */\nexport type ClientsidePageLayoutType = \"Article\" | \"Home\" | \"SingleWebPartAppPage\" | \"RepostPage\";\n\n/**\n * Column size factor. Max value is 12 (= one column), other options are 8,6,4 or 0\n */\nexport type CanvasColumnFactor = 0 | 2 | 4 | 6 | 8 | 12;\n\nfunction initFrom(o: ISharePointQueryable, url: string): IClientsidePage {\n    return ClientsidePage(extractWebUrl(o.toUrl()), url).configureFrom(o);\n}\n\n/** \n * Represents the data and methods associated with client side \"modern\" pages\n */\nexport class _ClientsidePage extends _SharePointQueryable implements IClientsidePage {\n\n    private _pageSettings: IClientsidePageSettingsSlice;\n    private _layoutPart: ILayoutPartsContent;\n    private _bannerImageDirty: boolean;\n\n    /**\n     * PLEASE DON'T USE THIS CONSTRUCTOR DIRECTLY, thank you 🐇\n     */\n    constructor(\n        baseUrl: string | ISharePointQueryable,\n        path?: string,\n        protected json?: Partial<IPageData>,\n        noInit = false,\n        public sections: CanvasSection[] = [],\n        public commentsDisabled = false) {\n\n        super(baseUrl, path);\n\n        this._bannerImageDirty = false;\n\n        // ensure we have a good url to build on for the pages api\n        if (typeof baseUrl === \"string\") {\n            this.data.parentUrl = \"\";\n            this.data.url = combine(extractWebUrl(baseUrl), path);\n        } else {\n            this.assign(initFrom(baseUrl, null), path);\n        }\n\n        // set a default page settings slice\n        this._pageSettings = { controlType: 0, pageSettingsSlice: { isDefaultDescription: true, isDefaultThumbnail: true } };\n\n        // set a default layout part\n        this._layoutPart = _ClientsidePage.getDefaultLayoutPart();\n\n        if (typeof json !== \"undefined\" && !noInit) {\n            this.fromJSON(json);\n        }\n    }\n\n    private static getDefaultLayoutPart(): ILayoutPartsContent {\n        return {\n            dataVersion: \"1.4\",\n            description: \"Title Region Description\",\n            id: \"cbe7b0a9-3504-44dd-a3a3-0e5cacd07788\",\n            instanceId: \"cbe7b0a9-3504-44dd-a3a3-0e5cacd07788\",\n            properties: {\n                authorByline: [],\n                authors: [],\n                layoutType: \"FullWidthImage\",\n                showPublishDate: false,\n                showTopicHeader: false,\n                textAlignment: \"Left\",\n                title: \"\",\n                topicHeader: \"\",\n            },\n            serverProcessedContent: { htmlStrings: {}, searchablePlainTexts: {}, imageSources: {}, links: {} },\n            title: \"Title area\",\n        };\n    }\n\n    public get pageLayout(): ClientsidePageLayoutType {\n        return this.json.PageLayoutType;\n    }\n\n    public set pageLayout(value: ClientsidePageLayoutType) {\n        this.json.PageLayoutType = value;\n    }\n\n    public get bannerImageUrl(): string {\n        return this.json.BannerImageUrl;\n    }\n\n    public set bannerImageUrl(value: string) {\n        this.json.BannerImageUrl = value;\n        this._bannerImageDirty = true;\n    }\n\n    public get topicHeader(): string {\n        return objectDefinedNotNull(this.json.TopicHeader) ? this.json.TopicHeader : \"\";\n    }\n\n    public set topicHeader(value: string) {\n        this.json.TopicHeader = value;\n        this._layoutPart.properties.topicHeader = value;\n        if (stringIsNullOrEmpty(value)) {\n            this.showTopicHeader = false;\n        }\n    }\n\n    public get title(): string {\n        return this._layoutPart.properties.title;\n    }\n\n    public set title(value: string) {\n        this.json.Title = value;\n        this._layoutPart.properties.title = value;\n    }\n\n    public get layoutType(): LayoutType {\n        return this._layoutPart.properties.layoutType;\n    }\n\n    public set layoutType(value: LayoutType) {\n        this._layoutPart.properties.layoutType = value;\n    }\n\n    public get headerTextAlignment(): TextAlignment {\n        return this._layoutPart.properties.textAlignment;\n    }\n\n    public set headerTextAlignment(value: TextAlignment) {\n        this._layoutPart.properties.textAlignment = value;\n    }\n\n    public get showTopicHeader(): boolean {\n        return this._layoutPart.properties.showTopicHeader;\n    }\n\n    public set showTopicHeader(value: boolean) {\n        this._layoutPart.properties.showTopicHeader = value;\n    }\n\n    public get showPublishDate(): boolean {\n        return this._layoutPart.properties.showPublishDate;\n    }\n\n    public set showPublishDate(value: boolean) {\n        this._layoutPart.properties.showPublishDate = value;\n    }\n\n    public get hasVerticalSection(): boolean {\n        return this.sections.findIndex(s => s.layoutIndex === 2) > -1;\n    }\n\n    public get authorByLine(): string | null {\n        if (isArray(this.json.AuthorByline) && this.json.AuthorByline.length > 0) {\n            return this.json.AuthorByline[0];\n        }\n\n        return null;\n    }\n\n    public get verticalSection(): CanvasSection | null {\n        if (this.hasVerticalSection) {\n            return this.addVerticalSection();\n        }\n        return null;\n    }\n\n    /**\n     * Add a section to this page\n     */\n    public addSection(): CanvasSection {\n        const section = new CanvasSection(this, getNextOrder(this.sections), 1);\n        this.sections.push(section);\n        return section;\n    }\n\n    /**\n     * Add a section to this page\n     */\n    public addVerticalSection(): CanvasSection {\n\n        // we can only have one vertical section so we find it if it exists\n        const sectionIndex = this.sections.findIndex(s => s.layoutIndex === 2);\n        if (sectionIndex > -1) {\n            return this.sections[sectionIndex];\n        }\n\n        const section = new CanvasSection(this, getNextOrder(this.sections), 2);\n        this.sections.push(section);\n        return section;\n    }\n\n    /**\n     * Loads this instance from the appropriate JSON data\n     * \n     * @param pageData JSON data to load (replaces any existing data)\n     */\n    public fromJSON(pageData: Partial<IPageData>): this {\n\n        this.json = pageData;\n\n        const canvasControls: IClientsideControlBaseData[] = JSON.parse(pageData.CanvasContent1);\n\n        const layouts = <ILayoutPartsContent[]>JSON.parse(pageData.LayoutWebpartsContent);\n        if (layouts && layouts.length > 0) {\n            this._layoutPart = layouts[0];\n        }\n\n        this.setControls(canvasControls);\n\n        return this;\n    }\n\n    /**\n     * Loads this page's content from the server\n     */\n    @tag(\"csp.load\")\n    public async load(): Promise<IClientsidePage> {\n\n        const item = await this.getItem<{ Id: number, CommentsDisabled: boolean }>(\"Id\", \"CommentsDisabled\");\n        const pageData = await SharePointQueryable(this, `_api/sitepages/pages(${item.Id})`)<IPageData>();\n        this.commentsDisabled = item.CommentsDisabled;\n        return this.fromJSON(pageData);\n    }\n\n    /**\n     * Persists the content changes (sections, columns, and controls) [does not work with batching]\n     * \n     * @param publish If true the page is published, if false the changes are persisted to SharePoint but not published [Default: true]\n     */\n    @tag(\"csp.save\")\n    public async save(publish = true): Promise<boolean> {\n\n        if (this.json.Id === null) {\n            throw Error(\"The id for this page is null. If you want to create a new page, please use ClientSidePage.Create\");\n        }\n\n        if (this._bannerImageDirty) {\n\n            // we have to do these gymnastics to set the banner image url\n            let origImgUrl = this.json.BannerImageUrl;\n\n            if (isUrlAbsolute(origImgUrl)) {\n                // do our best to make this a server relative url by removing the x.sharepoint.com part\n                origImgUrl = origImgUrl.replace(/^https?:\\/\\/[a-z0-9\\.]*?\\.[a-z]{2,3}\\//i, \"/\");\n            }\n\n            const site = Site(extractWebUrl(this.toUrl()));\n            const web = Web(extractWebUrl(this.toUrl()));\n            const imgFile = web.getFileByServerRelativePath(origImgUrl);\n\n            let siteId = \"\";\n            let webId = \"\";\n            let imgId = \"\";\n            let listId = \"\";\n            let webUrl = \"\";\n\n            const batch = web.createBatch();\n\n            site.select(\"Id\", \"Url\").inBatch(batch)().then((r1: { Id: string }) => siteId = r1.Id);\n            web.select(\"Id\", \"Url\").inBatch(batch)().then((r2: { Id: string, Url: string }) => { webId = r2.Id; webUrl = r2.Url; });\n            imgFile.listItemAllFields.select(\"UniqueId\", \"ParentList/Id\").expand(\"ParentList\").inBatch(batch)()\n                .then((r3: { UniqueId: string, ParentList: { Id: string } }) => { imgId = r3.UniqueId; listId = r3.ParentList.Id; });\n\n            // we know the .then calls above will run before execute resolves, ensuring the vars are set\n            await batch.execute();\n\n            const f = SharePointQueryable(webUrl, \"_layouts/15/getpreview.ashx\");\n            f.query.set(\"guidSite\", `${siteId}`);\n            f.query.set(\"guidWeb\", `${webId}`);\n            f.query.set(\"guidFile\", `${imgId}`);\n            this.bannerImageUrl = f.toUrlAndQuery();\n\n            if (!objectDefinedNotNull(this._layoutPart.serverProcessedContent)) {\n                this._layoutPart.serverProcessedContent = <any>{};\n            }\n\n            this._layoutPart.serverProcessedContent.imageSources = { imageSource: origImgUrl };\n\n            if (!objectDefinedNotNull(this._layoutPart.serverProcessedContent.customMetadata)) {\n                this._layoutPart.serverProcessedContent.customMetadata = <any>{};\n            }\n\n            this._layoutPart.serverProcessedContent.customMetadata.imageSource = {\n                listId,\n                siteId,\n                uniqueId: imgId,\n                webId,\n            };\n            this._layoutPart.properties.webId = webId;\n            this._layoutPart.properties.siteId = siteId;\n            this._layoutPart.properties.listId = listId;\n            this._layoutPart.properties.uniqueId = imgId;\n        }\n\n        // we try and check out the page for the user\n        if (!this.json.IsPageCheckedOutToCurrentUser) {\n            await spPost(initFrom(this, `_api/sitepages/pages(${this.json.Id})/checkoutpage`));\n        }\n\n        const saveBody = Object.assign(metadata(\"SP.Publishing.SitePage\"), {\n            AuthorByline: this.json.AuthorByline || [],\n            BannerImageUrl: this.bannerImageUrl,\n            CanvasContent1: this.getCanvasContent1(),\n            LayoutWebpartsContent: this.getLayoutWebpartsContent(),\n            Title: this.title,\n            TopicHeader: this.topicHeader,\n        });\n\n        const updater = initFrom(this, `_api/sitepages/pages(${this.json.Id})/savepage`);\n        await spPost<boolean>(updater, headers({ \"if-match\": \"*\" }, body(saveBody)));\n\n        let r = true;\n\n        if (publish) {\n            r = await spPost(initFrom(this, `_api/sitepages/pages(${this.json.Id})/publish`));\n            if (r) {\n                this.json.IsPageCheckedOutToCurrentUser = false;\n            }\n        }\n\n        this._bannerImageDirty = false;\n\n        return r;\n    }\n\n    /**\n     * Discards the checkout of this page\n     */\n    @tag(\"csp.discardPageCheckout\")\n    public async discardPageCheckout(): Promise<void> {\n\n        if (this.json.Id === null) {\n            throw Error(\"The id for this page is null. If you want to create a new page, please use ClientSidePage.Create\");\n        }\n\n        const d = await spPost(initFrom(this, `_api/sitepages/pages(${this.json.Id})/discardPage`), body(metadata(\"SP.Publishing.SitePage\")));\n\n        this.fromJSON(d);\n    }\n\n    /**\n     * Promotes this page as a news item\n     */\n    @tag(\"csp.promoteToNews\")\n    public async promoteToNews(): Promise<boolean> {\n        return this.promoteNewsImpl(\"promoteToNews\");\n    }\n\n    // API is currently broken on server side\n    // public async demoteFromNews(): Promise<boolean> {\n    //     return this.promoteNewsImpl(\"demoteFromNews\");\n    // }\n\n    /**\n     * Finds a control by the specified instance id\n     *\n     * @param id Instance id of the control to find\n     */\n    public findControlById<T extends ColumnControl<any> = ColumnControl<any>>(id: string): T {\n        return this.findControl((c) => c.id === id);\n    }\n\n    /**\n     * Finds a control within this page's control tree using the supplied predicate\n     *\n     * @param predicate Takes a control and returns true or false, if true that control is returned by findControl\n     */\n    public findControl<T extends ColumnControl<any> = ColumnControl<any>>(predicate: (c: ColumnControl<any>) => boolean): T {\n        // check all sections\n        for (let i = 0; i < this.sections.length; i++) {\n            // check all columns\n            for (let j = 0; j < this.sections[i].columns.length; j++) {\n                // check all controls\n                for (let k = 0; k < this.sections[i].columns[j].controls.length; k++) {\n                    // check to see if the predicate likes this control\n                    if (predicate(this.sections[i].columns[j].controls[k])) {\n                        return <T>this.sections[i].columns[j].controls[k];\n                    }\n                }\n            }\n        }\n\n        // we found nothing so give nothing back\n        return null;\n    }\n\n    /**\n     * Creates a copy of this page\n     * \n     * @param web The web where we will create the copy\n     * @param pageName The file name of the new page\n     * @param title The title of the new page\n     * @param publish If true the page will be published\n     */\n    @tag(\"csp.copy\")\n    public async copy(web: IWeb, pageName: string, title: string, publish = true, promotedState?: PromotedState): Promise<IClientsidePage> {\n\n        const page = await CreateClientsidePage(web, pageName, title, this.pageLayout, promotedState);\n\n        // we know the method is on the class - but it is protected so not part of the interface\n        (<any>page).setControls(this.getControls());\n\n        await page.save(publish);\n\n        return page;\n    }\n\n    /**\n     * Sets the modern page banner image\n     * \n     * @param url Url of the image to display\n     * @param altText Alt text to describe the image\n     * @param bannerProps Additional properties to control display of the banner\n     */\n    public setBannerImage(url: string, props?: {\n        altText?: string;\n        imageSourceType?: number;\n        translateX?: number;\n        translateY?: number;\n    }): void {\n\n        this.bannerImageUrl = url;\n        this._layoutPart.properties.imageSourceType = 2; // this seems to always be true, so default?\n\n        if (objectDefinedNotNull(props)) {\n            if (hOP(props, \"translateX\")) {\n                this._layoutPart.properties.translateX = props.translateX;\n            }\n            if (hOP(props, \"translateY\")) {\n                this._layoutPart.properties.translateY = props.translateY;\n            }\n            if (hOP(props, \"imageSourceType\")) {\n                this._layoutPart.properties.imageSourceType = props.imageSourceType;\n            }\n            if (hOP(props, \"altText\")) {\n                this._layoutPart.properties.altText = props.altText;\n            }\n        }\n    }\n\n    /**\n     * Sets the authors for this page from the supplied list of user integer ids\n     * \n     * @param authorId The integer id of the user to set as the author\n     */\n    public async setAuthorById(authorId: number): Promise<void> {\n\n        // get logins and send to loginname method?\n        const userLoginData = await SharePointQueryableCollection(extractWebUrl(this.toUrl()), \"/_api/web/siteusers\")\n            .configureFrom(this)\n            .filter(`Id eq ${authorId}`)\n            .select(\"LoginName\")<{ LoginName: string }[]>();\n\n        if (userLoginData.length < 1) {\n            throw Error(`Could not find user with id ${authorId}.`);\n        }\n\n        return this.setAuthorByLoginName(userLoginData[0].LoginName);\n    }\n\n    /**\n     * Sets the authors for this page from the supplied list of user integer ids\n     * \n     * @param authorLoginName The login name of the user (ex: i:0#.f|membership|name@tenant.com)\n     */\n    public async setAuthorByLoginName(authorLoginName: string): Promise<void> {\n\n        // get logins and send to loginname method?\n        const userLoginData = await SharePointQueryableCollection(extractWebUrl(this.toUrl()), \"/_api/web/siteusers\")\n            .configureFrom(this)\n            .filter(`LoginName eq '${encodeURIComponent(authorLoginName)}'`)\n            .select(\"UserPrincipalName\", \"Title\")<{ UserPrincipalName: string, Title: string }[]>();\n\n        if (userLoginData.length < 1) {\n            throw Error(`Could not find user with login name '${authorLoginName}'.`);\n        }\n\n        this.json.AuthorByline = [authorLoginName];\n        this._layoutPart.properties.authorByline = [authorLoginName];\n        this._layoutPart.properties.authors = [{\n            id: authorLoginName,\n            name: userLoginData[0].Title,\n            role: \"\",\n            upn: userLoginData[0].UserPrincipalName,\n        }];\n    }\n\n    /**\n     * Gets the list item associated with this clientside page\n     * \n     * @param selects Specific set of fields to include when getting the item\n     */\n    @tag(\"csp.getItem\")\n    public async getItem<T>(...selects: string[]): Promise<IItem & T> {\n\n        const initer = initFrom(this, \"/_api/lists/EnsureClientRenderedSitePagesLibrary\").select(\"EnableModeration\", \"EnableMinorVersions\", \"Id\");\n        const listData = await spPost<{ Id: string, \"odata.id\": string }>(initer);\n        const item = (List(listData[\"odata.id\"])).configureFrom(this).items.getById(this.json.Id);\n        const itemData: T = await item.select.apply(item, selects)();\n        return assign((Item(odataUrlFrom(itemData))).configureFrom(this), itemData);\n    }\n\n    /**\n     * Extends this queryable from the provided parent \n     * \n     * @param parent Parent queryable from which we will derive a base url\n     * @param path Additional path\n     */\n    protected assign(parent: IQueryable<any>, path?: string) {\n        this.data.parentUrl = parent.data.url;\n        this.data.url = combine(this.data.parentUrl, path || \"\");\n        this.configureFrom(parent);\n    }\n\n    protected getCanvasContent1(): string {\n        return JSON.stringify(this.getControls());\n    }\n\n    protected getLayoutWebpartsContent(): string {\n        if (this._layoutPart) {\n            return JSON.stringify([this._layoutPart]);\n        } else {\n            return JSON.stringify(null);\n        }\n    }\n\n    protected setControls(controls: IClientsideControlBaseData[]): void {\n\n        if (controls && controls.length) {\n\n            for (let i = 0; i < controls.length; i++) {\n\n                // if no control type is present this is a column which we give type 0 to let us process it\n                const controlType = hOP(controls[i], \"controlType\") ? controls[i].controlType : 0;\n\n                switch (controlType) {\n\n                    case 0:\n                        // empty canvas column or page settings\n                        if (hOP(controls[i], \"pageSettingsSlice\")) {\n                            this._pageSettings = <IClientsidePageSettingsSlice>controls[i];\n                        } else {\n                            // we have an empty column\n                            this.mergeColumnToTree(new CanvasColumn(<IClientsidePageColumnData>controls[i]));\n                        }\n                        break;\n                    case 3:\n                        const part = new ClientsideWebpart(<IClientsideWebPartData>controls[i]);\n                        this.mergePartToTree(part, part.data.position);\n                        break;\n                    case 4:\n                        const textData = <IClientsideTextData>controls[i];\n                        const text = new ClientsideText(textData.innerHTML, textData);\n                        this.mergePartToTree(text, text.data.position);\n                        break;\n                }\n            }\n\n            reindex(this.sections);\n        }\n    }\n\n    protected getControls(): IClientsideControlBaseData[] {\n\n        // reindex things\n        reindex(this.sections);\n\n        // rollup the control changes\n        const canvasData: any[] = [];\n\n        this.sections.forEach(section => {\n            section.columns.forEach(column => {\n                if (column.controls.length < 1) {\n                    // empty column\n                    canvasData.push({\n                        displayMode: column.data.displayMode,\n                        emphasis: this.getEmphasisObj(section.emphasis),\n                        position: column.data.position,\n                    });\n                } else {\n                    column.controls.forEach(control => {\n                        control.data.emphasis = this.getEmphasisObj(section.emphasis);\n                        canvasData.push(control.data);\n                    });\n                }\n            });\n        });\n\n        canvasData.push(this._pageSettings);\n\n        return canvasData;\n    }\n\n    private getEmphasisObj(value: 0 | 1 | 2 | 3): IClientControlEmphasis {\n        if (value < 1 || value > 3) {\n            return {};\n        }\n\n        return { zoneEmphasis: value };\n    }\n\n    private async promoteNewsImpl(method: string): Promise<boolean> {\n\n        if (this.json.Id === null) {\n            throw Error(\"The id for this page is null.\");\n        }\n\n        // per bug #858 if we promote before we have ever published the last published date will\n        // forever not be updated correctly in the modern news webpart. Because this will affect very\n        // few folks we just go ahead and publish for them here as that is likely what they intended.\n        if (stringIsNullOrEmpty(this.json.VersionInfo.LastVersionCreatedBy)) {\n            const lastPubData = new Date(this.json.VersionInfo.LastVersionCreated);\n            // no modern page should reasonable be published before the year 2000 :)\n            if (lastPubData.getFullYear() < 2000) {\n                await this.save(true);\n            }\n        }\n\n        return await spPost(initFrom(this, `_api/sitepages/pages(${this.json.Id})/${method}`), body(metadata(\"SP.Publishing.SitePage\")));\n    }\n\n    /**\n     * Merges the control into the tree of sections and columns for this page\n     * \n     * @param control The control to merge\n     */\n    private mergePartToTree(control: any, positionData: IPosition): void {\n\n        let column: CanvasColumn = null;\n        let sectionFactor: CanvasColumnFactor = 12;\n        let sectionIndex = 0;\n        let zoneIndex = 0;\n        let layoutIndex = 1;\n\n        // handle case where we don't have position data (shouldn't happen?)\n        if (positionData) {\n            if (hOP(positionData, \"zoneIndex\")) {\n                zoneIndex = positionData.zoneIndex;\n            }\n            if (hOP(positionData, \"sectionIndex\")) {\n                sectionIndex = positionData.sectionIndex;\n            }\n            if (hOP(positionData, \"sectionFactor\")) {\n                sectionFactor = positionData.sectionFactor;\n            }\n            if (hOP(positionData, \"layoutIndex\")) {\n                layoutIndex = positionData.layoutIndex;\n            }\n        }\n\n        const zoneEmphasis = control.data?.emphasis?.zoneEmphasis ?? 0;\n        const section = this.getOrCreateSection(zoneIndex, layoutIndex, zoneEmphasis);\n\n        const columns = section.columns.filter(c => c.order === sectionIndex);\n        if (columns.length < 1) {\n            column = section.addColumn(sectionFactor, layoutIndex);\n        } else {\n            column = columns[0];\n        }\n\n        control.column = column;\n        column.addControl(control);\n    }\n\n    /**\n     * Merges the supplied column into the tree\n     * \n     * @param column Column to merge\n     * @param position The position data for the column\n     */\n    private mergeColumnToTree(column: CanvasColumn): void {\n\n        const order = hOP(column.data, \"position\") && hOP(column.data.position, \"zoneIndex\") ? column.data.position.zoneIndex : 0;\n        const layoutIndex = hOP(column.data, \"position\") && hOP(column.data.position, \"layoutIndex\") ? column.data.position.layoutIndex : 1;\n        const section = this.getOrCreateSection(order, layoutIndex, column.data.emphasis.zoneEmphasis || 0);\n        column.section = section;\n        section.columns.push(column);\n    }\n\n    /**\n     * Handle the logic to get or create a section based on the supplied order and layoutIndex\n     * \n     * @param order Section order\n     * @param layoutIndex Layout Index (1 === normal, 2 === vertical section)\n     * @param emphasis The section emphasis\n     */\n    private getOrCreateSection(order: number, layoutIndex: number, emphasis: 0 | 1 | 2 | 3): CanvasSection {\n\n        let section: CanvasSection = null;\n        const sections = this.sections.filter(s => s.order === order && s.layoutIndex === layoutIndex);\n\n        if (sections.length < 1) {\n            section = layoutIndex === 2 ? this.addVerticalSection() : this.addSection();\n            section.order = order;\n            section.emphasis = emphasis;\n        } else {\n            section = sections[0];\n        }\n\n        return section;\n    }\n}\nexport interface IClientsidePage extends _ClientsidePage { }\n\n/**\n * Invokable factory for IClientSidePage instances\n */\nconst ClientsidePage = (\n    baseUrl: string | ISharePointQueryable,\n    path?: string,\n    json?: Partial<IPageData>,\n    noInit = false,\n    sections: CanvasSection[] = [],\n    commentsDisabled = false): IClientsidePage => {\n\n    return invokableFactory<IClientsidePage>(_ClientsidePage)(baseUrl, path, json, noInit, sections, commentsDisabled);\n};\n\n/**\n * Loads a client side page from the supplied IFile instance\n * \n * @param file Source IFile instance\n */\nexport const ClientsidePageFromFile = async (file: IFile): Promise<IClientsidePage> => {\n\n    const item = await file.getItem<{ Id: number }>();\n    const page = ClientsidePage(extractWebUrl(file.toUrl()), \"\", { Id: item.Id }, true);\n    return page.configureFrom(file).load();\n};\n\n/**\n * Creates a new client side page\n * \n * @param web The web or list\n * @param pageName The name of the page (filename)\n * @param title The page's title\n * @param PageLayoutType Layout to use when creating the page\n */\nexport const CreateClientsidePage =\n    async (web: IWeb, pageName: string, title: string, PageLayoutType: ClientsidePageLayoutType = \"Article\", promotedState: PromotedState = 0): Promise<IClientsidePage> => {\n\n        // patched because previously we used the full page name with the .aspx at the end\n        // this allows folk's existing code to work after the re-write to the new API\n        pageName = pageName.replace(/\\.aspx$/i, \"\");\n\n        // initialize the page, at this point a checked-out page with a junk filename will be created.\n        const pageInitData: IPageData = await spPost(initFrom(web, \"_api/sitepages/pages\"), body(Object.assign(metadata(\"SP.Publishing.SitePage\"), {\n            PageLayoutType,\n            PromotedState: promotedState,\n        })));\n\n        // now we can init our page with the save data\n        const newPage = ClientsidePage(web, \"\", pageInitData);\n        newPage.title = pageName;\n        await newPage.save(false);\n        newPage.title = title;\n        return newPage;\n    };\n\nexport class CanvasSection {\n\n    /**\n     * Used to track this object inside the collection at runtime\n     */\n    private _memId: string;\n\n    private _order: number;\n    private _layoutIndex: number;\n\n    constructor(protected page: IClientsidePage, order: number, layoutIndex: number, public columns: CanvasColumn[] = [], private _emphasis: 0 | 1 | 2 | 3 = 0) {\n        this._memId = getGUID();\n        this._order = order;\n        this._layoutIndex = layoutIndex;\n    }\n\n    public get order(): number {\n        return this._order;\n    }\n\n    public set order(value: number) {\n        this._order = value;\n        for (let i = 0; i < this.columns.length; i++) {\n            this.columns[i].data.position.zoneIndex = value;\n        }\n    }\n\n    public get layoutIndex(): number {\n        return this._layoutIndex;\n    }\n\n    public set layoutIndex(value: number) {\n        this._layoutIndex = value;\n        for (let i = 0; i < this.columns.length; i++) {\n            this.columns[i].data.position.layoutIndex = value;\n        }\n    }\n\n    /**\n     * Default column (this.columns[0]) for this section\n     */\n    public get defaultColumn(): CanvasColumn {\n\n        if (this.columns.length < 1) {\n            this.addColumn(12);\n        }\n\n        return this.columns[0];\n    }\n\n    /**\n     * Adds a new column to this section\n     */\n    public addColumn(factor: CanvasColumnFactor, layoutIndex = 1): CanvasColumn {\n        const column = new CanvasColumn();\n        column.section = this;\n        column.data.position.zoneIndex = this.order;\n        column.data.position.layoutIndex = layoutIndex;\n        column.data.position.sectionFactor = factor;\n        column.order = getNextOrder(this.columns);\n        this.columns.push(column);\n        return column;\n    }\n\n    /**\n     * Adds a control to the default column for this section\n     *\n     * @param control Control to add to the default column\n     */\n    public addControl(control: ColumnControl<any>): this {\n        this.defaultColumn.addControl(control);\n        return this;\n    }\n\n    public get emphasis(): 0 | 1 | 2 | 3 {\n        return this._emphasis;\n    }\n\n    public set emphasis(value: 0 | 1 | 2 | 3) {\n        this._emphasis = value;\n    }\n\n    /**\n     * Removes this section and all contained columns and controls from the collection\n     */\n    public remove(): void {\n        this.page.sections = this.page.sections.filter(section => section._memId !== this._memId);\n        reindex(this.page.sections);\n    }\n}\n\nexport class CanvasColumn {\n\n    public static Default: IClientsidePageColumnData = {\n        controlType: 0,\n        displayMode: 2,\n        emphasis: {},\n        position: {\n            layoutIndex: 1,\n            sectionFactor: 12,\n            sectionIndex: 1,\n            zoneIndex: 1,\n        },\n    };\n\n    private _section: CanvasSection | null;\n    private _memId: string;\n\n    constructor(protected json: IClientsidePageColumnData = JSON.parse(JSON.stringify(CanvasColumn.Default)), public controls: ColumnControl<any>[] = []) {\n        this._section = null;\n        this._memId = getGUID();\n    }\n\n    public get data(): IClientsidePageColumnData {\n        return this.json;\n    }\n\n    public get section(): CanvasSection {\n        return this._section;\n    }\n\n    public set section(section: CanvasSection) {\n        this._section = section;\n    }\n\n    public get order(): number {\n        return this.data.position.sectionIndex;\n    }\n\n    public set order(value: number) {\n        this.data.position.sectionIndex = value;\n        for (let i = 0; i < this.controls.length; i++) {\n            this.controls[i].data.position.zoneIndex = this.data.position.zoneIndex;\n            this.controls[i].data.position.layoutIndex = this.data.position.layoutIndex;\n            this.controls[i].data.position.sectionIndex = value;\n        }\n    }\n\n    public get factor(): CanvasColumnFactor {\n        return this.data.position.sectionFactor;\n    }\n\n    public set factor(value: CanvasColumnFactor) {\n        this.data.position.sectionFactor = value;\n    }\n\n    public addControl(control: ColumnControl<any>): this {\n        control.column = this;\n        this.controls.push(control);\n        return this;\n    }\n\n    public getControl<T extends ColumnControl<any>>(index: number): T {\n        return <T>this.controls[index];\n    }\n\n    public remove(): void {\n        this.section.columns = this.section.columns.filter(column => column._memId !== this._memId);\n        reindex(this.section.columns);\n    }\n}\n\nexport abstract class ColumnControl<T extends ICanvasControlBaseData> {\n\n    private _column: CanvasColumn | null;\n\n    constructor(protected json: T) { }\n\n    public abstract get order(): number;\n    public abstract set order(value: number);\n\n    public get id(): string {\n        return this.json.id;\n    }\n\n    public get data(): T {\n        return this.json;\n    }\n\n    public get column(): CanvasColumn | null {\n        return this._column;\n    }\n\n    public set column(value: CanvasColumn) {\n        this._column = value;\n        this.onColumnChange(this._column);\n    }\n\n    public remove(): void {\n        this.column.controls = this.column.controls.filter(control => control.id !== this.id);\n        reindex(this.column.controls);\n    }\n\n    protected setData(data: T) {\n        this.json = data;\n    }\n\n    protected abstract onColumnChange(col: CanvasColumn): void;\n}\n\nexport class ClientsideText extends ColumnControl<IClientsideTextData> {\n\n    public static Default: IClientsideTextData = {\n        addedFromPersistedData: false,\n        anchorComponentId: \"\",\n        controlType: 4,\n        displayMode: 2,\n        editorType: \"CKEditor\",\n        emphasis: {},\n        id: \"\",\n        innerHTML: \"\",\n        position: {\n            controlIndex: 1,\n            layoutIndex: 1,\n            sectionFactor: 12,\n            sectionIndex: 1,\n            zoneIndex: 1,\n        },\n    };\n\n    constructor(text: string, json: IClientsideTextData = JSON.parse(JSON.stringify(ClientsideText.Default))) {\n        if (stringIsNullOrEmpty(json.id)) {\n            json.id = getGUID();\n            json.anchorComponentId = json.id;\n        }\n        super(json);\n\n        this.text = text;\n    }\n\n    public get text(): string {\n        return this.data.innerHTML;\n    }\n\n    public set text(value: string) {\n        if (!value.startsWith(\"<p>\")) {\n            value = `<p>${value}</p>`;\n        }\n        this.data.innerHTML = value;\n    }\n\n    public get order(): number {\n        return this.data.position.controlIndex;\n    }\n\n    public set order(value: number) {\n        this.data.position.controlIndex = value;\n    }\n\n    protected onColumnChange(col: CanvasColumn): void {\n        this.data.position.sectionFactor = col.factor;\n        this.data.position.controlIndex = getNextOrder(col.controls);\n        this.data.position.zoneIndex = col.data.position.zoneIndex;\n        this.data.position.sectionIndex = col.order;\n        this.data.position.layoutIndex = col.data.position.layoutIndex;\n    }\n}\n\nexport class ClientsideWebpart extends ColumnControl<IClientsideWebPartData> {\n\n    public static Default: IClientsideWebPartData = {\n        addedFromPersistedData: false,\n        controlType: 3,\n        displayMode: 2,\n        emphasis: {},\n        id: null,\n        position: {\n            controlIndex: 1,\n            layoutIndex: 1,\n            sectionFactor: 12,\n            sectionIndex: 1,\n            zoneIndex: 1,\n        },\n        reservedHeight: 500,\n        reservedWidth: 500,\n        webPartData: null,\n        webPartId: null,\n    };\n\n    constructor(json: IClientsideWebPartData = JSON.parse(JSON.stringify(ClientsideWebpart.Default))) {\n        super(json);\n    }\n\n    public static fromComponentDef(definition: IClientsidePageComponent): ClientsideWebpart {\n        const part = new ClientsideWebpart();\n        part.import(definition);\n        return part;\n    }\n\n    public get title(): string {\n        return this.data.webPartData.title;\n    }\n\n    public set title(value: string) {\n        this.data.webPartData.title = value;\n    }\n\n    public get description(): string {\n        return this.data.webPartData.description;\n    }\n\n    public set description(value: string) {\n        this.data.webPartData.description = value;\n    }\n\n    public get order(): number {\n        return this.data.position.controlIndex;\n    }\n\n    public set order(value: number) {\n        this.data.position.controlIndex = value;\n    }\n\n    public get height(): number {\n        return this.data.reservedHeight;\n    }\n\n    public set height(value: number) {\n        this.data.reservedHeight = value;\n    }\n\n    public get width(): number {\n        return this.data.reservedWidth;\n    }\n\n    public set width(value: number) {\n        this.data.reservedWidth = value;\n    }\n\n    public get dataVersion(): string {\n        return this.data.webPartData.dataVersion;\n    }\n\n    public set dataVersion(value: string) {\n        this.data.webPartData.dataVersion = value;\n    }\n\n    public setProperties<T = any>(properties: T): this {\n        this.data.webPartData.properties = assign(this.data.webPartData.properties, properties);\n        return this;\n    }\n\n    public getProperties<T = any>(): T {\n        return <T>this.data.webPartData.properties;\n    }\n\n    protected onColumnChange(col: CanvasColumn): void {\n        this.data.position.sectionFactor = col.factor;\n        this.data.position.controlIndex = getNextOrder(col.controls);\n        this.data.position.zoneIndex = col.data.position.zoneIndex;\n        this.data.position.sectionIndex = col.data.position.sectionIndex;\n        this.data.position.layoutIndex = col.data.position.layoutIndex;\n    }\n\n    protected import(component: IClientsidePageComponent): void {\n\n        const id = getGUID();\n        const componendId = component.Id.replace(/^\\{|\\}$/g, \"\").toLowerCase();\n        const manifest: IClientSidePageComponentManifest = JSON.parse(component.Manifest);\n        const preconfiguredEntries = manifest.preconfiguredEntries[0];\n\n        this.setData(Object.assign({}, this.data, <IClientsideWebPartData>{\n            id,\n            webPartData: {\n                dataVersion: \"1.0\",\n                description: preconfiguredEntries.description.default,\n                id: componendId,\n                instanceId: id,\n                properties: preconfiguredEntries.properties,\n                title: preconfiguredEntries.title.default,\n            },\n            webPartId: componendId,\n        }));\n    }\n}\n\nexport interface IPageData {\n    readonly \"odata.metadata\": string;\n    readonly \"odata.type\": \"SP.Publishing.SitePage\";\n    readonly \"odata.id\": string;\n    readonly \"odata.editLink\": string;\n    AbsoluteUrl: string;\n    AuthorByline: string[] | null;\n    BannerImageUrl: string;\n    ContentTypeId: null | string;\n    Description: string;\n    DoesUserHaveEditPermission: boolean;\n    FileName: string;\n    readonly FirstPublished: string;\n    readonly Id: number;\n    IsPageCheckedOutToCurrentUser: boolean;\n    IsWebWelcomePage: boolean;\n    readonly Modified: string;\n    PageLayoutType: ClientsidePageLayoutType;\n    Path: {\n        DecodedUrl: string;\n    };\n    PromotedState: number;\n    Title: string;\n    TopicHeader: null | string;\n    readonly UniqueId: string;\n    Url: string;\n    readonly Version: string;\n    readonly VersionInfo: {\n        readonly LastVersionCreated: string;\n        readonly LastVersionCreatedBy: string;\n    };\n    AlternativeUrlMap: string;\n    CanvasContent1: string;\n    LayoutWebpartsContent: string;\n}\n\n/**\n * Client side webpart object (retrieved via the _api/web/GetClientSideWebParts REST call)\n */\nexport interface IClientsidePageComponent {\n    /**\n     * Component type for client side webpart object\n     */\n    ComponentType: number;\n    /**\n     * Id for client side webpart object\n     */\n    Id: string;\n    /**\n     * Manifest for client side webpart object\n     */\n    Manifest: string;\n    /**\n     * Manifest type for client side webpart object\n     */\n    ManifestType: number;\n    /**\n     * Name for client side webpart object\n     */\n    Name: string;\n    /**\n     * Status for client side webpart object\n     */\n    Status: number;\n}\n\ninterface IClientSidePageComponentManifest {\n    alias: string;\n    componentType: \"WebPart\" | \"\" | null;\n    disabledOnClassicSharepoint: boolean;\n    hiddenFromToolbox: boolean;\n    id: string;\n    imageLinkPropertyNames: any;\n    isInternal: boolean;\n    linkPropertyNames: boolean;\n    loaderConfig: any;\n    manifestVersion: number;\n    preconfiguredEntries: {\n        description: { default: string };\n        group: { default: string };\n        groupId: string;\n        iconImageUrl: string;\n        officeFabricIconFontName: string;\n        properties: ITypedHash<any>;\n        title: { default: string };\n\n    }[];\n    preloadComponents: any | null;\n    requiredCapabilities: any | null;\n    searchablePropertyNames: any | null;\n    supportsFullBleed: boolean;\n    version: string;\n}\n\nexport interface IClientsideControlBaseData {\n    controlType: number;\n}\n\nexport interface ICanvasControlBaseData extends IClientsideControlBaseData {\n    id: string;\n    emphasis: IClientControlEmphasis;\n    displayMode: number;\n}\n\nexport interface IClientsidePageSettingsSlice extends IClientsideControlBaseData {\n    pageSettingsSlice: {\n        \"isDefaultDescription\": boolean;\n        \"isDefaultThumbnail\": boolean;\n    };\n}\n\nexport interface IClientsidePageColumnData extends IClientsideControlBaseData {\n    controlType: 0;\n    displayMode: number;\n    emphasis: IClientControlEmphasis;\n    position: IPosition;\n}\n\ninterface IPosition {\n    zoneIndex: number;\n    sectionIndex: number;\n    controlIndex?: number;\n    sectionFactor?: CanvasColumnFactor;\n    layoutIndex: number;\n}\n\nexport interface IClientsideTextData extends ICanvasControlBaseData {\n    controlType: 4;\n    position: IPosition;\n    anchorComponentId: string;\n    editorType: \"CKEditor\";\n    addedFromPersistedData: boolean;\n    innerHTML: string;\n}\n\nexport interface IClientsideWebPartData<PropertiesType = any> extends ICanvasControlBaseData {\n    controlType: 3;\n    position: IPosition;\n    webPartId: string;\n    reservedHeight: number;\n    reservedWidth: number;\n    addedFromPersistedData: boolean;\n    webPartData: {\n        id: string;\n        instanceId: string;\n        title: string;\n        description: string;\n        serverProcessedContent?: {\n            \"htmlStrings\": ITypedHash<string>;\n            \"searchablePlainTexts\": ITypedHash<string>;\n            \"imageSources\": ITypedHash<string>;\n            \"links\": ITypedHash<string>;\n        };\n        dataVersion: string;\n        properties: PropertiesType;\n    };\n}\n\nexport interface IClientControlEmphasis {\n    zoneEmphasis?: 0 | 1 | 2 | 3;\n}\n\nexport type LayoutType = \"FullWidthImage\" | \"NoImage\" | \"ColorBlock\" | \"CutInShape\";\nexport type TextAlignment = \"Left\" | \"Center\";\n\ninterface ILayoutPartsContent {\n    id: string;\n    instanceId: string;\n    title: string;\n    description: string;\n    serverProcessedContent: {\n        htmlStrings: ITypedHash<string>;\n        searchablePlainTexts: ITypedHash<string>;\n        imageSources: ITypedHash<string>;\n        links: ITypedHash<string>;\n        customMetadata?: {\n            imageSource?: {\n                siteId: string;\n                webId: string;\n                listId: string;\n                uniqueId: string;\n            },\n        }\n    };\n    dataVersion: string;\n    properties: {\n        title: string;\n        imageSourceType?: number;\n        layoutType: LayoutType;\n        textAlignment: TextAlignment;\n        showTopicHeader: boolean;\n        showPublishDate: boolean;\n        topicHeader: string;\n        authorByline: string[];\n        authors: {\n            id: string,\n            upn: string;\n            name: string;\n            role: string;\n        }[];\n        webId?: string;\n        siteId?: string;\n        listId?: string;\n        uniqueId?: string;\n        translateX?: number;\n        translateY?: number;\n        altText?: string;\n    };\n}\n","import { addProp } from \"@pnp/odata\";\nimport { _Item, Item } from \"../items/types\";\nimport { Comments, IComments, ILikeData, ILikedByInformation } from \"./types\";\nimport { spPost } from \"../operations\";\n\ndeclare module \"../items/types\" {\n    interface _Item {\n        readonly comments: IComments;\n        getLikedBy(): Promise<ILikeData[]>;\n        like(): Promise<void>;\n        unlike(): Promise<void>;\n        getLikedByInformation(): Promise<ILikedByInformation>;\n    }\n    interface IItem {\n        readonly comments: IComments;\n        /**\n         * Gets the collection of people who have liked this item\n         */\n        getLikedBy(): Promise<ILikeData[]>;\n        /**\n         * Likes this item as the current user\n         */\n        like(): Promise<void>;\n        /**\n         * Unlikes this item as the current user\n         */\n        unlike(): Promise<void>;\n        /**\n         * Get the like by information for a modern site page     \n         */\n        getLikedByInformation(): Promise<ILikedByInformation>;\n    }\n}\n\naddProp(_Item, \"comments\", Comments);\n\n_Item.prototype.getLikedBy = function (this: _Item): Promise<ILikeData[]> {\n    return spPost<ILikeData[]>(this.clone(Item, \"likedBy\"));\n};\n\n_Item.prototype.like = function (this: _Item): Promise<void> {\n    return spPost<void>(this.clone(Item, \"like\"));\n};\n\n_Item.prototype.unlike = function (this: _Item): Promise<void> {\n    return spPost<void>(this.clone(Item, \"unlike\"));\n};\n\n_Item.prototype.getLikedByInformation = function (this: _Item): Promise<ILikedByInformation> {\n    return this.clone(Item, \"likedByInformation\").expand(\"likedby\")<ILikedByInformation>();\n};\n","import { _Web, IWeb } from \"../webs/types\";\nimport { IClientsidePageComponent, CreateClientsidePage, IClientsidePage, ClientsidePageLayoutType, ClientsidePageFromFile, PromotedState } from \"./types\";\nimport { SharePointQueryableCollection } from \"../sharepointqueryable\";\n\ndeclare module \"../webs/types\" {\n    interface _Web {\n        getClientsideWebParts(): Promise<IClientsidePageComponent[]>;\n        addClientsidePage(pageName: string, title?: string, libraryTitle?: string, promotedState?: PromotedState): Promise<IClientsidePage>;\n        loadClientsidePage(path: string): Promise<IClientsidePage>;\n    }\n    interface IWeb {\n\n        /**\n         * Gets the collection of available client side web parts for this web instance\n         */\n        getClientsideWebParts(): Promise<IClientsidePageComponent[]>;\n\n        /**\n         * Creates a new client side page\n         *\n         * @param pageName Name of the new page\n         * @param title Display title of the new page\n         */\n        addClientsidePage(pageName: string, title?: string, PageLayoutType?: ClientsidePageLayoutType, promotedState?: PromotedState): Promise<IClientsidePage>;\n\n        /**\n         * Loads a page from the provided server relative path to the file\n         * \n         * @param path Server relative path to the file (ex: \"/sites/dev/sitepages/page.aspx\")\n         */\n        loadClientsidePage(path: string): Promise<IClientsidePage>;\n    }\n}\n\n_Web.prototype.getClientsideWebParts = function (): Promise<IClientsidePageComponent[]> {\n    return this.clone(SharePointQueryableCollection, \"GetClientSideWebParts\")();\n};\n\n_Web.prototype.addClientsidePage =\n    function (this: IWeb, pageName: string, title = pageName.replace(/\\.[^/.]+$/, \"\"), layout?: ClientsidePageLayoutType, promotedState?: PromotedState): Promise<IClientsidePage> {\n        return CreateClientsidePage(this, pageName, title, layout, promotedState);\n    };\n\n_Web.prototype.loadClientsidePage = function (this: IWeb, path: string): Promise<IClientsidePage> {\n    return ClientsidePageFromFile(this.getFileByServerRelativePath(path));\n};\n","import { assign, ITypedHash, isUrlAbsolute } from \"@pnp/common\";\nimport {\n    SharePointQueryable,\n    SharePointQueryableCollection,\n    SharePointQueryableInstance,\n    _SharePointQueryableInstance,\n    ISharePointQueryableCollection,\n    _SharePointQueryableCollection,\n    ISharePointQueryableInstance,\n    ISharePointQueryable,\n    spInvokableFactory,\n    deleteableWithETag,\n    IDeleteableWithETag,\n} from \"../sharepointqueryable\";\nimport { odataUrlFrom } from \"../odata\";\nimport { IItem, Item } from \"../items/types\";\nimport { body } from \"@pnp/odata\";\nimport { defaultPath } from \"../decorators\";\nimport { spPost } from \"../operations\";\nimport { escapeQueryStrValue } from \"../utils/escapeQueryStrValue\";\nimport { extractWebUrl } from \"../utils/extractweburl\";\nimport { tag } from \"../telemetry\";\nimport { toResourcePath, IResourcePath } from \"../utils/toResourcePath\";\n\n@defaultPath(\"folders\")\nexport class _Folders extends _SharePointQueryableCollection<IFolderInfo[]> {\n\n    /**\n     * Gets a folder by it's name\n     * \n     * @param name Folder's name\n     */\n    public getByName(name: string): IFolder {\n        return tag.configure(Folder(this).concat(`('${escapeQueryStrValue(name)}')`), \"fs.getByName\");\n    }\n\n    /**\n     * Adds a new folder at the specified URL\n     * \n     * @param url \n     */\n    @tag(\"fs.add\")\n    public async add(url: string): Promise<IFolderAddResult> {\n\n        const data = await spPost(this.clone(Folders, `add('${escapeQueryStrValue(url)}')`));\n\n        return {\n            data,\n            folder: this.getByName(url),\n        };\n    }\n\n    /**\n     * Adds a new folder by path and should be prefered over add\n     * \n     * @param serverRelativeUrl The server relative url of the new folder to create\n     * @param overwrite True to overwrite an existing folder, default false\n     */\n    @tag(\"fs.addUsingPath\")\n    public async addUsingPath(serverRelativeUrl: string, overwrite = false): Promise<IFolderAddResult> {\n\n        const data = await spPost(this.clone(Folders, `addUsingPath(DecodedUrl='${escapeQueryStrValue(serverRelativeUrl)}',overwrite=${overwrite})`));\n\n        return {\n            data,\n            folder: Folder(extractWebUrl(this.toUrl()), `_api/web/getFolderByServerRelativePath(decodedUrl='${escapeQueryStrValue(serverRelativeUrl)}')`),\n        };\n    }\n}\nexport interface IFolders extends _Folders { }\nexport const Folders = spInvokableFactory<IFolders>(_Folders);\n\n\nexport class _Folder extends _SharePointQueryableInstance<IFolderInfo> {\n\n    public delete = deleteableWithETag(\"f\");\n\n    /**\n     * Specifies the sequence in which content types are displayed.\n     *\n     */\n    public get contentTypeOrder(): ISharePointQueryableCollection {\n        return tag.configure(SharePointQueryableCollection(this, \"contentTypeOrder\"), \"f.contentTypeOrder\");\n    }\n\n    /**\n     * Gets this folder's sub folders\n     *\n     */\n    public get folders(): IFolders {\n        return Folders(this);\n    }\n\n    /**\n     * Gets this folder's list item field values\n     *\n     */\n    public get listItemAllFields(): ISharePointQueryableInstance {\n        return tag.configure(SharePointQueryableInstance(this, \"listItemAllFields\"), \"f.listItemAllFields\");\n    }\n\n    /**\n     * Gets the parent folder, if available\n     *\n     */\n    public get parentFolder(): IFolder {\n        return tag.configure(Folder(this, \"parentFolder\"), \"f.parentFolder\");\n    }\n\n    /**\n     * Gets this folder's properties\n     *\n     */\n    public get properties(): ISharePointQueryableInstance {\n        return tag.configure(SharePointQueryableInstance(this, \"properties\"), \"f.properties\");\n    }\n\n    /**\n     * Gets this folder's server relative url\n     *\n     */\n    public get serverRelativeUrl(): ISharePointQueryable {\n        return tag.configure(SharePointQueryable(this, \"serverRelativeUrl\"), \"f.serverRelativeUrl\");\n    }\n\n    /**\n     * Gets a value that specifies the content type order.\n     *\n     */\n    public get uniqueContentTypeOrder(): ISharePointQueryableCollection {\n        return tag.configure(SharePointQueryableCollection(this, \"uniqueContentTypeOrder\"), \"f.uniqueContentTypeOrder\");\n    }\n\n    /**\n     * Updates folder's properties\n     * @param props Folder's properties to update\n     */\n    public update = this._update<IFolderUpdateResult, ITypedHash<any>>(\"SP.Folder\", data => ({ data, folder: <any>this }));\n\n    /**\n     * Moves the folder to the Recycle Bin and returns the identifier of the new Recycle Bin item.\n     */\n    @tag(\"f.recycle\")\n    public recycle(): Promise<string> {\n        return spPost(this.clone(Folder, \"recycle\"));\n    }\n\n    /**\n     * Gets the associated list item for this folder, loading the default properties\n     */\n    @tag(\"f.getItem\")\n    public async getItem<T>(...selects: string[]): Promise<IItem & T> {\n        const q = await this.listItemAllFields.select(...selects)();\n        return assign(Item(odataUrlFrom(q)), q);\n    }\n\n    /**\n     * Moves a folder to destination path\n     *\n     * @param destUrl Absolute or relative URL of the destination path\n     */\n    @tag(\"f.moveTo\")\n    public async moveTo(destUrl: string): Promise<void> {\n\n        const { ServerRelativeUrl: srcUrl, [\"odata.id\"]: absoluteUrl } = await this.select(\"ServerRelativeUrl\")();\n        const webBaseUrl = extractWebUrl(absoluteUrl);\n        const hostUrl = webBaseUrl.replace(\"://\", \"___\").split(\"/\")[0].replace(\"___\", \"://\");\n        await spPost(Folder(webBaseUrl, \"/_api/SP.MoveCopyUtil.MoveFolder()\"),\n            body({\n                destUrl: isUrlAbsolute(destUrl) ? destUrl : `${hostUrl}${destUrl}`,\n                srcUrl: `${hostUrl}${srcUrl}`,\n            }));\n    }\n\n    /**\n     * Moves a folder by path to destination path\n     * Also works with different site collections.\n     *\n     * @param destUrl Absolute or relative URL of the destination path\n     * @param keepBoth Keep both if folder with the same name in the same location already exists?\n     */\n    @tag(\"f.moveByPath\")\n    public async moveByPath(destUrl: string, KeepBoth = false): Promise<void> {\n\n        const { ServerRelativeUrl: srcUrl, [\"odata.id\"]: absoluteUrl } = await this.select(\"ServerRelativeUrl\")();\n        const webBaseUrl = extractWebUrl(absoluteUrl);\n        const hostUrl = webBaseUrl.replace(\"://\", \"___\").split(\"/\")[0].replace(\"___\", \"://\");\n        await spPost(Folder(webBaseUrl, `/_api/SP.MoveCopyUtil.MoveFolderByPath()`),\n            body({\n                destPath: toResourcePath(isUrlAbsolute(destUrl) ? destUrl : `${hostUrl}${destUrl}`),\n                options: {\n                    KeepBoth: KeepBoth,\n                    ResetAuthorAndCreatedOnCopy: true,\n                    ShouldBypassSharedLocks: true,\n                    __metadata: {\n                        type: \"SP.MoveCopyOptions\",\n                    },\n                },\n                srcPath: toResourcePath(isUrlAbsolute(srcUrl) ? srcUrl : `${hostUrl}${srcUrl}`),\n            }));\n    }\n\n    /**\n     * Copies a folder to destination path\n     *\n     * @param destUrl Absolute or relative URL of the destination path\n     */\n    @tag(\"f.copyTo\")\n    public async copyTo(destUrl: string): Promise<void> {\n\n        const { ServerRelativeUrl: srcUrl, [\"odata.id\"]: absoluteUrl } = await this.select(\"ServerRelativeUrl\")();\n        const webBaseUrl = extractWebUrl(absoluteUrl);\n        const hostUrl = webBaseUrl.replace(\"://\", \"___\").split(\"/\")[0].replace(\"___\", \"://\");\n        await spPost(Folder(webBaseUrl, \"/_api/SP.MoveCopyUtil.CopyFolder()\"),\n            body({\n                destUrl: isUrlAbsolute(destUrl) ? destUrl : `${hostUrl}${destUrl}`,\n                srcUrl: `${hostUrl}${srcUrl}`,\n            }));\n    }\n\n    /**\n     * Copies a folder by path to destination path\n     * Also works with different site collections.\n     *\n     * @param destUrl Absolute or relative URL of the destination path\n     * @param keepBoth Keep both if folder with the same name in the same location already exists?\n     */\n    @tag(\"f.copyByPath\")\n    public async copyByPath(destUrl: string, KeepBoth = false): Promise<void> {\n\n        const { ServerRelativeUrl: srcUrl, [\"odata.id\"]: absoluteUrl } = await this.select(\"ServerRelativeUrl\")();\n        const webBaseUrl = extractWebUrl(absoluteUrl);\n        const hostUrl = webBaseUrl.replace(\"://\", \"___\").split(\"/\")[0].replace(\"___\", \"://\");\n        await spPost(Folder(webBaseUrl, `/_api/SP.MoveCopyUtil.CopyFolderByPath()`),\n            body({\n                destPath: toResourcePath(isUrlAbsolute(destUrl) ? destUrl : `${hostUrl}${destUrl}`),\n                options: {\n                    KeepBoth: KeepBoth,\n                    ResetAuthorAndCreatedOnCopy: true,\n                    ShouldBypassSharedLocks: true,\n                    __metadata: {\n                        type: \"SP.MoveCopyOptions\",\n                    },\n                },\n                srcPath: toResourcePath(isUrlAbsolute(srcUrl) ? srcUrl : `${hostUrl}${srcUrl}`),\n            }));\n    }\n\n    /**\n     * Gets the shareable item associated with this folder\n     */\n    @tag(\"f.getShareable\")\n    protected async getShareable(): Promise<IItem> {\n        // sharing only works on the item end point, not the file one - so we create a folder instance with the item url internally\n        const d = await this.clone(SharePointQueryableInstance, \"listItemAllFields\", false).select(\"odata.id\")();\n\n        let shareable = Item(odataUrlFrom(d));\n\n        // we need to handle batching\n        if (this.hasBatch) {\n            shareable = shareable.inBatch(this.batch);\n        }\n\n        return shareable;\n    }\n}\nexport interface IFolder extends _Folder, IDeleteableWithETag { }\nexport const Folder = spInvokableFactory<IFolder>(_Folder);\n\n/**\n * Describes result of adding a folder\n */\nexport interface IFolderAddResult {\n\n    /**\n     * A folder's instance\n     */\n    folder: IFolder;\n\n    /**\n     * Additional data from the server \n     */\n    data: any;\n}\n\n/**\n * Describes result of updating a folder\n */\nexport interface IFolderUpdateResult {\n\n    /**\n     * A folder's instance\n     */\n    folder: IFolder;\n\n    /**\n     * Additional data from the server \n     */\n    data: any;\n}\n\nexport interface IFolderInfo {\n    readonly \"odata.id\": string;\n    Exists: boolean;\n    IsWOPIEnabled: boolean;\n    ItemCount: number;\n    Name: string;\n    ProgID: string | null;\n    ServerRelativeUrl: string;\n    ServerRelativePath: IResourcePath;\n    TimeCreated: string;\n    TimeLastModified: string;\n    UniqueId: string;\n    WelcomePage: string;\n}\n","import { addProp, TextParser, headers, body } from \"@pnp/odata\";\nimport { _List, List } from \"../lists/types\";\nimport { Folder } from \"../folders/types\";\nimport { IFieldDefault } from \"./types\";\nimport { IResourcePath } from \"../utils/toResourcePath\";\nimport { combine, isArray } from \"@pnp/common\";\nimport { escapeQueryStrValue } from \"../utils/escapeQueryStrValue\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\nimport { spPost } from \"../operations\";\nimport { SharePointQueryableCollection } from \"../presets/all\";\n\ndeclare module \"../lists/types\" {\n    interface _List {\n        getDefaultColumnValues(): Promise<IFieldDefault[]>;\n        setDefaultColumnValues(defaults: IFieldDefault[]): Promise<void>;\n    }\n    interface IList {\n        /**\n         * Gets the default column value for a given list\n         */\n        getDefaultColumnValues(): Promise<IFieldDefault[]>;\n\n        /**\n         * Replaces all the column defaults with the supplied values\n         * \n         * @param defaults \n         */\n        setDefaultColumnValues(defaults: IFieldDefault[]): Promise<void>;\n    }\n}\n\naddProp(_List, \"rootFolder\", Folder, \"rootFolder\");\n\n_List.prototype.getDefaultColumnValues = async function (this: _List): Promise<IFieldDefault[]> {\n\n    const pathPart: { ServerRelativePath: IResourcePath } = await this.rootFolder.select(\"ServerRelativePath\")();\n    const webUrl: { ParentWeb: { Url: string } } = await this.select(\"ParentWeb/Url\").expand(\"ParentWeb\")();\n    const path = combine(\"/\", pathPart.ServerRelativePath.DecodedUrl, \"Forms/client_LocationBasedDefaults.html\");\n    const baseFilePath = combine(webUrl.ParentWeb.Url, \"_api/web\", `getFileByServerRelativePath(decodedUrl='${escapeQueryStrValue(path)}')`);\n\n    // we do this because we don't want to import file if we don't have to\n    let xml = \"\";\n\n    try {\n\n        xml = await Folder(baseFilePath, \"$value\").usingParser(new TextParser())(headers({ \"binaryStringResponseBody\": \"true\" }));\n\n    } catch (e) {\n\n        // if this call fails we assume it is because the file is 404\n        if (e && e.status && e.status === 404) {\n\n            // return an empty array\n            return [];\n        }\n\n        throw e;\n    }\n\n    // get all the tags from the xml\n    const matches = xml.match(/<a.*?<\\/a>/ig);\n    const tags = matches === null ? [] : matches.map(t => t.trim());\n\n    // now we need to turn these tags of form into objects\n    // <a href=\"/sites/dev/My%20Title\"><DefaultValue FieldName=\"TextField\">Test</DefaultValue></a>\n\n    return tags.map(t => {\n        const m = /<a href=\"(.*?)\"><DefaultValue FieldName=\"(.*?)\">(.*?)<\\/DefaultValue>/ig.exec(t);\n        // if things worked our captures are:\n        // 0: whole string\n        // 1: ENCODED server relative path\n        // 2: Field internal name\n        // 3: Default value as string\n\n        if (m.length < 1) {\n            // this indicates an error somewhere, but we have no way to meaningfully recover\n            // perhaps the way the tags are stored has changed on the server? Check that first.\n            Logger.write(`Could not parse default column value from '${t}'`, LogLevel.Warning);\n            return null;\n        }\n\n        // return the parsed out values\n        return {\n            name: m[2],\n            path: decodeURIComponent(m[1]),\n            value: m[3],\n        };\n\n    }).filter(v => v !== null);\n};\n\n_List.prototype.setDefaultColumnValues = async function (this: _List, defaults: IFieldDefault[]): Promise<void> {\n\n    // we need the field types from the list to map the values\n    const fieldDefs: { InternalName: string; TypeAsString: string; }[] = await SharePointQueryableCollection(this, \"fields\").select(\"InternalName\", \"TypeAsString\").filter(\"Hidden ne true\")();\n\n    // map the values into the right format and produce our xml elements\n    const tags: string[] = defaults.map(fieldDefault => {\n\n        const index = fieldDefs.findIndex(fd => fd.InternalName === fieldDefault.name);\n\n        if (index < 0) {\n            throw Error(`Field '${fieldDefault.name}' does not exist in the list. Please check the internal field name. Failed to set defaults.`);\n        }\n\n        const fieldDef = fieldDefs[index];\n        let value = \"\";\n\n        switch (fieldDef.TypeAsString) {\n            case \"Boolean\":\n            case \"Currency\":\n            case \"Text\":\n            case \"DateTime\":\n            case \"Number\":\n            case \"Choice\":\n            case \"User\":\n                if (isArray(fieldDefault.value)) {\n                    throw Error(`The type '${fieldDef.TypeAsString}' does not support multiple values.`);\n                }\n                value = `${fieldDefault.value}`;\n                break;\n\n            case \"MultiChoice\":\n                if (isArray(fieldDefault.value)) {\n                    value = (<any[]>fieldDefault.value).map(v => `${v}`).join(\";\");\n                } else {\n                    value = `${fieldDefault.value}`;\n                }\n                break;\n\n            case \"UserMulti\":\n                if (isArray(fieldDefault.value)) {\n                    value = (<any[]>fieldDefault.value).map(v => `${v}`).join(\";#\");\n                } else {\n                    value = `${fieldDefault.value}`;\n                }\n                break;\n\n            case \"Taxonomy\":\n                if (isArray(fieldDefault.value)) {\n                    throw Error(`The type '${fieldDef.TypeAsString}' does not support multiple values.`);\n                } else {\n                    value = `${(<any>fieldDefault.value).wssId};#${(<any>fieldDefault.value).termName}|${(<any>fieldDefault.value).termId}`;\n                }\n                break;\n\n            case \"TaxonomyMulti\":\n                if (isArray(fieldDefault.value)) {\n                    value = (<{ wssId: string, termName: string, termId: string }[]>fieldDefault.value).map(v => `${v.wssId};#${v.termName}|${v.termId}`).join(\";#\");\n                }\n                value = `${(<any>fieldDefault.value).wssId};#${(<any>fieldDefault.value).termName}|${(<any>fieldDefault.value).termId}`;\n                break;\n        }\n\n        return `<a href=\"${fieldDefault.path.replace(/ /gi, \"%20\")}\"><DefaultValue FieldName=\"${fieldDefault.name}\">${value}</DefaultValue></a>`;\n    });\n\n    const xml = `<MetadataDefaults>${tags.join(\"\")}</MetadataDefaults>`;\n    const pathPart: { ServerRelativePath: IResourcePath } = await this.rootFolder.select(\"ServerRelativePath\")();\n    const webUrl: { ParentWeb: { Url: string } } = await this.select(\"ParentWeb/Url\").expand(\"ParentWeb\")();\n    const path = combine(\"/\", pathPart.ServerRelativePath.DecodedUrl, \"Forms\");\n    const baseFilePath = combine(webUrl.ParentWeb.Url, \"_api/web\", `getFolderByServerRelativePath(decodedUrl='${escapeQueryStrValue(path)}')`, \"files\");\n\n    await spPost(Folder(baseFilePath, `add(overwrite=true,url='client_LocationBasedDefaults.html')`), { body: xml });\n\n    // finally we need to ensure this list has the right event receiver added\n    const existingReceivers = await this.eventReceivers.filter(\"ReceiverName eq 'LocationBasedMetadataDefaultsReceiver ItemAdded'\").select(\"ReceiverId\")();\n\n    if (existingReceivers.length < 1) {\n        await spPost(List(this.eventReceivers, \"add\"), body({\n            eventReceiverCreationInformation: {\n                EventType: 10001,\n                ReceiverAssembly: \"Microsoft.Office.DocumentManagement, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c\",\n                ReceiverClass: \"Microsoft.Office.DocumentManagement.LocationBasedMetadataDefaultsReceiver\",\n                ReceiverName: \"LocationBasedMetadataDefaultsReceiver ItemAdded\",\n                SequenceNumber: 1000,\n                Synchronization: 1,\n            },\n        }));\n    }\n};\n","import { _SharePointQueryableInstance, _SharePointQueryableCollection } from \"../sharepointqueryable\";\nimport { odataUrlFrom } from \"../odata\";\nimport { extractWebUrl } from \"../utils/extractweburl\";\nimport { IResourcePath } from \"../utils/toResourcePath\";\nimport { Web } from \"../webs/types\";\nimport \"../lists/web\";\nimport { _Folder, Folder } from \"../folders/types\";\nimport { IFieldDefault, IFieldDefaultProps } from \"./types\";\n\ndeclare module \"../folders/types\" {\n    interface _Folder {\n        getDefaultColumnValues(): Promise<IFieldDefault[]>;\n        setDefaultColumnValues(defaults: IFieldDefaultProps[], merge?: boolean): Promise<void>;\n        clearDefaultColumnValues(): Promise<void>;\n    }\n    interface IFolder {\n        /**\n         * Gets the default column value for a given list\n         */\n        getDefaultColumnValues(): Promise<IFieldDefault[]>;\n        /**\n         * \n         * Sets the default column values for this folder\n         * \n         * @param fieldDefaults The values to set including field name and appropriate value\n         * @param merge If true (default) existing values will be updated and new values added, otherwise all defaults are replaced for this folder\n         */\n        setDefaultColumnValues(defaults: IFieldDefaultProps[], merge?: boolean): Promise<void>;\n        /**\n         * Clears all defaults from this folder\n         */\n        clearDefaultColumnValues(): Promise<void>;\n    }\n}\n\n_Folder.prototype.getDefaultColumnValues = async function (this: _Folder): Promise<IFieldDefault[]> {\n\n    const folderProps = await Folder(this, \"Properties\").select(\"vti_x005f_listname\")<{ vti_x005f_listname: string; }>();\n    const { ServerRelativePath: serRelPath } = await this.select(\"ServerRelativePath\")<{ ServerRelativePath: IResourcePath }>();\n\n    const web = Web(extractWebUrl(odataUrlFrom(folderProps)));\n    const docLib = web.lists.getById(folderProps.vti_x005f_listname);\n\n    // and we return the defaults associated with this folder's server relative path only\n    // if you want all the defaults use list.getDefaultColumnValues()\n    return (await docLib.getDefaultColumnValues()).filter(v => v.path.toLowerCase() === serRelPath.DecodedUrl.toLowerCase());\n};\n\n_Folder.prototype.setDefaultColumnValues = async function (fieldDefaults: IFieldDefaultProps[], merge = true): Promise<void> {\n\n    // we start by figuring out where we are\n    const folderProps = await Folder(this, \"Properties\").select(\"vti_x005f_listname\")<{ vti_x005f_listname: string; }>();\n\n    // now we create a web, list and batch to get some info we need\n    const web = Web(extractWebUrl(odataUrlFrom(folderProps)));\n    const docLib = web.lists.getById(folderProps.vti_x005f_listname);\n\n    // we need the proper folder path\n    const folderPath = (await this.select(\"ServerRelativePath\")()).ServerRelativePath.DecodedUrl;\n\n    // at this point we should have all the defaults to update\n    // and we need to get all the defaults to update the entire doc\n    const existingDefaults = await docLib.getDefaultColumnValues();\n\n    // we filter all defaults to remove any associated with this folder if merge is false\n    const filteredExistingDefaults = merge ? existingDefaults : existingDefaults.filter(f => f.path !== folderPath);\n\n    // we update / add any new defaults from those passed to this method\n    fieldDefaults.forEach(d => {\n\n        const existing = filteredExistingDefaults.find(ed => ed.name === d.name && ed.path === folderPath);\n\n        if (existing) {\n            existing.value = d.value;\n        } else {\n            filteredExistingDefaults.push({\n                name: d.name,\n                path: folderPath,\n                value: d.value,\n            });\n        }\n    });\n\n    // after this operation filteredExistingDefaults should contain all the value we want to write to the file\n    await docLib.setDefaultColumnValues(filteredExistingDefaults);\n};\n\n_Folder.prototype.clearDefaultColumnValues = async function (this: _Folder): Promise<void> {\n    await this.setDefaultColumnValues([], false);\n};\n","import { ITypedHash } from \"@pnp/common\";\nimport { body } from \"@pnp/odata\";\nimport {\n    SharePointQueryableCollection,\n    _SharePointQueryableInstance,\n    ISharePointQueryableCollection,\n    _SharePointQueryableCollection,\n    spInvokableFactory,\n    deleteable,\n    IDeleteable,\n} from \"../sharepointqueryable\";\nimport { defaultPath } from \"../decorators\";\nimport { metadata } from \"../utils/metadata\";\nimport { spPost } from \"../operations\";\nimport { tag } from \"../telemetry\";\n\n@defaultPath(\"contenttypes\")\nexport class _ContentTypes extends _SharePointQueryableCollection<IContentTypeInfo[]> {\n\n    /**\n     * Adds an existing contenttype to a content type collection\n     *\n     * @param contentTypeId in the following format, for example: 0x010102\n     */\n    @tag(\"cts.addAvailableContentType\")\n    public async addAvailableContentType(contentTypeId: string): Promise<IContentTypeAddResult> {\n\n        const data = await spPost(this.clone(ContentTypes, \"addAvailableContentType\"), body({ \"contentTypeId\": contentTypeId }));\n        return {\n            contentType: this.getById(data.id),\n            data: data,\n        };\n    }\n\n    /**\t\n     * Gets a ContentType by content type id\n     * @param id The id of the content type to get, in the following format, for example: 0x010102\t\n     */\n    public getById(id: string): IContentType {\n        return tag.configure(ContentType(this).concat(`('${id}')`), \"cts.getById\");\n    }\n\n    /**\n     * Adds a new content type to the collection\n     *\n     * @param id The desired content type id for the new content type (also determines the parent content type)\n     * @param name The name of the content type\n     * @param description The description of the content type\n     * @param group The group in which to add the content type\n     * @param additionalSettings Any additional settings to provide when creating the content type\n     *\n     */\n    @tag(\"cts.add\")\n    public async add(\n        id: string,\n        name: string,\n        description = \"\",\n        group = \"Custom Content Types\",\n        additionalSettings: ITypedHash<string | number | boolean> = {}): Promise<IContentTypeAddResult> {\n\n        const postBody = body(Object.assign(metadata(\"SP.ContentType\"), {\n            \"Description\": description,\n            \"Group\": group,\n            \"Id\": { \"StringValue\": id },\n            \"Name\": name,\n        }, additionalSettings));\n\n        const data = await spPost(this, postBody);\n\n        return { contentType: this.getById(data.id), data };\n    }\n}\nexport interface IContentTypes extends _ContentTypes { }\nexport const ContentTypes = spInvokableFactory<IContentTypes>(_ContentTypes);\n\n\nexport class _ContentType extends _SharePointQueryableInstance<IContentTypeInfo> {\n\n    public delete = deleteable(\"ct\");\n\n    /**\n     * Gets the column (also known as field) references in the content type.\n     */\n    public get fieldLinks(): IFieldLinks {\n        return tag.configure(FieldLinks(this), \"ct.fieldLinks\");\n    }\n\n    /**\n     * Gets a value that specifies the collection of fields for the content type.\n     */\n    public get fields(): ISharePointQueryableCollection {\n        return tag.configure(SharePointQueryableCollection(this, \"fields\"), \"ct.fields\");\n    }\n\n    /**\n     * Gets the parent content type of the content type.\n     */\n    public get parent(): IContentType {\n        return tag.configure(ContentType(this, \"parent\"), \"ct.parent\");\n    }\n\n    /**\n     * Gets a value that specifies the collection of workflow associations for the content type.\n     */\n    public get workflowAssociations(): ISharePointQueryableCollection {\n        return tag.configure(SharePointQueryableCollection(this, \"workflowAssociations\"), \"ct.workflowAssociations\");\n    }\n}\nexport interface IContentType extends _ContentType, IDeleteable { }\nexport const ContentType = spInvokableFactory<IContentType>(_ContentType);\n\n/**\n * Represents the output of adding a content type\n */\nexport interface IContentTypeAddResult {\n    contentType: IContentType;\n    data: Partial<IContentTypeInfo>;\n}\n\nexport interface IContentTypeInfo {\n    Description: string;\n    DisplayFormTemplateName: string;\n    DisplayFormUrl: string;\n    DocumentTemplate: string;\n    DocumentTemplateUrl: string;\n    EditFormTemplateName: string;\n    EditFormUrl: string;\n    Group: string;\n    Hidden: boolean;\n    Id: { StringValue: string; };\n    JSLink: string;\n    MobileDisplayFormUrl: string;\n    MobileEditFormUrl: string;\n    MobileNewFormUrl: string;\n    Name: string;\n    NewFormTemplateName: string;\n    NewFormUrl: string;\n    ReadOnly: boolean;\n    SchemaXml: string;\n    Scope: string;\n    Sealed: boolean;\n    StringId: string;\n}\n\n@defaultPath(\"fieldlinks\")\nexport class _FieldLinks extends _SharePointQueryableCollection<IFieldLinkInfo[]> {\n\n    /**\n    *  Gets a FieldLink by GUID id\t\n    * \n    * @param id The GUID id of the field link\n    */\n    public getById(id: string): IFieldLink {\n        return tag.configure(FieldLink(this).concat(`(guid'${id}')`), \"fls.getById\");\n    }\n}\nexport interface IFieldLinks extends _FieldLinks { }\nexport const FieldLinks = spInvokableFactory<IFieldLinks>(_FieldLinks);\n\nexport class _FieldLink extends _SharePointQueryableInstance<IFieldLinkInfo> { }\nexport interface IFieldLink extends _FieldLink { }\nexport const FieldLink = spInvokableFactory<IFieldLink>(_FieldLink);\n\nexport interface IFieldLinkInfo {\n    FieldInternalName: string | null;\n    Hidden: boolean;\n    Id: string;\n    Name: string;\n    Required: boolean;\n}\n","import { addProp } from \"@pnp/odata\";\nimport { _Web } from \"../webs/types\";\nimport { ContentTypes, IContentTypes } from \"./types\";\n\ndeclare module \"../webs/types\" {\n    interface _Web {\n        readonly contentTypes: IContentTypes;\n    }\n    interface IWeb {\n        /**\n         * Content types contained in this web\n         */\n        readonly contentTypes: IContentTypes;\n    }\n}\n\naddProp(_Web, \"contentTypes\", ContentTypes);\n","import { addProp } from \"@pnp/odata\";\nimport { _Item } from \"../items/types\";\nimport { ContentType, IContentType } from \"./types\";\n\ndeclare module \"../items/types\" {\n    interface _Item {\n        readonly contentType: IContentType;\n    }\n    interface IItem {\n        /**\n         * The content type of this item\n         */\n        readonly contentType: IContentType;\n    }\n}\n\naddProp(_Item, \"contentType\", ContentType, \"ContentType\");\n","import { addProp } from \"@pnp/odata\";\nimport { _List } from \"../lists/types\";\nimport { ContentTypes, IContentTypes } from \"./types\";\n\ndeclare module \"../lists/types\" {\n    interface _List {\n        readonly contentTypes: IContentTypes;\n    }\n    interface IList {\n        /**\n         * Content types available on this list\n         */\n        readonly contentTypes: IContentTypes;\n    }\n}\n\naddProp(_List, \"contentTypes\", ContentTypes);\n","import { body } from \"@pnp/odata\";\nimport {\n    _SharePointQueryableInstance,\n    _SharePointQueryableCollection,\n    spInvokableFactory,\n} from \"../sharepointqueryable\";\nimport { defaultPath } from \"../decorators\";\nimport { spPost } from \"../operations\";\nimport { SPBatch } from \"../batch\";\nimport { tag } from \"../telemetry\";\n\n@defaultPath(\"features\")\nexport class _Features extends _SharePointQueryableCollection<IFeatureInfo[]> {\n\n    /**\n     * Adds (activates) the specified feature\n     *\n     * @param id The Id of the feature (GUID)\n     * @param force If true the feature activation will be forced\n     */\n    @tag(\"fes.add\")\n    public async add(id: string, force = false): Promise<IFeatureAddResult> {\n\n        const data = await spPost(this.clone(Features, \"add\"), body({\n            featdefScope: 0,\n            featureId: id,\n            force: force,\n        }));\n\n        return {\n            data: data,\n            feature: this.getById(id),\n        };\n    }\n\n    /**\t    \n     * Gets a feature from the collection with the specified guid\n     *\t    \n     * @param id The Id of the feature (GUID)\t    \n     */\n    public getById(id: string): IFeature {\n        const feature = Feature(this);\n        feature.concat(`('${id}')`);\n        return tag.configure(feature, \"fes.getById\");\n    }\n\n    /**\n     * Removes (deactivates) a feature from the collection\n     *\n     * @param id The Id of the feature (GUID)\n     * @param force If true the feature deactivation will be forced\n     */\n    @tag(\"fes.remove\")\n    public remove(id: string, force = false): Promise<any> {\n\n        return spPost(this.clone(Features, \"remove\"), body({\n            featureId: id,\n            force: force,\n        }));\n    }\n}\nexport interface IFeatures extends _Features {}\nexport const Features = spInvokableFactory<IFeatures>(_Features);\n\nexport class _Feature extends _SharePointQueryableInstance<IFeatureInfo> {\n\n    /**\n     * Removes (deactivates) the feature\n     *\n     * @param force If true the feature deactivation will be forced\n     */\n    @tag(\"fe.deactivate\")\n    public async deactivate(force = false): Promise<any> {\n\n        const removeDependency = this.addBatchDependency();\n\n        const feature = await Feature(this).select(\"DefinitionId\")<{ DefinitionId: string; }>();\n\n        const promise = this.getParent<IFeatures>(Features, this.parentUrl, \"\", <SPBatch>this.batch).remove(feature.DefinitionId, force);\n\n        removeDependency();\n\n        return promise;\n    }\n}\nexport interface IFeature extends _Feature {}\nexport const Feature = spInvokableFactory<IFeature>(_Feature);\n\n/**\n * Result from adding (activating) a feature to the collection\n */\nexport interface IFeatureAddResult {\n    data: IFeatureInfo;\n    feature: IFeature;\n}\n\nexport interface IFeatureInfo {\n    DefinitionId: string;\n}\n","import { addProp } from \"@pnp/odata\";\nimport { _Site } from \"../sites/types\";\nimport { Features, IFeatures } from \"./types\";\n\ndeclare module \"../sites/types\" {\n    interface _Site {\n        readonly features: IFeatures;\n    }\n    interface ISite {\n        /**\n         * Access the features activated in this site\n         */\n        readonly features: IFeatures;\n    }\n}\n\naddProp(_Site, \"features\", Features);\n","import { addProp } from \"@pnp/odata\";\nimport { _Web } from \"../webs/types\";\nimport { Features, IFeatures } from \"./types\";\n\ndeclare module \"../webs/types\" {\n    interface _Web {\n        readonly features: IFeatures;\n    }\n    interface IWeb {\n        /**\n         * Access the features activated in this web\n         */\n        readonly features: IFeatures;\n    }\n}\n\naddProp(_Web, \"features\", Features);\n","import {\n  _SharePointQueryableInstance,\n  _SharePointQueryableCollection,\n  spInvokableFactory,\n} from \"../sharepointqueryable\";\nimport { assign, ITypedHash } from \"@pnp/common\";\nimport { metadata } from \"../utils/metadata\";\nimport { body, headers } from \"@pnp/odata\";\nimport { defaultPath } from \"../decorators\";\nimport { spPost } from \"../operations\";\nimport { tag } from \"../telemetry\";\n\n@defaultPath(\"fields\")\nexport class _Fields extends _SharePointQueryableCollection<IFieldInfo[]> {\n\n  /**\t\n   * Gets a field from the collection by id\t\n   *\t\n   * @param id The Id of the list\t\n   */\n  public getById(id: string): IField {\n    return tag.configure(Field(this).concat(`('${id}')`), \"fs.getById\");\n  }\n\n  /**\n   * Gets a field from the collection by title\n   *\n   * @param title The case-sensitive title of the field\n   */\n  public getByTitle(title: string): IField {\n    return tag.configure(Field(this, `getByTitle('${title}')`), \"fs.getByTitle\");\n  }\n\n  /**\n   * Gets a field from the collection by using internal name or title\n   *\n   * @param name The case-sensitive internal name or title of the field\n   */\n  public getByInternalNameOrTitle(name: string): IField {\n    return tag.configure(Field(this, `getByInternalNameOrTitle('${name}')`), \"fs.getByInternalNameOrTitle\");\n  }\n\n  /**\n   * Creates a field based on the specified schema\n   * \n   * @param xml A string or XmlSchemaFieldCreationInformation instance descrbing the field to create\n   */\n  @tag(\"fs.createFieldAsXml\")\n  public async createFieldAsXml(xml: string | IXmlSchemaFieldCreationInformation): Promise<IFieldAddResult> {\n\n    if (typeof xml === \"string\") {\n      xml = { SchemaXml: xml };\n    }\n\n    const postBody = body({\n      \"parameters\":\n        assign(metadata(\"SP.XmlSchemaFieldCreationInformation\"), xml),\n    });\n\n    const data = await spPost<{ Id: string; }>(this.clone(Fields, \"createfieldasxml\"), postBody);\n\n    return {\n      data,\n      field: this.getById(data.Id),\n    };\n  }\n\n  /**\n   * Adds a new field to the collection\n   *\n   * @param title The new field's title\n   * @param fieldType The new field's type (ex: SP.FieldText)\n   * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n   */\n  public async add(title: string, fieldType: string, properties: IFieldCreationProperties & { FieldTypeKind: number }): Promise<IFieldAddResult> {\n\n    const postBody = body(Object.assign(metadata(fieldType), {\n      \"Title\": title,\n    }, properties));\n\n    if (!tag.isTagged(this)) {\n      tag.configure(this, \"fs.add\");\n    }\n\n    const data = await spPost<{ Id: string; }>(this.clone(Fields, null), postBody);\n\n    return {\n      data,\n      field: this.getById(data.Id),\n    };\n  }\n\n  /**\n   * Adds a new SP.FieldText to the collection\n   *\n   * @param title The field title\n   * @param maxLength The maximum number of characters allowed in the value of the field.\n   * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n   */\n  @tag(\"fs.addText\")\n  public addText(title: string, maxLength = 255, properties?: IFieldCreationProperties): Promise<IFieldAddResult> {\n\n    const props: { FieldTypeKind: number, MaxLength: number } = {\n      FieldTypeKind: 2,\n      MaxLength: maxLength,\n    };\n\n    return this.add(title, \"SP.FieldText\", assign(props, properties));\n  }\n\n  /**\n   * Adds a new SP.FieldCalculated to the collection\n   *\n   * @param title The field title.\n   * @param formula The formula for the field.\n   * @param dateFormat The date and time format that is displayed in the field.\n   * @param outputType Specifies the output format for the field. Represents a FieldType value.\n   * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n   */\n  @tag(\"fs.addCalculated\")\n  public addCalculated(\n    title: string,\n    formula: string,\n    dateFormat: DateTimeFieldFormatType,\n    outputType: FieldTypes = FieldTypes.Text,\n    properties?: IFieldCreationProperties): Promise<IFieldAddResult> {\n\n    const props: {\n      DateFormat: DateTimeFieldFormatType;\n      FieldTypeKind: number;\n      Formula: string;\n      OutputType: FieldTypes;\n    } = {\n      DateFormat: dateFormat,\n      FieldTypeKind: 17,\n      Formula: formula,\n      OutputType: outputType,\n    };\n\n    return this.add(title, \"SP.FieldCalculated\", assign(props, properties));\n  }\n\n  /**\n   * Adds a new SP.FieldDateTime to the collection\n   *\n   * @param title The field title\n   * @param displayFormat The format of the date and time that is displayed in the field.\n   * @param calendarType Specifies the calendar type of the field.\n   * @param friendlyDisplayFormat The type of friendly display format that is used in the field.\n   * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n   */\n  @tag(\"fs.addDateTime\")\n  public addDateTime(\n    title: string,\n    displayFormat: DateTimeFieldFormatType = DateTimeFieldFormatType.DateOnly,\n    calendarType: CalendarType = CalendarType.Gregorian,\n    friendlyDisplayFormat: DateTimeFieldFriendlyFormatType = DateTimeFieldFriendlyFormatType.Unspecified,\n    properties?: IFieldCreationProperties): Promise<IFieldAddResult> {\n\n    const props = {\n      DateTimeCalendarType: calendarType,\n      DisplayFormat: displayFormat,\n      FieldTypeKind: 4,\n      FriendlyDisplayFormat: friendlyDisplayFormat,\n    };\n\n    return this.add(title, \"SP.FieldDateTime\", assign(props, properties));\n  }\n\n  /**\n   * Adds a new SP.FieldNumber to the collection\n   *\n   * @param title The field title\n   * @param minValue The field's minimum value\n   * @param maxValue The field's maximum value\n   * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n   */\n  @tag(\"fs.addNumber\")\n  public addNumber(\n    title: string,\n    minValue?: number,\n    maxValue?: number,\n    properties?: IFieldCreationProperties): Promise<IFieldAddResult> {\n\n    let props: { FieldTypeKind: number } = { FieldTypeKind: 9 };\n\n    if (minValue !== undefined) {\n      props = assign({ MinimumValue: minValue }, props);\n    }\n\n    if (maxValue !== undefined) {\n      props = assign({ MaximumValue: maxValue }, props);\n    }\n\n    return this.add(title, \"SP.FieldNumber\", assign(props, properties));\n  }\n\n  /**\n   * Adds a new SP.FieldCurrency to the collection\n   *\n   * @param title The field title\n   * @param minValue The field's minimum value\n   * @param maxValue The field's maximum value\n   * @param currencyLocalId Specifies the language code identifier (LCID) used to format the value of the field\n   * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n   */\n  @tag(\"fs.addCurrency\")\n  public addCurrency(\n    title: string,\n    minValue?: number,\n    maxValue?: number,\n    currencyLocalId = 1033,\n    properties?: IFieldCreationProperties): Promise<IFieldAddResult> {\n\n    let props: { CurrencyLocaleId: number; FieldTypeKind: number; } = {\n      CurrencyLocaleId: currencyLocalId,\n      FieldTypeKind: 10,\n    };\n\n    if (minValue !== undefined) {\n      props = assign({ MinimumValue: minValue }, props);\n    }\n\n    if (maxValue !== undefined) {\n      props = assign({ MaximumValue: maxValue }, props);\n    }\n\n    return this.add(title, \"SP.FieldCurrency\", assign(props, properties));\n  }\n\n  /**\n   * Adds a new SP.FieldMultiLineText to the collection\n   *\n   * @param title The field title\n   * @param numberOfLines Specifies the number of lines of text to display for the field.\n   * @param richText Specifies whether the field supports rich formatting.\n   * @param restrictedMode Specifies whether the field supports a subset of rich formatting.\n   * @param appendOnly Specifies whether all changes to the value of the field are displayed in list forms.\n   * @param allowHyperlink Specifies whether a hyperlink is allowed as a value of the field.\n   * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n   *\n   */\n  @tag(\"fs.addMultilineText\")\n  public addMultilineText(\n    title: string,\n    numberOfLines = 6,\n    richText = true,\n    restrictedMode = false,\n    appendOnly = false,\n    allowHyperlink = true,\n    properties?: IFieldCreationProperties): Promise<IFieldAddResult> {\n\n    const props = {\n      AllowHyperlink: allowHyperlink,\n      AppendOnly: appendOnly,\n      FieldTypeKind: 3,\n      NumberOfLines: numberOfLines,\n      RestrictedMode: restrictedMode,\n      RichText: richText,\n    };\n\n    return this.add(title, \"SP.FieldMultiLineText\", assign(props, properties));\n  }\n\n  /**\n   * Adds a new SP.FieldUrl to the collection\n   *\n   * @param title The field title\n   */\n  @tag(\"fs.addUrl\")\n  public addUrl(title: string, displayFormat: UrlFieldFormatType = UrlFieldFormatType.Hyperlink, properties?: IFieldCreationProperties): Promise<IFieldAddResult> {\n\n    const props = {\n      DisplayFormat: displayFormat,\n      FieldTypeKind: 11,\n    };\n\n    return this.add(title, \"SP.FieldUrl\", assign(props, properties));\n  }\n\n  /** Adds a user field to the colleciton\n  * \n  * @param title The new field's title\n  * @param selectionMode The selection mode of the field\n  * @param selectionGroup Value that specifies the identifier of the SharePoint group whose members can be selected as values of the field\n  * @param properties\n  */\n  @tag(\"fs.addUser\")\n  public addUser(title: string, selectionMode: FieldUserSelectionMode, properties?: IFieldCreationProperties): Promise<IFieldAddResult> {\n\n    const props = {\n      FieldTypeKind: 20,\n      SelectionMode: selectionMode,\n    };\n\n    return this.add(title, \"SP.FieldUser\", assign(props, properties));\n  }\n\n  /**\n   * Adds a SP.FieldLookup to the collection\n   *\n   * @param title The new field's title\n   * @param lookupListId The guid id of the list where the source of the lookup is found\n   * @param lookupFieldName The internal name of the field in the source list\n   * @param properties Set of additional properties to set on the new field\n   */\n  @tag(\"fs.addLookup\")\n  public async addLookup(\n    title: string,\n    lookupListId: string,\n    lookupFieldName: string,\n    properties?: IFieldCreationProperties): Promise<IFieldAddResult> {\n\n    const props = assign({\n      FieldTypeKind: 7,\n      LookupFieldName: lookupFieldName,\n      LookupListId: lookupListId,\n      Title: title,\n    }, properties);\n\n    const postBody = body({\n      \"parameters\":\n        assign(metadata(\"SP.FieldCreationInformation\"), props),\n    });\n\n    const data = await spPost<{ Id: string; }>(this.clone(Fields, \"addfield\"), postBody);\n\n    return {\n      data,\n      field: this.getById(data.Id),\n    };\n  }\n\n  /**\n   * Adds a new SP.FieldChoice to the collection\n   *\n   * @param title The field title.\n   * @param choices The choices for the field.\n   * @param format The display format of the available options for the field.\n   * @param fillIn Specifies whether the field allows fill-in values.\n   * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n   */\n  @tag(\"fs.addChoice\")\n  public addChoice(\n    title: string,\n    choices: string[],\n    format: ChoiceFieldFormatType = ChoiceFieldFormatType.Dropdown,\n    fillIn?: boolean,\n    properties?: IFieldCreationProperties): Promise<IFieldAddResult> {\n\n    const props = {\n      Choices: {\n        results: choices,\n      },\n      EditFormat: format,\n      FieldTypeKind: 6,\n      FillInChoice: fillIn,\n    };\n\n    return this.add(title, \"SP.FieldChoice\", assign(props, properties));\n  }\n\n  /**\n   * Adds a new SP.FieldMultiChoice to the collection\n   *\n   * @param title The field title.\n   * @param choices The choices for the field.\n   * @param fillIn Specifies whether the field allows fill-in values.\n   * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n   */\n  @tag(\"fs.addMultiChoice\")\n  public addMultiChoice(title: string, choices: string[], fillIn?: boolean, properties?: IFieldCreationProperties): Promise<IFieldAddResult> {\n\n    const props = {\n      Choices: {\n        results: choices,\n      },\n      FieldTypeKind: 15,\n      FillInChoice: fillIn,\n    };\n\n    return this.add(title, \"SP.FieldMultiChoice\", assign(props, properties));\n  }\n\n  /**\n   * Adds a new SP.FieldBoolean to the collection\n   *\n   * @param title The field title.\n   * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n   */\n  @tag(\"fs.addBoolean\")\n  public addBoolean(title: string, properties?: IFieldCreationProperties): Promise<IFieldAddResult> {\n\n    const props = {\n      FieldTypeKind: 8,\n    };\n\n    return this.add(title, \"SP.Field\", assign(props, properties));\n  }\n\n  /**\n  * Creates a secondary (dependent) lookup field, based on the Id of the primary lookup field.\n  * \n  * @param displayName The display name of the new field.\n  * @param primaryLookupFieldId The guid of the primary Lookup Field.\n  * @param showField Which field to show from the lookup list.\n  */\n  @tag(\"fs.addDependentLookupField\")\n  public async addDependentLookupField(displayName: string, primaryLookupFieldId: string, showField: string): Promise<IFieldAddResult> {\n\n    const path = `adddependentlookupfield(displayName='${displayName}', primarylookupfieldid='${primaryLookupFieldId}', showfield='${showField}')`;\n\n    const data = await spPost(this.clone(Fields, path));\n\n    return {\n      data,\n      field: this.getById(data.Id),\n    };\n  }\n\n  /**\n   * Adds a new SP.FieldLocation to the collection\n   *\n   * @param title The field title.\n   * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n   */\n  @tag(\"fs.addLocation\")\n  public addLocation(title: string, properties?: IFieldCreationProperties): Promise<IFieldAddResult> {\n\n    const props = { FieldTypeKind: 33 };\n\n    return this.add(title, \"SP.FieldLocation\", assign(props, properties));\n  }\n}\nexport interface IFields extends _Fields { }\nexport const Fields = spInvokableFactory<IFields>(_Fields);\n\nexport class _Field extends _SharePointQueryableInstance<IFieldInfo> {\n\n  /**\n   * Updates this field instance with the supplied properties\n   *\n   * @param properties A plain object hash of values to update for the list\n   * @param fieldType The type value, required to update child field type properties\n   */\n  @tag(\"f.update\")\n  public async update(properties: Partial<IFieldInfo>, fieldType = \"SP.Field\"): Promise<IFieldUpdateResult> {\n\n    const req = body(assign(metadata(fieldType), properties), headers({ \"X-HTTP-Method\": \"MERGE\" }));\n\n    const data = await spPost(this, req);\n\n    return {\n      data,\n      field: <any>this,\n    };\n  }\n\n  /**\n   * Sets the value of the ShowInDisplayForm property for this field.\n   */\n  @tag(\"f.setShowInDisplayForm\")\n  public setShowInDisplayForm(show: boolean): Promise<void> {\n    return spPost(this.clone(Field, `setshowindisplayform(${show})`));\n  }\n\n  /**\n   * Sets the value of the ShowInEditForm property for this field.\n   */\n  @tag(\"f.setShowInEditForm\")\n  public setShowInEditForm(show: boolean): Promise<void> {\n    return spPost(this.clone(Field, `setshowineditform(${show})`));\n  }\n\n  /**\n   * Sets the value of the ShowInNewForm property for this field.\n   */\n  @tag(\"f.setShowInNewForm\")\n  public setShowInNewForm(show: boolean): Promise<void> {\n    return spPost(this.clone(Field, `setshowinnewform(${show})`));\n  }\n}\nexport interface IField extends _Field { }\nexport const Field = spInvokableFactory<IField>(_Field);\n\n/**\n * This interface defines the result of adding a field\n */\nexport interface IFieldAddResult {\n  data: Partial<IFieldInfo>;\n  field: IField;\n}\n\n/**\n * This interface defines the result of updating a field\n */\nexport interface IFieldUpdateResult {\n  data: Partial<IFieldInfo>;\n  field: IField;\n}\n\n/**\n * Specifies the type of the field.\n */\nexport enum FieldTypes {\n  Invalid = 0,\n  Integer = 1,\n  Text = 2,\n  Note = 3,\n  DateTime = 4,\n  Counter = 5,\n  Choice = 6,\n  Lookup = 7,\n  Boolean = 8,\n  Number = 9,\n  Currency = 10,\n  URL = 11,\n  Computed = 12,\n  Threading = 13,\n  Guid = 14,\n  MultiChoice = 15,\n  GridChoice = 16,\n  Calculated = 17,\n  File = 18,\n  Attachments = 19,\n  User = 20,\n  Recurrence = 21,\n  CrossProjectLink = 22,\n  ModStat = 23,\n  Error = 24,\n  ContentTypeId = 25,\n  PageSeparator = 26,\n  ThreadIndex = 27,\n  WorkflowStatus = 28,\n  AllDayEvent = 29,\n  WorkflowEventType = 30,\n}\n\nexport enum DateTimeFieldFormatType {\n  DateOnly = 0,\n  DateTime = 1,\n}\n\nexport enum DateTimeFieldFriendlyFormatType {\n  Unspecified = 0,\n  Disabled = 1,\n  Relative = 2,\n}\n\n/**\n * Specifies the control settings while adding a field.\n */\nexport enum AddFieldOptions {\n  /**\n   *  Specify that a new field added to the list must also be added to the default content type in the site collection\n   */\n  DefaultValue = 0,\n  /**\n   * Specify that a new field added to the list must also be added to the default content type in the site collection.\n   */\n  AddToDefaultContentType = 1,\n  /**\n   * Specify that a new field must not be added to any other content type\n   */\n  AddToNoContentType = 2,\n  /**\n   *  Specify that a new field that is added to the specified list must also be added to all content types in the site collection\n   */\n  AddToAllContentTypes = 4,\n  /**\n   * Specify adding an internal field name hint for the purpose of avoiding possible database locking or field renaming operations\n   */\n  AddFieldInternalNameHint = 8,\n  /**\n   * Specify that a new field that is added to the specified list must also be added to the default list view\n   */\n  AddFieldToDefaultView = 16,\n  /**\n   * Specify to confirm that no other field has the same display name\n   */\n  AddFieldCheckDisplayName = 32,\n}\n\nexport interface IXmlSchemaFieldCreationInformation {\n  Options?: AddFieldOptions;\n  SchemaXml: string;\n}\n\nexport enum CalendarType {\n  Gregorian = 1,\n  Japan = 3,\n  Taiwan = 4,\n  Korea = 5,\n  Hijri = 6,\n  Thai = 7,\n  Hebrew = 8,\n  GregorianMEFrench = 9,\n  GregorianArabic = 10,\n  GregorianXLITEnglish = 11,\n  GregorianXLITFrench = 12,\n  KoreaJapanLunar = 14,\n  ChineseLunar = 15,\n  SakaEra = 16,\n  UmAlQura = 23,\n}\n\nexport enum UrlFieldFormatType {\n  Hyperlink = 0,\n  Image = 1,\n}\n\nexport enum FieldUserSelectionMode {\n  PeopleAndGroups = 1,\n  PeopleOnly = 0,\n}\n\nexport interface IFieldCreationProperties extends ITypedHash<string | number | boolean> {\n  DefaultFormula?: string;\n  Description?: string;\n  EnforceUniqueValues?: boolean;\n  FieldTypeKind?: number;\n  Group?: string;\n  Hidden?: boolean;\n  Indexed?: boolean;\n  Required?: boolean;\n  Title?: string;\n  ValidationFormula?: string;\n  ValidationMessage?: string;\n}\n\nexport enum ChoiceFieldFormatType {\n  Dropdown,\n  RadioButtons,\n}\n\nexport interface IFieldInfo {\n  DefaultFormula: string | null;\n  DefaultValue: string | null;\n  Description: string;\n  Direction: string;\n  EnforceUniqueValues: boolean;\n  EntityPropertyName: string;\n  FieldTypeKind: FieldTypes;\n  Filterable: boolean;\n  FromBaseType: boolean;\n  Group: string;\n  Hidden: boolean;\n  Id: string;\n  Indexed: boolean;\n  IndexStatus: number;\n  InternalName: string;\n  JSLink: string;\n  PinnedToFiltersPane: boolean;\n  ReadOnlyField: boolean;\n  Required: boolean;\n  SchemaXml: string;\n  Scope: string;\n  Sealed: boolean;\n  ShowInFiltersPane: number;\n  Sortable: boolean;\n  StaticName: string;\n  Title: string;\n  TypeAsString: string;\n  TypeDisplayName: string;\n  TypeShortDescription: string;\n  ValidationFormula: string | null;\n  ValidationMessage: string | null;\n}\n","import { addProp } from \"@pnp/odata\";\nimport { _Web } from \"../webs/types\";\nimport { Fields, IFields } from \"./types\";\n\ndeclare module \"../webs/types\" {\n  interface _Web {\n    readonly fields: IFields;\n    readonly availablefields: IFields;\n  }\n  interface IWeb {\n    /**\n     * This web's collection of fields\n     */\n    readonly fields: IFields;\n    /**\n     * This web's collection of available fields\n     */\n    readonly availablefields: IFields;\n  }\n}\n\naddProp(_Web, \"fields\", Fields);\naddProp(_Web, \"availablefields\", Fields, \"availablefields\");\n","import { addProp } from \"@pnp/odata\";\nimport { _List } from \"../lists/types\";\nimport { Fields, IFields } from \"./types\";\n\ndeclare module \"../lists/types\" {\n  interface _List {\n    readonly fields: IFields;\n  }\n  interface IList {\n    /**\n     * This list's collection of fields\n     */\n    readonly fields: IFields;\n  }\n}\n\naddProp(_List, \"fields\", Fields);\n","import { addProp } from \"@pnp/odata\";\nimport { _Folder } from \"../folders/types\";\nimport { IFiles, Files } from \"./types\";\n\ndeclare module \"../folders/types\" {\n    interface _Folder {\n        readonly files: IFiles;\n    }\n    interface IFolder {\n        /**\n         * Folder containing files\n         */\n        readonly files: IFiles;\n    }\n}\n\naddProp(_Folder, \"files\", Files);\n","import { addProp } from \"@pnp/odata\";\nimport { _Item } from \"../items/types\";\nimport { File, IFile } from \"./types\";\n\ndeclare module \"../items/types\" {\n    interface _Item {\n        readonly file: IFile;\n    }\n    interface IItem {\n        /**\n         * File in sharepoint site\n         */\n        readonly file: IFile;\n    }\n}\n\naddProp(_Item, \"file\", File, \"file\");\n","import { addProp } from \"@pnp/odata\";\nimport { _Item } from \"../items/types\";\nimport { Folder, IFolder } from \"./types\";\n\ndeclare module \"../items/types\" {\n    interface _Item {\n        readonly folder: IFolder;\n\n    }\n    interface IItem {\n        readonly folder: IFolder;\n\n    }\n}\n\naddProp(_Item, \"folder\", Folder, \"folder\");\n","import { addProp } from \"@pnp/odata\";\nimport { _List } from \"../lists/types\";\nimport { Folder, IFolder } from \"./types\";\n\ndeclare module \"../lists/types\" {\n    interface _List {\n        readonly rootFolder: IFolder;\n    }\n    interface IList {\n        /**\n         * Root folder for this list/library\n         */\n        readonly rootFolder: IFolder;\n    }\n}\n\naddProp(_List, \"rootFolder\", Folder, \"rootFolder\");\n","import { addProp } from \"@pnp/odata\";\nimport { _Web } from \"../webs/types\";\nimport { Folders, IFolders, Folder, IFolder } from \"./types\";\nimport { escapeQueryStrValue } from \"../utils/escapeQueryStrValue\";\n\ndeclare module \"../webs/types\" {\n    interface _Web {\n        readonly folders: IFolders;\n        readonly rootFolder: IFolder;\n        getFolderByServerRelativeUrl(folderRelativeUrl: string): IFolder;\n        getFolderByServerRelativePath(folderRelativeUrl: string): IFolder;\n        getFolderById(uniqueId: string): IFolder;\n    }\n    interface IWeb {\n\n        /**\n         * Gets the collection of folders in this web\n         */\n        readonly folders: IFolders;\n\n        /**\n         * Gets the root folder of the web\n         */\n        readonly rootFolder: IFolder;\n\n        /**\n         * Gets a folder by server relative url\n         *\n         * @param folderRelativeUrl The server relative path to the folder (including /sites/ if applicable)\n         */\n        getFolderByServerRelativeUrl(folderRelativeUrl: string): IFolder;\n\n        /**\n         * Gets a folder by server relative path if your folder name contains # and % characters\n         * This works only in SharePoint online.\n         *\n         * @param folderRelativeUrl The server relative path to the folder (including /sites/ if applicable)\n         */\n        getFolderByServerRelativePath(folderRelativeUrl: string): IFolder;\n\n        /**\n         * Gets a folder by id\n         *\n         * @param uniqueId The UniqueId of the folder\n         */\n        getFolderById(uniqueId: string): IFolder;\n    }\n}\n\naddProp(_Web, \"folders\", Folders);\naddProp(_Web, \"rootFolder\", Folder, \"rootFolder\");\n\n_Web.prototype.getFolderByServerRelativeUrl = function (this: _Web, folderRelativeUrl: string): IFolder {\n    return Folder(this, `getFolderByServerRelativeUrl('${escapeQueryStrValue(folderRelativeUrl)}')`);\n};\n\n_Web.prototype.getFolderByServerRelativePath = function (this: _Web, folderRelativeUrl: string): IFolder {\n    return Folder(this, `getFolderByServerRelativePath(decodedUrl='${escapeQueryStrValue(folderRelativeUrl)}')`);\n};\n\n_Web.prototype.getFolderById = function (this: _Web, uniqueId: string): IFolder {\n    return Folder(this, `getFolderById('${uniqueId}')`);\n};\n","import {\n    _SharePointQueryableInstance,\n    _SharePointQueryableCollection,\n    spInvokableFactory,\n} from \"../sharepointqueryable\";\nimport { defaultPath } from \"../decorators\";\nimport { PageType } from \"../types\";\nimport { tag } from \"../telemetry\";\n\n/**\n * Describes a collection of Form objects\n *\n */\n@defaultPath(\"forms\")\nexport class _Forms extends _SharePointQueryableCollection<IFormInfo[]> {\n    /**\t\n     * Gets a form by id\t\n     *\t\n     * @param id The guid id of the item to retrieve\t\n     */\n    public getById(id: string): IForm {\n        return tag.configure(Form(this).concat(`('${id}')`), \"fos.getById\");\n    }\n}\nexport interface IForms extends _Forms { }\nexport const Forms = spInvokableFactory<IForms>(_Forms);\n\n/**\n * Describes a single of Form instance\n *\n */\nexport class _Form extends _SharePointQueryableInstance<IFormInfo> { }\nexport interface IForm extends _Form { }\nexport const Form = spInvokableFactory<IForm>(_Form);\n\nexport interface IFormInfo {\n    FormType: PageType;\n    Id: string;\n    ResourcePath: { DecodedUrl: string; };\n    DecodedUrl: string;\n    ServerRelativeUrl: string;\n}\n","import { addProp } from \"@pnp/odata\";\nimport { _List } from \"../lists/types\";\nimport { Forms, IForms } from \"./types\";\n\ndeclare module \"../lists/types\" {\n    interface _List {\n        readonly forms: IForms;\n    }\n    interface IList {\n        readonly forms: IForms;\n    }\n}\n\naddProp(_List, \"forms\", Forms, \"forms\");\n","import {\n    _SharePointQueryableInstance,\n    _SharePointQueryableCollection,\n    spInvokableFactory,\n} from \"../sharepointqueryable\";\nimport { ISerializableNavigationNode } from \"../navigation/types\";\nimport { defaultPath } from \"../decorators\";\nimport { Site, ISite } from \"../sites/types\";\nimport { tag } from \"../telemetry\";\n\n@defaultPath(\"_api/hubsites\")\nexport class _HubSites extends _SharePointQueryableCollection<IHubSiteInfo[]> {\n\n    /**\t    \n     * Gets a Hub Site from the collection by id\t     \n     *\t    \n     * @param id The Id of the Hub Site\t    \n     */\n    public getById(id: string): IHubSite {\n        return tag.configure(HubSite(this, `GetById?hubSiteId='${id}'`), \"hss.getById\");\n\n    }\n}\nexport interface IHubSites extends _HubSites { }\nexport const HubSites = spInvokableFactory<IHubSites>(_HubSites);\n\nexport class _HubSite extends _SharePointQueryableInstance<IHubSiteInfo> {\n\n    /**\n     * Gets the ISite instance associated with this hubsite\n     */\n    @tag(\"hs.getSite\")\n    public async getSite(): Promise<ISite> {\n        const d = await this.select(\"SiteUrl\")();\n        return Site(d.SiteUrl);\n    }\n}\nexport interface IHubSite extends _HubSite { }\nexport const HubSite = spInvokableFactory<IHubSite>(_HubSite);\n\nexport interface IHubSiteInfo {\n    ID: string;\n    Title: string;\n    SiteId: string;\n    TenantInstanceId: string;\n    SiteUrl: string;\n    LogoUrl: string;\n    Description: string;\n    Targets: string;\n    SiteDesignId: string;\n    RequiresJoinApproval: boolean;\n    RelatedHubSiteIds: string[];\n    ParentHubSiteId: string;\n    HideNameInNavigation: boolean;\n    EnablePermissionsSync: boolean;\n}\n\nexport interface IHubSiteWebData {\n    headerEmphasis: string | null;\n    themeKey: string | null;\n    name: string | null;\n    url: string;\n    logoUrl: string | null;\n    usesMetadataNavigation: boolean;\n    megaMenuEnabled: boolean;\n    navigation: ISerializableNavigationNode[];\n    isNavAudienceTargeted: boolean;\n    siteDesignId: string;\n    requiresJoinApproval: boolean;\n    hideNameInNavigation: boolean;\n    parentHubSiteId: string;\n    relatedHubSiteIds: string | null;\n}\n","import { _Site, Site } from \"../sites/types\";\nimport { spPost } from \"../operations\";\n\ndeclare module \"../sites/types\" {\n    interface _Site {\n        joinHubSite(siteId: string): Promise<void>;\n        registerHubSite(): Promise<void>;\n        unRegisterHubSite(): Promise<void>;\n    }\n    interface ISite {\n\n        /**\n         * Associates a site collection to a hub site.\n         * \n         * @param siteId Id of the hub site collection you want to join.\n         * If you want to disassociate the site collection from hub site, then\n         * pass the siteId as 00000000-0000-0000-0000-000000000000\n         */\n        joinHubSite(siteId: string): Promise<void>;\n\n        /**\n         * Registers the current site collection as hub site collection\n         */\n        registerHubSite(): Promise<void>;\n\n        /**\n         * Unregisters the current site collection as hub site collection.\n         */\n        unRegisterHubSite(): Promise<void>;\n    }\n}\n\n_Site.prototype.joinHubSite = async function (this: _Site, siteId: string): Promise<void> {\n    await spPost(this.clone(Site, `joinHubSite('${siteId}')`));\n};\n\n_Site.prototype.registerHubSite = async function (this: _Site): Promise<void> {\n    await spPost(this.clone(Site, `registerHubSite`));\n};\n\n_Site.prototype.unRegisterHubSite = async function (this: _Site): Promise<void> {\n    await spPost(this.clone(Site, `unRegisterHubSite`));\n};\n","import { _Web, Web } from \"../webs/types\";\nimport { IHubSiteWebData } from \"./types\";\nimport { spPost } from \"../operations\";\n\ndeclare module \"../webs/types\" {\n    interface _Web {\n        hubSiteData(forceRefresh?: boolean): Promise<Partial<IHubSiteWebData>>;\n        syncHubSiteTheme(): Promise<void>;\n    }\n    interface IWeb {\n\n        /**\n         * Gets hub site data for the current web.\n         *\n         * @param forceRefresh Default value is false. When false, the data is returned from the server's cache.\n         * When true, the cache is refreshed with the latest updates and then returned.\n         * Use this if you just made changes and need to see those changes right away.\n         */\n        hubSiteData(forceRefresh?: boolean): Promise<Partial<IHubSiteWebData>>;\n\n        /**\n         * Applies theme updates from the parent hub site collection.\n         */\n        syncHubSiteTheme(): Promise<void>;\n    }\n}\n\n_Web.prototype.hubSiteData = async function (this: _Web, forceRefresh = false): Promise<IHubSiteWebData> {\n    const data = await this.clone(Web, `hubSiteData(${forceRefresh})`)<IHubSiteWebData>();\n    if (typeof data === \"string\") {\n        return JSON.parse(data);\n    }\n    return data;\n};\n\n_Web.prototype.syncHubSiteTheme = function (this: _Web): Promise<void> {\n    return spPost(this.clone(Web, `syncHubSiteTheme`));\n};\n","import { SPRest } from \"../rest\";\nimport { HubSites, IHubSites } from \"./types\";\n\nimport \"./site\";\nimport \"./web\";\n\nexport {\n    HubSite,\n    HubSites,\n    IHubSite,\n    IHubSiteInfo,\n    IHubSiteWebData,\n    IHubSites,\n} from \"./types\";\n\ndeclare module \"../rest\" {\n    interface SPRest {\n        /**\n         * Lists all of the subsites\n         */\n        readonly hubSites: IHubSites;\n    }\n}\n\nReflect.defineProperty(SPRest.prototype, \"hubSites\", {\n    configurable: true,\n    enumerable: true,\n    get: function (this: SPRest) {\n        return HubSites(this._baseUrl).configure(this._options);\n    },\n});\n","import {\n    _SharePointQueryableInstance,\n    _SharePointQueryableCollection,\n    _SharePointQueryable,\n    spInvokableFactory,\n    deleteable,\n    IDeleteable,\n} from \"../sharepointqueryable\";\nimport { assign } from \"@pnp/common\";\nimport { metadata } from \"../utils/metadata\";\nimport { body, headers } from \"@pnp/odata\";\nimport { defaultPath } from \"../decorators\";\nimport { spPost } from \"../operations\";\nimport { tag } from \"../telemetry\";\n\n/**\n * Represents a collection of navigation nodes\n *\n */\nexport class _NavigationNodes extends _SharePointQueryableCollection<INavNodeInfo[]> {\n\n    /**\t    \n     * Gets a navigation node by id\t\n     *\t\n     * @param id The id of the node\t\n     */\n    public getById(id: number): INavigationNode {\n        return tag.configure(NavigationNode(this).concat(`(${id})`), \"nns.getById\");\n    }\n\n    /**\n     * Adds a new node to the collection\n     *\n     * @param title Display name of the node\n     * @param url The url of the node\n     * @param visible If true the node is visible, otherwise it is hidden (default: true)\n     */\n    @tag(\"nns.add\")\n    public async add(title: string, url: string, visible = true): Promise<INavigationNodeAddResult> {\n\n        const postBody = body(assign(metadata(\"SP.NavigationNode\"), {\n            IsVisible: visible,\n            Title: title,\n            Url: url,\n        }));\n\n        const data = await spPost(this.clone(NavigationNodes, null), postBody);\n\n        return {\n            data,\n            node: this.getById(data.Id),\n        };\n    }\n\n    /**\n     * Moves a node to be after another node in the navigation\n     *\n     * @param nodeId Id of the node to move\n     * @param previousNodeId Id of the node after which we move the node specified by nodeId\n     */\n    @tag(\"nns.moveAfter\")\n    public moveAfter(nodeId: number, previousNodeId: number): Promise<void> {\n\n        const postBody = body({\n            nodeId: nodeId,\n            previousNodeId: previousNodeId,\n        });\n\n        return spPost(this.clone(NavigationNodes, \"MoveAfter\"), postBody);\n    }\n}\nexport interface INavigationNodes extends _NavigationNodes { }\nexport const NavigationNodes = spInvokableFactory<INavigationNodes>(_NavigationNodes);\n\n\n/**\n * Represents an instance of a navigation node\n *\n */\nexport class _NavigationNode extends _SharePointQueryableInstance<INavNodeInfo> {\n\n    public delete = deleteable(\"nn\");\n\n    /**\n     * Represents the child nodes of this node\n     */\n    public get children(): INavigationNodes {\n        return tag.configure(NavigationNodes(this, \"children\"), \"nn.children\");\n    }\n\n    /**\n     * Updates this node\n     * \n     * @param properties Properties used to update this node\n     */\n    @tag(\"nn.update\")\n    public async update(properties: Partial<INavNodeInfo>): Promise<INavNodeUpdateResult> {\n\n        const postBody = body(assign(metadata(\"SP.NavigationNode\"), properties), headers({ \"X-HTTP-Method\": \"MERGE\" }));\n\n        const data = await spPost(this, postBody);\n\n        return {\n            data,\n            node: <any>this,\n        };\n    }\n}\nexport interface INavigationNode extends _NavigationNode, IDeleteable { }\nexport const NavigationNode = spInvokableFactory<INavigationNode>(_NavigationNode);\n\nexport interface INavNodeUpdateResult {\n    data: any;\n    node: INavigationNode;\n}\n\n/**\n * Exposes the navigation components\n *\n */\n@defaultPath(\"navigation\")\nexport class _Navigation extends _SharePointQueryable {\n\n    /**\n     * Gets the quicklaunch navigation nodes for the current context\n     *\n     */\n    public get quicklaunch(): INavigationNodes {\n        return tag.configure(NavigationNodes(this, \"quicklaunch\"), \"n.quicklaunch\");\n    }\n\n    /**\n     * Gets the top bar navigation nodes for the current context\n     *\n     */\n    public get topNavigationBar(): INavigationNodes {\n        return tag.configure(NavigationNodes(this, \"topnavigationbar\"), \"n.topnavigationbar\");\n    }\n}\nexport interface INavigation {\n    readonly quicklaunch: INavigationNodes;\n    readonly topNavigationBar: INavigationNodes;\n}\nexport const Navigation = spInvokableFactory<INavigation>(_Navigation);\n\n/**\n * Represents the top level navigation service\n */\nexport class _NavigationService extends _SharePointQueryable {\n\n    constructor(path: string = null) {\n        super(\"_api/navigation\", path);\n    }\n\n    /**\n     * The MenuState service operation returns a Menu-State (dump) of a SiteMapProvider on a site.\n     * \n     * @param menuNodeKey MenuNode.Key of the start node within the SiteMapProvider If no key is provided the SiteMapProvider.RootNode will be the root of the menu state.\n     * @param depth Depth of the dump. If no value is provided a dump with the depth of 10 is returned\n     * @param mapProviderName The name identifying the SiteMapProvider to be used\n     * @param customProperties comma seperated list of custom properties to be returned.\n     */\n    @tag(\"ns.getMenuState\")\n    public getMenuState(menuNodeKey: string = null, depth = 10, mapProviderName: string = null, customProperties: string = null): Promise<IMenuNodeCollection> {\n\n        return spPost(<any>NavigationService(\"MenuState\"), body({\n            customProperties,\n            depth,\n            mapProviderName,\n            menuNodeKey,\n        }));\n    }\n\n    /**\n     * Tries to get a SiteMapNode.Key for a given URL within a site collection.\n     * \n     * @param currentUrl A url representing the SiteMapNode\n     * @param mapProviderName The name identifying the SiteMapProvider to be used\n     */\n    @tag(\"ns.getMenuNodeKey\")\n    public getMenuNodeKey(currentUrl: string, mapProviderName: string = null): Promise<string> {\n\n        return spPost(<any>NavigationService(\"MenuNodeKey\"), body({\n            currentUrl,\n            mapProviderName,\n        }));\n    }\n}\nexport interface INavigationService extends _NavigationService { }\nexport const NavigationService = (path?: string) => <INavigationService>new _NavigationService(path);\n\nexport interface IMenuNode {\n    CustomProperties: any[];\n    FriendlyUrlSegment: string;\n    IsDeleted: boolean;\n    IsHidden: boolean;\n    Key: string;\n    Nodes: IMenuNode[];\n    NodeType: number;\n    SimpleUrl: string;\n    Title: string;\n}\n\nexport interface IMenuNodeCollection {\n    FriendlyUrlPrefix: string;\n    Nodes: IMenuNode[];\n    SimpleUrl: string;\n    SPSitePrefix: string;\n    SPWebPrefix: string;\n    StartingNodeKey: string;\n    StartingNodeTitle: string;\n    Version: Date;\n}\n\nexport interface ISerializableNavigationNode {\n    Id: number;\n    Title: string;\n    Url: string;\n    IsDocLib: boolean;\n    IsExternal: boolean;\n    ParentId: number;\n    ListTemplateType: number;\n    AudienceIds: string[];\n    Children: ISerializableNavigationNode[];\n}\n\n/**\n * Result from adding a navigation node\n *\n */\nexport interface INavigationNodeAddResult {\n    data: INavNodeInfo;\n    node: INavigationNode;\n}\n\n/**\n * Represents the information describing a navigation node\n */\nexport interface INavNodeInfo {\n    AudienceIds: string[] | null;\n    Id: number;\n    IsDocLib: boolean;\n    IsExternal: boolean;\n    IsVisible: boolean;\n    ListTemplateType: number;\n    Title: string;\n    Url: string;\n}\n","import { addProp } from \"@pnp/odata\";\nimport { _Web } from \"../webs/types\";\nimport { Navigation, INavigation } from \"./types\";\n\ndeclare module \"../webs/types\" {\n    interface _Web {\n        navigation: INavigation;\n    }\n    interface IWeb {\n\n        /**\n         * Gets a navigation object that represents navigation on the Web site,\n         * including the Quick Launch area and the top navigation bar\n         */\n        navigation: INavigation;\n    }\n}\n\naddProp(_Web, \"navigation\", Navigation);\n","import { SPRest } from \"../rest\";\nimport { NavigationService, INavigationService } from \"./types\";\n\nimport \"./web\";\n\nexport {\n    INavNodeUpdateResult,\n    INavigation,\n    INavigationNode,\n    INavigationNodeAddResult,\n    INavigationNodes,\n    INavigationService,\n    Navigation,\n    NavigationNode,\n    NavigationNodes,\n    NavigationService,\n    IMenuNode,\n    IMenuNodeCollection,\n    ISerializableNavigationNode,\n    INavNodeInfo,\n} from \"./types\";\n\ndeclare module \"../rest\" {\n    interface SPRest {\n        readonly navigation: INavigationService;\n    }\n}\n\nReflect.defineProperty(SPRest.prototype, \"navigation\", {\n    configurable: true,\n    enumerable: true,\n    get: function (this: SPRest) {\n        return NavigationService().configure(this._options);\n    },\n});\n","import {\n    _SharePointQueryableInstance,\n    SharePointQueryableCollection,\n    ISharePointQueryableCollection,\n    _SharePointQueryable,\n    ISharePointQueryable,\n    spInvokableFactory,\n} from \"../sharepointqueryable\";\nimport { assign } from \"@pnp/common\";\nimport { metadata } from \"../utils/metadata\";\nimport { body } from \"@pnp/odata\";\nimport { PrincipalType, PrincipalSource } from \"../types\";\nimport { defaultPath } from \"../decorators\";\nimport { spPost } from \"../operations\";\n\nexport class _Profiles extends _SharePointQueryableInstance {\n\n    private clientPeoplePickerQuery: ClientPeoplePickerQuery;\n    private profileLoader: ProfileLoader;\n\n    /**\n     * Creates a new instance of the UserProfileQuery class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this user profile query\n     */\n    constructor(baseUrl: string | ISharePointQueryable, path = \"_api/sp.userprofiles.peoplemanager\") {\n        super(baseUrl, path);\n\n        this.clientPeoplePickerQuery = (new ClientPeoplePickerQuery(baseUrl)).configureFrom(this);\n        this.profileLoader = (new ProfileLoader(baseUrl)).configureFrom(this);\n    }\n\n    /**\n     * The url of the edit profile page for the current user\n     */\n    public get editProfileLink(): Promise<string> {\n        return this.clone(Profiles, \"EditProfileLink\").get();\n    }\n\n    /**\n     * A boolean value that indicates whether the current user's \"People I'm Following\" list is public\n     */\n    public get isMyPeopleListPublic(): Promise<boolean> {\n        return this.clone(Profiles, \"IsMyPeopleListPublic\").get();\n    }\n\n    /**\n     * A boolean value that indicates whether the current user is being followed by the specified user\n     *\n     * @param loginName The account name of the user\n     */\n    public amIFollowedBy(loginName: string): Promise<boolean> {\n        const q = this.clone(Profiles, \"amifollowedby(@v)\");\n        q.query.set(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.get();\n    }\n\n    /**\n     * A boolean value that indicates whether the current user is following the specified user\n     *\n     * @param loginName The account name of the user\n     */\n    public amIFollowing(loginName: string): Promise<boolean> {\n        const q = this.clone(Profiles, \"amifollowing(@v)\");\n        q.query.set(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.get();\n    }\n\n    /**\n     * Gets tags that the current user is following\n     *\n     * @param maxCount The maximum number of tags to retrieve (default is 20)\n     */\n    public getFollowedTags(maxCount = 20): Promise<string[]> {\n        return this.clone(Profiles, `getfollowedtags(${maxCount})`).get();\n    }\n\n    /**\n     * Gets the people who are following the specified user\n     *\n     * @param loginName The account name of the user\n     */\n    public getFollowersFor(loginName: string): Promise<any[]> {\n        const q = this.clone(Profiles, \"getfollowersfor(@v)\");\n        q.query.set(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.get();\n    }\n\n    /**\n     * Gets the people who are following the current user\n     *\n     */\n    public get myFollowers(): ISharePointQueryableCollection {\n        return SharePointQueryableCollection(this, \"getmyfollowers\");\n    }\n\n    /**\n     * Gets user properties for the current user\n     *\n     */\n    public get myProperties(): _SharePointQueryableInstance {\n        return new _Profiles(this, \"getmyproperties\");\n    }\n\n    /**\n     * Gets the people who the specified user is following\n     *\n     * @param loginName The account name of the user.\n     */\n    public getPeopleFollowedBy(loginName: string): Promise<any[]> {\n        const q = this.clone(Profiles, \"getpeoplefollowedby(@v)\");\n        q.query.set(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.get();\n    }\n\n    /**\n     * Gets user properties for the specified user.\n     *\n     * @param loginName The account name of the user.\n     */\n    public getPropertiesFor(loginName: string): Promise<any> {\n        const q = this.clone(Profiles, \"getpropertiesfor(@v)\");\n        q.query.set(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.get();\n    }\n\n    /**\n     * Gets the 20 most popular hash tags over the past week, sorted so that the most popular tag appears first\n     *\n     */\n    public get trendingTags(): Promise<IHashTagCollection> {\n        const q = this.clone(Profiles, null);\n        q.concat(\".gettrendingtags\");\n        return q.get();\n    }\n\n    /**\n     * Gets the specified user profile property for the specified user\n     *\n     * @param loginName The account name of the user\n     * @param propertyName The case-sensitive name of the property to get\n     */\n    public getUserProfilePropertyFor(loginName: string, propertyName: string): Promise<string> {\n        const q = this.clone(Profiles, `getuserprofilepropertyfor(accountname=@v, propertyname='${propertyName}')`);\n        q.query.set(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.get();\n    }\n\n    /**\n     * Removes the specified user from the user's list of suggested people to follow\n     *\n     * @param loginName The account name of the user\n     */\n    public hideSuggestion(loginName: string): Promise<void> {\n        const q = this.clone(Profiles, \"hidesuggestion(@v)\");\n        q.query.set(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return spPost(q);\n    }\n\n    /**\n     * A boolean values that indicates whether the first user is following the second user\n     *\n     * @param follower The account name of the user who might be following the followee\n     * @param followee The account name of the user who might be followed by the follower\n     */\n    public isFollowing(follower: string, followee: string): Promise<boolean> {\n        const q = this.clone(Profiles, null);\n        q.concat(`.isfollowing(possiblefolloweraccountname=@v, possiblefolloweeaccountname=@y)`);\n        q.query.set(\"@v\", `'${encodeURIComponent(follower)}'`);\n        q.query.set(\"@y\", `'${encodeURIComponent(followee)}'`);\n        return q.get();\n    }\n\n    /**\n     * Uploads and sets the user profile picture (Users can upload a picture to their own profile only). Not supported for batching.\n     *\n     * @param profilePicSource Blob data representing the user's picture in BMP, JPEG, or PNG format of up to 4.76MB\n     */\n    public setMyProfilePic(profilePicSource: Blob): Promise<void> {\n        let buffer: any = null;\n        const reader = new FileReader();\n        reader.onload = (e: any) => buffer = e.target.result;\n        reader.readAsArrayBuffer(profilePicSource);\n        const request = new _Profiles(this, \"setmyprofilepicture\");\n        return spPost(request, body(String.fromCharCode.apply(null, <any>new Uint16Array(buffer))));\n    }\n\n    /**\n     * Sets single value User Profile property\n     *\n     * @param accountName The account name of the user\n     * @param propertyName Property name\n     * @param propertyValue Property value\n     */\n    public setSingleValueProfileProperty(accountName: string, propertyName: string, propertyValue: string): Promise<void> {\n\n        return spPost(this.clone(Profiles, \"SetSingleValueProfileProperty\"), body({\n            accountName: accountName,\n            propertyName: propertyName,\n            propertyValue: propertyValue,\n        }));\n    }\n\n    /**\n     * Sets multi valued User Profile property\n     *\n     * @param accountName The account name of the user\n     * @param propertyName Property name\n     * @param propertyValues Property values\n     */\n    public setMultiValuedProfileProperty(accountName: string, propertyName: string, propertyValues: string[]): Promise<void> {\n\n        return spPost(this.clone(Profiles, \"SetMultiValuedProfileProperty\"), body({\n            accountName: accountName,\n            propertyName: propertyName,\n            propertyValues: propertyValues,\n        }));\n    }\n\n    /**\n     * Provisions one or more users' personal sites. (My Site administrator on SharePoint Online only)\n     *\n     * @param emails The email addresses of the users to provision sites for\n     */\n    public createPersonalSiteEnqueueBulk(...emails: string[]): Promise<void> {\n        return this.profileLoader.createPersonalSiteEnqueueBulk(emails);\n    }\n\n    /**\n     * Gets the user profile of the site owner\n     *\n     */\n    public get ownerUserProfile(): Promise<IUserProfile> {\n        return this.profileLoader.ownerUserProfile;\n    }\n\n    /**\n     * Gets the user profile for the current user\n     */\n    public get userProfile(): Promise<any> {\n        return this.profileLoader.userProfile;\n    }\n\n    /**\n     * Enqueues creating a personal site for this user, which can be used to share documents, web pages, and other files\n     *\n     * @param interactiveRequest true if interactively (web) initiated request, or false (default) if non-interactively (client) initiated request\n     */\n    public createPersonalSite(interactiveRequest = false): Promise<void> {\n        return this.profileLoader.createPersonalSite(interactiveRequest);\n    }\n\n    /**\n     * Sets the privacy settings for this profile\n     *\n     * @param share true to make all social data public; false to make all social data private\n     */\n    public shareAllSocialData(share: boolean): Promise<void> {\n        return this.profileLoader.shareAllSocialData(share);\n    }\n\n    /**\n     * Resolves user or group using specified query parameters\n     *\n     * @param queryParams The query parameters used to perform resolve\n     */\n    public clientPeoplePickerResolveUser(queryParams: IClientPeoplePickerQueryParameters): Promise<IPeoplePickerEntity> {\n        return this.clientPeoplePickerQuery.clientPeoplePickerResolveUser(queryParams);\n    }\n\n    /**\n     * Searches for users or groups using specified query parameters\n     *\n     * @param queryParams The query parameters used to perform search\n     */\n    public clientPeoplePickerSearchUser(queryParams: IClientPeoplePickerQueryParameters): Promise<IPeoplePickerEntity[]> {\n        return this.clientPeoplePickerQuery.clientPeoplePickerSearchUser(queryParams);\n    }\n}\nexport interface IProfiles extends _Profiles {}\nexport const Profiles = spInvokableFactory<IProfiles>(_Profiles);\n\n@defaultPath(\"_api/sp.userprofiles.profileloader.getprofileloader\")\nclass ProfileLoader extends _SharePointQueryable {\n\n    /**\n     * Provisions one or more users' personal sites. (My Site administrator on SharePoint Online only) Doesn't support batching\n     *\n     * @param emails The email addresses of the users to provision sites for\n     */\n    public createPersonalSiteEnqueueBulk(emails: string[]): Promise<void> {\n\n        return spPost(this.clone(ProfileLoaderFactory, \"createpersonalsiteenqueuebulk\", false), body({ \"emailIDs\": emails }));\n    }\n\n    /**\n     * Gets the user profile of the site owner.\n     *\n     */\n    public get ownerUserProfile(): Promise<IUserProfile> {\n        let q = this.getParent(ProfileLoaderFactory, this.parentUrl, \"_api/sp.userprofiles.profileloader.getowneruserprofile\");\n\n        if (this.hasBatch) {\n            q = q.inBatch(this.batch);\n        }\n\n        return spPost(q);\n    }\n\n    /**\n     * Gets the user profile of the current user.\n     *\n     */\n    public get userProfile(): Promise<IUserProfile> {\n        return spPost(this.clone(ProfileLoaderFactory, \"getuserprofile\"));\n    }\n\n    /**\n     * Enqueues creating a personal site for this user, which can be used to share documents, web pages, and other files.\n     *\n     * @param interactiveRequest true if interactively (web) initiated request, or false (default) if non-interactively (client) initiated request\n     */\n    public createPersonalSite(interactiveRequest = false): Promise<void> {\n        return spPost(this.clone(ProfileLoaderFactory, `getuserprofile/createpersonalsiteenque(${interactiveRequest})`));\n    }\n\n    /**\n     * Sets the privacy settings for this profile\n     *\n     * @param share true to make all social data public; false to make all social data private.\n     */\n    public shareAllSocialData(share: boolean): Promise<void> {\n        return spPost(this.clone(ProfileLoaderFactory, `getuserprofile/shareallsocialdata(${share})`));\n    }\n}\n\nconst ProfileLoaderFactory = (baseUrl: string | ISharePointQueryable, path?: string) => {\n    return new ProfileLoader(baseUrl, path);\n};\n\n@defaultPath(\"_api/sp.ui.applicationpages.clientpeoplepickerwebserviceinterface\")\nclass ClientPeoplePickerQuery extends _SharePointQueryable {\n\n    /**\n     * Resolves user or group using specified query parameters\n     *\n     * @param queryParams The query parameters used to perform resolve\n     */\n    public async clientPeoplePickerResolveUser(queryParams: IClientPeoplePickerQueryParameters): Promise<IPeoplePickerEntity> {\n        const q = this.clone(ClientPeoplePickerFactory, null);\n        q.concat(\".clientpeoplepickerresolveuser\");\n        const res = await spPost<string | { ClientPeoplePickerResolveUser: string }>(q, this.getBodyFrom(queryParams));\n\n        return JSON.parse(typeof res === \"object\" ? res.ClientPeoplePickerResolveUser : res);\n    }\n\n    /**\n     * Searches for users or groups using specified query parameters\n     *\n     * @param queryParams The query parameters used to perform search\n     */\n    public async clientPeoplePickerSearchUser(queryParams: IClientPeoplePickerQueryParameters): Promise<IPeoplePickerEntity[]> {\n        const q = this.clone(ClientPeoplePickerFactory, null);\n        q.concat(\".clientpeoplepickersearchuser\");\n        const res = await spPost<string | { ClientPeoplePickerSearchUser: string }>(q, this.getBodyFrom(queryParams));\n\n        return JSON.parse(typeof res === \"object\" ? res.ClientPeoplePickerSearchUser : res);\n    }\n\n    /**\n     * Creates ClientPeoplePickerQueryParameters request body\n     *\n     * @param queryParams The query parameters to create request body\n     */\n    private getBodyFrom(queryParams: IClientPeoplePickerQueryParameters): { body: string } {\n        return body({ \"queryParams\": assign(metadata(\"SP.UI.ApplicationPages.ClientPeoplePickerQueryParameters\"), queryParams) });\n    }\n}\n\nconst ClientPeoplePickerFactory = (baseUrl: string | ISharePointQueryable, path?: string) => {\n    return new ClientPeoplePickerQuery(baseUrl, path);\n};\n\n/**\n * Client people picker query parameters\n */\nexport interface IClientPeoplePickerQueryParameters {\n    /**\n     * Gets or sets a value that specifies whether e-mail addresses can be used to perform search.\n     */\n    AllowEmailAddresses?: boolean;\n    /**\n     * Gets or sets a value that specifies whether multiple entities are allowed.\n     */\n    AllowMultipleEntities?: boolean;\n    /**\n     * Gets or sets a value that specifies whether only e-mail addresses can be used to perform search.\n     */\n    AllowOnlyEmailAddresses?: boolean;\n    /**\n     * Gets or sets a value that specifies whether all URL zones are used to perform search.\n     */\n    AllUrlZones?: boolean;\n    /**\n     * Gets or sets a value that specifies claim providers that are used to perform search.\n     */\n    EnabledClaimProviders?: string;\n    /**\n     * Gets or sets a value that specifies whether claims are forced (if yes, multiple results for single entity can be returned).\n     */\n    ForceClaims?: boolean;\n    /**\n     * Gets or sets a value that specifies limit of results returned.\n     */\n    MaximumEntitySuggestions: number;\n    /**\n     * Gets or sets a value that specifies principal sources to perform search.\n     */\n    PrincipalSource?: PrincipalSource;\n    /**\n     * Gets or sets a value that specifies principal types to search for.\n     */\n    PrincipalType?: PrincipalType;\n    /**\n     * Gets or sets a value that specifies additional query settings.\n     */\n    QuerySettings?: IPeoplePickerQuerySettings;\n    /**\n     * Gets or sets a value that specifies the term to search for.\n     */\n    QueryString: string;\n    /**\n     * Gets or sets a value that specifies ID of the SharePoint Group that will be used to perform search.\n     */\n    SharePointGroupID?: number;\n    /**\n     * Gets or sets a value that specifies URL zones that are used to perform search.\n     */\n    UrlZone?: UrlZone;\n    /**\n     * Gets or sets a value that specifies whether search is limited to specific URL zone.\n     */\n    UrlZoneSpecified?: boolean;\n    /**\n     * Gets or sets a value that specifies GUID of the Web Application that is used to perform search.\n     */\n    WebApplicationID?: string;\n}\n\nexport interface IHashTagCollection {\n    Items: IHashTag[];\n}\n\n/**\n * People picker query settings\n */\nexport interface IPeoplePickerQuerySettings {\n    ExcludeAllUsersOnTenantClaim?: boolean;\n}\n\n/**\n * People picker entity\n */\nexport interface IPeoplePickerEntity {\n    Description: string;\n    DisplayText: string;\n    EntityData: IPeoplePickerEntityData;\n    EntityType: string;\n    IsResolved: boolean;\n    Key: string;\n    MultipleMatches: IPeoplePickerEntityData[];\n    ProviderDisplayName: string;\n    ProviderName: string;\n}\n\n/**\n * People picker entity data\n */\nexport interface IPeoplePickerEntityData {\n    AccountName?: string;\n    Department?: string;\n    Email?: string;\n    IsAltSecIdPresent?: string;\n    MobilePhone?: string;\n    ObjectId?: string;\n    OtherMails?: string;\n    PrincipalType?: string;\n    SPGroupID?: string;\n    SPUserID?: string;\n    Title?: string;\n}\n\n/**\n * Specifies the originating zone of a request received.\n */\nexport const enum UrlZone {\n    /**\n     * Specifies the default zone used for requests unless another zone is specified.\n     */\n    DefaultZone,\n    /**\n     * Specifies an intranet zone.\n     */\n    Intranet,\n    /**\n     * Specifies an Internet zone.\n     */\n    Internet,\n    /**\n     * Specifies a custom zone.\n     */\n    Custom,\n    /**\n     * Specifies an extranet zone.\n     */\n    Extranet,\n}\n\nexport interface IHashTag {\n    /**\n     * The hash tag's internal name.\n     */\n    Name?: string;\n    /**\n     * The number of times that the hash tag is used.\n     */\n    UseCount?: number;\n}\n\nexport interface IFollowedContent {\n    FollowedDocumentsUrl: string;\n    FollowedSitesUrl: string;\n}\n\nexport interface IUserProfile {\n    /**\n     * An object containing the user's FollowedDocumentsUrl and FollowedSitesUrl.\n     */\n    FollowedContent?: IFollowedContent;\n    /**\n     * The account name of the user. (SharePoint Online only)\n     */\n    AccountName?: string;\n    /**\n     * The display name of the user. (SharePoint Online only)\n     */\n    DisplayName?: string;\n    /**\n     * The FirstRun flag of the user. (SharePoint Online only)\n     */\n    O15FirstRunExperience?: number;\n    /**\n     * The personal site of the user.\n     */\n    PersonalSite?: string;\n    /**\n     * The capabilities of the user's personal site. Represents a bitwise PersonalSiteCapabilities value:\n     * None = 0; Profile Value = 1; Social Value = 2; Storage Value = 4; MyTasksDashboard Value = 8; Education Value = 16; Guest Value = 32.\n     */\n    PersonalSiteCapabilities?: number;\n    /**\n     * The error thrown when the user's personal site was first created, if any. (SharePoint Online only)\n     */\n    PersonalSiteFirstCreationError?: string;\n    /**\n     * The date and time when the user's personal site was first created. (SharePoint Online only)\n     */\n    PersonalSiteFirstCreationTime?: Date;\n    /**\n     * The status for the state of the personal site instantiation\n     */\n    PersonalSiteInstantiationState?: number;\n    /**\n     * The date and time when the user's personal site was last created. (SharePoint Online only)\n     */\n    PersonalSiteLastCreationTime?: Date;\n    /**\n     * The number of attempts made to create the user's personal site. (SharePoint Online only)\n     */\n    PersonalSiteNumberOfRetries?: number;\n    /**\n     * Indicates whether the user's picture is imported from Exchange.\n     */\n    PictureImportEnabled?: boolean;\n    /**\n     * The public URL of the personal site of the current user. (SharePoint Online only)\n     */\n    PublicUrl?: string;\n    /**\n     * The URL used to create the user's personal site.\n     */\n    UrlToCreatePersonalSite?: string;\n}\n","import { SPRest } from \"../rest\";\nimport { Profiles, IProfiles } from \"./types\";\n\nexport {\n    IProfiles,\n    Profiles,\n    IClientPeoplePickerQueryParameters,\n    IFollowedContent,\n    IHashTag,\n    IHashTagCollection,\n    IPeoplePickerEntity,\n    IPeoplePickerEntityData,\n    IPeoplePickerQuerySettings,\n    IUserProfile,\n    UrlZone,\n} from \"./types\";\n\ndeclare module \"../rest\" {\n    interface SPRest {\n        readonly profiles: IProfiles;\n    }\n}\n\nReflect.defineProperty(SPRest.prototype, \"profiles\", {\n    configurable: true,\n    enumerable: true,\n    get: function (this: SPRest) {\n        return Profiles(this._baseUrl);\n    },\n});\n","import { dateAdd, hOP } from \"@pnp/common\";\nimport {\n    _SharePointQueryableInstance,\n    SharePointQueryableCollection,\n    ISharePointQueryableCollection,\n    _SharePointQueryableCollection,\n    spInvokableFactory,\n} from \"../sharepointqueryable\";\nimport { defaultPath } from \"../decorators\";\nimport { spODataEntity } from \"../odata\";\nimport { spPost } from \"../operations\";\nimport { tag } from \"../telemetry\";\n\n@defaultPath(\"regionalsettings\")\nexport class _RegionalSettings extends _SharePointQueryableInstance<IRegionalSettingsInfo> {\n\n    /**\n     * Gets the collection of languages used in a server farm.\n     * ** Please use getInstalledLanguages instead of this method **\n     */\n    public get installedLanguages(): ISharePointQueryableCollection<{ Items: IInstalledLanguageInfo[] }> {\n        console.warn(\"Deprecated: RegionalSettings.installedLanguages is deprecated, please use RegionalSettings.getInstalledLanguages\");\n        return <any>tag.configure(SharePointQueryableCollection(this, \"installedlanguages\"), \"rs.installedLanguages\");\n    }\n\n    /**\n     * Gets time zone\n     */\n    public get timeZone(): ITimeZone {\n        return tag.configure(TimeZone(this), \"rs.tz\");\n    }\n\n    /**\n     * Gets time zones\n     */\n    public get timeZones(): ITimeZones {\n        return tag.configure(TimeZones(this), \"rs.tzs\");\n    }\n\n    /**\n     * Gets the collection of languages used in a server farm.\n     */\n    public async getInstalledLanguages(): Promise<IInstalledLanguageInfo[]> {\n        const results: { Items: IInstalledLanguageInfo[] } = await tag.configure(SharePointQueryableCollection(this, \"installedlanguages\"), \"rs.getInstalledLanguages\")();\n        return results.Items;\n    }\n}\nexport interface IRegionalSettings extends _RegionalSettings { }\nexport const RegionalSettings = spInvokableFactory<IRegionalSettings>(_RegionalSettings);\n\n@defaultPath(\"timezone\")\nexport class _TimeZone extends _SharePointQueryableInstance<ITimeZoneInfo> {\n\n    /**\n     * Gets an Local Time by UTC Time\n     *\n     * @param utcTime UTC Time as Date or ISO String\n     */\n    @tag(\"tz.utcToLocalTime\")\n    public async utcToLocalTime(utcTime: string | Date): Promise<string> {\n\n        let dateIsoString: string;\n\n        if (typeof utcTime === \"string\") {\n            dateIsoString = utcTime;\n        } else {\n            dateIsoString = utcTime.toISOString();\n        }\n\n        const res = await spPost(this.clone(TimeZone, `utctolocaltime('${dateIsoString}')`));\n        return hOP(res, \"UTCToLocalTime\") ? res.UTCToLocalTime : res;\n    }\n\n    /**\n     * Gets an UTC Time by Local Time\n     *\n     * @param localTime Local Time as Date or ISO String\n     */\n    @tag(\"tz.localTimeToUTC\")\n    public async localTimeToUTC(localTime: string | Date): Promise<string> {\n\n        let dateIsoString: string;\n\n        if (typeof localTime === \"string\") {\n            dateIsoString = localTime;\n        } else {\n            dateIsoString = dateAdd(localTime, \"minute\", localTime.getTimezoneOffset() * -1).toISOString();\n        }\n\n        const res = await spPost(this.clone(TimeZone, `localtimetoutc('${dateIsoString}')`));\n\n        return hOP(res, \"LocalTimeToUTC\") ? res.LocalTimeToUTC : res;\n    }\n}\nexport interface ITimeZone extends _TimeZone { }\nexport const TimeZone = spInvokableFactory<ITimeZone>(_TimeZone);\n\n@defaultPath(\"timezones\")\nexport class _TimeZones extends _SharePointQueryableCollection<ITimeZoneInfo[]> {\n\n    /**\n     * Gets an TimeZone by id (see: https://msdn.microsoft.com/en-us/library/office/jj247008.aspx)\n     *\n     * @param id The integer id of the timezone to retrieve\n     */\n    @tag(\"tzs.getById\")\n    public getById(id: number): Promise<ITimeZone & ITimeZoneInfo> {\n        // do the post and merge the result into a TimeZone instance so the data and methods are available\n        return spPost(this.clone(TimeZones, `GetById(${id})`).usingParser(spODataEntity(TimeZone)));\n    }\n}\nexport interface ITimeZones extends _TimeZones { }\nexport const TimeZones = spInvokableFactory<ITimeZones>(_TimeZones);\n\n/**\n * This is the data for Regional Settings\n */\nexport interface IRegionalSettingsInfo {\n    AdjustHijriDays: number;\n    AlternateCalendarType: number;\n    AM: string;\n    CalendarType: number;\n    Collation: number;\n    CollationLCID: number;\n    DateFormat: number;\n    DateSeparator: string;\n    DecimalSeparator: string;\n    DigitGrouping: string;\n    FirstDayOfWeek: number;\n    FirstWeekOfYear: number;\n    IsEastAsia: boolean;\n    IsRightToLeft: boolean;\n    IsUIRightToLeft: boolean;\n    ListSeparator: string;\n    LocaleId: number;\n    NegativeSign: string;\n    NegNumberMode: number;\n    PM: string;\n    PositiveSign: string;\n    ShowWeeks: boolean;\n    ThousandSeparator: string;\n    Time24: boolean;\n    TimeMarkerPosition: number;\n    TimeSeparator: string;\n    WorkDayEndHour: number;\n    WorkDays: number;\n    WorkDayStartHour: number;\n}\n\nexport interface IInstalledLanguageInfo {\n    DisplayName: string;\n    LanguageTag: string;\n    Lcid: number;\n}\n\nexport interface ITimeZoneInfo {\n    Description: string;\n    Id: number;\n    Information: {\n        Bias: number;\n        DaylightBias: number;\n        StandardBias: number;\n    };\n}\n\nexport interface IUserResources {\n    /**\n     * Gets the resource string for the title\n     */\n    titleResource(cultureName: string): Promise<string>;\n    /**\n     * Gets the resource string for the title description\n     */\n    descriptionResource(cultureName: string): Promise<string>;\n}\n","import { _SharePointQueryable, SharePointQueryable } from \"../sharepointqueryable\";\nimport { spPost } from \"../operations\";\nimport { body } from \"@pnp/odata\";\n\nexport function getValueForUICultureBinder(propName: string): (this: _SharePointQueryable, cultureName: string) => Promise<string> {\n    return function (this: _SharePointQueryable, cultureName: string): Promise<string> {\n        return spPost(this.clone(SharePointQueryable, `${propName}/getValueForUICulture`), body({ cultureName }));\n    };\n}\n","import { addProp } from \"@pnp/odata\";\nimport { _Web } from \"../webs/types\";\nimport { RegionalSettings, IRegionalSettings, IUserResources } from \"./types\";\nimport { getValueForUICultureBinder } from \"./funcs\";\n\ndeclare module \"../webs/types\" {\n    interface _Web extends IUserResources {\n        regionalSettings: IRegionalSettings;\n    }\n    interface IWeb extends IUserResources {\n        /**\n         * Regional settings for this web\n         */\n        regionalSettings: IRegionalSettings;\n    }\n}\n\naddProp(_Web, \"regionalSettings\", RegionalSettings);\n\n_Web.prototype.titleResource = getValueForUICultureBinder(\"titleResource\");\n_Web.prototype.descriptionResource = getValueForUICultureBinder(\"descriptionResource\");\n","import {\n    _SharePointQueryableInstance,\n    _SharePointQueryableCollection,\n    spInvokableFactory,\n    deleteable,\n    IDeleteable,\n} from \"../sharepointqueryable\";\nimport { assign, ITypedHash } from \"@pnp/common\";\nimport { body } from \"@pnp/odata\";\nimport { defaultPath } from \"../decorators\";\nimport { spPost } from \"../operations\";\nimport { tag } from \"../telemetry\";\nimport { IBasePermissions } from \"../security\";\nimport { metadata } from \"../utils/metadata\";\n\n@defaultPath(\"usercustomactions\")\nexport class _UserCustomActions extends _SharePointQueryableCollection<IUserCustomActionInfo[]> {\n\n    /**\t   \n     * Returns the user custom action with the specified id\t     \n     *\t    \n     * @param id The GUID id of the user custom action to retrieve\t     \n     */\n    public getById(id: string): IUserCustomAction {\n        return tag.configure(UserCustomAction(this).concat(`('${id}')`), \"ucas.getById\");\n    }\n\n    /**\n     * Creates a user custom action\n     *\n     * @param properties The information object of property names and values which define the new user custom action\n     */\n    @tag(\"ucas.add\")\n    public async add(properties: ITypedHash<any>): Promise<IUserCustomActionAddResult> {\n        const data = await spPost(this, body(assign(metadata(\"SP.UserCustomAction\"), properties)));\n        return {\n            action: this.getById(data.Id),\n            data,\n        };\n    }\n\n    /**\n     * Deletes all user custom actions in the collection\n     */\n    @tag(\"ucas.clear\")\n    public clear(): Promise<void> {\n        return spPost(this.clone(UserCustomActions, \"clear\"));\n    }\n}\nexport interface IUserCustomActions extends _UserCustomActions { }\nexport const UserCustomActions = spInvokableFactory<IUserCustomActions>(_UserCustomActions);\n\nexport class _UserCustomAction extends _SharePointQueryableInstance<IUserCustomActionInfo> {\n\n    public delete = deleteable(\"uca\");\n\n    /**\n    * Updates this user custom action with the supplied properties\n    *\n    * @param properties An information object of property names and values to update for this user custom action\n    */\n    public update: any = this._update<IUserCustomActionUpdateResult, ITypedHash<any>>(\"SP.UserCustomAction\", (data) => ({ data, action: <any>this }));\n}\nexport interface IUserCustomAction extends _UserCustomAction, IDeleteable { }\nexport const UserCustomAction = spInvokableFactory<IUserCustomAction>(_UserCustomAction);\n\n/**\n * Result from adding a user custom action\n */\nexport interface IUserCustomActionAddResult {\n    /*\n     * The raw data returned from the add operation\n     */\n    data: any;\n\n    /*\n     * The added UserCustomAction\n     */\n    action: IUserCustomAction;\n}\n\n/**\n * Result from udating a user custom action\n */\nexport interface IUserCustomActionUpdateResult {\n    /*\n     * The raw data returned from the update operation\n     */\n    data: any;\n\n    /*\n     * The updated UserCustomAction\n     */\n    action: IUserCustomAction;\n}\n\nexport enum UserCustomActionRegistrationType {\n    None,\n    List,\n    ContentType,\n    ProgId,\n    FileType,\n}\n\nexport enum UserCustomActionScope {\n    Unknown,\n    Site = 2,\n    Web,\n    List,\n}\n\nexport interface IUserCustomActionInfo {\n    CommandUIExtension: string;\n    Description: string;\n    Group: string;\n    Id: string;\n    ImageUrl: string;\n    Location: string;\n    Name: string;\n    RegistrationId: string;\n    RegistrationType: UserCustomActionRegistrationType;\n    Rights: IBasePermissions;\n    Scope: UserCustomActionScope;\n    ScriptBlock: string;\n    ScriptSrc: string;\n    Sequence: number;\n    Title: string;\n    Url: string;\n    VersionOfUserCustomAction: string;\n}\n","import { _UserCustomAction } from \"../user-custom-actions/types\";\nimport { getValueForUICultureBinder } from \"./funcs\";\nimport { IUserResources } from \"./types\";\n\ndeclare module \"../user-custom-actions/types\" {\n    interface _UserCustomAction extends IUserResources {}\n    interface IUserCustomAction extends IUserResources {}\n}\n\n_UserCustomAction.prototype.titleResource = getValueForUICultureBinder(\"titleResource\");\n_UserCustomAction.prototype.descriptionResource = getValueForUICultureBinder(\"descriptionResource\");\n","import { _List } from \"../lists/types\";\nimport { getValueForUICultureBinder } from \"./funcs\";\nimport { IUserResources } from \"./types\";\n\ndeclare module \"../lists/types\" {\n    interface _List extends IUserResources {}\n    interface IList extends IUserResources {}\n}\n\n_List.prototype.titleResource = getValueForUICultureBinder(\"titleResource\");\n_List.prototype.descriptionResource = getValueForUICultureBinder(\"descriptionResource\");\n","import { _Field } from \"../fields/types\";\nimport { getValueForUICultureBinder } from \"./funcs\";\nimport { IUserResources } from \"./types\";\n\ndeclare module \"../fields/types\" {\n    interface _Field extends IUserResources {}\n    interface IField extends IUserResources {}\n}\n\n_Field.prototype.titleResource = getValueForUICultureBinder(\"titleResource\");\n_Field.prototype.descriptionResource = getValueForUICultureBinder(\"descriptionResource\");\n","import { _ContentType } from \"../content-types/types\";\nimport { getValueForUICultureBinder } from \"./funcs\";\nimport { IUserResources } from \"./types\";\n\ndeclare module \"../content-types/types\" {\n    interface _ContentType extends IUserResources {}\n    interface IContentType extends IUserResources {}\n}\n\n_ContentType.prototype.titleResource = getValueForUICultureBinder(\"titleResource\");\n_ContentType.prototype.descriptionResource = getValueForUICultureBinder(\"descriptionResource\");\n","import { _SharePointQueryable, ISharePointQueryable } from \"../sharepointqueryable\";\nimport { extractWebUrl } from \"../utils/extractweburl\";\nimport { defaultPath } from \"../decorators\";\nimport { spPost } from \"../operations\";\nimport { body } from \"@pnp/odata\";\nimport { tag } from \"../telemetry\";\n\n@defaultPath(\"_api/SP.RelatedItemManager\")\nexport class _RelatedItemManager extends _SharePointQueryable implements IRelatedItemManager {\n\n    @tag(\"rim.getRelatedItems\")\n    public getRelatedItems(sourceListName: string, sourceItemId: number): Promise<IRelatedItem[]> {\n\n        const query = this.clone(<any>RelatedItemManager, null);\n        query.concat(\".GetRelatedItems\");\n\n        return spPost(query, body({\n            SourceItemID: sourceItemId,\n            SourceListName: sourceListName,\n        }));\n    }\n\n    @tag(\"rim.getPageOneRelatedItems\")\n    public getPageOneRelatedItems(sourceListName: string, sourceItemId: number): Promise<IRelatedItem[]> {\n\n        const query = this.clone(<any>RelatedItemManager, null);\n        query.concat(\".GetPageOneRelatedItems\");\n\n        return spPost(query, body({\n            SourceItemID: sourceItemId,\n            SourceListName: sourceListName,\n        }));\n    }\n\n    @tag(\"rim.addSingleLink\")\n    public addSingleLink(sourceListName: string,\n        sourceItemId: number,\n        sourceWebUrl: string,\n        targetListName: string,\n        targetItemID: number,\n        targetWebUrl: string,\n        tryAddReverseLink = false): Promise<void> {\n\n        const query = this.clone(<any>RelatedItemManager, null);\n        query.concat(\".AddSingleLink\");\n\n        return spPost(query, body({\n            SourceItemID: sourceItemId,\n            SourceListName: sourceListName,\n            SourceWebUrl: sourceWebUrl,\n            TargetItemID: targetItemID,\n            TargetListName: targetListName,\n            TargetWebUrl: targetWebUrl,\n            TryAddReverseLink: tryAddReverseLink,\n        }));\n    }\n\n    @tag(\"rim.ToUrl\")\n    public addSingleLinkToUrl(sourceListName: string, sourceItemId: number, targetItemUrl: string, tryAddReverseLink = false): Promise<void> {\n\n        const query = this.clone(<any>RelatedItemManager, null);\n        query.concat(\".AddSingleLinkToUrl\");\n\n        return spPost(query, body({\n            SourceItemID: sourceItemId,\n            SourceListName: sourceListName,\n            TargetItemUrl: targetItemUrl,\n            TryAddReverseLink: tryAddReverseLink,\n        }));\n    }\n\n    @tag(\"rim.FromUrl\")\n    public addSingleLinkFromUrl(sourceItemUrl: string, targetListName: string, targetItemId: number, tryAddReverseLink = false): Promise<void> {\n\n        const query = this.clone(<any>RelatedItemManager, null);\n        query.concat(\".AddSingleLinkFromUrl\");\n\n        return spPost(query, body({\n            SourceItemUrl: sourceItemUrl,\n            TargetItemID: targetItemId,\n            TargetListName: targetListName,\n            TryAddReverseLink: tryAddReverseLink,\n        }));\n    }\n\n    @tag(\"rim.deleteSingleLink\")\n    public deleteSingleLink(sourceListName: string,\n        sourceItemId: number,\n        sourceWebUrl: string,\n        targetListName: string,\n        targetItemId: number,\n        targetWebUrl: string,\n        tryDeleteReverseLink = false): Promise<void> {\n\n        const query = this.clone(<any>RelatedItemManager, null);\n        query.concat(\".DeleteSingleLink\");\n\n        return spPost(query, body({\n            SourceItemID: sourceItemId,\n            SourceListName: sourceListName,\n            SourceWebUrl: sourceWebUrl,\n            TargetItemID: targetItemId,\n            TargetListName: targetListName,\n            TargetWebUrl: targetWebUrl,\n            TryDeleteReverseLink: tryDeleteReverseLink,\n        }));\n    }\n}\n\nexport interface IRelatedItemManager {\n\n    /**\n     * Gets all the related items for the given item specification\n     * \n     * @param sourceListName The list name or list id\n     * @param sourceItemId The item id\n     */\n    getRelatedItems(sourceListName: string, sourceItemId: number): Promise<IRelatedItem[]>;\n\n    /**\n     * Gets the first page of related items for the given item specification\n     * \n     * @param sourceListName The list name or list id\n     * @param sourceItemId The item id\n     */\n    getPageOneRelatedItems(sourceListName: string, sourceItemId: number): Promise<IRelatedItem[]>;\n\n    /**\n     * Adds a single link using full specifications for source and target\n     * \n     * @param sourceListName The source list name or list id\n     * @param sourceItemId The source item id\n     * @param sourceWebUrl The source web absolute url\n     * @param targetListName The target list name or list id\n     * @param targetItemID The target item id\n     * @param targetWebUrl The target web absolute url\n     * @param tryAddReverseLink If set to true try to add the reverse link (will not return error if it fails)\n     */\n    addSingleLink(sourceListName: string,\n        sourceItemId: number,\n        sourceWebUrl: string,\n        targetListName: string,\n        targetItemID: number,\n        targetWebUrl: string,\n        tryAddReverseLink?: boolean): Promise<void>;\n\n    /**\n     * Adds a related item link from an item specified by list name and item id, to an item specified by url\n     *\n     * @param sourceListName The source list name or list id\n     * @param sourceItemId The source item id\n     * @param targetItemUrl The target item url\n     * @param tryAddReverseLink If set to true try to add the reverse link (will not return error if it fails)\n     */\n    addSingleLinkToUrl(sourceListName: string, sourceItemId: number, targetItemUrl: string, tryAddReverseLink?: boolean): Promise<void>;\n\n    /**\n     * Adds a related item link from an item specified by url, to an item specified by list name and item id\n     *\n     * @param sourceItemUrl The source item url\n     * @param targetListName The target list name or list id\n     * @param targetItemId The target item id\n     * @param tryAddReverseLink If set to true try to add the reverse link (will not return error if it fails)\n     */\n    addSingleLinkFromUrl(sourceItemUrl: string, targetListName: string, targetItemId: number, tryAddReverseLink?: boolean): Promise<void>;\n\n    /**\n     * Deletes a single link\n     * \n     * @param sourceListName \n     * @param sourceItemId \n     * @param sourceWebUrl \n     * @param targetListName \n     * @param targetItemId \n     * @param targetWebUrl \n     * @param tryDeleteReverseLink \n     */\n    deleteSingleLink(sourceListName: string,\n        sourceItemId: number,\n        sourceWebUrl: string,\n        targetListName: string,\n        targetItemId: number,\n        targetWebUrl: string,\n        tryDeleteReverseLink?: boolean): Promise<void>;\n}\n\nexport const RelatedItemManager = (url: string | ISharePointQueryable): IRelatedItemManager => new _RelatedItemManager(extractWebUrl(typeof url === \"string\" ? url : url.toUrl()));\n\nexport interface IRelatedItem {\n    ListId: string;\n    ItemId: number;\n    Url: string;\n    Title: string;\n    WebId: string;\n    IconUrl: string;\n}\n","import { _SharePointQueryableInstance, ISharePointQueryable } from \"../sharepointqueryable\";\nimport { assign, hOP, getHashCode, objectDefinedNotNull, isArray, IConfigOptions } from \"@pnp/common\";\nimport { metadata } from \"../utils/metadata\";\nimport { CachingOptions, body } from \"@pnp/odata\";\nimport { ISearchQuery, ISearchResponse, ISearchResult, ISearchBuilder, SearchQueryInit } from \"./types\";\nimport { spPost } from \"../operations\";\nimport { defaultPath } from \"../decorators\";\nimport { tag } from \"../telemetry\";\n\nconst funcs = new Map<string, string>([\n    [\"text\", \"Querytext\"],\n    [\"template\", \"QueryTemplate\"],\n    [\"sourceId\", \"SourceId\"],\n    [\"trimDuplicatesIncludeId\", \"\"],\n    [\"startRow\", \"\"],\n    [\"rowLimit\", \"\"],\n    [\"rankingModelId\", \"\"],\n    [\"rowsPerPage\", \"\"],\n    [\"selectProperties\", \"\"],\n    [\"culture\", \"\"],\n    [\"timeZoneId\", \"\"],\n    [\"refinementFilters\", \"\"],\n    [\"refiners\", \"\"],\n    [\"hiddenConstraints\", \"\"],\n    [\"sortList\", \"\"],\n    [\"timeout\", \"\"],\n    [\"hithighlightedProperties\", \"\"],\n    [\"clientType\", \"\"],\n    [\"personalizationData\", \"\"],\n    [\"resultsURL\", \"\"],\n    [\"queryTag\", \"\"],\n    [\"properties\", \"\"],\n    [\"queryTemplatePropertiesUrl\", \"\"],\n    [\"reorderingRules\", \"\"],\n    [\"hitHighlightedMultivaluePropertyLimit\", \"\"],\n    [\"collapseSpecification\", \"\"],\n    [\"uiLanguage\", \"\"],\n    [\"desiredSnippetLength\", \"\"],\n    [\"maxSnippetLength\", \"\"],\n    [\"summaryLength\", \"\"],\n]);\n\nconst props = new Map<string, string>([]);\n\nfunction toPropCase(str: string) {\n    return str.replace(/^(.)/, ($1) => $1.toUpperCase());\n}\n\n/**\n * Creates a new instance of the SearchQueryBuilder\n * \n * @param queryText Initial query text\n * @param _query Any initial query configuration\n */\nexport function SearchQueryBuilder(queryText = \"\", _query = {}): ISearchBuilder {\n\n    return new Proxy(<any>{\n        query: Object.assign({\n            Querytext: queryText,\n        }, _query),\n    },\n        {\n            get(self, propertyKey, proxy) {\n\n                const pk = propertyKey.toString();\n\n                if (pk === \"toSearchQuery\") {\n                    return () => self.query;\n                }\n\n                if (funcs.has(pk)) {\n                    return (...value: any[]) => {\n                        const mappedPk = funcs.get(pk);\n                        self.query[mappedPk.length > 0 ? mappedPk : toPropCase(pk)] = value.length > 1 ? value : value[0];\n                        return proxy;\n                    };\n                }\n                const propKey = props.has(pk) ? props.get(pk) : toPropCase(pk);\n                self.query[propKey] = true;\n                return proxy;\n            },\n        });\n}\n\nconst queryRegex = /_api\\/search\\/postquery$/i;\n\n/**\n * Describes the search API\n *\n */\n@defaultPath(\"_api/search/postquery\")\nexport class _Search extends _SharePointQueryableInstance {\n\n    /**\n     * @returns Promise\n     */\n    @tag(\"se.execute\")\n    public async execute(queryInit: SearchQueryInit): Promise<SearchResults> {\n\n        const query = this.parseQuery(queryInit);\n\n        const postBody = body({\n            request: assign(\n                metadata(\"Microsoft.Office.Server.Search.REST.SearchRequest\"),\n                Object.assign(\n                    {},\n                    query,\n                    {\n                        HitHighlightedProperties: this.fixArrProp(query.HitHighlightedProperties),\n                        Properties: this.fixArrProp(query.Properties),\n                        RefinementFilters: this.fixArrProp(query.RefinementFilters),\n                        ReorderingRules: this.fixArrProp(query.ReorderingRules),\n                        SelectProperties: this.fixArrProp(query.SelectProperties),\n                        SortList: this.fixArrProp(query.SortList),\n                    })),\n        });\n\n        // if we are using caching with this search request, then we need to handle some work upfront to enable that\n        if (this.data.useCaching) {\n\n            // force use of the cache for this request if .usingCaching was called\n            this._forceCaching = true;\n\n            // because all the requests use the same url they would collide in the cache we use a special key\n            const cacheKey = `PnPjs.SearchWithCaching(${getHashCode(postBody.body)})`;\n\n            if (objectDefinedNotNull(this.data.cachingOptions)) {\n                // if our key ends in the postquery url we overwrite it\n                if (queryRegex.test(this.data.cachingOptions.key)) {\n                    this.data.cachingOptions.key = cacheKey;\n                }\n            } else {\n                this.data.cachingOptions = new CachingOptions(cacheKey);\n            }\n        }\n\n        const data = await spPost(this, postBody);\n        return new SearchResults(data, this.toUrl(), query);\n    }\n\n    /**\n     * Fix array property\n     *\n     * @param prop property to fix for container struct\n     */\n    private fixArrProp(prop: any): { results: any[] } {\n        if (typeof prop === \"undefined\") {\n            return ({ results: [] });\n        }\n\n        return { results: isArray(prop) ? prop : [prop] };\n    }\n\n    /**\n     * Translates one of the query initializers into a SearchQuery instance\n     * \n     * @param query \n     */\n    private parseQuery(query: SearchQueryInit): ISearchQuery {\n\n        let finalQuery: ISearchQuery;\n\n        if (typeof query === \"string\") {\n            finalQuery = { Querytext: query };\n        } else if ((query as ISearchBuilder).toSearchQuery) {\n            finalQuery = (query as ISearchBuilder).toSearchQuery();\n        } else {\n            finalQuery = <ISearchQuery>query;\n        }\n\n        return finalQuery;\n    }\n}\n\nexport interface ISearch {\n    (queryInit: SearchQueryInit): Promise<SearchResults>;\n}\n\nexport const Search = (baseUrl: string | ISharePointQueryable, options: IConfigOptions = {}): ISearch => (queryInit: SearchQueryInit) => {\n    return (new _Search(baseUrl)).configure(options).execute(queryInit);\n};\n\nexport class SearchResults {\n\n    constructor(rawResponse: any,\n        private _url: string,\n        private _query: ISearchQuery,\n        private _raw: ISearchResponse = null,\n        private _primary: ISearchResult[] = null) {\n\n        this._url = this._url.replace(queryRegex, \"\");\n        this._raw = rawResponse.postquery ? rawResponse.postquery : rawResponse;\n    }\n\n    public get ElapsedTime(): number {\n        return this.RawSearchResults.ElapsedTime;\n    }\n\n    public get RowCount(): number {\n        return this.RawSearchResults.PrimaryQueryResult.RelevantResults.RowCount;\n    }\n\n    public get TotalRows(): number {\n        return this.RawSearchResults.PrimaryQueryResult.RelevantResults.TotalRows;\n    }\n\n    public get TotalRowsIncludingDuplicates(): number {\n        return this.RawSearchResults.PrimaryQueryResult.RelevantResults.TotalRowsIncludingDuplicates;\n    }\n\n    public get RawSearchResults(): ISearchResponse {\n        return this._raw;\n    }\n\n    public get PrimarySearchResults(): ISearchResult[] {\n        if (this._primary === null) {\n            this._primary = this.formatSearchResults(this._raw.PrimaryQueryResult.RelevantResults.Table.Rows);\n        }\n        return this._primary;\n    }\n\n    /**\n     * Gets a page of results\n     *\n     * @param pageNumber Index of the page to return. Used to determine StartRow\n     * @param pageSize Optional, items per page (default = 10)\n     */\n    public getPage(pageNumber: number, pageSize?: number): Promise<SearchResults> {\n\n        // if we got all the available rows we don't have another page\n        if (this.TotalRows < this.RowCount) {\n            return Promise.resolve(null);\n        }\n\n        // if pageSize is supplied, then we use that regardless of any previous values\n        // otherwise get the previous RowLimit or default to 10\n        const rows = pageSize !== undefined ? pageSize : hOP(this._query, \"RowLimit\") ? this._query.RowLimit : 10;\n\n        const query: ISearchQuery = assign(this._query, {\n            RowLimit: rows,\n            StartRow: rows * (pageNumber - 1),\n        });\n\n        // we have reached the end\n        if (query.StartRow > this.TotalRows) {\n            return Promise.resolve(null);\n        }\n\n        return Search(this._url)(query);\n    }\n\n    /**\n     * Formats a search results array\n     *\n     * @param rawResults The array to process\n     */\n    protected formatSearchResults(rawResults: any): ISearchResult[] {\n\n        const results = new Array<ISearchResult>();\n        const tempResults = rawResults.results ? rawResults.results : rawResults;\n\n        for (const tempResult of tempResults) {\n\n            const cells: { Key: string, Value: any }[] = tempResult.Cells.results ? tempResult.Cells.results : tempResult.Cells;\n\n            results.push(cells.reduce((res, cell) => {\n\n                Reflect.defineProperty(res, cell.Key,\n                    {\n                        configurable: false,\n                        enumerable: true,\n                        value: cell.Value,\n                        writable: false,\n                    });\n\n                return res;\n\n            }, {}));\n        }\n\n        return results;\n    }\n}\n","export type SearchQueryInit = string | ISearchQuery | ISearchBuilder;\n\nexport interface ISearchBuilder {\n    query: any;\n    readonly bypassResultTypes: this;\n    readonly enableStemming: this;\n    readonly enableInterleaving: this;\n    readonly enableFql: this;\n    readonly enableNicknames: this;\n    readonly enablePhonetic: this;\n    readonly trimDuplicates: this;\n    readonly processBestBets: this;\n    readonly enableQueryRules: this;\n    readonly enableSorting: this;\n    readonly generateBlockRankLog: this;\n    readonly processPersonalFavorites: this;\n    readonly enableOrderingHitHighlightedProperty: this;\n\n    culture(culture: number): this;\n    rowLimit(n: number): this;\n    startRow(n: number): this;\n    sourceId(id: string): this;\n    text(queryText: string): this;\n    template(template: string): this;\n    trimDuplicatesIncludeId(n: number): this;\n    rankingModelId(id: string): this;\n    rowsPerPage(n: number): this;\n    selectProperties(...properties: string[]): this;\n    timeZoneId(id: number): this;\n    refinementFilters(...filters: string[]): this;\n    refiners(refiners: string): this;\n    hiddenConstraints(constraints: string): this;\n    sortList(...sorts: ISort[]): this;\n    timeout(milliseconds: number): this;\n    hithighlightedProperties(...properties: string[]): this;\n    clientType(clientType: string): this;\n    personalizationData(data: string): this;\n    resultsURL(url: string): this;\n    queryTag(tags: string): this;\n    properties(...properties: ISearchProperty[]): this;\n    queryTemplatePropertiesUrl(url: string): this;\n    reorderingRules(...rules: IReorderingRule[]): this;\n    hitHighlightedMultivaluePropertyLimit(limit: number): this;\n    collapseSpecification(spec: string): this;\n    uiLanguage(lang: number): this;\n    desiredSnippetLength(len: number): this;\n    maxSnippetLength(len: number): this;\n    summaryLength(len: number): this;\n\n    /* included method */\n    toSearchQuery(): ISearchQuery;\n}\n\n/**\n * Describes the SearchQuery interface\n */\nexport interface ISearchQuery {\n\n    /**\n     * A string that contains the text for the search query.\n     */\n    Querytext?: string;\n\n    /**\n     * A string that contains the text that replaces the query text, as part of a query transform.\n     */\n    QueryTemplate?: string;\n\n    /**\n     * A Boolean value that specifies whether the result tables that are returned for\n     * the result block are mixed with the result tables that are returned for the original query.\n     */\n    EnableInterleaving?: boolean;\n\n    /**\n     * A Boolean value that specifies whether stemming is enabled.\n     */\n    EnableStemming?: boolean;\n\n    /**\n     * A Boolean value that specifies whether duplicate items are removed from the results.\n     */\n    TrimDuplicates?: boolean;\n\n    /**\n     * A Boolean value that specifies whether the exact terms in the search query are used to find matches, or if nicknames are used also.\n     */\n    EnableNicknames?: boolean;\n\n    /**\n     * A Boolean value that specifies whether the query uses the FAST Query Language (FQL).\n     */\n    EnableFQL?: boolean;\n\n    /**\n     * A Boolean value that specifies whether the phonetic forms of the query terms are used to find matches.\n     */\n    EnablePhonetic?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to perform result type processing for the query.\n     */\n    BypassResultTypes?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to return best bet results for the query.\n     * This parameter is used only when EnableQueryRules is set to true, otherwise it is ignored.\n     */\n    ProcessBestBets?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to enable query rules for the query.\n     */\n    EnableQueryRules?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to sort search results.\n     */\n    EnableSorting?: boolean;\n\n    /**\n     * Specifies whether to return block rank log information in the BlockRankLog property of the interleaved result table.\n     * A block rank log contains the textual information on the block score and the documents that were de-duplicated.\n     */\n    GenerateBlockRankLog?: boolean;\n\n    /**\n     * The result source ID to use for executing the search query.\n     */\n    SourceId?: string;\n\n    /**\n     * The ID of the ranking model to use for the query.\n     */\n    RankingModelId?: string;\n\n    /**\n     * The first row that is included in the search results that are returned.\n     * You use this parameter when you want to implement paging for search results.\n     */\n    StartRow?: number;\n\n    /**\n     * The maximum number of rows overall that are returned in the search results.\n     * Compared to RowsPerPage, RowLimit is the maximum number of rows returned overall.\n     */\n    RowLimit?: number;\n\n    /**\n     * The maximum number of rows to return per page.\n     * Compared to RowLimit, RowsPerPage refers to the maximum number of rows to return per page,\n     * and is used primarily when you want to implement paging for search results.\n     */\n    RowsPerPage?: number;\n\n    /**\n     * The managed properties to return in the search results.\n     */\n    SelectProperties?: string[];\n\n    /**\n     * The locale ID (LCID) for the query.\n     */\n    Culture?: number;\n\n    /**\n     * The set of refinement filters used when issuing a refinement query (FQL)\n     */\n    RefinementFilters?: string[];\n\n    /**\n     * The set of refiners to return in a search result.\n     */\n    Refiners?: string;\n\n    /**\n     * The additional query terms to append to the query.\n     */\n    HiddenConstraints?: string;\n\n    /**\n     * The list of properties by which the search results are ordered.\n     */\n    SortList?: ISort[];\n\n    /**\n     * The amount of time in milliseconds before the query request times out.\n     */\n    Timeout?: number;\n\n    /**\n     * The properties to highlight in the search result summary when the property value matches the search terms entered by the user.\n     */\n    HitHighlightedProperties?: string[];\n\n    /**\n     * The type of the client that issued the query.\n     */\n    ClientType?: string;\n\n    /**\n     * The GUID for the user who submitted the search query.\n     */\n    PersonalizationData?: string;\n\n    /**\n     * The URL for the search results page.\n     */\n    ResultsUrl?: string;\n\n    /**\n     * Custom tags that identify the query. You can specify multiple query tags\n     */\n    QueryTag?: string;\n\n    /**\n     * Properties to be used to configure the search query\n     */\n    Properties?: ISearchProperty[];\n\n    /**\n     *  A Boolean value that specifies whether to return personal favorites with the search results.\n     */\n    ProcessPersonalFavorites?: boolean;\n\n    /**\n     * The location of the queryparametertemplate.xml file. This file is used to enable anonymous users to make Search REST queries.\n     */\n    QueryTemplatePropertiesUrl?: string;\n\n    /**\n     * Special rules for reordering search results.\n     * These rules can specify that documents matching certain conditions are ranked higher or lower in the results.\n     * This property applies only when search results are sorted based on rank.\n     */\n    ReorderingRules?: IReorderingRule[];\n\n    /**\n     * The number of properties to show hit highlighting for in the search results.\n     */\n    HitHighlightedMultivaluePropertyLimit?: number;\n\n    /**\n     * A Boolean value that specifies whether the hit highlighted properties can be ordered.\n     */\n    EnableOrderingHitHighlightedProperty?: boolean;\n\n    /**\n     * The managed properties that are used to determine how to collapse individual search results.\n     * Results are collapsed into one or a specified number of results if they match any of the individual collapse specifications.\n     * In a collapse specification, results are collapsed if their properties match all individual properties in the collapse specification.\n     */\n    CollapseSpecification?: string;\n\n    /**\n     * The locale identifier (LCID) of the user interface\n     */\n    UIlanguage?: number;\n\n    /**\n     * The preferred number of characters to display in the hit-highlighted summary generated for a search result.\n     */\n    DesiredSnippetLength?: number;\n\n    /**\n     * The maximum number of characters to display in the hit-highlighted summary generated for a search result.\n     */\n    MaxSnippetLength?: number;\n\n    /**\n     * The number of characters to display in the result summary for a search result.\n     */\n    SummaryLength?: number;\n\n}\n\n/**\n * Provides hints at the properties which may be available on the result object\n */\nexport interface ISearchResult {\n\n    Rank?: number;\n    DocId?: number;\n    WorkId?: number;\n    Title?: string;\n    Author?: string;\n    Size?: number;\n    Path?: string;\n    Description?: string;\n    Write?: Date;\n    LastModifiedTime?: Date;\n    CollapsingStatus?: number;\n    HitHighlightedSummary?: string;\n    HitHighlightedProperties?: string;\n    contentclass?: string;\n    PictureThumbnailURL?: string;\n    ServerRedirectedURL?: string;\n    ServerRedirectedEmbedURL?: string;\n    ServerRedirectedPreviewURL?: string;\n    FileExtension?: string;\n    ContentTypeId?: string;\n    ParentLink?: string;\n    ViewsLifetime?: number;\n    ViewsRecent?: number;\n    SectionNames?: string;\n    SectionIndexes?: string;\n    SiteLogo?: string;\n    SiteDescription?: string;\n    importance?: number;\n    SiteName?: string;\n    IsDocument?: boolean;\n    FileType?: string;\n    IsContainer?: boolean;\n    WebTemplate?: string;\n    SPWebUrl?: string;\n    UniqueId?: string;\n    ProgId?: string;\n    OriginalPath?: string;\n    RenderTemplateId?: string;\n    PartitionId?: string;\n    UrlZone?: number;\n    Culture?: string;\n}\n\nexport interface ISearchResponse {\n    ElapsedTime: number;\n    Properties?: { Key: string, Value: any, ValueType: string }[];\n    PrimaryQueryResult?: IResultTableCollection;\n    SecondaryQueryResults?: IResultTableCollection;\n    SpellingSuggestion?: string;\n    TriggeredRules?: any[];\n}\n\nexport interface IResultTableCollection {\n\n    QueryErrors?: Map<string, any>;\n    QueryId?: string;\n    QueryRuleId?: string;\n    CustomResults?: IResultTable;\n    RefinementResults?: IResultTable;\n    RelevantResults?: IResultTable;\n    SpecialTermResults?: IResultTable;\n}\n\nexport interface IRefiner {\n    Name: string;\n    Entries: { RefinementCount: string; RefinementName: string; RefinementToken: string; RefinementValue: string; }[];\n}\n\nexport interface IResultTable {\n    GroupTemplateId?: string;\n    ItemTemplateId?: string;\n    Properties?: { Key: string, Value: any, ValueType: string }[];\n    Table?: { Rows: { Cells: { Key: string, Value: any, ValueType: string }[] }[] };\n    Refiners?: IRefiner[];\n    ResultTitle?: string;\n    ResultTitleUrl?: string;\n    RowCount?: number;\n    TableType?: string;\n    TotalRows?: number;\n    TotalRowsIncludingDuplicates?: number;\n}\n\n/**\n * Defines how search results are sorted.\n */\nexport interface ISort {\n\n    /**\n     * The name for a property by which the search results are ordered.\n     */\n    Property: string;\n\n    /**\n     * The direction in which search results are ordered.\n     */\n    Direction: SortDirection;\n}\n\n/**\n * Defines one search property\n */\nexport interface ISearchProperty {\n    Name: string;\n    Value: ISearchPropertyValue;\n}\n\n/**\n * Defines one search property value. Set only one of StrlVal/BoolVal/IntVal/StrArray.\n */\nexport interface ISearchPropertyValue {\n    StrVal?: string;\n    BoolVal?: boolean;\n    IntVal?: number;\n    StrArray?: string[];\n    QueryPropertyValueTypeIndex: QueryPropertyValueType;\n}\n\n/**\n * defines the SortDirection enum\n */\nexport enum SortDirection {\n    Ascending = 0,\n    Descending = 1,\n    FQLFormula = 2,\n}\n\n/**\n * Defines how ReorderingRule interface, used for reordering results\n */\nexport interface IReorderingRule {\n\n    /**\n     * The value to match on\n     */\n    MatchValue: string;\n\n    /**\n     * The rank boosting\n     */\n    Boost: number;\n\n    /**\n    * The rank boosting\n    */\n    MatchType: ReorderingRuleMatchType;\n}\n\n/**\n * defines the ReorderingRuleMatchType  enum\n */\nexport enum ReorderingRuleMatchType {\n    ResultContainsKeyword = 0,\n    TitleContainsKeyword = 1,\n    TitleMatchesKeyword = 2,\n    UrlStartsWith = 3,\n    UrlExactlyMatches = 4,\n    ContentTypeIs = 5,\n    FileExtensionMatches = 6,\n    ResultHasTag = 7,\n    ManualCondition = 8,\n}\n\n/**\n * Specifies the type value for the property\n */\nexport enum QueryPropertyValueType {\n    None = 0,\n    StringType = 1,\n    Int32Type = 2,\n    BooleanType = 3,\n    StringArrayType = 4,\n    UnSupportedType = 5,\n}\n\nexport class SearchBuiltInSourceId {\n    public static readonly Documents = \"e7ec8cee-ded8-43c9-beb5-436b54b31e84\";\n    public static readonly ItemsMatchingContentType = \"5dc9f503-801e-4ced-8a2c-5d1237132419\";\n    public static readonly ItemsMatchingTag = \"e1327b9c-2b8c-4b23-99c9-3730cb29c3f7\";\n    public static readonly ItemsRelatedToCurrentUser = \"48fec42e-4a92-48ce-8363-c2703a40e67d\";\n    public static readonly ItemsWithSameKeywordAsThisItem = \"5c069288-1d17-454a-8ac6-9c642a065f48\";\n    public static readonly LocalPeopleResults = \"b09a7990-05ea-4af9-81ef-edfab16c4e31\";\n    public static readonly LocalReportsAndDataResults = \"203fba36-2763-4060-9931-911ac8c0583b\";\n    public static readonly LocalSharePointResults = \"8413cd39-2156-4e00-b54d-11efd9abdb89\";\n    public static readonly LocalVideoResults = \"78b793ce-7956-4669-aa3b-451fc5defebf\";\n    public static readonly Pages = \"5e34578e-4d08-4edc-8bf3-002acf3cdbcc\";\n    public static readonly Pictures = \"38403c8c-3975-41a8-826e-717f2d41568a\";\n    public static readonly Popular = \"97c71db1-58ce-4891-8b64-585bc2326c12\";\n    public static readonly RecentlyChangedItems = \"ba63bbae-fa9c-42c0-b027-9a878f16557c\";\n    public static readonly RecommendedItems = \"ec675252-14fa-4fbe-84dd-8d098ed74181\";\n    public static readonly Wiki = \"9479bf85-e257-4318-b5a8-81a180f5faa1\";\n}\n","import { _SharePointQueryableInstance, ISharePointQueryable } from \"../sharepointqueryable\";\nimport { hOP, IConfigOptions } from \"@pnp/common\";\nimport { defaultPath } from \"../decorators\";\nimport { tag } from \"../telemetry\";\n\n@defaultPath(\"_api/search/suggest\")\nexport class _Suggest extends _SharePointQueryableInstance {\n\n    @tag(\"su.execute\")\n    public async execute(query: ISuggestQuery): Promise<ISuggestResult> {\n\n        this.mapQueryToQueryString(query);\n\n        const response = await this.get();\n        const mapper = hOP(response, \"suggest\") ? (s_1: string) => response.suggest[s_1].results : (s_2: string) => response[s_2];\n\n        return {\n            PeopleNames: mapper(\"PeopleNames\"),\n            PersonalResults: mapper(\"PersonalResults\"),\n            Queries: mapper(\"Queries\"),\n        };\n    }\n\n    private mapQueryToQueryString(query: ISuggestQuery): void {\n\n        const setProp = (q: ISuggestQuery) => (checkProp: string) => (sp: string) => {\n            if (hOP(q, checkProp)) {\n                this.query.set(sp, q[checkProp].toString());\n            }\n        };\n\n        this.query.set(\"querytext\", `'${query.querytext}'`);\n\n        const querySetter = setProp(query);\n\n        querySetter(\"count\")(\"inumberofquerysuggestions\");\n        querySetter(\"personalCount\")(\"inumberofresultsuggestions\");\n        querySetter(\"preQuery\")(\"fprequerysuggestions\");\n        querySetter(\"hitHighlighting\")(\"fhithighlighting\");\n        querySetter(\"capitalize\")(\"fcapitalizefirstletters\");\n        querySetter(\"culture\")(\"culture\");\n        querySetter(\"stemming\")(\"enablestemming\");\n        querySetter(\"includePeople\")(\"showpeoplenamesuggestions\");\n        querySetter(\"queryRules\")(\"enablequeryrules\");\n        querySetter(\"prefixMatch\")(\"fprefixmatchallterms\");\n    }\n}\n\nexport interface ISuggest {\n    (query: ISuggestQuery): Promise<ISuggestResult>;\n}\n\nexport const Suggest = (baseUrl: string | ISharePointQueryable, options: IConfigOptions = {}): ISuggest => (query: ISuggestQuery) => {\n    return (new _Suggest(baseUrl)).configure(options).execute(query);\n};\n\n/**\n * Defines a query execute against the search/suggest endpoint (see https://msdn.microsoft.com/en-us/library/office/dn194079.aspx)\n */\nexport interface ISuggestQuery {\n\n    [key: string]: string | number | boolean;\n\n    /**\n     * A string that contains the text for the search query.\n     */\n    querytext: string;\n\n    /**\n     * The number of query suggestions to retrieve. Must be greater than zero (0). The default value is 5.\n     */\n    count?: number;\n\n    /**\n     * The number of personal results to retrieve. Must be greater than zero (0). The default value is 5.\n     */\n    personalCount?: number;\n\n    /**\n     * A Boolean value that specifies whether to retrieve pre-query or post-query suggestions. true to return pre-query suggestions; otherwise, false. The default value is false.\n     */\n    preQuery?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to hit-highlight or format in bold the query suggestions. true to format in bold the terms in the returned query suggestions\n     * that match terms in the specified query; otherwise, false. The default value is true.\n     */\n    hitHighlighting?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to capitalize the first letter in each term in the returned query suggestions. true to capitalize the first letter in each term;\n     * otherwise, false. The default value is false.\n     */\n    capitalize?: boolean;\n\n    /**\n     * The locale ID (LCID) for the query (see https://msdn.microsoft.com/en-us/library/cc233982.aspx).\n     */\n    culture?: string;\n\n    /**\n     * A Boolean value that specifies whether stemming is enabled. true to enable stemming; otherwise, false. The default value is true.\n     */\n    stemming?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to include people names in the returned query suggestions. true to include people names in the returned query suggestions;\n     * otherwise, false. The default value is true.\n     */\n    includePeople?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to turn on query rules for this query. true to turn on query rules; otherwise, false. The default value is true.\n     */\n    queryRules?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to return query suggestions for prefix matches. true to return query suggestions based on prefix matches, otherwise, false when\n     * query suggestions should match the full query word.\n     */\n    prefixMatch?: boolean;\n}\n\nexport interface ISuggestResult {\n    readonly PeopleNames: string[];\n    readonly PersonalResults: IPersonalResultSuggestion[];\n    readonly Queries: any[];\n}\n\nexport interface IPersonalResultSuggestion {\n    readonly HighlightedTitle?: string;\n    readonly IsBestBet?: boolean;\n    readonly Title?: string;\n    readonly TypeId?: string;\n    readonly Url?: string;\n}\n","import { SPRest } from \"../rest\";\nimport { SearchQueryInit } from \"./types\";\nimport { _Search } from \"./query\";\nimport { ICachingOptions } from \"@pnp/odata\";\nimport { SearchResults, Search } from \"./query\";\nimport { ISuggestQuery, ISuggestResult, Suggest } from \"./suggest\";\n\nexport * from \"./types\";\n\nexport {\n    ISearch,\n    SearchQueryBuilder,\n    SearchResults,\n    Search,\n} from \"./query\";\n\nexport {\n    ISuggest,\n    IPersonalResultSuggestion,\n    ISuggestQuery,\n    ISuggestResult,\n    Suggest,\n} from \"./suggest\";\n\ndeclare module \"../rest\" {\n    interface SPRest {\n        /**\n         * Conduct a search\n         * \n         * @param query Parameters for the search\n         */\n        search(query: SearchQueryInit): Promise<SearchResults>;\n        /**\n         * Conduct a search with caching enabled\n         * \n         * @param query Parameters for the search\n         * @param options Optional, caching options\n         */\n        searchWithCaching(query: SearchQueryInit, options?: ICachingOptions): Promise<SearchResults>;\n        /**\n         * Conduct a suggest search query\n         * \n         * @param query Parameters for the search\n         */\n        searchSuggest(query: string | ISuggestQuery): Promise<ISuggestResult>;\n    }\n}\n\nSPRest.prototype.search = function (this: SPRest, query: SearchQueryInit): Promise<SearchResults> {\n\n    return Search(this._baseUrl, this._options)(query);\n};\n\nSPRest.prototype.searchWithCaching = function (this: SPRest, query: SearchQueryInit, options?: ICachingOptions): Promise<SearchResults> {\n\n    return (new _Search(this._baseUrl, null)).configure(this._options).usingCaching(options).execute(query);\n};\n\nSPRest.prototype.searchSuggest = function (this: SPRest, query: string | ISuggestQuery): Promise<ISuggestResult> {\n\n    return Suggest(this._baseUrl, this._options)(typeof query === \"string\" ? { querytext: query } : query);\n};\n","import {\n    _SharePointQueryableInstance,\n    _SharePointQueryableCollection,\n    spInvokableFactory,\n    IDeleteable,\n    deleteable,\n} from \"../sharepointqueryable\";\nimport { SiteGroups, ISiteGroups } from \"../site-groups/types\";\nimport { ITypedHash, assign } from \"@pnp/common\";\nimport { metadata } from \"../utils/metadata\";\nimport { body } from \"@pnp/odata\";\nimport { defaultPath } from \"../decorators\";\nimport { spPost } from \"../operations\";\nimport { PrincipalType } from \"../types\";\nimport { tag } from \"../telemetry\";\n\n@defaultPath(\"siteusers\")\nexport class _SiteUsers extends _SharePointQueryableCollection<ISiteUserInfo[]> {\n\n    /**\n     * Gets a user from the collection by id\n     *\n     * @param id The id of the user to retrieve\n     */\n    public getById(id: number): ISiteUser {\n        return tag.configure(SiteUser(this, `getById(${id})`), \"sus.getById\");\n    }\n\n    /**\n     * Gets a user from the collection by email\n     *\n     * @param email The email address of the user to retrieve\n     */\n    public getByEmail(email: string): ISiteUser {\n        return tag.configure(SiteUser(this, `getByEmail('${email}')`), \"sus.getByEmail\");\n    }\n\n    /**\n     * Gets a user from the collection by login name\n     *\n     * @param loginName The login name of the user to retrieve\n     */\n    public getByLoginName(loginName: string): ISiteUser {\n        return tag.configure(SiteUser(this).concat(`('!@v::${encodeURIComponent(loginName)}')`), \"sus.getByLoginName\");\n    }\n\n    /**\n     * Removes a user from the collection by id\n     *\n     * @param id The id of the user to remove\n     */\n    @tag(\"sus.remId\")\n    public removeById(id: number): Promise<any> {\n        return spPost(this.clone(SiteUsers, `removeById(${id})`));\n    }\n\n    /**\n     * Removes a user from the collection by login name\n     *\n     * @param loginName The login name of the user to remove\n     */\n    @tag(\"sus.remLoginName\")\n    public removeByLoginName(loginName: string): Promise<any> {\n        const o = this.clone(SiteUsers, `removeByLoginName(@v)`);\n        o.query.set(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return spPost(o);\n    }\n\n    /**\n     * Adds a user to a site collection\n     *\n     * @param loginName The login name of the user to add  to a site collection\n     *\n     */\n    @tag(\"sus.add\")\n    public async add(loginName: string): Promise<ISiteUser> {\n        await spPost(this, body(assign(metadata(\"SP.User\"), { LoginName: loginName })));\n        return this.getByLoginName(loginName);\n    }\n}\nexport interface ISiteUsers extends _SiteUsers { }\nexport const SiteUsers = spInvokableFactory<ISiteUsers>(_SiteUsers);\n\n/**\n * Describes a single user\n *\n */\nexport class _SiteUser extends _SharePointQueryableInstance<ISiteUserInfo> {\n\n    public delete = deleteable(\"su\");\n\n    /**\n     * Gets the groups for this user\n     *\n     */\n    public get groups(): ISiteGroups {\n        return tag.configure(SiteGroups(this, \"groups\"), \"su.groups\");\n    }\n\n    /**\n    * Updates this user instance with the supplied properties\n    *\n    * @param properties A plain object of property names and values to update for the user\n    */\n    public update: (props: ITypedHash<any>) => Promise<IUserUpdateResult> = this._update<IUserUpdateResult, ITypedHash<any>>(\"SP.User\", data => ({ data, user: <any>this }));\n}\nexport interface ISiteUser extends _SiteUser, IDeleteable { }\nexport const SiteUser = spInvokableFactory<ISiteUser>(_SiteUser);\n\nexport interface ISiteUserInfo extends ISiteUserProps {\n\n    Expiration: string;\n    IsEmailAuthenticationGuestUser: boolean;\n    UserId: {\n        NameId: string;\n        NameIdIssuer: string;\n    };\n    UserPrincipalName: string | null;\n}\n\n/**\n * Describes a single user properties\n *\n */\nexport interface ISiteUserProps {\n\n    /**\n     * Contains Site user email\n     * \n     */\n    Email: string;\n\n    /**\n     * Contains Site user Id\n     * \n     */\n    Id: number;\n\n    /**\n     * Site user IsHiddenInUI\n     * \n     */\n    IsHiddenInUI: boolean;\n\n    /**\n     * Site user IsShareByEmailGuestUser \n     * \n     */\n    IsShareByEmailGuestUser: boolean;\n\n    /**\n     * Describes if Site user Is Site Admin \n     * \n     */\n    IsSiteAdmin: boolean;\n\n    /**\n     * Site user LoginName\n     * \n     */\n    LoginName: string;\n\n    /**\n     * Site user Principal type\n     * \n     */\n    PrincipalType: number | PrincipalType;\n\n    /**\n     * Site user Title\n     * \n     */\n    Title: string;\n}\n\n/**\n * Properties that provide both a getter, and a setter.\n *\n */\nexport interface IUserUpdateResult {\n    user: ISiteUser;\n    data: any;\n}\n\n/**\n * Result from ensuring a user\n *\n */\nexport interface IWebEnsureUserResult {\n    data: ISiteUserProps;\n    user: ISiteUser;\n}\n","import { assign, hOP } from \"@pnp/common\";\nimport { body, headers } from \"@pnp/odata\";\nimport {\n    _SharePointQueryableInstance,\n    SharePointQueryableCollection,\n    ISharePointQueryableCollection,\n    _SharePointQueryableCollection,\n    spInvokableFactory,\n    IDeleteable,\n    deleteable,\n} from \"../sharepointqueryable\";\nimport { SiteGroups, ISiteGroups } from \"../site-groups/types\";\nimport { metadata } from \"../utils/metadata\";\nimport { defaultPath } from \"../decorators\";\nimport { spPost } from \"../operations\";\nimport { tag } from \"../telemetry\";\n\nexport type SecurableQueryable = _SharePointQueryableInstance & ISecurableMethods;\n\n/**\n * Describes a set of role assignments for the current scope\n *\n */\n@defaultPath(\"roleassignments\")\nexport class _RoleAssignments extends _SharePointQueryableCollection<IRoleAssignmentInfo[]> {\n\n    /**\t\n     * Gets the role assignment associated with the specified principal id from the collection.\t\n     *\t\n     * @param id The id of the role assignment\t\n     */\n    public getById(id: number): IRoleAssignment {\n        return RoleAssignment(this).concat(`(${id})`);\n    }\n\n    /**\n     * Adds a new role assignment with the specified principal and role definitions to the collection\n     *\n     * @param principalId The id of the user or group to assign permissions to\n     * @param roleDefId The id of the role definition that defines the permissions to assign\n     *\n     */\n    public async add(principalId: number, roleDefId: number): Promise<void> {\n        await spPost(this.clone(RoleAssignments, `addroleassignment(principalid=${principalId}, roledefid=${roleDefId})`));\n    }\n\n    /**\n     * Removes the role assignment with the specified principal and role definition from the collection\n     *\n     * @param principalId The id of the user or group in the role assignment\n     * @param roleDefId The id of the role definition in the role assignment\n     *\n     */\n    public async remove(principalId: number, roleDefId: number): Promise<void> {\n        await spPost(this.clone(RoleAssignments, `removeroleassignment(principalid=${principalId}, roledefid=${roleDefId})`));\n    }\n}\nexport interface IRoleAssignments extends _RoleAssignments { }\nexport const RoleAssignments = spInvokableFactory<IRoleAssignments>(_RoleAssignments);\n\n/**\n * Describes a role assignment\n *\n */\nexport class _RoleAssignment extends _SharePointQueryableInstance<IRoleAssignmentInfo> {\n\n    public delete = deleteable(\"ra\");\n\n    /**\n     * Gets the groups that directly belong to the access control list (ACL) for this securable object\n     *\n     */\n    public get groups(): ISiteGroups {\n        return tag.configure(SiteGroups(this, \"groups\"), \"ra.groups\");\n    }\n\n    /**\n     * Gets the role definition bindings for this role assignment\n     *\n     */\n    public get bindings(): ISharePointQueryableCollection {\n        return SharePointQueryableCollection(this, \"roledefinitionbindings\");\n    }\n}\nexport interface IRoleAssignment extends _RoleAssignment, IDeleteable { }\nexport const RoleAssignment = spInvokableFactory<IRoleAssignment>(_RoleAssignment);\n\n/**\n * Describes a collection of role definitions\n *\n */\n@defaultPath(\"roledefinitions\")\nexport class _RoleDefinitions extends _SharePointQueryableCollection<IRoleDefinitionInfo[]> {\n\n    /**\t   \n     * Gets the role definition with the specified id from the collection\t    \n     *\t     \n     * @param id The id of the role definition\t     \n     *\t     \n     */\n    public getById(id: number): IRoleDefinition {\n        return RoleDefinition(this, `getById(${id})`);\n    }\n\n    /**\n     * Gets the role definition with the specified name\n     *\n     * @param name The name of the role definition\n     *\n     */\n    public getByName(name: string): IRoleDefinition {\n        return RoleDefinition(this, `getbyname('${name}')`);\n    }\n\n    /**\n     * Gets the role definition with the specified role type\n     *\n     * @param roleTypeKind The roletypekind of the role definition (None=0, Guest=1, Reader=2, Contributor=3, WebDesigner=4, Administrator=5, Editor=6, System=7)\n     *\n     */\n    public getByType(roleTypeKind: RoleTypeKind): IRoleDefinition {\n        return RoleDefinition(this, `getbytype(${roleTypeKind})`);\n    }\n\n    /**\n     * Creates a role definition\n     *\n     * @param name The new role definition's name\n     * @param description The new role definition's description\n     * @param order The order in which the role definition appears\n     * @param basePermissions The permissions mask for this role definition\n     *\n     */\n    public async add(name: string, description: string, order: number, basePermissions: IBasePermissions): Promise<IRoleDefinitionAddResult> {\n\n        const postBody = body({\n            BasePermissions: assign(metadata(\"SP.BasePermissions\"), basePermissions),\n            Description: description,\n            Name: name,\n            Order: order,\n            __metadata: { \"type\": \"SP.RoleDefinition\" },\n        });\n\n        const data = await spPost(this, postBody);\n\n        return {\n            data: data,\n            definition: this.getById(data.Id),\n        };\n    }\n}\nexport interface IRoleDefinitions extends _RoleDefinitions { }\nexport const RoleDefinitions = spInvokableFactory<IRoleDefinitions>(_RoleDefinitions);\n\n/**\n * Describes a role definition\n *\n */\nexport class _RoleDefinition extends _SharePointQueryableInstance<IRoleDefinitionInfo> {\n\n    public delete = deleteable(\"rd\");\n\n    /**\n     * Updates this role definition with the supplied properties\n     *\n     * @param properties A plain object hash of values to update for the role definition\n     */\n    /* tslint:disable no-string-literal */\n    public async update(properties: Partial<IRoleDefinitionInfo>): Promise<IRoleDefinitionUpdateResult> {\n\n        const s = [\"BasePermissions\"];\n        if (hOP(properties, s[0]) !== undefined) {\n            properties[s[0]] = assign(metadata(`SP.${s[0]}`), properties[s[0]]);\n        }\n\n        const postBody = body(assign(metadata(\"SP.RoleDefinition\"), properties), headers({ \"X-HTTP-Method\": \"MERGE\" }));\n\n        const data = await spPost(this, postBody);\n\n        let definition: IRoleDefinition = <any>this;\n        if (hOP(properties, \"Name\")) {\n            const parent = this.getParent<IRoleDefinitions>(RoleDefinitions, this.parentUrl, \"\");\n            definition = parent.getByName((<string>properties[\"Name\"]));\n        }\n        return {\n            data,\n            definition,\n        };\n    }\n    /* tslint:enable */\n}\nexport interface IRoleDefinition extends _RoleDefinition, IDeleteable { }\nexport const RoleDefinition = spInvokableFactory<IRoleDefinition>(_RoleDefinition);\n\nexport interface ISecurableMethods {\n    readonly roleAssignments: IRoleAssignments;\n    readonly firstUniqueAncestorSecurableObject: _SharePointQueryableInstance;\n    getUserEffectivePermissions(loginName: string): Promise<IBasePermissions>;\n    getCurrentUserEffectivePermissions(): Promise<IBasePermissions>;\n    breakRoleInheritance(copyRoleAssignments?: boolean, clearSubscopes?: boolean): Promise<any>;\n    resetRoleInheritance(): Promise<any>;\n    userHasPermissions(loginName: string, permission: PermissionKind): Promise<boolean>;\n    currentUserHasPermissions(permission: PermissionKind): Promise<boolean>;\n    hasPermissions(value: IBasePermissions, perm: PermissionKind): boolean;\n}\n\n/**\n * Result from updating a role definition\n *\n */\nexport interface IRoleDefinitionUpdateResult {\n    definition: IRoleDefinition;\n    data: any;\n}\n\n/**\n * Result from adding a role definition\n *\n */\nexport interface IRoleDefinitionAddResult {\n    definition: IRoleDefinition;\n    data: any;\n}\n\nexport interface IBasePermissions {\n    Low: number;\n    High: number;\n}\n\nexport interface IRoleAssignmentInfo {\n    PrincipalId: number;\n}\n\nexport interface IRoleDefinitionInfo {\n    BasePermissions: IBasePermissions;\n    Description: string;\n    Hidden: boolean;\n    Id: number;\n    Name: string;\n    Order: number;\n    RoleTypeKind: RoleTypeKind;\n}\n\nexport type RoleTypeKind = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;\n\nexport enum PermissionKind {\n\n    /**\n     * Has no permissions on the Site. Not available through the user interface.\n     */\n    EmptyMask = 0,\n\n    /**\n     * View items in lists, documents in document libraries, and Web discussion comments.\n     */\n    ViewListItems = 1,\n\n    /**\n     * Add items to lists, documents to document libraries, and Web discussion comments.\n     */\n    AddListItems = 2,\n\n    /**\n     * Edit items in lists, edit documents in document libraries, edit Web discussion comments\n     * in documents, and customize Web Part Pages in document libraries.\n     */\n    EditListItems = 3,\n\n    /**\n     * Delete items from a list, documents from a document library, and Web discussion\n     * comments in documents.\n     */\n    DeleteListItems = 4,\n\n    /**\n     * Approve a minor version of a list item or document.\n     */\n    ApproveItems = 5,\n\n    /**\n     * View the source of documents with server-side file handlers.\n     */\n    OpenItems = 6,\n\n    /**\n     * View past versions of a list item or document.\n     */\n    ViewVersions = 7,\n\n    /**\n     * Delete past versions of a list item or document.\n     */\n    DeleteVersions = 8,\n\n    /**\n     * Discard or check in a document which is checked out to another user.\n     */\n    CancelCheckout = 9,\n\n    /**\n     * Create, change, and delete personal views of lists.\n     */\n    ManagePersonalViews = 10,\n\n    /**\n     * Create and delete lists, add or remove columns in a list, and add or remove public views of a list.\n     */\n    ManageLists = 12,\n\n    /**\n     * View forms, views, and application pages, and enumerate lists.\n     */\n    ViewFormPages = 13,\n\n    /**\n     * Make content of a list or document library retrieveable for anonymous users through SharePoint search.\n     * The list permissions in the site do not change.\n     */\n    AnonymousSearchAccessList = 14,\n\n    /**\n     * Allow users to open a Site, list, or folder to access items inside that container.\n     */\n    Open = 17,\n\n    /**\n     * View pages in a Site.\n     */\n    ViewPages = 18,\n\n    /**\n     * Add, change, or delete HTML pages or Web Part Pages, and edit the Site using\n     * a Windows SharePoint Services compatible editor.\n     */\n    AddAndCustomizePages = 19,\n\n    /**\n     * Apply a theme or borders to the entire Site.\n     */\n    ApplyThemeAndBorder = 20,\n\n    /**\n     * Apply a style sheet (.css file) to the Site.\n     */\n    ApplyStyleSheets = 21,\n\n    /**\n     * View reports on Site usage.\n     */\n    ViewUsageData = 22,\n\n    /**\n     * Create a Site using Self-Service Site Creation.\n     */\n    CreateSSCSite = 23,\n\n    /**\n     * Create subsites such as team sites, Meeting Workspace sites, and Document Workspace sites.\n     */\n    ManageSubwebs = 24,\n\n    /**\n     * Create a group of users that can be used anywhere within the site collection.\n     */\n    CreateGroups = 25,\n\n    /**\n     * Create and change permission levels on the Site and assign permissions to users\n     * and groups.\n     */\n    ManagePermissions = 26,\n\n    /**\n     * Enumerate files and folders in a Site using Microsoft Office SharePoint Designer\n     * and WebDAV interfaces.\n     */\n    BrowseDirectories = 27,\n\n    /**\n     * View information about users of the Site.\n     */\n    BrowseUserInfo = 28,\n\n    /**\n     * Add or remove personal Web Parts on a Web Part Page.\n     */\n    AddDelPrivateWebParts = 29,\n\n    /**\n     * Update Web Parts to display personalized information.\n     */\n    UpdatePersonalWebParts = 30,\n\n    /**\n     * Grant the ability to perform all administration tasks for the Site as well as\n     * manage content, activate, deactivate, or edit properties of Site scoped Features\n     * through the object model or through the user interface (UI). When granted on the\n     * root Site of a Site Collection, activate, deactivate, or edit properties of\n     * site collection scoped Features through the object model. To browse to the Site\n     * Collection Features page and activate or deactivate Site Collection scoped Features\n     * through the UI, you must be a Site Collection administrator.\n     */\n    ManageWeb = 31,\n\n    /**\n     * Content of lists and document libraries in the Web site will be retrieveable for anonymous users through\n     * SharePoint search if the list or document library has AnonymousSearchAccessList set.\n     */\n    AnonymousSearchAccessWebLists = 32,\n\n    /**\n     * Use features that launch client applications. Otherwise, users must work on documents\n     * locally and upload changes.\n     */\n    UseClientIntegration = 37,\n\n    /**\n     * Use SOAP, WebDAV, or Microsoft Office SharePoint Designer interfaces to access the Site.\n     */\n    UseRemoteAPIs = 38,\n\n    /**\n     * Manage alerts for all users of the Site.\n     */\n    ManageAlerts = 39,\n\n    /**\n     * Create e-mail alerts.\n     */\n    CreateAlerts = 40,\n\n    /**\n     * Allows a user to change his or her user information, such as adding a picture.\n     */\n    EditMyUserInfo = 41,\n\n    /**\n     * Enumerate permissions on Site, list, folder, document, or list item.\n     */\n    EnumeratePermissions = 63,\n\n    /**\n     * Has all permissions on the Site. Not available through the user interface.\n     */\n    FullMask = 65,\n}\n","import { IPrincipalInfo } from \"../types\";\nimport { _Web } from \"../webs/types\";\nimport { _File } from \"../files/types\";\nimport { _Item } from \"../items/types\";\nimport { _Folder } from \"../folders/types\";\n\nexport type ShareableQueryable = _Web | _File | _Folder | _Item;\n\n/**\n * Indicates the role of the sharing link\n */\nexport enum SharingRole {\n    None = 0,\n    View = 1,\n    Edit = 2,\n    Owner = 3,\n}\n\nexport enum SPSharedObjectType {\n    Unknown = 0,\n    File = 1,\n    Folder = 2,\n    Item = 3,\n    List = 4,\n    Web = 5,\n    Max = 6,\n}\n\nexport enum SharingDomainRestrictionMode {\n    None = 0,\n    AllowList = 1,\n    BlockList = 2,\n}\n\nexport enum SharingOperationStatusCode {\n    /**\n     * The share operation completed without errors.\n     */\n    CompletedSuccessfully = 0,\n    /**\n     * The share operation completed and generated requests for access.\n     */\n    AccessRequestsQueued = 1,\n    /**\n     * The share operation failed as there were no resolved users.\n     */\n    NoResolvedUsers = -1,\n    /**\n     * The share operation failed due to insufficient permissions.\n     */\n    AccessDenied = -2,\n    /**\n     * The share operation failed when attempting a cross site share, which is not supported.\n     */\n    CrossSiteRequestNotSupported = -3,\n    /**\n     * The sharing operation failed due to an unknown error.\n     */\n    UnknowError = -4,\n    /**\n     * The text you typed is too long. Please shorten it.\n     */\n    EmailBodyTooLong = -5,\n    /**\n     * The maximum number of unique scopes in the list has been exceeded.\n     */\n    ListUniqueScopesExceeded = -6,\n    /**\n     * The share operation failed because a sharing capability is disabled in the site.\n     */\n    CapabilityDisabled = -7,\n    /**\n     * The specified object for the share operation is not supported.\n     */\n    ObjectNotSupported = -8,\n    /**\n     * A SharePoint group cannot contain another SharePoint group.\n     */\n    NestedGroupsNotSupported = -9,\n}\n\nexport enum SharingLinkKind {\n    /**\n     * Uninitialized link\n     */\n    Uninitialized = 0,\n    /**\n     * Direct link to the object being shared\n     */\n    Direct = 1,\n    /**\n     * Organization-shareable link to the object being shared with view permissions\n     */\n    OrganizationView = 2,\n    /**\n     * Organization-shareable link to the object being shared with edit permissions\n     */\n    OrganizationEdit = 3,\n    /**\n     * View only anonymous link\n     */\n    AnonymousView = 4,\n    /**\n     * Read/Write anonymous link\n     */\n    AnonymousEdit = 5,\n    /**\n     * Flexible sharing Link where properties can change without affecting link URL\n     */\n    Flexible = 6,\n}\n\nexport interface ISharedFuncs {\n    /**\n     * Gets a link suitable for sharing for this item\n     *\n     * @param kind The type of link to share\n     * @param expiration The optional expiration date\n     */\n    getShareLink(kind: SharingLinkKind, expiration?: Date): Promise<IShareLinkResponse>;\n    /**\n     * Checks Permissions on the list of Users and returns back role the users have on the Item.\n     *\n     * @param recipients The array of Entities for which Permissions need to be checked.\n     */\n    checkSharingPermissions(recipients: ISharingRecipient[]): Promise<ISharingEntityPermission[]>;\n    /**\n     * Get Sharing Information.\n     *\n     * @param request The SharingInformationRequest Object.\n     * @param expands Expand more fields.\n     * \n     */\n    getSharingInformation(request?: ISharingInformationRequest, expands?: string[]): Promise<ISharingInformation>;\n    /**\n     * Gets the sharing settings of an item.\n     *\n     * @param useSimplifiedRoles Determines whether to use simplified roles.\n     */\n    getObjectSharingSettings(useSimplifiedRoles?: boolean): Promise<IObjectSharingSettings>;\n    /**\n     * Unshare this item\n     */\n    unshare(): Promise<ISharingResult>;\n    /**\n     * Deletes a sharing link by kind\n     *\n     * @param kind Deletes a sharing link by the kind of link\n     */\n    deleteSharingLinkByKind(kind: SharingLinkKind): Promise<void>;\n    /**\n     * Removes the specified link to the item.\n     *\n     * @param kind The kind of link to be deleted.\n     * @param shareId\n     */\n    unshareLink(kind: SharingLinkKind, shareId?: string): Promise<void>;\n}\n\nexport interface IShareObjectOptions {\n    url?: string;\n    loginNames?: string | string[];\n    role: SharingRole;\n    emailData?: ISharingEmailData;\n    group?: RoleType;\n    propagateAcl?: boolean;\n    includeAnonymousLinkInEmail?: boolean;\n    useSimplifiedRoles?: boolean;\n}\n\n/**\n * Represents email data.\n */\nexport interface ISharingEmailData {\n\n    /**\n     * The e-mail subject.\n     */\n    subject?: string;\n\n    /**\n     * The e-mail body.\n     */\n    body: string;\n}\n\nexport interface IShareLinkSettings {\n    /**\n     * The optional unique identifier of an existing sharing link to be retrieved and updated if necessary.\n     */\n    shareId?: string;\n\n    /**\n     * The kind of the sharing link to be created.\n     */\n    linkKind: SharingLinkKind;\n\n    /**\n     * A date/time string for which the format conforms to the ISO 8601:2004(E) complete representation for calendar date and time of day and\n     * which represents the time and date of expiry for the anonymous link. Both the minutes and hour value must be specified for the\n     * difference between the local and UTC time. Midnight is represented as 00:00:00.\n     */\n    expiration?: string;\n\n    /**\n     * The role to be used for the sharing link. This is required for Flexible links, and ignored for legacy link kinds.\n     */\n    role?: SharingRole;\n\n    /**\n     * Indicates if the sharing link, should support anonymous access. This is required for Flexible links, and ignored for legacy link kinds.\n     */\n    allowAnonymousAccess?: boolean;\n}\n\nexport interface IShareLinkRequest {\n\n    /**\n     * A string of JSON representing users in people picker format. Only needed if an e-mail notification should be sent.\n     */\n    peoplePickerInput?: string;\n\n    /**\n     * Whether to create the link or not if it doesn't exist yet.\n     */\n    createLink: boolean;\n\n    /**\n     * The e-mail data. Only needed if an e-mail notification should be sent.\n     */\n    emailData?: ISharingEmailData;\n\n    /**\n     * The settings for the sharing link to be created/updated\n     */\n    settings: IShareLinkSettings;\n}\n\n/**\n * Represents a response for sharing a link\n */\nexport interface IShareLinkResponse {\n    /**\n     * A SharingLinkInfo that represents the sharing link. Will be populated if sharing operation is returning a sharing link.\n     */\n    sharingLinkInfo: ISharingLinkInfo;\n}\n\nexport interface ISharingLinkInfo {\n\n    AllowsAnonymousAccess: boolean;\n    Created: string;\n    CreatedBy: IPrincipalInfo;\n    Expiration: string;\n    IsActive: boolean;\n    IsEditLink: boolean;\n    IsFormsLink: boolean;\n    IsUnhealthy: boolean;\n    LastModified: string;\n    LastModifiedBy: IPrincipalInfo;\n    LinkKind: SharingLinkKind;\n    ShareId: string;\n    Url: string;\n}\n\nexport interface ISharingResult {\n\n    /**\n     * The relative URL of a page which can be navigated to, to show permissions.\n     */\n    PermissionsPageRelativeUrl?: string;\n\n    /**\n     * A collection of users which have new pending access requests as a result of sharing.\n     */\n    UsersWithAccessRequests?: any[]; // SPSharingUserCollection\n\n    /**\n     * An enumeration which summarizes the result of the sharing operation.\n     */\n    StatusCode?: SharingOperationStatusCode;\n\n    /**\n     * An error message about the failure if sharing was unsuccessful.\n     */\n    ErrorMessage?: string;\n\n    /**\n     * A list of UserSharingResults from attempting to share a securable with unique permissions.\n     */\n    UniquelyPermissionedUsers?: IUserSharingResult[];\n    /**\n     * Groups which were granted permissions.\n     */\n    GroupsSharedWith?: any[]; // SPGroupCollection\n\n    /**\n     * The SharePoint group users were added to, if any were added to a group.\n     */\n    GroupUsersAddedTo?: any; // SPGroup\n\n    /**\n     * A list of users being added to a SharePoint permissions goup\n     */\n    UsersAddedToGroup?: IUserSharingResult[];\n\n    /**\n     * A list of SPInvitationCreationResult for external users being invited to have access.\n     */\n    InvitedUsers?: IInvitationCreationResult[];\n\n    /**\n     * The name of the securable being shared.\n     */\n    Name?: string;\n\n    /**\n     * The url of the securable being shared.\n     */\n    Url?: string;\n\n    /**\n     * IconUrl\n     */\n    IconUrl?: string;\n}\n\nexport interface IInvitationCreationResult {\n    Succeeded?: boolean;\n    Email?: string;\n    InvitationLink?: string;\n}\n\nexport interface IUserSharingResult {\n    IsUserKnown?: boolean;\n    Status?: boolean;\n    Message?: string;\n    User?: string;\n    DisplayName?: string;\n    Email?: string;\n    CurrentRole?: SharingRole;\n    AllowedRoles?: SharingRole[];\n    InvitationLink?: string;\n}\n\nexport interface ISharingRecipient {\n    email?: string;\n    alias?: string;\n}\n\nexport interface ISharingEntityPermission {\n    /**\n     * The Input Entity provided to the Call.\n     */\n    inputEntity: string;\n    /**\n     * The Resolved Entity after resolving using PeoplePicker API.\n     */\n    resolvedEntity: string;\n    /**\n     * Does the Entity have Access to the Securable Object\n     */\n    hasAccess: boolean;\n    /**\n     * Role of the Entity on ListItem\n     */\n    role: SharingRole;\n}\n\nexport interface ISharingInformationRequest {\n    /**\n     * Max Principal's to return.\n     */\n    maxPrincipalsToReturn: number;\n    /**\n     * Supported Features (For future use by Office Client).\n     */\n    clientSupportedFeatures: string;\n}\n\nexport interface IObjectSharingSettings {\n    /**\n     * The URL pointing to the containing SPWeb object\n     */\n    WebUrl: string;\n    /**\n     * The unique ID of the parent list (if applicable)\n     */\n    ListId?: string;\n    /**\n     * The list item ID (if applicable)\n     */\n    ItemId?: string;\n    /**\n     * The object title\n     */\n    ItemName: string;\n    /**\n     * The server relative object URL\n     */\n    ItemUrl: string;\n    /**\n     * Contains information about the sharing state of a shareable object\n     */\n    ObjectSharingInformation: any; // SPObjectSharingInformation\n    /**\n     * Boolean indicating whether the sharing context operates under the access request mode\n     */\n    AccessRequestMode: boolean;\n    /**\n     * Boolean indicating whether the sharing context operates under the permissions only mode\n     * (i.e. adding to a group or hiding the groups dropdown in the SharePoint UI)\n     */\n    PermissionsOnlyMode: boolean;\n    /**\n     * URL of the site from which the shared object inherits permissions\n     */\n    InheritingWebLink: string;\n    /**\n     * Boolean flag denoting if guest users are enabled for the site collection\n     */\n    ShareByEmailEnabled: boolean;\n    /**\n     * Boolean indicating whether the current user is a guest user\n     */\n    IsGuestUser: boolean;\n    /**\n     * Boolean indicating whether the site has the standard \"Editor\" role\n     */\n    HasEditRole: boolean;\n    /**\n     * Boolean indicating whether the site has the standard \"Reader\" role\n     */\n    HasReadRole: boolean;\n    /**\n     * Boolean indicating whether the object to share is a picture library\n     */\n    IsPictureLibrary: boolean;\n    /**\n     * Boolean indicating whether the folder object can be shared\n     */\n    CanShareFolder: boolean;\n    /**\n     * Boolean indicating whether email invitations can be sent\n     */\n    CanSendEmail: boolean;\n    /**\n     * Default share link type\n     */\n    DefaultShareLinkType: SharingLinkKind;\n    /**\n     * Boolean indicating whether the object to share supports ACL propagation\n     */\n    SupportsAclPropagation: boolean;\n    /**\n     * Boolean indicating whether the current user can only share within the tenancy\n     */\n    CanCurrentUserShareInternally: boolean;\n    /**\n     * Boolean indicating whether the current user can share outside the tenancy, by inviting external users\n     */\n    CanCurrentUserShareExternally: boolean;\n    /**\n     * Boolean indicating whether the current user can retrieve an anonymous View link, if one has already been created\n     * If one has not been created, the user cannot create one\n     */\n    CanCurrentUserRetrieveReadonlyLink: boolean;\n    /**\n     * Boolean indicating whether the current user can create or disable an anonymous Edit link\n     */\n    CanCurrentUserManageReadonlyLink: boolean;\n    /**\n     * Boolean indicating whether the current user can retrieve an anonymous Edit link, if one has already been created\n     * If one has not been created, the user cannot create one\n     */\n    CanCurrentUserRetrieveReadWriteLink: boolean;\n    /**\n     * Boolean indicating whether the current user can create or disable an anonymous Edit link\n     */\n    CanCurrentUserManageReadWriteLink: boolean;\n    /**\n     * Boolean indicating whether the current user can retrieve an organization View link, if one has already been created\n     * If one has not been created, the user cannot create one\n     */\n    CanCurrentUserRetrieveOrganizationReadonlyLink: boolean;\n    /**\n     * Boolean indicating whether the current user can create or disable an organization Edit link\n     */\n    CanCurrentUserManageOrganizationReadonlyLink: boolean;\n    /**\n     * Boolean indicating whether the current user can retrieve an organization Edit link, if one has already been created\n     * If one has not been created, the user cannot create one\n     */\n    CanCurrentUserRetrieveOrganizationReadWriteLink: boolean;\n    /**\n     * Boolean indicating whether the current user can create or disable an organization Edit link\n     */\n    CanCurrentUserManageOrganizationReadWriteLink: boolean;\n    /**\n     * Boolean indicating whether the current user can make use of Share-By-Link\n     */\n    CanSendLink: boolean;\n    /**\n     * Boolean indicating whether the client logic should warn the user\n     * that they are about to share with external email addresses.\n     */\n    ShowExternalSharingWarning: boolean;\n    /**\n     * A list of SharingPermissionInformation objects that can be used to share\n     */\n    SharingPermissions: any[]; // SPSharingPermissionInformationCollection\n    /**\n     * A dictionary object that lists the display name and the id of\n     * the SharePoint simplified roles (edit, view)\n     */\n    SimplifiedRoles: { [key: string]: string };\n    /**\n     * A dictionary object that lists the display name and the id of the SharePoint groups\n     */\n    GroupsList: { [key: string]: string };\n    /**\n     * A dictionary object that lists the display name and the id of the SharePoint regular roles\n     */\n    Roles: { [key: string]: string };\n    /**\n     * An object containing the SharePoint UI specific sharing settings.\n     */\n    SharePointSettings: any; // SharePointSharingSettings\n    /**\n     * Boolean indicating whether the current user is a site collection administrator\n     */\n    IsUserSiteAdmin: boolean;\n    /**\n     * A value that indicates number of days an anonymous link can be valid before it expires\n     */\n    RequiredAnonymousLinkExpirationInDays: number;\n}\n\nexport interface ISharingInformation {\n    /**\n     * External Sharing.\n     */\n    canAddExternalPrincipal?: boolean;\n    /**\n     * Internal Sharing.\n     */\n    canAddInternalPrincipal?: boolean;\n    /**\n     * Can Send Email.\n     */\n    canSendEmail?: boolean;\n    /**\n     * Can Use Simplified Roles present in Roles Enum.\n     */\n    canUseSimplifiedRoles?: boolean;\n    /**\n     * Has Unique Permissions.\n     */\n    hasUniquePermissions?: boolean;\n    /**\n     * Current Users Role on the Item.\n     */\n    currentRole?: SharingRole;\n    /**\n     * Does the User+Item require Approval from Admin for Sharing.\n     */\n    requiresAccessApproval?: boolean;\n    /**\n     * (Owners only)Whether there are pending access requests for the securable object.\n     */\n    hasPendingAccessRequests?: boolean;\n    /**\n     * (Owners only)The link to the access requests page for the securable object, or an empty string if the link is not available.\n     */\n    pendingAccessRequestsLink?: string;\n    /**\n     * sharedObjectType\n     */\n    sharedObjectType?: SPSharedObjectType;\n    /**\n     * Url for the Securable Object (Encoded).\n     */\n    directUrl?: string;\n    /**\n     * Parent Web Url for the Securable Object (Encoded).\n     */\n    webUrl?: string;\n    /**\n     * Default SharingLinkKind.\n     */\n    defaultLinkKind?: SharingLinkKind;\n    /**\n     * Tenant's SharingDomainRestrictionMode.\n     */\n    domainRestrictionMode?: SharingDomainRestrictionMode;\n    /**\n     * Tenant's RestrictedDomains.\n     */\n    RestrictedDomains?: string;\n    /**\n     * Tenant's Anonymous Link Expiration Restriction in Days.\n     */\n    anonymousLinkExpirationRestrictionDays?: number;\n    /**\n     * The PermissionCollection that are on the Securable Object (Princpals & Links)\n     */\n    permissionsInformation?: any; // PermissionCollection\n    /**\n     * PickerSettings used by the PeoplePicker Control.\n     */\n    pickerSettings?: any; // PickerSettings\n}\n\nexport enum RoleType {\n    None = 0,\n    Guest = 1,\n    Reader = 2,\n    Contributor = 3,\n    WebDesigner = 4,\n    Administrator = 5,\n}\n","import {\n    _SharePointQueryableInstance,\n    _SharePointQueryableCollection,\n    spInvokableFactory,\n} from \"../sharepointqueryable\";\nimport { SiteUsers, ISiteUsers } from \"../site-users/types\";\nimport { assign, ITypedHash, hOP } from \"@pnp/common\";\nimport { metadata } from \"../utils/metadata\";\nimport { body } from \"@pnp/odata\";\nimport { defaultPath } from \"../decorators\";\nimport { spPost } from \"../operations\";\nimport { tag } from \"../telemetry\";\n\n@defaultPath(\"sitegroups\")\nexport class _SiteGroups extends _SharePointQueryableCollection<ISiteGroupInfo[]> {\n\n    /**\t\n     * Gets a group from the collection by id\t\n     *\t\n     * @param id The id of the group to retrieve\t\n     */\n    public getById(id: number): ISiteGroup {\n        return tag.configure(SiteGroup(this).concat(`(${id})`), \"sgs.getById\");\n    }\n\n    /**\n     * Adds a new group to the site collection\n     *\n     * @param properties The group properties object of property names and values to be set for the group\n     */\n    public async add(properties: ITypedHash<any>): Promise<IGroupAddResult> {\n\n        const postBody = body(assign(metadata(\"SP.Group\"), properties));\n\n        const data = await spPost(tag.configure(this, \"sgs.add\"), postBody);\n        return {\n            data,\n            group: this.getById(data.Id),\n        };\n    }\n\n    /**\n     * Gets a group from the collection by name\n     *\n     * @param groupName The name of the group to retrieve\n     */\n    public getByName(groupName: string): ISiteGroup {\n        return tag.configure(SiteGroup(this, `getByName('${groupName}')`), \"sgs.getByName\");\n    }\n\n    /**\n     * Removes the group with the specified member id from the collection\n     *\n     * @param id The id of the group to remove\n     */\n    @tag(\"sgs.removeById\")\n    public removeById(id: number): Promise<void> {\n        return spPost(this.clone(SiteGroups, `removeById('${id}')`));\n    }\n\n    /**\n     * Removes the cross-site group with the specified name from the collection\n     *\n     * @param loginName The name of the group to remove\n     */\n    @tag(\"sgs.removeByLoginName\")\n    public removeByLoginName(loginName: string): Promise<any> {\n        return spPost(this.clone(SiteGroups, `removeByLoginName('${loginName}')`));\n    }\n}\nexport interface ISiteGroups extends _SiteGroups { }\nexport const SiteGroups = spInvokableFactory<ISiteGroups>(_SiteGroups);\n\nexport class _SiteGroup extends _SharePointQueryableInstance<ISiteGroupInfo> {\n\n    /**\n     * Gets the users for this group\n     *\n     */\n    public get users(): ISiteUsers {\n        return tag.configure(SiteUsers(this, \"users\"), \"sg.users\");\n    }\n\n    /**\n     * Updates the group with the given property values\n     * \n     * @param props The group properties object of property names and values to be set for the group\n     */\n    public update = this._update<IGroupUpdateResult, ITypedHash<any>>(\"SP.Group\", (d, p) => {\n\n        let retGroup: ISiteGroup = this;\n\n        if (hOP(p, \"Title\")) {\n            /* tslint:disable-next-line no-string-literal */\n            retGroup = this.getParent(SiteGroup, this.parentUrl, `getByName('${p[\"Title\"]}')`);\n        }\n\n        return {\n            data: d,\n            group: retGroup,\n        };\n    });\n\n    /**\n     * Set the owner of a group using a user id\n     * @param userId the id of the user that will be set as the owner of the current group\n     */\n    @tag(\"sg.setUserAsOwner\")\n    public setUserAsOwner(userId: number): Promise<any> {\n        return spPost(this.clone(SiteGroup, `SetUserAsOwner(${userId})`));\n    }\n}\nexport interface ISiteGroup extends _SiteGroup { }\nexport const SiteGroup = spInvokableFactory<ISiteGroup>(_SiteGroup);\n\n/**\n * Result from updating a group\n *\n */\nexport interface IGroupUpdateResult {\n    group: ISiteGroup;\n    data: any;\n}\n\n/**\n * Results from adding a group\n *\n */\nexport interface IGroupAddResult {\n    group: ISiteGroup;\n    data: any;\n}\n\nexport interface ISiteGroupInfo {\n    AllowMembersEditMembership: boolean;\n    AllowRequestToJoinLeave: boolean;\n    AutoAcceptRequestToJoinLeave: boolean;\n    Description: string;\n    Id: number;\n    IsHiddenInUI: boolean;\n    LoginName: string;\n    OnlyAllowMembersViewMembership: boolean;\n    OwnerTitle: string;\n    PrincipalType: number;\n    RequestToJoinLeaveEmailSetting: string | null;\n    Title: string;\n}\n","import { SecurableQueryable, IBasePermissions, PermissionKind } from \"./types\";\nimport { _SharePointQueryableInstance, _SharePointQueryable, SharePointQueryableInstance, SharePointQueryable } from \"../sharepointqueryable\";\nimport { hOP } from \"@pnp/common\";\nimport { spPost } from \"../operations\";\n\n/**\n* Gets the effective permissions for the user supplied\n*\n* @param loginName The claims username for the user (ex: i:0#.f|membership|user@domain.com)\n*/\nexport async function getUserEffectivePermissions(this: SecurableQueryable, loginName: string): Promise<IBasePermissions> {\n\n    const q = this.clone(SharePointQueryableInstance, \"getUserEffectivePermissions(@user)\");\n    q.query.set(\"@user\", `'${encodeURIComponent(loginName)}'`);\n    const r = await q.get<any>();\n    // handle verbose mode\n    return hOP(r, \"GetUserEffectivePermissions\") ? r.GetUserEffectivePermissions : r;\n}\n\n/**\n * Gets the effective permissions for the current user\n */\nexport async function getCurrentUserEffectivePermissions(this: SecurableQueryable): Promise<IBasePermissions> {\n\n    const q = this.clone(SharePointQueryable, \"EffectiveBasePermissions\");\n    return q.get<any>().then(r => {\n        // handle verbose mode\n        return hOP(r, \"EffectiveBasePermissions\") ? r.EffectiveBasePermissions : r;\n    });\n}\n\n/**\n * Breaks the security inheritance at this level optinally copying permissions and clearing subscopes\n *\n * @param copyRoleAssignments If true the permissions are copied from the current parent scope\n * @param clearSubscopes Optional. true to make all child securable objects inherit role assignments from the current object\n */\nexport async function breakRoleInheritance(this: SecurableQueryable, copyRoleAssignments = false, clearSubscopes = false): Promise<void> {\n    await spPost(this.clone(SharePointQueryable, `breakroleinheritance(copyroleassignments=${copyRoleAssignments}, clearsubscopes=${clearSubscopes})`));\n}\n\n/**\n * Removes the local role assignments so that it re-inherit role assignments from the parent object.\n *\n */\nexport async function resetRoleInheritance(this: SecurableQueryable): Promise<void> {\n    await spPost(this.clone(SharePointQueryable, \"resetroleinheritance\"));\n}\n\n/**\n * Determines if a given user has the appropriate permissions\n *\n * @param loginName The user to check\n * @param permission The permission being checked\n */\nexport async function userHasPermissions(this: SecurableQueryable, loginName: string, permission: PermissionKind): Promise<boolean> {\n\n    const perms = await getUserEffectivePermissions.call(this, loginName);\n    return this.hasPermissions(perms, permission);\n}\n\n/**\n * Determines if the current user has the requested permissions\n *\n * @param permission The permission we wish to check\n */\nexport async function currentUserHasPermissions(this: SecurableQueryable, permission: PermissionKind): Promise<boolean> {\n\n    const perms = await getCurrentUserEffectivePermissions.call(this);\n    return this.hasPermissions(perms, permission);\n}\n\n/**\n * Taken from sp.js, checks the supplied permissions against the mask\n *\n * @param value The security principal's permissions on the given object\n * @param perm The permission checked against the value\n */\n/* tslint:disable:no-bitwise */\nexport function hasPermissions(value: IBasePermissions, perm: PermissionKind): boolean {\n\n    if (!perm) {\n        return true;\n    }\n    if (perm === PermissionKind.FullMask) {\n        return (value.High & 32767) === 32767 && value.Low === 65535;\n    }\n\n    perm = perm - 1;\n    let num = 1;\n\n    if (perm >= 0 && perm < 32) {\n        num = num << perm;\n        return 0 !== (value.Low & num);\n    } else if (perm >= 32 && perm < 64) {\n        num = num << perm - 32;\n        return 0 !== (value.High & num);\n    }\n    return false;\n}\n/* tslint:enable */\n","import { body } from \"@pnp/odata\";\nimport { jsS, assign } from \"@pnp/common\";\nimport { SharePointQueryableCollection, _SharePointQueryableInstance, SharePointQueryableInstance } from \"../sharepointqueryable\";\nimport { extractWebUrl } from \"../utils/extractweburl\";\nimport { Web, _Web } from \"../webs/types\";\nimport { _File } from \"../files/types\";\nimport {\n    ShareableQueryable,\n    ISharingResult,\n    SharingRole,\n    IShareObjectOptions,\n    SharingLinkKind,\n    IShareLinkResponse,\n    ISharingInformationRequest,\n    ISharingRecipient,\n    ISharingEntityPermission,\n    ISharingInformation,\n    IObjectSharingSettings,\n    ISharingEmailData,\n    RoleType,\n} from \"./types\";\nimport { spPost } from \"../operations\";\nimport { tag } from \"../telemetry\";\nimport { RoleDefinitions } from \"../security/types\";\nimport { emptyGuid } from \"../splibconfig\";\n\n/**\n * Shares an object based on the supplied options\n *\n * @param options The set of options to send to the ShareObject method\n * @param bypass If true any processing is skipped and the options are sent directly to the ShareObject method\n */\nexport async function shareObject(o: ShareableQueryable, options: IShareObjectOptions, bypass = false): Promise<ISharingResult> {\n\n    if (bypass) {\n\n        // if the bypass flag is set send the supplied parameters directly to the service\n        return sendShareObjectRequest(o, options);\n    }\n\n    // extend our options with some defaults\n    options = assign(options, {\n        group: null,\n        includeAnonymousLinkInEmail: false,\n        propagateAcl: false,\n        useSimplifiedRoles: true,\n    }, true);\n\n    const roleValue = await getRoleValue(options.role, options.group);\n\n    // handle the multiple input types\n    if (!Array.isArray(options.loginNames)) {\n        options.loginNames = [options.loginNames];\n    }\n\n    const userStr = jsS(options.loginNames.map(Key => ({ Key })));\n\n    let postBody = {\n        peoplePickerInput: userStr,\n        roleValue: roleValue,\n        url: options.url,\n    };\n\n    if (options.emailData !== undefined && options.emailData !== null) {\n        postBody = assign(postBody, {\n            emailBody: options.emailData.body,\n            emailSubject: options.emailData.subject !== undefined ? options.emailData.subject : \"Shared with you.\",\n            sendEmail: true,\n        });\n    }\n\n    return sendShareObjectRequest(o, postBody);\n}\n\n/**\n * Gets a sharing link for the supplied\n *\n * @param kind The kind of link to share\n * @param expiration The optional expiration for this link\n */\nexport function getShareLink(this: ShareableQueryable, kind: SharingLinkKind, expiration: Date = null): Promise<IShareLinkResponse> {\n\n    // date needs to be an ISO string or null\n    const expString = expiration !== null ? expiration.toISOString() : null;\n\n    // clone using the factory and send the request\n    const o = tag.configure(this.clone(SharePointQueryableInstance, \"shareLink\"), \"sh.getShareLink\");\n    return spPost<IShareLinkResponse>(o, body({\n        request: {\n            createLink: true,\n            emailData: null,\n            settings: {\n                expiration: expString,\n                linkKind: kind,\n            },\n        },\n    }));\n}\n\n/**\n * Checks Permissions on the list of Users and returns back role the users have on the Item.\n *\n * @param recipients The array of Entities for which Permissions need to be checked.\n */\nexport function checkPermissions(this: ShareableQueryable, recipients: ISharingRecipient[]): Promise<ISharingEntityPermission[]> {\n\n    const o = tag.configure(this.clone(SharePointQueryableInstance, \"checkPermissions\"), \"sh.checkPermissions\");\n    return spPost<ISharingEntityPermission[]>(o, body({ recipients }));\n}\n\n/**\n * Get Sharing Information.\n *\n * @param request The SharingInformationRequest Object.\n * @param expands Expand more fields.\n * \n */\nexport function getSharingInformation(this: ShareableQueryable, request: ISharingInformationRequest = null, expands: string[] = []): Promise<ISharingInformation> {\n\n    const o = tag.configure(this.clone(SharePointQueryableInstance, \"getSharingInformation\"), \"sh.getSharingInformation\");\n    return spPost(o.expand(...expands), body({ request }));\n}\n\n/**\n * Gets the sharing settings of an item.\n *\n * @param useSimplifiedRoles Determines whether to use simplified roles.\n */\nexport function getObjectSharingSettings(this: ShareableQueryable, useSimplifiedRoles = true): Promise<IObjectSharingSettings> {\n\n    const o = tag.configure(this.clone(SharePointQueryableInstance, \"getObjectSharingSettings\"), \"sh.getObjectSharingSettings\");\n    return spPost<IObjectSharingSettings>(o, body({ useSimplifiedRoles }));\n}\n\n/**\n * Unshares this object\n */\nexport function unshareObject(this: ShareableQueryable): Promise<ISharingResult> {\n\n    return spPost(tag.configure(this.clone(SharePointQueryableInstance, \"unshareObject\"), \"sh.unshareObject\"));\n}\n\n/**\n * Deletes a link by type\n *\n * @param kind Deletes a sharing link by the kind of link\n */\nexport function deleteLinkByKind(this: ShareableQueryable, linkKind: SharingLinkKind): Promise<void> {\n\n    return spPost(tag.configure(this.clone(SharePointQueryableInstance, \"deleteLinkByKind\"), \"sh.deleteLinkByKind\"), body({ linkKind }));\n}\n\n/**\n * Removes the specified link to the item.\n *\n * @param kind The kind of link to be deleted.\n * @param shareId\n */\nexport function unshareLink(this: ShareableQueryable, linkKind: SharingLinkKind, shareId = emptyGuid): Promise<void> {\n\n    return spPost(tag.configure(this.clone(SharePointQueryableInstance, \"unshareLink\"), \"sh.unshareLink\"), body({ linkKind, shareId }));\n}\n\n/**\n * Shares this instance with the supplied users\n *\n * @param loginNames Resolved login names to share\n * @param role The role\n * @param requireSignin True to require the user is authenticated, otherwise false\n * @param propagateAcl True to apply this share to all children\n * @param emailData If supplied an email will be sent with the indicated properties\n */\nexport async function shareWith(\n    o: ShareableQueryable,\n    loginNames: string | string[],\n    role: SharingRole,\n    requireSignin = false,\n    propagateAcl = false,\n    emailData?: ISharingEmailData): Promise<ISharingResult> {\n\n    // handle the multiple input types\n    if (!Array.isArray(loginNames)) {\n        loginNames = [loginNames];\n    }\n\n    const userStr = jsS(loginNames.map(login => { return { Key: login }; }));\n    const roleFilter = role === SharingRole.Edit ? RoleType.Contributor : RoleType.Reader;\n\n    // start by looking up the role definition id we need to set the roleValue\n    // remove need to reference Web here, which created a circular build issue\n    const w = SharePointQueryableCollection(\"_api/web\", \"roledefinitions\");\n    const def = await w.select(\"Id\").filter(`RoleTypeKind eq ${roleFilter}`).get();\n    if (!Array.isArray(def) || def.length < 1) {\n        throw Error(`Could not locate a role defintion with RoleTypeKind ${roleFilter}`);\n    }\n    let postBody = {\n        includeAnonymousLinkInEmail: requireSignin,\n        peoplePickerInput: userStr,\n        propagateAcl: propagateAcl,\n        roleValue: `role:${def[0].Id}`,\n        useSimplifiedRoles: true,\n    };\n    if (emailData !== undefined) {\n        postBody = assign(postBody, {\n            emailBody: emailData.body,\n            emailSubject: emailData.subject !== undefined ? emailData.subject : \"\",\n            sendEmail: true,\n        });\n    }\n\n    return spPost<ISharingResult>(tag.configure(o.clone(SharePointQueryableInstance, \"shareObject\"), \"sh.shareWith\"), body(postBody));\n}\n\nfunction sendShareObjectRequest(o: ShareableQueryable, options: any): Promise<ISharingResult> {\n\n    const w = tag.configure(Web(extractWebUrl(o.toUrl()), \"/_api/SP.Web.ShareObject\"), \"sh.sendShareObjectRequest\");\n    return spPost(w.expand(\"UsersWithAccessRequests\", \"GroupsSharedWith\"), body(options));\n}\n\n/**\n * Calculates the roleValue string used in the sharing query\n *\n * @param role The Sharing Role\n * @param group The Group type\n */\nasync function getRoleValue(role: SharingRole, group: RoleType): Promise<string> {\n\n    // we will give group precedence, because we had to make a choice\n    if (group !== undefined && group !== null) {\n\n        switch (group) {\n            case RoleType.Contributor:\n                const g1 = await Web(\"_api/web\", \"associatedmembergroup\").select(\"Id\")<{ Id: number; }>();\n                return `group: ${g1.Id}`;\n            case RoleType.Reader:\n            case RoleType.Guest:\n                const g2 = await Web(\"_api/web\", \"associatedvisitorgroup\").select(\"Id\")<{ Id: number; }>();\n                return `group: ${g2.Id}`;\n            default:\n                throw Error(\"Could not determine role value for supplied value. Contributor, Reader, and Guest are supported\");\n        }\n    } else {\n\n        const roleFilter = role === SharingRole.Edit ? RoleType.Contributor : RoleType.Reader;\n        const def = await RoleDefinitions(\"_api/web\").select(\"Id\").top(1).filter(`RoleTypeKind eq ${roleFilter}`)<{ Id: number; }[]>();\n        if (def.length < 1) {\n            throw Error(\"Could not locate associated role definition for supplied role. Edit and View are supported\");\n        }\n        return `role: ${def[0].Id}`;\n    }\n}\n\n","import { addProp } from \"@pnp/odata\";\nimport { _Item } from \"../items/types\";\nimport { RoleAssignments, ISecurableMethods } from \"./types\";\nimport { _SharePointQueryableInstance, SharePointQueryableInstance } from \"../sharepointqueryable\";\nimport {\n    getUserEffectivePermissions,\n    getCurrentUserEffectivePermissions,\n    breakRoleInheritance,\n    resetRoleInheritance,\n    userHasPermissions,\n    currentUserHasPermissions,\n    hasPermissions,\n} from \"./funcs\";\n\ndeclare module \"../items/types\" {\n    interface _Item extends ISecurableMethods { }\n    interface IItem extends ISecurableMethods { }\n}\n\naddProp(_Item, \"roleAssignments\", RoleAssignments);\naddProp(_Item, \"firstUniqueAncestorSecurableObject\", SharePointQueryableInstance);\n\n_Item.prototype.getUserEffectivePermissions = getUserEffectivePermissions;\n_Item.prototype.getCurrentUserEffectivePermissions = getCurrentUserEffectivePermissions;\n_Item.prototype.breakRoleInheritance = breakRoleInheritance;\n_Item.prototype.resetRoleInheritance = resetRoleInheritance;\n_Item.prototype.userHasPermissions = userHasPermissions;\n_Item.prototype.currentUserHasPermissions = currentUserHasPermissions;\n_Item.prototype.hasPermissions = hasPermissions;\n","import { addProp } from \"@pnp/odata\";\nimport { _List } from \"../lists/types\";\nimport { RoleAssignments, ISecurableMethods } from \"./types\";\nimport { SharePointQueryableInstance } from \"../sharepointqueryable\";\nimport {\n    getUserEffectivePermissions,\n    getCurrentUserEffectivePermissions,\n    breakRoleInheritance,\n    resetRoleInheritance,\n    userHasPermissions,\n    currentUserHasPermissions,\n    hasPermissions,\n} from \"./funcs\";\n\ndeclare module \"../lists/types\" {\n    interface _List extends ISecurableMethods { }\n    interface IList extends ISecurableMethods { }\n}\n\naddProp(_List, \"roleAssignments\", RoleAssignments);\naddProp(_List, \"firstUniqueAncestorSecurableObject\", SharePointQueryableInstance);\n\n_List.prototype.getUserEffectivePermissions = getUserEffectivePermissions;\n_List.prototype.getCurrentUserEffectivePermissions = getCurrentUserEffectivePermissions;\n_List.prototype.breakRoleInheritance = breakRoleInheritance;\n_List.prototype.resetRoleInheritance = resetRoleInheritance;\n_List.prototype.userHasPermissions = userHasPermissions;\n_List.prototype.currentUserHasPermissions = currentUserHasPermissions;\n_List.prototype.hasPermissions = hasPermissions;\n","import { addProp } from \"@pnp/odata\";\nimport { _Web } from \"../webs/types\";\nimport { RoleDefinitions, IRoleDefinitions, RoleAssignments, ISecurableMethods } from \"./types\";\nimport { SharePointQueryableInstance } from \"../sharepointqueryable\";\nimport {\n    getUserEffectivePermissions,\n    getCurrentUserEffectivePermissions,\n    breakRoleInheritance,\n    resetRoleInheritance,\n    userHasPermissions,\n    currentUserHasPermissions,\n    hasPermissions,\n} from \"./funcs\";\n\ndeclare module \"../webs/types\" {\n    interface _Web extends ISecurableMethods {\n        roleDefinitions: IRoleDefinitions;\n    }\n    interface IWeb extends ISecurableMethods {\n        roleDefinitions: IRoleDefinitions;\n    }\n}\n\naddProp(_Web, \"roleDefinitions\", RoleDefinitions);\naddProp(_Web, \"roleAssignments\", RoleAssignments);\naddProp(_Web, \"firstUniqueAncestorSecurableObject\", SharePointQueryableInstance);\n\n_Web.prototype.getUserEffectivePermissions = getUserEffectivePermissions;\n_Web.prototype.getCurrentUserEffectivePermissions = getCurrentUserEffectivePermissions;\n_Web.prototype.breakRoleInheritance = breakRoleInheritance;\n_Web.prototype.resetRoleInheritance = resetRoleInheritance;\n_Web.prototype.userHasPermissions = userHasPermissions;\n_Web.prototype.currentUserHasPermissions = currentUserHasPermissions;\n_Web.prototype.hasPermissions = hasPermissions;\n","import { _File } from \"../files/types\";\nimport {\n    ISharingEmailData,\n    ISharingResult,\n    SharingRole,\n    ISharedFuncs,\n} from \"./types\";\nimport {\n    shareWith,\n    getShareLink,\n    checkPermissions,\n    getSharingInformation,\n    getObjectSharingSettings,\n    unshareObject,\n    deleteLinkByKind,\n    unshareLink,\n} from \"./funcs\";\n\ndeclare module \"../files/types\" {\n    interface _File extends ISharedFuncs {\n        shareWith(loginNames: string | string[], role?: SharingRole, requireSignin?: boolean, emailData?: ISharingEmailData): Promise<ISharingResult>;\n    }\n    interface IFile extends ISharedFuncs {\n        /**\n         * Shares this item with one or more users\n         *\n         * @param loginNames string or string[] of resolved login names to which this item will be shared\n         * @param role The role (View | Edit) applied to the share\n         * @param shareEverything Share everything in this folder, even items with unique permissions.\n         * @param requireSignin If true the user must signin to view link, otherwise anyone with the link can access the resource\n         * @param emailData Optional, if inlucded an email will be sent. Note subject currently has no effect.\n         */\n        shareWith(loginNames: string | string[], role?: SharingRole, requireSignin?: boolean, emailData?: ISharingEmailData): Promise<ISharingResult>;\n    }\n}\n\n_File.prototype.shareWith = function (\n    this: _File,\n    loginNames: string | string[],\n    role: SharingRole = SharingRole.View,\n    requireSignin = false,\n    emailData?: ISharingEmailData): Promise<ISharingResult> {\n\n    return shareWith(this, loginNames, role, requireSignin, false, emailData);\n};\n\n_File.prototype.getShareLink = getShareLink;\n_File.prototype.checkSharingPermissions = checkPermissions;\n_File.prototype.getSharingInformation = getSharingInformation;\n_File.prototype.getObjectSharingSettings = getObjectSharingSettings;\n_File.prototype.unshare = unshareObject;\n_File.prototype.deleteSharingLinkByKind = deleteLinkByKind;\n_File.prototype.unshareLink = unshareLink;\n","import {\n    _Folder,\n} from \"../folders/types\";\nimport {\n    ISharingEmailData,\n    ISharingResult,\n    SharingRole,\n    ISharedFuncs,\n    ISharingInformationRequest,\n    SharingLinkKind,\n    ISharingRecipient,\n} from \"./types\";\n\ndeclare module \"../folders/types\" {\n    interface _Folder extends ISharedFuncs {\n        shareWith(loginNames: string | string[], role?: SharingRole, requireSignin?: boolean, shareEverything?: boolean, emailData?: ISharingEmailData): Promise<ISharingResult>;\n    }\n    interface IFolder extends ISharedFuncs {\n        shareWith(loginNames: string | string[], role?: SharingRole, requireSignin?: boolean, shareEverything?: boolean, emailData?: ISharingEmailData): Promise<ISharingResult>;\n    }\n}\n\n_Folder.prototype.shareWith = async function (\n    loginNames: string | string[],\n    role: SharingRole = SharingRole.View,\n    requireSignin = false,\n    shareEverything = false,\n    emailData?: ISharingEmailData): Promise<ISharingResult> {\n\n    const dependency = this.addBatchDependency();\n\n    const shareable = await this.getShareable();\n    dependency();\n    return shareable.shareWith(loginNames, role, requireSignin, shareEverything, emailData);\n};\n\n_Folder.prototype.getShareLink = async function (this: _Folder, kind: SharingLinkKind, expiration: Date = null): Promise<any> {\n    const dependency = this.addBatchDependency();\n\n    const shareable = await this.getShareable();\n    dependency();\n    return shareable.getShareLink(kind, expiration);\n};\n\n_Folder.prototype.checkSharingPermissions = async function (this: _Folder, recipients: ISharingRecipient[]): Promise<any> {\n    const dependency = this.addBatchDependency();\n\n    const shareable = await this.getShareable();\n    dependency();\n    return shareable.checkSharingPermissions(recipients);\n};\n\n_Folder.prototype.getSharingInformation = async function (this: _Folder, request?: ISharingInformationRequest, expands?: string[]): Promise<any> {\n    const dependency = this.addBatchDependency();\n\n    const shareable = await this.getShareable();\n    dependency();\n    return shareable.getSharingInformation(request, expands);\n};\n\n_Folder.prototype.getObjectSharingSettings = async function (this: _Folder, useSimplifiedRoles = true): Promise<any> {\n    const dependency = this.addBatchDependency();\n\n    const shareable = await this.getShareable();\n    dependency();\n    return shareable.getObjectSharingSettings(useSimplifiedRoles);\n};\n\n_Folder.prototype.unshare = async function (this: _Folder): Promise<any> {\n    const dependency = this.addBatchDependency();\n\n    const shareable = await this.getShareable();\n    dependency();\n    return shareable.unshare();\n};\n\n_Folder.prototype.deleteSharingLinkByKind = async function (this: _Folder, kind: SharingLinkKind): Promise<any> {\n    const dependency = this.addBatchDependency();\n\n    const shareable = await this.getShareable();\n    dependency();\n    return shareable.deleteSharingLinkByKind(kind);\n};\n\n_Folder.prototype.unshareLink = async function (this: _Folder, kind: SharingLinkKind, shareId?: string): Promise<any> {\n    const dependency = this.addBatchDependency();\n\n    const shareable = await this.getShareable();\n    dependency();\n    return shareable.unshareLink(kind, shareId);\n};\n","import { _Item } from \"../items/types\";\nimport {\n    ISharingEmailData,\n    ISharingResult,\n    SharingRole,\n    ISharedFuncs,\n} from \"./types\";\n\nimport {\n    shareWith,\n    getShareLink,\n    checkPermissions,\n    getSharingInformation,\n    getObjectSharingSettings,\n    unshareObject,\n    deleteLinkByKind,\n    unshareLink,\n} from \"./funcs\";\n\ndeclare module \"../items/types\" {\n    interface _Item extends ISharedFuncs {\n        shareWith(loginNames: string | string[], role?: SharingRole, requireSignin?: boolean, emailData?: ISharingEmailData): Promise<ISharingResult>;\n    }\n    interface IItem extends ISharedFuncs {\n        /**\n         * Shares this item with one or more users\n         *\n         * @param loginNames string or string[] of resolved login names to which this item will be shared\n         * @param role The role (View | Edit) applied to the share\n         * @param emailData Optional, if inlucded an email will be sent. Note subject currently has no effect.\n         */\n        shareWith(loginNames: string | string[], role?: SharingRole, requireSignin?: boolean, emailData?: ISharingEmailData): Promise<ISharingResult>;\n    }\n}\n\n\n_Item.prototype.shareWith = function (\n    this: _Item,\n    loginNames: string | string[],\n    role: SharingRole = SharingRole.View,\n    requireSignin = false,\n    emailData?: ISharingEmailData): Promise<ISharingResult> {\n\n    return shareWith(this, loginNames, role, requireSignin, false, emailData);\n};\n\n_Item.prototype.getShareLink = getShareLink;\n_Item.prototype.checkSharingPermissions = checkPermissions;\n_Item.prototype.getSharingInformation = getSharingInformation;\n_Item.prototype.getObjectSharingSettings = getObjectSharingSettings;\n_Item.prototype.unshare = unshareObject;\n_Item.prototype.deleteSharingLinkByKind = deleteLinkByKind;\n_Item.prototype.unshareLink = unshareLink;\n","import { _Web, Web } from \"../webs/types\";\nimport { ISharingEmailData, ISharingResult, SharingRole } from \"./types\";\nimport { _SharePointQueryableInstance } from \"../sharepointqueryable\";\nimport { extractWebUrl } from \"../utils/extractweburl\";\nimport { RoleType } from \"./types\";\nimport { shareObject } from \"./funcs\";\nimport { combine } from \"@pnp/common\";\nimport { body } from \"@pnp/odata\";\nimport { spPost } from \"../operations\";\n\n/**\n * Extend _Web\n */\ndeclare module \"../webs/types\" {\n    interface _Web {\n        shareWith: (loginNames: string | string[], role?: SharingRole, emailData?: ISharingEmailData) => Promise<ISharingResult>;\n        shareObject: (url: string,\n            loginNames: string | string[],\n            role: SharingRole,\n            emailData?: ISharingEmailData,\n            group?: RoleType,\n            propagateAcl?: boolean,\n            includeAnonymousLinkInEmail?: boolean,\n            useSimplifiedRoles?: boolean) => Promise<ISharingResult>;\n        shareObjectRaw(options: any): Promise<ISharingResult>;\n        unshareObject(url: string): Promise<ISharingResult>;\n    }\n    interface IWeb {\n        shareWith: (loginNames: string | string[], role?: SharingRole, emailData?: ISharingEmailData) => Promise<ISharingResult>;\n        shareObject: (url: string,\n            loginNames: string | string[],\n            role: SharingRole,\n            emailData?: ISharingEmailData,\n            group?: RoleType,\n            propagateAcl?: boolean,\n            includeAnonymousLinkInEmail?: boolean,\n            useSimplifiedRoles?: boolean) => Promise<ISharingResult>;\n        shareObjectRaw(options: any): Promise<ISharingResult>;\n        unshareObject(url: string): Promise<ISharingResult>;\n    }\n}\n\n/**\n * Shares this web with the supplied users\n * @param loginNames The resolved login names to share\n * @param role The role to share this web\n * @param emailData Optional email data\n */\n_Web.prototype.shareWith = async function (\n    this: _Web,\n    loginNames: string | string[],\n    role: SharingRole = SharingRole.View,\n    emailData?: ISharingEmailData): Promise<ISharingResult> {\n\n    const dependency = this.addBatchDependency();\n    // remove need to reference Web here, which created a circular build issue\n    const web = new _SharePointQueryableInstance(extractWebUrl(this.toUrl()), \"/_api/web/url\");\n\n    const url = await web.get();\n    dependency();\n\n    return this.shareObject(combine(url, \"/_layouts/15/aclinv.aspx?forSharing=1&mbypass=1\"), loginNames, role, emailData);\n};\n\n/**\n * Provides direct access to the static web.ShareObject method\n *\n * @param url The url to share\n * @param loginNames Resolved loginnames string[] of a single login name string\n * @param roleValue Role value\n * @param emailData Optional email data\n * @param groupId Optional group id\n * @param propagateAcl\n * @param includeAnonymousLinkInEmail\n * @param useSimplifiedRoles\n */\n_Web.prototype.shareObject = function (\n    this: _Web,\n    url: string,\n    loginNames: string | string[],\n    role: SharingRole,\n    emailData?: ISharingEmailData,\n    group?: RoleType,\n    propagateAcl = false,\n    includeAnonymousLinkInEmail = false,\n    useSimplifiedRoles = true): Promise<ISharingResult> {\n\n    return shareObject(this, {\n        emailData: emailData,\n        group: group,\n        includeAnonymousLinkInEmail: includeAnonymousLinkInEmail,\n        loginNames: loginNames,\n        propagateAcl: propagateAcl,\n        role: role,\n        url: url,\n        useSimplifiedRoles: useSimplifiedRoles,\n    });\n};\n\n/**\n * Supplies a method to pass any set of arguments to ShareObject\n *\n * @param options The set of options to send to ShareObject\n */\n_Web.prototype.shareObjectRaw = function (this: _Web, options: any): Promise<ISharingResult> {\n    return shareObject(this, options, true);\n};\n\n/**\n * Supplies a method to pass any set of arguments to ShareObject\n *\n * @param options The set of options to send to ShareObject\n */\n_Web.prototype.unshareObject = function (this: _Web, url: string): Promise<ISharingResult> {\n    return spPost(Web(this, \"unshareObject\"), body({ url }));\n};\n","import { _SharePointQueryable, ISharePointQueryable } from \"../sharepointqueryable\";\nimport { extractWebUrl } from \"../utils/extractweburl\";\nimport { headers, body } from \"@pnp/odata\";\nimport { spPost } from \"../operations\";\nimport { hOP } from \"@pnp/common\";\nimport { tag } from \"../telemetry\";\n\nexport class _SiteDesigns extends _SharePointQueryable {\n\n    constructor(baseUrl: string | ISharePointQueryable, methodName = \"\") {\n        const url = typeof baseUrl === \"string\" ? baseUrl : baseUrl.toUrl();\n        super(extractWebUrl(url), `_api/Microsoft.Sharepoint.Utilities.WebTemplateExtensions.SiteScriptUtility.${methodName}`);\n    }\n\n    public execute<T>(props: any): Promise<T> {\n        return spPost<T>(this, body(props, headers({ \"Content-Type\": \"application/json;charset=utf-8\" })));\n    }\n\n    /**\n     * Creates a new site design available to users when they create a new site from the SharePoint home page.\n     * \n     * @param creationInfo A sitedesign creation information object\n     */\n    @tag(\"sd.createSiteDesign\")\n    public createSiteDesign(creationInfo: ISiteDesignCreationInfo): Promise<ISiteDesignInfo> {\n        return this.clone(SiteDesignsCloneFactory, `CreateSiteDesign`).execute<ISiteDesignInfo>({ info: creationInfo });\n    }\n\n    /**\n     * Applies a site design to an existing site collection.\n     *\n     * @param siteDesignId The ID of the site design to apply.\n     * @param webUrl The URL of the site collection where you want to apply the site design.\n     */\n    @tag(\"sd.applySiteDesign\")\n    public applySiteDesign(siteDesignId: string, webUrl: string): Promise<void> {\n        return this.clone(SiteDesignsCloneFactory, `ApplySiteDesign`).execute<void>({ siteDesignId: siteDesignId, \"webUrl\": webUrl });\n    }\n\n    /**\n     * Gets the list of available site designs\n     */\n    @tag(\"sd.getSiteDesigns\")\n    public getSiteDesigns(): Promise<ISiteDesignInfo[]> {\n        return this.clone(SiteDesignsCloneFactory, `GetSiteDesigns`).execute<ISiteDesignInfo[]>({});\n    }\n\n    /**\n     * Gets information about a specific site design.\n     * @param id The ID of the site design to get information about.\n     */\n    @tag(\"sd.getSiteDesignMetadata\")\n    public getSiteDesignMetadata(id: string): Promise<ISiteDesignInfo> {\n        return this.clone(SiteDesignsCloneFactory, `GetSiteDesignMetadata`).execute<ISiteDesignInfo>({ id: id });\n    }\n\n    /**\n     * Updates a site design with new values. In the REST call, all parameters are optional except the site script Id.\n     * If you had previously set the IsDefault parameter to TRUE and wish it to remain true, you must pass in this parameter again (otherwise it will be reset to FALSE). \n     * @param updateInfo A sitedesign update information object\n     */\n    @tag(\"sd.updateSiteDesign\")\n    public updateSiteDesign(updateInfo: ISiteDesignUpdateInfo): Promise<ISiteDesignInfo> {\n        return this.clone(SiteDesignsCloneFactory, `UpdateSiteDesign`).execute<ISiteDesignInfo>({ updateInfo: updateInfo });\n    }\n\n    /**\n     * Deletes a site design.\n     * @param id The ID of the site design to delete.\n     */\n    @tag(\"sd.deleteSiteDesign\")\n    public deleteSiteDesign(id: string): Promise<void> {\n        return this.clone(SiteDesignsCloneFactory, `DeleteSiteDesign`).execute<void>({ id: id });\n    }\n\n    /**\n     * Gets a list of principals that have access to a site design.\n     * @param id The ID of the site design to get rights information from.\n     */\n    @tag(\"sd.getSiteDesignRights\")\n    public getSiteDesignRights(id: string): Promise<ISiteDesignPrincipals[]> {\n        return this.clone(SiteDesignsCloneFactory, `GetSiteDesignRights`).execute<ISiteDesignPrincipals[]>({ id: id });\n    }\n\n    /**\n     * Grants access to a site design for one or more principals.\n     * @param id The ID of the site design to grant rights on.\n     * @param principalNames An array of one or more principals to grant view rights. \n     *                       Principals can be users or mail-enabled security groups in the form of \"alias\" or \"alias@<domain name>.com\"\n     * @param grantedRights Always set to 1. This represents the View right.\n     */\n    @tag(\"sd.grantSiteDesignRights\")\n    public grantSiteDesignRights(id: string, principalNames: string[], grantedRights = 1): Promise<void> {\n        return this.clone(SiteDesignsCloneFactory, `GrantSiteDesignRights`)\n            .execute<void>({\n                \"grantedRights\": grantedRights.toString(),\n                \"id\": id,\n                \"principalNames\": principalNames,\n            });\n    }\n\n    /**\n     * Revokes access from a site design for one or more principals.\n     * @param id The ID of the site design to revoke rights from.\n     * @param principalNames An array of one or more principals to revoke view rights from. \n     *                       If all principals have rights revoked on the site design, the site design becomes viewable to everyone.\n     */\n    @tag(\"sd.revokeSiteDesignRights\")\n    public revokeSiteDesignRights(id: string, principalNames: string[]): Promise<void> {\n        return this.clone(SiteDesignsCloneFactory, `RevokeSiteDesignRights`)\n            .execute<void>({\n                \"id\": id,\n                \"principalNames\": principalNames,\n            });\n    }\n\n    /**\n     * Adds a site design task on the specified web url to be invoked asynchronously.\n     * @param webUrl The absolute url of the web on where to create the task\n     * @param siteDesignId The ID of the site design to create a task for\n     */\n    @tag(\"sd.addSiteDesignTask\")\n    public addSiteDesignTask(webUrl: string, siteDesignId: string): Promise<ISiteDesignTask> {\n        return this.clone(SiteDesignsCloneFactory, `AddSiteDesignTask`)\n            .execute<ISiteDesignTask>({ \"webUrl\": webUrl, \"siteDesignId\": siteDesignId });\n    }\n\n    /**\n     * Adds a site design task on the current web to be invoked asynchronously.\n     * @param siteDesignId The ID of the site design to create a task for\n     */\n    @tag(\"sd.addSiteDesignTaskToCurrentWeb\")\n    public addSiteDesignTaskToCurrentWeb(siteDesignId: string): Promise<ISiteDesignTask> {\n        return this.clone(SiteDesignsCloneFactory, `AddSiteDesignTaskToCurrentWeb`)\n            .execute<ISiteDesignTask>({ \"siteDesignId\": siteDesignId });\n    }\n\n    /**\n     * Retrieves the site design task, if the task has finished running null will be returned\n     * @param id The ID of the site design task\n     */\n    @tag(\"sd.getSiteDesignTask\")\n    public async getSiteDesignTask(id: string): Promise<ISiteDesignTask> {\n        const task = await this.clone(SiteDesignsCloneFactory, `GetSiteDesignTask`)\n            .execute<ISiteDesignTask>({ \"taskId\": id });\n\n        return hOP(task, \"ID\") ? task : null;\n    }\n\n    /**\n     * Retrieves a list of site design that have run on a specific web\n     * @param webUrl The url of the web where the site design was applied\n     * @param siteDesignId (Optional) the site design ID, if not provided will return all site design runs\n     */\n    @tag(\"sd.getSiteDesignRun\")\n    public getSiteDesignRun(webUrl: string, siteDesignId?: string): Promise<ISiteDesignRun[]> {\n        return this.clone(SiteDesignsCloneFactory, `GetSiteDesignRun`)\n            .execute<ISiteDesignRun[]>({ \"webUrl\": webUrl, siteDesignId: siteDesignId });\n    }\n\n    /**\n     * Retrieves the status of a site design that has been run or is still running\n     * @param webUrl The url of the web where the site design was applied\n     * @param runId the run ID\n     */\n    @tag(\"sd.getSiteDesignRunStatus\")\n    public getSiteDesignRunStatus(webUrl: string, runId: string): Promise<ISiteScriptActionStatus[]> {\n        return this.clone(SiteDesignsCloneFactory, `GetSiteDesignRunStatus`)\n            .execute<ISiteScriptActionStatus[]>({ \"webUrl\": webUrl, runId: runId });\n    }\n}\nexport interface ISiteDesigns extends _SiteDesigns { }\nexport const SiteDesigns = (baseUrl: string | ISharePointQueryable, methodName?: string): ISiteDesigns => new _SiteDesigns(baseUrl, methodName);\n\ntype SiteDesignsCloneType = ISiteDesigns & ISharePointQueryable & { execute<T>(props: any): Promise<T> };\nconst SiteDesignsCloneFactory = (baseUrl: string | ISharePointQueryable, methodName = \"\"): SiteDesignsCloneType => <any>SiteDesigns(baseUrl, methodName);\n\n/**\n * Result from creating or retrieving a site design\n *\n */\nexport interface ISiteDesignInfo {\n    /**\n     * The ID of the site design to apply.\n     */\n    Id: string;\n    /**\n     * The display name of the site design.\n     */\n    Title: string;\n    /**\n     * Identifies which base template to add the design to. Use the value 64 for the Team site template, and the value 68 for the Communication site template.\n     */\n    WebTemplate: string;\n    /**\n     * An array of one or more site scripts. Each is identified by an ID. The scripts will run in the order listed.\n     */\n    SiteScriptIds: string[];\n    /**\n     * The display description of site design.\n     */\n    Description: string;\n    /**\n     * The URL of a preview image. If none is specified, SharePoint uses a generic image.\n     */\n    PreviewImageUrl: string;\n    /**\n     * The alt text description of the image for accessibility.\n     */\n    PreviewImageAltText: string;\n    /**\n     * True if the site design is applied as the default site design; otherwise, false. \n     * For more information see Customize a default site design https://docs.microsoft.com/en-us/sharepoint/dev/declarative-customization/customize-default-site-design.\n     */\n    IsDefault: boolean;\n    /**\n     * The version number of the site design\n     */\n    Version: string;\n}\n\n/**\n * Data for creating a site design\n *\n */\nexport interface ISiteDesignCreationInfo {\n    /**\n     * The display name of the site design.\n     */\n    Title: string;\n    /**\n     * Identifies which base template to add the design to. Use the value 64 for the Team site template, and the value 68 for the Communication site template.\n     */\n    WebTemplate: string;\n    /**\n     * An array of one or more site scripts. Each is identified by an ID. The scripts will run in the order listed.\n     */\n    SiteScriptIds?: string[];\n    /**\n     * (Optional) The display description of site design.\n     */\n    Description?: string;\n    /**\n     * (Optional) The URL of a preview image. If none is specified, SharePoint uses a generic image.\n     */\n    PreviewImageUrl?: string;\n    /**\n     * (Optional) The alt text description of the image for accessibility.\n     */\n    PreviewImageAltText?: string;\n    /**\n     * (Optional) True if the site design is applied as the default site design; otherwise, false. \n     * For more information see Customize a default site design https://docs.microsoft.com/en-us/sharepoint/dev/declarative-customization/customize-default-site-design.\n     */\n    IsDefault?: boolean;\n}\n\n/**\n * Data for updating a site design\n *\n */\nexport interface ISiteDesignUpdateInfo {\n    /**\n     * The ID of the site design to apply.\n     */\n    Id: string;\n    /**\n     * (Optional) The new display name of the updated site design.\n     */\n    Title?: string;\n    /**\n     * (Optional) The new template to add the site design to. Use the value 64 for the Team site template, and the value 68 for the Communication site template.\n     */\n    WebTemplate?: string;\n    /**\n     * (Optional) A new array of one or more site scripts. Each is identified by an ID. The scripts run in the order listed.\n     */\n    SiteScriptIds?: string[];\n    /**\n     * (Optional) The new display description of the updated site design.\n     */\n    Description?: string;\n    /**\n     * (Optional) The new URL of a preview image.\n     */\n    PreviewImageUrl?: string;\n    /**\n     * (Optional) The new alt text description of the image for accessibility.\n     */\n    PreviewImageAltText?: string;\n    /**\n     * (Optional) True if the site design is applied as the default site design; otherwise, false. \n     * For more information see Customize a default site design https://docs.microsoft.com/en-us/sharepoint/dev/declarative-customization/customize-default-site-design. \n     * If you had previously set the IsDefault parameter to TRUE and wish it to remain true, you must pass in this parameter again (otherwise it will be reset to FALSE).\n     */\n    IsDefault?: boolean;\n}\n\n/**\n * Result from retrieving the rights for a site design\n *\n */\nexport interface ISiteDesignPrincipals {\n    /**\n     * Display name\n     */\n    DisplayName: string;\n    /**\n     * The principal name\n     */\n    PrincipalName: string;\n    /**\n     * The principal name\n     */\n    Rights: number;\n}\n\nexport interface ISiteDesignTask {\n    /**\n     * The ID of the site design task\n     */\n    ID: string;\n    /**\n     * Logonname of the user who created the task\n     */\n    LogonName: string;\n    /**\n     * The ID of the site design the task is running on\n     */\n    SiteDesignID: string;\n    /**\n     * The ID of the site collection\n     */\n    SiteID: string;\n    /**\n     * The ID of the web\n     */\n    WebID: string;\n}\n\nexport interface ISiteScriptActionStatus {\n    /**\n     * Action index\n     */\n    ActionIndex: number;\n    /**\n     * Action key\n     */\n    ActionKey: string;\n    /**\n     * Action title\n     */\n    ActionTitle: string;\n    /**\n     * Last modified\n     */\n    LastModified: number;\n    /**\n     * Ordinal index\n     */\n    OrdinalIndex: string;\n    /**\n     * Outcome code\n     */\n    OutcomeCode: number;\n    /**\n    * Outcome text\n    */\n    OutcomeText: string;\n    /**\n     * Site script id\n     */\n    SiteScriptID: string;\n    /**\n     * Site script index\n     */\n    SiteScriptIndex: number;\n    /**\n     * Site script title\n     */\n    SiteScriptTitle: string;\n}\n\nexport interface ISiteDesignRun {\n    /**\n     * The ID of the site design run\n     */\n    ID: string;\n    /**\n     * The ID of the site design that was applied\n     */\n    SiteDesignID: string;\n    /**\n     * The title of the site design that was applied\n     */\n    SiteDesignTitle: string;\n    /**\n     * The version of the site design that was applied\n     */\n    SiteDesignVersion: number;\n    /**\n     * The site id where the site design was applied\n     */\n    SiteID: string;\n    /**\n     * The start time when the site design was applied\n     */\n    StartTime: number;\n    /**\n     * The web id where the site design was applied\n     */\n    WebID: string;\n}\n","import { _Web } from \"../webs/types\";\nimport { ISiteDesignRun, SiteDesigns, ISiteDesignTask, ISiteScriptActionStatus } from \"./types\";\n\ndeclare module \"../webs/types\" {\n\n    interface _Web {\n        getSiteDesignRuns(siteDesignId?: string): Promise<ISiteDesignRun[]>;\n        addSiteDesignTask(siteDesignId: string): Promise<ISiteDesignTask>;\n        getSiteDesignRunStatus(runId: string): Promise<ISiteScriptActionStatus[]>;\n    }\n\n    interface IWeb {\n        /**\n         * Retrieves a list of site design that have run on the current web\n         * @param siteDesignId (Optional) the site design ID, if not provided will return all site design runs\n         */\n        getSiteDesignRuns(siteDesignId?: string): Promise<ISiteDesignRun[]>;\n        /**\n         * Adds a site design task on the current web to be invoked asynchronously.\n         * @param siteDesignId The ID of the site design to create a task for\n         */\n        addSiteDesignTask(siteDesignId: string): Promise<ISiteDesignTask>;\n        /**\n         * Retrieves the status of a site design that has been run or is still running\n         * @param runId the run ID\n         */\n        getSiteDesignRunStatus(runId: string): Promise<ISiteScriptActionStatus[]>;\n    }\n}\n\n_Web.prototype.getSiteDesignRuns = function (this: _Web, siteDesignId?: string): Promise<ISiteDesignRun[]> {\n    return SiteDesigns(this, \"\").getSiteDesignRun(undefined, siteDesignId);\n};\n\n_Web.prototype.addSiteDesignTask = function (this: _Web, siteDesignId: string): Promise<ISiteDesignTask> {\n    return SiteDesigns(this, \"\").addSiteDesignTaskToCurrentWeb(siteDesignId);\n};\n\n_Web.prototype.getSiteDesignRunStatus = function (this: _Web, runId: string): Promise<ISiteScriptActionStatus[]> {\n    return SiteDesigns(this, \"\").getSiteDesignRunStatus(undefined, runId);\n};\n","import \"./web\";\nimport { SPRest } from \"../rest\";\nimport { ISiteDesigns, SiteDesigns } from \"./types\";\n\nexport {\n    ISiteDesignCreationInfo,\n    ISiteDesignInfo,\n    ISiteDesignPrincipals,\n    ISiteDesignUpdateInfo,\n    ISiteDesigns,\n    SiteDesigns,\n    ISiteDesignRun,\n    ISiteDesignTask,\n    ISiteScriptActionStatus,\n} from \"./types\";\n\ndeclare module \"../rest\" {\n    interface SPRest {\n        readonly siteDesigns: ISiteDesigns;\n    }\n}\n\nReflect.defineProperty(SPRest.prototype, \"siteDesigns\", {\n    configurable: true,\n    enumerable: true,\n    get: function (this: SPRest) {\n        return SiteDesigns(this._baseUrl);\n    },\n});\n","import { addProp } from \"@pnp/odata\";\nimport { _Web, Web } from \"../webs/types\";\nimport { ISiteGroups, SiteGroups, ISiteGroup } from \"./types\";\nimport { spPost } from \"../operations\";\nimport { escapeQueryStrValue } from \"../utils/escapeQueryStrValue\";\nimport \"../security/web\";\n\ndeclare module \"../webs/types\" {\n\n    interface _Web {\n        readonly siteGroups: ISiteGroups;\n        readonly associatedOwnerGroup: ISiteGroup;\n        readonly associatedMemberGroup: ISiteGroup;\n        readonly associatedVisitorGroup: ISiteGroup;\n        createDefaultAssociatedGroups(groupNameSeed: string, siteOwner: string, copyRoleAssignments?: boolean, clearSubscopes?: boolean, siteOwner2?: string): Promise<void>;\n    }\n    interface IWeb {\n\n        /**\n         * Returns the site groups of this web\n         */\n        readonly siteGroups: ISiteGroups;\n\n        /**\n         * The web's owner group\n         */\n        readonly associatedOwnerGroup: ISiteGroup;\n\n        /**\n         * The web's member group\n         */\n        readonly associatedMemberGroup: ISiteGroup;\n\n        /**\n         * The web's visitor group\n         */\n        readonly associatedVisitorGroup: ISiteGroup;\n\n        /**\n         * Creates the default associated groups (Members, Owners, Visitors) and gives them the default permissions on the site.\n         * The target site must have unique permissions and no associated members / owners / visitors groups\n         *\n         * @param groupNameSeed The base group name. E.g. 'TestSite' would produce 'TestSite Members' etc.\n         * @param siteOwner The user login name to be added to the site Owners group. Default is the current user\n         * @param copyRoleAssignments Optional. If true the permissions are copied from the current parent scope\n         * @param clearSubscopes Optional. true to make all child securable objects inherit role assignments from the current object\n         * @param siteOwner2 Optional. The second user login name to be added to the site Owners group. Default is empty\n         */\n        createDefaultAssociatedGroups(groupNameSeed: string, siteOwner: string, copyRoleAssignments?: boolean, clearSubscopes?: boolean, siteOwner2?: string): Promise<void>;\n    }\n}\n\naddProp(_Web, \"siteGroups\", SiteGroups);\naddProp(_Web, \"associatedOwnerGroup\", SiteGroups, \"associatedownergroup\");\naddProp(_Web, \"associatedMemberGroup\", SiteGroups, \"associatedmembergroup\");\naddProp(_Web, \"associatedVisitorGroup\", SiteGroups, \"associatedvisitorgroup\");\n\n_Web.prototype.createDefaultAssociatedGroups = async function (\n    this: _Web,\n    groupNameSeed: string,\n    siteOwner: string,\n    copyRoleAssignments = false,\n    clearSubscopes = true,\n    siteOwner2?: string): Promise<void> {\n\n    await this.breakRoleInheritance(copyRoleAssignments, clearSubscopes);\n\n    const q = this.clone(Web, \"createDefaultAssociatedGroups(userLogin=@u,userLogin2=@v,groupNameSeed=@s)\");\n    q.query.set(\"@u\", `'${escapeQueryStrValue(siteOwner || \"\")}'`);\n    q.query.set(\"@v\", `'${escapeQueryStrValue(siteOwner2 || \"\")}'`);\n    q.query.set(\"@s\", `'${escapeQueryStrValue(groupNameSeed || \"\")}'`);\n    return spPost(q);\n};\n\n","import { body } from \"@pnp/odata\";\nimport { spPost } from \"../operations\";\nimport { ISharePointQueryable, _SharePointQueryable } from \"../sharepointqueryable\";\nimport { extractWebUrl } from \"../utils/extractweburl\";\nimport { tag } from \"../telemetry\";\nimport { escapeQueryStrValue } from \"../utils/escapeQueryStrValue\";\n\nexport class _SiteScripts extends _SharePointQueryable {\n\n    constructor(baseUrl: string | ISharePointQueryable, methodName = \"\") {\n        const url = typeof baseUrl === \"string\" ? baseUrl : baseUrl.toUrl();\n        super(extractWebUrl(url), `_api/Microsoft.Sharepoint.Utilities.WebTemplateExtensions.SiteScriptUtility.${methodName}`);\n    }\n\n    public execute<T>(props: any): Promise<T> {\n        return spPost<T>(this, body(props));\n    }\n\n    /**\n     * Gets a list of information on all existing site scripts.\n     */\n    @tag(\"ss.getSiteScripts\")\n    public getSiteScripts(): Promise<ISiteScriptInfo[]> {\n        return this.clone(SiteScriptsCloneFactory, \"GetSiteScripts\", true).execute<ISiteScriptInfo[]>({});\n    }\n\n    /**\n     * Creates a new site script.\n     * \n     * @param title The display name of the site script.\n     * @param content JSON value that describes the script. For more information, see JSON reference.\n     */\n    @tag(\"ss.createSiteScript\")\n    public createSiteScript(title: string, description: string, content: any): Promise<ISiteScriptInfo> {\n        return this.clone(SiteScriptsCloneFactory,\n            `CreateSiteScript(Title=@title,Description=@desc)?@title='${escapeQueryStrValue(title)}'&@desc='${escapeQueryStrValue(description)}'`)\n            .execute<ISiteScriptInfo>(content);\n    }\n\n    /**\n     * Gets information about a specific site script. It also returns the JSON of the script.\n     * \n     * @param id The ID of the site script to get information about.\n     */\n    @tag(\"ss.getSiteScriptMetadata\")\n    public getSiteScriptMetadata(id: string): Promise<ISiteScriptInfo> {\n        return this.clone(SiteScriptsCloneFactory, \"GetSiteScriptMetadata\").execute<ISiteScriptInfo>({ id });\n    }\n\n    /**\n     * Deletes a site script.\n     * \n     * @param id The ID of the site script to delete.\n     */\n    @tag(\"ss.deleteSiteScript\")\n    public deleteSiteScript(id: string): Promise<void> {\n        return this.clone(SiteScriptsCloneFactory, \"DeleteSiteScript\").execute<void>({ id });\n    }\n\n    /**\n     * Updates a site script with new values. In the REST call, all parameters are optional except the site script Id.\n     * \n     * @param siteScriptUpdateInfo Object that contains the information to update a site script. \n     *                             Make sure you stringify the content object or pass it in the second 'content' parameter\n     * @param content (Optional) A new JSON script defining the script actions. For more information, see Site design JSON schema.\n     */\n    @tag(\"ss.updateSiteScript\")\n    public updateSiteScript(updateInfo: ISiteScriptUpdateInfo, content?: any): Promise<ISiteScriptInfo> {\n\n        if (content) {\n            updateInfo.Content = JSON.stringify(content);\n        }\n\n        return this.clone(SiteScriptsCloneFactory, \"UpdateSiteScript\").execute<ISiteScriptInfo>({ updateInfo });\n    }\n\n    /**\n     * Gets the site script syntax (JSON) for a specific list\n     * @param listUrl The absolute url of the list to retrieve site script\n     */\n    @tag(\"ss.getSiteScriptFromList\")\n    public getSiteScriptFromList(listUrl: string): Promise<string> {\n        return this.clone(SiteScriptsCloneFactory, `GetSiteScriptFromList`).execute<string>({ listUrl });\n    }\n\n    /**\n     * Gets the site script syntax (JSON) for a specific web\n     * @param webUrl The absolute url of the web to retrieve site script\n     * @param extractInfo configuration object to specify what to extract\n     */\n    @tag(\"ss.getSiteScriptFromWeb\")\n    public getSiteScriptFromWeb(webUrl: string, info: ISiteScriptSerializationInfo): Promise<ISiteScriptSerializationResult> {\n        return this.clone(SiteScriptsCloneFactory, `getSiteScriptFromWeb`).execute<ISiteScriptSerializationResult>({ webUrl, info });\n    }\n\n    /**\n     * Executes the indicated site design action on the indicated web.\n     * \n     * @param webUrl The absolute url of the web to retrieve site script\n     * @param extractInfo configuration object to specify what to extract\n     */\n    @tag(\"ss.executeSiteScriptAction\")\n    public executeSiteScriptAction(actionDefinition: string): Promise<ISiteScriptActionResult> {\n        return this.clone(SiteScriptsCloneFactory, `executeSiteScriptAction`).execute<ISiteScriptActionResult>({ actionDefinition });\n    }\n}\nexport interface ISiteScripts extends _SiteScripts { }\nexport const SiteScripts = (baseUrl: string | ISharePointQueryable, methodName?: string): ISiteScripts => new _SiteScripts(baseUrl, methodName);\n\ntype SiteScriptsCloneType = ISiteScripts & ISharePointQueryable & { execute<T>(props: any): Promise<T> };\nconst SiteScriptsCloneFactory = (baseUrl: string | ISharePointQueryable, methodName = \"\"): SiteScriptsCloneType => <any>SiteScripts(baseUrl, methodName);\n\n/**\n * Result from creating or retrieving a site script\n *\n */\nexport interface ISiteScriptInfo {\n    /**\n     * The ID of the site script to apply\n     */\n    Id: string;\n    /**\n     * The display name of the site script\n     */\n    Title: string;\n    /**\n     * The description for the site script\n     */\n    Description: string;\n    /**\n     * The JSON data/definition for the site script\n     */\n    Content: string;\n    /**\n     * The version number of the site script\n     */\n    Version: string;\n}\n\n/**\n * Data for updating a site script\n *\n */\nexport interface ISiteScriptUpdateInfo {\n    /**\n     * The ID of the site script to update\n     */\n    Id: string;\n    /**\n     * (Optional) The new display name for the updated site script\n     */\n    Title?: string;\n    /**\n     * (Optional) The new description for the updated site script\n     */\n    Description?: string;\n    /**\n     * (Optional) The new JSON data/definition for the updated site script\n     */\n    Content?: string;\n    /**\n     * (Optional) The new version for the updated site script\n     */\n    Version?: string;\n}\n\nexport interface ISiteScriptSerializationInfo {\n    /**\n     * (Optional) Include branding\n     */\n    IncludeBranding?: boolean;\n    /**\n     * (Optional) Lists to include e.g. [\"Lists/MyList\"]\n     */\n    IncludedLists?: string[];\n    /**\n     * (Optional) Include links to exported items\n     */\n    IncludeLinksToExportedItems?: boolean;\n    /**\n     * (Optional) Include regional settings\n     */\n    IncludeRegionalSettings?: boolean;\n    /**\n     * (Optional) Include site external sharing capability\n     */\n    IncludeSiteExternalSharingCapability?: boolean;\n    /**\n     * (Optional) Include theme\n     */\n    IncludeTheme?: boolean;\n}\n\nexport interface ISiteScriptSerializationResult {\n    /**\n     * The site script in JSON format\n     */\n    JSON: string;\n    /**\n    * A collection of warnings\n    */\n    Warnings: string[];\n}\n\nexport interface ISiteScriptActionResult {\n\n    /**\n     * The title of the action.\n     */\n    Title: string;\n\n    /**\n     * Text associated with the outcome of the action. If this is present, it is usually an error message.\n     */\n    OutcomeText: string;\n\n    /**\n     * Indicates the outcome of the action.\n     */\n    Outcome: SiteScriptActionOutcome;\n\n    /**\n     * Indicates the target of the action.\n     */\n    Target: string;\n}\n\nexport enum SiteScriptActionOutcome {\n\n    /**\n     * The stage was deemed to have completed successfully.\n     */\n    Success = 0,\n\n    /**\n     * The stage was deemed to have failed to complete successfully (non-blocking, rest of recipe\n     * execution should still be able to proceed).\n     */\n    Failure = 1,\n\n    /**\n     * No action was taken for this stage / this stage was skipped.\n     */\n    NoOp = 2,\n\n    /**\n     * There was an exception but the operation succeeded. This is analagous to the operation completing\n     * in a \"yellow\" state.\n     */\n    SucceededWithException = 3,\n}\n","import { _Web } from \"../webs/types\";\nimport { SiteScripts } from \"./types\";\nimport { ISiteScriptSerializationInfo, ISiteScriptSerializationResult } from \"./types\";\n\ndeclare module \"../webs/types\" {\n    interface _Web {\n        getSiteScript(extractInfo?: ISiteScriptSerializationInfo): Promise<ISiteScriptSerializationResult>;\n    }\n\n    interface IWeb {\n        /**\n         * Gets the site script syntax (JSON) for the current web\n         * @param extractInfo configuration object to specify what to extract\n         */\n        getSiteScript(extractInfo?: ISiteScriptSerializationInfo): Promise<ISiteScriptSerializationResult>;\n    }\n}\n\n_Web.prototype.getSiteScript = function (this: _Web, extractInfo?: ISiteScriptSerializationInfo): Promise<ISiteScriptSerializationResult> {\n    return SiteScripts(this.toUrl(), \"\").getSiteScriptFromWeb(undefined, extractInfo);\n};\n","import { combine } from \"@pnp/common\";\nimport { _List, List } from \"../lists/types\";\nimport { SiteScripts } from \"./types\";\nimport \"../folders/list\";\nimport { _Web, Web } from \"../webs/types\";\nimport { extractWebUrl } from \"../utils/extractweburl\";\n\ndeclare module \"../lists/types\" {\n    interface _List {\n        getSiteScript(): Promise<string>;\n    }\n\n    interface IList {\n        /**\n         * Gets the site script syntax (JSON) from the current list\n         */\n        getSiteScript(): Promise<string>;\n    }\n}\n\n_List.prototype.getSiteScript = async function (this: _List): Promise<string> {\n\n    const rootFolder = await this.clone(List).rootFolder.get<{ Name: string }>();\n    const web = await Web(extractWebUrl(this.toUrl())).select(\"Url\").get();\n    const absoluteListUrl = combine(web.Url, \"Lists\", rootFolder.Name);\n    return SiteScripts(this, \"\").getSiteScriptFromList(absoluteListUrl);\n};\n","import \"./web\";\nimport \"./list\";\nimport { SPRest } from \"../rest\";\nimport { ISiteScripts, SiteScripts } from \"./types\";\n\nexport {\n    SiteScripts,\n    ISiteScripts,\n    ISiteScriptInfo,\n    ISiteScriptUpdateInfo,\n    ISiteScriptSerializationInfo,\n    ISiteScriptSerializationResult,\n} from \"./types\";\n\ndeclare module \"../rest\" {\n    interface SPRest {\n        readonly siteScripts: ISiteScripts;\n    }\n}\n\nReflect.defineProperty(SPRest.prototype, \"siteScripts\", {\n    configurable: true,\n    enumerable: true,\n    get: function (this: SPRest) {\n        return SiteScripts(this._baseUrl);\n    },\n});\n","import { addProp, body } from \"@pnp/odata\";\nimport { _Web, Web } from \"../webs/types\";\nimport { ISiteUsers, SiteUsers, ISiteUser, SiteUser, IWebEnsureUserResult } from \"./types\";\nimport { odataUrlFrom } from \"../odata\";\nimport { spPost } from \"../operations\";\n\ndeclare module \"../webs/types\" {\n    interface _Web {\n        readonly siteUsers: ISiteUsers;\n        readonly currentUser: ISiteUser;\n        ensureUser(loginName: string): Promise<IWebEnsureUserResult>;\n        getUserById(id: number): ISiteUser;\n    }\n    interface IWeb {\n\n        /**\n         * The site users\n         */\n        readonly siteUsers: ISiteUsers;\n\n        /**\n         * Information on the current user\n         */\n        readonly currentUser: ISiteUser;\n\n        /**\n        * Checks whether the specified login name belongs to a valid user in the web. If the user doesn't exist, adds the user to the web.\n        *\n        * @param loginName The login name of the user (ex: i:0#.f|membership|user@domain.onmicrosoft.com)\n        */\n        ensureUser(loginName: string): Promise<IWebEnsureUserResult>;\n\n        /**\n         * Returns the user corresponding to the specified member identifier for the current site\n         *\n         * @param id The id of the user\n         */\n        getUserById(id: number): ISiteUser;\n    }\n}\n\naddProp(_Web, \"siteUsers\", SiteUsers);\naddProp(_Web, \"currentUser\", SiteUser, \"currentuser\");\n\n_Web.prototype.ensureUser = async function (this: _Web, logonName: string): Promise<IWebEnsureUserResult> {\n\n    const data = await spPost(this.clone(Web, \"ensureuser\"), body({ logonName }));\n    return {\n        data,\n        user: SiteUser(odataUrlFrom(data)),\n    };\n};\n\n_Web.prototype.getUserById = function (id: number): ISiteUser {\n    return SiteUser(this, `getUserById(${id})`);\n};\n","import {\n  _SharePointQueryableInstance,\n  ISharePointQueryable,\n  spInvokableFactory,\n  _SharePointQueryable,\n} from \"../sharepointqueryable\";\nimport { defaultPath } from \"../decorators\";\nimport { hOP, IFetchOptions } from \"@pnp/common\";\nimport { metadata } from \"../utils/metadata\";\nimport { body } from \"@pnp/odata\";\nimport { spPost } from \"../operations\";\nimport { tag } from \"../telemetry\";\n\n@defaultPath(\"_api/social.following\")\nexport class _Social extends _SharePointQueryableInstance implements ISocial {\n\n  public get my(): IMySocial {\n    return MySocial(this);\n  }\n\n  @tag(\"soc.getFollowedSitesUri\")\n  public async getFollowedSitesUri(): Promise<string> {\n    const r = await this.clone(SocialCloneFactory, \"FollowedSitesUri\").get();\n    return r.FollowedSitesUri || r;\n  }\n\n  @tag(\"soc.getFollowedDocumentsUri\")\n    public async getFollowedDocumentsUri(): Promise<string> {\n    const r = await this.clone(SocialCloneFactory, \"FollowedDocumentsUri\").get();\n    return r.FollowedDocumentsUri || r;\n  }\n\n  @tag(\"soc.follow\")\n  public async follow(actorInfo: ISocialActorInfo): Promise<SocialFollowResult> {\n    return await spPost(this.clone(SocialCloneFactory, \"follow\"), this.createSocialActorInfoRequestBody(actorInfo));\n  }\n\n  @tag(\"soc.isFollowed\")\n  public async isFollowed(actorInfo: ISocialActorInfo): Promise<boolean> {\n    return await spPost(this.clone(SocialCloneFactory, \"isfollowed\"), this.createSocialActorInfoRequestBody(actorInfo));\n  }\n\n  @tag(\"soc.stopFollowing\")\n  public async stopFollowing(actorInfo: ISocialActorInfo): Promise<void> {\n    return await spPost(this.clone(SocialCloneFactory, \"stopfollowing\"), this.createSocialActorInfoRequestBody(actorInfo));\n  }\n\n  private createSocialActorInfoRequestBody(actorInfo: ISocialActorInfo): IFetchOptions {\n    return body({\n      \"actor\":\n        Object.assign(metadata(\"SP.Social.SocialActorInfo\"), {\n          Id: null,\n        }, actorInfo),\n    });\n  }\n}\n\n/**\n * Describes the public methods for the Social interface\n */\nexport interface ISocial {\n  /**\n   * Access to the curren't user's social data\n   */\n  readonly my: IMySocial;\n  /**\n   * Get a list of followed sites for the current user.\n   */\n  getFollowedSitesUri(): Promise<string>;\n  /**\n   * Get a list of followed documents for the current user.\n   */\n  getFollowedDocumentsUri(): Promise<string>;\n  /**\n   * Follow an actor for the current user.\n   *\n   * @param actorInfo Provide the actor to follow.\n   */\n  follow(actorInfo: ISocialActorInfo): Promise<SocialFollowResult>;\n  /**\n   * Check if the current user is following the actor.\n   *\n   * @param actorInfo Provide the actor to check.\n   */\n  isFollowed(actorInfo: ISocialActorInfo): Promise<boolean>;\n  /**\n   * Stop following an actor for the current user.\n   *\n   * @param actorInfo Provide the actor to stop following.\n   */\n  stopFollowing(actorInfo: ISocialActorInfo): Promise<void>;\n}\n\n/**\n * Get a new Social instance for the particular Url\n */\nexport const Social = (baseUrl: string | ISharePointQueryable): ISocial => new _Social(baseUrl);\nconst SocialCloneFactory = (baseUrl: string | ISharePointQueryable, paths?: string): ISocial & ISharePointQueryable => new _Social(baseUrl, paths);\n\n/**\n * Current user's Social instance\n */\n@defaultPath(\"my\")\nexport class _MySocial extends _SharePointQueryableInstance implements IMySocial {\n\n  @tag(\"msoc.followed\")\n  public async followed(types: SocialActorTypes): Promise<ISocialActor[]> {\n    const r = await this.clone(MySocialCloneFactory, `followed(types=${types})`)();\n    return hOP(r, \"Followed\") ? r.Followed.results : r;\n  }\n\n  @tag(\"msoc.followedCount\")\n  public async followedCount(types: SocialActorTypes): Promise<number> {\n    const r = await this.clone(MySocialCloneFactory, `followedcount(types=${types})`)();\n    return r.FollowedCount || r;\n  }\n\n  @tag(\"msoc.followers\")\n  public async followers(): Promise<ISocialActor[]> {\n    const r = await this.clone(MySocialCloneFactory, \"followers\")();\n    return hOP(r, \"Followers\") ? r.Followers.results : r;\n  }\n\n  @tag(\"msoc.suggestions\")\n  public async suggestions(): Promise<ISocialActor[]> {\n    const r = await this.clone(MySocialCloneFactory, \"suggestions\")();\n    return hOP(r, \"Suggestions\") ? r.Suggestions.results : r;\n  }\n}\n\n/**\n * Defines the public methods exposed by the my endpoint\n */\nexport interface IMySocial {\n\n  /**\n   * Allow access to the v2 invokable\n   */\n  (this: IMySocial): Promise<IMySocialData>;\n\n  /**\n   * Gets this user's data\n   */\n  get(): Promise<IMySocialData>;\n  /**\n   * Gets users, documents, sites, and tags that the current user is following.\n   * \n   * @param types Bitwise set of SocialActorTypes to retrieve\n   */\n  followed(types: SocialActorTypes): Promise<ISocialActor[]>;\n  /**\n   * Gets the count of users, documents, sites, and tags that the current user is following.\n   * \n   * @param types Bitwise set of SocialActorTypes to retrieve\n   */\n  followedCount(types: SocialActorTypes): Promise<number>;\n  /**\n   * Gets the users who are following the current user.\n   */\n  followers(): Promise<ISocialActor[]>;\n  /**\n   * Gets users who the current user might want to follow.\n   */\n  suggestions(): Promise<ISocialActor[]>;\n}\n\n/**\n * Invokable factory for IMySocial instances\n */\nexport const MySocial = spInvokableFactory<IMySocial>(_MySocial);\nconst MySocialCloneFactory = (baseUrl: string | ISharePointQueryable, path?: string): IMySocial & ISharePointQueryable => <any>MySocial(baseUrl, path);\n\n/**\n * Social actor info\n *\n */\nexport interface ISocialActorInfo {\n  AccountName?: string;\n  ActorType: SocialActorType;\n  ContentUri?: string;\n  Id?: string;\n  TagGuid?: string;\n}\n\n/**\n * Social actor type\n *\n */\nexport const enum SocialActorType {\n  User,\n  Document,\n  Site,\n  Tag,\n}\n\n/**\n * Social actor type\n *\n */\n/* tslint:disable:no-bitwise */\nexport const enum SocialActorTypes {\n  None = 0,\n  User = 1 << SocialActorType.User,\n  Document = 1 << SocialActorType.Document,\n  Site = 1 << SocialActorType.Site,\n  Tag = 1 << SocialActorType.Tag,\n  /**\n   * The set excludes documents and sites that do not have feeds.\n   */\n  ExcludeContentWithoutFeeds = 268435456,\n  /**\n   * The set includes group sites\n   */\n  IncludeGroupsSites = 536870912,\n  /**\n   * The set includes only items created within the last 24 hours\n   */\n  WithinLast24Hours = 1073741824,\n}\n/* tslint:enable */\n\n/**\n * Result from following\n *\n */\nexport const enum SocialFollowResult {\n  Ok = 0,\n  AlreadyFollowing = 1,\n  LimitReached = 2,\n  InternalError = 3,\n}\n\n/**\n * Specifies an exception or status code.\n */\nexport const enum SocialStatusCode {\n  /**\n   * The operation completed successfully\n   */\n  OK,\n  /**\n   * The request is invalid.\n   */\n  InvalidRequest,\n  /**\n   *  The current user is not authorized to perform the operation.\n   */\n  AccessDenied,\n  /**\n   * The target of the operation was not found.\n   */\n  ItemNotFound,\n  /**\n   * The operation is invalid for the target's current state. \n   */\n  InvalidOperation,\n  /**\n   * The operation completed without modifying the target.\n   */\n  ItemNotModified,\n  /**\n   * The operation failed because an internal error occurred.\n   */\n  InternalError,\n  /**\n   * The operation failed because the server could not access the distributed cache.\n   */\n  CacheReadError,\n  /**\n   * The operation succeeded but the server could not update the distributed cache.\n   */\n  CacheUpdateError,\n  /**\n   * No personal site exists for the current user, and no further information is available.\n   */\n  PersonalSiteNotFound,\n  /**\n   * No personal site exists for the current user, and a previous attempt to create one failed.\n   */\n  FailedToCreatePersonalSite,\n  /**\n   * No personal site exists for the current user, and a previous attempt to create one was not authorized.\n   */\n  NotAuthorizedToCreatePersonalSite,\n  /**\n   * No personal site exists for the current user, and no attempt should be made to create one.\n   */\n  CannotCreatePersonalSite,\n  /**\n   * The operation was rejected because an internal limit had been reached.\n   */\n  LimitReached,\n  /**\n   * The operation failed because an error occurred during the processing of the specified attachment.\n   */\n  AttachmentError,\n  /**\n   * The operation succeeded with recoverable errors; the returned data is incomplete.\n   */\n  PartialData,\n  /**\n   * A required SharePoint feature is not enabled.\n   */\n  FeatureDisabled,\n  /**\n   * The site's storage quota has been exceeded.\n   */\n  StorageQuotaExceeded,\n  /**\n   * The operation failed because the server could not access the database.\n   */\n  DatabaseError,\n}\n\nexport interface ISocialActor {\n  /**\n   * Gets the actor type.\n   */\n  ActorType: SocialActorType;\n  /**\n   * Gets the actor's unique identifier.\n   */\n  Id: string;\n  /**\n   * Gets the actor's canonical URI.\n   */\n  Uri: string;\n  /**\n   * Gets the actor's display name.\n   */\n  Name: string;\n  /**\n   * Returns true if the current user is following the actor, false otherwise.\n   */\n  IsFollowed: boolean;\n  /**\n   * Gets a code that indicates recoverable errors that occurred during actor retrieval\n   */\n  Status: SocialStatusCode;\n  /**\n   * Returns true if the Actor can potentially be followed, false otherwise.\n   */\n  CanFollow: boolean;\n  /**\n   * Gets the actor's image URI. Only valid when ActorType is User, Document, or Site\n   */\n  ImageUri: string;\n  /**\n   * Gets the actor's account name. Only valid when ActorType is User\n   */\n  AccountName: string;\n  /**\n   * Gets the actor's email address. Only valid when ActorType is User\n   */\n  EmailAddress: string;\n  /**\n   * Gets the actor's title. Only valid when ActorType is User\n   */\n  Title: string;\n  /**\n   * Gets the text of the actor's most recent post. Only valid when ActorType is User\n   */\n  StatusText: string;\n  /**\n   * Gets the URI of the actor's personal site. Only valid when ActorType is User\n   */\n  PersonalSiteUri: string;\n  /**\n   * Gets the URI of the actor's followed content folder. Only valid when this represents the current user\n   */\n  FollowedContentUri: string;\n  /**\n   * Gets the actor's content URI. Only valid when ActorType is Document, or Site\n   */\n  ContentUri: string;\n  /**\n   * Gets the actor's library URI. Only valid when ActorType is Document\n   */\n  LibraryUri: string;\n  /**\n   * Gets the actor's tag GUID. Only valid when ActorType is Tag\n   */\n  TagGuid: string;\n}\n\n/**\n * Defines the properties returned from the my endpoint\n */\nexport interface IMySocialData {\n  SocialActor: ISocialActor;\n  MyFollowedDocumentsUri: string;\n  MyFollowedSitesUri: string;\n}\n","import { ISocial, Social } from \"./types\";\nimport { SPRest } from \"../rest\";\n\nexport {\n  IMySocial,\n  ISocial,\n  IMySocialData,\n  ISocialActor,\n  ISocialActorInfo,\n  MySocial,\n  Social,\n  SocialActorType,\n  SocialActorTypes,\n  SocialFollowResult,\n  SocialStatusCode,\n} from \"./types\";\n\ndeclare module \"../rest\" {\n  interface SPRest {\n    /**\n     * Access to the social instance which allows you to track followed sites, people and docs.\n     */\n    readonly social: ISocial;\n  }\n}\n\nReflect.defineProperty(SPRest.prototype, \"social\", {\n  configurable: true,\n  enumerable: true,\n  get: function (this: SPRest) {\n    return Social(this._baseUrl);\n  },\n});\n","import { _SharePointQueryable, ISharePointQueryable, spInvokableFactory } from \"../sharepointqueryable\";\nimport { assign, ITypedHash } from \"@pnp/common\";\nimport { SPBatch } from \"../batch\";\nimport { ICachingOptions, body } from \"@pnp/odata\";\nimport { odataUrlFrom } from \"../odata\";\nimport { IPrincipalInfo, PrincipalType, PrincipalSource } from \"../types\";\nimport { metadata } from \"../utils/metadata\";\nimport { File, IFile } from \"../files/types\";\nimport { extractWebUrl } from \"../utils/extractweburl\";\nimport { spPost } from \"../operations\";\nimport { tag } from \"../telemetry\";\nimport { objectToSPKeyValueCollection } from \"../utils/objectToSPKeyValueCollection\";\n\nexport class _Utilities extends _SharePointQueryable implements IUtilities {\n    constructor(baseUrl: string | ISharePointQueryable, methodName: string) {\n        const url = typeof baseUrl === \"string\" ? baseUrl : baseUrl.toUrl();\n        super(extractWebUrl(url), `_api/SP.Utilities.Utility.${methodName}`);\n    }\n\n    public excute<T>(props: any): Promise<T> {\n        return spPost(this, body(props));\n    }\n\n    public sendEmail(props: IEmailProperties): Promise<void> {\n        const params = {\n            properties: assign(metadata(\"SP.Utilities.EmailProperties\"), {\n                Body: props.Body,\n                From: props.From,\n                Subject: props.Subject,\n            }),\n        };\n\n        if (props.To && props.To.length > 0) {\n\n            params.properties = assign(params.properties, {\n                To: { results: props.To },\n            });\n        }\n\n        if (props.CC && props.CC.length > 0) {\n\n            params.properties = assign(params.properties, {\n                CC: { results: props.CC },\n            });\n        }\n\n        if (props.BCC && props.BCC.length > 0) {\n\n            params.properties = assign(params.properties, {\n                BCC: { results: props.BCC },\n            });\n        }\n\n        if (props.AdditionalHeaders) {\n\n            params.properties = assign(params.properties, {\n                AdditionalHeaders: objectToSPKeyValueCollection(props.AdditionalHeaders),\n            });\n        }\n\n        return tag.configure(this.clone(UtilitiesCloneFactory, \"SendEmail\", true), \"u.sendEmail\").excute<void>(params);\n    }\n\n    public getCurrentUserEmailAddresses(): Promise<string> {\n        return tag.configure(this.clone(UtilitiesCloneFactory, \"GetCurrentUserEmailAddresses\", true), \"u.getCurrentUserEmailAddresses\").excute<string>({});\n    }\n\n    public resolvePrincipal(input: string,\n        scopes: PrincipalType,\n        sources: PrincipalSource,\n        inputIsEmailOnly: boolean,\n        addToUserInfoList: boolean,\n        matchUserInfoList = false): Promise<IPrincipalInfo> {\n        const params = {\n            addToUserInfoList,\n            input,\n            inputIsEmailOnly,\n            matchUserInfoList,\n            scopes,\n            sources,\n        };\n\n        const clone = this.clone(UtilitiesCloneFactory, \"ResolvePrincipalInCurrentContext\", true);\n        return tag.configure(clone, \"u.ResolvePrincipalInCurrentContext\").excute<IPrincipalInfo>(params);\n    }\n\n    public searchPrincipals(input: string, scopes: PrincipalType, sources: PrincipalSource, groupName: string, maxCount: number): Promise<IPrincipalInfo[]> {\n        const params = {\n            groupName: groupName,\n            input: input,\n            maxCount: maxCount,\n            scopes: scopes,\n            sources: sources,\n        };\n\n        const clone = this.clone(UtilitiesCloneFactory, \"SearchPrincipalsUsingContextWeb\", true);\n        return tag.configure(clone, \"u.SearchPrincipalsUsingContextWeb\").excute<IPrincipalInfo[]>(params);\n    }\n\n    public createEmailBodyForInvitation(pageAddress: string): Promise<string> {\n        const params = {\n            pageAddress: pageAddress,\n        };\n\n        const clone = this.clone(UtilitiesCloneFactory, \"CreateEmailBodyForInvitation\", true);\n        return tag.configure(clone, \"u.CreateEmailBodyForInvitation\").excute<string>(params);\n    }\n\n    public expandGroupsToPrincipals(inputs: string[], maxCount = 30): Promise<IPrincipalInfo[]> {\n        const params = {\n            inputs: inputs,\n            maxCount: maxCount,\n        };\n\n        const clone = this.clone(UtilitiesCloneFactory, \"ExpandGroupsToPrincipals\", true);\n        return tag.configure(clone, \"u.ExpandGroupsToPrincipals\").excute<IPrincipalInfo[]>(params);\n    }\n\n    public async createWikiPage(info: IWikiPageCreationInfo): Promise<ICreateWikiPageResult> {\n\n        const clone = this.clone(UtilitiesCloneFactory, \"CreateWikiPageInContextWeb\", true);\n        const newPage = await tag.configure(clone, \"u.CreateWikiPageInContextWeb\").excute<ICreateWikiPageResult>({ parameters: info });\n\n        return {\n            data: newPage,\n            file: File(odataUrlFrom(newPage)),\n        } as ICreateWikiPageResult;\n    }\n}\n\n/**\n * Describes the SharePoint utility methods\n */\nexport interface IUtilities {\n    /**\n     * Gives you the ability to cache returned data in an easy way.\n     * @param options instance of ICachingOptions\n     */\n    usingCaching(options?: ICachingOptions): this;\n\n    /**\n     * Gives you the ability to batch multiple requests into a single request to SharePoint.\n     * @param batch instance of SPBatch\n     */\n    inBatch(batch: SPBatch): this;\n\n    /**\n     * This methods will send an e-mail based on the incoming properties of the IEmailProperties parameter.\n     * @param props IEmailProperties object\n     */\n    sendEmail(props: IEmailProperties): Promise<void>;\n\n    /**\n     * This method returns the current user's email addresses known to SharePoint.\n     */\n    getCurrentUserEmailAddresses(): Promise<string>;\n\n    /**\n     * Gets information about a principal that matches the specified Search criteria.\n     * @param email E-mail address\n     * @param scopes Specifies the type to be used when searching for a principal\n     * @param sources Specifies the source to be used when searching for a principal.\n     * @param inputIsEmailOnly Specifies whether only the e-mail address will be used when searching for a principal.\n     * @param addToUserInfoList Specifies whether the user should be added to the hidden user info list.\n     * @param matchUserInfoList [Optional] By default false\n     */\n    resolvePrincipal(email: string,\n        scopes: PrincipalType,\n        sources: PrincipalSource,\n        inputIsEmailOnly: boolean,\n        addToUserInfoList: boolean,\n        matchUserInfoList?: boolean): Promise<IPrincipalInfo>;\n\n    /**\n    * Gets information about the principals that match the specified search criteria.\n    * @param input Specifies the value to be used when searching for a principal.\n    * @param scopes Specifies the type to be used when searching for a principal.\n    * @param sources Specifies the source to be used when searching for a principal.\n    * @param groupName Specifies the collection of users to be used when searching for a principal.\n    * @param maxCount Specifies the maximum number of principals to be returned in the list.\n    */\n    searchPrincipals(input: string, scopes: PrincipalType, sources: PrincipalSource, groupName: string, maxCount: number): Promise<IPrincipalInfo[]>;\n\n    /**\n     * Gets the external (outside the firewall) URL to a document or resource in a site.\n     * @param pageAddress Specifies the URI for the document or resource. It must be a URL.\n     */\n    createEmailBodyForInvitation(pageAddress: string): Promise<string>;\n\n    /**\n     * Resolves the principals contained within the supplied groups.\n     * @param inputs A collection of groups to be expanded.\n     * @param maxCount Specifies the maximum number of principals to be returned.\n     */\n    expandGroupsToPrincipals(inputs: string[], maxCount?: number): Promise<IPrincipalInfo[]>;\n\n    /**\n     * Creates a new Wiki page.\n     * @param info Instance of IWikiPageCreationInfo.\n     */\n    createWikiPage(info: IWikiPageCreationInfo): Promise<ICreateWikiPageResult>;\n}\n\nexport const Utilities = spInvokableFactory<IUtilities>(_Utilities);\ntype UtilitiesCloneType = IUtilities & ISharePointQueryable & { excute<T>(props: any): Promise<T> };\nconst UtilitiesCloneFactory = (baseUrl: string | ISharePointQueryable, path?: string): UtilitiesCloneType => <any>Utilities(baseUrl, path);\n\nexport interface ICreateWikiPageResult {\n    /**\n     * The returned Wiki page represented by raw data.\n     */\n    data: any;\n\n    /**\n     * The returned Wiki page represented as a file which can be further updated.\n     */\n    file: IFile;\n}\n\nexport interface IEmailProperties {\n    /**\n     * The list of receivers represented by a string array.\n     */\n    To: string[];\n\n    /**\n     * The list of receivers as CC (carbon copy) represented by a string array.\n     * This is optional.\n     */\n    CC?: string[];\n\n    /**\n     * The list of receivers as BCC (blind carbon copy) represented by a string array.\n     * This is optional.\n     */\n    BCC?: string[];\n\n    /**\n     * The subject of the email.\n     */\n    Subject: string;\n\n    /**\n     * The body of the email.\n     */\n    Body: string;\n\n    /**\n     * The additional headers appened to the request in key/value pairs.\n     */\n    AdditionalHeaders?: ITypedHash<string>;\n\n    /**\n     * The from address of the email.\n     * This is optional.\n     */\n    From?: string;\n}\n\nexport interface IWikiPageCreationInfo {\n    /**\n     * The server-relative-url of the wiki page to be created.\n     */\n    ServerRelativeUrl: string;\n\n    /**\n     * The wiki content to be set in the wiki page.\n     */\n    WikiHtmlContent: string;\n}\n","import { SPRest } from \"../rest\";\nimport { IUtilities, Utilities } from \"./types\";\n\nexport {\n    ICreateWikiPageResult,\n    IEmailProperties,\n    IUtilities,\n    IWikiPageCreationInfo,\n    Utilities,\n} from \"./types\";\n\ndeclare module \"../rest\" {\n    interface SPRest {\n        readonly utility: IUtilities;\n    }\n}\n\nReflect.defineProperty(SPRest.prototype, \"utility\", {\n    configurable: true,\n    enumerable: true,\n    get: function (this: SPRest) {\n        return Utilities(this._baseUrl, \"\");\n    },\n});\n","import {\n    _SharePointQueryableInstance,\n    _SharePointQueryableCollection,\n    spInvokableFactory,\n} from \"../sharepointqueryable\";\nimport { body, headers } from \"@pnp/odata\";\nimport { defaultPath } from \"../decorators\";\nimport { spPost, spDelete, spPatch } from \"../operations\";\nimport { tag } from \"../telemetry\";\n\n@defaultPath(\"subscriptions\")\nexport class _Subscriptions extends _SharePointQueryableCollection {\n\n    /**\n    * Returns all the webhook subscriptions or the specified webhook subscription\n    *\n    * @param subscriptionId The id of a specific webhook subscription to retrieve, omit to retrieve all the webhook subscriptions\n    */\n    public getById(subscriptionId: string): ISubscription {\n\n        return tag.configure(Subscription(this).concat(`('${subscriptionId}')`), \"subs.getById\");\n    }\n\n    /**\n     * Creates a new webhook subscription\n     *\n     * @param notificationUrl The url to receive the notifications\n     * @param expirationDate The date and time to expire the subscription in the form YYYY-MM-ddTHH:mm:ss+00:00 (maximum of 6 months)\n     * @param clientState A client specific string (optional)\n     */\n    @tag(\"subs.add\")\n    public async add(notificationUrl: string, expirationDate: string, clientState?: string): Promise<ISubscriptionAddResult> {\n\n        const postBody: any = {\n            \"expirationDateTime\": expirationDate,\n            \"notificationUrl\": notificationUrl,\n            \"resource\": this.toUrl(),\n        };\n\n        if (clientState) {\n            postBody.clientState = clientState;\n        }\n\n        const data = await spPost(this, body(postBody, headers({ \"Content-Type\": \"application/json\" })));\n\n        return { data, subscription: this.getById(data.id) };\n    }\n}\nexport interface ISubscriptions extends _Subscriptions { }\nexport const Subscriptions = spInvokableFactory<ISubscriptions>(_Subscriptions);\n\nexport class _Subscription extends _SharePointQueryableInstance {\n\n    /**\n     * Renews this webhook subscription\n     *\n     * @param expirationDate The date and time to expire the subscription in the form YYYY-MM-ddTHH:mm:ss+00:00 (maximum of 6 months, optional)\n     * @param notificationUrl The url to receive the notifications (optional)\n     * @param clientState A client specific string (optional)\n     */\n    @tag(\"sub.update\")\n    public async update(expirationDate?: string, notificationUrl?: string, clientState?: string): Promise<ISubscriptionUpdateResult> {\n\n        const postBody: any = {};\n\n        if (expirationDate) {\n            postBody.expirationDateTime = expirationDate;\n        }\n\n        if (notificationUrl) {\n            postBody.notificationUrl = notificationUrl;\n        }\n\n        if (clientState) {\n            postBody.clientState = clientState;\n        }\n\n        const data = await spPatch(this, body(postBody, headers({ \"Content-Type\": \"application/json\" })));\n\n        return { data, subscription: this };\n    }\n\n    /**\n     * Removes this webhook subscription\n     *\n     */\n    @tag(\"sub.delete\")\n    public delete(): Promise<void> {\n        return spDelete(this);\n    }\n}\nexport interface ISubscription extends _Subscription { }\nexport const Subscription = spInvokableFactory<ISubscription>(_Subscription);\n\n/**\n * Result from adding a new subscription\n *\n */\nexport interface ISubscriptionAddResult {\n    subscription: ISubscription;\n    data: any;\n}\n\n/**\n * Result from updating a subscription\n *\n */\nexport interface ISubscriptionUpdateResult {\n    subscription: ISubscription;\n    data: any;\n}\n","import { addProp } from \"@pnp/odata\";\nimport { _List } from \"../lists/types\";\nimport { Subscriptions, ISubscriptions } from \"./types\";\n\ndeclare module \"../lists/types\" {\n    interface _List {\n        readonly subscriptions: ISubscriptions;\n    }\n    interface IList {\n        /**\n         * Gets the collection of webhooks created for this list\n         *\n         */\n        readonly subscriptions: ISubscriptions;\n    }\n}\n\naddProp(_List, \"subscriptions\", Subscriptions);\n","import { addProp } from \"@pnp/odata\";\nimport { _List } from \"../lists/types\";\nimport { UserCustomActions, IUserCustomActions } from \"./types\";\n\ndeclare module \"../lists/types\" {\n    interface _List {\n        readonly userCustomActions: IUserCustomActions;\n    }\n\n    interface IList {\n        /**\n         * Get all custom actions on a list\n         */\n        readonly userCustomActions: IUserCustomActions;\n    }\n}\n\naddProp(_List, \"userCustomActions\", UserCustomActions);\n","import { addProp } from \"@pnp/odata\";\nimport { _Web } from \"../webs/types\";\nimport { UserCustomActions, IUserCustomActions } from \"./types\";\n\ndeclare module \"../webs/types\" {\n    interface _Web {\n        /**\n         * Gets a newly refreshed collection of the SPWeb's SPUserCustomActionCollection\n         */\n        readonly userCustomActions: IUserCustomActions;\n    }\n\n    interface IWeb {\n        /**\n         * Gets a newly refreshed collection of the SPWeb's SPUserCustomActionCollection\n         */\n        readonly userCustomActions: IUserCustomActions;\n    }\n}\n\naddProp(_Web, \"userCustomActions\", UserCustomActions);\n","import { addProp } from \"@pnp/odata\";\nimport { _Site } from \"../sites/types\";\nimport { UserCustomActions, IUserCustomActions } from \"./types\";\n\ndeclare module \"../sites/types\" {\n    interface _Site {\n        readonly userCustomActions: IUserCustomActions;\n    }\n\n    interface ISite {\n        /**\n         * Get all custom actions on a site collection\n         */\n        readonly userCustomActions: IUserCustomActions;\n    }\n}\n\naddProp(_Site, \"userCustomActions\", UserCustomActions);\n","import { ITypedHash } from \"@pnp/common\";\nimport { body } from \"@pnp/odata\";\nimport {\n    _SharePointQueryableInstance,\n    _SharePointQueryableCollection,\n    spInvokableFactory,\n    IDeleteable,\n    deleteable,\n} from \"../sharepointqueryable\";\nimport { metadata } from \"../utils/metadata\";\nimport { defaultPath } from \"../decorators\";\nimport { spPost } from \"../operations\";\nimport { tag } from \"../telemetry\";\n\n@defaultPath(\"views\")\nexport class _Views extends _SharePointQueryableCollection<IViewInfo[]> {\n\n    /**\t  \n     * Gets a view by guid id\t    \n     *\t   \n     * @param id The GUID id of the view\t    \n     */\n    public getById(id: string): IView {\n        return View(this).concat(`('${id}')`);\n    }\n\n    /**\n     * Gets a view by title (case-sensitive)\n     *\n     * @param title The case-sensitive title of the view\n     */\n    public getByTitle(title: string): IView {\n        return View(this, `getByTitle('${title}')`);\n    }\n\n    /**\n     * Adds a new view to the collection\n     *\n     * @param title The new views's title\n     * @param personalView True if this is a personal view, otherwise false, default = false\n     * @param additionalSettings Will be passed as part of the view creation body\n     */\n    @tag(\"vs.add\")\n    public async add(title: string, personalView = false, additionalSettings: ITypedHash<any> = {}): Promise<IViewAddResult> {\n\n        const postBody = body(Object.assign(metadata(\"SP.View\"), {\n            \"PersonalView\": personalView,\n            \"Title\": title,\n        }, additionalSettings));\n\n        const data = await spPost(this.clone(Views, null), postBody);\n\n        return {\n            data,\n            view: this.getById(data.Id),\n        };\n    }\n}\nexport interface IViews extends _Views { }\nexport const Views = spInvokableFactory<IViews>(_Views);\n\nexport class _View extends _SharePointQueryableInstance<IViewInfo> {\n\n    public delete = deleteable(\"vw\");\n\n    public get fields(): IViewFields {\n        return ViewFields(this);\n    }\n\n    /**\n     * Updates this view intance with the supplied properties\n     *\n     * @param properties A plain object hash of values to update for the view\n     */\n    public update: any = this._update<IViewUpdateResult, ITypedHash<any>>(\"SP.View\", data => ({ data, view: <any>this }));\n\n    /**\n     * Returns the list view as HTML.\n     *\n     */\n    @tag(\"v.renderAsHtml\")\n    public renderAsHtml(): Promise<string> {\n        return this.clone(View, \"renderashtml\")();\n    }\n\n    /**\n     * Sets the view schema\n     * \n     * @param viewXml The view XML to set\n     */\n    @tag(\"v.setViewXml\")\n    public setViewXml(viewXml: string): Promise<void> {\n        return spPost(this.clone(View, \"SetViewXml\"), body({ viewXml }));\n    }\n}\nexport interface IView extends _View, IDeleteable { }\nexport const View = spInvokableFactory<IView>(_View);\n\n@defaultPath(\"viewfields\")\nexport class _ViewFields extends _SharePointQueryableCollection<{ SchemaXml: string; }> {\n\n    /**\n     * Gets a value that specifies the XML schema that represents the collection.\n     */\n    @tag(\"vfs.getSchemaXml\")\n    public getSchemaXml(): Promise<string> {\n        return this.clone(ViewFields, \"schemaxml\")();\n    }\n\n    /**\n     * Adds the field with the specified field internal name or display name to the collection.\n     *\n     * @param fieldTitleOrInternalName The case-sensitive internal name or display name of the field to add.\n     */\n    @tag(\"vfs.add\")\n    public add(fieldTitleOrInternalName: string): Promise<void> {\n        return spPost(this.clone(ViewFields, `addviewfield('${fieldTitleOrInternalName}')`));\n    }\n\n    /**\n     * Moves the field with the specified field internal name to the specified position in the collection.\n     *\n     * @param field The case-sensitive internal name of the field to move.\n     * @param index The zero-based index of the new position for the field.\n     */\n    @tag(\"vfs.move\")\n    public move(field: string, index: number): Promise<void> {\n        return spPost(this.clone(ViewFields, \"moveviewfieldto\"), body({ field, index }));\n    }\n\n    /**\n     * Removes all the fields from the collection.\n     */\n    @tag(\"vfs.removeAll\")\n    public removeAll(): Promise<void> {\n        return spPost(this.clone(ViewFields, \"removeallviewfields\"));\n    }\n\n    /**\n     * Removes the field with the specified field internal name from the collection.\n     *\n     * @param fieldInternalName The case-sensitive internal name of the field to remove from the view.\n     */\n    @tag(\"vfs.remove\")\n    public remove(fieldInternalName: string): Promise<void> {\n        return spPost(this.clone(ViewFields, `removeviewfield('${fieldInternalName}')`));\n    }\n}\nexport interface IViewFields extends _ViewFields { }\nexport const ViewFields = spInvokableFactory<IViewFields>(_ViewFields);\n\nexport interface IViewAddResult {\n    view: IView;\n    data: IViewInfo;\n}\n\nexport interface IViewUpdateResult {\n    view: IView;\n    data: IViewInfo;\n}\n\nexport enum ViewScope {\n    DefaultValue,\n    Recursive,\n    RecursiveAll,\n    FilesOnly,\n}\n\nexport interface IViewInfo {\n    EditorModified: boolean;\n    Formats: string | null;\n    Hidden: boolean;\n    HtmlSchemaXml: string;\n    Id: string;\n    ImageUrl: string;\n    IncludeRootFolder: boolean;\n    JSLink: string;\n    ListViewXml: string;\n    Method: string | null;\n    MobileDefaultView: boolean;\n    MobileView: boolean;\n    ModerationType: string | null;\n    NewDocumentTemplates: string;\n    OrderedView: boolean;\n    Paged: boolean;\n    PersonalView: boolean;\n    ReadOnlyView: boolean;\n    RequiresClientIntegration: boolean;\n    RowLimit: number;\n    Scope: ViewScope;\n    ServerRelativePath: { DecodedUrl: string; };\n    ServerRelativeUrl: string;\n    StyleId: string | null;\n    TabularView: boolean;\n    Threaded: boolean;\n    Title: string;\n    Toolbar: string;\n    ToolbarTemplateName: string | null;\n    ViewData: string | null;\n    ViewJoins: string | null;\n    ViewProjectedFields: { SchemaXml: string } | null;\n    ViewQuery: string;\n    ViewType: string;\n    VisualizationInfo: any | null;\n}\n","import { addProp } from \"@pnp/odata\";\nimport { _List } from \"../lists/types\";\nimport { Views, IViews, IView, View } from \"./types\";\n\ndeclare module \"../lists/types\" {\n    interface _List {\n        readonly views: IViews;\n        readonly defaultView: IView;\n        getView(id: string): IView;\n    }\n    interface IList {\n        /**\n         * Gets the views on this list\n         */\n        readonly views: IViews;\n        /**\n         * Gets the default view for this list\n         */\n        readonly defaultView: IView;\n        /**\n         * Gets a view by view guid id\n         *\n         */\n        getView(id: string): IView;\n    }\n}\n\naddProp(_List, \"views\", Views);\naddProp(_List, \"defaultView\", View, \"DefaultView\");\n\n_List.prototype.getView = function (this: _List, viewId: string): IView {\n    return View(this, `getView('${viewId}')`);\n};\n","import {\n    _SharePointQueryableInstance,\n    _SharePointQueryableCollection,\n    ISharePointQueryableInstance,\n    _SharePointQueryable,\n    ISharePointQueryable,\n    spInvokableFactory,\n    SharePointQueryable,\n    SharePointQueryableInstance,\n} from \"../sharepointqueryable\";\nimport { body } from \"@pnp/odata\";\nimport { spPost } from \"../operations\";\nimport { tag } from \"../telemetry\";\n\nexport class _LimitedWebPartManager extends _SharePointQueryable implements ILimitedWebPartManager {\n\n    public get scope(): ISharePointQueryable {\n        return tag.configure(SharePointQueryable(this, \"Scope\"), \"f.scope\");\n    }\n\n    public get webparts(): IWebPartDefinitions {\n        return WebPartDefinitions(this, \"webparts\");\n    }\n\n    public export(id: string): Promise<string> {\n        return spPost(this.clone(LimitedWebPartManagerCloneFactory, \"ExportWebPart\"), body({ webPartId: id }));\n    }\n\n    public import(xml: string): Promise<any> {\n        return spPost(this.clone(LimitedWebPartManagerCloneFactory, \"ImportWebPart\"), body({ webPartXml: xml }));\n    }\n}\n\nexport interface ILimitedWebPartManager {\n\n    /**\n     * Gets the scope of this web part manager (User = 0 or Shared = 1)\n     */\n    readonly scope: ISharePointQueryable;\n\n    /**\n     * Gets the set of web part definitions contained by this web part manager\n     */\n    readonly webparts: IWebPartDefinitions;\n\n    /**\n     * Exports a webpart definition\n     *\n     * @param id the GUID id of the definition to export\n     */\n    export(id: string): Promise<string>;\n\n    /**\n     * Imports a webpart\n     *\n     * @param xml webpart definition which must be valid XML in the .dwp or .webpart format\n     */\n    import(xml: string): Promise<any>;\n}\n\nexport const LimitedWebPartManager = (baseUrl: string | ISharePointQueryable, path?: string): ILimitedWebPartManager => new _LimitedWebPartManager(baseUrl, path);\n\ntype LimitedWebPartManagerCloneType = ILimitedWebPartManager & ISharePointQueryable;\nconst LimitedWebPartManagerCloneFactory = (baseUrl: string | ISharePointQueryable, path?: string): LimitedWebPartManagerCloneType => <any>LimitedWebPartManager(baseUrl, path);\n\nexport class _WebPartDefinitions extends _SharePointQueryableCollection {\n\n    /**\n     * Gets a web part definition from the collection by id\n     *\n     * @param id The storage ID of the SPWebPartDefinition to retrieve\n     */\n    public getById(id: string): IWebPartDefinition {\n        return WebPartDefinition(this, `getbyid('${id}')`);\n    }\n\n    /**\n     * Gets a web part definition from the collection by storage id\n     *\n     * @param id The WebPart.ID of the SPWebPartDefinition to retrieve\n     */\n    public getByControlId(id: string): IWebPartDefinition {\n        return WebPartDefinition(this, `getByControlId('${id}')`);\n    }\n}\nexport interface IWebPartDefinitions extends _WebPartDefinitions { }\nexport const WebPartDefinitions = spInvokableFactory<IWebPartDefinitions>(_WebPartDefinitions);\n\nexport class _WebPartDefinition extends _SharePointQueryableInstance {\n\n    /**\n    * Gets the webpart information associated with this definition\n    */\n    public get webpart(): ISharePointQueryableInstance {\n        return SharePointQueryableInstance(this, \"webpart\");\n    }\n\n    /**\n     * Saves changes to the Web Part made using other properties and methods on the SPWebPartDefinition object\n     */\n    public saveChanges(): Promise<any> {\n        return spPost(this.clone(WebPartDefinition, \"SaveWebPartChanges\"));\n    }\n\n    /**\n     * Moves the Web Part to a different location on a Web Part Page\n     *\n     * @param zoneId The ID of the Web Part Zone to which to move the Web Part\n     * @param zoneIndex A Web Part zone index that specifies the position at which the Web Part is to be moved within the destination Web Part zone\n     */\n    public moveTo(zoneId: string, zoneIndex: number): Promise<void> {\n        return spPost(this.clone(WebPartDefinition, `MoveWebPartTo(zoneID='${zoneId}', zoneIndex=${zoneIndex})`));\n    }\n\n    /**\n     * Closes the Web Part. If the Web Part is already closed, this method does nothing\n     */\n    public close(): Promise<void> {\n        return spPost(this.clone(WebPartDefinition, \"CloseWebPart\"));\n    }\n\n    /**\n     * Opens the Web Part. If the Web Part is already closed, this method does nothing\n     */\n    public open(): Promise<void> {\n        return spPost(this.clone(WebPartDefinition, \"OpenWebPart\"));\n    }\n\n    /**\n     * Removes a webpart from a page, all settings will be lost\n     */\n    public delete(): Promise<void> {\n        return spPost(this.clone(WebPartDefinition, \"DeleteWebPart\"));\n    }\n}\nexport interface IWebPartDefinition extends _WebPartDefinition { }\nexport const WebPartDefinition = spInvokableFactory<IWebPartDefinition>(_WebPartDefinition);\n\nexport enum WebPartsPersonalizationScope {\n    User = 0,\n    Shared = 1,\n}\n","import { _File } from \"../files/types\";\nimport { WebPartsPersonalizationScope, ILimitedWebPartManager, LimitedWebPartManager } from \"./types\";\n\ndeclare module \"../files/types\" {\n    interface _File {\n        getLimitedWebPartManager(scope?: WebPartsPersonalizationScope): ILimitedWebPartManager;\n    }\n    interface IFile {\n        /**\n         * Specifies the control set used to access, modify, or add Web Parts associated with this Web Part Page and view.\n         * An exception is thrown if the file is not an ASPX page.\n         *\n         * @param scope The WebPartsPersonalizationScope view on the Web Parts page.\n         */\n        getLimitedWebPartManager(scope?: WebPartsPersonalizationScope): ILimitedWebPartManager;\n    }\n}\n\n_File.prototype.getLimitedWebPartManager = function (this: _File, scope = WebPartsPersonalizationScope.Shared): ILimitedWebPartManager {\n    return LimitedWebPartManager(this, `getLimitedWebPartManager(scope=${scope})`);\n};\n","import { SPRest } from \"../rest\";\n\nimport \"../appcatalog\";\nimport \"../attachments\";\nimport \"../clientside-pages\";\nimport \"../column-defaults\";\nimport \"../comments\";\nimport \"../content-types\";\nimport \"../features\";\nimport \"../fields\";\nimport \"../files\";\nimport \"../folders\";\nimport \"../forms\";\nimport \"../hubsites\";\nimport \"../items\";\nimport \"../lists\";\nimport \"../navigation\";\nimport \"../profiles\";\nimport \"../regional-settings\";\nimport \"../related-items\";\nimport \"../search\";\nimport \"../security\";\nimport \"../sharing\";\nimport \"../site-designs\";\nimport \"../site-groups\";\nimport \"../site-scripts\";\nimport \"../site-users\";\nimport \"../sites\";\nimport \"../social\";\nimport \"../sputilities\";\nimport \"../subscriptions\";\nimport \"../user-custom-actions\";\nimport \"../views\";\nimport \"../webparts\";\nimport \"../webs\";\n\nexport * from \"../appcatalog\";\nexport * from \"../attachments\";\nexport * from \"../clientside-pages\";\nexport * from \"../column-defaults\";\nexport * from \"../comments\";\nexport * from \"../content-types\";\nexport * from \"../features\";\nexport * from \"../fields\";\nexport * from \"../files\";\nexport * from \"../folders\";\nexport * from \"../forms\";\nexport * from \"../hubsites\";\nexport * from \"../items\";\nexport * from \"../lists\";\nexport * from \"../navigation\";\nexport { spODataEntity, spODataEntityArray } from \"../odata\";\nexport * from \"../profiles\";\nexport * from \"../regional-settings\";\nexport * from \"../related-items\";\nexport * from \"../search\";\nexport * from \"../security\";\nexport * from \"../sharing\";\nexport * from \"../site-designs\";\nexport * from \"../site-groups\";\nexport * from \"../site-scripts\";\nexport * from \"../site-users\";\nexport * from \"../sites\";\nexport * from \"../social\";\nexport * from \"../sputilities\";\nexport * from \"../subscriptions\";\nexport * from \"../user-custom-actions\";\nexport * from \"../views\";\nexport * from \"../webparts\";\nexport * from \"../webs\";\nexport * from \"../index\";\n\nexport const sp = new SPRest();\n","import { IGraphQueryable } from \"./graphqueryable\";\nimport { graphDelete, graphPatch, graphPost } from \"./operations\";\nimport { body, headers } from \"@pnp/odata\";\n\n/**\n * Decorator used to specify the default path for Queryable objects\n * \n * @param path \n */\nexport function defaultPath(path: string) {\n\n    return function <T extends { new(...args: any[]): {} }>(target: T) {\n\n        return class extends target {\n            constructor(...args: any[]) {\n                super(args[0], args.length > 1 && args[1] !== undefined ? args[1] : path);\n            }\n        };\n    };\n}\n\n/**\n * Adds the delete method to the tagged class\n */\nexport function deleteable() {\n    return function <T extends { new(...args: any[]): {} }>(target: T) {\n\n        return class extends target {\n            public delete(this: IGraphQueryable): Promise<void> {\n                return graphDelete(this);\n            }\n        };\n    };\n}\n\nexport interface IDeleteable {\n    /**\n     * Delete this instance\n     */\n    delete(): Promise<void>;\n}\n\n/**\n * Adds the delete method to the tagged class\n */\nexport function deleteableWithETag() {\n    return function <T extends { new(...args: any[]): {} }>(target: T) {\n\n        return class extends target {\n            public delete(this: IGraphQueryable, eTag = \"*\"): Promise<void> {\n                return graphDelete(this, headers({\n                        \"If-Match\": eTag,\n                }));\n            }\n        };\n    };\n}\n\nexport interface IDeleteableWithETag {\n    /**\n     * Delete this instance\n     */\n    delete(eTag?: string): Promise<void>;\n}\n\n/**\n * Adds the update method to the tagged class\n */\nexport function updateable() {\n    return function <T extends { new(...args: any[]): {} }>(target: T) {\n\n        return class extends target {\n            public update(this: IGraphQueryable, props: any): Promise<void> {\n                return graphPatch(this, body(props));\n            }\n        };\n    };\n}\n\nexport interface IUpdateable<T = any> {\n    /**\n     * Update the properties of an event object\n     * \n     * @param props Set of properties to update\n     */\n    update(props: T): Promise<void>;\n}\n\n/**\n * Adds the update method to the tagged class\n */\nexport function updateableWithETag() {\n    return function <T extends { new(...args: any[]): {} }>(target: T) {\n\n        return class extends target {\n            public update(this: IGraphQueryable, props: any, eTag = \"*\"): Promise<void> {\n                return graphPatch(this, body(props, headers({\n                    \"If-Match\": eTag,\n                })));\n            }\n        };\n    };\n}\n\nexport interface IUpdateableWithETag<T = any> {\n    /**\n     * Update the properties of an event object\n     * \n     * @param props Set of properties to update\n     */\n    update(props: T, eTag?: string): Promise<void>;\n}\n\n/**\n * Adds the add method to the tagged class\n */\nexport function addable() {\n    return function <T extends { new(...args: any[]): {} }>(target: T) {\n\n        return class extends target {\n            public add(this: IGraphQueryable, props: any): Promise<void> {\n                return graphPost(this, body(props));\n            }\n        };\n    };\n}\n\nexport interface IAddable<T = any, R = { id: string }> {\n    /**\n     * Adds a new item to this collection\n     * \n     * @param props properties used to create the new thread\n     */\n    add(props: T): Promise<R>;\n}\n\n/**\n * Adds the getById method to a collection\n */\nexport function getById<R>(factory: (...args: any[]) => R) {\n    return function <T extends { new(...args: any[]): {} }>(target: T) {\n\n        return class extends target {\n            public getById(this: IGraphQueryable, id: string): R {\n                return factory(this, id);\n            }\n        };\n    };\n}\nexport interface IGetById<R = any, T = string> {\n    /**\n     * Adds a new item to this collection\n     * \n     * @param props properties used to create the new thread\n     */\n    getById(id: T): R;\n}\n","import { body } from \"@pnp/odata\";\nimport {\n    ConversationThread as IConversationThreadType,\n    Post as IPostType,\n    Recipient as IRecipientType,\n    Conversation as IConversationType,\n    User as IUserType,\n} from \"@microsoft/microsoft-graph-types\";\nimport {\n    _GraphQueryableCollection,\n    _GraphQueryableInstance,\n    graphInvokableFactory,\n} from \"../graphqueryable\";\nimport { defaultPath, updateable, IUpdateable, deleteable, IDeleteable, addable, IAddable, getById, IGetById } from \"../decorators\";\nimport { graphPost, graphDelete } from \"../operations\";\n\n/**\n * Conversation\n */\n@updateable()\n@deleteable()\nexport class _Conversation extends _GraphQueryableInstance<IConversationType> {\n\n    /**\n     * Get all the threads in a group conversation.\n     */\n    public get threads(): IThreads {\n        return Threads(this);\n    }\n}\nexport interface IConversation extends _Conversation, IUpdateable<IConversationType>, IDeleteable { }\nexport const Conversation = graphInvokableFactory<IConversation>(_Conversation);\n\n/**\n * Conversations\n */\n@defaultPath(\"conversations\")\n@addable()\n@getById(Conversation)\nexport class _Conversations extends _GraphQueryableCollection<IConversationType[]> { }\nexport interface IConversations extends _Conversations, IGetById<IConversation>, IAddable<IConversationType> { }\nexport const Conversations = graphInvokableFactory<IConversations>(_Conversations);\n\n/**\n * Thread\n */\n@deleteable()\nexport class _Thread extends _GraphQueryableInstance {\n\n    /**\n     * Get all the threads in a group conversation.\n     */\n    public get posts(): IPosts {\n        return Posts(this);\n    }\n\n    /**\n     * Reply to a thread in a group conversation and add a new post to it\n     * \n     * @param post Contents of the post \n     */\n    public reply(post: IPostType): Promise<void> {\n        return graphPost(this.clone(Thread, \"reply\"), body(post));\n    }\n}\nexport interface IThread extends _Thread, IDeleteable { }\nexport const Thread = graphInvokableFactory<IThread>(_Thread);\n\n/**\n * Threads\n */\n@defaultPath(\"threads\")\n@addable()\n@getById(Thread)\nexport class _Threads extends _GraphQueryableCollection<IConversationThreadType[]> { }\nexport interface IThreads extends _Threads, IGetById<IThread>, IAddable<IConversationThreadType, { id: string }> { }\nexport const Threads = graphInvokableFactory<IThreads>(_Threads);\n\n\n/**\n * Post\n */\n@deleteable()\nexport class _Post extends _GraphQueryableInstance<IPostType> {\n    /**\n     * Forward a post to a recipient\n     */\n    public forward(info: IPostForwardInfo): Promise<void> {\n        return graphPost(this.clone(Post, \"forward\"), body(info));\n    }\n\n    /**\n     * Reply to a thread in a group conversation and add a new post to it\n     * \n     * @param post Contents of the post \n     */\n    public reply(post: IPostType): Promise<void> {\n        return graphPost(this.clone(Post, \"reply\"), body(post));\n    }\n}\nexport interface IPost extends _Post, IDeleteable { }\nexport const Post = graphInvokableFactory<IPost>(_Post);\n\n/**\n * Posts\n */\n@defaultPath(\"posts\")\n@addable()\n@getById(Post)\nexport class _Posts extends _GraphQueryableCollection<IPostType[]> { }\nexport interface IPosts extends _Posts, IGetById<IPost>, IAddable<IPostType> { }\nexport const Posts = graphInvokableFactory<IPosts>(_Posts);\n\n/**\n * Senders\n */\nexport class _Senders extends _GraphQueryableCollection<IUserType[]> {\n\n    /**\n     * Add a new user or group to this senders collection\n     * @param id The full @odata.id value to add (ex: https://graph.microsoft.com/v1.0/users/user@contoso.com)\n     */\n    public add(id: string): Promise<any> {\n        return graphPost(this.clone(Senders, \"$ref\"), body({ \"@odata.id\": id }));\n    }\n\n    /**\n     * Removes the entity from the collection\n     * \n     * @param id The full @odata.id value to remove (ex: https://graph.microsoft.com/v1.0/users/user@contoso.com)\n     */\n    public remove(id: string): Promise<void> {\n        const remover = this.clone(Senders, \"$ref\");\n        remover.query.set(\"$id\", id);\n        return graphDelete(remover);\n    }\n}\nexport interface ISenders extends _Senders { }\nexport const Senders = graphInvokableFactory<ISenders>(_Senders);\n\n/**\n * Information used to forward a post\n */\nexport interface IPostForwardInfo {\n    comment?: string;\n    toRecipients: IRecipientType[];\n}\n","import { Attachment as IAttachmentType } from \"@microsoft/microsoft-graph-types\";\nimport { body } from \"@pnp/odata\";\nimport { _GraphQueryableCollection, _GraphQueryableInstance, graphInvokableFactory } from \"../graphqueryable\";\nimport { graphPost } from \"../operations\";\nimport { defaultPath, getById, IGetById } from \"../decorators\";\nimport { type } from \"../utils/type\";\n\n/**\n * Attachment\n */\nexport class _Attachment extends _GraphQueryableInstance<IAttachmentType> { }\nexport interface IAttachment extends _Attachment { }\nexport const Attachment = graphInvokableFactory<IAttachment>(_Attachment);\n\n/**\n * Attachments\n */\n@defaultPath(\"attachments\")\n@getById(Attachment)\nexport class _Attachments extends _GraphQueryableCollection<IAttachmentType[]> {\n\n    /**\n     * Add attachment to this collection\n     * \n     * @param name Name given to the attachment file\n     * @param bytes File content\n     */\n    public addFile(name: string, bytes: string | Blob): Promise<IAttachmentType> {\n\n        return graphPost(this, body(type(\"#microsoft.graph.fileAttachment\", {\n            contentBytes: bytes,\n            name,\n        })));\n    }\n}\nexport interface IAttachments extends _Attachments, IGetById<IAttachment> {}\nexport const Attachments = graphInvokableFactory<IAttachments>(_Attachments);\n","export function type<T = unknown>(n: string, a: T): T & { \"@odata.type\": string} {\n    return Object.assign({ \"@odata.type\": n }, a);\n}\n","import { _Post } from \"../conversations/types\";\nimport { addProp } from \"@pnp/odata\";\nimport { Attachments, IAttachments } from \"./types\";\n\ndeclare module \"../conversations/types\" {\n    interface _Post {\n        readonly attachments: IAttachments;\n    }\n    interface IPost {\n        readonly attachments: IAttachments;\n    }\n}\n\naddProp(_Post, \"attachments\", Attachments);\n","import { _GraphQueryableCollection, _GraphQueryableInstance, graphInvokableFactory } from \"../graphqueryable\";\nimport { DirectoryObject as IDirectoryObjectType } from \"@microsoft/microsoft-graph-types\";\nimport { defaultPath, getById, IGetById, deleteable, IDeleteable } from \"../decorators\";\nimport { body } from \"@pnp/odata\";\nimport { graphPost } from \"../operations\";\n\n/**\n * Represents a Directory Object entity\n */\n@deleteable()\nexport class _DirectoryObject<GetType = IDirectoryObjectType> extends _GraphQueryableInstance<GetType> {\n\n    /**\n     * Returns all the groups and directory roles that the specified Directory Object is a member of. The check is transitive\n     * \n     * @param securityEnabledOnly \n     */\n    public getMemberObjects(securityEnabledOnly = false): Promise<{ value: string[] }> {\n        return graphPost(this.clone(DirectoryObject, \"getMemberObjects\"), body({ securityEnabledOnly }));\n    }\n\n    /**\n     * Returns all the groups that the specified Directory Object is a member of. The check is transitive\n     * \n     * @param securityEnabledOnly \n     */\n    public getMemberGroups(securityEnabledOnly = false): Promise<{ value: string[] }> {\n        return graphPost(this.clone(DirectoryObject, \"getMemberGroups\"), body({ securityEnabledOnly }));\n    }\n\n    /**\n     * Check for membership in a specified list of groups, and returns from that list those groups of which the specified user, group, or directory object is a member. \n     * This function is transitive.\n     * @param groupIds A collection that contains the object IDs of the groups in which to check membership. Up to 20 groups may be specified.\n     */\n    public checkMemberGroups(groupIds: String[]): Promise<{ value: string[] }> {\n        return graphPost(this.clone(DirectoryObject, \"checkMemberGroups\"), body({ groupIds }));\n    }\n}\n\nexport interface IDirectoryObject<GetType = IDirectoryObjectType> extends _DirectoryObject, IDeleteable { }\nexport const DirectoryObject = graphInvokableFactory<IDirectoryObject>(_DirectoryObject);\n\n/**\n * Describes a collection of Directory Objects\n *\n */\n@defaultPath(\"directoryObjects\")\n@getById(DirectoryObject)\nexport class _DirectoryObjects<GetType = IDirectoryObjectType[]> extends _GraphQueryableCollection<GetType> {\n    /**\n    * Returns the directory objects specified in a list of ids. NOTE: The directory objects returned are the full objects containing all their properties. \n    * The $select query option is not available for this operation.\n    * \n    * @param ids A collection of ids for which to return objects. You can specify up to 1000 ids.\n    * @param type A collection of resource types that specifies the set of resource collections to search. Default is directoryObject.\n    */\n    public getByIds(ids: string[], type: DirectoryObjectTypes = DirectoryObjectTypes.directoryObject): Promise<IDirectoryObjectType[]> {\n        return graphPost(this.clone(DirectoryObjects, \"getByIds\"), body({ ids, type }));\n    }\n}\nexport interface IDirectoryObjects extends _DirectoryObjects, IGetById<IDirectoryObjectType> { }\nexport const DirectoryObjects = graphInvokableFactory<IDirectoryObjects>(_DirectoryObjects);\n\n/**\n * DirectoryObjectTypes\n */\nexport enum DirectoryObjectTypes {\n    /**\n     * Directory Objects\n     */\n    directoryObject,\n    /**\n     * User\n     */\n    user,\n    /**\n     * Group\n     */\n    group,\n    /**\n     * Device\n     */\n    device,\n}\n","import { assign, ITypedHash } from \"@pnp/common\";\nimport { Event as IEventType, Group as IGroupType } from \"@microsoft/microsoft-graph-types\";\nimport { body } from \"@pnp/odata\";\nimport { _GraphQueryableInstance, _GraphQueryableCollection, graphInvokableFactory } from \"../graphqueryable\";\nimport { defaultPath, deleteable, IDeleteable, updateable, IUpdateable, getById, IGetById } from \"../decorators\";\nimport { graphPost } from \"../operations\";\nimport { _DirectoryObject, _DirectoryObjects } from \"../directory-objects/types\";\n\nexport enum GroupType {\n    /**\n     * Office 365 (aka unified group)\n     */\n    Office365,\n    /**\n     * Dynamic membership\n     */\n    Dynamic,\n    /**\n     * Security\n     */\n    Security,\n}\n\n/**\n * Represents a group entity\n */\n@deleteable()\n@updateable()\nexport class _Group extends _DirectoryObject<IGroupType> {\n    /**\n     * Add the group to the list of the current user's favorite groups. Supported for only Office 365 groups\n     */\n    public addFavorite(): Promise<void> {\n        return graphPost(this.clone(Group, \"addFavorite\"));\n    }\n    /**\n     * Remove the group from the list of the current user's favorite groups. Supported for only Office 365 groups\n     */\n    public removeFavorite(): Promise<void> {\n        return graphPost(this.clone(Group, \"removeFavorite\"));\n    }\n    /**\n     * Reset the unseenCount of all the posts that the current user has not seen since their last visit\n     */\n    public resetUnseenCount(): Promise<void> {\n        return graphPost(this.clone(Group, \"resetUnseenCount\"));\n    }\n    /**\n     * Calling this method will enable the current user to receive email notifications for this group,\n     * about new posts, events, and files in that group. Supported for only Office 365 groups\n     */\n    public subscribeByMail(): Promise<void> {\n        return graphPost(this.clone(Group, \"subscribeByMail\"));\n    }\n    /**\n     * Calling this method will prevent the current user from receiving email notifications for this group\n     * about new posts, events, and files in that group. Supported for only Office 365 groups\n     */\n    public unsubscribeByMail(): Promise<void> {\n        return graphPost(this.clone(Group, \"unsubscribeByMail\"));\n    }\n    /**\n     * Get the occurrences, exceptions, and single instances of events in a calendar view defined by a time range, from the default calendar of a group\n     * \n     * @param start Start date and time of the time range\n     * @param end End date and time of the time range\n     */\n    public getCalendarView(start: Date, end: Date): Promise<IEventType[]> {\n\n        const view = this.clone(Group, \"calendarView\");\n        view.query.set(\"startDateTime\", start.toISOString());\n        view.query.set(\"endDateTime\", end.toISOString());\n        return view();\n    }\n}\nexport interface IGroup extends _Group, IDeleteable, IUpdateable { }\nexport const Group = graphInvokableFactory<IGroup>(_Group);\n\n/**\n * Describes a collection of Field objects\n *\n */\n@defaultPath(\"groups\")\n@getById(Group)\nexport class _Groups extends _GraphQueryableCollection<IGroupType[]> {\n\n    /**\n     * Create a new group as specified in the request body.\n     * \n     * @param name Name to display in the address book for the group\n     * @param mailNickname Mail alias for the group\n     * @param groupType Type of group being created\n     * @param additionalProperties A plain object collection of additional properties you want to set on the new group\n     */\n    public async add(name: string, mailNickname: string, groupType: GroupType, additionalProperties: ITypedHash<any> = {}): Promise<IGroupAddResult> {\n\n        let postBody = assign({\n            displayName: name,\n            mailEnabled: groupType === GroupType.Office365,\n            mailNickname: mailNickname,\n            securityEnabled: groupType !== GroupType.Office365,\n        }, additionalProperties);\n\n        // include a group type if required\n        if (groupType !== GroupType.Security) {\n\n            postBody = assign(postBody, {\n                groupTypes: groupType === GroupType.Office365 ? [\"Unified\"] : [\"DynamicMembership\"],\n            });\n        }\n\n        const data = await graphPost(this, body(postBody));\n\n        return {\n            data,\n            group: (<any>this).getById(data.id),\n        };\n    }\n}\nexport interface IGroups extends _Groups, IGetById<IGroup> { }\nexport const Groups = graphInvokableFactory<IGroups>(_Groups);\n\n/**\n * IGroupAddResult\n */\nexport interface IGroupAddResult {\n    group: IGroup;\n    data: any;\n}\n","import { body } from \"@pnp/odata\";\nimport { Event as IEventType, Calendar as ICalendarType } from \"@microsoft/microsoft-graph-types\";\nimport { _GraphQueryableCollection, _GraphQueryableInstance, graphInvokableFactory } from \"../graphqueryable\";\nimport { defaultPath, IDeleteable, deleteable, IUpdateable, updateable, getById, IGetById } from \"../decorators\";\nimport { graphPost } from \"../operations\";\n\n/**\n * Calendars\n */\n@defaultPath(\"calendars\")\nexport class _Calendars extends _GraphQueryableCollection<ICalendarType[]> { }\nexport interface ICalendars<GetType = any> extends _Calendars { }\nexport const Calendars = graphInvokableFactory<ICalendars>(_Calendars);\n\n/**\n * Calendar\n */\nexport class _Calendar extends _GraphQueryableInstance<ICalendarType> {\n\n    public get events(): IEvents {\n        return Events(this);\n    }\n}\nexport interface ICalendar extends _Calendar { }\nexport const Calendar = graphInvokableFactory<ICalendar>(_Calendar);\n\n/**\n * Event\n */\n@deleteable()\n@updateable()\nexport class _Event extends _GraphQueryableInstance<IEventType> { }\nexport interface IEvent extends _Event, IDeleteable, IUpdateable { }\nexport const Event = graphInvokableFactory<IEvent>(_Event);\n\n/**\n * Events\n */\n@defaultPath(\"events\")\n@getById(Event)\nexport class _Events extends _GraphQueryableCollection<IEventType[]> {\n\n    /**\n     * Adds a new event to the collection\n     * \n     * @param properties The set of properties used to create the event\n     */\n    public async add(properties: IEventType): Promise<IEventAddResult> {\n\n        const data = await graphPost(this, body(properties));\n\n        return {\n            data,\n            event: (<any>this).getById(data.id),\n        };\n    }\n}\nexport interface IEvents extends _Events, IGetById<IEvent> { }\nexport const Events = graphInvokableFactory<IEvents>(_Events);\n\n/**\n * EventAddResult\n */\nexport interface IEventAddResult {\n    data: IEventType;\n    event: IEvent;\n}\n","import { addProp } from \"@pnp/odata\";\nimport { _Group } from \"../groups/types\";\nimport { Calendar, ICalendar, IEvents, Events } from \"./types\";\n\ndeclare module \"../groups/types\" {\n    interface _Group {\n        readonly attachmentFiles: ICalendar;\n        readonly events: IEvents;\n    }\n    interface IGroup {\n        readonly attachmentFiles: ICalendar;\n        readonly events: IEvents;\n    }\n}\n\naddProp(_Group, \"calendar\", Calendar, \"calendar\");\naddProp(_Group, \"events\", Events);\n","import { _GraphQueryableCollection, graphInvokableFactory, _GraphQueryableInstance } from \"../graphqueryable\";\nimport { User as IUserType, Person as IPersonType } from \"@microsoft/microsoft-graph-types\";\nimport { _DirectoryObject, DirectoryObjects, IDirectoryObjects } from \"../directory-objects/types\";\nimport { defaultPath, updateable, deleteable, IUpdateable, IDeleteable, getById, IGetById } from \"../decorators\";\n\n@updateable()\n@deleteable()\nexport class _User extends _DirectoryObject<IUserType> {\n    /**\n    * The groups and directory roles associated with the user\n    */\n    public get memberOf(): IDirectoryObjects {\n        return DirectoryObjects(this, \"memberOf\");\n    }\n\n    /**\n     * Retrieve a collection of person objects ordered by their relevance to the user\n     */\n    public get people(): IPeople {\n        return People(this);\n    }\n}\nexport interface IUser extends _User, IUpdateable<IUserType>, IDeleteable { }\nexport const User = graphInvokableFactory<IUser>(_User);\n\n@defaultPath(\"users\")\n@getById(User)\nexport class _Users extends _GraphQueryableCollection<IUserType[]> { }\nexport interface IUsers extends _Users, IGetById<IUser> { }\nexport const Users = graphInvokableFactory<IUsers>(_Users);\n\n@defaultPath(\"people\")\nexport class _People extends _GraphQueryableCollection<IPersonType[]> {}\nexport interface IPeople extends _People { }\nexport const People = graphInvokableFactory<IPeople>(_People);\n","import { _GraphQueryableCollection, _GraphQueryableInstance, graphInvokableFactory } from \"../graphqueryable\";\nimport { ITypedHash, assign } from \"@pnp/common\";\nimport { Contact as IContactType, ContactFolder as IContactFolderType, EmailAddress as IEmailAddressType } from \"@microsoft/microsoft-graph-types\";\nimport { defaultPath, updateable, deleteable, IUpdateable, IDeleteable, getById, IGetById } from \"../decorators\";\nimport { graphPost } from \"../operations\";\nimport { body } from \"@pnp/odata\";\n\n/**\n * Contact\n */\n@updateable()\n@deleteable()\nexport class _Contact extends _GraphQueryableInstance<IContactType> { }\nexport interface IContact extends _Contact, IUpdateable<IContactType>, IDeleteable { }\nexport const Contact = graphInvokableFactory<IContact>(_Contact);\n\n/**\n * Contacts\n */\n@defaultPath(\"contacts\")\n@getById(Contact)\nexport class _Contacts extends _GraphQueryableCollection<IContactType[]> {\n\n    /**\n    * Create a new Contact for the user.\n    * \n    * @param givenName The contact's given name.\n    * @param surName The contact's surname.\n    * @param emailAddresses The contact's email addresses.\n    * @param businessPhones The contact's business phone numbers.\n    * @param additionalProperties A plain object collection of additional properties you want to set on the new contact\n    */\n    public async add(\n        givenName: string,\n        surName: string,\n        emailAddresses: IEmailAddressType[],\n        businessPhones: string[],\n        additionalProperties: ITypedHash<any> = {}): Promise<IContactAddResult> {\n\n        const postBody = assign({ businessPhones, emailAddresses, givenName, surName }, additionalProperties);\n\n        const data = await graphPost(this, body(postBody));\n\n        return {\n            contact: (<any>this).getById(data.id),\n            data,\n        };\n    }\n}\nexport interface IContacts extends _Contacts, IGetById<IContact> { }\nexport const Contacts = graphInvokableFactory<IContacts>(_Contacts);\n\n/**\n * Contact Folder\n */\n@deleteable()\n@updateable()\nexport class _ContactFolder extends _GraphQueryableInstance<IContactFolderType> {\n    /**\n     * Gets the contacts in this contact folder\n     */\n    public get contacts(): IContacts {\n        return Contacts(this);\n    }\n\n    /**\n    * Gets the contacts in this contact folder\n    */\n    public get childFolders(): IContactFolders {\n        return ContactFolders(this, \"childFolders\");\n    }\n}\nexport interface IContactFolder extends _ContactFolder, IUpdateable, IDeleteable { }\nexport const ContactFolder = graphInvokableFactory<IContactFolder>(_ContactFolder);\n\n/**\n * Contact Folders\n */\n@defaultPath(\"contactFolders\")\n@getById(ContactFolder)\nexport class _ContactFolders extends _GraphQueryableCollection<IContactFolderType[]> {\n\n    /**\n     * Create a new Contact Folder for the user.\n     * \n     * @param displayName The folder's display name.\n     * @param parentFolderId The ID of the folder's parent folder.\n     */\n    public async add(displayName: string, parentFolderId?: string): Promise<IContactFolderAddResult> {\n\n        const postBody = {\n            displayName: displayName,\n            parentFolderId: parentFolderId,\n        };\n\n        const data = await graphPost(this, body(postBody));\n\n        return {\n            contactFolder: (<any>this).getById(data.id),\n            data,\n        };\n    }\n}\nexport interface IContactFolders extends _ContactFolders, IGetById<IContactFolder> { }\nexport const ContactFolders = graphInvokableFactory<IContactFolders>(_ContactFolders);\n\n/**\n * IContactFolderAddResult\n */\nexport interface IContactFolderAddResult {\n    data: IContactFolderType;\n    contactFolder: IContactFolder;\n}\n\n/**\n * IContactAddResult\n */\nexport interface IContactAddResult {\n    data: IContactType;\n    contact: IContact;\n}\n","import { addProp } from \"@pnp/odata\";\nimport { _User } from \"../users/types\";\nimport { IContacts, Contacts, ContactFolders, IContactFolders } from \"./types\";\n\ndeclare module \"../users/types\" {\n    interface _User {\n        readonly contacts: IContacts;\n        readonly contactFolders: IContactFolders;\n    }\n    interface IUser {\n        readonly contacts: IContacts;\n        readonly contactFolders: IContactFolders;\n    }\n}\n\naddProp(_User, \"contacts\", Contacts);\naddProp(_User, \"contactFolders\", ContactFolders);\n","import { addProp } from \"@pnp/odata\";\nimport { _Group } from \"../groups/types\";\nimport { Conversations, IConversations, ISenders, Senders } from \"./types\";\n\ndeclare module \"../groups/types\" {\n    interface _Group {\n        readonly conversations: IConversations;\n        readonly acceptedSenders: ISenders;\n        readonly rejectedSenders: ISenders;\n    }\n    interface IGroup {\n        readonly conversations: IConversations;\n        readonly acceptedSenders: ISenders;\n        readonly rejectedSenders: ISenders;\n    }\n}\n\naddProp(_Group, \"conversations\", Conversations);\naddProp(_Group, \"acceptedSenders\", Senders, \"acceptedsenders\");\naddProp(_Group, \"rejectedSenders\", Senders, \"rejectedsenders\");\n","import { GraphRest } from \"../rest\";\nimport { IDirectoryObjects, DirectoryObjects } from \"./types\";\n\nexport {\n    IDirectoryObject,\n    DirectoryObjectTypes,\n    DirectoryObject,\n    DirectoryObjects,\n    IDirectoryObjects,\n} from \"./types\";\n\ndeclare module \"../rest\" {\n    interface GraphRest {\n        readonly directoryObjects: IDirectoryObjects;\n    }\n}\n\nReflect.defineProperty(GraphRest.prototype, \"directoryObjects\", {\n    configurable: true,\n    enumerable: true,\n    get: function (this: GraphRest) {\n        return DirectoryObjects(this);\n    },\n});\n","import { GraphRest } from \"../rest\";\nimport { IGroups, Groups } from \"./types\";\n\nexport {\n    Group,\n    GroupType,\n    Groups,\n    IGroup,\n    IGroupAddResult,\n    IGroups,\n} from \"./types\";\n\ndeclare module \"../rest\" {\n    interface GraphRest {\n        readonly groups: IGroups;\n    }\n}\n\nReflect.defineProperty(GraphRest.prototype, \"groups\", {\n    configurable: true,\n    enumerable: true,\n    get: function (this: GraphRest) {\n        return Groups(this);\n    },\n});\n","import {\n    OfficeGraphInsights as IOfficeGraphInsightsType,\n    Trending as ITrendingInsightType,\n    UsedInsight as IUsedInsightType,\n    SharedInsight as ISharedInsightType,\n    Entity as IEntityType,\n} from \"@microsoft/microsoft-graph-types\";\nimport {\n    _GraphQueryableInstance,\n    _GraphQueryableCollection,\n    graphInvokableFactory,\n} from \"../graphqueryable\";\nimport { defaultPath, getById, IGetById } from \"../decorators\";\n\n/**\n * Represents a insights entity\n */\n@defaultPath(\"insights\")\nexport class _Insights extends _GraphQueryableInstance<IOfficeGraphInsightsType> {\n\n    public get trending(): ITrendingInsights {\n        return TrendingInsights(this);\n    }\n\n    public get used(): IUsedInsights {\n        return UsedInsights(this);\n    }\n\n    public get shared(): ISharedInsights {\n        return SharedInsights(this);\n    }\n}\nexport interface IInsights extends _Insights {}\nexport const Insights = graphInvokableFactory<IInsights>(_Insights);\n\n/**\n * Describes a Trending Insight instance\n */\nexport class _TrendingInsight extends _GraphQueryableInstance<ITrendingInsightType> {\n    public get resource(): IResource {\n        return Resource(this);\n    }\n}\nexport interface ITrendingInsight extends _TrendingInsight { }\nexport const TrendingInsight = graphInvokableFactory<ITrendingInsight>(_TrendingInsight);\n\n/**\n * Describes a collection of Trending Insight objects\n *\n */\n@defaultPath(\"trending\")\n@getById(TrendingInsight)\nexport class _TrendingInsights extends _GraphQueryableCollection<ITrendingInsightType[]> {}\nexport interface ITrendingInsights extends _TrendingInsights, IGetById<ITrendingInsight> {}\nexport const TrendingInsights = graphInvokableFactory<ITrendingInsights>(_TrendingInsights);\n\n/**\n * Describes a Used Insight instance\n */\nexport class _UsedInsight extends _GraphQueryableInstance<IUsedInsightType> {\n    public get resource(): IResource {\n        return Resource(this);\n    }\n}\nexport interface IUsedInsight extends _UsedInsight { }\nexport const UsedInsight = graphInvokableFactory<IUsedInsight>(_UsedInsight);\n\n/**\n * Describes a collection of Used Insight objects\n *\n */\n@defaultPath(\"used\")\n@getById(UsedInsight)\nexport class _UsedInsights extends _GraphQueryableCollection<IUsedInsightType[]> {}\nexport interface IUsedInsights extends _UsedInsights, IGetById<IUsedInsight> {}\nexport const UsedInsights = graphInvokableFactory<IUsedInsights>(_UsedInsights);\n\n/**\n * Describes a Shared Insight instance\n */\nexport class _SharedInsight extends _GraphQueryableInstance<ISharedInsightType> {\n    public get resource(): IResource {\n        return Resource(this);\n    }\n}\nexport interface ISharedInsight extends _SharedInsight { }\nexport const SharedInsight = graphInvokableFactory<ISharedInsight>(_SharedInsight);\n\n/**\n * Describes a collection of Shared Insight objects\n *\n */\n@defaultPath(\"shared\")\n@getById(SharedInsight)\nexport class _SharedInsights extends _GraphQueryableCollection<ISharedInsightType[]> {}\nexport interface ISharedInsights extends _SharedInsights, IGetById<ISharedInsight> {}\nexport const SharedInsights = graphInvokableFactory<ISharedInsights>(_SharedInsights);\n\n/**\n * Describes a Resource Entity instance\n */\n@defaultPath(\"resource\")\nexport class _Resource extends _GraphQueryableInstance<IEntityType> {}\nexport interface IResource extends _Resource { }\nexport const Resource = graphInvokableFactory<IResource>(_Resource);\n","import { addProp } from \"@pnp/odata\";\nimport { _User } from \"../users/types\";\nimport { IInsights, Insights } from \"./types\";\n\ndeclare module \"../users/types\" {\n    interface _User {\n        readonly insights: IInsights;\n    }\n    interface IUser {\n        readonly insights: IInsights;\n    }\n}\n\naddProp(_User, \"insights\", Insights);\n","import { ITypedHash, assign } from \"@pnp/common\";\nimport { body } from \"@pnp/odata\";\nimport { Invitation as IInvitationType } from \"@microsoft/microsoft-graph-types\";\nimport { _GraphQueryableCollection, graphInvokableFactory } from \"../graphqueryable\";\nimport { defaultPath } from \"../decorators\";\nimport { graphPost } from \"../operations\";\n\n/**\n * Invitations\n */\n@defaultPath(\"invitations\")\nexport class _Invitations extends _GraphQueryableCollection<IInvitationType[]> {\n\n    /**\n     * Create a new Invitation via invitation manager.\n     * \n     * @param invitedUserEmailAddress The email address of the user being invited.\n     * @param inviteRedirectUrl The URL user should be redirected to once the invitation is redeemed.\n     * @param additionalProperties A plain object collection of additional properties you want to set in the invitation\n     */\n    public async create(invitedUserEmailAddress: string, inviteRedirectUrl: string, additionalProperties: ITypedHash<any> = {}): Promise<IInvitationAddResult> {\n\n        const postBody = assign({ inviteRedirectUrl, invitedUserEmailAddress }, additionalProperties);\n\n        const data = await graphPost<IInvitationType>(this, body(postBody));\n\n        return { data };\n    }\n}\nexport interface IInvitations extends _Invitations {}\nexport const Invitations = graphInvokableFactory<IInvitations>(_Invitations);\n\n/**\n * IInvitationAddResult\n */\nexport interface IInvitationAddResult {\n    data: IInvitationType;\n}\n","import { GraphRest } from \"../rest\";\nimport { IInvitations, Invitations } from \"./types\";\n\nexport {\n    IInvitationAddResult,\n    IInvitations,\n    Invitations,\n} from \"./types\";\n\ndeclare module \"../rest\" {\n    interface GraphRest {\n        readonly invitations: IInvitations;\n    }\n}\n\nReflect.defineProperty(GraphRest.prototype, \"invitations\", {\n    configurable: true,\n    enumerable: true,\n    get: function (this: GraphRest) {\n        return Invitations(this);\n    },\n});\n","import { body } from \"@pnp/odata\";\nimport { User as IMemberType } from \"@microsoft/microsoft-graph-types\";\nimport { _GraphQueryableCollection, _GraphQueryableInstance, graphInvokableFactory } from \"../graphqueryable\";\nimport { defaultPath, getById, IGetById } from \"../decorators\";\nimport { graphDelete, graphPost } from \"../operations\";\n\n/**\n * Member\n */\nexport class _Member extends _GraphQueryableInstance<IMemberType> {\n    /**\n     * Removes this Member\n     */\n    public remove(): Promise<void> {\n        return graphDelete(this.clone(Member, \"$ref\"));\n    }\n}\nexport interface IMember extends _Member { }\nexport const Member = graphInvokableFactory<IMember>(_Member);\n\n/**\n * Members\n */\n@defaultPath(\"members\")\n@getById(Member)\nexport class _Members extends _GraphQueryableCollection<IMemberType[]> {\n\n    /**\n     * Use this API to add a member to an Office 365 group, a security group or a mail-enabled security group through\n     * the members navigation property. You can add users or other groups.\n     * Important: You can add only users to Office 365 groups.\n     * \n     * @param id Full @odata.id of the directoryObject, user, or group object you want to add (ex: `https://graph.microsoft.com/v1.0/directoryObjects/${id}`)\n     */\n    public add(id: string): Promise<any> {\n        return graphPost(this.clone(Members, \"$ref\"), body({ \"@odata.id\": id }));\n    }\n}\nexport interface IMembers extends _Members, IGetById<IMember> { }\nexport const Members = graphInvokableFactory<IMembers>(_Members);\n","import { addProp } from \"@pnp/odata\";\nimport { _Group } from \"../groups/types\";\nimport { IMembers, Members } from \"./types\";\n\ndeclare module \"../groups/types\" {\n    interface _Group {\n        readonly owners: IMembers;\n        readonly members: IMembers;\n    }\n    interface IGroup {\n        readonly owners: IMembers;\n        readonly members: IMembers;\n    }\n}\n\naddProp(_Group, \"owners\", Members, \"owners\");\naddProp(_Group, \"members\", Members);\n","import { Message as IMessageType, MailFolder as IMailFolderType, MailboxSettings as IMailboxSettingsType } from \"@microsoft/microsoft-graph-types\";\nimport { _GraphQueryableCollection, _GraphQueryableInstance, graphInvokableFactory } from \"../graphqueryable\";\nimport { defaultPath, getById, addable, IGetById, IAddable, updateable, IUpdateable } from \"../decorators\";\n\n/**\n * Message\n */\nexport class _Message extends _GraphQueryableInstance<IMessageType> { }\nexport interface IMessage extends _Message { }\nexport const Message = graphInvokableFactory<IMessage>(_Message);\n\n/**\n * Messages\n */\n@defaultPath(\"messages\")\n@getById(Message)\n@addable()\nexport class _Messages extends _GraphQueryableCollection<IMessageType[]> { }\nexport interface IMessages extends _Messages, IGetById<IMessage>, IAddable<IMessageType> { }\nexport const Messages = graphInvokableFactory<IMessages>(_Messages);\n\n/**\n * MailFolder\n */\nexport class _MailFolder extends _GraphQueryableInstance<IMailFolderType> { }\nexport interface IMailFolder extends _MailFolder { }\nexport const MailFolder = graphInvokableFactory<IMailFolder>(_MailFolder);\n\n/**\n * MailFolders\n */\n@defaultPath(\"mailFolders\")\n@getById(MailFolder)\n@addable()\nexport class _MailFolders extends _GraphQueryableCollection<IMailFolderType[]> { }\nexport interface IMailFolders extends _MailFolders, IGetById<IMailFolder>, IAddable<IMailFolderType> { }\nexport const MailFolders = graphInvokableFactory<IMailFolders>(_MailFolders);\n\n/**\n * MailboxSettings\n */\n@defaultPath(\"mailboxSettings\")\n@updateable()\nexport class _MailboxSettings extends _GraphQueryableInstance<IMailboxSettingsType> { }\nexport interface IMailboxSettings extends _MailboxSettings, IUpdateable<IMailboxSettingsType> { }\nexport const MailboxSettings = graphInvokableFactory<IMailboxSettings>(_MailboxSettings);\n","import { addProp, body } from \"@pnp/odata\";\nimport { _User, User } from \"../users/types\";\nimport { IMessages, Messages, IMailboxSettings, MailboxSettings, IMailFolders, MailFolders, IMessage } from \"./types\";\nimport { graphPost } from \"../operations\";\n\ndeclare module \"../users/types\" {\n    interface _User {\n        readonly messages: IMessages;\n        readonly mailboxSettings: IMailboxSettings;\n        readonly mailFolders: IMailFolders;\n        sendMail(message: IMessage): Promise<void>;\n    }\n    interface IUser {\n        readonly messages: IMessages;\n        readonly mailboxSettings: IMailboxSettings;\n        readonly mailFolders: IMailFolders;\n        sendMail(message: IMessage): Promise<void>;\n    }\n}\n\naddProp(_User, \"messages\", Messages);\naddProp(_User, \"mailboxSettings\", MailboxSettings);\naddProp(_User, \"mailFolders\", MailFolders);\n\n_User.prototype.sendMail = function (this: _User, message: IMessage): Promise<void> {\n    return graphPost(this.clone(User, \"sendMail\"), body(message));\n};\n","import {\n    GraphQueryableInstance,\n    GraphQueryableCollection,\n    _GraphQueryableInstance,\n    IGraphQueryableInstance,\n    IGraphQueryableCollection,\n    _GraphQueryableCollection,\n    graphInvokableFactory,\n} from \"../graphqueryable\";\nimport { Drive as IDriveType } from \"@microsoft/microsoft-graph-types\";\nimport { assign, combine } from \"@pnp/common\";\nimport { defaultPath, getById, IGetById, deleteable, IDeleteable, updateable, IUpdateable } from \"../decorators\";\nimport { body } from \"@pnp/odata\";\nimport { graphPatch, graphGet, graphPut } from \"../operations\";\n\n/**\n * Describes a Drive instance\n *\n */\n@defaultPath(\"drive\")\nexport class _Drive extends _GraphQueryableInstance<IDriveType> {\n\n    public get root(): IRoot {\n        return Root(this);\n    }\n\n    public get list(): IGraphQueryableInstance {\n        return GraphQueryableInstance(this, \"list\");\n    }\n\n    public get recent(): IDriveItems {\n        return DriveItems(this, \"recent\");\n    }\n\n    public get sharedWithMe(): IDriveItems {\n        return DriveItems(this, \"sharedWithMe\");\n    }\n\n    public getItemById(id: string): IDriveItem {\n        return DriveItem(this, combine(\"items\", id));\n    }\n}\nexport interface IDrive extends _Drive {}\nexport const Drive = graphInvokableFactory<IDrive>(_Drive);\n\n/**\n * Describes a collection of Drive objects\n *\n */\n@defaultPath(\"drives\")\n@getById(Drive)\nexport class _Drives extends _GraphQueryableCollection<IDriveType[]> { }\nexport interface IDrives extends _Drives, IGetById<IDrive> { }\nexport const Drives = graphInvokableFactory<IDrives>(_Drives);\n\n/**\n * Describes a Root instance\n *\n */\n@defaultPath(\"root\")\nexport class _Root extends _GraphQueryableInstance<IDrive> {\n\n    public get children(): IDriveItems {\n        return DriveItems(this, \"children\");\n    }\n\n    public search(query: string): Promise<any> {\n        const searcher = this.clone(Root);\n        searcher.query.set(\"search\", `'${query}'`);\n        return searcher();\n    }\n\n    public get thumbnails(): IGraphQueryableCollection {\n        return GraphQueryableCollection(this, \"thumbnails\");\n    }\n}\nexport interface IRoot extends _Root {}\nexport const Root = graphInvokableFactory<IRoot>(_Root);\n\n/**\n * Describes a Drive Item instance\n *\n */\n@deleteable()\n@updateable()\nexport class _DriveItem extends _GraphQueryableInstance<any> {\n\n    public get children(): IDriveItems {\n        return DriveItems(this, \"children\");\n    }\n\n    public get thumbnails(): IGraphQueryableCollection {\n        return GraphQueryableCollection(this, \"thumbnails\");\n    }\n\n    public get versions(): IGraphQueryableCollection<IDriveItemVersionInfo> {\n        return <any>GraphQueryableCollection(this, \"versions\");\n    }\n\n    public move(parentReference: { id: \"string\" }, name: string): Promise<void> {\n        return graphPatch(this, body(assign(parentReference, { name })));\n    }\n\n    public getContent(): Promise<any> {\n        return graphGet(this.clone(DriveItem, \"content\"));\n    }\n\n    public setContent(content: any): Promise<{ id: string, name: string, size: number }> {\n        return graphPut(this.clone(DriveItem, \"content\"), {\n            body: content,\n        });\n    }\n}\nexport interface IDriveItem extends _DriveItem, IDeleteable, IUpdateable {}\nexport const DriveItem = graphInvokableFactory<IDriveItem>(_DriveItem);\n\n/**\n * Describes a collection of Drive Item objects\n *\n */\n@getById(DriveItem)\nexport class _DriveItems extends _GraphQueryableCollection { }\nexport interface IDriveItems extends _DriveItems, IGetById<IDriveItem> { }\nexport const DriveItems = graphInvokableFactory<IDriveItems>(_DriveItems);\n\n/**\n * IDriveItemAddResult\n */\nexport interface IDriveItemAddResult {\n    data: any;\n    driveItem: IDriveItem;\n}\n\nexport interface IDriveItemVersionInfo {\n    id: string;\n    lastModifiedBy: {\n        user: {\n            id: string;\n            displayName: string;\n        },\n    };\n    lastModifiedDateTime: string;\n    size: number;\n}\n","import { addProp } from \"@pnp/odata\";\nimport { _User } from \"../users/types\";\nimport { IDrive, Drive, IDrives, Drives } from \"./types\";\n\ndeclare module \"../users/types\" {\n    interface _User {\n        readonly drive: IDrive;\n        readonly drives: IDrives;\n    }\n    interface IUser {\n        readonly drive: IDrive;\n        readonly drives: IDrives;\n    }\n}\n\naddProp(_User, \"drive\", Drive);\naddProp(_User, \"drives\", Drives);\n","import { body } from \"@pnp/odata\";\nimport { Notebook as INotebookType, Onenote as IOnenoteType, OnenoteSection as ISectionType, OnenotePage as IOnenotePageType } from \"@microsoft/microsoft-graph-types\";\nimport {\n    GraphQueryableCollection,\n    _GraphQueryableInstance,\n    _GraphQueryableCollection,\n    IGraphQueryableCollection,\n    graphInvokableFactory,\n} from \"../graphqueryable\";\nimport { defaultPath, getById, IGetById } from \"../decorators\";\nimport { graphPost } from \"../operations\";\n\n/**\n * Represents a onenote entity\n */\n@defaultPath(\"onenote\")\nexport class _OneNote extends _GraphQueryableInstance<IOnenoteType> {\n\n    public get notebooks(): INotebooks {\n        return Notebooks(this);\n    }\n\n    public get sections(): ISections {\n        return Sections(this);\n    }\n\n    public get pages(): IGraphQueryableCollection<IOnenotePageType[]> {\n        return <any>GraphQueryableCollection(this, \"pages\");\n    }\n}\nexport interface IOneNote extends _OneNote {}\nexport const OneNote = graphInvokableFactory<IOneNote>(_OneNote);\n\n\n/**\n * Describes a notebook instance\n *\n */\nexport class _Notebook extends _GraphQueryableInstance<INotebookType> {\n    public get sections(): ISections {\n        return Sections(this);\n    }\n}\nexport interface INotebook extends _Notebook {}\nexport const Notebook = graphInvokableFactory<INotebook>(_Notebook);\n\n/**\n * Describes a collection of Notebook objects\n *\n */\n@defaultPath(\"notebooks\")\n@getById(Notebook)\nexport class _Notebooks extends _GraphQueryableCollection<INotebookType[]> {\n    /**\n     * Create a new notebook as specified in the request body.\n     * \n     * @param displayName Notebook display name\n     */\n    public async add(displayName: string): Promise<INotebookAddResult> {\n\n        const data = await graphPost(this, body({ displayName }));\n\n        return {\n            data,\n            notebook: (<any>this).getById(data.id),\n        };\n    }\n}\nexport interface INotebooks extends _Notebooks, IGetById<INotebook> {}\nexport const Notebooks = graphInvokableFactory<INotebooks>(_Notebooks);\n\n\n/**\n * Describes a sections instance\n */\nexport class _Section extends _GraphQueryableInstance<ISectionType> { }\nexport interface ISection extends _Section { }\nexport const Section = graphInvokableFactory<ISection>(_Section);\n\n/**\n * Describes a collection of Sections objects\n *\n */\n@defaultPath(\"sections\")\n@getById(Section)\nexport class _Sections extends _GraphQueryableCollection<ISectionType[]> {\n    /**\n     * Adds a new section\n     * \n     * @param displayName New section display name\n     */\n    public async add(displayName: string): Promise<ISectionAddResult> {\n\n        const data = await graphPost(this, body({ displayName }));\n\n        return {\n            data,\n            section: (<any>this).getById(data.id),\n        };\n    }\n}\nexport interface ISections extends _Sections, IGetById<ISection> {}\nexport const Sections = graphInvokableFactory<ISections>(_Sections);\n\n/**\n * INotebookAddResult\n */\nexport interface INotebookAddResult {\n    data: any;\n    notebook: INotebook;\n}\n\n/**\n * ISectionAddResult\n */\nexport interface ISectionAddResult {\n    data: any;\n    section: ISection;\n}\n","import { addProp } from \"@pnp/odata\";\nimport { _User } from \"../users/types\";\nimport { IOneNote, OneNote } from \"./types\";\n\ndeclare module \"../users/types\" {\n    interface _User {\n        readonly onenote: IOneNote;\n    }\n    interface IUser {\n        readonly onenote: IOneNote;\n    }\n}\n\naddProp(_User, \"onenote\", OneNote);\n","import { _GraphQueryableInstance, graphInvokableFactory } from \"../graphqueryable\";\nimport { BlobParser, BufferParser } from \"@pnp/odata\";\nimport { Photo as IPhotoType } from \"@microsoft/microsoft-graph-types\";\nimport { defaultPath } from \"../decorators\";\nimport { graphPatch } from \"../operations\";\n\n@defaultPath(\"photo\")\nexport class _Photo extends _GraphQueryableInstance<IPhotoType> {\n    /**\n     * Gets the image bytes as a blob (browser)\n     */\n    public getBlob(): Promise<Blob> {\n        return this.clone(Photo, \"$value\", false).usingParser(new BlobParser())<Blob>();\n    }\n\n    /**\n     * Gets the image file byets as a Buffer (node.js)\n     */\n    public getBuffer(): Promise<ArrayBuffer> {\n        return this.clone(Photo, \"$value\", false).usingParser(new BufferParser())<ArrayBuffer>();\n    }\n\n    /**\n     * Sets the file bytes\n     * \n     * @param content Image file contents, max 4 MB\n     */\n    public setContent(content: ArrayBuffer | Blob): Promise<void> {\n        return graphPatch(this.clone(Photo, \"$value\", false), { body: content });\n    }\n}\nexport interface IPhoto extends _Photo { }\nexport const Photo = graphInvokableFactory<IPhoto>(_Photo);\n","import { addProp } from \"@pnp/odata\";\nimport { _Group } from \"../groups/types\";\nimport { Photo, IPhoto } from \"./types\";\n\ndeclare module \"../groups/types\" {\n    interface _Group {\n        readonly photo: IPhoto;\n    }\n    interface IGroup {\n        readonly photo: IPhoto;\n    }\n}\n\naddProp(_Group, \"photo\", Photo);\n","import { ITypedHash, assign } from \"@pnp/common\";\nimport {\n    PlannerPlan as IPlannerPlanType,\n    PlannerTask as IPlannerTaskType,\n    PlannerBucket as IPlannerBucketType,\n    Planner as IPlannerType,\n} from \"@microsoft/microsoft-graph-types\";\nimport { body } from \"@pnp/odata\";\nimport { _GraphQueryableInstance, _GraphQueryableCollection, graphInvokableFactory } from \"../graphqueryable\";\nimport { getById, IGetById, deleteableWithETag, IDeleteableWithETag, updateableWithETag, IUpdateableWithETag } from \"../decorators\";\nimport { graphPost } from \"../operations\";\nimport { defaultPath } from \"../decorators\";\n\n/**\n * Planner\n */\n@defaultPath(\"planner\")\nexport class _Planner extends _GraphQueryableInstance<IPlannerType> {\n\n    // Should Only be able to get by id, or else error occur\n    public get plans(): IPlans {\n        return Plans(this);\n    }\n\n    // Should Only be able to get by id, or else error occur\n    public get tasks(): ITasks {\n        return Tasks(this);\n    }\n\n    // Should Only be able to get by id, or else error occur\n    public get buckets(): IBuckets {\n        return Buckets(this);\n    }\n}\nexport interface IPlanner extends _Planner { }\nexport const Planner = graphInvokableFactory<IPlanner>(_Planner);\n\n/**\n * Plan\n */\n@updateableWithETag()\n@deleteableWithETag()\nexport class _Plan extends _GraphQueryableInstance<IPlannerPlanType> {\n\n    public get tasks(): ITasks {\n        return Tasks(this);\n    }\n\n    public get buckets(): IBuckets {\n        return Buckets(this);\n    }\n}\nexport interface IPlan extends _Plan, IUpdateableWithETag<IPlannerPlanType>, IDeleteableWithETag { }\nexport const Plan = graphInvokableFactory<IPlan>(_Plan);\n\n@defaultPath(\"plans\")\n@getById(Plan)\nexport class _Plans extends _GraphQueryableCollection<IPlannerPlanType[]> {\n    /**\n     * Create a new Planner Plan.\n     * \n     * @param owner Id of Group object.\n     * @param title The Title of the Plan.\n     */\n    public async add(owner: string, title: string): Promise<IPlanAddResult> {\n\n        const data = await graphPost(this, body({ owner, title }));\n\n        return {\n            data,\n            plan: (<any>this).getById(data.id),\n        };\n    }\n}\nexport interface IPlans extends _Plans, IGetById<IPlan> { }\nexport const Plans = graphInvokableFactory<IPlans>(_Plans);\n\n/**\n * Task\n */\n@updateableWithETag()\n@deleteableWithETag()\nexport class _Task extends _GraphQueryableInstance<IPlannerTaskType> { }\nexport interface ITask extends _Task, IUpdateableWithETag<IPlannerTaskType>, IDeleteableWithETag { }\nexport const Task = graphInvokableFactory<ITask>(_Task);\n\n/**\n * Tasks\n */\n@defaultPath(\"tasks\")\n@getById(Task)\nexport class _Tasks extends _GraphQueryableCollection<IPlannerTaskType[]> {\n    /**\n     * Create a new Planner Task.\n     * \n     * @param planId Id of Plan.\n     * @param title The Title of the Task.\n     * @param assignments Assign the task\n     * @param bucketId Id of Bucket\n     */\n    public async add(planId: string, title: string, assignments?: ITypedHash<any>, bucketId?: string): Promise<ITaskAddResult> {\n\n        let postBody = assign({\n            planId,\n            title,\n        }, assignments);\n\n        if (bucketId) {\n            postBody = assign(postBody, {\n                bucketId: bucketId,\n            });\n        }\n\n        const data = await graphPost(this, body(postBody));\n\n        return {\n            data,\n            task: (<any>this).getById(data.id),\n        };\n    }\n}\nexport interface ITasks extends _Tasks, IGetById<ITask> { }\nexport const Tasks = graphInvokableFactory<ITasks>(_Tasks);\n\n\n/**\n * Bucket\n */\n@updateableWithETag()\n@deleteableWithETag()\nexport class _Bucket extends _GraphQueryableInstance<IPlannerBucketType> {\n    public get tasks(): ITasks {\n        return Tasks(this);\n    }\n}\nexport interface IBucket extends _Bucket, IUpdateableWithETag<IPlannerBucketType>, IDeleteableWithETag { }\nexport const Bucket = graphInvokableFactory<IBucket>(_Bucket);\n\n\n/**\n * Buckets\n */\n@defaultPath(\"buckets\")\n@getById(Bucket)\nexport class _Buckets extends _GraphQueryableCollection<IPlannerBucketType[]> {\n    /**\n     * Create a new Bucket.\n     * \n     * @param name Name of Bucket object.\n     * @param planId The Id of the Plan.\n     * @param oderHint Hint used to order items of this type in a list view.\n     */\n    public async add(name: string, planId: string, orderHint?: string): Promise<IBucketAddResult> {\n\n        const postBody = {\n            name: name,\n            orderHint: orderHint ? orderHint : \"\",\n            planId: planId,\n        };\n\n        const data = await graphPost(this, body(postBody));\n\n        return {\n            bucket: (<any>this).getById(data.id),\n            data,\n        };\n    }\n}\nexport interface IBuckets extends _Buckets, IGetById<IBucket> { }\nexport const Buckets = graphInvokableFactory<IBuckets>(_Buckets);\n\nexport interface IBucketAddResult {\n    data: IPlannerBucketType;\n    bucket: IBucket;\n}\n\nexport interface IPlanAddResult {\n    data: IPlannerPlanType;\n    plan: IPlan;\n}\n\nexport interface ITaskAddResult {\n    data: IPlannerTaskType;\n    task: ITask;\n}\n","import { addProp } from \"@pnp/odata\";\nimport { _Group } from \"../groups/types\";\nimport { IPlans, Plans } from \"./types\";\n\ndeclare module \"../groups/types\" {\n    interface _Group {\n        readonly plans: IPlans;\n    }\n    interface IGroup {\n        readonly plans: IPlans;\n    }\n}\n\naddProp(_Group, \"plans\", Plans, \"planner/plans\");\n","import { addProp } from \"@pnp/odata\";\nimport { _User } from \"../users/types\";\nimport { ITasks, Tasks } from \"./types\";\n\ndeclare module \"../users/types\" {\n    interface _User {\n        readonly tasks: ITasks;\n    }\n    interface IUser {\n        readonly tasks: ITasks;\n    }\n}\n\naddProp(_User, \"tasks\", Tasks, \"planner/tasks\");\n","import { GraphRest } from \"../rest\";\nimport { IPlanner, Planner } from \"./types\";\n\nimport \"./groups\";\nimport \"./users\";\n\nexport {\n    Bucket,\n    Buckets,\n    IBucket,\n    IBucketAddResult,\n    IBuckets,\n    IPlan,\n    IPlanAddResult,\n    IPlanner,\n    IPlans,\n    ITask,\n    ITaskAddResult,\n    ITasks,\n    Plan,\n    Planner,\n    Plans,\n    Task,\n    Tasks,\n} from \"./types\";\n\ndeclare module \"../rest\" {\n    interface GraphRest {\n        readonly planner: IPlanner;\n    }\n}\n\nReflect.defineProperty(GraphRest.prototype, \"planner\", {\n    configurable: true,\n    enumerable: true,\n    get: function (this: GraphRest) {\n        return Planner(this);\n    },\n});\n","import { _GraphQueryableInstance, _GraphQueryableCollection, graphInvokableFactory } from \"../graphqueryable\";\nimport { assign } from \"@pnp/common\";\nimport { body } from \"@pnp/odata\";\nimport { Subscription as ISubscriptionType } from \"@microsoft/microsoft-graph-types\";\nimport { defaultPath, deleteable, IDeleteable, IUpdateable, updateable, getById, IGetById } from \"../decorators\";\nimport { graphPost } from \"../operations\";\n\n/**\n * Subscription\n */\n@deleteable()\n@updateable()\nexport class _Subscription extends _GraphQueryableInstance<ISubscriptionType> { }\nexport interface ISubscription extends _Subscription, IDeleteable, IUpdateable<ISubscriptionType> { }\nexport const Subscription = graphInvokableFactory<ISubscription>(_Subscription);\n\n/**\n * Subscriptions\n */\n@defaultPath(\"subscriptions\")\n@getById(Subscription)\nexport class _Subscriptions extends _GraphQueryableCollection<ISubscriptionType[]> {\n    /**\n     * Create a new Subscription.\n     * \n     * @param changeType Indicates the type of change in the subscribed resource that will raise a notification. The supported values are: created, updated, deleted.\n     * @param notificationUrl The URL of the endpoint that will receive the notifications. This URL must make use of the HTTPS protocol.\n     * @param resource Specifies the resource that will be monitored for changes. Do not include the base URL (https://graph.microsoft.com/v1.0/).\n     * @param expirationDateTime Specifies the date and time when the webhook subscription expires. The time is in UTC.\n     * @param props A plain object collection of additional properties you want to set on the new subscription\n     * \n     */\n    public async add(changeType: string, notificationUrl: string, resource: string, expirationDateTime: string, props: ISubscriptionType = {}): Promise<ISubAddResult> {\n\n        const postBody = assign({\n            changeType,\n            expirationDateTime,\n            notificationUrl,\n            resource,\n        }, props);\n\n        const data = await graphPost(this, body(postBody));\n\n        return {\n            data,\n            subscription: (<any>this).getById(data.id),\n        };\n    }\n}\nexport interface ISubscriptions extends _Subscriptions, IGetById<ISubscription> {}\nexport const Subscriptions = graphInvokableFactory<ISubscriptions>(_Subscriptions);\n\n/**\n * ISubAddResult\n */\nexport interface ISubAddResult {\n    data: ISubscriptionType;\n    subscription: ISubscription;\n}\n","import { GraphRest } from \"../rest\";\nimport { Subscriptions, ISubscriptions } from \"./types\";\n\nexport {\n    ISubscription,\n    ISubAddResult,\n    ISubscriptions,\n    Subscription,\n    Subscriptions,\n} from \"./types\";\n\ndeclare module \"../rest\" {\n    interface GraphRest {\n        readonly subscriptions: ISubscriptions;\n    }\n}\n\nReflect.defineProperty(GraphRest.prototype, \"subscriptions\", {\n    configurable: true,\n    enumerable: true,\n    get: function (this: GraphRest) {\n        return Subscriptions(this);\n    },\n});\n","import { _GraphQueryableInstance, _GraphQueryableCollection, graphInvokableFactory } from \"../graphqueryable\";\nimport { body } from \"@pnp/odata\";\nimport { assign } from \"@pnp/common\";\nimport { updateable, IUpdateable, getById, IGetById, deleteable, IDeleteable } from \"../decorators\";\nimport { graphPost } from \"../operations\";\nimport { defaultPath } from \"../decorators\";\n\n/**\n * Represents a Microsoft Team\n */\n@defaultPath(\"team\")\n@updateable()\nexport class _Team extends _GraphQueryableInstance<ITeamProperties> {\n\n    public get channels(): IChannels {\n        return Channels(this);\n    }\n\n    /**\n     * Archives this Team\n     * \n     * @param shouldSetSpoSiteReadOnlyForMembers Should members have Read-only in associated Team Site\n     */\n    public archive(shouldSetSpoSiteReadOnlyForMembers = false): Promise<void> {\n        return graphPost(this.clone(Team, \"archive\"), body({ shouldSetSpoSiteReadOnlyForMembers }));\n    }\n\n    /**\n    * Unarchives this Team\n    */\n    public unarchive(): Promise<void> {\n        return graphPost(this.clone(Team, \"unarchive\"));\n    }\n\n    /**\n     * Clones this Team\n     * @param name The name of the new Group\n     * @param description Optional description of the group\n     * @param partsToClone Parts to clone ex: apps,tabs,settings,channels,members\n     * @param visibility Set visibility to public or private \n     */\n    public cloneTeam(name: string, description = \"\", partsToClone = \"apps,tabs,settings,channels,members\", visibility: \"public\" | \"private\" = \"private\"): Promise<void> {\n\n        const postBody = {\n            description: description ? description : \"\",\n            displayName: name,\n            mailNickname: name,\n            partsToClone,\n            visibility,\n        };\n\n        // TODO:: we need to get the Location header from the response and return an operation\n        // instance that folks can query to see if/when this is complete\n        // it could just have a single method getResult (or whatever) that returns a promise that\n        // resolves when the operation is successful or rejects when it is not\n        return graphPost(this.clone(Team, \"clone\"), body(postBody));\n    }\n}\nexport interface ITeam extends _Team, IUpdateable<ITeamProperties> { }\nexport const Team = graphInvokableFactory<ITeam>(_Team);\n\n/**\n * Teams\n */\n@defaultPath(\"teams\")\n@getById(Team)\nexport class _Teams extends _GraphQueryableCollection<ITeamProperties[]> { }\nexport interface ITeams extends _Teams, IGetById<ITeam> { }\nexport const Teams = graphInvokableFactory<ITeams>(_Teams);\n\n/**\n * Channel\n */\nexport class _Channel extends _GraphQueryableInstance {\n    public get tabs(): ITabs {\n        return Tabs(this);\n    }\n}\nexport interface IChannel extends _Channel {}\nexport const Channel = graphInvokableFactory<IChannel>(_Channel);\n\n/**\n * Channels\n */\n@defaultPath(\"channels\")\n@getById(Channel)\nexport class _Channels extends _GraphQueryableCollection {\n\n    /**\n     * Creates a new Channel in the Team\n     * @param displayName The display name of the new channel\n     * @param description Optional description of the channel\n     * \n     */\n    public async add(displayName: string, description = \"\"): Promise<IChannelCreateResult> {\n\n        const postBody = {\n            description,\n            displayName,\n        };\n\n        const data = await graphPost(this, body(postBody));\n\n        return {\n            channel: (<any>this).getById(data.id),\n            data,\n        };\n    }\n}\nexport interface IChannels extends _Channels, IGetById<IChannel> { }\nexport const Channels = graphInvokableFactory<IChannels>(_Channels);\n\n/**\n * Tab\n */\n@defaultPath(\"tab\")\n@updateable()\n@deleteable()\nexport class _Tab extends _GraphQueryableInstance { }\nexport interface ITab extends _Tab, IUpdateable, IDeleteable { }\nexport const Tab = graphInvokableFactory<ITab>(_Tab);\n\n/**\n * Tabs\n */\n@defaultPath(\"tabs\")\n@getById(Tab)\nexport class _Tabs extends _GraphQueryableCollection {\n\n    /**\n     * Adds a tab to the cahnnel\n     * @param name The name of the new Tab\n     * @param appUrl The url to an app ex: https://graph.microsoft.com/beta/appCatalogs/teamsApps/12345678-9abc-def0-123456789a\n     * @param tabsConfiguration visit https://developer.microsoft.com/en-us/graph/docs/api-reference/v1.0/api/teamstab_add for reference\n     */\n    public async add(name: string, appUrl: string, properties: ITabsConfiguration): Promise<ITabCreateResult> {\n\n        const postBody = assign({\n            displayName: name,\n            \"teamsApp@odata.bind\": appUrl,\n        }, properties);\n\n        const data = await graphPost(this, body(postBody));\n\n        return {\n            data,\n            tab: (<any>this).getById(data.id),\n        };\n    }\n}\nexport interface ITabs extends _Tabs, IGetById<ITab> { }\nexport const Tabs = graphInvokableFactory<ITabs>(_Tabs);\n\nexport interface ITeamUpdateResult {\n    data: any;\n    team: ITeam;\n}\n\nexport interface IChannelCreateResult {\n    data: any;\n    channel: IChannel;\n}\n\nexport interface ITabCreateResult {\n    data: any;\n    tab: ITab;\n}\n\nexport interface ITabUpdateResult {\n    data: any;\n    tab: ITab;\n}\n\n/**\n * Defines the properties for a Team\n * \n * TODO:: remove this once typings are present in graph types package\n */\nexport interface ITeamProperties {\n\n    memberSettings?: {\n        \"allowCreateUpdateChannels\"?: boolean;\n        \"allowDeleteChannels\"?: boolean;\n        \"allowAddRemoveApps\"?: boolean;\n        \"allowCreateUpdateRemoveTabs\"?: boolean;\n        \"allowCreateUpdateRemoveConnectors\"?: boolean;\n    };\n\n    guestSettings?: {\n        \"allowCreateUpdateChannels\"?: boolean;\n        \"allowDeleteChannels\"?: boolean;\n    };\n\n    messagingSettings?: {\n        \"allowUserEditMessages\"?: boolean;\n        \"allowUserDeleteMessages\"?: boolean;\n        \"allowOwnerDeleteMessages\"?: boolean;\n        \"allowTeamMentions\"?: boolean;\n        \"allowChannelMentions\"?: boolean;\n    };\n\n    funSettings?: {\n        \"allowGiphy\"?: boolean;\n        \"giphyContentRating\"?: \"strict\" | string,\n        \"allowStickersAndMemes\"?: boolean;\n        \"allowCustomMemes\"?: boolean;\n    };\n}\n\nexport interface ITabsConfiguration {\n    configuration: {\n        \"entityId\": string;\n        \"contentUrl\": string;\n        \"websiteUrl\": string;\n        \"removeUrl\": string;\n    };\n}\n\nexport interface ITeamCreateResult {\n    data: any;\n    team: ITeam;\n}\n","import { addProp } from \"@pnp/odata\";\nimport { _User } from \"../users/types\";\nimport { ITeams, Teams } from \"./types\";\n\ndeclare module \"../users/types\" {\n    interface _User {\n        readonly joinedTeams: ITeams;\n    }\n    interface IUser {\n        readonly joinedTeams: ITeams;\n    }\n}\n\naddProp(_User, \"joinedTeams\", Teams, \"joinedTeams\");\n","import { addProp, body } from \"@pnp/odata\";\nimport { GraphRest } from \"../rest\";\nimport { _Group, Group } from \"../groups/types\";\nimport { ITeamCreateResult, ITeamProperties, ITeam, Team, ITeams, Teams } from \"./types\";\nimport { graphPut } from \"../operations\";\n\nimport \"./users\";\n\nexport {\n    Channel,\n    Channels,\n    IChannel,\n    IChannelCreateResult,\n    IChannels,\n    ITab,\n    ITabCreateResult,\n    ITabUpdateResult,\n    ITabs,\n    ITabsConfiguration,\n    ITeam,\n    ITeamCreateResult,\n    ITeamProperties,\n    ITeamUpdateResult,\n    ITeams,\n    Tab,\n    Tabs,\n    Team,\n    Teams,\n} from \"./types\";\n\ndeclare module \"../groups/types\" {\n    interface _Group {\n        readonly team: ITeam;\n        createTeam(properties: ITeamProperties): Promise<ITeamCreateResult>;\n    }\n    interface IGroup {\n        readonly team: ITeam;\n        createTeam(properties: ITeamProperties): Promise<ITeamCreateResult>;\n    }\n}\n\naddProp(_Group, \"team\", Team);\n\n_Group.prototype.createTeam = async function (this: _Group, props: ITeamProperties): Promise<ITeamCreateResult> {\n\n    const data = await graphPut(this.clone(Group, \"team\"), body(props));\n\n    return {\n        data,\n        team: this.team,\n    };\n};\n\ndeclare module \"../rest\" {\n    interface GraphRest {\n        readonly teams: ITeams;\n    }\n}\n\nReflect.defineProperty(GraphRest.prototype, \"teams\", {\n    configurable: true,\n    enumerable: true,\n    get: function (this: GraphRest) {\n        return Teams(this);\n    },\n});\n","import { GraphRest } from \"../rest\";\nimport { IUser, User, IUsers, Users } from \"./types\";\n\nexport {\n    IUser,\n    IUsers,\n    User,\n    Users,\n    IPeople,\n    People,\n} from \"./types\";\n\ndeclare module \"../rest\" {\n    interface GraphRest {\n        readonly me: IUser;\n        readonly users: IUsers;\n    }\n}\n\nReflect.defineProperty(GraphRest.prototype, \"me\", {\n    configurable: true,\n    enumerable: true,\n    get: function (this: GraphRest) {\n        return User(this, \"me\");\n    },\n});\n\nReflect.defineProperty(GraphRest.prototype, \"users\", {\n    configurable: true,\n    enumerable: true,\n    get: function (this: GraphRest) {\n        return Users(this);\n    },\n});\n","import { Logger } from \"@pnp/logging\";\nimport {\n    PnPClientStorage,\n    dateAdd,\n    combine,\n    getCtxCallback,\n    getRandomString,\n    getGUID,\n    isFunc,\n    objectDefinedNotNull,\n    isArray,\n    assign,\n    isUrlAbsolute,\n    stringIsNullOrEmpty,\n    sanitizeGuid,\n} from \"@pnp/common\";\nimport { Settings } from \"@pnp/config-store\";\nimport { sp as _sp, SPRestAddIn } from \"@pnp/sp-addinhelpers\";\nimport { setup as _setup, PnPConfiguration } from \"./pnplibconfig\";\nimport { graph as _graph } from \"@pnp/graph\";\n\n// trigger attachment of all functionality to mimic the previous pnpjs impl\nimport \"@pnp/sp/presets/all\";\nimport \"@pnp/graph/presets/all\";\n\n/**\n * Re-export everything from the dependencies to match the previous pattern\n */\nexport * from \"@pnp/common\";\nexport * from \"@pnp/logging\";\nexport * from \"@pnp/config-store\";\nexport * from \"@pnp/odata\";\nexport * from \"./sp-ns\";\nexport * from \"./graph-ns\";\n\n/**\n * Utility methods\n */\nexport const util = {\n    assign,\n    combine,\n    dateAdd,\n    getCtxCallback,\n    getGUID,\n    getRandomString,\n    isArray,\n    isFunc,\n    isUrlAbsolute,\n    objectDefinedNotNull,\n    sanitizeGuid,\n    stringIsNullOrEmpty,\n};\n\n/**\n * Provides access to the SharePoint REST interface\n */\nexport const sp = <SPRestAddIn>_sp;\n\n/**\n * Provides access to the SharePoint REST interface\n */\nexport const graph = _graph;\n\n/**\n * Provides access to local and session storage\n */\nexport const storage: PnPClientStorage = new PnPClientStorage();\n\n/**\n * Global configuration instance to which providers can be added\n */\nexport const config = new Settings();\n\n/**\n * Global logging instance to which subscribers can be registered and messages written\n */\nexport const log = Logger;\n\n/**\n * Allows for the configuration of the library\n */\nexport const setup: (config: PnPConfiguration) => void = _setup;\n\n// creating this class instead of directly assigning to default fixes a previous issue\nconst Def = {\n    /**\n     * Global configuration instance to which providers can be added\n     */\n    config,\n    /**\n     * Provides access to the Graph REST interface\n     */\n    graph,\n    /**\n     * Global logging instance to which subscribers can be registered and messages written\n     */\n    log,\n    /**\n     * Provides access global setup method\n     */\n    setup,\n    /**\n     * Provides access to the SharePoint REST interface\n     */\n    sp,\n    /**\n     * Provides access to local and session storage\n     */\n    storage,\n    /**\n     * Utility methods\n     */\n    util,\n};\n\n/**\n * Enables use of the import pnp from syntax\n */\nexport default Def;\n","import { ILibraryConfiguration, RuntimeConfig } from \"@pnp/common\";\nimport { SPConfigurationPart } from \"@pnp/sp\";\n\nexport interface PnPConfiguration extends ILibraryConfiguration, SPConfigurationPart { }\n\nexport function setup(config: PnPConfiguration): void {\n    RuntimeConfig.assign(config);\n}\n"],"sourceRoot":""}