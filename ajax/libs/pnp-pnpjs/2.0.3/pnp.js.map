{"version":3,"sources":["webpack://pnp/webpack/universalModuleDefinition","webpack://pnp/webpack/bootstrap","webpack://pnp/./node_modules/tslib/tslib.es6.js","webpack://pnp/./packages/common/collections.ts","webpack://pnp/./packages/common/libconfig.ts","webpack://pnp/./packages/common/storage.ts","webpack://pnp/./packages/common/index.ts","webpack://pnp/./packages/common/util.ts","webpack://pnp/./packages/sp/splibconfig.ts","webpack://pnp/./packages/sp/utils/toabsoluteurl.ts","webpack://pnp/./packages/common/net.ts","webpack://pnp/(webpack)/buildin/global.js","webpack://pnp/./node_modules/adal-angular/dist/adal.min.js","webpack://pnp/./packages/logging/logger.ts","webpack://pnp/./packages/logging/listeners.ts","webpack://pnp/./packages/config-store/configuration.ts","webpack://pnp/./packages/config-store/providers/cachingConfigurationProvider.ts","webpack://pnp/./packages/odata/batch.ts","webpack://pnp/./packages/odata/caching.ts","webpack://pnp/./packages/odata/add-prop.ts","webpack://pnp/./packages/odata/invokable-extensions.ts","webpack://pnp/./packages/odata/invokable-binder.ts","webpack://pnp/./packages/odata/parsers.ts","webpack://pnp/./packages/odata/queryable.ts","webpack://pnp/./packages/odata/pipeline.ts","webpack://pnp/./packages/odata/pipeline-binder.ts","webpack://pnp/./packages/odata/request-builders.ts","webpack://pnp/./packages/sp/utils/metadata.ts","webpack://pnp/./packages/sp/utils/extractweburl.ts","webpack://pnp/./packages/sp/telemetry.ts","webpack://pnp/./packages/sp/sphttpclient.ts","webpack://pnp/./packages/sp/operations.ts","webpack://pnp/./packages/sp/sharepointqueryable.ts","webpack://pnp/./packages/sp/decorators.ts","webpack://pnp/./packages/sp/odata.ts","webpack://pnp/./packages/sp/batch.ts","webpack://pnp/./packages/sp/rest.ts","webpack://pnp/./packages/sp/utils/escapeQueryStrValue.ts","webpack://pnp/./packages/sp/sites/types.ts","webpack://pnp/./packages/sp/sites/index.ts","webpack://pnp/./packages/sp/webs/types.ts","webpack://pnp/./packages/sp/utils/toResourcePath.ts","webpack://pnp/./packages/sp/lists/types.ts","webpack://pnp/./packages/sp/lists/web.ts","webpack://pnp/./packages/sp/items/types.ts","webpack://pnp/./packages/sp/items/list.ts","webpack://pnp/./packages/config-store/providers/spListConfigurationProvider.ts","webpack://pnp/./packages/sp-addinhelpers/node_modules/tslib/tslib.es6.js","webpack://pnp/./packages/sp-addinhelpers/sprequestexecutorclient.ts","webpack://pnp/./packages/sp/types.ts","webpack://pnp/./packages/sp/utils/objectToSPKeyValueCollection.ts","webpack://pnp/./packages/sp/utils/file-names.ts","webpack://pnp/./packages/sp/webs/index.ts","webpack://pnp/./packages/sp-addinhelpers/sprestaddin.ts","webpack://pnp/./packages/graph/types.ts","webpack://pnp/./packages/adaljsclient/adalclient.ts","webpack://pnp/./packages/graph/graphlibconfig.ts","webpack://pnp/./packages/sp/files/types.ts","webpack://pnp/./packages/graph/graphhttpclient.ts","webpack://pnp/./packages/graph/operations.ts","webpack://pnp/./packages/graph/graphqueryable.ts","webpack://pnp/./packages/graph/batch.ts","webpack://pnp/./packages/graph/rest.ts","webpack://pnp/./packages/sp/appcatalog/types.ts","webpack://pnp/./packages/sp/appcatalog/web.ts","webpack://pnp/./packages/sp/appcatalog/index.ts","webpack://pnp/./packages/sp/attachments/types.ts","webpack://pnp/./packages/sp/clientside-pages/funcs.ts","webpack://pnp/./packages/sp/attachments/item.ts","webpack://pnp/./packages/sp/files/web.ts","webpack://pnp/./packages/sp/comments/types.ts","webpack://pnp/./packages/sp/clientside-pages/types.ts","webpack://pnp/./packages/sp/comments/item.ts","webpack://pnp/./packages/sp/clientside-pages/web.ts","webpack://pnp/./packages/sp/content-types/types.ts","webpack://pnp/./packages/sp/content-types/web.ts","webpack://pnp/./packages/sp/content-types/item.ts","webpack://pnp/./packages/sp/content-types/list.ts","webpack://pnp/./packages/sp/features/types.ts","webpack://pnp/./packages/sp/features/site.ts","webpack://pnp/./packages/sp/features/web.ts","webpack://pnp/./packages/sp/fields/types.ts","webpack://pnp/./packages/sp/fields/web.ts","webpack://pnp/./packages/sp/fields/list.ts","webpack://pnp/./packages/sp/folders/types.ts","webpack://pnp/./packages/sp/files/folder.ts","webpack://pnp/./packages/sp/files/item.ts","webpack://pnp/./packages/sp/folders/item.ts","webpack://pnp/./packages/sp/folders/list.ts","webpack://pnp/./packages/sp/folders/web.ts","webpack://pnp/./packages/sp/forms/types.ts","webpack://pnp/./packages/sp/forms/list.ts","webpack://pnp/./packages/sp/hubsites/types.ts","webpack://pnp/./packages/sp/hubsites/site.ts","webpack://pnp/./packages/sp/hubsites/web.ts","webpack://pnp/./packages/sp/hubsites/index.ts","webpack://pnp/./packages/sp/navigation/types.ts","webpack://pnp/./packages/sp/navigation/web.ts","webpack://pnp/./packages/sp/navigation/index.ts","webpack://pnp/./packages/sp/profiles/types.ts","webpack://pnp/./packages/sp/profiles/index.ts","webpack://pnp/./packages/sp/regional-settings/types.ts","webpack://pnp/./packages/sp/regional-settings/web.ts","webpack://pnp/./packages/sp/related-items/types.ts","webpack://pnp/./packages/sp/search/query.ts","webpack://pnp/./packages/sp/search/types.ts","webpack://pnp/./packages/sp/search/suggest.ts","webpack://pnp/./packages/sp/search/index.ts","webpack://pnp/./packages/sp/site-users/types.ts","webpack://pnp/./packages/sp/security/types.ts","webpack://pnp/./packages/sp/sharing/types.ts","webpack://pnp/./packages/sp/site-groups/types.ts","webpack://pnp/./packages/sp/security/funcs.ts","webpack://pnp/./packages/sp/sharing/funcs.ts","webpack://pnp/./packages/sp/security/item.ts","webpack://pnp/./packages/sp/security/list.ts","webpack://pnp/./packages/sp/security/web.ts","webpack://pnp/./packages/sp/sharing/file.ts","webpack://pnp/./packages/sp/sharing/folder.ts","webpack://pnp/./packages/sp/sharing/item.ts","webpack://pnp/./packages/sp/sharing/web.ts","webpack://pnp/./packages/sp/site-designs/types.ts","webpack://pnp/./packages/sp/site-designs/web.ts","webpack://pnp/./packages/sp/site-designs/index.ts","webpack://pnp/./packages/sp/site-groups/web.ts","webpack://pnp/./packages/sp/site-scripts/types.ts","webpack://pnp/./packages/sp/site-scripts/web.ts","webpack://pnp/./packages/sp/site-scripts/list.ts","webpack://pnp/./packages/sp/site-scripts/index.ts","webpack://pnp/./packages/sp/site-users/web.ts","webpack://pnp/./packages/sp/social/types.ts","webpack://pnp/./packages/sp/social/index.ts","webpack://pnp/./packages/sp/sputilities/types.ts","webpack://pnp/./packages/sp/sputilities/index.ts","webpack://pnp/./packages/sp/subscriptions/types.ts","webpack://pnp/./packages/sp/subscriptions/list.ts","webpack://pnp/./packages/sp/user-custom-actions/types.ts","webpack://pnp/./packages/sp/user-custom-actions/list.ts","webpack://pnp/./packages/sp/user-custom-actions/web.ts","webpack://pnp/./packages/sp/user-custom-actions/site.ts","webpack://pnp/./packages/sp/views/types.ts","webpack://pnp/./packages/sp/views/list.ts","webpack://pnp/./packages/sp/webparts/types.ts","webpack://pnp/./packages/sp/webparts/file.ts","webpack://pnp/./packages/sp/presets/all.ts","webpack://pnp/./packages/graph/decorators.ts","webpack://pnp/./packages/graph/conversations/types.ts","webpack://pnp/./packages/graph/attachments/types.ts","webpack://pnp/./packages/graph/utils/type.ts","webpack://pnp/./packages/graph/attachments/conversations.ts","webpack://pnp/./packages/graph/directory-objects/types.ts","webpack://pnp/./packages/graph/groups/types.ts","webpack://pnp/./packages/graph/calendars/types.ts","webpack://pnp/./packages/graph/calendars/groups.ts","webpack://pnp/./packages/graph/users/types.ts","webpack://pnp/./packages/graph/contacts/types.ts","webpack://pnp/./packages/graph/contacts/users.ts","webpack://pnp/./packages/graph/conversations/groups.ts","webpack://pnp/./packages/graph/directory-objects/index.ts","webpack://pnp/./packages/graph/groups/index.ts","webpack://pnp/./packages/graph/members/types.ts","webpack://pnp/./packages/graph/members/groups.ts","webpack://pnp/./packages/graph/messages/types.ts","webpack://pnp/./packages/graph/messages/users.ts","webpack://pnp/./packages/graph/onedrive/types.ts","webpack://pnp/./packages/graph/onedrive/users.ts","webpack://pnp/./packages/graph/onenote/types.ts","webpack://pnp/./packages/graph/onenote/users.ts","webpack://pnp/./packages/graph/photos/types.ts","webpack://pnp/./packages/graph/photos/groups.ts","webpack://pnp/./packages/graph/planner/types.ts","webpack://pnp/./packages/graph/planner/groups.ts","webpack://pnp/./packages/graph/planner/users.ts","webpack://pnp/./packages/graph/planner/index.ts","webpack://pnp/./packages/graph/subscriptions/types.ts","webpack://pnp/./packages/graph/subscriptions/index.ts","webpack://pnp/./packages/graph/teams/types.ts","webpack://pnp/./packages/graph/teams/users.ts","webpack://pnp/./packages/graph/teams/index.ts","webpack://pnp/./packages/graph/users/index.ts","webpack://pnp/./packages/pnpjs/index.ts","webpack://pnp/./packages/pnpjs/pnplibconfig.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","extendStatics","b","setPrototypeOf","__proto__","Array","__extends","__","this","constructor","__decorate","decorators","target","desc","arguments","length","getOwnPropertyDescriptor","Reflect","decorate","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__generator","body","f","y","g","_","label","sent","trys","ops","verb","iterator","v","op","TypeError","pop","push","__values","__read","ar","error","__spread","concat","objectEntries","entries","keys","map","k","objectToMap","Map","mergeMaps","maps","forEach","set","_v","assign","config","console","warn","RuntimeConfig","store","defaultTimeoutMinutes","enabled","test","enableCacheExpiration","cacheExpirationHandler","PnPClientStorageWrapper","MemoryStorage","getItem","persistable","JSON","parse","Date","expiration","delete","put","expire","setItem","createPersistable","removeItem","getOrPut","deleteExpired","undefined","defaultTimeout","defaultCachingTimeoutSeconds","pnp","setTimeout","cacheExpirationIntervalMilliseconds","catch","_store","size","clear","index","from","data","_local","_session","localStorage","sessionStorage","getCtxCallback","context","method","params","dateAdd","date","interval","units","ret","toString","toLowerCase","setFullYear","getFullYear","setMonth","getMonth","setDate","getDate","setTime","getTime","combine","paths","filter","path","stringIsNullOrEmpty","replace","join","getRandomString","chars","text","charAt","Math","floor","random","getGUID","now","isFunc","objectDefinedNotNull","obj","isArray","array","source","noOverwrite","check","getOwnPropertyNames","reduce","isUrlAbsolute","url","sanitizeGuid","guid","matches","exec","jsS","stringify","hOP","getHashCode","hash","charCodeAt","setup","SPRuntimeConfig","spPart","headers","baseUrl","spfxContext","pageContext","web","absoluteUrl","fetchClientFactory","toAbsoluteUrl","candidateUrl","global","_spPageContextInfo","webAbsoluteUrl","webServerRelativeUrl","location","indexOf","substr","mergeHeaders","Request","append","mergeOptions","getADALResource","u","URL","protocol","hostname","fetch","options","_token","token","Headers","FetchClient","getToken","resource","aadTokenProviderFactory","getTokenProvider","BearerTokenFetchClient","Function","AuthenticationContext","a","REQUEST_TYPE","LOGIN","RENEW_TOKEN","UNKNOWN","RESPONSE_TYPE","ID_TOKEN_TOKEN","TOKEN","CONSTANTS","ACCESS_TOKEN","EXPIRES_IN","ID_TOKEN","ERROR_DESCRIPTION","SESSION_STATE","ERROR","STORAGE","TOKEN_KEYS","ACCESS_TOKEN_KEY","EXPIRATION_KEY","STATE_LOGIN","STATE_RENEW","NONCE_IDTOKEN","USERNAME","IDTOKEN","LOGIN_REQUEST","LOGIN_ERROR","RENEW_STATUS","ANGULAR_LOGIN_REQUEST","RESOURCE_DELIMETER","CACHE_DELIMETER","LOADFRAME_TIMEOUT","TOKEN_RENEW_STATUS_CANCELED","TOKEN_RENEW_STATUS_COMPLETED","TOKEN_RENEW_STATUS_IN_PROGRESS","LOGGING_LEVEL","WARN","INFO","VERBOSE","LEVEL_STRING_MAP","0","1","2","3","POPUP_WIDTH","POPUP_HEIGHT","_singletonInstance","instance","callback","popUp","isAngular","_user","_activeRenewals","_loginInProgress","_acquireTokenInProgress","_renewStates","_callBackMappedToRenewStates","_callBacksMappedToRenewStates","_openedWindows","_requestType","_adalInstance","displayCall","Error","clientId","_cloneConfig","navigateToLoginRequestUrl","loginResource","redirectUri","href","split","postLogoutRedirectUri","anonymousEndpoints","loadFrameTimeout","Logging","piiLoggingEnabled","level","log","login","info","_guid","state","_idTokenNonce","_getItem","_saveItem","verbose","_getNavigateUrl","encodeURIComponent","registerCallback","_loginPopup","promptUser","_openPopup","screenLeft","screenX","screenTop","screenY","innerWidth","document","documentElement","clientWidth","h","innerHeight","clientHeight","j","open","focus","message","_handlePopupError","setInterval","closed","_broadcast","clearInterval","encodeURI","handleWindowCallback","close","bubbles","cancelable","detail","createEvent","initCustomEvent","CustomEvent","Event","dispatchEvent","loginInProgress","_hasResource","_isEmpty","getCachedToken","expireOffsetSeconds","_now","getCachedUser","_createUser","_renewToken","_addAdalFrame","_urlRemoveQueryStringParameter","_addHintParameters","verbosePii","src","_loadFrameTimeout","_renewIdToken","_urlContainsQueryStringParameter","RegExp","_loadFrame","acquireToken","extraQueryParameter","acquireTokenPopup","acquireTokenRedirect","infoPii","clearCache","clearCacheForResource","logOut","logOutUri","tenant","getUser","profile","sid","upn","_extractIdToken","aud","userName","email","_getHash","substring","isCallback","_deserialize","getLoginError","getRequestInfo","valid","parameters","stateMatch","stateResponse","requestType","_matchState","parent","_matchNonce","nonce","_getResourceFromState","saveTokenFromHash","error_description","_expiresIn","exp","getResourceForEndpoint","endpoints","_getHostFromUri","String","opener","_serialize","_addLibMetadata","_decodeJwt","JWSPayload","_base64DecodeStringUrlSafe","atob","decodeURIComponent","escape","_decode","fromCharCode","header","JWSSig","_convertUrlSafeToRegularBase64EncodedString","slice","correlationId","_decimalToHex","crypto","msCrypto","getRandomValues","Uint8Array","parseInt","round","getElementById","createElement","opera","navigator","userAgent","setAttribute","style","visibility","position","width","height","borderWidth","getElementsByTagName","appendChild","insertAdjacentHTML","frames","cacheLocation","_supportsLocalStorage","_supportsSessionStorage","_libVersion","toUTCString","stack","errorPii","warnPii","inject","LogLevel","Logger","activeLogLevel","_instance","LoggerImpl","subscribe","listeners","listener","clearSubscribers","count","write","writeJSON","json","entry","err","subscribers","subscriber","msg","format","_settings","add","addJSON","load","provider","getConfiguration","getJSON","wrappedProvider","cacheKey","cacheStore","selectPnPCache","getWrappedProvider","providedConfig","pnpCache","local","session","_batchId","_reqs","_deps","_rDeps","_index","sort","info1","info2","track","batchee","batch","batchIndex","id","requestId","toUpperCase","parser","addDependency","resolver","addResolveBatchDependency","execute","all","executeImpl","storeName","defaultCachingStore","CachingOptions","storage","cacheOptions","response","cacheData","addProp","configurable","_enableExtensions","globaExtensions","ObjExtensionsSym","extendGlobal","extendCol","extendObj","extensions","has","extendFactory","clearGlobalExtensions","disableExtensions","enableExtensions","applyFactoryExtensions","args","extensionOrDefault","or","extension","rest","invoker","invokableFactory","defaultAction","as","ags","ie11","Proxy","_thisArg","argArray","receiver","handleError","parseImpl","parseFloat","status","txt","parseODataJSON","ok","init","results","blob","arrayBuffer","buffer","statusText","isHttpRequestError","clone","HttpRequestError","cloneQueryableData","parsed","batchDependency","cachingOptions","clientFactory","dataSeed","_data","cloneParentWasCaching","parentUrl","query","useCaching","toUrl","pathPart","configure","configureFrom","usingCaching","globalCacheDisable","usingParser","withPipeline","pipeline","pipes","inBatch","hasBatch","addBatchDependency","cloneTo","settings","includeBatch","cloneParentCacheOptions","setResult","hasResult","shift","pipe","promise","ctx","returnResult","isBatched","requestPipelineMethod","alwaysRun","propertyKey","descriptor","logStart","caching","hydrate","CachingParserWrapper","send","batchId","client","opts","logEnd","getDefaultPipeline","pipelineBinder","defaultPipelineBinder","previous","metadata","type","extractWebUrl","tag","originalMethod","getClientTag","deleteFromCollection","methodName","isTagged","_impl","_digestCache","webUrl","cachedDigest","digests","fetchRaw","cache","credentials","resp","GetContextWebInformation","newCachedDigest","FormDigestTimeoutSeconds","FormDigestValue","getDigestFactory","clientTag","digest","rawHeaders","retry","setRetry","delay","attempts","retryCount","post","patch","spClientBinder","operation","toUrlAndQuery","spGet","_forceCaching","spPost","spDelete","spPatch","spPostDelete","spPostDeleteETag","eTag","spInvokableFactory","lastIndexOf","aliasedParams","match","labelName","char","select","selects","expand","expands","additionalPath","getParent","SharePointQueryable","orderBy","ascending","skip","top","SharePointQueryableCollection","_update","mapper","props","SharePointQueryableInstance","deleteable","deleteableWithETag","defaultPath","odataUrlFrom","candidate","parts","__metadata","uri","editLink","spODataEntity","spODataEntityArray","ParseResponse","responses","statusRegExp","lines","line","trim","Response","requests","absoluteRequestUrl","batchBody","currentChangeSetId","reqInfo","castHeaders","batchOptions","SPBatch","request","_options","_baseUrl","SPRest","escapeQueryStrValue","Web","getRootWeb","rootWeb","Url","getContextInfo","q","Site","SupportedSchemaVersions","createBatch","site","siteId","Id","getDocumentLibraries","absoluteWebUrl","GetDocumentLibraries","getWebUrlFromPageUrl","absolutePageUrl","GetWebUrlFromPageUrl","getChanges","postBody","openWebById","webId","createCommunicationSite","title","lcid","shareByEmailEnabled","description","classification","siteDesignId","hubSiteId","owner","Classification","Description","HubSiteId","Lcid","Owner","ShareByEmailEnabled","SiteDesignId","Title","WebTemplate","WebTemplateExtensionId","methodUrl","createModernTeamSite","displayName","alias","isPublic","owners","optionalParams","CreationOptions","Owners","_Site","template","language","inheritPermissions","Language","UseSamePermissionsAsParentSite","Webs","_Webs","getParentWeb","ParentWeb","getSubwebsFilteredForCurrentUser","nWebTemplateFilter","nConfigurationFilter","update","properties","applyTheme","colorPaletteUrl","fontSchemeUrl","backgroundImageUrl","shareGenerated","applyWebTemplate","availableWebTemplates","includeCrossLanugage","mapToIcon","filename","progId","getStorageEntity","setStorageEntity","comments","removeStorageEntity","_Web","toResourcePath","DecodedUrl","RenderListDataOptions","ControlMode","getById","List","getByTitle","enableContentTypes","additionalSettings","addSettings","list","ensure","addOrUpdateSettings","ContentTypesEnabled","created","ensureSiteAssetsLibrary","Lists","ensureSitePagesLibrary","_Lists","getItemsByCAMLQuery","getListItemChangesSinceToken","recycle","Recycle","renderListData","viewXml","RenderListData","renderListDataAsStream","overrideParameters","queryParams","RenderOptions","renderListFormData","itemId","formId","RenderListFormData","reserveListItemId","ReserveListItemId","getListItemEntityTypeFullName","ListItemEntityTypeFullName","addValidateUpdateItemUsingPath","formValues","decodedUrl","bNewDocumentUpdate","checkInComment","additionalProps","addProps","FolderPath","leafName","LeafName","objectType","UnderlyingObjectType","listItemCreateInfo","res","AddValidateUpdateItemUsingPath","getList","listRelativeUrl","getCatalog","Item","getItemByStringId","stringId","reverse","getPaged","getAll","requestSize","acceptHeader","items","Items","itemsCollector","gatherer","last","hasNext","getNext","listItemEntityTypeFullName","removeDependency","ensureListItemEntityTypeName","listItemEntityType","item","candidatelistItemEntityTypeFullName","_Items","ItemVersions","poster","getWopiFrameUrl","action","GetWOPIFrameUrl","validateUpdateListItem","versionId","ItemVersion","_ItemVersions","nextUrl","_parent","__next","listTitle","keyFieldName","valueFieldName","lists","asCaching","convertToResponse","spResponse","responseHeaders","statusCode","SP","RequestExecutor","temp","addinWebUrl","executor","requestOptions","success","binaryStringRequestBody","executeAsync","PrincipalType","PrincipalSource","PageType","objectToSPKeyValueCollection","Key","Value","ValueType","InvalidFileFolderNameCharsOnlineRegex","InvalidFileFolderNameCharsOnPremiseRegex","containsInvalidFileFolderChars","input","onPremise","stripInvalidFileFolderChars","replacer","crossDomainSite","addInWebUrl","hostWebUrl","_cdImpl","crossDomainWeb","urlPart","endpoint","GraphEndpoints","Beta","V1","regex","replaces","_displayCallback","_loginPromise","fromSPFxContext","ensureAuthContext","AdalClient","_authContext","tok","popupWindow","pollTimer","CheckinType","MoveOperations","TemplateFileType","GraphRuntimeConfig","graphPart","retryContext","graphClientBinder","graphGet","graphPost","graphDelete","graphPatch","graphPut","graphInvokableFactory","setEndpoint","num","skipToken","GraphQueryableCollection","search","GraphQueryableInstance","batchUrl","maxRequests","makeUrlRelative","formatRequests","requestFragment","parseResponse","graphResponse","parsedResponses","fill","responseId","nextLink","requestsChunk","splice","batchRequest","GraphBatch","parsedResponse","chain","graph","getByName","File","content","shouldOverWrite","Files","file","addUsingPath","Overwrite","AutoCheckoutOnInvalidData","XorHash","addChunked","progress","chunkSize","setContentChunked","addTemplateFile","fileUrl","templateFileType","_Files","Versions","approve","comment","cancelUpload","uploadId","checkin","checkinType","Major","checkout","copyTo","copyByPath","destUrl","KeepBoth","srcUrl","webBaseUrl","hostUrl","destPath","ResetAuthorAndCreatedOnCopy","ShouldBypassSharedLocks","srcPath","deny","moveTo","moveOperations","moveByPath","publish","undoCheckout","unpublish","getText","getBlob","getBuffer","setContent","listItemAllFields","fileSize","totalBlocks","blockNumber","currentPointer","stage","startUpload","continueUpload","finishUpload","fragment","StartUpload","fileOffset","ContinueUpload","Version","deleteAll","deleteById","recycleByID","deleteByLabel","recycleByLabel","restoreByLabel","_Versions","getAppById","App","syncSolutionToTeams","useSharePointItemId","appId","listId","listItems","AppCatalog","adder","deploy","skipFeatureDeployment","do","retract","install","uninstall","upgrade","remove","getAppCatalog","getTenantAppCatalogWeb","CorporateCatalogUrl","Attachment","Attachments","addMultiple","files","deleteMultiple","recycleMultiple","_Attachments","getParsed","getNextOrder","collection","max","order","reindex","columns","controls","getFileByServerRelativeUrl","fileRelativeUrl","getFileByServerRelativePath","getFileById","uniqueId","PromotedState","Comments","Comment","_Comments","Replies","like","unlike","_Replies","initFrom","ClientsidePage","getLikedBy","getLikedByInformation","noInit","sections","commentsDisabled","_bannerImageDirty","_pageSettings","controlType","pageSettingsSlice","isDefaultDescription","isDefaultThumbnail","_layoutPart","_ClientsidePage","getDefaultLayoutPart","fromJSON","dataVersion","instanceId","authors","layoutType","showPublishDate","showTopicHeader","textAlignment","topicHeader","serverProcessedContent","htmlStrings","searchablePlainTexts","imageSources","links","PageLayoutType","BannerImageUrl","TopicHeader","findIndex","layoutIndex","hasVerticalSection","addVerticalSection","addSection","section","sectionIndex","pageData","canvasControls","CanvasContent1","layouts","LayoutWebpartsContent","setControls","CommentsDisabled","save","origImgUrl","imgFile","r1","r2","r3","UniqueId","ParentList","bannerImageUrl","imageSource","customMetadata","IsPageCheckedOutToCurrentUser","saveBody","AuthorByline","getCanvasContent1","getLayoutWebpartsContent","updater","discardPageCheckout","promoteToNews","promoteNewsImpl","findControlById","findControl","predicate","copy","pageName","CreateClientsidePage","pageLayout","page","getControls","setBannerImage","imageSourceType","translateX","translateY","altText","initer","listData","itemData","mergeColumnToTree","part","mergePartToTree","textData","innerHTML","canvasData","column","displayMode","emphasis","getEmphasisObj","control","zoneEmphasis","VersionInfo","LastVersionCreatedBy","LastVersionCreated","positionData","sectionFactor","zoneIndex","getOrCreateSection","addColumn","addControl","ClientsidePageFromFile","pageInitData","newPage","_emphasis","_memId","_order","_layoutIndex","factor","defaultColumn","CanvasColumn","Default","_section","getControl","_column","onColumnChange","setData","ClientsideText","anchorComponentId","startsWith","controlIndex","col","addedFromPersistedData","editorType","ClientsideWebpart","fromComponentDef","definition","import","webPartData","reservedHeight","reservedWidth","setProperties","getProperties","component","componendId","preconfiguredEntries","Manifest","default","webPartId","getClientsideWebParts","addClientsidePage","layout","loadClientsidePage","addAvailableContentType","contentTypeId","ContentTypes","contentType","ContentType","group","_ContentTypes","FieldLinks","FieldLink","_FieldLinks","force","Features","featdefScope","featureId","feature","Feature","_Features","deactivate","DefinitionId","FieldTypes","DateTimeFieldFormatType","DateTimeFieldFriendlyFormatType","AddFieldOptions","CalendarType","UrlFieldFormatType","FieldUserSelectionMode","ChoiceFieldFormatType","Field","getByInternalNameOrTitle","createFieldAsXml","xml","SchemaXml","Fields","field","fieldType","addText","maxLength","FieldTypeKind","MaxLength","addCalculated","formula","dateFormat","outputType","Text","DateFormat","Formula","OutputType","addDateTime","displayFormat","calendarType","friendlyDisplayFormat","DateOnly","Gregorian","Unspecified","DateTimeCalendarType","DisplayFormat","FriendlyDisplayFormat","addNumber","minValue","maxValue","MinimumValue","MaximumValue","addCurrency","currencyLocalId","CurrencyLocaleId","addMultilineText","numberOfLines","richText","restrictedMode","appendOnly","allowHyperlink","AllowHyperlink","AppendOnly","NumberOfLines","RestrictedMode","RichText","addUrl","Hyperlink","addUser","selectionMode","SelectionMode","addLookup","lookupListId","lookupFieldName","LookupFieldName","LookupListId","addChoice","choices","fillIn","Dropdown","Choices","EditFormat","FillInChoice","addMultiChoice","addBoolean","addDependentLookupField","primaryLookupFieldId","showField","addLocation","_Fields","req","setShowInDisplayForm","show","setShowInEditForm","setShowInNewForm","Folder","Folders","folder","serverRelativeUrl","overwrite","_Folders","getShareable","shareable","getFolderByServerRelativeUrl","folderRelativeUrl","getFolderByServerRelativePath","getFolderById","Form","_Forms","Forms","HubSite","_HubSites","HubSites","getSite","SiteUrl","joinHubSite","registerHubSite","unRegisterHubSite","hubSiteData","forceRefresh","syncHubSiteTheme","NavigationNode","visible","IsVisible","NavigationNodes","node","moveAfter","nodeId","previousNodeId","_Navigation","Navigation","getMenuState","menuNodeKey","depth","mapProviderName","customProperties","NavigationService","getMenuNodeKey","currentUrl","UrlZone","clientPeoplePickerQuery","profileLoader","Profiles","amIFollowedBy","loginName","amIFollowing","getFollowedTags","maxCount","getFollowersFor","_Profiles","getPeopleFollowedBy","getPropertiesFor","getUserProfilePropertyFor","propertyName","hideSuggestion","isFollowing","follower","followee","setMyProfilePic","profilePicSource","reader","FileReader","onload","readAsArrayBuffer","Uint16Array","setSingleValueProfileProperty","accountName","propertyValue","setMultiValuedProfileProperty","propertyValues","createPersonalSiteEnqueueBulk","emails","ownerUserProfile","userProfile","createPersonalSite","interactiveRequest","shareAllSocialData","share","clientPeoplePickerResolveUser","clientPeoplePickerSearchUser","ProfileLoaderFactory","ProfileLoader","ClientPeoplePickerFactory","getBodyFrom","ClientPeoplePickerResolveUser","ClientPeoplePickerSearchUser","ClientPeoplePickerQuery","TimeZone","TimeZones","_RegionalSettings","RegionalSettings","utcToLocalTime","utcTime","dateIsoString","toISOString","UTCToLocalTime","localTimeToUTC","localTime","getTimezoneOffset","LocalTimeToUTC","_TimeZone","_TimeZones","getRelatedItems","sourceListName","sourceItemId","RelatedItemManager","SourceItemID","SourceListName","getPageOneRelatedItems","addSingleLink","sourceWebUrl","targetListName","targetItemID","targetWebUrl","tryAddReverseLink","SourceWebUrl","TargetItemID","TargetListName","TargetWebUrl","TryAddReverseLink","addSingleLinkToUrl","targetItemUrl","TargetItemUrl","addSingleLinkFromUrl","sourceItemUrl","targetItemId","SourceItemUrl","deleteSingleLink","tryDeleteReverseLink","TryDeleteReverseLink","_RelatedItemManager","funcs","toPropCase","str","$1","SearchQueryBuilder","queryText","_query","Querytext","self","proxy","pk","mappedPk","propKey","SortDirection","ReorderingRuleMatchType","QueryPropertyValueType","queryRegex","queryInit","parseQuery","HitHighlightedProperties","fixArrProp","Properties","RefinementFilters","ReorderingRules","SelectProperties","SortList","prop","toSearchQuery","_Search","Search","rawResponse","_url","_raw","_primary","postquery","RawSearchResults","ElapsedTime","PrimaryQueryResult","RelevantResults","RowCount","TotalRows","TotalRowsIncludingDuplicates","formatSearchResults","Table","Rows","getPage","pageNumber","pageSize","rows","RowLimit","StartRow","rawResults","tempResults","tempResult","cells","Cells","cell","writable","mapQueryToQueryString","PeopleNames","s_1","suggest","s_2","PersonalResults","Queries","querytext","querySetter","checkProp","sp","_Suggest","Suggest","Documents","ItemsMatchingContentType","ItemsMatchingTag","ItemsRelatedToCurrentUser","ItemsWithSameKeywordAsThisItem","LocalPeopleResults","LocalReportsAndDataResults","LocalSharePointResults","LocalVideoResults","Pages","Pictures","Popular","RecentlyChangedItems","RecommendedItems","Wiki","searchWithCaching","searchSuggest","PermissionKind","SharingRole","SPSharedObjectType","SharingDomainRestrictionMode","SharingOperationStatusCode","SharingLinkKind","RoleType","SiteUser","getByEmail","getByLoginName","removeById","SiteUsers","removeByLoginName","LoginName","_SiteUsers","user","SiteGroups","SiteGroup","groupName","_SiteGroups","retGroup","setUserAsOwner","userId","RoleAssignment","principalId","roleDefId","RoleAssignments","_RoleAssignments","RoleDefinition","getByType","roleTypeKind","basePermissions","BasePermissions","Name","Order","_RoleDefinitions","RoleDefinitions","getUserEffectivePermissions","GetUserEffectivePermissions","getCurrentUserEffectivePermissions","w","breakRoleInheritance","copyRoleAssignments","clearSubscopes","resetRoleInheritance","userHasPermissions","permission","perms","hasPermissions","currentUserHasPermissions","perm","FullMask","High","Low","shareObject","bypass","sendShareObjectRequest","getRoleValue","includeAnonymousLinkInEmail","propagateAcl","useSimplifiedRoles","role","roleValue","loginNames","userStr","peoplePickerInput","emailData","emailBody","emailSubject","subject","sendEmail","getShareLink","kind","expString","createLink","linkKind","checkPermissions","recipients","getSharingInformation","getObjectSharingSettings","unshareObject","deleteLinkByKind","unshareLink","shareId","shareWith","requireSignin","roleFilter","Edit","Contributor","Reader","def","Guest","View","checkSharingPermissions","unshare","deleteSharingLinkByKind","shareEverything","dependency","shareObjectRaw","createSiteDesign","creationInfo","SiteDesignsCloneFactory","applySiteDesign","getSiteDesigns","getSiteDesignMetadata","updateSiteDesign","updateInfo","deleteSiteDesign","getSiteDesignRights","grantSiteDesignRights","principalNames","grantedRights","revokeSiteDesignRights","addSiteDesignTask","addSiteDesignTaskToCurrentWeb","getSiteDesignTask","task","getSiteDesignRun","getSiteDesignRunStatus","runId","SiteDesigns","getSiteDesignRuns","createDefaultAssociatedGroups","groupNameSeed","siteOwner","siteOwner2","getSiteScripts","SiteScriptsCloneFactory","createSiteScript","getSiteScriptMetadata","deleteSiteScript","updateSiteScript","Content","getSiteScriptFromList","listUrl","getSiteScriptFromWeb","SiteScripts","getSiteScript","extractInfo","rootFolder","absoluteListUrl","ensureUser","logonName","getUserById","SocialActorType","SocialActorTypes","SocialFollowResult","SocialStatusCode","MySocial","getFollowedSitesUri","SocialCloneFactory","FollowedSitesUri","getFollowedDocumentsUri","FollowedDocumentsUri","follow","actorInfo","createSocialActorInfoRequestBody","isFollowed","stopFollowing","_Social","Social","followed","types","MySocialCloneFactory","Followed","followedCount","FollowedCount","followers","Followers","suggestions","Suggestions","_MySocial","excute","Body","From","Subject","To","CC","BCC","AdditionalHeaders","UtilitiesCloneFactory","getCurrentUserEmailAddresses","resolvePrincipal","scopes","sources","inputIsEmailOnly","addToUserInfoList","matchUserInfoList","searchPrincipals","createEmailBodyForInvitation","pageAddress","expandGroupsToPrincipals","inputs","createWikiPage","Utilities","subscriptionId","Subscription","notificationUrl","expirationDate","clientState","subscription","_Subscriptions","Subscriptions","expirationDateTime","UserCustomActionRegistrationType","UserCustomActionScope","UserCustomAction","UserCustomActions","_UserCustomActions","ViewScope","personalView","Views","view","_Views","ViewFields","renderAsHtml","setViewXml","getSchemaXml","fieldTitleOrInternalName","move","removeAll","fieldInternalName","_ViewFields","getView","viewId","WebPartsPersonalizationScope","WebPartDefinitions","export","LimitedWebPartManagerCloneFactory","webPartXml","LimitedWebPartManager","WebPartDefinition","getByControlId","saveChanges","zoneId","getLimitedWebPartManager","scope","Shared","updateable","updateableWithETag","addable","Conversation","Threads","_Conversation","Conversations","_Conversations","Thread","Posts","reply","_Thread","_Threads","forward","Post","_Post","_Posts","Senders","remover","addFile","bytes","contentBytes","DirectoryObjectTypes","GroupType","getMemberObjects","securityEnabledOnly","DirectoryObject","getMemberGroups","checkMemberGroups","groupIds","_DirectoryObject","DirectoryObjects","getByIds","ids","directoryObject","_DirectoryObjects","addFavorite","Group","removeFavorite","resetUnseenCount","subscribeByMail","unsubscribeByMail","getCalendarView","start","end","_Group","Groups","mailNickname","groupType","additionalProperties","mailEnabled","Office365","securityEnabled","Security","groupTypes","_Groups","Calendars","_Calendars","Calendar","Events","_Event","event","_Events","People","_User","User","Users","_Users","_People","Contact","_Contact","Contacts","givenName","surName","emailAddresses","businessPhones","contact","_Contacts","ContactFolder","ContactFolders","_ContactFolder","parentFolderId","contactFolder","_ContactFolders","Member","Members","_Members","Message","Messages","_Messages","MailFolder","MailFolders","_MailFolders","MailboxSettings","_MailboxSettings","sendMail","Drive","Root","DriveItems","getItemById","DriveItem","_Drive","Drives","_Drives","searcher","_Root","parentReference","getContent","_DriveItem","_DriveItems","OneNote","Notebooks","Sections","_OneNote","Notebook","notebook","_Notebooks","Section","_Sections","Photo","_Photo","Planner","Plans","Tasks","Buckets","_Planner","Plan","_Plan","plan","_Plans","Task","_Task","planId","assignments","bucketId","_Tasks","Bucket","_Bucket","orderHint","bucket","_Buckets","_Subscription","changeType","Team","Channels","archive","shouldSetSpoSiteReadOnlyForMembers","unarchive","cloneTeam","partsToClone","_Team","Teams","_Teams","Channel","Tabs","channel","_Channels","Tab","_Tab","appUrl","tab","_Tabs","createTeam","team","util","Def"],"mappings":"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","file":"pnp.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"pnp\"] = factory();\n\telse\n\t\troot[\"pnp\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { isFunc } from \"./util\";\n\ndeclare var Object: {\n    entries?: any;\n    keys(o: any): any;\n};\n\n/**\n * Interface defining an object with a known property type\n */\nexport interface ITypedHash<T> {\n    [key: string]: T;\n}\n\n/**\n * Used to calculate the object properties, with polyfill if needed\n */\nconst objectEntries: any = isFunc(Object.entries) ? Object.entries : (o: any): [any, any][] => Object.keys(o).map((k: any) => [k, o[k]]);\n\n/**\n * Converts the supplied object to a map\n * \n * @param o The object to map\n */\nexport function objectToMap<K, V>(o: any): Map<K, V> {\n    if (o !== undefined && o !== null) {\n        return new Map(objectEntries(o));\n    }\n    return new Map();\n}\n\n/**\n * Merges to Map instances together, overwriting values in target with matching keys, last in wins\n * \n * @param target map into which the other maps are merged\n * @param maps One or more maps to merge into the target \n */\nexport function mergeMaps<K, V>(target: Map<K, V>, ...maps: Map<K, V>[]): Map<K, V> {\n    for (let i = 0; i < maps.length; i++) {\n        maps[i].forEach((v: V, k: K) => {\n            target.set(k, v);\n        });\n    }\n\n    return target;\n}\n","import { ITypedHash, mergeMaps, objectToMap } from \"./collections\";\nimport { ISPFXContext } from \"./spfxcontextinterface\";\n\nexport interface ILibraryConfiguration {\n\n    /**\n     * Allows caching to be global disabled, default: false\n     */\n    globalCacheDisable?: boolean;\n\n    /**\n     * Defines the default store used by the usingCaching method, default: session\n     */\n    defaultCachingStore?: \"session\" | \"local\";\n\n    /**\n     * Defines the default timeout in seconds used by the usingCaching method, default 30\n     */\n    defaultCachingTimeoutSeconds?: number;\n\n    /**\n     * If true a timeout expired items will be removed from the cache in intervals determined by cacheTimeoutInterval\n     */\n    enableCacheExpiration?: boolean;\n\n    /**\n     * Determines the interval in milliseconds at which the cache is checked to see if items have expired (min: 100)\n     */\n    cacheExpirationIntervalMilliseconds?: number;\n\n    /**\n     * Used to supply the current context from an SPFx webpart to the library\n     */\n    spfxContext?: ISPFXContext;\n\n    /**\n     * Used to place the library in ie11 compat mode. Some features may not work as expected\n     */\n    ie11?: boolean;\n}\n\nexport function setup(config: ILibraryConfiguration): void {\n    RuntimeConfig.assign(config);\n}\n\n// lable mapping for known config values\nconst s = [\n    \"defaultCachingStore\",\n    \"defaultCachingTimeoutSeconds\",\n    \"globalCacheDisable\",\n    \"enableCacheExpiration\",\n    \"cacheExpirationIntervalMilliseconds\",\n    \"spfxContext\",\n    \"ie11\",\n];\n\nexport class RuntimeConfigImpl {\n\n    constructor(private _v = new Map<string, any>()) {\n\n        // setup defaults\n        this._v.set(s[0], \"session\");\n        this._v.set(s[1], 60);\n        this._v.set(s[2], false);\n        this._v.set(s[3], false);\n        this._v.set(s[4], 750);\n        this._v.set(s[5], null);\n        this._v.set(s[6], false);\n    }\n\n    /**\n     * \n     * @param config The set of properties to add to the globa configuration instance\n     */\n    public assign(config: ITypedHash<any>): void {\n        this._v = mergeMaps(this._v, objectToMap(config));\n    }\n\n    public get(key: string): any {\n        return this._v.get(key);\n    }\n\n    public get defaultCachingStore(): \"session\" | \"local\" {\n        return this.get(s[0]);\n    }\n\n    public get defaultCachingTimeoutSeconds(): number {\n        return this.get(s[1]);\n    }\n\n    public get globalCacheDisable(): boolean {\n        return this.get(s[2]);\n    }\n\n    public get enableCacheExpiration(): boolean {\n        return this.get(s[3]);\n    }\n\n    public get cacheExpirationIntervalMilliseconds(): number {\n        return this.get(s[4]);\n    }\n\n    public get spfxContext(): ISPFXContext {\n        return this.get(s[5]);\n    }\n\n    public get ie11(): boolean {\n        const v = this.get(s[6]);\n        if (v) {\n            console.warn(\"PnPjs is running in ie11 compat mode. Not all features may work as expected.\");\n        }\n        return v;\n    }\n}\n\nconst _runtimeConfig = new RuntimeConfigImpl();\n\nexport let RuntimeConfig = _runtimeConfig;\n","import { dateAdd, getCtxCallback, jsS, objectDefinedNotNull } from \"./util\";\nimport { RuntimeConfig } from \"./libconfig\";\n\n/**\n * A wrapper class to provide a consistent interface to browser based storage\n *\n */\nexport class PnPClientStorageWrapper implements IPnPClientStore {\n\n    /**\n     * True if the wrapped storage is available; otherwise, false\n     */\n    public enabled: boolean;\n\n    /**\n     * Creates a new instance of the PnPClientStorageWrapper class\n     *\n     * @constructor\n     */\n    constructor(private store: Storage, public defaultTimeoutMinutes = -1) {\n\n        this.enabled = this.test();\n\n        // if the cache timeout is enabled call the handler\n        // this will clear any expired items and set the timeout function\n        if (RuntimeConfig.enableCacheExpiration) {\n            this.cacheExpirationHandler();\n        }\n    }\n\n    public static bind(store: Storage): IPnPClientStore {\n        return new PnPClientStorageWrapper(typeof (store) === \"undefined\" ? new MemoryStorage() : store);\n    }\n\n    /**\n     * Get a value from storage, or null if that value does not exist\n     *\n     * @param key The key whose value we want to retrieve\n     */\n    public get<T>(key: string): T | null {\n\n        if (!this.enabled) {\n            return null;\n        }\n\n        const o = this.store.getItem(key);\n\n        if (!objectDefinedNotNull(o)) {\n            return null;\n        }\n\n        const persistable = JSON.parse(o);\n\n        if (new Date(persistable.expiration) <= new Date()) {\n            this.delete(key);\n            return null;\n\n        } else {\n\n            return persistable.value as T;\n        }\n    }\n\n    /**\n     * Adds a value to the underlying storage\n     *\n     * @param key The key to use when storing the provided value\n     * @param o The value to store\n     * @param expire Optional, if provided the expiration of the item, otherwise the default is used\n     */\n    public put(key: string, o: any, expire?: Date): void {\n        if (this.enabled) {\n            this.store.setItem(key, this.createPersistable(o, expire));\n        }\n    }\n\n    /**\n     * Deletes a value from the underlying storage\n     *\n     * @param key The key of the pair we want to remove from storage\n     */\n    public delete(key: string): void {\n        if (this.enabled) {\n            this.store.removeItem(key);\n        }\n    }\n\n    /**\n     * Gets an item from the underlying storage, or adds it if it does not exist using the supplied getter function\n     *\n     * @param key The key to use when storing the provided value\n     * @param getter A function which will upon execution provide the desired value\n     * @param expire Optional, if provided the expiration of the item, otherwise the default is used\n     */\n    public async getOrPut<T>(key: string, getter: () => Promise<T>, expire?: Date): Promise<T> {\n\n        if (!this.enabled) {\n            return getter();\n        }\n\n        let o = this.get<T>(key);\n\n        if (o === null) {\n            o = await getter();\n            this.put(key, o, expire);\n        }\n\n        return o;\n    }\n\n    /**\n     * Deletes any expired items placed in the store by the pnp library, leaves other items untouched\n     */\n    public async deleteExpired(): Promise<void> {\n\n        if (!this.enabled) {\n            return;\n        }\n\n        for (let i = 0; i < this.store.length; i++) {\n            const key = this.store.key(i);\n            if (key !== null) {\n                // test the stored item to see if we stored it\n                if (/[\"|']?pnp[\"|']? ?: ?1/i.test(<string>this.store.getItem(key))) {\n                    // get those items as get will delete from cache if they are expired\n                    await this.get(key);\n                }\n            }\n        }\n    }\n\n    /**\n     * Used to determine if the wrapped storage is available currently\n     */\n    private test(): boolean {\n        const str = \"t\";\n        try {\n            this.store.setItem(str, str);\n            this.store.removeItem(str);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    /**\n     * Creates the persistable to store\n     */\n    private createPersistable(o: any, expire?: Date): string {\n        if (expire === undefined) {\n\n            // ensure we are by default inline with the global library setting\n            let defaultTimeout = RuntimeConfig.defaultCachingTimeoutSeconds;\n            if (this.defaultTimeoutMinutes > 0) {\n                defaultTimeout = this.defaultTimeoutMinutes * 60;\n            }\n            expire = dateAdd(new Date(), \"second\", defaultTimeout);\n        }\n\n        return jsS({ pnp: 1, expiration: expire, value: o });\n    }\n\n    /**\n     * Deletes expired items added by this library in this.store and sets a timeout to call itself\n     */\n    private cacheExpirationHandler(): void {\n\n        if (!this.enabled) {\n            return;\n        }\n\n        this.deleteExpired().then(_ => {\n\n            // call ourself in the future\n            setTimeout(getCtxCallback(this, this.cacheExpirationHandler), RuntimeConfig.cacheExpirationIntervalMilliseconds);\n        }).catch(console.error);\n    }\n}\n\n/**\n * Interface which defines the operations provided by a client storage object\n */\nexport interface IPnPClientStore {\n    /**\n     * True if the wrapped storage is available; otherwise, false\n     */\n    enabled: boolean;\n\n    /**\n     * Get a value from storage, or null if that value does not exist\n     *\n     * @param key The key whose value we want to retrieve\n     */\n    get(key: string): any;\n\n    /**\n     * Adds a value to the underlying storage\n     *\n     * @param key The key to use when storing the provided value\n     * @param o The value to store\n     * @param expire Optional, if provided the expiration of the item, otherwise the default is used\n     */\n    put(key: string, o: any, expire?: Date): void;\n\n    /**\n     * Deletes a value from the underlying storage\n     *\n     * @param key The key of the pair we want to remove from storage\n     */\n    delete(key: string): void;\n\n    /**\n     * Gets an item from the underlying storage, or adds it if it does not exist using the supplied getter function\n     *\n     * @param key The key to use when storing the provided value\n     * @param getter A function which will upon execution provide the desired value\n     * @param expire Optional, if provided the expiration of the item, otherwise the default is used\n     */\n    getOrPut<T>(key: string, getter: () => Promise<T>, expire?: Date): Promise<T>;\n\n    /**\n     * Removes any expired items placed in the store by the pnp library, leaves other items untouched\n     */\n    deleteExpired(): Promise<void>;\n}\n\n/**\n * A thin implementation of in-memory storage for use in nodejs\n */\nclass MemoryStorage {\n\n    constructor(private _store = new Map<string, any>()) { }\n\n    public get length(): number {\n        return this._store.size;\n    }\n\n    public clear(): void {\n        this._store.clear();\n    }\n\n    public getItem(key: string): any {\n        return this._store.get(key);\n    }\n\n    public key(index: number): string {\n        return Array.from(this._store)[index][0];\n    }\n\n    public removeItem(key: string): void {\n        this._store.delete(key);\n    }\n\n    public setItem(key: string, data: string): void {\n        this._store.set(key, data);\n    }\n\n    [key: string]: any;\n    [index: number]: string;\n}\n\n/**\n * A class that will establish wrappers for both local and session storage\n */\nexport class PnPClientStorage {\n\n    /**\n     * Creates a new instance of the PnPClientStorage class\n     *\n     * @constructor\n     */\n    constructor(private _local: IPnPClientStore | null = null, private _session: IPnPClientStore | null = null) { }\n\n    /**\n     * Provides access to the local storage of the browser\n     */\n    public get local(): IPnPClientStore {\n\n        if (this._local === null) {\n            this._local = PnPClientStorageWrapper.bind(localStorage);\n        }\n\n        return this._local;\n    }\n\n    /**\n     * Provides access to the session storage of the browser\n     */\n    public get session(): IPnPClientStore {\n\n        if (this._session === null) {\n            this._session = PnPClientStorageWrapper.bind(sessionStorage);\n        }\n\n        return this._session;\n    }\n}\n","export * from \"./collections\";\nexport * from \"./libconfig\";\nexport * from \"./net\";\nexport * from \"./spfxcontextinterface\";\nexport * from \"./storage\";\nexport * from \"./util\";\n","import { ITypedHash } from \"./collections\";\n\n/**\n * Gets a callback function which will maintain context across async calls.\n * Allows for the calling pattern getCtxCallback(thisobj, method, methodarg1, methodarg2, ...)\n *\n * @param context The object that will be the 'this' value in the callback\n * @param method The method to which we will apply the context and parameters\n * @param params Optional, additional arguments to supply to the wrapped method when it is invoked\n */\nexport function getCtxCallback(context: any, method: Function, ...params: any[]): Function {\n    return function () {\n        method.apply(context, params);\n    };\n}\n\nexport type DateAddInterval = \"year\" | \"quarter\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\";\n\n/**\n * Adds a value to a date\n *\n * @param date The date to which we will add units, done in local time\n * @param interval The name of the interval to add, one of: ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second']\n * @param units The amount to add to date of the given interval\n *\n * http://stackoverflow.com/questions/1197928/how-to-add-30-minutes-to-a-javascript-date-object\n */\nexport function dateAdd(date: Date, interval: DateAddInterval, units: number): Date | undefined {\n    let ret: Date | undefined = new Date(date.toString()); // don't change original date\n    switch (interval.toLowerCase()) {\n        case \"year\": ret.setFullYear(ret.getFullYear() + units); break;\n        case \"quarter\": ret.setMonth(ret.getMonth() + 3 * units); break;\n        case \"month\": ret.setMonth(ret.getMonth() + units); break;\n        case \"week\": ret.setDate(ret.getDate() + 7 * units); break;\n        case \"day\": ret.setDate(ret.getDate() + units); break;\n        case \"hour\": ret.setTime(ret.getTime() + units * 3600000); break;\n        case \"minute\": ret.setTime(ret.getTime() + units * 60000); break;\n        case \"second\": ret.setTime(ret.getTime() + units * 1000); break;\n        default: ret = undefined; break;\n    }\n    return ret;\n}\n\n/**\n * Combines an arbitrary set of paths ensuring and normalizes the slashes\n *\n * @param paths 0 to n path parts to combine\n */\nexport function combine(...paths: string[]): string {\n\n    return paths\n        .filter(path => !stringIsNullOrEmpty(path))\n        .map(path => path.replace(/^[\\\\|\\/]/, \"\").replace(/[\\\\|\\/]$/, \"\"))\n        .join(\"/\")\n        .replace(/\\\\/g, \"/\");\n}\n\n/**\n * Gets a random string of chars length\n * \n * https://stackoverflow.com/questions/1349404/generate-random-string-characters-in-javascript\n *\n * @param chars The length of the random string to generate\n */\nexport function getRandomString(chars: number): string {\n    const text = new Array(chars);\n    for (let i = 0; i < chars; i++) {\n        text[i] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\".charAt(Math.floor(Math.random() * 62));\n    }\n    return text.join(\"\");\n}\n\n/**\n * Gets a random GUID value\n *\n * http://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\n */\n/* tslint:disable no-bitwise */\nexport function getGUID(): string {\n    let d = Date.now();\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n        const r = (d + Math.random() * 16) % 16 | 0;\n        d = Math.floor(d / 16);\n        return (c === \"x\" ? r : (r & 0x3 | 0x8)).toString(16);\n    });\n}\n/* tslint:enable */\n\n/**\n * Determines if a given value is a function\n *\n * @param cf The thing to test for functionness\n */\nexport function isFunc(f: any): boolean {\n    return typeof f === \"function\";\n}\n\n/**\n * Determines if an object is both defined and not null\n * @param obj Object to test\n */\nexport function objectDefinedNotNull(obj: any): boolean {\n    return typeof obj !== \"undefined\" && obj !== null;\n}\n\n/**\n * @returns whether the provided parameter is a JavaScript Array or not.\n*/\nexport function isArray(array: any): boolean {\n\n    return Array.isArray ? Array.isArray(array) : array && typeof array.length === \"number\" && array.constructor === Array;\n}\n\n/**\n * Provides functionality to extend the given object by doing a shallow copy\n *\n * @param target The object to which properties will be copied\n * @param source The source object from which properties will be copied\n * @param noOverwrite If true existing properties on the target are not overwritten from the source\n * @param filter If provided allows additional filtering on what properties are copied (propName: string) => boolean\n *\n */\nexport function assign<T extends ITypedHash<any> = any, S extends ITypedHash<any> = any>(target: T, source: S, noOverwrite = false,\n    filter: (propName: string) => boolean = () => true): T & S {\n\n    if (!objectDefinedNotNull(source)) {\n        return <T & S>target;\n    }\n\n    // ensure we don't overwrite things we don't want overwritten\n    const check: (o: any, i: string) => Boolean = noOverwrite ? (o, i) => !(i in o) : () => true;\n\n    // final filter we will use\n    const f = (v: string) => check(target, v) && filter(v);\n\n    return Object.getOwnPropertyNames(source)\n        .filter(f)\n        .reduce((t: any, v: string) => {\n            t[v] = source[v];\n            return t;\n        }, target);\n}\n\n/**\n * Determines if a given url is absolute\n *\n * @param url The url to check to see if it is absolute\n */\nexport function isUrlAbsolute(url: string): boolean {\n    return /^https?:\\/\\/|^\\/\\//i.test(url);\n}\n\n/**\n * Determines if a string is null or empty or undefined\n *\n * @param s The string to test\n */\nexport function stringIsNullOrEmpty(s: string): boolean {\n    return s === undefined || s === null || s.length < 1;\n}\n\n/**\n * Ensures guid values are represented consistently as \"ea123463-137d-4ae3-89b8-cf3fc578ca05\"\n * \n * @param guid The candidate guid\n */\nexport function sanitizeGuid(guid: string): string {\n\n    if (stringIsNullOrEmpty(guid)) {\n        return guid;\n    }\n\n    const matches = /([0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12})/i.exec(guid);\n\n    return matches === null ? guid : matches[1];\n}\n\n/**\n * Shorthand for JSON.stringify\n * \n * @param o Any type of object\n */\nexport function jsS(o: any): string {\n    return JSON.stringify(o);\n}\n\n/**\n * Shorthand for Object.hasOwnProperty\n * \n * @param o Object to check for\n * @param p Name of the property\n */\nexport function hOP(o: any, p: string): boolean {\n    return Object.hasOwnProperty.call(o, p);\n}\n\n/**\n * Generates a ~unique hash code\n * \n * From: https://stackoverflow.com/questions/6122571/simple-non-secure-hash-function-for-javascript\n */\n// tslint:disable:no-bitwise\nexport function getHashCode(s: string): number {\n    let hash = 0;\n    if (s.length === 0) {\n        return hash;\n    }\n\n    for (let i = 0; i < s.length; i++) {\n        const chr = s.charCodeAt(i);\n        hash = ((hash << 5) - hash) + chr;\n        hash |= 0; // Convert to 32bit integer\n    }\n    return hash;\n}\n// tslint:enable:no-bitwise\n","import {\n    ILibraryConfiguration,\n    ITypedHash,\n    RuntimeConfig,\n    IHttpClientImpl,\n    FetchClient,\n    objectDefinedNotNull,\n} from \"@pnp/common\";\n\nexport interface SPConfigurationPart {\n    sp?: {\n        /**\n         * Any headers to apply to all requests\n         */\n        headers?: ITypedHash<string>;\n\n        /**\n         * The base url used for all requests\n         */\n        baseUrl?: string;\n\n        /**\n         * Defines a factory method used to create fetch clients\n         */\n        fetchClientFactory?: () => IHttpClientImpl;\n    };\n}\n\nexport interface SPConfiguration extends ILibraryConfiguration, SPConfigurationPart { }\n\nexport function setup(config: SPConfiguration): void {\n    RuntimeConfig.assign(config);\n}\n\nexport class SPRuntimeConfigImpl {\n\n    public get headers(): ITypedHash<string> {\n\n        const spPart = RuntimeConfig.get(\"sp\");\n        if (spPart !== undefined && spPart.headers !== undefined) {\n            return spPart.headers;\n        }\n\n        return {};\n    }\n\n    public get baseUrl(): string | null {\n\n        const spPart = RuntimeConfig.get(\"sp\");\n        if (spPart !== undefined && spPart.baseUrl !== undefined) {\n            return spPart.baseUrl;\n        }\n\n        if (objectDefinedNotNull(RuntimeConfig.spfxContext)) {\n            return RuntimeConfig.spfxContext.pageContext.web.absoluteUrl;\n        }\n\n        return null;\n    }\n\n    public get fetchClientFactory(): () => IHttpClientImpl {\n\n        const spPart = RuntimeConfig.get(\"sp\");\n        if (spPart !== undefined && spPart.fetchClientFactory !== undefined) {\n            return spPart.fetchClientFactory;\n        } else {\n            return () => new FetchClient();\n        }\n    }\n}\n\nexport let SPRuntimeConfig = new SPRuntimeConfigImpl();\n","declare var global: { location: string, _spPageContextInfo?: { webAbsoluteUrl?: string, webServerRelativeUrl?: string } };\nimport { combine, isUrlAbsolute, hOP } from \"@pnp/common\";\nimport { SPRuntimeConfig } from \"../splibconfig\";\n\n/**\n * Ensures that a given url is absolute for the current web based on context\n *\n * @param candidateUrl The url to make absolute\n *\n */\nexport function toAbsoluteUrl(candidateUrl: string): Promise<string> {\n\n    return new Promise((resolve) => {\n\n        if (isUrlAbsolute(candidateUrl)) {\n            // if we are already absolute, then just return the url\n            return resolve(candidateUrl);\n        }\n\n        if (SPRuntimeConfig.baseUrl !== null) {\n            // base url specified either with baseUrl of spfxContext config property\n            return resolve(combine(SPRuntimeConfig.baseUrl, candidateUrl));\n        }\n\n        if (global._spPageContextInfo !== undefined) {\n\n            // operating in classic pages\n            if (hOP(global._spPageContextInfo, \"webAbsoluteUrl\")) {\n                return resolve(combine(global._spPageContextInfo.webAbsoluteUrl, candidateUrl));\n            } else if (hOP(global._spPageContextInfo, \"webServerRelativeUrl\")) {\n                return resolve(combine(global._spPageContextInfo.webServerRelativeUrl, candidateUrl));\n            }\n        }\n\n        // does window.location exist and have a certain path part in it?\n        if (global.location !== undefined) {\n            const baseUrl = global.location.toString().toLowerCase();\n            [\"/_layouts/\", \"/siteassets/\"].forEach((s: string) => {\n                const index = baseUrl.indexOf(s);\n                if (index > 0) {\n                    return resolve(combine(baseUrl.substr(0, index), candidateUrl));\n                }\n            });\n        }\n\n        return resolve(candidateUrl);\n    });\n}\n","import { assign, objectDefinedNotNull } from \"./util\";\nimport { ISPFXContext } from \"./spfxcontextinterface\";\n\ndeclare var global: { fetch(url: string, options: any): Promise<Response> };\n\nexport interface IConfigOptions {\n    headers?: string[][] | { [key: string]: string } | Headers;\n    mode?: \"navigate\" | \"same-origin\" | \"no-cors\" | \"cors\";\n    credentials?: \"omit\" | \"same-origin\" | \"include\";\n    cache?: \"default\" | \"no-store\" | \"reload\" | \"no-cache\" | \"force-cache\" | \"only-if-cached\";\n}\n\nexport interface IFetchOptions extends IConfigOptions {\n    method?: string;\n    body?: any;\n}\n\nexport interface IHttpClientImpl {\n    fetch(url: string, options: IFetchOptions): Promise<Response>;\n}\n\nexport interface IRequestClient {\n    fetch(url: string, options?: IFetchOptions): Promise<Response>;\n    fetchRaw(url: string, options?: IFetchOptions): Promise<Response>;\n    get(url: string, options?: IFetchOptions): Promise<Response>;\n    post(url: string, options?: IFetchOptions): Promise<Response>;\n    patch(url: string, options?: IFetchOptions): Promise<Response>;\n    delete(url: string, options?: IFetchOptions): Promise<Response>;\n}\n\nexport function mergeHeaders(target: Headers, source: HeadersInit): void {\n\n    if (objectDefinedNotNull(source)) {\n        const temp = new Request(\"\", { headers: source });\n        temp.headers.forEach((value: string, name: string) => {\n            target.append(name, value);\n        });\n    }\n}\n\nexport function mergeOptions(target: IConfigOptions, source: IConfigOptions): void {\n\n    if (objectDefinedNotNull(source)) {\n        const headers = assign(target.headers || {}, source.headers!);\n        target = assign(target, source);\n        target.headers = headers;\n    }\n}\n\n/**\n * Parses out the root of the request url to use as the resource when getting the token\n * \n  * @param url The url to parse\n */\nexport function getADALResource(url: string): string {\n    const u = new URL(url);\n    return `${u.protocol}//${u.hostname}`;\n}\n\n/**\n * Makes requests using the global/window fetch API\n */\nexport class FetchClient implements IHttpClientImpl {\n\n    public fetch(url: string, options: IFetchOptions): Promise<Response> {\n\n        return global.fetch(url, options);\n    }\n}\n\n/**\n * Makes requests using the fetch API adding the supplied token to the Authorization header\n */\nexport class BearerTokenFetchClient extends FetchClient {\n\n    constructor(private _token: string | null) {\n        super();\n    }\n\n    public get token() {\n        return this._token || \"\";\n    }\n\n    public set token(token: string) {\n        this._token = token;\n    }\n\n    public fetch(url: string, options: IFetchOptions = {}): Promise<Response> {\n\n        const headers = new Headers();\n\n        mergeHeaders(headers, options.headers);\n\n        headers.set(\"Authorization\", `Bearer ${this._token}`);\n\n        options.headers = headers;\n\n        return super.fetch(url, options);\n    }\n}\n\n/**\n * Client wrapping the aadTokenProvider available from SPFx >= 1.6\n */\nexport class SPFxAdalClient extends BearerTokenFetchClient {\n\n    /**\n     * \n     * @param context provide the appropriate SPFx Context object\n     */\n    constructor(private context: ISPFXContext) {\n        super(null);\n    }\n\n    /**\n     * Executes a fetch request using the supplied url and options\n     * \n     * @param url Absolute url of the request\n     * @param options Any options\n     */\n    public async fetch(url: string, options: IFetchOptions): Promise<Response> {\n\n        const token = await this.getToken(getADALResource(url));\n        this.token = token;\n        return super.fetch(url, options);\n    }\n\n    /**\n     * Gets an AAD token for the provided resource using the SPFx AADTokenProvider\n     * \n     * @param resource Resource for which a token is to be requested (ex: https://graph.microsoft.com)\n     */\n    public async getToken(resource: string): Promise<string> {\n\n        const provider = await this.context.aadTokenProviderFactory.getTokenProvider();\n        return provider.getToken(resource);\n    }\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/*! adal-angular v1.0.17 2018-02-27 */\r\nvar AuthenticationContext=function(){\"use strict\";return AuthenticationContext=function(a){if(this.REQUEST_TYPE={LOGIN:\"LOGIN\",RENEW_TOKEN:\"RENEW_TOKEN\",UNKNOWN:\"UNKNOWN\"},this.RESPONSE_TYPE={ID_TOKEN_TOKEN:\"id_token token\",TOKEN:\"token\"},this.CONSTANTS={ACCESS_TOKEN:\"access_token\",EXPIRES_IN:\"expires_in\",ID_TOKEN:\"id_token\",ERROR_DESCRIPTION:\"error_description\",SESSION_STATE:\"session_state\",ERROR:\"error\",STORAGE:{TOKEN_KEYS:\"adal.token.keys\",ACCESS_TOKEN_KEY:\"adal.access.token.key\",EXPIRATION_KEY:\"adal.expiration.key\",STATE_LOGIN:\"adal.state.login\",STATE_RENEW:\"adal.state.renew\",NONCE_IDTOKEN:\"adal.nonce.idtoken\",SESSION_STATE:\"adal.session.state\",USERNAME:\"adal.username\",IDTOKEN:\"adal.idtoken\",ERROR:\"adal.error\",ERROR_DESCRIPTION:\"adal.error.description\",LOGIN_REQUEST:\"adal.login.request\",LOGIN_ERROR:\"adal.login.error\",RENEW_STATUS:\"adal.token.renew.status\",ANGULAR_LOGIN_REQUEST:\"adal.angular.login.request\"},RESOURCE_DELIMETER:\"|\",CACHE_DELIMETER:\"||\",LOADFRAME_TIMEOUT:6e3,TOKEN_RENEW_STATUS_CANCELED:\"Canceled\",TOKEN_RENEW_STATUS_COMPLETED:\"Completed\",TOKEN_RENEW_STATUS_IN_PROGRESS:\"In Progress\",LOGGING_LEVEL:{ERROR:0,WARN:1,INFO:2,VERBOSE:3},LEVEL_STRING_MAP:{0:\"ERROR:\",1:\"WARNING:\",2:\"INFO:\",3:\"VERBOSE:\"},POPUP_WIDTH:483,POPUP_HEIGHT:600},AuthenticationContext.prototype._singletonInstance)return AuthenticationContext.prototype._singletonInstance;if(AuthenticationContext.prototype._singletonInstance=this,this.instance=\"https://login.microsoftonline.com/\",this.config={},this.callback=null,this.popUp=!1,this.isAngular=!1,this._user=null,this._activeRenewals={},this._loginInProgress=!1,this._acquireTokenInProgress=!1,this._renewStates=[],this._callBackMappedToRenewStates={},this._callBacksMappedToRenewStates={},this._openedWindows=[],this._requestType=this.REQUEST_TYPE.LOGIN,window._adalInstance=this,a.displayCall&&\"function\"!=typeof a.displayCall)throw new Error(\"displayCall is not a function\");if(!a.clientId)throw new Error(\"clientId is required\");this.config=this._cloneConfig(a),void 0===this.config.navigateToLoginRequestUrl&&(this.config.navigateToLoginRequestUrl=!0),this.config.popUp&&(this.popUp=!0),this.config.callback&&\"function\"==typeof this.config.callback&&(this.callback=this.config.callback),this.config.instance&&(this.instance=this.config.instance),this.config.loginResource||(this.config.loginResource=this.config.clientId),this.config.redirectUri||(this.config.redirectUri=window.location.href.split(\"?\")[0].split(\"#\")[0]),this.config.postLogoutRedirectUri||(this.config.postLogoutRedirectUri=window.location.href.split(\"?\")[0].split(\"#\")[0]),this.config.anonymousEndpoints||(this.config.anonymousEndpoints=[]),this.config.isAngular&&(this.isAngular=this.config.isAngular),this.config.loadFrameTimeout&&(this.CONSTANTS.LOADFRAME_TIMEOUT=this.config.loadFrameTimeout)},\"undefined\"!=typeof window&&(window.Logging={piiLoggingEnabled:!1,level:0,log:function(a){}}),AuthenticationContext.prototype.login=function(){if(this._loginInProgress)return void this.info(\"Login in progress\");this._loginInProgress=!0;var a=this._guid();this.config.state=a,this._idTokenNonce=this._guid();var b=this._getItem(this.CONSTANTS.STORAGE.ANGULAR_LOGIN_REQUEST);b&&\"\"!==b?this._saveItem(this.CONSTANTS.STORAGE.ANGULAR_LOGIN_REQUEST,\"\"):b=window.location.href,this.verbose(\"Expected state: \"+a+\" startPage:\"+b),this._saveItem(this.CONSTANTS.STORAGE.LOGIN_REQUEST,b),this._saveItem(this.CONSTANTS.STORAGE.LOGIN_ERROR,\"\"),this._saveItem(this.CONSTANTS.STORAGE.STATE_LOGIN,a,!0),this._saveItem(this.CONSTANTS.STORAGE.NONCE_IDTOKEN,this._idTokenNonce,!0),this._saveItem(this.CONSTANTS.STORAGE.ERROR,\"\"),this._saveItem(this.CONSTANTS.STORAGE.ERROR_DESCRIPTION,\"\");var c=this._getNavigateUrl(\"id_token\",null)+\"&nonce=\"+encodeURIComponent(this._idTokenNonce);this.config.displayCall?this.config.displayCall(c):this.popUp?(this._saveItem(this.CONSTANTS.STORAGE.STATE_LOGIN,\"\"),this._renewStates.push(a),this.registerCallback(a,this.config.clientId,this.callback),this._loginPopup(c)):this.promptUser(c)},AuthenticationContext.prototype._openPopup=function(a,b,c,d){try{var e=window.screenLeft?window.screenLeft:window.screenX,f=window.screenTop?window.screenTop:window.screenY,g=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,h=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight,i=g/2-c/2+e,j=h/2-d/2+f,k=window.open(a,b,\"width=\"+c+\", height=\"+d+\", top=\"+j+\", left=\"+i);return k.focus&&k.focus(),k}catch(a){return this.warn(\"Error opening popup, \"+a.message),this._loginInProgress=!1,this._acquireTokenInProgress=!1,null}},AuthenticationContext.prototype._handlePopupError=function(a,b,c,d,e){this.warn(d),this._saveItem(this.CONSTANTS.STORAGE.ERROR,c),this._saveItem(this.CONSTANTS.STORAGE.ERROR_DESCRIPTION,d),this._saveItem(this.CONSTANTS.STORAGE.LOGIN_ERROR,e),b&&this._activeRenewals[b]&&(this._activeRenewals[b]=null),this._loginInProgress=!1,this._acquireTokenInProgress=!1,a&&a(d,null,c)},AuthenticationContext.prototype._loginPopup=function(a,b,c){var d=this._openPopup(a,\"login\",this.CONSTANTS.POPUP_WIDTH,this.CONSTANTS.POPUP_HEIGHT),e=c||this.callback;if(null==d){var f=\"Popup Window is null. This can happen if you are using IE\";return void this._handlePopupError(e,b,\"Error opening popup\",f,f)}if(this._openedWindows.push(d),-1!=this.config.redirectUri.indexOf(\"#\"))var g=this.config.redirectUri.split(\"#\")[0];else var g=this.config.redirectUri;var h=this,i=window.setInterval(function(){if(!d||d.closed||void 0===d.closed){var a=\"Popup Window closed\",c=\"Popup Window closed by UI action/ Popup Window handle destroyed due to cross zone navigation in IE/Edge\";return h.isAngular&&h._broadcast(\"adal:popUpClosed\",c+h.CONSTANTS.RESOURCE_DELIMETER+a),h._handlePopupError(e,b,a,c,c),void window.clearInterval(i)}try{var f=d.location;if(-1!=encodeURI(f.href).indexOf(encodeURI(g)))return h.isAngular?h._broadcast(\"adal:popUpHashChanged\",f.hash):h.handleWindowCallback(f.hash),window.clearInterval(i),h._loginInProgress=!1,h._acquireTokenInProgress=!1,h.info(\"Closing popup window\"),h._openedWindows=[],void d.close()}catch(a){}},1)},AuthenticationContext.prototype._broadcast=function(a,b){!function(){function a(a,b){b=b||{bubbles:!1,cancelable:!1,detail:void 0};var c=document.createEvent(\"CustomEvent\");return c.initCustomEvent(a,b.bubbles,b.cancelable,b.detail),c}if(\"function\"==typeof window.CustomEvent)return!1;a.prototype=window.Event.prototype,window.CustomEvent=a}();var c=new CustomEvent(a,{detail:b});window.dispatchEvent(c)},AuthenticationContext.prototype.loginInProgress=function(){return this._loginInProgress},AuthenticationContext.prototype._hasResource=function(a){var b=this._getItem(this.CONSTANTS.STORAGE.TOKEN_KEYS);return b&&!this._isEmpty(b)&&b.indexOf(a+this.CONSTANTS.RESOURCE_DELIMETER)>-1},AuthenticationContext.prototype.getCachedToken=function(a){if(!this._hasResource(a))return null;var b=this._getItem(this.CONSTANTS.STORAGE.ACCESS_TOKEN_KEY+a),c=this._getItem(this.CONSTANTS.STORAGE.EXPIRATION_KEY+a),d=this.config.expireOffsetSeconds||300;return c&&c>this._now()+d?b:(this._saveItem(this.CONSTANTS.STORAGE.ACCESS_TOKEN_KEY+a,\"\"),this._saveItem(this.CONSTANTS.STORAGE.EXPIRATION_KEY+a,0),null)},AuthenticationContext.prototype.getCachedUser=function(){if(this._user)return this._user;var a=this._getItem(this.CONSTANTS.STORAGE.IDTOKEN);return this._user=this._createUser(a),this._user},AuthenticationContext.prototype.registerCallback=function(a,b,c){this._activeRenewals[b]=a,this._callBacksMappedToRenewStates[a]||(this._callBacksMappedToRenewStates[a]=[]);var d=this;this._callBacksMappedToRenewStates[a].push(c),this._callBackMappedToRenewStates[a]||(this._callBackMappedToRenewStates[a]=function(c,e,f,g){d._activeRenewals[b]=null;for(var h=0;h<d._callBacksMappedToRenewStates[a].length;++h)try{d._callBacksMappedToRenewStates[a][h](c,e,f,g)}catch(f){d.warn(f)}d._callBacksMappedToRenewStates[a]=null,d._callBackMappedToRenewStates[a]=null})},AuthenticationContext.prototype._renewToken=function(a,b,c){this.info(\"renewToken is called for resource:\"+a);var d=this._addAdalFrame(\"adalRenewFrame\"+a),e=this._guid()+\"|\"+a;this.config.state=e,this._renewStates.push(e),this.verbose(\"Renew token Expected state: \"+e),c=c||\"token\";var f=this._urlRemoveQueryStringParameter(this._getNavigateUrl(c,a),\"prompt\");c===this.RESPONSE_TYPE.ID_TOKEN_TOKEN&&(this._idTokenNonce=this._guid(),this._saveItem(this.CONSTANTS.STORAGE.NONCE_IDTOKEN,this._idTokenNonce,!0),f+=\"&nonce=\"+encodeURIComponent(this._idTokenNonce)),f+=\"&prompt=none\",f=this._addHintParameters(f),this.registerCallback(e,a,b),this.verbosePii(\"Navigate to:\"+f),d.src=\"about:blank\",this._loadFrameTimeout(f,\"adalRenewFrame\"+a,a)},AuthenticationContext.prototype._renewIdToken=function(a,b){this.info(\"renewIdToken is called\");var c=this._addAdalFrame(\"adalIdTokenFrame\"),d=this._guid()+\"|\"+this.config.clientId;this._idTokenNonce=this._guid(),this._saveItem(this.CONSTANTS.STORAGE.NONCE_IDTOKEN,this._idTokenNonce,!0),this.config.state=d,this._renewStates.push(d),this.verbose(\"Renew Idtoken Expected state: \"+d);var e=null===b||void 0===b?null:this.config.clientId,b=b||\"id_token\",f=this._urlRemoveQueryStringParameter(this._getNavigateUrl(b,e),\"prompt\");f+=\"&prompt=none\",f=this._addHintParameters(f),f+=\"&nonce=\"+encodeURIComponent(this._idTokenNonce),this.registerCallback(d,this.config.clientId,a),this.verbosePii(\"Navigate to:\"+f),c.src=\"about:blank\",this._loadFrameTimeout(f,\"adalIdTokenFrame\",this.config.clientId)},AuthenticationContext.prototype._urlContainsQueryStringParameter=function(a,b){return new RegExp(\"[\\\\?&]\"+a+\"=\").test(b)},AuthenticationContext.prototype._urlRemoveQueryStringParameter=function(a,b){var c=new RegExp(\"(\\\\&\"+b+\"=)[^&]+\");return a=a.replace(c,\"\"),c=new RegExp(\"(\"+b+\"=)[^&]+&\"),a=a.replace(c,\"\"),c=new RegExp(\"(\"+b+\"=)[^&]+\"),a=a.replace(c,\"\")},AuthenticationContext.prototype._loadFrameTimeout=function(a,b,c){this.verbose(\"Set loading state to pending for: \"+c),this._saveItem(this.CONSTANTS.STORAGE.RENEW_STATUS+c,this.CONSTANTS.TOKEN_RENEW_STATUS_IN_PROGRESS),this._loadFrame(a,b);var d=this;setTimeout(function(){if(d._getItem(d.CONSTANTS.STORAGE.RENEW_STATUS+c)===d.CONSTANTS.TOKEN_RENEW_STATUS_IN_PROGRESS){d.verbose(\"Loading frame has timed out after: \"+d.CONSTANTS.LOADFRAME_TIMEOUT/1e3+\" seconds for resource \"+c);var a=d._activeRenewals[c];a&&d._callBackMappedToRenewStates[a]&&d._callBackMappedToRenewStates[a](\"Token renewal operation failed due to timeout\",null,\"Token Renewal Failed\"),d._saveItem(d.CONSTANTS.STORAGE.RENEW_STATUS+c,d.CONSTANTS.TOKEN_RENEW_STATUS_CANCELED)}},d.CONSTANTS.LOADFRAME_TIMEOUT)},AuthenticationContext.prototype._loadFrame=function(a,b){var c=this;c.info(\"LoadFrame: \"+b);var d=b;setTimeout(function(){var b=c._addAdalFrame(d);\"\"!==b.src&&\"about:blank\"!==b.src||(b.src=a,c._loadFrame(a,d))},500)},AuthenticationContext.prototype.acquireToken=function(a,b){if(this._isEmpty(a))return this.warn(\"resource is required\"),void b(\"resource is required\",null,\"resource is required\");var c=this.getCachedToken(a);return c?(this.info(\"Token is already in cache for resource:\"+a),void b(null,c,null)):this._user||this.config.extraQueryParameter&&-1!==this.config.extraQueryParameter.indexOf(\"login_hint\")?void(this._activeRenewals[a]?this.registerCallback(this._activeRenewals[a],a,b):(this._requestType=this.REQUEST_TYPE.RENEW_TOKEN,a===this.config.clientId?this._user?(this.verbose(\"renewing idtoken\"),this._renewIdToken(b)):(this.verbose(\"renewing idtoken and access_token\"),this._renewIdToken(b,this.RESPONSE_TYPE.ID_TOKEN_TOKEN)):this._user?(this.verbose(\"renewing access_token\"),this._renewToken(a,b)):(this.verbose(\"renewing idtoken and access_token\"),this._renewToken(a,b,this.RESPONSE_TYPE.ID_TOKEN_TOKEN)))):(this.warn(\"User login is required\"),void b(\"User login is required\",null,\"login required\"))},AuthenticationContext.prototype.acquireTokenPopup=function(a,b,c,d){if(this._isEmpty(a))return this.warn(\"resource is required\"),void d(\"resource is required\",null,\"resource is required\");if(!this._user)return this.warn(\"User login is required\"),void d(\"User login is required\",null,\"login required\");if(this._acquireTokenInProgress)return this.warn(\"Acquire token interactive is already in progress\"),void d(\"Acquire token interactive is already in progress\",null,\"Acquire token interactive is already in progress\");var e=this._guid()+\"|\"+a;this.config.state=e,this._renewStates.push(e),this._requestType=this.REQUEST_TYPE.RENEW_TOKEN,this.verbose(\"Renew token Expected state: \"+e);var f=this._urlRemoveQueryStringParameter(this._getNavigateUrl(\"token\",a),\"prompt\");if(f+=\"&prompt=select_account\",b&&(f+=b),c&&-1===f.indexOf(\"&claims\"))f+=\"&claims=\"+encodeURIComponent(c);else if(c&&-1!==f.indexOf(\"&claims\"))throw new Error(\"Claims cannot be passed as an extraQueryParameter\");f=this._addHintParameters(f),this._acquireTokenInProgress=!0,this.info(\"acquireToken interactive is called for the resource \"+a),this.registerCallback(e,a,d),this._loginPopup(f,a,d)},AuthenticationContext.prototype.acquireTokenRedirect=function(a,b,c){if(this._isEmpty(a))return this.warn(\"resource is required\"),void d(\"resource is required\",null,\"resource is required\");var d=this.callback;if(!this._user)return this.warn(\"User login is required\"),void d(\"User login is required\",null,\"login required\");if(this._acquireTokenInProgress)return this.warn(\"Acquire token interactive is already in progress\"),void d(\"Acquire token interactive is already in progress\",null,\"Acquire token interactive is already in progress\");var e=this._guid()+\"|\"+a;this.config.state=e,this.verbose(\"Renew token Expected state: \"+e);var f=this._urlRemoveQueryStringParameter(this._getNavigateUrl(\"token\",a),\"prompt\");if(f+=\"&prompt=select_account\",b&&(f+=b),c&&-1===f.indexOf(\"&claims\"))f+=\"&claims=\"+encodeURIComponent(c);else if(c&&-1!==f.indexOf(\"&claims\"))throw new Error(\"Claims cannot be passed as an extraQueryParameter\");f=this._addHintParameters(f),this._acquireTokenInProgress=!0,this.info(\"acquireToken interactive is called for the resource \"+a),this._saveItem(this.CONSTANTS.STORAGE.LOGIN_REQUEST,window.location.href),this._saveItem(this.CONSTANTS.STORAGE.STATE_RENEW,e,!0),this.promptUser(f)},AuthenticationContext.prototype.promptUser=function(a){a?(this.infoPii(\"Navigate to:\"+a),window.location.replace(a)):this.info(\"Navigate url is empty\")},AuthenticationContext.prototype.clearCache=function(){this._saveItem(this.CONSTANTS.STORAGE.LOGIN_REQUEST,\"\"),this._saveItem(this.CONSTANTS.STORAGE.ANGULAR_LOGIN_REQUEST,\"\"),this._saveItem(this.CONSTANTS.STORAGE.SESSION_STATE,\"\"),this._saveItem(this.CONSTANTS.STORAGE.STATE_LOGIN,\"\"),this._saveItem(this.CONSTANTS.STORAGE.STATE_RENEW,\"\"),this._renewStates=[],this._saveItem(this.CONSTANTS.STORAGE.NONCE_IDTOKEN,\"\"),this._saveItem(this.CONSTANTS.STORAGE.IDTOKEN,\"\"),this._saveItem(this.CONSTANTS.STORAGE.ERROR,\"\"),this._saveItem(this.CONSTANTS.STORAGE.ERROR_DESCRIPTION,\"\"),this._saveItem(this.CONSTANTS.STORAGE.LOGIN_ERROR,\"\"),this._saveItem(this.CONSTANTS.STORAGE.LOGIN_ERROR,\"\");var a=this._getItem(this.CONSTANTS.STORAGE.TOKEN_KEYS);if(!this._isEmpty(a)){a=a.split(this.CONSTANTS.RESOURCE_DELIMETER);for(var b=0;b<a.length&&\"\"!==a[b];b++)this._saveItem(this.CONSTANTS.STORAGE.ACCESS_TOKEN_KEY+a[b],\"\"),this._saveItem(this.CONSTANTS.STORAGE.EXPIRATION_KEY+a[b],0)}this._saveItem(this.CONSTANTS.STORAGE.TOKEN_KEYS,\"\")},AuthenticationContext.prototype.clearCacheForResource=function(a){this._saveItem(this.CONSTANTS.STORAGE.STATE_RENEW,\"\"),this._saveItem(this.CONSTANTS.STORAGE.ERROR,\"\"),this._saveItem(this.CONSTANTS.STORAGE.ERROR_DESCRIPTION,\"\"),this._hasResource(a)&&(this._saveItem(this.CONSTANTS.STORAGE.ACCESS_TOKEN_KEY+a,\"\"),this._saveItem(this.CONSTANTS.STORAGE.EXPIRATION_KEY+a,0))},AuthenticationContext.prototype.logOut=function(){this.clearCache(),this._user=null;var a;if(this.config.logOutUri)a=this.config.logOutUri;else{var b=\"common\",c=\"\";this.config.tenant&&(b=this.config.tenant),this.config.postLogoutRedirectUri&&(c=\"post_logout_redirect_uri=\"+encodeURIComponent(this.config.postLogoutRedirectUri)),a=this.instance+b+\"/oauth2/logout?\"+c}this.infoPii(\"Logout navigate to: \"+a),this.promptUser(a)},AuthenticationContext.prototype._isEmpty=function(a){return void 0===a||!a||0===a.length},AuthenticationContext.prototype.getUser=function(a){if(\"function\"!=typeof a)throw new Error(\"callback is not a function\");if(this._user)return void a(null,this._user);var b=this._getItem(this.CONSTANTS.STORAGE.IDTOKEN);this._isEmpty(b)?(this.warn(\"User information is not available\"),a(\"User information is not available\",null)):(this.info(\"User exists in cache: \"),this._user=this._createUser(b),a(null,this._user))},AuthenticationContext.prototype._addHintParameters=function(a){if(this._user&&this._user.profile)if(this._user.profile.sid&&-1!==a.indexOf(\"&prompt=none\"))this._urlContainsQueryStringParameter(\"sid\",a)||(a+=\"&sid=\"+encodeURIComponent(this._user.profile.sid));else if(this._user.profile.upn&&(this._urlContainsQueryStringParameter(\"login_hint\",a)||(a+=\"&login_hint=\"+encodeURIComponent(this._user.profile.upn)),!this._urlContainsQueryStringParameter(\"domain_hint\",a)&&this._user.profile.upn.indexOf(\"@\")>-1)){var b=this._user.profile.upn.split(\"@\");a+=\"&domain_hint=\"+encodeURIComponent(b[b.length-1])}return a},AuthenticationContext.prototype._createUser=function(a){var b=null,c=this._extractIdToken(a);return c&&c.hasOwnProperty(\"aud\")&&(c.aud.toLowerCase()===this.config.clientId.toLowerCase()?(b={userName:\"\",profile:c},c.hasOwnProperty(\"upn\")?b.userName=c.upn:c.hasOwnProperty(\"email\")&&(b.userName=c.email)):this.warn(\"IdToken has invalid aud field\")),b},AuthenticationContext.prototype._getHash=function(a){return a.indexOf(\"#/\")>-1?a=a.substring(a.indexOf(\"#/\")+2):a.indexOf(\"#\")>-1&&(a=a.substring(1)),a},AuthenticationContext.prototype.isCallback=function(a){a=this._getHash(a);var b=this._deserialize(a);return b.hasOwnProperty(this.CONSTANTS.ERROR_DESCRIPTION)||b.hasOwnProperty(this.CONSTANTS.ACCESS_TOKEN)||b.hasOwnProperty(this.CONSTANTS.ID_TOKEN)},AuthenticationContext.prototype.getLoginError=function(){return this._getItem(this.CONSTANTS.STORAGE.LOGIN_ERROR)},AuthenticationContext.prototype.getRequestInfo=function(a){a=this._getHash(a);var b=this._deserialize(a),c={valid:!1,parameters:{},stateMatch:!1,stateResponse:\"\",requestType:this.REQUEST_TYPE.UNKNOWN};if(b&&(c.parameters=b,b.hasOwnProperty(this.CONSTANTS.ERROR_DESCRIPTION)||b.hasOwnProperty(this.CONSTANTS.ACCESS_TOKEN)||b.hasOwnProperty(this.CONSTANTS.ID_TOKEN))){c.valid=!0;var d=\"\";if(!b.hasOwnProperty(\"state\"))return this.warn(\"No state returned\"),c;if(this.verbose(\"State: \"+b.state),d=b.state,c.stateResponse=d,this._matchState(c))return c;if(!c.stateMatch&&window.parent){c.requestType=this._requestType;for(var e=this._renewStates,f=0;f<e.length;f++)if(e[f]===c.stateResponse){c.stateMatch=!0;break}}}return c},AuthenticationContext.prototype._matchNonce=function(a){var b=this._getItem(this.CONSTANTS.STORAGE.NONCE_IDTOKEN);if(b){b=b.split(this.CONSTANTS.CACHE_DELIMETER);for(var c=0;c<b.length;c++)if(b[c]===a.profile.nonce)return!0}return!1},AuthenticationContext.prototype._matchState=function(a){var b=this._getItem(this.CONSTANTS.STORAGE.STATE_LOGIN);if(b){b=b.split(this.CONSTANTS.CACHE_DELIMETER);for(var c=0;c<b.length;c++)if(b[c]===a.stateResponse)return a.requestType=this.REQUEST_TYPE.LOGIN,a.stateMatch=!0,!0}var d=this._getItem(this.CONSTANTS.STORAGE.STATE_RENEW);if(d){d=d.split(this.CONSTANTS.CACHE_DELIMETER);for(var c=0;c<d.length;c++)if(d[c]===a.stateResponse)return a.requestType=this.REQUEST_TYPE.RENEW_TOKEN,a.stateMatch=!0,!0}return!1},AuthenticationContext.prototype._getResourceFromState=function(a){if(a){var b=a.indexOf(\"|\");if(b>-1&&b+1<a.length)return a.substring(b+1)}return\"\"},AuthenticationContext.prototype.saveTokenFromHash=function(a){this.info(\"State status:\"+a.stateMatch+\"; Request type:\"+a.requestType),this._saveItem(this.CONSTANTS.STORAGE.ERROR,\"\"),this._saveItem(this.CONSTANTS.STORAGE.ERROR_DESCRIPTION,\"\");var b=this._getResourceFromState(a.stateResponse);if(a.parameters.hasOwnProperty(this.CONSTANTS.ERROR_DESCRIPTION))this.infoPii(\"Error :\"+a.parameters.error+\"; Error description:\"+a.parameters[this.CONSTANTS.ERROR_DESCRIPTION]),this._saveItem(this.CONSTANTS.STORAGE.ERROR,a.parameters.error),this._saveItem(this.CONSTANTS.STORAGE.ERROR_DESCRIPTION,a.parameters[this.CONSTANTS.ERROR_DESCRIPTION]),a.requestType===this.REQUEST_TYPE.LOGIN&&(this._loginInProgress=!1,this._saveItem(this.CONSTANTS.STORAGE.LOGIN_ERROR,a.parameters.error_description));else if(a.stateMatch){this.info(\"State is right\"),a.parameters.hasOwnProperty(this.CONSTANTS.SESSION_STATE)&&this._saveItem(this.CONSTANTS.STORAGE.SESSION_STATE,a.parameters[this.CONSTANTS.SESSION_STATE]);var c;a.parameters.hasOwnProperty(this.CONSTANTS.ACCESS_TOKEN)&&(this.info(\"Fragment has access token\"),this._hasResource(b)||(c=this._getItem(this.CONSTANTS.STORAGE.TOKEN_KEYS)||\"\",this._saveItem(this.CONSTANTS.STORAGE.TOKEN_KEYS,c+b+this.CONSTANTS.RESOURCE_DELIMETER)),this._saveItem(this.CONSTANTS.STORAGE.ACCESS_TOKEN_KEY+b,a.parameters[this.CONSTANTS.ACCESS_TOKEN]),this._saveItem(this.CONSTANTS.STORAGE.EXPIRATION_KEY+b,this._expiresIn(a.parameters[this.CONSTANTS.EXPIRES_IN]))),a.parameters.hasOwnProperty(this.CONSTANTS.ID_TOKEN)&&(this.info(\"Fragment has id token\"),this._loginInProgress=!1,this._user=this._createUser(a.parameters[this.CONSTANTS.ID_TOKEN]),this._user&&this._user.profile?this._matchNonce(this._user)?(this._saveItem(this.CONSTANTS.STORAGE.IDTOKEN,a.parameters[this.CONSTANTS.ID_TOKEN]),b=this.config.loginResource?this.config.loginResource:this.config.clientId,this._hasResource(b)||(c=this._getItem(this.CONSTANTS.STORAGE.TOKEN_KEYS)||\"\",this._saveItem(this.CONSTANTS.STORAGE.TOKEN_KEYS,c+b+this.CONSTANTS.RESOURCE_DELIMETER)),this._saveItem(this.CONSTANTS.STORAGE.ACCESS_TOKEN_KEY+b,a.parameters[this.CONSTANTS.ID_TOKEN]),this._saveItem(this.CONSTANTS.STORAGE.EXPIRATION_KEY+b,this._user.profile.exp)):(this._saveItem(this.CONSTANTS.STORAGE.LOGIN_ERROR,\"Nonce received: \"+this._user.profile.nonce+\" is not same as requested: \"+this._getItem(this.CONSTANTS.STORAGE.NONCE_IDTOKEN)),this._user=null):(a.parameters.error=\"invalid id_token\",a.parameters.error_description=\"Invalid id_token. id_token: \"+a.parameters[this.CONSTANTS.ID_TOKEN],this._saveItem(this.CONSTANTS.STORAGE.ERROR,\"invalid id_token\"),this._saveItem(this.CONSTANTS.STORAGE.ERROR_DESCRIPTION,\"Invalid id_token. id_token: \"+a.parameters[this.CONSTANTS.ID_TOKEN])))}else a.parameters.error=\"Invalid_state\",a.parameters.error_description=\"Invalid_state. state: \"+a.stateResponse,this._saveItem(this.CONSTANTS.STORAGE.ERROR,\"Invalid_state\"),this._saveItem(this.CONSTANTS.STORAGE.ERROR_DESCRIPTION,\"Invalid_state. state: \"+a.stateResponse);this._saveItem(this.CONSTANTS.STORAGE.RENEW_STATUS+b,this.CONSTANTS.TOKEN_RENEW_STATUS_COMPLETED)},AuthenticationContext.prototype.getResourceForEndpoint=function(a){if(this.config&&this.config.anonymousEndpoints)for(var b=0;b<this.config.anonymousEndpoints.length;b++)if(a.indexOf(this.config.anonymousEndpoints[b])>-1)return null;if(this.config&&this.config.endpoints)for(var c in this.config.endpoints)if(a.indexOf(c)>-1)return this.config.endpoints[c];return a.indexOf(\"http://\")>-1||a.indexOf(\"https://\")>-1?this._getHostFromUri(a)===this._getHostFromUri(this.config.redirectUri)?this.config.loginResource:null:this.config.loginResource},AuthenticationContext.prototype._getHostFromUri=function(a){var b=String(a).replace(/^(https?:)\\/\\//,\"\");return b=b.split(\"/\")[0]},AuthenticationContext.prototype.handleWindowCallback=function(a){if(null==a&&(a=window.location.hash),this.isCallback(a)){var b=null,c=!1;this._openedWindows.length>0&&this._openedWindows[this._openedWindows.length-1].opener&&this._openedWindows[this._openedWindows.length-1].opener._adalInstance?(b=this._openedWindows[this._openedWindows.length-1].opener._adalInstance,c=!0):window.parent&&window.parent._adalInstance&&(b=window.parent._adalInstance);var d,e,f=b.getRequestInfo(a),g=null;e=c||window.parent!==window?b._callBackMappedToRenewStates[f.stateResponse]:b.callback,b.info(\"Returned from redirect url\"),b.saveTokenFromHash(f),f.requestType===this.REQUEST_TYPE.RENEW_TOKEN&&window.parent?(window.parent!==window?b.verbose(\"Window is in iframe, acquiring token silently\"):b.verbose(\"acquiring token interactive in progress\"),d=f.parameters[b.CONSTANTS.ACCESS_TOKEN]||f.parameters[b.CONSTANTS.ID_TOKEN],g=b.CONSTANTS.ACCESS_TOKEN):f.requestType===this.REQUEST_TYPE.LOGIN&&(d=f.parameters[b.CONSTANTS.ID_TOKEN],g=b.CONSTANTS.ID_TOKEN);var h=f.parameters[b.CONSTANTS.ERROR_DESCRIPTION],i=f.parameters[b.CONSTANTS.ERROR];try{e&&e(h,d,i,g)}catch(a){b.error(\"Error occurred in user defined callback function: \"+a)}window.parent!==window||c||(b.config.navigateToLoginRequestUrl?window.location.href=b._getItem(b.CONSTANTS.STORAGE.LOGIN_REQUEST):window.location.hash=\"\")}},AuthenticationContext.prototype._getNavigateUrl=function(a,b){var c=\"common\";this.config.tenant&&(c=this.config.tenant);var d=this.instance+c+\"/oauth2/authorize\"+this._serialize(a,this.config,b)+this._addLibMetadata();return this.info(\"Navigate url:\"+d),d},AuthenticationContext.prototype._extractIdToken=function(a){var b=this._decodeJwt(a);if(!b)return null;try{var c=b.JWSPayload,d=this._base64DecodeStringUrlSafe(c);return d?JSON.parse(d):(this.info(\"The returned id_token could not be base64 url safe decoded.\"),null)}catch(a){this.error(\"The returned id_token could not be decoded\",a)}return null},AuthenticationContext.prototype._base64DecodeStringUrlSafe=function(a){return a=a.replace(/-/g,\"+\").replace(/_/g,\"/\"),window.atob?decodeURIComponent(escape(window.atob(a))):decodeURIComponent(escape(this._decode(a)))},AuthenticationContext.prototype._decode=function(a){var b=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";a=String(a).replace(/=+$/,\"\");var c=a.length;if(c%4==1)throw new Error(\"The token to be decoded is not correctly encoded.\");for(var d,e,f,g,h,i,j,k,l=\"\",m=0;m<c;m+=4){if(d=b.indexOf(a.charAt(m)),e=b.indexOf(a.charAt(m+1)),f=b.indexOf(a.charAt(m+2)),g=b.indexOf(a.charAt(m+3)),m+2===c-1){h=d<<18|e<<12|f<<6,i=h>>16&255,j=h>>8&255,l+=String.fromCharCode(i,j);break}if(m+1===c-1){h=d<<18|e<<12,i=h>>16&255,l+=String.fromCharCode(i);break}h=d<<18|e<<12|f<<6|g,i=h>>16&255,j=h>>8&255,k=255&h,l+=String.fromCharCode(i,j,k)}return l},AuthenticationContext.prototype._decodeJwt=function(a){if(this._isEmpty(a))return null;var b=/^([^\\.\\s]*)\\.([^\\.\\s]+)\\.([^\\.\\s]*)$/,c=b.exec(a);return!c||c.length<4?(this.warn(\"The returned id_token is not parseable.\"),null):{header:c[1],JWSPayload:c[2],JWSSig:c[3]}},AuthenticationContext.prototype._convertUrlSafeToRegularBase64EncodedString=function(a){return a.replace(\"-\",\"+\").replace(\"_\",\"/\")},AuthenticationContext.prototype._serialize=function(a,b,c){var d=[];if(null!==b){d.push(\"?response_type=\"+a),d.push(\"client_id=\"+encodeURIComponent(b.clientId)),c&&d.push(\"resource=\"+encodeURIComponent(c)),d.push(\"redirect_uri=\"+encodeURIComponent(b.redirectUri)),d.push(\"state=\"+encodeURIComponent(b.state)),b.hasOwnProperty(\"slice\")&&d.push(\"slice=\"+encodeURIComponent(b.slice)),b.hasOwnProperty(\"extraQueryParameter\")&&d.push(b.extraQueryParameter);var e=b.correlationId?b.correlationId:this._guid();d.push(\"client-request-id=\"+encodeURIComponent(e))}return d.join(\"&\")},AuthenticationContext.prototype._deserialize=function(a){var b,c=/\\+/g,d=/([^&=]+)=([^&]*)/g,e=function(a){return decodeURIComponent(a.replace(c,\" \"))},f={};for(b=d.exec(a);b;)f[e(b[1])]=e(b[2]),b=d.exec(a);return f},AuthenticationContext.prototype._decimalToHex=function(a){for(var b=a.toString(16);b.length<2;)b=\"0\"+b;return b},AuthenticationContext.prototype._guid=function(){var a=window.crypto||window.msCrypto;if(a&&a.getRandomValues){var b=new Uint8Array(16);return a.getRandomValues(b),b[6]|=64,b[6]&=79,b[8]|=128,b[8]&=191,this._decimalToHex(b[0])+this._decimalToHex(b[1])+this._decimalToHex(b[2])+this._decimalToHex(b[3])+\"-\"+this._decimalToHex(b[4])+this._decimalToHex(b[5])+\"-\"+this._decimalToHex(b[6])+this._decimalToHex(b[7])+\"-\"+this._decimalToHex(b[8])+this._decimalToHex(b[9])+\"-\"+this._decimalToHex(b[10])+this._decimalToHex(b[11])+this._decimalToHex(b[12])+this._decimalToHex(b[13])+this._decimalToHex(b[14])+this._decimalToHex(b[15])}for(var c=\"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\",d=\"0123456789abcdef\",e=0,f=\"\",g=0;g<36;g++)\"-\"!==c[g]&&\"4\"!==c[g]&&(e=16*Math.random()|0),\"x\"===c[g]?f+=d[e]:\"y\"===c[g]?(e&=3,e|=8,f+=d[e]):f+=c[g];return f},AuthenticationContext.prototype._expiresIn=function(a){return a||(a=3599),this._now()+parseInt(a,10)},AuthenticationContext.prototype._now=function(){return Math.round((new Date).getTime()/1e3)},AuthenticationContext.prototype._addAdalFrame=function(a){if(void 0!==a){this.info(\"Add adal frame to document:\"+a);var b=document.getElementById(a);if(!b){if(document.createElement&&document.documentElement&&(window.opera||-1===window.navigator.userAgent.indexOf(\"MSIE 5.0\"))){var c=document.createElement(\"iframe\");c.setAttribute(\"id\",a),c.setAttribute(\"aria-hidden\",\"true\"),c.style.visibility=\"hidden\",c.style.position=\"absolute\",c.style.width=c.style.height=c.borderWidth=\"0px\",b=document.getElementsByTagName(\"body\")[0].appendChild(c)}else document.body&&document.body.insertAdjacentHTML&&document.body.insertAdjacentHTML(\"beforeEnd\",'<iframe name=\"'+a+'\" id=\"'+a+'\" style=\"display:none\"></iframe>');window.frames&&window.frames[a]&&(b=window.frames[a])}return b}},AuthenticationContext.prototype._saveItem=function(a,b,c){if(this.config&&this.config.cacheLocation&&\"localStorage\"===this.config.cacheLocation){if(!this._supportsLocalStorage())return this.info(\"Local storage is not supported\"),!1;if(c){var d=this._getItem(a)||\"\";localStorage.setItem(a,d+b+this.CONSTANTS.CACHE_DELIMETER)}else localStorage.setItem(a,b);return!0}return this._supportsSessionStorage()?(sessionStorage.setItem(a,b),!0):(this.info(\"Session storage is not supported\"),!1)},AuthenticationContext.prototype._getItem=function(a){return this.config&&this.config.cacheLocation&&\"localStorage\"===this.config.cacheLocation?this._supportsLocalStorage()?localStorage.getItem(a):(this.info(\"Local storage is not supported\"),null):this._supportsSessionStorage()?sessionStorage.getItem(a):(this.info(\"Session storage is not supported\"),null)},AuthenticationContext.prototype._supportsLocalStorage=function(){try{return!!window.localStorage&&(window.localStorage.setItem(\"storageTest\",\"A\"),\"A\"==window.localStorage.getItem(\"storageTest\")&&(window.localStorage.removeItem(\"storageTest\"),!window.localStorage.getItem(\"storageTest\")))}catch(a){return!1}},AuthenticationContext.prototype._supportsSessionStorage=function(){try{return!!window.sessionStorage&&(window.sessionStorage.setItem(\"storageTest\",\"A\"),\"A\"==window.sessionStorage.getItem(\"storageTest\")&&(window.sessionStorage.removeItem(\"storageTest\"),!window.sessionStorage.getItem(\"storageTest\")))}catch(a){return!1}},AuthenticationContext.prototype._cloneConfig=function(a){if(null===a||\"object\"!=typeof a)return a;var b={};for(var c in a)a.hasOwnProperty(c)&&(b[c]=a[c]);return b},AuthenticationContext.prototype._addLibMetadata=function(){return\"&x-client-SKU=Js&x-client-Ver=\"+this._libVersion()},AuthenticationContext.prototype.log=function(a,b,c,d){if(a<=Logging.level){if(!Logging.piiLoggingEnabled&&d)return;var e=(new Date).toUTCString(),f=\"\";f=this.config.correlationId?e+\":\"+this.config.correlationId+\"-\"+this._libVersion()+\"-\"+this.CONSTANTS.LEVEL_STRING_MAP[a]+\" \"+b:e+\":\"+this._libVersion()+\"-\"+this.CONSTANTS.LEVEL_STRING_MAP[a]+\" \"+b,c&&(f+=\"\\nstack:\\n\"+c.stack),Logging.log(f)}},AuthenticationContext.prototype.error=function(a,b){this.log(this.CONSTANTS.LOGGING_LEVEL.ERROR,a,b)},AuthenticationContext.prototype.warn=function(a){this.log(this.CONSTANTS.LOGGING_LEVEL.WARN,a,null)},AuthenticationContext.prototype.info=function(a){\r\nthis.log(this.CONSTANTS.LOGGING_LEVEL.INFO,a,null)},AuthenticationContext.prototype.verbose=function(a){this.log(this.CONSTANTS.LOGGING_LEVEL.VERBOSE,a,null)},AuthenticationContext.prototype.errorPii=function(a,b){this.log(this.CONSTANTS.LOGGING_LEVEL.ERROR,a,b,!0)},AuthenticationContext.prototype.warnPii=function(a){this.log(this.CONSTANTS.LOGGING_LEVEL.WARN,a,null,!0)},AuthenticationContext.prototype.infoPii=function(a){this.log(this.CONSTANTS.LOGGING_LEVEL.INFO,a,null,!0)},AuthenticationContext.prototype.verbosePii=function(a){this.log(this.CONSTANTS.LOGGING_LEVEL.VERBOSE,a,null,!0)},AuthenticationContext.prototype._libVersion=function(){return\"1.0.17\"},\"undefined\"!=typeof module&&module.exports&&(module.exports=AuthenticationContext,module.exports.inject=function(a){return new AuthenticationContext(a)}),AuthenticationContext}();","/**\n * Class used to subscribe ILogListener and log messages throughout an application\n *\n */\nexport class Logger {\n\n  private static _instance: LoggerImpl;\n\n  /**\n   * Gets or sets the active log level to apply for log filtering\n   */\n  public static get activeLogLevel(): LogLevel {\n    return Logger.instance.activeLogLevel;\n  }\n\n  public static set activeLogLevel(value: LogLevel) {\n    Logger.instance.activeLogLevel = value;\n  }\n\n  private static get instance(): LoggerImpl {\n    if (Logger._instance === undefined || Logger._instance === null) {\n      Logger._instance = new LoggerImpl();\n    }\n    return Logger._instance;\n  }\n\n  /**\n   * Adds ILogListener instances to the set of subscribed listeners\n   *\n   * @param listeners One or more listeners to subscribe to this log\n   */\n  public static subscribe(...listeners: ILogListener[]): void {\n    listeners.forEach(listener => Logger.instance.subscribe(listener));\n  }\n\n  /**\n   * Clears the subscribers collection, returning the collection before modification\n   */\n  public static clearSubscribers(): ILogListener[] {\n    return Logger.instance.clearSubscribers();\n  }\n\n  /**\n   * Gets the current subscriber count\n   */\n  public static get count(): number {\n    return Logger.instance.count;\n  }\n\n  /**\n   * Writes the supplied string to the subscribed listeners\n   *\n   * @param message The message to write\n   * @param level [Optional] if supplied will be used as the level of the entry (Default: LogLevel.Info)\n   */\n  public static write(message: string, level: LogLevel = LogLevel.Info) {\n    Logger.instance.log({ level: level, message: message });\n  }\n\n  /**\n   * Writes the supplied string to the subscribed listeners\n   *\n   * @param json The json object to stringify and write\n   * @param level [Optional] if supplied will be used as the level of the entry (Default: LogLevel.Info)\n   */\n  public static writeJSON(json: any, level: LogLevel = LogLevel.Info) {\n    this.write(JSON.stringify(json), level);\n  }\n\n  /**\n   * Logs the supplied entry to the subscribed listeners\n   *\n   * @param entry The message to log\n   */\n  public static log(entry: ILogEntry) {\n    Logger.instance.log(entry);\n  }\n\n  /**\n   * Logs an error object to the subscribed listeners\n   * \n   * @param err The error object\n   */\n  public static error(err: Error) {\n    Logger.instance.log({ data: err, level: LogLevel.Error, message: err.message });\n  }\n}\n\nclass LoggerImpl {\n\n  constructor(public activeLogLevel: LogLevel = LogLevel.Warning, private subscribers: ILogListener[] = []) { }\n\n  public subscribe(listener: ILogListener): void {\n    this.subscribers.push(listener);\n  }\n\n  public clearSubscribers(): ILogListener[] {\n    const s = this.subscribers.slice(0);\n    this.subscribers.length = 0;\n    return s;\n  }\n\n  public get count(): number {\n    return this.subscribers.length;\n  }\n\n  public write(message: string, level: LogLevel = LogLevel.Info) {\n    this.log({ level: level, message: message });\n  }\n\n  public log(entry: ILogEntry) {\n    if (entry !== undefined && this.activeLogLevel <= entry.level) {\n      this.subscribers.map(subscriber => subscriber.log(entry));\n    }\n  }\n}\n\n/**\n * A set of logging levels\n */\nexport const enum LogLevel {\n  Verbose = 0,\n  Info = 1,\n  Warning = 2,\n  Error = 3,\n  Off = 99,\n}\n\n/**\n * Interface that defines a log entry\n *\n */\nexport interface ILogEntry {\n  /**\n   * The main message to be logged\n   */\n  message: string;\n  /**\n   * The level of information this message represents\n   */\n  level: LogLevel;\n  /**\n   * Any associated data that a given logging listener may choose to log or ignore\n   */\n  data?: any;\n}\n\n/**\n * Interface that defines a log listener\n *\n */\nexport interface ILogListener {\n  /**\n   * Any associated data that a given logging listener may choose to log or ignore\n   *\n   * @param entry The information to be logged\n   */\n  log(entry: ILogEntry): void;\n}\n","import { ILogEntry, LogLevel, ILogListener } from \"./logger\";\n\n/**\n * Implementation of LogListener which logs to the console\n *\n */\nexport class ConsoleListener implements ILogListener {\n\n    /**\n     * Any associated data that a given logging listener may choose to log or ignore\n     *\n     * @param entry The information to be logged\n     */\n    public log(entry: ILogEntry): void {\n\n        const msg = this.format(entry);\n\n        switch (entry.level) {\n            case LogLevel.Verbose:\n            case LogLevel.Info:\n                console.log(msg);\n                break;\n            case LogLevel.Warning:\n                console.warn(msg);\n                break;\n            case LogLevel.Error:\n                console.error(msg);\n                break;\n        }\n    }\n\n    /**\n     * Formats the message\n     *\n     * @param entry The information to format into a string\n     */\n    private format(entry: ILogEntry): string {\n        const msg = [];\n        msg.push(\"Message: \" + entry.message);\n        if (entry.data !== undefined) {\n            try {\n                msg.push(\" Data: \" + JSON.stringify(entry.data));\n            } catch (e) {\n                msg.push(` Data: Error in stringify of supplied data ${e}`);\n            }\n        }\n\n        return msg.join(\"\");\n    }\n}\n\n/**\n * Implementation of LogListener which logs to the supplied function\n *\n */\nexport class FunctionListener implements ILogListener {\n\n    /**\n     * Creates a new instance of the FunctionListener class\n     *\n     * @constructor\n     * @param  method The method to which any logging data will be passed\n     */\n    constructor(private method: (entry: ILogEntry) => void) { }\n\n    /**\n     * Any associated data that a given logging listener may choose to log or ignore\n     *\n     * @param entry The information to be logged\n     */\n    public log(entry: ILogEntry): void {\n        this.method(entry);\n    }\n}\n","import { ITypedHash, mergeMaps, objectToMap, jsS } from \"@pnp/common\";\n\n/**\n * Interface for configuration providers\n *\n */\nexport interface IConfigurationProvider {\n\n    /**\n     * Gets the configuration from the provider\n     */\n    getConfiguration(): Promise<ITypedHash<string>>;\n}\n\n/**\n * Class used to manage the current application settings\n *\n */\nexport class Settings {\n\n    /**\n     * Creates a new instance of the settings class\n     *\n     * @constructor\n     */\n    constructor(private _settings = new Map<string, string>()) {\n    }\n\n    /**\n     * Adds a new single setting, or overwrites a previous setting with the same key\n     *\n     * @param {string} key The key used to store this setting\n     * @param {string} value The setting value to store\n     */\n    public add(key: string, value: string) {\n        this._settings.set(key, value);\n    }\n\n    /**\n     * Adds a JSON value to the collection as a string, you must use getJSON to rehydrate the object when read\n     *\n     * @param {string} key The key used to store this setting\n     * @param {any} value The setting value to store\n     */\n    public addJSON(key: string, value: any) {\n        this._settings.set(key, jsS(value));\n    }\n\n    /**\n     * Applies the supplied hash to the setting collection overwriting any existing value, or created new values\n     *\n     * @param {ITypedHash<any>} hash The set of values to add\n     */\n    public apply(hash: ITypedHash<any>): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            try {\n                this._settings = mergeMaps(this._settings, objectToMap(hash));\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    /**\n     * Loads configuration settings into the collection from the supplied provider and returns a Promise\n     *\n     * @param {IConfigurationProvider} provider The provider from which we will load the settings\n     */\n    public load(provider: IConfigurationProvider): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            provider.getConfiguration().then((value) => {\n                this._settings = mergeMaps(this._settings, objectToMap(value));\n                resolve();\n            }).catch(reject);\n        });\n    }\n\n    /**\n     * Gets a value from the configuration\n     *\n     * @param {string} key The key whose value we want to return. Returns null if the key does not exist\n     * @return {string} string value from the configuration\n     */\n    public get(key: string): string | null {\n        return this._settings.get(key) || null;\n    }\n\n    /**\n     * Gets a JSON value, rehydrating the stored string to the original object\n     *\n     * @param {string} key The key whose value we want to return. Returns null if the key does not exist\n     * @return {any} object from the configuration\n     */\n    public getJSON(key: string): any {\n        const o = this.get(key);\n        if (o === undefined || o === null) {\n            return o;\n        }\n\n        return JSON.parse(o);\n    }\n}\n","import { IConfigurationProvider } from \"../configuration\";\nimport { ITypedHash, IPnPClientStore, PnPClientStorage } from \"@pnp/common\";\n\n/**\n * A caching provider which can wrap other non-caching providers\n *\n */\nexport default class CachingConfigurationProvider implements IConfigurationProvider {\n\n    private store: IPnPClientStore;\n\n    /**\n     * Creates a new caching configuration provider\n     * @constructor\n     * @param {IConfigurationProvider} wrappedProvider Provider which will be used to fetch the configuration\n     * @param {string} cacheKey Key that will be used to store cached items to the cache\n     * @param {IPnPClientStore} cacheStore OPTIONAL storage, which will be used to store cached settings.\n     */\n    constructor(private wrappedProvider: IConfigurationProvider, private cacheKey: string, cacheStore?: IPnPClientStore) {\n        this.wrappedProvider = wrappedProvider;\n        this.store = (cacheStore) ? cacheStore : this.selectPnPCache();\n    }\n\n    /**\n     * Gets the wrapped configuration providers\n     *\n     * @return {IConfigurationProvider} Wrapped configuration provider\n     */\n    public getWrappedProvider(): IConfigurationProvider {\n        return this.wrappedProvider;\n    }\n\n    /**\n     * Loads the configuration values either from the cache or from the wrapped provider\n     *\n     * @return {Promise<ITypedHash<string>>} Promise of loaded configuration values\n     */\n    public getConfiguration(): Promise<ITypedHash<string>> {\n        // Cache not available, pass control to the wrapped provider\n        if ((!this.store) || (!this.store.enabled)) {\n            return this.wrappedProvider.getConfiguration();\n        }\n\n        return this.store.getOrPut(this.cacheKey, () => {\n            return this.wrappedProvider.getConfiguration().then((providedConfig) => {\n                this.store.put(this.cacheKey, providedConfig);\n                return providedConfig;\n            });\n        });\n    }\n\n    private selectPnPCache(): IPnPClientStore {\n        const pnpCache = new PnPClientStorage();\n        if ((pnpCache.local) && (pnpCache.local.enabled)) {\n            return pnpCache.local;\n        }\n        if ((pnpCache.session) && (pnpCache.session.enabled)) {\n            return pnpCache.session;\n        }\n        throw Error(\"Cannot create a caching configuration provider since cache is not available.\");\n    }\n}\n","import { IFetchOptions, getGUID } from \"@pnp/common\";\nimport { IODataParser } from \"./parsers\";\nimport { IQueryable } from \"./queryable\";\nimport { IRequestContext } from \"./pipeline\";\n\nexport interface IODataBatchRequestInfo {\n    url: string;\n    method: string;\n    options: IFetchOptions;\n    parser: IODataParser<any>;\n    resolve: ((d: any) => void) | null;\n    reject: ((error: any) => void) | null;\n    id: string;\n    index: number;\n}\n\nexport abstract class Batch {\n\n    protected _deps: Promise<void>[];\n    protected _reqs: IODataBatchRequestInfo[];\n    protected _rDeps: Promise<void>[];\n    private _index: number;\n\n    constructor(private _batchId = getGUID()) {\n        this._reqs = [];\n        this._deps = [];\n        this._rDeps = [];\n        this._index = -1;\n    }\n\n    public get batchId(): string {\n        return this._batchId;\n    }\n\n    /**\n     * The requests contained in this batch\n     */\n    protected get requests(): IODataBatchRequestInfo[] {\n        // we sort these each time this is accessed\n        return this._reqs.sort((info1, info2) => info1.index - info2.index);\n    }\n\n    /**\n     * Not meant for use directly\n     * \n     * @param batchee The IQueryable for this batch to track in order\n     */\n    public track(batchee: IQueryable<any>): void {\n\n        batchee.data.batch = this;\n\n        // we need to track the order requests are added to the batch to ensure we always\n        // operate on them in order\n        if (typeof batchee.data.batchIndex === \"undefined\" || batchee.data.batchIndex < 0) {\n            batchee.data.batchIndex = ++this._index;\n        }\n    }\n\n    /**\n     * Adds the given request context to the batch for execution\n     * \n     * @param context Details of the request to batch\n     */\n    public add<T = any>(context: IRequestContext<T>): Promise<T> {\n\n        const info: IODataBatchRequestInfo = {\n            id: context.requestId,\n            index: context.batchIndex,\n            method: context.method.toUpperCase(),\n            options: context.options,\n            parser: context.parser,\n            reject: null,\n            resolve: null,\n            url: context.url,\n        };\n\n        // we create a new promise that will be resolved within the batch\n        const p = new Promise<T>((resolve, reject) => {\n            info.resolve = resolve;\n            info.reject = reject;\n        });\n\n        this._reqs.push(info);\n\n        return p;\n    }\n\n    /**\n     * Adds a dependency insuring that some set of actions will occur before a batch is processed.\n     * MUST be cleared using the returned resolve delegate to allow batches to run\n     */\n    public addDependency(): () => void {\n\n        let resolver: () => void = () => void (0);\n\n        this._deps.push(new Promise<void>((resolve) => {\n            resolver = resolve;\n        }));\n\n        return resolver;\n    }\n\n    /**\n     * The batch's execute method will not resolve util any promises added here resolve\n     * \n     * @param p The dependent promise\n     */\n    public addResolveBatchDependency(p: Promise<any>): void {\n        this._rDeps.push(p);\n    }\n\n    /**\n     * Execute the current batch and resolve the associated promises\n     *\n     * @returns A promise which will be resolved once all of the batch's child promises have resolved\n     */\n    public execute(): Promise<void> {\n\n        // we need to check the dependencies twice due to how different engines handle things.\n        // We can get a second set of promises added during the first set resolving\n        return Promise.all(this._deps)\n            .then(() => Promise.all(this._deps))\n            .then(() => this.executeImpl())\n            .then(() => Promise.all(this._rDeps))\n            .then(() => void (0));\n    }\n\n    protected abstract executeImpl(): Promise<void>;\n}\n","import { IODataParser } from \"./parsers\";\nimport { RuntimeConfig, dateAdd, IPnPClientStore, PnPClientStorage } from \"@pnp/common\";\n\nexport interface ICachingOptions {\n    expiration?: Date;\n    storeName?: \"session\" | \"local\";\n    key: string;\n}\n\nexport class CachingOptions implements ICachingOptions {\n\n    protected static storage = new PnPClientStorage();\n\n    constructor(\n        public key: string,\n        public storeName: \"session\" | \"local\" = RuntimeConfig.defaultCachingStore,\n        public expiration = dateAdd(new Date(), \"second\", RuntimeConfig.defaultCachingTimeoutSeconds)) { }\n\n    public get store(): IPnPClientStore {\n        if (this.storeName === \"local\") {\n            return CachingOptions.storage.local;\n        } else {\n            return CachingOptions.storage.session;\n        }\n    }\n}\n\nexport class CachingParserWrapper<T> implements IODataParser<T> {\n\n    constructor(public parser: IODataParser<T>, public cacheOptions: CachingOptions) { }\n\n    public parse(response: Response): Promise<T> {\n        return this.parser.parse(response).then(r => this.cacheData(r));\n    }\n\n    protected cacheData(data: any): any {\n        if (this.cacheOptions.store !== null) {\n            this.cacheOptions.store.put(this.cacheOptions.key, data, this.cacheOptions.expiration);\n        }\n        return data;\n    }\n}\n","/**\n * Adds a property to a target instance\n * \n * @param target The object to whose prototype we will add a property\n * @param name Property name\n * @param factory Factory method used to produce the property value\n * @param path Any additional path required to produce the value\n */\nexport function addProp<T, U>(target: { prototype: any }, name: string, factory: (arg: U, p?: string) => T, path?: string): void {\n\n    Reflect.defineProperty(target.prototype, name, {\n        configurable: true,\n        enumerable: true,\n        get: function (this: U): T {\n            return factory(this, path);\n        },\n    });\n}\n","import { isFunc, isArray, ITypedHash } from \"@pnp/common\";\n\nexport type ValidProxyMethods = \"apply\" | \"get\" | \"has\" | \"set\";\n\nexport type ExtensionDelegateType<T extends object> = { (op: string, target: T, ...rest: any[]): void };\n\nexport type ExtensionType<T extends object = {}> = Pick<ProxyHandler<T>, ValidProxyMethods> | ExtensionDelegateType<T> | ITypedHash<any>;\n\nlet _enableExtensions = false;\nconst globaExtensions: ExtensionType[] = [];\n\nconst ObjExtensionsSym = Symbol(\"__extensions\");\n\n/**\n * Creates global extensions across all invokable objects\n * \n * @param e The global extensions to apply\n */\nexport const extendGlobal = (e: ExtensionType | ExtensionType[]) => {\n\n    _enableExtensions = true;\n    extendCol(globaExtensions, e);\n};\n\n/**\n * Applies the supplied extensions to a single instance\n * \n * @param target Object to which extensions are applied\n * @param extensions Extensions to apply\n */\nexport const extendObj = <T extends object>(target: T, extensions: ExtensionType | ExtensionType[]): T => {\n\n    _enableExtensions = true;\n\n    if (!Reflect.has(target, ObjExtensionsSym)) {\n        Reflect.set(target, ObjExtensionsSym, []);\n    }\n\n    extendCol(<ExtensionType[]>Reflect.get(target, ObjExtensionsSym), extensions);\n\n    return target;\n};\n\n/**\n * Allows applying extensions to all instances created from the supplied factory\n * \n * @param factory The Invokable Factory method to extend\n * @param extensions Extensions to apply\n */\nexport const extendFactory = <T extends (...args: any[]) => any>(factory: T, extensions: ExtensionType | ExtensionType[]): void => {\n\n    _enableExtensions = true;\n\n    if ((<any>factory).__proto__[ObjExtensionsSym] === undefined) {\n        (<any>factory).__proto__[ObjExtensionsSym] = [];\n    }\n\n    extendCol((<any>factory).__proto__[ObjExtensionsSym], extensions);\n};\n\nfunction extendCol(a: ExtensionType[], e: ExtensionType | ExtensionType[]) {\n    if (isArray(e)) {\n        // @ts-ignore\n        a.push(...e);\n    } else {\n        // @ts-ignore\n        a.push(e);\n    }\n}\n\n/**\n * Clears all global extensions\n */\nexport const clearGlobalExtensions = () => {\n    globaExtensions.length = 0;\n};\n\n/**\n * Disables all extensions\n */\nexport const disableExtensions = () => {\n    _enableExtensions = false;\n};\n\n/**\n * Enables all extensions\n */\nexport const enableExtensions = () => {\n    _enableExtensions = true;\n};\n\n/**\n * Applies a set of extension previously applied to a factory using extendFactory to an object created from that factory\n * \n * @param factory \n * @param args \n */\nexport const applyFactoryExtensions = <T extends object = {}>(factory: (args: any[]) => T, args: any[]): T => {\n\n    let o = factory(args);\n\n    if ((<any>factory).__proto__[ObjExtensionsSym]) {\n        o = extendObj(o, (<any>factory).__proto__[ObjExtensionsSym]);\n    }\n\n    return o;\n};\n\nexport function extensionOrDefault(op: ValidProxyMethods, or: (...args: any[]) => any, target: any, ...rest: any[]): any {\n\n    if (_enableExtensions) {\n\n        const extensions: ExtensionType[] = [];\n\n        // we need to first invoke extensions tied to only this object\n        if (Reflect.has(target, ObjExtensionsSym)) {\n            extensions.push(...Reflect.get(target, ObjExtensionsSym));\n        }\n\n        // second we need to process any global extensions\n        extensions.push(...globaExtensions);\n\n        for (let i = 0; i < extensions.length; i++) {\n            const extension = extensions[i];\n\n            let result = undefined;\n\n            if (isFunc(extension)) {\n\n                // this extension is a function which we call\n                result = (<any>extension)(op, target, ...rest);\n\n            } else if (op === \"get\" && Reflect.has(extension, rest[0])) {\n\n                // this extension is a named extension meaning we are overriding a specific method/property\n                result = Reflect.get(extension, rest[0], target);\n\n            } else if (Reflect.has(extension, op)) {\n\n                // this extension is a ProxyHandler that has a handler defined for {op} so we pass control and see if we get a result\n                result = Reflect.get(extension, op)(target, ...rest);\n            }\n\n            if (typeof result !== \"undefined\") {\n                // if a extension returned a result, we return that\n                // this means that this extension overrides any other extensions and no more are executed\n                // first extension in the list to return \"wins\"\n                return result;\n            }\n        }\n    }\n\n    return or(target, ...rest);\n}\n","import { IQueryable } from \"./queryable\";\nimport { IRequestContext } from \"./pipeline\";\nimport { IFetchOptions, RuntimeConfig } from \"@pnp/common\";\nimport { extensionOrDefault, applyFactoryExtensions } from \"./invokable-extensions\";\n\nexport type IHybrid<R = any, T = any> = T & {\n    (this: T, ...args: any[]): Promise<R>;\n};\n\nexport type IInvoker<R> = (this: IQueryable<any>, ...args: any[]) => Promise<R>;\n\nconst invokableBinder = (invoker: IInvoker<IQueryable<any>>) => <R>(constructor: { new(...args: any[]): any }): (...args: any[]) => R => {\n\n    return (...args: any[]) => {\n\n        const factory = (as: any[]) => {\n            const r = Object.assign(function (...ags: any[]) { return invoker.apply(r, ags); }, new constructor(...as));\n            Reflect.setPrototypeOf(r, constructor.prototype);\n            return r;\n        };\n\n        if (RuntimeConfig.ie11) {\n\n            return factory(args);\n        } else {\n\n            return new Proxy<IHybrid<R>>(applyFactoryExtensions(factory, args), {\n                apply: (target: any, _thisArg: any, argArray?: any) => {\n                    return extensionOrDefault(\"apply\", (...a: any[]) => Reflect.apply(a[0], a[1], a[2]), target, _thisArg, argArray);\n                },\n                get: (target: any, p: PropertyKey, receiver: any) => {\n                    return extensionOrDefault(\"get\", (...a: any[]) => Reflect.get(a[0], a[1], a[2]), target, p, receiver);\n                },\n                has: (target: any, p: PropertyKey) => {\n                    return extensionOrDefault(\"has\", (...a: any[]) => Reflect.has(a[0], a[1]), target, p);\n                },\n                set: (target: any, p: PropertyKey, value: any, receiver: any) => {\n                    return extensionOrDefault(\"set\", (...a: any[]) => Reflect.set(a[0], a[1], a[2], a[3]), target, p, value, receiver);\n                },\n            });\n        }\n    };\n};\n\nexport const invokableFactory = invokableBinder(function <R = any>(this: IQueryable<R>, options?: IFetchOptions): Promise<R> {\n    return this.defaultAction(options);\n});\n\nexport interface IInvokable<R = any> {\n    <T = R>(options?: Partial<IRequestContext<T>>): Promise<T>;\n}\n","import { isFunc, hOP } from \"@pnp/common\";\n\nexport interface IODataParser<T> {\n    hydrate?: (d: any) => T;\n    parse(r: Response): Promise<T>;\n}\n\nexport class ODataParser<T = any> implements IODataParser<T> {\n\n    public parse(r: Response): Promise<T> {\n\n        return new Promise<T>((resolve, reject) => {\n\n            if (this.handleError(r, reject)) {\n\n                this.parseImpl(r, resolve, reject);\n            }\n        });\n    }\n\n    protected parseImpl(r: Response, resolve: (value?: T | PromiseLike<T>) => void, reject: (reason?: Error) => void): void {\n\n        if ((r.headers.has(\"Content-Length\") && parseFloat(r.headers.get(\"Content-Length\")!) === 0) || r.status === 204) {\n\n            resolve(<T>{});\n        } else {\n\n            // patch to handle cases of 200 response with no or whitespace only bodies (#487 & #545)\n            r.text()\n                .then(txt => txt.replace(/\\s/ig, \"\").length > 0 ? JSON.parse(txt) : {})\n                .then(json => resolve(this.parseODataJSON<T>(json)))\n                .catch(e => reject(e));\n        }\n    }\n\n    /**\n     * Handles a response with ok === false by parsing the body and creating a ProcessHttpClientResponseException\n     * which is passed to the reject delegate. This method returns true if there is no error, otherwise false\n     *\n     * @param r Current response object\n     * @param reject reject delegate for the surrounding promise\n     */\n    protected handleError(r: Response, reject: (err?: Error) => void): boolean {\n\n        if (!r.ok) {\n            HttpRequestError.init(r).then(reject);\n        }\n\n        return r.ok;\n    }\n\n    /**\n     * Normalizes the json response by removing the various nested levels\n     *\n     * @param json json object to parse\n     */\n    protected parseODataJSON<U>(json: any): U {\n\n        let result = json;\n\n        if (hOP(json, \"d\")) {\n\n            if (hOP(json.d, \"results\")) {\n\n                result = json.d.results;\n            } else {\n\n                result = json.d;\n            }\n        } else if (hOP(json, \"value\")) {\n\n            result = json.value;\n        }\n\n        return result;\n    }\n}\n\nexport class TextParser extends ODataParser<string> {\n\n    protected parseImpl(r: Response, resolve: (value: any) => void): void {\n\n        r.text().then(resolve);\n    }\n}\n\nexport class BlobParser extends ODataParser<Blob> {\n\n    protected parseImpl(r: Response, resolve: (value: any) => void): void {\n\n        r.blob().then(resolve);\n    }\n}\n\nexport class JSONParser extends ODataParser<any> {\n\n    protected parseImpl(r: Response, resolve: (value: any) => void): void {\n\n        r.json().then(resolve);\n    }\n}\n\nexport class BufferParser extends ODataParser<ArrayBuffer> {\n\n    protected parseImpl(r: Response, resolve: (value: any) => void): void {\n\n        if (isFunc(r.arrayBuffer)) {\n\n            r.arrayBuffer().then(resolve);\n        } else {\n\n            (<any>r).buffer().then(resolve);\n        }\n    }\n}\n\nexport class LambdaParser<T = any> extends ODataParser<T> {\n\n    constructor(private parser: (r: Response) => Promise<T>) {\n        super();\n    }\n\n    protected parseImpl(r: Response, resolve: (value: any) => void): void {\n\n        this.parser(r).then(resolve);\n    }\n}\n\nexport class HttpRequestError extends Error {\n\n    public isHttpRequestError = true;\n\n    constructor(message: string, public response: Response, public status = response.status, public statusText = response.statusText) {\n        super(message);\n    }\n\n    public static async init(r: Response): Promise<HttpRequestError> {\n\n        const t = await r.clone().text();\n        return new HttpRequestError(`Error making HttpClient request in queryable [${r.status}] ${r.statusText} ::> ${t}`, r.clone());\n    }\n}\n","import {\n    combine,\n    RuntimeConfig,\n    IFetchOptions,\n    IConfigOptions,\n    mergeOptions,\n    objectDefinedNotNull,\n    IRequestClient,\n} from \"@pnp/common\";\nimport { ICachingOptions } from \"./caching\";\nimport { Batch } from \"./batch\";\nimport { PipelineMethod } from \"./pipeline\";\nimport { IODataParser, ODataParser } from \"./parsers\";\n\nexport function cloneQueryableData(source: Partial<IQueryableData>): Partial<IQueryableData> {\n\n    const s = JSON.stringify(source, (key: string, value: any) => {\n\n        switch (key) {\n            case \"query\":\n                return JSON.stringify([...(<Map<string, string>>value)]);\n            case \"batch\":\n                return \"-\";\n            case \"batchDependency\":\n                return \"-\";\n            case \"cachingOptions\":\n                return \"-\";\n            case \"clientFactory\":\n                return \"-\";\n            case \"parser\":\n                return \"-\";\n            default:\n                return value;\n        }\n    }, 0);\n\n    const parsed = JSON.parse(s, (key: any, value: any) => {\n        switch (key) {\n            case \"query\":\n                return new Map(JSON.parse(value));\n            case \"batch\":\n                return source.batch;\n            case \"batchDependency\":\n                return source.batchDependency;\n            case \"cachingOptions\":\n                return source.cachingOptions;\n            case \"clientFactory\":\n                return source.clientFactory;\n            case \"parser\":\n                return source.parser;\n            default:\n                return value;\n        }\n    });\n\n    // this handles bodies that cannot be JSON encoded (Blob, etc)\n    if (source.options && source.options.body) {\n        parsed.options.body = source.options.body;\n    }\n\n    return parsed;\n}\n\nexport interface IQueryableData<DefaultActionType = any> {\n    batch: Batch | null;\n    batchIndex: number;\n    batchDependency: () => void | null;\n    cachingOptions: ICachingOptions | null;\n    cloneParentCacheOptions: ICachingOptions | null;\n    cloneParentWasCaching: boolean;\n    query: Map<string, string>;\n    options: IFetchOptions | null;\n    url: string;\n    parentUrl: string;\n    useCaching: boolean;\n    pipes?: PipelineMethod<DefaultActionType>[];\n    parser?: IODataParser<DefaultActionType>;\n    clientFactory?: () => IRequestClient;\n    method?: string;\n}\n\nexport interface IQueryable<DefaultActionType> {\n    data: Partial<IQueryableData<DefaultActionType>>;\n    query: Map<string, string>;\n    append(pathPart: string): void;\n    inBatch(batch: Batch): this;\n    addBatchDependency(): () => void;\n    toUrlAndQuery(): string;\n    toUrl(): string;\n    concat(pathPart: string): this;\n    configure(options: IConfigOptions): this;\n    configureFrom(o: IQueryable<DefaultActionType>): this;\n    usingCaching(options?: ICachingOptions): this;\n    usingParser(parser: IODataParser<any>): this;\n    withPipeline(pipeline: PipelineMethod<DefaultActionType>[]): this;\n    defaultAction(options?: IFetchOptions): Promise<DefaultActionType>;\n}\n\nexport abstract class Queryable<DefaultActionType = any> implements IQueryable<DefaultActionType> {\n\n    private _data: Partial<IQueryableData<DefaultActionType>>;\n\n    constructor(dataSeed: Partial<IQueryableData<DefaultActionType>> = {}) {\n\n        this._data = Object.assign({}, {\n            cloneParentWasCaching: false,\n            options: {},\n            parentUrl: \"\",\n            parser: new ODataParser<DefaultActionType>(),\n            query: new Map<string, string>(),\n            url: \"\",\n            useCaching: false,\n        }, cloneQueryableData(dataSeed));\n    }\n\n    public get data(): Partial<IQueryableData<DefaultActionType>> {\n        return this._data;\n    }\n\n    public set data(value: Partial<IQueryableData<DefaultActionType>>) {\n        this._data = Object.assign({}, cloneQueryableData(this.data), cloneQueryableData(value));\n    }\n\n    /**\n     * Gets the full url with query information\n     *\n     */\n    public abstract toUrlAndQuery(): string;\n\n    /**\n     * The default action for this \n     */\n    public abstract defaultAction(options?: IFetchOptions): Promise<DefaultActionType>;\n\n    /**\n    * Gets the currentl url\n    *\n    */\n    public toUrl(): string {\n        return this.data.url;\n    }\n\n    /**\n     * Directly concatonates the supplied string to the current url, not normalizing \"/\" chars\n     *\n     * @param pathPart The string to concatonate to the url\n     */\n    public concat(pathPart: string): this {\n        this.data.url += pathPart;\n        return this;\n    }\n\n    /**\n     * Provides access to the query builder for this url\n     *\n     */\n    public get query(): Map<string, string> {\n        return this.data.query;\n    }\n\n    /**\n     * Sets custom options for current object and all derived objects accessible via chaining\n     * \n     * @param options custom options\n     */\n    public configure(options: IConfigOptions): this {\n        mergeOptions(this.data.options, options);\n        return this;\n    }\n\n    /**\n     * Configures this instance from the configure options of the supplied instance\n     * \n     * @param o Instance from which options should be taken\n     */\n    public configureFrom(o: IQueryable<any>): this {\n        mergeOptions(this.data.options, o.data.options);\n        return this;\n    }\n\n    /**\n     * Enables caching for this request\n     *\n     * @param options Defines the options used when caching this request\n     */\n    public usingCaching(options?: ICachingOptions): this {\n        if (!RuntimeConfig.globalCacheDisable) {\n            this.data.useCaching = true;\n            if (options !== undefined) {\n                this.data.cachingOptions = options;\n            }\n        }\n        return this;\n    }\n\n    public usingParser(parser: IODataParser<any>): this {\n        this.data.parser = parser;\n        return this;\n    }\n\n    /**\n     * Allows you to set a request specific processing pipeline\n     * \n     * @param pipeline The set of methods, in order, to execute a given request\n     */\n    public withPipeline(pipeline: PipelineMethod<DefaultActionType>[]): this {\n        this.data.pipes = pipeline.slice(0);\n        return this;\n    }\n\n    /**\n     * Appends the given string and normalizes \"/\" chars\n     *\n     * @param pathPart The string to append\n     */\n    public append(pathPart: string): void {\n        this.data.url = combine(this.data.url, pathPart);\n    }\n\n    /**\n     * Adds this query to the supplied batch\n     *\n     * @example\n     * ```\n     *\n     * let b = pnp.sp.createBatch();\n     * pnp.sp.web.inBatch(b).get().then(...);\n     * b.execute().then(...)\n     * ```\n     */\n    public inBatch(batch: Batch): this {\n\n        if (this.hasBatch) {\n            throw Error(\"This query is already part of a batch.\");\n        }\n\n        if (objectDefinedNotNull(batch)) {\n            batch.track(this);\n        }\n\n        return this;\n    }\n\n    /**\n     * Blocks a batch call from occuring, MUST be cleared by calling the returned function\n    */\n    public addBatchDependency(): () => void {\n        if (objectDefinedNotNull(this.data.batch)) {\n            return this.data.batch.addDependency();\n        }\n\n        return () => null;\n    }\n\n    /**\n     * Indicates if the current query has a batch associated\n     *\n     */\n    protected get hasBatch(): boolean {\n        return objectDefinedNotNull(this.data.batch);\n    }\n\n    /**\n     * The batch currently associated with this query or null\n     *\n     */\n    protected get batch(): Batch | null {\n        return this.hasBatch ? this.data.batch : null;\n    }\n\n    /**\n     * Gets the parent url used when creating this instance\n     *\n     */\n    protected get parentUrl(): string {\n        return this.data.parentUrl;\n    }\n\n    /**\n     * Clones this instance's data to target\n     * \n     * @param target Instance to which data is written\n     * @param settings [Optional] Settings controlling how clone is applied\n     */\n    protected cloneTo<T extends IQueryable<any>>(target: T, settings: { includeBatch: boolean } = { includeBatch: true }): T {\n\n        target.data = Object.assign({}, cloneQueryableData(this.data), <Partial<IQueryableData<DefaultActionType>>>{\n            batch: null,\n            cloneParentCacheOptions: null,\n            cloneParentWasCaching: false,\n        }, cloneQueryableData(target.data));\n\n        target.configureFrom(this);\n\n        if (settings.includeBatch) {\n            target.inBatch(this.batch);\n        }\n\n        if (this.data.useCaching) {\n            target.data.cloneParentWasCaching = true;\n            target.data.cloneParentCacheOptions = this.data.cachingOptions;\n        }\n\n        return target;\n    }\n}\n","import { IRequestClient, assign, isFunc, hOP } from \"@pnp/common\";\nimport { LogLevel, Logger } from \"@pnp/logging\";\nimport { CachingOptions, CachingParserWrapper } from \"./caching\";\nimport { IQueryableData } from \"./queryable\";\n\n/**\n * Defines the context for a given request to be processed in the pipeline\n */\nexport interface IRequestContext<ReturnType> extends IQueryableData<ReturnType> {\n    result?: ReturnType;\n    clientFactory: () => IRequestClient;\n    hasResult: boolean;\n    isBatched: boolean;\n    requestId: string;\n    method: string;\n}\n\nexport type PipelineMethod<ReturnType> = (c: IRequestContext<ReturnType>) => Promise<IRequestContext<ReturnType>>;\n\n/**\n * Resolves the context's result value\n *\n * @param context The current context\n */\nfunction returnResult<T = any>(context: IRequestContext<T>): Promise<T> {\n\n    Logger.log({\n        data: Logger.activeLogLevel === LogLevel.Verbose ? context.result : {},\n        level: LogLevel.Info,\n        message: `[${context.requestId}] (${(new Date()).getTime()}) Returning result from pipeline. Set logging to verbose to see data.`,\n    });\n\n    return Promise.resolve(context.result!);\n}\n\n/**\n * Sets the result on the context\n */\nexport function setResult<T = any>(context: IRequestContext<T>, value: any): Promise<IRequestContext<T>> {\n\n    return new Promise<IRequestContext<T>>((resolve) => {\n\n        context.result = value;\n        context.hasResult = true;\n        resolve(context);\n    });\n}\n\n/**\n * Invokes the next method in the provided context's pipeline\n *\n * @param c The current request context\n */\nfunction next<T = any>(c: IRequestContext<T>): Promise<IRequestContext<T>> {\n\n    return c.pipes.length > 0 ? c.pipes.shift()(c) : Promise.resolve(c);\n}\n\n/**\n * Executes the current request context's pipeline\n *\n * @param context Current context\n */\nexport function pipe<T = any>(context: IRequestContext<T>): Promise<T> {\n\n    if (context.pipes.length < 1) {\n        Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Request pipeline contains no methods!`, LogLevel.Error);\n        throw Error(\"Request pipeline contains no methods!\");\n    }\n\n    const promise = next(context).then(ctx => returnResult(ctx)).catch((e: Error) => {\n        Logger.error(e);\n        throw e;\n    });\n\n    if (context.isBatched) {\n        // this will block the batch's execute method from returning until the child requets have been resolved\n        context.batch.addResolveBatchDependency(promise);\n    }\n\n    return promise;\n}\n\n/**\n * decorator factory applied to methods in the pipeline to control behavior\n */\nexport function requestPipelineMethod(alwaysRun = false) {\n\n    return (target: any, propertyKey: string, descriptor: PropertyDescriptor) => {\n\n        const method = descriptor.value;\n\n        descriptor.value = function (...args: any[]) {\n\n            // if we have a result already in the pipeline, pass it along and don't call the tagged method\n            if (!alwaysRun && args.length > 0 && hOP(args[0], \"hasResult\") && args[0].hasResult) {\n                Logger.write(`[${args[0].requestId}] (${(new Date()).getTime()}) Skipping request pipeline method ${propertyKey}, existing result in pipeline.`, LogLevel.Verbose);\n                return Promise.resolve(args[0]);\n            }\n\n            // apply the tagged method\n            Logger.write(`[${args[0].requestId}] (${(new Date()).getTime()}) Calling request pipeline method ${propertyKey}.`, LogLevel.Verbose);\n\n            // then chain the next method in the context's pipeline - allows for dynamic pipeline\n            return method.apply(target, args).then((ctx: IRequestContext<any>) => next(ctx));\n        };\n    };\n}\n\n/**\n * Contains the methods used within the request pipeline\n */\nexport class PipelineMethods {\n\n    /**\n     * Logs the start of the request\n     */\n    @requestPipelineMethod(true)\n    public static logStart<T = any>(context: IRequestContext<T>): Promise<IRequestContext<T>> {\n        return new Promise<IRequestContext<T>>(resolve => {\n\n            Logger.log({\n                data: Logger.activeLogLevel === LogLevel.Info ? {} : context,\n                level: LogLevel.Info,\n                message: `[${context.requestId}] (${(new Date()).getTime()}) Beginning ${context.method} request (${context.url})`,\n            });\n\n            resolve(context);\n        });\n    }\n\n    /**\n     * Handles caching of the request\n     */\n    @requestPipelineMethod()\n    public static caching<T = any>(context: IRequestContext<T>): Promise<IRequestContext<T>> {\n\n        return new Promise<IRequestContext<T>>(resolve => {\n\n            // handle caching, if applicable\n            if (context.useCaching) {\n\n                Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Caching is enabled for request, checking cache...`, LogLevel.Info);\n\n                let cacheOptions = new CachingOptions(context.url.toLowerCase());\n                if (context.cachingOptions !== undefined) {\n                    cacheOptions = assign(cacheOptions, context.cachingOptions);\n                }\n\n                // we may not have a valid store\n                if (cacheOptions.store !== null) {\n\n                    // check if we have the data in cache and if so resolve the promise and return\n                    let data = cacheOptions.store.get(cacheOptions.key);\n\n                    if (data !== null) {\n\n                        Logger.log({\n                            data: Logger.activeLogLevel === LogLevel.Info ? {} : data,\n                            level: LogLevel.Info,\n                            message: `[${context.requestId}] (${(new Date()).getTime()}) Value returned from cache.`,\n                        });\n\n                        // ensure we clear any held batch dependency we are resolving from the cache\n                        if (isFunc(context.batchDependency)) {\n                            context.batchDependency();\n                        }\n                        // handle the case where a parser needs to take special actions with a cached result\n                        if (hOP(context.parser, \"hydrate\")) {\n                            data = context.parser.hydrate(data);\n                        }\n                        return setResult(context, data).then(ctx => resolve(ctx));\n                    }\n                }\n\n                Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Value not found in cache.`, LogLevel.Info);\n\n                // if we don't then wrap the supplied parser in the caching parser wrapper\n                // and send things on their way\n                context.parser = new CachingParserWrapper(context.parser, cacheOptions);\n            }\n\n            return resolve(context);\n        });\n    }\n\n    /**\n     * Sends the request\n     */\n    @requestPipelineMethod()\n    public static send<T = any>(context: IRequestContext<T>): Promise<IRequestContext<T>> {\n\n        return new Promise<IRequestContext<T>>((resolve, reject) => {\n            // send or batch the request\n            if (context.isBatched) {\n\n                const p = context.batch.add(context);\n\n                // we release the dependency here to ensure the batch does not execute until the request is added to the batch\n                if (isFunc(context.batchDependency)) {\n                    context.batchDependency();\n                }\n\n                Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Batching request in batch ${context.batch.batchId}.`, LogLevel.Info);\n\n                // we set the result as the promise which will be resolved by the batch's execution\n                resolve(setResult(context, p));\n\n            } else {\n\n                Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Sending request.`, LogLevel.Info);\n\n                // we are not part of a batch, so proceed as normal\n                const client = context.clientFactory();\n                const opts = assign(context.options || {}, { method: context.method });\n                client.fetch(context.url, opts)\n                    .then(response => context.parser.parse(response))\n                    .then(result => setResult(context, result))\n                    .then(ctx => resolve(ctx))\n                    .catch(e => reject(e));\n            }\n        });\n    }\n\n    /**\n     * Logs the end of the request\n     */\n    @requestPipelineMethod(true)\n    public static logEnd<T = any>(context: IRequestContext<T>): Promise<IRequestContext<T>> {\n\n        return new Promise<IRequestContext<T>>(resolve => {\n\n            if (context.isBatched) {\n\n                Logger.log({\n                    data: Logger.activeLogLevel === LogLevel.Info ? {} : context,\n                    level: LogLevel.Info,\n                    message: `[${context.requestId}] (${(new Date()).getTime()}) ${context.method} request will complete in batch ${context.batch.batchId}.`,\n                });\n\n            } else {\n\n                Logger.log({\n                    data: Logger.activeLogLevel === LogLevel.Info ? {} : context,\n                    level: LogLevel.Info,\n                    message: `[${context.requestId}] (${(new Date()).getTime()}) Completing ${context.method} request.`,\n                });\n            }\n\n            resolve(context);\n        });\n    }\n}\n\nexport function getDefaultPipeline() {\n    return [\n        PipelineMethods.logStart,\n        PipelineMethods.caching,\n        PipelineMethods.send,\n        PipelineMethods.logEnd,\n    ].slice(0);\n}\n","import { IODataParser, ODataParser } from \"./parsers\";\nimport { IFetchOptions, IRequestClient, getGUID, objectDefinedNotNull } from \"@pnp/common\";\nimport { IQueryableData, cloneQueryableData } from \"./queryable\";\nimport { PipelineMethod, pipe, getDefaultPipeline } from \"./pipeline\";\n\nexport interface IRequestOptions<T> extends IFetchOptions {\n    parser: IODataParser<T>;\n}\n\nexport interface IClientFactoryBinder {\n    (clientFactory: () => IRequestClient): IMethodBinder;\n}\n\nexport interface IPipelineBinder {\n    (pipeline: PipelineMethod<any>[]): IClientFactoryBinder;\n}\n\nexport interface IMethodBinder {\n    (method: string): IOperation;\n}\n\nexport interface IOperation {\n    <ReturnType>(o: Partial<IQueryableData<ReturnType>>): Promise<ReturnType>;\n}\n\n// first we bind the pipeline we will use for all requests within this closure\nexport function pipelineBinder(pipes: PipelineMethod<any>[]): IClientFactoryBinder {\n\n    // then we bind the client factory we'll use (typically done in an implementing library such as sp)\n    return function (clientFactory: () => IRequestClient): IMethodBinder {\n\n        // then we create a binder we can apply for each type of method (GET, POST, etc.)\n        return function (method: string): IOperation {\n\n            // finally we get a function back to which we can pass an IQueryableData instance and execute the request it defines\n            return function <ReturnType = any>(o: Partial<IQueryableData<ReturnType>>): Promise<ReturnType> {\n\n                // send the IQueryableData down the pipeline\n                return pipe(Object.assign({}, {\n                    batch: null,\n                    batchDependency: null,\n                    batchIndex: -1,\n                    cachingOptions: null,\n                    clientFactory,\n                    cloneParentCacheOptions: null,\n                    cloneParentWasCaching: false,\n                    hasResult: false,\n                    isBatched: objectDefinedNotNull(o.batch),\n                    method,\n                    options: null,\n                    parentUrl: \"\",\n                    parser: new ODataParser<ReturnType>(),\n                    pipes: pipes.slice(0),\n                    query: new Map<string, string>(),\n                    requestId: getGUID(),\n                    url: \"\",\n                    useCaching: /^get$/i.test(o.method) && o.useCaching,\n                }, cloneQueryableData(o)));\n            };\n        };\n    };\n}\n\nexport const defaultPipelineBinder: IClientFactoryBinder = pipelineBinder(getDefaultPipeline());\n","import { jsS, ITypedHash } from \"@pnp/common\";\n\nexport function body<T = unknown, U = any>(o: U, previous?: T): T & { body: string } {\n    return Object.assign({ body: jsS(o) }, previous);\n}\n\nexport function headers<T = unknown, U extends ITypedHash<string> = {}>(o: U, previous?: T): T & { headers: U } {\n    return Object.assign({ headers: o }, previous);\n}\n","export function metadata(type: string) {\n    return {\n        \"__metadata\": { \"type\": type },\n    };\n}\n","import { stringIsNullOrEmpty } from \"@pnp/common\";\n\nexport function extractWebUrl(candidateUrl: string): string {\n\n    if (stringIsNullOrEmpty(candidateUrl)) {\n        return \"\";\n    }\n\n    let index = candidateUrl.indexOf(\"_api/\");\n\n    if (index < 0) {\n        index = candidateUrl.indexOf(\"_vti_bin/\");\n    }\n\n    if (index > -1) {\n        return candidateUrl.substr(0, index);\n    }\n\n    // if all else fails just give them what they gave us back\n    return candidateUrl;\n}\n","import { ISharePointQueryable } from \"./sharepointqueryable\";\nimport { stringIsNullOrEmpty } from \"@pnp/common\";\nimport { headers } from \"@pnp/odata\";\n\n/**\n * Includes this method name in the X-ClientService-ClientTag used to record pnpjs usage\n * \n * @param name Method name, displayed in the \n */\nexport function tag(name: string) {\n    return function (target: any, key: string, descriptor: PropertyDescriptor) {\n\n        if (descriptor === undefined) {\n            descriptor = Object.getOwnPropertyDescriptor(target, key);\n        }\n        const originalMethod = descriptor.value;\n\n        descriptor.value = async function (this: ISharePointQueryable, ...args: any[]) {\n\n            this.configure(headers({ \"X-PnPjs-Tracking\": name }));\n            return originalMethod.apply(this, args);\n        };\n\n        return descriptor;\n    };\n}\ntag.getClientTag = (h: Headers, deleteFromCollection = true): string => {\n    if (h.has(\"X-PnPjs-Tracking\")) {\n        const methodName = h.get(\"X-PnPjs-Tracking\");\n        if (deleteFromCollection) {\n            h.delete(\"X-PnPjs-Tracking\");\n        }\n        if (!stringIsNullOrEmpty(methodName)) {\n            return methodName;\n        }\n    }\n    return \"\";\n};\ntag.configure = <T extends ISharePointQueryable>(o: T, name: string): T => {\n    return o.configure(headers({ \"X-PnPjs-Tracking\": name }));\n};\ntag.isTagged = <T extends ISharePointQueryable>(o: T): T => {\n    return o.data.options.headers && o.data.options.headers[\"X-PnPjs-Tracking\"];\n};\n","import {\n    assign,\n    mergeHeaders,\n    IFetchOptions,\n    IRequestClient,\n    getCtxCallback,\n    IHttpClientImpl,\n    combine,\n    dateAdd,\n} from \"@pnp/common\";\nimport { SPRuntimeConfig } from \"./splibconfig\";\nimport { extractWebUrl } from \"./utils/extractweburl\";\nimport { tag } from \"./telemetry\";\nimport { ODataParser } from \"@pnp/odata\";\n\nexport class SPHttpClient implements IRequestClient {\n\n    private _digestCache: IGetDigest;\n\n    constructor(private _impl: IHttpClientImpl = SPRuntimeConfig.fetchClientFactory()) {\n        this._digestCache = getDigestFactory(this);\n    }\n\n    public async fetch(url: string, options: IFetchOptions = {}): Promise<Response> {\n\n        let opts = assign(options, { cache: \"no-cache\", credentials: \"same-origin\" }, true);\n\n        const headers = new Headers();\n\n        // first we add the global headers so they can be overwritten by any passed in locally to this call\n        mergeHeaders(headers, SPRuntimeConfig.headers);\n\n        // second we add the local options so we can overwrite the globals\n        mergeHeaders(headers, options.headers);\n\n        // lastly we apply any default headers we need that may not exist\n        if (!headers.has(\"Accept\")) {\n            headers.append(\"Accept\", \"application/json\");\n        }\n\n        if (!headers.has(\"Content-Type\")) {\n            headers.append(\"Content-Type\", \"application/json;odata=verbose;charset=utf-8\");\n        }\n\n        if (!headers.has(\"X-ClientService-ClientTag\")) {\n\n            const methodName = tag.getClientTag(headers);\n            let clientTag = `PnPCoreJS:$$Version$$:${methodName}`;\n\n            if (clientTag.length > 32) {\n                clientTag = clientTag.substr(0, 32);\n            }\n\n            headers.append(\"X-ClientService-ClientTag\", clientTag);\n        }\n\n        if (!headers.has(\"User-Agent\")) {\n            // this marks the requests for understanding by the service\n            // does not work in browsers\n            headers.append(\"User-Agent\", \"NONISV|SharePointPnP|PnPjs/$$Version$$\");\n        }\n\n        opts = assign(opts, { headers: headers });\n\n        // if we have either a request digest or an authorization header we don't need a digest\n        if (opts.method && opts.method.toUpperCase() !== \"GET\" && !headers.has(\"X-RequestDigest\") && !headers.has(\"Authorization\")) {\n\n            const digest = await this._digestCache(extractWebUrl(url));\n            headers.append(\"X-RequestDigest\", digest);\n        }\n\n        return this.fetchRaw(url, opts);\n    }\n\n    public fetchRaw(url: string, options: IFetchOptions = {}): Promise<Response> {\n\n        // here we need to normalize the headers\n        const rawHeaders = new Headers();\n        mergeHeaders(rawHeaders, options.headers);\n        options = assign(options, { headers: rawHeaders });\n\n        const retry = (ctx: IRetryContext): void => {\n\n            // handles setting the proper timeout for a retry\n            const setRetry = (response: Response) => {\n                let delay: number;\n\n                if (response.headers.has(\"Retry-After\")) {\n                    // if we have gotten a header, use that value as the delay value\n                    delay = parseInt(response.headers.get(\"Retry-After\"), 10);\n                } else {\n                    // grab our current delay\n                    delay = ctx.delay;\n\n                    // Increment our counters.\n                    ctx.delay *= 2;\n                }\n\n                ctx.attempts++;\n\n                // If we have exceeded the retry count, reject.\n                if (ctx.retryCount <= ctx.attempts) {\n                    ctx.reject(Error(`Retry count exceeded (${ctx.retryCount}) for request. Response status: [${response.status}] ${response.statusText}`));\n                } else {\n                    // Set our retry timeout for {delay} milliseconds.\n                    setTimeout(getCtxCallback(this, retry, ctx), delay);\n                }\n            };\n\n            // send the actual request\n            this._impl.fetch(url, options).then((response) => {\n\n                if (response.status === 429) {\n                    // we have been throttled\n                    setRetry(response);\n                } else {\n                    ctx.resolve(response);\n                }\n\n            }).catch((response: Response) => {\n\n                if (response.status === 503 || response.status === 504) {\n                    // http status code 503 or 504, we can retry this\n                    setRetry(response);\n                } else {\n                    ctx.reject(response);\n                }\n            });\n        };\n\n        return new Promise((resolve, reject) => {\n\n            retry.call(this, <IRetryContext>{\n                attempts: 0,\n                delay: 100,\n                reject: reject,\n                resolve: resolve,\n                retryCount: 7,\n            });\n        });\n    }\n\n    public get(url: string, options: IFetchOptions = {}): Promise<Response> {\n        const opts = assign(options, { method: \"GET\" });\n        return this.fetch(url, opts);\n    }\n\n    public post(url: string, options: IFetchOptions = {}): Promise<Response> {\n        const opts = assign(options, { method: \"POST\" });\n        return this.fetch(url, opts);\n    }\n\n    public patch(url: string, options: IFetchOptions = {}): Promise<Response> {\n        const opts = assign(options, { method: \"PATCH\" });\n        return this.fetch(url, opts);\n    }\n\n    public delete(url: string, options: IFetchOptions = {}): Promise<Response> {\n        const opts = assign(options, { method: \"DELETE\" });\n        return this.fetch(url, opts);\n    }\n}\n\ninterface IRetryContext {\n    attempts: number;\n    delay: number;\n    reject: (reason?: any) => void;\n    resolve: (value?: Response | PromiseLike<Response>) => void;\n    retryCount: number;\n}\n\ninterface ICachedDigest {\n    expiration: Date;\n    value: string;\n}\n\ninterface IGetDigest {\n    (webUrl: string): Promise<string>;\n}\n\n// allows for the caching of digests across all HttpClient's which each have their own DigestCache wrapper.\nconst digests = new Map<string, ICachedDigest>();\n\nfunction getDigestFactory(client: SPHttpClient): IGetDigest {\n\n    return async (webUrl: string) => {\n\n        const cachedDigest: ICachedDigest = digests.get(webUrl);\n\n        if (cachedDigest !== undefined) {\n            const now = new Date();\n            if (now < cachedDigest.expiration) {\n                return cachedDigest.value;\n            }\n        }\n\n        const url = combine(webUrl, \"/_api/contextinfo\");\n\n        const headers = {\n            \"Accept\": \"application/json;odata=verbose\",\n            \"Content-Type\": \"application/json;odata=verbose;charset=utf-8\",\n        };\n\n        const resp = await client.fetchRaw(url, {\n            cache: \"no-cache\",\n            credentials: \"same-origin\",\n            headers: assign(headers, SPRuntimeConfig.headers, true),\n            method: \"POST\",\n        });\n\n        const parsed = await (new ODataParser()).parse(resp).then(r => r.GetContextWebInformation);\n\n        const newCachedDigest: ICachedDigest = {\n            expiration: dateAdd(new Date(), \"second\", parsed.FormDigestTimeoutSeconds),\n            value: parsed.FormDigestValue,\n        };\n\n        digests.set(webUrl, newCachedDigest);\n\n        return newCachedDigest.value;\n    };\n}\n","import { defaultPipelineBinder, IOperation, cloneQueryableData, headers } from \"@pnp/odata\";\nimport { SPHttpClient } from \"./sphttpclient\";\nimport { ISharePointQueryable } from \"./sharepointqueryable\";\nimport { IFetchOptions, mergeOptions, objectDefinedNotNull } from \"@pnp/common\";\nimport { toAbsoluteUrl } from \"./utils/toabsoluteurl\";\n\nconst spClientBinder = defaultPipelineBinder(() => new SPHttpClient());\n\nconst send = (method: \"GET\" | \"POST\" | \"DELETE\" | \"PATCH\" | \"PUT\"): <T = any>(o: ISharePointQueryable, options?: IFetchOptions) => Promise<T> => {\n\n    const operation: IOperation = spClientBinder(method);\n\n    return async function <T = any>(o: ISharePointQueryable, options?: IFetchOptions): Promise<T> {\n\n        const data = cloneQueryableData(o.data);\n        const batchDependency = objectDefinedNotNull(data.batch) ? data.batch.addDependency() : () => { return; };\n        const url = await toAbsoluteUrl(o.toUrlAndQuery());\n\n        mergeOptions(data.options, options);\n\n        return operation(Object.assign({}, data, {\n            batchDependency,\n            url,\n        }));\n    };\n};\n\nexport const spGet = <T = any>(o: ISharePointQueryable<any>, options?: IFetchOptions): Promise<T> => {\n    // Fix for #304 - when we clone objects we in some cases then execute a get request\n    // in these cases the caching settings were getting dropped from the request\n    // this tracks if the object from which this was cloned was caching and applies that to an immediate get request\n    // does not affect objects cloned from this as we are using different fields to track the settings so it won't\n    // be triggered\n    if (o.data.cloneParentWasCaching) {\n        o.usingCaching(o.data.cloneParentCacheOptions);\n    }\n\n    // if we are forcing caching set that in the data here\n    if ((<any>o)._forceCaching) {\n        o.data.useCaching = true;\n    }\n\n    return send(\"GET\")(o, options);\n};\n\nexport const spPost = send(\"POST\");\n\nexport const spDelete = send(\"DELETE\");\n\nexport const spPatch = send(\"PATCH\");\n\nexport const spPostDelete = <T = any>(o: ISharePointQueryable<any>, options?: IFetchOptions): Promise<T> => {\n    const opts = Object.assign(headers({ \"X-HTTP-Method\": \"DELETE\" }), options);\n    return spPost<T>(o, opts);\n};\n\nexport const spPostDeleteETag = <T = any>(o: ISharePointQueryable<any>, options?: IFetchOptions, eTag = \"*\"): Promise<T> => {\n    const opts = Object.assign(headers({ \"X-HTTP-Method\": \"DELETE\", \"IF-Match\": eTag }), options);\n    return spPost<T>(o, opts);\n};\n","import { combine, isUrlAbsolute, assign, jsS, IFetchOptions } from \"@pnp/common\";\nimport { Queryable, invokableFactory, IInvokable } from \"@pnp/odata\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\nimport { SPBatch } from \"./batch\";\nimport { metadata } from \"./utils/metadata\";\nimport { spGet, spPost, spPostDelete, spPostDeleteETag } from \"./operations\";\nimport { tag } from \"./telemetry\";\n\nexport interface ISharePointQueryableConstructor<T extends ISharePointQueryable = ISharePointQueryable> {\n    new(baseUrl: string | ISharePointQueryable, path?: string): T;\n}\n\nexport type ISPInvokableFactory<R = any> = (baseUrl: string | ISharePointQueryable, path?: string) => R;\n\nexport const spInvokableFactory = <R>(f: any): ISPInvokableFactory<R> => {\n    return invokableFactory<R>(f);\n};\n\n/**\n * SharePointQueryable Base Class\n *\n */\nexport class _SharePointQueryable<GetType = any> extends Queryable<GetType> {\n\n    protected _forceCaching: boolean;\n\n    /**\n     * Creates a new instance of the SharePointQueryable class\n     *\n     * @constructor\n     * @param baseUrl A string or SharePointQueryable that should form the base part of the url\n     *\n     */\n    constructor(baseUrl: string | ISharePointQueryable, path?: string) {\n\n        let url = \"\";\n        let parentUrl = \"\";\n        const query = new Map<string, string>();\n\n        if (typeof baseUrl === \"string\") {\n            // we need to do some extra parsing to get the parent url correct if we are\n            // being created from just a string.\n\n            if (isUrlAbsolute(baseUrl) || baseUrl.lastIndexOf(\"/\") < 0) {\n                parentUrl = baseUrl;\n                url = combine(baseUrl, path);\n            } else if (baseUrl.lastIndexOf(\"/\") > baseUrl.lastIndexOf(\"(\")) {\n                // .../items(19)/fields\n                const index = baseUrl.lastIndexOf(\"/\");\n                parentUrl = baseUrl.slice(0, index);\n                path = combine(baseUrl.slice(index), path);\n                url = combine(parentUrl, path);\n            } else {\n                // .../items(19)\n                const index = baseUrl.lastIndexOf(\"(\");\n                parentUrl = baseUrl.slice(0, index);\n                url = combine(baseUrl, path);\n            }\n        } else {\n\n            parentUrl = baseUrl.toUrl();\n            url = combine(parentUrl, path || \"\");\n            const target = baseUrl.query.get(\"@target\");\n            if (target !== undefined) {\n                query.set(\"@target\", target);\n            }\n        }\n\n        // init base with correct values for data seed\n        super({\n            parentUrl,\n            query,\n            url,\n        });\n\n        // post init actions\n        if (typeof baseUrl !== \"string\") {\n            this.configureFrom(baseUrl);\n        }\n        this._forceCaching = false;\n    }\n\n    /**\n     * Gets the full url with query information\n     */\n    public toUrlAndQuery(): string {\n\n        const aliasedParams = new Map<string, string>(this.query);\n\n        let url = this.toUrl().replace(/'!(@.*?)::(.*?)'/ig, (match, labelName, value) => {\n            Logger.write(`Rewriting aliased parameter from match ${match} to label: ${labelName} value: ${value}`, LogLevel.Verbose);\n            aliasedParams.set(labelName, `'${value}'`);\n            return labelName;\n        });\n\n        if (aliasedParams.size > 0) {\n            const char = url.indexOf(\"?\") > -1 ? \"&\" : \"?\";\n            url += `${char}${Array.from(aliasedParams).map((v: [string, string]) => v[0] + \"=\" + v[1]).join(\"&\")}`;\n        }\n\n        return url;\n    }\n\n    /**\n     * Choose which fields to return\n     *\n     * @param selects One or more fields to return\n     */\n    public select(...selects: string[]): this {\n        if (selects.length > 0) {\n            this.query.set(\"$select\", selects.join(\",\"));\n        }\n        return this;\n    }\n\n    public get<T = GetType>(options?: IFetchOptions): Promise<T> {\n        return spGet<T>(<any>this, options);\n    }\n\n    /**\n     * Expands fields such as lookups to get additional data\n     *\n     * @param expands The Fields for which to expand the values\n     */\n    public expand(...expands: string[]): this {\n        if (expands.length > 0) {\n            this.query.set(\"$expand\", expands.join(\",\"));\n        }\n        return this;\n    }\n\n    /**\n     * Clones this SharePointQueryable into a new SharePointQueryable instance of T\n     * @param factory Constructor used to create the new instance\n     * @param additionalPath Any additional path to include in the clone\n     * @param includeBatch If true this instance's batch will be added to the cloned instance\n     */\n    public clone<T extends ISharePointQueryable>(factory: (...args: any[]) => T, additionalPath?: string, includeBatch = true): T {\n\n        const clone: T = super.cloneTo(factory(this, additionalPath), { includeBatch });\n\n        // handle sp specific clone actions\n        const t = \"@target\";\n        if (this.query.has(t)) {\n            clone.query.set(t, this.query.get(t));\n        }\n\n        return clone;\n    }\n\n    /**\n     * The default action for this object (unless overridden spGet)\n     * \n     * @param options optional request options\n     */\n    public defaultAction(options?: IFetchOptions): Promise<GetType> {\n        return spGet(this, options);\n    }\n\n    /**\n     * Gets a parent for this instance as specified\n     *\n     * @param factory The contructor for the class to create\n     */\n    protected getParent<T extends ISharePointQueryable>(\n        factory: ISPInvokableFactory<any>,\n        baseUrl: string | ISharePointQueryable = this.parentUrl,\n        path?: string,\n        batch?: SPBatch): T {\n\n        let parent = factory(baseUrl, path).configureFrom(this);\n\n        const t = \"@target\";\n        if (this.query.has(t)) {\n            parent.query.set(t, this.query.get(t));\n        }\n        if (batch !== undefined) {\n            parent = parent.inBatch(batch);\n        }\n        return parent;\n    }\n}\nexport interface ISharePointQueryable<GetType = any> extends _SharePointQueryable<GetType>, IInvokable<GetType> { }\nexport interface _SharePointQueryable<GetType = any> extends IInvokable<GetType> { }\nexport const SharePointQueryable = spInvokableFactory<ISharePointQueryable>(_SharePointQueryable);\n\n/**\n * Represents a REST collection which can be filtered, paged, and selected\n *\n */\nexport class _SharePointQueryableCollection<GetType = any[]> extends _SharePointQueryable<GetType> {\n\n    /**\n     * Filters the returned collection (https://msdn.microsoft.com/en-us/library/office/fp142385.aspx#bk_supported)\n     *\n     * @param filter The string representing the filter query\n     */\n    public filter(filter: string): this {\n        this.query.set(\"$filter\", filter);\n        return this;\n    }\n\n    /**\n     * Orders based on the supplied fields\n     *\n     * @param orderby The name of the field on which to sort\n     * @param ascending If false DESC is appended, otherwise ASC (default)\n     */\n    public orderBy(orderBy: string, ascending = true): this {\n        const o = \"$orderby\";\n        const query = this.query.has(o) ? this.query.get(o).split(\",\") : [];\n        query.push(`${orderBy} ${ascending ? \"asc\" : \"desc\"}`);\n        this.query.set(o, query.join(\",\"));\n        return this;\n    }\n\n    /**\n     * Skips the specified number of items\n     *\n     * @param skip The number of items to skip\n     */\n    public skip(skip: number): this {\n        this.query.set(\"$skip\", skip.toString());\n        return this;\n    }\n\n    /**\n     * Limits the query to only return the specified number of items\n     *\n     * @param top The query row limit\n     */\n    public top(top: number): this {\n        this.query.set(\"$top\", top.toString());\n        return this;\n    }\n}\nexport interface _SharePointQueryableCollection<GetType = any[]> extends IInvokable<GetType> { }\nexport interface ISharePointQueryableCollection<GetType = any[]> extends _SharePointQueryableCollection<GetType>, IInvokable<GetType> { }\nexport const SharePointQueryableCollection = spInvokableFactory<ISharePointQueryableCollection>(_SharePointQueryableCollection);\n\n/**\n * Represents an instance that can be selected\n *\n */\nexport class _SharePointQueryableInstance<GetType = any> extends _SharePointQueryable<GetType> {\n\n    /**\n     * Curries the update function into the common pieces\n     * \n     * @param type \n     * @param mapper \n     */\n    protected _update<Return, Props = any>(type: string, mapper: (data: any, props: Props) => Return): (props: Props) => Promise<Return> {\n        return (props: any) => spPost(tag.configure(this, `${type}.Update`), {\n            body: jsS(assign(metadata(type), props)),\n            headers: {\n                \"X-HTTP-Method\": \"MERGE\",\n            },\n        }).then((d: any) => mapper(d, props));\n    }\n}\nexport interface ISharePointQueryableInstance<GetType = any> extends _SharePointQueryableInstance<GetType>, IInvokable<GetType> { }\nexport interface _SharePointQueryableInstance<GetType = any> extends IInvokable<GetType> { }\nexport const SharePointQueryableInstance = spInvokableFactory<ISharePointQueryableInstance>(_SharePointQueryableInstance);\n\n/**\n * Adds the a delete method to the tagged class taking no parameters and calling spPostDelete\n */\nexport function deleteable(t: string) {\n\n    return function (this: ISharePointQueryable): Promise<void> {\n        return spPostDelete<void>(tag.configure(this, `${t}.delete`));\n    };\n}\n\nexport interface IDeleteable {\n    /**\n     * Delete this instance\n     */\n    delete(): Promise<void>;\n}\n\nexport function deleteableWithETag(t: string) {\n\n    return function (this: ISharePointQueryable, eTag = \"*\"): Promise<void> {\n        return spPostDeleteETag<void>(tag.configure(this, `${t}.delete`), {}, eTag);\n    };\n}\n\nexport interface IDeleteableWithETag {\n    /**\n     * Delete this instance\n     *\n     * @param eTag Value used in the IF-Match header, by default \"*\"\n     */\n    delete(eTag?: string): Promise<void>;\n}\n","/**\n * Class Decorators\n */\n\n/**\n * Decorator used to specify the default path for SharePointQueryable objects\n * \n * @param path \n */\nexport function defaultPath(path: string) {\n\n    return function <T extends { new(...args: any[]): {} }>(target: T) {\n\n        return class extends target {\n            constructor(...args: any[]) {\n                super(args[0], args.length > 1 && args[1] !== undefined ? args[1] : path);\n            }\n        };\n    };\n}\n\n // TODO::?\n// performance tracking method decorator\n// redirect to graph api\n\n\n\n\n","import { ISPInvokableFactory } from \"./sharepointqueryable\";\nimport { assign, combine, hOP, isUrlAbsolute } from \"@pnp/common\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\nimport { ODataParser } from \"@pnp/odata\";\nimport { extractWebUrl } from \"./utils/extractweburl\";\n\nexport function odataUrlFrom(candidate: any): string {\n\n    const parts: string[] = [];\n    const s = [\"odata.type\", \"odata.editLink\", \"__metadata\", \"odata.metadata\", \"odata.id\"];\n\n    if (hOP(candidate, s[0]) && candidate[s[0]] === \"SP.Web\") {\n\n        // webs return an absolute url in the id\n        if (hOP(candidate, s[4])) {\n            parts.push(candidate[s[4]]);\n        } else if (hOP(candidate, s[2])) {\n            // we are dealing with verbose, which has an absolute uri\n            parts.push(candidate.__metadata.uri);\n        }\n\n    } else {\n\n        if (hOP(candidate, s[3]) && hOP(candidate, s[1])) {\n            // we are dealign with minimal metadata (default)\n\n            // some entities return an abosolute url in the editlink while for others it is relative\n            // without the _api. This code is meant to handle both situations\n            const editLink = isUrlAbsolute(candidate[s[1]]) ? candidate[s[1]].split(\"_api\")[1] : candidate[s[1]];\n\n            parts.push(extractWebUrl(candidate[s[3]]), \"_api\", editLink);\n        } else if (hOP(candidate, s[1])) {\n            parts.push(\"_api\", candidate[s[1]]);\n        } else if (hOP(candidate, s[2])) {\n            // we are dealing with verbose, which has an absolute uri\n            parts.push(candidate.__metadata.uri);\n        }\n    }\n\n    if (parts.length < 1) {\n        Logger.write(\"No uri information found in ODataEntity parsing, chaining will fail for this object.\", LogLevel.Warning);\n        return \"\";\n    }\n\n    return combine(...parts);\n}\n\nclass SPODataEntityParserImpl<T, D> extends ODataParser<T & D> {\n\n    constructor(protected factory: ISPInvokableFactory<any>) {\n        super();\n    }\n\n    public hydrate = (d: D) => {\n        const o = this.factory(odataUrlFrom(d), null);\n        return assign(o, d);\n    }\n\n    public parse(r: Response): Promise<T & D> {\n        return super.parse(r).then((d: any) => {\n            const o = this.factory(odataUrlFrom(d), null);\n            return assign<T, D>(o, d);\n        });\n    }\n}\n\nclass SPODataEntityArrayParserImpl<T, D> extends ODataParser<(T & D)[]> {\n\n    constructor(protected factory: ISPInvokableFactory<T>) {\n        super();\n    }\n\n    public hydrate = (d: D[]) => {\n        return d.map(v => {\n            const o = this.factory(odataUrlFrom(v), null);\n            return assign(o, v);\n        });\n    }\n\n    public parse(r: Response): Promise<(T & D)[]> {\n        return super.parse(r).then((d: D[]) => {\n            return d.map(v => {\n                const o = this.factory(odataUrlFrom(v), null);\n                return assign(o, v);\n            });\n        });\n    }\n}\n\nexport function spODataEntity<T, DataType = any>(factory: ISPInvokableFactory<T>): ODataParser<T & DataType> {\n    return new SPODataEntityParserImpl<T, DataType>(factory);\n}\n\nexport function spODataEntityArray<T, DataType = any>(factory: ISPInvokableFactory<T>): ODataParser<(T & DataType)[]> {\n    return new SPODataEntityArrayParserImpl<T, DataType>(factory);\n}\n","import { Batch } from \"@pnp/odata\";\nimport { getGUID, isUrlAbsolute, combine, mergeHeaders, hOP } from \"@pnp/common\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\nimport { SPHttpClient } from \"./sphttpclient\";\nimport { SPRuntimeConfig } from \"./splibconfig\";\nimport { toAbsoluteUrl } from \"./utils/toabsoluteurl\";\n\n/**\n * Manages a batch of OData operations\n */\nexport class SPBatch extends Batch {\n\n    constructor(private baseUrl: string) {\n        super();\n    }\n\n    /**\n     * Parses the response from a batch request into an array of Response instances\n     *\n     * @param body Text body of the response from the batch request\n     */\n    public static ParseResponse(body: string): Response[] {\n\n        const responses: Response[] = [];\n        const header = \"--batchresponse_\";\n        // Ex. \"HTTP/1.1 500 Internal Server Error\"\n        const statusRegExp = new RegExp(\"^HTTP/[0-9.]+ +([0-9]+) +(.*)\", \"i\");\n        const lines = body.split(\"\\n\");\n        let state = \"batch\";\n        let status: number;\n        let statusText: string;\n        for (let i = 0; i < lines.length; ++i) {\n            const line = lines[i];\n            switch (state) {\n                case \"batch\":\n                    if (line.substr(0, header.length) === header) {\n                        state = \"batchHeaders\";\n                    } else {\n                        if (line.trim() !== \"\") {\n                            throw Error(`Invalid response, line ${i}`);\n                        }\n                    }\n                    break;\n                case \"batchHeaders\":\n                    if (line.trim() === \"\") {\n                        state = \"status\";\n                    }\n                    break;\n                case \"status\":\n                    const parts = statusRegExp.exec(line);\n                    if (parts.length !== 3) {\n                        throw Error(`Invalid status, line ${i}`);\n                    }\n                    status = parseInt(parts[1], 10);\n                    statusText = parts[2];\n                    state = \"statusHeaders\";\n                    break;\n                case \"statusHeaders\":\n                    if (line.trim() === \"\") {\n                        state = \"body\";\n                    }\n                    break;\n                case \"body\":\n                    responses.push((status === 204) ? new Response() : new Response(line, { status: status, statusText: statusText }));\n                    state = \"batch\";\n                    break;\n            }\n        }\n\n        if (state !== \"status\") {\n            throw Error(\"Unexpected end of input\");\n        }\n\n        return responses;\n    }\n\n    protected async executeImpl(): Promise<void> {\n\n        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Executing batch with ${this.requests.length} requests.`, LogLevel.Info);\n\n        // if we don't have any requests, don't bother sending anything\n        // this could be due to caching further upstream, or just an empty batch\n        if (this.requests.length < 1) {\n            Logger.write(`Resolving empty batch.`, LogLevel.Info);\n            return;\n        }\n\n        // creating the client here allows the url to be populated for nodejs client as well as potentially\n        // any other hacks needed for other types of clients. Essentially allows the absoluteRequestUrl\n        // below to be correct\n        const client = new SPHttpClient();\n\n        // due to timing we need to get the absolute url here so we can use it for all the individual requests\n        // and for sending the entire batch\n        const absoluteRequestUrl = await toAbsoluteUrl(this.baseUrl);\n\n        // build all the requests, send them, pipe results in order to parsers\n        const batchBody: string[] = [];\n\n        let currentChangeSetId = \"\";\n\n        for (let i = 0; i < this.requests.length; i++) {\n            const reqInfo = this.requests[i];\n\n            if (reqInfo.method === \"GET\") {\n\n                if (currentChangeSetId.length > 0) {\n                    // end an existing change set\n                    batchBody.push(`--changeset_${currentChangeSetId}--\\n\\n`);\n                    currentChangeSetId = \"\";\n                }\n\n                batchBody.push(`--batch_${this.batchId}\\n`);\n\n            } else {\n\n                if (currentChangeSetId.length < 1) {\n                    // start new change set\n                    currentChangeSetId = getGUID();\n                    batchBody.push(`--batch_${this.batchId}\\n`);\n                    batchBody.push(`Content-Type: multipart/mixed; boundary=\"changeset_${currentChangeSetId}\"\\n\\n`);\n                }\n\n                batchBody.push(`--changeset_${currentChangeSetId}\\n`);\n            }\n\n            // common batch part prefix\n            batchBody.push(`Content-Type: application/http\\n`);\n            batchBody.push(`Content-Transfer-Encoding: binary\\n\\n`);\n\n            // these are the per-request headers\n            const headers = new Headers();\n\n            // this is the url of the individual request within the batch\n            const url = isUrlAbsolute(reqInfo.url) ? reqInfo.url : combine(absoluteRequestUrl, reqInfo.url);\n\n            Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Adding request ${reqInfo.method} ${url} to batch.`, LogLevel.Verbose);\n\n            if (reqInfo.method !== \"GET\") {\n\n                let method = reqInfo.method;\n\n                const castHeaders: any = reqInfo.options.headers;\n                if (hOP(reqInfo, \"options\") && hOP(reqInfo.options, \"headers\") && castHeaders[\"X-HTTP-Method\"] !== undefined) {\n\n                    method = castHeaders[\"X-HTTP-Method\"];\n                    delete castHeaders[\"X-HTTP-Method\"];\n                }\n\n                batchBody.push(`${method} ${url} HTTP/1.1\\n`);\n\n                headers.set(\"Content-Type\", \"application/json;odata=verbose;charset=utf-8\");\n\n            } else {\n                batchBody.push(`${reqInfo.method} ${url} HTTP/1.1\\n`);\n            }\n\n            // merge global config headers\n            mergeHeaders(headers, SPRuntimeConfig.headers);\n\n            // merge per-request headers\n            if (reqInfo.options) {\n                mergeHeaders(headers, reqInfo.options.headers);\n            }\n\n            // lastly we apply any default headers we need that may not exist\n            if (!headers.has(\"Accept\")) {\n                headers.append(\"Accept\", \"application/json\");\n            }\n\n            if (!headers.has(\"Content-Type\")) {\n                headers.append(\"Content-Type\", \"application/json;odata=verbose;charset=utf-8\");\n            }\n\n            if (!headers.has(\"X-ClientService-ClientTag\")) {\n                headers.append(\"X-ClientService-ClientTag\", \"PnPCoreJS:@pnp-$$Version$$:batch\");\n            }\n\n            // write headers into batch body\n            headers.forEach((value: string, name: string) => {\n                batchBody.push(`${name}: ${value}\\n`);\n            });\n\n            batchBody.push(\"\\n\");\n\n            if (reqInfo.options.body) {\n                batchBody.push(`${reqInfo.options.body}\\n\\n`);\n            }\n        }\n\n        if (currentChangeSetId.length > 0) {\n            // Close the changeset\n            batchBody.push(`--changeset_${currentChangeSetId}--\\n\\n`);\n            currentChangeSetId = \"\";\n        }\n\n        batchBody.push(`--batch_${this.batchId}--\\n`);\n\n        const batchOptions = {\n            \"body\": batchBody.join(\"\"),\n            \"headers\": {\n                \"Content-Type\": `multipart/mixed; boundary=batch_${this.batchId}`,\n            },\n            \"method\": \"POST\",\n        };\n\n        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Sending batch request.`, LogLevel.Info);\n\n        const fetchResponse = await client.fetch(combine(absoluteRequestUrl, \"/_api/$batch\"), batchOptions);\n        const text = await fetchResponse.text();\n        const responses = SPBatch.ParseResponse(text);\n\n        if (responses.length !== this.requests.length) {\n            throw Error(\"Could not properly parse responses to match requests in batch.\");\n        }\n\n        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Resolving batched requests.`, LogLevel.Info);\n\n        // this structure ensures that we resolve the batched requests in the order we expect\n        // using async this is not guaranteed depending on the requests\n        return responses.reduce((p, response, index) => p.then(async _ => {\n\n            const request = this.requests[index];\n\n            Logger.write(`[${request.id}] (${(new Date()).getTime()}) Resolving request in batch ${this.batchId}.`, LogLevel.Info);\n\n            try {\n\n                request.resolve(await request.parser.parse(response));\n\n            } catch (e) {\n\n                request.reject(e);\n            }\n\n        }), Promise.resolve(void (0)));\n    }\n}\n","import { IConfigOptions, ISPFXContext } from \"@pnp/common\";\nimport {\n    setup as _setup,\n    SPConfiguration,\n} from \"./splibconfig\";\n\n/**\n * Root of the SharePoint REST module\n */\nexport class SPRest {\n\n    /** \n     * Creates a new instance of the SPRest class\n     * \n     * @param options Additional options\n     * @param baseUrl A string that should form the base part of the url\n     */\n    constructor(protected _options: IConfigOptions = {}, protected _baseUrl = \"\") { }\n\n    /**\n     * Configures instance with additional options and baseUrl.\n     * Provided configuration used by other objects in a chain\n     * \n     * @param options Additional options\n     * @param baseUrl A string that should form the base part of the url\n     */\n    public configure(options: IConfigOptions, baseUrl = \"\"): SPRest {\n        return new SPRest(options, baseUrl);\n    }\n\n    /**\n     * Global SharePoint configuration options\n     * \n     * @param config The SharePoint configuration to apply\n     */\n    public setup(config: SPConfiguration | ISPFXContext) {\n\n        if ((<ISPFXContext>config).pageContext) {\n            _setup({\n                spfxContext: <ISPFXContext>config,\n            });\n        } else {\n            _setup(<SPConfiguration>config);\n        }\n    }\n}\n\nexport const sp = new SPRest();\n","import { stringIsNullOrEmpty } from \"@pnp/common\";\nimport { LogLevel, Logger } from \"@pnp/logging\";\n\nexport function escapeQueryStrValue(value: string): string {\n\n    if (stringIsNullOrEmpty(value)) {\n        return \"\";\n    }\n\n    // replace all instance of ' with ''\n\n    if (/!(@.*?)::(.*?)/ig.test(value)) {\n        // to ensure our param aliasing still works we need to treat these special or we'll hear about it\n        // so we encode JUST the part that will end up in the url\n        return value.replace(/!(@.*?)::(.*)$/ig, (match, labelName, v) => {\n            Logger.write(`Rewriting aliased parameter from match ${match} to label: ${labelName} value: ${v}`, LogLevel.Verbose);\n            return `!${labelName}::${encodeURIComponent(v.replace(/\\'/ig, \"''\"))}`;\n        });\n    } else {\n        return encodeURIComponent(value.replace(/\\'/ig, \"''\"));\n    }\n}\n","import { SharePointQueryable, _SharePointQueryableInstance, spInvokableFactory } from \"../sharepointqueryable\";\nimport { defaultPath } from \"../decorators\";\nimport { Web, IWeb } from \"../webs/types\";\nimport { hOP, jsS, assign } from \"@pnp/common\";\nimport { SPHttpClient } from \"../sphttpclient\";\nimport { body, headers } from \"@pnp/odata\";\nimport { odataUrlFrom } from \"../odata\";\nimport { spPost } from \"../operations\";\nimport { SPBatch } from \"../batch\";\nimport { escapeQueryStrValue } from \"../utils/escapeQueryStrValue\";\nimport { IChangeQuery } from \"../types\";\nimport { tag } from \"../telemetry\";\nimport { metadata } from \"../utils/metadata\";\nimport { extractWebUrl } from \"../utils/extractweburl\";\n\n@defaultPath(\"_api/site\")\nexport class _Site extends _SharePointQueryableInstance {\n\n    /**\n    * Gets the root web of the site collection\n    *\n    */\n    public get rootWeb(): IWeb {\n        return tag.configure(Web(this, \"rootweb\"), \"si.rootWeb\");\n    }\n\n    /**\n     * Gets a Web instance representing the root web of the site collection\n     * correctly setup for chaining within the library\n     */\n    public async getRootWeb(): Promise<IWeb> {\n        const web = await this.rootWeb.select(\"Url\")<{ Url: string }>();\n        return tag.configure(Web(web.Url), \"si.getRootWeb\");\n    }\n\n    /**\n    * Gets the context information for this site collection\n    */\n    public async getContextInfo(): Promise<IContextInfo> {\n\n        const q = tag.configure(Site(this.parentUrl, \"_api/contextinfo\"), \"si.getContextInfo\");\n        const data = await spPost(q);\n\n        if (hOP(data, \"GetContextWebInformation\")) {\n            const info = data.GetContextWebInformation;\n            info.SupportedSchemaVersions = info.SupportedSchemaVersions.results;\n            return info;\n        } else {\n            return data;\n        }\n    }\n\n    public createBatch(): SPBatch {\n        return new SPBatch(this.parentUrl);\n    }\n\n    /**\n    * Deletes the current site\n    *\n    */\n    public async delete(): Promise<void> {\n\n        const site = await this.clone(Site, \"\").select(\"Id\")<{ Id: string }>();\n        const q = tag.configure(Site(this.parentUrl, \"_api/SPSiteManager/Delete\"), \"si.delete\");\n        await spPost(q, body({ siteId: site.Id }));\n    }\n\n    /**\n     * Gets the document libraries on a site. Static method. (SharePoint Online only)\n     *\n     * @param absoluteWebUrl The absolute url of the web whose document libraries should be returned\n     */\n    public async getDocumentLibraries(absoluteWebUrl: string): Promise<IDocumentLibraryInformation[]> {\n\n        const q = tag.configure(SharePointQueryable(\"\", \"_api/sp.web.getdocumentlibraries(@v)\"), \"si.getDocumentLibraries\");\n        q.query.set(\"@v\", `'${escapeQueryStrValue(absoluteWebUrl)}'`);\n        const data = await q();\n        return hOP(data, \"GetDocumentLibraries\") ? data.GetDocumentLibraries : data;\n    }\n\n    /**\n     * Gets the site url from a page url\n     *\n     * @param absolutePageUrl The absolute url of the page\n     */\n    public async getWebUrlFromPageUrl(absolutePageUrl: string): Promise<string> {\n\n        const q = tag.configure(SharePointQueryable(\"\", \"_api/sp.web.getweburlfrompageurl(@v)\"), \"si.getWebUrlFromPageUrl\");\n        q.query.set(\"@v\", `'${escapeQueryStrValue(absolutePageUrl)}'`);\n        const data = await q();\n        return hOP(data, \"GetWebUrlFromPageUrl\") ? data.GetWebUrlFromPageUrl : data;\n    }\n\n    /**\n     * Returns the collection of changes from the change log that have occurred within the list, based on the specified query\n     *\n     * @param query The change query\n     */\n    @tag(\"si.getChanges\")\n    public getChanges(query: IChangeQuery): Promise<any> {\n\n        const postBody = body({ \"query\": assign(metadata(\"SP.ChangeQuery\"), query) });\n        return spPost(this.clone(Web, \"getchanges\"), postBody);\n    }\n\n    /**\n    * Opens a web by id (using POST)\n    *\n    * @param webId The GUID id of the web to open\n    */\n    @tag(\"si.openWebById\")\n    public async openWebById(webId: string): Promise<IOpenWebByIdResult> {\n\n        const data = await spPost(this.clone(Site, `openWebById('${webId}')`));\n        return {\n            data,\n            web: Web(extractWebUrl(odataUrlFrom(data))),\n        };\n    }\n\n    /**\n     * Creates a Modern communication site.\n     * \n     * @param title The title of the site to create\n     * @param lcid The language to use for the site. If not specified will default to 1033 (English).\n     * @param shareByEmailEnabled If set to true, it will enable sharing files via Email. By default it is set to false\n     * @param url The fully qualified URL (e.g. https://yourtenant.sharepoint.com/sites/mysitecollection) of the site.\n     * @param description The description of the communication site.\n     * @param classification The Site classification to use. For instance 'Contoso Classified'. See https://www.youtube.com/watch?v=E-8Z2ggHcS0 for more information\n     * @param siteDesignId The Guid of the site design to be used.\n     *                     You can use the below default OOTB GUIDs:\n     *                     Topic: 00000000-0000-0000-0000-000000000000\n     *                     Showcase: 6142d2a0-63a5-4ba0-aede-d9fefca2c767\n     *                     Blank: f6cc5403-0d63-442e-96c0-285923709ffc \n     */\n    public async createCommunicationSite(\n        title: string,\n        lcid = 1033,\n        shareByEmailEnabled = false,\n        url: string,\n        description = \"\",\n        classification = \"\",\n        siteDesignId = \"00000000-0000-0000-0000-000000000000\",\n        hubSiteId = \"00000000-0000-0000-0000-000000000000\",\n        owner?: string,\n    ): Promise<void> {\n\n        const props = {\n            Classification: classification,\n            Description: description,\n            HubSiteId: hubSiteId,\n            Lcid: lcid,\n            Owner: owner,\n            ShareByEmailEnabled: shareByEmailEnabled,\n            SiteDesignId: siteDesignId,\n            Title: title,\n            Url: url,\n            WebTemplate: \"SITEPAGEPUBLISHING#0\",\n            WebTemplateExtensionId: \"00000000-0000-0000-0000-000000000000\",\n        };\n\n        const postBody =\n            body({\n                \"request\":\n                    assign(metadata(\"Microsoft.SharePoint.Portal.SPSiteCreationRequest\"), props),\n            },\n                headers({\n                    \"Accept\": \"application/json;odata=verbose\",\n                    \"Content-Type\": \"application/json;odata=verbose;charset=utf-8\",\n                }));\n\n        const d: any = await this.getRootWeb();\n        const client = new SPHttpClient();\n        const methodUrl = `${d.parentUrl}/_api/SPSiteManager/Create`;\n        const r = await client.post(methodUrl, postBody);\n        return await r.json();\n    }\n\n    /**\n    * Creates a Modern team site backed by Office 365 group. For use in SP Online only. This will not work with App-only tokens\n    * \n    * @param displayName The title or display name of the Modern team site to be created\n    * @param alias Alias of the underlying Office 365 Group\n    * @param isPublic Defines whether the Office 365 Group will be public (default), or private.\n    * @param lcid The language to use for the site. If not specified will default to English (1033).\n    * @param description The description of the site to be created.\n    * @param classification The Site classification to use. For instance 'Contoso Classified'. See https://www.youtube.com/watch?v=E-8Z2ggHcS0 for more information\n    * @param owners The Owners of the site to be created     \n    */\n    public async createModernTeamSite(\n        displayName: string,\n        alias: string,\n        isPublic = true,\n        lcid = 1033,\n        description = \"\",\n        classification = \"\",\n        owners?: string[],\n        hubSiteId = \"00000000-0000-0000-0000-000000000000\",\n        siteDesignId?: string,\n    ): Promise<void> {\n\n        const postBody = {\n            alias: alias,\n            displayName: displayName,\n            isPublic: isPublic,\n            optionalParams: {\n                Classification: classification,\n                CreationOptions: {\n                    \"results\": [`SPSiteLanguage:${lcid}`, `HubSiteId:${hubSiteId}`],\n                },\n                Description: description,\n                Owners: {\n                    \"results\": owners ? owners : [],\n                },\n            },\n        };\n\n        if (siteDesignId) {\n            postBody.optionalParams.CreationOptions.results.push(`implicit_formula_292aa8a00786498a87a5ca52d9f4214a_${siteDesignId}`);\n        }\n\n        const d: any = await this.getRootWeb();\n        const client = new SPHttpClient();\n        const methodUrl = `${d.parentUrl}/_api/GroupSiteManager/CreateGroupEx`;\n        const r = await client.post(methodUrl, {\n            body: jsS(postBody),\n            headers: {\n                \"Accept\": \"application/json;odata=verbose\",\n                \"Content-Type\": \"application/json;odata=verbose;charset=utf-8\",\n            },\n        });\n        return await r.json();\n    }\n}\nexport interface ISite extends _Site { }\nexport const Site = spInvokableFactory<ISite>(_Site);\n\n/**\n * The result of opening a web by id: contains the data returned as well as a chainable web instance\n */\nexport interface IOpenWebByIdResult {\n    data: any;\n    web: IWeb;\n}\n\n/**\n * This is the interface to expose data i.e. context information of a site\n */\nexport interface IContextInfo {\n    FormDigestTimeoutSeconds?: number;\n    FormDigestValue?: number;\n    LibraryVersion?: string;\n    SiteFullUrl?: string;\n    SupportedSchemaVersions?: string[];\n    WebFullUrl?: string;\n}\n\n/**\n * This is the interface to expose data for Document Library\n */\nexport interface IDocumentLibraryInformation {\n    AbsoluteUrl?: string;\n    Modified?: Date;\n    ModifiedFriendlyDisplay?: string;\n    ServerRelativeUrl?: string;\n    Title?: string;\n}\n","import { SPRest } from \"../rest\";\nimport { ISite, Site } from \"./types\";\n\nexport {\n    IOpenWebByIdResult,\n    ISite,\n    Site,\n    IContextInfo,\n    IDocumentLibraryInformation,\n} from \"./types\";\n\ndeclare module \"../rest\" {\n    interface SPRest {\n        readonly site: ISite;\n    }\n}\n\nReflect.defineProperty(SPRest.prototype, \"site\", {\n    configurable: true,\n    enumerable: true,\n    get: function (this: SPRest) {\n        return Site(this._baseUrl).configure(this._options);\n    },\n});\n","import { assign, ITypedHash } from \"@pnp/common\";\nimport { body, headers } from \"@pnp/odata\";\nimport {\n    _SharePointQueryableInstance,\n    SharePointQueryableCollection,\n    _SharePointQueryableCollection,\n    ISharePointQueryableCollection,\n    ISharePointQueryableInstance,\n    spInvokableFactory,\n    SharePointQueryableInstance,\n    deleteable,\n    IDeleteable,\n} from \"../sharepointqueryable\";\nimport { defaultPath } from \"../decorators\";\nimport { IChangeQuery } from \"../types\";\nimport { odataUrlFrom } from \"../odata\";\nimport { SPBatch } from \"../batch\";\nimport { metadata } from \"../utils/metadata\";\nimport { Site, IOpenWebByIdResult } from \"../sites\";\nimport { spPost, spGet } from \"../operations\";\nimport { escapeQueryStrValue } from \"../utils/escapeQueryStrValue\";\nimport { tag } from \"../telemetry\";\n\n@defaultPath(\"webs\")\nexport class _Webs extends _SharePointQueryableCollection<IWebInfo[]> {\n\n    /**\n     * Adds a new web to the collection\n     *\n     * @param title The new web's title\n     * @param url The new web's relative url\n     * @param description The new web's description\n     * @param template The new web's template internal name (default = STS)\n     * @param language The locale id that specifies the new web's language (default = 1033 [English, US])\n     * @param inheritPermissions When true, permissions will be inherited from the new web's parent (default = true)\n     */\n    @tag(\"ws.add\")\n    public async add(title: string, url: string, description = \"\", template = \"STS\", language = 1033, inheritPermissions = true): Promise<IWebAddResult> {\n\n        const postBody = body({\n            \"parameters\":\n                assign(metadata(\"SP.WebCreationInformation\"),\n                    {\n                        Description: description,\n                        Language: language,\n                        Title: title,\n                        Url: url,\n                        UseSamePermissionsAsParentSite: inheritPermissions,\n                        WebTemplate: template,\n                    }),\n        });\n\n        const data = await spPost(this.clone(Webs, \"add\"), postBody);\n\n        return {\n            data,\n            web: Web(odataUrlFrom(data).replace(/_api\\/web\\/?/i, \"\")),\n        };\n    }\n}\nexport interface IWebs extends _Webs { }\nexport const Webs = spInvokableFactory<IWebs>(_Webs);\n\n/**\n * Describes a web\n *\n */\n@defaultPath(\"_api/web\")\nexport class _Web extends _SharePointQueryableInstance<IWebInfo> {\n\n    public delete = deleteable(\"w\");\n\n    /**\n     * Gets this web's subwebs\n     *\n     */\n    public get webs(): IWebs {\n        return Webs(this);\n    }\n\n    /**\n     * Gets this web's parent web and data\n     *\n     */\n    @tag(\"w.getParentWeb\")\n    public async getParentWeb(): Promise<IOpenWebByIdResult> {\n        const { ParentWeb } = await spGet(this.select(\"ParentWeb/Id\").expand(\"ParentWeb\"));\n        return ParentWeb ? Site(this.parentUrl).openWebById(ParentWeb.Id) : null;\n    }\n\n    /**\n    * Returns a collection of objects that contain metadata about subsites of the current site in which the current user is a member.\n    *\n    * @param nWebTemplateFilter Specifies the site definition (default = -1)\n    * @param nConfigurationFilter A 16-bit integer that specifies the identifier of a configuration (default = -1)\n    */\n    public getSubwebsFilteredForCurrentUser(nWebTemplateFilter = -1, nConfigurationFilter = -1): IWebs {\n        const o = this.clone(Webs, `getSubwebsFilteredForCurrentUser(nWebTemplateFilter=${nWebTemplateFilter},nConfigurationFilter=${nConfigurationFilter})`);\n        return tag.configure(o, \"w.getSubwebsFilteredForCurrentUser\");\n    }\n\n    /**\n     * Allows access to the web's all properties collection\n     */\n    public get allProperties(): ISharePointQueryableInstance {\n        return tag.configure(this.clone(SharePointQueryableInstance, \"allproperties\"), \"w.allprops\");\n    }\n\n    /**\n     * Gets a collection of WebInfos for this web's subwebs\n     *\n     */\n    public get webinfos(): ISharePointQueryableCollection<IWebInfosData[]> {\n        return tag.configure(SharePointQueryableCollection(this, \"webinfos\"), \"w.webinfos\");\n    }\n\n    /**\n     * Creates a new batch for requests within the context of this web\n     *\n     */\n    public createBatch(): SPBatch {\n        return new SPBatch(this.parentUrl);\n    }\n\n    /**\n     * Updates this web instance with the supplied properties\n     *\n     * @param properties A plain object hash of values to update for the web\n     */\n    @tag(\"w.update\")\n    public async update(properties: ITypedHash<any>): Promise<IWebUpdateResult> {\n\n        const postBody = body(assign(metadata(\"SP.Web\"), properties), headers({ \"X-HTTP-Method\": \"MERGE\" }));\n\n        const data = await spPost(this, postBody);\n\n        return { data, web: <any>this };\n    }\n\n    /**\n     * Applies the theme specified by the contents of each of the files specified in the arguments to the site\n     *\n     * @param colorPaletteUrl The server-relative URL of the color palette file\n     * @param fontSchemeUrl The server-relative URL of the font scheme\n     * @param backgroundImageUrl The server-relative URL of the background image\n     * @param shareGenerated When true, the generated theme files are stored in the root site. When false, they are stored in this web\n     */\n    @tag(\"w.applyTheme\")\n    public applyTheme(colorPaletteUrl: string, fontSchemeUrl: string, backgroundImageUrl: string, shareGenerated: boolean): Promise<void> {\n\n        const postBody = body({\n            backgroundImageUrl,\n            colorPaletteUrl,\n            fontSchemeUrl,\n            shareGenerated,\n        });\n\n        return spPost(this.clone(Web, \"applytheme\"), postBody);\n    }\n\n    /**\n     * Applies the specified site definition or site template to the Web site that has no template applied to it\n     *\n     * @param template Name of the site definition or the name of the site template\n     */\n    @tag(\"w.applyWebTemplate\")\n    public applyWebTemplate(template: string): Promise<void> {\n\n        const q = this.clone(Web, \"applywebtemplate\");\n        q.concat(`(webTemplate='${escapeQueryStrValue(template)}')`);\n        return spPost(q);\n    }\n\n    /**\n     * Returns a collection of site templates available for the site\n     *\n     * @param language The locale id of the site templates to retrieve (default = 1033 [English, US])\n     * @param includeCrossLanguage When true, includes language-neutral site templates; otherwise false (default = true)\n     */\n    public availableWebTemplates(language = 1033, includeCrossLanugage = true): ISharePointQueryableCollection {\n        const path = `getavailablewebtemplates(lcid=${language}, doincludecrosslanguage=${includeCrossLanugage})`;\n        return tag.configure(SharePointQueryableCollection(this, path), \"w.availableWebTemplates\");\n    }\n\n    /**\n     * Returns the collection of changes from the change log that have occurred within the list, based on the specified query\n     *\n     * @param query The change query\n     */\n    @tag(\"w.getChanges\")\n    public getChanges(query: IChangeQuery): Promise<any> {\n        const postBody = body({ \"query\": assign(metadata(\"SP.ChangeQuery\"), query) });\n        return spPost(this.clone(Web, \"getchanges\"), postBody);\n    }\n\n    /**\n     * Returns the name of the image file for the icon that is used to represent the specified file\n     *\n     * @param filename The file name. If this parameter is empty, the server returns an empty string\n     * @param size The size of the icon: 16x16 pixels = 0, 32x32 pixels = 1 (default = 0)\n     * @param progId The ProgID of the application that was used to create the file, in the form OLEServerName.ObjectName\n     */\n    @tag(\"w.mapToIcon\")\n    public mapToIcon(filename: string, size = 0, progId = \"\"): Promise<string> {\n        return spGet(this.clone(Web, `maptoicon(filename='${escapeQueryStrValue(filename)}', progid='${escapeQueryStrValue(progId)}', size=${size})`));\n    }\n\n    /**\n     * Returns the tenant property corresponding to the specified key in the app catalog site\n     *\n     * @param key Id of storage entity to be set\n     */\n    @tag(\"w.getStorageEntity\")\n    public getStorageEntity(key: string): Promise<IStorageEntity> {\n        return spGet(this.clone(Web, `getStorageEntity('${escapeQueryStrValue(key)}')`));\n    }\n\n    /**\n     * This will set the storage entity identified by the given key (MUST be called in the context of the app catalog)\n     *\n     * @param key Id of storage entity to be set\n     * @param value Value of storage entity to be set\n     * @param description Description of storage entity to be set\n     * @param comments Comments of storage entity to be set\n     */\n    @tag(\"w.setStorageEntity\")\n    public setStorageEntity(key: string, value: string, description = \"\", comments = \"\"): Promise<void> {\n        return spPost(this.clone(Web, `setStorageEntity`), body({\n            comments,\n            description,\n            key,\n            value,\n        }));\n    }\n\n    /**\n     * This will remove the storage entity identified by the given key\n     *\n     * @param key Id of storage entity to be removed\n     */\n    @tag(\"w.removeStorageEntity\")\n    public removeStorageEntity(key: string): Promise<void> {\n        return spPost(this.clone(Web, `removeStorageEntity('${escapeQueryStrValue(key)}')`));\n    }\n}\nexport interface IWeb extends _Web, IDeleteable { }\nexport const Web = spInvokableFactory<IWeb>(_Web);\n\n/**\n * Result from adding a web\n *\n */\nexport interface IWebAddResult {\n    data: IWebInfo;\n    web: IWeb;\n}\n\n/**\n * Result from updating a web\n *\n */\nexport interface IWebUpdateResult {\n    data: any;\n    web: IWeb;\n}\n\nexport interface IWebInfosData {\n    Configuration: number;\n    Created: string;\n    Description: string;\n    Id: string;\n    Language: number;\n    LastItemModifiedDate: string;\n    LastItemUserModifiedDate: string;\n    ServerRelativeUrl: string;\n    Title: string;\n    WebTemplate: string;\n    WebTemplateId: number;\n}\n\nexport interface IStorageEntity {\n    Value: string | null;\n    Comment: string | null;\n    Description: string | null;\n}\n\nexport interface IWebInfo {\n    AlternateCssUrl: string;\n    AppInstanceId: string;\n    ClassicWelcomePage: string | null;\n    Configuration: number;\n    Created: string;\n    CurrentChangeToken: { StringValue: string; };\n    CustomMasterUrl: string;\n    Description: string;\n    DesignPackageId: string;\n    DocumentLibraryCalloutOfficeWebAppPreviewersDisabled: boolean;\n    EnableMinimalDownload: boolean;\n    FooterEmphasis: number;\n    FooterEnabled: boolean;\n    FooterLayout: number;\n    HeaderEmphasis: number;\n    HeaderLayout: number;\n    HorizontalQuickLaunch: boolean;\n    Id: string;\n    IsHomepageModernized: boolean;\n    IsMultilingual: boolean;\n    IsRevertHomepageLinkHidden: boolean;\n    Language: number;\n    LastItemModifiedDate: string;\n    LastItemUserModifiedDate: string;\n    MasterUrl: string;\n    MegaMenuEnabled: boolean;\n    NavAudienceTargetingEnabled: boolean;\n    NoCrawl: boolean;\n    ObjectCacheEnabled: boolean;\n    OverwriteTranslationsOnChange: boolean;\n    QuickLaunchEnabled: boolean;\n    RecycleBinEnabled: boolean;\n    ResourcePath: { DecodedUrl: string; };\n    SearchScope: number;\n    ServerRelativeUrl: string;\n    SiteLogoUrl: string | null;\n    SyndicationEnabled: boolean;\n    TenantAdminMembersCanShare: number;\n    Title: string;\n    TreeViewEnabled: boolean;\n    UIVersion: number;\n    UIVersionConfigurationEnabled: boolean;\n    Url: string;\n    WebTemplate: string;\n    WelcomePage: string;\n}\n","export interface IResourcePath {\n    DecodedUrl: string;\n    __metadata: { type: \"SP.ResourcePath\" };\n}\n\nexport function toResourcePath(url: string): IResourcePath {\n    return {\n        DecodedUrl: url,\n        __metadata: { type: \"SP.ResourcePath\" },\n    };\n}\n","import { assign, hOP, isArray, objectDefinedNotNull } from \"@pnp/common\";\nimport { body, headers } from \"@pnp/odata\";\nimport {\n    SharePointQueryable,\n    SharePointQueryableCollection,\n    ISharePointQueryableCollection,\n    _SharePointQueryableInstance,\n    _SharePointQueryableCollection,\n    ISharePointQueryable,\n    spInvokableFactory,\n    deleteableWithETag,\n    IDeleteableWithETag,\n} from \"../sharepointqueryable\";\nimport { IChangeQuery } from \"../types\";\nimport { odataUrlFrom } from \"../odata\";\nimport { metadata } from \"../utils/metadata\";\nimport { defaultPath } from \"../decorators\";\nimport { spPost } from \"../operations\";\nimport { escapeQueryStrValue } from \"../utils/escapeQueryStrValue\";\nimport { tag } from \"../telemetry\";\nimport { IBasePermissions } from \"../security/types\";\nimport { IFieldInfo } from \"../fields/types\";\nimport { IFormInfo } from \"../forms/types\";\nimport { IFolderInfo } from \"../folders/types\";\nimport { IViewInfo } from \"../views/types\";\nimport { IUserCustomActionInfo } from \"../user-custom-actions/types\";\nimport { toResourcePath } from \"../utils/toResourcePath\";\n\n@defaultPath(\"lists\")\nexport class _Lists extends _SharePointQueryableCollection<IListInfo[]> {\n\n    /**\n     * Gets a list from the collection by guid id\n     *\n     * @param id The Id of the list (GUID)\n     */\n    public getById(id: string): IList {\n        return tag.configure(List(this).concat(`('${id}')`), \"ls.getById\");\n    }\n\n    /**\n     * Gets a list from the collection by title\n     *\n     * @param title The title of the list\n     */\n    public getByTitle(title: string): IList {\n        return tag.configure(List(this, `getByTitle('${escapeQueryStrValue(title)}')`), \"ls.getByTitle\");\n    }\n\n    /**\n     * Adds a new list to the collection\n     *\n     * @param title The new list's title\n     * @param description The new list's description\n     * @param template The list template value\n     * @param enableContentTypes If true content types will be allowed and enabled, otherwise they will be disallowed and not enabled\n     * @param additionalSettings Will be passed as part of the list creation body\n     */\n    @tag(\"ls.add\")\n    public async add(title: string, desc = \"\", template = 100, enableContentTypes = false, additionalSettings: Partial<IListInfo> = {}): Promise<IListAddResult> {\n\n        const addSettings = Object.assign({\n            \"AllowContentTypes\": enableContentTypes,\n            \"BaseTemplate\": template,\n            \"ContentTypesEnabled\": enableContentTypes,\n            \"Description\": desc,\n            \"Title\": title,\n        }, metadata(\"SP.List\"), additionalSettings);\n\n        const data = await spPost(this, body(addSettings));\n\n        return { data, list: this.getByTitle(addSettings.Title) };\n    }\n\n    /**\n     * Ensures that the specified list exists in the collection (note: this method not supported for batching)\n     *\n     * @param title The new list's title\n     * @param desc The new list's description\n     * @param template The list template value\n     * @param enableContentTypes If true content types will be allowed and enabled, otherwise they will be disallowed and not enabled\n     * @param additionalSettings Will be passed as part of the list creation body or used to update an existing list\n     */\n    @tag(\"ls.ensure\")\n    public async ensure(\n        title: string,\n        desc = \"\",\n        template = 100,\n        enableContentTypes = false,\n        additionalSettings: Partial<IListInfo> = {}): Promise<IListEnsureResult> {\n\n        if (this.hasBatch) {\n            throw Error(\"The ensure list method is not supported for use in a batch.\");\n        }\n\n        const addOrUpdateSettings = assign(additionalSettings, { Title: title, Description: desc, ContentTypesEnabled: enableContentTypes }, true);\n\n        const list: IList = this.getByTitle(addOrUpdateSettings.Title);\n\n        try {\n\n            // this will throw if the list doesn't exist\n            await list.select(\"Title\")();\n            const data = await list.update(addOrUpdateSettings).then(r => r.data);\n            return { created: false, data, list: this.getByTitle(addOrUpdateSettings.Title) };\n\n        } catch (e) {\n\n            const data = await this.add(title, desc, template, enableContentTypes, addOrUpdateSettings).then(r => r.data);\n            return { created: true, data, list: this.getByTitle(addOrUpdateSettings.Title) };\n        }\n    }\n\n    /**\n     * Gets a list that is the default asset location for images or other files, which the users upload to their wiki pages.\n     */\n    @tag(\"ls.ensureSiteAssetsLibrary\")\n    public async ensureSiteAssetsLibrary(): Promise<IList> {\n        const json = await spPost(this.clone(Lists, \"ensuresiteassetslibrary\"));\n        return List(odataUrlFrom(json));\n    }\n\n    /**\n     * Gets a list that is the default location for wiki pages.\n     */\n    @tag(\"ls.ensureSitePagesLibrary\")\n    public async ensureSitePagesLibrary(): Promise<IList> {\n        const json = await spPost(this.clone(Lists, \"ensuresitepageslibrary\"));\n        return List(odataUrlFrom(json));\n    }\n}\nexport interface ILists extends _Lists { }\nexport const Lists = spInvokableFactory<ILists>(_Lists);\n\nexport class _List extends _SharePointQueryableInstance<IListInfo> {\n\n    public delete = deleteableWithETag(\"l\");\n\n    /**\n     * Gets the effective base permissions of this list\n     *\n     */\n    public get effectiveBasePermissions(): ISharePointQueryable {\n        return tag.configure(SharePointQueryable(this, \"EffectiveBasePermissions\"), \"l.effectiveBasePermissions\");\n    }\n\n    /**\n     * Gets the event receivers attached to this list\n     *\n     */\n    public get eventReceivers(): ISharePointQueryableCollection {\n        return tag.configure(SharePointQueryableCollection(this, \"EventReceivers\"), \"l.eventReceivers\");\n    }\n\n    /**\n     * Gets the related fields of this list\n     *\n     */\n    public get relatedFields(): ISharePointQueryable {\n        return tag.configure(SharePointQueryable(this, \"getRelatedFields\"), \"l.relatedFields\");\n    }\n\n    /**\n     * Gets the IRM settings for this list\n     *\n     */\n    public get informationRightsManagementSettings(): ISharePointQueryable {\n        return tag.configure(SharePointQueryable(this, \"InformationRightsManagementSettings\"), \"l.informationRightsManagementSettings\");\n    }\n\n    /**\n     * Updates this list intance with the supplied properties\n     *\n     * @param properties A plain object hash of values to update for the list\n     * @param eTag Value used in the IF-Match header, by default \"*\"\n     */\n    @tag(\"l.update\")\n    public async update(properties: Partial<IListInfo>, eTag = \"*\"): Promise<IListUpdateResult> {\n\n        const postBody = body(assign(metadata(\"SP.List\"), properties), headers({\n            \"IF-Match\": eTag,\n            \"X-HTTP-Method\": \"MERGE\",\n        }));\n\n        const data = await spPost(this, postBody);\n\n        let list: any = this;\n\n        if (hOP(properties, \"Title\")) {\n            list = this.getParent(List, this.parentUrl, `getByTitle('${properties.Title}')`);\n        }\n\n        return {\n            data,\n            list,\n        };\n    }\n\n    /**\n     * Returns the collection of changes from the change log that have occurred within the list, based on the specified query.\n     * @param query A query that is performed against the change log.\n     */\n    @tag(\"l.getChanges\")\n    public getChanges(query: IChangeQuery): Promise<any> {\n\n        return spPost(this.clone(List, \"getchanges\"), body({ query: assign(metadata(\"SP.ChangeQuery\"), query) }));\n    }\n\n    /**\n     * Returns the collection of items in the list based on the provided CamlQuery\n     * @param query A query that is performed against the list\n     * @param expands An expanded array of n items that contains fields to expand in the CamlQuery\n     */\n    @tag(\"l.CAMLQuery\")\n    public getItemsByCAMLQuery(query: ICamlQuery, ...expands: string[]): Promise<any> {\n\n        const q = this.clone(List, \"getitems\");\n        return spPost(q.expand.apply(q, expands), body({ query: assign(metadata(\"SP.CamlQuery\"), query) }));\n    }\n\n    /**\n     * See: https://msdn.microsoft.com/en-us/library/office/dn292554.aspx\n     * @param query An object that defines the change log item query\n     */\n    @tag(\"l.ChangesSinceToken\")\n    public getListItemChangesSinceToken(query: IChangeLogItemQuery): Promise<string> {\n\n        const o = this.clone(List, \"getlistitemchangessincetoken\").usingParser({ parse(r: Response) { return r.text(); } });\n        return spPost(o, body({ \"query\": assign(metadata(\"SP.ChangeLogItemQuery\"), query) }));\n    }\n\n    /**\n     * Moves the list to the Recycle Bin and returns the identifier of the new Recycle Bin item.\n     */\n    @tag(\"l.recycle\")\n    public async recycle(): Promise<string> {\n        const data = await spPost(this.clone(List, \"recycle\"));\n        return hOP(data, \"Recycle\") ? data.Recycle : data;\n    }\n\n    /**\n     * Renders list data based on the view xml provided\n     * @param viewXml A string object representing a view xml\n     */\n    @tag(\"l.renderListData\")\n    public async renderListData(viewXml: string): Promise<IRenderListData> {\n\n        const q = this.clone(List, \"renderlistdata(@viewXml)\");\n        q.query.set(\"@viewXml\", `'${viewXml}'`);\n        const data = await spPost(q);\n\n        // data will be a string, so we parse it again\n        return JSON.parse(hOP(data, \"RenderListData\") ? data.RenderListData : data);\n    }\n\n    /**\n     * Returns the data for the specified query view\n     *\n     * @param parameters The parameters to be used to render list data as JSON string.\n     * @param overrideParameters The parameters that are used to override and extend the regular SPRenderListDataParameters.\n     * @param queryParams Allows setting of query parameters\n     */\n    @tag(\"l.AsStream\")\n    public renderListDataAsStream(parameters: IRenderListDataParameters, overrideParameters: any = null, queryParams = new Map<string, string>()): Promise<any> {\n\n        if (hOP(parameters, \"RenderOptions\") && isArray(parameters.RenderOptions)) {\n            parameters.RenderOptions = (<RenderListDataOptions[]>parameters.RenderOptions).reduce((v, c) => v + c);\n        }\n\n        const postBody = body({\n            overrideParameters: assign(metadata(\"SP.RenderListDataOverrideParameters\"), overrideParameters),\n            parameters: assign(metadata(\"SP.RenderListDataParameters\"), parameters),\n        });\n\n        const clone = this.clone(List, \"RenderListDataAsStream\", true);\n\n        if (queryParams && queryParams.size > 0) {\n            queryParams.forEach((v, k) => clone.query.set(k, v));\n        }\n\n        return spPost(clone, postBody);\n    }\n\n    /**\n     * Gets the field values and field schema attributes for a list item.\n     * @param itemId Item id of the item to render form data for\n     * @param formId The id of the form\n     * @param mode Enum representing the control mode of the form (Display, Edit, New)\n     */\n    @tag(\"l.renderListFormData\")\n    public async renderListFormData(itemId: number, formId: string, mode: ControlMode): Promise<IListFormData> {\n        const data = await spPost(this.clone(List, `renderlistformdata(itemid=${itemId}, formid='${formId}', mode='${mode}')`));\n        // data will be a string, so we parse it again\n        return JSON.parse(hOP(data, \"RenderListFormData\") ? data.RenderListFormData : data);\n    }\n\n    /**\n     * Reserves a list item ID for idempotent list item creation.\n     */\n    @tag(\"l.reserveListItemId\")\n    public async reserveListItemId(): Promise<number> {\n        const data = await spPost(this.clone(List, \"reservelistitemid\"));\n        return hOP(data, \"ReserveListItemId\") ? data.ReserveListItemId : data;\n    }\n\n    /**\n     * Returns the ListItemEntityTypeFullName for this list, used when adding/updating list items. Does not support batching.\n     */\n    @tag(\"l.getListItemEntityTypeFullName\")\n    public getListItemEntityTypeFullName(): Promise<string> {\n        return this.clone(List, null, false).select(\"ListItemEntityTypeFullName\").get<{ ListItemEntityTypeFullName: string }>().then(o => o.ListItemEntityTypeFullName);\n    }\n\n    /**\n     * Creates an item using path (in a folder), validates and sets its field values.\n     *\n     * @param formValues The fields to change and their new values.\n     * @param decodedUrl Path decoded url; folder's server relative path.\n     * @param bNewDocumentUpdate true if the list item is a document being updated after upload; otherwise false.\n     * @param checkInComment Optional check in comment.\n     * @param additionalProps Optional set of additional properties LeafName new document file name, \n     */\n    @tag(\"l.addValidateUpdateItemUsingPath\")\n    public async addValidateUpdateItemUsingPath(\n        formValues: IListItemFormUpdateValue[],\n        decodedUrl: string,\n        bNewDocumentUpdate = false,\n        checkInComment?: string,\n        additionalProps?: {\n            /**\n             * If creating a document or folder, the name\n             */\n            leafName?: string,\n            /**\n             * 0: File, 1: Folder, 2: Web\n             */\n            objectType?: 0 | 1 | 2,\n        },\n    ): Promise<IListItemFormUpdateValue[]> {\n\n        const addProps: any = {\n            FolderPath: toResourcePath(decodedUrl),\n        };\n\n        if (objectDefinedNotNull(additionalProps)) {\n\n            if (additionalProps.leafName) {\n                addProps.LeafName = toResourcePath(additionalProps.leafName);\n            }\n\n            if (additionalProps.objectType) {\n                addProps.UnderlyingObjectType = additionalProps.objectType;\n            }\n        }\n\n        const res = await spPost(this.clone(List, \"AddValidateUpdateItemUsingPath()\"), body({\n            bNewDocumentUpdate,\n            checkInComment,\n            formValues,\n            listItemCreateInfo: assign(metadata(\"SP.ListItemCreationInformationUsingPath\"), addProps),\n        }));\n\n        return hOP(res, \"AddValidateUpdateItemUsingPath\") ? res.AddValidateUpdateItemUsingPath : res;\n    }\n}\nexport interface IList extends _List, IDeleteableWithETag { }\nexport const List = spInvokableFactory<IList>(_List);\n\n/**\n * Represents the output of the add method\n */\nexport interface IListAddResult {\n    list: IList;\n    data: any;\n}\n\n/**\n * Represents the output of the update method\n */\nexport interface IListUpdateResult {\n    list: IList;\n    data: any;\n}\n\n/**\n * Represents the output of the ensure method\n */\nexport interface IListEnsureResult {\n    list: IList;\n    created: boolean;\n    data: any;\n}\n\n/**\n * Specifies a Collaborative Application Markup Language (CAML) query on a list or joined lists.\n */\nexport interface ICamlQuery {\n\n    /**\n     * Gets or sets a value that indicates whether the query returns dates in Coordinated Universal Time (UTC) format.\n     */\n    DatesInUtc?: boolean;\n\n    /**\n     * Gets or sets a value that specifies the server relative URL of a list folder from which results will be returned.\n     */\n    FolderServerRelativeUrl?: string;\n\n    /**\n     * Gets or sets a value that specifies the information required to get the next page of data for the list view.\n     */\n    ListItemCollectionPosition?: IListItemCollectionPosition;\n\n    /**\n     * Gets or sets value that specifies the XML schema that defines the list view.\n     */\n    ViewXml?: string;\n}\n\n/**\n * Specifies the information required to get the next page of data for a list view.\n */\nexport interface IListItemCollectionPosition {\n    /**\n     * Gets or sets a value that specifies information, as name-value pairs, required to get the next page of data for a list view.\n     */\n    PagingInfo: string;\n}\n\n/**\n * Represents the input parameter of the GetListItemChangesSinceToken method.\n */\nexport interface IChangeLogItemQuery {\n    /**\n     * The change token for the request.\n     */\n    ChangeToken?: string;\n\n    /**\n     * The XML element that defines custom filtering for the query.\n     */\n    Contains?: string;\n\n    /**\n     * The records from the list to return and their return order.\n     */\n    Query?: string;\n\n    /**\n     * The options for modifying the query.\n     */\n    QueryOptions?: string;\n\n    /**\n     * RowLimit\n     */\n    RowLimit?: string;\n\n    /**\n     * The names of the fields to include in the query result.\n     */\n    ViewFields?: string;\n\n    /**\n     * The GUID of the view.\n     */\n    ViewName?: string;\n}\n\n/**\n * Represents the output parameter of the renderListFormData method.\n */\nexport interface IListFormData {\n    ContentType?: string;\n    Title?: string;\n    Author?: string;\n    Editor?: string;\n    Created?: Date;\n    Modified: Date;\n    Attachments?: any;\n    ListSchema?: any;\n    FormControlMode?: number;\n    FieldControlModes?: {\n        Title?: number,\n        Author?: number,\n        Editor?: number,\n        Created?: number,\n        Modified?: number,\n        Attachments?: number,\n    };\n    WebAttributes?: {\n        WebUrl?: string,\n        EffectivePresenceEnabled?: boolean,\n        AllowScriptableWebParts?: boolean,\n        PermissionCustomizePages?: boolean,\n        LCID?: number,\n        CurrentUserId?: number,\n    };\n    ItemAttributes?: {\n        Id?: number,\n        FsObjType?: number,\n        ExternalListItem?: boolean,\n        Url?: string,\n        EffectiveBasePermissionsLow?: number,\n        EffectiveBasePermissionsHigh?: number,\n    };\n    ListAttributes?: {\n        Id?: string,\n        BaseType?: number,\n        Direction?: string,\n        ListTemplateType?: number,\n        DefaultItemOpen?: number,\n        EnableVersioning?: boolean,\n    };\n    CSRCustomLayout?: boolean;\n    PostBackRequired?: boolean;\n    PreviousPostBackHandled?: boolean;\n    UploadMode?: boolean;\n    SubmitButtonID?: string;\n    ItemContentTypeName?: string;\n    ItemContentTypeId?: string;\n    JSLinks?: string;\n}\n\n/**\n * Enum representing the options of the RenderOptions property on IRenderListDataParameters interface\n */\nexport enum RenderListDataOptions {\n    None = 0,\n    ContextInfo = 1,\n    ListData = 2,\n    ListSchema = 4,\n    MenuView = 8,\n    ListContentType = 16,\n    FileSystemItemId = 32,\n    ClientFormSchema = 64,\n    QuickLaunch = 128,\n    Spotlight = 256,\n    Visualization = 512,\n    ViewMetadata = 1024,\n    DisableAutoHyperlink = 2048,\n    EnableMediaTAUrls = 4096,\n    ParentInfo = 8192,\n    PageContextInfo = 16384,\n    ClientSideComponentManifest = 32768,\n}\n/**\n * Represents the parameters to be used to render list data as JSON string in the RenderListDataAsStream method of IList.\n */\nexport interface IRenderListDataParameters {\n    AddRequiredFields?: boolean;\n    AllowMultipleValueFilterForTaxonomyFields?: boolean;\n    AudienceTarget?: boolean;\n    DatesInUtc?: boolean;\n    DeferredRender?: boolean;\n    ExpandGroups?: boolean;\n    FirstGroupOnly?: boolean;\n    FolderServerRelativeUrl?: string;\n    ImageFieldsToTryRewriteToCdnUrls?: string;\n    MergeDefaultView?: boolean;\n    OriginalDate?: boolean;\n    OverrideViewXml?: string;\n    Paging?: string;\n    ReplaceGroup?: boolean;\n    RenderOptions?: RenderListDataOptions[] | number;\n    ViewXml?: string;\n}\n\n/**\n * Represents properties of a list item field and its value.\n */\nexport interface IListItemFormUpdateValue {\n\n    /**\n     * The error message result after validating the value for the field.\n     */\n    ErrorMessage?: string;\n\n    /**\n     * The internal name of the field.\n     */\n    FieldName?: string;\n\n    /**\n     * The value of the field, in string format.\n     */\n    FieldValue?: string;\n\n    /**\n     * Indicates whether there was an error result after validating the value for the field.\n     */\n    HasException?: boolean;\n}\n\n/**\n * Represents the output parameter of the renderListData method.\n */\nexport interface IRenderListData {\n    Row: any[];\n    FirstRow: number;\n    FolderPermissions: string;\n    LastRow: number;\n    FilterLink: string;\n    ForceNoHierarchy: string;\n    HierarchyHasIndention: string;\n}\n\n/**\n * Determines the display mode of the given control or view\n */\nexport enum ControlMode {\n    Display = 1,\n    Edit = 2,\n    New = 3,\n}\n\nexport interface IListInfo {\n    AllowContentTypes: boolean;\n    AllowDeletion: boolean;\n    BaseTemplate: number;\n    BaseType: any;\n    BrowserFileHandling: any;\n    ContentTypes: any[];\n    ContentTypesEnabled: boolean;\n    CrawlNonDefaultViews: boolean;\n    CreatablesInfo: any;\n    Created: string;\n    CurrentChangeToken: any;\n    CustomActionElements: any[];\n    DataSource: any;\n    DefaultContentApprovalWorkflowId: string;\n    DefaultDisplayFormUrl: string;\n    DefaultEditFormUrl: string;\n    DefaultNewFormUrl: string;\n    DefaultView: any;\n    DefaultViewPath: any;\n    DefaultViewUrl: string;\n    Description: string;\n    DescriptionResource: any;\n    Direction: string;\n    DocumentTemplateUrl: string;\n    DraftVersionVisibility: any;\n    EffectiveBasePermissions: IBasePermissions;\n    EffectiveBasePermissionsForUI: IBasePermissions;\n    EnableAssignToEmail: boolean;\n    EnableAttachments: boolean;\n    EnableFolderCreation: boolean;\n    EnableMinorVersions: boolean;\n    EnableModeration: boolean;\n    EnableRequestSignOff: boolean;\n    EnableVersioning: boolean;\n    EntityTypeName: string;\n    EventReceivers: any[];\n    ExcludeFromOfflineClient: boolean;\n    ExemptFromBlockDownloadOfNonViewableFiles: boolean;\n    Fields: Partial<IFieldInfo>[];\n    FileSavePostProcessingEnabled: boolean;\n    ForceCheckout: boolean;\n    Forms: IFormInfo[];\n    HasExternalDataSource: boolean;\n    Hidden: boolean;\n    Id: string;\n    ImagePath: { DecodedUrl: string; };\n    ImageUrl: string;\n    InformationRightsManagementSettings: any[];\n    IrmEnabled: boolean;\n    IrmExpire: boolean;\n    IrmReject: boolean;\n    IsApplicationList: boolean;\n    IsCatalog: boolean;\n    IsPrivate: boolean;\n    IsSiteAssetsLibrary: boolean;\n    IsSystemList: boolean;\n    ItemCount: number;\n    LastItemDeletedDate: string;\n    LastItemModifiedDate: string;\n    LastItemUserModifiedDate: string;\n    ListExperienceOptions: number;\n    ListItemEntityTypeFullName: string;\n    MajorVersionLimit: number;\n    MajorWithMinorVersionsLimit: number;\n    MultipleDataList: boolean;\n    NoCrawl: boolean;\n    OnQuickLaunch: boolean;\n    ParentWebPath: { DecodedUrl: string; };\n    ParentWebUrl: string;\n    ParserDisabled: boolean;\n    ReadSecurity: number;\n    RootFolder: IFolderInfo;\n    SchemaXml: string;\n    ServerTemplateCanCreateFolders: boolean;\n    TemplateFeatureId: string;\n    Title: string;\n    UserCustomActions: IUserCustomActionInfo[];\n    ValidationFormula: string;\n    ValidationMessage: string;\n    Views: IViewInfo[];\n    WorkflowAssociations: any[];\n    WriteSecurity: number;\n}\n","import { addProp } from \"@pnp/odata\";\nimport { _Web, Web } from \"../webs/types\";\nimport { Lists, ILists, IList, List } from \"./types\";\nimport { odataUrlFrom } from \"../odata\";\nimport { ISharePointQueryableCollection, SharePointQueryableCollection } from \"../sharepointqueryable\";\nimport { escapeQueryStrValue } from \"../utils/escapeQueryStrValue\";\n\ndeclare module \"../webs/types\" {\n    interface _Web {\n        readonly lists: ILists;\n        readonly siteUserInfoList: IList;\n        readonly defaultDocumentLibrary: IList;\n        readonly customListTemplates: ISharePointQueryableCollection;\n        getList(listRelativeUrl: string): IList;\n        getCatalog(type: number): Promise<IList>;\n    }\n    interface IWeb {\n\n        /**\n         * Gets the collection of all lists that are contained in the Web site\n         */\n        readonly lists: ILists;\n\n        /**\n         * Gets the UserInfo list of the site collection that contains the Web site\n         */\n        readonly siteUserInfoList: IList;\n\n        /**\n         * Get a reference the default documents library of a web\n         */\n        readonly defaultDocumentLibrary: IList;\n\n        /**\n         * Gets the collection of all list definitions and list templates that are available\n         */\n        readonly customListTemplates: ISharePointQueryableCollection;\n\n        /**\n         * Gets a list by server relative url (list's root folder)\n         *\n         * @param listRelativeUrl The server relative path to the list's root folder (including /sites/ if applicable)\n         */\n        getList(listRelativeUrl: string): IList;\n\n        /**\n         * Returns the list gallery on the site\n         *\n         * @param type The gallery type - WebTemplateCatalog = 111, WebPartCatalog = 113 ListTemplateCatalog = 114,\n         * MasterPageCatalog = 116, SolutionCatalog = 121, ThemeCatalog = 123, DesignCatalog = 124, AppDataCatalog = 125\n         */\n        getCatalog(type: number): Promise<IList>;\n    }\n}\n\naddProp(_Web, \"lists\", Lists);\naddProp(_Web, \"siteUserInfoList\", List, \"siteuserinfolist\");\naddProp(_Web, \"defaultDocumentLibrary\", List, \"DefaultDocumentLibrary\");\naddProp(_Web, \"customListTemplates\", SharePointQueryableCollection, \"getcustomlisttemplates\");\n\n_Web.prototype.getList = function (this: _Web, listRelativeUrl: string): IList {\n    return List(this, `getList('${escapeQueryStrValue(listRelativeUrl)}')`);\n};\n\n_Web.prototype.getCatalog = async function (this: _Web, type: number): Promise<IList> {\n    const data = await this.clone(Web, `getcatalog(${type})`).select(\"Id\").get();\n    return List(odataUrlFrom(data));\n};\n","import {\n    SharePointQueryable,\n    _SharePointQueryableInstance,\n    ISharePointQueryableInstance,\n    _SharePointQueryableCollection,\n    ISharePointQueryable,\n    SharePointQueryableInstance,\n    spInvokableFactory,\n    deleteableWithETag,\n    IDeleteableWithETag,\n} from \"../sharepointqueryable\";\nimport { assign, ITypedHash, hOP } from \"@pnp/common\";\nimport { IListItemFormUpdateValue, List } from \"../lists/types\";\nimport { ODataParser, body, headers } from \"@pnp/odata\";\nimport { IList } from \"../lists\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\nimport { metadata } from \"../utils/metadata\";\nimport { defaultPath } from \"../decorators\";\nimport { spPost } from \"../operations\";\nimport { tag } from \"../telemetry\";\n\n/**\n * Describes a collection of Item objects\n *\n */\n@defaultPath(\"items\")\nexport class _Items extends _SharePointQueryableCollection {\n\n    /**\t\n    * Gets an Item by id\t\n    *\t\n    * @param id The integer id of the item to retrieve\t\n    */\n    public getById(id: number): IItem {\n        return tag.configure(Item(this).concat(`(${id})`), \"is.getById\");\n    }\n\n    /**\n     * Gets BCS Item by string id\n     *\n     * @param stringId The string id of the BCS item to retrieve\n     */\n    public getItemByStringId(stringId: string): IItem {\n        // creates an item with the parent list path and append out method call\n        return tag.configure(Item(this.parentUrl, `getItemByStringId('${stringId}')`), \"is.getItemByStringId\");\n    }\n\n    /**\n     * Skips the specified number of items (https://msdn.microsoft.com/en-us/library/office/fp142385.aspx#sectionSection6)\n     *\n     * @param skip The starting id where the page should start, use with top to specify pages\n     * @param reverse It true the PagedPrev=true parameter is added allowing backwards navigation in the collection\n     */\n    public skip(skip: number, reverse = false): this {\n        if (reverse) {\n            this.query.set(\"$skiptoken\", encodeURIComponent(`Paged=TRUE&PagedPrev=TRUE&p_ID=${skip}`));\n        } else {\n            this.query.set(\"$skiptoken\", encodeURIComponent(`Paged=TRUE&p_ID=${skip}`));\n        }\n        return this;\n    }\n\n    /**\n     * Gets a collection designed to aid in paging through data\n     *\n     */\n    @tag(\"is.getPaged\")\n    public getPaged<T = any[]>(): Promise<PagedItemCollection<T>> {\n        return this.usingParser(new PagedItemCollectionParser<T>(this))();\n    }\n\n    /**\n     * Gets all the items in a list, regardless of count. Does not support batching or caching\n     *\n     *  @param requestSize Number of items to return in each request (Default: 2000)\n     *  @param acceptHeader Allows for setting the value of the Accept header for SP 2013 support\n     */\n    @tag(\"is.getAll\")\n    public getAll(requestSize = 2000, acceptHeader = \"application/json;odata=nometadata\"): Promise<any[]> {\n\n        Logger.write(\"Calling items.getAll should be done sparingly. Ensure this is the correct choice. If you are unsure, it is not.\", LogLevel.Warning);\n\n        // this will be used for the actual query\n        // and we set no metadata here to try and reduce traffic\n        const items = <IItems>Items(this, \"\").top(requestSize).configure({\n            headers: {\n                \"Accept\": acceptHeader,\n            },\n        });\n\n        // let's copy over the odata query params that can be applied\n        // $top - allow setting the page size this way (override what we did above)\n        // $select - allow picking the return fields (good behavior)\n        // $filter - allow setting a filter, though this may fail due for large lists\n        this.query.forEach((v: string, k: string) => {\n            if (/^\\$select|filter|top|expand$/i.test(k)) {\n                items.query.set(k, v);\n            }\n        });\n\n        // give back the promise\n        return new Promise((resolve, reject) => {\n\n            // this will eventually hold the items we return\n            const itemsCollector: any[] = [];\n\n            // action that will gather up our results recursively\n            const gatherer = (last: PagedItemCollection<any>) => {\n\n                // collect that set of results\n                [].push.apply(itemsCollector, last.results);\n\n                // if we have more, repeat - otherwise resolve with the collected items\n                if (last.hasNext) {\n                    last.getNext().then(gatherer).catch(reject);\n                } else {\n                    resolve(itemsCollector);\n                }\n            };\n\n            // start the cycle\n            items.getPaged().then(gatherer).catch(reject);\n        });\n    }\n\n    /**\n     * Adds a new item to the collection\n     *\n     * @param properties The new items's properties\n     * @param listItemEntityTypeFullName The type name of the list's entities\n     */\n    @tag(\"is.add\")\n    public async add(properties: ITypedHash<any> = {}, listItemEntityTypeFullName: string = null): Promise<IItemAddResult> {\n\n        const removeDependency = this.addBatchDependency();\n\n        const listItemEntityType = await this.ensureListItemEntityTypeName(listItemEntityTypeFullName);\n\n        const postBody = body(assign(metadata(listItemEntityType), properties));\n\n        const promise = spPost<{ Id: number }>(this.clone(Items, \"\"), postBody).then((data) => {\n            return {\n                data: data,\n                item: this.getById(data.Id),\n            };\n        });\n\n        removeDependency();\n\n        return promise;\n    }\n\n    /**\n     * Ensures we have the proper list item entity type name, either from the value provided or from the list\n     *\n     * @param candidatelistItemEntityTypeFullName The potential type name\n     */\n    private ensureListItemEntityTypeName(candidatelistItemEntityTypeFullName: string): Promise<string> {\n\n        return candidatelistItemEntityTypeFullName ?\n            Promise.resolve(candidatelistItemEntityTypeFullName) :\n            this.getParent<IList>(List).getListItemEntityTypeFullName();\n    }\n}\nexport interface IItems extends _Items { }\nexport const Items = spInvokableFactory<IItems>(_Items);\n\n/**\n * Descrines a single Item instance\n *\n */\nexport class _Item extends _SharePointQueryableInstance {\n\n    public delete = deleteableWithETag(\"i\");\n\n    /**\n     * Gets the effective base permissions for the item\n     *\n     */\n    public get effectiveBasePermissions(): ISharePointQueryable {\n        return tag.configure(SharePointQueryable(this, \"EffectiveBasePermissions\"), \"i.effectiveBasePermissions\");\n    }\n\n    /**\n     * Gets the effective base permissions for the item in a UI context\n     *\n     */\n    public get effectiveBasePermissionsForUI(): ISharePointQueryable {\n        return tag.configure(SharePointQueryable(this, \"EffectiveBasePermissionsForUI\"), \"i.effectiveBasePermissionsForUI\");\n    }\n\n    /**\n     * Gets the field values for this list item in their HTML representation\n     *\n     */\n    public get fieldValuesAsHTML(): ISharePointQueryableInstance {\n        return tag.configure(SharePointQueryableInstance(this, \"FieldValuesAsHTML\"), \"i.fvHTML\");\n    }\n\n    /**\n     * Gets the field values for this list item in their text representation\n     *\n     */\n    public get fieldValuesAsText(): ISharePointQueryableInstance {\n        return tag.configure(SharePointQueryableInstance(this, \"FieldValuesAsText\"), \"i.fvText\");\n    }\n\n    /**\n     * Gets the field values for this list item for use in editing controls\n     *\n     */\n    public get fieldValuesForEdit(): ISharePointQueryableInstance {\n        return tag.configure(SharePointQueryableInstance(this, \"FieldValuesForEdit\"), \"i.fvEdit\");\n    }\n\n    /**\n     * Gets the collection of versions associated with this item\n     */\n    public get versions(): IItemVersions {\n        return tag.configure(ItemVersions(this), \"i.versions\");\n    }\n\n    public get list(): IList {\n        return this.getParent<IList>(List, this.parentUrl.substr(0, this.parentUrl.lastIndexOf(\"/\")));\n    }\n\n    /**\n     * Updates this list intance with the supplied properties\n     *\n     * @param properties A plain object hash of values to update for the list\n     * @param eTag Value used in the IF-Match header, by default \"*\"\n     * @param listItemEntityTypeFullName The type name of the list's entities\n     */\n    public async update(properties: ITypedHash<any>, eTag = \"*\", listItemEntityTypeFullName: string = null): Promise<IItemUpdateResult> {\n\n        const removeDependency = this.addBatchDependency();\n\n        const listItemEntityType = await this.ensureListItemEntityTypeName(listItemEntityTypeFullName);\n\n        const postBody = body(assign(metadata(listItemEntityType), properties), headers({\n            \"IF-Match\": eTag,\n            \"X-HTTP-Method\": \"MERGE\",\n        }));\n\n        removeDependency();\n\n        const poster = tag.configure(this.clone(Item).usingParser(new ItemUpdatedParser()), \"i.update\");\n        const data = await spPost(poster, postBody);\n\n        return {\n            data,\n            item: this,\n        };\n    }\n\n    /**\n     * Moves the list item to the Recycle Bin and returns the identifier of the new Recycle Bin item.\n     */\n    @tag(\"i.recycle\")\n    public recycle(): Promise<string> {\n        return spPost<string>(this.clone(Item, \"recycle\"));\n    }\n\n    /**\n     * Gets a string representation of the full URL to the WOPI frame.\n     * If there is no associated WOPI application, or no associated action, an empty string is returned.\n     *\n     * @param action Display mode: 0: view, 1: edit, 2: mobileView, 3: interactivePreview\n     */\n    @tag(\"i.getWopiFrameUrl\")\n    public async getWopiFrameUrl(action = 0): Promise<string> {\n        const i = this.clone(Item, \"getWOPIFrameUrl(@action)\");\n        i.query.set(\"@action\", <any>action);\n\n        const data = await spPost(i);\n\n        // handle verbose mode\n        if (hOP(data, \"GetWOPIFrameUrl\")) {\n            return data.GetWOPIFrameUrl;\n        }\n\n        return data;\n    }\n\n    /**\n     * Validates and sets the values of the specified collection of fields for the list item.\n     *\n     * @param formValues The fields to change and their new values.\n     * @param bNewDocumentUpdate true if the list item is a document being updated after upload; otherwise false.\n     */\n    @tag(\"i.validateUpdateListItem\")\n    public validateUpdateListItem(formValues: IListItemFormUpdateValue[], bNewDocumentUpdate = false): Promise<IListItemFormUpdateValue[]> {\n        return spPost(this.clone(Item, \"validateupdatelistitem\"), body({ formValues, bNewDocumentUpdate }));\n    }\n\n    /**\n     * Ensures we have the proper list item entity type name, either from the value provided or from the list\n     *\n     * @param candidatelistItemEntityTypeFullName The potential type name\n     */\n    private ensureListItemEntityTypeName(candidatelistItemEntityTypeFullName: string): Promise<string> {\n\n        return candidatelistItemEntityTypeFullName ?\n            Promise.resolve(candidatelistItemEntityTypeFullName) :\n            this.list.getListItemEntityTypeFullName();\n    }\n}\nexport interface IItem extends _Item, IDeleteableWithETag { }\nexport const Item = spInvokableFactory<IItem>(_Item);\n\n/**\n * Describes a collection of Version objects\n *\n */\n@defaultPath(\"versions\")\nexport class _ItemVersions extends _SharePointQueryableCollection {\n    /**\t\n     * Gets a version by id\t\n     *\t\n     * @param versionId The id of the version to retrieve\t\n     */\n    public getById(versionId: number): IItemVersion {\n        return tag.configure(ItemVersion(this).concat(`(${versionId})`), \"iv.getById\");\n    }\n}\nexport interface IItemVersions extends _ItemVersions { }\nexport const ItemVersions = spInvokableFactory<IItemVersions>(_ItemVersions);\n\n/**\n * Describes a single Version instance\n *\n */\nexport class _ItemVersion extends _SharePointQueryableInstance {\n    public delete = deleteableWithETag(\"iv\");\n}\nexport interface IItemVersion extends _ItemVersion, IDeleteableWithETag { }\nexport const ItemVersion = spInvokableFactory<IItemVersion>(_ItemVersion);\n\n/**\n * Provides paging functionality for list items\n */\nexport class PagedItemCollection<T> {\n\n    constructor(private parent: _Items, private nextUrl: string, public results: T) { }\n\n    /**\n     * If true there are more results available in the set, otherwise there are not\n     */\n    public get hasNext(): boolean {\n        return typeof this.nextUrl === \"string\" && this.nextUrl.length > 0;\n    }\n\n    /**\n     * Gets the next set of results, or resolves to null if no results are available\n     */\n    public getNext(): Promise<PagedItemCollection<T>> {\n\n        if (this.hasNext) {\n            const items = tag.configure(<IItems>Items(this.nextUrl, null).configureFrom(this.parent), \"ip.getNext\");\n            return items.getPaged<T>();\n        }\n\n        return new Promise<any>(r => r(null));\n    }\n}\n\nclass PagedItemCollectionParser<T = any[]> extends ODataParser<PagedItemCollection<T>> {\n\n    constructor(private _parent: _Items) {\n        super();\n    }\n\n    public parse(r: Response): Promise<PagedItemCollection<T>> {\n\n        return new Promise((resolve, reject) => {\n\n            if (this.handleError(r, reject)) {\n                r.json().then(json => {\n                    const nextUrl = hOP(json, \"d\") && hOP(json.d, \"__next\") ? json.d.__next : json[\"odata.nextLink\"];\n                    resolve(new PagedItemCollection<T>(this._parent, nextUrl, this.parseODataJSON(json)));\n                });\n            }\n        });\n    }\n}\n\nclass ItemUpdatedParser extends ODataParser<IItemUpdateResultData> {\n    public parse(r: Response): Promise<IItemUpdateResultData> {\n\n        return new Promise<IItemUpdateResultData>((resolve, reject) => {\n\n            if (this.handleError(r, reject)) {\n                resolve({\n                    \"odata.etag\": r.headers.get(\"etag\"),\n                });\n            }\n        });\n    }\n}\n\nexport interface IItemAddResult {\n    item: IItem;\n    data: any;\n}\n\nexport interface IItemUpdateResult {\n    item: IItem;\n    data: IItemUpdateResultData;\n}\n\nexport interface IItemUpdateResultData {\n    \"odata.etag\": string;\n}\n","import { addProp } from \"@pnp/odata\";\nimport { _List } from \"../lists/types\";\nimport { Items, IItems } from \"./types\";\n\ndeclare module \"../lists/types\" {\n    interface _List {\n        readonly items: IItems;\n    }\n    interface IList {\n        readonly items: IItems;\n    }\n}\n\naddProp(_List, \"items\", Items);\n","import { IConfigurationProvider } from \"../configuration\";\nimport { ITypedHash } from \"@pnp/common\";\nimport { default as CachingConfigurationProvider } from \"./cachingConfigurationProvider\";\nimport { IWeb } from \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists/web\";\nimport \"@pnp/sp/items/list\";\n\n/**\n * A configuration provider which loads configuration values from a SharePoint list\n *\n */\nexport default class SPListConfigurationProvider implements IConfigurationProvider {\n    /**\n     * Creates a new SharePoint list based configuration provider\n     * @constructor\n     * @param {string} webUrl Url of the SharePoint site, where the configuration list is located\n     * @param {string} listTitle Title of the SharePoint list, which contains the configuration settings (optional, default: \"config\")\n     * @param {string} keyFieldName The name of the field in the list to use as the setting key (optional, default: \"Title\")\n     * @param {string} valueFieldName The name of the field in the list to use as the setting value (optional, default: \"Value\")\n     */\n    constructor(public readonly web: IWeb, public readonly listTitle = \"config\", private keyFieldName = \"Title\", private valueFieldName = \"Value\") { }\n\n    /**\n     * Loads the configuration values from the SharePoint list\n     *\n     * @return {Promise<ITypedHash<string>>} Promise of loaded configuration values\n     */\n    public getConfiguration(): Promise<ITypedHash<string>> {\n\n        return this.web.lists.getByTitle(this.listTitle).items.select(this.keyFieldName, this.valueFieldName)<any[]>()\n            .then((data: any[]) => data.reduce((c: any, item: any) => {\n                c[item[this.keyFieldName]] = item[this.valueFieldName];\n                return c;\n            }, {}));\n    }\n\n    /**\n     * Wraps the current provider in a cache enabled provider\n     *\n     * @return {CachingConfigurationProvider} Caching providers which wraps the current provider\n     */\n    public asCaching(cacheKey = `pnp_configcache_splist_${this.web.toUrl()}+${this.listTitle}`): CachingConfigurationProvider {\n        return new CachingConfigurationProvider(this, cacheKey);\n    }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { assign, IHttpClientImpl } from \"@pnp/common\";\n\n/**\n * Makes requests using the SP.RequestExecutor library.\n */\nexport class SPRequestExecutorClient implements IHttpClientImpl {\n    /**\n     * Fetches a URL using the SP.RequestExecutor library.\n     */\n    public fetch(url: string, options: any): Promise<Response> {\n        if (SP === undefined || SP.RequestExecutor === undefined) {\n            throw Error(\"SP.RequestExecutor is undefined. Load the SP.RequestExecutor.js library (/_layouts/15/SP.RequestExecutor.js) before loading the PnP JS Core library.\");\n        }\n\n        const addinWebUrl = url.substring(0, url.indexOf(\"/_api\")),\n            executor = new SP.RequestExecutor(addinWebUrl);\n\n        let headers: { [key: string]: string; } = {},\n            iterator: IterableIterator<[string, string]>,\n            temp: IteratorResult<[string, string]>;\n\n        if (options.headers && options.headers instanceof Headers) {\n            iterator = <IterableIterator<[string, string]>>options.headers.entries();\n            temp = iterator.next();\n            while (!temp.done) {\n                headers[temp.value[0]] = temp.value[1];\n                temp = iterator.next();\n            }\n        } else {\n            headers = <any>options.headers;\n        }\n\n        return new Promise((resolve, reject) => {\n\n            let requestOptions = {\n                error: (error: SP.ResponseInfo) => {\n                    reject(this.convertToResponse(error));\n                },\n                headers: headers,\n                method: options.method,\n                success: (response: SP.ResponseInfo) => {\n                    resolve(this.convertToResponse(response));\n                },\n                url: url,\n            };\n\n            if (options.body) {\n                requestOptions = assign(requestOptions, { body: options.body });\n            } else {\n                requestOptions = assign(requestOptions, { binaryStringRequestBody: true });\n            }\n            executor.executeAsync(requestOptions);\n        });\n    }\n\n    /**\n     * Converts a SharePoint REST API response to a fetch API response.\n     */\n    private convertToResponse = (spResponse: SP.ResponseInfo): Response => {\n        const responseHeaders = new Headers();\n\n        if (spResponse.headers !== undefined) {\n            for (const h in spResponse.headers) {\n                if (spResponse.headers[h]) {\n                    responseHeaders.append(h, spResponse.headers[h]);\n                }\n            }\n        }\n\n        // Cannot have an empty string body when creating a Response with status 204\n        const body = spResponse.statusCode === 204 ? null : spResponse.body;\n\n        return new Response(body, {\n            headers: responseHeaders,\n            status: spResponse.statusCode,\n            statusText: spResponse.statusText,\n        });\n    }\n}\n","// reference: https://msdn.microsoft.com/en-us/library/office/dn600183.aspx\n\n/**\n * Represents the unique sequential location of a change within the change log.\n */\nexport interface IChangeToken {\n    /**\n     * Gets or sets a string value that contains the serialized representation of the change token generated by the protocol server.\n     */\n    StringValue: string;\n}\n\n/**\n * Defines a query that is performed against the change log.\n */\nexport interface IChangeQuery {\n    /**\n     * Gets or sets a value that specifies whether add changes are included in the query.\n     */\n    Add?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to alerts are included in the query.\n     */\n    Alert?: boolean;\n\n    /**\n     * Gets or sets a value that specifies the end date and end time for changes that are returned through the query.\n     */\n    ChangeTokenEnd?: IChangeToken;\n\n    /**\n     * Gets or sets a value that specifies the start date and start time for changes that are returned through the query.\n     */\n    ChangeTokenStart?: IChangeToken;\n\n    /**\n     * Gets or sets a value that specifies whether changes to content types are included in the query.\n     */\n    ContentType?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether deleted objects are included in the query.\n     */\n    DeleteObject?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to fields are included in the query.\n     */\n    Field?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to files are included in the query.\n     */\n    File?: boolean;\n\n    /**\n     * Gets or sets value that specifies whether changes to folders are included in the query.\n     */\n    Folder?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to groups are included in the query.\n     */\n    Group?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether adding users to groups is included in the query.\n     */\n    GroupMembershipAdd?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether deleting users from the groups is included in the query.\n     */\n    GroupMembershipDelete?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether general changes to list items are included in the query.\n     */\n    Item?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to lists are included in the query.\n     */\n    List?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether move changes are included in the query.\n     */\n    Move?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to the navigation structure of a site collection are included in the query.\n     */\n    Navigation?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether renaming changes are included in the query.\n     */\n    Rename?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether restoring items from the recycle bin or from backups is included in the query.\n     */\n    Restore?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether adding role assignments is included in the query.\n     */\n    RoleAssignmentAdd?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether adding role assignments is included in the query.\n     */\n    RoleAssignmentDelete?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether adding role assignments is included in the query.\n     */\n    RoleDefinitionAdd?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether adding role assignments is included in the query.\n     */\n    RoleDefinitionDelete?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether adding role assignments is included in the query.\n     */\n    RoleDefinitionUpdate?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether modifications to security policies are included in the query.\n     */\n    SecurityPolicy?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to site collections are included in the query.\n     */\n    Site?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether updates made using the item SystemUpdate method are included in the query.\n     */\n    SystemUpdate?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether update changes are included in the query.\n     */\n    Update?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to users are included in the query.\n     */\n    User?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to views are included in the query.\n     */\n    View?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to Web sites are included in the query.\n     */\n    Web?: boolean;\n}\n\n/**\n * Specifies the type of a principal.\n */\n/* tslint:disable:no-bitwise */\nexport const enum PrincipalType {\n    /**\n     * Enumeration whose value specifies no principal type.\n     */\n    None = 0,\n    /**\n     * Enumeration whose value specifies a user as the principal type.\n     */\n    User = 1,\n    /**\n     * Enumeration whose value specifies a distribution list as the principal type.\n     */\n    DistributionList = 2,\n    /**\n     * Enumeration whose value specifies a security group as the principal type.\n     */\n    SecurityGroup = 4,\n    /**\n     * Enumeration whose value specifies a group as the principal type.\n     */\n    SharePointGroup = 8,\n    /**\n     * Enumeration whose value specifies all principal types.\n     */\n    All = SharePointGroup | SecurityGroup | DistributionList | User,\n}\n/* tslint:enable:no-bitwise */\n\n/**\n * Specifies the source of a principal.\n */\n/* tslint:disable:no-bitwise */\nexport const enum PrincipalSource {\n    /**\n     * Enumeration whose value specifies no principal source.\n     */\n    None = 0,\n    /**\n     * Enumeration whose value specifies user information list as the principal source.\n     */\n    UserInfoList = 1,\n    /**\n     * Enumeration whose value specifies Active Directory as the principal source.\n     */\n    Windows = 2,\n    /**\n     * Enumeration whose value specifies the current membership provider as the principal source.\n     */\n    MembershipProvider = 4,\n    /**\n     * Enumeration whose value specifies the current role provider as the principal source.\n     */\n    RoleProvider = 8,\n    /**\n     * Enumeration whose value specifies all principal sources.\n     */\n    All = RoleProvider | MembershipProvider | Windows | UserInfoList,\n}\n/* tslint:enable:no-bitwise */\n\nexport interface IPrincipalInfo {\n    Department: string;\n    DisplayName: string;\n    Email: string;\n    JobTitle: string;\n    LoginName: string;\n    Mobile: string;\n    PrincipalId: number;\n    PrincipalType: PrincipalType;\n    SIPAddress: string;\n}\n\nexport enum PageType {\n    Invalid = -1,\n    DefaultView,\n    NormalView,\n    DialogView,\n    View,\n    DisplayForm,\n    DisplayFormDialog,\n    EditForm,\n    EditFormDialog,\n    NewForm,\n    NewFormDialog,\n    SolutionForm,\n    PAGE_MAXITEMS,\n}\n","import { metadata } from \"./metadata\";\nimport { ITypedHash, assign } from \"@pnp/common\";\n\nexport interface ISPKeyValueCollection {\n    __metadata: {\n        type: \"Collection(SP.KeyValue)\";\n    };\n    results: {\n        __metadata: {\n            type: \"SP.KeyValue\",\n        },\n        Key: string;\n        Value: string,\n        ValueType: \"Edm.String\"\n    }[];\n}\n\n/**\n * Creates an object representing a SharePoint Collection(SP.KeyValue)\n * \n * @param obj The plain object defining the properties\n */\nexport function objectToSPKeyValueCollection(obj: ITypedHash<string | number | boolean>): ISPKeyValueCollection {\n\n    return <ISPKeyValueCollection>assign(metadata(\"Collection(SP.KeyValue)\"), {\n        results: Object.keys(obj).map(key => assign(metadata(\"SP.KeyValue\"), {\n            Key: key,\n            Value: Reflect.get(obj, key),\n            ValueType: \"Edm.String\",\n        })),\n    });\n}\n","const InvalidFileFolderNameCharsOnlineRegex = /[\"*:<>?/\\\\|\\x00-\\x1f\\x7f-\\x9f]/g;\nconst InvalidFileFolderNameCharsOnPremiseRegex = /[\"#%*:<>?/\\\\|\\x00-\\x1f\\x7f-\\x9f]/g;\n\n/**\n * Checks if file or folder name contains invalid characters\n *\n * @param input File or folder name to check\n * @param onPremise Set to true for SharePoint On-Premise\n * @returns True if contains invalid chars, false otherwise\n */\nexport function containsInvalidFileFolderChars(input: string, onPremise = false): boolean {\n    if (onPremise) {\n        return InvalidFileFolderNameCharsOnPremiseRegex.test(input);\n    } else {\n        return InvalidFileFolderNameCharsOnlineRegex.test(input);\n    }\n}\n\n/**\n * Removes invalid characters from file or folder name\n *\n * @param input File or folder name\n * @param replacer Value that will replace invalid characters\n * @param onPremise Set to true for SharePoint On-Premise\n * @returns File or folder name with replaced invalid characters\n */\nexport function stripInvalidFileFolderChars(input: string, replacer = \"\", onPremise = false): string {\n    if (onPremise) {\n        return input.replace(InvalidFileFolderNameCharsOnPremiseRegex, replacer);\n    } else {\n        return input.replace(InvalidFileFolderNameCharsOnlineRegex, replacer);\n    }\n}\n","import { Web, IWeb } from \"./types\";\nimport { SPRest } from \"../rest\";\nimport { SPBatch } from \"../batch\";\n\nexport {\n    IWeb,\n    IWebs,\n    Web,\n    IWebAddResult,\n    IWebUpdateResult,\n    Webs,\n    IWebInfo,\n    IStorageEntity,\n    IWebInfosData,\n} from \"./types\";\n\ndeclare module \"../rest\" {\n    interface SPRest {\n\n        /**\n         * Access to the current web instance\n         */\n        readonly web: IWeb;\n\n        /**\n         * Creates a new batch object for use with the SharePointQueryable.addToBatch method\n         *\n         */\n        createBatch(): SPBatch;\n    }\n}\n\nReflect.defineProperty(SPRest.prototype, \"web\", {\n    configurable: true,\n    enumerable: true,\n    get: function (this: SPRest) {\n        return Web(this._baseUrl).configure(this._options);\n    },\n});\n\nSPRest.prototype.createBatch = function (this: SPRest): SPBatch {\n    return this.web.createBatch();\n};\n","import {\n    SPRest,\n} from \"@pnp/sp\";\n\nimport { Web, IWeb } from \"@pnp/sp/webs\";\nimport { Site, ISite } from \"@pnp/sp/sites\";\n\nimport {\n    isUrlAbsolute,\n    combine,\n} from \"@pnp/common\";\n\nimport { ISharePointQueryable } from \"@pnp/sp\";\n\nexport class SPRestAddIn extends SPRest {\n\n    /**\n     * Begins a cross-domain, host site scoped REST request, for use in add-in webs\n     *\n     * @param addInWebUrl The absolute url of the add-in web\n     * @param hostWebUrl The absolute url of the host web\n     */\n    public crossDomainSite(addInWebUrl: string, hostWebUrl: string): ISite {\n        return this._cdImpl(Site, addInWebUrl, hostWebUrl, \"site\");\n    }\n\n    /**\n     * Begins a cross-domain, host web scoped REST request, for use in add-in webs\n     *\n     * @param addInWebUrl The absolute url of the add-in web\n     * @param hostWebUrl The absolute url of the host web\n     */\n    public crossDomainWeb(addInWebUrl: string, hostWebUrl: string): IWeb {\n        return this._cdImpl(Web, addInWebUrl, hostWebUrl, \"web\");\n    }\n\n    /**\n     * Implements the creation of cross domain REST urls\n     *\n     * @param factory The constructor of the object to create Site | Web\n     * @param addInWebUrl The absolute url of the add-in web\n     * @param hostWebUrl The absolute url of the host web\n     * @param urlPart String part to append to the url \"site\" | \"web\"\n     */\n    private _cdImpl<T extends ISharePointQueryable>(\n        factory: (...args: any[]) => T,\n        addInWebUrl: string,\n        hostWebUrl: string,\n        urlPart: string): T {\n\n        if (!isUrlAbsolute(addInWebUrl)) {\n            throw Error(\"The addInWebUrl parameter must be an absolute url.\");\n        }\n\n        if (!isUrlAbsolute(hostWebUrl)) {\n            throw Error(\"The hostWebUrl parameter must be an absolute url.\");\n        }\n\n        const url = combine(addInWebUrl, \"_api/SP.AppContextSite(@target)\");\n\n        const instance = factory(url, urlPart);\n        instance.query.set(\"@target\", \"'\" + encodeURIComponent(hostWebUrl) + \"'\");\n        return instance.configure(this._options);\n    }\n}\n\nexport const sp = new SPRestAddIn();\n","export class GraphEndpoints {\n\n    public static Beta = \"beta\";\n    public static V1 = \"v1.0\";\n\n    /**\n     * \n     * @param url The url to set the endpoint \n     */\n    public static ensure(url: string, endpoint: string): string {\n        const all = [GraphEndpoints.Beta, GraphEndpoints.V1];\n        let regex = new RegExp(endpoint, \"i\");\n        const replaces = all.filter(s => !regex.test(s)).map(s => s.replace(\".\", \"\\\\.\"));\n        regex = new RegExp(`/?(${replaces.join(\"|\")})/`, \"ig\");\n        return url.replace(regex, `/${endpoint}/`);\n    }\n}\n","import { BearerTokenFetchClient, IFetchOptions, ISPFXContext, isUrlAbsolute, SPFxAdalClient , getADALResource } from \"@pnp/common\";\n// @ts-ignore\nimport * as adal from \"adal-angular/dist/adal.min.js\";\n\n/**\n * Azure AD Client for use in the browser\n */\nexport class AdalClient extends BearerTokenFetchClient {\n\n    /**\n     * Our auth context\n     */\n    private static _authContext: adal.AuthenticationContext | null = null;\n\n    /**\n     * Callback used by the adal auth system\n     */\n    private _displayCallback: ((url: string) => void) | null;\n\n    /**\n     * Promise used to ensure the user is logged in\n     */\n    private _loginPromise: Promise<void> | null;\n\n    /**\n     * Creates a new instance of AdalClient\n     * @param clientId Azure App Id\n     * @param tenant Office 365 tenant (Ex: {tenant}.onmicrosoft.com)\n     * @param redirectUri The redirect url used to authenticate the \n     */\n    constructor(public clientId: string, public tenant: string, public redirectUri: string) {\n        super(null);\n        this._displayCallback = null;\n        this._loginPromise = null;\n    }\n\n    /**\n     * Creates a new AdalClient using the values of the supplied SPFx context (requires SPFx >= 1.6)\n     * \n     * @param spfxContext Current SPFx context\n     * @description Using this method requires that the features described in this article\n     * https://docs.microsoft.com/en-us/sharepoint/dev/spfx/use-aadhttpclient are activated in the tenant.\n     */\n    public static fromSPFxContext(spfxContext: ISPFXContext | any): SPFxAdalClient {\n\n        return new SPFxAdalClient(spfxContext);\n    }\n\n    /**\n     * Conducts the fetch opertation against the AAD secured resource\n     * \n     * @param url Absolute URL for the request\n     * @param options Any fetch options passed to the underlying fetch implementation\n     */\n    public async fetch(url: string, options: IFetchOptions): Promise<Response> {\n\n        if (!isUrlAbsolute(url)) {\n            throw Error(\"You must supply absolute urls to AdalClient.fetch.\");\n        }\n\n        // the url we are calling is the resource\n        const token = await this.getToken(getADALResource(url));\n        this.token = token;\n        return super.fetch(url, options);\n    }\n\n    /**\n     * Gets a token based on the current user\n     * \n     * @param resource The resource for which we are requesting a token\n     */\n    public async getToken(resource: string): Promise<string> {\n\n        await this.ensureAuthContext();\n        await this.login();\n\n        let token = null;\n        AdalClient._authContext.acquireToken(resource, (message: string, tok: string) => {\n\n            if (message) {\n                throw Error(message);\n            }\n\n            token = tok;\n        });\n\n        return token;\n    }\n\n    /**\n     * Ensures we have created and setup the adal AuthenticationContext instance\n     */\n    private ensureAuthContext(): Promise<void> {\n\n        return new Promise(resolve => {\n\n            if (AdalClient._authContext === null) {\n                AdalClient._authContext = adal.inject({\n                    clientId: this.clientId,\n                    displayCall: (url: string) => {\n                        if (this._displayCallback) {\n                            this._displayCallback(url);\n                        }\n                    },\n                    navigateToLoginRequestUrl: false,\n                    redirectUri: this.redirectUri,\n                    tenant: this.tenant,\n                });\n            }\n\n            resolve();\n        });\n    }\n\n    /**\n     * Ensures the current user is logged in\n     */\n    private login(): Promise<void> {\n\n        if (this._loginPromise) {\n            return this._loginPromise;\n        }\n\n        this._loginPromise = new Promise((resolve, reject) => {\n\n            if (AdalClient._authContext.getCachedUser()) {\n                return resolve();\n            }\n\n            this._displayCallback = (url: string) => {\n\n                const popupWindow = window.open(url, \"login\", \"width=483, height=600\");\n\n                if (!popupWindow) {\n                    return reject(Error(\"Could not open pop-up window for auth. Likely pop-ups are blocked by the browser.\"));\n                }\n\n                if (popupWindow && popupWindow.focus) {\n                    popupWindow.focus();\n                }\n\n                const pollTimer = window.setInterval(() => {\n\n                    if (!popupWindow || popupWindow.closed || popupWindow.closed === undefined) {\n                        window.clearInterval(pollTimer);\n                    }\n\n                    try {\n                        if (popupWindow.document.URL.indexOf(this.redirectUri) !== -1) {\n                            window.clearInterval(pollTimer);\n                            AdalClient._authContext.handleWindowCallback(popupWindow.location.hash);\n                            popupWindow.close();\n                            resolve();\n                        }\n                    } catch (e) {\n                        reject(e);\n                    }\n                }, 30);\n            };\n\n            // this triggers the login process\n            this.ensureAuthContext().then(_ => {\n                (<any>AdalClient._authContext)._loginInProgress = false;\n                AdalClient._authContext.login();\n                this._displayCallback = null;\n            });\n        });\n\n        return this._loginPromise;\n    }\n}\n","import { ILibraryConfiguration, ITypedHash, RuntimeConfig, IHttpClientImpl } from \"@pnp/common\";\nimport { AdalClient } from \"@pnp/adaljsclient\";\n\nexport interface GraphConfigurationPart {\n    graph?: {\n        /**\n         * Any headers to apply to all requests\n         */\n        headers?: ITypedHash<string>;\n\n        /**\n         * Defines a factory method used to create fetch clients\n         */\n        fetchClientFactory?: () => IHttpClientImpl;\n    };\n}\n\nexport interface GraphConfiguration extends ILibraryConfiguration, GraphConfigurationPart { }\n\nexport function setup(config: GraphConfiguration): void {\n    RuntimeConfig.assign(config);\n}\n\nexport class GraphRuntimeConfigImpl {\n\n    public get headers(): ITypedHash<string> {\n\n        const graphPart = RuntimeConfig.get(\"graph\");\n        if (graphPart !== undefined && graphPart !== null && graphPart.headers !== undefined) {\n            return graphPart.headers;\n        }\n\n        return {};\n    }\n\n    public get fetchClientFactory(): () => IHttpClientImpl {\n\n        const graphPart = RuntimeConfig.get(\"graph\");\n        // use a configured factory firt\n        if (graphPart !== undefined && graphPart !== null && graphPart.fetchClientFactory !== undefined) {\n            return graphPart.fetchClientFactory;\n        }\n\n        // then try and use spfx context if available\n        if (RuntimeConfig.spfxContext !== undefined) {\n            return () => AdalClient.fromSPFxContext(RuntimeConfig.spfxContext);\n        }\n\n        throw Error(\"There is no Graph Client available, either set one using configuraiton or provide a valid SPFx Context using setup.\");\n    }\n}\n\nexport let GraphRuntimeConfig = new GraphRuntimeConfigImpl();\n","import {\n    _SharePointQueryableInstance,\n    ISharePointQueryableInstance,\n    _SharePointQueryableCollection,\n    spInvokableFactory,\n    SharePointQueryableInstance,\n    IDeleteableWithETag,\n    deleteableWithETag,\n} from \"../sharepointqueryable\";\nimport { TextParser, BlobParser, JSONParser, BufferParser, headers, body } from \"@pnp/odata\";\nimport { assign, getGUID, isFunc, stringIsNullOrEmpty, isUrlAbsolute } from \"@pnp/common\";\nimport { Item, IItem } from \"../items\";\nimport { odataUrlFrom } from \"../odata\";\nimport { defaultPath } from \"../decorators\";\nimport { spPost } from \"../operations\";\nimport { escapeQueryStrValue } from \"../utils/escapeQueryStrValue\";\nimport { extractWebUrl } from \"../utils/extractweburl\";\nimport { tag } from \"../telemetry\";\nimport { toResourcePath } from \"../utils/toResourcePath\";\n\n/**\n * Describes a collection of File objects\n *\n */\n@defaultPath(\"files\")\nexport class _Files extends _SharePointQueryableCollection<IFileInfo[]> {\n\n    /**\n     * Gets a File by filename\n     *\n     * @param name The name of the file, including extension.\n     */\n    public getByName(name: string): IFile {\n        if (/\\%#/.test(name)) {\n            throw Error(\"For file names containing % or # please use web.getFileByServerRelativePath\");\n        }\n        return tag.configure(File(this).concat(`('${escapeQueryStrValue(name)}')`), \"fis.getByName\");\n    }\n\n    /**\n     * Uploads a file. Not supported for batching\n     *\n     * @param url The folder-relative url of the file.\n     * @param content The file contents blob.\n     * @param shouldOverWrite Should a file with the same name in the same location be overwritten? (default: true)\n     * @returns The new File and the raw response.\n     */\n    @tag(\"fis.add\")\n    public async add(url: string, content: string | ArrayBuffer | Blob, shouldOverWrite = true): Promise<IFileAddResult> {\n        const response = await spPost(Files(this, `add(overwrite=${shouldOverWrite},url='${escapeQueryStrValue(url)}')`), {\n            body: content,\n        });\n        return {\n            data: response,\n            file: this.getByName(url),\n        };\n    }\n\n    /**\n     * Adds a file using the pound percent safe methods\n     * \n     * @param url Excoded url of the file\n     * @param content The file content\n     * @param parameters Additional parameters to control method behavior\n     */\n    @tag(\"fis.addUsingPath\")\n    public async addUsingPath(url: string, content: string | ArrayBuffer | Blob, parameters: IAddUsingPathProps = { Overwrite: false }): Promise<IFileAddResult> {\n\n        const path = [`AddUsingPath(decodedurl='${escapeQueryStrValue(url)}'`];\n\n        if (parameters) {\n            if (parameters.Overwrite) {\n                path.push(\",Overwrite=true\");\n            }\n            if (parameters.AutoCheckoutOnInvalidData) {\n                path.push(\",AutoCheckoutOnInvalidData=true\");\n            }\n            if (!stringIsNullOrEmpty(parameters.XorHash)) {\n                path.push(`,XorHash=${escapeQueryStrValue(parameters.XorHash)}`);\n            }\n        }\n\n        path.push(\")\");\n\n        const resp: IFileInfo = await spPost(Files(this, path.join(\"\")), { body: content });\n\n        return {\n            data: resp,\n            file: File(odataUrlFrom(resp)),\n        };\n    }\n\n    /**\n     * Uploads a file. Not supported for batching\n     *\n     * @param url The folder-relative url of the file.\n     * @param content The Blob file content to add\n     * @param progress A callback function which can be used to track the progress of the upload\n     * @param shouldOverWrite Should a file with the same name in the same location be overwritten? (default: true)\n     * @param chunkSize The size of each file slice, in bytes (default: 10485760)\n     * @returns The new File and the raw response.\n     */\n    @tag(\"fis.addChunked\")\n    public async addChunked(url: string, content: Blob, progress?: (data: IFileUploadProgressData) => void, shouldOverWrite = true, chunkSize = 10485760): Promise<IFileAddResult> {\n\n        await spPost(this.clone(Files, `add(overwrite=${shouldOverWrite},url='${escapeQueryStrValue(url)}')`, false));\n        const file = this.getByName(url);\n        return await file.setContentChunked(content, progress, chunkSize);\n    }\n\n    /**\n     * Adds a ghosted file to an existing list or document library. Not supported for batching.\n     *\n     * @param fileUrl The server-relative url where you want to save the file.\n     * @param templateFileType The type of use to create the file.\n     * @returns The template file that was added and the raw response.\n     */\n    @tag(\"fis.addTemplateFile\")\n    public async addTemplateFile(fileUrl: string, templateFileType: TemplateFileType): Promise<IFileAddResult> {\n        const response = await spPost(this.clone(Files, `addTemplateFile(urloffile='${escapeQueryStrValue(fileUrl)}',templatefiletype=${templateFileType})`, false));\n        return {\n            data: response,\n            file: File(odataUrlFrom(response)),\n        };\n    }\n}\nexport interface IFiles extends _Files { }\nexport const Files = spInvokableFactory<IFiles>(_Files);\n\n/**\n * Describes a single File instance\n *\n */\nexport class _File extends _SharePointQueryableInstance<IFileInfo> {\n\n    public delete = deleteableWithETag(\"fi\");\n\n    /**\n     * Gets a value that specifies the list item field values for the list item corresponding to the file.\n     *\n     */\n    public get listItemAllFields(): ISharePointQueryableInstance {\n        return tag.configure(SharePointQueryableInstance(this, \"listItemAllFields\"), \"fi.listItemAllFields\");\n    }\n\n    /**\n     * Gets a collection of versions\n     *\n     */\n    public get versions(): IVersions {\n        return tag.configure(Versions(this), \"fi.versions\");\n    }\n\n    /**\n     * Approves the file submitted for content approval with the specified comment.\n     * Only documents in lists that are enabled for content approval can be approved.\n     *\n     * @param comment The comment for the approval.\n     */\n    @tag(\"fi.approve\")\n    public approve(comment = \"\"): Promise<void> {\n        return spPost(this.clone(File, `approve(comment='${escapeQueryStrValue(comment)}')`));\n    }\n\n    /**\n     * Stops the chunk upload session without saving the uploaded data. Does not support batching.\n     * If the file doesn’t already exist in the library, the partially uploaded file will be deleted.\n     * Use this in response to user action (as in a request to cancel an upload) or an error or exception.\n     * Use the uploadId value that was passed to the StartUpload method that started the upload session.\n     * This method is currently available only on Office 365.\n     *\n     * @param uploadId The unique identifier of the upload session.\n     */\n    @tag(\"fi.cancelUpload\")\n    public cancelUpload(uploadId: string): Promise<void> {\n        return spPost(this.clone(File, `cancelUpload(uploadId=guid'${uploadId}')`, false));\n    }\n\n    /**\n     * Checks the file in to a document library based on the check-in type.\n     *\n     * @param comment A comment for the check-in. Its length must be <= 1023.\n     * @param checkinType The check-in type for the file.\n     */\n    @tag(\"fi.checkin\")\n    public checkin(comment = \"\", checkinType = CheckinType.Major): Promise<void> {\n\n        if (comment.length > 1023) {\n            throw Error(\"The maximum comment length is 1023 characters.\");\n        }\n\n        return spPost(this.clone(File, `checkin(comment='${escapeQueryStrValue(comment)}',checkintype=${checkinType})`));\n    }\n\n    /**\n     * Checks out the file from a document library.\n     */\n    @tag(\"fi.checkout\")\n    public checkout(): Promise<void> {\n        return spPost(this.clone(File, \"checkout\"));\n    }\n\n    /**\n     * Copies the file to the destination url.\n     *\n     * @param url The absolute url or server relative url of the destination file path to copy to.\n     * @param shouldOverWrite Should a file with the same name in the same location be overwritten?\n     */\n    @tag(\"fi.copyTo\")\n    public copyTo(url: string, shouldOverWrite = true): Promise<void> {\n        return spPost(this.clone(File, `copyTo(strnewurl='${escapeQueryStrValue(url)}',boverwrite=${shouldOverWrite})`));\n    }\n\n    /**\n     * Copies the file by path to destination path.\n     * Also works with different site collections.\n     *\n     * @param destUrl The absolute url or server relative url of the destination file path to copy to.\n     * @param shouldOverWrite Should a file with the same name in the same location be overwritten?\n     * @param keepBoth Keep both if file with the same name in the same location already exists? Only relevant when shouldOverWrite is set to false.\n     */\n    @tag(\"fi.copyByPath\")\n    public async copyByPath(destUrl: string, shouldOverWrite: boolean, KeepBoth = false): Promise<void> {\n\n        const { ServerRelativeUrl: srcUrl, [\"odata.id\"]: absoluteUrl } = await this.select(\"ServerRelativeUrl\")();\n        const webBaseUrl = extractWebUrl(absoluteUrl);\n        const hostUrl = webBaseUrl.replace(\"://\", \"___\").split(\"/\")[0].replace(\"___\", \"://\");\n        await spPost(File(webBaseUrl, `/_api/SP.MoveCopyUtil.CopyFileByPath(overwrite=@a1)?@a1=${shouldOverWrite}`),\n            body({\n                destPath: toResourcePath(isUrlAbsolute(destUrl) ? destUrl : `${hostUrl}${destUrl}`),\n                options: {\n                    KeepBoth: KeepBoth,\n                    ResetAuthorAndCreatedOnCopy: true,\n                    ShouldBypassSharedLocks: true,\n                    __metadata: {\n                        type: \"SP.MoveCopyOptions\",\n                    },\n                },\n                srcPath: toResourcePath(`${hostUrl}${srcUrl}`),\n            }));\n    }\n\n    /**\n     * Denies approval for a file that was submitted for content approval.\n     * Only documents in lists that are enabled for content approval can be denied.\n     *\n     * @param comment The comment for the denial.\n     */\n    @tag(\"fi.deny\")\n    public deny(comment = \"\"): Promise<void> {\n        if (comment.length > 1023) {\n            throw Error(\"The maximum comment length is 1023 characters.\");\n        }\n        return spPost(this.clone(File, `deny(comment='${escapeQueryStrValue(comment)}')`));\n    }\n\n    /**\n     * Moves the file to the specified destination url.\n     *\n     * @param url The absolute url or server relative url of the destination file path to move to.\n     * @param moveOperations The bitwise MoveOperations value for how to move the file.\n     */\n    @tag(\"fi.moveTo\")\n    public moveTo(url: string, moveOperations = MoveOperations.Overwrite): Promise<void> {\n        return spPost(this.clone(File, `moveTo(newurl='${escapeQueryStrValue(url)}',flags=${moveOperations})`));\n    }\n\n    /**\n     * Moves the file by path to the specified destination url.\n     * Also works with different site collections.\n     *\n     * @param destUrl The absolute url or server relative url of the destination file path to move to.\n     * @param shouldOverWrite Should a file with the same name in the same location be overwritten?\n     * @param keepBoth Keep both if file with the same name in the same location already exists? Only relevant when shouldOverWrite is set to false.\n     */\n    @tag(\"fi.moveByPath\")\n    public async moveByPath(destUrl: string, shouldOverWrite: boolean, KeepBoth = false): Promise<void> {\n\n        const { ServerRelativeUrl: srcUrl, [\"odata.id\"]: absoluteUrl } = await this.select(\"ServerRelativeUrl\")();\n        const webBaseUrl = extractWebUrl(absoluteUrl);\n        const hostUrl = webBaseUrl.replace(\"://\", \"___\").split(\"/\")[0].replace(\"___\", \"://\");\n        await spPost(File(webBaseUrl, `/_api/SP.MoveCopyUtil.MoveFileByPath(overwrite=@a1)?@a1=${shouldOverWrite}`),\n            body({\n                destPath: toResourcePath(isUrlAbsolute(destUrl) ? destUrl : `${hostUrl}${destUrl}`),\n                options: {\n                    KeepBoth: KeepBoth,\n                    ResetAuthorAndCreatedOnCopy: false,\n                    ShouldBypassSharedLocks: true,\n                    __metadata: {\n                        type: \"SP.MoveCopyOptions\",\n                    },\n                },\n                srcPath: toResourcePath(`${hostUrl}${srcUrl}`),\n            }));\n    }\n\n    /**\n     * Submits the file for content approval with the specified comment.\n     *\n     * @param comment The comment for the published file. Its length must be <= 1023.\n     */\n    @tag(\"fi.publish\")\n    public publish(comment = \"\"): Promise<void> {\n        if (comment.length > 1023) {\n            throw Error(\"The maximum comment length is 1023 characters.\");\n        }\n        return spPost(this.clone(File, `publish(comment='${escapeQueryStrValue(comment)}')`));\n    }\n\n    /**\n     * Moves the file to the Recycle Bin and returns the identifier of the new Recycle Bin item.\n     *\n     * @returns The GUID of the recycled file.\n     */\n    @tag(\"fi.recycle\")\n    public recycle(): Promise<string> {\n        return spPost(this.clone(File, \"recycle\"));\n    }\n\n    /**\n     * Reverts an existing checkout for the file.\n     *\n     */\n    @tag(\"fi.undoCheckout\")\n    public undoCheckout(): Promise<void> {\n        return spPost(this.clone(File, \"undoCheckout\"));\n    }\n\n    /**\n     * Removes the file from content approval or unpublish a major version.\n     *\n     * @param comment The comment for the unpublish operation. Its length must be <= 1023.\n     */\n    @tag(\"fi.unpublish\")\n    public unpublish(comment = \"\"): Promise<void> {\n        if (comment.length > 1023) {\n            throw Error(\"The maximum comment length is 1023 characters.\");\n        }\n        return spPost(this.clone(File, `unpublish(comment='${escapeQueryStrValue(comment)}')`));\n    }\n\n    /**\n     * Gets the contents of the file as text. Not supported in batching.\n     *\n     */\n    @tag(\"fi.getText\")\n    public getText(): Promise<string> {\n\n        return this.clone(File, \"$value\", false).usingParser(new TextParser())(headers({ \"binaryStringResponseBody\": \"true\" }));\n    }\n\n    /**\n     * Gets the contents of the file as a blob, does not work in Node.js. Not supported in batching.\n     *\n     */\n    @tag(\"fi.getBlob\")\n    public getBlob(): Promise<Blob> {\n\n        return this.clone(File, \"$value\", false).usingParser(new BlobParser())(headers({ \"binaryStringResponseBody\": \"true\" }));\n    }\n\n    /**\n     * Gets the contents of a file as an ArrayBuffer, works in Node.js. Not supported in batching.\n     */\n    @tag(\"fi.getBuffer\")\n    public getBuffer(): Promise<ArrayBuffer> {\n\n        return this.clone(File, \"$value\", false).usingParser(new BufferParser())(headers({ \"binaryStringResponseBody\": \"true\" }));\n    }\n\n    /**\n     * Gets the contents of a file as an ArrayBuffer, works in Node.js. Not supported in batching.\n     */\n    @tag(\"fi.getJSON\")\n    public getJSON(): Promise<any> {\n\n        return this.clone(File, \"$value\", false).usingParser(new JSONParser())(headers({ \"binaryStringResponseBody\": \"true\" }));\n    }\n\n    /**\n     * Sets the content of a file, for large files use setContentChunked. Not supported in batching.\n     *\n     * @param content The file content\n     *\n     */\n    @tag(\"fi.setContent\")\n    public async setContent(content: string | ArrayBuffer | Blob): Promise<IFile> {\n\n        await spPost(this.clone(File, \"$value\", false), {\n            body: content,\n            headers: {\n                \"X-HTTP-Method\": \"PUT\",\n            },\n        });\n        return File(this);\n    }\n\n    /**\n     * Gets the associated list item for this folder, loading the default properties\n     */\n    @tag(\"fi.getItem\")\n    public async getItem<T>(...selects: string[]): Promise<IItem & T> {\n\n        const q = this.listItemAllFields;\n        const d = await q.select.apply(q, selects)();\n        return assign(Item(odataUrlFrom(d)), d);\n    }\n\n    /**\n     * Sets the contents of a file using a chunked upload approach. Not supported in batching.\n     *\n     * @param file The file to upload\n     * @param progress A callback function which can be used to track the progress of the upload\n     * @param chunkSize The size of each file slice, in bytes (default: 10485760)\n     */\n    public async setContentChunked(file: Blob, progress?: (data: IFileUploadProgressData) => void, chunkSize = 10485760): Promise<IFileAddResult> {\n\n        if (!isFunc(progress)) {\n            progress = () => null;\n        }\n\n        const fileSize = file.size;\n        const totalBlocks = parseInt((fileSize / chunkSize).toString(), 10) + ((fileSize % chunkSize === 0) ? 1 : 0);\n        const uploadId = getGUID();\n\n        // report that we are starting\n        progress({ uploadId, blockNumber: 1, chunkSize, currentPointer: 0, fileSize, stage: \"starting\", totalBlocks });\n        let currentPointer = await this.startUpload(uploadId, file.slice(0, chunkSize));\n\n        // skip the first and last blocks\n        for (let i = 2; i < totalBlocks; i++) {\n            progress({ uploadId, blockNumber: i, chunkSize, currentPointer, fileSize, stage: \"continue\", totalBlocks });\n            currentPointer = await this.continueUpload(uploadId, currentPointer, file.slice(currentPointer, currentPointer + chunkSize));\n        }\n\n        progress({ uploadId, blockNumber: totalBlocks, chunkSize, currentPointer, fileSize, stage: \"finishing\", totalBlocks });\n        return this.finishUpload(uploadId, currentPointer, file.slice(currentPointer));\n    }\n\n    /**\n     * Starts a new chunk upload session and uploads the first fragment.\n     * The current file content is not changed when this method completes.\n     * The method is idempotent (and therefore does not change the result) as long as you use the same values for uploadId and stream.\n     * The upload session ends either when you use the CancelUpload method or when you successfully\n     * complete the upload session by passing the rest of the file contents through the ContinueUpload and FinishUpload methods.\n     * The StartUpload and ContinueUpload methods return the size of the running total of uploaded data in bytes,\n     * so you can pass those return values to subsequent uses of ContinueUpload and FinishUpload.\n     * This method is currently available only on Office 365.\n     *\n     * @param uploadId The unique identifier of the upload session.\n     * @param fragment The file contents.\n     * @returns The size of the total uploaded data in bytes.\n     */\n    @tag(\"fi.startUpload\")\n    protected async startUpload(uploadId: string, fragment: ArrayBuffer | Blob): Promise<number> {\n        let n = await spPost(this.clone(File, `startUpload(uploadId=guid'${uploadId}')`, false), { body: fragment });\n        if (typeof n === \"object\") {\n            // When OData=verbose the payload has the following shape:\n            // { StartUpload: \"10485760\" }\n            n = (n as any).StartUpload;\n        }\n        return parseFloat(n);\n    }\n\n    /**\n     * Continues the chunk upload session with an additional fragment.\n     * The current file content is not changed.\n     * Use the uploadId value that was passed to the StartUpload method that started the upload session.\n     * This method is currently available only on Office 365.\n     *\n     * @param uploadId The unique identifier of the upload session.\n     * @param fileOffset The size of the offset into the file where the fragment starts.\n     * @param fragment The file contents.\n     * @returns The size of the total uploaded data in bytes.\n     */\n    @tag(\"fi.continueUpload\")\n    protected async continueUpload(uploadId: string, fileOffset: number, fragment: ArrayBuffer | Blob): Promise<number> {\n        let n = await spPost(this.clone(File, `continueUpload(uploadId=guid'${uploadId}',fileOffset=${fileOffset})`, false), { body: fragment });\n        if (typeof n === \"object\") {\n            // When OData=verbose the payload has the following shape:\n            // { ContinueUpload: \"20971520\" }\n            n = (n as any).ContinueUpload;\n        }\n        return parseFloat(n);\n    }\n\n    /**\n     * Uploads the last file fragment and commits the file. The current file content is changed when this method completes.\n     * Use the uploadId value that was passed to the StartUpload method that started the upload session.\n     * This method is currently available only on Office 365.\n     *\n     * @param uploadId The unique identifier of the upload session.\n     * @param fileOffset The size of the offset into the file where the fragment starts.\n     * @param fragment The file contents.\n     * @returns The newly uploaded file.\n     */\n    @tag(\"fi.finishUpload\")\n    protected async finishUpload(uploadId: string, fileOffset: number, fragment: ArrayBuffer | Blob): Promise<IFileAddResult> {\n        const response = await spPost(this.clone(File, `finishUpload(uploadId=guid'${uploadId}',fileOffset=${fileOffset})`, false), { body: fragment });\n        return {\n            data: response,\n            file: File(odataUrlFrom(response)),\n        };\n    }\n}\n\nexport interface IFile extends _File, IDeleteableWithETag { }\nexport const File = spInvokableFactory<IFile>(_File);\n\n/**\n * Describes a collection of Version objects\n *\n */\n@defaultPath(\"versions\")\nexport class _Versions extends _SharePointQueryableCollection {\n\n    /**\t\n     * Gets a version by id\t\n     *\t\n     * @param versionId The id of the version to retrieve\t\n     */\n    public getById(versionId: number): IVersion {\n        return tag.configure(Version(this).concat(`(${versionId})`), \"vers.getById\");\n    }\n\n    /**\n     * Deletes all the file version objects in the collection.\n     *\n     */\n    @tag(\"vers.deleteAll\")\n    public deleteAll(): Promise<void> {\n        return spPost(Versions(this, \"deleteAll\"));\n    }\n\n    /**\n     * Deletes the specified version of the file.\n     *\n     * @param versionId The ID of the file version to delete.\n     */\n    @tag(\"vers.deleteById\")\n    public deleteById(versionId: number): Promise<void> {\n        return spPost(this.clone(Versions, `deleteById(vid=${versionId})`));\n    }\n\n    /**\n     * Recycles the specified version of the file.\n     *\n     * @param versionId The ID of the file version to delete.\n     */\n    @tag(\"vers.recycleByID\")\n    public recycleByID(versionId: number): Promise<void> {\n        return spPost(this.clone(Versions, `recycleByID(vid=${versionId})`));\n    }\n\n    /**\n     * Deletes the file version object with the specified version label.\n     *\n     * @param label The version label of the file version to delete, for example: 1.2\n     */\n    @tag(\"vers.deleteByLabel\")\n    public deleteByLabel(label: string): Promise<void> {\n        return spPost(this.clone(Versions, `deleteByLabel(versionlabel='${escapeQueryStrValue(label)}')`));\n    }\n\n    /**\n     * Recycles the file version object with the specified version label.\n     *\n     * @param label The version label of the file version to delete, for example: 1.2\n     */\n    @tag(\"vers.recycleByLabel\")\n    public recycleByLabel(label: string): Promise<void> {\n        return spPost(this.clone(Versions, `recycleByLabel(versionlabel='${escapeQueryStrValue(label)}')`));\n    }\n\n    /**\n     * Creates a new file version from the file specified by the version label.\n     *\n     * @param label The version label of the file version to restore, for example: 1.2\n     */\n    @tag(\"vers.restoreByLabel\")\n    public restoreByLabel(label: string): Promise<void> {\n        return spPost(this.clone(Versions, `restoreByLabel(versionlabel='${escapeQueryStrValue(label)}')`));\n    }\n}\nexport interface IVersions extends _Versions { }\nexport const Versions = spInvokableFactory<IVersions>(_Versions);\n\n/**\n * Describes a single Version instance\n *\n */\nexport class _Version extends _SharePointQueryableInstance {\n    public delete = deleteableWithETag(\"ver\");\n}\nexport interface IVersion extends _Version, IDeleteableWithETag { }\nexport const Version = spInvokableFactory<IVersion>(_Version);\n\n/**\n * Types for document check in. \n * Minor = 0\n * Major = 1\n * Overwrite = 2\n */\nexport enum CheckinType {\n    Minor = 0,\n    Major = 1,\n    Overwrite = 2,\n}\n/**\n * Describes file and result\n */\nexport interface IFileAddResult {\n    file: IFile;\n    data: IFileInfo;\n}\n\n/**\n * File move opertions\n * Overwrite = 1\n * AllowBrokenThickets = 8\n */\nexport enum MoveOperations {\n    Overwrite = 1,\n    AllowBrokenThickets = 8,\n}\n\nexport enum TemplateFileType {\n    StandardPage = 0,\n    WikiPage = 1,\n    FormPage = 2,\n    ClientSidePage = 3,\n}\n\n/**\n * Describes SharePoint file upload progress data\n */\nexport interface IFileUploadProgressData {\n    uploadId: string;\n    stage: \"starting\" | \"continue\" | \"finishing\";\n    blockNumber: number;\n    totalBlocks: number;\n    chunkSize: number;\n    currentPointer: number;\n    fileSize: number;\n}\n\nexport interface IAddUsingPathProps {\n    /**\n     * Overwrite the file if it exists\n     */\n    Overwrite: boolean;\n    /**\n     * specifies whether to auto checkout on invalid Data. It'll be useful if the list contains validation whose requirements upload will not be able to meet.\n     */\n    AutoCheckoutOnInvalidData?: boolean;\n    /**\n     * Specifies a XOR hash of the file data which should be used to ensure end-2-end data integrity, base64 representation\n     */\n    XorHash?: string;\n}\n\nexport interface IFileInfo {\n    readonly \"odata.id\": string;\n    CheckInComment: string;\n    CheckOutType: number;\n    ContentTag: string;\n    CustomizedPageStatus: number;\n    ETag: string;\n    Exists: boolean;\n    IrmEnabled: boolean;\n    Length: string;\n    Level: number;\n    LinkingUri: string | null;\n    LinkingUrl: string;\n    MajorVersion: number;\n    MinorVersion: number;\n    Name: string;\n    ServerRelativeUrl: string;\n    TimeCreated: string;\n    TimeLastModified: string;\n    Title: string | null;\n    UIVersion: number;\n    UIVersionLabel: string;\n    UniqueId: string;\n}\n","import {\n    assign,\n    IRequestClient,\n    mergeHeaders,\n    IFetchOptions,\n    IHttpClientImpl,\n    getCtxCallback,\n} from \"@pnp/common\";\nimport { GraphRuntimeConfig } from \"./graphlibconfig\";\n\nexport class GraphHttpClient implements IRequestClient {\n\n    private _impl: IHttpClientImpl;\n\n    constructor() {\n\n        this._impl = GraphRuntimeConfig.fetchClientFactory();\n    }\n\n    public fetch(url: string, options: IFetchOptions = {}): Promise<Response> {\n\n        const headers = new Headers();\n\n        // first we add the global headers so they can be overwritten by any passed in locally to this call\n        mergeHeaders(headers, GraphRuntimeConfig.headers);\n\n        // second we add the local options so we can overwrite the globals\n        mergeHeaders(headers, options.headers);\n\n        if (!headers.has(\"Content-Type\")) {\n            headers.append(\"Content-Type\", \"application/json\");\n        }\n\n        if (!headers.has(\"SdkVersion\")) {\n            // this marks the requests for understanding by the service\n            headers.append(\"SdkVersion\", \"PnPCoreJS/$$Version$$\");\n        }\n\n        const opts = assign(options, { headers: headers });\n\n        return this.fetchRaw(url, opts);\n    }\n\n    public fetchRaw(url: string, options: IFetchOptions = {}): Promise<Response> {\n\n        // here we need to normalize the headers\n        const rawHeaders = new Headers();\n        mergeHeaders(rawHeaders, options.headers);\n        options = assign(options, { headers: rawHeaders });\n\n        const retry = (ctx: RetryContext): void => {\n\n            this._impl.fetch(url, options).then((response) => ctx.resolve(response)).catch((response) => {\n\n                // Check if request was throttled - http status code 429\n                // Check if request failed due to server unavailable - http status code 503\n                // Check if request failed due to gateway timeout - http status code 504\n                if (response.status !== 429 && response.status !== 503 && response.status !== 504) {\n                    ctx.reject(response);\n                }\n\n                // grab our current delay\n                const delay = ctx.delay;\n\n                // Increment our counters.\n                ctx.delay *= 2;\n                ctx.attempts++;\n\n                // If we have exceeded the retry count, reject.\n                if (ctx.retryCount <= ctx.attempts) {\n                    ctx.reject(response);\n                }\n\n                // Set our retry timeout for {delay} milliseconds.\n                setTimeout(getCtxCallback(this, retry, ctx), delay);\n            });\n        };\n\n        return new Promise((resolve, reject) => {\n\n            const retryContext: RetryContext = {\n                attempts: 0,\n                delay: 100,\n                reject: reject,\n                resolve: resolve,\n                retryCount: 7,\n            };\n\n            retry.call(this, retryContext);\n        });\n    }\n\n    public get(url: string, options: IFetchOptions = {}): Promise<Response> {\n        const opts = assign(options, { method: \"GET\" });\n        return this.fetch(url, opts);\n    }\n\n    public post(url: string, options: IFetchOptions = {}): Promise<Response> {\n        const opts = assign(options, { method: \"POST\" });\n        return this.fetch(url, opts);\n    }\n\n    public patch(url: string, options: IFetchOptions = {}): Promise<Response> {\n        const opts = assign(options, { method: \"PATCH\" });\n        return this.fetch(url, opts);\n    }\n\n    public delete(url: string, options: IFetchOptions = {}): Promise<Response> {\n        const opts = assign(options, { method: \"DELETE\" });\n        return this.fetch(url, opts);\n    }\n}\n\ninterface RetryContext {\n    attempts: number;\n    delay: number;\n    reject: (reason?: any) => void;\n    resolve: (value?: Response | PromiseLike<Response>) => void;\n    retryCount: number;\n}\n","import { IFetchOptions, mergeOptions, objectDefinedNotNull } from \"@pnp/common\";\nimport { defaultPipelineBinder, cloneQueryableData, IOperation } from \"@pnp/odata\";\nimport { GraphHttpClient } from \"./graphhttpclient\";\nimport { IGraphQueryable } from \"./graphqueryable\";\n\nconst graphClientBinder = defaultPipelineBinder(() => new GraphHttpClient());\n\nconst send = <T>(operation: IOperation): (o: IGraphQueryable<T>, options?: IFetchOptions) => Promise<T> => {\n\n    return async function <R = T>(o: IGraphQueryable<R>, options?: IFetchOptions): Promise<R> {\n\n        const data = cloneQueryableData(o.data);\n        const batchDependency = objectDefinedNotNull(data.batch) ? data.batch.addDependency() : () => { return; };\n        const url = o.toUrlAndQuery();\n\n        mergeOptions(data.options, options);\n\n        return operation(Object.assign({}, data, {\n            batchDependency,\n            url,\n        }));\n    };\n};\n\nexport const graphGet = <T = any>(o: IGraphQueryable<any>, options?: IFetchOptions): Promise<T> => send<T>(graphClientBinder(\"GET\"))(o, options);\n\nexport const graphPost = <T = any>(o: IGraphQueryable<any>, options?: IFetchOptions): Promise<T> => send<T>(graphClientBinder(\"POST\"))(o, options);\n\nexport const graphDelete = <T = any>(o: IGraphQueryable<any>, options?: IFetchOptions): Promise<T> => send<T>(graphClientBinder(\"DELETE\"))(o, options);\n\nexport const graphPatch = <T = any>(o: IGraphQueryable<any>, options?: IFetchOptions): Promise<T> => send<T>(graphClientBinder(\"PATCH\"))(o, options);\n\nexport const graphPut = <T = any>(o: IGraphQueryable<any>, options?: IFetchOptions): Promise<T> => send<T>(graphClientBinder(\"PUT\"))(o, options);\n","import { combine, isUrlAbsolute, IFetchOptions } from \"@pnp/common\";\nimport { Queryable, invokableFactory, IInvokable, IQueryable } from \"@pnp/odata\";\nimport { GraphEndpoints } from \"./types\";\nimport { graphGet } from \"./operations\";\n\nexport interface IGraphQueryableConstructor<T> {\n    new(baseUrl: string | IGraphQueryable, path?: string): T;\n}\n\nexport const graphInvokableFactory = <R>(f: any): (baseUrl: string | IGraphQueryable, path?: string) => R => {\n    return invokableFactory<R>(f);\n};\n\n/**\n * Queryable Base Class\n *\n */\nexport class _GraphQueryable<GetType = any> extends Queryable<GetType> implements IGraphQueryable<GetType> {\n\n    /**\n     * Creates a new instance of the Queryable class\n     *\n     * @constructor\n     * @param baseUrl A string or Queryable that should form the base part of the url\n     *\n     */\n    constructor(baseUrl: string | IGraphQueryable, path?: string) {\n\n        let url = \"\";\n        let parentUrl = \"\";\n        const query = new Map<string, string>();\n\n        if (typeof baseUrl === \"string\") {\n            parentUrl = baseUrl;\n            url = combine(parentUrl, path);\n        } else {\n            parentUrl = baseUrl.toUrl();\n            url = combine(parentUrl, path);\n        }\n\n        super({\n            parentUrl,\n            query,\n            url,\n        });\n\n        // post init actions\n        if (typeof baseUrl !== \"string\") {\n            this.configureFrom(baseUrl);\n        }\n    }\n\n    /**\n     * Choose which fields to return\n     *\n     * @param selects One or more fields to return\n     */\n    public select(...selects: string[]): this {\n        if (selects.length > 0) {\n            this.query.set(\"$select\", selects.join(\",\"));\n        }\n        return this;\n    }\n\n    /**\n     * Expands fields such as lookups to get additional data\n     *\n     * @param expands The Fields for which to expand the values\n     */\n    public expand(...expands: string[]): this {\n        if (expands.length > 0) {\n            this.query.set(\"$expand\", expands.join(\",\"));\n        }\n        return this;\n    }\n\n    public defaultAction(options?: IFetchOptions): Promise<GetType> {\n        return graphGet(this, options);\n    }\n\n    public get<T = GetType>(options?: IFetchOptions): Promise<T> {\n        return graphGet<T>(<any>this, options);\n    }\n\n    /**\n     * Gets the full url with query information\n     *\n     */\n    public toUrlAndQuery(): string {\n\n        let url = this.toUrl();\n\n        if (!isUrlAbsolute(url)) {\n            url = combine(\"https://graph.microsoft.com\", url);\n        }\n\n        if (this.query.size > 0) {\n            const char = url.indexOf(\"?\") > -1 ? \"&\" : \"?\";\n            url += `${char}${Array.from(this.query).map((v: [string, string]) => v[0] + \"=\" + v[1]).join(\"&\")}`;\n        }\n\n        return url;\n    }\n\n    /**\n     * Gets a parent for this instance as specified\n     *\n     * @param factory The contructor for the class to create\n     */\n    protected getParent<T extends _GraphQueryable>(\n        factory: IGraphQueryableConstructor<T>,\n        baseUrl: string | IGraphQueryable = this.parentUrl,\n        path?: string): T {\n\n        return new factory(baseUrl, path);\n    }\n\n    /**\n     * Clones this queryable into a new queryable instance of T\n     * @param factory Constructor used to create the new instance\n     * @param additionalPath Any additional path to include in the clone\n     * @param includeBatch If true this instance's batch will be added to the cloned instance\n     */\n    protected clone<T extends IGraphQueryable>(factory: (...args: any[]) => T, additionalPath?: string, includeBatch = true): T {\n\n        return super.cloneTo<T>(factory(this, additionalPath), { includeBatch });\n    }\n\n    protected setEndpoint(endpoint: string): this {\n        this.data.url = GraphEndpoints.ensure(this.data.url, endpoint);\n        return this;\n    }\n}\n\nexport interface IGraphQueryable<GetType = any> extends IInvokable, IQueryable<GetType> {\n\n    /**\n     * Choose which fields to return\n     *\n     * @param selects One or more fields to return\n     */\n    select(...selects: string[]): this;\n\n    /**\n     * Expands fields such as lookups to get additional data\n     *\n     * @param expands The Fields for which to expand the values\n     */\n    expand(...expands: string[]): this;\n\n    defaultAction(options?: IFetchOptions): Promise<GetType>;\n\n    /**\n     * Gets the full url with query information\n     *\n     */\n    toUrlAndQuery(): string;\n\n}\nexport interface _GraphQueryable extends IInvokable { }\nexport const GraphQueryable = graphInvokableFactory<IGraphQueryable>(_GraphQueryable);\n\n/**\n * Represents a REST collection which can be filtered, paged, and selected\n *\n */\nexport class _GraphQueryableCollection<GetType = any[]> extends _GraphQueryable<GetType> implements IGraphQueryableCollection<GetType> {\n\n    /**\n     *\n     * @param filter The string representing the filter query\n     */\n    public filter(filter: string): this {\n        this.query.set(\"$filter\", filter);\n        return this;\n    }\n\n    /**\n     * Orders based on the supplied fields\n     *\n     * @param orderby The name of the field on which to sort\n     * @param ascending If false DESC is appended, otherwise ASC (default)\n     */\n    public orderBy(orderBy: string, ascending = true): this {\n        const o = \"$orderby\";\n        const query = this.query.has(o) ? this.query.get(o).split(\",\") : [];\n        query.push(`${orderBy} ${ascending ? \"asc\" : \"desc\"}`);\n        this.query.set(o, query.join(\",\"));\n        return this;\n    }\n\n    /**\n     * Limits the query to only return the specified number of items\n     *\n     * @param top The query row limit\n     */\n    public top(top: number): this {\n        this.query.set(\"$top\", top.toString());\n        return this;\n    }\n\n    /**\n     * Skips a set number of items in the return set\n     *\n     * @param num Number of items to skip\n     */\n    public skip(num: number): this {\n        this.query.set(\"$skip\", num.toString());\n        return this;\n    }\n\n    /**\n     * \tTo request second and subsequent pages of Graph data\n     */\n    public skipToken(token: string): this {\n        this.query.set(\"$skiptoken\", token);\n        return this;\n    }\n\n    /**\n     * \tRetrieves the total count of matching resources\n     */\n    public get count(): this {\n        this.query.set(\"$count\", \"true\");\n        return this;\n    }\n}\n\nexport interface IGraphQueryableCollection<GetType = any[]> extends IInvokable, IGraphQueryable<GetType> {\n\n    /**\n     * \tRetrieves the total count of matching resources\n     */\n    count: this;\n\n    /**\n     *\n     * @param filter The string representing the filter query\n     */\n    filter(filter: string): this;\n\n    /**\n     * Orders based on the supplied fields\n     *\n     * @param orderby The name of the field on which to sort\n     * @param ascending If false DESC is appended, otherwise ASC (default)\n     */\n    orderBy(orderBy: string, ascending?: boolean): this;\n\n    /**\n     * Limits the query to only return the specified number of items\n     *\n     * @param top The query row limit\n     */\n    top(top: number): this;\n\n    /**\n     * Skips a set number of items in the return set\n     *\n     * @param num Number of items to skip\n     */\n    skip(num: number): this;\n\n    /**\n     * \tTo request second and subsequent pages of Graph data\n     */\n    skipToken(token: string): this;\n}\nexport interface _GraphQueryableCollection extends IInvokable { }\nexport const GraphQueryableCollection = graphInvokableFactory<IGraphQueryableCollection>(_GraphQueryableCollection);\n\nexport class _GraphQueryableSearchableCollection extends _GraphQueryableCollection implements IGraphQueryableSearchableCollection {\n\n    /**\n     * \tTo request second and subsequent pages of Graph data\n     */\n    public search(query: string): this {\n        this.query.set(\"$search\", query);\n        return this;\n    }\n}\n\nexport interface IGraphQueryableSearchableCollection<GetType = any> extends IInvokable, IGraphQueryable<GetType> {\n    search(query: string): this;\n}\nexport interface _GraphQueryableSearchableCollection extends IInvokable { }\nexport const GraphQueryableSearchableCollection = graphInvokableFactory<IGraphQueryableSearchableCollection>(_GraphQueryableSearchableCollection);\n\n\n/**\n * Represents an instance that can be selected\n *\n */\nexport class _GraphQueryableInstance<GetType = any> extends _GraphQueryable<GetType> { }\n\nexport interface IGraphQueryableInstance<GetType = any> extends IInvokable, IGraphQueryable<GetType> { }\nexport interface _GraphQueryableInstance extends IInvokable { }\nexport const GraphQueryableInstance = graphInvokableFactory<IGraphQueryableInstance>(_GraphQueryableInstance);\n","import { Batch, IODataBatchRequestInfo } from \"@pnp/odata\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\nimport { assign, jsS, isUrlAbsolute } from \"@pnp/common\";\nimport { GraphRuntimeConfig } from \"./graphlibconfig\";\nimport { GraphHttpClient } from \"./graphhttpclient\";\n\ninterface GraphBatchRequestFragment {\n    id: string;\n    method: string;\n    url: string;\n    headers?: string[][] | {\n        [key: string]: string;\n    };\n    body?: any;\n}\n\ninterface GraphBatchRequest {\n    requests: GraphBatchRequestFragment[];\n}\n\ninterface GraphBatchResponseFragment {\n    id: string;\n    status: number;\n    statusText?: string;\n    method: string;\n    url: string;\n    headers?: string[][] | {\n        [key: string]: string;\n    };\n    body?: any;\n}\n\ninterface GraphBatchResponse {\n    responses: GraphBatchResponseFragment[];\n    nextLink?: string;\n}\n\nexport class GraphBatch extends Batch {\n\n    constructor(private batchUrl = \"https://graph.microsoft.com/v1.0/$batch\", private maxRequests = 20) {\n        super();\n    }\n\n    /**\n     * Urls come to the batch absolute, but the processor expects relative\n     * @param url Url to ensure is relative\n     */\n    private static makeUrlRelative(url: string): string {\n\n        if (!isUrlAbsolute(url)) {\n            // already not absolute, just give it back\n            return url;\n        }\n\n        let index = url.indexOf(\".com/v1.0/\");\n\n        if (index < 0) {\n\n            index = url.indexOf(\".com/beta/\");\n\n            if (index > -1) {\n\n                // beta url\n                return url.substr(index + 10);\n            }\n\n        } else {\n            // v1.0 url\n            return url.substr(index + 9);\n        }\n\n        // no idea\n        return url;\n    }\n\n    private static formatRequests(requests: IODataBatchRequestInfo[]): GraphBatchRequestFragment[] {\n\n        return requests.map((reqInfo, index) => {\n\n            let requestFragment: GraphBatchRequestFragment = {\n                id: `${++index}`,\n                method: reqInfo.method,\n                url: this.makeUrlRelative(reqInfo.url),\n            };\n\n            let headers = {};\n\n            // merge global config headers\n            if (GraphRuntimeConfig.headers !== undefined && GraphRuntimeConfig.headers !== null) {\n\n                headers = assign(headers, GraphRuntimeConfig.headers);\n            }\n\n            if (reqInfo.options !== undefined) {\n\n                // merge per request headers\n                if (reqInfo.options.headers !== undefined && reqInfo.options.headers !== null) {\n                    headers = assign(headers, reqInfo.options.headers);\n                }\n\n                // add a request body\n                if (reqInfo.options.body !== undefined && reqInfo.options.body !== null) {\n\n                    requestFragment = assign(requestFragment, {\n                        body: reqInfo.options.body,\n                    });\n                }\n            }\n\n            requestFragment = assign(requestFragment, {\n                headers: headers,\n            });\n\n            return requestFragment;\n        });\n    }\n\n    private static parseResponse(requests: IODataBatchRequestInfo[], graphResponse: GraphBatchResponse): Promise<{ nextLink: string, responses: Response[] }> {\n\n        return new Promise((resolve) => {\n\n            const parsedResponses: Response[] = new Array(requests.length).fill(null);\n\n            for (let i = 0; i < graphResponse.responses.length; ++i) {\n\n                const response = graphResponse.responses[i];\n                // we create the request id by adding 1 to the index, so we place the response by subtracting one to match\n                // the array of requests and make it easier to map them by index\n                const responseId = parseInt(response.id, 10) - 1;\n\n                if (response.status === 204) {\n\n                    parsedResponses[responseId] = new Response();\n                } else {\n\n                    parsedResponses[responseId] = new Response(JSON.stringify(response.body), response);\n                }\n            }\n\n            resolve({\n                nextLink: graphResponse.nextLink,\n                responses: parsedResponses,\n            });\n        });\n    }\n\n    protected executeImpl(): Promise<void> {\n\n        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Executing batch with ${this.requests.length} requests.`, LogLevel.Info);\n\n        if (this.requests.length < 1) {\n            Logger.write(`Resolving empty batch.`, LogLevel.Info);\n            return Promise.resolve();\n        }\n\n        const client = new GraphHttpClient();\n\n        // create a working copy of our requests\n        const requests = this.requests.slice();\n\n        // this is the root of our promise chain\n        const promise = Promise.resolve();\n\n        while (requests.length > 0) {\n\n            const requestsChunk = requests.splice(0, this.maxRequests);\n\n            const batchRequest: GraphBatchRequest = {\n                requests: GraphBatch.formatRequests(requestsChunk),\n            };\n\n            const batchOptions = {\n                body: jsS(batchRequest),\n                headers: {\n                    \"Accept\": \"application/json\",\n                    \"Content-Type\": \"application/json\",\n                },\n                method: \"POST\",\n            };\n\n            Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Sending batch request.`, LogLevel.Info);\n\n            client.fetch(this.batchUrl, batchOptions)\n                .then(r => r.json())\n                .then((j) => GraphBatch.parseResponse(requestsChunk, j))\n                .then((parsedResponse: { nextLink: string, responses: Response[] }) => {\n\n                    Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Resolving batched requests.`, LogLevel.Info);\n\n                    parsedResponse.responses.reduce((chain, response, index) => {\n\n                        const request = requestsChunk[index];\n\n                        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Resolving batched request ${request.method} ${request.url}.`, LogLevel.Verbose);\n\n                        return chain.then(_ => request.parser.parse(response).then(request.resolve).catch(request.reject));\n\n                    }, promise);\n                });\n        }\n\n        return promise;\n    }\n}\n","import { _GraphQueryable } from \"./graphqueryable\";\nimport {\n    setup as _setup,\n    GraphConfiguration,\n} from \"./graphlibconfig\";\nimport { GraphBatch } from \"./batch\";\n\nexport class GraphRest extends _GraphQueryable {\n\n    public createBatch(): GraphBatch {\n        return new GraphBatch();\n    }\n\n    public setup(config: GraphConfiguration) {\n        _setup(config);\n    }\n}\n\nexport let graph = new GraphRest(\"v1.0\");\n","import {\n    ISharePointQueryable,\n    _SharePointQueryableInstance,\n    _SharePointQueryableCollection,\n    spInvokableFactory,\n} from \"../sharepointqueryable\";\nimport { spPost } from \"../operations\";\nimport { odataUrlFrom } from \"../odata\";\nimport { extractWebUrl } from \"../utils/extractweburl\";\nimport { File, IFile } from \"../files/types\";\nimport { tag } from \"../telemetry\";\nimport { Web } from \"../webs\";\nimport \"../items\";\n\nexport class _AppCatalog extends _SharePointQueryableCollection {\n\n    constructor(baseUrl: string | ISharePointQueryable, path = \"_api/web/tenantappcatalog/AvailableApps\") {\n        super(extractWebUrl(typeof baseUrl === \"string\" ? baseUrl : baseUrl.toUrl()), path);\n    }\n\n    /**\n     * Get details of specific app from the app catalog\n     * @param id - Specify the guid of the app\n     */\n    public getAppById(id: string): IApp {\n        return tag.configure(App(this, `getById('${id}')`), \"ac.getAppById\");\n    }\n\n    /**\n     * Synchronize a solution to the Microsoft Teams App Catalog\n     * @param id - Specify the guid of the app\n     * @param useSharePointItemId (optional) - By default this REST call requires the SP Item id of the app, not the app id.\n     *                            PnPjs will try to fetch the item id by default, you can still use this parameter to pass your own item id in the first parameter \n     */\n    public async syncSolutionToTeams(id: string | number, useSharePointItemId = false): Promise<void> {\n\n        // This REST call requires that you refer the list item id of the solution in the app catalog site.\n        let appId = null;\n        const webUrl = extractWebUrl(this.toUrl());\n\n        if (useSharePointItemId) {\n\n            appId = id;\n        } else {\n\n            const web = Web(webUrl);\n            const listId = (await web.lists.select(\"Id\").filter(`EntityTypeName eq 'AppCatalog'`)())[0].Id;\n            const listItems = await web.lists.getById(listId).items.filter(`AppProductID eq '${id}'`).top(1)();\n\n            if (listItems && listItems.length > 0) {\n\n                appId = listItems[0].Id;\n            } else {\n\n                throw Error(`Did not find the app with id ${id} in the appcatalog.`);\n            }\n        }\n\n        const poster = tag.configure(AppCatalog(webUrl, `_api/web/tenantappcatalog/SyncSolutionToTeams(id=${appId})`), \"ac.syncSolutionToTeams\");\n\n        return await spPost(poster, {});\n    }\n\n    /**\n     * Uploads an app package. Not supported for batching\n     *\n     * @param filename Filename to create.\n     * @param content app package data (eg: the .app or .sppkg file).\n     * @param shouldOverWrite Should an app with the same name in the same location be overwritten? (default: true)\n     * @returns Promise<IAppAddResult>\n     */\n    public async add(filename: string, content: string | ArrayBuffer | Blob, shouldOverWrite = true): Promise<IAppAddResult> {\n\n        // you don't add to the availableapps collection\n        const adder = tag.configure(AppCatalog(extractWebUrl(this.toUrl()), `_api/web/tenantappcatalog/add(overwrite=${shouldOverWrite},url='${filename}')`), \"ac.add\");\n\n        const r = await spPost(adder, {\n            body: content, headers: {\n                \"binaryStringRequestBody\": \"true\",\n            },\n        });\n\n        return {\n            data: r,\n            file: File(odataUrlFrom(r)),\n        };\n    }\n}\nexport interface IAppCatalog extends _AppCatalog {}\nexport const AppCatalog = spInvokableFactory<IAppCatalog>(_AppCatalog);\n\nexport class _App extends _SharePointQueryableInstance {\n\n    /**\n     * This method deploys an app on the app catalog. It must be called in the context\n     * of the tenant app catalog web or it will fail.\n     * \n     * @param skipFeatureDeployment Deploy the app to the entire tenant\n     */\n    @tag(\"app.deploy\")\n    public deploy(skipFeatureDeployment = false): Promise<void> {\n        return this.do(`Deploy(${skipFeatureDeployment})`);\n    }\n\n    /**\n     * This method retracts a deployed app on the app catalog. It must be called in the context\n     * of the tenant app catalog web or it will fail.\n     */\n    @tag(\"app.retract\")\n    public retract(): Promise<void> {\n        return this.do(\"Retract\");\n    }\n\n    /**\n     * This method allows an app which is already deployed to be installed on a web\n     */\n    @tag(\"app.install\")\n    public install(): Promise<void> {\n        return this.do(\"Install\");\n    }\n\n    /**\n     * This method allows an app which is already installed to be uninstalled on a web\n     * Note: when you use the REST API to uninstall a solution package from the site, it is not relocated to the recycle bin\n     */\n    @tag(\"app.uninstall\")\n    public uninstall(): Promise<void> {\n        return this.do(\"Uninstall\");\n    }\n\n    /**\n     * This method allows an app which is already installed to be upgraded on a web\n     */\n    @tag(\"app.upgrade\")\n    public upgrade(): Promise<void> {\n        return this.do(\"Upgrade\");\n    }\n\n    /**\n     * This method removes an app from the app catalog. It must be called in the context\n     * of the tenant app catalog web or it will fail.\n     */\n    @tag(\"app.remove\")\n    public remove(): Promise<void> {\n        return this.do(\"Remove\");\n    }\n\n    private do(path: string): Promise<void> {\n        return spPost(this.clone(App, path));\n    }\n}\nexport interface IApp extends _App {}\nexport const App = spInvokableFactory<IApp>(_App);\n\n/**\n * Result object after adding an app\n */\nexport interface IAppAddResult {\n    /**\n     * Contains metadata of the added app\n     */\n    data: any;\n    /**\n     * A File instance to the item in SharePoint\n     */\n    file: IFile;\n}\n","import { _Web } from \"../webs/types\";\nimport { AppCatalog, IAppCatalog } from \"./types\";\n\ndeclare module \"../webs/types\" {\n    interface _Web {\n        getAppCatalog(url?: string | _Web): IAppCatalog;\n    }\n    interface IWeb {\n        /**\n         * Gets this web (default) or the web specifed by the optional string case\n         * as an IAppCatalog instance\n         * \n         * @param url [Optional] Url of the web to get (default: current web)\n         */\n        getAppCatalog(url?: string | _Web): IAppCatalog;\n    }\n}\n\n_Web.prototype.getAppCatalog = function (this: _Web, url?: string | _Web): IAppCatalog {\n    return AppCatalog(url || this);\n};\n","import { SPRest } from \"../rest\";\nimport { IWeb, Web } from \"../webs/types\";\n\nimport \"./web\";\nimport { SharePointQueryable } from \"../sharepointqueryable\";\n\nexport {\n    IAppAddResult,\n    IApp,\n    IAppCatalog,\n    App,\n    AppCatalog,\n} from \"./types\";\n\ndeclare module \"../rest\" {\n    interface SPRest {\n        getTenantAppCatalogWeb(): Promise<IWeb>;\n    }\n}\n\nSPRest.prototype.getTenantAppCatalogWeb = async function (this: SPRest): Promise<IWeb> {\n    const data: { CorporateCatalogUrl: string } = await SharePointQueryable(\"/\", \"_api/SP_TenantSettings_Current\")();\n    return Web(data.CorporateCatalogUrl);\n};\n","import { defaultPath } from \"../decorators\";\nimport { spPost } from \"../operations\";\nimport {\n    _SharePointQueryableInstance,\n    _SharePointQueryableCollection,\n    spInvokableFactory,\n    deleteableWithETag,\n    IDeleteableWithETag,\n} from \"../sharepointqueryable\";\nimport { TextParser, BlobParser, JSONParser, BufferParser, ODataParser, headers } from \"@pnp/odata\";\nimport { tag } from \"../telemetry\";\n\n@defaultPath(\"AttachmentFiles\")\nexport class _Attachments extends _SharePointQueryableCollection<IAttachmentInfo[]> {\n\n    /**\n    * Gets a Attachment File by filename\n    *\n    * @param name The name of the file, including extension.\n    */\n    public getByName(name: string): IAttachment {\n        const f = tag.configure(Attachment(this), \"ats.getByName\");\n        f.concat(`('${name}')`);\n        return f;\n    }\n\n    /**\n     * Adds a new attachment to the collection. Not supported for batching.\n     *\n     * @param name The name of the file, including extension.\n     * @param content The Base64 file content.\n     */\n    @tag(\"ats.add\")\n    public async add(name: string, content: string | Blob | ArrayBuffer): Promise<IAttachmentAddResult> {\n        const response = await spPost(this.clone(Attachments, `add(FileName='${name}')`, false), { body: content });\n        return {\n            data: response,\n            file: this.getByName(name),\n        };\n    }\n\n    /**\n     * Adds multiple new attachment to the collection. Not supported for batching.\n     *\n     * @param files The collection of files to add\n     */\n    @tag(\"ats.addMultiple\")\n    public async addMultiple(files: IAttachmentFileInfo[]): Promise<void> {\n\n        for (let i = 0; i < files.length; i++) {\n            await this.add(files[i].name, files[i].content);\n        }\n    }\n\n    /**\n     * Delete multiple attachments from the collection. Not supported for batching.\n     *\n     * @param files The collection of files to delete\n     */\n    @tag(\"ats.deleteMultiple\")\n    public async deleteMultiple(...files: string[]): Promise<void> {\n\n        for (let i = 0; i < files.length; i++) {\n            await this.getByName(files[i]).delete();\n        }\n    }\n\n    /**\n     * Delete multiple attachments from the collection and send to recycle bin. Not supported for batching.\n     *\n     * @param files The collection of files to be deleted and sent to recycle bin\n     */\n    @tag(\"ats.recycleMultiple\")\n    public async recycleMultiple(...files: string[]): Promise<void> {\n        for (let i = 0; i < files.length; i++) {\n            await this.getByName(files[i]).recycle();\n        }\n    }\n}\nexport interface IAttachments extends _Attachments { }\nexport const Attachments = spInvokableFactory<IAttachments>(_Attachments);\n\nexport class _Attachment extends _SharePointQueryableInstance<IAttachmentInfo> {\n\n    public delete = deleteableWithETag(\"at\");\n\n    /**\n     * Gets the contents of the file as text\n     *\n     */\n    @tag(\"at.getText\")\n    public getText(): Promise<string> {\n\n        return this.getParsed(new TextParser());\n    }\n\n    /**\n     * Gets the contents of the file as a blob, does not work in Node.js\n     *\n     */\n    @tag(\"at.getBlob\")\n    public getBlob(): Promise<Blob> {\n\n        return this.getParsed(new BlobParser());\n    }\n\n    /**\n     * Gets the contents of a file as an ArrayBuffer, works in Node.js\n     */\n    @tag(\"at.getBuffer\")\n    public getBuffer(): Promise<ArrayBuffer> {\n\n        return this.getParsed(new BufferParser());\n    }\n\n    /**\n     * Gets the contents of a file as an ArrayBuffer, works in Node.js\n     */\n    @tag(\"at.getJSON\")\n    public getJSON(): Promise<any> {\n\n        return this.getParsed(new JSONParser());\n    }\n\n    /**\n     * Sets the content of a file. Not supported for batching\n     *\n     * @param content The value to set for the file contents\n     */\n    @tag(\"at.setContent\")\n    public async setContent(content: string | ArrayBuffer | Blob): Promise<IAttachment> {\n\n        await spPost(this.clone(Attachment, \"$value\", false), headers({ \"X-HTTP-Method\": \"PUT\" }, {\n            body: content,\n        }));\n\n        return Attachment(this);\n    }\n\n    /**\n     * Delete this attachment file and send it to recycle bin\n     *\n     * @param eTag Value used in the IF-Match header, by default \"*\"\n     */\n    @tag(\"at.recycle\")\n    public recycle(eTag = \"*\"): Promise<void> {\n\n        return spPost(this.clone(Attachment, \"recycleObject\"), headers({\n            \"IF-Match\": eTag,\n            \"X-HTTP-Method\": \"DELETE\",\n        }));\n    }\n\n    private getParsed<T>(parser: ODataParser<T>): Promise<T> {\n\n        return this.clone(Attachment, \"$value\", false).usingParser(parser)();\n    }\n}\nexport interface IAttachment extends _Attachment, IDeleteableWithETag { }\nexport const Attachment = spInvokableFactory<IAttachment>(_Attachment);\n\nexport interface IAttachmentAddResult {\n    file: IAttachment;\n    data: IAttachmentFileInfo;\n}\n\nexport interface IAttachmentFileInfo {\n    name: string;\n    content: string | Blob | ArrayBuffer;\n}\n\nexport interface IAttachmentInfo {\n    FileName: string;\n    FileNameAsPath: {\n        DecodedUrl: string;\n    };\n    ServerRelativePath: {\n        DecodedUrl: string;\n    };\n    ServerRelativeUrl: string;\n}\n","import { hOP } from \"@pnp/common\";\n\n/**\n * Gets the next order value 1 based for the provided collection\n * \n * @param collection Collection of orderable things\n */\nexport function getNextOrder(collection: { order: number }[]): number {\n    return collection.length < 1 ? 1 : (Math.max.apply(null, collection.map(i => i.order)) + 1);\n}\n\n/**\n * Normalizes the order value for all the sections, columns, and controls to be 1 based and stepped (1, 2, 3...)\n * \n * @param collection The collection to normalize\n */\nexport function reindex(collection: { order: number, columns?: { order: number }[], controls?: { order: number }[] }[]): void {\n\n    for (let i = 0; i < collection.length; i++) {\n        collection[i].order = i + 1;\n        if (hOP(collection[i], \"columns\")) {\n            reindex(collection[i].columns);\n        } else if (hOP(collection[i], \"controls\")) {\n            reindex(collection[i].controls);\n        }\n    }\n}\n","import { addProp } from \"@pnp/odata\";\nimport { _Item } from \"../items/types\";\nimport { Attachments, IAttachments } from \"./types\";\n\ndeclare module \"../items/types\" {\n    interface _Item {\n        readonly attachmentFiles: IAttachments;\n    }\n    interface IItem {\n        /**\n         * Read the attachment files data for an item\n         */\n        readonly attachmentFiles: IAttachments;\n    }\n}\n\naddProp(_Item, \"attachmentFiles\", Attachments);\n","import { _Web } from \"../webs/types\";\nimport { File, IFile } from \"./types\";\nimport { escapeQueryStrValue } from \"../utils/escapeQueryStrValue\";\n\ndeclare module \"../webs/types\" {\n    interface _Web {\n        getFileByServerRelativeUrl(fileRelativeUrl: string): IFile;\n        getFileByServerRelativePath(fileRelativeUrl: string): IFile;\n        getFileById(uniqueId: string): IFile;\n    }\n    interface IWeb {\n\n        /**\n         * Gets a file by server relative url\n         *\n         * @param fileRelativeUrl The server relative path to the file (including /sites/ if applicable)\n         */\n        getFileByServerRelativeUrl(fileRelativeUrl: string): IFile;\n\n        /**\n         * Gets a file by server relative url if your file name contains # and % characters\n         *\n         * @param fileRelativeUrl The server relative path to the file (including /sites/ if applicable)\n         */\n        getFileByServerRelativePath(fileRelativeUrl: string): IFile;\n\n        /**\n         * Gets a file by id\n         *\n         * @param uniqueId The UniqueId of the file\n         */\n        getFileById(uniqueId: string): IFile;\n    }\n}\n\n_Web.prototype.getFileByServerRelativeUrl = function (this: _Web, fileRelativeUrl: string): IFile {\n    return File(this, `getFileByServerRelativeUrl('${escapeQueryStrValue(fileRelativeUrl)}')`);\n};\n\n_Web.prototype.getFileByServerRelativePath = function (this: _Web, fileRelativeUrl: string): IFile {\n    return File(this, `getFileByServerRelativePath(decodedUrl='${escapeQueryStrValue(fileRelativeUrl)}')`);\n};\n\n_Web.prototype.getFileById = function (this: _Web, uniqueId: string): IFile {\n    return File(this, `getFileById('${uniqueId}')`);\n};\n","import { defaultPath } from \"../decorators\";\nimport {\n    _SharePointQueryableInstance,\n    _SharePointQueryableCollection,\n    spInvokableFactory,\n} from \"../sharepointqueryable\";\nimport { assign } from \"@pnp/common\";\nimport { odataUrlFrom } from \"../odata\";\nimport { metadata } from \"../utils/metadata\";\nimport { body } from \"@pnp/odata\";\nimport { spPost } from \"../operations\";\nimport { tag } from \"../telemetry\";\n\n@defaultPath(\"comments\")\nexport class _Comments extends _SharePointQueryableCollection<ICommentInfo[]> {\n\n    /**\n     * Adds a new comment to this collection\n     * \n     * @param info Comment information to add\n     */\n    @tag(\"coms.add\")\n    public async add(info: string | ICommentInfo): Promise<IComment & ICommentInfo> {\n\n        if (typeof info === \"string\") {\n            info = <ICommentInfo>{ text: info };\n        }\n\n        const postBody = body(assign(metadata(\"Microsoft.SharePoint.Comments.comment\"), info));\n\n        const d = await spPost(this.clone(Comments, null), postBody);\n\n        return assign(this.getById(d.id), d);\n    }\n\n    /**\n     * Gets a comment by id\n     * \n     * @param id Id of the comment to load\n     */\n    public getById(id: string | number): IComment {\n        return tag.configure(Comment(this).concat(`(${id})`), \"coms.getById\");\n    }\n\n    /**\n     * Deletes all the comments in this collection\n     */\n    public clear(): Promise<boolean> {\n        return spPost<boolean>(tag.configure(this.clone(Comments, \"DeleteAll\"), \"coms.clear\"));\n    }\n}\nexport interface IComments extends _Comments {}\nexport const Comments = spInvokableFactory<IComments>(_Comments);\n\nexport class _Comment extends _SharePointQueryableInstance<ICommentInfo> {\n\n    /**\n     * A comment's replies\n     */\n    public get replies(): IReplies {\n        return tag.configure(Replies(this), \"com.replies\");\n    }\n\n    /**\n     * Likes the comment as the current user\n     */\n    @tag(\"com.like\")\n    public like(): Promise<void> {\n        return spPost(this.clone(Comment, \"Like\"));\n    }\n\n    /**\n     * Unlikes the comment as the current user\n     */\n    @tag(\"com.unlike\")\n    public unlike(): Promise<void> {\n        return spPost(this.clone(Comment, \"Unlike\"));\n    }\n\n    /**\n     * Deletes this comment\n     */\n    @tag(\"com.delete\")\n    public delete(): Promise<void> {\n        return spPost(this.clone(Comment, \"DeleteComment\"));\n    }\n}\nexport interface IComment extends _Comment {}\nexport const Comment = spInvokableFactory<IComment>(_Comment);\n\n@defaultPath(\"replies\")\nexport class _Replies extends _SharePointQueryableCollection<ICommentInfo[]> {\n\n    /**\n     * Adds a new reply to this collection\n     * \n     * @param info Comment information to add\n     */\n    @tag(\"reps.add\")\n    public async add(info: string | ICommentInfo): Promise<IComment & ICommentInfo> {\n\n        if (typeof info === \"string\") {\n            info = <ICommentInfo>{ text: info };\n        }\n\n        const postBody = body(assign(metadata(\"Microsoft.SharePoint.Comments.comment\"), info));\n\n        const d = await spPost(this.clone(Replies, null), postBody);\n\n        return assign(Comment(odataUrlFrom(d)), d);\n    }\n}\nexport interface IReplies extends _Replies {}\nexport const Replies = spInvokableFactory<IReplies>(_Replies);\n\n/**\n * Defines the information for a comment author\n */\nexport interface ICommentAuthorData {\n    email: string;\n    id: number;\n    isActive: boolean;\n    isExternal: boolean;\n    jobTitle: string | null;\n    loginName: string;\n    name: string;\n    principalType: number;\n    userId: any | null;\n}\n\n/**\n * Defines the information for a comment\n */\nexport interface ICommentInfo {\n    author: ICommentAuthorData;\n    createdDate: string;\n    id: string;\n    isLikedByUser: boolean;\n    isReply: boolean;\n    itemId: number;\n    likeCount: number;\n    listId: string;\n    mentions: {\n        loginName: string;\n        email: string;\n        name: string;\n    } | null;\n    parentId: string;\n    replyCount: number;\n    text: string;\n}\n\nexport interface ILikeData {\n    name: string;\n    loginName: string;\n    id: number;\n    email: string;\n    creationDate: string;\n}\n\nexport interface ILikedByInformation {\n    likedBy: {\n        creationDate: string;\n        email: string;\n        id: number;\n        loginName: string;\n        name: string;\n    }[];\n    isLikedByUser: boolean;\n    likeCount: number;\n}\n","import { invokableFactory, body, headers, IQueryable } from \"@pnp/odata\";\nimport { ITypedHash, assign, getGUID, hOP, stringIsNullOrEmpty, objectDefinedNotNull, combine, isUrlAbsolute } from \"@pnp/common\";\nimport { IFile } from \"../files/types\";\nimport { Item, IItem } from \"../items/types\";\nimport { SharePointQueryable, _SharePointQueryable, ISharePointQueryable } from \"../sharepointqueryable\";\nimport { metadata } from \"../utils/metadata\";\nimport { List } from \"../lists/types\";\nimport { odataUrlFrom } from \"../odata\";\nimport { Web, IWeb } from \"../webs/types\";\nimport { extractWebUrl } from \"../utils/extractweburl\";\nimport { Site } from \"../sites/types\";\nimport { spPost } from \"../operations\";\nimport { getNextOrder, reindex } from \"./funcs\";\nimport \"../files/web\";\nimport \"../comments/item\";\nimport { tag } from \"../telemetry\";\n\n/**\n * Page promotion state\n */\nexport const enum PromotedState {\n    /**\n     * Regular client side page\n     */\n    NotPromoted = 0,\n    /**\n     * Page that will be promoted as news article after publishing\n     */\n    PromoteOnPublish = 1,\n    /**\n     * Page that is promoted as news article\n     */\n    Promoted = 2,\n}\n\n/**\n * Type describing the available page layout types for client side \"modern\" pages\n */\nexport type ClientsidePageLayoutType = \"Article\" | \"Home\" | \"SingleWebPartAppPage\" | \"RepostPage\";\n\n/**\n * Column size factor. Max value is 12 (= one column), other options are 8,6,4 or 0\n */\nexport type CanvasColumnFactor = 0 | 2 | 4 | 6 | 8 | 12;\n\nfunction initFrom(o: ISharePointQueryable, url: string): IClientsidePage {\n    return ClientsidePage(extractWebUrl(o.toUrl()), url).configureFrom(o);\n}\n\n/** \n * Represents the data and methods associated with client side \"modern\" pages\n */\nexport class _ClientsidePage extends _SharePointQueryable implements IClientsidePage {\n\n    private _pageSettings: IClientsidePageSettingsSlice;\n    private _layoutPart: ILayoutPartsContent;\n    private _bannerImageDirty: boolean;\n\n    /**\n     * PLEASE DON'T USE THIS CONSTRUCTOR DIRECTLY, thank you 🐇\n     */\n    constructor(\n        baseUrl: string | ISharePointQueryable,\n        path?: string,\n        protected json?: Partial<IPageData>,\n        noInit = false,\n        public sections: CanvasSection[] = [],\n        public commentsDisabled = false) {\n\n        super(baseUrl, path);\n\n        this._bannerImageDirty = false;\n\n        // ensure we have a good url to build on for the pages api\n        if (typeof baseUrl === \"string\") {\n            this.data.parentUrl = \"\";\n            this.data.url = combine(extractWebUrl(baseUrl), path);\n        } else {\n            this.assign(initFrom(baseUrl, null), path);\n        }\n\n        // set a default page settings slice\n        this._pageSettings = { controlType: 0, pageSettingsSlice: { isDefaultDescription: true, isDefaultThumbnail: true } };\n\n        // set a default layout part\n        this._layoutPart = _ClientsidePage.getDefaultLayoutPart();\n\n        if (typeof json !== \"undefined\" && !noInit) {\n            this.fromJSON(json);\n        }\n    }\n\n    private static getDefaultLayoutPart(): ILayoutPartsContent {\n        return {\n            dataVersion: \"1.4\",\n            description: \"Title Region Description\",\n            id: \"cbe7b0a9-3504-44dd-a3a3-0e5cacd07788\",\n            instanceId: \"cbe7b0a9-3504-44dd-a3a3-0e5cacd07788\",\n            properties: {\n                authors: [],\n                layoutType: \"FullWidthImage\",\n                showPublishDate: false,\n                showTopicHeader: false,\n                textAlignment: \"Left\",\n                title: \"\",\n                topicHeader: \"\",\n            },\n            serverProcessedContent: { htmlStrings: {}, searchablePlainTexts: {}, imageSources: {}, links: {} },\n            title: \"Title area\",\n        };\n    }\n\n    public get pageLayout(): ClientsidePageLayoutType {\n        return this.json.PageLayoutType;\n    }\n\n    public set pageLayout(value: ClientsidePageLayoutType) {\n        this.json.PageLayoutType = value;\n    }\n\n    public get bannerImageUrl(): string {\n        return this.json.BannerImageUrl;\n    }\n\n    public set bannerImageUrl(value: string) {\n        this.json.BannerImageUrl = value;\n        this._bannerImageDirty = true;\n    }\n\n    public get topicHeader(): string {\n        return objectDefinedNotNull(this.json.TopicHeader) ? this.json.TopicHeader : \"\";\n    }\n\n    public set topicHeader(value: string) {\n        this.json.TopicHeader = value;\n        this._layoutPart.properties.topicHeader = value;\n        if (stringIsNullOrEmpty(value)) {\n            this.showTopicHeader = false;\n        }\n    }\n\n    public get title(): string {\n        return this._layoutPart.properties.title;\n    }\n\n    public set title(value: string) {\n        this.json.Title = value;\n        this._layoutPart.properties.title = value;\n    }\n\n    public get layoutType(): LayoutType {\n        return this._layoutPart.properties.layoutType;\n    }\n\n    public set layoutType(value: LayoutType) {\n        this._layoutPart.properties.layoutType = value;\n    }\n\n    public get headerTextAlignment(): TextAlignment {\n        return this._layoutPart.properties.textAlignment;\n    }\n\n    public set headerTextAlignment(value: TextAlignment) {\n        this._layoutPart.properties.textAlignment = value;\n    }\n\n    public get showTopicHeader(): boolean {\n        return this._layoutPart.properties.showTopicHeader;\n    }\n\n    public set showTopicHeader(value: boolean) {\n        this._layoutPart.properties.showTopicHeader = value;\n    }\n\n    public get showPublishDate(): boolean {\n        return this._layoutPart.properties.showPublishDate;\n    }\n\n    public set showPublishDate(value: boolean) {\n        this._layoutPart.properties.showPublishDate = value;\n    }\n\n    public get hasVerticalSection(): boolean {\n        return this.sections.findIndex(s => s.layoutIndex === 2) > -1;\n    }\n\n    public get verticalSection(): CanvasSection | null {\n        if (this.hasVerticalSection) {\n            return this.addVerticalSection();\n        }\n        return null;\n    }\n\n    /**\n     * Add a section to this page\n     */\n    public addSection(): CanvasSection {\n        const section = new CanvasSection(this, getNextOrder(this.sections), 1);\n        this.sections.push(section);\n        return section;\n    }\n\n    /**\n     * Add a section to this page\n     */\n    public addVerticalSection(): CanvasSection {\n\n        // we can only have one vertical section so we find it if it exists\n        const sectionIndex = this.sections.findIndex(s => s.layoutIndex === 2);\n        if (sectionIndex > -1) {\n            return this.sections[sectionIndex];\n        }\n\n        const section = new CanvasSection(this, getNextOrder(this.sections), 2);\n        this.sections.push(section);\n        return section;\n    }\n\n    /**\n     * Loads this instance from the appropriate JSON data\n     * \n     * @param pageData JSON data to load (replaces any existing data)\n     */\n    public fromJSON(pageData: Partial<IPageData>): this {\n\n        this.json = pageData;\n\n        const canvasControls: IClientsideControlBaseData[] = JSON.parse(pageData.CanvasContent1);\n\n        const layouts = <ILayoutPartsContent[]>JSON.parse(pageData.LayoutWebpartsContent);\n        if (layouts && layouts.length > 0) {\n            this._layoutPart = layouts[0];\n        }\n\n        this.setControls(canvasControls);\n\n        return this;\n    }\n\n    /**\n     * Loads this page's content from the server\n     */\n    @tag(\"csp.load\")\n    public async load(): Promise<IClientsidePage> {\n\n        const item = await this.getItem<{ Id: number, CommentsDisabled: boolean }>(\"Id\", \"CommentsDisabled\");\n        const pageData = await SharePointQueryable(this, `_api/sitepages/pages(${item.Id})`)<IPageData>();\n        this.commentsDisabled = item.CommentsDisabled;\n        return this.fromJSON(pageData);\n    }\n\n    /**\n     * Persists the content changes (sections, columns, and controls) [does not work with batching]\n     * \n     * @param publish If true the page is published, if false the changes are persisted to SharePoint but not published [Default: true]\n     */\n    @tag(\"csp.save\")\n    public async save(publish = true): Promise<boolean> {\n\n        if (this.json.Id === null) {\n            throw Error(\"The id for this page is null. If you want to create a new page, please use ClientSidePage.Create\");\n        }\n\n        if (this._bannerImageDirty) {\n\n            // we have to do these gymnastics to set the banner image url\n            let origImgUrl = this.json.BannerImageUrl;\n\n            if (isUrlAbsolute(origImgUrl)) {\n                // do our best to make this a server relative url by removing the x.sharepoint.com part\n                origImgUrl = origImgUrl.replace(/^https?:\\/\\/[a-z0-9\\.]*?\\.[a-z]{2,3}\\//i, \"/\");\n            }\n\n            const site = Site(extractWebUrl(this.toUrl()));\n            const web = Web(extractWebUrl(this.toUrl()));\n            const imgFile = web.getFileByServerRelativePath(origImgUrl);\n\n            let siteId = \"\";\n            let webId = \"\";\n            let imgId = \"\";\n            let listId = \"\";\n            let webUrl = \"\";\n\n            const batch = web.createBatch();\n\n            site.select(\"Id\", \"Url\").inBatch(batch)().then((r1: { Id: string }) => siteId = r1.Id);\n            web.select(\"Id\", \"Url\").inBatch(batch)().then((r2: { Id: string, Url: string }) => { webId = r2.Id; webUrl = r2.Url; });\n            imgFile.listItemAllFields.select(\"UniqueId\", \"ParentList/Id\").expand(\"ParentList\").inBatch(batch)()\n                .then((r3: { UniqueId: string, ParentList: { Id: string } }) => { imgId = r3.UniqueId; listId = r3.ParentList.Id; });\n\n            // we know the .then calls above will run before execute resolves, ensuring the vars are set\n            await batch.execute();\n\n            const f = SharePointQueryable(webUrl, \"_layouts/15/getpreview.ashx\");\n            f.query.set(\"guidSite\", `${siteId}`);\n            f.query.set(\"guidWeb\", `${webId}`);\n            f.query.set(\"guidFile\", `${imgId}`);\n            this.bannerImageUrl = f.toUrlAndQuery();\n\n            if (!objectDefinedNotNull(this._layoutPart.serverProcessedContent)) {\n                this._layoutPart.serverProcessedContent = <any>{};\n            }\n\n            this._layoutPart.serverProcessedContent.imageSources = { imageSource: origImgUrl };\n\n            if (!objectDefinedNotNull(this._layoutPart.serverProcessedContent.customMetadata)) {\n                this._layoutPart.serverProcessedContent.customMetadata = <any>{};\n            }\n\n            this._layoutPart.serverProcessedContent.customMetadata.imageSource = {\n                listId,\n                siteId,\n                uniqueId: imgId,\n                webId,\n            };\n            this._layoutPart.properties.webId = webId;\n            this._layoutPart.properties.siteId = siteId;\n            this._layoutPart.properties.listId = listId;\n            this._layoutPart.properties.uniqueId = imgId;\n        }\n\n        // we try and check out the page for the user\n        if (!this.json.IsPageCheckedOutToCurrentUser) {\n            await spPost(initFrom(this, `_api/sitepages/pages(${this.json.Id})/checkoutpage`));\n        }\n\n        const saveBody = Object.assign(metadata(\"SP.Publishing.SitePage\"), {\n            AuthorByline: this.json.AuthorByline || [],\n            BannerImageUrl: this.bannerImageUrl,\n            CanvasContent1: this.getCanvasContent1(),\n            LayoutWebpartsContent: this.getLayoutWebpartsContent(),\n            Title: this.title,\n            TopicHeader: this.topicHeader,\n        });\n\n        const updater = initFrom(this, `_api/sitepages/pages(${this.json.Id})/savepage`);\n        await spPost<boolean>(updater, headers({ \"if-match\": \"*\" }, body(saveBody)));\n\n        let r = true;\n\n        if (publish) {\n            r = await spPost(initFrom(this, `_api/sitepages/pages(${this.json.Id})/publish`));\n            if (r) {\n                this.json.IsPageCheckedOutToCurrentUser = false;\n            }\n        }\n\n        this._bannerImageDirty = false;\n\n        return r;\n    }\n\n    /**\n     * Discards the checkout of this page\n     */\n    @tag(\"csp.discardPageCheckout\")\n    public async discardPageCheckout(): Promise<void> {\n\n        if (this.json.Id === null) {\n            throw Error(\"The id for this page is null. If you want to create a new page, please use ClientSidePage.Create\");\n        }\n\n        const d = await spPost(initFrom(this, `_api/sitepages/pages(${this.json.Id})/discardPage`), body(metadata(\"SP.Publishing.SitePage\")));\n\n        this.fromJSON(d);\n    }\n\n    /**\n     * Promotes this page as a news item\n     */\n    @tag(\"csp.promoteToNews\")\n    public async promoteToNews(): Promise<boolean> {\n        return this.promoteNewsImpl(\"promoteToNews\");\n    }\n\n    // API is currently broken on server side\n    // public async demoteFromNews(): Promise<boolean> {\n    //     return this.promoteNewsImpl(\"demoteFromNews\");\n    // }\n\n    /**\n     * Finds a control by the specified instance id\n     *\n     * @param id Instance id of the control to find\n     */\n    public findControlById<T extends ColumnControl<any> = ColumnControl<any>>(id: string): T {\n        return this.findControl((c) => c.id === id);\n    }\n\n    /**\n     * Finds a control within this page's control tree using the supplied predicate\n     *\n     * @param predicate Takes a control and returns true or false, if true that control is returned by findControl\n     */\n    public findControl<T extends ColumnControl<any> = ColumnControl<any>>(predicate: (c: ColumnControl<any>) => boolean): T {\n        // check all sections\n        for (let i = 0; i < this.sections.length; i++) {\n            // check all columns\n            for (let j = 0; j < this.sections[i].columns.length; j++) {\n                // check all controls\n                for (let k = 0; k < this.sections[i].columns[j].controls.length; k++) {\n                    // check to see if the predicate likes this control\n                    if (predicate(this.sections[i].columns[j].controls[k])) {\n                        return <T>this.sections[i].columns[j].controls[k];\n                    }\n                }\n            }\n        }\n\n        // we found nothing so give nothing back\n        return null;\n    }\n\n    /**\n     * Creates a copy of this page\n     * \n     * @param web The web where we will create the copy\n     * @param pageName The file name of the new page\n     * @param title The title of the new page\n     * @param publish If true the page will be published\n     */\n    @tag(\"csp.copy\")\n    public async copy(web: IWeb, pageName: string, title: string, publish = true): Promise<IClientsidePage> {\n\n        const page = await CreateClientsidePage(web, pageName, title, this.pageLayout);\n\n        // we know the method is on the class - but it is protected so not part of the interface\n        (<any>page).setControls(this.getControls());\n\n        await page.save(publish);\n\n        return page;\n    }\n\n    /**\n     * Sets the modern page banner image\n     * \n     * @param url Url of the image to display\n     * @param altText Alt text to describe the image\n     * @param bannerProps Additional properties to control display of the banner\n     */\n    public setBannerImage(url: string, props?: {\n        altText?: string;\n        imageSourceType?: number;\n        translateX?: number;\n        translateY?: number;\n    }): void {\n\n        this.bannerImageUrl = url;\n        this._layoutPart.properties.imageSourceType = 2; // this seems to always be true, so default?\n\n        if (objectDefinedNotNull(props)) {\n            if (hOP(props, \"translateX\")) {\n                this._layoutPart.properties.translateX = props.translateX;\n            }\n            if (hOP(props, \"translateY\")) {\n                this._layoutPart.properties.translateY = props.translateY;\n            }\n            if (hOP(props, \"imageSourceType\")) {\n                this._layoutPart.properties.imageSourceType = props.imageSourceType;\n            }\n            if (hOP(props, \"altText\")) {\n                this._layoutPart.properties.altText = props.altText;\n            }\n        }\n    }\n\n    /**\n     * Gets the list item associated with this clientside page\n     * \n     * @param selects Specific set of fields to include when getting the item\n     */\n    @tag(\"csp.getItem\")\n    public async getItem<T>(...selects: string[]): Promise<IItem & T> {\n\n        const initer = initFrom(this, \"/_api/lists/EnsureClientRenderedSitePagesLibrary\").select(\"EnableModeration\", \"EnableMinorVersions\", \"Id\");\n        const listData = await spPost<{ Id: string, \"odata.id\": string }>(initer);\n        const item = (List(listData[\"odata.id\"])).configureFrom(this).items.getById(this.json.Id);\n        const itemData: T = await item.select.apply(item, selects)();\n        return assign((Item(odataUrlFrom(itemData))).configureFrom(this), itemData);\n    }\n\n    /**\n     * Extends this queryable from the provided parent \n     * \n     * @param parent Parent queryable from which we will derive a base url\n     * @param path Additional path\n     */\n    protected assign(parent: IQueryable<any>, path?: string) {\n        this.data.parentUrl = parent.data.url;\n        this.data.url = combine(this.data.parentUrl, path || \"\");\n        this.configureFrom(parent);\n    }\n\n    protected getCanvasContent1(): string {\n        return JSON.stringify(this.getControls());\n    }\n\n    protected getLayoutWebpartsContent(): string {\n        if (this._layoutPart) {\n            return JSON.stringify([this._layoutPart]);\n        } else {\n            return JSON.stringify(null);\n        }\n    }\n\n    protected setControls(controls: IClientsideControlBaseData[]): void {\n\n        if (controls && controls.length) {\n\n            for (let i = 0; i < controls.length; i++) {\n\n                // if no control type is present this is a column which we give type 0 to let us process it\n                const controlType = hOP(controls[i], \"controlType\") ? controls[i].controlType : 0;\n\n                switch (controlType) {\n\n                    case 0:\n                        // empty canvas column or page settings\n                        if (hOP(controls[i], \"pageSettingsSlice\")) {\n                            this._pageSettings = <IClientsidePageSettingsSlice>controls[i];\n                        } else {\n                            // we have an empty column\n                            this.mergeColumnToTree(new CanvasColumn(<IClientsidePageColumnData>controls[i]));\n                        }\n                        break;\n                    case 3:\n                        const part = new ClientsideWebpart(<IClientsideWebPartData>controls[i]);\n                        this.mergePartToTree(part, part.data.position);\n                        break;\n                    case 4:\n                        const textData = <IClientsideTextData>controls[i];\n                        const text = new ClientsideText(textData.innerHTML, textData);\n                        this.mergePartToTree(text, text.data.position);\n                        break;\n                }\n            }\n\n            reindex(this.sections);\n        }\n    }\n\n    protected getControls(): IClientsideControlBaseData[] {\n\n        // reindex things\n        reindex(this.sections);\n\n        // rollup the control changes\n        const canvasData: any[] = [];\n\n        this.sections.forEach(section => {\n            section.columns.forEach(column => {\n                if (column.controls.length < 1) {\n                    // empty column\n                    canvasData.push({\n                        displayMode: column.data.displayMode,\n                        emphasis: this.getEmphasisObj(section.emphasis),\n                        position: column.data.position,\n                    });\n                } else {\n                    column.controls.forEach(control => {\n                        control.data.emphasis = this.getEmphasisObj(section.emphasis);\n                        canvasData.push(control.data);\n                    });\n                }\n            });\n        });\n\n        canvasData.push(this._pageSettings);\n\n        return canvasData;\n    }\n\n    private getEmphasisObj(value: 0 | 1 | 2 | 3): IClientControlEmphasis {\n        if (value < 1 || value > 3) {\n            return {};\n        }\n\n        return { zoneEmphasis: value };\n    }\n\n    private async promoteNewsImpl(method: string): Promise<boolean> {\n\n        if (this.json.Id === null) {\n            throw Error(\"The id for this page is null.\");\n        }\n\n        // per bug #858 if we promote before we have ever published the last published date will\n        // forever not be updated correctly in the modern news webpart. Because this will affect very\n        // few folks we just go ahead and publish for them here as that is likely what they intended.\n        if (stringIsNullOrEmpty(this.json.VersionInfo.LastVersionCreatedBy)) {\n            const lastPubData = new Date(this.json.VersionInfo.LastVersionCreated);\n            // no modern page should reasonable be published before the year 2000 :)\n            if (lastPubData.getFullYear() < 2000) {\n                await this.save(true);\n            }\n        }\n\n        return await spPost(initFrom(this, `_api/sitepages/pages(${this.json.Id})/${method}`), body(metadata(\"SP.Publishing.SitePage\")));\n    }\n\n    /**\n     * Merges the control into the tree of sections and columns for this page\n     * \n     * @param control The control to merge\n     */\n    private mergePartToTree(control: any, positionData: IPosition): void {\n\n        let column: CanvasColumn = null;\n        let sectionFactor: CanvasColumnFactor = 12;\n        let sectionIndex = 0;\n        let zoneIndex = 0;\n        let layoutIndex = 1;\n\n        // handle case where we don't have position data (shouldn't happen?)\n        if (positionData) {\n            if (hOP(positionData, \"zoneIndex\")) {\n                zoneIndex = positionData.zoneIndex;\n            }\n            if (hOP(positionData, \"sectionIndex\")) {\n                sectionIndex = positionData.sectionIndex;\n            }\n            if (hOP(positionData, \"sectionFactor\")) {\n                sectionFactor = positionData.sectionFactor;\n            }\n            if (hOP(positionData, \"layoutIndex\")) {\n                layoutIndex = positionData.layoutIndex;\n            }\n        }\n\n        const section = this.getOrCreateSection(zoneIndex, layoutIndex, control.data.emphasis.zoneEmphasis || 0);\n\n        const columns = section.columns.filter(c => c.order === sectionIndex);\n        if (columns.length < 1) {\n            column = section.addColumn(sectionFactor, layoutIndex);\n        } else {\n            column = columns[0];\n        }\n\n        control.column = column;\n        column.addControl(control);\n    }\n\n    /**\n     * Merges the supplied column into the tree\n     * \n     * @param column Column to merge\n     * @param position The position data for the column\n     */\n    private mergeColumnToTree(column: CanvasColumn): void {\n\n        const order = hOP(column.data, \"position\") && hOP(column.data.position, \"zoneIndex\") ? column.data.position.zoneIndex : 0;\n        const layoutIndex = hOP(column.data, \"position\") && hOP(column.data.position, \"layoutIndex\") ? column.data.position.layoutIndex : 1;\n        const section = this.getOrCreateSection(order, layoutIndex, column.data.emphasis.zoneEmphasis || 0);\n        column.section = section;\n        section.columns.push(column);\n    }\n\n    /**\n     * Handle the logic to get or create a section based on the supplied order and layoutIndex\n     * \n     * @param order Section order\n     * @param layoutIndex Layout Index (1 === normal, 2 === vertical section)\n     * @param emphasis The section emphasis\n     */\n    private getOrCreateSection(order: number, layoutIndex: number, emphasis: 0 | 1 | 2 | 3): CanvasSection {\n\n        let section: CanvasSection = null;\n        const sections = this.sections.filter(s => s.order === order && s.layoutIndex === layoutIndex);\n\n        if (sections.length < 1) {\n            section = layoutIndex === 2 ? this.addVerticalSection() : this.addSection();\n            section.order = order;\n            section.emphasis = emphasis;\n        } else {\n            section = sections[0];\n        }\n\n        return section;\n    }\n}\nexport interface IClientsidePage extends _ClientsidePage { }\n\n/**\n * Invokable factory for IClientSidePage instances\n */\nconst ClientsidePage = (\n    baseUrl: string | ISharePointQueryable,\n    path?: string,\n    json?: Partial<IPageData>,\n    noInit = false,\n    sections: CanvasSection[] = [],\n    commentsDisabled = false): IClientsidePage => {\n\n    return invokableFactory<IClientsidePage>(_ClientsidePage)(baseUrl, path, json, noInit, sections, commentsDisabled);\n};\n\n/**\n * Loads a client side page from the supplied IFile instance\n * \n * @param file Source IFile instance\n */\nexport const ClientsidePageFromFile = async (file: IFile): Promise<IClientsidePage> => {\n\n    const item = await file.getItem<{ Id: number }>();\n    const page = ClientsidePage(extractWebUrl(file.toUrl()), \"\", { Id: item.Id }, true);\n    return page.configureFrom(file).load();\n};\n\n/**\n * Creates a new client side page\n * \n * @param web The web or list\n * @param pageName The name of the page (filename)\n * @param title The page's title\n * @param PageLayoutType Layout to use when creating the page\n */\nexport const CreateClientsidePage = async (web: IWeb, pageName: string, title: string, PageLayoutType: ClientsidePageLayoutType = \"Article\"): Promise<IClientsidePage> => {\n\n    // patched because previously we used the full page name with the .aspx at the end\n    // this allows folk's existing code to work after the re-write to the new API\n    pageName = pageName.replace(/\\.aspx$/i, \"\");\n\n    // initialize the page, at this point a checked-out page with a junk filename will be created.\n    const pageInitData: IPageData = await spPost(initFrom(web, \"_api/sitepages/pages\"), body(Object.assign(metadata(\"SP.Publishing.SitePage\"), { PageLayoutType })));\n\n    // now we can init our page with the save data\n    const newPage = ClientsidePage(web, \"\", pageInitData);\n    newPage.title = pageName;\n    await newPage.save(false);\n    newPage.title = title;\n    return newPage;\n};\n\nexport class CanvasSection {\n\n    /**\n     * Used to track this object inside the collection at runtime\n     */\n    private _memId: string;\n\n    private _order: number;\n    private _layoutIndex: number;\n\n    constructor(protected page: IClientsidePage, order: number, layoutIndex: number, public columns: CanvasColumn[] = [], private _emphasis: 0 | 1 | 2 | 3 = 0) {\n        this._memId = getGUID();\n        this._order = order;\n        this._layoutIndex = layoutIndex;\n    }\n\n    public get order(): number {\n        return this._order;\n    }\n\n    public set order(value: number) {\n        this._order = value;\n        for (let i = 0; i < this.columns.length; i++) {\n            this.columns[i].data.position.zoneIndex = value;\n        }\n    }\n\n    public get layoutIndex(): number {\n        return this._layoutIndex;\n    }\n\n    public set layoutIndex(value: number) {\n        this._layoutIndex = value;\n        for (let i = 0; i < this.columns.length; i++) {\n            this.columns[i].data.position.layoutIndex = value;\n        }\n    }\n\n    /**\n     * Default column (this.columns[0]) for this section\n     */\n    public get defaultColumn(): CanvasColumn {\n\n        if (this.columns.length < 1) {\n            this.addColumn(12);\n        }\n\n        return this.columns[0];\n    }\n\n    /**\n     * Adds a new column to this section\n     */\n    public addColumn(factor: CanvasColumnFactor, layoutIndex = 1): CanvasColumn {\n        const column = new CanvasColumn();\n        column.section = this;\n        column.data.position.zoneIndex = this.order;\n        column.data.position.layoutIndex = layoutIndex;\n        column.data.position.sectionFactor = factor;\n        column.order = getNextOrder(this.columns);\n        this.columns.push(column);\n        return column;\n    }\n\n    /**\n     * Adds a control to the default column for this section\n     *\n     * @param control Control to add to the default column\n     */\n    public addControl(control: ColumnControl<any>): this {\n        this.defaultColumn.addControl(control);\n        return this;\n    }\n\n    public get emphasis(): 0 | 1 | 2 | 3 {\n        return this._emphasis;\n    }\n\n    public set emphasis(value: 0 | 1 | 2 | 3) {\n        this._emphasis = value;\n    }\n\n    /**\n     * Removes this section and all contained columns and controls from the collection\n     */\n    public remove(): void {\n        this.page.sections = this.page.sections.filter(section => section._memId !== this._memId);\n        reindex(this.page.sections);\n    }\n}\n\nexport class CanvasColumn {\n\n    public static Default: IClientsidePageColumnData = {\n        controlType: 0,\n        displayMode: 2,\n        emphasis: {},\n        position: {\n            layoutIndex: 1,\n            sectionFactor: 12,\n            sectionIndex: 1,\n            zoneIndex: 1,\n        },\n    };\n\n    private _section: CanvasSection | null;\n    private _memId: string;\n\n    constructor(protected json: IClientsidePageColumnData = JSON.parse(JSON.stringify(CanvasColumn.Default)), public controls: ColumnControl<any>[] = []) {\n        this._section = null;\n        this._memId = getGUID();\n    }\n\n    public get data(): IClientsidePageColumnData {\n        return this.json;\n    }\n\n    public get section(): CanvasSection {\n        return this._section;\n    }\n\n    public set section(section: CanvasSection) {\n        this._section = section;\n    }\n\n    public get order(): number {\n        return this.data.position.sectionIndex;\n    }\n\n    public set order(value: number) {\n        this.data.position.sectionIndex = value;\n        for (let i = 0; i < this.controls.length; i++) {\n            this.controls[i].data.position.zoneIndex = this.data.position.zoneIndex;\n            this.controls[i].data.position.layoutIndex = this.data.position.layoutIndex;\n            this.controls[i].data.position.sectionIndex = value;\n        }\n    }\n\n    public get factor(): CanvasColumnFactor {\n        return this.data.position.sectionFactor;\n    }\n\n    public set factor(value: CanvasColumnFactor) {\n        this.data.position.sectionFactor = value;\n    }\n\n    public addControl(control: ColumnControl<any>): this {\n        control.column = this;\n        this.controls.push(control);\n        return this;\n    }\n\n    public getControl<T extends ColumnControl<any>>(index: number): T {\n        return <T>this.controls[index];\n    }\n\n    public remove(): void {\n        this.section.columns = this.section.columns.filter(column => column._memId !== this._memId);\n        reindex(this.section.columns);\n    }\n}\n\nexport abstract class ColumnControl<T extends ICanvasControlBaseData> {\n\n    private _column: CanvasColumn | null;\n\n    constructor(protected json: T) { }\n\n    public abstract get order(): number;\n    public abstract set order(value: number);\n\n    public get id(): string {\n        return this.json.id;\n    }\n\n    public get data(): T {\n        return this.json;\n    }\n\n    public get column(): CanvasColumn | null {\n        return this._column;\n    }\n\n    public set column(value: CanvasColumn) {\n        this._column = value;\n        this.onColumnChange(this._column);\n    }\n\n    public remove(): void {\n        this.column.controls = this.column.controls.filter(control => control.id !== this.id);\n        reindex(this.column.controls);\n    }\n\n    protected setData(data: T) {\n        this.json = data;\n    }\n\n    protected abstract onColumnChange(col: CanvasColumn): void;\n}\n\nexport class ClientsideText extends ColumnControl<IClientsideTextData> {\n\n    public static Default: IClientsideTextData = {\n        addedFromPersistedData: false,\n        anchorComponentId: \"\",\n        controlType: 4,\n        displayMode: 2,\n        editorType: \"CKEditor\",\n        emphasis: {},\n        id: \"\",\n        innerHTML: \"\",\n        position: {\n            controlIndex: 1,\n            layoutIndex: 1,\n            sectionFactor: 12,\n            sectionIndex: 1,\n            zoneIndex: 1,\n        },\n    };\n\n    constructor(text: string, json: IClientsideTextData = JSON.parse(JSON.stringify(ClientsideText.Default))) {\n        if (stringIsNullOrEmpty(json.id)) {\n            json.id = getGUID();\n            json.anchorComponentId = json.id;\n        }\n        super(json);\n\n        this.text = text;\n    }\n\n    public get text(): string {\n        return this.data.innerHTML;\n    }\n\n    public set text(value: string) {\n        if (!value.startsWith(\"<p>\")) {\n            value = `<p>${value}</p>`;\n        }\n        this.data.innerHTML = value;\n    }\n\n    public get order(): number {\n        return this.data.position.controlIndex;\n    }\n\n    public set order(value: number) {\n        this.data.position.controlIndex = value;\n    }\n\n    protected onColumnChange(col: CanvasColumn): void {\n        this.data.position.sectionFactor = col.factor;\n        this.data.position.controlIndex = getNextOrder(col.controls);\n        this.data.position.zoneIndex = col.data.position.zoneIndex;\n        this.data.position.sectionIndex = col.order;\n        this.data.position.layoutIndex = col.data.position.layoutIndex;\n    }\n}\n\nexport class ClientsideWebpart extends ColumnControl<IClientsideWebPartData> {\n\n    public static Default: IClientsideWebPartData = {\n        addedFromPersistedData: false,\n        controlType: 3,\n        displayMode: 2,\n        emphasis: {},\n        id: null,\n        position: {\n            controlIndex: 1,\n            layoutIndex: 1,\n            sectionFactor: 12,\n            sectionIndex: 1,\n            zoneIndex: 1,\n        },\n        reservedHeight: 500,\n        reservedWidth: 500,\n        webPartData: null,\n        webPartId: null,\n    };\n\n    constructor(json: IClientsideWebPartData = JSON.parse(JSON.stringify(ClientsideWebpart.Default))) {\n        super(json);\n    }\n\n    public static fromComponentDef(definition: IClientsidePageComponent): ClientsideWebpart {\n        const part = new ClientsideWebpart();\n        part.import(definition);\n        return part;\n    }\n\n    public get title(): string {\n        return this.data.webPartData.title;\n    }\n\n    public set title(value: string) {\n        this.data.webPartData.title = value;\n    }\n\n    public get description(): string {\n        return this.data.webPartData.description;\n    }\n\n    public set description(value: string) {\n        this.data.webPartData.description = value;\n    }\n\n    public get order(): number {\n        return this.data.position.controlIndex;\n    }\n\n    public set order(value: number) {\n        this.data.position.controlIndex = value;\n    }\n\n    public get height(): number {\n        return this.data.reservedHeight;\n    }\n\n    public set height(value: number) {\n        this.data.reservedHeight = value;\n    }\n\n    public get width(): number {\n        return this.data.reservedWidth;\n    }\n\n    public set width(value: number) {\n        this.data.reservedWidth = value;\n    }\n\n    public get dataVersion(): string {\n        return this.data.webPartData.dataVersion;\n    }\n\n    public set dataVersion(value: string) {\n        this.data.webPartData.dataVersion = value;\n    }\n\n    public setProperties<T = any>(properties: T): this {\n        this.data.webPartData.properties = assign(this.data.webPartData.properties, properties);\n        return this;\n    }\n\n    public getProperties<T = any>(): T {\n        return <T>this.data.webPartData.properties;\n    }\n\n    protected onColumnChange(col: CanvasColumn): void {\n        this.data.position.sectionFactor = col.factor;\n        this.data.position.controlIndex = getNextOrder(col.controls);\n        this.data.position.zoneIndex = col.data.position.zoneIndex;\n        this.data.position.sectionIndex = col.data.position.sectionIndex;\n        this.data.position.layoutIndex = col.data.position.layoutIndex;\n    }\n\n    protected import(component: IClientsidePageComponent): void {\n\n        const id = getGUID();\n        const componendId = component.Id.replace(/^\\{|\\}$/g, \"\").toLowerCase();\n        const manifest: IClientSidePageComponentManifest = JSON.parse(component.Manifest);\n        const preconfiguredEntries = manifest.preconfiguredEntries[0];\n\n        this.setData(Object.assign({}, this.data, <IClientsideWebPartData>{\n            id,\n            webPartData: {\n                dataVersion: \"1.0\",\n                description: preconfiguredEntries.description.default,\n                id: componendId,\n                instanceId: id,\n                properties: preconfiguredEntries.properties,\n                title: preconfiguredEntries.title.default,\n            },\n            webPartId: componendId,\n        }));\n    }\n}\n\nexport interface IPageData {\n    readonly \"odata.metadata\": string;\n    readonly \"odata.type\": \"SP.Publishing.SitePage\";\n    readonly \"odata.id\": string;\n    readonly \"odata.editLink\": string;\n    AbsoluteUrl: string;\n    AuthorByline: string[] | null;\n    BannerImageUrl: string;\n    ContentTypeId: null | string;\n    Description: string;\n    DoesUserHaveEditPermission: boolean;\n    FileName: string;\n    readonly FirstPublished: string;\n    readonly Id: number;\n    IsPageCheckedOutToCurrentUser: boolean;\n    IsWebWelcomePage: boolean;\n    readonly Modified: string;\n    PageLayoutType: ClientsidePageLayoutType;\n    Path: {\n        DecodedUrl: string;\n    };\n    PromotedState: number;\n    Title: string;\n    TopicHeader: null | string;\n    readonly UniqueId: string;\n    Url: string;\n    readonly Version: string;\n    readonly VersionInfo: {\n        readonly LastVersionCreated: string;\n        readonly LastVersionCreatedBy: string;\n    };\n    AlternativeUrlMap: string;\n    CanvasContent1: string;\n    LayoutWebpartsContent: string;\n}\n\n/**\n * Client side webpart object (retrieved via the _api/web/GetClientSideWebParts REST call)\n */\nexport interface IClientsidePageComponent {\n    /**\n     * Component type for client side webpart object\n     */\n    ComponentType: number;\n    /**\n     * Id for client side webpart object\n     */\n    Id: string;\n    /**\n     * Manifest for client side webpart object\n     */\n    Manifest: string;\n    /**\n     * Manifest type for client side webpart object\n     */\n    ManifestType: number;\n    /**\n     * Name for client side webpart object\n     */\n    Name: string;\n    /**\n     * Status for client side webpart object\n     */\n    Status: number;\n}\n\ninterface IClientSidePageComponentManifest {\n    alias: string;\n    componentType: \"WebPart\" | \"\" | null;\n    disabledOnClassicSharepoint: boolean;\n    hiddenFromToolbox: boolean;\n    id: string;\n    imageLinkPropertyNames: any;\n    isInternal: boolean;\n    linkPropertyNames: boolean;\n    loaderConfig: any;\n    manifestVersion: number;\n    preconfiguredEntries: {\n        description: { default: string };\n        group: { default: string };\n        groupId: string;\n        iconImageUrl: string;\n        officeFabricIconFontName: string;\n        properties: ITypedHash<any>;\n        title: { default: string };\n\n    }[];\n    preloadComponents: any | null;\n    requiredCapabilities: any | null;\n    searchablePropertyNames: any | null;\n    supportsFullBleed: boolean;\n    version: string;\n}\n\nexport interface IClientsideControlBaseData {\n    controlType: number;\n}\n\nexport interface ICanvasControlBaseData extends IClientsideControlBaseData {\n    id: string;\n    emphasis: IClientControlEmphasis;\n    displayMode: number;\n}\n\nexport interface IClientsidePageSettingsSlice extends IClientsideControlBaseData {\n    pageSettingsSlice: {\n        \"isDefaultDescription\": boolean;\n        \"isDefaultThumbnail\": boolean;\n    };\n}\n\nexport interface IClientsidePageColumnData extends IClientsideControlBaseData {\n    controlType: 0;\n    displayMode: number;\n    emphasis: IClientControlEmphasis;\n    position: IPosition;\n}\n\ninterface IPosition {\n    zoneIndex: number;\n    sectionIndex: number;\n    controlIndex?: number;\n    sectionFactor?: CanvasColumnFactor;\n    layoutIndex: number;\n}\n\nexport interface IClientsideTextData extends ICanvasControlBaseData {\n    controlType: 4;\n    position: IPosition;\n    anchorComponentId: string;\n    editorType: \"CKEditor\";\n    addedFromPersistedData: boolean;\n    innerHTML: string;\n}\n\nexport interface IClientsideWebPartData<PropertiesType = any> extends ICanvasControlBaseData {\n    controlType: 3;\n    position: IPosition;\n    webPartId: string;\n    reservedHeight: number;\n    reservedWidth: number;\n    addedFromPersistedData: boolean;\n    webPartData: {\n        id: string;\n        instanceId: string;\n        title: string;\n        description: string;\n        serverProcessedContent?: {\n            \"htmlStrings\": ITypedHash<string>;\n            \"searchablePlainTexts\": ITypedHash<string>;\n            \"imageSources\": ITypedHash<string>;\n            \"links\": ITypedHash<string>;\n        };\n        dataVersion: string;\n        properties: PropertiesType;\n    };\n}\n\nexport interface IClientControlEmphasis {\n    zoneEmphasis?: 0 | 1 | 2 | 3;\n}\n\nexport type LayoutType = \"FullWidthImage\" | \"NoImage\" | \"ColorBlock\" | \"CutInShape\";\nexport type TextAlignment = \"Left\" | \"Center\";\n\ninterface ILayoutPartsContent {\n    id: string;\n    instanceId: string;\n    title: string;\n    description: string;\n    serverProcessedContent: {\n        htmlStrings: ITypedHash<string>;\n        searchablePlainTexts: ITypedHash<string>;\n        imageSources: ITypedHash<string>;\n        links: ITypedHash<string>;\n        customMetadata?: {\n            imageSource?: {\n                siteId: string;\n                webId: string;\n                listId: string;\n                uniqueId: string;\n            },\n        }\n    };\n    dataVersion: string;\n    properties: {\n        title: string;\n        imageSourceType?: number;\n        layoutType: LayoutType;\n        textAlignment: TextAlignment;\n        showTopicHeader: boolean;\n        showPublishDate: boolean;\n        topicHeader: string;\n        authors: {\n            id: string,\n            email: string;\n            upn: string;\n            name: string;\n            role: string;\n        }[];\n        webId?: string;\n        siteId?: string;\n        listId?: string;\n        uniqueId?: string;\n        translateX?: number;\n        translateY?: number;\n        altText?: string;\n    };\n}\n","import { addProp } from \"@pnp/odata\";\nimport { _Item, Item } from \"../items/types\";\nimport { Comments, IComments, ILikeData, ILikedByInformation } from \"./types\";\nimport { spPost } from \"../operations\";\n\ndeclare module \"../items/types\" {\n    interface _Item {\n        readonly comments: IComments;\n        getLikedBy(): Promise<ILikeData[]>;\n        like(): Promise<void>;\n        unlike(): Promise<void>;\n        getLikedByInformation(): Promise<ILikedByInformation>;\n    }\n    interface IItem {\n        readonly comments: IComments;\n        /**\n         * Gets the collection of people who have liked this item\n         */\n        getLikedBy(): Promise<ILikeData[]>;\n        /**\n         * Likes this item as the current user\n         */\n        like(): Promise<void>;\n        /**\n         * Unlikes this item as the current user\n         */\n        unlike(): Promise<void>;\n        /**\n         * Get the like by information for a modern site page     \n         */\n        getLikedByInformation(): Promise<ILikedByInformation>;\n    }\n}\n\naddProp(_Item, \"comments\", Comments);\n\n_Item.prototype.getLikedBy = function (this: _Item): Promise<ILikeData[]> {\n    return spPost<ILikeData[]>(this.clone(Item, \"likedBy\"));\n};\n\n_Item.prototype.like = function (this: _Item): Promise<void> {\n    return spPost<void>(this.clone(Item, \"like\"));\n};\n\n_Item.prototype.unlike = function (this: _Item): Promise<void> {\n    return spPost<void>(this.clone(Item, \"unlike\"));\n};\n\n_Item.prototype.getLikedByInformation = function (this: _Item): Promise<ILikedByInformation> {\n    return this.clone(Item, \"likedByInformation\").expand(\"likedby\")<ILikedByInformation>();\n};\n","import { _Web, IWeb } from \"../webs/types\";\nimport { IClientsidePageComponent, CreateClientsidePage, IClientsidePage, ClientsidePageLayoutType, ClientsidePageFromFile } from \"./types\";\nimport { SharePointQueryableCollection } from \"../sharepointqueryable\";\n\ndeclare module \"../webs/types\" {\n    interface _Web {\n        getClientsideWebParts(): Promise<IClientsidePageComponent[]>;\n        addClientsidePage(pageName: string, title?: string, libraryTitle?: string): Promise<IClientsidePage>;\n        loadClientsidePage(path: string): Promise<IClientsidePage>;\n    }\n    interface IWeb {\n\n        /**\n         * Gets the collection of available client side web parts for this web instance\n         */\n        getClientsideWebParts(): Promise<IClientsidePageComponent[]>;\n\n        /**\n         * Creates a new client side page\n         *\n         * @param pageName Name of the new page\n         * @param title Display title of the new page\n         */\n        addClientsidePage(pageName: string, title?: string, PageLayoutType?: ClientsidePageLayoutType): Promise<IClientsidePage>;\n\n        /**\n         * Loads a page from the provided server relative path to the file\n         * \n         * @param path Server relative path to the file (ex: \"/sites/dev/sitepages/page.aspx\")\n         */\n        loadClientsidePage(path: string): Promise<IClientsidePage>;\n    }\n}\n\n_Web.prototype.getClientsideWebParts = function (): Promise<IClientsidePageComponent[]> {\n    return this.clone(SharePointQueryableCollection, \"GetClientSideWebParts\")();\n};\n\n_Web.prototype.addClientsidePage = function (this: IWeb, pageName: string, title = pageName.replace(/\\.[^/.]+$/, \"\"), layout?: ClientsidePageLayoutType): Promise<IClientsidePage> {\n    return CreateClientsidePage(this, pageName, title, layout);\n};\n\n_Web.prototype.loadClientsidePage = function (this: IWeb, path: string): Promise<IClientsidePage> {\n    return ClientsidePageFromFile(this.getFileByServerRelativePath(path));\n};\n","import { ITypedHash } from \"@pnp/common\";\nimport { body } from \"@pnp/odata\";\nimport {\n    SharePointQueryableCollection,\n    _SharePointQueryableInstance,\n    ISharePointQueryableCollection,\n    _SharePointQueryableCollection,\n    spInvokableFactory,\n    deleteable,\n    IDeleteable,\n} from \"../sharepointqueryable\";\nimport { defaultPath } from \"../decorators\";\nimport { metadata } from \"../utils/metadata\";\nimport { spPost } from \"../operations\";\nimport { tag } from \"../telemetry\";\n\n@defaultPath(\"contenttypes\")\nexport class _ContentTypes extends _SharePointQueryableCollection<IContentTypeInfo[]> {\n\n    /**\n     * Adds an existing contenttype to a content type collection\n     *\n     * @param contentTypeId in the following format, for example: 0x010102\n     */\n    @tag(\"cts.addAvailableContentType\")\n    public async addAvailableContentType(contentTypeId: string): Promise<IContentTypeAddResult> {\n\n        const data = await spPost(this.clone(ContentTypes, \"addAvailableContentType\"), body({ \"contentTypeId\": contentTypeId }));\n        return {\n            contentType: this.getById(data.id),\n            data: data,\n        };\n    }\n\n    /**\t\n     * Gets a ContentType by content type id\n     * @param id The id of the content type to get, in the following format, for example: 0x010102\t\n     */\n    public getById(id: string): IContentType {\n        return tag.configure(ContentType(this).concat(`('${id}')`), \"cts.getById\");\n    }\n\n    /**\n     * Adds a new content type to the collection\n     *\n     * @param id The desired content type id for the new content type (also determines the parent content type)\n     * @param name The name of the content type\n     * @param description The description of the content type\n     * @param group The group in which to add the content type\n     * @param additionalSettings Any additional settings to provide when creating the content type\n     *\n     */\n    @tag(\"cts.add\")\n    public async add(\n        id: string,\n        name: string,\n        description = \"\",\n        group = \"Custom Content Types\",\n        additionalSettings: ITypedHash<string | number | boolean> = {}): Promise<IContentTypeAddResult> {\n\n        const postBody = body(Object.assign(metadata(\"SP.ContentType\"), {\n            \"Description\": description,\n            \"Group\": group,\n            \"Id\": { \"StringValue\": id },\n            \"Name\": name,\n        }, additionalSettings));\n\n        const data = await spPost(this, postBody);\n\n        return { contentType: this.getById(data.id), data };\n    }\n}\nexport interface IContentTypes extends _ContentTypes { }\nexport const ContentTypes = spInvokableFactory<IContentTypes>(_ContentTypes);\n\n\nexport class _ContentType extends _SharePointQueryableInstance<IContentTypeInfo> {\n\n    public delete = deleteable(\"ct\");\n\n    /**\n     * Gets the column (also known as field) references in the content type.\n     */\n    public get fieldLinks(): IFieldLinks {\n        return tag.configure(FieldLinks(this), \"ct.fieldLinks\");\n    }\n\n    /**\n     * Gets a value that specifies the collection of fields for the content type.\n     */\n    public get fields(): ISharePointQueryableCollection {\n        return tag.configure(SharePointQueryableCollection(this, \"fields\"), \"ct.fields\");\n    }\n\n    /**\n     * Gets the parent content type of the content type.\n     */\n    public get parent(): IContentType {\n        return tag.configure(ContentType(this, \"parent\"), \"ct.parent\");\n    }\n\n    /**\n     * Gets a value that specifies the collection of workflow associations for the content type.\n     */\n    public get workflowAssociations(): ISharePointQueryableCollection {\n        return tag.configure(SharePointQueryableCollection(this, \"workflowAssociations\"), \"ct.workflowAssociations\");\n    }\n}\nexport interface IContentType extends _ContentType, IDeleteable { }\nexport const ContentType = spInvokableFactory<IContentType>(_ContentType);\n\n/**\n * Represents the output of adding a content type\n */\nexport interface IContentTypeAddResult {\n    contentType: IContentType;\n    data: Partial<IContentTypeInfo>;\n}\n\nexport interface IContentTypeInfo {\n    Description: string;\n    DisplayFormTemplateName: string;\n    DisplayFormUrl: string;\n    DocumentTemplate: string;\n    DocumentTemplateUrl: string;\n    EditFormTemplateName: string;\n    EditFormUrl: string;\n    Group: string;\n    Hidden: boolean;\n    Id: { StringValue: string; };\n    JSLink: string;\n    MobileDisplayFormUrl: string;\n    MobileEditFormUrl: string;\n    MobileNewFormUrl: string;\n    Name: string;\n    NewFormTemplateName: string;\n    NewFormUrl: string;\n    ReadOnly: boolean;\n    SchemaXml: string;\n    Scope: string;\n    Sealed: boolean;\n    StringId: string;\n}\n\n@defaultPath(\"fieldlinks\")\nexport class _FieldLinks extends _SharePointQueryableCollection<IFieldLinkInfo[]> {\n\n    /**\n    *  Gets a FieldLink by GUID id\t\n    * \n    * @param id The GUID id of the field link\n    */\n    public getById(id: string): IFieldLink {\n        return tag.configure(FieldLink(this).concat(`(guid'${id}')`), \"fls.getById\");\n    }\n}\nexport interface IFieldLinks extends _FieldLinks { }\nexport const FieldLinks = spInvokableFactory<IFieldLinks>(_FieldLinks);\n\nexport class _FieldLink extends _SharePointQueryableInstance<IFieldLinkInfo> { }\nexport interface IFieldLink extends _FieldLink { }\nexport const FieldLink = spInvokableFactory<IFieldLink>(_FieldLink);\n\nexport interface IFieldLinkInfo {\n    FieldInternalName: string | null;\n    Hidden: boolean;\n    Id: string;\n    Name: string;\n    Required: boolean;\n}\n","import { addProp } from \"@pnp/odata\";\nimport { _Web } from \"../webs/types\";\nimport { ContentTypes, IContentTypes } from \"./types\";\n\ndeclare module \"../webs/types\" {\n    interface _Web {\n        readonly contentTypes: IContentTypes;\n    }\n    interface IWeb {\n        /**\n         * Content types contained in this web\n         */\n        readonly contentTypes: IContentTypes;\n    }\n}\n\naddProp(_Web, \"contentTypes\", ContentTypes);\n","import { addProp } from \"@pnp/odata\";\nimport { _Item } from \"../items/types\";\nimport { ContentType, IContentType } from \"./types\";\n\ndeclare module \"../items/types\" {\n    interface _Item {\n        readonly contentType: IContentType;\n    }\n    interface IItem {\n        /**\n         * The content type of this item\n         */\n        readonly contentType: IContentType;\n    }\n}\n\naddProp(_Item, \"contentType\", ContentType, \"ContentType\");\n","import { addProp } from \"@pnp/odata\";\nimport { _List } from \"../lists/types\";\nimport { ContentTypes, IContentTypes } from \"./types\";\n\ndeclare module \"../lists/types\" {\n    interface _List {\n        readonly contentTypes: IContentTypes;\n    }\n    interface IList {\n        /**\n         * Content types available on this list\n         */\n        readonly contentTypes: IContentTypes;\n    }\n}\n\naddProp(_List, \"contentTypes\", ContentTypes);\n","import { body } from \"@pnp/odata\";\nimport {\n    _SharePointQueryableInstance,\n    _SharePointQueryableCollection,\n    spInvokableFactory,\n} from \"../sharepointqueryable\";\nimport { defaultPath } from \"../decorators\";\nimport { spPost } from \"../operations\";\nimport { SPBatch } from \"../batch\";\nimport { tag } from \"../telemetry\";\n\n@defaultPath(\"features\")\nexport class _Features extends _SharePointQueryableCollection<IFeatureInfo[]> {\n\n    /**\n     * Adds (activates) the specified feature\n     *\n     * @param id The Id of the feature (GUID)\n     * @param force If true the feature activation will be forced\n     */\n    @tag(\"fes.add\")\n    public async add(id: string, force = false): Promise<IFeatureAddResult> {\n\n        const data = await spPost(this.clone(Features, \"add\"), body({\n            featdefScope: 0,\n            featureId: id,\n            force: force,\n        }));\n\n        return {\n            data: data,\n            feature: this.getById(id),\n        };\n    }\n\n    /**\t    \n     * Gets a feature from the collection with the specified guid\n     *\t    \n     * @param id The Id of the feature (GUID)\t    \n     */\n    public getById(id: string): IFeature {\n        const feature = Feature(this);\n        feature.concat(`('${id}')`);\n        return tag.configure(feature, \"fes.getById\");\n    }\n\n    /**\n     * Removes (deactivates) a feature from the collection\n     *\n     * @param id The Id of the feature (GUID)\n     * @param force If true the feature deactivation will be forced\n     */\n    @tag(\"fes.remove\")\n    public remove(id: string, force = false): Promise<any> {\n\n        return spPost(this.clone(Features, \"remove\"), body({\n            featureId: id,\n            force: force,\n        }));\n    }\n}\nexport interface IFeatures extends _Features {}\nexport const Features = spInvokableFactory<IFeatures>(_Features);\n\nexport class _Feature extends _SharePointQueryableInstance<IFeatureInfo> {\n\n    /**\n     * Removes (deactivates) the feature\n     *\n     * @param force If true the feature deactivation will be forced\n     */\n    @tag(\"fe.deactivate\")\n    public async deactivate(force = false): Promise<any> {\n\n        const removeDependency = this.addBatchDependency();\n\n        const feature = await Feature(this).select(\"DefinitionId\")<{ DefinitionId: string; }>();\n\n        const promise = this.getParent<IFeatures>(Features, this.parentUrl, \"\", <SPBatch>this.batch).remove(feature.DefinitionId, force);\n\n        removeDependency();\n\n        return promise;\n    }\n}\nexport interface IFeature extends _Feature {}\nexport const Feature = spInvokableFactory<IFeature>(_Feature);\n\n/**\n * Result from adding (activating) a feature to the collection\n */\nexport interface IFeatureAddResult {\n    data: IFeatureInfo;\n    feature: IFeature;\n}\n\nexport interface IFeatureInfo {\n    DefinitionId: string;\n}\n","import { addProp } from \"@pnp/odata\";\nimport { _Site } from \"../sites/types\";\nimport { Features, IFeatures } from \"./types\";\n\ndeclare module \"../sites/types\" {\n    interface _Site {\n        readonly features: IFeatures;\n    }\n    interface ISite {\n        /**\n         * Access the features activated in this site\n         */\n        readonly features: IFeatures;\n    }\n}\n\naddProp(_Site, \"features\", Features);\n","import { addProp } from \"@pnp/odata\";\nimport { _Web } from \"../webs/types\";\nimport { Features, IFeatures } from \"./types\";\n\ndeclare module \"../webs/types\" {\n    interface _Web {\n        readonly features: IFeatures;\n    }\n    interface IWeb {\n        /**\n         * Access the features activated in this web\n         */\n        readonly features: IFeatures;\n    }\n}\n\naddProp(_Web, \"features\", Features);\n","import {\n  _SharePointQueryableInstance,\n  _SharePointQueryableCollection,\n  spInvokableFactory,\n} from \"../sharepointqueryable\";\nimport { assign, ITypedHash } from \"@pnp/common\";\nimport { metadata } from \"../utils/metadata\";\nimport { body, headers } from \"@pnp/odata\";\nimport { defaultPath } from \"../decorators\";\nimport { spPost } from \"../operations\";\nimport { tag } from \"../telemetry\";\n\n@defaultPath(\"fields\")\nexport class _Fields extends _SharePointQueryableCollection<IFieldInfo[]> {\n\n  /**\t\n   * Gets a field from the collection by id\t\n   *\t\n   * @param id The Id of the list\t\n   */\n  public getById(id: string): IField {\n    return tag.configure(Field(this).concat(`('${id}')`), \"fs.getById\");\n  }\n\n  /**\n   * Gets a field from the collection by title\n   *\n   * @param title The case-sensitive title of the field\n   */\n  public getByTitle(title: string): IField {\n    return tag.configure(Field(this, `getByTitle('${title}')`), \"fs.getByTitle\");\n  }\n\n  /**\n   * Gets a field from the collection by using internal name or title\n   *\n   * @param name The case-sensitive internal name or title of the field\n   */\n  public getByInternalNameOrTitle(name: string): IField {\n    return tag.configure(Field(this, `getByInternalNameOrTitle('${name}')`), \"fs.getByInternalNameOrTitle\");\n  }\n\n  /**\n   * Creates a field based on the specified schema\n   * \n   * @param xml A string or XmlSchemaFieldCreationInformation instance descrbing the field to create\n   */\n  @tag(\"fs.createFieldAsXml\")\n  public async createFieldAsXml(xml: string | IXmlSchemaFieldCreationInformation): Promise<IFieldAddResult> {\n\n    if (typeof xml === \"string\") {\n      xml = { SchemaXml: xml };\n    }\n\n    const postBody = body({\n      \"parameters\":\n        assign(metadata(\"SP.XmlSchemaFieldCreationInformation\"), xml),\n    });\n\n    const data = await spPost<{ Id: string; }>(this.clone(Fields, \"createfieldasxml\"), postBody);\n\n    return {\n      data,\n      field: this.getById(data.Id),\n    };\n  }\n\n  /**\n   * Adds a new field to the collection\n   *\n   * @param title The new field's title\n   * @param fieldType The new field's type (ex: SP.FieldText)\n   * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n   */\n  public async add(title: string, fieldType: string, properties: IFieldCreationProperties & { FieldTypeKind: number }): Promise<IFieldAddResult> {\n\n    const postBody = body(Object.assign(metadata(fieldType), {\n      \"Title\": title,\n    }, properties));\n\n    if (!tag.isTagged(this)) {\n      tag.configure(this, \"fs.add\");\n    }\n\n    const data = await spPost<{ Id: string; }>(this.clone(Fields, null), postBody);\n\n    return {\n      data,\n      field: this.getById(data.Id),\n    };\n  }\n\n  /**\n   * Adds a new SP.FieldText to the collection\n   *\n   * @param title The field title\n   * @param maxLength The maximum number of characters allowed in the value of the field.\n   * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n   */\n  @tag(\"fs.addText\")\n  public addText(title: string, maxLength = 255, properties?: IFieldCreationProperties): Promise<IFieldAddResult> {\n\n    const props: { FieldTypeKind: number, MaxLength: number } = {\n      FieldTypeKind: 2,\n      MaxLength: maxLength,\n    };\n\n    return this.add(title, \"SP.FieldText\", assign(props, properties));\n  }\n\n  /**\n   * Adds a new SP.FieldCalculated to the collection\n   *\n   * @param title The field title.\n   * @param formula The formula for the field.\n   * @param dateFormat The date and time format that is displayed in the field.\n   * @param outputType Specifies the output format for the field. Represents a FieldType value.\n   * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n   */\n  @tag(\"fs.addCalculated\")\n  public addCalculated(\n    title: string,\n    formula: string,\n    dateFormat: DateTimeFieldFormatType,\n    outputType: FieldTypes = FieldTypes.Text,\n    properties?: IFieldCreationProperties): Promise<IFieldAddResult> {\n\n    const props: {\n      DateFormat: DateTimeFieldFormatType;\n      FieldTypeKind: number;\n      Formula: string;\n      OutputType: FieldTypes;\n    } = {\n      DateFormat: dateFormat,\n      FieldTypeKind: 17,\n      Formula: formula,\n      OutputType: outputType,\n    };\n\n    return this.add(title, \"SP.FieldCalculated\", assign(props, properties));\n  }\n\n  /**\n   * Adds a new SP.FieldDateTime to the collection\n   *\n   * @param title The field title\n   * @param displayFormat The format of the date and time that is displayed in the field.\n   * @param calendarType Specifies the calendar type of the field.\n   * @param friendlyDisplayFormat The type of friendly display format that is used in the field.\n   * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n   */\n  @tag(\"fs.addDateTime\")\n  public addDateTime(\n    title: string,\n    displayFormat: DateTimeFieldFormatType = DateTimeFieldFormatType.DateOnly,\n    calendarType: CalendarType = CalendarType.Gregorian,\n    friendlyDisplayFormat: DateTimeFieldFriendlyFormatType = DateTimeFieldFriendlyFormatType.Unspecified,\n    properties?: IFieldCreationProperties): Promise<IFieldAddResult> {\n\n    const props = {\n      DateTimeCalendarType: calendarType,\n      DisplayFormat: displayFormat,\n      FieldTypeKind: 4,\n      FriendlyDisplayFormat: friendlyDisplayFormat,\n    };\n\n    return this.add(title, \"SP.FieldDateTime\", assign(props, properties));\n  }\n\n  /**\n   * Adds a new SP.FieldNumber to the collection\n   *\n   * @param title The field title\n   * @param minValue The field's minimum value\n   * @param maxValue The field's maximum value\n   * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n   */\n  @tag(\"fs.addNumber\")\n  public addNumber(\n    title: string,\n    minValue?: number,\n    maxValue?: number,\n    properties?: IFieldCreationProperties): Promise<IFieldAddResult> {\n\n    let props: { FieldTypeKind: number } = { FieldTypeKind: 9 };\n\n    if (minValue !== undefined) {\n      props = assign({ MinimumValue: minValue }, props);\n    }\n\n    if (maxValue !== undefined) {\n      props = assign({ MaximumValue: maxValue }, props);\n    }\n\n    return this.add(title, \"SP.FieldNumber\", assign(props, properties));\n  }\n\n  /**\n   * Adds a new SP.FieldCurrency to the collection\n   *\n   * @param title The field title\n   * @param minValue The field's minimum value\n   * @param maxValue The field's maximum value\n   * @param currencyLocalId Specifies the language code identifier (LCID) used to format the value of the field\n   * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n   */\n  @tag(\"fs.addCurrency\")\n  public addCurrency(\n    title: string,\n    minValue?: number,\n    maxValue?: number,\n    currencyLocalId = 1033,\n    properties?: IFieldCreationProperties): Promise<IFieldAddResult> {\n\n    let props: { CurrencyLocaleId: number; FieldTypeKind: number; } = {\n      CurrencyLocaleId: currencyLocalId,\n      FieldTypeKind: 10,\n    };\n\n    if (minValue !== undefined) {\n      props = assign({ MinimumValue: minValue }, props);\n    }\n\n    if (maxValue !== undefined) {\n      props = assign({ MaximumValue: maxValue }, props);\n    }\n\n    return this.add(title, \"SP.FieldCurrency\", assign(props, properties));\n  }\n\n  /**\n   * Adds a new SP.FieldMultiLineText to the collection\n   *\n   * @param title The field title\n   * @param numberOfLines Specifies the number of lines of text to display for the field.\n   * @param richText Specifies whether the field supports rich formatting.\n   * @param restrictedMode Specifies whether the field supports a subset of rich formatting.\n   * @param appendOnly Specifies whether all changes to the value of the field are displayed in list forms.\n   * @param allowHyperlink Specifies whether a hyperlink is allowed as a value of the field.\n   * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n   *\n   */\n  @tag(\"fs.addMultilineText\")\n  public addMultilineText(\n    title: string,\n    numberOfLines = 6,\n    richText = true,\n    restrictedMode = false,\n    appendOnly = false,\n    allowHyperlink = true,\n    properties?: IFieldCreationProperties): Promise<IFieldAddResult> {\n\n    const props = {\n      AllowHyperlink: allowHyperlink,\n      AppendOnly: appendOnly,\n      FieldTypeKind: 3,\n      NumberOfLines: numberOfLines,\n      RestrictedMode: restrictedMode,\n      RichText: richText,\n    };\n\n    return this.add(title, \"SP.FieldMultiLineText\", assign(props, properties));\n  }\n\n  /**\n   * Adds a new SP.FieldUrl to the collection\n   *\n   * @param title The field title\n   */\n  @tag(\"fs.addUrl\")\n  public addUrl(title: string, displayFormat: UrlFieldFormatType = UrlFieldFormatType.Hyperlink, properties?: IFieldCreationProperties): Promise<IFieldAddResult> {\n\n    const props = {\n      DisplayFormat: displayFormat,\n      FieldTypeKind: 11,\n    };\n\n    return this.add(title, \"SP.FieldUrl\", assign(props, properties));\n  }\n\n  /** Adds a user field to the colleciton\n  * \n  * @param title The new field's title\n  * @param selectionMode The selection mode of the field\n  * @param selectionGroup Value that specifies the identifier of the SharePoint group whose members can be selected as values of the field\n  * @param properties\n  */\n  @tag(\"fs.addUser\")\n  public addUser(title: string, selectionMode: FieldUserSelectionMode, properties?: IFieldCreationProperties): Promise<IFieldAddResult> {\n\n    const props = {\n      FieldTypeKind: 20,\n      SelectionMode: selectionMode,\n    };\n\n    return this.add(title, \"SP.FieldUser\", assign(props, properties));\n  }\n\n  /**\n   * Adds a SP.FieldLookup to the collection\n   *\n   * @param title The new field's title\n   * @param lookupListId The guid id of the list where the source of the lookup is found\n   * @param lookupFieldName The internal name of the field in the source list\n   * @param properties Set of additional properties to set on the new field\n   */\n  @tag(\"fs.addLookup\")\n  public async addLookup(\n    title: string,\n    lookupListId: string,\n    lookupFieldName: string,\n    properties?: IFieldCreationProperties): Promise<IFieldAddResult> {\n\n    const props = assign({\n      FieldTypeKind: 7,\n      LookupFieldName: lookupFieldName,\n      LookupListId: lookupListId,\n      Title: title,\n    }, properties);\n\n    const postBody = body({\n      \"parameters\":\n        assign(metadata(\"SP.FieldCreationInformation\"), props),\n    });\n\n    const data = await spPost<{ Id: string; }>(this.clone(Fields, \"addfield\"), postBody);\n\n    return {\n      data,\n      field: this.getById(data.Id),\n    };\n  }\n\n  /**\n   * Adds a new SP.FieldChoice to the collection\n   *\n   * @param title The field title.\n   * @param choices The choices for the field.\n   * @param format The display format of the available options for the field.\n   * @param fillIn Specifies whether the field allows fill-in values.\n   * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n   */\n  @tag(\"fs.addChoice\")\n  public addChoice(\n    title: string,\n    choices: string[],\n    format: ChoiceFieldFormatType = ChoiceFieldFormatType.Dropdown,\n    fillIn?: boolean,\n    properties?: IFieldCreationProperties): Promise<IFieldAddResult> {\n\n    const props = {\n      Choices: {\n        results: choices,\n      },\n      EditFormat: format,\n      FieldTypeKind: 6,\n      FillInChoice: fillIn,\n    };\n\n    return this.add(title, \"SP.FieldChoice\", assign(props, properties));\n  }\n\n  /**\n   * Adds a new SP.FieldMultiChoice to the collection\n   *\n   * @param title The field title.\n   * @param choices The choices for the field.\n   * @param fillIn Specifies whether the field allows fill-in values.\n   * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n   */\n  @tag(\"fs.addMultiChoice\")\n  public addMultiChoice(title: string, choices: string[], fillIn?: boolean, properties?: IFieldCreationProperties): Promise<IFieldAddResult> {\n\n    const props = {\n      Choices: {\n        results: choices,\n      },\n      FieldTypeKind: 15,\n      FillInChoice: fillIn,\n    };\n\n    return this.add(title, \"SP.FieldMultiChoice\", assign(props, properties));\n  }\n\n  /**\n   * Adds a new SP.FieldBoolean to the collection\n   *\n   * @param title The field title.\n   * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n   */\n  @tag(\"fs.addBoolean\")\n  public addBoolean(title: string, properties?: IFieldCreationProperties): Promise<IFieldAddResult> {\n\n    const props = {\n      FieldTypeKind: 8,\n    };\n\n    return this.add(title, \"SP.Field\", assign(props, properties));\n  }\n\n  /**\n  * Creates a secondary (dependent) lookup field, based on the Id of the primary lookup field.\n  * \n  * @param displayName The display name of the new field.\n  * @param primaryLookupFieldId The guid of the primary Lookup Field.\n  * @param showField Which field to show from the lookup list.\n  */\n  @tag(\"fs.addDependentLookupField\")\n  public async addDependentLookupField(displayName: string, primaryLookupFieldId: string, showField: string): Promise<IFieldAddResult> {\n\n    const path = `adddependentlookupfield(displayName='${displayName}', primarylookupfieldid='${primaryLookupFieldId}', showfield='${showField}')`;\n\n    const data = await spPost(this.clone(Fields, path));\n\n    return {\n      data,\n      field: this.getById(data.Id),\n    };\n  }\n\n  /**\n   * Adds a new SP.FieldLocation to the collection\n   *\n   * @param title The field title.\n   * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n   */\n  @tag(\"fs.addLocation\")\n  public addLocation(title: string, properties?: IFieldCreationProperties): Promise<IFieldAddResult> {\n\n    const props = { FieldTypeKind: 33 };\n\n    return this.add(title, \"SP.FieldLocation\", assign(props, properties));\n  }\n}\nexport interface IFields extends _Fields { }\nexport const Fields = spInvokableFactory<IFields>(_Fields);\n\nexport class _Field extends _SharePointQueryableInstance<IFieldInfo> {\n\n  /**\n   * Updates this field instance with the supplied properties\n   *\n   * @param properties A plain object hash of values to update for the list\n   * @param fieldType The type value, required to update child field type properties\n   */\n  @tag(\"f.update\")\n  public async update(properties: Partial<IFieldInfo>, fieldType = \"SP.Field\"): Promise<IFieldUpdateResult> {\n\n    const req = body(assign(metadata(fieldType), properties), headers({ \"X-HTTP-Method\": \"MERGE\" }));\n\n    const data = await spPost(this, req);\n\n    return {\n      data,\n      field: <any>this,\n    };\n  }\n\n  /**\n   * Sets the value of the ShowInDisplayForm property for this field.\n   */\n  @tag(\"f.setShowInDisplayForm\")\n  public setShowInDisplayForm(show: boolean): Promise<void> {\n    return spPost(this.clone(Field, `setshowindisplayform(${show})`));\n  }\n\n  /**\n   * Sets the value of the ShowInEditForm property for this field.\n   */\n  @tag(\"f.setShowInEditForm\")\n  public setShowInEditForm(show: boolean): Promise<void> {\n    return spPost(this.clone(Field, `setshowineditform(${show})`));\n  }\n\n  /**\n   * Sets the value of the ShowInNewForm property for this field.\n   */\n  @tag(\"f.setShowInNewForm\")\n  public setShowInNewForm(show: boolean): Promise<void> {\n    return spPost(this.clone(Field, `setshowinnewform(${show})`));\n  }\n}\nexport interface IField extends _Field { }\nexport const Field = spInvokableFactory<IField>(_Field);\n\n/**\n * This interface defines the result of adding a field\n */\nexport interface IFieldAddResult {\n  data: Partial<IFieldInfo>;\n  field: IField;\n}\n\n/**\n * This interface defines the result of updating a field\n */\nexport interface IFieldUpdateResult {\n  data: Partial<IFieldInfo>;\n  field: IField;\n}\n\n/**\n * Specifies the type of the field.\n */\nexport enum FieldTypes {\n  Invalid = 0,\n  Integer = 1,\n  Text = 2,\n  Note = 3,\n  DateTime = 4,\n  Counter = 5,\n  Choice = 6,\n  Lookup = 7,\n  Boolean = 8,\n  Number = 9,\n  Currency = 10,\n  URL = 11,\n  Computed = 12,\n  Threading = 13,\n  Guid = 14,\n  MultiChoice = 15,\n  GridChoice = 16,\n  Calculated = 17,\n  File = 18,\n  Attachments = 19,\n  User = 20,\n  Recurrence = 21,\n  CrossProjectLink = 22,\n  ModStat = 23,\n  Error = 24,\n  ContentTypeId = 25,\n  PageSeparator = 26,\n  ThreadIndex = 27,\n  WorkflowStatus = 28,\n  AllDayEvent = 29,\n  WorkflowEventType = 30,\n}\n\nexport enum DateTimeFieldFormatType {\n  DateOnly = 0,\n  DateTime = 1,\n}\n\nexport enum DateTimeFieldFriendlyFormatType {\n  Unspecified = 0,\n  Disabled = 1,\n  Relative = 2,\n}\n\n/**\n * Specifies the control settings while adding a field.\n */\nexport enum AddFieldOptions {\n  /**\n   *  Specify that a new field added to the list must also be added to the default content type in the site collection\n   */\n  DefaultValue = 0,\n  /**\n   * Specify that a new field added to the list must also be added to the default content type in the site collection.\n   */\n  AddToDefaultContentType = 1,\n  /**\n   * Specify that a new field must not be added to any other content type\n   */\n  AddToNoContentType = 2,\n  /**\n   *  Specify that a new field that is added to the specified list must also be added to all content types in the site collection\n   */\n  AddToAllContentTypes = 4,\n  /**\n   * Specify adding an internal field name hint for the purpose of avoiding possible database locking or field renaming operations\n   */\n  AddFieldInternalNameHint = 8,\n  /**\n   * Specify that a new field that is added to the specified list must also be added to the default list view\n   */\n  AddFieldToDefaultView = 16,\n  /**\n   * Specify to confirm that no other field has the same display name\n   */\n  AddFieldCheckDisplayName = 32,\n}\n\nexport interface IXmlSchemaFieldCreationInformation {\n  Options?: AddFieldOptions;\n  SchemaXml: string;\n}\n\nexport enum CalendarType {\n  Gregorian = 1,\n  Japan = 3,\n  Taiwan = 4,\n  Korea = 5,\n  Hijri = 6,\n  Thai = 7,\n  Hebrew = 8,\n  GregorianMEFrench = 9,\n  GregorianArabic = 10,\n  GregorianXLITEnglish = 11,\n  GregorianXLITFrench = 12,\n  KoreaJapanLunar = 14,\n  ChineseLunar = 15,\n  SakaEra = 16,\n  UmAlQura = 23,\n}\n\nexport enum UrlFieldFormatType {\n  Hyperlink = 0,\n  Image = 1,\n}\n\nexport enum FieldUserSelectionMode {\n  PeopleAndGroups = 1,\n  PeopleOnly = 0,\n}\n\nexport interface IFieldCreationProperties extends ITypedHash<string | number | boolean> {\n  DefaultFormula?: string;\n  Description?: string;\n  EnforceUniqueValues?: boolean;\n  FieldTypeKind?: number;\n  Group?: string;\n  Hidden?: boolean;\n  Indexed?: boolean;\n  Required?: boolean;\n  Title?: string;\n  ValidationFormula?: string;\n  ValidationMessage?: string;\n}\n\nexport enum ChoiceFieldFormatType {\n  Dropdown,\n  RadioButtons,\n}\n\nexport interface IFieldInfo {\n  DefaultFormula: string | null;\n  DefaultValue: string | null;\n  Description: string;\n  Direction: string;\n  EnforceUniqueValues: boolean;\n  EntityPropertyName: string;\n  FieldTypeKind: FieldTypes;\n  Filterable: boolean;\n  FromBaseType: boolean;\n  Group: string;\n  Hidden: boolean;\n  Id: string;\n  Indexed: boolean;\n  IndexStatus: number;\n  InternalName: string;\n  JSLink: string;\n  PinnedToFiltersPane: boolean;\n  ReadOnlyField: boolean;\n  Required: boolean;\n  SchemaXml: string;\n  Scope: string;\n  Sealed: boolean;\n  ShowInFiltersPane: number;\n  Sortable: boolean;\n  StaticName: string;\n  Title: string;\n  TypeAsString: string;\n  TypeDisplayName: string;\n  TypeShortDescription: string;\n  ValidationFormula: string | null;\n  ValidationMessage: string | null;\n}\n","import { addProp } from \"@pnp/odata\";\nimport { _Web } from \"../webs/types\";\nimport { Fields, IFields } from \"./types\";\n\ndeclare module \"../webs/types\" {\n  interface _Web {\n    readonly fields: IFields;\n    readonly availablefields: IFields;\n  }\n  interface IWeb {\n    /**\n     * This web's collection of fields\n     */\n    readonly fields: IFields;\n    /**\n     * This web's collection of available fields\n     */\n    readonly availablefields: IFields;\n  }\n}\n\naddProp(_Web, \"fields\", Fields);\naddProp(_Web, \"availablefields\", Fields, \"availablefields\");\n","import { addProp } from \"@pnp/odata\";\nimport { _List } from \"../lists/types\";\nimport { Fields, IFields } from \"./types\";\n\ndeclare module \"../lists/types\" {\n  interface _List {\n    readonly fields: IFields;\n  }\n  interface IList {\n    /**\n     * This list's collection of fields\n     */\n    readonly fields: IFields;\n  }\n}\n\naddProp(_List, \"fields\", Fields);\n","import { assign, ITypedHash, isUrlAbsolute } from \"@pnp/common\";\nimport {\n    SharePointQueryable,\n    SharePointQueryableCollection,\n    SharePointQueryableInstance,\n    _SharePointQueryableInstance,\n    ISharePointQueryableCollection,\n    _SharePointQueryableCollection,\n    ISharePointQueryableInstance,\n    ISharePointQueryable,\n    spInvokableFactory,\n    deleteableWithETag,\n    IDeleteableWithETag,\n} from \"../sharepointqueryable\";\nimport { odataUrlFrom } from \"../odata\";\nimport { IItem, Item } from \"../items/types\";\nimport { body } from \"@pnp/odata\";\nimport { defaultPath } from \"../decorators\";\nimport { spPost } from \"../operations\";\nimport { escapeQueryStrValue } from \"../utils/escapeQueryStrValue\";\nimport { extractWebUrl } from \"../utils/extractweburl\";\nimport { tag } from \"../telemetry\";\nimport { toResourcePath } from \"../utils/toResourcePath\";\n\n@defaultPath(\"folders\")\nexport class _Folders extends _SharePointQueryableCollection<IFolderInfo[]> {\n\n    /**\n     * Gets a folder by it's name\n     * \n     * @param name Folder's name\n     */\n    public getByName(name: string): IFolder {\n        return tag.configure(Folder(this).concat(`('${escapeQueryStrValue(name)}')`), \"fs.getByName\");\n    }\n\n    /**\n     * Adds a new folder at the specified URL\n     * \n     * @param url \n     */\n    @tag(\"fs.add\")\n    public async add(url: string): Promise<IFolderAddResult> {\n\n        const data = await spPost(this.clone(Folders, `add('${escapeQueryStrValue(url)}')`));\n\n        return {\n            data,\n            folder: this.getByName(url),\n        };\n    }\n\n    /**\n     * Adds a new folder by path and should be prefered over add\n     * \n     * @param serverRelativeUrl The server relative url of the new folder to create\n     * @param overwrite True to overwrite an existing folder, default false\n     */\n    @tag(\"fs.addUsingPath\")\n    public async addUsingPath(serverRelativeUrl: string, overwrite = false): Promise<IFolderAddResult> {\n\n        const data = await spPost(this.clone(Folders, `addUsingPath(DecodedUrl='${escapeQueryStrValue(serverRelativeUrl)}',overwrite=${overwrite})`));\n\n        return {\n            data,\n            folder: Folder(extractWebUrl(this.toUrl()), `_api/web/getFolderByServerRelativePath(decodedUrl='${escapeQueryStrValue(serverRelativeUrl)}')`),\n        };\n    }\n}\nexport interface IFolders extends _Folders { }\nexport const Folders = spInvokableFactory<IFolders>(_Folders);\n\n\nexport class _Folder extends _SharePointQueryableInstance<IFolderInfo> {\n\n    public delete = deleteableWithETag(\"f\");\n\n    /**\n     * Specifies the sequence in which content types are displayed.\n     *\n     */\n    public get contentTypeOrder(): ISharePointQueryableCollection {\n        return tag.configure(SharePointQueryableCollection(this, \"contentTypeOrder\"), \"f.contentTypeOrder\");\n    }\n\n    /**\n     * Gets this folder's sub folders\n     *\n     */\n    public get folders(): IFolders {\n        return Folders(this);\n    }\n\n    /**\n     * Gets this folder's list item field values\n     *\n     */\n    public get listItemAllFields(): ISharePointQueryableInstance {\n        return tag.configure(SharePointQueryableInstance(this, \"listItemAllFields\"), \"f.listItemAllFields\");\n    }\n\n    /**\n     * Gets the parent folder, if available\n     *\n     */\n    public get parentFolder(): IFolder {\n        return tag.configure(Folder(this, \"parentFolder\"), \"f.parentFolder\");\n    }\n\n    /**\n     * Gets this folder's properties\n     *\n     */\n    public get properties(): ISharePointQueryableInstance {\n        return tag.configure(SharePointQueryableInstance(this, \"properties\"), \"f.properties\");\n    }\n\n    /**\n     * Gets this folder's server relative url\n     *\n     */\n    public get serverRelativeUrl(): ISharePointQueryable {\n        return tag.configure(SharePointQueryable(this, \"serverRelativeUrl\"), \"f.serverRelativeUrl\");\n    }\n\n    /**\n     * Gets a value that specifies the content type order.\n     *\n     */\n    public get uniqueContentTypeOrder(): ISharePointQueryableCollection {\n        return tag.configure(SharePointQueryableCollection(this, \"uniqueContentTypeOrder\"), \"f.uniqueContentTypeOrder\");\n    }\n\n    /**\n     * Updates folder's properties\n     * @param props Folder's properties to update\n     */\n    public update = this._update<IFolderUpdateResult, ITypedHash<any>>(\"SP.Folder\", data => ({ data, folder: <any>this }));\n\n    /**\n     * Moves the folder to the Recycle Bin and returns the identifier of the new Recycle Bin item.\n     */\n    @tag(\"f.recycle\")\n    public recycle(): Promise<string> {\n        return spPost(this.clone(Folder, \"recycle\"));\n    }\n\n    /**\n     * Gets the associated list item for this folder, loading the default properties\n     */\n    @tag(\"f.getItem\")\n    public async getItem<T>(...selects: string[]): Promise<IItem & T> {\n\n        const q = this.listItemAllFields;\n        const d = await q.select.apply(q, selects)();\n\n        return assign(Item(odataUrlFrom(d)), d);\n    }\n\n    /**\n     * Moves a folder to destination path\n     *\n     * @param destUrl Absolute or relative URL of the destination path\n     */\n    @tag(\"f.moveTo\")\n    public async moveTo(destUrl: string): Promise<void> {\n\n        const { ServerRelativeUrl: srcUrl, [\"odata.id\"]: absoluteUrl } = await this.select(\"ServerRelativeUrl\")();\n        const webBaseUrl = extractWebUrl(absoluteUrl);\n        const hostUrl = webBaseUrl.replace(\"://\", \"___\").split(\"/\")[0].replace(\"___\", \"://\");\n        await spPost(Folder(webBaseUrl, \"/_api/SP.MoveCopyUtil.MoveFolder()\"),\n            body({\n                destUrl: isUrlAbsolute(destUrl) ? destUrl : `${hostUrl}${destUrl}`,\n                srcUrl: `${hostUrl}${srcUrl}`,\n            }));\n    }\n\n    /**\n     * Moves a folder by path to destination path\n     * Also works with different site collections.\n     *\n     * @param destUrl Absolute or relative URL of the destination path\n     * @param keepBoth Keep both if folder with the same name in the same location already exists?\n     */\n    @tag(\"f.moveByPath\")\n    public async moveByPath(destUrl: string, KeepBoth = false): Promise<void> {\n\n        const { ServerRelativeUrl: srcUrl, [\"odata.id\"]: absoluteUrl } = await this.select(\"ServerRelativeUrl\")();\n        const webBaseUrl = extractWebUrl(absoluteUrl);\n        const hostUrl = webBaseUrl.replace(\"://\", \"___\").split(\"/\")[0].replace(\"___\", \"://\");\n        await spPost(Folder(webBaseUrl, `/_api/SP.MoveCopyUtil.MoveFolderByPath()`),\n            body({\n                destPath: toResourcePath(isUrlAbsolute(destUrl) ? destUrl : `${hostUrl}${destUrl}`),\n                options: {\n                    KeepBoth: KeepBoth,\n                    ResetAuthorAndCreatedOnCopy: true,\n                    ShouldBypassSharedLocks: true,\n                    __metadata: {\n                        type: \"SP.MoveCopyOptions\",\n                    },\n                },\n                srcPath: toResourcePath(`${hostUrl}${srcUrl}`),\n            }));\n    }\n\n    /**\n     * Copies a folder to destination path\n     *\n     * @param destUrl Absolute or relative URL of the destination path\n     */\n    @tag(\"f.copyTo\")\n    public async copyTo(destUrl: string): Promise<void> {\n\n        const { ServerRelativeUrl: srcUrl, [\"odata.id\"]: absoluteUrl } = await this.select(\"ServerRelativeUrl\")();\n        const webBaseUrl = extractWebUrl(absoluteUrl);\n        const hostUrl = webBaseUrl.replace(\"://\", \"___\").split(\"/\")[0].replace(\"___\", \"://\");\n        await spPost(Folder(webBaseUrl, \"/_api/SP.MoveCopyUtil.CopyFolder()\"),\n            body({\n                destUrl: isUrlAbsolute(destUrl) ? destUrl : `${hostUrl}${destUrl}`,\n                srcUrl: `${hostUrl}${srcUrl}`,\n            }));\n    }\n\n    /**\n     * Copies a folder by path to destination path\n     * Also works with different site collections.\n     *\n     * @param destUrl Absolute or relative URL of the destination path\n     * @param keepBoth Keep both if folder with the same name in the same location already exists?\n     */\n    @tag(\"f.copyByPath\")\n    public async copyByPath(destUrl: string, KeepBoth = false): Promise<void> {\n\n        const { ServerRelativeUrl: srcUrl, [\"odata.id\"]: absoluteUrl } = await this.select(\"ServerRelativeUrl\")();\n        const webBaseUrl = extractWebUrl(absoluteUrl);\n        const hostUrl = webBaseUrl.replace(\"://\", \"___\").split(\"/\")[0].replace(\"___\", \"://\");\n        await spPost(Folder(webBaseUrl, `/_api/SP.MoveCopyUtil.CopyFolderByPath()`),\n            body({\n                destPath: toResourcePath(isUrlAbsolute(destUrl) ? destUrl : `${hostUrl}${destUrl}`),\n                options: {\n                    KeepBoth: KeepBoth,\n                    ResetAuthorAndCreatedOnCopy: true,\n                    ShouldBypassSharedLocks: true,\n                    __metadata: {\n                        type: \"SP.MoveCopyOptions\",\n                    },\n                },\n                srcPath: toResourcePath(`${hostUrl}${srcUrl}`),\n            }));\n    }\n\n    @tag(\"f.getShareable\")\n    protected async getShareable(): Promise<IItem> {\n        // sharing only works on the item end point, not the file one - so we create a folder instance with the item url internally\n        const d = await this.clone(SharePointQueryableInstance, \"listItemAllFields\", false).select(\"odata.id\")();\n\n        let shareable = Item(odataUrlFrom(d));\n\n        // we need to handle batching\n        if (this.hasBatch) {\n            shareable = shareable.inBatch(this.batch);\n        }\n\n        return shareable;\n    }\n}\nexport interface IFolder extends _Folder, IDeleteableWithETag { }\nexport const Folder = spInvokableFactory<IFolder>(_Folder);\n\n/**\n * Describes result of adding a folder\n */\nexport interface IFolderAddResult {\n\n    /**\n     * A folder's instance\n     */\n    folder: IFolder;\n\n    /**\n     * Additional data from the server \n     */\n    data: any;\n}\n\n/**\n * Describes result of updating a folder\n */\nexport interface IFolderUpdateResult {\n\n    /**\n     * A folder's instance\n     */\n    folder: IFolder;\n\n    /**\n     * Additional data from the server \n     */\n    data: any;\n}\n\nexport interface IFolderInfo {\n    readonly \"odata.id\": string;\n    Exists: boolean;\n    IsWOPIEnabled: boolean;\n    ItemCount: number;\n    Name: string;\n    ProgID: string | null;\n    ServerRelativeUrl: string;\n    TimeCreated: string;\n    TimeLastModified: string;\n    UniqueId: string;\n    WelcomePage: string;\n}\n","import { addProp } from \"@pnp/odata\";\nimport { _Folder } from \"../folders/types\";\nimport { IFiles, Files } from \"./types\";\n\ndeclare module \"../folders/types\" {\n    interface _Folder {\n        readonly files: IFiles;\n    }\n    interface IFolder {\n        /**\n         * Folder containing files\n         */\n        readonly files: IFiles;\n    }\n}\n\naddProp(_Folder, \"files\", Files);\n","import { addProp } from \"@pnp/odata\";\nimport { _Item } from \"../items/types\";\nimport { File, IFile } from \"./types\";\n\ndeclare module \"../items/types\" {\n    interface _Item {\n        readonly file: IFile;\n    }\n    interface IItem {\n        /**\n         * File in sharepoint site\n         */\n        readonly file: IFile;\n    }\n}\n\naddProp(_Item, \"file\", File, \"file\");\n","import { addProp } from \"@pnp/odata\";\nimport { _Item } from \"../items/types\";\nimport { Folder, IFolder } from \"./types\";\n\ndeclare module \"../items/types\" {\n    interface _Item {\n        readonly folder: IFolder;\n\n    }\n    interface IItem {\n        readonly folder: IFolder;\n\n    }\n}\n\naddProp(_Item, \"folder\", Folder, \"folder\");\n","import { addProp } from \"@pnp/odata\";\nimport { _List } from \"../lists/types\";\nimport { Folder, IFolder } from \"./types\";\n\ndeclare module \"../lists/types\" {\n    interface _List {\n        readonly rootFolder: IFolder;\n    }\n    interface IList {\n        readonly rootFolder: IFolder;\n    }\n}\n\naddProp(_List, \"rootFolder\", Folder, \"rootFolder\");\n","import { addProp } from \"@pnp/odata\";\nimport { _Web } from \"../webs/types\";\nimport { Folders, IFolders, Folder, IFolder } from \"./types\";\nimport { escapeQueryStrValue } from \"../utils/escapeQueryStrValue\";\n\ndeclare module \"../webs/types\" {\n    interface _Web {\n        readonly folders: IFolders;\n        readonly rootFolder: IFolder;\n        getFolderByServerRelativeUrl(folderRelativeUrl: string): IFolder;\n        getFolderByServerRelativePath(folderRelativeUrl: string): IFolder;\n        getFolderById(uniqueId: string): IFolder;\n    }\n    interface IWeb {\n\n        /**\n         * Gets the collection of folders in this web\n         */\n        readonly folders: IFolders;\n\n        /**\n         * Gets the root folder of the web\n         */\n        readonly rootFolder: IFolder;\n\n        /**\n         * Gets a folder by server relative url\n         *\n         * @param folderRelativeUrl The server relative path to the folder (including /sites/ if applicable)\n         */\n        getFolderByServerRelativeUrl(folderRelativeUrl: string): IFolder;\n\n        /**\n         * Gets a folder by server relative path if your folder name contains # and % characters\n         * This works only in SharePoint online.\n         *\n         * @param folderRelativeUrl The server relative path to the folder (including /sites/ if applicable)\n         */\n        getFolderByServerRelativePath(folderRelativeUrl: string): IFolder;\n\n        /**\n         * Gets a folder by id\n         *\n         * @param uniqueId The UniqueId of the folder\n         */\n        getFolderById(uniqueId: string): IFolder;\n    }\n}\n\naddProp(_Web, \"folders\", Folders);\naddProp(_Web, \"rootFolder\", Folder, \"rootFolder\");\n\n_Web.prototype.getFolderByServerRelativeUrl = function (this: _Web, folderRelativeUrl: string): IFolder {\n    return Folder(this, `getFolderByServerRelativeUrl('${escapeQueryStrValue(folderRelativeUrl)}')`);\n};\n\n_Web.prototype.getFolderByServerRelativePath = function (this: _Web, folderRelativeUrl: string): IFolder {\n    return Folder(this, `getFolderByServerRelativePath(decodedUrl='${escapeQueryStrValue(folderRelativeUrl)}')`);\n};\n\n_Web.prototype.getFolderById = function (this: _Web, uniqueId: string): IFolder {\n    return Folder(this, `getFolderById('${uniqueId}')`);\n};\n","import {\n    _SharePointQueryableInstance,\n    _SharePointQueryableCollection,\n    spInvokableFactory,\n} from \"../sharepointqueryable\";\nimport { defaultPath } from \"../decorators\";\nimport { PageType } from \"../types\";\nimport { tag } from \"../telemetry\";\n\n/**\n * Describes a collection of Form objects\n *\n */\n@defaultPath(\"forms\")\nexport class _Forms extends _SharePointQueryableCollection<IFormInfo[]> {\n    /**\t\n     * Gets a form by id\t\n     *\t\n     * @param id The guid id of the item to retrieve\t\n     */\n    public getById(id: string): IForm {\n        return tag.configure(Form(this).concat(`('${id}')`), \"fos.getById\");\n    }\n}\nexport interface IForms extends _Forms { }\nexport const Forms = spInvokableFactory<IForms>(_Forms);\n\n/**\n * Describes a single of Form instance\n *\n */\nexport class _Form extends _SharePointQueryableInstance<IFormInfo> { }\nexport interface IForm extends _Form { }\nexport const Form = spInvokableFactory<IForm>(_Form);\n\nexport interface IFormInfo {\n    FormType: PageType;\n    Id: string;\n    ResourcePath: { DecodedUrl: string; };\n    DecodedUrl: string;\n    ServerRelativeUrl: string;\n}\n","import { addProp } from \"@pnp/odata\";\nimport { _List } from \"../lists/types\";\nimport { Forms, IForms } from \"./types\";\n\ndeclare module \"../lists/types\" {\n    interface _List {\n        readonly forms: IForms;\n    }\n    interface IList {\n        readonly forms: IForms;\n    }\n}\n\naddProp(_List, \"forms\", Forms, \"forms\");\n","import {\n    _SharePointQueryableInstance,\n    _SharePointQueryableCollection,\n    spInvokableFactory,\n} from \"../sharepointqueryable\";\nimport { ISerializableNavigationNode } from \"../navigation/types\";\nimport { defaultPath } from \"../decorators\";\nimport { Site, ISite } from \"../sites/types\";\nimport { tag } from \"../telemetry\";\n\n@defaultPath(\"_api/hubsites\")\nexport class _HubSites extends _SharePointQueryableCollection<IHubSiteInfo[]> {\n\n    /**\t    \n     * Gets a Hub Site from the collection by id\t     \n     *\t    \n     * @param id The Id of the Hub Site\t    \n     */\n    public getById(id: string): IHubSite {\n        return tag.configure(HubSite(this, `GetById?hubSiteId='${id}'`), \"hss.getById\");\n\n    }\n}\nexport interface IHubSites extends _HubSites { }\nexport const HubSites = spInvokableFactory<IHubSites>(_HubSites);\n\nexport class _HubSite extends _SharePointQueryableInstance<IHubSiteInfo> {\n\n    /**\n     * Gets the ISite instance associated with this hubsite\n     */\n    @tag(\"hs.getSite\")\n    public async getSite(): Promise<ISite> {\n        const d = await this.select(\"SiteUrl\")();\n        return Site(d.SiteUrl);\n    }\n}\nexport interface IHubSite extends _HubSite { }\nexport const HubSite = spInvokableFactory<IHubSite>(_HubSite);\n\nexport interface IHubSiteInfo {\n    ID: string;\n    Title: string;\n    SiteId: string;\n    TenantInstanceId: string;\n    SiteUrl: string;\n    LogoUrl: string;\n    Description: string;\n    Targets: string;\n    SiteDesignId: string;\n    RequiresJoinApproval: boolean;\n    RelatedHubSiteIds: string[];\n    ParentHubSiteId: string;\n    HideNameInNavigation: boolean;\n    EnablePermissionsSync: boolean;\n}\n\nexport interface IHubSiteWebData {\n    headerEmphasis: string | null;\n    themeKey: string | null;\n    name: string | null;\n    url: string;\n    logoUrl: string | null;\n    usesMetadataNavigation: boolean;\n    megaMenuEnabled: boolean;\n    navigation: ISerializableNavigationNode[];\n    isNavAudienceTargeted: boolean;\n    siteDesignId: string;\n    requiresJoinApproval: boolean;\n    hideNameInNavigation: boolean;\n    parentHubSiteId: string;\n    relatedHubSiteIds: string | null;\n}\n","import { _Site, Site } from \"../sites/types\";\nimport { spPost } from \"../operations\";\n\ndeclare module \"../sites/types\" {\n    interface _Site {\n        joinHubSite(siteId: string): Promise<void>;\n        registerHubSite(): Promise<void>;\n        unRegisterHubSite(): Promise<void>;\n    }\n    interface ISite {\n\n        /**\n         * Associates a site collection to a hub site.\n         * \n         * @param siteId Id of the hub site collection you want to join.\n         * If you want to disassociate the site collection from hub site, then\n         * pass the siteId as 00000000-0000-0000-0000-000000000000\n         */\n        joinHubSite(siteId: string): Promise<void>;\n\n        /**\n         * Registers the current site collection as hub site collection\n         */\n        registerHubSite(): Promise<void>;\n\n        /**\n         * Unregisters the current site collection as hub site collection.\n         */\n        unRegisterHubSite(): Promise<void>;\n    }\n}\n\n_Site.prototype.joinHubSite = async function (this: _Site, siteId: string): Promise<void> {\n    await spPost(this.clone(Site, `joinHubSite('${siteId}')`));\n};\n\n_Site.prototype.registerHubSite = async function (this: _Site): Promise<void> {\n    await spPost(this.clone(Site, `registerHubSite`));\n};\n\n_Site.prototype.unRegisterHubSite = async function (this: _Site): Promise<void> {\n    await spPost(this.clone(Site, `unRegisterHubSite`));\n};\n","import { _Web, Web } from \"../webs/types\";\nimport { IHubSiteWebData } from \"./types\";\nimport { spPost } from \"../operations\";\n\ndeclare module \"../webs/types\" {\n    interface _Web {\n        hubSiteData(forceRefresh?: boolean): Promise<Partial<IHubSiteWebData>>;\n        syncHubSiteTheme(): Promise<void>;\n    }\n    interface IWeb {\n\n        /**\n         * Gets hub site data for the current web.\n         *\n         * @param forceRefresh Default value is false. When false, the data is returned from the server's cache.\n         * When true, the cache is refreshed with the latest updates and then returned.\n         * Use this if you just made changes and need to see those changes right away.\n         */\n        hubSiteData(forceRefresh?: boolean): Promise<Partial<IHubSiteWebData>>;\n\n        /**\n         * Applies theme updates from the parent hub site collection.\n         */\n        syncHubSiteTheme(): Promise<void>;\n    }\n}\n\n_Web.prototype.hubSiteData = async function (this: _Web, forceRefresh = false): Promise<IHubSiteWebData> {\n    const data = await this.clone(Web, `hubSiteData(${forceRefresh})`)<IHubSiteWebData>();\n    if (typeof data === \"string\") {\n        return JSON.parse(data);\n    }\n    return data;\n};\n\n_Web.prototype.syncHubSiteTheme = function (this: _Web): Promise<void> {\n    return spPost(this.clone(Web, `syncHubSiteTheme`));\n};\n","import { SPRest } from \"../rest\";\nimport { HubSites, IHubSites } from \"./types\";\n\nimport \"./site\";\nimport \"./web\";\n\nexport {\n    HubSite,\n    HubSites,\n    IHubSite,\n    IHubSiteInfo,\n    IHubSiteWebData,\n    IHubSites,\n} from \"./types\";\n\ndeclare module \"../rest\" {\n    interface SPRest {\n        /**\n         * Lists all of the subsites\n         */\n        readonly hubSites: IHubSites;\n    }\n}\n\nReflect.defineProperty(SPRest.prototype, \"hubSites\", {\n    configurable: true,\n    enumerable: true,\n    get: function (this: SPRest) {\n        return HubSites(this._baseUrl).configure(this._options);\n    },\n});\n","import {\n    _SharePointQueryableInstance,\n    _SharePointQueryableCollection,\n    _SharePointQueryable,\n    spInvokableFactory,\n    deleteable,\n    IDeleteable,\n} from \"../sharepointqueryable\";\nimport { assign } from \"@pnp/common\";\nimport { metadata } from \"../utils/metadata\";\nimport { body, headers } from \"@pnp/odata\";\nimport { defaultPath } from \"../decorators\";\nimport { spPost } from \"../operations\";\nimport { tag } from \"../telemetry\";\n\n/**\n * Represents a collection of navigation nodes\n *\n */\nexport class _NavigationNodes extends _SharePointQueryableCollection<INavNodeInfo[]> {\n\n    /**\t    \n     * Gets a navigation node by id\t\n     *\t\n     * @param id The id of the node\t\n     */\n    public getById(id: number): INavigationNode {\n        return tag.configure(NavigationNode(this).concat(`(${id})`), \"nns.getById\");\n    }\n\n    /**\n     * Adds a new node to the collection\n     *\n     * @param title Display name of the node\n     * @param url The url of the node\n     * @param visible If true the node is visible, otherwise it is hidden (default: true)\n     */\n    @tag(\"nns.add\")\n    public async add(title: string, url: string, visible = true): Promise<INavigationNodeAddResult> {\n\n        const postBody = body(assign(metadata(\"SP.NavigationNode\"), {\n            IsVisible: visible,\n            Title: title,\n            Url: url,\n        }));\n\n        const data = await spPost(this.clone(NavigationNodes, null), postBody);\n\n        return {\n            data,\n            node: this.getById(data.Id),\n        };\n    }\n\n    /**\n     * Moves a node to be after another node in the navigation\n     *\n     * @param nodeId Id of the node to move\n     * @param previousNodeId Id of the node after which we move the node specified by nodeId\n     */\n    @tag(\"nns.moveAfter\")\n    public moveAfter(nodeId: number, previousNodeId: number): Promise<void> {\n\n        const postBody = body({\n            nodeId: nodeId,\n            previousNodeId: previousNodeId,\n        });\n\n        return spPost(this.clone(NavigationNodes, \"MoveAfter\"), postBody);\n    }\n}\nexport interface INavigationNodes extends _NavigationNodes { }\nexport const NavigationNodes = spInvokableFactory<INavigationNodes>(_NavigationNodes);\n\n\n/**\n * Represents an instance of a navigation node\n *\n */\nexport class _NavigationNode extends _SharePointQueryableInstance<INavNodeInfo> {\n\n    public delete = deleteable(\"nn\");\n\n    /**\n     * Represents the child nodes of this node\n     */\n    public get children(): INavigationNodes {\n        return tag.configure(NavigationNodes(this, \"children\"), \"nn.children\");\n    }\n\n    /**\n     * Updates this node\n     * \n     * @param properties Properties used to update this node\n     */\n    @tag(\"nn.update\")\n    public async update(properties: Partial<INavNodeInfo>): Promise<INavNodeUpdateResult> {\n\n        const postBody = body(assign(metadata(\"SP.NavigationNode\"), properties), headers({ \"X-HTTP-Method\": \"MERGE\" }));\n\n        const data = await spPost(this, postBody);\n\n        return {\n            data,\n            node: <any>this,\n        };\n    }\n}\nexport interface INavigationNode extends _NavigationNode, IDeleteable { }\nexport const NavigationNode = spInvokableFactory<INavigationNode>(_NavigationNode);\n\nexport interface INavNodeUpdateResult {\n    data: any;\n    node: INavigationNode;\n}\n\n/**\n * Exposes the navigation components\n *\n */\n@defaultPath(\"navigation\")\nexport class _Navigation extends _SharePointQueryable {\n\n    /**\n     * Gets the quicklaunch navigation nodes for the current context\n     *\n     */\n    public get quicklaunch(): INavigationNodes {\n        return tag.configure(NavigationNodes(this, \"quicklaunch\"), \"n.quicklaunch\");\n    }\n\n    /**\n     * Gets the top bar navigation nodes for the current context\n     *\n     */\n    public get topNavigationBar(): INavigationNodes {\n        return tag.configure(NavigationNodes(this, \"topnavigationbar\"), \"n.topnavigationbar\");\n    }\n}\nexport interface INavigation {\n    readonly quicklaunch: INavigationNodes;\n    readonly topNavigationBar: INavigationNodes;\n}\nexport const Navigation = spInvokableFactory<INavigation>(_Navigation);\n\n/**\n * Represents the top level navigation service\n */\nexport class _NavigationService extends _SharePointQueryable {\n\n    constructor(path: string = null) {\n        super(\"_api/navigation\", path);\n    }\n\n    /**\n     * The MenuState service operation returns a Menu-State (dump) of a SiteMapProvider on a site.\n     * \n     * @param menuNodeKey MenuNode.Key of the start node within the SiteMapProvider If no key is provided the SiteMapProvider.RootNode will be the root of the menu state.\n     * @param depth Depth of the dump. If no value is provided a dump with the depth of 10 is returned\n     * @param mapProviderName The name identifying the SiteMapProvider to be used\n     * @param customProperties comma seperated list of custom properties to be returned.\n     */\n    @tag(\"ns.getMenuState\")\n    public getMenuState(menuNodeKey: string = null, depth = 10, mapProviderName: string = null, customProperties: string = null): Promise<IMenuNodeCollection> {\n\n        return spPost(<any>NavigationService(\"MenuState\"), body({\n            customProperties,\n            depth,\n            mapProviderName,\n            menuNodeKey,\n        }));\n    }\n\n    /**\n     * Tries to get a SiteMapNode.Key for a given URL within a site collection.\n     * \n     * @param currentUrl A url representing the SiteMapNode\n     * @param mapProviderName The name identifying the SiteMapProvider to be used\n     */\n    @tag(\"ns.getMenuNodeKey\")\n    public getMenuNodeKey(currentUrl: string, mapProviderName: string = null): Promise<string> {\n\n        return spPost(<any>NavigationService(\"MenuNodeKey\"), body({\n            currentUrl,\n            mapProviderName,\n        }));\n    }\n}\nexport interface INavigationService extends _NavigationService { }\nexport const NavigationService = (path?: string) => <INavigationService>new _NavigationService(path);\n\nexport interface IMenuNode {\n    CustomProperties: any[];\n    FriendlyUrlSegment: string;\n    IsDeleted: boolean;\n    IsHidden: boolean;\n    Key: string;\n    Nodes: IMenuNode[];\n    NodeType: number;\n    SimpleUrl: string;\n    Title: string;\n}\n\nexport interface IMenuNodeCollection {\n    FriendlyUrlPrefix: string;\n    Nodes: IMenuNode[];\n    SimpleUrl: string;\n    SPSitePrefix: string;\n    SPWebPrefix: string;\n    StartingNodeKey: string;\n    StartingNodeTitle: string;\n    Version: Date;\n}\n\nexport interface ISerializableNavigationNode {\n    Id: number;\n    Title: string;\n    Url: string;\n    IsDocLib: boolean;\n    IsExternal: boolean;\n    ParentId: number;\n    ListTemplateType: number;\n    AudienceIds: string[];\n    Children: ISerializableNavigationNode[];\n}\n\n/**\n * Result from adding a navigation node\n *\n */\nexport interface INavigationNodeAddResult {\n    data: INavNodeInfo;\n    node: INavigationNode;\n}\n\n/**\n * Represents the information describing a navigation node\n */\nexport interface INavNodeInfo {\n    AudienceIds: string[] | null;\n    Id: number;\n    IsDocLib: boolean;\n    IsExternal: boolean;\n    IsVisible: boolean;\n    ListTemplateType: number;\n    Title: string;\n    Url: string;\n}\n","import { addProp } from \"@pnp/odata\";\nimport { _Web } from \"../webs/types\";\nimport { Navigation, INavigation } from \"./types\";\n\ndeclare module \"../webs/types\" {\n    interface _Web {\n        navigation: INavigation;\n    }\n    interface IWeb {\n\n        /**\n         * Gets a navigation object that represents navigation on the Web site,\n         * including the Quick Launch area and the top navigation bar\n         */\n        navigation: INavigation;\n    }\n}\n\naddProp(_Web, \"navigation\", Navigation);\n","import { SPRest } from \"../rest\";\nimport { NavigationService, INavigationService } from \"./types\";\n\nimport \"./web\";\n\nexport {\n    INavNodeUpdateResult,\n    INavigation,\n    INavigationNode,\n    INavigationNodeAddResult,\n    INavigationNodes,\n    INavigationService,\n    Navigation,\n    NavigationNode,\n    NavigationNodes,\n    NavigationService,\n    IMenuNode,\n    IMenuNodeCollection,\n    ISerializableNavigationNode,\n    INavNodeInfo,\n} from \"./types\";\n\ndeclare module \"../rest\" {\n    interface SPRest {\n        readonly navigation: INavigationService;\n    }\n}\n\nReflect.defineProperty(SPRest.prototype, \"navigation\", {\n    configurable: true,\n    enumerable: true,\n    get: function (this: SPRest) {\n        return NavigationService().configure(this._options);\n    },\n});\n","import {\n    _SharePointQueryableInstance,\n    SharePointQueryableCollection,\n    ISharePointQueryableCollection,\n    _SharePointQueryable,\n    ISharePointQueryable,\n    spInvokableFactory,\n} from \"../sharepointqueryable\";\nimport { assign } from \"@pnp/common\";\nimport { metadata } from \"../utils/metadata\";\nimport { body } from \"@pnp/odata\";\nimport { PrincipalType, PrincipalSource } from \"../types\";\nimport { defaultPath } from \"../decorators\";\nimport { spPost } from \"../operations\";\n\nexport class _Profiles extends _SharePointQueryableInstance {\n\n    private clientPeoplePickerQuery: ClientPeoplePickerQuery;\n    private profileLoader: ProfileLoader;\n\n    /**\n     * Creates a new instance of the UserProfileQuery class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this user profile query\n     */\n    constructor(baseUrl: string | ISharePointQueryable, path = \"_api/sp.userprofiles.peoplemanager\") {\n        super(baseUrl, path);\n\n        this.clientPeoplePickerQuery = (new ClientPeoplePickerQuery(baseUrl)).configureFrom(this);\n        this.profileLoader = (new ProfileLoader(baseUrl)).configureFrom(this);\n    }\n\n    /**\n     * The url of the edit profile page for the current user\n     */\n    public get editProfileLink(): Promise<string> {\n        return this.clone(Profiles, \"EditProfileLink\").get();\n    }\n\n    /**\n     * A boolean value that indicates whether the current user's \"People I'm Following\" list is public\n     */\n    public get isMyPeopleListPublic(): Promise<boolean> {\n        return this.clone(Profiles, \"IsMyPeopleListPublic\").get();\n    }\n\n    /**\n     * A boolean value that indicates whether the current user is being followed by the specified user\n     *\n     * @param loginName The account name of the user\n     */\n    public amIFollowedBy(loginName: string): Promise<boolean> {\n        const q = this.clone(Profiles, \"amifollowedby(@v)\");\n        q.query.set(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.get();\n    }\n\n    /**\n     * A boolean value that indicates whether the current user is following the specified user\n     *\n     * @param loginName The account name of the user\n     */\n    public amIFollowing(loginName: string): Promise<boolean> {\n        const q = this.clone(Profiles, \"amifollowing(@v)\");\n        q.query.set(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.get();\n    }\n\n    /**\n     * Gets tags that the current user is following\n     *\n     * @param maxCount The maximum number of tags to retrieve (default is 20)\n     */\n    public getFollowedTags(maxCount = 20): Promise<string[]> {\n        return this.clone(Profiles, `getfollowedtags(${maxCount})`).get();\n    }\n\n    /**\n     * Gets the people who are following the specified user\n     *\n     * @param loginName The account name of the user\n     */\n    public getFollowersFor(loginName: string): Promise<any[]> {\n        const q = this.clone(Profiles, \"getfollowersfor(@v)\");\n        q.query.set(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.get();\n    }\n\n    /**\n     * Gets the people who are following the current user\n     *\n     */\n    public get myFollowers(): ISharePointQueryableCollection {\n        return SharePointQueryableCollection(this, \"getmyfollowers\");\n    }\n\n    /**\n     * Gets user properties for the current user\n     *\n     */\n    public get myProperties(): _SharePointQueryableInstance {\n        return new _Profiles(this, \"getmyproperties\");\n    }\n\n    /**\n     * Gets the people who the specified user is following\n     *\n     * @param loginName The account name of the user.\n     */\n    public getPeopleFollowedBy(loginName: string): Promise<any[]> {\n        const q = this.clone(Profiles, \"getpeoplefollowedby(@v)\");\n        q.query.set(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.get();\n    }\n\n    /**\n     * Gets user properties for the specified user.\n     *\n     * @param loginName The account name of the user.\n     */\n    public getPropertiesFor(loginName: string): Promise<any> {\n        const q = this.clone(Profiles, \"getpropertiesfor(@v)\");\n        q.query.set(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.get();\n    }\n\n    /**\n     * Gets the 20 most popular hash tags over the past week, sorted so that the most popular tag appears first\n     *\n     */\n    public get trendingTags(): Promise<IHashTagCollection> {\n        const q = this.clone(Profiles, null);\n        q.concat(\".gettrendingtags\");\n        return q.get();\n    }\n\n    /**\n     * Gets the specified user profile property for the specified user\n     *\n     * @param loginName The account name of the user\n     * @param propertyName The case-sensitive name of the property to get\n     */\n    public getUserProfilePropertyFor(loginName: string, propertyName: string): Promise<string> {\n        const q = this.clone(Profiles, `getuserprofilepropertyfor(accountname=@v, propertyname='${propertyName}')`);\n        q.query.set(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.get();\n    }\n\n    /**\n     * Removes the specified user from the user's list of suggested people to follow\n     *\n     * @param loginName The account name of the user\n     */\n    public hideSuggestion(loginName: string): Promise<void> {\n        const q = this.clone(Profiles, \"hidesuggestion(@v)\");\n        q.query.set(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return spPost(q);\n    }\n\n    /**\n     * A boolean values that indicates whether the first user is following the second user\n     *\n     * @param follower The account name of the user who might be following the followee\n     * @param followee The account name of the user who might be followed by the follower\n     */\n    public isFollowing(follower: string, followee: string): Promise<boolean> {\n        const q = this.clone(Profiles, null);\n        q.concat(`.isfollowing(possiblefolloweraccountname=@v, possiblefolloweeaccountname=@y)`);\n        q.query.set(\"@v\", `'${encodeURIComponent(follower)}'`);\n        q.query.set(\"@y\", `'${encodeURIComponent(followee)}'`);\n        return q.get();\n    }\n\n    /**\n     * Uploads and sets the user profile picture (Users can upload a picture to their own profile only). Not supported for batching.\n     *\n     * @param profilePicSource Blob data representing the user's picture in BMP, JPEG, or PNG format of up to 4.76MB\n     */\n    public setMyProfilePic(profilePicSource: Blob): Promise<void> {\n        let buffer: any = null;\n        const reader = new FileReader();\n        reader.onload = (e: any) => buffer = e.target.result;\n        reader.readAsArrayBuffer(profilePicSource);\n        const request = new _Profiles(this, \"setmyprofilepicture\");\n        return spPost(request, body(String.fromCharCode.apply(null, <any>new Uint16Array(buffer))));\n    }\n\n    /**\n     * Sets single value User Profile property\n     *\n     * @param accountName The account name of the user\n     * @param propertyName Property name\n     * @param propertyValue Property value\n     */\n    public setSingleValueProfileProperty(accountName: string, propertyName: string, propertyValue: string): Promise<void> {\n\n        return spPost(this.clone(Profiles, \"SetSingleValueProfileProperty\"), body({\n            accountName: accountName,\n            propertyName: propertyName,\n            propertyValue: propertyValue,\n        }));\n    }\n\n    /**\n     * Sets multi valued User Profile property\n     *\n     * @param accountName The account name of the user\n     * @param propertyName Property name\n     * @param propertyValues Property values\n     */\n    public setMultiValuedProfileProperty(accountName: string, propertyName: string, propertyValues: string[]): Promise<void> {\n\n        return spPost(this.clone(Profiles, \"SetMultiValuedProfileProperty\"), body({\n            accountName: accountName,\n            propertyName: propertyName,\n            propertyValues: propertyValues,\n        }));\n    }\n\n    /**\n     * Provisions one or more users' personal sites. (My Site administrator on SharePoint Online only)\n     *\n     * @param emails The email addresses of the users to provision sites for\n     */\n    public createPersonalSiteEnqueueBulk(...emails: string[]): Promise<void> {\n        return this.profileLoader.createPersonalSiteEnqueueBulk(emails);\n    }\n\n    /**\n     * Gets the user profile of the site owner\n     *\n     */\n    public get ownerUserProfile(): Promise<IUserProfile> {\n        return this.profileLoader.ownerUserProfile;\n    }\n\n    /**\n     * Gets the user profile for the current user\n     */\n    public get userProfile(): Promise<any> {\n        return this.profileLoader.userProfile;\n    }\n\n    /**\n     * Enqueues creating a personal site for this user, which can be used to share documents, web pages, and other files\n     *\n     * @param interactiveRequest true if interactively (web) initiated request, or false (default) if non-interactively (client) initiated request\n     */\n    public createPersonalSite(interactiveRequest = false): Promise<void> {\n        return this.profileLoader.createPersonalSite(interactiveRequest);\n    }\n\n    /**\n     * Sets the privacy settings for this profile\n     *\n     * @param share true to make all social data public; false to make all social data private\n     */\n    public shareAllSocialData(share: boolean): Promise<void> {\n        return this.profileLoader.shareAllSocialData(share);\n    }\n\n    /**\n     * Resolves user or group using specified query parameters\n     *\n     * @param queryParams The query parameters used to perform resolve\n     */\n    public clientPeoplePickerResolveUser(queryParams: IClientPeoplePickerQueryParameters): Promise<IPeoplePickerEntity> {\n        return this.clientPeoplePickerQuery.clientPeoplePickerResolveUser(queryParams);\n    }\n\n    /**\n     * Searches for users or groups using specified query parameters\n     *\n     * @param queryParams The query parameters used to perform search\n     */\n    public clientPeoplePickerSearchUser(queryParams: IClientPeoplePickerQueryParameters): Promise<IPeoplePickerEntity[]> {\n        return this.clientPeoplePickerQuery.clientPeoplePickerSearchUser(queryParams);\n    }\n}\nexport interface IProfiles extends _Profiles {}\nexport const Profiles = spInvokableFactory<IProfiles>(_Profiles);\n\n@defaultPath(\"_api/sp.userprofiles.profileloader.getprofileloader\")\nclass ProfileLoader extends _SharePointQueryable {\n\n    /**\n     * Provisions one or more users' personal sites. (My Site administrator on SharePoint Online only) Doesn't support batching\n     *\n     * @param emails The email addresses of the users to provision sites for\n     */\n    public createPersonalSiteEnqueueBulk(emails: string[]): Promise<void> {\n\n        return spPost(this.clone(ProfileLoaderFactory, \"createpersonalsiteenqueuebulk\", false), body({ \"emailIDs\": emails }));\n    }\n\n    /**\n     * Gets the user profile of the site owner.\n     *\n     */\n    public get ownerUserProfile(): Promise<IUserProfile> {\n        let q = this.getParent(ProfileLoaderFactory, this.parentUrl, \"_api/sp.userprofiles.profileloader.getowneruserprofile\");\n\n        if (this.hasBatch) {\n            q = q.inBatch(this.batch);\n        }\n\n        return spPost(q);\n    }\n\n    /**\n     * Gets the user profile of the current user.\n     *\n     */\n    public get userProfile(): Promise<IUserProfile> {\n        return spPost(this.clone(ProfileLoaderFactory, \"getuserprofile\"));\n    }\n\n    /**\n     * Enqueues creating a personal site for this user, which can be used to share documents, web pages, and other files.\n     *\n     * @param interactiveRequest true if interactively (web) initiated request, or false (default) if non-interactively (client) initiated request\n     */\n    public createPersonalSite(interactiveRequest = false): Promise<void> {\n        return spPost(this.clone(ProfileLoaderFactory, `getuserprofile/createpersonalsiteenque(${interactiveRequest})`));\n    }\n\n    /**\n     * Sets the privacy settings for this profile\n     *\n     * @param share true to make all social data public; false to make all social data private.\n     */\n    public shareAllSocialData(share: boolean): Promise<void> {\n        return spPost(this.clone(ProfileLoaderFactory, `getuserprofile/shareallsocialdata(${share})`));\n    }\n}\n\nconst ProfileLoaderFactory = (baseUrl: string | ISharePointQueryable, path?: string) => {\n    return new ProfileLoader(baseUrl, path);\n};\n\n@defaultPath(\"_api/sp.ui.applicationpages.clientpeoplepickerwebserviceinterface\")\nclass ClientPeoplePickerQuery extends _SharePointQueryable {\n\n    /**\n     * Resolves user or group using specified query parameters\n     *\n     * @param queryParams The query parameters used to perform resolve\n     */\n    public async clientPeoplePickerResolveUser(queryParams: IClientPeoplePickerQueryParameters): Promise<IPeoplePickerEntity> {\n        const q = this.clone(ClientPeoplePickerFactory, null);\n        q.concat(\".clientpeoplepickerresolveuser\");\n        const res = await spPost<string | { ClientPeoplePickerResolveUser: string }>(q, this.getBodyFrom(queryParams));\n\n        return JSON.parse(typeof res === \"object\" ? res.ClientPeoplePickerResolveUser : res);\n    }\n\n    /**\n     * Searches for users or groups using specified query parameters\n     *\n     * @param queryParams The query parameters used to perform search\n     */\n    public async clientPeoplePickerSearchUser(queryParams: IClientPeoplePickerQueryParameters): Promise<IPeoplePickerEntity[]> {\n        const q = this.clone(ClientPeoplePickerFactory, null);\n        q.concat(\".clientpeoplepickersearchuser\");\n        const res = await spPost<string | { ClientPeoplePickerSearchUser: string }>(q, this.getBodyFrom(queryParams));\n\n        return JSON.parse(typeof res === \"object\" ? res.ClientPeoplePickerSearchUser : res);\n    }\n\n    /**\n     * Creates ClientPeoplePickerQueryParameters request body\n     *\n     * @param queryParams The query parameters to create request body\n     */\n    private getBodyFrom(queryParams: IClientPeoplePickerQueryParameters): { body: string } {\n        return body({ \"queryParams\": assign(metadata(\"SP.UI.ApplicationPages.ClientPeoplePickerQueryParameters\"), queryParams) });\n    }\n}\n\nconst ClientPeoplePickerFactory = (baseUrl: string | ISharePointQueryable, path?: string) => {\n    return new ClientPeoplePickerQuery(baseUrl, path);\n};\n\n/**\n * Client people picker query parameters\n */\nexport interface IClientPeoplePickerQueryParameters {\n    /**\n     * Gets or sets a value that specifies whether e-mail addresses can be used to perform search.\n     */\n    AllowEmailAddresses?: boolean;\n    /**\n     * Gets or sets a value that specifies whether multiple entities are allowed.\n     */\n    AllowMultipleEntities?: boolean;\n    /**\n     * Gets or sets a value that specifies whether only e-mail addresses can be used to perform search.\n     */\n    AllowOnlyEmailAddresses?: boolean;\n    /**\n     * Gets or sets a value that specifies whether all URL zones are used to perform search.\n     */\n    AllUrlZones?: boolean;\n    /**\n     * Gets or sets a value that specifies claim providers that are used to perform search.\n     */\n    EnabledClaimProviders?: string;\n    /**\n     * Gets or sets a value that specifies whether claims are forced (if yes, multiple results for single entity can be returned).\n     */\n    ForceClaims?: boolean;\n    /**\n     * Gets or sets a value that specifies limit of results returned.\n     */\n    MaximumEntitySuggestions: number;\n    /**\n     * Gets or sets a value that specifies principal sources to perform search.\n     */\n    PrincipalSource?: PrincipalSource;\n    /**\n     * Gets or sets a value that specifies principal types to search for.\n     */\n    PrincipalType?: PrincipalType;\n    /**\n     * Gets or sets a value that specifies additional query settings.\n     */\n    QuerySettings?: IPeoplePickerQuerySettings;\n    /**\n     * Gets or sets a value that specifies the term to search for.\n     */\n    QueryString: string;\n    /**\n     * Gets or sets a value that specifies ID of the SharePoint Group that will be used to perform search.\n     */\n    SharePointGroupID?: number;\n    /**\n     * Gets or sets a value that specifies URL zones that are used to perform search.\n     */\n    UrlZone?: UrlZone;\n    /**\n     * Gets or sets a value that specifies whether search is limited to specific URL zone.\n     */\n    UrlZoneSpecified?: boolean;\n    /**\n     * Gets or sets a value that specifies GUID of the Web Application that is used to perform search.\n     */\n    WebApplicationID?: string;\n}\n\nexport interface IHashTagCollection {\n    Items: IHashTag[];\n}\n\n/**\n * People picker query settings\n */\nexport interface IPeoplePickerQuerySettings {\n    ExcludeAllUsersOnTenantClaim?: boolean;\n}\n\n/**\n * People picker entity\n */\nexport interface IPeoplePickerEntity {\n    Description: string;\n    DisplayText: string;\n    EntityData: IPeoplePickerEntityData;\n    EntityType: string;\n    IsResolved: boolean;\n    Key: string;\n    MultipleMatches: IPeoplePickerEntityData[];\n    ProviderDisplayName: string;\n    ProviderName: string;\n}\n\n/**\n * People picker entity data\n */\nexport interface IPeoplePickerEntityData {\n    AccountName?: string;\n    Department?: string;\n    Email?: string;\n    IsAltSecIdPresent?: string;\n    MobilePhone?: string;\n    ObjectId?: string;\n    OtherMails?: string;\n    PrincipalType?: string;\n    SPGroupID?: string;\n    SPUserID?: string;\n    Title?: string;\n}\n\n/**\n * Specifies the originating zone of a request received.\n */\nexport const enum UrlZone {\n    /**\n     * Specifies the default zone used for requests unless another zone is specified.\n     */\n    DefaultZone,\n    /**\n     * Specifies an intranet zone.\n     */\n    Intranet,\n    /**\n     * Specifies an Internet zone.\n     */\n    Internet,\n    /**\n     * Specifies a custom zone.\n     */\n    Custom,\n    /**\n     * Specifies an extranet zone.\n     */\n    Extranet,\n}\n\nexport interface IHashTag {\n    /**\n     * The hash tag's internal name.\n     */\n    Name?: string;\n    /**\n     * The number of times that the hash tag is used.\n     */\n    UseCount?: number;\n}\n\nexport interface IFollowedContent {\n    FollowedDocumentsUrl: string;\n    FollowedSitesUrl: string;\n}\n\nexport interface IUserProfile {\n    /**\n     * An object containing the user's FollowedDocumentsUrl and FollowedSitesUrl.\n     */\n    FollowedContent?: IFollowedContent;\n    /**\n     * The account name of the user. (SharePoint Online only)\n     */\n    AccountName?: string;\n    /**\n     * The display name of the user. (SharePoint Online only)\n     */\n    DisplayName?: string;\n    /**\n     * The FirstRun flag of the user. (SharePoint Online only)\n     */\n    O15FirstRunExperience?: number;\n    /**\n     * The personal site of the user.\n     */\n    PersonalSite?: string;\n    /**\n     * The capabilities of the user's personal site. Represents a bitwise PersonalSiteCapabilities value:\n     * None = 0; Profile Value = 1; Social Value = 2; Storage Value = 4; MyTasksDashboard Value = 8; Education Value = 16; Guest Value = 32.\n     */\n    PersonalSiteCapabilities?: number;\n    /**\n     * The error thrown when the user's personal site was first created, if any. (SharePoint Online only)\n     */\n    PersonalSiteFirstCreationError?: string;\n    /**\n     * The date and time when the user's personal site was first created. (SharePoint Online only)\n     */\n    PersonalSiteFirstCreationTime?: Date;\n    /**\n     * The status for the state of the personal site instantiation\n     */\n    PersonalSiteInstantiationState?: number;\n    /**\n     * The date and time when the user's personal site was last created. (SharePoint Online only)\n     */\n    PersonalSiteLastCreationTime?: Date;\n    /**\n     * The number of attempts made to create the user's personal site. (SharePoint Online only)\n     */\n    PersonalSiteNumberOfRetries?: number;\n    /**\n     * Indicates whether the user's picture is imported from Exchange.\n     */\n    PictureImportEnabled?: boolean;\n    /**\n     * The public URL of the personal site of the current user. (SharePoint Online only)\n     */\n    PublicUrl?: string;\n    /**\n     * The URL used to create the user's personal site.\n     */\n    UrlToCreatePersonalSite?: string;\n}\n","import { SPRest } from \"../rest\";\nimport { Profiles, IProfiles } from \"./types\";\n\nexport {\n    IProfiles,\n    Profiles,\n    IClientPeoplePickerQueryParameters,\n    IFollowedContent,\n    IHashTag,\n    IHashTagCollection,\n    IPeoplePickerEntity,\n    IPeoplePickerEntityData,\n    IPeoplePickerQuerySettings,\n    IUserProfile,\n    UrlZone,\n} from \"./types\";\n\ndeclare module \"../rest\" {\n    interface SPRest {\n        readonly profiles: IProfiles;\n    }\n}\n\nReflect.defineProperty(SPRest.prototype, \"profiles\", {\n    configurable: true,\n    enumerable: true,\n    get: function (this: SPRest) {\n        return Profiles(this._baseUrl);\n    },\n});\n","import { dateAdd, hOP } from \"@pnp/common\";\nimport {\n    _SharePointQueryableInstance,\n    SharePointQueryableCollection,\n    ISharePointQueryableCollection,\n    _SharePointQueryableCollection,\n    spInvokableFactory,\n} from \"../sharepointqueryable\";\nimport { defaultPath } from \"../decorators\";\nimport { spODataEntity } from \"../odata\";\nimport { spPost } from \"../operations\";\nimport { tag } from \"../telemetry\";\n\n@defaultPath(\"regionalsettings\")\nexport class _RegionalSettings extends _SharePointQueryableInstance<IRegionalSettingsInfo> {\n\n    /**\n     * Gets the collection of languages used in a server farm.\n     */\n    public get installedLanguages(): ISharePointQueryableCollection<IInstalledLanguageInfo[]> {\n        return tag.configure(SharePointQueryableCollection(this, \"installedlanguages\"), \"rs.installedLanguages\");\n    }\n\n    /**\n     * Gets time zone\n     */\n    public get timeZone(): ITimeZone {\n        return tag.configure(TimeZone(this), \"rs.tz\");\n    }\n\n    /**\n     * Gets time zones\n     */\n    public get timeZones(): ITimeZones {\n        return tag.configure(TimeZones(this), \"rs.tzs\");\n    }\n}\nexport interface IRegionalSettings extends _RegionalSettings { }\nexport const RegionalSettings = spInvokableFactory<IRegionalSettings>(_RegionalSettings);\n\n@defaultPath(\"timezone\")\nexport class _TimeZone extends _SharePointQueryableInstance<ITimeZoneInfo> {\n\n    /**\n     * Gets an Local Time by UTC Time\n     *\n     * @param utcTime UTC Time as Date or ISO String\n     */\n    @tag(\"tz.utcToLocalTime\")\n    public async utcToLocalTime(utcTime: string | Date): Promise<string> {\n\n        let dateIsoString: string;\n\n        if (typeof utcTime === \"string\") {\n            dateIsoString = utcTime;\n        } else {\n            dateIsoString = utcTime.toISOString();\n        }\n\n        const res = await spPost(this.clone(TimeZone, `utctolocaltime('${dateIsoString}')`));\n        return hOP(res, \"UTCToLocalTime\") ? res.UTCToLocalTime : res;\n    }\n\n    /**\n     * Gets an UTC Time by Local Time\n     *\n     * @param localTime Local Time as Date or ISO String\n     */\n    @tag(\"tz.localTimeToUTC\")\n    public async localTimeToUTC(localTime: string | Date): Promise<string> {\n\n        let dateIsoString: string;\n\n        if (typeof localTime === \"string\") {\n            dateIsoString = localTime;\n        } else {\n            dateIsoString = dateAdd(localTime, \"minute\", localTime.getTimezoneOffset() * -1).toISOString();\n        }\n\n        const res = await spPost(this.clone(TimeZone, `localtimetoutc('${dateIsoString}')`));\n\n        return hOP(res, \"LocalTimeToUTC\") ? res.LocalTimeToUTC : res;\n    }\n}\nexport interface ITimeZone extends _TimeZone { }\nexport const TimeZone = spInvokableFactory<ITimeZone>(_TimeZone);\n\n@defaultPath(\"timezones\")\nexport class _TimeZones extends _SharePointQueryableCollection<ITimeZoneInfo[]> {\n\n    /**\n     * Gets an TimeZone by id (see: https://msdn.microsoft.com/en-us/library/office/jj247008.aspx)\n     *\n     * @param id The integer id of the timezone to retrieve\n     */\n    @tag(\"tzs.getById\")\n    public getById(id: number): Promise<ITimeZone & ITimeZoneInfo> {\n        // do the post and merge the result into a TimeZone instance so the data and methods are available\n        return spPost(this.clone(TimeZones, `GetById(${id})`).usingParser(spODataEntity(TimeZone)));\n    }\n}\nexport interface ITimeZones extends _TimeZones { }\nexport const TimeZones = spInvokableFactory<ITimeZones>(_TimeZones);\n\n/**\n * This is the data for Regional Settings\n */\nexport interface IRegionalSettingsInfo {\n    AdjustHijriDays: number;\n    AlternateCalendarType: number;\n    AM: string;\n    CalendarType: number;\n    Collation: number;\n    CollationLCID: number;\n    DateFormat: number;\n    DateSeparator: string;\n    DecimalSeparator: string;\n    DigitGrouping: string;\n    FirstDayOfWeek: number;\n    FirstWeekOfYear: number;\n    IsEastAsia: boolean;\n    IsRightToLeft: boolean;\n    IsUIRightToLeft: boolean;\n    ListSeparator: string;\n    LocaleId: number;\n    NegativeSign: string;\n    NegNumberMode: number;\n    PM: string;\n    PositiveSign: string;\n    ShowWeeks: boolean;\n    ThousandSeparator: string;\n    Time24: boolean;\n    TimeMarkerPosition: number;\n    TimeSeparator: string;\n    WorkDayEndHour: number;\n    WorkDays: number;\n    WorkDayStartHour: number;\n}\n\nexport interface IInstalledLanguageInfo {\n    DisplayName: string;\n    LanguageTag: string;\n    Lcid: number;\n}\n\nexport interface ITimeZoneInfo {\n    Description: string;\n    Id: number;\n    Information: {\n        Bias: number;\n        DaylightBias: number;\n        StandardBias: number;\n    };\n}\n","import { addProp } from \"@pnp/odata\";\nimport { _Web } from \"../webs/types\";\nimport { RegionalSettings, IRegionalSettings } from \"./types\";\n\ndeclare module \"../webs/types\" {\n    interface _Web {\n        regionalSettings: IRegionalSettings;\n    }\n    interface IWeb {\n        /**\n         * Regional settings for this web\n         */\n        regionalSettings: IRegionalSettings;\n    }\n}\n\naddProp(_Web, \"regionalSettings\", RegionalSettings);\n","import { _SharePointQueryable, ISharePointQueryable } from \"../sharepointqueryable\";\nimport { extractWebUrl } from \"../utils/extractweburl\";\nimport { defaultPath } from \"../decorators\";\nimport { spPost } from \"../operations\";\nimport { body } from \"@pnp/odata\";\nimport { tag } from \"../telemetry\";\n\n@defaultPath(\"_api/SP.RelatedItemManager\")\nexport class _RelatedItemManager extends _SharePointQueryable implements IRelatedItemManager {\n\n    @tag(\"rim.getRelatedItems\")\n    public getRelatedItems(sourceListName: string, sourceItemId: number): Promise<IRelatedItem[]> {\n\n        const query = this.clone(<any>RelatedItemManager, null);\n        query.concat(\".GetRelatedItems\");\n\n        return spPost(query, body({\n            SourceItemID: sourceItemId,\n            SourceListName: sourceListName,\n        }));\n    }\n\n    @tag(\"rim.getPageOneRelatedItems\")\n    public getPageOneRelatedItems(sourceListName: string, sourceItemId: number): Promise<IRelatedItem[]> {\n\n        const query = this.clone(<any>RelatedItemManager, null);\n        query.concat(\".GetPageOneRelatedItems\");\n\n        return spPost(query, body({\n            SourceItemID: sourceItemId,\n            SourceListName: sourceListName,\n        }));\n    }\n\n    @tag(\"rim.addSingleLink\")\n    public addSingleLink(sourceListName: string,\n        sourceItemId: number,\n        sourceWebUrl: string,\n        targetListName: string,\n        targetItemID: number,\n        targetWebUrl: string,\n        tryAddReverseLink = false): Promise<void> {\n\n        const query = this.clone(<any>RelatedItemManager, null);\n        query.concat(\".AddSingleLink\");\n\n        return spPost(query, body({\n            SourceItemID: sourceItemId,\n            SourceListName: sourceListName,\n            SourceWebUrl: sourceWebUrl,\n            TargetItemID: targetItemID,\n            TargetListName: targetListName,\n            TargetWebUrl: targetWebUrl,\n            TryAddReverseLink: tryAddReverseLink,\n        }));\n    }\n\n    @tag(\"rim.ToUrl\")\n    public addSingleLinkToUrl(sourceListName: string, sourceItemId: number, targetItemUrl: string, tryAddReverseLink = false): Promise<void> {\n\n        const query = this.clone(<any>RelatedItemManager, null);\n        query.concat(\".AddSingleLinkToUrl\");\n\n        return spPost(query, body({\n            SourceItemID: sourceItemId,\n            SourceListName: sourceListName,\n            TargetItemUrl: targetItemUrl,\n            TryAddReverseLink: tryAddReverseLink,\n        }));\n    }\n\n    @tag(\"rim.FromUrl\")\n    public addSingleLinkFromUrl(sourceItemUrl: string, targetListName: string, targetItemId: number, tryAddReverseLink = false): Promise<void> {\n\n        const query = this.clone(<any>RelatedItemManager, null);\n        query.concat(\".AddSingleLinkFromUrl\");\n\n        return spPost(query, body({\n            SourceItemUrl: sourceItemUrl,\n            TargetItemID: targetItemId,\n            TargetListName: targetListName,\n            TryAddReverseLink: tryAddReverseLink,\n        }));\n    }\n\n    @tag(\"rim.deleteSingleLink\")\n    public deleteSingleLink(sourceListName: string,\n        sourceItemId: number,\n        sourceWebUrl: string,\n        targetListName: string,\n        targetItemId: number,\n        targetWebUrl: string,\n        tryDeleteReverseLink = false): Promise<void> {\n\n        const query = this.clone(<any>RelatedItemManager, null);\n        query.concat(\".DeleteSingleLink\");\n\n        return spPost(query, body({\n            SourceItemID: sourceItemId,\n            SourceListName: sourceListName,\n            SourceWebUrl: sourceWebUrl,\n            TargetItemID: targetItemId,\n            TargetListName: targetListName,\n            TargetWebUrl: targetWebUrl,\n            TryDeleteReverseLink: tryDeleteReverseLink,\n        }));\n    }\n}\n\nexport interface IRelatedItemManager {\n\n    /**\n     * Gets all the related items for the given item specification\n     * \n     * @param sourceListName The list name or list id\n     * @param sourceItemId The item id\n     */\n    getRelatedItems(sourceListName: string, sourceItemId: number): Promise<IRelatedItem[]>;\n\n    /**\n     * Gets the first page of related items for the given item specification\n     * \n     * @param sourceListName The list name or list id\n     * @param sourceItemId The item id\n     */\n    getPageOneRelatedItems(sourceListName: string, sourceItemId: number): Promise<IRelatedItem[]>;\n\n    /**\n     * Adds a single link using full specifications for source and target\n     * \n     * @param sourceListName The source list name or list id\n     * @param sourceItemId The source item id\n     * @param sourceWebUrl The source web absolute url\n     * @param targetListName The target list name or list id\n     * @param targetItemID The target item id\n     * @param targetWebUrl The target web absolute url\n     * @param tryAddReverseLink If set to true try to add the reverse link (will not return error if it fails)\n     */\n    addSingleLink(sourceListName: string,\n        sourceItemId: number,\n        sourceWebUrl: string,\n        targetListName: string,\n        targetItemID: number,\n        targetWebUrl: string,\n        tryAddReverseLink?: boolean): Promise<void>;\n\n    /**\n     * Adds a related item link from an item specified by list name and item id, to an item specified by url\n     *\n     * @param sourceListName The source list name or list id\n     * @param sourceItemId The source item id\n     * @param targetItemUrl The target item url\n     * @param tryAddReverseLink If set to true try to add the reverse link (will not return error if it fails)\n     */\n    addSingleLinkToUrl(sourceListName: string, sourceItemId: number, targetItemUrl: string, tryAddReverseLink?: boolean): Promise<void>;\n\n    /**\n     * Adds a related item link from an item specified by url, to an item specified by list name and item id\n     *\n     * @param sourceItemUrl The source item url\n     * @param targetListName The target list name or list id\n     * @param targetItemId The target item id\n     * @param tryAddReverseLink If set to true try to add the reverse link (will not return error if it fails)\n     */\n    addSingleLinkFromUrl(sourceItemUrl: string, targetListName: string, targetItemId: number, tryAddReverseLink?: boolean): Promise<void>;\n\n    /**\n     * Deletes a single link\n     * \n     * @param sourceListName \n     * @param sourceItemId \n     * @param sourceWebUrl \n     * @param targetListName \n     * @param targetItemId \n     * @param targetWebUrl \n     * @param tryDeleteReverseLink \n     */\n    deleteSingleLink(sourceListName: string,\n        sourceItemId: number,\n        sourceWebUrl: string,\n        targetListName: string,\n        targetItemId: number,\n        targetWebUrl: string,\n        tryDeleteReverseLink?: boolean): Promise<void>;\n}\n\nexport const RelatedItemManager = (url: string | ISharePointQueryable): IRelatedItemManager => new _RelatedItemManager(extractWebUrl(typeof url === \"string\" ? url : url.toUrl()));\n\nexport interface IRelatedItem {\n    ListId: string;\n    ItemId: number;\n    Url: string;\n    Title: string;\n    WebId: string;\n    IconUrl: string;\n}\n","import { _SharePointQueryableInstance, ISharePointQueryable } from \"../sharepointqueryable\";\nimport { assign, hOP, getHashCode, objectDefinedNotNull, isArray, IConfigOptions } from \"@pnp/common\";\nimport { metadata } from \"../utils/metadata\";\nimport { CachingOptions, body } from \"@pnp/odata\";\nimport { ISearchQuery, ISearchResponse, ISearchResult, ISearchBuilder, SearchQueryInit } from \"./types\";\nimport { spPost } from \"../operations\";\nimport { defaultPath } from \"../decorators\";\nimport { tag } from \"../telemetry\";\n\nconst funcs = new Map<string, string>([\n    [\"text\", \"Querytext\"],\n    [\"template\", \"QueryTemplate\"],\n    [\"sourceId\", \"SourceId\"],\n    [\"trimDuplicatesIncludeId\", \"\"],\n    [\"startRow\", \"\"],\n    [\"rowLimit\", \"\"],\n    [\"rankingModelId\", \"\"],\n    [\"rowsPerPage\", \"\"],\n    [\"selectProperties\", \"\"],\n    [\"culture\", \"\"],\n    [\"timeZoneId\", \"\"],\n    [\"refinementFilters\", \"\"],\n    [\"refiners\", \"\"],\n    [\"hiddenConstraints\", \"\"],\n    [\"sortList\", \"\"],\n    [\"timeout\", \"\"],\n    [\"hithighlightedProperties\", \"\"],\n    [\"clientType\", \"\"],\n    [\"personalizationData\", \"\"],\n    [\"resultsURL\", \"\"],\n    [\"queryTag\", \"\"],\n    [\"properties\", \"\"],\n    [\"queryTemplatePropertiesUrl\", \"\"],\n    [\"reorderingRules\", \"\"],\n    [\"hitHighlightedMultivaluePropertyLimit\", \"\"],\n    [\"collapseSpecification\", \"\"],\n    [\"uiLanguage\", \"\"],\n    [\"desiredSnippetLength\", \"\"],\n    [\"maxSnippetLength\", \"\"],\n    [\"summaryLength\", \"\"],\n]);\n\nconst props = new Map<string, string>([]);\n\nfunction toPropCase(str: string) {\n    return str.replace(/^(.)/, ($1) => $1.toUpperCase());\n}\n\n/**\n * Creates a new instance of the SearchQueryBuilder\n * \n * @param queryText Initial query text\n * @param _query Any initial query configuration\n */\nexport function SearchQueryBuilder(queryText = \"\", _query = {}): ISearchBuilder {\n\n    return new Proxy(<any>{\n        query: Object.assign({\n            Querytext: queryText,\n        }, _query),\n    },\n        {\n            get(self, propertyKey, proxy) {\n\n                const pk = propertyKey.toString();\n\n                if (pk === \"toSearchQuery\") {\n                    return () => self.query;\n                }\n\n                if (funcs.has(pk)) {\n                    return (...value: any[]) => {\n                        const mappedPk = funcs.get(pk);\n                        self.query[mappedPk.length > 0 ? mappedPk : toPropCase(pk)] = value.length > 1 ? value : value[0];\n                        return proxy;\n                    };\n                }\n                const propKey = props.has(pk) ? props.get(pk) : toPropCase(pk);\n                self.query[propKey] = true;\n                return proxy;\n            },\n        });\n}\n\nconst queryRegex = /_api\\/search\\/postquery$/i;\n\n/**\n * Describes the search API\n *\n */\n@defaultPath(\"_api/search/postquery\")\nexport class _Search extends _SharePointQueryableInstance {\n\n    /**\n     * @returns Promise\n     */\n    @tag(\"se.execute\")\n    public async execute(queryInit: SearchQueryInit): Promise<SearchResults> {\n\n        const query = this.parseQuery(queryInit);\n\n        const postBody = body({\n            request: assign(\n                metadata(\"Microsoft.Office.Server.Search.REST.SearchRequest\"),\n                Object.assign(\n                    {},\n                    query,\n                    {\n                        HitHighlightedProperties: this.fixArrProp(query.HitHighlightedProperties),\n                        Properties: this.fixArrProp(query.Properties),\n                        RefinementFilters: this.fixArrProp(query.RefinementFilters),\n                        ReorderingRules: this.fixArrProp(query.ReorderingRules),\n                        SelectProperties: this.fixArrProp(query.SelectProperties),\n                        SortList: this.fixArrProp(query.SortList),\n                    })),\n        });\n\n        // if we are using caching with this search request, then we need to handle some work upfront to enable that\n        if (this.data.useCaching) {\n\n            // force use of the cache for this request if .usingCaching was called\n            this._forceCaching = true;\n\n            // because all the requests use the same url they would collide in the cache we use a special key\n            const cacheKey = `PnPjs.SearchWithCaching(${getHashCode(postBody.body)})`;\n\n            if (objectDefinedNotNull(this.data.cachingOptions)) {\n                // if our key ends in the postquery url we overwrite it\n                if (queryRegex.test(this.data.cachingOptions.key)) {\n                    this.data.cachingOptions.key = cacheKey;\n                }\n            } else {\n                this.data.cachingOptions = new CachingOptions(cacheKey);\n            }\n        }\n\n        const data = await spPost(this, postBody);\n        return new SearchResults(data, this.toUrl(), query);\n    }\n\n    /**\n     * Fix array property\n     *\n     * @param prop property to fix for container struct\n     */\n    private fixArrProp(prop: any): { results: any[] } {\n        if (typeof prop === \"undefined\") {\n            return ({ results: [] });\n        }\n\n        return { results: isArray(prop) ? prop : [prop] };\n    }\n\n    /**\n     * Translates one of the query initializers into a SearchQuery instance\n     * \n     * @param query \n     */\n    private parseQuery(query: SearchQueryInit): ISearchQuery {\n\n        let finalQuery: ISearchQuery;\n\n        if (typeof query === \"string\") {\n            finalQuery = { Querytext: query };\n        } else if ((query as ISearchBuilder).toSearchQuery) {\n            finalQuery = (query as ISearchBuilder).toSearchQuery();\n        } else {\n            finalQuery = <ISearchQuery>query;\n        }\n\n        return finalQuery;\n    }\n}\n\nexport interface ISearch {\n    (queryInit: SearchQueryInit): Promise<SearchResults>;\n}\n\nexport const Search = (baseUrl: string | ISharePointQueryable, options: IConfigOptions = {}): ISearch => (queryInit: SearchQueryInit) => {\n    return (new _Search(baseUrl)).configure(options).execute(queryInit);\n};\n\nexport class SearchResults {\n\n    constructor(rawResponse: any,\n        private _url: string,\n        private _query: ISearchQuery,\n        private _raw: ISearchResponse = null,\n        private _primary: ISearchResult[] = null) {\n\n        this._url = this._url.replace(queryRegex, \"\");\n        this._raw = rawResponse.postquery ? rawResponse.postquery : rawResponse;\n    }\n\n    public get ElapsedTime(): number {\n        return this.RawSearchResults.ElapsedTime;\n    }\n\n    public get RowCount(): number {\n        return this.RawSearchResults.PrimaryQueryResult.RelevantResults.RowCount;\n    }\n\n    public get TotalRows(): number {\n        return this.RawSearchResults.PrimaryQueryResult.RelevantResults.TotalRows;\n    }\n\n    public get TotalRowsIncludingDuplicates(): number {\n        return this.RawSearchResults.PrimaryQueryResult.RelevantResults.TotalRowsIncludingDuplicates;\n    }\n\n    public get RawSearchResults(): ISearchResponse {\n        return this._raw;\n    }\n\n    public get PrimarySearchResults(): ISearchResult[] {\n        if (this._primary === null) {\n            this._primary = this.formatSearchResults(this._raw.PrimaryQueryResult.RelevantResults.Table.Rows);\n        }\n        return this._primary;\n    }\n\n    /**\n     * Gets a page of results\n     *\n     * @param pageNumber Index of the page to return. Used to determine StartRow\n     * @param pageSize Optional, items per page (default = 10)\n     */\n    public getPage(pageNumber: number, pageSize?: number): Promise<SearchResults> {\n\n        // if we got all the available rows we don't have another page\n        if (this.TotalRows < this.RowCount) {\n            return Promise.resolve(null);\n        }\n\n        // if pageSize is supplied, then we use that regardless of any previous values\n        // otherwise get the previous RowLimit or default to 10\n        const rows = pageSize !== undefined ? pageSize : hOP(this._query, \"RowLimit\") ? this._query.RowLimit : 10;\n\n        const query: ISearchQuery = assign(this._query, {\n            RowLimit: rows,\n            StartRow: rows * (pageNumber - 1),\n        });\n\n        // we have reached the end\n        if (query.StartRow > this.TotalRows) {\n            return Promise.resolve(null);\n        }\n\n        return Search(this._url)(query);\n    }\n\n    /**\n     * Formats a search results array\n     *\n     * @param rawResults The array to process\n     */\n    protected formatSearchResults(rawResults: any): ISearchResult[] {\n\n        const results = new Array<ISearchResult>();\n        const tempResults = rawResults.results ? rawResults.results : rawResults;\n\n        for (const tempResult of tempResults) {\n\n            const cells: { Key: string, Value: any }[] = tempResult.Cells.results ? tempResult.Cells.results : tempResult.Cells;\n\n            results.push(cells.reduce((res, cell) => {\n\n                Reflect.defineProperty(res, cell.Key,\n                    {\n                        configurable: false,\n                        enumerable: true,\n                        value: cell.Value,\n                        writable: false,\n                    });\n\n                return res;\n\n            }, {}));\n        }\n\n        return results;\n    }\n}\n","export type SearchQueryInit = string | ISearchQuery | ISearchBuilder;\n\nexport interface ISearchBuilder {\n    query: any;\n    readonly bypassResultTypes: this;\n    readonly enableStemming: this;\n    readonly enableInterleaving: this;\n    readonly enableFql: this;\n    readonly enableNicknames: this;\n    readonly enablePhonetic: this;\n    readonly trimDuplicates: this;\n    readonly processBestBets: this;\n    readonly enableQueryRules: this;\n    readonly enableSorting: this;\n    readonly generateBlockRankLog: this;\n    readonly processPersonalFavorites: this;\n    readonly enableOrderingHitHighlightedProperty: this;\n\n    culture(culture: number): this;\n    rowLimit(n: number): this;\n    startRow(n: number): this;\n    sourceId(id: string): this;\n    text(queryText: string): this;\n    template(template: string): this;\n    trimDuplicatesIncludeId(n: number): this;\n    rankingModelId(id: string): this;\n    rowsPerPage(n: number): this;\n    selectProperties(...properties: string[]): this;\n    timeZoneId(id: number): this;\n    refinementFilters(...filters: string[]): this;\n    refiners(refiners: string): this;\n    hiddenConstraints(constraints: string): this;\n    sortList(...sorts: ISort[]): this;\n    timeout(milliseconds: number): this;\n    hithighlightedProperties(...properties: string[]): this;\n    clientType(clientType: string): this;\n    personalizationData(data: string): this;\n    resultsURL(url: string): this;\n    queryTag(tags: string): this;\n    properties(...properties: ISearchProperty[]): this;\n    queryTemplatePropertiesUrl(url: string): this;\n    reorderingRules(...rules: IReorderingRule[]): this;\n    hitHighlightedMultivaluePropertyLimit(limit: number): this;\n    collapseSpecification(spec: string): this;\n    uiLanguage(lang: number): this;\n    desiredSnippetLength(len: number): this;\n    maxSnippetLength(len: number): this;\n    summaryLength(len: number): this;\n\n    /* included method */\n    toSearchQuery(): ISearchQuery;\n}\n\n/**\n * Describes the SearchQuery interface\n */\nexport interface ISearchQuery {\n\n    /**\n     * A string that contains the text for the search query.\n     */\n    Querytext?: string;\n\n    /**\n     * A string that contains the text that replaces the query text, as part of a query transform.\n     */\n    QueryTemplate?: string;\n\n    /**\n     * A Boolean value that specifies whether the result tables that are returned for\n     * the result block are mixed with the result tables that are returned for the original query.\n     */\n    EnableInterleaving?: boolean;\n\n    /**\n     * A Boolean value that specifies whether stemming is enabled.\n     */\n    EnableStemming?: boolean;\n\n    /**\n     * A Boolean value that specifies whether duplicate items are removed from the results.\n     */\n    TrimDuplicates?: boolean;\n\n    /**\n     * A Boolean value that specifies whether the exact terms in the search query are used to find matches, or if nicknames are used also.\n     */\n    EnableNicknames?: boolean;\n\n    /**\n     * A Boolean value that specifies whether the query uses the FAST Query Language (FQL).\n     */\n    EnableFQL?: boolean;\n\n    /**\n     * A Boolean value that specifies whether the phonetic forms of the query terms are used to find matches.\n     */\n    EnablePhonetic?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to perform result type processing for the query.\n     */\n    BypassResultTypes?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to return best bet results for the query.\n     * This parameter is used only when EnableQueryRules is set to true, otherwise it is ignored.\n     */\n    ProcessBestBets?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to enable query rules for the query.\n     */\n    EnableQueryRules?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to sort search results.\n     */\n    EnableSorting?: boolean;\n\n    /**\n     * Specifies whether to return block rank log information in the BlockRankLog property of the interleaved result table.\n     * A block rank log contains the textual information on the block score and the documents that were de-duplicated.\n     */\n    GenerateBlockRankLog?: boolean;\n\n    /**\n     * The result source ID to use for executing the search query.\n     */\n    SourceId?: string;\n\n    /**\n     * The ID of the ranking model to use for the query.\n     */\n    RankingModelId?: string;\n\n    /**\n     * The first row that is included in the search results that are returned.\n     * You use this parameter when you want to implement paging for search results.\n     */\n    StartRow?: number;\n\n    /**\n     * The maximum number of rows overall that are returned in the search results.\n     * Compared to RowsPerPage, RowLimit is the maximum number of rows returned overall.\n     */\n    RowLimit?: number;\n\n    /**\n     * The maximum number of rows to return per page.\n     * Compared to RowLimit, RowsPerPage refers to the maximum number of rows to return per page,\n     * and is used primarily when you want to implement paging for search results.\n     */\n    RowsPerPage?: number;\n\n    /**\n     * The managed properties to return in the search results.\n     */\n    SelectProperties?: string[];\n\n    /**\n     * The locale ID (LCID) for the query.\n     */\n    Culture?: number;\n\n    /**\n     * The set of refinement filters used when issuing a refinement query (FQL)\n     */\n    RefinementFilters?: string[];\n\n    /**\n     * The set of refiners to return in a search result.\n     */\n    Refiners?: string;\n\n    /**\n     * The additional query terms to append to the query.\n     */\n    HiddenConstraints?: string;\n\n    /**\n     * The list of properties by which the search results are ordered.\n     */\n    SortList?: ISort[];\n\n    /**\n     * The amount of time in milliseconds before the query request times out.\n     */\n    Timeout?: number;\n\n    /**\n     * The properties to highlight in the search result summary when the property value matches the search terms entered by the user.\n     */\n    HitHighlightedProperties?: string[];\n\n    /**\n     * The type of the client that issued the query.\n     */\n    ClientType?: string;\n\n    /**\n     * The GUID for the user who submitted the search query.\n     */\n    PersonalizationData?: string;\n\n    /**\n     * The URL for the search results page.\n     */\n    ResultsUrl?: string;\n\n    /**\n     * Custom tags that identify the query. You can specify multiple query tags\n     */\n    QueryTag?: string;\n\n    /**\n     * Properties to be used to configure the search query\n     */\n    Properties?: ISearchProperty[];\n\n    /**\n     *  A Boolean value that specifies whether to return personal favorites with the search results.\n     */\n    ProcessPersonalFavorites?: boolean;\n\n    /**\n     * The location of the queryparametertemplate.xml file. This file is used to enable anonymous users to make Search REST queries.\n     */\n    QueryTemplatePropertiesUrl?: string;\n\n    /**\n     * Special rules for reordering search results.\n     * These rules can specify that documents matching certain conditions are ranked higher or lower in the results.\n     * This property applies only when search results are sorted based on rank.\n     */\n    ReorderingRules?: IReorderingRule[];\n\n    /**\n     * The number of properties to show hit highlighting for in the search results.\n     */\n    HitHighlightedMultivaluePropertyLimit?: number;\n\n    /**\n     * A Boolean value that specifies whether the hit highlighted properties can be ordered.\n     */\n    EnableOrderingHitHighlightedProperty?: boolean;\n\n    /**\n     * The managed properties that are used to determine how to collapse individual search results.\n     * Results are collapsed into one or a specified number of results if they match any of the individual collapse specifications.\n     * In a collapse specification, results are collapsed if their properties match all individual properties in the collapse specification.\n     */\n    CollapseSpecification?: string;\n\n    /**\n     * The locale identifier (LCID) of the user interface\n     */\n    UIlanguage?: number;\n\n    /**\n     * The preferred number of characters to display in the hit-highlighted summary generated for a search result.\n     */\n    DesiredSnippetLength?: number;\n\n    /**\n     * The maximum number of characters to display in the hit-highlighted summary generated for a search result.\n     */\n    MaxSnippetLength?: number;\n\n    /**\n     * The number of characters to display in the result summary for a search result.\n     */\n    SummaryLength?: number;\n\n}\n\n/**\n * Provides hints at the properties which may be available on the result object\n */\nexport interface ISearchResult {\n\n    Rank?: number;\n    DocId?: number;\n    WorkId?: number;\n    Title?: string;\n    Author?: string;\n    Size?: number;\n    Path?: string;\n    Description?: string;\n    Write?: Date;\n    LastModifiedTime?: Date;\n    CollapsingStatus?: number;\n    HitHighlightedSummary?: string;\n    HitHighlightedProperties?: string;\n    contentclass?: string;\n    PictureThumbnailURL?: string;\n    ServerRedirectedURL?: string;\n    ServerRedirectedEmbedURL?: string;\n    ServerRedirectedPreviewURL?: string;\n    FileExtension?: string;\n    ContentTypeId?: string;\n    ParentLink?: string;\n    ViewsLifetime?: number;\n    ViewsRecent?: number;\n    SectionNames?: string;\n    SectionIndexes?: string;\n    SiteLogo?: string;\n    SiteDescription?: string;\n    importance?: number;\n    SiteName?: string;\n    IsDocument?: boolean;\n    FileType?: string;\n    IsContainer?: boolean;\n    WebTemplate?: string;\n    SPWebUrl?: string;\n    UniqueId?: string;\n    ProgId?: string;\n    OriginalPath?: string;\n    RenderTemplateId?: string;\n    PartitionId?: string;\n    UrlZone?: number;\n    Culture?: string;\n}\n\nexport interface ISearchResponse {\n    ElapsedTime: number;\n    Properties?: { Key: string, Value: any, ValueType: string }[];\n    PrimaryQueryResult?: IResultTableCollection;\n    SecondaryQueryResults?: IResultTableCollection;\n    SpellingSuggestion?: string;\n    TriggeredRules?: any[];\n}\n\nexport interface IResultTableCollection {\n\n    QueryErrors?: Map<string, any>;\n    QueryId?: string;\n    QueryRuleId?: string;\n    CustomResults?: IResultTable;\n    RefinementResults?: IResultTable;\n    RelevantResults?: IResultTable;\n    SpecialTermResults?: IResultTable;\n}\n\nexport interface IRefiner {\n    Name: string;\n    Entries: { RefinementCount: string; RefinementName: string; RefinementToken: string; RefinementValue: string; }[];\n}\n\nexport interface IResultTable {\n    GroupTemplateId?: string;\n    ItemTemplateId?: string;\n    Properties?: { Key: string, Value: any, ValueType: string }[];\n    Table?: { Rows: { Cells: { Key: string, Value: any, ValueType: string }[] }[] };\n    Refiners?: IRefiner[];\n    ResultTitle?: string;\n    ResultTitleUrl?: string;\n    RowCount?: number;\n    TableType?: string;\n    TotalRows?: number;\n    TotalRowsIncludingDuplicates?: number;\n}\n\n/**\n * Defines how search results are sorted.\n */\nexport interface ISort {\n\n    /**\n     * The name for a property by which the search results are ordered.\n     */\n    Property: string;\n\n    /**\n     * The direction in which search results are ordered.\n     */\n    Direction: SortDirection;\n}\n\n/**\n * Defines one search property\n */\nexport interface ISearchProperty {\n    Name: string;\n    Value: ISearchPropertyValue;\n}\n\n/**\n * Defines one search property value. Set only one of StrlVal/BoolVal/IntVal/StrArray.\n */\nexport interface ISearchPropertyValue {\n    StrVal?: string;\n    BoolVal?: boolean;\n    IntVal?: number;\n    StrArray?: string[];\n    QueryPropertyValueTypeIndex: QueryPropertyValueType;\n}\n\n/**\n * defines the SortDirection enum\n */\nexport enum SortDirection {\n    Ascending = 0,\n    Descending = 1,\n    FQLFormula = 2,\n}\n\n/**\n * Defines how ReorderingRule interface, used for reordering results\n */\nexport interface IReorderingRule {\n\n    /**\n     * The value to match on\n     */\n    MatchValue: string;\n\n    /**\n     * The rank boosting\n     */\n    Boost: number;\n\n    /**\n    * The rank boosting\n    */\n    MatchType: ReorderingRuleMatchType;\n}\n\n/**\n * defines the ReorderingRuleMatchType  enum\n */\nexport enum ReorderingRuleMatchType {\n    ResultContainsKeyword = 0,\n    TitleContainsKeyword = 1,\n    TitleMatchesKeyword = 2,\n    UrlStartsWith = 3,\n    UrlExactlyMatches = 4,\n    ContentTypeIs = 5,\n    FileExtensionMatches = 6,\n    ResultHasTag = 7,\n    ManualCondition = 8,\n}\n\n/**\n * Specifies the type value for the property\n */\nexport enum QueryPropertyValueType {\n    None = 0,\n    StringType = 1,\n    Int32Type = 2,\n    BooleanType = 3,\n    StringArrayType = 4,\n    UnSupportedType = 5,\n}\n\nexport class SearchBuiltInSourceId {\n    public static readonly Documents = \"e7ec8cee-ded8-43c9-beb5-436b54b31e84\";\n    public static readonly ItemsMatchingContentType = \"5dc9f503-801e-4ced-8a2c-5d1237132419\";\n    public static readonly ItemsMatchingTag = \"e1327b9c-2b8c-4b23-99c9-3730cb29c3f7\";\n    public static readonly ItemsRelatedToCurrentUser = \"48fec42e-4a92-48ce-8363-c2703a40e67d\";\n    public static readonly ItemsWithSameKeywordAsThisItem = \"5c069288-1d17-454a-8ac6-9c642a065f48\";\n    public static readonly LocalPeopleResults = \"b09a7990-05ea-4af9-81ef-edfab16c4e31\";\n    public static readonly LocalReportsAndDataResults = \"203fba36-2763-4060-9931-911ac8c0583b\";\n    public static readonly LocalSharePointResults = \"8413cd39-2156-4e00-b54d-11efd9abdb89\";\n    public static readonly LocalVideoResults = \"78b793ce-7956-4669-aa3b-451fc5defebf\";\n    public static readonly Pages = \"5e34578e-4d08-4edc-8bf3-002acf3cdbcc\";\n    public static readonly Pictures = \"38403c8c-3975-41a8-826e-717f2d41568a\";\n    public static readonly Popular = \"97c71db1-58ce-4891-8b64-585bc2326c12\";\n    public static readonly RecentlyChangedItems = \"ba63bbae-fa9c-42c0-b027-9a878f16557c\";\n    public static readonly RecommendedItems = \"ec675252-14fa-4fbe-84dd-8d098ed74181\";\n    public static readonly Wiki = \"9479bf85-e257-4318-b5a8-81a180f5faa1\";\n}\n","import { _SharePointQueryableInstance, ISharePointQueryable } from \"../sharepointqueryable\";\nimport { hOP, IConfigOptions } from \"@pnp/common\";\nimport { defaultPath } from \"../decorators\";\nimport { tag } from \"../telemetry\";\n\n@defaultPath(\"_api/search/suggest\")\nexport class _Suggest extends _SharePointQueryableInstance {\n\n    @tag(\"su.execute\")\n    public async execute(query: ISuggestQuery): Promise<ISuggestResult> {\n\n        this.mapQueryToQueryString(query);\n\n        const response = await this.get();\n        const mapper = hOP(response, \"suggest\") ? (s_1: string) => response.suggest[s_1].results : (s_2: string) => response[s_2];\n\n        return {\n            PeopleNames: mapper(\"PeopleNames\"),\n            PersonalResults: mapper(\"PersonalResults\"),\n            Queries: mapper(\"Queries\"),\n        };\n    }\n\n    private mapQueryToQueryString(query: ISuggestQuery): void {\n\n        const setProp = (q: ISuggestQuery) => (checkProp: string) => (sp: string) => {\n            if (hOP(q, checkProp)) {\n                this.query.set(sp, q[checkProp].toString());\n            }\n        };\n\n        this.query.set(\"querytext\", `'${query.querytext}'`);\n\n        const querySetter = setProp(query);\n\n        querySetter(\"count\")(\"inumberofquerysuggestions\");\n        querySetter(\"personalCount\")(\"inumberofresultsuggestions\");\n        querySetter(\"preQuery\")(\"fprequerysuggestions\");\n        querySetter(\"hitHighlighting\")(\"fhithighlighting\");\n        querySetter(\"capitalize\")(\"fcapitalizefirstletters\");\n        querySetter(\"culture\")(\"culture\");\n        querySetter(\"stemming\")(\"enablestemming\");\n        querySetter(\"includePeople\")(\"showpeoplenamesuggestions\");\n        querySetter(\"queryRules\")(\"enablequeryrules\");\n        querySetter(\"prefixMatch\")(\"fprefixmatchallterms\");\n    }\n}\n\nexport interface ISuggest {\n    (query: ISuggestQuery): Promise<ISuggestResult>;\n}\n\nexport const Suggest = (baseUrl: string | ISharePointQueryable, options: IConfigOptions = {}): ISuggest => (query: ISuggestQuery) => {\n    return (new _Suggest(baseUrl)).configure(options).execute(query);\n};\n\n/**\n * Defines a query execute against the search/suggest endpoint (see https://msdn.microsoft.com/en-us/library/office/dn194079.aspx)\n */\nexport interface ISuggestQuery {\n\n    [key: string]: string | number | boolean;\n\n    /**\n     * A string that contains the text for the search query.\n     */\n    querytext: string;\n\n    /**\n     * The number of query suggestions to retrieve. Must be greater than zero (0). The default value is 5.\n     */\n    count?: number;\n\n    /**\n     * The number of personal results to retrieve. Must be greater than zero (0). The default value is 5.\n     */\n    personalCount?: number;\n\n    /**\n     * A Boolean value that specifies whether to retrieve pre-query or post-query suggestions. true to return pre-query suggestions; otherwise, false. The default value is false.\n     */\n    preQuery?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to hit-highlight or format in bold the query suggestions. true to format in bold the terms in the returned query suggestions\n     * that match terms in the specified query; otherwise, false. The default value is true.\n     */\n    hitHighlighting?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to capitalize the first letter in each term in the returned query suggestions. true to capitalize the first letter in each term;\n     * otherwise, false. The default value is false.\n     */\n    capitalize?: boolean;\n\n    /**\n     * The locale ID (LCID) for the query (see https://msdn.microsoft.com/en-us/library/cc233982.aspx).\n     */\n    culture?: string;\n\n    /**\n     * A Boolean value that specifies whether stemming is enabled. true to enable stemming; otherwise, false. The default value is true.\n     */\n    stemming?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to include people names in the returned query suggestions. true to include people names in the returned query suggestions;\n     * otherwise, false. The default value is true.\n     */\n    includePeople?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to turn on query rules for this query. true to turn on query rules; otherwise, false. The default value is true.\n     */\n    queryRules?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to return query suggestions for prefix matches. true to return query suggestions based on prefix matches, otherwise, false when\n     * query suggestions should match the full query word.\n     */\n    prefixMatch?: boolean;\n}\n\nexport interface ISuggestResult {\n    readonly PeopleNames: string[];\n    readonly PersonalResults: IPersonalResultSuggestion[];\n    readonly Queries: any[];\n}\n\nexport interface IPersonalResultSuggestion {\n    readonly HighlightedTitle?: string;\n    readonly IsBestBet?: boolean;\n    readonly Title?: string;\n    readonly TypeId?: string;\n    readonly Url?: string;\n}\n","import { SPRest } from \"../rest\";\nimport { SearchQueryInit } from \"./types\";\nimport { _Search } from \"./query\";\nimport { ICachingOptions } from \"@pnp/odata\";\nimport { SearchResults, Search } from \"./query\";\nimport { ISuggestQuery, ISuggestResult, Suggest } from \"./suggest\";\n\nexport * from \"./types\";\n\nexport {\n    ISearch,\n    SearchQueryBuilder,\n    SearchResults,\n    Search,\n} from \"./query\";\n\nexport {\n    ISuggest,\n    IPersonalResultSuggestion,\n    ISuggestQuery,\n    ISuggestResult,\n    Suggest,\n} from \"./suggest\";\n\ndeclare module \"../rest\" {\n    interface SPRest {\n        /**\n         * Conduct a search\n         * \n         * @param query Parameters for the search\n         */\n        search(query: SearchQueryInit): Promise<SearchResults>;\n        /**\n         * Conduct a search with caching enabled\n         * \n         * @param query Parameters for the search\n         * @param options Optional, caching options\n         */\n        searchWithCaching(query: SearchQueryInit, options?: ICachingOptions): Promise<SearchResults>;\n        /**\n         * Conduct a suggest search query\n         * \n         * @param query Parameters for the search\n         */\n        searchSuggest(query: string | ISuggestQuery): Promise<ISuggestResult>;\n    }\n}\n\nSPRest.prototype.search = function (this: SPRest, query: SearchQueryInit): Promise<SearchResults> {\n\n    return Search(this._baseUrl, this._options)(query);\n};\n\nSPRest.prototype.searchWithCaching = function (this: SPRest, query: SearchQueryInit, options?: ICachingOptions): Promise<SearchResults> {\n\n    return (new _Search(this._baseUrl, null)).configure(this._options).usingCaching(options).execute(query);\n};\n\nSPRest.prototype.searchSuggest = function (this: SPRest, query: string | ISuggestQuery): Promise<ISuggestResult> {\n\n    return Suggest(this._baseUrl, this._options)(typeof query === \"string\" ? { querytext: query } : query);\n};\n","import {\n    _SharePointQueryableInstance,\n    _SharePointQueryableCollection,\n    spInvokableFactory,\n    IDeleteable,\n    deleteable,\n} from \"../sharepointqueryable\";\nimport { SiteGroups, ISiteGroups } from \"../site-groups/types\";\nimport { ITypedHash, assign } from \"@pnp/common\";\nimport { metadata } from \"../utils/metadata\";\nimport { body } from \"@pnp/odata\";\nimport { defaultPath } from \"../decorators\";\nimport { spPost } from \"../operations\";\nimport { PrincipalType } from \"../types\";\nimport { tag } from \"../telemetry\";\n\n@defaultPath(\"siteusers\")\nexport class _SiteUsers extends _SharePointQueryableCollection<ISiteUserInfo[]> {\n\n    /**\n     * Gets a user from the collection by id\n     *\n     * @param id The id of the user to retrieve\n     */\n    public getById(id: number): ISiteUser {\n        return tag.configure(SiteUser(this, `getById(${id})`), \"sus.getById\");\n    }\n\n    /**\n     * Gets a user from the collection by email\n     *\n     * @param email The email address of the user to retrieve\n     */\n    public getByEmail(email: string): ISiteUser {\n        return tag.configure(SiteUser(this, `getByEmail('${email}')`), \"sus.getByEmail\");\n    }\n\n    /**\n     * Gets a user from the collection by login name\n     *\n     * @param loginName The login name of the user to retrieve\n     */\n    public getByLoginName(loginName: string): ISiteUser {\n        return tag.configure(SiteUser(this).concat(`('!@v::${encodeURIComponent(loginName)}')`), \"sus.getByLoginName\");\n    }\n\n    /**\n     * Removes a user from the collection by id\n     *\n     * @param id The id of the user to remove\n     */\n    @tag(\"sus.remId\")\n    public removeById(id: number): Promise<any> {\n        return spPost(this.clone(SiteUsers, `removeById(${id})`));\n    }\n\n    /**\n     * Removes a user from the collection by login name\n     *\n     * @param loginName The login name of the user to remove\n     */\n    @tag(\"sus.remLoginName\")\n    public removeByLoginName(loginName: string): Promise<any> {\n        const o = this.clone(SiteUsers, `removeByLoginName(@v)`);\n        o.query.set(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return spPost(o);\n    }\n\n    /**\n     * Adds a user to a site collection\n     *\n     * @param loginName The login name of the user to add  to a site collection\n     *\n     */\n    @tag(\"sus.add\")\n    public async add(loginName: string): Promise<ISiteUser> {\n        await spPost(this, body(assign(metadata(\"SP.User\"), { LoginName: loginName })));\n        return this.getByLoginName(loginName);\n    }\n}\nexport interface ISiteUsers extends _SiteUsers { }\nexport const SiteUsers = spInvokableFactory<ISiteUsers>(_SiteUsers);\n\n/**\n * Describes a single user\n *\n */\nexport class _SiteUser extends _SharePointQueryableInstance<ISiteUserInfo> {\n\n    public delete = deleteable(\"su\");\n\n    /**\n     * Gets the groups for this user\n     *\n     */\n    public get groups(): ISiteGroups {\n        return tag.configure(SiteGroups(this, \"groups\"), \"su.groups\");\n    }\n\n    /**\n    * Updates this user instance with the supplied properties\n    *\n    * @param properties A plain object of property names and values to update for the user\n    */\n    public update: (props: ITypedHash<any>) => Promise<IUserUpdateResult> = this._update<IUserUpdateResult, ITypedHash<any>>(\"SP.User\", data => ({ data, user: <any>this }));\n}\nexport interface ISiteUser extends _SiteUser, IDeleteable { }\nexport const SiteUser = spInvokableFactory<ISiteUser>(_SiteUser);\n\nexport interface ISiteUserInfo extends ISiteUserProps {\n\n    Expiration: string;\n    IsEmailAuthenticationGuestUser: boolean;\n    UserId: {\n        NameId: string;\n        NameIdIssuer: string;\n    };\n    UserPrincipalName: string | null;\n}\n\n/**\n * Describes a single user properties\n *\n */\nexport interface ISiteUserProps {\n\n    /**\n     * Contains Site user email\n     * \n     */\n    Email: string;\n\n    /**\n     * Contains Site user Id\n     * \n     */\n    Id: number;\n\n    /**\n     * Site user IsHiddenInUI\n     * \n     */\n    IsHiddenInUI: boolean;\n\n    /**\n     * Site user IsShareByEmailGuestUser \n     * \n     */\n    IsShareByEmailGuestUser: boolean;\n\n    /**\n     * Describes if Site user Is Site Admin \n     * \n     */\n    IsSiteAdmin: boolean;\n\n    /**\n     * Site user LoginName\n     * \n     */\n    LoginName: string;\n\n    /**\n     * Site user Principal type\n     * \n     */\n    PrincipalType: number | PrincipalType;\n\n    /**\n     * Site user Title\n     * \n     */\n    Title: string;\n}\n\n/**\n * Properties that provide both a getter, and a setter.\n *\n */\nexport interface IUserUpdateResult {\n    user: ISiteUser;\n    data: any;\n}\n\n/**\n * Result from ensuring a user\n *\n */\nexport interface IWebEnsureUserResult {\n    data: ISiteUserProps;\n    user: ISiteUser;\n}\n","import { assign, hOP } from \"@pnp/common\";\nimport { body, headers } from \"@pnp/odata\";\nimport {\n    _SharePointQueryableInstance,\n    SharePointQueryableCollection,\n    ISharePointQueryableCollection,\n    _SharePointQueryableCollection,\n    spInvokableFactory,\n    IDeleteable,\n    deleteable,\n} from \"../sharepointqueryable\";\nimport { SiteGroups, ISiteGroups } from \"../site-groups/types\";\nimport { metadata } from \"../utils/metadata\";\nimport { defaultPath } from \"../decorators\";\nimport { spPost } from \"../operations\";\nimport { tag } from \"../telemetry\";\n\nexport type SecurableQueryable = _SharePointQueryableInstance & ISecurableMethods;\n\n/**\n * Describes a set of role assignments for the current scope\n *\n */\n@defaultPath(\"roleassignments\")\nexport class _RoleAssignments extends _SharePointQueryableCollection<IRoleAssignmentInfo[]> {\n\n    /**\t\n     * Gets the role assignment associated with the specified principal id from the collection.\t\n     *\t\n     * @param id The id of the role assignment\t\n     */\n    public getById(id: number): IRoleAssignment {\n        return RoleAssignment(this).concat(`(${id})`);\n    }\n\n    /**\n     * Adds a new role assignment with the specified principal and role definitions to the collection\n     *\n     * @param principalId The id of the user or group to assign permissions to\n     * @param roleDefId The id of the role definition that defines the permissions to assign\n     *\n     */\n    public async add(principalId: number, roleDefId: number): Promise<void> {\n        await spPost(this.clone(RoleAssignments, `addroleassignment(principalid=${principalId}, roledefid=${roleDefId})`));\n    }\n\n    /**\n     * Removes the role assignment with the specified principal and role definition from the collection\n     *\n     * @param principalId The id of the user or group in the role assignment\n     * @param roleDefId The id of the role definition in the role assignment\n     *\n     */\n    public async remove(principalId: number, roleDefId: number): Promise<void> {\n        await spPost(this.clone(RoleAssignments, `removeroleassignment(principalid=${principalId}, roledefid=${roleDefId})`));\n    }\n}\nexport interface IRoleAssignments extends _RoleAssignments { }\nexport const RoleAssignments = spInvokableFactory<IRoleAssignments>(_RoleAssignments);\n\n/**\n * Describes a role assignment\n *\n */\nexport class _RoleAssignment extends _SharePointQueryableInstance<IRoleAssignmentInfo> {\n\n    public delete = deleteable(\"ra\");\n\n    /**\n     * Gets the groups that directly belong to the access control list (ACL) for this securable object\n     *\n     */\n    public get groups(): ISiteGroups {\n        return tag.configure(SiteGroups(this, \"groups\"), \"ra.groups\");\n    }\n\n    /**\n     * Gets the role definition bindings for this role assignment\n     *\n     */\n    public get bindings(): ISharePointQueryableCollection {\n        return SharePointQueryableCollection(this, \"roledefinitionbindings\");\n    }\n}\nexport interface IRoleAssignment extends _RoleAssignment, IDeleteable { }\nexport const RoleAssignment = spInvokableFactory<IRoleAssignment>(_RoleAssignment);\n\n/**\n * Describes a collection of role definitions\n *\n */\n@defaultPath(\"roledefinitions\")\nexport class _RoleDefinitions extends _SharePointQueryableCollection<IRoleDefinitionInfo[]> {\n\n    /**\t   \n     * Gets the role definition with the specified id from the collection\t    \n     *\t     \n     * @param id The id of the role definition\t     \n     *\t     \n     */\n    public getById(id: number): IRoleDefinition {\n        return RoleDefinition(this, `getById(${id})`);\n    }\n\n    /**\n     * Gets the role definition with the specified name\n     *\n     * @param name The name of the role definition\n     *\n     */\n    public getByName(name: string): IRoleDefinition {\n        return RoleDefinition(this, `getbyname('${name}')`);\n    }\n\n    /**\n     * Gets the role definition with the specified role type\n     *\n     * @param roleTypeKind The roletypekind of the role definition (None=0, Guest=1, Reader=2, Contributor=3, WebDesigner=4, Administrator=5, Editor=6, System=7)\n     *\n     */\n    public getByType(roleTypeKind: RoleTypeKind): IRoleDefinition {\n        return RoleDefinition(this, `getbytype(${roleTypeKind})`);\n    }\n\n    /**\n     * Creates a role definition\n     *\n     * @param name The new role definition's name\n     * @param description The new role definition's description\n     * @param order The order in which the role definition appears\n     * @param basePermissions The permissions mask for this role definition\n     *\n     */\n    public async add(name: string, description: string, order: number, basePermissions: IBasePermissions): Promise<IRoleDefinitionAddResult> {\n\n        const postBody = body({\n            BasePermissions: assign(metadata(\"SP.BasePermissions\"), basePermissions),\n            Description: description,\n            Name: name,\n            Order: order,\n            __metadata: { \"type\": \"SP.RoleDefinition\" },\n        });\n\n        const data = await spPost(this, postBody);\n\n        return {\n            data: data,\n            definition: this.getById(data.Id),\n        };\n    }\n}\nexport interface IRoleDefinitions extends _RoleDefinitions { }\nexport const RoleDefinitions = spInvokableFactory<IRoleDefinitions>(_RoleDefinitions);\n\n/**\n * Describes a role definition\n *\n */\nexport class _RoleDefinition extends _SharePointQueryableInstance<IRoleDefinitionInfo> {\n\n    public delete = deleteable(\"rd\");\n\n    /**\n     * Updates this role definition with the supplied properties\n     *\n     * @param properties A plain object hash of values to update for the role definition\n     */\n    /* tslint:disable no-string-literal */\n    public async update(properties: Partial<IRoleDefinitionInfo>): Promise<IRoleDefinitionUpdateResult> {\n\n        const s = [\"BasePermissions\"];\n        if (hOP(properties, s[0]) !== undefined) {\n            properties[s[0]] = assign(metadata(`SP.${s[0]}`), properties[s[0]]);\n        }\n\n        const postBody = body(assign(metadata(\"SP.RoleDefinition\"), properties), headers({ \"X-HTTP-Method\": \"MERGE\" }));\n\n        const data = await spPost(this, postBody);\n\n        let definition: IRoleDefinition = <any>this;\n        if (hOP(properties, \"Name\")) {\n            const parent = this.getParent<IRoleDefinitions>(RoleDefinitions, this.parentUrl, \"\");\n            definition = parent.getByName((<string>properties[\"Name\"]));\n        }\n        return {\n            data,\n            definition,\n        };\n    }\n    /* tslint:enable */\n}\nexport interface IRoleDefinition extends _RoleDefinition, IDeleteable { }\nexport const RoleDefinition = spInvokableFactory<IRoleDefinition>(_RoleDefinition);\n\nexport interface ISecurableMethods {\n    readonly roleAssignments: IRoleAssignments;\n    readonly firstUniqueAncestorSecurableObject: _SharePointQueryableInstance;\n    getUserEffectivePermissions(loginName: string): Promise<IBasePermissions>;\n    getCurrentUserEffectivePermissions(): Promise<IBasePermissions>;\n    breakRoleInheritance(copyRoleAssignments?: boolean, clearSubscopes?: boolean): Promise<any>;\n    resetRoleInheritance(): Promise<any>;\n    userHasPermissions(loginName: string, permission: PermissionKind): Promise<boolean>;\n    currentUserHasPermissions(permission: PermissionKind): Promise<boolean>;\n    hasPermissions(value: IBasePermissions, perm: PermissionKind): boolean;\n}\n\n/**\n * Result from updating a role definition\n *\n */\nexport interface IRoleDefinitionUpdateResult {\n    definition: IRoleDefinition;\n    data: any;\n}\n\n/**\n * Result from adding a role definition\n *\n */\nexport interface IRoleDefinitionAddResult {\n    definition: IRoleDefinition;\n    data: any;\n}\n\nexport interface IBasePermissions {\n    Low: number;\n    High: number;\n}\n\nexport interface IRoleAssignmentInfo {\n    PrincipalId: number;\n}\n\nexport interface IRoleDefinitionInfo {\n    BasePermissions: IBasePermissions;\n    Description: string;\n    Hidden: boolean;\n    Id: number;\n    Name: string;\n    Order: number;\n    RoleTypeKind: RoleTypeKind;\n}\n\nexport type RoleTypeKind = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;\n\nexport enum PermissionKind {\n\n    /**\n     * Has no permissions on the Site. Not available through the user interface.\n     */\n    EmptyMask = 0,\n\n    /**\n     * View items in lists, documents in document libraries, and Web discussion comments.\n     */\n    ViewListItems = 1,\n\n    /**\n     * Add items to lists, documents to document libraries, and Web discussion comments.\n     */\n    AddListItems = 2,\n\n    /**\n     * Edit items in lists, edit documents in document libraries, edit Web discussion comments\n     * in documents, and customize Web Part Pages in document libraries.\n     */\n    EditListItems = 3,\n\n    /**\n     * Delete items from a list, documents from a document library, and Web discussion\n     * comments in documents.\n     */\n    DeleteListItems = 4,\n\n    /**\n     * Approve a minor version of a list item or document.\n     */\n    ApproveItems = 5,\n\n    /**\n     * View the source of documents with server-side file handlers.\n     */\n    OpenItems = 6,\n\n    /**\n     * View past versions of a list item or document.\n     */\n    ViewVersions = 7,\n\n    /**\n     * Delete past versions of a list item or document.\n     */\n    DeleteVersions = 8,\n\n    /**\n     * Discard or check in a document which is checked out to another user.\n     */\n    CancelCheckout = 9,\n\n    /**\n     * Create, change, and delete personal views of lists.\n     */\n    ManagePersonalViews = 10,\n\n    /**\n     * Create and delete lists, add or remove columns in a list, and add or remove public views of a list.\n     */\n    ManageLists = 12,\n\n    /**\n     * View forms, views, and application pages, and enumerate lists.\n     */\n    ViewFormPages = 13,\n\n    /**\n     * Make content of a list or document library retrieveable for anonymous users through SharePoint search.\n     * The list permissions in the site do not change.\n     */\n    AnonymousSearchAccessList = 14,\n\n    /**\n     * Allow users to open a Site, list, or folder to access items inside that container.\n     */\n    Open = 17,\n\n    /**\n     * View pages in a Site.\n     */\n    ViewPages = 18,\n\n    /**\n     * Add, change, or delete HTML pages or Web Part Pages, and edit the Site using\n     * a Windows SharePoint Services compatible editor.\n     */\n    AddAndCustomizePages = 19,\n\n    /**\n     * Apply a theme or borders to the entire Site.\n     */\n    ApplyThemeAndBorder = 20,\n\n    /**\n     * Apply a style sheet (.css file) to the Site.\n     */\n    ApplyStyleSheets = 21,\n\n    /**\n     * View reports on Site usage.\n     */\n    ViewUsageData = 22,\n\n    /**\n     * Create a Site using Self-Service Site Creation.\n     */\n    CreateSSCSite = 23,\n\n    /**\n     * Create subsites such as team sites, Meeting Workspace sites, and Document Workspace sites.\n     */\n    ManageSubwebs = 24,\n\n    /**\n     * Create a group of users that can be used anywhere within the site collection.\n     */\n    CreateGroups = 25,\n\n    /**\n     * Create and change permission levels on the Site and assign permissions to users\n     * and groups.\n     */\n    ManagePermissions = 26,\n\n    /**\n     * Enumerate files and folders in a Site using Microsoft Office SharePoint Designer\n     * and WebDAV interfaces.\n     */\n    BrowseDirectories = 27,\n\n    /**\n     * View information about users of the Site.\n     */\n    BrowseUserInfo = 28,\n\n    /**\n     * Add or remove personal Web Parts on a Web Part Page.\n     */\n    AddDelPrivateWebParts = 29,\n\n    /**\n     * Update Web Parts to display personalized information.\n     */\n    UpdatePersonalWebParts = 30,\n\n    /**\n     * Grant the ability to perform all administration tasks for the Site as well as\n     * manage content, activate, deactivate, or edit properties of Site scoped Features\n     * through the object model or through the user interface (UI). When granted on the\n     * root Site of a Site Collection, activate, deactivate, or edit properties of\n     * site collection scoped Features through the object model. To browse to the Site\n     * Collection Features page and activate or deactivate Site Collection scoped Features\n     * through the UI, you must be a Site Collection administrator.\n     */\n    ManageWeb = 31,\n\n    /**\n     * Content of lists and document libraries in the Web site will be retrieveable for anonymous users through\n     * SharePoint search if the list or document library has AnonymousSearchAccessList set.\n     */\n    AnonymousSearchAccessWebLists = 32,\n\n    /**\n     * Use features that launch client applications. Otherwise, users must work on documents\n     * locally and upload changes.\n     */\n    UseClientIntegration = 37,\n\n    /**\n     * Use SOAP, WebDAV, or Microsoft Office SharePoint Designer interfaces to access the Site.\n     */\n    UseRemoteAPIs = 38,\n\n    /**\n     * Manage alerts for all users of the Site.\n     */\n    ManageAlerts = 39,\n\n    /**\n     * Create e-mail alerts.\n     */\n    CreateAlerts = 40,\n\n    /**\n     * Allows a user to change his or her user information, such as adding a picture.\n     */\n    EditMyUserInfo = 41,\n\n    /**\n     * Enumerate permissions on Site, list, folder, document, or list item.\n     */\n    EnumeratePermissions = 63,\n\n    /**\n     * Has all permissions on the Site. Not available through the user interface.\n     */\n    FullMask = 65,\n}\n","import { IPrincipalInfo } from \"../types\";\nimport { _Web } from \"../webs/types\";\nimport { _File } from \"../files/types\";\nimport { _Item } from \"../items/types\";\nimport { _Folder } from \"../folders/types\";\n\nexport type ShareableQueryable = _Web | _File | _Folder | _Item;\n\n/**\n * Indicates the role of the sharing link\n */\nexport enum SharingRole {\n    None = 0,\n    View = 1,\n    Edit = 2,\n    Owner = 3,\n}\n\nexport enum SPSharedObjectType {\n    Unknown = 0,\n    File = 1,\n    Folder = 2,\n    Item = 3,\n    List = 4,\n    Web = 5,\n    Max = 6,\n}\n\nexport enum SharingDomainRestrictionMode {\n    None = 0,\n    AllowList = 1,\n    BlockList = 2,\n}\n\nexport enum SharingOperationStatusCode {\n    /**\n     * The share operation completed without errors.\n     */\n    CompletedSuccessfully = 0,\n    /**\n     * The share operation completed and generated requests for access.\n     */\n    AccessRequestsQueued = 1,\n    /**\n     * The share operation failed as there were no resolved users.\n     */\n    NoResolvedUsers = -1,\n    /**\n     * The share operation failed due to insufficient permissions.\n     */\n    AccessDenied = -2,\n    /**\n     * The share operation failed when attempting a cross site share, which is not supported.\n     */\n    CrossSiteRequestNotSupported = -3,\n    /**\n     * The sharing operation failed due to an unknown error.\n     */\n    UnknowError = -4,\n    /**\n     * The text you typed is too long. Please shorten it.\n     */\n    EmailBodyTooLong = -5,\n    /**\n     * The maximum number of unique scopes in the list has been exceeded.\n     */\n    ListUniqueScopesExceeded = -6,\n    /**\n     * The share operation failed because a sharing capability is disabled in the site.\n     */\n    CapabilityDisabled = -7,\n    /**\n     * The specified object for the share operation is not supported.\n     */\n    ObjectNotSupported = -8,\n    /**\n     * A SharePoint group cannot contain another SharePoint group.\n     */\n    NestedGroupsNotSupported = -9,\n}\n\nexport enum SharingLinkKind {\n    /**\n     * Uninitialized link\n     */\n    Uninitialized = 0,\n    /**\n     * Direct link to the object being shared\n     */\n    Direct = 1,\n    /**\n     * Organization-shareable link to the object being shared with view permissions\n     */\n    OrganizationView = 2,\n    /**\n     * Organization-shareable link to the object being shared with edit permissions\n     */\n    OrganizationEdit = 3,\n    /**\n     * View only anonymous link\n     */\n    AnonymousView = 4,\n    /**\n     * Read/Write anonymous link\n     */\n    AnonymousEdit = 5,\n    /**\n     * Flexible sharing Link where properties can change without affecting link URL\n     */\n    Flexible = 6,\n}\n\nexport interface ISharedFuncs {\n    /**\n     * Gets a link suitable for sharing for this item\n     *\n     * @param kind The type of link to share\n     * @param expiration The optional expiration date\n     */\n    getShareLink(kind: SharingLinkKind, expiration?: Date): Promise<IShareLinkResponse>;\n    /**\n     * Checks Permissions on the list of Users and returns back role the users have on the Item.\n     *\n     * @param recipients The array of Entities for which Permissions need to be checked.\n     */\n    checkSharingPermissions(recipients: ISharingRecipient[]): Promise<ISharingEntityPermission[]>;\n    /**\n     * Get Sharing Information.\n     *\n     * @param request The SharingInformationRequest Object.\n     * @param expands Expand more fields.\n     * \n     */\n    getSharingInformation(request?: ISharingInformationRequest, expands?: string[]): Promise<ISharingInformation>;\n    /**\n     * Gets the sharing settings of an item.\n     *\n     * @param useSimplifiedRoles Determines whether to use simplified roles.\n     */\n    getObjectSharingSettings(useSimplifiedRoles?: boolean): Promise<IObjectSharingSettings>;\n    /**\n     * Unshare this item\n     */\n    unshare(): Promise<ISharingResult>;\n    /**\n     * Deletes a sharing link by kind\n     *\n     * @param kind Deletes a sharing link by the kind of link\n     */\n    deleteSharingLinkByKind(kind: SharingLinkKind): Promise<void>;\n    /**\n     * Removes the specified link to the item.\n     *\n     * @param kind The kind of link to be deleted.\n     * @param shareId\n     */\n    unshareLink(kind: SharingLinkKind, shareId?: string): Promise<void>;\n}\n\nexport interface IShareObjectOptions {\n    url?: string;\n    loginNames?: string | string[];\n    role: SharingRole;\n    emailData?: ISharingEmailData;\n    group?: RoleType;\n    propagateAcl?: boolean;\n    includeAnonymousLinkInEmail?: boolean;\n    useSimplifiedRoles?: boolean;\n}\n\n/**\n * Represents email data.\n */\nexport interface ISharingEmailData {\n\n    /**\n     * The e-mail subject.\n     */\n    subject?: string;\n\n    /**\n     * The e-mail body.\n     */\n    body: string;\n}\n\nexport interface IShareLinkSettings {\n    /**\n     * The optional unique identifier of an existing sharing link to be retrieved and updated if necessary.\n     */\n    shareId?: string;\n\n    /**\n     * The kind of the sharing link to be created.\n     */\n    linkKind: SharingLinkKind;\n\n    /**\n     * A date/time string for which the format conforms to the ISO 8601:2004(E) complete representation for calendar date and time of day and\n     * which represents the time and date of expiry for the anonymous link. Both the minutes and hour value must be specified for the\n     * difference between the local and UTC time. Midnight is represented as 00:00:00.\n     */\n    expiration?: string;\n\n    /**\n     * The role to be used for the sharing link. This is required for Flexible links, and ignored for legacy link kinds.\n     */\n    role?: SharingRole;\n\n    /**\n     * Indicates if the sharing link, should support anonymous access. This is required for Flexible links, and ignored for legacy link kinds.\n     */\n    allowAnonymousAccess?: boolean;\n}\n\nexport interface IShareLinkRequest {\n\n    /**\n     * A string of JSON representing users in people picker format. Only needed if an e-mail notification should be sent.\n     */\n    peoplePickerInput?: string;\n\n    /**\n     * Whether to create the link or not if it doesn't exist yet.\n     */\n    createLink: boolean;\n\n    /**\n     * The e-mail data. Only needed if an e-mail notification should be sent.\n     */\n    emailData?: ISharingEmailData;\n\n    /**\n     * The settings for the sharing link to be created/updated\n     */\n    settings: IShareLinkSettings;\n}\n\n/**\n * Represents a response for sharing a link\n */\nexport interface IShareLinkResponse {\n    /**\n     * A SharingLinkInfo that represents the sharing link. Will be populated if sharing operation is returning a sharing link.\n     */\n    sharingLinkInfo: ISharingLinkInfo;\n}\n\nexport interface ISharingLinkInfo {\n\n    AllowsAnonymousAccess: boolean;\n    Created: string;\n    CreatedBy: IPrincipalInfo;\n    Expiration: string;\n    IsActive: boolean;\n    IsEditLink: boolean;\n    IsFormsLink: boolean;\n    IsUnhealthy: boolean;\n    LastModified: string;\n    LastModifiedBy: IPrincipalInfo;\n    LinkKind: SharingLinkKind;\n    ShareId: string;\n    Url: string;\n}\n\nexport interface ISharingResult {\n\n    /**\n     * The relative URL of a page which can be navigated to, to show permissions.\n     */\n    PermissionsPageRelativeUrl?: string;\n\n    /**\n     * A collection of users which have new pending access requests as a result of sharing.\n     */\n    UsersWithAccessRequests?: any[]; // SPSharingUserCollection\n\n    /**\n     * An enumeration which summarizes the result of the sharing operation.\n     */\n    StatusCode?: SharingOperationStatusCode;\n\n    /**\n     * An error message about the failure if sharing was unsuccessful.\n     */\n    ErrorMessage?: string;\n\n    /**\n     * A list of UserSharingResults from attempting to share a securable with unique permissions.\n     */\n    UniquelyPermissionedUsers?: IUserSharingResult[];\n    /**\n     * Groups which were granted permissions.\n     */\n    GroupsSharedWith?: any[]; // SPGroupCollection\n\n    /**\n     * The SharePoint group users were added to, if any were added to a group.\n     */\n    GroupUsersAddedTo?: any; // SPGroup\n\n    /**\n     * A list of users being added to a SharePoint permissions goup\n     */\n    UsersAddedToGroup?: IUserSharingResult[];\n\n    /**\n     * A list of SPInvitationCreationResult for external users being invited to have access.\n     */\n    InvitedUsers?: IInvitationCreationResult[];\n\n    /**\n     * The name of the securable being shared.\n     */\n    Name?: string;\n\n    /**\n     * The url of the securable being shared.\n     */\n    Url?: string;\n\n    /**\n     * IconUrl\n     */\n    IconUrl?: string;\n}\n\nexport interface IInvitationCreationResult {\n    Succeeded?: boolean;\n    Email?: string;\n    InvitationLink?: string;\n}\n\nexport interface IUserSharingResult {\n    IsUserKnown?: boolean;\n    Status?: boolean;\n    Message?: string;\n    User?: string;\n    DisplayName?: string;\n    Email?: string;\n    CurrentRole?: SharingRole;\n    AllowedRoles?: SharingRole[];\n    InvitationLink?: string;\n}\n\nexport interface ISharingRecipient {\n    email?: string;\n    alias?: string;\n}\n\nexport interface ISharingEntityPermission {\n    /**\n     * The Input Entity provided to the Call.\n     */\n    inputEntity: string;\n    /**\n     * The Resolved Entity after resolving using PeoplePicker API.\n     */\n    resolvedEntity: string;\n    /**\n     * Does the Entity have Access to the Securable Object\n     */\n    hasAccess: boolean;\n    /**\n     * Role of the Entity on ListItem\n     */\n    role: SharingRole;\n}\n\nexport interface ISharingInformationRequest {\n    /**\n     * Max Principal's to return.\n     */\n    maxPrincipalsToReturn: number;\n    /**\n     * Supported Features (For future use by Office Client).\n     */\n    clientSupportedFeatures: string;\n}\n\nexport interface IObjectSharingSettings {\n    /**\n     * The URL pointing to the containing SPWeb object\n     */\n    WebUrl: string;\n    /**\n     * The unique ID of the parent list (if applicable)\n     */\n    ListId?: string;\n    /**\n     * The list item ID (if applicable)\n     */\n    ItemId?: string;\n    /**\n     * The object title\n     */\n    ItemName: string;\n    /**\n     * The server relative object URL\n     */\n    ItemUrl: string;\n    /**\n     * Contains information about the sharing state of a shareable object\n     */\n    ObjectSharingInformation: any; // SPObjectSharingInformation\n    /**\n     * Boolean indicating whether the sharing context operates under the access request mode\n     */\n    AccessRequestMode: boolean;\n    /**\n     * Boolean indicating whether the sharing context operates under the permissions only mode\n     * (i.e. adding to a group or hiding the groups dropdown in the SharePoint UI)\n     */\n    PermissionsOnlyMode: boolean;\n    /**\n     * URL of the site from which the shared object inherits permissions\n     */\n    InheritingWebLink: string;\n    /**\n     * Boolean flag denoting if guest users are enabled for the site collection\n     */\n    ShareByEmailEnabled: boolean;\n    /**\n     * Boolean indicating whether the current user is a guest user\n     */\n    IsGuestUser: boolean;\n    /**\n     * Boolean indicating whether the site has the standard \"Editor\" role\n     */\n    HasEditRole: boolean;\n    /**\n     * Boolean indicating whether the site has the standard \"Reader\" role\n     */\n    HasReadRole: boolean;\n    /**\n     * Boolean indicating whether the object to share is a picture library\n     */\n    IsPictureLibrary: boolean;\n    /**\n     * Boolean indicating whether the folder object can be shared\n     */\n    CanShareFolder: boolean;\n    /**\n     * Boolean indicating whether email invitations can be sent\n     */\n    CanSendEmail: boolean;\n    /**\n     * Default share link type\n     */\n    DefaultShareLinkType: SharingLinkKind;\n    /**\n     * Boolean indicating whether the object to share supports ACL propagation\n     */\n    SupportsAclPropagation: boolean;\n    /**\n     * Boolean indicating whether the current user can only share within the tenancy\n     */\n    CanCurrentUserShareInternally: boolean;\n    /**\n     * Boolean indicating whether the current user can share outside the tenancy, by inviting external users\n     */\n    CanCurrentUserShareExternally: boolean;\n    /**\n     * Boolean indicating whether the current user can retrieve an anonymous View link, if one has already been created\n     * If one has not been created, the user cannot create one\n     */\n    CanCurrentUserRetrieveReadonlyLink: boolean;\n    /**\n     * Boolean indicating whether the current user can create or disable an anonymous Edit link\n     */\n    CanCurrentUserManageReadonlyLink: boolean;\n    /**\n     * Boolean indicating whether the current user can retrieve an anonymous Edit link, if one has already been created\n     * If one has not been created, the user cannot create one\n     */\n    CanCurrentUserRetrieveReadWriteLink: boolean;\n    /**\n     * Boolean indicating whether the current user can create or disable an anonymous Edit link\n     */\n    CanCurrentUserManageReadWriteLink: boolean;\n    /**\n     * Boolean indicating whether the current user can retrieve an organization View link, if one has already been created\n     * If one has not been created, the user cannot create one\n     */\n    CanCurrentUserRetrieveOrganizationReadonlyLink: boolean;\n    /**\n     * Boolean indicating whether the current user can create or disable an organization Edit link\n     */\n    CanCurrentUserManageOrganizationReadonlyLink: boolean;\n    /**\n     * Boolean indicating whether the current user can retrieve an organization Edit link, if one has already been created\n     * If one has not been created, the user cannot create one\n     */\n    CanCurrentUserRetrieveOrganizationReadWriteLink: boolean;\n    /**\n     * Boolean indicating whether the current user can create or disable an organization Edit link\n     */\n    CanCurrentUserManageOrganizationReadWriteLink: boolean;\n    /**\n     * Boolean indicating whether the current user can make use of Share-By-Link\n     */\n    CanSendLink: boolean;\n    /**\n     * Boolean indicating whether the client logic should warn the user\n     * that they are about to share with external email addresses.\n     */\n    ShowExternalSharingWarning: boolean;\n    /**\n     * A list of SharingPermissionInformation objects that can be used to share\n     */\n    SharingPermissions: any[]; // SPSharingPermissionInformationCollection\n    /**\n     * A dictionary object that lists the display name and the id of\n     * the SharePoint simplified roles (edit, view)\n     */\n    SimplifiedRoles: { [key: string]: string };\n    /**\n     * A dictionary object that lists the display name and the id of the SharePoint groups\n     */\n    GroupsList: { [key: string]: string };\n    /**\n     * A dictionary object that lists the display name and the id of the SharePoint regular roles\n     */\n    Roles: { [key: string]: string };\n    /**\n     * An object containing the SharePoint UI specific sharing settings.\n     */\n    SharePointSettings: any; // SharePointSharingSettings\n    /**\n     * Boolean indicating whether the current user is a site collection administrator\n     */\n    IsUserSiteAdmin: boolean;\n    /**\n     * A value that indicates number of days an anonymous link can be valid before it expires\n     */\n    RequiredAnonymousLinkExpirationInDays: number;\n}\n\nexport interface ISharingInformation {\n    /**\n     * External Sharing.\n     */\n    canAddExternalPrincipal?: boolean;\n    /**\n     * Internal Sharing.\n     */\n    canAddInternalPrincipal?: boolean;\n    /**\n     * Can Send Email.\n     */\n    canSendEmail?: boolean;\n    /**\n     * Can Use Simplified Roles present in Roles Enum.\n     */\n    canUseSimplifiedRoles?: boolean;\n    /**\n     * Has Unique Permissions.\n     */\n    hasUniquePermissions?: boolean;\n    /**\n     * Current Users Role on the Item.\n     */\n    currentRole?: SharingRole;\n    /**\n     * Does the User+Item require Approval from Admin for Sharing.\n     */\n    requiresAccessApproval?: boolean;\n    /**\n     * (Owners only)Whether there are pending access requests for the securable object.\n     */\n    hasPendingAccessRequests?: boolean;\n    /**\n     * (Owners only)The link to the access requests page for the securable object, or an empty string if the link is not available.\n     */\n    pendingAccessRequestsLink?: string;\n    /**\n     * sharedObjectType\n     */\n    sharedObjectType?: SPSharedObjectType;\n    /**\n     * Url for the Securable Object (Encoded).\n     */\n    directUrl?: string;\n    /**\n     * Parent Web Url for the Securable Object (Encoded).\n     */\n    webUrl?: string;\n    /**\n     * Default SharingLinkKind.\n     */\n    defaultLinkKind?: SharingLinkKind;\n    /**\n     * Tenant's SharingDomainRestrictionMode.\n     */\n    domainRestrictionMode?: SharingDomainRestrictionMode;\n    /**\n     * Tenant's RestrictedDomains.\n     */\n    RestrictedDomains?: string;\n    /**\n     * Tenant's Anonymous Link Expiration Restriction in Days.\n     */\n    anonymousLinkExpirationRestrictionDays?: number;\n    /**\n     * The PermissionCollection that are on the Securable Object (Princpals & Links)\n     */\n    permissionsInformation?: any; // PermissionCollection\n    /**\n     * PickerSettings used by the PeoplePicker Control.\n     */\n    pickerSettings?: any; // PickerSettings\n}\n\nexport enum RoleType {\n    None = 0,\n    Guest = 1,\n    Reader = 2,\n    Contributor = 3,\n    WebDesigner = 4,\n    Administrator = 5,\n}\n","import {\n    _SharePointQueryableInstance,\n    _SharePointQueryableCollection,\n    spInvokableFactory,\n} from \"../sharepointqueryable\";\nimport { SiteUsers, ISiteUsers } from \"../site-users/types\";\nimport { assign, ITypedHash, hOP } from \"@pnp/common\";\nimport { metadata } from \"../utils/metadata\";\nimport { body } from \"@pnp/odata\";\nimport { defaultPath } from \"../decorators\";\nimport { spPost } from \"../operations\";\nimport { tag } from \"../telemetry\";\n\n@defaultPath(\"sitegroups\")\nexport class _SiteGroups extends _SharePointQueryableCollection<ISiteGroupInfo[]> {\n\n    /**\t\n     * Gets a group from the collection by id\t\n     *\t\n     * @param id The id of the group to retrieve\t\n     */\n    public getById(id: number): ISiteGroup {\n        return tag.configure(SiteGroup(this).concat(`(${id})`), \"sgs.getById\");\n    }\n\n    /**\n     * Adds a new group to the site collection\n     *\n     * @param properties The group properties object of property names and values to be set for the group\n     */\n    public async add(properties: ITypedHash<any>): Promise<IGroupAddResult> {\n\n        const postBody = body(assign(metadata(\"SP.Group\"), properties));\n\n        const data = await spPost(tag.configure(this, \"sgs.add\"), postBody);\n        return {\n            data,\n            group: this.getById(data.Id),\n        };\n    }\n\n    /**\n     * Gets a group from the collection by name\n     *\n     * @param groupName The name of the group to retrieve\n     */\n    public getByName(groupName: string): ISiteGroup {\n        return tag.configure(SiteGroup(this, `getByName('${groupName}')`), \"sgs.getByName\");\n    }\n\n    /**\n     * Removes the group with the specified member id from the collection\n     *\n     * @param id The id of the group to remove\n     */\n    @tag(\"sgs.removeById\")\n    public removeById(id: number): Promise<void> {\n        return spPost(this.clone(SiteGroups, `removeById('${id}')`));\n    }\n\n    /**\n     * Removes the cross-site group with the specified name from the collection\n     *\n     * @param loginName The name of the group to remove\n     */\n    @tag(\"sgs.removeByLoginName\")\n    public removeByLoginName(loginName: string): Promise<any> {\n        return spPost(this.clone(SiteGroups, `removeByLoginName('${loginName}')`));\n    }\n}\nexport interface ISiteGroups extends _SiteGroups { }\nexport const SiteGroups = spInvokableFactory<ISiteGroups>(_SiteGroups);\n\nexport class _SiteGroup extends _SharePointQueryableInstance<ISiteGroupInfo> {\n\n    /**\n     * Gets the users for this group\n     *\n     */\n    public get users(): ISiteUsers {\n        return tag.configure(SiteUsers(this, \"users\"), \"sg.users\");\n    }\n\n    /**\n     * Updates the group with the given property values\n     * \n     * @param props The group properties object of property names and values to be set for the group\n     */\n    public update = this._update<IGroupUpdateResult, ITypedHash<any>>(\"SP.Group\", (d, p) => {\n\n        let retGroup: ISiteGroup = this;\n\n        if (hOP(p, \"Title\")) {\n            /* tslint:disable-next-line no-string-literal */\n            retGroup = this.getParent(SiteGroup, this.parentUrl, `getByName('${p[\"Title\"]}')`);\n        }\n\n        return {\n            data: d,\n            group: retGroup,\n        };\n    });\n\n    /**\n     * Set the owner of a group using a user id\n     * @param userId the id of the user that will be set as the owner of the current group\n     */\n    @tag(\"sg.setUserAsOwner\")\n    public setUserAsOwner(userId: number): Promise<any> {\n        return spPost(this.clone(SiteGroup, `SetUserAsOwner(${userId})`));\n    }\n}\nexport interface ISiteGroup extends _SiteGroup { }\nexport const SiteGroup = spInvokableFactory<ISiteGroup>(_SiteGroup);\n\n/**\n * Result from updating a group\n *\n */\nexport interface IGroupUpdateResult {\n    group: ISiteGroup;\n    data: any;\n}\n\n/**\n * Results from adding a group\n *\n */\nexport interface IGroupAddResult {\n    group: ISiteGroup;\n    data: any;\n}\n\nexport interface ISiteGroupInfo {\n    AllowMembersEditMembership: boolean;\n    AllowRequestToJoinLeave: boolean;\n    AutoAcceptRequestToJoinLeave: boolean;\n    Description: string;\n    Id: number;\n    IsHiddenInUI: boolean;\n    LoginName: string;\n    OnlyAllowMembersViewMembership: boolean;\n    OwnerTitle: string;\n    PrincipalType: number;\n    RequestToJoinLeaveEmailSetting: string | null;\n    Title: string;\n}\n","import { SecurableQueryable, IBasePermissions, PermissionKind } from \"./types\";\nimport { _SharePointQueryableInstance, _SharePointQueryable, SharePointQueryableInstance, SharePointQueryable } from \"../sharepointqueryable\";\nimport { hOP } from \"@pnp/common\";\nimport { spPost } from \"../operations\";\n\n/**\n* Gets the effective permissions for the user supplied\n*\n* @param loginName The claims username for the user (ex: i:0#.f|membership|user@domain.com)\n*/\nexport async function getUserEffectivePermissions(this: SecurableQueryable, loginName: string): Promise<IBasePermissions> {\n\n    const q = this.clone(SharePointQueryableInstance, \"getUserEffectivePermissions(@user)\");\n    q.query.set(\"@user\", `'${encodeURIComponent(loginName)}'`);\n    const r = await q.get<any>();\n    // handle verbose mode\n    return hOP(r, \"GetUserEffectivePermissions\") ? r.GetUserEffectivePermissions : r;\n}\n\n/**\n * Gets the effective permissions for the current user\n */\nexport async function getCurrentUserEffectivePermissions(this: SecurableQueryable): Promise<IBasePermissions> {\n\n    // remove need to reference Web here, which created a circular build issue\n    const w = SharePointQueryableInstance(\"_api/web\", \"currentuser\");\n    const user = await w.configureFrom(this).select(\"LoginName\")<{ LoginName: string }>();\n    return getUserEffectivePermissions.call(this, user.LoginName);\n}\n\n/**\n * Breaks the security inheritance at this level optinally copying permissions and clearing subscopes\n *\n * @param copyRoleAssignments If true the permissions are copied from the current parent scope\n * @param clearSubscopes Optional. true to make all child securable objects inherit role assignments from the current object\n */\nexport async function breakRoleInheritance(this: SecurableQueryable, copyRoleAssignments = false, clearSubscopes = false): Promise<void> {\n    await spPost(this.clone(SharePointQueryable, `breakroleinheritance(copyroleassignments=${copyRoleAssignments}, clearsubscopes=${clearSubscopes})`));\n}\n\n/**\n * Removes the local role assignments so that it re-inherit role assignments from the parent object.\n *\n */\nexport async function resetRoleInheritance(this: SecurableQueryable): Promise<void> {\n    await spPost(this.clone(SharePointQueryable, \"resetroleinheritance\"));\n}\n\n/**\n * Determines if a given user has the appropriate permissions\n *\n * @param loginName The user to check\n * @param permission The permission being checked\n */\nexport async function userHasPermissions(this: SecurableQueryable, loginName: string, permission: PermissionKind): Promise<boolean> {\n\n    const perms = await getUserEffectivePermissions.call(this, loginName);\n    return this.hasPermissions(perms, permission);\n}\n\n/**\n * Determines if the current user has the requested permissions\n *\n * @param permission The permission we wish to check\n */\nexport async function currentUserHasPermissions(this: SecurableQueryable, permission: PermissionKind): Promise<boolean> {\n\n    const perms = await getCurrentUserEffectivePermissions.call(this);\n    return this.hasPermissions(perms, permission);\n}\n\n/**\n * Taken from sp.js, checks the supplied permissions against the mask\n *\n * @param value The security principal's permissions on the given object\n * @param perm The permission checked against the value\n */\n/* tslint:disable:no-bitwise */\nexport function hasPermissions(value: IBasePermissions, perm: PermissionKind): boolean {\n\n    if (!perm) {\n        return true;\n    }\n    if (perm === PermissionKind.FullMask) {\n        return (value.High & 32767) === 32767 && value.Low === 65535;\n    }\n\n    perm = perm - 1;\n    let num = 1;\n\n    if (perm >= 0 && perm < 32) {\n        num = num << perm;\n        return 0 !== (value.Low & num);\n    } else if (perm >= 32 && perm < 64) {\n        num = num << perm - 32;\n        return 0 !== (value.High & num);\n    }\n    return false;\n}\n/* tslint:enable */\n","import { body } from \"@pnp/odata\";\nimport { jsS, assign } from \"@pnp/common\";\nimport { SharePointQueryableCollection, _SharePointQueryableInstance, SharePointQueryableInstance } from \"../sharepointqueryable\";\nimport { extractWebUrl } from \"../utils/extractweburl\";\nimport { Web, _Web } from \"../webs/types\";\nimport { _File } from \"../files/types\";\nimport {\n    ShareableQueryable,\n    ISharingResult,\n    SharingRole,\n    IShareObjectOptions,\n    SharingLinkKind,\n    IShareLinkResponse,\n    ISharingInformationRequest,\n    ISharingRecipient,\n    ISharingEntityPermission,\n    ISharingInformation,\n    IObjectSharingSettings,\n    ISharingEmailData,\n    RoleType,\n} from \"./types\";\nimport { spPost } from \"../operations\";\nimport { tag } from \"../telemetry\";\nimport { RoleDefinitions } from \"../security/types\";\n\n/**\n * Shares an object based on the supplied options\n *\n * @param options The set of options to send to the ShareObject method\n * @param bypass If true any processing is skipped and the options are sent directly to the ShareObject method\n */\nexport async function shareObject(o: ShareableQueryable, options: IShareObjectOptions, bypass = false): Promise<ISharingResult> {\n\n    if (bypass) {\n\n        // if the bypass flag is set send the supplied parameters directly to the service\n        return sendShareObjectRequest(o, options);\n    }\n\n    // extend our options with some defaults\n    options = assign(options, {\n        group: null,\n        includeAnonymousLinkInEmail: false,\n        propagateAcl: false,\n        useSimplifiedRoles: true,\n    }, true);\n\n    const roleValue = await getRoleValue(options.role, options.group);\n\n    // handle the multiple input types\n    if (!Array.isArray(options.loginNames)) {\n        options.loginNames = [options.loginNames];\n    }\n\n    const userStr = jsS(options.loginNames.map(Key => ({ Key })));\n\n    let postBody = {\n        peoplePickerInput: userStr,\n        roleValue: roleValue,\n        url: options.url,\n    };\n\n    if (options.emailData !== undefined && options.emailData !== null) {\n        postBody = assign(postBody, {\n            emailBody: options.emailData.body,\n            emailSubject: options.emailData.subject !== undefined ? options.emailData.subject : \"Shared with you.\",\n            sendEmail: true,\n        });\n    }\n\n    return sendShareObjectRequest(o, postBody);\n}\n\n/**\n * Gets a sharing link for the supplied\n *\n * @param kind The kind of link to share\n * @param expiration The optional expiration for this link\n */\nexport function getShareLink(this: ShareableQueryable, kind: SharingLinkKind, expiration: Date = null): Promise<IShareLinkResponse> {\n\n    // date needs to be an ISO string or null\n    const expString = expiration !== null ? expiration.toISOString() : null;\n\n    // clone using the factory and send the request\n    const o = tag.configure(this.clone(SharePointQueryableInstance, \"shareLink\"), \"sh.getShareLink\");\n    return spPost<IShareLinkResponse>(o, body({\n        request: {\n            createLink: true,\n            emailData: null,\n            settings: {\n                expiration: expString,\n                linkKind: kind,\n            },\n        },\n    }));\n}\n\n/**\n * Checks Permissions on the list of Users and returns back role the users have on the Item.\n *\n * @param recipients The array of Entities for which Permissions need to be checked.\n */\nexport function checkPermissions(this: ShareableQueryable, recipients: ISharingRecipient[]): Promise<ISharingEntityPermission[]> {\n\n    const o = tag.configure(this.clone(SharePointQueryableInstance, \"checkPermissions\"), \"sh.checkPermissions\");\n    return spPost<ISharingEntityPermission[]>(o, body({ recipients }));\n}\n\n/**\n * Get Sharing Information.\n *\n * @param request The SharingInformationRequest Object.\n * @param expands Expand more fields.\n * \n */\nexport function getSharingInformation(this: ShareableQueryable, request: ISharingInformationRequest = null, expands: string[] = []): Promise<ISharingInformation> {\n\n    const o = tag.configure(this.clone(SharePointQueryableInstance, \"getSharingInformation\"), \"sh.getSharingInformation\");\n    return spPost(o.expand(...expands), body({ request }));\n}\n\n/**\n * Gets the sharing settings of an item.\n *\n * @param useSimplifiedRoles Determines whether to use simplified roles.\n */\nexport function getObjectSharingSettings(this: ShareableQueryable, useSimplifiedRoles = true): Promise<IObjectSharingSettings> {\n\n    const o = tag.configure(this.clone(SharePointQueryableInstance, \"getObjectSharingSettings\"), \"sh.getObjectSharingSettings\");\n    return spPost<IObjectSharingSettings>(o, body({ useSimplifiedRoles }));\n}\n\n/**\n * Unshares this object\n */\nexport function unshareObject(this: ShareableQueryable): Promise<ISharingResult> {\n\n    return spPost(tag.configure(this.clone(SharePointQueryableInstance, \"unshareObject\"), \"sh.unshareObject\"));\n}\n\n/**\n * Deletes a link by type\n *\n * @param kind Deletes a sharing link by the kind of link\n */\nexport function deleteLinkByKind(this: ShareableQueryable, linkKind: SharingLinkKind): Promise<void> {\n\n    return spPost(tag.configure(this.clone(SharePointQueryableInstance, \"deleteLinkByKind\"), \"sh.deleteLinkByKind\"), body({ linkKind }));\n}\n\n/**\n * Removes the specified link to the item.\n *\n * @param kind The kind of link to be deleted.\n * @param shareId\n */\nexport function unshareLink(this: ShareableQueryable, linkKind: SharingLinkKind, shareId = \"00000000-0000-0000-0000-000000000000\"): Promise<void> {\n\n    return spPost(tag.configure(this.clone(SharePointQueryableInstance, \"unshareLink\"), \"sh.unshareLink\"), body({ linkKind, shareId }));\n}\n\n/**\n * Shares this instance with the supplied users\n *\n * @param loginNames Resolved login names to share\n * @param role The role\n * @param requireSignin True to require the user is authenticated, otherwise false\n * @param propagateAcl True to apply this share to all children\n * @param emailData If supplied an email will be sent with the indicated properties\n */\nexport async function shareWith(\n    o: ShareableQueryable,\n    loginNames: string | string[],\n    role: SharingRole,\n    requireSignin = false,\n    propagateAcl = false,\n    emailData?: ISharingEmailData): Promise<ISharingResult> {\n\n    // handle the multiple input types\n    if (!Array.isArray(loginNames)) {\n        loginNames = [loginNames];\n    }\n\n    const userStr = jsS(loginNames.map(login => { return { Key: login }; }));\n    const roleFilter = role === SharingRole.Edit ? RoleType.Contributor : RoleType.Reader;\n\n    // start by looking up the role definition id we need to set the roleValue\n    // remove need to reference Web here, which created a circular build issue\n    const w = SharePointQueryableCollection(\"_api/web\", \"roledefinitions\");\n    const def = await w.select(\"Id\").filter(`RoleTypeKind eq ${roleFilter}`).get();\n    if (!Array.isArray(def) || def.length < 1) {\n        throw Error(`Could not locate a role defintion with RoleTypeKind ${roleFilter}`);\n    }\n    let postBody = {\n        includeAnonymousLinkInEmail: requireSignin,\n        peoplePickerInput: userStr,\n        propagateAcl: propagateAcl,\n        roleValue: `role:${def[0].Id}`,\n        useSimplifiedRoles: true,\n    };\n    if (emailData !== undefined) {\n        postBody = assign(postBody, {\n            emailBody: emailData.body,\n            emailSubject: emailData.subject !== undefined ? emailData.subject : \"\",\n            sendEmail: true,\n        });\n    }\n\n    return spPost<ISharingResult>(tag.configure(o.clone(SharePointQueryableInstance, \"shareObject\"), \"sh.shareWith\"), body(postBody));\n}\n\nfunction sendShareObjectRequest(o: ShareableQueryable, options: any): Promise<ISharingResult> {\n\n    const w = tag.configure(Web(extractWebUrl(o.toUrl()), \"/_api/SP.Web.ShareObject\"), \"sh.sendShareObjectRequest\");\n    return spPost(w.expand(\"UsersWithAccessRequests\", \"GroupsSharedWith\"), body(options));\n}\n\n/**\n * Calculates the roleValue string used in the sharing query\n *\n * @param role The Sharing Role\n * @param group The Group type\n */\nasync function getRoleValue(role: SharingRole, group: RoleType): Promise<string> {\n\n    // we will give group precedence, because we had to make a choice\n    if (group !== undefined && group !== null) {\n\n        switch (group) {\n            case RoleType.Contributor:\n                const g1 = await Web(\"_api/web\", \"associatedmembergroup\").select(\"Id\")<{ Id: number; }>();\n                return `group: ${g1.Id}`;\n            case RoleType.Reader:\n            case RoleType.Guest:\n                const g2 = await Web(\"_api/web\", \"associatedvisitorgroup\").select(\"Id\")<{ Id: number; }>();\n                return `group: ${g2.Id}`;\n            default:\n                throw Error(\"Could not determine role value for supplied value. Contributor, Reader, and Guest are supported\");\n        }\n    } else {\n\n        const roleFilter = role === SharingRole.Edit ? RoleType.Contributor : RoleType.Reader;\n        const def = await RoleDefinitions(\"_api/web\").select(\"Id\").top(1).filter(`RoleTypeKind eq ${roleFilter}`)<{ Id: number; }[]>();\n        if (def.length < 1) {\n            throw Error(\"Could not locate associated role definition for supplied role. Edit and View are supported\");\n        }\n        return `role: ${def[0].Id}`;\n    }\n}\n\n","import { addProp } from \"@pnp/odata\";\nimport { _Item } from \"../items/types\";\nimport { RoleAssignments, ISecurableMethods } from \"./types\";\nimport { _SharePointQueryableInstance, SharePointQueryableInstance } from \"../sharepointqueryable\";\nimport {\n    getUserEffectivePermissions,\n    getCurrentUserEffectivePermissions,\n    breakRoleInheritance,\n    resetRoleInheritance,\n    userHasPermissions,\n    currentUserHasPermissions,\n    hasPermissions,\n} from \"./funcs\";\n\ndeclare module \"../items/types\" {\n    interface _Item extends ISecurableMethods { }\n    interface IItem extends ISecurableMethods { }\n}\n\naddProp(_Item, \"roleAssignments\", RoleAssignments);\naddProp(_Item, \"firstUniqueAncestorSecurableObject\", SharePointQueryableInstance);\n\n_Item.prototype.getUserEffectivePermissions = getUserEffectivePermissions;\n_Item.prototype.getCurrentUserEffectivePermissions = getCurrentUserEffectivePermissions;\n_Item.prototype.breakRoleInheritance = breakRoleInheritance;\n_Item.prototype.resetRoleInheritance = resetRoleInheritance;\n_Item.prototype.userHasPermissions = userHasPermissions;\n_Item.prototype.currentUserHasPermissions = currentUserHasPermissions;\n_Item.prototype.hasPermissions = hasPermissions;\n","import { addProp } from \"@pnp/odata\";\nimport { _List } from \"../lists/types\";\nimport { RoleAssignments, ISecurableMethods } from \"./types\";\nimport { SharePointQueryableInstance } from \"../sharepointqueryable\";\nimport {\n    getUserEffectivePermissions,\n    getCurrentUserEffectivePermissions,\n    breakRoleInheritance,\n    resetRoleInheritance,\n    userHasPermissions,\n    currentUserHasPermissions,\n    hasPermissions,\n} from \"./funcs\";\n\ndeclare module \"../lists/types\" {\n    interface _List extends ISecurableMethods { }\n    interface IList extends ISecurableMethods { }\n}\n\naddProp(_List, \"roleAssignments\", RoleAssignments);\naddProp(_List, \"firstUniqueAncestorSecurableObject\", SharePointQueryableInstance);\n\n_List.prototype.getUserEffectivePermissions = getUserEffectivePermissions;\n_List.prototype.getCurrentUserEffectivePermissions = getCurrentUserEffectivePermissions;\n_List.prototype.breakRoleInheritance = breakRoleInheritance;\n_List.prototype.resetRoleInheritance = resetRoleInheritance;\n_List.prototype.userHasPermissions = userHasPermissions;\n_List.prototype.currentUserHasPermissions = currentUserHasPermissions;\n_List.prototype.hasPermissions = hasPermissions;\n","import { addProp } from \"@pnp/odata\";\nimport { _Web } from \"../webs/types\";\nimport { RoleDefinitions, IRoleDefinitions, RoleAssignments, ISecurableMethods } from \"./types\";\nimport { SharePointQueryableInstance } from \"../sharepointqueryable\";\nimport {\n    getUserEffectivePermissions,\n    getCurrentUserEffectivePermissions,\n    breakRoleInheritance,\n    resetRoleInheritance,\n    userHasPermissions,\n    currentUserHasPermissions,\n    hasPermissions,\n} from \"./funcs\";\n\ndeclare module \"../webs/types\" {\n    interface _Web extends ISecurableMethods {\n        roleDefinitions: IRoleDefinitions;\n    }\n    interface IWeb extends ISecurableMethods {\n        roleDefinitions: IRoleDefinitions;\n    }\n}\n\naddProp(_Web, \"roleDefinitions\", RoleDefinitions);\naddProp(_Web, \"roleAssignments\", RoleAssignments);\naddProp(_Web, \"firstUniqueAncestorSecurableObject\", SharePointQueryableInstance);\n\n_Web.prototype.getUserEffectivePermissions = getUserEffectivePermissions;\n_Web.prototype.getCurrentUserEffectivePermissions = getCurrentUserEffectivePermissions;\n_Web.prototype.breakRoleInheritance = breakRoleInheritance;\n_Web.prototype.resetRoleInheritance = resetRoleInheritance;\n_Web.prototype.userHasPermissions = userHasPermissions;\n_Web.prototype.currentUserHasPermissions = currentUserHasPermissions;\n_Web.prototype.hasPermissions = hasPermissions;\n","import { _File } from \"../files/types\";\nimport {\n    ISharingEmailData,\n    ISharingResult,\n    SharingRole,\n    ISharedFuncs,\n} from \"./types\";\nimport {\n    shareWith,\n    getShareLink,\n    checkPermissions,\n    getSharingInformation,\n    getObjectSharingSettings,\n    unshareObject,\n    deleteLinkByKind,\n    unshareLink,\n} from \"./funcs\";\n\ndeclare module \"../files/types\" {\n    interface _File extends ISharedFuncs {\n        shareWith(loginNames: string | string[], role?: SharingRole, requireSignin?: boolean, emailData?: ISharingEmailData): Promise<ISharingResult>;\n    }\n    interface IFile extends ISharedFuncs {\n        /**\n         * Shares this item with one or more users\n         *\n         * @param loginNames string or string[] of resolved login names to which this item will be shared\n         * @param role The role (View | Edit) applied to the share\n         * @param shareEverything Share everything in this folder, even items with unique permissions.\n         * @param requireSignin If true the user must signin to view link, otherwise anyone with the link can access the resource\n         * @param emailData Optional, if inlucded an email will be sent. Note subject currently has no effect.\n         */\n        shareWith(loginNames: string | string[], role?: SharingRole, requireSignin?: boolean, emailData?: ISharingEmailData): Promise<ISharingResult>;\n    }\n}\n\n_File.prototype.shareWith = function (\n    this: _File,\n    loginNames: string | string[],\n    role: SharingRole = SharingRole.View,\n    requireSignin = false,\n    emailData?: ISharingEmailData): Promise<ISharingResult> {\n\n    return shareWith(this, loginNames, role, requireSignin, false, emailData);\n};\n\n_File.prototype.getShareLink = getShareLink;\n_File.prototype.checkSharingPermissions = checkPermissions;\n_File.prototype.getSharingInformation = getSharingInformation;\n_File.prototype.getObjectSharingSettings = getObjectSharingSettings;\n_File.prototype.unshare = unshareObject;\n_File.prototype.deleteSharingLinkByKind = deleteLinkByKind;\n_File.prototype.unshareLink = unshareLink;\n","import {\n    _Folder,\n} from \"../folders/types\";\nimport {\n    ISharingEmailData,\n    ISharingResult,\n    SharingRole,\n    ISharedFuncs,\n    ISharingInformationRequest,\n    SharingLinkKind,\n    ISharingRecipient,\n} from \"./types\";\n\ndeclare module \"../folders/types\" {\n    interface _Folder extends ISharedFuncs {\n        shareWith(loginNames: string | string[], role?: SharingRole, requireSignin?: boolean, shareEverything?: boolean, emailData?: ISharingEmailData): Promise<ISharingResult>;\n    }\n    interface IFolder extends ISharedFuncs {\n        shareWith(loginNames: string | string[], role?: SharingRole, requireSignin?: boolean, shareEverything?: boolean, emailData?: ISharingEmailData): Promise<ISharingResult>;\n    }\n}\n\n_Folder.prototype.shareWith = async function (\n    loginNames: string | string[],\n    role: SharingRole = SharingRole.View,\n    requireSignin = false,\n    shareEverything = false,\n    emailData?: ISharingEmailData): Promise<ISharingResult> {\n\n    const dependency = this.addBatchDependency();\n\n    const shareable = await this.getShareable();\n    dependency();\n    return shareable.shareWith(loginNames, role, requireSignin, shareEverything, emailData);\n};\n\n_Folder.prototype.getShareLink = async function (this: _Folder, kind: SharingLinkKind, expiration: Date = null): Promise<any> {\n    const dependency = this.addBatchDependency();\n\n    const shareable = await this.getShareable();\n    dependency();\n    return shareable.getShareLink(kind, expiration);\n};\n\n_Folder.prototype.checkSharingPermissions = async function (this: _Folder, recipients: ISharingRecipient[]): Promise<any> {\n    const dependency = this.addBatchDependency();\n\n    const shareable = await this.getShareable();\n    dependency();\n    return shareable.checkSharingPermissions(recipients);\n};\n\n_Folder.prototype.getSharingInformation = async function (this: _Folder, request?: ISharingInformationRequest, expands?: string[]): Promise<any> {\n    const dependency = this.addBatchDependency();\n\n    const shareable = await this.getShareable();\n    dependency();\n    return shareable.getSharingInformation(request, expands);\n};\n\n_Folder.prototype.getObjectSharingSettings = async function (this: _Folder, useSimplifiedRoles = true): Promise<any> {\n    const dependency = this.addBatchDependency();\n\n    const shareable = await this.getShareable();\n    dependency();\n    return shareable.getObjectSharingSettings(useSimplifiedRoles);\n};\n\n_Folder.prototype.unshare = async function (this: _Folder): Promise<any> {\n    const dependency = this.addBatchDependency();\n\n    const shareable = await this.getShareable();\n    dependency();\n    return shareable.unshare();\n};\n\n_Folder.prototype.deleteSharingLinkByKind = async function (this: _Folder, kind: SharingLinkKind): Promise<any> {\n    const dependency = this.addBatchDependency();\n\n    const shareable = await this.getShareable();\n    dependency();\n    return shareable.deleteSharingLinkByKind(kind);\n};\n\n_Folder.prototype.unshareLink = async function (this: _Folder, kind: SharingLinkKind, shareId?: string): Promise<any> {\n    const dependency = this.addBatchDependency();\n\n    const shareable = await this.getShareable();\n    dependency();\n    return shareable.unshareLink(kind, shareId);\n};\n","import { _Item } from \"../items/types\";\nimport {\n    ISharingEmailData,\n    ISharingResult,\n    SharingRole,\n    ISharedFuncs,\n} from \"./types\";\n\nimport {\n    shareWith,\n    getShareLink,\n    checkPermissions,\n    getSharingInformation,\n    getObjectSharingSettings,\n    unshareObject,\n    deleteLinkByKind,\n    unshareLink,\n} from \"./funcs\";\n\ndeclare module \"../items/types\" {\n    interface _Item extends ISharedFuncs {\n        shareWith(loginNames: string | string[], role?: SharingRole, requireSignin?: boolean, emailData?: ISharingEmailData): Promise<ISharingResult>;\n    }\n    interface IItem extends ISharedFuncs {\n        /**\n         * Shares this item with one or more users\n         *\n         * @param loginNames string or string[] of resolved login names to which this item will be shared\n         * @param role The role (View | Edit) applied to the share\n         * @param emailData Optional, if inlucded an email will be sent. Note subject currently has no effect.\n         */\n        shareWith(loginNames: string | string[], role?: SharingRole, requireSignin?: boolean, emailData?: ISharingEmailData): Promise<ISharingResult>;\n    }\n}\n\n\n_Item.prototype.shareWith = function (\n    this: _Item,\n    loginNames: string | string[],\n    role: SharingRole = SharingRole.View,\n    requireSignin = false,\n    emailData?: ISharingEmailData): Promise<ISharingResult> {\n\n    return shareWith(this, loginNames, role, requireSignin, false, emailData);\n};\n\n_Item.prototype.getShareLink = getShareLink;\n_Item.prototype.checkSharingPermissions = checkPermissions;\n_Item.prototype.getSharingInformation = getSharingInformation;\n_Item.prototype.getObjectSharingSettings = getObjectSharingSettings;\n_Item.prototype.unshare = unshareObject;\n_Item.prototype.deleteSharingLinkByKind = deleteLinkByKind;\n_Item.prototype.unshareLink = unshareLink;\n","import { _Web, Web } from \"../webs/types\";\nimport { ISharingEmailData, ISharingResult, SharingRole } from \"./types\";\nimport { _SharePointQueryableInstance } from \"../sharepointqueryable\";\nimport { extractWebUrl } from \"../utils/extractweburl\";\nimport { RoleType } from \"./types\";\nimport { shareObject } from \"./funcs\";\nimport { combine } from \"@pnp/common\";\nimport { body } from \"@pnp/odata\";\nimport { spPost } from \"../operations\";\n\n/**\n * Extend _Web\n */\ndeclare module \"../webs/types\" {\n    interface _Web {\n        shareWith: (loginNames: string | string[], role?: SharingRole, emailData?: ISharingEmailData) => Promise<ISharingResult>;\n        shareObject: (url: string,\n            loginNames: string | string[],\n            role: SharingRole,\n            emailData?: ISharingEmailData,\n            group?: RoleType,\n            propagateAcl?: boolean,\n            includeAnonymousLinkInEmail?: boolean,\n            useSimplifiedRoles?: boolean) => Promise<ISharingResult>;\n        shareObjectRaw(options: any): Promise<ISharingResult>;\n        unshareObject(url: string): Promise<ISharingResult>;\n    }\n    interface IWeb {\n        shareWith: (loginNames: string | string[], role?: SharingRole, emailData?: ISharingEmailData) => Promise<ISharingResult>;\n        shareObject: (url: string,\n            loginNames: string | string[],\n            role: SharingRole,\n            emailData?: ISharingEmailData,\n            group?: RoleType,\n            propagateAcl?: boolean,\n            includeAnonymousLinkInEmail?: boolean,\n            useSimplifiedRoles?: boolean) => Promise<ISharingResult>;\n        shareObjectRaw(options: any): Promise<ISharingResult>;\n        unshareObject(url: string): Promise<ISharingResult>;\n    }\n}\n\n/**\n * Shares this web with the supplied users\n * @param loginNames The resolved login names to share\n * @param role The role to share this web\n * @param emailData Optional email data\n */\n_Web.prototype.shareWith = async function (\n    this: _Web,\n    loginNames: string | string[],\n    role: SharingRole = SharingRole.View,\n    emailData?: ISharingEmailData): Promise<ISharingResult> {\n\n    const dependency = this.addBatchDependency();\n    // remove need to reference Web here, which created a circular build issue\n    const web = new _SharePointQueryableInstance(extractWebUrl(this.toUrl()), \"/_api/web/url\");\n\n    const url = await web.get();\n    dependency();\n\n    return this.shareObject(combine(url, \"/_layouts/15/aclinv.aspx?forSharing=1&mbypass=1\"), loginNames, role, emailData);\n};\n\n/**\n * Provides direct access to the static web.ShareObject method\n *\n * @param url The url to share\n * @param loginNames Resolved loginnames string[] of a single login name string\n * @param roleValue Role value\n * @param emailData Optional email data\n * @param groupId Optional group id\n * @param propagateAcl\n * @param includeAnonymousLinkInEmail\n * @param useSimplifiedRoles\n */\n_Web.prototype.shareObject = function (\n    this: _Web,\n    url: string,\n    loginNames: string | string[],\n    role: SharingRole,\n    emailData?: ISharingEmailData,\n    group?: RoleType,\n    propagateAcl = false,\n    includeAnonymousLinkInEmail = false,\n    useSimplifiedRoles = true): Promise<ISharingResult> {\n\n    return shareObject(this, {\n        emailData: emailData,\n        group: group,\n        includeAnonymousLinkInEmail: includeAnonymousLinkInEmail,\n        loginNames: loginNames,\n        propagateAcl: propagateAcl,\n        role: role,\n        url: url,\n        useSimplifiedRoles: useSimplifiedRoles,\n    });\n};\n\n/**\n * Supplies a method to pass any set of arguments to ShareObject\n *\n * @param options The set of options to send to ShareObject\n */\n_Web.prototype.shareObjectRaw = function (this: _Web, options: any): Promise<ISharingResult> {\n    return shareObject(this, options, true);\n};\n\n/**\n * Supplies a method to pass any set of arguments to ShareObject\n *\n * @param options The set of options to send to ShareObject\n */\n_Web.prototype.unshareObject = function (this: _Web, url: string): Promise<ISharingResult> {\n    return spPost(Web(this, \"unshareObject\"), body({ url }));\n};\n","import { _SharePointQueryable, ISharePointQueryable } from \"../sharepointqueryable\";\nimport { extractWebUrl } from \"../utils/extractweburl\";\nimport { headers, body } from \"@pnp/odata\";\nimport { spPost } from \"../operations\";\nimport { hOP } from \"@pnp/common\";\nimport { tag } from \"../telemetry\";\n\nexport class _SiteDesigns extends _SharePointQueryable {\n\n    constructor(baseUrl: string | ISharePointQueryable, methodName = \"\") {\n        const url = typeof baseUrl === \"string\" ? baseUrl : baseUrl.toUrl();\n        super(extractWebUrl(url), `_api/Microsoft.Sharepoint.Utilities.WebTemplateExtensions.SiteScriptUtility.${methodName}`);\n    }\n\n    public execute<T>(props: any): Promise<T> {\n        return spPost<T>(this, body(props, headers({ \"Content-Type\": \"application/json;charset=utf-8\" })));\n    }\n\n    /**\n     * Creates a new site design available to users when they create a new site from the SharePoint home page.\n     * \n     * @param creationInfo A sitedesign creation information object\n     */\n    @tag(\"sd.createSiteDesign\")\n    public createSiteDesign(creationInfo: ISiteDesignCreationInfo): Promise<ISiteDesignInfo> {\n        return this.clone(SiteDesignsCloneFactory, `CreateSiteDesign`).execute<ISiteDesignInfo>({ info: creationInfo });\n    }\n\n    /**\n     * Applies a site design to an existing site collection.\n     *\n     * @param siteDesignId The ID of the site design to apply.\n     * @param webUrl The URL of the site collection where you want to apply the site design.\n     */\n    @tag(\"sd.applySiteDesign\")\n    public applySiteDesign(siteDesignId: string, webUrl: string): Promise<void> {\n        return this.clone(SiteDesignsCloneFactory, `ApplySiteDesign`).execute<void>({ siteDesignId: siteDesignId, \"webUrl\": webUrl });\n    }\n\n    /**\n     * Gets the list of available site designs\n     */\n    @tag(\"sd.getSiteDesigns\")\n    public getSiteDesigns(): Promise<ISiteDesignInfo[]> {\n        return this.clone(SiteDesignsCloneFactory, `GetSiteDesigns`).execute<ISiteDesignInfo[]>({});\n    }\n\n    /**\n     * Gets information about a specific site design.\n     * @param id The ID of the site design to get information about.\n     */\n    @tag(\"sd.getSiteDesignMetadata\")\n    public getSiteDesignMetadata(id: string): Promise<ISiteDesignInfo> {\n        return this.clone(SiteDesignsCloneFactory, `GetSiteDesignMetadata`).execute<ISiteDesignInfo>({ id: id });\n    }\n\n    /**\n     * Updates a site design with new values. In the REST call, all parameters are optional except the site script Id.\n     * If you had previously set the IsDefault parameter to TRUE and wish it to remain true, you must pass in this parameter again (otherwise it will be reset to FALSE). \n     * @param updateInfo A sitedesign update information object\n     */\n    @tag(\"sd.updateSiteDesign\")\n    public updateSiteDesign(updateInfo: ISiteDesignUpdateInfo): Promise<ISiteDesignInfo> {\n        return this.clone(SiteDesignsCloneFactory, `UpdateSiteDesign`).execute<ISiteDesignInfo>({ updateInfo: updateInfo });\n    }\n\n    /**\n     * Deletes a site design.\n     * @param id The ID of the site design to delete.\n     */\n    @tag(\"sd.deleteSiteDesign\")\n    public deleteSiteDesign(id: string): Promise<void> {\n        return this.clone(SiteDesignsCloneFactory, `DeleteSiteDesign`).execute<void>({ id: id });\n    }\n\n    /**\n     * Gets a list of principals that have access to a site design.\n     * @param id The ID of the site design to get rights information from.\n     */\n    @tag(\"sd.getSiteDesignRights\")\n    public getSiteDesignRights(id: string): Promise<ISiteDesignPrincipals[]> {\n        return this.clone(SiteDesignsCloneFactory, `GetSiteDesignRights`).execute<ISiteDesignPrincipals[]>({ id: id });\n    }\n\n    /**\n     * Grants access to a site design for one or more principals.\n     * @param id The ID of the site design to grant rights on.\n     * @param principalNames An array of one or more principals to grant view rights. \n     *                       Principals can be users or mail-enabled security groups in the form of \"alias\" or \"alias@<domain name>.com\"\n     * @param grantedRights Always set to 1. This represents the View right.\n     */\n    @tag(\"sd.grantSiteDesignRights\")\n    public grantSiteDesignRights(id: string, principalNames: string[], grantedRights = 1): Promise<void> {\n        return this.clone(SiteDesignsCloneFactory, `GrantSiteDesignRights`)\n            .execute<void>({\n                \"grantedRights\": grantedRights.toString(),\n                \"id\": id,\n                \"principalNames\": principalNames,\n            });\n    }\n\n    /**\n     * Revokes access from a site design for one or more principals.\n     * @param id The ID of the site design to revoke rights from.\n     * @param principalNames An array of one or more principals to revoke view rights from. \n     *                       If all principals have rights revoked on the site design, the site design becomes viewable to everyone.\n     */\n    @tag(\"sd.revokeSiteDesignRights\")\n    public revokeSiteDesignRights(id: string, principalNames: string[]): Promise<void> {\n        return this.clone(SiteDesignsCloneFactory, `RevokeSiteDesignRights`)\n            .execute<void>({\n                \"id\": id,\n                \"principalNames\": principalNames,\n            });\n    }\n\n    /**\n     * Adds a site design task on the specified web url to be invoked asynchronously.\n     * @param webUrl The absolute url of the web on where to create the task\n     * @param siteDesignId The ID of the site design to create a task for\n     */\n    @tag(\"sd.addSiteDesignTask\")\n    public addSiteDesignTask(webUrl: string, siteDesignId: string): Promise<ISiteDesignTask> {\n        return this.clone(SiteDesignsCloneFactory, `AddSiteDesignTask`)\n            .execute<ISiteDesignTask>({ \"webUrl\": webUrl, \"siteDesignId\": siteDesignId });\n    }\n\n    /**\n     * Adds a site design task on the current web to be invoked asynchronously.\n     * @param siteDesignId The ID of the site design to create a task for\n     */\n    @tag(\"sd.addSiteDesignTaskToCurrentWeb\")\n    public addSiteDesignTaskToCurrentWeb(siteDesignId: string): Promise<ISiteDesignTask> {\n        return this.clone(SiteDesignsCloneFactory, `AddSiteDesignTaskToCurrentWeb`)\n            .execute<ISiteDesignTask>({ \"siteDesignId\": siteDesignId });\n    }\n\n    /**\n     * Retrieves the site design task, if the task has finished running null will be returned\n     * @param id The ID of the site design task\n     */\n    @tag(\"sd.getSiteDesignTask\")\n    public async getSiteDesignTask(id: string): Promise<ISiteDesignTask> {\n        const task = await this.clone(SiteDesignsCloneFactory, `GetSiteDesignTask`)\n            .execute<ISiteDesignTask>({ \"taskId\": id });\n\n        return hOP(task, \"ID\") ? task : null;\n    }\n\n    /**\n     * Retrieves a list of site design that have run on a specific web\n     * @param webUrl The url of the web where the site design was applied\n     * @param siteDesignId (Optional) the site design ID, if not provided will return all site design runs\n     */\n    @tag(\"sd.getSiteDesignRun\")\n    public getSiteDesignRun(webUrl: string, siteDesignId?: string): Promise<ISiteDesignRun[]> {\n        return this.clone(SiteDesignsCloneFactory, `GetSiteDesignRun`)\n            .execute<ISiteDesignRun[]>({ \"webUrl\": webUrl, siteDesignId: siteDesignId });\n    }\n\n    /**\n     * Retrieves the status of a site design that has been run or is still running\n     * @param webUrl The url of the web where the site design was applied\n     * @param runId the run ID\n     */\n    @tag(\"sd.getSiteDesignRunStatus\")\n    public getSiteDesignRunStatus(webUrl: string, runId: string): Promise<ISiteScriptActionStatus[]> {\n        return this.clone(SiteDesignsCloneFactory, `GetSiteDesignRunStatus`)\n            .execute<ISiteScriptActionStatus[]>({ \"webUrl\": webUrl, runId: runId });\n    }\n}\nexport interface ISiteDesigns extends _SiteDesigns { }\nexport const SiteDesigns = (baseUrl: string | ISharePointQueryable, methodName?: string): ISiteDesigns => new _SiteDesigns(baseUrl, methodName);\n\ntype SiteDesignsCloneType = ISiteDesigns & ISharePointQueryable & { execute<T>(props: any): Promise<T> };\nconst SiteDesignsCloneFactory = (baseUrl: string | ISharePointQueryable, methodName = \"\"): SiteDesignsCloneType => <any>SiteDesigns(baseUrl, methodName);\n\n/**\n * Result from creating or retrieving a site design\n *\n */\nexport interface ISiteDesignInfo {\n    /**\n     * The ID of the site design to apply.\n     */\n    Id: string;\n    /**\n     * The display name of the site design.\n     */\n    Title: string;\n    /**\n     * Identifies which base template to add the design to. Use the value 64 for the Team site template, and the value 68 for the Communication site template.\n     */\n    WebTemplate: string;\n    /**\n     * An array of one or more site scripts. Each is identified by an ID. The scripts will run in the order listed.\n     */\n    SiteScriptIds: string[];\n    /**\n     * The display description of site design.\n     */\n    Description: string;\n    /**\n     * The URL of a preview image. If none is specified, SharePoint uses a generic image.\n     */\n    PreviewImageUrl: string;\n    /**\n     * The alt text description of the image for accessibility.\n     */\n    PreviewImageAltText: string;\n    /**\n     * True if the site design is applied as the default site design; otherwise, false. \n     * For more information see Customize a default site design https://docs.microsoft.com/en-us/sharepoint/dev/declarative-customization/customize-default-site-design.\n     */\n    IsDefault: boolean;\n    /**\n     * The version number of the site design\n     */\n    Version: string;\n}\n\n/**\n * Data for creating a site design\n *\n */\nexport interface ISiteDesignCreationInfo {\n    /**\n     * The display name of the site design.\n     */\n    Title: string;\n    /**\n     * Identifies which base template to add the design to. Use the value 64 for the Team site template, and the value 68 for the Communication site template.\n     */\n    WebTemplate: string;\n    /**\n     * An array of one or more site scripts. Each is identified by an ID. The scripts will run in the order listed.\n     */\n    SiteScriptIds?: string[];\n    /**\n     * (Optional) The display description of site design.\n     */\n    Description?: string;\n    /**\n     * (Optional) The URL of a preview image. If none is specified, SharePoint uses a generic image.\n     */\n    PreviewImageUrl?: string;\n    /**\n     * (Optional) The alt text description of the image for accessibility.\n     */\n    PreviewImageAltText?: string;\n    /**\n     * (Optional) True if the site design is applied as the default site design; otherwise, false. \n     * For more information see Customize a default site design https://docs.microsoft.com/en-us/sharepoint/dev/declarative-customization/customize-default-site-design.\n     */\n    IsDefault?: boolean;\n}\n\n/**\n * Data for updating a site design\n *\n */\nexport interface ISiteDesignUpdateInfo {\n    /**\n     * The ID of the site design to apply.\n     */\n    Id: string;\n    /**\n     * (Optional) The new display name of the updated site design.\n     */\n    Title?: string;\n    /**\n     * (Optional) The new template to add the site design to. Use the value 64 for the Team site template, and the value 68 for the Communication site template.\n     */\n    WebTemplate?: string;\n    /**\n     * (Optional) A new array of one or more site scripts. Each is identified by an ID. The scripts run in the order listed.\n     */\n    SiteScriptIds?: string[];\n    /**\n     * (Optional) The new display description of the updated site design.\n     */\n    Description?: string;\n    /**\n     * (Optional) The new URL of a preview image.\n     */\n    PreviewImageUrl?: string;\n    /**\n     * (Optional) The new alt text description of the image for accessibility.\n     */\n    PreviewImageAltText?: string;\n    /**\n     * (Optional) True if the site design is applied as the default site design; otherwise, false. \n     * For more information see Customize a default site design https://docs.microsoft.com/en-us/sharepoint/dev/declarative-customization/customize-default-site-design. \n     * If you had previously set the IsDefault parameter to TRUE and wish it to remain true, you must pass in this parameter again (otherwise it will be reset to FALSE).\n     */\n    IsDefault?: boolean;\n}\n\n/**\n * Result from retrieving the rights for a site design\n *\n */\nexport interface ISiteDesignPrincipals {\n    /**\n     * Display name\n     */\n    DisplayName: string;\n    /**\n     * The principal name\n     */\n    PrincipalName: string;\n    /**\n     * The principal name\n     */\n    Rights: number;\n}\n\nexport interface ISiteDesignTask {\n    /**\n     * The ID of the site design task\n     */\n    ID: string;\n    /**\n     * Logonname of the user who created the task\n     */\n    LogonName: string;\n    /**\n     * The ID of the site design the task is running on\n     */\n    SiteDesignID: string;\n    /**\n     * The ID of the site collection\n     */\n    SiteID: string;\n    /**\n     * The ID of the web\n     */\n    WebID: string;\n}\n\nexport interface ISiteScriptActionStatus {\n    /**\n     * Action index\n     */\n    ActionIndex: number;\n    /**\n     * Action key\n     */\n    ActionKey: string;\n    /**\n     * Action title\n     */\n    ActionTitle: string;\n    /**\n     * Last modified\n     */\n    LastModified: number;\n    /**\n     * Ordinal index\n     */\n    OrdinalIndex: string;\n    /**\n     * Outcome code\n     */\n    OutcomeCode: number;\n    /**\n    * Outcome text\n    */\n    OutcomeText: string;\n    /**\n     * Site script id\n     */\n    SiteScriptID: string;\n    /**\n     * Site script index\n     */\n    SiteScriptIndex: number;\n    /**\n     * Site script title\n     */\n    SiteScriptTitle: string;\n}\n\nexport interface ISiteDesignRun {\n    /**\n     * The ID of the site design run\n     */\n    ID: string;\n    /**\n     * The ID of the site design that was applied\n     */\n    SiteDesignID: string;\n    /**\n     * The title of the site design that was applied\n     */\n    SiteDesignTitle: string;\n    /**\n     * The version of the site design that was applied\n     */\n    SiteDesignVersion: number;\n    /**\n     * The site id where the site design was applied\n     */\n    SiteID: string;\n    /**\n     * The start time when the site design was applied\n     */\n    StartTime: number;\n    /**\n     * The web id where the site design was applied\n     */\n    WebID: string;\n}\n","import { _Web } from \"../webs/types\";\nimport { ISiteDesignRun, SiteDesigns, ISiteDesignTask, ISiteScriptActionStatus } from \"./types\";\n\ndeclare module \"../webs/types\" {\n\n    interface _Web {\n        getSiteDesignRuns(siteDesignId?: string): Promise<ISiteDesignRun[]>;\n        addSiteDesignTask(siteDesignId: string): Promise<ISiteDesignTask>;\n        getSiteDesignRunStatus(runId: string): Promise<ISiteScriptActionStatus[]>;\n    }\n\n    interface IWeb {\n        /**\n         * Retrieves a list of site design that have run on the current web\n         * @param siteDesignId (Optional) the site design ID, if not provided will return all site design runs\n         */\n        getSiteDesignRuns(siteDesignId?: string): Promise<ISiteDesignRun[]>;\n        /**\n         * Adds a site design task on the current web to be invoked asynchronously.\n         * @param siteDesignId The ID of the site design to create a task for\n         */\n        addSiteDesignTask(siteDesignId: string): Promise<ISiteDesignTask>;\n        /**\n         * Retrieves the status of a site design that has been run or is still running\n         * @param runId the run ID\n         */\n        getSiteDesignRunStatus(runId: string): Promise<ISiteScriptActionStatus[]>;\n    }\n}\n\n_Web.prototype.getSiteDesignRuns = function (this: _Web, siteDesignId?: string): Promise<ISiteDesignRun[]> {\n    return SiteDesigns(this, \"\").getSiteDesignRun(undefined, siteDesignId);\n};\n\n_Web.prototype.addSiteDesignTask = function (this: _Web, siteDesignId: string): Promise<ISiteDesignTask> {\n    return SiteDesigns(this, \"\").addSiteDesignTaskToCurrentWeb(siteDesignId);\n};\n\n_Web.prototype.getSiteDesignRunStatus = function (this: _Web, runId: string): Promise<ISiteScriptActionStatus[]> {\n    return SiteDesigns(this, \"\").getSiteDesignRunStatus(undefined, runId);\n};\n","import \"./web\";\nimport { SPRest } from \"../rest\";\nimport { ISiteDesigns, SiteDesigns } from \"./types\";\n\nexport {\n    ISiteDesignCreationInfo,\n    ISiteDesignInfo,\n    ISiteDesignPrincipals,\n    ISiteDesignUpdateInfo,\n    ISiteDesigns,\n    SiteDesigns,\n    ISiteDesignRun,\n    ISiteDesignTask,\n    ISiteScriptActionStatus,\n} from \"./types\";\n\ndeclare module \"../rest\" {\n    interface SPRest {\n        readonly siteDesigns: ISiteDesigns;\n    }\n}\n\nReflect.defineProperty(SPRest.prototype, \"siteDesigns\", {\n    configurable: true,\n    enumerable: true,\n    get: function (this: SPRest) {\n        return SiteDesigns(this._baseUrl);\n    },\n});\n","import { addProp } from \"@pnp/odata\";\nimport { _Web, Web } from \"../webs/types\";\nimport { ISiteGroups, SiteGroups, ISiteGroup } from \"./types\";\nimport { spPost } from \"../operations\";\nimport { escapeQueryStrValue } from \"../utils/escapeQueryStrValue\";\nimport \"../security/web\";\n\ndeclare module \"../webs/types\" {\n\n    interface _Web {\n        readonly siteGroups: ISiteGroups;\n        readonly associatedOwnerGroup: ISiteGroup;\n        readonly associatedMemberGroup: ISiteGroup;\n        readonly associatedVisitorGroup: ISiteGroup;\n        createDefaultAssociatedGroups(groupNameSeed: string, siteOwner: string, copyRoleAssignments?: boolean, clearSubscopes?: boolean, siteOwner2?: string): Promise<void>;\n    }\n    interface IWeb {\n\n        /**\n         * Returns the site groups of this web\n         */\n        readonly siteGroups: ISiteGroups;\n\n        /**\n         * The web's owner group\n         */\n        readonly associatedOwnerGroup: ISiteGroup;\n\n        /**\n         * The web's member group\n         */\n        readonly associatedMemberGroup: ISiteGroup;\n\n        /**\n         * The web's visitor group\n         */\n        readonly associatedVisitorGroup: ISiteGroup;\n\n        /**\n         * Creates the default associated groups (Members, Owners, Visitors) and gives them the default permissions on the site.\n         * The target site must have unique permissions and no associated members / owners / visitors groups\n         *\n         * @param groupNameSeed The base group name. E.g. 'TestSite' would produce 'TestSite Members' etc.\n         * @param siteOwner The user login name to be added to the site Owners group. Default is the current user\n         * @param copyRoleAssignments Optional. If true the permissions are copied from the current parent scope\n         * @param clearSubscopes Optional. true to make all child securable objects inherit role assignments from the current object\n         * @param siteOwner2 Optional. The second user login name to be added to the site Owners group. Default is empty\n         */\n        createDefaultAssociatedGroups(groupNameSeed: string, siteOwner: string, copyRoleAssignments?: boolean, clearSubscopes?: boolean, siteOwner2?: string): Promise<void>;\n    }\n}\n\naddProp(_Web, \"siteGroups\", SiteGroups);\naddProp(_Web, \"associatedOwnerGroup\", SiteGroups, \"associatedownergroup\");\naddProp(_Web, \"associatedMemberGroup\", SiteGroups, \"associatedmembergroup\");\naddProp(_Web, \"associatedVisitorGroup\", SiteGroups, \"associatedvisitorgroup\");\n\n_Web.prototype.createDefaultAssociatedGroups = async function (\n    this: _Web,\n    groupNameSeed: string,\n    siteOwner: string,\n    copyRoleAssignments = false,\n    clearSubscopes = true,\n    siteOwner2?: string): Promise<void> {\n\n    await this.breakRoleInheritance(copyRoleAssignments, clearSubscopes);\n\n    const q = this.clone(Web, \"createDefaultAssociatedGroups(userLogin=@u,userLogin2=@v,groupNameSeed=@s)\");\n    q.query.set(\"@u\", `'${escapeQueryStrValue(siteOwner || \"\")}'`);\n    q.query.set(\"@v\", `'${escapeQueryStrValue(siteOwner2 || \"\")}'`);\n    q.query.set(\"@s\", `'${escapeQueryStrValue(groupNameSeed || \"\")}'`);\n    return spPost(q);\n};\n\n","import { body } from \"@pnp/odata\";\nimport { spPost } from \"../operations\";\nimport { ISharePointQueryable, _SharePointQueryable } from \"../sharepointqueryable\";\nimport { extractWebUrl } from \"../utils/extractweburl\";\nimport { tag } from \"../telemetry\";\nimport { escapeQueryStrValue } from \"../utils/escapeQueryStrValue\";\n\nexport class _SiteScripts extends _SharePointQueryable {\n\n    constructor(baseUrl: string | ISharePointQueryable, methodName = \"\") {\n        const url = typeof baseUrl === \"string\" ? baseUrl : baseUrl.toUrl();\n        super(extractWebUrl(url), `_api/Microsoft.Sharepoint.Utilities.WebTemplateExtensions.SiteScriptUtility.${methodName}`);\n    }\n\n    public execute<T>(props: any): Promise<T> {\n        return spPost<T>(this, body(props));\n    }\n\n    /**\n     * Gets a list of information on all existing site scripts.\n     */\n    @tag(\"ss.getSiteScripts\")\n    public getSiteScripts(): Promise<ISiteScriptInfo[]> {\n        return this.clone(SiteScriptsCloneFactory, \"GetSiteScripts\", true).execute<ISiteScriptInfo[]>({});\n    }\n\n    /**\n     * Creates a new site script.\n     * \n     * @param title The display name of the site script.\n     * @param content JSON value that describes the script. For more information, see JSON reference.\n     */\n    @tag(\"ss.createSiteScript\")\n    public createSiteScript(title: string, description: string, content: any): Promise<ISiteScriptInfo> {\n        return this.clone(SiteScriptsCloneFactory,\n            `CreateSiteScript(Title=@title,Description=@desc)?@title='${escapeQueryStrValue(title)}'&@desc='${escapeQueryStrValue(description)}'`)\n            .execute<ISiteScriptInfo>(content);\n    }\n\n    /**\n     * Gets information about a specific site script. It also returns the JSON of the script.\n     * \n     * @param id The ID of the site script to get information about.\n     */\n    @tag(\"ss.getSiteScriptMetadata\")\n    public getSiteScriptMetadata(id: string): Promise<ISiteScriptInfo> {\n        return this.clone(SiteScriptsCloneFactory, \"GetSiteScriptMetadata\").execute<ISiteScriptInfo>({ id });\n    }\n\n    /**\n     * Deletes a site script.\n     * \n     * @param id The ID of the site script to delete.\n     */\n    @tag(\"ss.deleteSiteScript\")\n    public deleteSiteScript(id: string): Promise<void> {\n        return this.clone(SiteScriptsCloneFactory, \"DeleteSiteScript\").execute<void>({ id });\n    }\n\n    /**\n     * Updates a site script with new values. In the REST call, all parameters are optional except the site script Id.\n     * \n     * @param siteScriptUpdateInfo Object that contains the information to update a site script. \n     *                             Make sure you stringify the content object or pass it in the second 'content' parameter\n     * @param content (Optional) A new JSON script defining the script actions. For more information, see Site design JSON schema.\n     */\n    @tag(\"ss.updateSiteScript\")\n    public updateSiteScript(updateInfo: ISiteScriptUpdateInfo, content?: any): Promise<ISiteScriptInfo> {\n\n        if (content) {\n            updateInfo.Content = JSON.stringify(content);\n        }\n\n        return this.clone(SiteScriptsCloneFactory, \"UpdateSiteScript\").execute<ISiteScriptInfo>({ updateInfo });\n    }\n\n    /**\n     * Gets the site script syntax (JSON) for a specific list\n     * @param listUrl The absolute url of the list to retrieve site script\n     */\n    @tag(\"ss.getSiteScriptFromList\")\n    public getSiteScriptFromList(listUrl: string): Promise<string> {\n        return this.clone(SiteScriptsCloneFactory, `GetSiteScriptFromList`).execute<string>({ listUrl });\n    }\n\n    /**\n     * Gets the site script syntax (JSON) for a specific web\n     * @param webUrl The absolute url of the web to retrieve site script\n     * @param extractInfo configuration object to specify what to extract\n     */\n    @tag(\"ss.getSiteScriptFromWeb\")\n    public getSiteScriptFromWeb(webUrl: string, info: ISiteScriptSerializationInfo): Promise<ISiteScriptSerializationResult> {\n        return this.clone(SiteScriptsCloneFactory, `getSiteScriptFromWeb`).execute<ISiteScriptSerializationResult>({ webUrl, info });\n    }\n}\nexport interface ISiteScripts extends _SiteScripts { }\nexport const SiteScripts = (baseUrl: string | ISharePointQueryable, methodName?: string): ISiteScripts => new _SiteScripts(baseUrl, methodName);\n\ntype SiteScriptsCloneType = ISiteScripts & ISharePointQueryable & { execute<T>(props: any): Promise<T> };\nconst SiteScriptsCloneFactory = (baseUrl: string | ISharePointQueryable, methodName = \"\"): SiteScriptsCloneType => <any>SiteScripts(baseUrl, methodName);\n\n/**\n * Result from creating or retrieving a site script\n *\n */\nexport interface ISiteScriptInfo {\n    /**\n     * The ID of the site script to apply\n     */\n    Id: string;\n    /**\n     * The display name of the site script\n     */\n    Title: string;\n    /**\n     * The description for the site script\n     */\n    Description: string;\n    /**\n     * The JSON data/definition for the site script\n     */\n    Content: string;\n    /**\n     * The version number of the site script\n     */\n    Version: string;\n}\n\n/**\n * Data for updating a site script\n *\n */\nexport interface ISiteScriptUpdateInfo {\n    /**\n     * The ID of the site script to update\n     */\n    Id: string;\n    /**\n     * (Optional) The new display name for the updated site script\n     */\n    Title?: string;\n    /**\n     * (Optional) The new description for the updated site script\n     */\n    Description?: string;\n    /**\n     * (Optional) The new JSON data/definition for the updated site script\n     */\n    Content?: string;\n    /**\n     * (Optional) The new version for the updated site script\n     */\n    Version?: string;\n}\n\nexport interface ISiteScriptSerializationInfo {\n    /**\n     * (Optional) Include branding\n     */\n    IncludeBranding?: boolean;\n    /**\n     * (Optional) Lists to include e.g. [\"Lists/MyList\"]\n     */\n    IncludedLists?: string[];\n    /**\n     * (Optional) Include links to exported items\n     */\n    IncludeLinksToExportedItems?: boolean;\n    /**\n     * (Optional) Include regional settings\n     */\n    IncludeRegionalSettings?: boolean;\n    /**\n     * (Optional) Include site external sharing capability\n     */\n    IncludeSiteExternalSharingCapability?: boolean;\n    /**\n     * (Optional) Include theme\n     */\n    IncludeTheme?: boolean;\n}\n\nexport interface ISiteScriptSerializationResult {\n    /**\n     * The site script in JSON format\n     */\n    JSON: string;\n    /**\n    * A collection of warnings\n    */\n    Warnings: string[];\n}\n","import { _Web } from \"../webs/types\";\nimport { SiteScripts } from \"./types\";\nimport { ISiteScriptSerializationInfo, ISiteScriptSerializationResult } from \"./types\";\n\ndeclare module \"../webs/types\" {\n    interface _Web {\n        getSiteScript(extractInfo?: ISiteScriptSerializationInfo): Promise<ISiteScriptSerializationResult>;\n    }\n\n    interface IWeb {\n        /**\n         * Gets the site script syntax (JSON) for the current web\n         * @param extractInfo configuration object to specify what to extract\n         */\n        getSiteScript(extractInfo?: ISiteScriptSerializationInfo): Promise<ISiteScriptSerializationResult>;\n    }\n}\n\n_Web.prototype.getSiteScript = function (this: _Web, extractInfo?: ISiteScriptSerializationInfo): Promise<ISiteScriptSerializationResult> {\n    return SiteScripts(this.toUrl(), \"\").getSiteScriptFromWeb(undefined, extractInfo);\n};\n","import { combine } from \"@pnp/common\";\nimport { _List, List } from \"../lists/types\";\nimport { SiteScripts } from \"./types\";\nimport \"../folders/list\";\nimport { _Web, Web } from \"../webs/types\";\nimport { extractWebUrl } from \"../utils/extractweburl\";\n\ndeclare module \"../lists/types\" {\n    interface _List {\n        getSiteScript(): Promise<string>;\n    }\n\n    interface IList {\n        /**\n         * Gets the site script syntax (JSON) from the current list\n         */\n        getSiteScript(): Promise<string>;\n    }\n}\n\n_List.prototype.getSiteScript = async function (this: _List): Promise<string> {\n\n    const rootFolder = await this.clone(List).rootFolder.get<{ Name: string }>();\n    const web = await Web(extractWebUrl(this.toUrl())).select(\"Url\").get();\n    const absoluteListUrl = combine(web.Url, \"Lists\", rootFolder.Name);\n    return SiteScripts(this, \"\").getSiteScriptFromList(absoluteListUrl);\n};\n","import \"./web\";\nimport \"./list\";\nimport { SPRest } from \"../rest\";\nimport { ISiteScripts, SiteScripts } from \"./types\";\n\nexport {\n    SiteScripts,\n    ISiteScripts,\n    ISiteScriptInfo,\n    ISiteScriptUpdateInfo,\n    ISiteScriptSerializationInfo,\n    ISiteScriptSerializationResult,\n} from \"./types\";\n\ndeclare module \"../rest\" {\n    interface SPRest {\n        readonly siteScripts: ISiteScripts;\n    }\n}\n\nReflect.defineProperty(SPRest.prototype, \"siteScripts\", {\n    configurable: true,\n    enumerable: true,\n    get: function (this: SPRest) {\n        return SiteScripts(this._baseUrl);\n    },\n});\n","import { addProp, body } from \"@pnp/odata\";\nimport { _Web, Web } from \"../webs/types\";\nimport { ISiteUsers, SiteUsers, ISiteUser, SiteUser, IWebEnsureUserResult } from \"./types\";\nimport { odataUrlFrom } from \"../odata\";\nimport { spPost } from \"../operations\";\n\ndeclare module \"../webs/types\" {\n    interface _Web {\n        readonly siteUsers: ISiteUsers;\n        readonly currentUser: ISiteUser;\n        ensureUser(loginName: string): Promise<IWebEnsureUserResult>;\n        getUserById(id: number): ISiteUser;\n    }\n    interface IWeb {\n\n        /**\n         * The site users\n         */\n        readonly siteUsers: ISiteUsers;\n\n        /**\n         * Information on the current user\n         */\n        readonly currentUser: ISiteUser;\n\n        /**\n        * Checks whether the specified login name belongs to a valid user in the web. If the user doesn't exist, adds the user to the web.\n        *\n        * @param loginName The login name of the user (ex: i:0#.f|membership|user@domain.onmicrosoft.com)\n        */\n        ensureUser(loginName: string): Promise<IWebEnsureUserResult>;\n\n        /**\n         * Returns the user corresponding to the specified member identifier for the current site\n         *\n         * @param id The id of the user\n         */\n        getUserById(id: number): ISiteUser;\n    }\n}\n\naddProp(_Web, \"siteUsers\", SiteUsers);\naddProp(_Web, \"currentUser\", SiteUser, \"currentuser\");\n\n_Web.prototype.ensureUser = async function (this: _Web, logonName: string): Promise<IWebEnsureUserResult> {\n\n    const data = await spPost(this.clone(Web, \"ensureuser\"), body({ logonName }));\n    return {\n        data,\n        user: SiteUser(odataUrlFrom(data)),\n    };\n};\n\n_Web.prototype.getUserById = function (id: number): ISiteUser {\n    return SiteUser(this, `getUserById(${id})`);\n};\n","import {\n  _SharePointQueryableInstance,\n  ISharePointQueryable,\n  spInvokableFactory,\n  _SharePointQueryable,\n} from \"../sharepointqueryable\";\nimport { defaultPath } from \"../decorators\";\nimport { hOP, IFetchOptions } from \"@pnp/common\";\nimport { metadata } from \"../utils/metadata\";\nimport { body } from \"@pnp/odata\";\nimport { spPost } from \"../operations\";\nimport { tag } from \"../telemetry\";\n\n@defaultPath(\"_api/social.following\")\nexport class _Social extends _SharePointQueryableInstance implements ISocial {\n\n  public get my(): IMySocial {\n    return MySocial(this);\n  }\n\n  @tag(\"soc.getFollowedSitesUri\")\n  public async getFollowedSitesUri(): Promise<string> {\n    const r = await this.clone(SocialCloneFactory, \"FollowedSitesUri\").get();\n    return r.FollowedSitesUri || r;\n  }\n\n  @tag(\"soc.getFollowedDocumentsUri\")\n    public async getFollowedDocumentsUri(): Promise<string> {\n    const r = await this.clone(SocialCloneFactory, \"FollowedDocumentsUri\").get();\n    return r.FollowedDocumentsUri || r;\n  }\n\n  @tag(\"soc.follow\")\n  public async follow(actorInfo: ISocialActorInfo): Promise<SocialFollowResult> {\n    return await spPost(this.clone(SocialCloneFactory, \"follow\"), this.createSocialActorInfoRequestBody(actorInfo));\n  }\n\n  @tag(\"soc.isFollowed\")\n  public async isFollowed(actorInfo: ISocialActorInfo): Promise<boolean> {\n    return await spPost(this.clone(SocialCloneFactory, \"isfollowed\"), this.createSocialActorInfoRequestBody(actorInfo));\n  }\n\n  @tag(\"soc.stopFollowing\")\n  public async stopFollowing(actorInfo: ISocialActorInfo): Promise<void> {\n    return await spPost(this.clone(SocialCloneFactory, \"stopfollowing\"), this.createSocialActorInfoRequestBody(actorInfo));\n  }\n\n  private createSocialActorInfoRequestBody(actorInfo: ISocialActorInfo): IFetchOptions {\n    return body({\n      \"actor\":\n        Object.assign(metadata(\"SP.Social.SocialActorInfo\"), {\n          Id: null,\n        }, actorInfo),\n    });\n  }\n}\n\n/**\n * Describes the public methods for the Social interface\n */\nexport interface ISocial {\n  /**\n   * Access to the curren't user's social data\n   */\n  readonly my: IMySocial;\n  /**\n   * Get a list of followed sites for the current user.\n   */\n  getFollowedSitesUri(): Promise<string>;\n  /**\n   * Get a list of followed documents for the current user.\n   */\n  getFollowedDocumentsUri(): Promise<string>;\n  /**\n   * Follow an actor for the current user.\n   *\n   * @param actorInfo Provide the actor to follow.\n   */\n  follow(actorInfo: ISocialActorInfo): Promise<SocialFollowResult>;\n  /**\n   * Check if the current user is following the actor.\n   *\n   * @param actorInfo Provide the actor to check.\n   */\n  isFollowed(actorInfo: ISocialActorInfo): Promise<boolean>;\n  /**\n   * Stop following an actor for the current user.\n   *\n   * @param actorInfo Provide the actor to stop following.\n   */\n  stopFollowing(actorInfo: ISocialActorInfo): Promise<void>;\n}\n\n/**\n * Get a new Social instance for the particular Url\n */\nexport const Social = (baseUrl: string | ISharePointQueryable): ISocial => new _Social(baseUrl);\nconst SocialCloneFactory = (baseUrl: string | ISharePointQueryable, paths?: string): ISocial & ISharePointQueryable => new _Social(baseUrl, paths);\n\n/**\n * Current user's Social instance\n */\n@defaultPath(\"my\")\nexport class _MySocial extends _SharePointQueryableInstance implements IMySocial {\n\n  @tag(\"msoc.followed\")\n  public async followed(types: SocialActorTypes): Promise<ISocialActor[]> {\n    const r = await this.clone(MySocialCloneFactory, `followed(types=${types})`)();\n    return hOP(r, \"Followed\") ? r.Followed.results : r;\n  }\n\n  @tag(\"msoc.followedCount\")\n  public async followedCount(types: SocialActorTypes): Promise<number> {\n    const r = await this.clone(MySocialCloneFactory, `followedcount(types=${types})`)();\n    return r.FollowedCount || r;\n  }\n\n  @tag(\"msoc.followers\")\n  public async followers(): Promise<ISocialActor[]> {\n    const r = await this.clone(MySocialCloneFactory, \"followers\")();\n    return hOP(r, \"Followers\") ? r.Followers.results : r;\n  }\n\n  @tag(\"msoc.suggestions\")\n  public async suggestions(): Promise<ISocialActor[]> {\n    const r = await this.clone(MySocialCloneFactory, \"suggestions\")();\n    return hOP(r, \"Suggestions\") ? r.Suggestions.results : r;\n  }\n}\n\n/**\n * Defines the public methods exposed by the my endpoint\n */\nexport interface IMySocial {\n\n  /**\n   * Allow access to the v2 invokable\n   */\n  (this: IMySocial): Promise<IMySocialData>;\n\n  /**\n   * Gets this user's data\n   */\n  get(): Promise<IMySocialData>;\n  /**\n   * Gets users, documents, sites, and tags that the current user is following.\n   * \n   * @param types Bitwise set of SocialActorTypes to retrieve\n   */\n  followed(types: SocialActorTypes): Promise<ISocialActor[]>;\n  /**\n   * Gets the count of users, documents, sites, and tags that the current user is following.\n   * \n   * @param types Bitwise set of SocialActorTypes to retrieve\n   */\n  followedCount(types: SocialActorTypes): Promise<number>;\n  /**\n   * Gets the users who are following the current user.\n   */\n  followers(): Promise<ISocialActor[]>;\n  /**\n   * Gets users who the current user might want to follow.\n   */\n  suggestions(): Promise<ISocialActor[]>;\n}\n\n/**\n * Invokable factory for IMySocial instances\n */\nexport const MySocial = spInvokableFactory<IMySocial>(_MySocial);\nconst MySocialCloneFactory = (baseUrl: string | ISharePointQueryable, path?: string): IMySocial & ISharePointQueryable => <any>MySocial(baseUrl, path);\n\n/**\n * Social actor info\n *\n */\nexport interface ISocialActorInfo {\n  AccountName?: string;\n  ActorType: SocialActorType;\n  ContentUri?: string;\n  Id?: string;\n  TagGuid?: string;\n}\n\n/**\n * Social actor type\n *\n */\nexport const enum SocialActorType {\n  User,\n  Document,\n  Site,\n  Tag,\n}\n\n/**\n * Social actor type\n *\n */\n/* tslint:disable:no-bitwise */\nexport const enum SocialActorTypes {\n  None = 0,\n  User = 1 << SocialActorType.User,\n  Document = 1 << SocialActorType.Document,\n  Site = 1 << SocialActorType.Site,\n  Tag = 1 << SocialActorType.Tag,\n  /**\n   * The set excludes documents and sites that do not have feeds.\n   */\n  ExcludeContentWithoutFeeds = 268435456,\n  /**\n   * The set includes group sites\n   */\n  IncludeGroupsSites = 536870912,\n  /**\n   * The set includes only items created within the last 24 hours\n   */\n  WithinLast24Hours = 1073741824,\n}\n/* tslint:enable */\n\n/**\n * Result from following\n *\n */\nexport const enum SocialFollowResult {\n  Ok = 0,\n  AlreadyFollowing = 1,\n  LimitReached = 2,\n  InternalError = 3,\n}\n\n/**\n * Specifies an exception or status code.\n */\nexport const enum SocialStatusCode {\n  /**\n   * The operation completed successfully\n   */\n  OK,\n  /**\n   * The request is invalid.\n   */\n  InvalidRequest,\n  /**\n   *  The current user is not authorized to perform the operation.\n   */\n  AccessDenied,\n  /**\n   * The target of the operation was not found.\n   */\n  ItemNotFound,\n  /**\n   * The operation is invalid for the target's current state. \n   */\n  InvalidOperation,\n  /**\n   * The operation completed without modifying the target.\n   */\n  ItemNotModified,\n  /**\n   * The operation failed because an internal error occurred.\n   */\n  InternalError,\n  /**\n   * The operation failed because the server could not access the distributed cache.\n   */\n  CacheReadError,\n  /**\n   * The operation succeeded but the server could not update the distributed cache.\n   */\n  CacheUpdateError,\n  /**\n   * No personal site exists for the current user, and no further information is available.\n   */\n  PersonalSiteNotFound,\n  /**\n   * No personal site exists for the current user, and a previous attempt to create one failed.\n   */\n  FailedToCreatePersonalSite,\n  /**\n   * No personal site exists for the current user, and a previous attempt to create one was not authorized.\n   */\n  NotAuthorizedToCreatePersonalSite,\n  /**\n   * No personal site exists for the current user, and no attempt should be made to create one.\n   */\n  CannotCreatePersonalSite,\n  /**\n   * The operation was rejected because an internal limit had been reached.\n   */\n  LimitReached,\n  /**\n   * The operation failed because an error occurred during the processing of the specified attachment.\n   */\n  AttachmentError,\n  /**\n   * The operation succeeded with recoverable errors; the returned data is incomplete.\n   */\n  PartialData,\n  /**\n   * A required SharePoint feature is not enabled.\n   */\n  FeatureDisabled,\n  /**\n   * The site's storage quota has been exceeded.\n   */\n  StorageQuotaExceeded,\n  /**\n   * The operation failed because the server could not access the database.\n   */\n  DatabaseError,\n}\n\nexport interface ISocialActor {\n  /**\n   * Gets the actor type.\n   */\n  ActorType: SocialActorType;\n  /**\n   * Gets the actor's unique identifier.\n   */\n  Id: string;\n  /**\n   * Gets the actor's canonical URI.\n   */\n  Uri: string;\n  /**\n   * Gets the actor's display name.\n   */\n  Name: string;\n  /**\n   * Returns true if the current user is following the actor, false otherwise.\n   */\n  IsFollowed: boolean;\n  /**\n   * Gets a code that indicates recoverable errors that occurred during actor retrieval\n   */\n  Status: SocialStatusCode;\n  /**\n   * Returns true if the Actor can potentially be followed, false otherwise.\n   */\n  CanFollow: boolean;\n  /**\n   * Gets the actor's image URI. Only valid when ActorType is User, Document, or Site\n   */\n  ImageUri: string;\n  /**\n   * Gets the actor's account name. Only valid when ActorType is User\n   */\n  AccountName: string;\n  /**\n   * Gets the actor's email address. Only valid when ActorType is User\n   */\n  EmailAddress: string;\n  /**\n   * Gets the actor's title. Only valid when ActorType is User\n   */\n  Title: string;\n  /**\n   * Gets the text of the actor's most recent post. Only valid when ActorType is User\n   */\n  StatusText: string;\n  /**\n   * Gets the URI of the actor's personal site. Only valid when ActorType is User\n   */\n  PersonalSiteUri: string;\n  /**\n   * Gets the URI of the actor's followed content folder. Only valid when this represents the current user\n   */\n  FollowedContentUri: string;\n  /**\n   * Gets the actor's content URI. Only valid when ActorType is Document, or Site\n   */\n  ContentUri: string;\n  /**\n   * Gets the actor's library URI. Only valid when ActorType is Document\n   */\n  LibraryUri: string;\n  /**\n   * Gets the actor's tag GUID. Only valid when ActorType is Tag\n   */\n  TagGuid: string;\n}\n\n/**\n * Defines the properties returned from the my endpoint\n */\nexport interface IMySocialData {\n  SocialActor: ISocialActor;\n  MyFollowedDocumentsUri: string;\n  MyFollowedSitesUri: string;\n}\n","import { ISocial, Social } from \"./types\";\nimport { SPRest } from \"../rest\";\n\nexport {\n  IMySocial,\n  ISocial,\n  IMySocialData,\n  ISocialActor,\n  ISocialActorInfo,\n  MySocial,\n  Social,\n  SocialActorType,\n  SocialActorTypes,\n  SocialFollowResult,\n  SocialStatusCode,\n} from \"./types\";\n\ndeclare module \"../rest\" {\n  interface SPRest {\n    /**\n     * Access to the social instance which allows you to track followed sites, people and docs.\n     */\n    readonly social: ISocial;\n  }\n}\n\nReflect.defineProperty(SPRest.prototype, \"social\", {\n  configurable: true,\n  enumerable: true,\n  get: function (this: SPRest) {\n    return Social(this._baseUrl);\n  },\n});\n","import { _SharePointQueryable, ISharePointQueryable, spInvokableFactory } from \"../sharepointqueryable\";\nimport { assign, ITypedHash } from \"@pnp/common\";\nimport { SPBatch } from \"../batch\";\nimport { ICachingOptions, body } from \"@pnp/odata\";\nimport { odataUrlFrom } from \"../odata\";\nimport { IPrincipalInfo, PrincipalType, PrincipalSource } from \"../types\";\nimport { metadata } from \"../utils/metadata\";\nimport { File, IFile } from \"../files/types\";\nimport { extractWebUrl } from \"../utils/extractweburl\";\nimport { spPost } from \"../operations\";\nimport { tag } from \"../telemetry\";\nimport { objectToSPKeyValueCollection } from \"../utils/objectToSPKeyValueCollection\";\n\nexport class _Utilities extends _SharePointQueryable implements IUtilities {\n    constructor(baseUrl: string | ISharePointQueryable, methodName: string) {\n        const url = typeof baseUrl === \"string\" ? baseUrl : baseUrl.toUrl();\n        super(extractWebUrl(url), `_api/SP.Utilities.Utility.${methodName}`);\n    }\n\n    public excute<T>(props: any): Promise<T> {\n        return spPost(this, body(props));\n    }\n\n    public sendEmail(props: IEmailProperties): Promise<void> {\n        const params = {\n            properties: assign(metadata(\"SP.Utilities.EmailProperties\"), {\n                Body: props.Body,\n                From: props.From,\n                Subject: props.Subject,\n            }),\n        };\n\n        if (props.To && props.To.length > 0) {\n\n            params.properties = assign(params.properties, {\n                To: { results: props.To },\n            });\n        }\n\n        if (props.CC && props.CC.length > 0) {\n\n            params.properties = assign(params.properties, {\n                CC: { results: props.CC },\n            });\n        }\n\n        if (props.BCC && props.BCC.length > 0) {\n\n            params.properties = assign(params.properties, {\n                BCC: { results: props.BCC },\n            });\n        }\n\n        if (props.AdditionalHeaders) {\n\n            params.properties = assign(params.properties, {\n                AdditionalHeaders: objectToSPKeyValueCollection(props.AdditionalHeaders),\n            });\n        }\n\n        return tag.configure(this.clone(UtilitiesCloneFactory, \"SendEmail\", true), \"u.sendEmail\").excute<void>(params);\n    }\n\n    public getCurrentUserEmailAddresses(): Promise<string> {\n        return tag.configure(this.clone(UtilitiesCloneFactory, \"GetCurrentUserEmailAddresses\", true), \"u.getCurrentUserEmailAddresses\").excute<string>({});\n    }\n\n    public resolvePrincipal(input: string,\n        scopes: PrincipalType,\n        sources: PrincipalSource,\n        inputIsEmailOnly: boolean,\n        addToUserInfoList: boolean,\n        matchUserInfoList = false): Promise<IPrincipalInfo> {\n        const params = {\n            addToUserInfoList,\n            input,\n            inputIsEmailOnly,\n            matchUserInfoList,\n            scopes,\n            sources,\n        };\n\n        const clone = this.clone(UtilitiesCloneFactory, \"ResolvePrincipalInCurrentContext\", true);\n        return tag.configure(clone, \"u.ResolvePrincipalInCurrentContext\").excute<IPrincipalInfo>(params);\n    }\n\n    public searchPrincipals(input: string, scopes: PrincipalType, sources: PrincipalSource, groupName: string, maxCount: number): Promise<IPrincipalInfo[]> {\n        const params = {\n            groupName: groupName,\n            input: input,\n            maxCount: maxCount,\n            scopes: scopes,\n            sources: sources,\n        };\n\n        const clone = this.clone(UtilitiesCloneFactory, \"SearchPrincipalsUsingContextWeb\", true);\n        return tag.configure(clone, \"u.SearchPrincipalsUsingContextWeb\").excute<IPrincipalInfo[]>(params);\n    }\n\n    public createEmailBodyForInvitation(pageAddress: string): Promise<string> {\n        const params = {\n            pageAddress: pageAddress,\n        };\n\n        const clone = this.clone(UtilitiesCloneFactory, \"CreateEmailBodyForInvitation\", true);\n        return tag.configure(clone, \"u.CreateEmailBodyForInvitation\").excute<string>(params);\n    }\n\n    public expandGroupsToPrincipals(inputs: string[], maxCount = 30): Promise<IPrincipalInfo[]> {\n        const params = {\n            inputs: inputs,\n            maxCount: maxCount,\n        };\n\n        const clone = this.clone(UtilitiesCloneFactory, \"ExpandGroupsToPrincipals\", true);\n        return tag.configure(clone, \"u.ExpandGroupsToPrincipals\").excute<IPrincipalInfo[]>(params);\n    }\n\n    public async createWikiPage(info: IWikiPageCreationInfo): Promise<ICreateWikiPageResult> {\n\n        const clone = this.clone(UtilitiesCloneFactory, \"CreateWikiPageInContextWeb\", true);\n        const newPage = await tag.configure(clone, \"u.CreateWikiPageInContextWeb\").excute<ICreateWikiPageResult>({ parameters: info });\n\n        return {\n            data: newPage,\n            file: File(odataUrlFrom(newPage)),\n        } as ICreateWikiPageResult;\n    }\n}\n\n/**\n * Describes the SharePoint utility methods\n */\nexport interface IUtilities {\n    /**\n     * Gives you the ability to cache returned data in an easy way.\n     * @param options instance of ICachingOptions\n     */\n    usingCaching(options?: ICachingOptions): this;\n\n    /**\n     * Gives you the ability to batch multiple requests into a single request to SharePoint.\n     * @param batch instance of SPBatch\n     */\n    inBatch(batch: SPBatch): this;\n\n    /**\n     * This methods will send an e-mail based on the incoming properties of the IEmailProperties parameter.\n     * @param props IEmailProperties object\n     */\n    sendEmail(props: IEmailProperties): Promise<void>;\n\n    /**\n     * This method returns the current user's email addresses known to SharePoint.\n     */\n    getCurrentUserEmailAddresses(): Promise<string>;\n\n    /**\n     * Gets information about a principal that matches the specified Search criteria.\n     * @param email E-mail address\n     * @param scopes Specifies the type to be used when searching for a principal\n     * @param sources Specifies the source to be used when searching for a principal.\n     * @param inputIsEmailOnly Specifies whether only the e-mail address will be used when searching for a principal.\n     * @param addToUserInfoList Specifies whether the user should be added to the hidden user info list.\n     * @param matchUserInfoList [Optional] By default false\n     */\n    resolvePrincipal(email: string,\n        scopes: PrincipalType,\n        sources: PrincipalSource,\n        inputIsEmailOnly: boolean,\n        addToUserInfoList: boolean,\n        matchUserInfoList?: boolean): Promise<IPrincipalInfo>;\n\n    /**\n    * Gets information about the principals that match the specified search criteria.\n    * @param input Specifies the value to be used when searching for a principal.\n    * @param scopes Specifies the type to be used when searching for a principal.\n    * @param sources Specifies the source to be used when searching for a principal.\n    * @param groupName Specifies the collection of users to be used when searching for a principal.\n    * @param maxCount Specifies the maximum number of principals to be returned in the list.\n    */\n    searchPrincipals(input: string, scopes: PrincipalType, sources: PrincipalSource, groupName: string, maxCount: number): Promise<IPrincipalInfo[]>;\n\n    /**\n     * Gets the external (outside the firewall) URL to a document or resource in a site.\n     * @param pageAddress Specifies the URI for the document or resource. It must be a URL.\n     */\n    createEmailBodyForInvitation(pageAddress: string): Promise<string>;\n\n    /**\n     * Resolves the principals contained within the supplied groups.\n     * @param inputs A collection of groups to be expanded.\n     * @param maxCount Specifies the maximum number of principals to be returned.\n     */\n    expandGroupsToPrincipals(inputs: string[], maxCount?: number): Promise<IPrincipalInfo[]>;\n\n    /**\n     * Creates a new Wiki page.\n     * @param info Instance of IWikiPageCreationInfo.\n     */\n    createWikiPage(info: IWikiPageCreationInfo): Promise<ICreateWikiPageResult>;\n}\n\nexport const Utilities = spInvokableFactory<IUtilities>(_Utilities);\ntype UtilitiesCloneType = IUtilities & ISharePointQueryable & { excute<T>(props: any): Promise<T> };\nconst UtilitiesCloneFactory = (baseUrl: string | ISharePointQueryable, path?: string): UtilitiesCloneType => <any>Utilities(baseUrl, path);\n\nexport interface ICreateWikiPageResult {\n    /**\n     * The returned Wiki page represented by raw data.\n     */\n    data: any;\n\n    /**\n     * The returned Wiki page represented as a file which can be further updated.\n     */\n    file: IFile;\n}\n\nexport interface IEmailProperties {\n    /**\n     * The list of receivers represented by a string array.\n     */\n    To: string[];\n\n    /**\n     * The list of receivers as CC (carbon copy) represented by a string array.\n     * This is optional.\n     */\n    CC?: string[];\n\n    /**\n     * The list of receivers as BCC (blind carbon copy) represented by a string array.\n     * This is optional.\n     */\n    BCC?: string[];\n\n    /**\n     * The subject of the email.\n     */\n    Subject: string;\n\n    /**\n     * The body of the email.\n     */\n    Body: string;\n\n    /**\n     * The additional headers appened to the request in key/value pairs.\n     */\n    AdditionalHeaders?: ITypedHash<string>;\n\n    /**\n     * The from address of the email.\n     * This is optional.\n     */\n    From?: string;\n}\n\nexport interface IWikiPageCreationInfo {\n    /**\n     * The server-relative-url of the wiki page to be created.\n     */\n    ServerRelativeUrl: string;\n\n    /**\n     * The wiki content to be set in the wiki page.\n     */\n    WikiHtmlContent: string;\n}\n","import { SPRest } from \"../rest\";\nimport { IUtilities, Utilities } from \"./types\";\n\nexport {\n    ICreateWikiPageResult,\n    IEmailProperties,\n    IUtilities,\n    IWikiPageCreationInfo,\n    Utilities,\n} from \"./types\";\n\ndeclare module \"../rest\" {\n    interface SPRest {\n        readonly utility: IUtilities;\n    }\n}\n\nReflect.defineProperty(SPRest.prototype, \"utility\", {\n    configurable: true,\n    enumerable: true,\n    get: function (this: SPRest) {\n        return Utilities(this._baseUrl, \"\");\n    },\n});\n","import {\n    _SharePointQueryableInstance,\n    _SharePointQueryableCollection,\n    spInvokableFactory,\n} from \"../sharepointqueryable\";\nimport { body, headers } from \"@pnp/odata\";\nimport { defaultPath } from \"../decorators\";\nimport { spPost, spDelete, spPatch } from \"../operations\";\nimport { tag } from \"../telemetry\";\n\n@defaultPath(\"subscriptions\")\nexport class _Subscriptions extends _SharePointQueryableCollection {\n\n    /**\n    * Returns all the webhook subscriptions or the specified webhook subscription\n    *\n    * @param subscriptionId The id of a specific webhook subscription to retrieve, omit to retrieve all the webhook subscriptions\n    */\n    public getById(subscriptionId: string): ISubscription {\n\n        return tag.configure(Subscription(this).concat(`('${subscriptionId}')`), \"subs.getById\");\n    }\n\n    /**\n     * Creates a new webhook subscription\n     *\n     * @param notificationUrl The url to receive the notifications\n     * @param expirationDate The date and time to expire the subscription in the form YYYY-MM-ddTHH:mm:ss+00:00 (maximum of 6 months)\n     * @param clientState A client specific string (optional)\n     */\n    @tag(\"subs.add\")\n    public async add(notificationUrl: string, expirationDate: string, clientState?: string): Promise<ISubscriptionAddResult> {\n\n        const postBody: any = {\n            \"expirationDateTime\": expirationDate,\n            \"notificationUrl\": notificationUrl,\n            \"resource\": this.toUrl(),\n        };\n\n        if (clientState) {\n            postBody.clientState = clientState;\n        }\n\n        const data = await spPost(this, body(postBody, headers({ \"Content-Type\": \"application/json\" })));\n\n        return { data, subscription: this.getById(data.id) };\n    }\n}\nexport interface ISubscriptions extends _Subscriptions { }\nexport const Subscriptions = spInvokableFactory<ISubscriptions>(_Subscriptions);\n\nexport class _Subscription extends _SharePointQueryableInstance {\n\n    /**\n     * Renews this webhook subscription\n     *\n     * @param expirationDate The date and time to expire the subscription in the form YYYY-MM-ddTHH:mm:ss+00:00 (maximum of 6 months, optional)\n     * @param notificationUrl The url to receive the notifications (optional)\n     * @param clientState A client specific string (optional)\n     */\n    @tag(\"sub.update\")\n    public async update(expirationDate?: string, notificationUrl?: string, clientState?: string): Promise<ISubscriptionUpdateResult> {\n\n        const postBody: any = {};\n\n        if (expirationDate) {\n            postBody.expirationDateTime = expirationDate;\n        }\n\n        if (notificationUrl) {\n            postBody.notificationUrl = notificationUrl;\n        }\n\n        if (clientState) {\n            postBody.clientState = clientState;\n        }\n\n        const data = await spPatch(this, body(postBody, headers({ \"Content-Type\": \"application/json\" })));\n\n        return { data, subscription: this };\n    }\n\n    /**\n     * Removes this webhook subscription\n     *\n     */\n    @tag(\"sub.delete\")\n    public delete(): Promise<void> {\n        return spDelete(this);\n    }\n}\nexport interface ISubscription extends _Subscription { }\nexport const Subscription = spInvokableFactory<ISubscription>(_Subscription);\n\n/**\n * Result from adding a new subscription\n *\n */\nexport interface ISubscriptionAddResult {\n    subscription: ISubscription;\n    data: any;\n}\n\n/**\n * Result from updating a subscription\n *\n */\nexport interface ISubscriptionUpdateResult {\n    subscription: ISubscription;\n    data: any;\n}\n","import { addProp } from \"@pnp/odata\";\nimport { _List } from \"../lists/types\";\nimport { Subscriptions, ISubscriptions } from \"./types\";\n\ndeclare module \"../lists/types\" {\n    interface _List {\n        readonly subscriptions: ISubscriptions;\n    }\n    interface IList {\n        /**\n         * Gets the collection of webhooks created for this list\n         *\n         */\n        readonly subscriptions: ISubscriptions;\n    }\n}\n\naddProp(_List, \"subscriptions\", Subscriptions);\n","import {\n    _SharePointQueryableInstance,\n    _SharePointQueryableCollection,\n    spInvokableFactory,\n    deleteable,\n    IDeleteable,\n} from \"../sharepointqueryable\";\nimport { assign, ITypedHash } from \"@pnp/common\";\nimport { body } from \"@pnp/odata\";\nimport { defaultPath } from \"../decorators\";\nimport { spPost } from \"../operations\";\nimport { tag } from \"../telemetry\";\nimport { IBasePermissions } from \"../security\";\nimport { metadata } from \"../utils/metadata\";\n\n@defaultPath(\"usercustomactions\")\nexport class _UserCustomActions extends _SharePointQueryableCollection<IUserCustomActionInfo[]> {\n\n    /**\t   \n     * Returns the user custom action with the specified id\t     \n     *\t    \n     * @param id The GUID id of the user custom action to retrieve\t     \n     */\n    public getById(id: string): IUserCustomAction {\n        return tag.configure(UserCustomAction(this).concat(`('${id}')`), \"ucas.getById\");\n    }\n\n    /**\n     * Creates a user custom action\n     *\n     * @param properties The information object of property names and values which define the new user custom action\n     */\n    @tag(\"ucas.add\")\n    public async add(properties: ITypedHash<any>): Promise<IUserCustomActionAddResult> {\n        const data = await spPost(this, body(assign(metadata(\"SP.UserCustomAction\"), properties)));\n        return {\n            action: this.getById(data.Id),\n            data,\n        };\n    }\n\n    /**\n     * Deletes all user custom actions in the collection\n     */\n    @tag(\"ucas.clear\")\n    public clear(): Promise<void> {\n        return spPost(this.clone(UserCustomActions, \"clear\"));\n    }\n}\nexport interface IUserCustomActions extends _UserCustomActions { }\nexport const UserCustomActions = spInvokableFactory<IUserCustomActions>(_UserCustomActions);\n\nexport class _UserCustomAction extends _SharePointQueryableInstance<IUserCustomActionInfo> {\n\n    public delete = deleteable(\"uca\");\n\n    /**\n    * Updates this user custom action with the supplied properties\n    *\n    * @param properties An information object of property names and values to update for this user custom action\n    */\n    public update: any = this._update<IUserCustomActionUpdateResult, ITypedHash<any>>(\"SP.UserCustomAction\", (data) => ({ data, action: <any>this }));\n}\nexport interface IUserCustomAction extends _UserCustomAction, IDeleteable { }\nexport const UserCustomAction = spInvokableFactory<IUserCustomAction>(_UserCustomAction);\n\n/**\n * Result from adding a user custom action\n */\nexport interface IUserCustomActionAddResult {\n    /*\n     * The raw data returned from the add operation\n     */\n    data: any;\n\n    /*\n     * The added UserCustomAction\n     */\n    action: IUserCustomAction;\n}\n\n/**\n * Result from udating a user custom action\n */\nexport interface IUserCustomActionUpdateResult {\n    /*\n     * The raw data returned from the update operation\n     */\n    data: any;\n\n    /*\n     * The updated UserCustomAction\n     */\n    action: IUserCustomAction;\n}\n\nexport enum UserCustomActionRegistrationType {\n    None,\n    List,\n    ContentType,\n    ProgId,\n    FileType,\n}\n\nexport enum UserCustomActionScope {\n    Unknown,\n    Site = 2,\n    Web,\n    List,\n}\n\nexport interface IUserCustomActionInfo {\n    CommandUIExtension: string;\n    Description: string;\n    Group: string;\n    Id: string;\n    ImageUrl: string;\n    Location: string;\n    Name: string;\n    RegistrationId: string;\n    RegistrationType: UserCustomActionRegistrationType;\n    Rights: IBasePermissions;\n    Scope: UserCustomActionScope;\n    ScriptBlock: string;\n    ScriptSrc: string;\n    Sequence: number;\n    Title: string;\n    Url: string;\n    VersionOfUserCustomAction: string;\n}\n","import { addProp } from \"@pnp/odata\";\nimport { _List } from \"../lists/types\";\nimport { UserCustomActions, IUserCustomActions } from \"./types\";\n\ndeclare module \"../lists/types\" {\n    interface _List {\n        readonly userCustomActions: IUserCustomActions;\n    }\n\n    interface IList {\n        /**\n         * Get all custom actions on a list\n         */\n        readonly userCustomActions: IUserCustomActions;\n    }\n}\n\naddProp(_List, \"userCustomActions\", UserCustomActions);\n","import { addProp } from \"@pnp/odata\";\nimport { _Web } from \"../webs/types\";\nimport { UserCustomActions, IUserCustomActions } from \"./types\";\n\ndeclare module \"../webs/types\" {\n    interface _Web {\n        /**\n         * Gets a newly refreshed collection of the SPWeb's SPUserCustomActionCollection\n         */\n        readonly userCustomActions: IUserCustomActions;\n    }\n\n    interface IWeb {\n        /**\n         * Gets a newly refreshed collection of the SPWeb's SPUserCustomActionCollection\n         */\n        readonly userCustomActions: IUserCustomActions;\n    }\n}\n\naddProp(_Web, \"userCustomActions\", UserCustomActions);\n","import { addProp } from \"@pnp/odata\";\nimport { _Site } from \"../sites/types\";\nimport { UserCustomActions, IUserCustomActions } from \"./types\";\n\ndeclare module \"../sites/types\" {\n    interface _Site {\n        readonly userCustomActions: IUserCustomActions;\n    }\n\n    interface ISite {\n        /**\n         * Get all custom actions on a site collection\n         */\n        readonly userCustomActions: IUserCustomActions;\n    }\n}\n\naddProp(_Site, \"userCustomActions\", UserCustomActions);\n","import { ITypedHash } from \"@pnp/common\";\nimport { body } from \"@pnp/odata\";\nimport {\n    _SharePointQueryableInstance,\n    _SharePointQueryableCollection,\n    spInvokableFactory,\n    IDeleteable,\n    deleteable,\n} from \"../sharepointqueryable\";\nimport { metadata } from \"../utils/metadata\";\nimport { defaultPath } from \"../decorators\";\nimport { spPost } from \"../operations\";\nimport { tag } from \"../telemetry\";\n\n@defaultPath(\"views\")\nexport class _Views extends _SharePointQueryableCollection<IViewInfo[]> {\n\n    /**\t  \n     * Gets a view by guid id\t    \n     *\t   \n     * @param id The GUID id of the view\t    \n     */\n    public getById(id: string): IView {\n        return View(this).concat(`('${id}')`);\n    }\n\n    /**\n     * Gets a view by title (case-sensitive)\n     *\n     * @param title The case-sensitive title of the view\n     */\n    public getByTitle(title: string): IView {\n        return View(this, `getByTitle('${title}')`);\n    }\n\n    /**\n     * Adds a new view to the collection\n     *\n     * @param title The new views's title\n     * @param personalView True if this is a personal view, otherwise false, default = false\n     * @param additionalSettings Will be passed as part of the view creation body\n     */\n    @tag(\"vs.add\")\n    public async add(title: string, personalView = false, additionalSettings: ITypedHash<any> = {}): Promise<IViewAddResult> {\n\n        const postBody = body(Object.assign(metadata(\"SP.View\"), {\n            \"PersonalView\": personalView,\n            \"Title\": title,\n        }, additionalSettings));\n\n        const data = await spPost(this.clone(Views, null), postBody);\n\n        return {\n            data,\n            view: this.getById(data.Id),\n        };\n    }\n}\nexport interface IViews extends _Views { }\nexport const Views = spInvokableFactory<IViews>(_Views);\n\nexport class _View extends _SharePointQueryableInstance<IViewInfo> {\n\n    public delete = deleteable(\"vw\");\n\n    public get fields(): IViewFields {\n        return ViewFields(this);\n    }\n\n    /**\n     * Updates this view intance with the supplied properties\n     *\n     * @param properties A plain object hash of values to update for the view\n     */\n    public update: any = this._update<IViewUpdateResult, ITypedHash<any>>(\"SP.View\", data => ({ data, view: <any>this }));\n\n    /**\n     * Returns the list view as HTML.\n     *\n     */\n    @tag(\"v.renderAsHtml\")\n    public renderAsHtml(): Promise<string> {\n        return this.clone(View, \"renderashtml\")();\n    }\n\n    /**\n     * Sets the view schema\n     * \n     * @param viewXml The view XML to set\n     */\n    @tag(\"v.setViewXml\")\n    public setViewXml(viewXml: string): Promise<void> {\n        return spPost(this.clone(View, \"SetViewXml\"), body({ viewXml }));\n    }\n}\nexport interface IView extends _View, IDeleteable { }\nexport const View = spInvokableFactory<IView>(_View);\n\n@defaultPath(\"viewfields\")\nexport class _ViewFields extends _SharePointQueryableCollection<{ SchemaXml: string; }> {\n\n    /**\n     * Gets a value that specifies the XML schema that represents the collection.\n     */\n    @tag(\"vfs.getSchemaXml\")\n    public getSchemaXml(): Promise<string> {\n        return this.clone(ViewFields, \"schemaxml\")();\n    }\n\n    /**\n     * Adds the field with the specified field internal name or display name to the collection.\n     *\n     * @param fieldTitleOrInternalName The case-sensitive internal name or display name of the field to add.\n     */\n    @tag(\"vfs.add\")\n    public add(fieldTitleOrInternalName: string): Promise<void> {\n        return spPost(this.clone(ViewFields, `addviewfield('${fieldTitleOrInternalName}')`));\n    }\n\n    /**\n     * Moves the field with the specified field internal name to the specified position in the collection.\n     *\n     * @param field The case-sensitive internal name of the field to move.\n     * @param index The zero-based index of the new position for the field.\n     */\n    @tag(\"vfs.move\")\n    public move(field: string, index: number): Promise<void> {\n        return spPost(this.clone(ViewFields, \"moveviewfieldto\"), body({ field, index }));\n    }\n\n    /**\n     * Removes all the fields from the collection.\n     */\n    @tag(\"vfs.removeAll\")\n    public removeAll(): Promise<void> {\n        return spPost(this.clone(ViewFields, \"removeallviewfields\"));\n    }\n\n    /**\n     * Removes the field with the specified field internal name from the collection.\n     *\n     * @param fieldInternalName The case-sensitive internal name of the field to remove from the view.\n     */\n    @tag(\"vfs.remove\")\n    public remove(fieldInternalName: string): Promise<void> {\n        return spPost(this.clone(ViewFields, `removeviewfield('${fieldInternalName}')`));\n    }\n}\nexport interface IViewFields extends _ViewFields { }\nexport const ViewFields = spInvokableFactory<IViewFields>(_ViewFields);\n\nexport interface IViewAddResult {\n    view: IView;\n    data: IViewInfo;\n}\n\nexport interface IViewUpdateResult {\n    view: IView;\n    data: IViewInfo;\n}\n\nexport enum ViewScope {\n    DefaultValue,\n    Recursive,\n    RecursiveAll,\n    FilesOnly,\n}\n\nexport interface IViewInfo {\n    EditorModified: boolean;\n    Formats: string | null;\n    Hidden: boolean;\n    HtmlSchemaXml: string;\n    Id: string;\n    ImageUrl: string;\n    IncludeRootFolder: boolean;\n    JSLink: string;\n    ListViewXml: string;\n    Method: string | null;\n    MobileDefaultView: boolean;\n    MobileView: boolean;\n    ModerationType: string | null;\n    NewDocumentTemplates: string;\n    OrderedView: boolean;\n    Paged: boolean;\n    PersonalView: boolean;\n    ReadOnlyView: boolean;\n    RequiresClientIntegration: boolean;\n    RowLimit: number;\n    Scope: ViewScope;\n    ServerRelativePath: { DecodedUrl: string; };\n    ServerRelativeUrl: string;\n    StyleId: string | null;\n    TabularView: boolean;\n    Threaded: boolean;\n    Title: string;\n    Toolbar: string;\n    ToolbarTemplateName: string | null;\n    ViewData: string | null;\n    ViewJoins: string | null;\n    ViewProjectedFields: { SchemaXml: string } | null;\n    ViewQuery: string;\n    ViewType: string;\n    VisualizationInfo: any | null;\n}\n","import { addProp } from \"@pnp/odata\";\nimport { _List } from \"../lists/types\";\nimport { Views, IViews, IView, View } from \"./types\";\n\ndeclare module \"../lists/types\" {\n    interface _List {\n        readonly views: IViews;\n        readonly defaultView: IView;\n        getView(id: string): IView;\n    }\n    interface IList {\n        /**\n         * Gets the views on this list\n         */\n        readonly views: IViews;\n        /**\n         * Gets the default view for this list\n         */\n        readonly defaultView: IView;\n        /**\n         * Gets a view by view guid id\n         *\n         */\n        getView(id: string): IView;\n    }\n}\n\naddProp(_List, \"views\", Views);\naddProp(_List, \"defaultView\", View, \"DefaultView\");\n\n_List.prototype.getView = function (this: _List, viewId: string): IView {\n    return View(this, `getView('${viewId}')`);\n};\n","import {\n    _SharePointQueryableInstance,\n    _SharePointQueryableCollection,\n    ISharePointQueryableInstance,\n    _SharePointQueryable,\n    ISharePointQueryable,\n    spInvokableFactory,\n    SharePointQueryable,\n    SharePointQueryableInstance,\n} from \"../sharepointqueryable\";\nimport { body } from \"@pnp/odata\";\nimport { spPost } from \"../operations\";\nimport { tag } from \"../telemetry\";\n\nexport class _LimitedWebPartManager extends _SharePointQueryable implements ILimitedWebPartManager {\n\n    public get scope(): ISharePointQueryable {\n        return tag.configure(SharePointQueryable(this, \"Scope\"), \"f.scope\");\n    }\n\n    public get webparts(): IWebPartDefinitions {\n        return WebPartDefinitions(this, \"webparts\");\n    }\n\n    public export(id: string): Promise<string> {\n        return spPost(this.clone(LimitedWebPartManagerCloneFactory, \"ExportWebPart\"), body({ webPartId: id }));\n    }\n\n    public import(xml: string): Promise<any> {\n        return spPost(this.clone(LimitedWebPartManagerCloneFactory, \"ImportWebPart\"), body({ webPartXml: xml }));\n    }\n}\n\nexport interface ILimitedWebPartManager {\n\n    /**\n     * Gets the scope of this web part manager (User = 0 or Shared = 1)\n     */\n    readonly scope: ISharePointQueryable;\n\n    /**\n     * Gets the set of web part definitions contained by this web part manager\n     */\n    readonly webparts: IWebPartDefinitions;\n\n    /**\n     * Exports a webpart definition\n     *\n     * @param id the GUID id of the definition to export\n     */\n    export(id: string): Promise<string>;\n\n    /**\n     * Imports a webpart\n     *\n     * @param xml webpart definition which must be valid XML in the .dwp or .webpart format\n     */\n    import(xml: string): Promise<any>;\n}\n\nexport const LimitedWebPartManager = (baseUrl: string | ISharePointQueryable, path?: string): ILimitedWebPartManager => new _LimitedWebPartManager(baseUrl, path);\n\ntype LimitedWebPartManagerCloneType = ILimitedWebPartManager & ISharePointQueryable;\nconst LimitedWebPartManagerCloneFactory = (baseUrl: string | ISharePointQueryable, path?: string): LimitedWebPartManagerCloneType => <any>LimitedWebPartManager(baseUrl, path);\n\nexport class _WebPartDefinitions extends _SharePointQueryableCollection {\n\n    /**\n     * Gets a web part definition from the collection by id\n     *\n     * @param id The storage ID of the SPWebPartDefinition to retrieve\n     */\n    public getById(id: string): IWebPartDefinition {\n        return WebPartDefinition(this, `getbyid('${id}')`);\n    }\n\n    /**\n     * Gets a web part definition from the collection by storage id\n     *\n     * @param id The WebPart.ID of the SPWebPartDefinition to retrieve\n     */\n    public getByControlId(id: string): IWebPartDefinition {\n        return WebPartDefinition(this, `getByControlId('${id}')`);\n    }\n}\nexport interface IWebPartDefinitions extends _WebPartDefinitions { }\nexport const WebPartDefinitions = spInvokableFactory<IWebPartDefinitions>(_WebPartDefinitions);\n\nexport class _WebPartDefinition extends _SharePointQueryableInstance {\n\n    /**\n    * Gets the webpart information associated with this definition\n    */\n    public get webpart(): ISharePointQueryableInstance {\n        return SharePointQueryableInstance(this, \"webpart\");\n    }\n\n    /**\n     * Saves changes to the Web Part made using other properties and methods on the SPWebPartDefinition object\n     */\n    public saveChanges(): Promise<any> {\n        return spPost(this.clone(WebPartDefinition, \"SaveWebPartChanges\"));\n    }\n\n    /**\n     * Moves the Web Part to a different location on a Web Part Page\n     *\n     * @param zoneId The ID of the Web Part Zone to which to move the Web Part\n     * @param zoneIndex A Web Part zone index that specifies the position at which the Web Part is to be moved within the destination Web Part zone\n     */\n    public moveTo(zoneId: string, zoneIndex: number): Promise<void> {\n        return spPost(this.clone(WebPartDefinition, `MoveWebPartTo(zoneID='${zoneId}', zoneIndex=${zoneIndex})`));\n    }\n\n    /**\n     * Closes the Web Part. If the Web Part is already closed, this method does nothing\n     */\n    public close(): Promise<void> {\n        return spPost(this.clone(WebPartDefinition, \"CloseWebPart\"));\n    }\n\n    /**\n     * Opens the Web Part. If the Web Part is already closed, this method does nothing\n     */\n    public open(): Promise<void> {\n        return spPost(this.clone(WebPartDefinition, \"OpenWebPart\"));\n    }\n\n    /**\n     * Removes a webpart from a page, all settings will be lost\n     */\n    public delete(): Promise<void> {\n        return spPost(this.clone(WebPartDefinition, \"DeleteWebPart\"));\n    }\n}\nexport interface IWebPartDefinition extends _WebPartDefinition { }\nexport const WebPartDefinition = spInvokableFactory<IWebPartDefinition>(_WebPartDefinition);\n\nexport enum WebPartsPersonalizationScope {\n    User = 0,\n    Shared = 1,\n}\n","import { _File } from \"../files/types\";\nimport { WebPartsPersonalizationScope, ILimitedWebPartManager, LimitedWebPartManager } from \"./types\";\n\ndeclare module \"../files/types\" {\n    interface _File {\n        getLimitedWebPartManager(scope?: WebPartsPersonalizationScope): ILimitedWebPartManager;\n    }\n    interface IFile {\n        /**\n         * Specifies the control set used to access, modify, or add Web Parts associated with this Web Part Page and view.\n         * An exception is thrown if the file is not an ASPX page.\n         *\n         * @param scope The WebPartsPersonalizationScope view on the Web Parts page.\n         */\n        getLimitedWebPartManager(scope?: WebPartsPersonalizationScope): ILimitedWebPartManager;\n    }\n}\n\n_File.prototype.getLimitedWebPartManager = function (this: _File, scope = WebPartsPersonalizationScope.Shared): ILimitedWebPartManager {\n    return LimitedWebPartManager(this, `getLimitedWebPartManager(scope=${scope})`);\n};\n","import { SPRest } from \"../rest\";\n\nimport \"../appcatalog\";\nimport \"../attachments\";\nimport \"../clientside-pages\";\nimport \"../comments\";\nimport \"../content-types\";\nimport \"../features\";\nimport \"../fields\";\nimport \"../files\";\nimport \"../folders\";\nimport \"../forms\";\nimport \"../hubsites\";\nimport \"../items\";\nimport \"../lists\";\nimport \"../navigation\";\nimport \"../profiles\";\nimport \"../regional-settings\";\nimport \"../related-items\";\nimport \"../search\";\nimport \"../security\";\nimport \"../sharing\";\nimport \"../site-designs\";\nimport \"../site-groups\";\nimport \"../site-scripts\";\nimport \"../site-users\";\nimport \"../sites\";\nimport \"../social\";\nimport \"../sputilities\";\nimport \"../subscriptions\";\nimport \"../user-custom-actions\";\nimport \"../views\";\nimport \"../webparts\";\nimport \"../webs\";\n\nexport * from \"../appcatalog\";\nexport * from \"../attachments\";\nexport * from \"../clientside-pages\";\nexport * from \"../comments\";\nexport * from \"../content-types\";\nexport * from \"../features\";\nexport * from \"../fields\";\nexport * from \"../files\";\nexport * from \"../folders\";\nexport * from \"../forms\";\nexport * from \"../hubsites\";\nexport * from \"../items\";\nexport * from \"../lists\";\nexport * from \"../navigation\";\nexport { spODataEntity, spODataEntityArray } from \"../odata\";\nexport * from \"../profiles\";\nexport * from \"../regional-settings\";\nexport * from \"../related-items\";\nexport * from \"../search\";\nexport * from \"../security\";\nexport * from \"../sharing\";\nexport * from \"../site-designs\";\nexport * from \"../site-groups\";\nexport * from \"../site-scripts\";\nexport * from \"../site-users\";\nexport * from \"../sites\";\nexport * from \"../social\";\nexport * from \"../sputilities\";\nexport * from \"../subscriptions\";\nexport * from \"../user-custom-actions\";\nexport * from \"../views\";\nexport * from \"../webparts\";\nexport * from \"../webs\";\nexport * from \"../index\";\n\nexport const sp = new SPRest();\n","import { IGraphQueryable } from \"./graphqueryable\";\nimport { graphDelete, graphPatch, graphPost } from \"./operations\";\nimport { body, headers } from \"@pnp/odata\";\n\n/**\n * Decorator used to specify the default path for Queryable objects\n * \n * @param path \n */\nexport function defaultPath(path: string) {\n\n    return function <T extends { new(...args: any[]): {} }>(target: T) {\n\n        return class extends target {\n            constructor(...args: any[]) {\n                super(args[0], args.length > 1 && args[1] !== undefined ? args[1] : path);\n            }\n        };\n    };\n}\n\n/**\n * Adds the delete method to the tagged class\n */\nexport function deleteable() {\n    return function <T extends { new(...args: any[]): {} }>(target: T) {\n\n        return class extends target {\n            public delete(this: IGraphQueryable): Promise<void> {\n                return graphDelete(this);\n            }\n        };\n    };\n}\n\nexport interface IDeleteable {\n    /**\n     * Delete this instance\n     */\n    delete(): Promise<void>;\n}\n\n/**\n * Adds the delete method to the tagged class\n */\nexport function deleteableWithETag() {\n    return function <T extends { new(...args: any[]): {} }>(target: T) {\n\n        return class extends target {\n            public delete(this: IGraphQueryable, eTag = \"*\"): Promise<void> {\n                return graphDelete(this, headers({\n                        \"If-Match\": eTag,\n                }));\n            }\n        };\n    };\n}\n\nexport interface IDeleteableWithETag {\n    /**\n     * Delete this instance\n     */\n    delete(eTag?: string): Promise<void>;\n}\n\n/**\n * Adds the update method to the tagged class\n */\nexport function updateable() {\n    return function <T extends { new(...args: any[]): {} }>(target: T) {\n\n        return class extends target {\n            public update(this: IGraphQueryable, props: any): Promise<void> {\n                return graphPatch(this, body(props));\n            }\n        };\n    };\n}\n\nexport interface IUpdateable<T = any> {\n    /**\n     * Update the properties of an event object\n     * \n     * @param props Set of properties to update\n     */\n    update(props: T): Promise<void>;\n}\n\n/**\n * Adds the update method to the tagged class\n */\nexport function updateableWithETag() {\n    return function <T extends { new(...args: any[]): {} }>(target: T) {\n\n        return class extends target {\n            public update(this: IGraphQueryable, props: any, eTag = \"*\"): Promise<void> {\n                return graphPatch(this, body(props, headers({\n                    \"If-Match\": eTag,\n                })));\n            }\n        };\n    };\n}\n\nexport interface IUpdateableWithETag<T = any> {\n    /**\n     * Update the properties of an event object\n     * \n     * @param props Set of properties to update\n     */\n    update(props: T, eTag?: string): Promise<void>;\n}\n\n/**\n * Adds the add method to the tagged class\n */\nexport function addable() {\n    return function <T extends { new(...args: any[]): {} }>(target: T) {\n\n        return class extends target {\n            public add(this: IGraphQueryable, props: any): Promise<void> {\n                return graphPost(this, body(props));\n            }\n        };\n    };\n}\n\nexport interface IAddable<T = any, R = { id: string }> {\n    /**\n     * Adds a new item to this collection\n     * \n     * @param props properties used to create the new thread\n     */\n    add(props: T): Promise<R>;\n}\n\n/**\n * Adds the getById method to a collection\n */\nexport function getById<R>(factory: (...args: any[]) => R) {\n    return function <T extends { new(...args: any[]): {} }>(target: T) {\n\n        return class extends target {\n            public getById(this: IGraphQueryable, id: string): R {\n                return factory(this, id);\n            }\n        };\n    };\n}\nexport interface IGetById<R = any, T = string> {\n    /**\n     * Adds a new item to this collection\n     * \n     * @param props properties used to create the new thread\n     */\n    getById(id: T): R;\n}\n","import { body } from \"@pnp/odata\";\nimport {\n    ConversationThread as IConversationThreadType,\n    Post as IPostType,\n    Recipient as IRecipientType,\n    Conversation as IConversationType,\n    User as IUserType,\n} from \"@microsoft/microsoft-graph-types\";\nimport {\n    _GraphQueryableCollection,\n    _GraphQueryableInstance,\n    graphInvokableFactory,\n} from \"../graphqueryable\";\nimport { defaultPath, updateable, IUpdateable, deleteable, IDeleteable, addable, IAddable, getById, IGetById } from \"../decorators\";\nimport { graphPost, graphDelete } from \"../operations\";\n\n/**\n * Conversation\n */\n@updateable()\n@deleteable()\nexport class _Conversation extends _GraphQueryableInstance<IConversationType> {\n\n    /**\n     * Get all the threads in a group conversation.\n     */\n    public get threads(): IThreads {\n        return Threads(this);\n    }\n}\nexport interface IConversation extends _Conversation, IUpdateable<IConversationType>, IDeleteable { }\nexport const Conversation = graphInvokableFactory<IConversation>(_Conversation);\n\n/**\n * Conversations\n */\n@defaultPath(\"conversations\")\n@addable()\n@getById(Conversation)\nexport class _Conversations extends _GraphQueryableCollection<IConversationType[]> { }\nexport interface IConversations extends _Conversations, IGetById<IConversation>, IAddable<IConversationType> { }\nexport const Conversations = graphInvokableFactory<IConversations>(_Conversations);\n\n/**\n * Thread\n */\n@deleteable()\nexport class _Thread extends _GraphQueryableInstance {\n\n    /**\n     * Get all the threads in a group conversation.\n     */\n    public get posts(): IPosts {\n        return Posts(this);\n    }\n\n    /**\n     * Reply to a thread in a group conversation and add a new post to it\n     * \n     * @param post Contents of the post \n     */\n    public reply(post: IPostType): Promise<void> {\n        return graphPost(this.clone(Thread, \"reply\"), body(post));\n    }\n}\nexport interface IThread extends _Thread, IDeleteable { }\nexport const Thread = graphInvokableFactory<IThread>(_Thread);\n\n/**\n * Threads\n */\n@defaultPath(\"threads\")\n@addable()\n@getById(Thread)\nexport class _Threads extends _GraphQueryableCollection<IConversationThreadType[]> { }\nexport interface IThreads extends _Threads, IGetById<IThread>, IAddable<IConversationThreadType, { id: string }> { }\nexport const Threads = graphInvokableFactory<IThreads>(_Threads);\n\n\n/**\n * Post\n */\n@deleteable()\nexport class _Post extends _GraphQueryableInstance<IPostType> {\n    /**\n     * Forward a post to a recipient\n     */\n    public forward(info: IPostForwardInfo): Promise<void> {\n        return graphPost(this.clone(Post, \"forward\"), body(info));\n    }\n\n    /**\n     * Reply to a thread in a group conversation and add a new post to it\n     * \n     * @param post Contents of the post \n     */\n    public reply(post: IPostType): Promise<void> {\n        return graphPost(this.clone(Post, \"reply\"), body(post));\n    }\n}\nexport interface IPost extends _Post, IDeleteable { }\nexport const Post = graphInvokableFactory<IPost>(_Post);\n\n/**\n * Posts\n */\n@defaultPath(\"posts\")\n@addable()\n@getById(Post)\nexport class _Posts extends _GraphQueryableCollection<IPostType[]> { }\nexport interface IPosts extends _Posts, IGetById<IPost>, IAddable<IPostType> { }\nexport const Posts = graphInvokableFactory<IPosts>(_Posts);\n\n/**\n * Senders\n */\nexport class _Senders extends _GraphQueryableCollection<IUserType[]> {\n\n    /**\n     * Add a new user or group to this senders collection\n     * @param id The full @odata.id value to add (ex: https://graph.microsoft.com/v1.0/users/user@contoso.com)\n     */\n    public add(id: string): Promise<any> {\n        return graphPost(this.clone(Senders, \"$ref\"), body({ \"@odata.id\": id }));\n    }\n\n    /**\n     * Removes the entity from the collection\n     * \n     * @param id The full @odata.id value to remove (ex: https://graph.microsoft.com/v1.0/users/user@contoso.com)\n     */\n    public remove(id: string): Promise<void> {\n        const remover = this.clone(Senders, \"$ref\");\n        remover.query.set(\"$id\", id);\n        return graphDelete(remover);\n    }\n}\nexport interface ISenders extends _Senders { }\nexport const Senders = graphInvokableFactory<ISenders>(_Senders);\n\n/**\n * Information used to forward a post\n */\nexport interface IPostForwardInfo {\n    comment?: string;\n    toRecipients: IRecipientType[];\n}\n","import { Attachment as IAttachmentType } from \"@microsoft/microsoft-graph-types\";\nimport { body } from \"@pnp/odata\";\nimport { _GraphQueryableCollection, _GraphQueryableInstance, graphInvokableFactory } from \"../graphqueryable\";\nimport { graphPost } from \"../operations\";\nimport { defaultPath, getById, IGetById } from \"../decorators\";\nimport { type } from \"../utils/type\";\n\n/**\n * Attachment\n */\nexport class _Attachment extends _GraphQueryableInstance<IAttachmentType> { }\nexport interface IAttachment extends _Attachment { }\nexport const Attachment = graphInvokableFactory<IAttachment>(_Attachment);\n\n/**\n * Attachments\n */\n@defaultPath(\"attachments\")\n@getById(Attachment)\nexport class _Attachments extends _GraphQueryableCollection<IAttachmentType[]> {\n\n    /**\n     * Add attachment to this collection\n     * \n     * @param name Name given to the attachment file\n     * @param bytes File content\n     */\n    public addFile(name: string, bytes: string | Blob): Promise<IAttachmentType> {\n\n        return graphPost(this, body(type(\"#microsoft.graph.fileAttachment\", {\n            contentBytes: bytes,\n            name,\n        })));\n    }\n}\nexport interface IAttachments extends _Attachments, IGetById<IAttachment> {}\nexport const Attachments = graphInvokableFactory<IAttachments>(_Attachments);\n","export function type<T = unknown>(n: string, a: T): T & { \"@odata.type\": string} {\n    return Object.assign({ \"@odata.type\": n }, a);\n}\n","import { _Post } from \"../conversations/types\";\nimport { addProp } from \"@pnp/odata\";\nimport { Attachments, IAttachments } from \"./types\";\n\ndeclare module \"../conversations/types\" {\n    interface _Post {\n        readonly attachments: IAttachments;\n    }\n    interface IPost {\n        readonly attachments: IAttachments;\n    }\n}\n\naddProp(_Post, \"attachments\", Attachments);\n","import { _GraphQueryableCollection, _GraphQueryableInstance, graphInvokableFactory } from \"../graphqueryable\";\nimport { DirectoryObject as IDirectoryObjectType } from \"@microsoft/microsoft-graph-types\";\nimport { defaultPath, getById, IGetById, deleteable, IDeleteable } from \"../decorators\";\nimport { body } from \"@pnp/odata\";\nimport { graphPost } from \"../operations\";\n\n/**\n * Represents a Directory Object entity\n */\n@deleteable()\nexport class _DirectoryObject<GetType = IDirectoryObjectType> extends _GraphQueryableInstance<GetType> {\n\n    /**\n     * Returns all the groups and directory roles that the specified Directory Object is a member of. The check is transitive\n     * \n     * @param securityEnabledOnly \n     */\n    public getMemberObjects(securityEnabledOnly = false): Promise<{ value: string[] }> {\n        return graphPost(this.clone(DirectoryObject, \"getMemberObjects\"), body({ securityEnabledOnly }));\n    }\n\n    /**\n     * Returns all the groups that the specified Directory Object is a member of. The check is transitive\n     * \n     * @param securityEnabledOnly \n     */\n    public getMemberGroups(securityEnabledOnly = false): Promise<{ value: string[] }> {\n        return graphPost(this.clone(DirectoryObject, \"getMemberGroups\"), body({ securityEnabledOnly }));\n    }\n\n    /**\n     * Check for membership in a specified list of groups, and returns from that list those groups of which the specified user, group, or directory object is a member. \n     * This function is transitive.\n     * @param groupIds A collection that contains the object IDs of the groups in which to check membership. Up to 20 groups may be specified.\n     */\n    public checkMemberGroups(groupIds: String[]): Promise<{ value: string[] }> {\n        return graphPost(this.clone(DirectoryObject, \"checkMemberGroups\"), body({ groupIds }));\n    }\n}\n\nexport interface IDirectoryObject<GetType = IDirectoryObjectType> extends _DirectoryObject, IDeleteable { }\nexport const DirectoryObject = graphInvokableFactory<IDirectoryObject>(_DirectoryObject);\n\n/**\n * Describes a collection of Directory Objects\n *\n */\n@defaultPath(\"directoryObjects\")\n@getById(DirectoryObject)\nexport class _DirectoryObjects<GetType = IDirectoryObjectType[]> extends _GraphQueryableCollection<GetType> {\n    /**\n    * Returns the directory objects specified in a list of ids. NOTE: The directory objects returned are the full objects containing all their properties. \n    * The $select query option is not available for this operation.\n    * \n    * @param ids A collection of ids for which to return objects. You can specify up to 1000 ids.\n    * @param type A collection of resource types that specifies the set of resource collections to search. Default is directoryObject.\n    */\n    public getByIds(ids: string[], type: DirectoryObjectTypes = DirectoryObjectTypes.directoryObject): Promise<IDirectoryObjectType[]> {\n        return graphPost(this.clone(DirectoryObjects, \"getByIds\"), body({ ids, type }));\n    }\n}\nexport interface IDirectoryObjects extends _DirectoryObjects, IGetById<IDirectoryObjectType> { }\nexport const DirectoryObjects = graphInvokableFactory<IDirectoryObjects>(_DirectoryObjects);\n\n/**\n * DirectoryObjectTypes\n */\nexport enum DirectoryObjectTypes {\n    /**\n     * Directory Objects\n     */\n    directoryObject,\n    /**\n     * User\n     */\n    user,\n    /**\n     * Group\n     */\n    group,\n    /**\n     * Device\n     */\n    device,\n}\n","import { assign, ITypedHash } from \"@pnp/common\";\nimport { Event as IEventType, Group as IGroupType } from \"@microsoft/microsoft-graph-types\";\nimport { body } from \"@pnp/odata\";\nimport { _GraphQueryableInstance, _GraphQueryableCollection, graphInvokableFactory } from \"../graphqueryable\";\nimport { defaultPath, deleteable, IDeleteable, updateable, IUpdateable, getById, IGetById } from \"../decorators\";\nimport { graphPost } from \"../operations\";\nimport { _DirectoryObject, _DirectoryObjects } from \"../directory-objects/types\";\n\nexport enum GroupType {\n    /**\n     * Office 365 (aka unified group)\n     */\n    Office365,\n    /**\n     * Dynamic membership\n     */\n    Dynamic,\n    /**\n     * Security\n     */\n    Security,\n}\n\n/**\n * Represents a group entity\n */\n@deleteable()\n@updateable()\nexport class _Group extends _DirectoryObject<IGroupType> {\n    /**\n     * Add the group to the list of the current user's favorite groups. Supported for only Office 365 groups\n     */\n    public addFavorite(): Promise<void> {\n        return graphPost(this.clone(Group, \"addFavorite\"));\n    }\n    /**\n     * Remove the group from the list of the current user's favorite groups. Supported for only Office 365 groups\n     */\n    public removeFavorite(): Promise<void> {\n        return graphPost(this.clone(Group, \"removeFavorite\"));\n    }\n    /**\n     * Reset the unseenCount of all the posts that the current user has not seen since their last visit\n     */\n    public resetUnseenCount(): Promise<void> {\n        return graphPost(this.clone(Group, \"resetUnseenCount\"));\n    }\n    /**\n     * Calling this method will enable the current user to receive email notifications for this group,\n     * about new posts, events, and files in that group. Supported for only Office 365 groups\n     */\n    public subscribeByMail(): Promise<void> {\n        return graphPost(this.clone(Group, \"subscribeByMail\"));\n    }\n    /**\n     * Calling this method will prevent the current user from receiving email notifications for this group\n     * about new posts, events, and files in that group. Supported for only Office 365 groups\n     */\n    public unsubscribeByMail(): Promise<void> {\n        return graphPost(this.clone(Group, \"unsubscribeByMail\"));\n    }\n    /**\n     * Get the occurrences, exceptions, and single instances of events in a calendar view defined by a time range, from the default calendar of a group\n     * \n     * @param start Start date and time of the time range\n     * @param end End date and time of the time range\n     */\n    public getCalendarView(start: Date, end: Date): Promise<IEventType[]> {\n\n        const view = this.clone(Group, \"calendarView\");\n        view.query.set(\"startDateTime\", start.toISOString());\n        view.query.set(\"endDateTime\", end.toISOString());\n        return view();\n    }\n}\nexport interface IGroup extends _Group, IDeleteable, IUpdateable { }\nexport const Group = graphInvokableFactory<IGroup>(_Group);\n\n/**\n * Describes a collection of Field objects\n *\n */\n@defaultPath(\"groups\")\n@getById(Group)\nexport class _Groups extends _GraphQueryableCollection<IGroupType[]> {\n\n    /**\n     * Create a new group as specified in the request body.\n     * \n     * @param name Name to display in the address book for the group\n     * @param mailNickname Mail alias for the group\n     * @param groupType Type of group being created\n     * @param additionalProperties A plain object collection of additional properties you want to set on the new group\n     */\n    public async add(name: string, mailNickname: string, groupType: GroupType, additionalProperties: ITypedHash<any> = {}): Promise<IGroupAddResult> {\n\n        let postBody = assign({\n            displayName: name,\n            mailEnabled: groupType === GroupType.Office365,\n            mailNickname: mailNickname,\n            securityEnabled: groupType !== GroupType.Office365,\n        }, additionalProperties);\n\n        // include a group type if required\n        if (groupType !== GroupType.Security) {\n\n            postBody = assign(postBody, {\n                groupTypes: groupType === GroupType.Office365 ? [\"Unified\"] : [\"DynamicMembership\"],\n            });\n        }\n\n        const data = await graphPost(this, body(postBody));\n\n        return {\n            data,\n            group: (<any>this).getById(data.id),\n        };\n    }\n}\nexport interface IGroups extends _Groups, IGetById<IGroup> { }\nexport const Groups = graphInvokableFactory<IGroups>(_Groups);\n\n/**\n * IGroupAddResult\n */\nexport interface IGroupAddResult {\n    group: IGroup;\n    data: any;\n}\n","import { body } from \"@pnp/odata\";\nimport { Event as IEventType, Calendar as ICalendarType } from \"@microsoft/microsoft-graph-types\";\nimport { _GraphQueryableCollection, _GraphQueryableInstance, graphInvokableFactory } from \"../graphqueryable\";\nimport { defaultPath, IDeleteable, deleteable, IUpdateable, updateable, getById, IGetById } from \"../decorators\";\nimport { graphPost } from \"../operations\";\n\n/**\n * Calendars\n */\n@defaultPath(\"calendars\")\nexport class _Calendars extends _GraphQueryableCollection<ICalendarType[]> { }\nexport interface ICalendars<GetType = any> extends _Calendars { }\nexport const Calendars = graphInvokableFactory<ICalendars>(_Calendars);\n\n/**\n * Calendar\n */\nexport class _Calendar extends _GraphQueryableInstance<ICalendarType> {\n\n    public get events(): IEvents {\n        return Events(this);\n    }\n}\nexport interface ICalendar extends _Calendar { }\nexport const Calendar = graphInvokableFactory<ICalendar>(_Calendar);\n\n/**\n * Event\n */\n@deleteable()\n@updateable()\nexport class _Event extends _GraphQueryableInstance<IEventType> { }\nexport interface IEvent extends _Event, IDeleteable, IUpdateable { }\nexport const Event = graphInvokableFactory<IEvent>(_Event);\n\n/**\n * Events\n */\n@defaultPath(\"events\")\n@getById(Event)\nexport class _Events extends _GraphQueryableCollection<IEventType[]> {\n\n    /**\n     * Adds a new event to the collection\n     * \n     * @param properties The set of properties used to create the event\n     */\n    public async add(properties: IEventType): Promise<IEventAddResult> {\n\n        const data = await graphPost(this, body(properties));\n\n        return {\n            data,\n            event: (<any>this).getById(data.id),\n        };\n    }\n}\nexport interface IEvents extends _Events, IGetById<IEvent> { }\nexport const Events = graphInvokableFactory<IEvents>(_Events);\n\n/**\n * EventAddResult\n */\nexport interface IEventAddResult {\n    data: IEventType;\n    event: IEvent;\n}\n","import { addProp } from \"@pnp/odata\";\nimport { _Group } from \"../groups/types\";\nimport { Calendar, ICalendar, IEvents, Events } from \"./types\";\n\ndeclare module \"../groups/types\" {\n    interface _Group {\n        readonly attachmentFiles: ICalendar;\n        readonly events: IEvents;\n    }\n    interface IGroup {\n        readonly attachmentFiles: ICalendar;\n        readonly events: IEvents;\n    }\n}\n\naddProp(_Group, \"calendar\", Calendar, \"calendar\");\naddProp(_Group, \"events\", Events);\n","import { _GraphQueryableCollection, graphInvokableFactory, _GraphQueryableInstance } from \"../graphqueryable\";\nimport { User as IUserType, Person as IPersonType } from \"@microsoft/microsoft-graph-types\";\nimport { _DirectoryObject, DirectoryObjects, IDirectoryObjects } from \"../directory-objects/types\";\nimport { defaultPath, updateable, deleteable, IUpdateable, IDeleteable, getById, IGetById } from \"../decorators\";\n\n@updateable()\n@deleteable()\nexport class _User extends _DirectoryObject<IUserType> {\n    /**\n    * The groups and directory roles associated with the user\n    */\n    public get memberOf(): IDirectoryObjects {\n        return DirectoryObjects(this, \"memberOf\");\n    }\n\n    /**\n     * Retrieve a collection of person objects ordered by their relevance to the user\n     */\n    public get people(): IPeople {\n        return People(this);\n    }\n}\nexport interface IUser extends _User, IUpdateable<IUserType>, IDeleteable { }\nexport const User = graphInvokableFactory<IUser>(_User);\n\n@defaultPath(\"users\")\n@getById(User)\nexport class _Users extends _GraphQueryableCollection<IUserType[]> { }\nexport interface IUsers extends _Users, IGetById<IUser> { }\nexport const Users = graphInvokableFactory<IUsers>(_Users);\n\n@defaultPath(\"people\")\nexport class _People extends _GraphQueryableCollection<IPersonType[]> {}\nexport interface IPeople extends _People { }\nexport const People = graphInvokableFactory<IPeople>(_People);\n","import { _GraphQueryableCollection, _GraphQueryableInstance, graphInvokableFactory } from \"../graphqueryable\";\nimport { ITypedHash, assign } from \"@pnp/common\";\nimport { Contact as IContactType, ContactFolder as IContactFolderType, EmailAddress as IEmailAddressType } from \"@microsoft/microsoft-graph-types\";\nimport { defaultPath, updateable, deleteable, IUpdateable, IDeleteable, getById, IGetById } from \"../decorators\";\nimport { graphPost } from \"../operations\";\nimport { body } from \"@pnp/odata\";\n\n/**\n * Contact\n */\n@updateable()\n@deleteable()\nexport class _Contact extends _GraphQueryableInstance<IContactType> { }\nexport interface IContact extends _Contact, IUpdateable<IContactType>, IDeleteable { }\nexport const Contact = graphInvokableFactory<IContact>(_Contact);\n\n/**\n * Contacts\n */\n@defaultPath(\"contacts\")\n@getById(Contact)\nexport class _Contacts extends _GraphQueryableCollection<IContactType[]> {\n\n    /**\n    * Create a new Contact for the user.\n    * \n    * @param givenName The contact's given name.\n    * @param surName The contact's surname.\n    * @param emailAddresses The contact's email addresses.\n    * @param businessPhones The contact's business phone numbers.\n    * @param additionalProperties A plain object collection of additional properties you want to set on the new contact\n    */\n    public async add(\n        givenName: string,\n        surName: string,\n        emailAddresses: IEmailAddressType[],\n        businessPhones: string[],\n        additionalProperties: ITypedHash<any> = {}): Promise<IContactAddResult> {\n\n        const postBody = assign({ businessPhones, emailAddresses, givenName, surName }, additionalProperties);\n\n        const data = await graphPost(this, body(postBody));\n\n        return {\n            contact: (<any>this).getById(data.id),\n            data,\n        };\n    }\n}\nexport interface IContacts extends _Contacts, IGetById<IContact> { }\nexport const Contacts = graphInvokableFactory<IContacts>(_Contacts);\n\n/**\n * Contact Folder\n */\n@deleteable()\n@updateable()\nexport class _ContactFolder extends _GraphQueryableInstance<IContactFolderType> {\n    /**\n     * Gets the contacts in this contact folder\n     */\n    public get contacts(): IContacts {\n        return Contacts(this);\n    }\n\n    /**\n    * Gets the contacts in this contact folder\n    */\n    public get childFolders(): IContactFolders {\n        return ContactFolders(this, \"childFolders\");\n    }\n}\nexport interface IContactFolder extends _ContactFolder, IUpdateable, IDeleteable { }\nexport const ContactFolder = graphInvokableFactory<IContactFolder>(_ContactFolder);\n\n/**\n * Contact Folders\n */\n@defaultPath(\"contactFolders\")\n@getById(ContactFolder)\nexport class _ContactFolders extends _GraphQueryableCollection<IContactFolderType[]> {\n\n    /**\n     * Create a new Contact Folder for the user.\n     * \n     * @param displayName The folder's display name.\n     * @param parentFolderId The ID of the folder's parent folder.\n     */\n    public async add(displayName: string, parentFolderId?: string): Promise<IContactFolderAddResult> {\n\n        const postBody = {\n            displayName: displayName,\n            parentFolderId: parentFolderId,\n        };\n\n        const data = await graphPost(this, body(postBody));\n\n        return {\n            contactFolder: (<any>this).getById(data.id),\n            data,\n        };\n    }\n}\nexport interface IContactFolders extends _ContactFolders, IGetById<IContactFolder> { }\nexport const ContactFolders = graphInvokableFactory<IContactFolders>(_ContactFolders);\n\n/**\n * IContactFolderAddResult\n */\nexport interface IContactFolderAddResult {\n    data: IContactFolderType;\n    contactFolder: IContactFolder;\n}\n\n/**\n * IContactAddResult\n */\nexport interface IContactAddResult {\n    data: IContactType;\n    contact: IContact;\n}\n","import { addProp } from \"@pnp/odata\";\nimport { _User } from \"../users/types\";\nimport { IContacts, Contacts, ContactFolders, IContactFolders } from \"./types\";\n\ndeclare module \"../users/types\" {\n    interface _User {\n        readonly contacts: IContacts;\n        readonly contactFolders: IContactFolders;\n    }\n    interface IUser {\n        readonly contacts: IContacts;\n        readonly contactFolders: IContactFolders;\n    }\n}\n\naddProp(_User, \"contacts\", Contacts);\naddProp(_User, \"contactFolders\", ContactFolders);\n","import { addProp } from \"@pnp/odata\";\nimport { _Group } from \"../groups/types\";\nimport { Conversations, IConversations, ISenders, Senders } from \"./types\";\n\ndeclare module \"../groups/types\" {\n    interface _Group {\n        readonly conversations: IConversations;\n        readonly acceptedSenders: ISenders;\n        readonly rejectedSenders: ISenders;\n    }\n    interface IGroup {\n        readonly conversations: IConversations;\n        readonly acceptedSenders: ISenders;\n        readonly rejectedSenders: ISenders;\n    }\n}\n\naddProp(_Group, \"conversations\", Conversations);\naddProp(_Group, \"acceptedSenders\", Senders, \"acceptedsenders\");\naddProp(_Group, \"rejectedSenders\", Senders, \"rejectedsenders\");\n","import { GraphRest } from \"../rest\";\nimport { IDirectoryObjects, DirectoryObjects } from \"./types\";\n\nexport {\n    IDirectoryObject,\n    DirectoryObjectTypes,\n    DirectoryObject,\n    DirectoryObjects,\n    IDirectoryObjects,\n} from \"./types\";\n\ndeclare module \"../rest\" {\n    interface GraphRest {\n        readonly directoryObjects: IDirectoryObjects;\n    }\n}\n\nReflect.defineProperty(GraphRest.prototype, \"directoryObjects\", {\n    configurable: true,\n    enumerable: true,\n    get: function (this: GraphRest) {\n        return DirectoryObjects(this);\n    },\n});\n","import { GraphRest } from \"../rest\";\nimport { IGroups, Groups } from \"./types\";\n\nexport {\n    Group,\n    GroupType,\n    Groups,\n    IGroup,\n    IGroupAddResult,\n    IGroups,\n} from \"./types\";\n\ndeclare module \"../rest\" {\n    interface GraphRest {\n        readonly groups: IGroups;\n    }\n}\n\nReflect.defineProperty(GraphRest.prototype, \"groups\", {\n    configurable: true,\n    enumerable: true,\n    get: function (this: GraphRest) {\n        return Groups(this);\n    },\n});\n","import { body } from \"@pnp/odata\";\nimport { User as IMemberType } from \"@microsoft/microsoft-graph-types\";\nimport { _GraphQueryableCollection, _GraphQueryableInstance, graphInvokableFactory } from \"../graphqueryable\";\nimport { defaultPath, getById, IGetById } from \"../decorators\";\nimport { graphDelete, graphPost } from \"../operations\";\n\n/**\n * Member\n */\nexport class _Member extends _GraphQueryableInstance<IMemberType> {\n    /**\n     * Removes this Member\n     */\n    public remove(): Promise<void> {\n        return graphDelete(this.clone(Member, \"$ref\"));\n    }\n}\nexport interface IMember extends _Member { }\nexport const Member = graphInvokableFactory<IMember>(_Member);\n\n/**\n * Members\n */\n@defaultPath(\"members\")\n@getById(Member)\nexport class _Members extends _GraphQueryableCollection<IMemberType[]> {\n\n    /**\n     * Use this API to add a member to an Office 365 group, a security group or a mail-enabled security group through\n     * the members navigation property. You can add users or other groups.\n     * Important: You can add only users to Office 365 groups.\n     * \n     * @param id Full @odata.id of the directoryObject, user, or group object you want to add (ex: https://graph.microsoft.com/v1.0/directoryObjects/${id})\n     */\n    public add(id: string): Promise<any> {\n        return graphPost(this.clone(Members, \"$ref\"), body({ \"@odata.id\": id }));\n    }\n}\nexport interface IMembers extends _Members, IGetById<IMember> { }\nexport const Members = graphInvokableFactory<IMembers>(_Members);\n","import { addProp } from \"@pnp/odata\";\nimport { _Group } from \"../groups/types\";\nimport { IMembers, Members } from \"./types\";\n\ndeclare module \"../groups/types\" {\n    interface _Group {\n        readonly owners: IMembers;\n        readonly members: IMembers;\n    }\n    interface IGroup {\n        readonly owners: IMembers;\n        readonly members: IMembers;\n    }\n}\n\naddProp(_Group, \"owners\", Members, \"owners\");\naddProp(_Group, \"members\", Members);\n","import { Message as IMessageType, MailFolder as IMailFolderType, MailboxSettings as IMailboxSettingsType } from \"@microsoft/microsoft-graph-types\";\nimport { _GraphQueryableCollection, _GraphQueryableInstance, graphInvokableFactory } from \"../graphqueryable\";\nimport { defaultPath, getById, addable, IGetById, IAddable, updateable, IUpdateable } from \"../decorators\";\n\n/**\n * Message\n */\nexport class _Message extends _GraphQueryableInstance<IMessageType> { }\nexport interface IMessage extends _Message { }\nexport const Message = graphInvokableFactory<IMessage>(_Message);\n\n/**\n * Messages\n */\n@defaultPath(\"messages\")\n@getById(Message)\n@addable()\nexport class _Messages extends _GraphQueryableCollection<IMessageType[]> { }\nexport interface IMessages extends _Messages, IGetById<IMessage>, IAddable<IMessageType> { }\nexport const Messages = graphInvokableFactory<IMessages>(_Messages);\n\n/**\n * MailFolder\n */\nexport class _MailFolder extends _GraphQueryableInstance<IMailFolderType> { }\nexport interface IMailFolder extends _MailFolder { }\nexport const MailFolder = graphInvokableFactory<IMailFolder>(_MailFolder);\n\n/**\n * MailFolders\n */\n@defaultPath(\"mailFolders\")\n@getById(MailFolder)\n@addable()\nexport class _MailFolders extends _GraphQueryableCollection<IMailFolderType[]> { }\nexport interface IMailFolders extends _MailFolders, IGetById<IMailFolder>, IAddable<IMailFolderType> { }\nexport const MailFolders = graphInvokableFactory<IMailFolders>(_MailFolders);\n\n/**\n * MailboxSettings\n */\n@defaultPath(\"mailboxSettings\")\n@updateable()\nexport class _MailboxSettings extends _GraphQueryableInstance<IMailboxSettingsType> { }\nexport interface IMailboxSettings extends _MailboxSettings, IUpdateable<IMailboxSettingsType> { }\nexport const MailboxSettings = graphInvokableFactory<IMailboxSettings>(_MailboxSettings);\n","import { addProp, body } from \"@pnp/odata\";\nimport { _User, User } from \"../users/types\";\nimport { IMessages, Messages, IMailboxSettings, MailboxSettings, IMailFolders, MailFolders, IMessage } from \"./types\";\nimport { graphPost } from \"../operations\";\n\ndeclare module \"../users/types\" {\n    interface _User {\n        readonly messages: IMessages;\n        readonly mailboxSettings: IMailboxSettings;\n        readonly mailFolders: IMailFolders;\n        sendMail(message: IMessage): Promise<void>;\n    }\n    interface IUser {\n        readonly messages: IMessages;\n        readonly mailboxSettings: IMailboxSettings;\n        readonly mailFolders: IMailFolders;\n        sendMail(message: IMessage): Promise<void>;\n    }\n}\n\naddProp(_User, \"messages\", Messages);\naddProp(_User, \"mailboxSettings\", MailboxSettings);\naddProp(_User, \"mailFolders\", MailFolders);\n\n_User.prototype.sendMail = function (this: _User, message: IMessage): Promise<void> {\n    return graphPost(this.clone(User, \"sendMail\"), body(message));\n};\n","import {\n    GraphQueryableInstance,\n    GraphQueryableCollection,\n    _GraphQueryableInstance,\n    IGraphQueryableInstance,\n    IGraphQueryableCollection,\n    _GraphQueryableCollection,\n    graphInvokableFactory,\n} from \"../graphqueryable\";\nimport { Drive as IDriveType } from \"@microsoft/microsoft-graph-types\";\nimport { assign, combine } from \"@pnp/common\";\nimport { defaultPath, getById, IGetById, deleteable, IDeleteable, updateable, IUpdateable } from \"../decorators\";\nimport { body } from \"@pnp/odata\";\nimport { graphPatch, graphGet, graphPut } from \"../operations\";\n\n/**\n * Describes a Drive instance\n *\n */\n@defaultPath(\"drive\")\nexport class _Drive extends _GraphQueryableInstance<IDriveType> {\n\n    public get root(): IRoot {\n        return Root(this);\n    }\n\n    public get list(): IGraphQueryableInstance {\n        return GraphQueryableInstance(this, \"list\");\n    }\n\n    public get recent(): IDriveItems {\n        return DriveItems(this, \"recent\");\n    }\n\n    public get sharedWithMe(): IDriveItems {\n        return DriveItems(this, \"sharedWithMe\");\n    }\n\n    public getItemById(id: string): IDriveItem {\n        return DriveItem(this, combine(\"items\", id));\n    }\n}\nexport interface IDrive extends _Drive {}\nexport const Drive = graphInvokableFactory<IDrive>(_Drive);\n\n/**\n * Describes a collection of Drive objects\n *\n */\n@defaultPath(\"drives\")\n@getById(Drive)\nexport class _Drives extends _GraphQueryableCollection<IDriveType[]> { }\nexport interface IDrives extends _Drives, IGetById<IDrive> { }\nexport const Drives = graphInvokableFactory<IDrives>(_Drives);\n\n/**\n * Describes a Root instance\n *\n */\n@defaultPath(\"root\")\nexport class _Root extends _GraphQueryableInstance<IDrive> {\n\n    public get children(): IDriveItems {\n        return DriveItems(this, \"children\");\n    }\n\n    public search(query: string): Promise<any> {\n        const searcher = this.clone(Root);\n        searcher.query.set(\"search\", `'${query}'`);\n        return searcher();\n    }\n\n    public get thumbnails(): IGraphQueryableCollection {\n        return GraphQueryableCollection(this, \"thumbnails\");\n    }\n}\nexport interface IRoot extends _Root {}\nexport const Root = graphInvokableFactory<IRoot>(_Root);\n\n/**\n * Describes a Drive Item instance\n *\n */\n@deleteable()\n@updateable()\nexport class _DriveItem extends _GraphQueryableInstance<any> {\n\n    public get children(): IDriveItems {\n        return DriveItems(this, \"children\");\n    }\n\n    public get thumbnails(): IGraphQueryableCollection {\n        return GraphQueryableCollection(this, \"thumbnails\");\n    }\n\n    public get versions(): IGraphQueryableCollection<IDriveItemVersionInfo> {\n        return <any>GraphQueryableCollection(this, \"versions\");\n    }\n\n    public move(parentReference: { id: \"string\" }, name: string): Promise<void> {\n        return graphPatch(this, body(assign(parentReference, { name })));\n    }\n\n    public getContent(): Promise<any> {\n        return graphGet(this.clone(DriveItem, \"content\"));\n    }\n\n    public setContent(content: any): Promise<{ id: string, name: string, size: number }> {\n        return graphPut(this.clone(DriveItem, \"content\"), {\n            body: content,\n        });\n    }\n}\nexport interface IDriveItem extends _DriveItem, IDeleteable, IUpdateable {}\nexport const DriveItem = graphInvokableFactory<IDriveItem>(_DriveItem);\n\n/**\n * Describes a collection of Drive Item objects\n *\n */\n@getById(DriveItem)\nexport class _DriveItems extends _GraphQueryableCollection { }\nexport interface IDriveItems extends _DriveItems, IGetById<IDriveItem> { }\nexport const DriveItems = graphInvokableFactory<IDriveItems>(_DriveItems);\n\n/**\n * IDriveItemAddResult\n */\nexport interface IDriveItemAddResult {\n    data: any;\n    driveItem: IDriveItem;\n}\n\nexport interface IDriveItemVersionInfo {\n    id: string;\n    lastModifiedBy: {\n        user: {\n            id: string;\n            displayName: string;\n        },\n    };\n    lastModifiedDateTime: string;\n    size: number;\n}\n","import { addProp } from \"@pnp/odata\";\nimport { _User } from \"../users/types\";\nimport { IDrive, Drive, IDrives, Drives } from \"./types\";\n\ndeclare module \"../users/types\" {\n    interface _User {\n        readonly drive: IDrive;\n        readonly drives: IDrives;\n    }\n    interface IUser {\n        readonly drive: IDrive;\n        readonly drives: IDrives;\n    }\n}\n\naddProp(_User, \"drive\", Drive);\naddProp(_User, \"drives\", Drives);\n","import { body } from \"@pnp/odata\";\nimport { Notebook as INotebookType, Onenote as IOnenoteType, OnenoteSection as ISectionType, OnenotePage as IOnenotePageType } from \"@microsoft/microsoft-graph-types\";\nimport {\n    GraphQueryableCollection,\n    _GraphQueryableInstance,\n    _GraphQueryableCollection,\n    IGraphQueryableCollection,\n    graphInvokableFactory,\n} from \"../graphqueryable\";\nimport { defaultPath, getById, IGetById } from \"../decorators\";\nimport { graphPost } from \"../operations\";\n\n/**\n * Represents a onenote entity\n */\n@defaultPath(\"onenote\")\nexport class _OneNote extends _GraphQueryableInstance<IOnenoteType> {\n\n    public get notebooks(): INotebooks {\n        return Notebooks(this);\n    }\n\n    public get sections(): ISections {\n        return Sections(this);\n    }\n\n    public get pages(): IGraphQueryableCollection<IOnenotePageType[]> {\n        return <any>GraphQueryableCollection(this, \"pages\");\n    }\n}\nexport interface IOneNote extends _OneNote {}\nexport const OneNote = graphInvokableFactory<IOneNote>(_OneNote);\n\n\n/**\n * Describes a notebook instance\n *\n */\nexport class _Notebook extends _GraphQueryableInstance<INotebookType> {\n    public get sections(): ISections {\n        return Sections(this);\n    }\n}\nexport interface INotebook extends _Notebook {}\nexport const Notebook = graphInvokableFactory<INotebook>(_Notebook);\n\n/**\n * Describes a collection of Notebook objects\n *\n */\n@defaultPath(\"notebooks\")\n@getById(Notebook)\nexport class _Notebooks extends _GraphQueryableCollection<INotebookType[]> {\n    /**\n     * Create a new notebook as specified in the request body.\n     * \n     * @param displayName Notebook display name\n     */\n    public async add(displayName: string): Promise<INotebookAddResult> {\n\n        const data = await graphPost(this, body({ displayName }));\n\n        return {\n            data,\n            notebook: (<any>this).getById(data.id),\n        };\n    }\n}\nexport interface INotebooks extends _Notebooks, IGetById<INotebook> {}\nexport const Notebooks = graphInvokableFactory<INotebooks>(_Notebooks);\n\n\n/**\n * Describes a sections instance\n */\nexport class _Section extends _GraphQueryableInstance<ISectionType> { }\nexport interface ISection extends _Section { }\nexport const Section = graphInvokableFactory<ISection>(_Section);\n\n/**\n * Describes a collection of Sections objects\n *\n */\n@defaultPath(\"sections\")\n@getById(Section)\nexport class _Sections extends _GraphQueryableCollection<ISectionType[]> {\n    /**\n     * Adds a new section\n     * \n     * @param displayName New section display name\n     */\n    public async add(displayName: string): Promise<ISectionAddResult> {\n\n        const data = await graphPost(this, body({ displayName }));\n\n        return {\n            data,\n            section: (<any>this).getById(data.id),\n        };\n    }\n}\nexport interface ISections extends _Sections, IGetById<ISection> {}\nexport const Sections = graphInvokableFactory<ISections>(_Sections);\n\n/**\n * INotebookAddResult\n */\nexport interface INotebookAddResult {\n    data: any;\n    notebook: INotebook;\n}\n\n/**\n * ISectionAddResult\n */\nexport interface ISectionAddResult {\n    data: any;\n    section: ISection;\n}\n","import { addProp } from \"@pnp/odata\";\nimport { _User } from \"../users/types\";\nimport { IOneNote, OneNote } from \"./types\";\n\ndeclare module \"../users/types\" {\n    interface _User {\n        readonly onenote: IOneNote;\n    }\n    interface IUser {\n        readonly onenote: IOneNote;\n    }\n}\n\naddProp(_User, \"onenote\", OneNote);\n","import { _GraphQueryableInstance, graphInvokableFactory } from \"../graphqueryable\";\nimport { BlobParser, BufferParser } from \"@pnp/odata\";\nimport { Photo as IPhotoType } from \"@microsoft/microsoft-graph-types\";\nimport { defaultPath } from \"../decorators\";\nimport { graphPatch } from \"../operations\";\n\n@defaultPath(\"photo\")\nexport class _Photo extends _GraphQueryableInstance<IPhotoType> {\n    /**\n     * Gets the image bytes as a blob (browser)\n     */\n    public getBlob(): Promise<Blob> {\n        return this.clone(Photo, \"$value\", false).usingParser(new BlobParser())<Blob>();\n    }\n\n    /**\n     * Gets the image file byets as a Buffer (node.js)\n     */\n    public getBuffer(): Promise<ArrayBuffer> {\n        return this.clone(Photo, \"$value\", false).usingParser(new BufferParser())<ArrayBuffer>();\n    }\n\n    /**\n     * Sets the file bytes\n     * \n     * @param content Image file contents, max 4 MB\n     */\n    public setContent(content: ArrayBuffer | Blob): Promise<void> {\n        return graphPatch(this.clone(Photo, \"$value\", false), { body: content });\n    }\n}\nexport interface IPhoto extends _Photo { }\nexport const Photo = graphInvokableFactory<IPhoto>(_Photo);\n","import { addProp } from \"@pnp/odata\";\nimport { _Group } from \"../groups/types\";\nimport { Photo, IPhoto } from \"./types\";\n\ndeclare module \"../groups/types\" {\n    interface _Group {\n        readonly photo: IPhoto;\n    }\n    interface IGroup {\n        readonly photo: IPhoto;\n    }\n}\n\naddProp(_Group, \"photo\", Photo);\n","import { ITypedHash, assign } from \"@pnp/common\";\nimport {\n    PlannerPlan as IPlannerPlanType,\n    PlannerTask as IPlannerTaskType,\n    PlannerBucket as IPlannerBucketType,\n    Planner as IPlannerType,\n} from \"@microsoft/microsoft-graph-types\";\nimport { body } from \"@pnp/odata\";\nimport { _GraphQueryableInstance, _GraphQueryableCollection, graphInvokableFactory } from \"../graphqueryable\";\nimport { updateable, deleteable, getById, IGetById, deleteableWithETag, IDeleteableWithETag, updateableWithETag, IUpdateableWithETag } from \"../decorators\";\nimport { graphPost } from \"../operations\";\nimport { defaultPath } from \"../decorators\";\n\n/**\n * Planner\n */\n@defaultPath(\"planner\")\nexport class _Planner extends _GraphQueryableInstance<IPlannerType> {\n\n    // Should Only be able to get by id, or else error occur\n    public get plans(): IPlans {\n        return Plans(this);\n    }\n\n    // Should Only be able to get by id, or else error occur\n    public get tasks(): ITasks {\n        return Tasks(this);\n    }\n\n    // Should Only be able to get by id, or else error occur\n    public get buckets(): IBuckets {\n        return Buckets(this);\n    }\n}\nexport interface IPlanner extends _Planner { }\nexport const Planner = graphInvokableFactory<IPlanner>(_Planner);\n\n/**\n * Plan\n */\n@updateableWithETag()\n@deleteableWithETag()\nexport class _Plan extends _GraphQueryableInstance<IPlannerPlanType> {\n\n    public get tasks(): ITasks {\n        return Tasks(this);\n    }\n\n    public get buckets(): IBuckets {\n        return Buckets(this);\n    }\n}\nexport interface IPlan extends _Plan, IUpdateableWithETag<IPlannerPlanType>, IDeleteableWithETag { }\nexport const Plan = graphInvokableFactory<IPlan>(_Plan);\n\n@defaultPath(\"plans\")\n@getById(Plan)\nexport class _Plans extends _GraphQueryableCollection<IPlannerPlanType[]> {\n    /**\n     * Create a new Planner Plan.\n     * \n     * @param owner Id of Group object.\n     * @param title The Title of the Plan.\n     */\n    public async add(owner: string, title: string): Promise<IPlanAddResult> {\n\n        const data = await graphPost(this, body({ owner, title }));\n\n        return {\n            data,\n            plan: (<any>this).getById(data.id),\n        };\n    }\n}\nexport interface IPlans extends _Plans, IGetById<IPlan> { }\nexport const Plans = graphInvokableFactory<IPlans>(_Plans);\n\n/**\n * Task\n */\n@updateableWithETag()\n@deleteableWithETag()\nexport class _Task extends _GraphQueryableInstance<IPlannerTaskType> { }\nexport interface ITask extends _Task, IUpdateableWithETag<IPlannerTaskType>, IDeleteableWithETag { }\nexport const Task = graphInvokableFactory<ITask>(_Task);\n\n/**\n * Tasks\n */\n@defaultPath(\"tasks\")\n@getById(Task)\nexport class _Tasks extends _GraphQueryableCollection<IPlannerTaskType[]> {\n    /**\n     * Create a new Planner Task.\n     * \n     * @param planId Id of Plan.\n     * @param title The Title of the Task.\n     * @param assignments Assign the task\n     * @param bucketId Id of Bucket\n     */\n    public async add(planId: string, title: string, assignments?: ITypedHash<any>, bucketId?: string): Promise<ITaskAddResult> {\n\n        let postBody = assign({\n            planId,\n            title,\n        }, assignments);\n\n        if (bucketId) {\n            postBody = assign(postBody, {\n                bucketId: bucketId,\n            });\n        }\n\n        const data = await graphPost(this, body(postBody));\n\n        return {\n            data,\n            task: (<any>this).getById(data.id),\n        };\n    }\n}\nexport interface ITasks extends _Tasks, IGetById<ITask> { }\nexport const Tasks = graphInvokableFactory<ITasks>(_Tasks);\n\n\n/**\n * Bucket\n */\n@updateable()\n@deleteable()\nexport class _Bucket extends _GraphQueryableInstance<IPlannerBucketType> {\n    public get tasks(): ITasks {\n        return Tasks(this);\n    }\n}\nexport interface IBucket extends _Bucket, IUpdateableWithETag<IPlannerBucketType>, IDeleteableWithETag { }\nexport const Bucket = graphInvokableFactory<IBucket>(_Bucket);\n\n\n/**\n * Buckets\n */\n@defaultPath(\"buckets\")\n@getById(Bucket)\nexport class _Buckets extends _GraphQueryableCollection<IPlannerBucketType[]> {\n    /**\n     * Create a new Bucket.\n     * \n     * @param name Name of Bucket object.\n     * @param planId The Id of the Plan.\n     * @param oderHint Hint used to order items of this type in a list view.\n     */\n    public async add(name: string, planId: string, orderHint?: string): Promise<IBucketAddResult> {\n\n        const postBody = {\n            name: name,\n            orderHint: orderHint ? orderHint : \"\",\n            planId: planId,\n        };\n\n        const data = await graphPost(this, body(postBody));\n\n        return {\n            bucket: (<any>this).getById(data.id),\n            data,\n        };\n    }\n}\nexport interface IBuckets extends _Buckets, IGetById<IBucket> { }\nexport const Buckets = graphInvokableFactory<IBuckets>(_Buckets);\n\nexport interface IBucketAddResult {\n    data: IPlannerBucketType;\n    bucket: IBucket;\n}\n\nexport interface IPlanAddResult {\n    data: IPlannerPlanType;\n    plan: IPlan;\n}\n\nexport interface ITaskAddResult {\n    data: IPlannerTaskType;\n    task: ITask;\n}\n","import { addProp } from \"@pnp/odata\";\nimport { _Group } from \"../groups/types\";\nimport { IPlans, Plans } from \"./types\";\n\ndeclare module \"../groups/types\" {\n    interface _Group {\n        readonly plans: IPlans;\n    }\n    interface IGroup {\n        readonly plans: IPlans;\n    }\n}\n\naddProp(_Group, \"plans\", Plans, \"planner/plans\");\n","import { addProp } from \"@pnp/odata\";\nimport { _User } from \"../users/types\";\nimport { ITasks, Tasks } from \"./types\";\n\ndeclare module \"../users/types\" {\n    interface _User {\n        readonly tasks: ITasks;\n    }\n    interface IUser {\n        readonly tasks: ITasks;\n    }\n}\n\naddProp(_User, \"tasks\", Tasks, \"planner/tasks\");\n","import { GraphRest } from \"../rest\";\nimport { IPlanner, Planner } from \"./types\";\n\nimport \"./groups\";\nimport \"./users\";\n\nexport {\n    Bucket,\n    Buckets,\n    IBucket,\n    IBucketAddResult,\n    IBuckets,\n    IPlan,\n    IPlanAddResult,\n    IPlanner,\n    IPlans,\n    ITask,\n    ITaskAddResult,\n    ITasks,\n    Plan,\n    Planner,\n    Plans,\n    Task,\n    Tasks,\n} from \"./types\";\n\ndeclare module \"../rest\" {\n    interface GraphRest {\n        readonly planner: IPlanner;\n    }\n}\n\nReflect.defineProperty(GraphRest.prototype, \"planner\", {\n    configurable: true,\n    enumerable: true,\n    get: function (this: GraphRest) {\n        return Planner(this);\n    },\n});\n","import { _GraphQueryableInstance, _GraphQueryableCollection, graphInvokableFactory } from \"../graphqueryable\";\nimport { assign } from \"@pnp/common\";\nimport { body } from \"@pnp/odata\";\nimport { Subscription as ISubscriptionType } from \"@microsoft/microsoft-graph-types\";\nimport { defaultPath, deleteable, IDeleteable, IUpdateable, updateable, getById, IGetById } from \"../decorators\";\nimport { graphPost } from \"../operations\";\n\n/**\n * Subscription\n */\n@deleteable()\n@updateable()\nexport class _Subscription extends _GraphQueryableInstance<ISubscriptionType> { }\nexport interface ISubscription extends _Subscription, IDeleteable, IUpdateable<ISubscriptionType> { }\nexport const Subscription = graphInvokableFactory<ISubscription>(_Subscription);\n\n/**\n * Subscriptions\n */\n@defaultPath(\"subscriptions\")\n@getById(Subscription)\nexport class _Subscriptions extends _GraphQueryableCollection<ISubscriptionType[]> {\n    /**\n     * Create a new Subscription.\n     * \n     * @param changeType Indicates the type of change in the subscribed resource that will raise a notification. The supported values are: created, updated, deleted.\n     * @param notificationUrl The URL of the endpoint that will receive the notifications. This URL must make use of the HTTPS protocol.\n     * @param resource Specifies the resource that will be monitored for changes. Do not include the base URL (https://graph.microsoft.com/v1.0/).\n     * @param expirationDateTime Specifies the date and time when the webhook subscription expires. The time is in UTC.\n     * @param props A plain object collection of additional properties you want to set on the new subscription\n     * \n     */\n    public async add(changeType: string, notificationUrl: string, resource: string, expirationDateTime: string, props: ISubscriptionType = {}): Promise<ISubAddResult> {\n\n        const postBody = assign({\n            changeType,\n            expirationDateTime,\n            notificationUrl,\n            resource,\n        }, props);\n\n        const data = await graphPost(this, body(postBody));\n\n        return {\n            data,\n            subscription: (<any>this).getById(data.id),\n        };\n    }\n}\nexport interface ISubscriptions extends _Subscriptions, IGetById<ISubscription> {}\nexport const Subscriptions = graphInvokableFactory<ISubscriptions>(_Subscriptions);\n\n/**\n * ISubAddResult\n */\nexport interface ISubAddResult {\n    data: ISubscriptionType;\n    subscription: ISubscription;\n}\n","import { GraphRest } from \"../rest\";\nimport { Subscriptions, ISubscriptions } from \"./types\";\n\nexport {\n    ISubscription,\n    ISubAddResult,\n    ISubscriptions,\n    Subscription,\n    Subscriptions,\n} from \"./types\";\n\ndeclare module \"../rest\" {\n    interface GraphRest {\n        readonly subscriptions: ISubscriptions;\n    }\n}\n\nReflect.defineProperty(GraphRest.prototype, \"subscriptions\", {\n    configurable: true,\n    enumerable: true,\n    get: function (this: GraphRest) {\n        return Subscriptions(this);\n    },\n});\n","import { _GraphQueryableInstance, _GraphQueryableCollection, graphInvokableFactory } from \"../graphqueryable\";\nimport { body } from \"@pnp/odata\";\nimport { assign } from \"@pnp/common\";\nimport { updateable, IUpdateable, getById, IGetById, deleteable, IDeleteable } from \"../decorators\";\nimport { graphPost } from \"../operations\";\nimport { defaultPath } from \"../decorators\";\n\n/**\n * Represents a Microsoft Team\n */\n@defaultPath(\"team\")\n@updateable()\nexport class _Team extends _GraphQueryableInstance<ITeamProperties> {\n\n    public get channels(): IChannels {\n        return Channels(this);\n    }\n\n    /**\n     * Archives this Team\n     * \n     * @param shouldSetSpoSiteReadOnlyForMembers Should members have Read-only in associated Team Site\n     */\n    public archive(shouldSetSpoSiteReadOnlyForMembers = false): Promise<void> {\n        return graphPost(this.clone(Team, \"archive\"), body({ shouldSetSpoSiteReadOnlyForMembers }));\n    }\n\n    /**\n    * Unarchives this Team\n    */\n    public unarchive(): Promise<void> {\n        return graphPost(this.clone(Team, \"unarchive\"));\n    }\n\n    /**\n     * Clones this Team\n     * @param name The name of the new Group\n     * @param description Optional description of the group\n     * @param partsToClone Parts to clone ex: apps,tabs,settings,channels,members\n     * @param visibility Set visibility to public or private \n     */\n    public cloneTeam(name: string, description = \"\", partsToClone = \"apps,tabs,settings,channels,members\", visibility: \"public\" | \"private\" = \"private\"): Promise<void> {\n\n        const postBody = {\n            description: description ? description : \"\",\n            displayName: name,\n            mailNickname: name,\n            partsToClone,\n            visibility,\n        };\n\n        // TODO:: we need to get the Location header from the response and return an operation\n        // instance that folks can query to see if/when this is complete\n        // it could just have a single method getResult (or whatever) that returns a promise that\n        // resolves when the operation is successful or rejects when it is not\n        return graphPost(this.clone(Team, \"clone\"), body(postBody));\n    }\n}\nexport interface ITeam extends _Team, IUpdateable<ITeamProperties> { }\nexport const Team = graphInvokableFactory<ITeam>(_Team);\n\n/**\n * Teams\n */\n@defaultPath(\"teams\")\n@getById(Team)\nexport class _Teams extends _GraphQueryableCollection<ITeamProperties[]> { }\nexport interface ITeams extends _Teams, IGetById<ITeam> { }\nexport const Teams = graphInvokableFactory<ITeams>(_Teams);\n\n/**\n * Channel\n */\nexport class _Channel extends _GraphQueryableInstance {\n    public get tabs(): ITabs {\n        return Tabs(this);\n    }\n}\nexport interface IChannel extends _Channel {}\nexport const Channel = graphInvokableFactory<IChannel>(_Channel);\n\n/**\n * Channels\n */\n@defaultPath(\"channels\")\n@getById(Channel)\nexport class _Channels extends _GraphQueryableCollection {\n\n    /**\n     * Creates a new Channel in the Team\n     * @param displayName The display name of the new channel\n     * @param description Optional description of the channel\n     * \n     */\n    public async add(displayName: string, description = \"\"): Promise<IChannelCreateResult> {\n\n        const postBody = {\n            description,\n            displayName,\n        };\n\n        const data = await graphPost(this, body(postBody));\n\n        return {\n            channel: (<any>this).getById(data.id),\n            data,\n        };\n    }\n}\nexport interface IChannels extends _Channels, IGetById<IChannel> { }\nexport const Channels = graphInvokableFactory<IChannels>(_Channels);\n\n/**\n * Tab\n */\n@defaultPath(\"tab\")\n@updateable()\n@deleteable()\nexport class _Tab extends _GraphQueryableInstance { }\nexport interface ITab extends _Tab, IUpdateable, IDeleteable { }\nexport const Tab = graphInvokableFactory<ITab>(_Tab);\n\n/**\n * Tabs\n */\n@defaultPath(\"tabs\")\n@getById(Tab)\nexport class _Tabs extends _GraphQueryableCollection {\n\n    /**\n     * Adds a tab to the cahnnel\n     * @param name The name of the new Tab\n     * @param appUrl The url to an app ex: https://graph.microsoft.com/beta/appCatalogs/teamsApps/12345678-9abc-def0-123456789a\n     * @param tabsConfiguration visit https://developer.microsoft.com/en-us/graph/docs/api-reference/v1.0/api/teamstab_add for reference\n     */\n    public async add(name: string, appUrl: string, properties: ITabsConfiguration): Promise<ITabCreateResult> {\n\n        const postBody = assign({\n            displayName: name,\n            \"teamsApp@odata.bind\": appUrl,\n        }, properties);\n\n        const data = await graphPost(this, body(postBody));\n\n        return {\n            data,\n            tab: (<any>this).getById(data.id),\n        };\n    }\n}\nexport interface ITabs extends _Tabs, IGetById<ITab> { }\nexport const Tabs = graphInvokableFactory<ITabs>(_Tabs);\n\nexport interface ITeamUpdateResult {\n    data: any;\n    team: ITeam;\n}\n\nexport interface IChannelCreateResult {\n    data: any;\n    channel: IChannel;\n}\n\nexport interface ITabCreateResult {\n    data: any;\n    tab: ITab;\n}\n\nexport interface ITabUpdateResult {\n    data: any;\n    tab: ITab;\n}\n\n/**\n * Defines the properties for a Team\n * \n * TODO:: remove this once typings are present in graph types package\n */\nexport interface ITeamProperties {\n\n    memberSettings?: {\n        \"allowCreateUpdateChannels\"?: boolean;\n        \"allowDeleteChannels\"?: boolean;\n        \"allowAddRemoveApps\"?: boolean;\n        \"allowCreateUpdateRemoveTabs\"?: boolean;\n        \"allowCreateUpdateRemoveConnectors\"?: boolean;\n    };\n\n    guestSettings?: {\n        \"allowCreateUpdateChannels\"?: boolean;\n        \"allowDeleteChannels\"?: boolean;\n    };\n\n    messagingSettings?: {\n        \"allowUserEditMessages\"?: boolean;\n        \"allowUserDeleteMessages\"?: boolean;\n        \"allowOwnerDeleteMessages\"?: boolean;\n        \"allowTeamMentions\"?: boolean;\n        \"allowChannelMentions\"?: boolean;\n    };\n\n    funSettings?: {\n        \"allowGiphy\"?: boolean;\n        \"giphyContentRating\"?: \"strict\" | string,\n        \"allowStickersAndMemes\"?: boolean;\n        \"allowCustomMemes\"?: boolean;\n    };\n}\n\nexport interface ITabsConfiguration {\n    configuration: {\n        \"entityId\": string;\n        \"contentUrl\": string;\n        \"websiteUrl\": string;\n        \"removeUrl\": string;\n    };\n}\n\nexport interface ITeamCreateResult {\n    data: any;\n    team: ITeam;\n}\n","import { addProp } from \"@pnp/odata\";\nimport { _User } from \"../users/types\";\nimport { ITeams, Teams } from \"./types\";\n\ndeclare module \"../users/types\" {\n    interface _User {\n        readonly joinedTeams: ITeams;\n    }\n    interface IUser {\n        readonly joinedTeams: ITeams;\n    }\n}\n\naddProp(_User, \"joinedTeams\", Teams, \"joinedTeams\");\n","import { addProp, body } from \"@pnp/odata\";\nimport { GraphRest } from \"../rest\";\nimport { _Group, Group } from \"../groups/types\";\nimport { ITeamCreateResult, ITeamProperties, ITeam, Team, ITeams, Teams } from \"./types\";\nimport { graphPut } from \"../operations\";\n\nimport \"./users\";\n\nexport {\n    Channel,\n    Channels,\n    IChannel,\n    IChannelCreateResult,\n    IChannels,\n    ITab,\n    ITabCreateResult,\n    ITabUpdateResult,\n    ITabs,\n    ITabsConfiguration,\n    ITeam,\n    ITeamCreateResult,\n    ITeamProperties,\n    ITeamUpdateResult,\n    ITeams,\n    Tab,\n    Tabs,\n    Team,\n    Teams,\n} from \"./types\";\n\ndeclare module \"../groups/types\" {\n    interface _Group {\n        readonly team: ITeam;\n        createTeam(properties: ITeamProperties): Promise<ITeamCreateResult>;\n    }\n    interface IGroup {\n        readonly team: ITeam;\n        createTeam(properties: ITeamProperties): Promise<ITeamCreateResult>;\n    }\n}\n\naddProp(_Group, \"team\", Team);\n\n_Group.prototype.createTeam = async function (this: _Group, props: ITeamProperties): Promise<ITeamCreateResult> {\n\n    const data = await graphPut(this.clone(Group, \"team\"), body(props));\n\n    return {\n        data,\n        team: this.team,\n    };\n};\n\ndeclare module \"../rest\" {\n    interface GraphRest {\n        readonly teams: ITeams;\n    }\n}\n\nReflect.defineProperty(GraphRest.prototype, \"teams\", {\n    configurable: true,\n    enumerable: true,\n    get: function (this: GraphRest) {\n        return Teams(this);\n    },\n});\n","import { GraphRest } from \"../rest\";\nimport { IUser, User, IUsers, Users } from \"./types\";\n\nexport {\n    IUser,\n    IUsers,\n    User,\n    Users,\n    IPeople,\n    People,\n} from \"./types\";\n\ndeclare module \"../rest\" {\n    interface GraphRest {\n        readonly me: IUser;\n        readonly users: IUsers;\n    }\n}\n\nReflect.defineProperty(GraphRest.prototype, \"me\", {\n    configurable: true,\n    enumerable: true,\n    get: function (this: GraphRest) {\n        return User(this, \"me\");\n    },\n});\n\nReflect.defineProperty(GraphRest.prototype, \"users\", {\n    configurable: true,\n    enumerable: true,\n    get: function (this: GraphRest) {\n        return Users(this);\n    },\n});\n","import { Logger } from \"@pnp/logging\";\nimport {\n    PnPClientStorage,\n    dateAdd,\n    combine,\n    getCtxCallback,\n    getRandomString,\n    getGUID,\n    isFunc,\n    objectDefinedNotNull,\n    isArray,\n    assign,\n    isUrlAbsolute,\n    stringIsNullOrEmpty,\n    sanitizeGuid,\n} from \"@pnp/common\";\nimport { Settings } from \"@pnp/config-store\";\nimport { sp as _sp, SPRestAddIn } from \"@pnp/sp-addinhelpers\";\nimport { setup as _setup, PnPConfiguration } from \"./pnplibconfig\";\nimport { graph as _graph } from \"@pnp/graph\";\n\n// trigger attachment of all functionality to mimic the previous pnpjs impl\nimport \"@pnp/sp/presets/all\";\nimport \"@pnp/graph/presets/all\";\n\n/**\n * Re-export everything from the dependencies to match the previous pattern\n */\nexport * from \"@pnp/common\";\nexport * from \"@pnp/logging\";\nexport * from \"@pnp/config-store\";\nexport * from \"@pnp/odata\";\nexport * from \"./sp-ns\";\nexport * from \"./graph-ns\";\n\n/**\n * Utility methods\n */\nexport const util = {\n    assign,\n    combine,\n    dateAdd,\n    getCtxCallback,\n    getGUID,\n    getRandomString,\n    isArray,\n    isFunc,\n    isUrlAbsolute,\n    objectDefinedNotNull,\n    sanitizeGuid,\n    stringIsNullOrEmpty,\n};\n\n/**\n * Provides access to the SharePoint REST interface\n */\nexport const sp = <SPRestAddIn>_sp;\n\n/**\n * Provides access to the SharePoint REST interface\n */\nexport const graph = _graph;\n\n/**\n * Provides access to local and session storage\n */\nexport const storage: PnPClientStorage = new PnPClientStorage();\n\n/**\n * Global configuration instance to which providers can be added\n */\nexport const config = new Settings();\n\n/**\n * Global logging instance to which subscribers can be registered and messages written\n */\nexport const log = Logger;\n\n/**\n * Allows for the configuration of the library\n */\nexport const setup: (config: PnPConfiguration) => void = _setup;\n\n// creating this class instead of directly assigning to default fixes a previous issue\nconst Def = {\n    /**\n     * Global configuration instance to which providers can be added\n     */\n    config,\n    /**\n     * Provides access to the Graph REST interface\n     */\n    graph,\n    /**\n     * Global logging instance to which subscribers can be registered and messages written\n     */\n    log,\n    /**\n     * Provides access global setup method\n     */\n    setup,\n    /**\n     * Provides access to the SharePoint REST interface\n     */\n    sp,\n    /**\n     * Provides access to local and session storage\n     */\n    storage,\n    /**\n     * Utility methods\n     */\n    util,\n};\n\n/**\n * Enables use of the import pnp from syntax\n */\nexport default Def;\n","import { ILibraryConfiguration, RuntimeConfig } from \"@pnp/common\";\nimport { SPConfigurationPart } from \"@pnp/sp\";\n\nexport interface PnPConfiguration extends ILibraryConfiguration, SPConfigurationPart { }\n\nexport function setup(config: PnPConfiguration): void {\n    RuntimeConfig.assign(config);\n}\n"],"sourceRoot":""}