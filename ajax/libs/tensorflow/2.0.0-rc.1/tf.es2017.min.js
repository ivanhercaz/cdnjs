/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("node-fetch"),require("buffer"),require("fs")):"function"==typeof define&&define.amd?define(["exports","node-fetch","buffer","fs"],e):e((t=t||self).tf=t.tf||{},t.nodeFetch,t.buffer$1,t.fs)}(this,(function(t,e,n,r){"use strict";e=e&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e,n=n&&Object.prototype.hasOwnProperty.call(n,"default")?n.default:n,r=r&&Object.prototype.hasOwnProperty.call(r,"default")?r.default:r;class s{constructor(t){this.global=t,this.flags={},this.flagRegistry={},this.urlFlags={},this.populateURLFlags()}setPlatform(t,e){null!=this.platform&&console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`),this.platformName=t,this.platform=e}registerFlag(t,e,n){if(this.flagRegistry[t]={evaluationFn:e,setHook:n},null!=this.urlFlags[t]){const e=this.urlFlags[t];console.warn(`Setting feature override from URL ${t}: ${e}.`),this.set(t,e)}}get(t){return t in this.flags||(this.flags[t]=this.evaluateFlag(t)),this.flags[t]}getNumber(t){return this.get(t)}getBool(t){return this.get(t)}getFlags(){return this.flags}get features(){return this.flags}set(t,e){if(null==this.flagRegistry[t])throw new Error(`Cannot set flag ${t} as it has not been registered.`);this.flags[t]=e,null!=this.flagRegistry[t].setHook&&this.flagRegistry[t].setHook(e)}evaluateFlag(t){if(null==this.flagRegistry[t])throw new Error(`Cannot evaluate flag '${t}': no evaluation function found.`);return this.flagRegistry[t].evaluationFn()}setFlags(t){this.flags=Object.assign({},t)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const t=function(t){const e={};return t.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(t,...n)=>(function(t,e,n){t[decodeURIComponent(e)]=decodeURIComponent(n||"")}(e,n[0],n[1]),n.join("="))),e}(this.global.location.search);if("tfjsflags"in t){t.tfjsflags.split(",").forEach(t=>{const[e,n]=t.split(":");this.urlFlags[e]=function(t,e){if("true"===(e=e.toLowerCase())||"false"===e)return"true"===e;if(""+ +e===e)return+e;throw new Error(`Could not parse value flag value ${e} for flag ${t}.`)}(e,n)})}}}function a(){return t.ENV}let i;function o(){if(null==i){let t;if("undefined"!=typeof window)t=window;else if("undefined"!=typeof global)t=global;else if("undefined"!=typeof process)t=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");t=self}i=t}return i}function l(t,e){const n=function(){const t=o();return null==t._tfGlobals&&(t._tfGlobals=new Map),t._tfGlobals}();if(n.has(t))return n.get(t);{const r=e();return n.set(t,r),n.get(t)}}t.ENV=null;const u=l("kernelRegistry",()=>new Map),c=l("gradRegistry",()=>new Map);function h(t,e){const n=g(t,e);return u.get(n)}function d(t){return c.get(t)}function p(t){const e=u.entries(),n=[];for(;;){const{done:r,value:s}=e.next();if(r)break;const[a,i]=s,[o]=a.split("_");o===t&&n.push(i)}return n}function f(t){const{kernelName:e,backendName:n}=t,r=g(e,n);if(u.has(r))throw new Error(`The kernel '${e}' for backend '${n}' is already registered`);u.set(r,t)}function m(t){const{kernelName:e}=t;c.has(e)&&console.warn(`Overriding the gradient for '${e}'`),c.set(e,t)}function g(t,e){return`${e}_${t}`}function y(t){let e=t.length,n=0,r=0;for(;e>0;)r=Math.random()*e|0,e--,n=t[e],t[e]=t[r],t[r]=n}function b(t,e,n){return Math.max(t,Math.min(e,n))}function x(t){return t%2==0?t:t+1}function w(t){let e=0;for(let n=0;n<t.length;n++)e+=t[n];return e}function v(t,e){if(!t)throw new Error("string"==typeof e?e:e())}function C(t,e,n=""){v(I(t,e),()=>n+` Shapes ${t} and ${e} must match`)}function N(t){v(null!=t,()=>"The input to the tensor constructor must be a non-null value.")}function S(t,e=[],n=!1){if(null==e&&(e=[]),Array.isArray(t)||P(t)&&!n)for(let r=0;r<t.length;++r)S(t[r],e,n);else e.push(t);return e}function k(t){if(0===t.length)return 1;let e=t[0];for(let n=1;n<t.length;n++)e*=t[n];return e}function I(t,e){if(t===e)return!0;if(null==t||null==e)return!1;if(t.length!==e.length)return!1;for(let n=0;n<t.length;n++)if(t[n]!==e[n])return!1;return!0}function E(t){return t%1==0}function $(t){if(null!=Math.tanh)return Math.tanh(t);if(t===1/0)return 1;if(t===-1/0)return-1;{const e=Math.exp(2*t);return(e-1)/(e+1)}}function A(t){const e=Math.ceil(Math.sqrt(t));return[e,Math.ceil(t/e)]}function R(t,e){return e<=t.length?t:t+" ".repeat(e-t.length)}function T(t,e=(t=>0),n){return new Promise((r,s)=>{let a=0;const i=()=>{if(t())return void r();a++;const o=e(a);null!=n&&a>=n?s():setTimeout(i,o)};i()})}function D(t,e){let n=1,r=-1;for(let e=0;e<t.length;++e)if(t[e]>=0)n*=t[e];else if(-1===t[e]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${e}`);r=e}else if(t[e]<0)throw Error(`Shapes can not be < 0. Found ${t[e]} at dim ${e}`);if(-1===r){if(e>0&&e!==n)throw Error(`Size(${e}) must match the product of shape ${t}`);return t}if(0===n)throw Error(`Cannot infer the missing size in [${t}] when there are 0 elements`);if(e%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${e} / ${n}`);const s=t.slice();return s[r]=e/n,s}function _(t,e){const n=e.length;return v((t=null==t?e.map((t,e)=>e):[].concat(t)).every(t=>t>=-n&&t<n),()=>`All values in axis param must be in range [-${n}, ${n}) but got axis `+t),v(t.every(t=>E(t)),()=>"All values in axis param must be integers but got axis "+t),t.map(t=>t<0?n+t:t)}function O(t,e){const n=[],r=[],s=null!=e&&Array.isArray(e)&&0===e.length,a=null==e||s?null:_(e,t).sort();let i=0;for(let e=0;e<t.length;++e){if(null!=a){if(a[i]===e&&1!==t[e])throw new Error(`Can't squeeze axis ${e} since its dim '${t[e]}' is not 1`);(null==a[i]||a[i]>e)&&1===t[e]&&(n.push(t[e]),r.push(e)),a[i]<=e&&i++}1!==t[e]&&(n.push(t[e]),r.push(e))}return{newShape:n,keptDims:r}}function F(t,e){let n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else{if("bool"!==t)throw new Error("Unknown data type "+t);n=new Uint8Array(e)}return n}function M(t,e){let n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else if("bool"===t)n=new Uint8Array(e);else{if("string"!==t)throw new Error("Unknown data type "+t);n=new Array(e)}return n}function z(t,e){for(let n=0;n<t.length;n++){const r=t[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${e} being uploaded contains ${r}.`)}}function L(t){return"bool"===t||"complex64"===t||"float32"===t||"int32"===t||"string"===t}function B(t,e){return"complex64"!==e&&(("float32"!==e||"complex64"===t)&&(("int32"!==e||"float32"===t||"complex64"===t)&&("bool"!==e||"bool"!==t)))}function P(t){return t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array}function W(t){if("float32"===t||"int32"===t)return 4;if("complex64"===t)return 8;if("bool"===t)return 1;throw new Error("Unknown dtype "+t)}function V(t){if(null==t)return 0;let e=0;return t.forEach(t=>e+=t.length),e}function U(t){return"string"==typeof t||t instanceof String}function G(t){return"boolean"==typeof t}function j(t){return"number"==typeof t}function q(t){return Array.isArray(t)?q(t[0]):t instanceof Float32Array?"float32":t instanceof Int32Array||t instanceof Uint8Array?"int32":j(t)?"float32":U(t)?"string":G(t)?"bool":"float32"}function H(t){return!!(t&&t.constructor&&t.call&&t.apply)}function K(t,e){for(let n=e;n<t;++n)if(t%n==0)return n;return t}function X(t){const e=t.length;if(e<2)return[];const n=new Array(e-1);n[e-2]=t[e-1];for(let r=e-3;r>=0;--r)n[r]=n[r+1]*t[r+1];return n}function Y(t,e,n){if("string"===e)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(t)&&(t=S(t)),n&&z(t,e),function(t,e){return t instanceof Float32Array&&"float32"===e||t instanceof Int32Array&&"int32"===e||t instanceof Uint8Array&&"bool"===e}(t,e))return t;if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e){const e=new Uint8Array(t.length);for(let n=0;n<e.length;++n)0!==Math.round(t[n])&&(e[n]=1);return e}throw new Error("Unknown data type "+e)}function J(t,e){if(0===t.length)return e[0];const n=t.reduce((t,e)=>t*e);if(0===n)return[];if(n!==e.length)throw new Error(`[${t}] does not match the input size.`);return function t(e,n,r){const s=new Array;if(1===n.length){const t=n[0];for(let n=0;n<t;n++)s[n]=r[e+n]}else{const a=n[0],i=n.slice(1),o=i.reduce((t,e)=>t*e);for(let n=0;n<a;n++)s[n]=t(e+n*o,i,r)}return s}(0,t,e)}function Z(t,e){const n=Q(t,e);for(let t=0;t<n.length;t++)n[t]=1;return n}function Q(t,e){if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e)return new Uint8Array(t);throw new Error("Unknown data type "+e)}function tt(){return a().platform.now()}function et(t){t.forEach(e=>{v(Number.isInteger(e)&&e>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${t}].`)})}function nt(t,e){return a().platform.fetch(t,e)}function rt(t,e="utf-8"){return e=e||"utf-8",a().platform.encode(t,e)}function st(t,e="utf-8"){return e=e||"utf-8",a().platform.decode(t,e)}function at(t,e,n){if(0===e)return 0;if(1===e)return t[0];let r=t[t.length-1];for(let e=0;e<t.length-1;++e)r+=n[e]*t[e];return r}function it(t,e,n){if(0===e)return[];if(1===e)return[t];const r=new Array(e);for(let e=0;e<r.length-1;++e)r[e]=Math.floor(t/n[e]),t-=r[e]*n[e];return r[r.length-1]=t,r}var ot=Object.freeze({__proto__:null,shuffle:y,clamp:b,nearestLargerEven:x,sum:w,randUniform:function(t,e){const n=Math.random();return e*n+(1-n)*t},distSquared:function(t,e){let n=0;for(let r=0;r<t.length;r++){const s=Number(t[r])-Number(e[r]);n+=s*s}return n},assert:v,assertShapesMatch:C,assertNonNull:N,flatten:S,sizeFromShape:k,isScalarShape:function(t){return 0===t.length},arraysEqual:I,isInt:E,tanh:$,sizeToSquarishShape:A,createShuffledIndices:function(t){const e=new Uint32Array(t);for(let n=0;n<t;++n)e[n]=n;return y(e),e},rightPad:R,repeatedTry:T,inferFromImplicitShape:D,parseAxisParam:_,squeezeShape:O,getTypedArrayFromDType:F,getArrayFromDType:M,checkConversionForErrors:z,isValidDtype:L,hasEncodingLoss:B,isTypedArray:P,bytesPerElement:W,bytesFromStringArray:V,isString:U,isBoolean:G,isNumber:j,inferDtype:q,isFunction:H,nearestDivisor:K,computeStrides:X,toTypedArray:Y,toNestedArray:J,makeOnesTypedArray:Z,makeZerosTypedArray:Q,now:tt,assertNonNegativeIntegerDimensions:et,fetch:nt,encodeString:rt,decodeString:st,locToIndex:at,indexToLoc:it});class lt{constructor(t,e){this.backendTimer=t,this.logger=e,null==e&&(this.logger=new ut)}profileKernel(t,e,n){let r;const s=this.backendTimer.time(()=>{r=n()});return r.forEach(n=>{n.data().then(r=>{!function(t,e,n){if("float32"!==e)return!1;for(let e=0;e<t.length;e++){const r=t[e];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${n}'`),!0}}(r,n.dtype,t),s.then(s=>{let a="";null!=s.getExtraProfileInfo&&(a=s.getExtraProfileInfo()),this.logger.logKernelProfile(t,n,r,s.kernelMs,e,a)})})}),r}}class ut{logKernelProfile(t,e,n,r,s,a){const i="number"==typeof r?R(r+"ms",9):r.error,o=R(t,25),l=e.rank,u=e.size,c=R(e.shape.toString(),14);let h="";for(const t in s){const n=s[t].shape||e.shape,r=n.length;h+=`${t}: ${r}D ${r>0?n:""} `}console.log(`%c${o}\t%c${i}\t%c${l}D ${c}\t%c${u}\t%c${h}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function ct(t,e,n,r){const s=X(e),a=function(t,e,n,r){const s=k(e),a=r[r.length-1],i=new Array(a).fill(0),o=e.length,l="complex64"===n?pt(t):t;if(o>1)for(let t=0;t<s/a;t++){const e=t*a;for(let t=0;t<a;t++)i[t]=Math.max(i[t],ht(l[e+t],0,n).length)}return i}(t,e,n,s),i=e.length,o=function t(e,n,r,s,a,i=!0){const o="complex64"===r?2:1,l=n[0],u=n.length;if(0===u){if("complex64"===r){return[ht(pt(e)[0],0,r)]}return"bool"===r?[dt(e[0])]:[e[0].toString()]}if(1===u){if(l>20){const t=3*o;let n=Array.from(e.slice(0,t)),s=Array.from(e.slice((l-3)*o,l*o));return"complex64"===r&&(n=pt(n),s=pt(s)),["["+n.map((t,e)=>ht(t,a[e],r)).join(", ")+", ..., "+s.map((t,e)=>ht(t,a[l-3+e],r)).join(", ")+"]"]}return["["+("complex64"===r?pt(e):Array.from(e)).map((t,e)=>ht(t,a[e],r)).join(", ")+"]"]}const c=n.slice(1),h=s.slice(1),d=s[0]*o,p=[];if(l>20){for(let n=0;n<3;n++){const s=n*d,i=s+d;p.push(...t(e.slice(s,i),c,r,h,a,!1))}p.push("...");for(let n=l-3;n<l;n++){const s=n*d,i=s+d;p.push(...t(e.slice(s,i),c,r,h,a,n===l-1))}}else for(let n=0;n<l;n++){const s=n*d,i=s+d;p.push(...t(e.slice(s,i),c,r,h,a,n===l-1))}const f=2===u?",":"";p[0]="["+p[0]+f;for(let t=1;t<p.length-1;t++)p[t]=" "+p[t]+f;let m=",\n";for(let t=2;t<u;t++)m+="\n";return p[p.length-1]=" "+p[p.length-1]+"]"+(i?"":m),p}(t,e,n,s,a),l=["Tensor"];return r&&(l.push("  dtype: "+n),l.push("  rank: "+i),l.push(`  shape: [${e}]`),l.push("  values:")),l.push(o.map(t=>"    "+t).join("\n")),l.join("\n")}function ht(t,e,n){let r;return r=Array.isArray(t)?parseFloat(t[0].toFixed(7))+" + "+parseFloat(t[1].toFixed(7))+"j":U(t)?`'${t}'`:"bool"===n?dt(t):parseFloat(t.toFixed(7)).toString(),R(r,e)}function dt(t){return 0===t?"false":"true"}function pt(t){const e=[];for(let n=0;n<t.length;n+=2)e.push([t[n],t[n+1]]);return e}class ft{constructor(t,e,n){if(this.dtype=e,this.shape=t.slice(),this.size=k(t),null!=n){const t=n.length;v(t===this.size,()=>`Length of values '${t}' does not match the size inferred by the shape '${this.size}'.`)}if("complex64"===e)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||M(e,this.size),this.strides=X(t)}set(t,...e){0===e.length&&(e=[0]),v(e.length===this.rank,()=>`The number of provided coordinates (${e.length}) must match the rank (${this.rank})`);const n=this.locToIndex(e);this.values[n]=t}get(...t){0===t.length&&(t=[0]);let e=0;for(const n of t){if(n<0||n>=this.shape[e]){const e=`Requested out of range element at ${t}.   Buffer shape=`+this.shape;throw new Error(e)}e++}let n=t[t.length-1];for(let e=0;e<t.length-1;++e)n+=this.strides[e]*t[e];return this.values[n]}locToIndex(t){if(0===this.rank)return 0;if(1===this.rank)return t[0];let e=t[t.length-1];for(let n=0;n<t.length-1;++n)e+=this.strides[n]*t[n];return e}indexToLoc(t){if(0===this.rank)return[];if(1===this.rank)return[t];const e=new Array(this.shape.length);for(let n=0;n<e.length-1;++n)e[n]=Math.floor(t/this.strides[n]),t-=e[n]*this.strides[n];return e[e.length-1]=t,e}get rank(){return this.shape.length}toTensor(){return mt().makeTensor(this.values,this.shape,this.dtype)}}let mt=null,gt=null,yt=null;class bt{constructor(t,e,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=t.slice(),this.dtype=e||"float32",this.size=k(t),this.strides=X(t),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}flatten(){return this.throwIfDisposed(),this.as1D()}asScalar(){return this.throwIfDisposed(),v(1===this.size,()=>"The array must have only 1 element."),this.reshape([])}as1D(){return this.throwIfDisposed(),this.reshape([this.size])}as2D(t,e){return this.throwIfDisposed(),this.reshape([t,e])}as3D(t,e,n){return this.throwIfDisposed(),this.reshape([t,e,n])}as4D(t,e,n,r){return this.throwIfDisposed(),this.reshape([t,e,n,r])}as5D(t,e,n,r,s){return this.throwIfDisposed(),this.reshape([t,e,n,r,s])}asType(t){return this.throwIfDisposed(),gt.cast(this,t)}get rank(){return this.shape.length}async buffer(){const t=await this.data();return gt.buffer(this.shape,this.dtype,t)}bufferSync(){return gt.buffer(this.shape,this.dtype,this.dataSync())}async array(){const t=await this.data();return J(this.shape,t)}arraySync(){return J(this.shape,this.dataSync())}async data(){this.throwIfDisposed();const t=mt().read(this.dataId);if("string"===this.dtype){const e=await t;try{return e.map(t=>st(t))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return t}dataSync(){this.throwIfDisposed();const t=mt().readSync(this.dataId);if("string"===this.dtype)try{return t.map(t=>st(t))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return t}async bytes(){this.throwIfDisposed();const t=await mt().read(this.dataId);return"string"===this.dtype?t:new Uint8Array(t.buffer)}dispose(){this.isDisposed||(mt().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}toFloat(){return this.asType("float32")}toInt(){return this.asType("int32")}toBool(){return this.asType("bool")}print(t=!1){return gt.print(this,t)}reshape(t){return this.throwIfDisposed(),gt.reshape(this,t)}reshapeAs(t){return this.throwIfDisposed(),this.reshape(t.shape)}expandDims(t=0){return gt.expandDims(this,t)}cumsum(t=0,e=!1,n=!1){return gt.cumsum(this,t,e,n)}squeeze(t){return this.throwIfDisposed(),gt.squeeze(this,t)}clone(){return this.throwIfDisposed(),gt.clone(this)}toString(t=!1){return ct(this.dataSync(),this.shape,this.dtype,t)}gather(t,e=0){return this.throwIfDisposed(),gt.gather(this,t,e)}matMul(t,e=!1,n=!1){return this.throwIfDisposed(),gt.matMul(this,t,e,n)}dot(t){return this.throwIfDisposed(),gt.dot(this,t)}norm(t="euclidean",e=null,n=!1){return this.throwIfDisposed(),gt.norm(this,t,e,n)}slice(t,e){return this.throwIfDisposed(),gt.slice(this,t,e)}reverse(t){return this.throwIfDisposed(),gt.reverse(this,t)}stack(t,e=0){return gt.stack([this,t],e)}unstack(t=0){return gt.unstack(this,t)}batchNormalization(t,e,n=.001,r,s){return yt("tf.batchNormalization() is going away. Use tf.batchNorm() instead, and note the positional argument change of scale, offset, and varianceEpsilon"),this.batchNorm(t,e,s,r,n)}all(t=null,e=!1){return this.throwIfDisposed(),gt.all(this,t,e)}any(t=null,e=!1){return this.throwIfDisposed(),gt.any(this,t,e)}logSumExp(t=null,e=!1){return this.throwIfDisposed(),gt.logSumExp(this,t,e)}sum(t=null,e=!1){return this.throwIfDisposed(),gt.sum(this,t,e)}prod(t=null,e=!1){return this.throwIfDisposed(),gt.prod(this,t,e)}mean(t=null,e=!1){return this.throwIfDisposed(),gt.mean(this,t,e)}min(t=null,e=!1){return this.throwIfDisposed(),gt.min(this,t,e)}max(t=null,e=!1){return this.throwIfDisposed(),gt.max(this,t,e)}argMin(t=null){return this.throwIfDisposed(),gt.argMin(this,t)}argMax(t=null){return this.throwIfDisposed(),gt.argMax(this,t)}cast(t){return this.throwIfDisposed(),gt.cast(this,t)}addStrict(t){return this.throwIfDisposed(),gt.addStrict(this,t)}atan2(t){return this.throwIfDisposed(),gt.atan2(this,t)}subStrict(t){return this.throwIfDisposed(),gt.subStrict(this,t)}pow(t){return this.throwIfDisposed(),gt.pow(this,t)}powStrict(t){return this.throwIfDisposed(),gt.powStrict(this,t)}mul(t){return this.throwIfDisposed(),gt.mul(this,t)}mulStrict(t){return this.throwIfDisposed(),gt.mulStrict(this,t)}floorDiv(t){return this.throwIfDisposed(),gt.floorDiv(this,t)}divStrict(t){return this.throwIfDisposed(),gt.divStrict(this,t)}minimum(t){return this.throwIfDisposed(),gt.minimum(this,t)}minimumStrict(t){return this.throwIfDisposed(),gt.minimumStrict(this,t)}maximum(t){return this.throwIfDisposed(),gt.maximum(this,t)}maximumStrict(t){return this.throwIfDisposed(),gt.maximumStrict(this,t)}mod(t){return this.throwIfDisposed(),gt.mod(this,t)}modStrict(t){return this.throwIfDisposed(),gt.modStrict(this,t)}squaredDifferenceStrict(t){return this.throwIfDisposed(),gt.squaredDifferenceStrict(this,t)}notEqualStrict(t){return this.throwIfDisposed(),gt.notEqualStrict(this,t)}less(t){return this.throwIfDisposed(),gt.less(this,t)}lessStrict(t){return this.throwIfDisposed(),gt.lessStrict(this,t)}equal(t){return this.throwIfDisposed(),gt.equal(this,t)}equalStrict(t){return this.throwIfDisposed(),gt.equalStrict(this,t)}lessEqual(t){return this.throwIfDisposed(),gt.lessEqual(this,t)}lessEqualStrict(t){return this.throwIfDisposed(),gt.lessEqualStrict(this,t)}greater(t){return this.throwIfDisposed(),gt.greater(this,t)}greaterStrict(t){return this.throwIfDisposed(),gt.greaterStrict(this,t)}greaterEqual(t){return this.throwIfDisposed(),gt.greaterEqual(this,t)}greaterEqualStrict(t){return this.throwIfDisposed(),gt.greaterEqualStrict(this,t)}logicalAnd(t){return this.throwIfDisposed(),gt.logicalAnd(this,t)}logicalOr(t){return this.throwIfDisposed(),gt.logicalOr(this,t)}logicalNot(){return this.throwIfDisposed(),gt.logicalNot(this)}logicalXor(t){return this.throwIfDisposed(),gt.logicalXor(this,t)}where(t,e){return this.throwIfDisposed(),gt.where(t,this,e)}neg(){return this.throwIfDisposed(),gt.neg(this)}ceil(){return this.throwIfDisposed(),gt.ceil(this)}floor(){return this.throwIfDisposed(),gt.floor(this)}sign(){return this.throwIfDisposed(),gt.sign(this)}isNaN(){return this.throwIfDisposed(),gt.isNaN(this)}isInf(){return this.throwIfDisposed(),gt.isInf(this)}isFinite(){return this.throwIfDisposed(),gt.isFinite(this)}exp(){return this.throwIfDisposed(),gt.exp(this)}expm1(){return this.throwIfDisposed(),gt.expm1(this)}log(){return this.throwIfDisposed(),gt.log(this)}log1p(){return this.throwIfDisposed(),gt.log1p(this)}sqrt(){return this.throwIfDisposed(),gt.sqrt(this)}rsqrt(){return this.throwIfDisposed(),gt.rsqrt(this)}square(){return this.throwIfDisposed(),gt.square(this)}reciprocal(){return this.throwIfDisposed(),gt.reciprocal(this)}abs(){return this.throwIfDisposed(),gt.abs(this)}clipByValue(t,e){return this.throwIfDisposed(),gt.clipByValue(this,t,e)}relu(){return this.throwIfDisposed(),gt.relu(this)}relu6(){return this.throwIfDisposed(),gt.relu6(this)}elu(){return this.throwIfDisposed(),gt.elu(this)}selu(){return this.throwIfDisposed(),gt.selu(this)}leakyRelu(t=.2){return this.throwIfDisposed(),gt.leakyRelu(this,t)}prelu(t){return this.throwIfDisposed(),gt.prelu(this,t)}sigmoid(){return this.throwIfDisposed(),gt.sigmoid(this)}logSigmoid(){return this.throwIfDisposed(),gt.logSigmoid(this)}softplus(){return this.throwIfDisposed(),gt.softplus(this)}zerosLike(){return this.throwIfDisposed(),gt.zerosLike(this)}onesLike(){return this.throwIfDisposed(),gt.onesLike(this)}sin(){return this.throwIfDisposed(),gt.sin(this)}cos(){return this.throwIfDisposed(),gt.cos(this)}tan(){return this.throwIfDisposed(),gt.tan(this)}asin(){return this.throwIfDisposed(),gt.asin(this)}acos(){return this.throwIfDisposed(),gt.acos(this)}atan(){return this.throwIfDisposed(),gt.atan(this)}sinh(){return this.throwIfDisposed(),gt.sinh(this)}cosh(){return this.throwIfDisposed(),gt.cosh(this)}tanh(){return this.throwIfDisposed(),gt.tanh(this)}asinh(){return this.throwIfDisposed(),gt.asinh(this)}acosh(){return this.throwIfDisposed(),gt.acosh(this)}atanh(){return this.throwIfDisposed(),gt.atanh(this)}erf(){return this.throwIfDisposed(),gt.erf(this)}round(){return this.throwIfDisposed(),gt.round(this)}step(t=0){return this.throwIfDisposed(),gt.step(this,t)}softmax(t=-1){return this.throwIfDisposed(),gt.softmax(this,t)}logSoftmax(t=-1){return this.throwIfDisposed(),gt.logSoftmax(this,t)}resizeBilinear(t,e=!1){return this.throwIfDisposed(),gt.image.resizeBilinear(this,t,e)}resizeNearestNeighbor(t,e=!1){return this.throwIfDisposed(),gt.image.resizeNearestNeighbor(this,t,e)}conv1d(t,e,n,r="NWC",s=1,a){return this.throwIfDisposed(),gt.conv1d(this,t,e,n,r,s,a)}conv2d(t,e,n,r="NHWC",s=[1,1],a){return this.throwIfDisposed(),gt.conv2d(this,t,e,n,r,s,a)}conv2dTranspose(t,e,n,r,s){return this.throwIfDisposed(),gt.conv2dTranspose(this,t,e,n,r,s)}depthwiseConv2D(t,e,n,r="NHWC",s=[1,1],a){return this.throwIfDisposed(),gt.depthwiseConv2d(this,t,e,n,r,s,a)}separableConv2d(t,e,n,r,s=[1,1],a="NHWC"){return this.throwIfDisposed(),gt.separableConv2d(this,t,e,n,r,s,a)}avgPool(t,e,n,r){return this.throwIfDisposed(),gt.avgPool(this,t,e,n,r)}maxPool(t,e,n,r){return this.throwIfDisposed(),gt.maxPool(this,t,e,n,r)}localResponseNormalization(t=5,e=1,n=1,r=.5){return gt.localResponseNormalization(this,t,e,n,r)}pool(t,e,n,r,s){return this.throwIfDisposed(),gt.pool(this,t,e,n,r,s)}variable(t=!0,e,n){return this.throwIfDisposed(),mt().makeVariable(this,t,e,n)}unsortedSegmentSum(t,e){return this.throwIfDisposed(),gt.unsortedSegmentSum(this,t,e)}batchToSpaceND(t,e){return this.throwIfDisposed(),gt.batchToSpaceND(this,t,e)}spaceToBatchND(t,e){return this.throwIfDisposed(),gt.spaceToBatchND(this,t,e)}topk(t=1,e=!0){return this.throwIfDisposed(),gt.topk(this,t,e)}stridedSlice(t,e,n,r=0,s=0,a=0,i=0,o=0){return this.throwIfDisposed(),gt.stridedSlice(this,t,e,n,r,s,a,i,o)}depthToSpace(t,e){return this.throwIfDisposed(),gt.depthToSpace(this,t,e)}fft(){return this.throwIfDisposed(),gt.spectral.fft(this)}ifft(){return this.throwIfDisposed(),gt.spectral.ifft(this)}rfft(){return this.throwIfDisposed(),gt.spectral.rfft(this)}irfft(){return this.throwIfDisposed(),gt.spectral.irfft(this)}}Object.defineProperty(bt,Symbol.hasInstance,{value:t=>!!t&&null!=t.dataId&&null!=t.shape&&null!=t.dtype});class xt extends bt{constructor(t,e,n,r){super(t.shape,t.dtype,t.dataId,r),this.trainable=e,this.name=n}assign(t){if(t.dtype!==this.dtype)throw new Error(`dtype of the new value (${t.dtype}) and previous value (${this.dtype}) must match`);if(!I(t.shape,this.shape))throw new Error(`shape of the new value (${t.shape}) and previous value (${this.shape}) must match`);mt().disposeTensor(this),this.dataId=t.dataId,mt().incRef(this,null)}dispose(){mt().disposeVariable(this),this.isDisposedInternal=!0}}var wt,vt,Ct,Nt,St;Object.defineProperty(xt,Symbol.hasInstance,{value:t=>t instanceof bt&&null!=t.assign&&t.assign instanceof Function}),(wt=t.Rank||(t.Rank={})).R0="R0",wt.R1="R1",wt.R2="R2",wt.R3="R3",wt.R4="R4",wt.R5="R5",wt.R6="R6",function(t){t.float32="float32",t.int32="int32",t.bool="int32",t.complex64="complex64"}(vt||(vt={})),function(t){t.float32="float32",t.int32="int32",t.bool="bool",t.complex64="complex64"}(Ct||(Ct={})),function(t){t.float32="float32",t.int32="float32",t.bool="float32",t.complex64="complex64"}(Nt||(Nt={})),function(t){t.float32="complex64",t.int32="complex64",t.bool="complex64",t.complex64="complex64"}(St||(St={}));const kt={float32:Nt,int32:vt,bool:Ct,complex64:St};function It(t,e){if("string"===t||"string"===e){if("string"===t&&"string"===e)return"string";throw new Error(`Can not upcast ${t} with ${e}`)}return kt[t][e]}function Et(t){return It(t,"int32")}function $t(t,e){if(t.dtype===e.dtype)return[t,e];const n=It(t.dtype,e.dtype);return[t.cast(n),e.cast(n)]}function At(t,e){v(t.dtype===e.dtype,()=>`The dtypes of the first(${t.dtype}) and second(${e.dtype}) input must match`)}function Rt(t,e){return e.some(e=>e.id===t.id)}function Tt(t){const e=[];return function t(e,n,r){if(null==e)return;if(e instanceof bt)return void n.push(e);if(s=e,!Array.isArray(s)&&"object"!=typeof s)return;var s;const a=e;for(const e in a){const s=a[e];r.has(s)||(r.add(s),t(s,n,r))}}(t,e,new Set),e}var Dt=Object.freeze({__proto__:null,makeTypesMatch:$t,assertTypesMatch:At,isTensorInList:Rt,getTensorsInContainer:Tt});class _t{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null}}dispose(){for(const t in this.registeredVariables)this.registeredVariables[t].dispose()}}class Ot{constructor(t){this.ENV=t,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new _t}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then(()=>{});if(null!=this.backendInstance)return;const t=this.getSortedBackends();for(let e=0;e<t.length;e++){const n=t[e];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:t,asyncInit:e}=this.initializeBackendsAndReturnBest();if(e)throw new Error(`The highest priority backend '${t}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(t)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(t){if(!(t in this.registry)){if(!(t in this.registryFactory))return null;{const{asyncInit:e}=this.initializeBackend(t);if(e)return null}}return this.registry[t]}findBackendFactory(t){return t in this.registryFactory?this.registryFactory[t].factory:null}registerBackend(t,e,n=1){return t in this.registryFactory?(console.warn(t+" backend was already registered. Reusing existing backend factory."),!1):(this.registryFactory[t]={factory:e,priority:n},!0)}async setBackend(t){if(null==this.registryFactory[t])throw new Error(`Backend name '${t}' not found in registry`);if(this.backendName=t,null==this.registry[t]){this.backendInstance=null;const{success:e,asyncInit:n}=this.initializeBackend(t);if(!(n?await e:e))return!1}return this.backendInstance=this.registry[t],this.setupRegisteredKernels(),this.profiler=new lt(this.backendInstance),!0}setupRegisteredKernels(){p(this.backendName).forEach(t=>{null!=t.setupFunc&&t.setupFunc(this.backendInstance)})}disposeRegisteredKernels(t){p(t).forEach(e=>{null!=e.disposeFunc&&e.disposeFunc(this.registry[t])})}initializeBackend(t){const e=this.registryFactory[t];if(null==e)throw new Error(`Cannot initialize backend ${t}, no registration found.`);try{const n=e.factory();if(Promise.resolve(n)===n){const e=++this.pendingBackendInitId,r=n.then(n=>!(e<this.pendingBackendInitId)&&(this.registry[t]=n,this.pendingBackendInit=null,!0)).catch(n=>(e<this.pendingBackendInitId||(this.pendingBackendInit=null,console.warn(`Initialization of backend ${t} failed`),console.warn(n.stack||n.message)),!1));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}return this.registry[t]=n,{success:!0,asyncInit:!1}}catch(e){return console.warn(`Initialization of backend ${t} failed`),console.warn(e.stack||e.message),{success:!1,asyncInit:!1}}}removeBackend(t){if(!(t in this.registryFactory))throw new Error(t+" backend not found in registry");this.backendName===t&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,t in this.registry&&(this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t]),delete this.registryFactory[t],this.backendName===t&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((t,e)=>this.registryFactory[e].priority-this.registryFactory[t].priority)}initializeBackendsAndReturnBest(){const t=this.getSortedBackends();for(let e=0;e<t.length;e++){const n=t[e],{success:r,asyncInit:s}=this.initializeBackend(n);if(s||r)return{name:n,asyncInit:s}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(t,e){const n=this.state.tensorInfo.get(e),r=n.backend,s=this.readSync(e);r.disposeData(e),n.backend=t,t.move(e,s,n.shape,n.dtype),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(t,e){let n,r=null;if(null==e){if("function"!=typeof t)throw new Error("Please provide a function to tidy()");e=t}else{if("string"!=typeof t&&!(t instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof e)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=t}return this.scopedRun(()=>this.startScope(r),()=>this.endScope(n),()=>(n=e(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n))}scopedRun(t,e,n){t();try{const t=n();return e(),t}catch(t){throw e(),t}}nextTensorId(){return Ot.nextTensorId++}nextVariableId(){return Ot.nextVariableId++}clone(t){const e=this.makeTensorFromDataId(t.dataId,t.shape,t.dtype),n={x:t};return this.addTapeNode(this.state.activeScope.name,n,[e],t=>({x:()=>t.toFloat()}),[],{}),e}runKernel(t,e,n,r,s){return this.runKernelFunc(null,e,null,t,n,r,s)}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(t,e,n){const r=this.backend.numDataIds();let s=0;n.forEach(t=>{s+="complex64"===t.dtype?3:1});const a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],i=r-e-s-a;if(i>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${i} data ids) after running '${t}'`)}runKernelFunc(t,e,n,r,s,a,i){let o,l=[];const u=this.isTapeOn();null==r&&(r=null!=this.state.activeScope?this.state.activeScope.name:"");const c=this.state.numBytes,d=this.state.numTensors;let p;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);const f=h(r,this.backendName);let m;if(null!=f)p=()=>{const t=this.backend.numDataIds();m=f.kernelFunc({inputs:e,attrs:s,backend:this.backend});const n=Array.isArray(m)?m:[m];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(r,t,n);const o=n.map(({dataId:t,shape:e,dtype:n})=>this.makeTensorFromDataId(t,e,n));if(u){let t=this.getTensorsForGradient(r,e,o);if(null==t){null==i&&(i=[]);const e=o.filter((t,e)=>i[e]);t=(a||[]).slice().concat(e)}l=this.saveTensorsForBackwardMode(t)}return o};else{const e=t=>{u&&(l=t.map(t=>this.keep(this.clone(t))))};p=()=>{const n=this.backend.numDataIds();m=this.tidy(()=>t(this.backend,e));const s=Array.isArray(m)?m:[m];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(r,n,s),s}}return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{o=this.ENV.getBool("DEBUG")?this.profiler.profileKernel(r,e,()=>p()):p()}),u&&this.addTapeNode(r,e,o,n,l,s),this.state.profiling&&this.state.activeProfile.kernels.push({name:r,bytesAdded:this.state.numBytes-c,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-d,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(e).map(t=>e[t].shape),outputShapes:o.map(t=>t.shape)}),Array.isArray(m)?o:o[0]}saveTensorsForBackwardMode(t){return t.map(t=>this.keep(this.clone(t)))}getTensorsForGradient(t,e,n){const r=d(t);if(null!=r){const t=r.inputsToSave||[],s=r.outputsToSave||[];let a;r.saveAllInputs?(v(Array.isArray(e),()=>"saveAllInputs is true, expected inputs to be an array."),a=Object.keys(e).map(t=>e[t])):a=t.map(t=>e[t]);const i=n.filter((t,e)=>s[e]);return a.concat(i)}return null}makeTensor(t,e,n,r){if(null==t)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;let s=t;"string"===n&&U(t[0])&&(s=t.map(t=>rt(t)));const a=r.write(s,e,n),i=new bt(e,n,a,this.nextTensorId());if(this.incRef(i,r),"string"===n){const t=this.state.tensorInfo.get(a),e=V(s);this.state.numBytes+=e-t.bytes,t.bytes=e}return i}makeTensorFromDataId(t,e,n,r){const s=new bt(e,n=n||"float32",t,this.nextTensorId());return this.incRef(s,r),s}makeVariable(t,e=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==t.dtype&&(t=t.asType(r));const s=new xt(t,e,n,this.nextTensorId());if(null!=this.state.registeredVariables[s.name])throw new Error(`Variable with name ${s.name} was already registered`);return this.state.registeredVariables[s.name]=s,this.incRef(s,this.backend),s}incRef(t,e){const n=this.state.tensorInfo.has(t.dataId)?this.state.tensorInfo.get(t.dataId).refCount:0;if(this.state.numTensors++,"string"===t.dtype&&this.state.numStringTensors++,0===n){this.state.numDataBuffers++;let n=0;"complex64"!==t.dtype&&"string"!==t.dtype&&(n=t.size*W(t.dtype)),this.state.tensorInfo.set(t.dataId,{backend:e||this.backend,dtype:t.dtype,shape:t.shape,bytes:n,refCount:0}),this.state.numBytes+=n}this.state.tensorInfo.get(t.dataId).refCount++,t instanceof xt||this.track(t)}disposeTensor(t){if(!this.state.tensorInfo.has(t.dataId))return;this.state.numTensors--,"string"===t.dtype&&this.state.numStringTensors--;const e=this.state.tensorInfo.get(t.dataId);e.refCount<=1?("complex64"!==t.dtype&&(this.state.numBytes-=e.bytes),this.state.numDataBuffers--,e.backend.disposeData(t.dataId),this.state.tensorInfo.delete(t.dataId)):this.state.tensorInfo.get(t.dataId).refCount--}disposeVariables(){for(const t in this.state.registeredVariables){const e=this.state.registeredVariables[t];this.disposeVariable(e)}}disposeVariable(t){this.disposeTensor(t),null!=this.state.registeredVariables[t.name]&&delete this.state.registeredVariables[t.name]}memory(){const t=this.backend.memory();return t.numTensors=this.state.numTensors,t.numDataBuffers=this.state.numDataBuffers,t.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(t.unreliable=!0,null==t.reasons&&(t.reasons=[]),t.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),t}async profile(t){this.state.profiling=!0;const e=this.state.numBytes,n=this.state.numTensors;return this.state.activeProfile.kernels=[],this.state.activeProfile.result=t(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map(t=>t.totalBytesSnapshot)),this.state.activeProfile.newBytes=this.state.numBytes-e,this.state.activeProfile.newTensors=this.state.numTensors-n,this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(t,e,n,r,s,a){const i={id:this.state.nextTapeNodeId++,kernelName:t,inputs:e,outputs:n,saved:s},o=d(t);null!=o&&(r=o.gradFunc),null!=r&&(i.gradient=t=>(t=t.map((t,e)=>{if(null==t){const t=n[e],r=Q(t.size,t.dtype);return this.makeTensor(r,t.shape,t.dtype)}return t}),r(t.length>1?t:t[0],s,a))),this.state.activeTape.push(i)}keep(t){return t.kept=!0,t}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(t){const e={track:[],name:"unnamed scope",id:this.state.nextScopeId++};t&&(e.name=t),this.state.scopeStack.push(e),this.state.activeScope=e}endScope(t){const e=Tt(t),n=new Set(e.map(t=>t.id));for(let t=0;t<this.state.activeScope.track.length;t++){const e=this.state.activeScope.track[t];e.kept||n.has(e.id)||e.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],e.forEach(t=>{t.kept||t.scopeId!==r.id||this.track(t)})}gradients(t,e,n,r=!1){if(v(e.length>0,()=>"gradients() received an empty list of xs."),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const s=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",t));v(s instanceof bt,()=>"The result y returned by f() must be a tensor.");const a=function(t,e,n){const r={},s={};for(let t=0;t<e.length;t++)r[e[t].id]=!0;for(let n=0;n<t.length;n++){const a=t[n],i=a.inputs;for(const t in i){const n=i[t];let o=!1;for(let t=0;t<e.length;t++)if(r[n.id]){a.outputs.forEach(t=>r[t.id]=!0),o=!0,s[a.id]=!0;break}if(o)break}}const a={};a[n.id]=!0;const i={};for(let e=t.length-1;e>=0;e--){const n=t[e],r=n.inputs;for(let t=0;t<n.outputs.length;t++)if(a[n.outputs[t].id]){for(const t in r)a[r[t].id]=!0,i[n.id]=!0;break}}const o=[];for(let e=0;e<t.length;e++){const n=t[e];if(s[n.id]&&i[n.id]){const t={};for(const e in n.inputs){const s=n.inputs[e];r[s.id]&&(t[e]=s)}const e=Object.assign({},n);e.inputs=t,e.outputs=n.outputs,o.push(e)}}return o}(this.state.activeTape,e,s);if(!r&&0===a.length&&e.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{const t={};t[s.id]=null==n?function(t){const e=Z(k(t),"float32");return Ft.makeTensor(e,t,"float32")}(s.shape):n,function(t,e,n){for(let r=e.length-1;r>=0;r--){const s=e[r],a=[];if(s.outputs.forEach(e=>{const n=t[e.id];null!=n?a.push(n):a.push(null)}),null==s.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${s.kernelName}.`);const i=s.gradient(a);for(const e in s.inputs){if(!(e in i))throw new Error(`Cannot backprop through input ${e}. Available gradients found: ${Object.keys(i)}.`);const r=n(()=>i[e]());if("float32"!==r.dtype)throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input ${e} must have 'float32' dtype, but has '${r.dtype}'`);const a=s.inputs[e];if(!I(r.shape,a.shape))throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input '${e}' has shape '${r.shape}', which does not match the shape of the input '${a.shape}'`);if(null==t[a.id])t[a.id]=r;else{const e=t[a.id];t[a.id]=e.add(r),e.dispose()}}}}(t,a,t=>this.tidy(t));const r=e.map(e=>t[e.id]);return 0===this.state.gradientDepth&&(this.state.activeTape.forEach(t=>{for(const e of t.saved)e.dispose()}),this.state.activeTape=null),{value:s,grads:r}})}customGrad(t){return v(H(t),()=>"The f passed in customGrad(f) must be a function."),(...e)=>{let n;v(e.every(t=>t instanceof bt),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");const r={};return e.forEach((t,e)=>{r[e]=t}),this.runKernelFunc((r,s)=>(n=t(...e,s),v(n.value instanceof bt,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),v(H(n.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),n.value),r,(t,r)=>{const s=n.gradFunc(t,r),a=Array.isArray(s)?s:[s];v(a.length===e.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),v(a.every(t=>t instanceof bt),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");const i={};return a.forEach((t,e)=>{i[e]=()=>t}),i})}}readSync(t){return this.state.tensorInfo.get(t).backend.readSync(t)}read(t){return this.state.tensorInfo.get(t).backend.read(t)}async time(t){const e=tt(),n=await this.backend.time(t);return n.wallMs=tt()-e,n}track(t){return null!=this.state.activeScope&&(t.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(t)),t}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new _t;for(const t in this.registry)this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}Ot.nextTensorId=0,Ot.nextVariableId=0;const Ft=function(){const e=o();if(null==e._tfengine){const t=new s(e);e._tfengine=new Ot(t)}var n;return n=e._tfengine.ENV,t.ENV=n,mt=()=>e._tfengine,e._tfengine}();function Mt(){if("undefined"!=typeof navigator&&null!=navigator){const t=navigator.userAgent||navigator.vendor||window.opera;return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function zt(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}var Lt=Object.freeze({__proto__:null,isMobile:Mt,isBrowser:zt});const Bt=a();Bt.registerFlag("DEBUG",()=>!1,t=>{t&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")}),Bt.registerFlag("IS_BROWSER",()=>zt()),Bt.registerFlag("IS_NODE",()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node),Bt.registerFlag("IS_CHROME",()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)),Bt.registerFlag("PROD",()=>!1),Bt.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>Bt.getBool("DEBUG")),Bt.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0),Bt.registerFlag("IS_TEST",()=>!1);function Pt(t,e){const n=t.length,r=[];for(let s=0;s<n;s++){const a=n-1-s,i=t[a]||1;(e[e.length-1-s]||1)>1&&1===i&&r.unshift(a)}return r}function Wt(t,e){const n=[];for(let r=0;r<e.length;r++){const s=t[t.length-r-1],a=e.length-r-1,i=e[a];(null==s||1===s&&i>1)&&n.unshift(a)}return n}function Vt(t,e){const n=[],r=Math.max(t.length,e.length);for(let s=0;s<r;s++){let r=t[t.length-s-1];null==r&&(r=1);let a=e[e.length-s-1];if(null==a&&(a=1),1===r)n.unshift(a);else if(1===a)n.unshift(r);else{if(r!==a){throw Error(`Operands could not be broadcast together with shapes ${t} and ${e}.`)}n.unshift(r)}}return n}const Ut={kernelName:"Add",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=Vt(n.shape,r.shape);return{a:()=>{let e=t;const r=Wt(n.shape,s);return r.length>0&&(e=e.sum(r)),e.reshape(n.shape)},b:()=>{let e=t;const n=Wt(r.shape,s);return n.length>0&&(e=e.sum(n)),e.reshape(r.shape)}}}},Gt={kernelName:"AddN",saveAllInputs:!0,gradFunc:(t,e)=>{const n={};return e.forEach((e,r)=>{n[r]=()=>t.clone()}),n}};function jt(t,e){let n=t;if(P(t))return"string"===e?[]:[t.length];if(!Array.isArray(t))return[];const r=[];for(;Array.isArray(n)||P(n)&&"string"!==e;)r.push(n.length),n=n[0];return Array.isArray(t)&&a().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&function t(e,n,r){if(r=r||[],!Array.isArray(e)&&!P(e))return void v(0===n.length,()=>`Element arr[${r.join("][")}] is a primitive, but should be an array/TypedArray of ${n[0]} elements`);v(n.length>0,()=>`Element arr[${r.join("][")}] should be a primitive, but is an array of ${e.length} elements`),v(e.length===n[0],()=>`Element arr[${r.join("][")}] should have ${n[0]} elements, but has ${e.length} elements`);const s=n.slice(1);for(let n=0;n<e.length;++n)t(e[n],s,r.concat(n))}(t,r,[]),r}function qt(t,e,n,r){if(null!=t&&("numeric"!==t&&t!==e||"numeric"===t&&"string"===e))throw new Error(`Argument '${n}' passed to '${r}' must be ${t} tensor, but got ${e} tensor`)}function Ht(t,e,n,r="numeric"){if(t instanceof bt)return qt(r,t.dtype,e,n),t;let s=q(t);if("string"!==s&&["bool","int32","float32"].indexOf(r)>=0&&(s=r),qt(r,s,e,n),null==t||!P(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t){const r=null==t?"null":t.constructor.name;throw new Error(`Argument '${e}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`)}const i=jt(t,s);P(t)||Array.isArray(t)||(t=[t]);const o="string"!==s?Y(t,s,a().getBool("DEBUG")):S(t,[],!0);return Ft.makeTensor(o,i,s)}function Kt(t,e,n,r="numeric"){if(!Array.isArray(t))throw new Error(`Argument ${e} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return t.map((t,r)=>Ht(t,`${e}[${r}]`,n),r)}function Xt(t,e){v(H(t),()=>"The f passed in variableGrads(f) must be a function"),v(null==e||Array.isArray(e)&&e.every(t=>t instanceof xt),()=>"The varList passed in variableGrads(f, varList) must be an array of variables");const n=null!=e;if(!n){e=[];for(const t in Ft.registeredVariables)e.push(Ft.registeredVariables[t])}const r=n?e.filter(t=>!t.trainable):null,s=e.length;v((e=e.filter(t=>t.trainable)).length>0,()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${s} variables is trainable.`);const{value:a,grads:i}=Ft.gradients(t,e,null,!0);v(i.some(t=>null!=t),()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),v(0===a.rank,()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`);const o={};return e.forEach((t,e)=>{null!=i[e]&&(o[t.name]=i[e])}),null!=r&&r.forEach(t=>o[t.name]=null),{value:a,grads:o}}function Yt(t){return Ft.customGrad(t)}function Jt(t){if(t.filter(t=>null==t).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}function Zt(t,e){for(let n=0;n<t.length;++n)if(t[t.length-n-1]!==e-1-n)return!1;return!0}function Qt(t,e,n){const r=t.length+e.length,s=[];let a=0,i=0;for(let o=0;o<r;o++)-1===n.indexOf(o)?s.push(t[a++]):s.push(e[i++]);return s}function te(t,e){const n=[],r=t.length;for(let s=0;s<r;s++)-1===e.indexOf(s)&&n.push(t[s]);return[n,e.map(e=>t[e])]}function ee(t,e){return Qt(t,e.map(t=>1),e)}function ne(t,e,n){v(Zt(e,n),()=>t+" supports only inner-most axes for now. "+`Got axes ${e} and rank-${n} input.`)}function re(t,e){if(Zt(t,e))return null;const n=[];for(let r=0;r<e;++r)-1===t.indexOf(r)&&n.push(r);return t.forEach(t=>n.push(t)),n}function se(t){return t.map((t,e)=>[e,t]).sort((t,e)=>t[1]-e[1]).map(t=>t[0])}function ae(t,e){const n=[];for(let r=e-t;r<e;++r)n.push(r);return n}function ie(t){const e=Object.keys(t);if(1!==e.length)throw new Error("Please provide an object with a single key (operation name) mapping to a function. Got an object with "+e.length+" keys.");let n=e[0];const r=t[n];n.endsWith("_")&&(n=n.substring(0,n.length-1));const s=(...t)=>{Ft.startScope(n);try{const e=r(...t);return e instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),Ft.endScope(e),e}catch(t){throw Ft.endScope(null),t}};return Object.defineProperty(s,"name",{value:n,configurable:!0}),s}const oe=ie({complex_:function(t,e){const n=Ht(t,"real","complex"),r=Ht(e,"imag","complex");return C(n.shape,r.shape,`real and imag shapes, ${n.shape} and ${r.shape}, must match in call to tf.complex().`),Ft.runKernelFunc(t=>t.complex(n,r),{$real:n,$imag:r})}}),le=ie({real_:function(t){const e=Ht(t,"input","real");return Ft.runKernelFunc(t=>t.real(e),{$input:e})}}),ue=ie({imag_:function(t){const e=Ht(t,"input","imag");return Ft.runKernelFunc(t=>t.imag(e),{$input:e})}});function ce(t,e,n){return he(t,e,jt(t,n),n)}function he(t,e,n,r){if(null==r&&(r=q(t)),"complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!P(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=e){et(e);const t=k(e),r=k(n);v(t===r,()=>`Based on the provided shape, [${e}], the tensor should have ${t} values but has ${r}`);for(let t=0;t<n.length;++t){const r=n[t],s=t!==n.length-1||r!==k(e.slice(t));v(n[t]===e[t]||!s,()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${e}). `)}}return P(t)||Array.isArray(t)||(t=[t]),e=e||n,t="string"!==r?Y(t,r,a().getBool("DEBUG")):S(t,[],!0),Ft.makeTensor(t,e,r)}function de(t,e){if((P(t)&&"string"!==e||Array.isArray(t))&&"complex64"!==e)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===e&&P(t)&&!(t instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return he(t,[],[],e)}function pe(t,e){N(t);const n=jt(t,e);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return he(t,null,n,e)}function fe(t,e,n){if(N(t),null!=e&&2!==e.length)throw new Error("tensor2d() requires shape to have two numbers");const r=jt(t,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return he(t,e,r,n)}function me(t,e,n){if(N(t),null!=e&&3!==e.length)throw new Error("tensor3d() requires shape to have three numbers");const r=jt(t,n);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return he(t,e,r,n)}function ge(t,e,n){if(N(t),null!=e&&4!==e.length)throw new Error("tensor4d() requires shape to have four numbers");const r=jt(t,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return he(t,e,r,n)}function ye(t,e,n){if(N(t),null!=e&&5!==e.length)throw new Error("tensor5d() requires shape to have five numbers");const r=jt(t,n);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return he(t,e,r,n)}function be(t,e,n){if(N(t),null!=e&&6!==e.length)throw new Error("tensor6d() requires shape to have six numbers");const r=jt(t,n);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return he(t,e=e||r,r,n)}function xe(t,e=!0,n,r){return Ft.makeVariable(t,e,n,r)}function we(t,e="float32"){if("complex64"===e){const e=we(t,"float32"),n=ve(t,"float32");return oe(e,n)}const n=Z(k(t),e);return Ft.makeTensor(n,t,e)}function ve(t,e="float32"){if("complex64"===e){const e=ve(t,"float32"),n=ve(t,"float32");return oe(e,n)}const n=Q(k(t),e);return Ft.makeTensor(n,t,e)}function Ce(t,e,n){return Ft.runKernelFunc(r=>r.fill(t,e,n),{})}function Ne(t,e,n){if(n<=0)throw new Error("The number of values should be positive.");return Ft.runKernelFunc(r=>r.linspace(t,e,n),{})}function Se(t,e,n=1,r="float32"){if(0===n)throw new Error("Cannot have a step of zero");if(t===e||t<e&&n<0||e<t&&n>1)return ve([0],r);const s=Q(Math.abs(Math.ceil((e-t)/n)),r);e<t&&1===n&&(n=-1),s[0]=t;for(let t=1;t<s.length;t++)s[t]=s[t-1]+n;return pe(s,r)}const ke=ie({onesLike_:function(t){const e=Ht(t,"x","onesLike");if("complex64"===e.dtype){const t=ke(le(e)),n=Ie(ue(e));return oe(t,n)}return Ft.runKernelFunc(t=>t.onesLike(e),{x:e},(t,e)=>({x:()=>Ie(t)}),"OnesLike")}}),Ie=ie({zerosLike_:function(t){const e=Ht(t,"x","zerosLike");return Ft.runKernelFunc(t=>t.zerosLike(e),{x:e},(t,e)=>({x:()=>Ie(t)}),"ZerosLike")}});function Ee(t,e,n,r,s){return e.rank<n.rank&&(e=e.reshape(ee(e.shape,r))),t.rank<n.rank&&(t=t.reshape(ee(t.shape,r))),{x:()=>{const r=t.mul(n.equal(e).cast(t.dtype));return null==s?r:r.transpose(s)}}}const $e=ie({all_:function(t,e=null,n=!1){let r=Ht(t,"x","all","bool");const s=_(e,r.shape);let a=s;const i=re(a,r.rank);null!=i&&(r=r.transpose(i),a=ae(a.length,r.rank));const o=Ft.runKernelFunc(t=>t.all(r,a),{$x:r});if(n){const t=ee(o.shape,s);return o.reshape(t)}return o}}),Ae=ie({any_:function(t,e=null,n=!1){let r=Ht(t,"x","any","bool");const s=_(e,r.shape);let a=s;const i=re(a,r.rank);null!=i&&(r=r.transpose(i),a=ae(a.length,r.rank));const o=Ft.runKernelFunc(t=>t.any(r,a),{$x:r});if(n){const t=ee(o.shape,s);return o.reshape(t)}return o}}),Re=ie({argMax_:function(t,e=0){let n=Ht(t,"x","argMax");null==e&&(e=0);let r=_(e,n.shape);const s=re(r,n.rank);null!=s&&(n=n.transpose(s),r=ae(r.length,n.rank));const a={axis:r[0]},i=[n];return Ft.runKernelFunc((t,e)=>{const s=t.argMax(n,r[0]);return e([n]),s},{x:n},(t,e)=>{const[n]=e;return{x:()=>Ie(n)}},"ArgMax",a,i)}}),Te=ie({argMin_:function(t,e=0){let n=Ht(t,"x","argMin");null==e&&(e=0);let r=_(e,n.shape);const s=re(r,n.rank);return null!=s&&(n=n.transpose(s),r=ae(r.length,n.rank)),Ft.runKernelFunc((t,e)=>{const s=t.argMin(n,r[0]);return e([n]),s},{$x:n},(t,e)=>{const[n]=e;return{$x:()=>Ie(n)}})}}),De=ie({logSumExp_:function(t,e=null,n=!1){const r=Ht(t,"x","logSumExp"),s=_(e,r.shape),a=r.max(s,!0),i=r.sub(a).exp().sum(s).log(),o=a.reshape(i.shape).add(i);if(n){const t=ee(o.shape,s);return o.reshape(t)}return o}}),_e=ie({max_:function(t,e=null,n=!1){let r=Ht(t,"x","max");const s=r,a=_(e,r.shape);let i=a;const o=re(i,r.rank);null!=o&&(r=r.transpose(o),i=ae(i.length,r.rank));const l=[r];let u=Ft.runKernelFunc((t,e)=>{const n=t.max(r,i);return e([s,n]),n},{x:r},(t,e)=>Ee(t,e[1],e[0],a,o),"Max",{axes:i},l,[!0]);if(n){const t=ee(u.shape,a);u=u.reshape(t)}return u}}),Oe=ie({mean_:function(t,e=null,n=!1){const r=Ht(t,"x","mean"),s=_(e,r.shape),a=k(te(r.shape,s)[1]);return Yt(t=>{const r=de(a);return{value:(r.dtype===t.dtype?t:t.cast(r.dtype)).div(r).sum(e,n),gradFunc:e=>{const n=t.shape.slice();return s.forEach(t=>{n[t]=1}),e.reshape(n).mul(we(t.shape,"float32")).div(a)}}})(r)}}),Fe=ie({min_:function(t,e=null,n=!1){let r=Ht(t,"x","min");const s=r,a=_(e,r.shape);let i=a;const o=re(i,r.rank);null!=o&&(r=r.transpose(o),i=ae(i.length,r.rank));const l=[r];let u=Ft.runKernelFunc((t,e)=>{const n=t.min(r,i);return e([s,n]),n},{x:r},(t,e)=>Ee(t,e[1],e[0],a,o),"Min",{axes:i},l,[!0]);if(n){const t=ee(u.shape,a);u=u.reshape(t)}return u}}),Me=ie({moments_:function(t,e=null,n=!1){const r=_(e,(t=Ht(t,"x","moments")).shape),s=t.mean(r,n);let a=s.shape;n||(a=ee(s.shape,r));const i=t.toFloat().sub(s.reshape(a)).square();return{mean:s,variance:i.mean(r,n)}}}),ze=ie({sum_:function(t,e=null,n=!1){let r=Ht(t,"x","sum");"bool"===r.dtype&&(r=r.toInt());const s=_(e,r.shape);return Yt(t=>{const e=re(s,t.rank);let r=s,a=t;null!=e&&(a=t.transpose(e),r=ae(r.length,t.rank));const i=e=>{const n=t.shape.slice();return s.forEach(t=>{n[t]=1}),e.reshape(n).mul(we(t.shape,"float32"))},o={axes:r};let l=Ft.runKernelFunc(t=>t.sum(a,r),{x:a},t=>({x:()=>i(t)}),"Sum",o);if(n){const t=ee(l.shape,s);l=l.reshape(t)}return{value:l,gradFunc:i}})(r)}}),Le=ie({prod_:function(t,e=null,n=!1){let r=Ht(t,"x","prod");"bool"===r.dtype&&(r=r.toInt());const s=_(e,r.shape),a=re(s,r.rank);let i=s,o=r;null!=a&&(o=r.transpose(a),i=ae(i.length,r.rank));let l=Ft.runKernelFunc(t=>t.prod(o,i),{permutedX:o});if(n){const t=ee(l.shape,s);l=l.reshape(t)}return l}}),Be={kernelName:"BroadcastTo",gradFunc:(t,e,n)=>{const r=n,s=r.inputShape,a=r.shape,i=Array.from(a);for(let t=s.length-1;t>=0;t--)if(s[t]===a[t])i[t]=1;else if(1!==s[t])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${a}].`);const o=[];for(let t=0;t<i.length;t++)i[t]>1&&o.push(t);return{x:()=>ze(t,o,!0)}}};const Pe=ie({split_:function(t,e,n=0){const r=Ht(t,"x","split"),s=_(n,r.shape)[0];let a;"number"==typeof e?(v(r.shape[s]%e==0,()=>"Number of splits must evenly divide the axis."),a=new Array(e).fill(r.shape[s]/e)):(v(r.shape[s]===e.reduce((t,e)=>t+e),()=>"The sum of sizes must match the size of the axis dimension."),a=e);const i={x:r},o={numOrSizeSplits:e,axis:n};return Ft.runKernelFunc((t,e)=>{const s=_(n,r.shape)[0];return t.split(r,a,s)},i,null,"SplitV",o)}}),We={kernelName:"Concat",saveAllInputs:!0,gradFunc:(t,e,n)=>{const r=e.map(t=>t.shape),{axis:s}=n,a=_(s,e[0].shape)[0],i=r.map(t=>t[a]);return Pe(t,i,a).map(t=>()=>t)}};function Ve(t,e){const n=t[0].length;t.forEach((t,e)=>{v(t.length===n,()=>`Error in concat${n}D: rank of tensors[${e}] must be the same as the rank of the rest (${n})`)}),v(e>=0&&e<n,()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`);const r=t[0];t.forEach((t,s)=>{for(let a=0;a<n;a++)v(a===e||t[a]===r[a],()=>`Error in concat${n}D: Shape of tensors[${s}] (${t}) does not match the shape of the rest (${r}) along the non-concatenated axis ${s}.`)})}function Ue(t,e){const n=t[0].slice();for(let r=1;r<t.length;r++)n[e]+=t[r][e];return n}const Ge=ie({concat_:function(t,e=0){v(t.length>=1,()=>"Pass at least one tensor to concat");let n=Kt(t,"tensors","concat");"complex64"===n[0].dtype&&n.forEach(t=>{if("complex64"!==t.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${t.dtype}. `)});const r=_(e,n[0].shape)[0],s=Ue(n.map(t=>t.shape),r);if(0===k(s))return ce([],s);if(n=n.filter(t=>t.size>0),1===n.length)return n[0];Ve(n.map(t=>t.shape),r);const a=n,i={axis:e};return Ft.runKernelFunc((t,r)=>{const s=_(e,n[0].shape)[0],a=t.concat(n,s);return r(n),a},a,null,"Concat",i)}});function je(t,e="float32",n){return e=e||"float32",et(t),new ft(t,e,n)}function qe(t,e=!1){console.log(t.toString(e))}const He=ie({batchToSpaceND_:function(t,e,n){const r=Ht(t,"x","batchToSpaceND"),s=e.reduce((t,e)=>t*e);return v(r.rank>=1+e.length,()=>`input rank is ${r.rank} but should be > than blockShape.length ${e.length}`),v(n.length===e.length,()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${e.length}`),v(r.shape[0]%s==0,()=>`input tensor batch is ${r.shape[0]} but is not divisible by the product of the elements of blockShape ${e.join(" * ")} === ${s}`),Ft.runKernelFunc(t=>t.batchToSpaceND(r,e,n),{$x:r},t=>({$x:()=>t.spaceToBatchND(e,n)}))}}),Ke=ie({cast_:function(t,e){const n=Ht(t,"x","cast");if(!L(e))throw new Error("Failed to cast to unknown dtype "+e);if("string"===e&&"string"!==n.dtype||"string"!==e&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const r={dtype:e};return Ft.runKernelFunc(t=>t.cast(n,e),{x:n},t=>({x:()=>t.clone()}),"Cast",r)}}),Xe=ie({cumsum_:function(t,e=0,n=!1,r=!1){const s=Ht(t,"x","cumsum"),a=re([e|=0],s.rank);let i=s;null!=a&&(i=s.transpose(a));const o=ae(1,s.rank)[0];let l=Ft.runKernelFunc(t=>t.cumsum(i,o,n,r),{permutedX:i},t=>({permutedX:()=>t.cumsum(e,n,!r)}));return null!=a&&(l=l.transpose(a)),l}}),Ye=ie({depthToSpace_:function(t,e,n="NHWC"){const r=Ht(t,"x","depthToSpace"),s="NHWC"===n?r.shape[1]:r.shape[2],a="NHWC"===n?r.shape[2]:r.shape[3],i="NHWC"===n?r.shape[3]:r.shape[1];return v(s*e>=0,()=>`Negative dimension size caused by overflow when multiplying\n      ${s} and ${e}  for depthToSpace with input shape\n      ${r.shape}`),v(a*e>=0,()=>`Negative dimension size caused by overflow when multiplying\n      ${a} and ${e} for depthToSpace with input shape\n          ${r.shape}`),v(i%(e*e)==0,()=>`Dimension size must be evenly divisible by ${e*e} but is ${i} for depthToSpace with input shape ${r.shape}`),Ft.runKernelFunc(t=>t.depthToSpace(r,e,n),{$x:r})}}),Je=ie({expandDims_:function(t,e=0){const n=Ht(t,"x","expandDims",null);v(e<=n.rank,()=>"Axis must be <= rank of the tensor");const r=n.shape.slice();return e<0&&(v(-(n.rank+1)<=e,()=>`Axis must be in the interval [${-(n.rank+1)}, ${n.rank}]`),e=n.rank+e+1),r.splice(e,0,1),Ze(n,r)}}),Ze=ie({reshape_:function(t,e){const n=Ht(t,"x","reshape",null);e=D(e,n.size),v(n.size===k(e),()=>"new shape and old shape must have the same number of elements.");const r={shape:e};return Ft.runKernelFunc(t=>t.reshape(n,e),{x:n},t=>({x:()=>t.reshape(n.shape)}),"Reshape",r)}}),Qe=ie({spaceToBatchND_:function(t,e,n){const r=Ht(t,"x","spaceToBatchND");return v(r.rank>=1+e.length,()=>`input rank ${r.rank} should be > than [blockShape] ${e.length}`),v(n.length===e.length,()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${e.length}`),v(r.shape.reduce((t,r,s)=>s>0&&s<=e.length?t&&(r+n[s-1][0]+n[s-1][1])%e[s-1]==0:t,!0),()=>`input spatial dimensions ${r.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${e.toString()}`),Ft.runKernelFunc(t=>t.spaceToBatchND(r,e,n),{$x:r},t=>({$x:()=>t.batchToSpaceND(e,n)}))}}),tn=ie({squeeze_:function(t,e){const n=Ht(t,"x","squeeze");return Ze(n,O(n.shape,e).newShape)}}),en=ie({stack_:function(t,e=0){const n=Kt(t,"tensors","stack");if(v(n.length>=1,()=>"Pass at least one tensor to tf.stack"),1===n.length)return n[0].expandDims(e);const r=n[0].rank,s=n[0].shape,a=n[0].dtype;v(e<=r,()=>"Axis must be <= rank of the tensor"),n.forEach(t=>{C(s,t.shape,"All tensors passed to stack must have matching shapes")}),n.forEach(t=>{v(a===t.dtype,()=>"All tensors passed to stack must have matching dtypes")});const i=n.map(t=>t.expandDims(e));return Ge(i,e)}}),nn=ie({unstack_:function(t,e=0){e=e||0;const n=Ht(t,"x","unstack");v(e>=-n.shape.length&&e<n.shape.length,()=>`Axis = ${e} is not in [-${n.shape.length}, ${n.shape.length})`),e<0&&(e+=n.shape.length);const r={axis:e};return Ft.runKernelFunc(t=>t.unstack(n,e),{x:n},t=>({x:()=>en(t,e)}),"Unpack",r)}}),rn=async function(t,e){const n=Ht(t,"x","setdiff1d"),r=Ht(e,"y","setdiff1d");v(n.dtype===r.dtype,()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${r.dtype}).`),v(1===n.rank,()=>`x should be 1D tensor, but got x (${n.shape}).`),v(1===r.rank,()=>`y should be 1D tensor, but got y (${r.shape}).`);const s=await n.data(),a=await r.data(),i=new Set(a);let o=0;for(let t=0;t<s.length;t++)i.has(s[t])||o++;const l=new ft([o],n.dtype),u=new ft([o],"int32");for(let t=0,e=0;t<s.length;t++)i.has(s[t])||(l.values[e]=s[t],u.values[e]=t,e++);return[l.toTensor(),u.toTensor()]};const sn=ie({add_:function(t,e){let n=Ht(t,"a","add"),r=Ht(e,"b","add");[n,r]=$t(n,r);const s={a:n,b:r};return Ft.runKernelFunc((t,e)=>{const s=t.add(n,r);return e([n,r]),s},s,null,"Add")}});const an=ie({abs_:function(t){const e=Ht(t,"x","abs");return"complex64"===e.dtype?Ft.runKernelFunc(t=>t.complexAbs(e),{$x:e}):Ft.runKernelFunc((t,n)=>{const r=t.abs(e);return n([e]),r},{x:e},(t,e)=>{const[n]=e;return{x:()=>t.mul(n.toFloat().step(-1))}},"Abs")}}),on=ie({acos_:function(t){const e=Ht(t,"x","acos");return Ft.runKernelFunc((t,n)=>{const r=t.acos(e);return n([e]),r},{$x:e},(t,e)=>{const[n]=e;return{$x:()=>t.divStrict(de(1).sub(n.toFloat().square()).sqrt()).neg()}})}}),ln=ie({acosh_:function(t){const e=Ht(t,"x","acosh");return Ft.runKernelFunc((t,n)=>{const r=t.acosh(e);return n([e]),r},{$x:e},(t,e)=>{const[n]=e;return{$x:()=>t.divStrict(n.toFloat().square().sub(1).sqrt())}})}}),un=ie({asin_:function(t){const e=Ht(t,"x","asin");return Ft.runKernelFunc((t,n)=>{const r=t.asin(e);return n([e]),r},{$x:e},(t,e)=>{const[n]=e;return{$x:()=>t.divStrict(de(1).sub(n.toFloat().square()).sqrt())}})}}),cn=ie({asinh_:function(t){const e=Ht(t,"x","asinh");return Ft.runKernelFunc((t,n)=>{const r=t.asinh(e);return n([e]),r},{$x:e},(t,e)=>{const[n]=e;return{$x:()=>t.divStrict(de(1).add(n.toFloat().square()).sqrt())}})}}),hn=ie({atan_:function(t){const e=Ht(t,"x","atan");return Ft.runKernelFunc((t,n)=>{const r=t.atan(e);return n([e]),r},{$x:e},(t,e)=>{const[n]=e;return{$x:()=>t.div(n.toFloat().square().add(1))}})}}),dn=ie({atanh_:function(t){const e=Ht(t,"x","atanh");return Ft.runKernelFunc((t,n)=>{const r=t.atanh(e);return n([e]),r},{$x:e},(t,e)=>{const[n]=e;return{$x:()=>t.div(de(1).sub(n.toFloat().square()))}})}}),pn=ie({ceil_:function(t){const e=Ht(t,"x","ceil");return Ft.runKernelFunc(t=>t.ceil(e),{$x:e},t=>({$x:()=>Ie(t)}))}}),fn=ie({clipByValue_:function(t,e,n){const r=Ht(t,"x","clipByValue");v(e<=n,()=>`Error in clip: min (${e}) must be less than or equal to max (${n}).`);const s=[r],a={min:e,max:n};return Ft.runKernelFunc((t,s)=>{const a=t.clip(r,e,n);return s([r]),a},{x:r},(t,r)=>{const[s]=r;return{x:()=>t.where(s.greaterEqual(e).logicalAnd(s.lessEqual(n)),Ie(t))}},"ClipByValue",a,s)}}),mn=ie({cos_:function(t){const e=Ht(t,"x","cos"),n=[e];return Ft.runKernelFunc((t,n)=>{const r=t.cos(e);return n([e]),r},{x:e},(t,e)=>{const[n]=e;return{x:()=>n.toFloat().sin().neg().mul(t)}},"Cos",{},n)}}),gn=ie({cosh_:function(t){const e=Ht(t,"x","cosh");return Ft.runKernelFunc((t,n)=>{const r=t.cosh(e);return n([e]),r},{$x:e},(t,e)=>{const[n]=e;return{$x:()=>n.toFloat().sinh().mulStrict(t)}})}}),yn=ie({erf_:function(t){let e=Ht(t,"x","erf");return v("int32"===e.dtype||"float32"===e.dtype,()=>"Input dtype must be `int32` or `float32`."),"int32"===e.dtype&&(e=e.toFloat()),Ft.runKernelFunc((t,n)=>{const r=t.erf(e);return n([e]),r},{$x:e},(t,e)=>{const[n]=e;return{$x:()=>t.mul(n.square().neg().exp().mul(2/Math.sqrt(Math.PI)))}})}}),bn=ie({exp_:function(t){const e=Ht(t,"x","exp");return Ft.runKernelFunc((t,n)=>{const r=t.exp(e);return n([r]),r},{x:e},(t,e)=>({x:()=>t.mulStrict(e[0])}),"Exp",{},[],[!0])}}),xn=ie({expm1_:function(t){const e=Ht(t,"x","expm1");return Ft.runKernelFunc((t,n)=>{const r=t.expm1(e);return n([e]),r},{$x:e},(t,e)=>{const[n]=e;return{$x:()=>t.mul(n.exp())}})}}),wn=ie({floor_:function(t){const e=Ht(t,"x","floor");return Ft.runKernelFunc(t=>t.floor(e),{$x:e},t=>({$x:()=>Ie(t)}))}}),vn=ie({log_:function(t){const e=Ht(t,"x","log"),n=[e];return Ft.runKernelFunc((t,n)=>{const r=t.log(e);return n([e]),r},{x:e},(t,e)=>{const[n]=e;return{x:()=>t.div(n.toFloat())}},"Log",{},n)}}),Cn=ie({log1p_:function(t){const e=Ht(t,"x","log1p");return Ft.runKernelFunc((t,n)=>{const r=t.log1p(e);return n([e]),r},{$x:e},(t,e)=>{const[n]=e;return{$x:()=>t.div(n.add(1))}})}}),Nn=ie({logSigmoid_:function(t){const e=Ht(t,"x","logSigmoid");return Ft.runKernelFunc((t,n)=>{const r=t.softplus(e.neg()).neg();return n([e]),r},{$x:e},(t,e)=>{const[n]=e;return{$x:()=>t.mul(n.neg().sigmoid())}})}}),Sn=ie({neg_:function(t){const e=Ht(t,"x","neg"),n=[e];return Ft.runKernelFunc(t=>t.neg(e),{x:e},t=>({x:()=>t.neg()}),"Neg",{},n)}}),kn=ie({reciprocal_:function(t){const e=Ht(t,"x","reciprocal");return Ft.runKernelFunc((t,n)=>{const r=t.reciprocal(e);return n([e]),r},{$x:e},(t,e)=>{const[n]=e;return{$x:()=>t.div(n.square().neg())}})}}),In=ie({round_:function(t){const e=Ht(t,"x","round");return Ft.runKernelFunc(t=>t.round(e),{$x:e},t=>({$x:()=>Ie(t)}))}}),En=ie({rsqrt_:function(t){const e=Ht(t,"x","rsqrt"),n=[e];return Ft.runKernelFunc((t,n)=>{const r=t.rsqrt(e);return n([e]),r},{x:e},(t,e)=>{const[n]=e;return{x:()=>t.div(n.pow(1.5).mul(2)).neg()}},"Rsqrt",{},n)}}),$n=ie({sigmoid_:function(t){const e=Ht(t,"x","sigmoid");return Ft.runKernelFunc((t,n)=>{const r=t.sigmoid(e);return n([r]),r},{x:e},(t,e)=>{const[n]=e;return{x:()=>t.mul(n.mul(de(1).sub(n)))}},"Sigmoid")}}),An=ie({sign_:function(t){const e=Ht(t,"x","sign");return Ft.runKernelFunc(t=>t.sign(e),{$x:e},t=>({$x:()=>Ie(t)}))}}),Rn=ie({isNaN_:function(t){const e=Ht(t,"x","isNaN");return Ft.runKernelFunc(t=>t.isNaN(e),{$x:e},t=>({$x:()=>Ie(t)}))}}),Tn=ie({isInf_:function(t){const e=Ht(t,"x","isInf");return Ft.runKernelFunc(t=>t.isInf(e),{$x:e},t=>({$x:()=>Ie(t)}))}}),Dn=ie({isFinite_:function(t){const e=Ht(t,"x","isFinite");return Ft.runKernelFunc(t=>t.isFinite(e),{$x:e},t=>({$x:()=>Ie(t)}))}}),_n=ie({sin_:function(t){const e=Ht(t,"x","sin"),n=[e];return Ft.runKernelFunc((t,n)=>{const r=t.sin(e);return n([e]),r},{x:e},(t,e)=>{const[n]=e;return{x:()=>n.toFloat().cos().mul(t)}},"Sin",{},n)}}),On=ie({sinh_:function(t){const e=Ht(t,"x","sinh");return Ft.runKernelFunc((t,n)=>{const r=t.sinh(e);return n([e]),r},{$x:e},(t,e)=>{const[n]=e;return{$x:()=>n.toFloat().cosh().mulStrict(t)}})}}),Fn=ie({softplus_:function(t){const e=Ht(t,"x","softplus");return Ft.runKernelFunc((t,n)=>{const r=t.softplus(e);return n([e]),r},{$x:e},(t,e)=>{const[n]=e;return{$x:()=>t.mul(n.sigmoid())}})}}),Mn=ie({sqrt_:function(t){const e=Ht(t,"x","sqrt");return Ft.runKernelFunc((t,n)=>{const r=t.sqrt(e);return n([e]),r},{$x:e},(t,e)=>{const[n]=e;return{$x:()=>t.div(n.toFloat().sqrt().mul(2))}})}}),zn=ie({step_:function(t,e=0){const n=Ht(t,"x","step");return Ft.runKernelFunc(t=>t.step(n,e),{$x:n},t=>({$x:()=>Ie(t)}))}}),Ln=ie({tan_:function(t){const e=Ht(t,"x","tan");return Ft.runKernelFunc((t,n)=>{const r=t.tan(e);return n([e]),r},{$x:e},(t,e)=>{const[n]=e;return{$x:()=>t.div(n.cos().square())}})}}),Bn=ie({tanh_:function(t){const e=Ht(t,"x","tanh");return Ft.runKernelFunc((t,n)=>{const r=t.tanh(e);return n([r]),r},{x:e},(t,e)=>{const[n]=e;return{x:()=>de(1).sub(n.square()).mulStrict(t)}},"Tanh",{},null,[!0])}});const Pn=ie({addStrict_:function(t,e){const n=Ht(t,"a","addStrict"),r=Ht(e,"b","addStrict");return C(n.shape,r.shape,"Error in addStrict: "),n.add(r)}}),Wn=ie({atan2_:function(t,e){let n=Ht(t,"a","atan2"),r=Ht(e,"b","atan2");[n,r]=$t(n,r);const s=Vt(n.shape,r.shape);return Ft.runKernelFunc((t,e)=>{const s=t.atan2(n,r);return e([n,r]),s},{$a:n,$b:r},(t,e)=>{const[n,r]=e;return{$a:()=>{const e=sn(n.square(),r.square());let a=t.mul(r.div(e));const i=Wt(n.shape,s);return i.length>0&&(a=a.sum(i)),a.reshape(n.shape)},$b:()=>{const e=sn(n.square(),r.square());let a=Sn(t.mul(n.div(e)));const i=Wt(r.shape,s);return i.length>0&&(a=a.sum(i)),a.reshape(r.shape)}}})}}),Vn=ie({divStrict_:function(t,e){const n=Ht(t,"a","div"),r=Ht(e,"b","div");return C(n.shape,r.shape,"Error in divideStrict: "),n.div(r)}}),Un=ie({floorDiv_:function(t,e){let n=Ht(t,"a","floorDiv"),r=Ht(e,"b","floorDiv");[n,r]=$t(n,r);const s=Vt(n.shape,r.shape);return Ft.runKernelFunc((t,e)=>{const s=t.floorDiv(n,r);return e([n,r]),s},{a:n,b:r},(t,e)=>{const[n,r]=e;return{a:()=>{const e=t.div(r.toFloat()),a=Wt(n.shape,s);return a.length>0?e.sum(a).reshape(n.shape):e},b:()=>{let e=t.mul(n.toFloat());const a=Wt(r.shape,s);a.length>0&&(e=e.sum(a).reshape(r.shape));const i=r.square();return e.div(i.toFloat()).neg()}}},"FloorDiv")}}),Gn=ie({maximum_:function(t,e){let n=Ht(t,"a","maximum"),r=Ht(e,"b","maximum");return[n,r]=$t(n,r),"bool"===n.dtype&&(n=n.toInt(),r=r.toInt()),Vt(n.shape,r.shape),Ft.runKernelFunc((t,e)=>{const s=t.maximum(n,r);return e([n,r]),s},{a:n,b:r},(t,e)=>{const[n,r]=e;return{a:()=>t.mul(n.greaterEqual(r).toFloat()),b:()=>t.mul(n.less(r).toFloat())}},"Maximum")}}),jn=ie({maximumStrict_:function(t,e){const n=Ht(t,"a","maximumStrict"),r=Ht(e,"b","maximumStrict");return C(n.shape,r.shape,"Error in maximumStrict: "),n.maximum(r)}}),qn=ie({minimum_:function(t,e){let n=Ht(t,"a","minimum"),r=Ht(e,"b","minimum");return[n,r]=$t(n,r),"bool"===n.dtype&&(n=n.toInt(),r=r.toInt()),Vt(n.shape,r.shape),Ft.runKernelFunc((t,e)=>{const s=t.minimum(n,r);return e([n,r]),s},{a:n,b:r},(t,e)=>{const[n,r]=e;return{a:()=>t.mul(n.lessEqual(r).toFloat()),b:()=>t.mul(n.greater(r).toFloat())}},"Minimum")}}),Hn=ie({minimumStrict_:function(t,e){const n=Ht(t,"a","minimumStrict"),r=Ht(e,"b","minimumStrict");return C(n.shape,r.shape,"Error in minimumStrict: "),n.minimum(r)}}),Kn=ie({mod_:function(t,e){let n=Ht(t,"a","mod"),r=Ht(e,"b","mod");[n,r]=$t(n,r);const s=Vt(n.shape,r.shape);return Ft.runKernelFunc((t,e)=>{const s=t.mod(n,r);return e([n,r]),s},{$a:n,$b:r},(t,e)=>{const[n,r]=e;return{$a:()=>{const e=Wt(n.shape,s);return e.length>0?t.sum(e).reshape(n.shape):t},$b:()=>{const e=t.mul(n.div(r).floor().neg()),a=Wt(r.shape,s);return a.length>0?e.sum(a).reshape(r.shape):e}}})}}),Xn=ie({modStrict_:function(t,e){const n=Ht(t,"a","modStrict"),r=Ht(e,"b","modStrict");return C(n.shape,r.shape,"Error in modStrict: "),n.mod(r)}}),Yn=ie({mul_:function(t,e){let n=Ht(t,"a","mul"),r=Ht(e,"b","mul");[n,r]=$t(n,r);const s=Vt(n.shape,r.shape);return Ft.runKernelFunc((t,e)=>{const s=t.multiply(n,r);return e([n,r]),s},{a:n,b:r},(t,e)=>{const[n,r]=e;return{a:()=>{const e=t.mul(r.toFloat()),a=Wt(n.shape,s);return a.length>0?e.sum(a).reshape(n.shape):e},b:()=>{const e=t.mul(n.toFloat()),a=Wt(r.shape,s);return a.length>0?e.sum(a).reshape(r.shape):e}}},"Mul")}}),Jn=ie({mulStrict_:function(t,e){const n=Ht(t,"a","mul"),r=Ht(e,"b","mul");return C(n.shape,r.shape,"Error in multiplyStrict: "),n.mul(r)}}),Zn=ie({pow_:function(t,e){let n=Ht(t,"base","pow"),r=Ht(e,"exp","pow");[n,r]=$t(n,r);const s=Vt(n.shape,r.shape),a=[n,r];return Ft.runKernelFunc((t,e)=>{const s=t.pow(n,r);return e([n,r,s]),s},{a:n,b:r},(t,e)=>{const[n,r,a]=e;return{a:()=>{const e=r.toFloat();let a=t.mul(e.mul(n.pow(e.sub(de(1)))));const i=Wt(n.shape,s);return i.length>0&&(a=a.sum(i)),a.reshape(n.shape)},b:()=>{const e=n.greater(0),i=n.log().where(e,Ie(n));let o=t.mul(a.mul(i));const l=Wt(r.shape,s);return l.length>0&&(o=o.sum(l)),o.reshape(r.shape)}}},"Pow",{},a,[!0])}}),Qn=ie({powStrict_:function(t,e){return C(t.shape,e.shape,"Error in powStrict: "),t.pow(e)}}),tr=ie({squaredDifferenceStrict_:function(t,e){const n=Ht(t,"a","squaredDifferenceStrict"),r=Ht(e,"b","squaredDifferenceStrict");return C(n.shape,r.shape,"Error in squaredDifferenceStrict: "),n.squaredDifference(r)}}),er=ie({subStrict_:function(t,e){const n=Ht(t,"a","subStrict"),r=Ht(e,"b","subStrict");return C(n.shape,r.shape,"Error in subStrict: "),n.sub(r)}});const nr=ie({div_:function(t,e){let n=Ht(t,"a","div"),r=Ht(e,"b","div");if([n,r]=$t(n,r),"int32"===n.dtype&&"int32"===r.dtype)return Un(n,r);const s={a:n,b:r};return Ft.runKernelFunc((t,e)=>{const s=t.realDivide(n,r);return e([n,r]),s},s,null,"Div",{})}});const rr=ie({square_:function(t){const e=Ht(t,"x","square"),n=[e];return Ft.runKernelFunc((t,n)=>(n([e]),t.square(e)),{x:e},null,"Square",{},n,[])}}),sr={kernelName:"Div",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=Vt(n.shape,r.shape);return{a:()=>{const e=nr(t,r.toFloat()),a=Wt(n.shape,s);return a.length>0?ze(e,a).reshape(n.shape):e},b:()=>{let e=Yn(t,n.toFloat());const a=Wt(r.shape,s);a.length>0&&(e=Ze(ze(e,a),r.shape));const i=rr(r);return Sn(nr(e,i.toFloat()))}}}};const ar=ie({sub_:function(t,e){let n=Ht(t,"a","sub"),r=Ht(e,"b","sub");[n,r]=$t(n,r);const s={a:n,b:r};return Ft.runKernelFunc((t,e)=>{const s=t.subtract(n,r);return e([n,r]),s},s,null,"Sub")}});const ir=ie({tile_:function(t,e){const n=Ht(t,"x","tile",null);v(n.rank===e.length,()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${e}.`);const r=[n],s={x:n},a={reps:e};return Ft.runKernelFunc((t,r)=>{const s=t.tile(n,e);return r([n]),s},s,null,"Tile",a,r)}}),or={kernelName:"FusedBatchNorm",inputsToSave:["x","mean","variance","scale"],gradFunc:(t,e,n)=>{const{varianceEpsilon:r}=n,[s,a,i,o]=e,l=null==o?de(1):o,u=Wt(a.shape,s.shape),c=[];if(1===a.rank){for(let t=0;t<s.shape.length-1;++t)c.push(s.shape[t]);c.push(1)}const h=ar(s,a),d=Yn(t,l),p=En(sn(i,de(r))),f=Yn(Yn(Yn(p,p),p),de(-.5));return{x:()=>1===a.rank?Ze(Yn(Yn(t,ir(p.as4D(1,1,1,a.shape[0]),c)),l),s.shape):Ze(Yn(Yn(t,p),l),s.shape),mean:()=>{let t=Yn(Yn(p,de(-1)),d);return 1===a.rank&&(t=ze(t,u)),Ze(t,a.shape)},variance:()=>{let t=Yn(Yn(f,h),d);return 1===a.rank&&(t=ze(t,u)),Ze(t,a.shape)},scale:()=>{const e=Yn(h,p);let n=Yn(t,e);return 1===a.rank&&(n=ze(n,u)),Ze(n,a.shape)},offset:()=>{let e=t;return 1===a.rank&&(e=ze(e,u)),Ze(e,a.shape)}}}},lr={kernelName:"Identity",gradFunc:t=>({x:()=>t.toFloat()})},ur={kernelName:"OneHot",inputsToSave:["indices"],gradFunc:(t,e)=>{const n=e[0];return{indices:()=>ve(n.shape,"float32")}}},cr={kernelName:"PadV2",inputsToSave:["x"],gradFunc:(t,e,n)=>{const r=e[0],{paddings:s}=n,a=s.map(t=>t[0]);return{x:()=>t.slice(a,r.shape)}}},hr={kernelName:"SplitV",gradFunc:(t,e,n)=>{const{axis:r}=n;return{x:()=>Ge(t,r)}}},dr={kernelName:"Square",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Yn(t,Yn(n.toFloat(),2))}}},pr={kernelName:"SquaredDifference",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=de(2);return{a:()=>Yn(t,Yn(s,ar(n,r))),b:()=>Yn(t,Yn(s,ar(r,n)))}}},fr={kernelName:"Sub",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=Vt(n.shape,r.shape);return{a:()=>{let e=t;const r=Wt(n.shape,s);return r.length>0&&(e=ze(e,r)),Ze(e,n.shape)},b:()=>{let e=t;const n=Wt(r.shape,s);return n.length>0&&(e=ze(e,n)),Ze(Sn(e),r.shape)}}}};const mr=ie({pad_:function(t,e,n=0){const r=Ht(t,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const s={paddings:e,constantValue:n},a={x:r};return Ft.runKernelFunc((t,s)=>(s([r]),t.pad(r,e,n)),a,null,"PadV2",s)}});function gr(t,e,n){v(t.rank===e.length,()=>`Error in slice${t.rank}D: Length of begin ${e} must match the rank of the array (${t.rank}).`),v(t.rank===n.length,()=>`Error in slice${t.rank}D: Length of size ${n} must match the rank of the array (${t.rank}).`);for(let r=0;r<t.rank;++r)v(e[r]+n[r]<=t.shape[r],()=>`Error in slice${t.rank}D: begin[${r}] + size[${r}] (${e[r]+n[r]}) would overflow input.shape[${r}] (${t.shape[r]})`)}function yr(t){const e=[];let n=0;for(;t>0;)1&t&&e.push(n),t/=2,n++;return e}function br(t,e,n){const r=[];for(let s=0;s<t.length;s++)r[s]=Math.ceil((e[s]-t[s])/n[s]);return r}function xr(t,e,n,r,s){let a=e[s];const i=n[s]||1;(t&1<<s||null==a)&&(a=i>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const o=r[s];return a<0&&(a+=o),a=b(0,a,o-1),a}function wr(t,e,n,r,s){let a=e[s];const i=n[s]||1;(t&1<<s||null==a)&&(a=i>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const o=r[s];return a<0&&(a+=o),a=i>0?b(0,a,o):b(-1,a,o-1),a}function vr(t,e,n){let r=n.length;for(let t=0;t<n.length;t++)if(n[t]>1){r=t;break}for(let s=r+1;s<n.length;s++)if(e[s]>0||n[s]!==t[s])return!1;return!0}function Cr(t,e){let n=t.length>0?t[t.length-1]:1;for(let r=0;r<t.length-1;r++)n+=t[r]*e[r];return n}var Nr=Object.freeze({__proto__:null,assertParamsValid:gr,maskToAxes:yr,computeOutShape:br,startForAxis:xr,stopForAxis:wr,isSliceContinous:vr,computeFlatOffset:Cr});const Sr=ie({slice_:function(t,e,n){const r=Ht(t,"x","slice");if(0===r.rank)throw new Error("Slicing scalar is not possible");let s,a;s="number"==typeof e?[e,...new Array(r.rank-1).fill(0)]:e.length<r.rank?e.concat(new Array(r.rank-e.length).fill(0)):e.slice(),s.forEach(t=>{v(-1!==t,()=>"slice() does not support negative begin indexing.")}),a=null==n?new Array(r.rank).fill(-1):"number"==typeof n?[n,...new Array(r.rank-1).fill(-1)]:n.length<r.rank?n.concat(new Array(r.rank-n.length).fill(-1)):n,a=a.map((t,e)=>t>=0?t:(v(-1===t,()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${e}.`),r.shape[e]-s[e])),gr(r,s,a);const i=r.shape,o={begin:s,size:a};return Ft.runKernelFunc(t=>t.slice(r,s,a),{x:r},t=>{const e=[];for(let n=0;n<t.rank;n++)e.push([s[n],i[n]-s[n]-a[n]]);return{x:()=>mr(t,e)}},"Slice",o)}}),kr=ie({slice1d_:function(t,e,n){const r=Ht(t,"x","slice1d");return v(1===r.rank,()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`),Sr(r,[e],[n])}}),Ir=ie({slice2d_:function(t,e,n){const r=Ht(t,"x","slice2d");return v(2===r.rank,()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`),Sr(r,e,n)}}),Er=ie({slice3d_:function(t,e,n){const r=Ht(t,"x","slice3d");return v(3===r.rank,()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`),Sr(r,e,n)}}),$r=ie({slice4d_:function(t,e,n){const r=Ht(t,"x","slice4d");return v(4===r.rank,()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`),Sr(r,e,n)}}),Ar={kernelName:"Tile",inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{reps:s}=n;return{x:()=>{let e=Ie(r);if(1===r.rank)for(let n=0;n<s[0];++n)e=sn(e,Sr(t,[n*r.shape[0]],[r.shape[0]]));else if(2===r.rank)for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)e=sn(e,Sr(t,[n*r.shape[0],a*r.shape[1]],[r.shape[0],r.shape[1]]));else if(3===r.rank)for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)for(let i=0;i<s[2];++i)e=sn(e,Sr(t,[n*r.shape[0],a*r.shape[1],i*r.shape[2]],[r.shape[0],r.shape[1],r.shape[2]]));else{if(4!==r.rank)throw new Error("Gradient for tile operation is not implemented for rank-"+r.rank+" tensors yet.");for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)for(let i=0;i<s[2];++i)for(let o=0;o<s[3];++o)e=sn(e,Sr(t,[n*r.shape[0],a*r.shape[1],i*r.shape[2],o*r.shape[3]],[r.shape[0],r.shape[1],r.shape[2],r.shape[3]]))}return e}}}};const Rr=ie({transpose_:function(t,e){const n=Ht(t,"x","transpose");if(null==e&&(e=n.shape.map((t,e)=>e).reverse()),v(n.rank===e.length,()=>`Error in transpose: rank of input ${n.rank} must match length of perm ${e}.`),e.forEach(t=>{v(t>=0&&t<n.rank,()=>"All entries in 'perm' must be between 0 and "+(n.rank-1)+" but got "+e)}),n.rank<=1)return n.clone();const r={perm:e};return Ft.runKernelFunc(t=>t.transpose(n,e),{x:n},null,"Transpose",r)}}),Tr=[Ut,Gt,Be,We,sr,or,lr,ur,cr,hr,dr,pr,Ar,{kernelName:"Transpose",gradFunc:(t,e,n)=>{const r=n,{perm:s}=r,a=se(s);return{x:()=>Rr(t,a)}}},fr];for(const t of Tr)m(t);class Dr{fetch(t,e){return fetch(t,e)}now(){return performance.now()}encode(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error("Browser's encoder only supports utf-8, but got "+e);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(t)}decode(t,e){return new TextDecoder(e).decode(t)}}a().get("IS_BROWSER")&&a().setPlatform("browser",new Dr);"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self&&self;function _r(t,e){return t(e={exports:{}},e.exports),e.exports}var Or=function(t){return t instanceof Buffer},Fr=_r((function(t){"function"==typeof Object.create?t.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:t.exports=function(t,e){t.super_=e;var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t}})),Mr=_r((function(t){try{var e=zr;if("function"!=typeof e.inherits)throw"";t.exports=e.inherits}catch(e){t.exports=Fr}})),zr=_r((function(t,e){var n=Object.getOwnPropertyDescriptors||function(t){for(var e=Object.keys(t),n={},r=0;r<e.length;r++)n[e[r]]=Object.getOwnPropertyDescriptor(t,e[r]);return n},r=/%[sdj%]/g;e.format=function(t){if(!g(t)){for(var e=[],n=0;n<arguments.length;n++)e.push(i(arguments[n]));return e.join(" ")}n=1;for(var s=arguments,a=s.length,o=String(t).replace(r,(function(t){if("%%"===t)return"%";if(n>=a)return t;switch(t){case"%s":return String(s[n++]);case"%d":return Number(s[n++]);case"%j":try{return JSON.stringify(s[n++])}catch(t){return"[Circular]"}default:return t}})),l=s[n];n<a;l=s[++n])f(l)||!x(l)?o+=" "+l:o+=" "+i(l);return o},e.deprecate=function(t,n){if("undefined"!=typeof process&&!0===process.noDeprecation)return t;if("undefined"==typeof process)return function(){return e.deprecate(t,n).apply(this,arguments)};var r=!1;return function(){if(!r){if(process.throwDeprecation)throw new Error(n);process.traceDeprecation?console.trace(n):console.error(n),r=!0}return t.apply(this,arguments)}};var s,a={};function i(t,n){var r={seen:[],stylize:l};return arguments.length>=3&&(r.depth=arguments[2]),arguments.length>=4&&(r.colors=arguments[3]),p(n)?r.showHidden=n:n&&e._extend(r,n),y(r.showHidden)&&(r.showHidden=!1),y(r.depth)&&(r.depth=2),y(r.colors)&&(r.colors=!1),y(r.customInspect)&&(r.customInspect=!0),r.colors&&(r.stylize=o),u(r,t,r.depth)}function o(t,e){var n=i.styles[e];return n?"["+i.colors[n][0]+"m"+t+"["+i.colors[n][1]+"m":t}function l(t,e){return t}function u(t,n,r){if(t.customInspect&&n&&C(n.inspect)&&n.inspect!==e.inspect&&(!n.constructor||n.constructor.prototype!==n)){var s=n.inspect(r,t);return g(s)||(s=u(t,s,r)),s}var a=function(t,e){if(y(e))return t.stylize("undefined","undefined");if(g(e)){var n="'"+JSON.stringify(e).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return t.stylize(n,"string")}if(m(e))return t.stylize(""+e,"number");if(p(e))return t.stylize(""+e,"boolean");if(f(e))return t.stylize("null","null")}(t,n);if(a)return a;var i=Object.keys(n),o=function(t){var e={};return t.forEach((function(t,n){e[t]=!0})),e}(i);if(t.showHidden&&(i=Object.getOwnPropertyNames(n)),v(n)&&(i.indexOf("message")>=0||i.indexOf("description")>=0))return c(n);if(0===i.length){if(C(n)){var l=n.name?": "+n.name:"";return t.stylize("[Function"+l+"]","special")}if(b(n))return t.stylize(RegExp.prototype.toString.call(n),"regexp");if(w(n))return t.stylize(Date.prototype.toString.call(n),"date");if(v(n))return c(n)}var x,N="",S=!1,k=["{","}"];(d(n)&&(S=!0,k=["[","]"]),C(n))&&(N=" [Function"+(n.name?": "+n.name:"")+"]");return b(n)&&(N=" "+RegExp.prototype.toString.call(n)),w(n)&&(N=" "+Date.prototype.toUTCString.call(n)),v(n)&&(N=" "+c(n)),0!==i.length||S&&0!=n.length?r<0?b(n)?t.stylize(RegExp.prototype.toString.call(n),"regexp"):t.stylize("[Object]","special"):(t.seen.push(n),x=S?function(t,e,n,r,s){for(var a=[],i=0,o=e.length;i<o;++i)E(e,String(i))?a.push(h(t,e,n,r,String(i),!0)):a.push("");return s.forEach((function(s){s.match(/^\d+$/)||a.push(h(t,e,n,r,s,!0))})),a}(t,n,r,o,i):i.map((function(e){return h(t,n,r,o,e,S)})),t.seen.pop(),function(t,e,n){if(t.reduce((function(t,e){return e.indexOf("\n"),t+e.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60)return n[0]+(""===e?"":e+"\n ")+" "+t.join(",\n  ")+" "+n[1];return n[0]+e+" "+t.join(", ")+" "+n[1]}(x,N,k)):k[0]+N+k[1]}function c(t){return"["+Error.prototype.toString.call(t)+"]"}function h(t,e,n,r,s,a){var i,o,l;if((l=Object.getOwnPropertyDescriptor(e,s)||{value:e[s]}).get?o=l.set?t.stylize("[Getter/Setter]","special"):t.stylize("[Getter]","special"):l.set&&(o=t.stylize("[Setter]","special")),E(r,s)||(i="["+s+"]"),o||(t.seen.indexOf(l.value)<0?(o=f(n)?u(t,l.value,null):u(t,l.value,n-1)).indexOf("\n")>-1&&(o=a?o.split("\n").map((function(t){return"  "+t})).join("\n").substr(2):"\n"+o.split("\n").map((function(t){return"   "+t})).join("\n")):o=t.stylize("[Circular]","special")),y(i)){if(a&&s.match(/^\d+$/))return o;(i=JSON.stringify(""+s)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(i=i.substr(1,i.length-2),i=t.stylize(i,"name")):(i=i.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),i=t.stylize(i,"string"))}return i+": "+o}function d(t){return Array.isArray(t)}function p(t){return"boolean"==typeof t}function f(t){return null===t}function m(t){return"number"==typeof t}function g(t){return"string"==typeof t}function y(t){return void 0===t}function b(t){return x(t)&&"[object RegExp]"===N(t)}function x(t){return"object"==typeof t&&null!==t}function w(t){return x(t)&&"[object Date]"===N(t)}function v(t){return x(t)&&("[object Error]"===N(t)||t instanceof Error)}function C(t){return"function"==typeof t}function N(t){return Object.prototype.toString.call(t)}function S(t){return t<10?"0"+t.toString(10):t.toString(10)}e.debuglog=function(t){if(y(s)&&(s=process.env.NODE_DEBUG||""),t=t.toUpperCase(),!a[t])if(new RegExp("\\b"+t+"\\b","i").test(s)){var n=process.pid;a[t]=function(){var r=e.format.apply(e,arguments);console.error("%s %d: %s",t,n,r)}}else a[t]=function(){};return a[t]},e.inspect=i,i.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},i.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},e.isArray=d,e.isBoolean=p,e.isNull=f,e.isNullOrUndefined=function(t){return null==t},e.isNumber=m,e.isString=g,e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=y,e.isRegExp=b,e.isObject=x,e.isDate=w,e.isError=v,e.isFunction=C,e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=Or;var k=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function I(){var t=new Date,e=[S(t.getHours()),S(t.getMinutes()),S(t.getSeconds())].join(":");return[t.getDate(),k[t.getMonth()],e].join(" ")}function E(t,e){return Object.prototype.hasOwnProperty.call(t,e)}e.log=function(){console.log("%s - %s",I(),e.format.apply(e,arguments))},e.inherits=Mr,e._extend=function(t,e){if(!e||!x(e))return t;for(var n=Object.keys(e),r=n.length;r--;)t[n[r]]=e[n[r]];return t};var $="undefined"!=typeof Symbol?Symbol("util.promisify.custom"):void 0;function A(t,e){if(!t){var n=new Error("Promise was rejected with a falsy value");n.reason=t,t=n}return e(t)}e.promisify=function(t){if("function"!=typeof t)throw new TypeError('The "original" argument must be of type Function');if($&&t[$]){var e;if("function"!=typeof(e=t[$]))throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(e,$,{value:e,enumerable:!1,writable:!1,configurable:!0}),e}function e(){for(var e,n,r=new Promise((function(t,r){e=t,n=r})),s=[],a=0;a<arguments.length;a++)s.push(arguments[a]);s.push((function(t,r){t?n(t):e(r)}));try{t.apply(this,s)}catch(t){n(t)}return r}return Object.setPrototypeOf(e,Object.getPrototypeOf(t)),$&&Object.defineProperty(e,$,{value:e,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(e,n(t))},e.promisify.custom=$,e.callbackify=function(t){if("function"!=typeof t)throw new TypeError('The "original" argument must be of type Function');function e(){for(var e=[],n=0;n<arguments.length;n++)e.push(arguments[n]);var r=e.pop();if("function"!=typeof r)throw new TypeError("The last argument must be of type Function");var s=this,a=function(){return r.apply(s,arguments)};t.apply(this,e).then((function(t){process.nextTick(a,null,t)}),(function(t){process.nextTick(A,t,a)}))}return Object.setPrototypeOf(e,Object.getPrototypeOf(t)),Object.defineProperties(e,n(t)),e}}));zr.format,zr.deprecate,zr.debuglog,zr.inspect,zr.isArray,zr.isBoolean,zr.isNull,zr.isNullOrUndefined,zr.isNumber,zr.isString,zr.isSymbol,zr.isUndefined,zr.isRegExp,zr.isObject,zr.isDate,zr.isError,zr.isFunction,zr.isPrimitive,zr.isBuffer,zr.log,zr.inherits,zr._extend,zr.promisify,zr.callbackify;const Lr=()=>e;let Br;class Pr{constructor(){this.util=zr,this.textEncoder=new this.util.TextEncoder}fetch(t,e){return null!=a().global.fetch?a().global.fetch(t,e):(null==Br&&(Br=Lr()),Br(t,e))}now(){const t=process.hrtime();return 1e3*t[0]+t[1]/1e6}encode(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error("Node built-in encoder only supports utf-8, but got "+e);return this.textEncoder.encode(t)}decode(t,e){return 0===t.length?"":new this.util.TextDecoder(e).decode(t)}}a().get("IS_NODE")&&a().setPlatform("node",new Pr);const Wr={float32:4,int32:4,uint16:2,uint8:1,bool:1};async function Vr(t,e){const n=[],r=[],s=Array.isArray(t)?t.map(t=>t.name):Object.keys(t);for(let a=0;a<s.length;++a){const i=s[a],o=Array.isArray(t)?t[a].tensor:t[i];if("float32"!==o.dtype&&"int32"!==o.dtype&&"bool"!==o.dtype&&"string"!==o.dtype)throw new Error(`Unsupported dtype in weight '${i}': ${o.dtype}`);const l={name:i,shape:o.shape,dtype:o.dtype};if("string"===o.dtype){const t=new Promise(async t=>{const e=await o.bytes(),n=e.reduce((t,e)=>t+e.length,0)+4*e.length,r=new Uint8Array(n);let s=0;for(let t=0;t<e.length;t++){const n=e[t],a=new Uint8Array(new Uint32Array([n.length]).buffer);r.set(a,s),s+=4,r.set(n,s),s+=n.length}t(r)});r.push(t)}else r.push(o.data());null!=e&&(l.group=e),n.push(l)}return{data:Gr(await Promise.all(r)),specs:n}}function Ur(t,e){const n={};let r=0;for(const s of e){const e=s.name,a=s.dtype,i=s.shape,o=k(i);let l;if("quantization"in s){const n=s.quantization;if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Weight ${s.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8' and 'uint16'.`);const i=Wr[n.dtype],u=t.slice(r,r+o*i),c="uint8"===n.dtype?new Uint8Array(u):new Uint16Array(u);if("float32"===a)l=Float32Array.from(c,t=>t*n.scale+n.min);else{if("int32"!==a)throw new Error(`Unsupported dtype in weight '${e}': ${a}`);l=Int32Array.from(c,t=>Math.round(t*n.scale+n.min))}r+=o*i}else if("string"===a){const e=k(s.shape);l=[];for(let n=0;n<e;n++){const e=new Uint32Array(t.slice(r,r+4))[0];r+=4;const n=new Uint8Array(t.slice(r,r+e));l.push(n),r+=e}}else{const n=Wr[a],s=t.slice(r,r+o*n);if("float32"===a)l=new Float32Array(s);else if("int32"===a)l=new Int32Array(s);else{if("bool"!==a)throw new Error(`Unsupported dtype in weight '${e}': ${a}`);l=new Uint8Array(s)}r+=o*n}n[e]=ce(l,i,a)}return n}function Gr(t){if(null===t)throw new Error("Invalid input value: "+JSON.stringify(t));let e=0;const n=[];t.forEach(t=>{if(e+=t.byteLength,n.push(t.byteLength===t.buffer.byteLength?t:new t.constructor(t)),!(t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array))throw new Error("Unsupported TypedArray subtype: "+t.constructor.name)});const r=new Uint8Array(e);let s=0;return n.forEach(t=>{r.set(new Uint8Array(t.buffer),s),s+=t.byteLength}),r.buffer}const jr="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function qr(t){return jr?Buffer.byteLength(t):new Blob([t]).size}function Hr(t){let e=0;t.forEach(t=>{e+=t.byteLength});const n=new Uint8Array(e);let r=0;return t.forEach(t=>{n.set(new Uint8Array(t),r),r+=t.byteLength}),n.buffer}function Kr(t){for(t=t.trim();t.endsWith("/");)t=t.slice(0,t.length-1);const e=t.split("/");return e[e.length-1]}function Xr(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==t.modelTopology?0:qr(JSON.stringify(t.modelTopology)),weightSpecsBytes:null==t.weightSpecs?0:qr(JSON.stringify(t.weightSpecs)),weightDataBytes:null==t.weightData?0:t.weightData.byteLength}}class Yr{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==Yr.instance&&(Yr.instance=new Yr),Yr.instance}static registerSaveRouter(t){Yr.getInstance().saveRouters.push(t)}static registerLoadRouter(t){Yr.getInstance().loadRouters.push(t)}static getSaveHandlers(t){return Yr.getHandlers(t,"save")}static getLoadHandlers(t,e){return Yr.getHandlers(t,"load",e)}static getHandlers(t,e,n){const r=[];return("load"===e?Yr.getInstance().loadRouters:Yr.getInstance().saveRouters).forEach(e=>{const s=e(t,n);null!==s&&r.push(s)}),r}}const Jr=t=>Yr.getSaveHandlers(t),Zr=(t,e)=>Yr.getLoadHandlers(t,e);class Qr{constructor(){this.managers={}}static getInstance(){return null==Qr.instance&&(Qr.instance=new Qr),Qr.instance}static registerManager(t,e){v(null!=t,()=>"scheme must not be undefined or null."),t.endsWith("://")&&(t=t.slice(0,t.indexOf("://"))),v(t.length>0,()=>"scheme must not be an empty string.");const n=Qr.getInstance();v(null==n.managers[t],()=>`A model store manager is already registered for scheme '${t}'.`),n.managers[t]=e}static getManager(t){const e=this.getInstance().managers[t];if(null==e)throw new Error(`Cannot find model manager for scheme '${t}'`);return e}static getSchemes(){return Object.keys(this.getInstance().managers)}}function ts(t){if(-1===t.indexOf("://"))throw new Error("The url string provided does not contain a scheme. Supported schemes are: "+Qr.getSchemes().join(","));return{scheme:t.split("://")[0],path:t.split("://")[1]}}async function es(t,e,n=!1){v(t!==e,()=>`Old path and new path are the same: '${t}'`);const r=Yr.getLoadHandlers(t);v(r.length>0,()=>`Copying failed because no load handler is found for source URL ${t}.`),v(r.length<2,()=>`Copying failed because more than one (${r.length}) load handlers for source URL ${t}.`);const s=r[0],a=Yr.getSaveHandlers(e);v(a.length>0,()=>`Copying failed because no save handler is found for destination URL ${e}.`),v(a.length<2,()=>`Copying failed because more than one (${r.length}) save handlers for destination URL ${e}.`);const i=a[0],o=ts(t).scheme,l=ts(t).path,u=o===ts(t).scheme,c=await s.load();n&&u&&await Qr.getManager(o).removeModel(l);const h=await i.save(c);return n&&!u&&await Qr.getManager(o).removeModel(l),h.modelArtifactsInfo}function ns(){if(!a().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const t=window||self,e=t.indexedDB||t.mozIndexedDB||t.webkitIndexedDB||t.msIndexedDB||t.shimIndexedDB;if(null==e)throw new Error("The current browser does not appear to support IndexedDB.");return e}function rs(t){const e=t.result;e.createObjectStore("models_store",{keyPath:"modelPath"}),e.createObjectStore("model_info_store",{keyPath:"modelPath"})}class ss{constructor(t){if(this.indexedDB=ns(),null==t||!t)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=t}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,t)}async load(){return this.databaseAction(this.modelPath)}databaseAction(t,e){return new Promise((t,n)=>{const r=this.indexedDB.open("tensorflowjs",1);r.onupgradeneeded=()=>rs(r),r.onsuccess=()=>{const s=r.result;if(null==e){const e=s.transaction("models_store","readonly"),r=e.objectStore("models_store").get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return s.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));t(r.result.modelArtifacts)},r.onerror=t=>(s.close(),n(r.error)),e.oncomplete=()=>s.close()}else{const r=Xr(e),a=s.transaction("model_info_store","readwrite");let i=a.objectStore("model_info_store");const o=i.put({modelPath:this.modelPath,modelArtifactsInfo:r});let l;o.onsuccess=()=>{l=s.transaction("models_store","readwrite");const o=l.objectStore("models_store").put({modelPath:this.modelPath,modelArtifacts:e,modelArtifactsInfo:r});o.onsuccess=()=>t({modelArtifactsInfo:r}),o.onerror=t=>{i=a.objectStore("model_info_store");const e=i.delete(this.modelPath);e.onsuccess=()=>(s.close(),n(o.error)),e.onerror=t=>(s.close(),n(o.error))}},o.onerror=t=>(s.close(),n(o.error)),a.oncomplete=()=>{null==l?s.close():l.oncomplete=()=>s.close()}}},r.onerror=t=>n(r.error)})}}ss.URL_SCHEME="indexeddb://";const as=t=>{return a().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(ss.URL_SCHEME)?(e=t.slice(ss.URL_SCHEME.length),new ss(e)):null;var e};Yr.registerSaveRouter(as),Yr.registerLoadRouter(as);class is{constructor(){this.indexedDB=ns()}async listModels(){return new Promise((t,e)=>{const n=this.indexedDB.open("tensorflowjs",1);n.onupgradeneeded=()=>rs(n),n.onsuccess=()=>{const r=n.result,s=r.transaction("model_info_store","readonly"),a=s.objectStore("model_info_store").getAll();a.onsuccess=()=>{const e={};for(const t of a.result)e[t.modelPath]=t.modelArtifactsInfo;t(e)},a.onerror=t=>(r.close(),e(a.error)),s.oncomplete=()=>r.close()},n.onerror=t=>e(n.error)})}async removeModel(t){var e;return t=(e=t).startsWith(ss.URL_SCHEME)?e.slice(ss.URL_SCHEME.length):e,new Promise((e,n)=>{const r=this.indexedDB.open("tensorflowjs",1);r.onupgradeneeded=()=>rs(r),r.onsuccess=()=>{const s=r.result,a=s.transaction("model_info_store","readwrite"),i=a.objectStore("model_info_store"),o=i.get(t);let l;o.onsuccess=()=>{if(null==o.result)return s.close(),n(new Error(`Cannot find model with path '${t}' in IndexedDB.`));{const r=i.delete(t),a=()=>{l=s.transaction("models_store","readwrite");const r=l.objectStore("models_store").delete(t);r.onsuccess=()=>e(o.result.modelArtifactsInfo),r.onerror=t=>n(o.error)};r.onsuccess=a,r.onerror=t=>(a(),s.close(),n(o.error))}},o.onerror=t=>(s.close(),n(o.error)),a.oncomplete=()=>{null==l?s.close():l.oncomplete=()=>s.close()}},r.onerror=t=>n(r.error)})}}if(a().getBool("IS_BROWSER"))try{Qr.registerManager(ss.URL_SCHEME,new is)}catch(t){}const os="tensorflowjs_models",ls="info",us="model_topology",cs="weight_specs",hs="weight_data",ds="model_metadata";function ps(t){return{info:[os,t,ls].join("/"),topology:[os,t,us].join("/"),weightSpecs:[os,t,cs].join("/"),weightData:[os,t,hs].join("/"),modelMetadata:[os,t,ds].join("/")}}function fs(t){const e=t.split("/");if(e.length<3)throw new Error("Invalid key format: "+t);return e.slice(1,e.length-1).join("/")}class ms{constructor(t){if(!a().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==t||!t)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=t,this.keys=ps(this.modelPath)}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const e=JSON.stringify(t.modelTopology),n=JSON.stringify(t.weightSpecs),r=Xr(t);try{return this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,e),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(t){if(jr)return Buffer.from(t).toString("base64");const e=new Uint8Array(t);let n="";for(let t=0,r=e.length;t<r;t++)n+=String.fromCharCode(e[t]);return btoa(n)}(t.weightData)),this.LS.setItem(this.keys.modelMetadata,JSON.stringify({format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,userDefinedMetadata:t.userDefinedMetadata})),{modelArtifactsInfo:r}}catch(t){throw this.LS.removeItem(this.keys.info),this.LS.removeItem(this.keys.topology),this.LS.removeItem(this.keys.weightSpecs),this.LS.removeItem(this.keys.weightData),this.LS.removeItem(this.keys.modelMetadata),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`)}}}async load(){const t=JSON.parse(this.LS.getItem(this.keys.info));if(null==t)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==t.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const e={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);e.modelTopology=n;const r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);e.weightSpecs=r;const s=this.LS.getItem(this.keys.modelMetadata);if(null!=s){const t=JSON.parse(s);e.format=t.format,e.generatedBy=t.generatedBy,e.convertedBy=t.convertedBy,e.userDefinedMetadata=t.userDefinedMetadata}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return e.weightData=function(t){if(jr){const e=Buffer.from(t,"base64");return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}const e=atob(t),n=new Uint8Array(e.length);for(let t=0;t<e.length;++t)n.set([e.charCodeAt(t)],t);return n.buffer}(a),e}}ms.URL_SCHEME="localstorage://";const gs=t=>{return a().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(ms.URL_SCHEME)?(e=t.slice(ms.URL_SCHEME.length),new ms(e)):null;var e};Yr.registerSaveRouter(gs),Yr.registerLoadRouter(gs);class ys{constructor(){v(a().getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),v("undefined"==typeof window||void 0!==window.localStorage,()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}async listModels(){const t={},e=os+"/",n="/"+ls;for(let r=0;r<this.LS.length;++r){const s=this.LS.key(r);if(s.startsWith(e)&&s.endsWith(n)){t[fs(s)]=JSON.parse(this.LS.getItem(s))}}return t}async removeModel(t){var e;const n=ps(t=(e=t).startsWith(ms.URL_SCHEME)?e.slice(ms.URL_SCHEME.length):e);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${t}'`);const r=JSON.parse(this.LS.getItem(n.info));return this.LS.removeItem(n.info),this.LS.removeItem(n.topology),this.LS.removeItem(n.weightSpecs),this.LS.removeItem(n.weightData),r}}if(a().getBool("IS_BROWSER"))try{Qr.registerManager(ms.URL_SCHEME,new ys)}catch(t){}function bs(t){return new Promise(t=>setTimeout(t)).then(t)}class xs{constructor(t){if(!a().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");t.startsWith(xs.URL_SCHEME)&&(t=t.slice(xs.URL_SCHEME.length)),null!=t&&0!==t.length||(t="model"),this.modelTopologyFileName=t+".json",this.weightDataFileName=t+".weights.bin"}async save(t){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const e=window.URL.createObjectURL(new Blob([t.weightData],{type:"application/octet-stream"}));if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=[{paths:["./"+this.weightDataFileName],weights:t.weightSpecs}],r={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,weightsManifest:n},s=window.URL.createObjectURL(new Blob([JSON.stringify(r)],{type:"application/json"})),a=null==this.jsonAnchor?document.createElement("a"):this.jsonAnchor;if(a.download=this.modelTopologyFileName,a.href=s,await bs(()=>a.dispatchEvent(new MouseEvent("click"))),null!=t.weightData){const t=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;t.download=this.weightDataFileName,t.href=e,await bs(()=>t.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:Xr(t)}}}}xs.URL_SCHEME="downloads://";class ws{constructor(t){if(null==t||t.length<1)throw new Error("When calling browserFiles, at least 1 file is required, but received "+t);this.files=t}async load(){const t=this.files[0],e=this.files.slice(1);return new Promise((n,r)=>{const s=new FileReader;s.onload=s=>{const a=JSON.parse(s.target.result),i=a.modelTopology;if(null==i)return void r(new Error("modelTopology field is missing from file "+t.name));0===e.length&&n({modelTopology:i});const o=a.weightsManifest;if(null==o)return void r(new Error("weightManifest field is missing from file "+t.name));let l;try{l=this.checkManifestAndWeightFiles(o,e)}catch(t){return void r(t)}const u=[],c=[],h=[];o.forEach(t=>{t.paths.forEach(t=>{c.push(t),h.push(null)}),u.push(...t.weights)}),o.forEach(t=>{t.paths.forEach(t=>{const e=new FileReader;e.onload=e=>{const r=e.target.result,s=c.indexOf(t);h[s]=r,-1===h.indexOf(null)&&n({modelTopology:i,weightSpecs:u,weightData:Hr(h),format:a.format,generatedBy:a.generatedBy,convertedBy:a.convertedBy,userDefinedMetadata:a.userDefinedMetadata})},e.onerror=e=>r(`Failed to weights data from file of path '${t}'.`),e.readAsArrayBuffer(l[t])})})},s.onerror=e=>r(`Failed to read model topology and weights manifest JSON from file '${t.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),s.readAsText(t)})}checkManifestAndWeightFiles(t,e){const n=[],r=e.map(t=>Kr(t.name)),s={};for(const a of t)a.paths.forEach(t=>{const a=Kr(t);if(-1!==n.indexOf(a))throw new Error(`Duplicate file basename found in weights manifest: '${a}'`);if(n.push(a),-1===r.indexOf(a))throw new Error(`Weight file with basename '${a}' is not provided.`);s[t]=e[r.indexOf(a)]});if(n.length!==e.length)throw new Error(`Mismatch in the number of files in weights manifest (${n.length}) and the number of weight files provided (${e.length}).`);return s}}function vs(t,e,n,r){!function(t){v(null!=t&&Array.isArray(t)&&t.length>0,()=>"promises must be a none empty array")}(t),function(t,e){v(t>=0&&t<=1,()=>"Progress fraction must be in range [0, 1], but got startFraction "+t),v(e>=0&&e<=1,()=>"Progress fraction must be in range [0, 1], but got endFraction "+e),v(e>=t,()=>`startFraction must be no more than endFraction, but got startFraction ${t} and endFraction `+e)}(n=null==n?0:n,r=null==r?1:r);let s=0;return Promise.all(t.map(a=>(a.then(a=>{const i=n+ ++s/t.length*(r-n);return e(i),a}),a)))}async function Cs(t,e){null==e&&(e={});const n=null==e.fetchFunc?a().platform.fetch:e.fetchFunc,r=t.map(t=>n(t,e.requestInit,{isBinary:!0})),s=(null==e.onProgress?await Promise.all(r):await vs(r,e.onProgress,0,.5)).map(t=>t.arrayBuffer());return null==e.onProgress?await Promise.all(s):await vs(s,e.onProgress,.5,1)}async function Ns(t,e="",n,r){return Ss(t=>Cs(t,{requestInit:r}))(t,e,n)}function Ss(t){return async(e,n="",r)=>{const s=e.map(()=>!1),a={},i=null!=r?r.map(()=>!1):[],o=[];if(e.forEach((t,e)=>{let n=0;t.weights.forEach(t=>{const l="quantization"in t?t.quantization.dtype:t.dtype,u=Wr[l]*k(t.shape),c=()=>{s[e]=!0,null==a[e]&&(a[e]=[]),a[e].push({manifestEntry:t,groupOffset:n,sizeBytes:u})};null!=r?r.forEach((e,n)=>{e===t.name&&(c(),i[n]=!0)}):c(),o.push(t.name),n+=u})}),!i.every(t=>t)){const t=r.filter((t,e)=>!i[e]);throw new Error("Could not find weights in manifest with names: "+t.join(", ")+". \nManifest JSON has weights with names: "+o.join(", ")+".")}const l=s.reduce((t,e,n)=>(e&&t.push(n),t),[]),u=[];l.forEach(t=>{e[t].paths.forEach(t=>{const e=n+(n.endsWith("/")?"":"/")+t;u.push(e)})});const c=await t(u),h={};let d=0;return l.forEach(t=>{const n=e[t].paths.length;let r=0;for(let t=0;t<n;t++)r+=c[d+t].byteLength;const s=new ArrayBuffer(r),i=new Uint8Array(s);let o=0;for(let t=0;t<n;t++){const e=new Uint8Array(c[d+t]);i.set(e,o),o+=e.byteLength}a[t].forEach(t=>{const e=Ur(s.slice(t.groupOffset,t.groupOffset+t.sizeBytes),[t.manifestEntry]);for(const t in e)h[t]=e[t]}),d+=n}),h}}Yr.registerSaveRouter(t=>a().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(xs.URL_SCHEME)?function(t="model"){return new xs(t)}(t.slice(xs.URL_SCHEME.length)):null);class ks{constructor(t,e){if(this.DEFAULT_METHOD="POST",null==e&&(e={}),this.weightPathPrefix=e.weightPathPrefix,this.onProgress=e.onProgress,null!=e.fetchFunc?(v("function"==typeof e.fetchFunc,()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetch=e.fetchFunc):this.fetch=a().platform.fetch,v(null!=t&&t.length>0,()=>"URL path for http must not be null, undefined or empty."),Array.isArray(t)&&v(2===t.length,()=>`URL paths for http must have a length of 2, (actual length is ${t.length}).`),this.path=t,null!=e.requestInit&&null!=e.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=e.requestInit||{}}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const e=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);e.body=new FormData;const n=[{paths:["./model.weights.bin"],weights:t.weightSpecs}],r={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,userDefinedMetadata:t.userDefinedMetadata,weightsManifest:n};e.body.append("model.json",new Blob([JSON.stringify(r)],{type:"application/json"}),"model.json"),null!=t.weightData&&e.body.append("model.weights.bin",new Blob([t.weightData],{type:"application/octet-stream"}),"model.weights.bin");const s=await this.fetch(this.path,e);if(s.ok)return{modelArtifactsInfo:Xr(t),responses:[s]};throw new Error("BrowserHTTPRequest.save() failed due to HTTP response status "+s.status+".")}async load(){const t=await this.fetch(this.path,this.requestInit);if(!t.ok)throw new Error(`Request to ${this.path} failed with status code `+t.status+". Please verify this URL points to the model JSON of the model to load.");let e;try{e=await t.json()}catch(t){let e=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?e+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":e+=" Please make sure the server is serving valid JSON for this request.",new Error(e)}const n=e.modelTopology,r=e.weightsManifest,s=e.generatedBy,a=e.convertedBy,i=e.format,o=e.userDefinedMetadata;if(null==n&&null==r)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);let l,u;if(null!=r){const t=await this.loadWeights(r);[l,u]=t}return{modelTopology:n,weightSpecs:l,weightData:u,userDefinedMetadata:o,generatedBy:s,convertedBy:a,format:i}}async loadWeights(t){const e=Array.isArray(this.path)?this.path[1]:this.path,[n,r]=function(t){const e=t.lastIndexOf("/"),n=t.lastIndexOf("?"),r=t.substring(0,e),s=n>e?t.substring(n):"";return[r+"/",s]}(e),s=this.weightPathPrefix||n,a=[];for(const e of t)a.push(...e.weights);const i=[];return t.forEach(t=>{t.paths.forEach(t=>{i.push(s+t+r)})}),[a,Hr(await Cs(i,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function Is(t){return null!=t.match(ks.URL_SCHEME_REGEX)}ks.URL_SCHEME_REGEX=/^https?:\/\//;const Es=(t,e)=>{if("undefined"==typeof fetch)return null;{let n=!0;if(n=Array.isArray(t)?t.every(t=>Is(t)):Is(t),n)return $s(t,{onProgress:e})}return null};function $s(t,e){return new ks(t,e)}function As(t,e){return $s(t,e)}Yr.registerSaveRouter(Es),Yr.registerLoadRouter(Es);class Rs{constructor(t){this.modelArtifacts=t}async load(){return this.modelArtifacts}}class Ts{constructor(t){this.saveHandler=t}async save(t){return this.saveHandler(t)}}var Ds=Object.freeze({__proto__:null,browserFiles:function(t){return new ws(t)},browserHTTPRequest:As,concatenateArrayBuffers:Hr,decodeWeights:Ur,encodeWeights:Vr,fromMemory:function(t,e,n,r){if(1===arguments.length){return null!=t.modelTopology||null!=t.weightSpecs?new Rs(t):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Rs({modelTopology:t}))}return console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Rs({modelTopology:t,weightSpecs:e,weightData:n,trainingConfig:r})},getLoadHandlers:Zr,getModelArtifactsInfoForJSON:Xr,getSaveHandlers:Jr,http:$s,isHTTPScheme:Is,loadWeights:Ns,registerLoadRouter:t=>Yr.registerLoadRouter(t),registerSaveRouter:t=>Yr.registerSaveRouter(t),weightsLoaderFactory:Ss,withSaveHandler:function(t){return new Ts(t)},copyModel:async function(t,e){return es(t,e,!1)},listModels:async function(){const t=Qr.getSchemes(),e={};for(const n of t){const t=await Qr.getManager(n).listModels();for(const r in t){e[n+"://"+r]=t[r]}}return e},moveModel:async function(t,e){return es(t,e,!0)},removeModel:async function(t){const e=ts(t);return Qr.getManager(e.scheme).removeModel(e.path)}});const _s=ie({oneHot_:function(t,e,n=1,r=0){if(e<2)throw new Error("Error in oneHot: depth must be >=2, but it is "+e);let s=Ht(t,"indices","oneHot","int32");const a=[...s.shape,e];s=s.flatten();const i={indices:s},o={depth:e,onValue:n,offValue:r};return Ft.runKernelFunc((t,i)=>(i([s]),Ze(t.oneHot(s,e,n,r),a)),i,null,"OneHot",o)}});const Os=ie({confusionMatrix_:function(t,e,n){const r=Ht(t,"labels","confusionMatrix"),s=Ht(e,"predictions","confusionMatrix");v(null==n||n>0&&Number.isInteger(n),()=>"If provided, numClasses must be a positive integer, but got "+n),v(1===r.rank,()=>"Expected the rank of labels to be 1, but got "+r.rank),v(1===s.rank,()=>"Expected the rank of predictions to be 1, but got "+s.rank),v(r.shape[0]===s.shape[0],()=>`Mismatch in the number of examples: ${r.shape[0]} vs. ${s.shape[0]}. Labels and predictions should have the same number of elements.`),v(n>0&&Number.isInteger(n),()=>"numClasses is required to be a positive integer, but got "+n);const a=_s(r.asType("int32"),n),i=_s(s.asType("int32"),n);return a.transpose().matMul(i).asType("int32")}});var Fs=Object.freeze({__proto__:null,confusionMatrix:Os});let Ms;const zs=ie({fromPixels_:function(t,e=3){if(e>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==t)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,r=!1,s=!1,a=!1,i=!1;if(t.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&t instanceof ImageData)r=!0;else if("undefined"!=typeof HTMLVideoElement&&t instanceof HTMLVideoElement)s=!0;else if("undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement)a=!0;else{if(null==t.getContext)throw new Error("pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was "+t.constructor.name);i=!0}if(s){const e=2;if(s&&t.readyState<e)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.")}if(null!=h("FromPixels",Ft.backendName))return Ft.runKernel("FromPixels",{pixels:t},{numChannels:e});const[o,l]=s?[t.videoWidth,t.videoHeight]:[t.width,t.height];let u,c;if(i?u=t.getContext("2d").getImageData(0,0,o,l).data:r||n?u=t.data:(a||s)&&(null==Ms&&(Ms=document.createElement("canvas").getContext("2d")),Ms.canvas.width=o,Ms.canvas.height=l,Ms.drawImage(t,0,0,o,l),u=Ms.getImageData(0,0,o,l).data),4===e)c=new Int32Array(u);else{const t=o*l;c=new Int32Array(t*e);for(let n=0;n<t;n++)for(let t=0;t<e;++t)c[n*e+t]=u[4*n+t]}return me(c,[l,o,e],"int32")}});var Ls=Object.freeze({__proto__:null,toPixels:async function(t,e){let n=Ht(t,"img","toPixels");if(!(t instanceof bt)){const t=n;n=t.toInt(),t.dispose()}if(2!==n.rank&&3!==n.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`);const[r,s]=n.shape.slice(0,2),a=2===n.rank?1:n.shape[2];if(a>4||2===a)throw new Error("toPixels only supports depth of size 1, 3 or 4 but got "+a);const i=await n.data(),o=n.min(),l=n.max(),u=await Promise.all([o.data(),l.data()]),c=u[0],h=u[1],d=c[0],p=h[0];if(o.dispose(),l.dispose(),"float32"===n.dtype){if(d<0||p>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but got range [${d} - ${p}].`)}else{if("int32"!==n.dtype)throw new Error(`Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`);if(d<0||p>255)throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but got range [${d} - ${p}].`)}const f="float32"===n.dtype?255:1,m=new Uint8ClampedArray(s*r*4);for(let t=0;t<r*s;++t){let e,n,r,s;1===a?(e=i[t]*f,n=i[t]*f,r=i[t]*f,s=255):3===a?(e=i[3*t]*f,n=i[3*t+1]*f,r=i[3*t+2]*f,s=255):4===a&&(e=i[4*t]*f,n=i[4*t+1]*f,r=i[4*t+2]*f,s=i[4*t+3]*f);const o=4*t;m[o+0]=Math.round(e),m[o+1]=Math.round(n),m[o+2]=Math.round(r),m[o+3]=Math.round(s)}if(null!=e){e.width=s,e.height=r;const t=e.getContext("2d"),n=new ImageData(m,s,r);t.putImageData(n,0,0)}return n!==t&&n.dispose(),m},fromPixels:zs});function Bs(t,e){if(t.rank<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==e.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.shape[e.rank-1]>t.rank)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${e.shape[e.rank-1]} vs. ${t.rank}`);if(0===t.size)throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${t.shape}.`);const n=e.shape,r=n[n.length-1];let s=1;for(let t=0;t<n.length-1;++t)s*=n[t];const a=t.shape,i=n.slice();i.pop();let o=1;for(let e=r;e<t.rank;++e)o*=a[e],i.push(a[e]);const l=[...X(t.shape).map(t=>t/o),1].slice(0,r);return[i,s,o,l]}var Ps=Object.freeze({__proto__:null,prepareAndValidate:Bs});function Ws(t,e,n){const r=e.rank>1?e.shape[e.rank-1]:1,s=e.rank>1?e.rank-1:1,a="Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: "+n.shape+`, indices.shape: ${e.shape}, shape: ${t}`+`, sliceDim: ${r}, and batchDim: ${s}.`;if(n.rank<s)throw new Error(a+` update.rank < ${s}. `);if(t.length<r+(n.rank-s))throw new Error(a+" Output shape length < "+(r+(n.rank-s)));if(n.rank!==s+t.length-r)throw new Error(a+" update.rank != "+(s+t.length-r));for(let t=0;t<s;++t)if(n.shape[t]!==e.shape[t])throw new Error(a+` updates.shape[${t}] (${n.shape[t]}) != indices.shape[${t}] (${e.shape[t]}).`);for(let e=0;e<n.rank-s;++e)if(n.shape[e+s]!==t[e+r])throw new Error(a+` updates.shape[${e+s}] (${n.shape[e+s]}) != shape[${e+s}] (${t[e+s]})`)}function Vs(t,e,n){if(e.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${e.rank}.`);if(t.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${t.rank}.`);if("int32"!==e.dtype)throw new Error("The dtype of 'indices' should be int32, but got dtype: "+e.dtype);if(n.length<1)throw new Error("Output rank must be greater or equal to 1, but got shape: "+n);if(0===n.length){if(0===e.size)throw new Error("Indices specified for empty output. indices shape: "+e.shape);if(0===t.size)throw new Error("Updates specified for empty output. updates shape: "+t.shape)}Ws(n,e,t)}function Us(t,e,n){const r=e.shape.length,s=r>1?e.shape[r-1]:1,a=n.length;let i=1;for(let t=s;t<a;++t)i*=n[t];const o=s<1?1:s;return{sliceRank:s,numUpdates:k(e.shape)/o,sliceSize:i,strides:[...X(n.slice(0,s)),1],outputSize:k(n)}}var Gs=Object.freeze({__proto__:null,validateUpdateShape:Ws,validateInput:Vs,calculateShapes:Us});class js{getClassName(){return this.constructor.className}static fromConfig(t,e){return new t(e)}}class qs{constructor(){this.classNameMap={}}static getMap(){return null==qs.instance&&(qs.instance=new qs),qs.instance}static register(t){qs.getMap().classNameMap[t.className]=[t,t.fromConfig]}}function Hs(t){v(null!=t.className,()=>"Class being registered does not have the static className property defined."),v("string"==typeof t.className,()=>"className is required to be a string, but got type "+typeof t.className),v(t.className.length>0,()=>"Class being registered has an empty-string as its className, which is disallowed."),qs.register(t)}var Ks=Object.freeze({__proto__:null,Serializable:js,SerializationMap:qs,registerClass:Hs});function Xs(){return 32===Ft.backend.floatPrecision()?.001:.1}function Ys(t,e,n){let r=!0;if((P(t)||P(e))&&(r=!1),P(t)&&P(e)&&(r=!0),r){const n=t.constructor.name,r=e.constructor.name;if(n!==r)throw new Error(`Arrays are of different type. Actual: ${n}. Expected: `+r)}if(Array.isArray(t)&&Array.isArray(e)){const n=jt(t),r=jt(e);if(!I(n,r))throw new Error(`Arrays have different shapes. Actual: [${n}]. Expected: [${r}]`)}const s=P(t)?t:S(t),a=P(e)?e:S(e);if(s.length!==a.length)throw new Error(`Arrays have different lengths actual: ${s.length} vs expected: ${a.length}.\nActual:   ${s}.\nExpected: ${a}.`);for(let t=0;t<a.length;++t){const e=s[t],r=a[t];if(!n(e,r))throw new Error(`Arrays differ: actual[${t}] = ${e}, expected[${t}] = ${r}.\nActual:   ${s}.\nExpected: ${a}.`)}}function Js(t,e,n){return!isFinite(t)&&!isFinite(e)||!(isNaN(t)||isNaN(e)||Math.abs(t-e)>n)}var Zs=Object.freeze({__proto__:null,TEST_EPSILON_FLOAT16:.1,expectArraysClose:function(t,e,n){return null==n&&(n=Xs()),Ys(t,e,(t,e)=>Js(t,e,n))},testEpsilon:Xs,expectPromiseToFail:function(t,e){t().then(()=>e.fail(),()=>e())},expectArraysEqual:function(t,e){const n="string"==typeof e||"number"==typeof e||"boolean"==typeof e?[e]:e;return U(t)||U(t[0])||U(e)||U(e[0])?Ys(t,n,(t,e)=>t==e):Ys(t,e,(t,e)=>Js(t,e,0))},expectNumbersClose:function(t,e,n){if(null==n&&(n=Xs()),!Js(t,e,n))throw new Error(`Numbers differ: actual === ${t}, expected === ${e}`)},expectValuesInRange:function(t,e,n){for(let r=0;r<t.length;r++)if(t[r]<e||t[r]>n)throw new Error(`Value out of range:${t[r]} low: ${e}, high: ${n}`)},expectArrayBuffersEqual:function(t,e){expect(new Float32Array(t)).toEqual(new Float32Array(e))}});function Qs(t){a().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(t+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function ta(){return Ft}function ea(){return Ft.memory()}function na(t,e){return Ft.tidy(t,e)}function ra(t){Tt(t).forEach(t=>t.dispose())}function sa(t){return Ft.keep(t)}function aa(t,e,n=1){return Ft.registerBackend(t,e,n)}function ia(){return Ft.backend}yt=Qs;const oa=ie({addN_:function(t){v(Array.isArray(t),()=>"The argument passed to tf.addN() must be a list of tensors"),v(t.length>=1,()=>"Must pass at least one tensor to tf.addN(), but got "+t.length);const e=t.map((t,e)=>Ht(t,"tensors"+e,"addN")),n=e[0];e.forEach(t=>{if(t.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")}),e.forEach(t=>{if(!I(t.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")});const r=e;return Ft.runKernelFunc((t,n)=>{const r=t.addN(e);return n(e),r},r,null,"AddN")}});function la(){Qs("tf.batchNormalization() is going away. Use tf.batchNorm() instead, and note the positional argument change of scale, offset, and varianceEpsilon")}function ua(t,e,n,r,s,a){null==a&&(a=.001);const i=Ht(t,"x","batchNorm"),o=Ht(e,"mean","batchNorm"),l=Ht(n,"variance","batchNorm");let u,c;null!=s&&(u=Ht(s,"scale","batchNorm")),null!=r&&(c=Ht(r,"offset","batchNorm")),v(o.rank===l.rank,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),v(null==c||o.rank===c.rank,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),v(null==u||o.rank===u.rank,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");const h=function(t){let e;return e=0===t.rank||1===t.rank?t.as4D(1,1,1,t.size):2===t.rank?t.as4D(1,1,t.shape[0],t.shape[1]):3===t.rank?t.as4D(1,t.shape[0],t.shape[1],t.shape[2]):t,e}(i),d={x:h,scale:u,offset:c,mean:o,variance:l},p={varianceEpsilon:a},f=Ft.runKernelFunc((t,e)=>(e([h,o,l,u]),t.batchNormalization(h,ca(o),ca(l),a,ca(u),ca(c))),d,null,"FusedBatchNorm",p);return Ze(f,i.shape)}function ca(t){return null==t?null:0===t.rank?t.as1D():1===t.rank?t:2===t.rank?t.as4D(1,1,t.shape[0],t.shape[1]):3===t.rank?t.as4D(1,t.shape[0],t.shape[1],t.shape[2]):t}const ha=ie({batchNormalization_:function(t,e,n,r=.001,s,a){return la(),ua(t,e,n,a,s,r)}}),da=ie({batchNorm_:ua});function pa(t,e,n,r,s,a){const i=Ht(t,"x","batchNorm"),o=Ht(e,"mean","batchNorm"),l=Ht(n,"variance","batchNorm");let u,c;return null!=s&&(u=Ht(s,"scale","batchNorm")),null!=r&&(c=Ht(r,"offset","batchNorm")),v(2===i.rank,()=>"Error in batchNorm3D: x must be rank 3 but got rank "+i.rank+"."),v(2===o.rank||1===o.rank,()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${o.rank}.`),v(2===l.rank||1===l.rank,()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`),null!=u&&v(2===u.rank||1===u.rank,()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`),null!=c&&v(2===c.rank||1===c.rank,()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`),da(i,o,l,c,u,a)}const fa=ie({batchNormalization2d_:function(t,e,n,r=.001,s,a){return la(),pa(t,e,n,a,s,r)}}),ma=ie({batchNorm2d_:pa});function ga(t,e,n,r,s,a){const i=Ht(t,"x","batchNorm"),o=Ht(e,"mean","batchNorm"),l=Ht(n,"variance","batchNorm");let u,c;return null!=s&&(u=Ht(s,"scale","batchNorm")),null!=r&&(c=Ht(r,"offset","batchNorm")),v(3===i.rank,()=>"Error in batchNorm3D: x must be rank 3 but got rank "+i.rank+"."),v(3===o.rank||1===o.rank,()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${o.rank}.`),v(3===l.rank||1===l.rank,()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`),null!=u&&v(3===u.rank||1===u.rank,()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`),null!=c&&v(3===c.rank||1===c.rank,()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`),da(i,o,l,c,u,a)}const ya=ie({batchNormalization3d_:function(t,e,n,r=.001,s,a){return la(),ga(t,e,n,a,s,r)}}),ba=ie({batchNorm3d_:ga});function xa(t,e,n,r,s,a){const i=Ht(t,"x","batchNorm"),o=Ht(e,"mean","batchNorm"),l=Ht(n,"variance","batchNorm");let u,c;return null!=s&&(u=Ht(s,"scale","batchNorm")),null!=r&&(c=Ht(r,"offset","batchNorm")),v(4===i.rank,()=>"Error in batchNorm4D: x must be rank 4 but got rank "+i.rank+"."),v(4===o.rank||1===o.rank,()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${o.rank}.`),v(4===l.rank||1===l.rank,()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`),null!=u&&v(4===u.rank||1===u.rank,()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`),null!=c&&v(4===c.rank||1===c.rank,()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`),da(i,o,l,c,u,a)}const wa=ie({batchNormalization4d_:function(t,e,n,r=.001,s,a){return la(),xa(t,e,n,a,s,r)}}),va=ie({batchNorm4d_:xa});const Ca=ie({clone_:function(t){const e=Ht(t,"x","clone",null);return Ft.runKernelFunc(()=>Ft.makeTensorFromDataId(e.dataId,e.shape,e.dtype),{x:e},null,"Identity")}});const Na=ie({broadcastTo_:function(t,e){let n=Ht(t,"broadcastTo","x");const r=n.shape;if(e.some(t=>!(t>0)||t%1!=0))throw new Error(`broadcastTo(): Invalid broadcast shape [${e}].`);if(e.length<n.rank)throw new Error(`broadcastTo(): shape.length=${e.length} < input.rank=${n.rank}.`);if(e.length>n.rank){const t=n.shape.slice();for(;t.length<e.length;)t.unshift(1);n=Ze(n,t)}const s=n.shape,a=Array.from(e);for(let t=e.length-1;t>=0;t--)if(s[t]===e[t])a[t]=1;else if(1!==n.shape[t])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${e}].`);if(0===a.map((t,e)=>t>1?e:-1).filter(t=>t>=0).length)return Ca(n);const i={x:n},o={shape:e,inputShape:s};return Ft.runKernelFunc(t=>t.tile(n,a),i,null,"BroadcastTo",o)}});const Sa=ie({concat1d_:function(t){return Ge(t,0)}});const ka=ie({concat2d_:function(t,e){return Ge(t,e)}});const Ia=ie({concat3d_:function(t,e){return Ge(t,e)}});const Ea=ie({concat4d_:function(t,e){return Ge(t,e)}});function $a(t,e){const n=[];for(let t=0;t<e.length;t++)e[t]&&n.push(t);const r=je(t,"int32"),s=je([n.length,t.length],"int32");for(let e=0;e<n.length;e++){const a=r.indexToLoc(n[e]),i=e*t.length;s.values.set(a,i)}return s.toTensor()}const Aa=ie({logicalAnd_:function(t,e){const n=Ht(t,"a","logicalAnd","bool"),r=Ht(e,"b","logicalAnd","bool");return Vt(n.shape,r.shape),Ft.runKernelFunc(t=>t.logicalAnd(n,r),{a:n,b:r},null,"LogicalAnd")}}),Ra=ie({logicalNot_:function(t){const e=Ht(t,"x","logicalNot","bool");return Ft.runKernelFunc(t=>t.logicalNot(e),{$x:e})}}),Ta=ie({logicalOr_:function(t,e){const n=Ht(t,"a","logicalOr","bool"),r=Ht(e,"b","logicalOr","bool");return Vt(n.shape,r.shape),Ft.runKernelFunc(t=>t.logicalOr(n,r),{$a:n,$b:r})}}),Da=ie({logicalXor_:function(t,e){const n=Ht(t,"a","logicalXor","bool"),r=Ht(e,"b","logicalXor","bool");return Vt(n.shape,r.shape),Ta(t,e).logicalAnd(Aa(t,e).logicalNot())}}),_a=ie({where_:function(t,e,n){const r=Ht(e,"a","where"),s=Ht(n,"b","where"),a=Ht(t,"condition","where","bool");return C(r.shape,s.shape,"Error in where: "),1===a.rank?v(a.shape[0]===r.shape[0],()=>"The first dimension of `a` must match the size of `condition`."):C(a.shape,s.shape,"Error in where: "),Ft.runKernelFunc((t,e)=>{const n=t.select(a,r,s);return e([a]),n},{$condition:a,$a:r,$b:s},(t,e)=>{const[n]=e;return{$condition:()=>Ie(n).toFloat(),$a:()=>t.mul(n.cast(t.dtype)),$b:()=>t.mul(n.logicalNot().cast(t.dtype))}})}}),Oa=async function(t){const e=Ht(t,"condition","whereAsync","bool"),n=await e.data(),r=$a(e.shape,n);return t!==e&&e.dispose(),r};const Fa=ie({divNoNan_:function(t,e){let n=Ht(t,"a","div"),r=Ht(e,"b","div");[n,r]=$t(n,r);const s=nr(n,r),a=Ie(s),i=r.equal(a);return _a(i,a,s)}});const Ma=ie({eye_:function(t,e,n,r="float32"){null==e&&(e=t);const s=je([t,e],r),a=t<=e?t:e;for(let t=0;t<a;++t)s.set(1,t,t);const i=s.toTensor().as2D(t,e);if(null==n)return i;if(1===n.length)return ir(Je(i,0),[n[0],1,1]);if(2===n.length)return ir(Je(Je(i,0),0),[n[0],n[1],1,1]);if(3===n.length)return ir(Je(Je(Je(i,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});const za=ie({multinomial_:function(t,e,n,r=!1){const s=Ht(t,"logits","multinomial"),a=s.size,i=s.rank;if(a<2)throw new Error("Error in multinomial: you need at least 2 outcomes, but got "+a+".");if(i>2)throw new Error("Rank of probabilities must be 1 or 2, but is "+i);n=n||Math.random();const o=1===i?s.as2D(1,-1):s,l=Ft.runKernelFunc(t=>t.multinomial(o,r,e,n),{logits2D:o});return 1===i?l.as1D():l}});const La=ie({notEqual_:function(t,e){let n=Ht(t,"a","notEqual"),r=Ht(e,"b","notEqual");[n,r]=$t(n,r),Vt(n.shape,r.shape);const s={a:n,b:r};return Ft.runKernelFunc(t=>t.notEqual(n,r),s,null,"NotEqual")}});const Ba=ie({pad1d_:function(t,e,n=0){return v(2===e.length,()=>"Invalid number of paddings. Must be length of 2."),mr(t,[e],n)}});const Pa=ie({pad2d_:function(t,e,n=0){return v(2===e.length&&2===e[0].length&&2===e[1].length,()=>"Invalid number of paddings. Must be length of 2 each."),mr(t,e,n)}});const Wa=ie({pad3d_:function(t,e,n=0){return v(3===e.length&&2===e[0].length&&2===e[1].length&&2===e[2].length,()=>"Invalid number of paddings. Must be length of 2 each."),mr(t,e,n)}});const Va=ie({pad4d_:function(t,e,n=0){return v(4===e.length&&2===e[0].length&&2===e[1].length&&2===e[2].length&&2===e[3].length,()=>"Invalid number of paddings. Must be length of 2 each."),mr(t,e,n)}});const Ua=ie({rand_:function(t,e,n){const r=k(t);let s=null;if(null==n||"float32"===n)s=new Float32Array(r);else if("int32"===n)s=new Int32Array(r);else{if("bool"!==n)throw new Error("Unknown data type "+n);s=new Uint8Array(r)}for(let t=0;t<r;t++)s[t]=e();return Ft.makeTensor(s,t,n)}});var Ga=_r((function(t){!function(t,e,n){function r(t){var e,n=this,r=(e=4022871197,function(t){t=t.toString();for(var n=0;n<t.length;n++){var r=.02519603282416938*(e+=t.charCodeAt(n));r-=e=r>>>0,e=(r*=e)>>>0,e+=4294967296*(r-=e)}return 2.3283064365386963e-10*(e>>>0)});n.next=function(){var t=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=t-(n.c=0|t)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(t),n.s0<0&&(n.s0+=1),n.s1-=r(t),n.s1<0&&(n.s1+=1),n.s2-=r(t),n.s2<0&&(n.s2+=1),r=null}function s(t,e){return e.c=t.c,e.s0=t.s0,e.s1=t.s1,e.s2=t.s2,e}function a(t,e){var n=new r(t),a=e&&e.state,i=n.next;return i.int32=function(){return 4294967296*n.next()|0},i.double=function(){return i()+11102230246251565e-32*(2097152*i()|0)},i.quick=i,a&&("object"==typeof a&&s(a,n),i.state=function(){return s(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.alea=a}(0,t,!1)})),ja=_r((function(t){!function(t,e,n){function r(t){var e=this,n="";e.x=0,e.y=0,e.z=0,e.w=0,e.next=function(){var t=e.x^e.x<<11;return e.x=e.y,e.y=e.z,e.z=e.w,e.w^=e.w>>>19^t^t>>>8},t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),e.next()}function s(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e}function a(t,e){var n=new r(t),a=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&s(a,n),i.state=function(){return s(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.xor128=a}(0,t,!1)})),qa=_r((function(t){!function(t,e,n){function r(t){var e=this,n="";e.next=function(){var t=e.x^e.x>>>2;return e.x=e.y,e.y=e.z,e.z=e.w,e.w=e.v,(e.d=e.d+362437|0)+(e.v=e.v^e.v<<4^t^t<<1)|0},e.x=0,e.y=0,e.z=0,e.w=0,e.v=0,t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),r==n.length&&(e.d=e.x<<10^e.x>>>4),e.next()}function s(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e.v=t.v,e.d=t.d,e}function a(t,e){var n=new r(t),a=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&s(a,n),i.state=function(){return s(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.xorwow=a}(0,t,!1)})),Ha=_r((function(t){!function(t,e,n){function r(t){var e=this;e.next=function(){var t,n,r=e.x,s=e.i;return t=r[s],n=(t^=t>>>7)^t<<24,n^=(t=r[s+1&7])^t>>>10,n^=(t=r[s+3&7])^t>>>3,n^=(t=r[s+4&7])^t<<7,t=r[s+7&7],n^=(t^=t<<13)^t<<9,r[s]=n,e.i=s+1&7,n},function(t,e){var n,r=[];if(e===(0|e))r[0]=e;else for(e=""+e,n=0;n<e.length;++n)r[7&n]=r[7&n]<<15^e.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],t.x=r,t.i=0,n=256;n>0;--n)t.next()}(e,t)}function s(t,e){return e.x=t.x.slice(),e.i=t.i,e}function a(t,e){null==t&&(t=+new Date);var n=new r(t),a=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,a&&(a.x&&s(a,n),i.state=function(){return s(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.xorshift7=a}(0,t,!1)})),Ka=_r((function(t){!function(t,e,n){function r(t){var e=this;e.next=function(){var t,n,r=e.w,s=e.X,a=e.i;return e.w=r=r+1640531527|0,n=s[a+34&127],t=s[a=a+1&127],n^=n<<13,t^=t<<17,n^=n>>>15,t^=t>>>12,n=s[a]=n^t,e.i=a,n+(r^r>>>16)|0},function(t,e){var n,r,s,a,i,o=[],l=128;for(e===(0|e)?(r=e,e=null):(e+="\0",r=0,l=Math.max(l,e.length)),s=0,a=-32;a<l;++a)e&&(r^=e.charCodeAt((a+32)%e.length)),0===a&&(i=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,a>=0&&(i=i+1640531527|0,s=0==(n=o[127&a]^=r+i)?s+1:0);for(s>=128&&(o[127&(e&&e.length||0)]=-1),s=127,a=512;a>0;--a)r=o[s+34&127],n=o[s=s+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,o[s]=r^n;t.w=i,t.X=o,t.i=s}(e,t)}function s(t,e){return e.i=t.i,e.w=t.w,e.X=t.X.slice(),e}function a(t,e){null==t&&(t=+new Date);var n=new r(t),a=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,a&&(a.X&&s(a,n),i.state=function(){return s(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.xor4096=a}(0,t,!1)})),Xa=_r((function(t){!function(t,e,n){function r(t){var e=this,n="";e.next=function(){var t=e.b,n=e.c,r=e.d,s=e.a;return t=t<<25^t>>>7^n,n=n-r|0,r=r<<24^r>>>8^s,s=s-t|0,e.b=t=t<<20^t>>>12^n,e.c=n=n-r|0,e.d=r<<16^n>>>16^s,e.a=s-t|0},e.a=0,e.b=0,e.c=-1640531527,e.d=1367130551,t===Math.floor(t)?(e.a=t/4294967296|0,e.b=0|t):n+=t;for(var r=0;r<n.length+20;r++)e.b^=0|n.charCodeAt(r),e.next()}function s(t,e){return e.a=t.a,e.b=t.b,e.c=t.c,e.d=t.d,e}function a(t,e){var n=new r(t),a=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&s(a,n),i.state=function(){return s(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.tychei=a}(0,t,!1)})),Ya=_r((function(t){!function(e,n){var r,s=this,a=n.pow(256,6),i=n.pow(2,52),o=2*i;function l(t,l,p){var f=[],m=h(function t(e,n){var r,s=[],a=typeof e;if(n&&"object"==a)for(r in e)try{s.push(t(e[r],n-1))}catch(t){}return s.length?s:"string"==a?e:e+"\0"}((l=1==l?{entropy:!0}:l||{}).entropy?[t,d(e)]:null==t?function(){try{var t;return r&&(t=r.randomBytes)?t=t(256):(t=new Uint8Array(256),(s.crypto||s.msCrypto).getRandomValues(t)),d(t)}catch(t){var n=s.navigator,a=n&&n.plugins;return[+new Date,s,a,s.screen,d(e)]}}():t,3),f),g=new u(f),y=function(){for(var t=g.g(6),e=a,n=0;t<i;)t=256*(t+n),e*=256,n=g.g(1);for(;t>=o;)t/=2,e/=2,n>>>=1;return(t+n)/e};return y.int32=function(){return 0|g.g(4)},y.quick=function(){return g.g(4)/4294967296},y.double=y,h(d(g.S),e),(l.pass||p||function(t,e,r,s){return s&&(s.S&&c(s,g),t.state=function(){return c(g,{})}),r?(n.random=t,e):t})(y,m,"global"in l?l.global:this==n,l.state)}function u(t){var e,n=t.length,r=this,s=0,a=r.i=r.j=0,i=r.S=[];for(n||(t=[n++]);s<256;)i[s]=s++;for(s=0;s<256;s++)i[s]=i[a=255&a+t[s%n]+(e=i[s])],i[a]=e;(r.g=function(t){for(var e,n=0,s=r.i,a=r.j,i=r.S;t--;)e=i[s=255&s+1],n=256*n+i[255&(i[s]=i[a=255&a+e])+(i[a]=e)];return r.i=s,r.j=a,n})(256)}function c(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function h(t,e){for(var n,r=t+"",s=0;s<r.length;)e[255&s]=255&(n^=19*e[255&s])+r.charCodeAt(s++);return d(e)}function d(t){return String.fromCharCode.apply(0,t)}if(n.seedrandom=l,h(n.random(),e),t.exports){t.exports=l;try{r=require("crypto")}catch(t){}}}([],Math)}));Ya.alea=Ga,Ya.xor128=ja,Ya.xorwow=qa,Ya.xorshift7=Ha,Ya.xor4096=Ka,Ya.tychei=Xa;var Ja=Ya.alea;class Za{constructor(t,e,n,r,s){this.mean=t,this.stdDev=e,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=s||Math.random();this.random=Ja(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const t=this.nextVal;return this.nextVal=NaN,t}let t,e,n=!1;for(;!n;){let r,s,a;do{r=2*this.random()-1,s=2*this.random()-1,a=r*r+s*s}while(a>=1||0===a);const i=Math.sqrt(-2*Math.log(a)/a);t=this.mean+this.stdDev*r*i,e=this.mean+this.stdDev*s*i,this.truncated&&!this.isValidTruncated(t)||(n=!0)}return this.truncated&&!this.isValidTruncated(e)||(this.nextVal=this.convertValue(e)),this.convertValue(t)}convertValue(t){return null==this.dtype||"float32"===this.dtype?t:Math.round(t)}isValidTruncated(t){return t<=this.upper&&t>=this.lower}}class Qa{constructor(t,e,n,r){this.alpha=t,this.beta=1/e,this.dtype=n;const s=r||Math.random();this.randu=Ja(s.toString()),this.randn=new Za(0,1,n,!1,this.randu()),this.d=t<1?t+2/3:t-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let t,e,n,r,s,a;for(;;){do{r=this.randn.nextValue(),a=1+this.c*r}while(a<=0);if(a*=a*a,t=r*r,e=1-.331*t*t,n=.5*t+this.d*(1-a+Math.log(a)),s=this.randu(),s<e||Math.log(s)<n)break}return a=1/this.beta*this.d*a,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}convertValue(t){return"float32"===this.dtype?t:Math.round(t)}}class ti{constructor(t=0,e=1,n,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=t,this.range=e-t,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${t} - ${e} <= 1 and dtype is not float`);this.random=Ja(r)}convertValue(t){return this.canReturnFloat()?t:Math.round(t)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const ei=ie({randomGamma_:function(t,e,n=1,r="float32",s){if(null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error("Unsupported data type "+r);const a=new Qa(e,n,r,s),i=je(t,r);for(let t=0;t<i.values.length;t++)i.values[t]=a.nextValue();return i.toTensor()}});const ni=ie({randomNormal_:function(t,e=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error("Unsupported data type "+r);const a=new Za(e,n,r,!1,s),i=je(t,r);for(let t=0;t<i.values.length;t++)i.values[t]=a.nextValue();return i.toTensor()}});const ri=ie({randomUniform_:function(t,e=0,n=1,r="float32",s){const a=je(t,r),i=new ti(e,n,null,s);for(let t=0;t<a.values.length;t++)a.values[t]=i.nextValue();return a.toTensor()}});const si=ie({squaredDifference_:function(t,e){let n=Ht(t,"a","squaredDifference"),r=Ht(e,"b","squaredDifference");[n,r]=$t(n,r),Vt(n.shape,r.shape);const s={a:n,b:r};return Ft.runKernelFunc((t,e)=>{const s=t.squaredDifference(n,r);return e([n,r]),s},s,null,"SquaredDifference",{})}});const ai=ie({truncatedNormal_:function(t,e=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error("Unsupported data type $ { dtype }");const a=new Za(e,n,r,!0,s),i=je(t,r);for(let t=0;t<i.values.length;t++)i.values[t]=a.nextValue();return i.toTensor()}});const ii=ie({equal_:function(t,e){let n=Ht(t,"a","equal"),r=Ht(e,"b","equal");return[n,r]=$t(n,r),Vt(n.shape,r.shape),Ft.runKernelFunc(t=>t.equal(n,r),{$a:n,$b:r})}}),oi=ie({equalStrict_:function(t,e){const n=Ht(t,"a","equalStrict"),r=Ht(e,"b","equalStrict");return C(n.shape,r.shape,"Error in equalStrict: "),n.equal(r)}}),li=ie({greater_:function(t,e){let n=Ht(t,"a","greater"),r=Ht(e,"b","greater");return[n,r]=$t(n,r),Vt(n.shape,r.shape),Ft.runKernelFunc(t=>t.greater(n,r),{a:n,b:r},null,"Greater")}}),ui=ie({greaterEqual_:function(t,e){let n=Ht(t,"a","greaterEqual"),r=Ht(e,"b","greaterEqual");return[n,r]=$t(n,r),Vt(n.shape,r.shape),Ft.runKernelFunc((t,e)=>{const s=t.greaterEqual(n,r);return e([n,r]),s},{a:n,b:r},(t,e)=>{const[n,r]=e;return{a:()=>Ie(n),b:()=>Ie(r)}},"GreaterEqual")}}),ci=ie({greaterEqualStrict_:function(t,e){const n=Ht(t,"a","greaterEqualStrict"),r=Ht(e,"b","greaterEqualStrict");return C(n.shape,r.shape,"Error in greaterEqualStrict: "),n.greaterEqual(r)}}),hi=ie({greaterStrict_:function(t,e){const n=Ht(t,"a","greaterStrict"),r=Ht(e,"b","greaterStrict");return C(n.shape,r.shape,"Error in greaterStrict: "),n.greater(r)}}),di=ie({less_:function(t,e){let n=Ht(t,"a","less"),r=Ht(e,"b","less");return[n,r]=$t(n,r),Vt(n.shape,r.shape),Ft.runKernelFunc(t=>t.less(n,r),{a:n,b:r},null,"Less")}}),pi=ie({lessEqual_:function(t,e){let n=Ht(t,"a","lessEqual"),r=Ht(e,"b","lessEqual");return[n,r]=$t(n,r),Vt(n.shape,r.shape),Ft.runKernelFunc((t,e)=>{const s=t.lessEqual(n,r);return e([n,r]),s},{a:n,b:r},null,"LessEqual")}}),fi=ie({lessEqualStrict_:function(t,e){const n=Ht(t,"a","lessEqualStrict"),r=Ht(e,"b","lessEqualStrict");return C(n.shape,r.shape,"Error in lessEqualStrict: "),n.lessEqual(r)}}),mi=ie({lessStrict_:function(t,e){const n=Ht(t,"a","lessStrict"),r=Ht(e,"b","lessStrict");return C(n.shape,r.shape,"Error in lessStrict: "),n.less(r)}}),gi=ie({notEqualStrict_:function(t,e){const n=Ht(t,"a","notEqualStrict"),r=Ht(e,"b","notEqualStrict");return C(n.shape,r.shape,"Error in notEqualStrict: "),n.notEqual(r)}});function yi(t){return t<=30?t:K(t,Math.floor(Math.sqrt(t)))}function bi(t,e,n){const r=t.shape[n],s=[];let a=1,i=1;for(let e=0;e<n;e++)s.push(t.shape[e]),a*=t.shape[e];for(let t=0;t<e.rank;t++)s.push(e.shape[t]);for(let e=n+1;e<t.rank;e++)s.push(t.shape[e]),i*=t.shape[e];return{batchSize:a,sliceSize:i,dimSize:r,outputShape:s}}var xi=Object.freeze({__proto__:null,segOpComputeOptimalWindowSize:function(t,e){let n,r=!1;for(t<=30?(n=t,r=!0):n=K(t,Math.floor(Math.sqrt(t)));!r;)n>e||n===t?r=!0:n=K(t,n+1);return n},computeOutShape:function(t,e,n){const r=[],s=t.length;for(let a=0;a<s;a++)a!==e?r.push(t[a]):r.push(n);return r},collectGatherOpShapeInfo:bi});function wi(t,e){const n=[];for(let r=t;r<e;++r)n.push(r);return n}function vi(t){const e=[];for(let n=0;n<t.length;++n)for(let r=0;r<t[n].length;++r)e.push(t[n][r]);return e}const Ci=ie({gather_:function(t,e,n=0){const r=Ht(t,"x","gather"),s=Ht(e,"indices","gather","int32");n=_(n,r.shape)[0];const a=bi(r,s,n);return Ft.runKernelFunc((t,e)=>{const a=t.gather(r,s.flatten(),n);return e([s]),a},{x:r,indices:s},(t,e)=>{const[s]=e;return{x:()=>{const e=r.shape,a=s.size,i=e.slice(0,n),o=i.length,l=e.slice(n,e.length).slice(1),u=l.length,c=wi(0,o),h=wi(o+1,o+1+u),d=vi([i,[a],l]),p=t.reshape(d),f=s.reshape([a]),m=vi([[o],c,h]),g=p.transpose(m);let y=Ni(g,f,r.shape[n]);const b=se(m);return y=y.transpose(b),y},indices:()=>s}},"Gather",{axis:n}).reshape(a.outputShape)}}),Ni=ie({unsortedSegmentSum_:function(t,e,n){const r=Ht(t,"x","unsortedSegmentSum"),s=Ht(e,"segmentIds","unsortedSegmentSum","int32");return v(E(n),()=>"numSegments must be of dtype int"),Ft.runKernelFunc((t,e)=>{const a=t.unsortedSegmentSum(r,s,n);return e([s]),a},{$x:r},(t,e)=>{const[n]=e;return{$x:()=>function(t,e){const n=Gn(e,Ie(e)),r=Ci(t,n);let s=ui(e,de(0,"int32"));const a=r.rank-s.rank;for(let t=0;t<a;++t)s=Je(s,t+1);s=Aa(s,we(r.shape,"bool"));const i=Ie(r);return _a(s,r,i)}(t,n)}})}});const Si=async function(t,e,n){const r=Ht(t,"tensor","boolMask"),s=Ht(e,"mask","boolMask","bool"),a=null==n?0:n,i=s.rank,o=r.shape;v(i>0,()=>"mask cannot be scalar"),C(o.slice(a,a+i),s.shape,"mask's shape must match the first K dimensions of tensor's shape,");let l=1;for(let t=a;t<a+i;t++)l*=o[t];const u=o.slice(0,a).concat([l],o.slice(a+i)),c=r.reshape(u),h=s.reshape([-1]),d=await Oa(h),p=d.squeeze([1]),f=Ci(c,p,a);return t!==r&&r.dispose(),e!==s&&s.dispose(),p.dispose(),c.dispose(),h.dispose(),d.dispose(),f};function ki(t,e,n,r,s,a,i="channelsLast"){const[o,l]=Ri(e);let u;if("channelsLast"===i)u=[o,l,t[3],t[3]];else{if("channelsFirst"!==i)throw new Error("Unknown dataFormat "+i);u=[o,l,t[1],t[1]]}return Ei(t,u,n,r,s,a,!1,i)}function Ii(t,e,n,r,s,a,i="NDHWC"){const[o,l,u]=Ti(e);let c,h;if("NDHWC"===i)h="channelsLast",c=[o,l,u,t[4],t[4]];else{if("NCDHW"!==i)throw new Error("Unknown dataFormat "+i);h="channelsFirst",c=[o,l,u,t[1],t[1]]}return $i(t,c,n,r,s,!1,h,a)}function Ei(t,e,n,r,s,a,i=!1,o="channelsLast"){let[l,u,c,h]=[-1,-1,-1,-1];if("channelsLast"===o)[l,u,c,h]=t;else{if("channelsFirst"!==o)throw new Error("Unknown dataFormat "+o);[l,h,u,c]=t}const[d,p,,f]=e,[m,g]=Ri(n),[y,b]=Ri(r),x=Di(d,y),w=Di(p,b),{padInfo:C,outHeight:N,outWidth:S}=function(t,e,n,r,s,a,i,o){let l,u,c;if("number"==typeof t){l={top:t,bottom:t,left:t,right:t,type:0===t?"VALID":"NUMBER"};const s=function(t,e,n,r,s){null==r&&(r=Ai(t,e,n));const a=t[0],i=t[1],o=_i((a-e+2*r)/n+1,s);v(E(o),()=>`The output # of rows (${o}) must be an integer. Change the stride and/or zero pad parameters`);const l=_i((i-e+2*r)/n+1,s);return v(E(l),()=>`The output # of columns (${l}) must be an integer. Change the stride and/or zero pad parameters`),[o,l]}([e,n],a,r,t,o);u=s[0],c=s[1]}else if("same"===t){u=Math.ceil(e/r),c=Math.ceil(n/s);const t=Math.max(0,(u-1)*r+a-e),o=Math.max(0,(c-1)*s+i-n),h=Math.floor(t/2),d=t-h,p=Math.floor(o/2);l={top:h,bottom:d,left:p,right:o-p,type:"SAME"}}else{if("valid"!==t)throw Error("Unknown padding parameter: "+t);l={top:0,bottom:0,left:0,right:0,type:"VALID"},u=Math.ceil((e-a+1)/r),c=Math.ceil((n-i+1)/s)}return{padInfo:l,outHeight:u,outWidth:c}}(s,u,c,m,g,x,w,a),k=i?f*h:f;let I;return"channelsFirst"===o?I=[l,k,N,S]:"channelsLast"===o&&(I=[l,N,S,k]),{batchSize:l,dataFormat:o,inHeight:u,inWidth:c,inChannels:h,outHeight:N,outWidth:S,outChannels:k,padInfo:C,strideHeight:m,strideWidth:g,filterHeight:d,filterWidth:p,effectiveFilterHeight:x,effectiveFilterWidth:w,dilationHeight:y,dilationWidth:b,inShape:t,outShape:I,filterShape:e}}function $i(t,e,n,r,s,a=!1,i="channelsLast",o){let[l,u,c,h,d]=[-1,-1,-1,-1,-1];if("channelsLast"===i)[l,u,c,h,d]=t;else{if("channelsFirst"!==i)throw new Error("Unknown dataFormat "+i);[l,d,u,c,h]=t}const[p,f,m,,g]=e,[y,b,x]=Ti(n),[w,C,N]=Ti(r),S=Di(p,w),k=Di(f,C),I=Di(m,N),{padInfo:$,outDepth:A,outHeight:R,outWidth:T}=function(t,e,n,r,s,a,i,o,l,u,c){let h,d,p,f;if("number"==typeof t){h={top:t,bottom:t,left:t,right:t,front:t,back:t,type:0===t?"VALID":"NUMBER"};const a=function(t,e,n,r,s,a){null==s&&(s=Ai(t,e,r));const i=t[0],o=t[1],l=t[2],u=_i((i-e+2*s)/r+1,a);v(E(u),()=>`The output # of depths (${u}) must be an integer. Change the stride and/or zero pad parameters`);const c=_i((o-e+2*s)/r+1,a);v(E(c),()=>`The output # of rows (${c}) must be an integer. Change the stride and/or zero pad parameters`);const h=_i((l-e+2*s)/r+1,a);return v(E(h),()=>`The output # of columns (${h}) must be an integer. Change the stride and/or zero pad parameters`),[u,c,h,n]}([e,n,r,1],o,1,s,t,c);d=a[0],p=a[1],f=a[2]}else if("same"===t){d=Math.ceil(e/s),p=Math.ceil(n/a),f=Math.ceil(r/i);const t=(d-1)*s+o-e,c=(p-1)*a+l-n,m=(f-1)*i+u-r,g=Math.floor(t/2),y=t-g,b=Math.floor(c/2),x=c-b,w=Math.floor(m/2);h={top:b,bottom:x,left:w,right:m-w,front:g,back:y,type:"SAME"}}else{if("valid"!==t)throw Error("Unknown padding parameter: "+t);h={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},d=Math.ceil((e-o+1)/s),p=Math.ceil((n-l+1)/a),f=Math.ceil((r-u+1)/i)}return{padInfo:h,outDepth:d,outHeight:p,outWidth:f}}(s,u,c,h,y,b,x,S,k,I,o),D=a?g*d:g;let _;return"channelsFirst"===i?_=[l,D,A,R,T]:"channelsLast"===i&&(_=[l,A,R,T,D]),{batchSize:l,dataFormat:i,inDepth:u,inHeight:c,inWidth:h,inChannels:d,outDepth:A,outHeight:R,outWidth:T,outChannels:D,padInfo:$,strideDepth:y,strideHeight:b,strideWidth:x,filterDepth:p,filterHeight:f,filterWidth:m,effectiveFilterDepth:S,effectiveFilterHeight:k,effectiveFilterWidth:I,dilationDepth:w,dilationHeight:C,dilationWidth:N,inShape:t,outShape:_,filterShape:e}}function Ai(t,e,n,r=1){const s=Di(e,r);return Math.floor((t[0]*(n-1)-n+s)/2)}function Ri(t){return"number"==typeof t?[t,t,t]:2===t.length?[t[0],t[1],1]:t}function Ti(t){return"number"==typeof t?[t,t,t]:t}function Di(t,e){return e<=1?t:t+(t-1)*(e-1)}function _i(t,e){if(!e)return t;switch(e){case"round":return Math.round(t);case"ceil":return Math.ceil(t);case"floor":return Math.floor(t);default:throw new Error("Unknown roundingMode "+e)}}function Oi(t){const[e,n,r]=Ri(t);return 1===e&&1===n&&1===r}function Fi(t,e){return Oi(t)||Oi(e)}function Mi(t){if("NHWC"===t)return"channelsLast";if("NCHW"===t)return"channelsFirst";throw new Error("Unknown dataFormat "+t)}function zi(t,e,n,r,s,a="NHWC",i){v(t.length===e.rank,()=>`Length of inShape (${t.length}) and rank of dy (${e.rank}) must match`);let o=t,l=e,u=!1;3===e.rank&&(u=!0,l=e.as4D(1,e.shape[0],e.shape[1],e.shape[2]),o=[1,t[0],t[1],t[2]]),v(4===o.length,()=>"Error in conv2dDerInput: inShape must be length 4, but got length "+o.length+"."),v(4===l.rank,()=>"Error in conv2dDerInput: dy must be rank 4, but got rank "+l.rank),v(4===n.rank,()=>"Error in conv2dDerInput: filter must be rank 4, but got rank "+n.rank);const c="NHWC"===a?o[3]:o[1],h="NHWC"===a?l.shape[3]:l.shape[1];v(c===n.shape[2],()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`),v(h===n.shape[3],()=>`Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${n.shape[3]}.`),null!=i&&v(E(s),()=>`Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`);const d=Mi(a),p=Ei(o,n.shape,r,1,s,i,!1,d),f=Ft.runKernelFunc((t,e)=>{const r=t.conv2dDerInput(l,n,p);return e([n,l]),r},{dy4D:l,filter:n},(t,e)=>{const[n,o]=e;return{dy4D:()=>Wi(t,n,r,s,a,1,i),filter:()=>Ui(t,o,n.shape,r,s,a,i)}});return u?f.as3D(f.shape[1],f.shape[2],f.shape[3]):f}function Li(t){const[e,n,r]=function(t){return"number"==typeof t?[t,t,t]:2===t.length?[t[0],t[1],1]:t}(t);return 1===e&&1===n&&1===r}function Bi(t,e,n,r,s){v(t.length===e.rank,()=>`Length of inShape (${t.length}) and rank of dy (${e.rank}) must match`);let a=t,i=e,o=!1;4===e.rank&&(o=!0,i=e.as5D(1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]),a=[1,t[0],t[1],t[2],t[3]]);const l=a[4],u=i.shape[4];v(5===a.length,()=>"Error in conv3dDerInput: inShape must be length 5, but got length "+a.length+"."),v(5===i.rank,()=>"Error in conv3dDerInput: dy must be rank 5, but got rank "+i.rank),v(5===n.rank,()=>"Error in conv3dDerInput: filter must be rank 5, but got rank "+n.rank),v(l===n.shape[3],()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${n.shape[3]}.`),v(u===n.shape[4],()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${n.shape[4]}.`);const c=$i(a,n.shape,r,1,s),h=Ft.runKernelFunc(t=>t.conv3dDerInput(i,n,c),{dy5D:i});return o?h.as4D(h.shape[1],h.shape[2],h.shape[3],h.shape[4]):h}const Pi=ie({conv1d_:function(t,e,n,r,s="NWC",a=1,i){const o=Ht(t,"x","conv1d"),l=Ht(e,"filter","conv1d");let u=o,c=!1;2===o.rank&&(c=!0,u=o.as3D(1,o.shape[0],o.shape[1])),v(3===u.rank,()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`),v(3===l.rank,()=>"Error in conv1d: filter must be rank 3, but got rank "+l.rank+"."),null!=i&&v(E(r),()=>`Error in conv1d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`),v(u.shape[2]===l.shape[1],()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`),v(Fi(n,a),()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`),v("NWC"===s,()=>`Error in conv1d: got dataFormat of ${s} but only NWC is currently supported.`);const h=l.as4D(1,l.shape[0],l.shape[1],l.shape[2]),d=u.as4D(u.shape[0],1,u.shape[1],u.shape[2]),p=Wi(d,h,[1,n],r,"NHWC",[1,a],i);return c?p.as2D(p.shape[2],p.shape[3]):p.as3D(p.shape[0],p.shape[2],p.shape[3])}}),Wi=ie({conv2d_:function(t,e,n,r,s="NHWC",a=[1,1],i){const o=Ht(t,"x","conv2d"),l=Ht(e,"filter","conv2d");let u=o,c=!1;3===o.rank&&(c=!0,u=o.as4D(1,o.shape[0],o.shape[1],o.shape[2])),v(4===u.rank,()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`),v(4===l.rank,()=>"Error in conv2d: filter must be rank 4, but got rank "+l.rank+"."),null!=i&&v(E(r),()=>`Error in conv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`);const h="NHWC"===s?u.shape[3]:u.shape[1];v(h===l.shape[2],()=>`Error in conv2d: depth of input (${h}) must match input depth for filter ${l.shape[2]}.`),v(Fi(n,a),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`);const d=Mi(s),p=Ei(u.shape,l.shape,n,a,r,i,!1,d),f=[l,u],m=Ft.runKernelFunc((t,e)=>{const n=t.conv2d(u,l,p);return e([l,u]),n},{x:u,filter:l},(t,e)=>{const[i,o]=e;return v(Oi(a),()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`),{x:()=>Gi(o.shape,t,i,n,r,s),filter:()=>Ui(o,t,i.shape,n,r,s)}},"Conv2D",p,f);return c?m.as3D(m.shape[1],m.shape[2],m.shape[3]):m}}),Vi=ie({conv3d_:function(t,e,n,r,s="NDHWC",a=[1,1,1]){const i=Ht(t,"x","conv3d"),o=Ht(e,"filter","conv3d");let l=i,u=!1;4===i.rank&&(u=!0,l=i.as5D(1,i.shape[0],i.shape[1],i.shape[2],i.shape[3])),v(5===l.rank,()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`),v(5===o.rank,()=>"Error in conv3d: filter must be rank 5, but got rank "+o.rank+"."),v(l.shape[4]===o.shape[3],()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${o.shape[3]}.`),v(function(t,e){return Li(t)||Li(e)}(n,a),()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`),v("NDHWC"===s,()=>`Error in conv3d: got dataFormat of ${s} but only NDHWC is currently supported.`);const c=$i(l.shape,o.shape,n,a,r),h=Ft.runKernelFunc((t,e)=>{const n=t.conv3d(l,o,c);return e([l,o]),n},{x:l,$filter:o},(t,e)=>{v(Li(a),()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`);const[s,i]=e;return{x:()=>Bi(s.shape,t,i,n,r),$filter:()=>function(t,e,n,r,s){let a=t;4===t.rank&&(a=t.as5D(1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]));let i=e;4===i.rank&&(i=e.as5D(1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]));v(5===a.rank,()=>"Error in conv3dDerFilter: input must be rank 5, but got shape "+a.shape+"."),v(5===i.rank,()=>"Error in conv3dDerFilter: dy must be rank 5, but got shape "+i.shape+"."),v(5===n.length,()=>"Error in conv3dDerFilter: filterShape must be length 5, but got "+n+"."),v(a.shape[4]===n[3],()=>`Error in conv3dDerFilter: depth of input ${a.shape[4]}) must match input depth in filter (${n[3]}.`),v(i.shape[4]===n[4],()=>`Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${n[4]}).`);const o=$i(a.shape,n,r,1,s);return Ft.runKernelFunc(t=>t.conv3dDerFilter(a,i,o),{x5D:a,dy5D:i})}(s,t,i.shape,n,r)}});return u?h.as4D(h.shape[1],h.shape[2],h.shape[3],h.shape[4]):h}}),Ui=ie({conv2dDerFilter_:function(t,e,n,r,s,a="NHWC",i){let o=t;3===t.rank&&(o=t.as4D(1,t.shape[0],t.shape[1],t.shape[2]));let l=e;3===l.rank&&(l=e.as4D(1,e.shape[0],e.shape[1],e.shape[2])),v(4===o.rank,()=>"Error in conv2dDerFilter: input must be rank 4, but got shape "+o.shape+"."),v(4===l.rank,()=>"Error in conv2dDerFilter: dy must be rank 4, but got shape "+l.shape+"."),v(4===n.length,()=>"Error in conv2dDerFilter: filterShape must be length 4, but got "+n+".");const u="NHWC"===a?o.shape[3]:o.shape[1],c="NHWC"===a?l.shape[3]:l.shape[1];v(u===n[2],()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${n[2]}.`),v(c===n[3],()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`),null!=i&&v(E(s),()=>`Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`);const h=Mi(a),d=Ei(o.shape,n,r,1,s,i,!1,h);return Ft.runKernelFunc(t=>t.conv2dDerFilter(o,l,d),{x4D:o,dy4D:l})}}),Gi=ie({conv2dDerInput_:zi}),ji=ie({depthwiseConv2d_:function(t,e,n,r,s="NHWC",a=[1,1],i){const o=Ht(t,"x","depthwiseConv2d"),l=Ht(e,"filter","depthwiseConv2d");let u=o,c=!1;3===o.rank&&(c=!0,u=o.as4D(1,o.shape[0],o.shape[1],o.shape[2])),v(4===u.rank,()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`),v(4===l.rank,()=>"Error in depthwiseConv2d: filter must be rank 4, but got rank "+l.rank+"."),v(u.shape[3]===l.shape[2],()=>`Error in depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${l.shape[2]}.`),null==a&&(a=[1,1]),v(Fi(n,a),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`),null!=i&&v(E(r),()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`);const h=Ei(u.shape,l.shape,n,a,r,i,!0),d=[u,l],p=Ft.runKernelFunc((t,e)=>{const n=t.depthwiseConv2D(u,l,h);return e([u,l]),n},{x:u,filter:l},(t,e)=>{v(Oi(a),()=>`Error in gradient of depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`);const[n,r]=e;return{x:()=>qi(n.shape,t,r,h),filter:()=>Hi(n,t,r.shape,h)}},"DepthwiseConv2dNative",h,d);return c?p.as3D(p.shape[1],p.shape[2],p.shape[3]):p}}),qi=ie({depthwiseConv2dDerInput_:function(t,e,n,r){let s=e,a=!1;3===e.rank&&(a=!0,s=e.as4D(1,e.shape[0],e.shape[1],e.shape[2]));const i=Ft.runKernelFunc(t=>t.depthwiseConv2DDerInput(s,n,r),{dy4D:s});return a?i.as3D(i.shape[1],i.shape[2],i.shape[3]):i}}),Hi=ie({depthwiseConv2dDerFilter_:function(t,e,n,r){let s=t;3===t.rank&&(s=t.as4D(1,t.shape[0],t.shape[1],t.shape[2]));let a=e;return 3===a.rank&&(a=e.as4D(1,e.shape[0],e.shape[1],e.shape[2])),Ft.runKernelFunc(t=>t.depthwiseConv2DDerFilter(s,a,r),{x4D:s,dy4D:a})}}),Ki=ie({separableConv2d_:function(t,e,n,r,s,a=[1,1],i="NHWC"){const o=Ht(t,"x","separableConv2d"),l=Ht(e,"depthwiseFilter","separableConv2d"),u=Ht(n,"pointwiseFilter","separableConv2d");let c=o,h=!1;if(3===o.rank&&(h=!0,c=o.as4D(1,o.shape[0],o.shape[1],o.shape[2])),"NCHW"===i)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");v(4===c.rank,()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`),v(4===l.rank,()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`),v(4===u.rank,()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`),v(1===u.shape[0],()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`),v(1===u.shape[1],()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`);const d=l.shape[2],p=l.shape[3];v(u.shape[2]===d*p,()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${d*p}, but got ${u.shape[2]}.`);const f=ji(c,l,r,s,i,a),m=Wi(f,u,1,"valid",i);return h?m.as3D(m.shape[1],m.shape[2],m.shape[3]):m}}),Xi=ie({conv2dTranspose_:function(t,e,n,r,s,a){return zi(n,Ht(t,"x","conv2dTranspose"),Ht(e,"filter","conv2dTranspose"),r,s,"NHWC",a)}}),Yi=ie({conv3dTranspose_:function(t,e,n,r,s){return Bi(n,Ht(t,"x","conv3dTranspose"),Ht(e,"filter","conv3dTranspose"),r,s)}});const Ji=ie({matMul_:function(t,e,n=!1,r=!1){let s=Ht(t,"a","matMul"),a=Ht(e,"b","matMul");[s,a]=$t(s,a);const i=n?s.shape[s.rank-2]:s.shape[s.rank-1],o=r?a.shape[a.rank-1]:a.shape[a.rank-2],l=n?s.shape[s.rank-1]:s.shape[s.rank-2],u=r?a.shape[a.rank-2]:a.shape[a.rank-1],c=s.shape.slice(0,-2),h=a.shape.slice(0,-2),d=k(c),p=k(h);v(s.rank>=2&&a.rank>=2&&s.rank===a.rank,()=>`Error in matMul: inputs must have the same rank of at least 2, got ranks ${s.rank} and ${a.rank}.`),v(I(c,h),()=>`Error in matMul: outer dimensions (${c}) and (${h}) of Tensors with shapes ${s.shape} and `+a.shape+" must match."),v(i===o,()=>`Error in matMul: inner shapes (${i}) and (${o}) of Tensors with shapes ${s.shape} and ${a.shape} and transposeA=${n} and transposeB=${r} must match.`);const f=s.shape.slice(0,-2).concat([l,u]),m=n?s.as3D(d,i,l):s.as3D(d,l,i),g=r?a.as3D(p,u,o):a.as3D(p,o,u),y={transposeA:n,transposeB:r};return Ft.runKernelFunc((t,e)=>{const s=t.batchMatMul(m,g,n,r);return e([m,g]),s},{a:m,b:g},(t,e)=>{const[s,a]=e;return n||r?!n&&r?{a:()=>t.matMul(a,!1,!1),b:()=>t.matMul(s,!0,!1)}:n&&!r?{a:()=>a.matMul(t,!1,!0),b:()=>s.matMul(t,!1,!1)}:{a:()=>a.matMul(t,!0,!0),b:()=>t.matMul(s,!0,!0)}:{a:()=>t.matMul(a,!1,!0),b:()=>s.matMul(t,!0,!1)}},"BatchMatMul",y).reshape(f)}}),Zi=ie({dot_:function(t,e){const n=Ht(t,"t1","dot"),r=Ht(e,"t2","dot");v(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${r.rank}.`);const s=1===n.rank?n.size:n.shape[1],a=1===r.rank?r.size:r.shape[0];return v(s===a,()=>`Error in dot: inner dimensions of inputs must match, but got ${s} and ${a}.`),1===n.rank&&1===r.rank?n.as2D(1,-1).matMul(r.as2D(-1,1)).asScalar():1===n.rank&&2===r.rank?n.as2D(1,-1).matMul(r.as2D(r.shape[0],r.shape[1])).as1D():2===n.rank&&1===r.rank?n.matMul(r.as2D(-1,1)).as1D():n.matMul(r.as2D(r.shape[0],r.shape[1]))}}),Qi=ie({outerProduct_:function(t,e){const n=Ht(t,"v1","outerProduct"),r=Ht(e,"v2","outerProduct");return v(1===n.rank&&1===r.rank,()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${r.rank}.`),n.as2D(-1,1).matMul(r.as2D(1,-1))}});const to=ie({reverse_:function(t,e){const n=Ht(t,"x","reverse");if(0===n.rank)return n.clone();const r=_(e,n.shape);return Ft.runKernelFunc(t=>t.reverse(n,r),{$x:n},t=>({$x:()=>t.reverse(r)})).reshapeAs(n)}}),eo=ie({reverse1d_:function(t){const e=Ht(t,"x","reverse");return v(1===e.rank,()=>`Error in reverse1D: x must be rank 1 but got rank ${e.rank}.`),to(e,0)}}),no=ie({reverse2d_:function(t,e){const n=Ht(t,"x","reverse");return v(2===n.rank,()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`),to(n,e)}}),ro=ie({reverse3d_:function(t,e){const n=Ht(t,"x","reverse");return v(3===n.rank,()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`),to(n,e)}}),so=ie({reverse4d_:function(t,e){const n=Ht(t,"x","reverse");return v(4===n.rank,()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`),to(n,e)}});function ao(t,e,n,r,s,a){const i=Ht(t,"x","maxPool");let o=i,l=!1;3===i.rank&&(l=!0,o=i.as4D(1,i.shape[0],i.shape[1],i.shape[2])),null==r&&(r=[1,1]),v(4===o.rank,()=>`Error in maxPool: input must be rank 4 but got rank ${o.rank}.`),v(Fi(n,r),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '${r}'`),null!=a&&v(E(s),()=>`Error in maxPool: pad must be an integer when using, dimRoundingMode ${a} but got pad ${s}.`);const u=ki(o.shape,e,n,r,s,a);if(1===u.filterWidth&&1===u.filterHeight&&I(u.inShape,u.outShape))return i.clone();const c=[o],h=Ft.runKernelFunc((t,e)=>{const n=t.maxPool(o,u);return e([o,n]),n},{x:o},(t,a)=>{const[i,o]=a;return{x:()=>function(t,e,n,r,s,a,i,o){const l=Ht(t,"dy","maxPoolBackprop"),u=Ht(e,"input","maxPoolBackprop"),c=Ht(n,"output","maxPoolBackprop");v(u.rank===l.rank,()=>`Rank of input (${u.rank}) does not match rank of dy (${l.rank})`),null==a&&(a=[1,1]);v(Fi(s,a),()=>`Error in maxPoolBackProp: Either strides or dilations must be 1. Got strides ${s} and dilations '${a}'`),v(4===l.rank,()=>"Error in maxPoolBackprop: dy must be rank 4 but got rank "+l.rank+"."),v(4===u.rank,()=>"Error in maxPoolBackprop: input must be rank 4 but got rank "+u.rank+"."),null!=o&&v(E(i),()=>`Error in maxPoolBackprop: pad must be an integer when using, dimRoundingMode ${o} but got pad ${i}.`);const h=ki(u.shape,r,s,a,i,o);return Ft.runKernelFunc(t=>t.maxPoolBackprop(l,u,c,h),{$dy:l,$input:u})}(t,i,o,e,n,r,s)}},"MaxPool",u,c);return l?h.as3D(h.shape[1],h.shape[2],h.shape[3]):h}function io(t,e,n,r,s,a){const i=Ht(t,"x","avgPool","float32");null==r&&(r=[1,1]),v(Fi(n,r),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '${r}'`);let o=i,l=!1;3===i.rank&&(l=!0,o=i.as4D(1,i.shape[0],i.shape[1],i.shape[2])),v(4===o.rank,()=>`Error in avgPool: x must be rank 4 but got rank ${o.rank}.`),null!=a&&v(E(s),()=>`Error in avgPool: pad must be an integer when using, dimRoundingMode ${a} but got pad ${s}.`);const u=ki(o.shape,e,n,r,s,a);if(1===u.filterWidth&&1===u.filterHeight&&I(u.inShape,u.outShape))return i.clone();let c=Ft.runKernelFunc(t=>t.avgPool(o,u),{x:o},t=>({x:()=>function(t,e,n,r,s,a){const i=Ht(t,"dy","avgPoolBackprop"),o=Ht(e,"input","avgPoolBackprop");v(o.rank===i.rank,()=>`Rank of input (${o.rank}) does not match rank of dy (${i.rank})`),null==s&&(s=[1,1]);v(Fi(r,s),()=>`Error in avgPoolBackprop: Either strides or dilations must be 1. Got strides ${r} and dilations '${s}'`);let l=o,u=i,c=!1;3===o.rank&&(c=!0,l=o.as4D(1,o.shape[0],o.shape[1],o.shape[2]),u=i.as4D(1,i.shape[0],i.shape[1],i.shape[2]));v(4===u.rank,()=>"Error in avgPoolBackprop: dy must be rank 4 but got rank "+u.rank+"."),v(4===l.rank,()=>"Error in avgPoolBackprop: input must be rank 4 but got rank "+l.rank+".");const h=ki(l.shape,n,r,s,a),d=Ft.runKernelFunc(t=>t.avgPoolBackprop(u,l,h),{dy4D:u,input4D:l});if(c)return d.as3D(d.shape[1],d.shape[2],d.shape[3]);return d}(t,o,e,n,r,s)}),"AvgPool",u);return c=c.cast(i.dtype),l?c.as3D(c.shape[1],c.shape[2],c.shape[3]):c}const oo=ie({maxPool_:function(t,e,n,r,s){return ao(t,e,n,1,r,s)}}),lo=ie({avgPool_:function(t,e,n,r,s){return io(t,e,n,1,r,s)}}),uo=ie({pool_:function(t,e,n,r,s,a){null==s&&(s=[1,1]),null==a&&(a=1),0===r&&(r="valid");const i=Ht(t,"x","maxPool");let o=i,l=!1;3===i.rank&&(l=!0,o=i.as4D(1,i.shape[0],i.shape[1],i.shape[2])),v(Fi(a,s),()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${s}'`);const u=ki(o.shape,e,a,s,r),c=[u.dilationHeight,u.dilationWidth];let h;h="same"===r?function(t,e){const n=t.map((t,n)=>t+(t-1)*(e[n]-1)).map(t=>t-1),r=n.map(t=>Math.floor(t/2)),s=n.map((t,e)=>t-r[e]);return n.map((t,e)=>[r[e],s[e]])}([u.filterHeight,u.filterWidth],c):[[0,0],[0,0]];const d=1===c[0]&&1===c[1],[p,f]=function(t,e,n){const r=n.map(t=>t[0]),s=n.map(t=>t[1]),a=t.concat(r,s),i=e.map((t,e)=>(t-a[e]%t)%t),o=s.map((t,e)=>t+i[e]),l=e.map((t,e)=>[r[e],o[e]]),u=e.map((t,e)=>[0,i[e]]);return[l,u]}([u.inHeight,u.inWidth],c,h),m=d?r:"valid",g=d?o:Qe(o,c,p),y=("avg"===n?()=>io(g,e,a,1,m):()=>ao(g,e,a,1,m))(),b=d?y:He(y,c,f);return l?b.as3D(b.shape[1],b.shape[2],b.shape[3]):b}}),co=ie({maxPool3d_:function(t,e,n,r,s,a="NDHWC",i){const o=Ht(t,"x","maxPool3d");let l=o,u=!1;4===o.rank&&(u=!0,l=o.as5D(1,o.shape[0],o.shape[1],o.shape[2],o.shape[3])),null==i&&(i=[1,1,1]),v(5===l.rank,()=>`Error in maxPool3d: x must be rank 5 but got rank ${l.rank}.`),v("NDHWC"===a,()=>"Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of "+a),v(Fi(n,i),()=>`Error in maxPool3d: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`),null!=s&&v(E(r),()=>`Error in maxPool3d: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`);const c=Ii(l.shape,e,n,i,r,s,a),h=Ft.runKernelFunc((t,e)=>{const n=t.maxPool3d(l,c);return e([l,n]),n},{x:l},(t,a)=>{const[o,l]=a;return{x:()=>function(t,e,n,r,s,a,i,o){const l=Ht(t,"dy","maxPool3dBackprop"),u=Ht(e,"input","maxPool3dBackprop"),c=Ht(n,"output","maxPool3dBackprop");let h=l,d=u,p=c,f=!1;4===u.rank&&(f=!0,h=l.as5D(1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]),d=u.as5D(1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]),p=c.as5D(1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]));v(5===h.rank,()=>"Error in maxPool3dBackprop: dy must be rank 5 but got rank "+h.rank+"."),v(5===d.rank,()=>"Error in maxPool3dBackprop: input must be rank 5 but got rank "+d.rank+"."),v(5===p.rank,()=>"Error in maxPool3dBackprop: output must be rank 5 but got rank "+p.rank+"."),null==a&&(a=[1,1,1]);v(Fi(s,a),()=>`Error in maxPool3dBackprop: Either strides or dilations must be 1. Got strides ${s} and dilations '${a}'`),null!=o&&v(E(i),()=>`Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode ${o} but got pad ${i}.`);const m=Ii(d.shape,r,s,a,i,o),g=Ft.runKernelFunc(t=>t.maxPool3dBackprop(h,d,p,m),{dy5D:h,input5D:d});if(f)return g.as4D(g.shape[1],g.shape[2],g.shape[3],g.shape[4]);return g}(t,o,l,e,n,i,r,s)}});return u?h.as4D(h.shape[1],h.shape[2],h.shape[3],h.shape[4]):h}}),ho=ie({avgPool3d_:function(t,e,n,r,s,a="NDHWC",i){const o=Ht(t,"x","avgPool3d","float32");let l=o,u=!1;4===o.rank&&(u=!0,l=o.as5D(1,o.shape[0],o.shape[1],o.shape[2],o.shape[3])),null==i&&(i=[1,1,1]),v(5===l.rank,()=>`Error in avgPool3d: x must be rank 5 but got rank ${l.rank}.`),v("NDHWC"===a,()=>"Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of "+a),v(Fi(n,i),()=>`Error in avgPool3d: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`),null!=s&&v(E(r),()=>`Error in avgPool3d: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`);const c=Ii(l.shape,e,n,i,r,s,a);let h=Ft.runKernelFunc(t=>t.avgPool3d(l,c),{x:l},t=>({x:()=>function(t,e,n,r,s,a,i){const o=Ht(t,"dy","avgPool3dBackprop"),l=Ht(e,"input","avgPool3dBackprop");let u=o,c=l,h=!1;4===l.rank&&(h=!0,u=o.as5D(1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]),c=l.as5D(1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]));v(5===u.rank,()=>"Error in avgPool3dBackprop: dy must be rank 5 but got rank "+u.rank+"."),v(5===c.rank,()=>"Error in avgPool3dBackprop: input must be rank 5 but got rank "+c.rank+"."),null==s&&(s=[1,1,1]);v(Fi(r,s),()=>`Error in avgPool3dBackprop: Either strides or dilations must be 1. Got strides ${r} and dilations '${s}'`),null!=i&&v(E(a),()=>`Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`);const d=Ii(c.shape,n,r,s,a,i),p=Ft.runKernelFunc(t=>t.avgPool3dBackprop(u,c,d),{dy5D:u,input5D:c});if(h)return p.as4D(p.shape[1],p.shape[2],p.shape[3],p.shape[4]);return p}(t,l,e,n,i,r,s)}));return h=h.cast(l.dtype),u?h.as4D(h.shape[1],h.shape[2],h.shape[3],h.shape[4]):h}}),po=ie({maxPoolWithArgmax_:function(t,e,n,r,s=!1){const a=Ht(t,"x","maxPoolWithArgmax"),i={filterSize:e,strides:n,pad:r,includeBatchInIndex:s},o=Ft.runKernel("MaxPoolWithArgmax",{x:a},i);return{result:o[0],indexes:o[1]}}}),fo=1.0507009873554805;const mo=ie({elu_:function(t){const e=Ht(t,"x","elu");return Ft.runKernelFunc((t,n)=>{const r=t.elu(e);return n([r]),r},{$x:e},(t,e)=>{const[n]=e;return{$x:()=>Ft.runKernelFunc(e=>e.eluDer(t,n),{dy:t,y:n})}})}}),go=ie({leakyRelu_:function(t,e=.2){const n=Ht(t,"x","leakyRelu");return Gn(de(e).mul(n),n)}}),yo=ie({prelu_:function(t,e){const n=Ht(t,"x","prelu"),r=Ht(e,"alpha","prelu");return Ft.runKernelFunc((t,e)=>{const s=t.prelu(n,r);return e([n,r]),s},{x:n,alpha:r},(t,e)=>{const[n,r]=e,s=n.greater(0);return{x:()=>_a(s,t,t.mul(r)),alpha:()=>{let e=_a(s,Ie(t),t.mul(n));const a=Wt(r.shape,t.shape);return a.length>0&&(e=e.sum(a)),e.reshape(r.shape)}}},"Prelu")}}),bo=ie({relu_:function(t){const e=Ht(t,"x","relu");return"bool"===e.dtype?e.toInt():Ft.runKernelFunc((t,n)=>{const r=t.relu(e);return n([e]),r},{x:e},(t,e)=>{const[n]=e;return{x:()=>t.mulStrict(n.step().toFloat())}},"Relu")}}),xo=ie({relu6_:function(t){const e=Ht(t,"x","relu6");return"bool"===e.dtype?e.toInt():Ft.runKernelFunc((t,n)=>{const r=t.relu6(e);return n([e]),r},{x:e},(t,e)=>{const[n]=e,r=n.lessEqual(6).mul(n.step());return{x:()=>t.mulStrict(r.toFloat())}},"Relu6")}}),wo=ie({selu_:function(t){const e=Ht(t,"x","selu");return Ft.runKernelFunc((t,n)=>{const r=t.selu(e);return n([e]),r},{$x:e},(t,e)=>{const[n]=e;return{$x:()=>{const e=n.greater(de(0)),r=de(1.7580993408473768),s=de(fo),a=t.mul(s),i=t.mul(r).mul(n.toFloat().exp());return _a(e,a,i)}}})}});const vo=ie({softmax_:function(t,e=-1){const n=Ht(t,"logits","softmax","float32");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${e}`);return Ft.runKernelFunc((t,r)=>{const s=t.softmax(n,e);return r([s]),s},{logits:n},(t,n)=>{const[r]=n,s=t.mul(r);return{logits:()=>s.sub(s.sum([e],!0).mul(r))}},"Softmax",{dim:e},[],[!0])}}),Co=ie({logSoftmax_:function(t,e=-1){const n=Ht(t,"logits","logSoftmax");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${e}`);return Yt((t,n)=>{const r=t.max(e,!0),s=t.sub(r),a=s.toFloat().sub(s.exp().sum(e,!0).log());n([a]);return{value:a,gradFunc:(t,n)=>{const[r]=n,s=r.exp();return t.sub(t.sum(e,!0).mul(s))}}})(n)}});const No=ie({localResponseNormalization_:function(t,e=5,n=1,r=1,s=.5){const a=Ht(t,"x","localResponseNormalization");v(4===a.rank||3===a.rank,()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`),v(E(e),()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${e}.`);let i=a,o=!1;3===a.rank&&(o=!0,i=a.as4D(1,a.shape[0],a.shape[1],a.shape[2]));const l=Ft.runKernelFunc((t,a)=>{const o=t.localResponseNormalization4D(i,e,n,r,s);return a([i,o]),o},{x4D:i},(t,a)=>{const[i,o]=a;return{x4D:()=>Ft.runKernelFunc(a=>a.LRNGrad(t,i,o,e,n,r,s),{})}});return o?l.as3D(l.shape[1],l.shape[2],l.shape[3]):l}});const So=ie({norm_:function(t,e="euclidean",n=null,r=!1){const s=function t(e,n,r=null){if(0===e.rank)return e.abs();if(1!==e.rank&&null===r)return t(e.reshape([-1]),n,r);if(1===e.rank||"number"==typeof r||Array.isArray(r)&&1===r.length){if(1===n)return e.abs().sum(r);if(n===1/0)return e.abs().max(r);if(n===-1/0)return e.abs().min(r);if("euclidean"===n||2===n)return e.abs().pow(de(2,"int32")).sum(r).sqrt();throw new Error("Error in norm: invalid ord value: "+n)}if(Array.isArray(r)&&2===r.length){if(1===n)return e.abs().sum(r[0]).max(r[1]-1);if(n===1/0)return e.abs().sum(r[1]).max(r[0]);if(n===-1/0)return e.abs().sum(r[1]).min(r[0]);if("fro"===n||"euclidean"===n)return e.square().sum(r).sqrt();throw new Error("Error in norm: invalid ord value: "+n)}throw new Error("Error in norm: invalid axis: "+r)}(t=Ht(t,"x","norm"),e,n);let a=s.shape;if(r){const e=_(n,t.shape);a=ee(s.shape,e)}return s.reshape(a)}});const ko=ie({basicLSTMCell_:function(t,e,n,r,s,a){const i=Ht(t,"forgetBias","basicLSTMCell"),o=Ht(e,"lstmKernel","basicLSTMCell"),l=Ht(n,"lstmBias","basicLSTMCell"),u=Ht(r,"data","basicLSTMCell"),c=Ht(s,"c","basicLSTMCell"),h=Ht(a,"h","basicLSTMCell"),d=u.concat(h,1).matMul(o).add(l),p=d.shape[0],f=d.shape[1]/4,m=[p,f],g=d.slice([0,0],m),y=d.slice([0,f],m),b=d.slice([0,2*f],m),x=d.slice([0,3*f],m),w=g.sigmoid().mulStrict(y.tanh()).addStrict(c.mulStrict(i.add(b).sigmoid())),v=w.tanh().mulStrict(x.sigmoid());return[w,v]}}),Io=ie({multiRNNCell_:function(t,e,n,r){const s=Ht(e,"data","multiRNNCell"),a=Kt(n,"c","multiRNNCell"),i=Kt(r,"h","multiRNNCell");let o=s;const l=[];for(let e=0;e<t.length;e++){const n=t[e](o,a[e],i[e]);l.push(n[0]),l.push(n[1]),o=n[1]}const u=[],c=[];for(let t=0;t<l.length;t+=2)u.push(l[t]),c.push(l[t+1]);return[u,c]}});const Eo=ie({movingAverage_:function(t,e,n,r,s=!0){const a=Ht(t,"v","movingAverage"),i=Ht(e,"x","movingAverage"),o=Ht(n,"decay","movingAverage");At(a,i),v(I(a.shape,i.shape),()=>"Shape mismatch in v and x");const l=de(1),u=l.sub(o);let c=i.sub(a).mul(u);if(s){v(null!=r,()=>"When using zeroDebias: true, step is required.");const t=Ht(r,"step","movingAverage");c=c.div(l.sub(Zn(o,t)))}return a.add(c)}});const $o=ie({stridedSlice_:function(t,e,n,r,s=0,a=0,i=0,o=0,l=0){if(null==r&&(r=new Array(e.length)),0!==i)throw new Error("ellipsis mask is not yet supported");let u=Ht(t,"x","stridedSlice");const c=yr(o),h=u.shape.slice();c.forEach(t=>{e[t]=0,n[t]=1,h.splice(t,0,1)}),u=u.reshape(h);for(let t=0;t<u.rank;t++)e[t]=xr(s,e,r,u.shape,t),n[t]=wr(a,n,r,u.shape,t),r[t]=r[t]||1;const d=yr(l);d.forEach(t=>{n[t]=e[t]+1,r[t]=1});const p=br(e,n,r),f=p.filter((t,e)=>-1===d.indexOf(e));return r.every(t=>1===t)?Sr(u,e,p).reshape(f):Ft.runKernelFunc(t=>t.stridedSlice(u,e,n,r),{$x:u}).reshape(f)}});const Ao=ie({topk_:function(t,e=1,n=!0){const r=Ht(t,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const s=r.shape[r.shape.length-1];if(e>s)throw new Error(`'k' passed to topk() must be <= the last dimension (${s}) but got `+e);const[a,i]=Ft.runKernelFunc(t=>t.topk(r,e,n),{$x:r});return{values:a,indices:i}}});const Ro=ie({scatterND_:function(t,e,n){const r=Ht(t,"indices","scatterND","int32"),s=Ht(e,"updates","scatterND");return Vs(s,r,n),Ft.runKernelFunc(t=>t.scatterND(r,s,n),{indices:r,updates:s},null,"ScatterNd",{shape:n})}});const To=ie({fft_:function(t){v("complex64"===t.dtype,()=>`The dtype for tf.spectral.fft() must be complex64 but got ${t.dtype}.`);const e=t.shape[t.shape.length-1],n=t.size/e,r=t.as2D(n,e);return Ft.runKernelFunc(t=>t.fft(r),{input:t}).reshape(t.shape)}}),Do=ie({ifft_:function(t){v("complex64"===t.dtype,()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${t.dtype}.`);const e=t.shape[t.shape.length-1],n=t.size/e,r=t.as2D(n,e);return Ft.runKernelFunc(t=>t.ifft(r),{input:t}).reshape(t.shape)}}),_o=ie({rfft_:function(t,e){v("float32"===t.dtype,()=>"The dtype for rfft() must be real value but got "+t.dtype);let n=t.shape[t.shape.length-1];const r=t.size/n;let s;if(null!=e&&e<n){const r=t.shape.map(t=>0),a=t.shape.map(t=>t);a[t.shape.length-1]=e,s=t.slice(r,a),n=e}else if(null!=e&&e>n){const r=t.shape.map(t=>t);r[t.shape.length-1]=e-n,s=t.concat(ve(r),t.shape.length-1),n=e}else s=t;const a=s.zerosLike(),i=oe(s,a).as2D(r,n),o=To(i),l=Math.floor(n/2)+1,u=le(o),c=ue(o),h=u.split([l,n-l],u.shape.length-1),d=c.split([l,n-l],c.shape.length-1),p=s.shape.slice();return p[s.shape.length-1]=l,oe(h[0],d[0]).reshape(p)}}),Oo=ie({irfft_:function(t){const e=t.shape[t.shape.length-1],n=t.size/e;if(e<=2){const r=t.as2D(n,e),s=Do(r);return le(s)}{const r=[n,2*(e-1)],s=le(t).as2D(n,e),a=ue(t).as2D(n,e),i=s.slice([0,1],[n,e-2]).reverse(1),o=a.slice([0,1],[n,e-2]).reverse(1).mul(de(-1)),l=s.concat(i,1),u=a.concat(o,1),c=oe(l,u).as2D(r[0],r[1]),h=Do(c);return le(h)}}});var Fo=Object.freeze({__proto__:null,fft:To,ifft:Do,rfft:_o,irfft:Oo});const Mo=ie({sparseToDense_:function(t,e,n,r=0){const s=Ht(t,"sparseIndices","sparseToDense","int32"),a=Ht(e,"sparseValues","sparseToDense"),i=Ht(r,"defaultValue","sparseToDense",a.dtype);return function(t,e,n,r){if("int32"!==t.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${t.shape}.`);const s=t.rank>0?t.shape[0]:1,a=t.rank>1?t.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);const i=e.size;if(0!==e.rank&&(1!==e.rank||i!==s))throw new Error(`sparseValues has incorrect shape ${e.shape}, should be [] or [${s}]`);if(e.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(s,a,n,i),Ft.runKernelFunc(t=>t.sparseToDense(s,a,n,i),{$sparseIndices:s,$sparseValues:a,$defaultValue:i})}});const zo=ie({gatherND_:function(t,e){const n=Ht(e,"indices","gatherND","int32"),r=Ht(t,"x","gatherND");return Ft.runKernelFunc(t=>t.gatherND(r,n),{x:r,indices:n},null,"GatherNd")}});const Lo=ie({diag_:function(t){const e=Ht(t,"x","diag").flatten(),n=[...t.shape,...t.shape];return Ft.runKernelFunc(t=>t.diag(e),{$x:e}).reshape(n)}});const Bo=ie({dropout_:function(t,e,n,r){const s=Ht(t,"x","dropout");if(v("float32"===s.dtype,()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${s.dtype} tensor instead.`),v(e>=0&&e<1,()=>`rate must be a float in the range [0, 1), but got ${e}.`),0===e)return t instanceof bt?s.clone():s;const a=function(t,e){if(null==e)return t.shape.slice();if(I(t.shape,e))return e;if(t.shape.length===e.length){const n=[];for(let r=0;r<t.shape.length;r++)null==e[r]&&null!=t.shape[r]?n.push(t.shape[r]):n.push(e[r]);return n}return e}(s,n),i=1-e,o=ri(a,0,1,"float32",r).add(i).floor().div(i);return s.mul(o)}});function Po(t,e,n){const r=1-t%2,s=new Float32Array(t);for(let a=0;a<t;++a){const i=2*Math.PI*a/(t+r-1);s[a]=e-n*Math.cos(i)}return pe(s,"float32")}const Wo=ie({hannWindow_:function(t){return Po(t,.5,.5)}}),Vo=ie({hammingWindow_:function(t){return Po(t,.54,.46)}}),Uo=ie({frame_:function(t,e,n,r=!1,s=0){let a=0;const i=[];for(;a+e<=t.size;)i.push(Sr(t,a,e)),a+=n;if(r)for(;a<t.size;){const r=a+e-t.size,o=Ge([Sr(t,a,e-r),Ce([r],s)]);i.push(o),a+=n}return 0===i.length?fe([],[0,e]):Ge(i).as2D(i.length,e)}}),Go=ie({stft_:function(t,e,n,r,s=Wo){var a;null==r&&(a=e,r=Math.floor(Math.pow(2,Math.ceil(Math.log(a)/Math.log(2)))));const i=Uo(t,e,n),o=Yn(i,s(e)),l=[];for(let t=0;t<i.shape[0];t++)l.push(_o(o.slice([t,0],[1,e]),r));return Ge(l)}});var jo=Object.freeze({__proto__:null,hannWindow:Wo,hammingWindow:Vo,frame:Uo,stft:Go});const qo=async function(t,e,n=1){const r=Ht(t,"predictions","inTopK"),s=Ht(e,"targets","inTopK");v(r.rank>1,()=>"inTopK() expects the predictions to be of rank 2 or higher, but got "+r.rank),v(r.rank-1===s.rank,()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${r.rank} and targets rank ${s.rank}`),C(r.shape.slice(0,r.shape.length-1),s.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const a=r.shape[r.shape.length-1];v(n>0&&n<=a,()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${a}), but got ${n}`);const i=await r.data(),o=await s.data(),[l,u]=[i.length/a,a],c=F("bool",l);for(let t=0;t<l;t++){const e=t*u,r=i.subarray(e,e+u),s=[];for(let t=0;t<r.length;t++)s.push({value:r[t],index:t});s.sort((t,e)=>e.value-t.value),c[t]=0;for(let e=0;e<n;e++)if(s[e].index===o[t]){c[t]=1;break}}return t!==r&&r.dispose(),e!==s&&s.dispose(),ce(c,s.shape,"bool")};var Ho;(Ho=t.Reduction||(t.Reduction={}))[Ho.NONE=0]="NONE",Ho[Ho.MEAN=1]="MEAN",Ho[Ho.SUM=2]="SUM",Ho[Ho.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS";const Ko=ie({absoluteDifference_:function(e,n,r,s=t.Reduction.SUM_BY_NONZERO_WEIGHTS){const a=Ht(e,"labels","absoluteDifference"),i=Ht(n,"predictions","absoluteDifference");let o=null;null!=r&&(o=Ht(r,"weights","absoluteDifference")),C(a.shape,i.shape,"Error in absoluteDifference: ");const l=a.sub(i).abs();return Xo(l,o,s)}}),Xo=ie({computeWeightedLoss_:function(e,n,r=t.Reduction.SUM_BY_NONZERO_WEIGHTS){const s=Ht(e,"losses","computeWeightedLoss");let a=null;null!=n&&(a=Ht(n,"weights","computeWeightedLoss"));const i=null==a?s:s.mul(a);if(r===t.Reduction.NONE)return i;if(r===t.Reduction.SUM)return i.sum();if(r===t.Reduction.MEAN){if(null==a)return i.mean();{const t=s.size/a.size,e=i.sum().div(a.sum());return t>1?e.div(de(t)):e}}if(r===t.Reduction.SUM_BY_NONZERO_WEIGHTS){if(null==a)return i.sum().div(de(s.size));{const t=a.mul(we(s.shape)).notEqual(de(0)).sum().toFloat();return i.sum().div(t)}}throw Error("Unknown reduction: "+r)}}),Yo=ie({cosineDistance_:function(e,n,r,s,a=t.Reduction.SUM_BY_NONZERO_WEIGHTS){const i=Ht(e,"labels","cosineDistance"),o=Ht(n,"predictions","cosineDistance");let l=null;null!=s&&(l=Ht(s,"weights","cosineDistance")),C(i.shape,o.shape,"Error in cosineDistance: ");const u=de(1).sub(i.mul(o).sum(r,!0));return Xo(u,l,a)}}),Jo=ie({hingeLoss_:function(e,n,r,s=t.Reduction.SUM_BY_NONZERO_WEIGHTS){let a=Ht(e,"labels","hingeLoss");const i=Ht(n,"predictions","hingeLoss");let o=null;null!=r&&(o=Ht(r,"weights","hingeLoss")),C(a.shape,i.shape,"Error in hingeLoss: ");const l=de(1);a=de(2).mul(a).sub(l);const u=l.sub(a.mul(i)).relu();return Xo(u,o,s)}}),Zo=ie({huberLoss_:function(e,n,r,s=1,a=t.Reduction.SUM_BY_NONZERO_WEIGHTS){const i=Ht(e,"labels","huberLoss"),o=Ht(n,"predictions","huberLoss");let l=null;null!=r&&(l=Ht(r,"weights","huberLoss")),C(i.shape,o.shape,"Error in huberLoss: ");const u=de(s),c=o.sub(i).abs(),h=qn(c,u),d=c.sub(h),p=de(.5).mul(h.square()).add(u.mul(d));return Xo(p,l,a)}}),Qo=ie({logLoss_:function(e,n,r,s=1e-7,a=t.Reduction.SUM_BY_NONZERO_WEIGHTS){const i=Ht(e,"labels","logLoss"),o=Ht(n,"predictions","logLoss");let l=null;null!=r&&(l=Ht(r,"weights","logLoss")),C(i.shape,o.shape,"Error in logLoss: ");const u=de(1),c=de(s),h=i.mul(o.add(c).log()).neg().sub(u.sub(i).mul(u.sub(o).add(c).log()));return Xo(h,l,a)}}),tl=ie({meanSquaredError_:function(e,n,r,s=t.Reduction.SUM_BY_NONZERO_WEIGHTS){const a=Ht(e,"labels","meanSquaredError"),i=Ht(n,"predictions","meanSquaredError");let o=null;null!=r&&(o=Ht(r,"weights","meanSquaredError")),C(a.shape,i.shape,"Error in meanSquaredError: ");const l=a.squaredDifference(i);return Xo(l,o,s)}}),el=ie({sigmoidCrossEntropy_:function(e,n,r,s=0,a=t.Reduction.SUM_BY_NONZERO_WEIGHTS){let i=Ht(e,"multiClassLabels","sigmoidCrossEntropy");const o=Ht(n,"logits","sigmoidCrossEntropy");let l=null;if(null!=r&&(l=Ht(r,"weights","sigmoidCrossEntropy")),C(i.shape,o.shape,"Error in sigmoidCrossEntropy: "),s>0){const t=de(s),e=de(1),n=de(.5);i=i.mul(e.sub(t)).add(n.mul(t))}const u=function(t,e){const n=Ht(t,"labels","sigmoidCrossEntropyWithLogits"),r=Ht(e,"logits","sigmoidCrossEntropyWithLogits");C(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");const s=r.relu(),a=r.mul(n),i=r.abs().neg().exp().log1p();return s.sub(a).add(i)}(i,o);return Xo(u,l,a)}}),nl=ie({softmaxCrossEntropy_:function(e,n,r,s=0,a=t.Reduction.SUM_BY_NONZERO_WEIGHTS){let i=Ht(e,"onehotLabels","softmaxCrossEntropy");const o=Ht(n,"logits","softmaxCrossEntropy");let l=null;if(null!=r&&(l=Ht(r,"weights","softmaxCrossEntropy")),C(i.shape,o.shape,"Error in softmaxCrossEntropy: "),s>0){const t=de(s),e=de(1),n=de(i.shape[1]);i=i.mul(e.sub(t)).add(t.div(n))}const u=function(t,e,n=-1){if(-1===n&&(n=e.rank-1),n!==e.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${e.rank} and dim was `+n);return Yt((t,e,r)=>{const s=e.logSumExp([n],!0),a=e.toFloat().sub(s);r([t,a]);return{value:a.mul(t).neg().sum([n]),gradFunc:(t,e)=>{const[r,s]=e,a=ee(t.shape,[n]);return[t.reshape(a).mul(r.toFloat().sub(s.exp())),t.reshape(a).mul(s.exp().sub(r.toFloat()))]}}})(t,e)}(i,o);return Xo(u,l,a)}});var rl=Object.freeze({__proto__:null,get Reduction(){return t.Reduction},absoluteDifference:Ko,computeWeightedLoss:Xo,cosineDistance:Yo,hingeLoss:Jo,huberLoss:Zo,logLoss:Qo,meanSquaredError:tl,sigmoidCrossEntropy:el,softmaxCrossEntropy:nl});function sl(t,e=!1){return Ft.tidy(()=>{if(2!==t.shape.length)throw new Error(`qr2d() requires a 2D Tensor, but got a ${t.shape.length}D Tensor.`);const n=t.shape[0],r=t.shape[1];let s=Ma(n),a=t.clone();const i=fe([[1]],[1,1]);let o=i.clone();const l=n>=r?r:n;for(let t=0;t<l;++t){const e=a,l=o,u=s;[o,a,s]=Ft.tidy(()=>{const e=a.slice([t,t],[n-t,1]),l=e.norm(),u=a.slice([t,t],[1,1]),c=fe([[-1]]).where(u.greater(0),fe([[1]])),h=u.sub(c.mul(l)),d=e.div(h);o=1===d.shape[0]?i.clone():i.concat(d.slice([1,0],[d.shape[0]-1,d.shape[1]]),0);const p=c.matMul(h).div(l).neg(),f=a.slice([t,0],[n-t,r]),m=p.mul(o),g=o.transpose();if(0===t)a=f.sub(m.matMul(g.matMul(f)));else{const e=f.sub(m.matMul(g.matMul(f)));a=a.slice([0,0],[t,r]).concat(e,0)}const y=m.transpose(),b=s.slice([0,t],[n,s.shape[1]-t]);if(0===t)s=b.sub(b.matMul(o).matMul(y));else{const e=b.sub(b.matMul(o).matMul(y));s=s.slice([0,0],[n,t]).concat(e,1)}return[o,a,s]}),ra([e,l,u])}return!e&&n>r&&(s=s.slice([0,0],[n,r]),a=a.slice([0,0],[r,r])),[s,a]})}const al=ie({bandPart_:function(t,e,n){if(e%1!=0)throw new Error(`bandPart(): numLower must be an integer, got ${e}.`);if(n%1!=0)throw new Error(`bandPart(): numUpper must be an integer, got ${n}.`);const r=Ht(t,"a","bandPart");if(r.rank<2)throw new Error(`bandPart(): Rank must be at least 2, got ${r.rank}.`);const s=r.shape,[a,i]=r.shape.slice(-2);if(!(e<=a))throw new Error(`bandPart(): numLower (${e}) must not be greater than the number of rows (${a}).`);if(!(n<=i))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${i}).`);e<0&&(e=a),n<0&&(n=i);const o=Se(0,a,1,"int32").reshape([-1,1]),l=Se(0,i,1,"int32"),u=ar(o,l),c=Aa(u.lessEqual(de(+e,"int32")),u.greaterEqual(de(-n,"int32"))),h=ve([a,i],r.dtype);return en(nn(r.reshape([-1,a,i])).map(t=>_a(c,t,h))).reshape(s)}}),il=ie({gramSchmidt_:function(t){let e;if(Array.isArray(t)){e=!1,v(null!=t&&t.length>0,()=>"Gram-Schmidt process: input must not be null, undefined, or empty");const n=t[0].shape[0];for(let e=1;e<t.length;++e)v(t[e].shape[0]===n,()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${t[e].shape[0]} vs. ${n})`)}else e=!0,t=Pe(t,t.shape[0],0).map(t=>tn(t,[0]));v(t.length<=t[0].shape[0],()=>`Gram-Schmidt: Number of vectors (${t.length}) exceeds number of dimensions (${t[0].shape[0]}).`);const n=[],r=t;for(let e=0;e<t.length;++e)n.push(Ft.tidy(()=>{let t=r[e];if(e>0)for(let r=0;r<e;++r){const e=ze(n[r].mulStrict(t)).mul(n[r]);t=t.sub(e)}return t.div(So(t,"euclidean"))}));return e?en(n,0):n}}),ol=ie({qr_:function(t,e=!1){if(t.rank<2)throw new Error("qr() requires input tensor to have a rank >= 2, but got rank "+t.rank);if(2===t.rank)return sl(t,e);{const n=t.shape.slice(0,t.shape.length-2).reduce((t,e)=>t*e),r=nn(t.reshape([n,t.shape[t.shape.length-2],t.shape[t.shape.length-1]]),0),s=[],a=[];return r.forEach(t=>{const[n,r]=sl(t,e);s.push(n),a.push(r)}),[en(s,0).reshape(t.shape),en(a,0).reshape(t.shape)]}}});var ll=Object.freeze({__proto__:null,bandPart:al,gramSchmidt:il,qr:ol});function ul(t,e,n){const r=function(t,e,n){return function(t,e,n){let r=0,s=t.length,a=0,i=!1;for(;r<s;){a=r+(s-r>>>1);const o=n(e,t[a]);o>0?r=a+1:(s=a,i=!o)}return i?r:-r-1}(t,e,n||cl)}(t,e,n),s=r<0?-(r+1):r;t.splice(s,0,e)}function cl(t,e){return t>e?1:t<e?-1:0}function hl(t,e,n,r,s){return pl(t,e,n,r,s,0).selectedIndices}function dl(t,e,n,r,s,a){const i=pl(t,e,n,r,s,a,!0);return i.numValidOutputs.dispose(),{selectedIndices:i.selectedIndices,selectedScores:i.selectedScores}}function pl(t,e,n,r,s,a,i=!1,o=!1){const l=Array.from(e).map((t,e)=>({score:t,boxIndex:e,suppressBeginIndex:0})).filter(t=>t.score>s).sort(gl),u=a>0?-.5/a:0,c=[],h=[];for(;c.length<n&&l.length>0;){const e=l.pop(),{score:n,boxIndex:a,suppressBeginIndex:i}=e;if(n<s)break;let o=!1;for(let n=c.length-1;n>=i;--n){const i=fl(t,a,c[n]);if(i>=r){o=!0;break}if(e.score=e.score*ml(r,u,i),e.score<=s)break}e.suppressBeginIndex=c.length,o||(e.score===n?(c.push(a),h.push(e.score)):e.score>s&&ul(l,e,gl))}const d=c.length;return o&&(c.fill(0,d),h.fill(0,d)),{selectedIndices:pe(c,"int32"),selectedScores:pe(h,"float32"),numValidOutputs:de(d,"int32")}}function fl(t,e,n){const r=t.subarray(4*e,4*e+4),s=t.subarray(4*n,4*n+4),a=Math.min(r[0],r[2]),i=Math.min(r[1],r[3]),o=Math.max(r[0],r[2]),l=Math.max(r[1],r[3]),u=Math.min(s[0],s[2]),c=Math.min(s[1],s[3]),h=Math.max(s[0],s[2]),d=Math.max(s[1],s[3]),p=(o-a)*(l-i),f=(h-u)*(d-c);if(p<=0||f<=0)return 0;const m=Math.max(a,u),g=Math.max(i,c),y=Math.min(o,h),b=Math.min(l,d),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(p+f-x)}function ml(t,e,n){const r=Math.exp(e*n*n);return n<=t?r:0}function gl(t,e){return t.score-e.score||t.score===e.score&&e.boxIndex-t.boxIndex}function yl(t,e,n,r,s,a){null==r&&(r=.5),null==s&&(s=Number.NEGATIVE_INFINITY),null==a&&(a=0);const i=t.shape[0];return n=Math.min(n,i),v(0<=r&&r<=1,()=>`iouThreshold must be in [0, 1], but was '${r}'`),v(2===t.rank,()=>`boxes must be a 2D tensor, but was of rank '${t.rank}'`),v(4===t.shape[1],()=>"boxes must have 4 columns, but 2nd dimension was "+t.shape[1]),v(1===e.rank,()=>"scores must be a 1D tensor"),v(e.shape[0]===i,()=>`scores has incompatible shape with boxes. Expected ${i}, but was `+e.shape[0]),v(0<=a&&a<=1,()=>`softNmsSigma must be in [0, 1], but was '${a}'`),{maxOutputSize:n,iouThreshold:r,scoreThreshold:s,softNmsSigma:a}}const bl=ie({resizeBilinear_:function(t,e,n=!1){const r=Ht(t,"images","resizeBilinear");v(3===r.rank||4===r.rank,()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${r.rank}.`),v(2===e.length,()=>"Error in resizeBilinear: new shape must 2D, but got shape "+e+".");let s=r,a=!1;3===r.rank&&(a=!0,s=r.as4D(1,r.shape[0],r.shape[1],r.shape[2]));const[i,o]=e,l=Ft.runKernelFunc((t,e)=>(e([s]),t.resizeBilinear(s,i,o,n)),{x:s},(t,e)=>({x:()=>Ft.runKernelFunc(r=>r.resizeBilinearBackprop(t,e[0],n),{})}),"ResizeBilinear",{alignCorners:n,newHeight:i,newWidth:o});return a?l.as3D(l.shape[1],l.shape[2],l.shape[3]):l}}),xl=ie({resizeNearestNeighbor_:function(t,e,n=!1){const r=Ht(t,"images","resizeNearestNeighbor");v(3===r.rank||4===r.rank,()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${r.rank}.`),v(2===e.length,()=>"Error in resizeNearestNeighbor: new shape must 2D, but got shape "+e+"."),v("float32"===r.dtype||"int32"===r.dtype,()=>"`images` must have `int32` or `float32` as dtype");let s=r,a=!1;3===r.rank&&(a=!0,s=r.as4D(1,r.shape[0],r.shape[1],r.shape[2]));const[i,o]=e,l=Ft.runKernelFunc((t,e)=>(e([s]),t.resizeNearestNeighbor(s,i,o,n)),{batchImages:s},(t,e)=>({batchImages:()=>Ft.runKernelFunc(r=>r.resizeNearestNeighborBackprop(t,e[0],n),{})}));return a?l.as3D(l.shape[1],l.shape[2],l.shape[3]):l}}),wl=ie({nonMaxSuppression_:function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=Ht(t,"boxes","nonMaxSuppression"),i=Ht(e,"scores","nonMaxSuppression"),o=yl(a,i,n,r,s);n=o.maxOutputSize,r=o.iouThreshold,s=o.scoreThreshold;const l={maxOutputSize:n,iouThreshold:r,scoreThreshold:s};return Ft.runKernelFunc(t=>t.nonMaxSuppression(a,i,n,r,s),{boxes:a,scores:i},null,"NonMaxSuppressionV3",l)}}),vl=async function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=Ht(t,"boxes","nonMaxSuppressionAsync"),i=Ht(e,"scores","nonMaxSuppressionAsync"),o=yl(a,i,n,r,s);n=o.maxOutputSize,r=o.iouThreshold,s=o.scoreThreshold;const l=await Promise.all([a.data(),i.data()]),u=hl(l[0],l[1],n,r,s);return a!==t&&a.dispose(),i!==e&&i.dispose(),u},Cl=ie({nonMaxSuppressionWithScore_:function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const i=Ht(t,"boxes","nonMaxSuppression"),o=Ht(e,"scores","nonMaxSuppression"),l=yl(i,o,n,r,s,a),u={maxOutputSize:n=l.maxOutputSize,iouThreshold:r=l.iouThreshold,scoreThreshold:s=l.scoreThreshold,softNmsSigma:a=l.softNmsSigma},c=Ft.runKernel("NonMaxSuppressionV5",{boxes:i,scores:o},u);return{selectedIndices:c[0],selectedScores:c[1]}}}),Nl=async function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const i=Ht(t,"boxes","nonMaxSuppressionAsync"),o=Ht(e,"scores","nonMaxSuppressionAsync"),l=yl(i,o,n,r,s,a);n=l.maxOutputSize,r=l.iouThreshold,s=l.scoreThreshold,a=l.softNmsSigma;const u=await Promise.all([i.data(),o.data()]),c=dl(u[0],u[1],n,r,s,a);return i!==t&&i.dispose(),o!==e&&o.dispose(),c},Sl=ie({cropAndResize_:function(t,e,n,r,s,a){const i=Ht(t,"image","cropAndResize"),o=Ht(e,"boxes","cropAndResize","float32"),l=Ht(n,"boxInd","cropAndResize","int32");s=s||"bilinear",a=a||0;const u=o.shape[0];return v(4===i.rank,()=>`Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`),v(2===o.rank&&4===o.shape[1],()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${o.shape}.`),v(1===l.rank&&l.shape[0]===u,()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${o.shape}.`),v(2===r.length,()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`),v(r[0]>=1&&r[1]>=1,()=>"cropSize must be atleast [1,1], but was "+r),v("bilinear"===s||"nearest"===s,()=>"method must be bilinear or nearest, but was "+s),Ft.runKernelFunc((t,e)=>t.cropAndResize(i,o,l,r,s,a),{images:i,boxes:o,boxInd:l},null,"CropAndResize",{method:s,extrapolationValue:a,cropSize:r})}});var kl=Object.freeze({__proto__:null,resizeBilinear:bl,resizeNearestNeighbor:xl,nonMaxSuppression:wl,nonMaxSuppressionAsync:vl,nonMaxSuppressionWithScore:Cl,nonMaxSuppressionWithScoreAsync:Nl,cropAndResize:Sl});const Il=(t,e)=>!(t>0)||"linear"===e,El=(t,e,n)=>{if(null==n||"linear"===n)return t;if("relu"===n)return t.mul(e.step());throw new Error(`Gradient for activation ${n} has not been implemented yet.`)},$l=(t,e)=>{let n=e;const r=Wt(t.shape,e.shape);return r.length>0&&(n=n.sum(r)),n.reshape(t.shape)},Al=(t,e,n)=>{if("linear"===e)return t;if("relu"===e)return bo(t);if("elu"===e)return mo(t);if("relu6"===e)return xo(t);if("prelu"===e)return yo(t,n);throw new Error(`Unknown fused activation ${e}.`)};const Rl=ie({fusedMatMul_:function({a:t,b:e,transposeA:n=!1,transposeB:r=!1,bias:s,activation:a="linear",preluActivationWeights:i}){if(!1===Il(Ft.state.gradientDepth,a)){let o=Ji(t,e,n,r);return null!=s&&(o=sn(o,s)),Al(o,a,i)}let o=Ht(t,"a","fused matMul"),l=Ht(e,"b","fused matMul");[o,l]=$t(o,l);const u=n?o.shape[o.rank-2]:o.shape[o.rank-1],c=r?l.shape[l.rank-1]:l.shape[l.rank-2],h=n?o.shape[o.rank-1]:o.shape[o.rank-2],d=r?l.shape[l.rank-2]:l.shape[l.rank-1],p=o.shape.slice(0,-2),f=l.shape.slice(0,-2),m=k(p),g=k(f);v(o.rank>=2&&l.rank>=2&&o.rank===l.rank,()=>`Error in fused matMul: inputs must have the same rank of at least 2, got ranks ${o.rank} and ${l.rank}.`),v(I(p,f),()=>`Error in fused matMul: outer dimensions (${p}) and (${f}) of Tensors with shapes ${o.shape} and `+l.shape+" must match."),v(u===c,()=>`Error in fused matMul: inner shapes (${u}) and (${c}) of Tensors with shapes ${o.shape} and ${l.shape} and transposeA=${n} and transposeB=${r} must match.`);const y=o.shape.slice(0,-2).concat([h,d]),b=n?o.as3D(m,u,h):o.as3D(m,h,u),x=r?l.as3D(g,d,c):l.as3D(g,c,d);let w,C;null!=s&&(w=Ht(s,"bias","fused matMul"),[w]=$t(w,o),Vt(y,w.shape)),null!=i&&(C=Ht(i,"prelu weights","fused matMul"));const N={a:b,b:x};null!=s&&(N.bias=w),null!=i&&(N.preluActivationWeights=C);const S=[b,x];return Ft.runKernelFunc((t,e)=>{const s=t.fusedBatchMatMul({a:b,b:x,transposeA:n,transposeB:r,bias:w,activation:a,preluActivationWeights:C});return e([b,x,s]),s},N,(t,e)=>{const[i,o,l]=e,u=El(t,l,a);let c={};return null!=s&&(c={bias:()=>$l(w,u)}),n||r?!n&&r?Object.assign({a:()=>u.matMul(o,!1,!1),b:()=>u.matMul(i,!0,!1)},c):n&&!r?Object.assign({a:()=>o.matMul(u,!1,!0),b:()=>i.matMul(u,!1,!1)},c):Object.assign({a:()=>o.matMul(u,!0,!0),b:()=>u.matMul(i,!0,!0)},c):Object.assign({a:()=>u.matMul(o,!1,!0),b:()=>i.matMul(u,!0,!1)},c)},"_FusedMatMul",{transposeA:n,transposeB:r,activation:a},S,[!0]).reshape(y)}}),Tl=ie({fusedConv2d_:function({x:t,filter:e,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:l="linear",preluActivationWeights:u}){if(l=l||"linear",!1===Il(Ft.state.gradientDepth,l)){let c=Wi(t,e,n,r,s,a,i);return null!=o&&(c=sn(c,o)),Al(c,l,u)}const c=Ht(t,"x","conv2d"),h=Ht(e,"filter","conv2d");let d=c,p=!1;3===c.rank&&(p=!0,d=c.as4D(1,c.shape[0],c.shape[1],c.shape[2])),v(4===d.rank,()=>"Error in fused conv2d: input must be rank 4, but got rank "+d.rank+"."),v(4===h.rank,()=>"Error in fused conv2d: filter must be rank 4, but got rank "+h.rank+"."),null!=i&&v(E(r),()=>`Error in fused conv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`),v(d.shape[3]===h.shape[2],()=>`Error in conv2d: depth of input (${d.shape[3]}) must match input depth for filter ${h.shape[2]}.`),v(Fi(n,a),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`),v("NHWC"===s,()=>`Error in conv2d: got dataFormat of ${s} but only NHWC is currently supported.`);const f=Ei(d.shape,h.shape,n,a,r,i);let m,g;null!=o&&(m=Ht(o,"bias","fused conv2d"),[m]=$t(m,c),Vt(f.outShape,m.shape)),null!=u&&(g=Ht(u,"prelu weights","fused conv2d"));const y={x:d,filter:h};null!=o&&(y.bias=m),null!=u&&(y.preluActivationWeights=g);const b=[h,d],x=Ft.runKernelFunc((t,e)=>{const n=t.fusedConv2d({input:d,filter:h,convInfo:f,bias:m,activation:l,preluActivationWeights:g});return e([h,d,n]),n},y,(t,e)=>{const[s,i,u]=e,c=El(t,u,l);v(Oi(a),()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`);let h={};return null!=o&&(h={bias:()=>$l(m,c)}),Object.assign({x:()=>Gi(i.shape,c,s,n,r),filter:()=>Ui(i,c,s.shape,n,r)},h)},"FusedConv2D",{convInfo:f,activation:l},b,[!0]);return p?x.as3D(x.shape[1],x.shape[2],x.shape[3]):x}}),Dl=ie({fusedDepthwiseConv2d_:function({x:t,filter:e,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:l="linear",preluActivationWeights:u}){if(!1===Il(Ft.state.gradientDepth,l)){let c=ji(t,e,n,r,s,a,i);return null!=o&&(c=sn(c,o)),Al(c,l,u)}const c=Ht(t,"x","depthwiseConv2d"),h=Ht(e,"filter","depthwiseConv2d");let d=c,p=!1;3===c.rank&&(p=!0,d=c.as4D(1,c.shape[0],c.shape[1],c.shape[2])),v(4===d.rank,()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${d.rank}.`),v(4===h.rank,()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${h.rank}.`),v(d.shape[3]===h.shape[2],()=>`Error in fused depthwiseConv2d: number of input channels (${d.shape[3]}) must match the inChannels dimension in filter ${h.shape[2]}.`),null==a&&(a=[1,1]),v(Fi(n,a),()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`),null!=i&&v(E(r),()=>`Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode ${i} but got pad ${r}.`);const f=Ei(d.shape,h.shape,n,a,r,i,!0);let m,g;null!=o&&(m=Ht(o,"bias","fused conv2d"),[m]=$t(m,c),Vt(f.outShape,m.shape)),null!=u&&(g=Ht(u,"prelu weights","fused depthwiseConv2d"));const y={x:d,filter:h};null!=o&&(y.bias=m),null!=u&&(y.preluActivationWeights=g);const b=[h,d],x=Ft.runKernelFunc((t,e)=>{const n=t.fusedDepthwiseConv2D({input:d,filter:h,convInfo:f,bias:m,activation:l,preluActivationWeights:g});return e([h,d,n]),n},y,(t,e)=>{v(Oi(a),()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`);const[n,r,s]=e,i=El(t,s,l);let u={};return null!=o&&(u={bias:()=>$l(m,i)}),Object.assign({x:()=>qi(r.shape,i,n,f),filter:()=>Hi(r,i,n.shape,f)},u)},"FusedDepthwiseConv2D",{convInfo:f,activation:l},b,[!0]);return p?x.as3D(x.shape[1],x.shape[2],x.shape[3]):x}});var _l=Object.freeze({__proto__:null,matMul:Rl,conv2d:Tl,depthwiseConv2d:Dl}),Ol=Object.freeze({__proto__:null,image:kl,linalg:ll,losses:rl,spectral:Fo,fused:_l,signal:jo,add:sn,addN:oa,batchNorm:da,batchNormalization:ha,batchNorm2d:ma,batchNormalization2d:fa,batchNorm3d:ba,batchNormalization3d:ya,batchNorm4d:va,batchNormalization4d:wa,broadcastTo:Na,clone:Ca,concat:Ge,concat1d:Sa,concat2d:ka,concat3d:Ia,concat4d:Ea,div:nr,divNoNan:Fa,eye:Ma,multinomial:za,notEqual:La,oneHot:_s,pad:mr,pad1d:Ba,pad2d:Pa,pad3d:Wa,pad4d:Va,rand:Ua,randomGamma:ei,randomNormal:ni,randomUniform:ri,split:Pe,square:rr,squaredDifference:si,sub:ar,tile:ir,truncatedNormal:ai,conv1d:Pi,conv2d:Wi,conv3d:Vi,depthwiseConv2d:ji,separableConv2d:Ki,conv2dTranspose:Xi,conv3dTranspose:Yi,op:ie,booleanMaskAsync:Si,complex:oe,real:le,imag:ue,matMul:Ji,dot:Zi,outerProduct:Qi,reverse:to,reverse1d:eo,reverse2d:no,reverse3d:ro,reverse4d:so,maxPool:oo,avgPool:lo,pool:uo,maxPool3d:co,avgPool3d:ho,maxPoolWithArgmax:po,slice:Sr,slice1d:kr,slice2d:Ir,slice3d:Er,slice4d:$r,abs:an,acos:on,acosh:ln,asin:un,asinh:cn,atan:hn,atanh:dn,ceil:pn,clipByValue:fn,cos:mn,cosh:gn,erf:yn,exp:bn,expm1:xn,floor:wn,log:vn,log1p:Cn,logSigmoid:Nn,neg:Sn,reciprocal:kn,round:In,rsqrt:En,sigmoid:$n,sign:An,isNaN:Rn,isInf:Tn,isFinite:Dn,sin:_n,sinh:On,softplus:Fn,sqrt:Mn,step:zn,tan:Ln,tanh:Bn,all:$e,any:Ae,argMax:Re,argMin:Te,logSumExp:De,max:_e,mean:Oe,min:Fe,moments:Me,sum:ze,prod:Le,equal:ii,equalStrict:oi,greater:li,greaterEqual:ui,greaterEqualStrict:ci,greaterStrict:hi,less:di,lessEqual:pi,lessEqualStrict:fi,lessStrict:mi,notEqualStrict:gi,addStrict:Pn,atan2:Wn,divStrict:Vn,floorDiv:Un,maximum:Gn,maximumStrict:jn,minimum:qn,minimumStrict:Hn,mod:Kn,modStrict:Xn,mul:Yn,mulStrict:Jn,pow:Zn,powStrict:Qn,squaredDifferenceStrict:tr,subStrict:er,elu:mo,leakyRelu:go,prelu:yo,relu:bo,relu6:xo,selu:wo,logicalAnd:Aa,logicalNot:Ra,logicalOr:Ta,logicalXor:Da,where:_a,whereAsync:Oa,buffer:je,print:qe,batchToSpaceND:He,cast:Ke,cumsum:Xe,depthToSpace:Ye,expandDims:Je,reshape:Ze,spaceToBatchND:Qe,squeeze:tn,stack:en,unstack:nn,setdiff1dAsync:rn,fill:Ce,linspace:Ne,ones:we,range:Se,scalar:de,tensor:ce,tensor1d:pe,tensor2d:fe,tensor3d:me,tensor4d:ge,tensor5d:ye,tensor6d:be,variable:xe,zeros:ve,onesLike:ke,zerosLike:Ie,transpose:Rr,softmax:vo,logSoftmax:Co,localResponseNormalization:No,norm:So,gather:Ci,unsortedSegmentSum:Ni,basicLSTMCell:ko,multiRNNCell:Io,movingAverage:Eo,stridedSlice:$o,topk:Ao,scatterND:Ro,fft:To,ifft:Do,rfft:_o,irfft:Oo,sparseToDense:Mo,gatherND:zo,diag:Lo,dropout:Bo,hannWindow:Wo,hammingWindow:Vo,frame:Uo,stft:Go,inTopKAsync:qo});class Fl extends js{minimize(t,e=!1,n){const{value:r,grads:s}=this.computeGradients(t,n);if(null!=n){const t=n.map(t=>({name:t.name,tensor:s[t.name]}));this.applyGradients(t)}else this.applyGradients(s);return ra(s),e?r:(r.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(t,e){return Xt(t,e)}dispose(){null!=this.iterations_&&ra(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:de(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(t){throw new Error("setWeights() is not implemented for this optimizer class "+this.getClassName())}async extractIterations(t){return this.iterations_=(await t[0].tensor.data())[0],t.slice(1)}}Object.defineProperty(Fl,Symbol.hasInstance,{value:t=>null!=t.minimize&&null!=t.computeGradients&&null!=t.applyGradients});class Ml extends Fl{constructor(t,e,n=null){super(),this.learningRate=t,this.rho=e,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=Ft.backend.epsilon())}applyGradients(t){(Array.isArray(t)?t.map(t=>t.name):Object.keys(t)).forEach((e,n)=>{const r=Ft.registeredVariables[e];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:e+"/accum_grad",variable:na(()=>Ie(r).variable(!1))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:e+"/accum_var",variable:na(()=>Ie(r).variable(!1))});const s=Array.isArray(t)?t[n].tensor:t[e];if(null==s)return;const a=this.accumulatedGrads[n].variable,i=this.accumulatedUpdates[n].variable;na(()=>{const t=a.mul(this.rho).add(s.square().mul(1-this.rho)),e=i.add(this.epsilon).sqrt().div(a.add(this.epsilon).sqrt()).mul(s),n=i.mul(this.rho).add(e.square().mul(1-this.rho));a.assign(t),i.assign(n);const o=e.mul(-this.learningRate).add(r);r.assign(o)})}),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(ra(this.accumulatedGrads.map(t=>t.variable)),ra(this.accumulatedUpdates.map(t=>t.variable)))}async getWeights(){const t=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(t.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){const e=(t=await this.extractIterations(t)).length/2;this.accumulatedGrads=t.slice(0,e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)})),this.accumulatedUpdates=t.slice(e,2*e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.rho,e.epsilon)}}Ml.className="Adadelta",Hs(Ml);class zl extends Fl{constructor(t,e=.1){super(),this.learningRate=t,this.initialAccumulatorValue=e,this.accumulatedGrads=[]}applyGradients(t){(Array.isArray(t)?t.map(t=>t.name):Object.keys(t)).forEach((e,n)=>{const r=Ft.registeredVariables[e];if(null==this.accumulatedGrads[n]){const t=!1;this.accumulatedGrads[n]={originalName:e+"/accumulator",variable:na(()=>Ce(r.shape,this.initialAccumulatorValue).variable(t))}}const s=Array.isArray(t)?t[n].tensor:t[e];if(null==s)return;const a=this.accumulatedGrads[n].variable;na(()=>{const t=a.add(s.square());a.assign(t);const e=s.div(t.add(Ft.backend.epsilon()).sqrt()).mul(-this.learningRate).add(r);r.assign(e)})}),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&ra(this.accumulatedGrads.map(t=>t.variable))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){t=await this.extractIterations(t);this.accumulatedGrads=t.map(t=>({originalName:t.name,variable:t.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(t,e){return new t(e.learningRate,e.initialAccumulatorValue)}}zl.className="Adagrad",Hs(zl);class Ll extends Fl{constructor(t,e,n,r=null){super(),this.learningRate=t,this.beta1=e,this.beta2=n,this.epsilon=r,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],na(()=>{this.accBeta1=de(e).variable(),this.accBeta2=de(n).variable()}),null==r&&(this.epsilon=Ft.backend.epsilon())}applyGradients(t){const e=Array.isArray(t)?t.map(t=>t.name):Object.keys(t);na(()=>{const n=ar(1,this.accBeta1),r=ar(1,this.accBeta2);e.forEach((e,s)=>{const a=Ft.registeredVariables[e];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:e+"/m",variable:na(()=>Ie(a).variable(!1))}),null==this.accumulatedSecondMoment[s]&&(this.accumulatedSecondMoment[s]={originalName:e+"/v",variable:na(()=>Ie(a).variable(!1))});const i=Array.isArray(t)?t[s].tensor:t[e];if(null==i)return;const o=this.accumulatedFirstMoment[s].variable,l=this.accumulatedSecondMoment[s].variable,u=o.mul(this.beta1).add(i.mul(1-this.beta1)),c=l.mul(this.beta2).add(i.square().mul(1-this.beta2)),h=u.div(n),d=c.div(r);o.assign(u),l.assign(c);const p=h.div(d.sqrt().add(this.epsilon)).mul(-this.learningRate).add(a);a.assign(p)}),this.accBeta1.assign(this.accBeta1.mul(this.beta1)),this.accBeta2.assign(this.accBeta2.mul(this.beta2))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&ra(this.accumulatedFirstMoment.map(t=>t.variable)),null!=this.accumulatedSecondMoment&&ra(this.accumulatedSecondMoment.map(t=>t.variable))}async getWeights(){const t=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(t.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){t=await this.extractIterations(t),na(()=>{this.accBeta1.assign(Zn(this.beta1,this.iterations_+1)),this.accBeta2.assign(Zn(this.beta2,this.iterations_+1))});const e=t.length/2;this.accumulatedFirstMoment=t.slice(0,e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)})),this.accumulatedSecondMoment=t.slice(e,2*e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon)}}Ll.className="Adam",Hs(Ll);class Bl extends Fl{constructor(t,e,n,r=null,s=0){super(),this.learningRate=t,this.beta1=e,this.beta2=n,this.epsilon=r,this.decay=s,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],na(()=>{this.iteration=de(0).variable(),this.accBeta1=de(e).variable()}),null==r&&(this.epsilon=Ft.backend.epsilon())}applyGradients(t){const e=Array.isArray(t)?t.map(t=>t.name):Object.keys(t);na(()=>{const n=ar(1,this.accBeta1),r=nr(-this.learningRate,this.iteration.mul(this.decay).add(1));e.forEach((e,s)=>{const a=Ft.registeredVariables[e];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:e+"/m",variable:Ie(a).variable(!1)}),null==this.accumulatedWeightedInfNorm[s]&&(this.accumulatedWeightedInfNorm[s]={originalName:e+"/v",variable:Ie(a).variable(!1)});const i=Array.isArray(t)?t[s].tensor:t[e];if(null==i)return;const o=this.accumulatedFirstMoment[s].variable,l=this.accumulatedWeightedInfNorm[s].variable,u=o.mul(this.beta1).add(i.mul(1-this.beta1)),c=l.mul(this.beta2),h=i.abs(),d=c.maximum(h);o.assign(u),l.assign(d);const p=r.div(n).mul(u.div(d.add(this.epsilon))).add(a);a.assign(p)}),this.iteration.assign(this.iteration.add(1)),this.accBeta1.assign(this.accBeta1.mul(this.beta1))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&ra(this.accumulatedFirstMoment.map(t=>t.variable)),null!=this.accumulatedWeightedInfNorm&&ra(this.accumulatedWeightedInfNorm.map(t=>t.variable))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(t){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon,e.decay)}}Bl.className="Adamax",Hs(Bl);class Pl extends Fl{constructor(t){super(),this.learningRate=t,this.setLearningRate(t)}applyGradients(t){(Array.isArray(t)?t.map(t=>t.name):Object.keys(t)).forEach((e,n)=>{const r=Array.isArray(t)?t[n].tensor:t[e];if(null==r)return;const s=Ft.registeredVariables[e];na(()=>{const t=this.c.mul(r).add(s);s.assign(t)})}),this.incrementIterations()}setLearningRate(t){this.learningRate=t,null!=this.c&&this.c.dispose(),this.c=sa(de(-t))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(t){if(0!==(t=await this.extractIterations(t)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(t,e){return new t(e.learningRate)}}Pl.className="SGD",Hs(Pl);class Wl extends Pl{constructor(t,e,n=!1){super(t),this.learningRate=t,this.momentum=e,this.useNesterov=n,this.accumulations=[],this.m=de(this.momentum)}applyGradients(t){(Array.isArray(t)?t.map(t=>t.name):Object.keys(t)).forEach((e,n)=>{const r=Ft.registeredVariables[e];if(null==this.accumulations[n]){const t=!1;this.accumulations[n]={originalName:e+"/momentum",variable:na(()=>Ie(r).variable(t))}}const s=this.accumulations[n].variable,a=Array.isArray(t)?t[n].tensor:t[e];null!=a&&na(()=>{let t;const e=this.m.mul(s).add(a);t=this.useNesterov?this.c.mul(a.add(e.mul(this.m))).add(r):this.c.mul(e).add(r),s.assign(e),r.assign(t)})}),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&ra(this.accumulations.map(t=>t.variable))}setMomentum(t){this.momentum=t}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){t=await this.extractIterations(t);this.accumulations=t.map(t=>({originalName:t.name,variable:t.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(t,e){return new t(e.learningRate,e.momentum,e.useNesterov)}}Wl.className="Momentum",Hs(Wl);class Vl extends Fl{constructor(t,e=.9,n=0,r=null,s=!1){if(super(),this.learningRate=t,this.decay=e,this.momentum=n,this.epsilon=r,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=s,null==r&&(this.epsilon=Ft.backend.epsilon()),null==t)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(t){(Array.isArray(t)?t.map(t=>t.name):Object.keys(t)).forEach((e,n)=>{const r=Ft.registeredVariables[e];null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:e+"/rms",variable:na(()=>Ie(r).variable(!1))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:e+"/momentum",variable:na(()=>Ie(r).variable(!1))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:e+"/mg",variable:na(()=>Ie(r).variable(!1))});const s=Array.isArray(t)?t[n].tensor:t[e];if(null==s)return;const a=this.accumulatedMeanSquares[n].variable,i=this.accumulatedMoments[n].variable;na(()=>{const t=a.mul(this.decay).add(s.square().mul(1-this.decay));if(this.centered){const e=this.accumulatedMeanGrads[n].variable,o=e.mul(this.decay).add(s.mul(1-this.decay)),l=i.mul(this.momentum).add(s.mul(this.learningRate).div(t.sub(o.square().add(this.epsilon)).sqrt()));a.assign(t),e.assign(o),i.assign(l);const u=r.sub(l);r.assign(u)}else{const t=a.mul(this.decay).add(s.square().mul(1-this.decay)),e=i.mul(this.momentum).add(s.mul(this.learningRate).div(t.add(this.epsilon).sqrt()));a.assign(t),i.assign(e);const n=r.sub(e);r.assign(n)}})}),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&ra(this.accumulatedMeanSquares.map(t=>t.variable)),null!=this.accumulatedMeanGrads&&this.centered&&ra(this.accumulatedMeanGrads.map(t=>t.variable)),null!=this.accumulatedMoments&&ra(this.accumulatedMoments.map(t=>t.variable))}async getWeights(){const t=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&t.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(t.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){t=await this.extractIterations(t);const e=this.centered?t.length/3:t.length/2;this.accumulatedMeanSquares=t.slice(0,e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)})),this.accumulatedMoments=t.slice(e,2*e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)})),this.centered&&(this.accumulatedMeanGrads=t.slice(2*e,3*e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(t,e){return new t(e.learningRate,e.decay,e.momentum,e.epsilon,e.centered)}}Vl.className="RMSProp",Hs(Vl);class Ul{static sgd(t){return new Pl(t)}static momentum(t,e,n=!1){return new Wl(t,e,n)}static rmsprop(t,e=.9,n=0,r=null,s=!1){return new Vl(t,e,n,r,s)}static adam(t=.001,e=.9,n=.999,r=null){return new Ll(t,e,n,r)}static adadelta(t=.001,e=.95,n=null){return new Ml(t,e,n)}static adamax(t=.002,e=.9,n=.999,r=null,s=0){return new Bl(t,e,n,r,s)}static adagrad(t,e=.1){return new zl(t,e)}}const Gl={sgd:Ul.sgd,momentum:Ul.momentum,adadelta:Ul.adadelta,adagrad:Ul.adagrad,rmsprop:Ul.rmsprop,adamax:Ul.adamax,adam:Ul.adam},jl="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:t=>t();function ql(){return new Promise(t=>jl(()=>t()))}function Hl(t,e,n,r=!0){let s=[];if(r)s=s.concat(e.slice(0)),s.push(t[0]/n),s=s.concat(t.slice(1));else{s=s.concat(t[0]);const n=e.length;for(let r=0;r<n;++r)s=s.concat([t[r+1]/e[r],e[r]]);s=s.concat(t.slice(n+1))}return s}function Kl(t,e,n=!0){const r=[];if(n){r.push(e);for(let n=e+1;n<t;++n)n<=2*e?(r.push(n),r.push(n-(e+1))):r.push(n)}else{const n=[],s=[];for(let r=1;r<t;++r)r>=2*e+1||r%2==1?s.push(r):n.push(r);r.push(...n),r.push(0),r.push(...s)}return r}function Xl(t,e,n,r=!0){const s=[];r?s.push(t[0]/n):s.push(t[0]*n);for(let n=1;n<t.length;++n)n<=e.length?r?s.push(e[n-1]*t[n]):s.push(t[n]/e[n-1]):s.push(t[n]);return s}function Yl(t,e){const n=[0];for(let r=0;r<e;++r)n.push(t[r][0]);return n}function Jl(t,e,n){const r=t.slice(0,1);for(let s=0;s<n;++s)r.push(t[s+1]-e[s][0]-e[s][1]);return r}function Zl(...t){a().getBool("IS_TEST")||console.warn(...t)}function Ql(t,e){if(t.length!==e.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${t.length}, imag: ${e.length}.`);const n=new Float32Array(2*t.length);for(let r=0;r<n.length;r+=2)n[r]=t[r/2],n[r+1]=e[r/2];return n}function tu(t){const e=new Float32Array(t.length/2),n=new Float32Array(t.length/2);for(let r=0;r<t.length;r+=2)e[r/2]=t[r],n[r/2]=t[r+1];return{real:e,imag:n}}function eu(t){const e=Math.ceil(t.length/4),n=new Float32Array(e),r=new Float32Array(e);for(let e=0;e<t.length;e+=4)n[Math.floor(e/4)]=t[e],r[Math.floor(e/4)]=t[e+1];return{real:n,imag:r}}function nu(t){const e=Math.floor(t.length/4),n=new Float32Array(e),r=new Float32Array(e);for(let e=2;e<t.length;e+=4)n[Math.floor(e/4)]=t[e],r[Math.floor(e/4)]=t[e+1];return{real:n,imag:r}}function ru(t,e){return{real:t[2*e],imag:t[2*e+1]}}function su(t,e,n,r){t[2*r]=e,t[2*r+1]=n}function au(t,e){const n=new Float32Array(t/2),r=new Float32Array(t/2);for(let s=0;s<Math.ceil(t/2);s++){const a=(e?2:-2)*Math.PI*(s/t);n[s]=Math.cos(a),r[s]=Math.sin(a)}return{real:n,imag:r}}function iu(t,e,n){const r=(n?2:-2)*Math.PI*(t/e);return{real:Math.cos(r),imag:Math.sin(r)}}function ou(t,e,n){if("complex64"===e){if("complex64"===t.dtype)return t.clone();const e=ve(t.shape),r=t.toFloat(),s=n.complex(r,e);return e.dispose(),r.dispose(),s}if(!B(t.dtype,e))return Ft.makeTensorFromDataId(t.dataId,t.shape,e);if("complex64"===t.dtype){const r=n.real(t),s=r.cast(e);return r.dispose(),s}if("int32"===e)return n.int(t);if("bool"===e){const e=de(0,t.dtype),r=n.notEqual(t,e);return e.dispose(),r}throw new Error(`Error in Cast: failed to cast ${t.dtype} to ${e}`)}function lu(t,e){return Ft.makeTensorFromDataId(t.dataId,e,t.dtype)}function uu(t,e,n){const r=(e-t)/(n-1),s=Q(n,"float32");s[0]=t;for(let t=1;t<s.length;t++)s[t]=s[t-1]+r;return pe(s,"float32")}var cu=Object.freeze({__proto__:null,segment_util:xi,castTensor:ou,reshapeTensor:lu,linspaceImpl:uu,upcastType:It,axesAreInnerMostDims:Zt,combineLocations:Qt,computeOutAndReduceShapes:te,expandShapeToKeepDim:ee,assertAxesAreInnerMostDims:ne,getAxesPermutation:re,getUndoAxesPermutation:se,getInnerMostAxes:ae,getBroadcastDims:Pt,getReductionAxes:Wt,assertAndGetBroadcastShape:Vt,assertParamsConsistent:Ve,computeOutShape:Ue,computePool2DInfo:ki,computePool3DInfo:Ii,computeConv2DInfo:Ei,computeConv3DInfo:$i,computeDefaultPad:Ai,tupleValuesAreOne:Oi,eitherStridesOrDilationsAreOne:Fi,convertConv2DDataFormat:Mi,PARALLELIZE_THRESHOLD:30,computeOptimalWindowSize:yi,getReshaped:Hl,getPermuted:Kl,getReshapedPermuted:Xl,getSliceBeginCoords:Yl,getSliceSize:Jl,prepareAndValidate:Bs,validateUpdateShape:Ws,validateInput:Vs,calculateShapes:Us,SELU_SCALEALPHA:1.7580993408473768,SELU_SCALE:fo,shouldFuse:Il,ERF_P:.3275911,ERF_A1:.254829592,ERF_A2:-.284496736,ERF_A3:1.421413741,ERF_A4:-1.453152027,ERF_A5:1.061405429,warn:Zl,log:function(...t){a().getBool("IS_TEST")||console.log(...t)},mergeRealAndImagArrays:Ql,splitRealAndImagArrays:tu,complexWithEvenIndex:eu,complexWithOddIndex:nu,getComplexWithIndex:ru,assignToTypedArray:su,exponents:au,exponent:iu});function hu(t,e,n){const r=new Array(t.rank).fill(0),s=t.shape.slice();return e.map(e=>{s[n]=e;const a=t.slice(r,s);return r[n]+=e,a})}function du(t,e){const n=new Array(t.rank);for(let r=0;r<n.length;r++)n[r]=t.shape[r]*e[r];const r=je(n,t.dtype);for(let e=0;e<r.values.length;++e){const n=r.indexToLoc(e),s=new Array(t.rank);for(let e=0;e<s.length;e++)s[e]=n[e]%t.shape[e];const a=t.locToIndex(s);r.values[e]=t.values[a]}return r.toTensor()}function pu(t,e,n,r,s){const a=e[e.length-1],[i,o]=[t.length/a,a],l=F(n,i*r),u=F("int32",i*r);for(let e=0;e<i;e++){const n=e*o,s=t.subarray(n,n+o),a=[];for(let t=0;t<s.length;t++)a.push({value:s[t],index:t});a.sort((t,e)=>e.value-t.value);const i=e*r,c=l.subarray(i,i+r),h=u.subarray(i,i+r);for(let t=0;t<r;t++)c[t]=a[t].value,h[t]=a[t].index}const c=e.slice();return c[c.length-1]=r,[ce(l,c,n),ce(u,c,"int32")]}var fu=Object.freeze({__proto__:null,nonMaxSuppressionV3:hl,nonMaxSuppressionV5:dl,split:hu,tile:du,topkImpl:pu,whereImpl:$a});class mu{constructor(t,e){this.backend=t,this.dataMover=e,this.data=new WeakMap,this.dataIdsCount=0}get(t){return this.data.has(t)||this.dataMover.moveData(this.backend,t),this.data.get(t)}set(t,e){this.dataIdsCount++,this.data.set(t,e)}has(t){return this.data.has(t)}delete(t){return this.dataIdsCount--,this.data.delete(t)}numDataIds(){return this.dataIdsCount}}class gu{time(t){return yu("time")}read(t){return yu("read")}readSync(t){return yu("readSync")}numDataIds(){return yu("numDataIds")}disposeData(t){return yu("disposeData")}write(t,e,n){return yu("write")}move(t,e,n,r){return yu("move")}memory(){return yu("memory")}floatPrecision(){return yu("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}batchMatMul(t,e,n,r){return yu("batchMatMul")}fusedBatchMatMul({a:t,b:e,transposeA:n,transposeB:r,bias:s,activation:a,preluActivationWeights:i}){return yu("fusedBatchMatMul")}slice(t,e,n){return yu("slice")}stridedSlice(t,e,n,r){return yu("stridedSlice")}unstack(t,e){return yu("unstack")}reverse(t,e){return yu("reverse")}concat(t,e){return yu("concat")}neg(t){return yu("neg")}add(t,e){return yu("add")}addN(t){return yu("addN")}subtract(t,e){return yu("subtract")}multiply(t,e){return yu("multiply")}realDivide(t,e){return yu("realDivide")}floorDiv(t,e){return yu("floorDiv")}sum(t,e){return yu("sum")}prod(t,e){return yu("prod")}unsortedSegmentSum(t,e,n){return yu("unsortedSegmentSum")}argMin(t,e){return yu("argMin")}argMax(t,e){return yu("argMax")}equal(t,e){return yu("equal")}notEqual(t,e){return yu("notEqual")}less(t,e){return yu("less")}lessEqual(t,e){return yu("lessEqual")}greater(t,e){return yu("greater")}greaterEqual(t,e){return yu("greaterEqual")}logicalNot(t){return yu("logicalNot")}logicalAnd(t,e){return yu("logicalAnd")}logicalOr(t,e){return yu("logicalOr")}where(t){return yu("where")}select(t,e,n){return yu("select")}topk(t,e,n){return yu("topk")}min(t,e){return yu("min")}minimum(t,e){return yu("minimum")}mod(t,e){return yu("mod")}max(t,e){return yu("max")}maximum(t,e){return yu("maximum")}all(t,e){return yu("all")}any(t,e){return yu("any")}squaredDifference(t,e){return yu("squaredDifference")}ceil(t){return yu("ceil")}floor(t){return yu("floor")}round(t){return yu("round")}sign(t){return yu("sign")}isNaN(t){return yu("isNaN")}isInf(t){return yu("isInf")}isFinite(t){return yu("isFinite")}pow(t,e){return yu("pow")}exp(t){return yu("exp")}expm1(t){return yu("expm1")}softmax(t,e){return yu("softmax")}log(t){return yu("log")}log1p(t){return yu("log1p")}sqrt(t){return yu("sqrt")}rsqrt(t){return yu("rsqrt")}square(t){return yu("square")}reciprocal(t){return yu("reciprocal")}relu(t){return yu("relu")}relu6(t){return yu("relu6")}prelu(t,e){return yu("prelu")}elu(t){return yu("elu")}eluDer(t,e){return yu("eluDer")}selu(t){return yu("selu")}int(t){return yu("int")}clip(t,e,n){return yu("clip")}abs(t){return yu("abs")}complexAbs(t){return yu("complexAbs")}sigmoid(t){return yu("sigmoid")}softplus(t){return yu("softplus")}sin(t){return yu("sin")}cos(t){return yu("cos")}tan(t){return yu("tan")}asin(t){return yu("asin")}acos(t){return yu("acos")}atan(t){return yu("atan")}atan2(t,e){return yu("atan2")}sinh(t){return yu("sinh")}cosh(t){return yu("cosh")}tanh(t){return yu("tanh")}asinh(t){return yu("asinh")}acosh(t){return yu("acosh")}atanh(t){return yu("atanh")}erf(t){return yu("erf")}step(t,e){return yu("step")}fusedConv2d({input:t,filter:e,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){return yu("fusedConv2d")}conv2d(t,e,n){return yu("conv2d")}conv2dDerInput(t,e,n){return yu("conv2dDerInput")}conv2dDerFilter(t,e,n){return yu("conv2dDerFilter")}fusedDepthwiseConv2D({input:t,filter:e,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){return yu("fusedDepthwiseConv2D")}depthwiseConv2D(t,e,n){return yu("depthwiseConv2D")}depthwiseConv2DDerInput(t,e,n){return yu("depthwiseConv2DDerInput")}depthwiseConv2DDerFilter(t,e,n){return yu("depthwiseConv2DDerFilter")}conv3d(t,e,n){return yu("conv3d")}conv3dDerInput(t,e,n){return yu("conv3dDerInput")}conv3dDerFilter(t,e,n){return yu("conv3dDerFilter")}maxPool(t,e){return yu("maxPool")}maxPoolBackprop(t,e,n,r){return yu("maxPoolBackprop")}avgPool(t,e){return yu("avgPool")}avgPoolBackprop(t,e,n){return yu("avgPoolBackprop")}avgPool3d(t,e){return yu("avgPool3d")}avgPool3dBackprop(t,e,n){return yu("avgPool3dBackprop")}maxPool3d(t,e){return yu("maxPool3d")}maxPool3dBackprop(t,e,n,r){return yu("maxPool3dBackprop")}reshape(t,e){return yu("reshape")}cast(t,e){return yu("cast")}tile(t,e){return yu("tile")}pad(t,e,n){return yu("pad")}transpose(t,e){return yu("transpose")}gather(t,e,n){return yu("gather")}gatherND(t,e){return yu("gatherND")}scatterND(t,e,n){return yu("scatterND")}batchToSpaceND(t,e,n){return yu("batchToSpaceND")}spaceToBatchND(t,e,n){return yu("spaceToBatchND")}resizeBilinear(t,e,n,r){return yu("resizeBilinear")}resizeBilinearBackprop(t,e,n){return yu("resizeBilinearBackprop")}resizeNearestNeighbor(t,e,n,r){return yu("resizeNearestNeighbor")}resizeNearestNeighborBackprop(t,e,n){return yu("resizeNearestNeighborBackprop")}batchNormalization(t,e,n,r,s,a){return yu("batchNormalization")}localResponseNormalization4D(t,e,n,r,s){return yu("localResponseNormalization4D")}LRNGrad(t,e,n,r,s,a,i){return yu("LRNGrad")}multinomial(t,e,n,r){return yu("multinomial")}oneHot(t,e,n,r){return yu("oneHot")}cumsum(t,e,n,r){return yu("cumsum")}nonMaxSuppression(t,e,n,r,s){return yu("nonMaxSuppression")}fft(t){return yu("fft")}ifft(t){return yu("ifft")}complex(t,e){return yu("complex")}real(t){return yu("real")}imag(t){return yu("imag")}cropAndResize(t,e,n,r,s,a){return yu("cropAndResize")}depthToSpace(t,e,n){return yu("depthToSpace")}split(t,e,n){return yu("split")}sparseToDense(t,e,n,r){return yu("sparseToDense")}diag(t){return yu("diag")}fill(t,e,n){return yu("fill")}onesLike(t){return yu("onesLike")}zerosLike(t){return yu("zerosLike")}linspace(t,e,n){return yu("linspace")}dispose(){return yu("dispose")}}function yu(t){throw new Error(`'${t}' not yet implemented or not found in the registry. Did you forget to import the kernel?`)}let bu;function xu(){return null==bu&&(bu=ia().epsilon()),bu}bt.prototype.add=function(t){return this.throwIfDisposed(),sn(this,t)},bt.prototype.batchNorm=function(t,e,n,r,s){return this.throwIfDisposed(),da(this,t,e,n,r,s)},bt.prototype.broadcastTo=function(t){return this.throwIfDisposed(),Na(this,t)},bt.prototype.concat=function(t,e){return this.throwIfDisposed(),t instanceof bt&&(t=[t]),Ge([this,...t],e)},bt.prototype.div=function(t){return this.throwIfDisposed(),nr(this,t)},bt.prototype.divNoNan=function(t){return this.throwIfDisposed(),Fa(this,t)},bt.prototype.oneHot=function(t,e=1,n=0){return this.throwIfDisposed(),_s(this,t,e,n)},bt.prototype.notEqual=function(t){return this.throwIfDisposed(),La(this,t)},bt.prototype.pad=function(t,e){return this.throwIfDisposed(),mr(this,t,e)},bt.prototype.split=function(t,e){return this.throwIfDisposed(),Pe(this,t,e)},bt.prototype.squaredDifference=function(t){return this.throwIfDisposed(),si(this,t)},bt.prototype.sub=function(t){return this.throwIfDisposed(),ar(this,t)},bt.prototype.tile=function(t){return this.throwIfDisposed(),ir(this,t)},bt.prototype.transpose=function(t){return this.throwIfDisposed(),Rr(this,t)},gt=Ol;class wu extends Error{constructor(t){super(t),Object.setPrototypeOf(this,wu.prototype)}}class vu extends Error{constructor(t){super(t),Object.setPrototypeOf(this,vu.prototype)}}class Cu extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Cu.prototype)}}class Nu extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Nu.prototype)}}class Su extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Su.prototype)}}function ku(t,e){if(Array.isArray(t)){let n=[];for(let r=0;r<e;r++)n=n.concat(t);return n}{const n=new Array(e);return n.fill(t),n}}function Iu(t,e){if(!t)throw new Su(e)}function Eu(t,e){let n=0;for(const r of t)r===e&&n++;return n}function $u(t){return 1===t.length?t[0]:t}function Au(t){return Array.isArray(t)?t:[t]}function Ru(t){const e=t.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==e[0]?e:"private"+e}function Tu(t){return t.length<=1||-1===t.indexOf("_")?t:t.replace(/[_]+(\w|$)/g,(t,e)=>e.toUpperCase())}let Du={};function _u(t){if(null==t)return null;const e={};return e.className=t.getClassName(),e.config=t.getConfig(),e}function Ou(t,e={},n={},r="object",s=!1){if("string"==typeof t){const s=t;let a;if(s in n)a=n[s];else if(s in Du)a=Du[s];else if(a=e[s],null==a)throw new Cu(`Unknown ${r}: ${t}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return a}{const a=t;if(null==a.className||null==a.config)throw new Cu(r+": Improper config format: "+JSON.stringify(a)+".\n'className' and 'config' must set.");const i=a.className;let o,l;if(i in n?[o,l]=n[i]:i in Du?[o,l]=Du.className:i in e&&([o,l]=e[i]),null==o)throw new Cu(`Unknown ${r}: ${i}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=l){const t={};for(const e of Object.keys(Du))t[e]=Du[e];for(const e of Object.keys(n))t[e]=n[e];a.config.customObjects=t;const e=Object.assign({},Du);for(const t of Object.keys(n))Du[t]=n[t];!function t(e){if(null!=e&&"object"==typeof e)if(Array.isArray(e))e.forEach(e=>t(e));else{const n=Object.keys(e);for(const r of n){const n=e[r];null!=n&&"object"==typeof n&&(Array.isArray(n)||"ndarray"!==n.type||"number"!=typeof n.value?t(n):e[r]=n.value)}}}(a.config);const r=l(o,a.config,n,s);return Du=Object.assign({},e),r}{const t=Object.assign({},Du);for(const t of Object.keys(n))Du[t]=n[t];const e=new o(a.config);return Du=Object.assign({},t),e}}}function Fu(t,e){return-1*function(t,e){return t<e?-1:t>e?1:0}(t,e)}function Mu(t){if(null==t)return t;const e=[];for(const n of t)-1===e.indexOf(n)&&e.push(n);return e}function zu(t){if(null==t)throw new Cu("Invalid value in obj: "+JSON.stringify(t));for(const e in t)if(t.hasOwnProperty(e))return!1;return!0}function Lu(t,e,n){if(null!=n&&t.indexOf(n)<0)throw new Cu(`${n} is not a valid ${e}.  Valid values are ${t} or null/undefined.`)}function Bu(t,e,n=0,r=1/0){return Iu(n>=0),Iu(r>=n),Array.isArray(t)&&t.length>=n&&t.length<=r&&t.every(t=>typeof t===e)}function Pu(t,e){Array.isArray(t)?(v(t.length>0,()=>e+" is unexpectedly an empty array."),t.forEach((t,n)=>Pu(t,`element ${n+1} of ${e}`))):v(Number.isInteger(t)&&t>0,()=>`Expected ${e} to be a positive integer, but got `+function t(e){return null===e?"null":Array.isArray(e)?"["+e.map(e=>t(e)).join(",")+"]":"string"==typeof e?`"${e}"`:""+e}(t)+".")}function Wu(t){return"relu"===t?"relu":"linear"===t?"linear":"elu"===t?"elu":null}function Vu(t,e){return na(()=>Mn(ze(Jn(t,t),e,!0)))}class Uu extends js{getConfig(){return{}}}class Gu extends Uu{constructor(t){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=t.maxValue?t.maxValue:this.defaultMaxValue,this.axis=null!=t.axis?t.axis:this.defaultAxis}apply(t){return na(()=>{const e=Vu(t,this.axis),n=fn(e,0,this.maxValue);return Yn(t,nr(n,sn(xu(),e)))})}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}Gu.className="MaxNorm",Hs(Gu);class ju extends Uu{constructor(t){super(),this.defaultAxis=0,this.axis=null!=t.axis?t.axis:this.defaultAxis}apply(t){return na(()=>nr(t,sn(xu(),Vu(t,this.axis))))}getConfig(){return{axis:this.axis}}}ju.className="UnitNorm",Hs(ju);class qu extends Uu{apply(t){return bo(t)}}qu.className="NonNeg",Hs(qu);class Hu extends Uu{constructor(t){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=t.minValue?t.minValue:this.defaultMinValue,this.maxValue=null!=t.maxValue?t.maxValue:this.defaultMaxValue,this.rate=null!=t.rate?t.rate:this.defaultRate,this.axis=null!=t.axis?t.axis:this.defaultAxis}apply(t){return na(()=>{const e=Vu(t,this.axis),n=sn(Yn(this.rate,fn(e,this.minValue,this.maxValue)),Yn(1-this.rate,e));return Yn(t,nr(n,sn(xu(),e)))})}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}Hu.className="MinMaxNorm",Hs(Hu);const Ku={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function Xu(t){return _u(t)}function Yu(t,e={}){return Ou(t,qs.getMap().classNameMap,e,"constraint")}function Ju(t){if(null==t)return null;if("string"==typeof t){return Yu({className:t in Ku?Ku[t]:t,config:{}})}return t instanceof Uu?t:Yu(t)}var Zu=Object.freeze({__proto__:null,maxNorm:function(t){return new Gu(t)},unitNorm:function(t){return new ju(t)},nonNeg:function(){return new qu},minMaxNorm:function(t){return new Hu(t)}});const Qu=["channelsFirst","channelsLast"],tc=["valid","same","causal"],ec=["max","avg"],nc=["sum","mul","concat","ave"],rc=new Map;function sc(t){Lu(Qu,"DataFormat",t)}function ac(t){Lu(tc,"PaddingMode",t)}function ic(t){Lu(ec,"PoolMode",t)}const oc=[];function lc(t,e){oc.push(t);try{const t=e();return oc.pop(),t}catch(t){throw oc.pop(),t}}function uc(t){if(!dc(t))throw new Error("Not a valid tensor name: '"+t+"'");return(0===oc.length?"":oc.join("/")+"/")+t}function cc(t){if(!dc(t))throw new Error("Not a valid tensor name: '"+t+"'");rc.has(t)||rc.set(t,0);const e=rc.get(t);if(rc.set(t,rc.get(t)+1),e>0){const n=`${t}_${e}`;return rc.set(n,1),n}return t}const hc=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function dc(t){return!!t.match(hc)}function pc(t,e,n){null==e&&(e=0),null==n&&(n=t.length);let r=1;for(let s=e;s<n;++s)r*=t[s];return r}function fc(t){return pe(t=Array.isArray(t)?new Float32Array(t):t)}function mc(t){return Fe(fc(t)).dataSync()[0]}function gc(t){return _e(fc(t)).dataSync()[0]}function yc(t,e){if(e<t)throw new Cu(`end (${e}) < begin (${t}) is forbidden.`);const n=[];for(let r=t;r<e;++r)n.push(r);return n}function bc(t,e){return t.asType(e)}function xc(t,e=-1){const n=t.shape.slice();return e<0&&(e=n.length+e+1),n.splice(e,0,1),t.reshape(n)}function wc(t,e,n){return na(()=>{switch(t.rank){case 1:return kr(t,e,n);case 2:return Ir(t,[e,0],[n,t.shape[1]]);case 3:return Er(t,[e,0,0],[n,t.shape[1],t.shape[2]]);case 4:return $r(t,[e,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3]]);case 5:return Sr(t,[e,0,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3],t.shape[4]]);case 6:return Sr(t,[e,0,0,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3],t.shape[4],t.shape[5]]);default:throw new Cu("sliceAlongFirstAxis() received an unsupported tensor rank: "+t.rank)}})}function vc(t,e,n){return na(()=>{switch(t.rank){case 1:return kr(t,e,n);case 2:return Ir(t,[0,e],[t.shape[0],n]);case 3:return Er(t,[0,0,e],[t.shape[0],t.shape[1],n]);case 4:return $r(t,[0,0,0,e],[t.shape[0],t.shape[1],t.shape[2],n]);default:throw new Cu("sliceAlongLastAxis() received an unsupported tensor rank: "+t.rank)}})}function Cc(t,e,n,r){return na(()=>{switch(t.rank){case 1:return kr(t,e,n);case 2:switch(r){case 1:return wc(t,e,n);case 2:return vc(t,e,n);default:throw new Cu("The axis is not within the rank of the tensor "+r)}case 3:switch(r){case 1:return wc(t,e,n);case 2:return Er(t,[0,e,0],[t.shape[0],n,t.shape[2]]);case 3:return vc(t,e,n);default:throw new Cu("The axis is not within the rank of the tensor "+r)}case 4:switch(r){case 1:return wc(t,e,n);case 2:return $r(t,[0,e,0,0],[t.shape[0],n,t.shape[2],t.shape[3]]);case 3:return $r(t,[0,0,e,0],[t.shape[0],t.shape[1],n,t.shape[3]]);case 4:return vc(t,e,n);default:throw new Cu("The axis is not within the rank of the tensor "+r)}default:throw new Cu("sliceAlongLastAxis() received an unsupported tensor rank: "+t.rank)}})}function Nc(t,e=-1){let n;return e<0&&(n=t[0].rank,e=0!==n?n:0),e===t[0].rank&&(e=-1),Ge(t,e)}function Sc(t,e){switch(t.rank){case 1:return Sa([t,e]);case 2:return ka([t,e],0);case 3:return Ia([t,e],0);case 4:return Ea([t,e],0);default:throw new Cu("concatAlongFirstAxis() received an unsupported tensor rank: "+t.rank)}}function kc(t,e){if(Array.isArray(e)||(e=[e]),t.rank!==e.length)throw new Cu(`The length of input n (${e.length}) does not match the number of dimensions in input x (${t.rank})`);return ir(t,e)}function Ic(t,e=0,n=1,r,s){return ni(t,e,n,r,s)}function Ec(t,e,n,r){if(t.rank<2||e.rank<2)throw new Nu(`dot requires both inputs to be rank >= 2 but got x shape = ${t.shape} and y shape = ${e.shape}`);if(e.rank>=3){if(t.shape.slice(-1)[0]!==e.shape.slice(-2)[0])throw new Nu(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${t.shape} and  y shape = `+e.shape)}if(2===t.rank&&2===e.rank){return Rl({a:t,b:e,transposeA:!1,transposeB:!1,bias:r?Rc(t.rank,r,"channelsLast"):null,activation:n})}{const s=t.shape.slice(),a=s.pop();t=t.reshape([-1,a]);const i=e.shape.slice(),o=i.pop(),l=i.pop(),u=[...i,o],c=Array.from({length:e.rank},(t,n)=>0===n?e.rank-2:n<=e.rank-2?n-1:n);e=e.transpose(c).reshape([l,-1]);const h=[...s,...u];return Rl({a:t,b:e,transposeA:!1,transposeB:!1,bias:r?Rc(t.rank,r,"channelsLast"):null,activation:n}).reshape(h)}}function $c(t,e,n){return na(()=>(e=Array.isArray(e)?pe(e,"int32"):e.toInt(),Ci(t,e,n)))}function Ac(t){return Jn(t,t)}function Rc(t,e,n){const r=e.shape;if(1!==e.rank&&e.rank!==t)throw new Cu("Unexpected bias dimensions: "+e.rank+"; expected it to be 1 or "+t);if(5===t){if("channelsFirst"===n)return 1===r.length?e.reshape([1,r[0],1,1,1]):e.reshape([1,r[3],r[0],r[1],r[2]]);if("channelsLast"===n)return 1===r.length?e.reshape([1,1,1,1,r[0]]):e.reshape([1].concat(r))}else if(4===t){if("channelsFirst"===n)return 1===r.length?e.reshape([1,r[0],1,1]):e.reshape([1,r[2],r[0],r[1]]);if("channelsLast"===n)return 1===r.length?e.reshape([1,1,1,r[0]]):e.reshape([1].concat(r))}else if(3===t){if("channelsFirst"===n)return 1===r.length?e.reshape([1,r[0],1]):e.reshape([1,r[1],r[0]]);if("channelsLast"===n)return 1===r.length?e.reshape([1,1,r[0]]):e.reshape([1].concat(r))}else if(t<3)return e;throw new Cu("Unsupported input rank by biasAdd: "+e.rank)}function Tc(t,e,n){return na(()=>(null==n&&(n="channelsLast"),sc(n),t.add(Rc(t.rank,e,n))))}function Dc(t,e,n,r){return na(()=>Bo(t,e,n,r))}function _c(t,e,n=!1){return n?t():e()}const Oc=["fanIn","fanOut","fanAvg"],Fc=["normal","uniform","truncatedNormal"];class Mc extends js{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class zc extends Mc{apply(t,e){return ve(t,e)}}zc.className="Zeros",Hs(zc);class Lc extends Mc{apply(t,e){return we(t,e)}}Lc.className="Ones",Hs(Lc);class Bc extends Mc{constructor(t){if(super(),"object"!=typeof t)throw new Cu("Expected argument of type ConstantConfig but got "+t);if(void 0===t.value)throw new Cu("config must have value set but got "+t);this.value=t.value}apply(t,e){return na(()=>Yn(de(this.value),we(t,e)))}getConfig(){return{value:this.value}}}Bc.className="Constant",Hs(Bc);class Pc extends Mc{constructor(t){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=t.minval||this.DEFAULT_MINVAL,this.maxval=t.maxval||this.DEFAULT_MAXVAL,this.seed=t.seed}apply(t,e){return ri(t,this.minval,this.maxval,e)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}Pc.className="RandomUniform",Hs(Pc);class Wc extends Mc{constructor(t){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=t.mean||this.DEFAULT_MEAN,this.stddev=t.stddev||this.DEFAULT_STDDEV,this.seed=t.seed}apply(t,e){if("float32"!==(e=e||"float32")&&"int32"!==e)throw new Nu(`randomNormal does not support dType ${e}.`);return Ic(t,this.mean,this.stddev,e,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Wc.className="RandomNormal",Hs(Wc);class Vc extends Mc{constructor(t){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=t.mean||this.DEFAULT_MEAN,this.stddev=t.stddev||this.DEFAULT_STDDEV,this.seed=t.seed}apply(t,e){if("float32"!==(e=e||"float32")&&"int32"!==e)throw new Nu(`truncatedNormal does not support dType ${e}.`);return ai(t,this.mean,this.stddev,e,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Vc.className="TruncatedNormal",Hs(Vc);class Uc extends Mc{constructor(t){super(),this.gain=null!=t.gain?t.gain:1}apply(t,e){return na(()=>{if(2!==t.length||t[0]!==t[1])throw new Cu("Identity matrix initializer can only be used for 2D square matrices.");return Yn(this.gain,Ma(t[0]))})}getConfig(){return{gain:this.gain}}}Uc.className="Identity",Hs(Uc);class Gc extends Mc{constructor(t){if(super(),t.scale<0)throw new Cu("scale must be a positive float. Got: "+t.scale);var e;this.scale=null==t.scale?1:t.scale,this.mode=null==t.mode?"fanIn":t.mode,e=this.mode,Lu(Oc,"FanMode",e),this.distribution=null==t.distribution?"normal":t.distribution,function(t){Lu(Fc,"Distribution",t)}(this.distribution),this.seed=t.seed}apply(t,e){const n=function(t,e="channelsLast"){let n,r;if(sc(e),2===t.length)n=t[0],r=t[1];else if(-1!==[3,4,5].indexOf(t.length)){if("channelsFirst"===e){const e=pc(t,2);n=t[1]*e,r=t[0]*e}else if("channelsLast"===e){const e=pc(t,0,t.length-2);n=t[t.length-2]*e,r=t[t.length-1]*e}}else{const e=pc(t);n=Math.sqrt(e),r=Math.sqrt(e)}return[n,r]}(t),r=n[0],s=n[1];let a=this.scale;if("fanIn"===this.mode?a/=Math.max(1,r):"fanOut"===this.mode?a/=Math.max(1,s):a/=Math.max(1,(r+s)/2),"normal"===this.distribution){const n=Math.sqrt(a);if("float32"!==(e=e||"float32")&&"int32"!==e)throw new Nu(`${this.getClassName()} does not support dType ${e}.`);return ai(t,0,n,e,this.seed)}{const n=Math.sqrt(3*a);return ri(t,-n,n,e)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}Gc.className="VarianceScaling",Hs(Gc);class jc extends Gc{constructor(t){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==t?null:t.seed})}getClassName(){return Gc.className}}jc.className="GlorotUniform",Hs(jc);class qc extends Gc{constructor(t){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==t?null:t.seed})}getClassName(){return Gc.className}}qc.className="GlorotNormal",Hs(qc);class Hc extends Gc{constructor(t){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==t?null:t.seed})}getClassName(){return Gc.className}}Hc.className="HeNormal",Hs(Hc);class Kc extends Gc{constructor(t){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==t?null:t.seed})}getClassName(){return Gc.className}}Kc.className="HeUniform",Hs(Kc);class Xc extends Gc{constructor(t){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==t?null:t.seed})}getClassName(){return Gc.className}}Xc.className="LeCunNormal",Hs(Xc);class Yc extends Gc{constructor(t){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==t?null:t.seed})}getClassName(){return Gc.className}}Yc.className="LeCunNormal",Hs(Yc);class Jc extends Mc{constructor(t){if(super(),this.DEFAULT_GAIN=1,this.gain=null==t.gain?this.DEFAULT_GAIN:t.gain,this.seed=t.seed,null!=this.seed)throw new Nu("Random seed is not implemented for Orthogonal Initializer yet.")}apply(t,e){return na(()=>{if(2!==t.length)throw new Nu("The Orthogonal Initializer does not support non-2D shapes yet.");t[0]*t[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${t[0]*t[1]}) elements: Slowness may result.`);const e=Ic(t[0]>t[1]?[t[1],t[0]]:t,0,1,"float32");let n=il(e);return t[0]>t[1]&&(n=n.transpose()),Yn(this.gain,n)})}getConfig(){return{gain:this.gain,seed:this.seed}}}Jc.className="Orthogonal",Hs(Jc);const Zc={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function Qc(t,e={}){return Ou(t,qs.getMap().classNameMap,e,"initializer")}function th(t){return _u(t)}function eh(t){if("string"==typeof t){const e=t in Zc?Zc[t]:t;if("GlorotNormal"===e)return new qc;if("GlorotUniform"===e)return new jc;if("HeNormal"===e)return new Hc;if("HeUniform"===e)return new Kc;if("LeCunNormal"===e)return new Xc;if("LeCunUniform"===e)return new Yc;{const t={};return t.className=e,t.config={},Qc(t)}}return t instanceof Mc?t:Qc(t)}var nh=Object.freeze({__proto__:null,zeros:function(){return new zc},ones:function(){return new Lc},constant:function(t){return new Bc(t)},randomUniform:function(t){return new Pc(t)},randomNormal:function(t){return new Wc(t)},truncatedNormal:function(t){return new Vc(t)},identity:function(t){return new Uc(t)},varianceScaling:function(t){return new Gc(t)},glorotUniform:function(t){return new jc(t)},glorotNormal:function(t){return new qc(t)},heNormal:function(t){return new Hc(t)},heUniform:function(t){return new Kc(t)},leCunNormal:function(t){return new Xc(t)},leCunUniform:function(t){return new Yc(t)},orthogonal:function(t){return new Jc(t)}});let rh=0;function sh(){return rh++}const ah={};function ih(t=""){return t in ah||(ah[t]=0),ah[t]+=1,t+ah[t].toString()}function oh(t){return Array.isArray(t)&&Array.isArray(t[0])}function lh(t){return 0===t.length?[]:Array.isArray(t[0])?t:[t]}function uh(t){let e;if(Array.isArray(t)){if(1!==t.length)throw new Cu("Expected Tensor length to be 1; got "+t.length);e=t[0]}else e=t;return e}function ch(t){if(Array.isArray(t)&&Array.isArray(t[0])){if(1===t.length)return(t=t)[0];throw new Cu("Expected exactly 1 Shape; got "+t.length)}return t}function hh(t){let e=0;for(const n of t)0===n.shape.length?e+=1:e+=n.shape.reduce((t,e)=>t*e);return e}class dh{constructor(t,e="float32",n="Variable",r=!0,s=null){this.dtype=null==e?"float32":e,this.shape=t.shape,this.id=sh(),n=null==n?"Variable":n,this.originalName=uc(n),this.name=cc(this.originalName),this.trainable_=r,this.constraint=s,this.val=xe(t,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(t){return this.assertNotDisposed(),function(t,e){if(t.shape.toString()!==e.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(t.shape)+" vs. "+JSON.stringify(e.shape))}(this.val,t),this.val.id!==t.id&&(this.val.assign(t),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(t){this.trainable_=t,this.val.trainable=t}}function ph(t){return t.map(t=>t.read())}function fh(t){t.forEach(t=>{t[0].write(t[1])})}class mh{constructor(t){this.dtype=t.dtype,this.shape=t.shape,null!=t.shape?this.ndim=t.shape.length:this.ndim=t.ndim,this.maxNDim=t.maxNDim,this.minNDim=t.minNDim,this.axes=t.axes||{}}}class gh{constructor(t,e,n,r,s,a,i){this.dtype=t,this.shape=e,this.sourceLayer=n,this.inputs=r,this.callArgs=s,this.outputTensorIndex=i,this.id=sh(),null!=a&&(this.originalName=uc(a),this.name=cc(this.originalName)),this.rank=e.length}}let yh=0;class bh{constructor(t,e){this.callArgs=e,this.id=yh++,this.outboundLayer=t.outboundLayer,this.inboundLayers=t.inboundLayers,this.nodeIndices=t.nodeIndices,this.tensorIndices=t.tensorIndices,this.inputTensors=t.inputTensors,this.outputTensors=t.outputTensors,this.inputMasks=t.inputMasks,this.outputMasks=t.outputMasks,this.inputShapes=t.inputShapes,this.outputShapes=t.outputShapes;for(const e of t.inboundLayers)null!=e&&e.outboundNodes.push(this);t.outboundLayer.inboundNodes.push(this)}getConfig(){const t=[];for(const e of this.inboundLayers)null!=e?t.push(e.name):t.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:t,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let xh=0;class wh extends js{constructor(t){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=xh++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let e=t.name;if(!e){const t=this.getClassName();e=Ru(t)+"_"+ih(t)}if(this.name=e,this.trainable_=null==t.trainable||t.trainable,null!=t.inputShape||null!=t.batchInputShape){let e;if(null!=t.batchInputShape)e=t.batchInputShape;else if(null!=t.inputShape){let n=null;null!=t.batchSize&&(n=t.batchSize),e=[n].concat(t.inputShape)}this.batchInputShape=e;let n=t.dtype;null==n&&(n=t.inputDType),null==n&&(n="float32"),this.dtype=n}null!=t.weights?this.initialWeights=t.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(t,e){return t.name+"_ib-"+e.toString()}getNodeAtIndex(t,e){if(0===this.inboundNodes.length)throw new vu(`The layer has never been called and thus has no defined ${e}.`);if(this.inboundNodes.length<=t)throw new Cu(`Asked to get ${e} at node ${t}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[t]}getInputAt(t){return $u(this.getNodeAtIndex(t,"input").inputTensors)}getOutputAt(t){return $u(this.getNodeAtIndex(t,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new wu("Layer "+this.name+' has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use `getInputAt(nodeIndex)` instead.');if(0===this.inboundNodes.length)throw new wu("Layer "+this.name+" is not connected, no input to return.");return $u(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new wu("Layer "+this.name+" has no inbound nodes.");if(this.inboundNodes.length>1)throw new wu("Layer "+this.name+' has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use `getOutputAt(nodeIndex)` instead.');return $u(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map(t=>t())}get updates(){return this._updates}get built(){return this._built}set built(t){this._built=t}get trainable(){return this.trainable_}set trainable(t){this._trainableWeights.forEach(e=>e.trainable=t),this.trainable_=t}get trainableWeights(){return this.trainable_?this._trainableWeights.filter(t=>t.trainable):[]}set trainableWeights(t){this._trainableWeights=t}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter(t=>!t.trainable).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(t){this._nonTrainableWeights=t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(t){if(t=Au(t),null==this.inputSpec||0===this.inputSpec.length)return;const e=Au(this.inputSpec);if(t.length!==e.length)throw new Cu(`Layer ${this.name} expects ${e.length} inputs, but it received ${t.length} input tensors. Input received: `+t);for(let n=0;n<t.length;n++){const r=t[n],s=e[n];if(null==s)continue;const a=r.rank;if(null!=s.ndim&&a!==s.ndim)throw new Cu(`Input ${n} is incompatible with layer ${this.name}: expected ndim=${s.ndim}, found ndim=${a}`);if(null!=s.maxNDim&&a>s.maxNDim)throw new Cu(`Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${s.maxNDim}, found ndim=${a}`);if(null!=s.minNDim&&a<s.minNDim)throw new Cu(`Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${s.minNDim}, found ndim=${a}.`);if(null!=s.dtype&&r.dtype!==s.dtype)throw new Cu(`Input ${n} is incompatible with layer ${this.name} : expected dtype=${s.dtype}, found dtype=${r.dtype}.`);if(s.axes){const t=r.shape;for(const e in s.axes){const r=Number(e),a=s.axes[e],i=r>=0?t[r]:t[t.length+r];if(null!=a&&-1===[a,null].indexOf(i))throw new Cu(`Input ${n} is incompatible with layer ${this.name}: expected axis ${r} of input shape to have value ${a} but got shape ${t}.`)}}if(null!=s.shape)for(let t=0;t<s.shape.length;++t){const e=s.shape[t],a=r.shape[t];if(null!=e&&null!=a&&e!==a)throw new Cu(`Input ${n} is incompatible with layer ${this.name}: expected shape=${s.shape}, found shape=${r.shape}.`)}}}call(t,e){return t}invokeCallHook(t,e){null!=this._callHook&&this._callHook(t,e)}setCallHook(t){this._callHook=t}clearCallHook(){this._callHook=null}apply(t,e){e=e||{},this.assertNotDisposed();const n=Au(t);let r=!0;for(const t of n)if(!(t instanceof gh)){r=!1;break}let s=!0;for(const t of n)if(t instanceof gh){s=!1;break}if(r===s)throw new Cu("Arguments to apply() must be all SymbolicTensors or all Tensors");return lc(this.name,()=>{if(!this.built){this.assertInputCompatibility(t);const e=[];for(const n of Au(t))e.push(n.shape);this.build($u(e)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&s&&(this._refCount=1)}if(this.assertInputCompatibility(t),s){let r=this.call(t,e);const s=Au(r),a=[];for(let t of s)-1!==n.indexOf(t)&&(t=t.clone()),a.push(t);if(r=$u(a),null!=this.activityRegularizer)throw new Nu("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return r}{const n=function(t){t=Au(t);const e=[];for(const n of t)e.push(n.shape);return $u(e)}(t),r=this.computeOutputShape(n);let s;const a="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(t)?n[0]:n),s=null!=r&&r.length>0&&Array.isArray(r[0])?r.map((n,r)=>new gh(a,n,this,Au(t),e,this.name,r)):new gh(a,r,this,Au(t),e,this.name),this.addInboundNode(t,s,null,null,n,r,e),this._refCount++,null!=this.activityRegularizer)throw new Nu("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}})}warnOnIncompatibleInputShape(t){if(null!=this.batchInputShape)if(t.length!==this.batchInputShape.length)console.warn("The rank of the input tensor provided (shape: "+JSON.stringify(t)+") does not match that of the "+`batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer `+this.name);else{let e=!1;this.batchInputShape.forEach((n,r)=>{null!=n&&null!=t[r]&&t[r]!==n&&(e=!0)}),e&&console.warn(`The shape of the input tensor (${JSON.stringify(t)}) does not match the expectation of layer ${this.name}: `+JSON.stringify(this.batchInputShape))}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new wu(`The layer ${this.name} has never been called and thus has no defined output shape.`);const t=[];for(const e of this.inboundNodes){const n=JSON.stringify(e.outputShapes);-1===t.indexOf(n)&&t.push(n)}if(1===t.length){const t=this.inboundNodes[0].outputShapes;return Array.isArray(t)&&Array.isArray(t[0])&&1===t.length?t[0]:t}throw new wu(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "outut shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new vu(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return hh(this.weights)}build(t){this.built=!0}getWeights(t=!1){return ph(t?this.trainableWeights:this.weights)}setWeights(t){na(()=>{const e=this.weights;if(e.length!==t.length)throw new Cu(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${t.length}, but the layer was expecting ${e.length} weights. Provided weights: ${t}...`);if(0===e.length)return;const n=[],r=ph(e);for(let s=0;s<r.length;++s){const a=r[s],i=e[s],o=t[s];if(!I(a.shape,o.shape))throw new Cu(`Layer weight shape ${a.shape} not compatible with provided weight shape `+o.shape);n.push([i,o])}fh(n)})}addWeight(t,e,n,r,s,a,i){if(-1!==this._addedWeightNames.indexOf(t))throw new Cu(`Duplicate weight name ${t} for layer ${this.name}`);this._addedWeightNames.push(t),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(r=eh("zeros"));const o=r.apply(e,n),l=new dh(o,n,t,a,i);return o.dispose(),null!=s&&this.addLoss(()=>s.apply(l.read())),null==a&&(a=!0),a?this._trainableWeights.push(l):this._nonTrainableWeights.push(l),l}setFastWeightInitDuringBuild(t){this.fastWeightInitDuringBuild=t}addLoss(t){null==t||Array.isArray(t)&&0===t.length||(t=Au(t),void 0!==this._losses&&null!==this._losses&&this.losses.push(...t))}computeOutputShape(t){return t}computeMask(t,e){if(!this.supportsMasking){if(null!=e){if(!Array.isArray(e))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);e.forEach(t=>{if(null!=t)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)})}return null}return e}addInboundNode(t,e,n,r,s,a,i=null){const o=Au(t);e=Au(e),n=Au(n),r=Au(r),s=lh(s),a=lh(a);const l=[],u=[],c=[];for(const t of o)l.push(t.sourceLayer),u.push(t.nodeIndex),c.push(t.tensorIndex);new bh({outboundLayer:this,inboundLayers:l,nodeIndices:u,tensorIndices:c,inputTensors:o,outputTensors:e,inputMasks:n,outputMasks:r,inputShapes:s,outputShapes:a},i);for(let t=0;t<e.length;t++)e[t].sourceLayer=this,e[t].nodeIndex=this.inboundNodes.length-1,e[t].tensorIndex=t}getConfig(){const t={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(t.batchInputShape=this.batchInputShape),null!=this.dtype&&(t.dtype=this.dtype),t}disposeWeights(){return this.weights.forEach(t=>t.dispose()),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let t=0;return 0==--this._refCount&&(t=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:t}}}class vh extends wh{constructor(t){if(super({dtype:t.dtype,name:null!=t.name?t.name:ih("input").toString()}),null==t.batchSize&&(t.batchSize=null),null==t.sparse&&(t.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=t.sparse,null!=t.inputShape&&null!=t.batchInputShape)throw new Cu("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let e=t.batchInputShape;if(null==e){if(null==t.inputShape)throw new Cu("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");e=[t.batchSize].concat(t.inputShape)}else if(null!=t.batchSize)throw new Cu("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=t.dtype||"float32";this.batchInputShape=e,this.dtype=n,this.inputSpec=[{shape:e}];const r=new gh(this.dtype,this.batchInputShape,this,[],{},this.name);r.nodeIndex=0,r.tensorIndex=0,new bh({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[r],outputTensors:[r],inputMasks:[null],outputMasks:[null],inputShapes:[e],outputShapes:[e]})}apply(t,e){throw new Cu("Cannot pass any input to an InputLayer's apply() method. InputLayer name: "+this.name)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}function Ch(t){if(null==t.batchShape&&null==t.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=t.batchShape&&null!=t.shape)throw new Cu("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let e=t.batchShape;null!=t.shape&&null==e&&(e=[null].concat(t.shape));let n=t.dtype;return null==n&&(n="float32"),new vh({batchInputShape:e,name:t.name,dtype:n,sparse:t.sparse}).inboundNodes[0].outputTensors[0]}async function Nh(t){if(null==t)return;const e=[],n=[],r=[];for(const s in t){const a=t[s];if("number"!=typeof a){const t=a;e.push(t.data()),n.push(s),r.push(t)}}if(e.length>0){const s=await Promise.all(e);for(let e=0;e<s.length;++e)t[n[e]]=s[e][0];ra(r)}}function Sh(t){if(null!=t)for(const e in t){const n=t[e];"number"!=typeof n&&n.dispose()}}var kh;vh.className="InputLayer",Hs(vh),function(t){t[t.SILENT=0]="SILENT",t[t.VERBOSE=1]="VERBOSE"}(kh||(kh={}));class Ih{constructor(){this.validationData=null}setParams(t){this.params=t}async onEpochBegin(t,e){}async onEpochEnd(t,e){}async onBatchBegin(t,e){}async onBatchEnd(t,e){}async onTrainBegin(t){}async onTrainEnd(t){}setModel(t){}}class Eh{constructor(t,e=10){null==t&&(t=[]),this.callbacks=t,this.queueLength=e}append(t){this.callbacks.push(t)}setParams(t){for(const e of this.callbacks)e.setParams(t)}setModel(t){for(const e of this.callbacks)e.setModel(t)}async onEpochBegin(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onEpochBegin(t,e)}async onEpochEnd(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onEpochEnd(t,e)}async onBatchBegin(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onBatchBegin(t,e)}async onBatchEnd(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onBatchEnd(t,e)}async onTrainBegin(t){null==t&&(t={});for(const e of this.callbacks)await e.onTrainBegin(t)}async onTrainEnd(t){null==t&&(t={});for(const e of this.callbacks)await e.onTrainEnd(t)}}class $h extends Ih{constructor(){super()}async onEpochBegin(t){this.seen=0,this.totals={}}async onBatchEnd(t,e){null==e&&(e={});const n=null==e.size?0:e.size;this.seen+=n;for(const t in e){const r=e[t];if("number"==typeof r)this.totals.hasOwnProperty(t)||(this.totals[t]=0),this.totals[t]=this.totals[t]+r*n;else{let e;t in this.totals?e=this.totals[t]:this.totals[t]=0;const s=na(()=>sn(this.totals[t],Yn(r,n)));this.totals[t]=s,null!=e&&e.dispose()}}}async onEpochEnd(t,e){if(null!=e)for(const t of this.params.metrics)null!=this.totals[t]&&("number"==typeof this.totals[t]?e[t]=this.totals[t]/this.seen:na(()=>{const n=Yn(nr(1,this.seen),this.totals[t]);e[t]=n,this.totals[t].dispose(),sa(e[t])}))}}class Ah extends Ih{async onTrainBegin(t){this.epoch=[],this.history={}}async onEpochEnd(t,e){null==e&&(e={}),this.epoch.push(t);for(const t in e)null==this.history[t]&&(this.history[t]=[]),this.history[t].push(e[t])}async syncData(){const t=[],e=[],n=[];for(const r in this.history){const s=this.history[r];for(let a=0;a<s.length;++a)if("number"!=typeof s[a]){const i=s[a];t.push(i.data()),e.push(r),n.push(a)}}const r=await Promise.all(t);for(let t=0;t<r.length;++t){this.history[e[t]][n[t]].dispose(),this.history[e[t]][n[t]]=r[t][0]}}}class Rh extends Ih{constructor(t,e){if(super(),this.currentEpoch=0,this.yieldEvery=e||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=t.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");j(this.yieldEvery)&&(this.maybeWait=function(t,e){let n,r=tt();return(...s)=>{const a=tt();return a-r<e||(r=a,n=t(...s)),n}}(this.maybeWait.bind(this),this.yieldEvery)),this.trainBegin=t.onTrainBegin,this.trainEnd=t.onTrainEnd,this.epochBegin=t.onEpochBegin,this.epochEnd=t.onEpochEnd,this.batchBegin=t.onBatchBegin,this.batchEnd=t.onBatchEnd,this.yield=t.onYield}async maybeWait(t,e,n){const r=[];null!=this.yield&&(await Nh(n),r.push(this.yield(t,e,n))),r.push(ql()),await Promise.all(r)}async onEpochBegin(t,e){this.currentEpoch=t,null!=this.epochBegin&&(await Nh(e),await this.epochBegin(t,e))}async onEpochEnd(t,e){const n=[];null!=this.epochEnd&&(await Nh(e),n.push(this.epochEnd(t,e))),"epoch"===this.yieldEvery&&n.push(ql()),await Promise.all(n)}async onBatchBegin(t,e){null!=this.batchBegin&&(await Nh(e),await this.batchBegin(t,e))}async onBatchEnd(t,e){const n=[];null!=this.batchEnd&&(await Nh(e),n.push(this.batchEnd(t,e))),"batch"===this.yieldEvery?n.push(ql()):j(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,t,e)),await Promise.all(n)}async onTrainBegin(t){null!=this.trainBegin&&(await Nh(t),await this.trainBegin(t))}async onTrainEnd(t){null!=this.trainEnd&&(await Nh(t),await this.trainEnd(t))}}function Th(t,e){if(null==t&&(t={}),t instanceof Ih)return[t];if(Array.isArray(t)&&t[0]instanceof Ih)return t;return Au(t).map(t=>new Rh(t,e))}class Dh{constructor(){}static registerCallbackConstructor(t,e){v(t>=0&&Number.isInteger(t),()=>"Verbosity level is expected to be an integer >= 0, but got "+t),Dh.checkForDuplicate(e),null==Dh.constructors[t]&&(Dh.constructors[t]=[]),Dh.constructors[t].push(e)}static checkForDuplicate(t){for(const e in Dh.constructors){Dh.constructors[+e].forEach(e=>{if(e===t)throw new Cu("Duplicate callback constructor.")})}}static clear(){Dh.constructors={}}static createCallbacks(t){const e=[];for(const n in Dh.constructors){const r=+n;t>=r&&e.push(...Dh.constructors[r])}return e.map(t=>new t)}}function _h(t,e,n,r,s,a,i,o,l){const u=new Ah,c=[new $h,...Dh.createCallbacks(e)];null!=t&&c.push(...t),c.push(u);const h=new Eh(c);return h.setParams({epochs:n,initialEpoch:r,samples:s,steps:a,batchSize:i,verbose:e,doValidation:o,metrics:l}),{callbackList:h,history:u}}function Oh(t,e={},n=!1){return Ou(t,qs.getMap().classNameMap,e,"layer",n)}function Fh(t,e){return na(()=>{"float32"!==t.dtype&&(t=t.asType("float32"));const n=ze(Ac(t),e,!0),r=Ce(n.shape,xu()),s=Mn(Gn(n,r));return nr(t,s)})}function Mh(t,e){return na(()=>Oe(Ac(ar(e,t)),-1))}function zh(t,e){return na(()=>Oe(an(ar(e,t)),-1))}function Lh(t,e){return na(()=>{const n=ar(t,e),r=fn(an(t),xu(),Number.MAX_VALUE),s=an(nr(n,r));return Yn(100,Oe(s,-1))})}function Bh(t,e,n=!1){return na(()=>{if(n)e=vo(e);else{const t=ze(e,e.shape.length-1,!0);e=nr(e,t)}return e=fn(e,xu(),1-xu()),Sn(ze(Yn(t.toFloat(),vn(e)),e.shape.length-1))})}function Ph(t,e){return na(()=>{const n=wn(function(t){const e=[pc(t.shape)];return t.reshape(e)}(t)).toInt(),r=(e=fn(e,xu(),1-xu())).shape;return Bh(_s(n,r[r.length-1]).reshape(r),e,!1)})}function Wh(t,e){return na(()=>{let n;return n=fn(e,xu(),1-xu()),n=vn(nr(n,ar(1,n))),Oe(function(t,e){if(!I(t.shape,e.shape))throw new Cu(`logits and labels must have the same shape, but got shapes ${JSON.stringify(t.shape)} and ${JSON.stringify(e.shape)}`);return na(()=>{const n=e.relu(),r=e.abs().neg();return n.sub(e.mul(t)).add(r.exp().log1p())})}(t,n),-1)})}function Vh(t,e){return na(()=>{const n=Fh(t,-1),r=Fh(e,-1),s=Yn(n,r);return Sn(ze(s,-1))})}Dh.constructors={};const Uh={meanSquaredError:Mh,meanAbsoluteError:zh,meanAbsolutePercentageError:Lh,meanSquaredLogarithmicError:function(t,e){return na(()=>{const n=fn(e,xu(),Number.MAX_VALUE),r=vn(sn(1,n)),s=fn(t,xu(),Number.MAX_VALUE),a=vn(sn(1,s));return Oe(Ac(ar(r,a)),-1)})},squaredHinge:function(t,e){return na(()=>{const n=Gn(0,ar(1,Yn(t,e)));return Oe(Ac(n),-1)})},hinge:function(t,e){return na(()=>{const n=Gn(0,ar(1,Yn(t,e)));return Oe(n,-1)})},categoricalHinge:function(t,e){return na(()=>{const n=ze(Yn(t,e),-1),r=_e(Yn(ar(1,t),e),-1);return Gn(0,sn(1,ar(r,n)))})},logcosh:function(t,e){return na(()=>{const n=Math.log(2),r=ar(e,t),s=ar(sn(r,Fn(Yn(-2,r))),n);return Oe(s,-1)})},categoricalCrossentropy:Bh,sparseCategoricalCrossentropy:Ph,binaryCrossentropy:Wh,kullbackLeiblerDivergence:function(t,e){return na(()=>{const n=fn(t,xu(),1),r=fn(e,xu(),1);return ze(Yn(t,vn(nr(n,r))),-1)})},poisson:function(t,e){return na(()=>{const n=vn(sn(xu(),e));return Oe(ar(e,Yn(t,n)),-1)})},cosineProximity:Vh};function Gh(t){if("string"==typeof t){if(t in Uh)return Uh[t];let e="Unknown loss "+t;throw t.toLowerCase().includes("softmaxcrossentropy")&&(e=`Unknown loss ${t}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new Cu(e)}return t}function jh(t,e){return na(()=>{const n=Yn(.5,ke(e)),r=bc(li(e,n),t.dtype);return Oe(ii(t,r),-1)})}function qh(t,e){return na(()=>bc(ii(Re(t,-1),Re(e,-1)),"float32"))}function Hh(t,e){return na(()=>Aa(t.equal(1),e.equal(1)).sum().cast("float32"))}function Kh(t,e){return na(()=>{const n=Hh(t,e),r=function(t,e){return na(()=>Aa(t.equal(0),e.equal(1)).sum().cast("float32"))}(t,e),s=n.add(r);return _a(li(s,0),n.div(s),0).cast("float32")})}function Xh(t,e){return na(()=>{const n=Hh(t,e),r=function(t,e){return na(()=>Aa(t.equal(1),e.equal(0)).sum().cast("float32"))}(t,e),s=n.add(r);return _a(li(s,0),n.div(s),0).cast("float32")})}function Yh(t,e){return Wh(t,e)}function Jh(t,e){return t.rank===e.rank&&(t=t.squeeze([t.rank-1])),(e=e.argMax(-1)).dtype!==t.dtype&&(e=e.asType(t.dtype)),ii(t,e).asType("float32")}const Zh=Bh,Qh=Ph,td={binaryAccuracy:jh,categoricalAccuracy:qh,precision:Kh,categoricalCrossentropy:Zh,sparseCategoricalCrossentropy:Qh,mse:Mh,MSE:Mh,mae:zh,MAE:zh,mape:Lh,MAPE:Lh,cosine:Vh};function ed(t){if("string"==typeof t&&t in td)return td[t];if("string"!=typeof t&&null!=t)return t;throw new Cu("Unknown metric "+t)}function nd(t){if(Iu(null!==t,"Unknown LossOrMetricFn "+t),"string"==typeof t)return t;{let e;for(const n of Object.keys(Uh))if(Uh[n]===t){e=n;break}if(void 0!==e)return e;for(const n of Object.keys(td))if(td[n]===t){e=n;break}return void 0!==e?e:t.name}}function rd(t,e,n=!1){if(null==t||"object"!=typeof t||Object.getPrototypeOf(t)!==Object.prototype||!function t(e){if(null===e)return!0;if("object"==typeof e){if(Object.getPrototypeOf(e)===Object.prototype){const n=Object.keys(e);for(const r of n){if("string"!=typeof r)return!1;if(!t(e[r]))return!1}return!0}if(Array.isArray(e)){for(const n of e)if(!t(n))return!1;return!0}return!1}{const t=typeof e;return"string"===t||"number"===t||"boolean"===t}}(t))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(t);n.length>1048576&&console.warn(`User-defined metadata of model "${e}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function sd(t,e,n,r=console.log){const s=function(t){let e=!0;const n=[],r=[];for(const e in t.nodesByDepth)n.push(t.nodesByDepth[e]);for(const t of n){if(t.length>1||1===t.length&&t[0].inboundLayers.length>1){e=!1;break}r.push(...t)}if(e)for(const n of t.layers){let t=!1;for(const s of n.inboundNodes)if(-1!==r.indexOf(s)){if(t){e=!1;break}t=!0}if(!e)break}return e}(t),a=["Layer (type)","Output shape","Param #"];let i;if(s?(e=e||65,n=n||[.45,.85,1]):(e=e||98,n=n||[.33,.55,.67,1]),n[n.length-1]<=1&&(n=n.map(t=>Math.floor(e*t))),!s){a.push("Receives inputs"),i=[];for(const e in t.nodesByDepth)i.push(...t.nodesByDepth[e])}r("_".repeat(e)),ad(a,n,r),r("=".repeat(e));const o=t.layers;for(let t=0;t<o.length;++t)s?id(o[t],n,r):od(o[t],n,i,r),r((t===o.length-1?"=":"_").repeat(e));t.checkTrainableWeightsConsistency();const l=function(t){let e;e=null!=t.collectedTrainableWeights?hh(t.collectedTrainableWeights):hh(t.trainableWeights);return e}(t),u=hh(t.nonTrainableWeights);r("Total params: "+(l+u)),r("Trainable params: "+l),r("Non-trainable params: "+u),r("_".repeat(e))}function ad(t,e,n=console.log){let r="";for(let n=0;n<t.length;++n)n>0&&(r=r.slice(0,r.length-1)+" "),r+=t[n],r=r.slice(0,e[n]),r+=" ".repeat(e[n]-r.length);n(r)}function id(t,e,n){let r;try{r=JSON.stringify(t.outputShape)}catch(t){r="multiple"}ad([`${t.name} (${t.getClassName()})`,r,t.countParams().toString()],e,n)}function od(t,e,n,r){let s;try{s=JSON.stringify(t.outputShape)}catch(t){s="multiple"}const a=[];for(const e of t.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(e)))for(let t=0;t<e.inboundLayers.length;++t){const n=e.inboundLayers[t].name,r=e.nodeIndices[t],s=e.tensorIndices[t];a.push(`${n}[${r}][${s}]`)}const i=t.name,o=t.getClassName(),l=0===a.length?"":a[0];ad([`${i} (${o})`,s,t.countParams().toString(),l],e,r);for(let t=1;t<a.length;++t)ad(["","","",a[t]],e,r)}function ld(t,e,n){return("inboundNodes"===t||"outputLayers"===t||"inputLayers"===t)&&0===e&&"string"==typeof n}function ud(t,e){if(null===t)return null;if("string"==typeof t)return Tu(t);if("number"==typeof t||"boolean"==typeof t)return t;if(t instanceof Array){const n=[],r=t.length;for(let s=0;s<r;++s){const r=t[s];ld(e,s,r)?n.push(r):n.push(ud(r,e))}return n}{const e={};for(const n of Object.keys(t)){const r=t[n];if("name"===n&&"string"==typeof r)e[n]=r;else{const t=Tu(n);e[t]=ud(r,t)}}return e}}class cd{constructor(t){if(this.id2Value={},this.id2Mask={},this.name2Id={},t instanceof cd)for(const e in t.id2Value)this.id2Value[e]=t.id2Value[e],e in t.id2Mask&&(this.id2Mask[e]=t.id2Mask[e]);else{if(null==t)return;for(const e of t)this.add(e.key,e.value)}}add(t,e,n){if(null!=this.id2Value[t.id])throw new Cu(`Duplicate key: name=${t.name}, id=${t.id}`);return this.id2Value[t.id]=function(t,e){if(null==t.dtype||t.dtype===e.dtype)return e;try{return Ke(e,t.dtype)}catch(n){throw new Cu(`The dtype of the feed (${e.dtype}) can not be cast to the dtype of the key '${t.name}' (${t.dtype}).`)}}(t,e),this.name2Id[t.name]=t.id,null!=n&&(this.id2Mask[t.id]=n),this}addFeed(t){this.add(t.key,t.value)}hasKey(t){return null!=this.id2Value[t.id]}names(){return Object.keys(this.name2Id)}getValue(t){if(t instanceof gh){if(null==this.id2Value[t.id])throw new Cu("Nonexistent key: "+t.name);return this.id2Value[t.id]}{const e=this.name2Id[t];if(null==e)throw new Cu("Feed dict has no SymbolicTensor name: "+t);return this.id2Value[e]}}getMask(t){if(t instanceof gh){if(null==this.id2Value[t.id])throw new Cu("Nonexistent key: "+t.name);return this.id2Mask[t.id]}{const e=this.name2Id[t];if(null==e)throw new Cu("Feed dict has no SymbolicTensor name: "+t);return this.id2Mask[e]}}disposeMasks(){null!=this.id2Mask&&ra(this.id2Mask)}}const hd={},dd={};function pd(t,e,n,r){const s=null!=n&&n.training,a=Array.isArray(t),i=a?t:[t],o=i.map(t=>t.name),l=[],u=e.names();for(const t of o)-1!==u.indexOf(t)?l.push(e.getValue(t)):l.push(null);null!=r&&(r.maxNumTensors=-1/0,r.minNumTensors=1/0);const c=o.join(",")+"|"+e.names().join(",");let h,d;if(null==hd[c]){const t=function(t,e){v(null!=t&&t.length>0,()=>"Expected at least one fetch, got none");let n=[],r={};if(1===t.length){const s=md(t[0],e);n=s.sorted,r=s.recipientMap}else{const s=new Set;for(const a of t){const{sorted:t,recipientMap:i}=md(a,e);for(const e of t)s.has(e.name)||(n.push(e),s.add(e.name));for(const t in i)null==r[t]&&(r[t]=new Set),i[t].forEach(e=>r[t].add(e))}}return{sorted:n,recipientCounts:fd(r)}}(i,e);h=t.sorted,d=t.recipientCounts,hd[c]=h,dd[c]=d}h=hd[c],d={},s||Object.assign(d,dd[c]);const p=new cd(e);for(let t=0;t<h.length;++t){if(null!=r){const t=ea().numTensors;t>r.maxNumTensors&&(r.maxNumTensors=t),t<r.minNumTensors&&(r.minNumTensors=t)}const a=h[t],i=a.sourceLayer;if(i instanceof vh)continue;const u=[],c=[],f=[];let m=!1;for(const t of a.inputs){const n=p.getValue(t),r=p.getMask(t);u.push(n),c.push(r),null!=r&&(m=!0),s||(d[t.name]--,0!==d[t.name]||e.hasKey(t)||-1!==o.indexOf(t.name)||n.isDisposed||!0===t.sourceLayer.stateful||f.push(n))}m&&((n=n||{}).mask=c[0]);const g=Au(i.apply(u,n));let y=null;i.supportsMasking&&(y=i.computeMask(u,c));const b=gd(a),x=Array.isArray(b)?b:[b];for(let t=0;t<x.length;++t){p.hasKey(x[t])||p.add(x[t],g[t],Array.isArray(y)?y[0]:y);const e=o.indexOf(x[t].name);-1!==e&&(l[e]=g[t])}s||ra(f)}return p.disposeMasks(),a?l:l[0]}function fd(t){const e={};for(const n in t)e[n]=t[n].size;return e}function md(t,e){const n=new Set,r=[],s={};for(const t of e.names())n.add(t);const a=[],i=[];for(a.push(t);a.length>0;){const t=a[a.length-1];if(n.has(t.name)){a.pop();continue}const e=i[i.length-1]===a.length-1;if(0===t.inputs.length||e)a.pop(),r.push(t),n.add(t.name),e&&i.pop();else{i.push(a.length-1);for(const e of t.inputs)null==s[e.name]&&(s[e.name]=new Set),s[e.name].add(t.name),n.has(e.name)||a.push(e)}}return{sorted:r,recipientMap:s}}function gd(t){let e;if(1===t.sourceLayer.inboundNodes.length)e=t.sourceLayer.output;else{let n=null;for(let e=0;e<t.sourceLayer.inboundNodes.length;++e)for(const r of t.sourceLayer.inboundNodes[e].outputTensors)if(r.id===t.id){n=e;break}e=t.sourceLayer.getOutputAt(n)}return e}class yd extends wh{constructor(t){if(super({}),this.containerNodes=new Set,this.name=t.name,null==this.name){const t=this.getClassName().toLowerCase();this.name=ih(t)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(t.inputs)?this.inputs=t.inputs.slice():this.inputs=[t.inputs],Array.isArray(t.outputs)?this.outputs=t.outputs.slice():this.outputs=[t.outputs],Mu(this.inputs).length!==this.inputs.length)throw new Cu("The list of inputs passed to the model is redundant. All inputs should only appear once. Found: "+this.inputs.map(t=>t.name));Mu(this.outputs).length!==this.outputs.length&&console.warn("The list of outputs passed to the model is redundant. All outputs should only appear once. Found: "+this.outputs.map(t=>t.name)),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const t of this.outputs){const e=t.sourceLayer,n=t.nodeIndex,r=t.tensorIndex;this.outputLayers.push(e),this.outputLayersNodeIndices.push(n),this.outputLayersTensorIndices.push(r)}for(const t of this.inputs){const e=t.sourceLayer,n=t.nodeIndex,r=t.tensorIndex;Iu(0===n,"input layer has >1 nodes"),Iu(0===r,"input layer has >1 tensors"),this.inputLayers.push(e),this.inputLayersNodeIndices.push(n),this.inputLayersTensorIndices.push(r)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let e=0;e<this.inputLayers.length;e++){const n=this.inputLayers[e];if(!(n instanceof vh))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${t.inputs}. Input ${e} (0-based) originates from layer type ${n.getClassName()}.`);this.inputNames.push(n.name),this.feedInputShapes.push(n.batchInputShape),this.feedInputNames.push(n.name)}for(const t of this.outputLayers)this.outputNames.push(t.name);this.internalInputShapes=this.inputs.map(t=>t.shape),this.internalOutputShapes=this.outputs.map(t=>t.shape);const e={},n={},r={},s={},a={},i=[],o=(t,e,n,r,s,l)=>{null!=r&&null!=s&&null!=l||(r=t.sourceLayer,s=t.nodeIndex,l=t.tensorIndex);const u=r.inboundNodes[s];if(-1!==n.indexOf(u))throw new vu(`The tensor ${t.name} at layer "${r.name}" is part of a cycle.`);if(-1!==e.indexOf(u))return;this.containerNodes.add(yd.nodeKey(r,s)),r.id in a||(a[r.id]=Object.keys(a).length),-1===n.indexOf(u)&&n.push(u);const c=u.inboundLayers.length;for(let t=0;t<c;t++){const r=u.inputTensors[t],s=u.inboundLayers[t],a=u.nodeIndices[t],i=u.tensorIndices[t];o(r,e,n,s,a,i)}for(e.push(u);n.indexOf(u)>=0;)n.splice(n.indexOf(u),1);i.push(u)},l=[],u=[];for(const t of this.outputs)o(t,l,u);const c=i.slice().reverse();for(const t of c){n[t.id]=t,t.id in e||(e[t.id]=0);let a=e[t.id];const i=null==r[t.outboundLayer.id]?0:r[t.outboundLayer.id];a=Math.max(a,i),r[t.outboundLayer.id]=a,s[t.outboundLayer.id]=t.outboundLayer,e[t.id]=a;for(let r=0;r<t.inboundLayers.length;r++){const s=t.inboundLayers[r],i=t.nodeIndices[r],o=s.inboundNodes[i],l=null==e[o.id]?0:e[o.id];e[o.id]=Math.max(a+1,l),n[o.id]=o}}const h={};for(const t in e){const r=e[t];r in h||(h[r]=[]),h[r].push(n[t])}const d={};for(const t in r){const e=r[t];e in d||(d[e]=[]),d[e].push(s[t])}let p=Object.keys(d).map(t=>parseInt(t,10)).sort(Fu);this.layers=[];for(const t of p){const e=d[t];e.sort((t,e)=>{const n=a[t.id],r=a[e.id];return n<r?-1:n>r?1:0});for(const t of e)t instanceof yd&&this.internalContainerRefs.push(t),this.layers.push(t)}this.layersByDepth=d,p=Object.keys(h).map(t=>parseInt(t,10)).sort(Fu);const f=this.inputs.slice(),m=[];for(const t of p)for(const e of h[t]){const t=e.outboundLayer;if(null!=t){for(const n of e.inputTensors)if(-1===f.indexOf(n))throw new vu("Graph disconnected: cannot obtain value for tensor "+n+` at layer "${t.name}". The following previous layers were accessed without issue: `+m);for(const t of e.outputTensors)f.push(t);m.push(t.name)}}this.nodesByDepth=h;const g=this.layers.map(t=>t.name);for(const t of g){const e=g.filter(e=>e===t).length;if(1!==e)throw new vu(`The name "${t}" is used ${e} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(g))}this.outboundNodes=[],this.inboundNodes=[],new bh({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map(t=>null),outputMasks:this.outputs.map(t=>null),inputShapes:this.inputs.map(t=>t.shape),outputShapes:this.outputs.map(t=>t.shape)}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const t={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const e of this.layers)t.numDisposedVariables+=e.dispose().numDisposedVariables;for(const e of this.internalContainerRefs)t.numDisposedVariables+=e.dispose().numDisposedVariables}return t.refCountAfterDispose=this._refCount,t}get trainable(){return this.trainable_}set trainable(t){this.layers.forEach(e=>{e._trainableWeights.forEach(e=>e.trainable=t)}),this.trainable_=t}get trainableWeights(){if(this._trainableWeights.length>0)throw new Cu("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let t=[];for(const e of this.layers)t=t.concat(e.trainableWeights);return t}get nonTrainableWeights(){const t=[];for(const e of this.layers)t.push(...e.nonTrainableWeights);if(!this.trainable){const e=[];for(const t of this.layers)e.push(...t.trainableWeights);return e.concat(t)}return t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(t,e=!0){const n={};let r=0;for(const t of this.layers)for(const e of t.weights){if(null!=n[e.originalName])throw new Cu("Duplicate weight name: "+e.originalName);n[e.originalName]=e,r++}const s=[];for(const r in t){if(null!=n[r])s.push([n[r],t[r]]);else if(e)throw new Cu("Provided weight data has no target variable: "+r);delete n[r]}if(e){const t=[];for(const e in n)t.push(e);if(t.length>0)throw new Cu(`${t.length} of ${r} weights are not set: `+t)}fh(s)}updatedConfig(){const t=this.getConfig(),e={};return e.className=this.getClassName(),e.config=t,e.kerasVersion="tfjs-layers 2.0.0-rc.1",e.backend="TensorFlow.js",e}toJSON(t,e=!0){const n=function t(e,n){if(null==e)return null;if("string"==typeof e)return Ru(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const r=[],s=e.length;for(let a=0;a<s;++a){const s=e[a];ld(n,a,s)?r.push(s):r.push(t(s,n))}return r}{const n={};for(const r of Object.keys(e)){const s=e[r],a=Ru(r);n[a]="name"!==r&&"className"!==r||"string"!=typeof s?t(s,r):s}return n}}(this.updatedConfig());return e?JSON.stringify(n):n}call(t,e){return na(()=>{t=Au(t);const n=new cd;for(let e=0;e<this.inputs.length;++e)n.add(this.inputs[e],t[e]);return pd(this.outputs,n,e)})}computeMask(t,e){return na(()=>{let n;return t=Au(t),n=null==e?ku(null,t.length):Au(e),this.runInternalGraph(t,n)[1]})}computeOutputShape(t){const e=lh(t);if(e.length!==this.inputLayers.length)throw new Cu(`Invalid inputShape argument ${t}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let t=0;t<e.length;t++){const r=this.inputLayers[t],s=e[t];n[r.name+"_0_0"]=s}const r=Object.keys(this.nodesByDepth).map(t=>parseInt(t,10)).sort(Fu);if(r.length>1)for(const t of r){const e=this.nodesByDepth[t];for(const t of e){const e=t.outboundLayer;if(-1!==this.inputLayers.map(t=>t.id).indexOf(e.id))continue;const r=[];for(let e=0;e<t.inboundLayers.length;e++){const s=t.inboundLayers[e],a=t.nodeIndices[e],i=t.tensorIndices[e],o=n[`${s.name}_${a}_${i}`];r.push(o)}const s=lh(e.computeOutputShape($u(r))),a=e.inboundNodes.indexOf(t);for(let t=0;t<s.length;t++){n[`${e.name}_${a}_${t}`]=s[t]}}}const s=[],a=[];for(let t=0;t<this.outputLayers.length;t++){const e=this.outputLayers[t],n=this.outputLayersNodeIndices[t],r=this.outputLayersTensorIndices[t],s=`${e.name}_${n}_${r}`;a.push(s)}for(let t=0;t<a.length;t++){const e=a[t];Iu(e in n),s.push(n[e])}return $u(s)}runInternalGraph(t,e){null==e&&(e=ku(null,t.length));const n={};for(let r=0;r<this.inputs.length;++r){const s=this.inputs[r],a=t[r],i=e[r];n[s.id]=[a,i]}const r=Object.keys(this.nodesByDepth).map(t=>parseInt(t,10)).sort(Fu);for(const t of r){const e=this.nodesByDepth[t];for(const t of e){const e=t.outboundLayer,r=t.inputTensors,s=t.outputTensors,a=new Array;for(const t of r)t.id in n&&a.push(n[t.id]);if(a.length===r.length){let r,i,o,l,u={};if(null!=t.callArgs&&(u=t.callArgs),1===a.length){const[t,n]=a[0];null==u.mask&&(u.mask=n),o=Au(e.call(t,u)),l=Au(e.computeMask(t,n)),r=[t],i=[n]}else r=a.map(t=>t[0]),i=a.map(t=>t[1]),null==u.mask&&(u.mask=i),o=Au(e.call(r,u)),l=Au(e.computeMask(r,i));if(e.activityRegularizer)throw new Nu("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let t=0;t<s.length;++t){const e=s[t],r=o[t],a=l[t];n[e.id]=[r,a]}}}}const s=[],a=[],i=[];for(const t of this.outputs){Iu(t.id in n,`Could not compute output ${t.name} : ${t.id}`);const[e,r]=n[t.id];i.push(e.shape),s.push(e),a.push(r)}return[s,a,i]}buildNodeConversionMap(t){const e={};let n;for(const t of this.layers){n=t instanceof yd?1:0;for(let r=0;r<t.inboundNodes.length;r++){const s=yd.nodeKey(t,r);this.containerNodes.has(s)&&(e[s]=n,n+=1)}}return e}getLayer(t,e){if(null!=e){if(this.layers.length<=e)throw new Cu(`Was asked to retrieve layer at index ${e}, but model only has ${this.layers.length} layer(s).`);return this.layers[e]}if(null==t)throw new Cu("Provide either a layer name or layer index");for(const e of this.layers)if(e.name===t)return e;throw new Cu("No such layer: "+t)}calculateLosses(){return na(()=>{const t=[];for(const e of this.layers)for(let n=0;n<e.inboundNodes.length;++n){const r=yd.nodeKey(e,n);this.containerNodes.has(r)&&t.push(...e.calculateLosses())}return t})}getConfig(){const t={name:this.name},e=this.buildNodeConversionMap(this.layers),n=[];for(const t of this.layers){const r=t.getClassName(),s=t.getConfig(),a=[];for(let n=0;n<t.inboundNodes.length;n++){const r=t.inboundNodes[n],s=yd.nodeKey(t,n);let i={};if(this.containerNodes.has(s)){if(r.callArgs)try{JSON.stringify(r.callArgs),i=r.callArgs}catch(e){console.warn(`Layer ${t.name} was passed non-serializable keyword arguments: `+r.callArgs+". They will not be included in the serialized model (and thus will be missing at deserialization time)."),i={}}if(r.inboundLayers.length>0){const t=[];for(let n=0;n<r.inboundLayers.length;n++){const s=r.inboundLayers[n],a=r.nodeIndices[n],o=r.tensorIndices[n];let l=e[yd.nodeKey(s,a)];null==l&&(l=0),t.push([s.name,l,o,i])}a.push(t)}}}const i={};i.name=t.name,i.className=r,i.config=s,i.inboundNodes=a,n.push(i)}t.layers=n;const r=[];for(let t=0;t<this.inputLayers.length;t++){const n=this.inputLayers[t],s=this.inputLayersNodeIndices[t],a=yd.nodeKey(n,s);if(!this.containerNodes.has(a))continue;let i=e[a];null==i&&(i=0);const o=this.inputLayersTensorIndices[t];r.push([n.name,i,o])}t.inputLayers=r;const s=[];for(let t=0;t<this.outputLayers.length;t++){const n=this.outputLayers[t],r=this.outputLayersNodeIndices[t],a=yd.nodeKey(n,r);if(!this.containerNodes.has(a))continue;let i=e[a];null==i&&(i=0);const o=this.outputLayersTensorIndices[t];s.push([n.name,i,o])}return t.outputLayers=s,t}static fromConfig(t,e,n={},r=!1){const s={},a={};function i(t,e){t.name in a?a[t.name].push(e):a[t.name]=[e]}function o(t,e){const n=[];let r;for(const a of e){const o=a[0],l=a[1],u=a[2];if(r=null==a[3]?{}:a[3],!(o in s))return void i(t,e);const c=s[o];if(c.inboundNodes.length<=l)return void i(t,e);const h=c.inboundNodes[l];n.push(h.outputTensors[u])}n.length>0&&t.apply($u(n),r)}function l(t){const n=t.name,a=Oh(t,null!=e.customObjects?e.customObjects:{});a.setFastWeightInitDuringBuild(r),s[n]=a,t.inboundNodes.forEach(t=>{if(!(t instanceof Array))throw new Cu("Corrupted configuration, expected array for nodeData: "+t);i(a,t)})}const u=e.name,c=e.layers;for(const t of c)l(t);for(;!zu(a);)for(const t of c){const e=s[t.name];if(e.name in a){const t=a[e.name];delete a[e.name];for(const n of t)o(e,n)}}const h=[],d=[],p=e.inputLayers;for(const t of p){const e=t[0],n=t[1],r=t[2];Iu(e in s);const a=s[e].inboundNodes[n].outputTensors;h.push(a[r])}const f=e.outputLayers;for(const t of f){const e=t[0],n=t[1],r=t[2];Iu(e in s);const a=s[e].inboundNodes[n].outputTensors;d.push(a[r])}return new t({inputs:h,outputs:d,name:u})}get stateful(){if(this._stateful)throw new Cu("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const t of this.layers)if(t.stateful)return!0;return!1}resetStates(){na(()=>{this.layers.forEach(t=>{t.stateful&&t.resetStates()})})}}function bd(t,e){return function(t,e,n){const r=e.length;if(null==t||Array.isArray(t)&&0===t.length)return e.map(t=>null);if(1===r)return Array.isArray(t)&&1===t.length?t:"object"==typeof t&&e[0]in t?[t[e[0]]]:[t];if(Array.isArray(t)){if(t.length!==r)throw new Error(`Provided ${n} is an array of ${t.length} element(s), but the model has ${r} outputs. Make sure a set of weights is provided for each model output.`);return t}if("object"==typeof t&&Object.keys(t).length>0&&"object"==typeof t[Object.keys(t)[0]]){const n=[];return e.forEach(e=>{e in t?n.push(t[e]):n.push(null)}),n}throw new Error(`The model has multiple (${r}) outputs, so ${n} must be either an array with ${r} elements or an object with ${e} keys. Provided ${n} not understood: ${JSON.stringify(t)}`)}(t,e,"classWeight")}async function xd(t,e,n,r){if(null!=e||null!=r)throw new Error("Support sampleWeight is not implemented yet");if(null!=n){const e=na(()=>{if(1===t.shape.length)return t.clone();if(2===t.shape.length){if(t.shape[1]>1){const e=1;return t.argMax(e)}if(1===t.shape[1])return t.reshape([t.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${t.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${t.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)}),r=Array.from(await e.data());ra(e);const s=[];return r.forEach(t=>{if(null==n[t])throw new Error(`classWeight must contain all classes in the training data. The class ${t} exists in the data but not in classWeight`);s.push(n[t])}),pe(s,"float32")}return null}function wd(t,e){return Yn(t,e)}function vd(t,e){let n,r;const s=e;n=s.xs,r=s.ys,v(null!=n&&null!=r,()=>"A Dataset iterator for fitDataset() is expected to generate objects of the form `{xs: xVal, ys: yVal}`, where the two values may be `tf.Tensor`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates "+e);const a=Cd("input",t.inputNames,n),i=Cd("output",t.outputNames,r),o=a[0].shape[0];v(a.length===t.inputs.length,()=>`LayersModel has ${t.inputs.length} inputs, but the dataset provides ${a.length} inputs.  (Expected input keys: `+JSON.stringify(t.inputNames)+")"),v(i.length===t.outputs.length,()=>`LayersModel has ${t.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: `+JSON.stringify(t.outputNames)+")");for(let e=0;e<a.length;e++)v(a[e].shape[0]===o,()=>`Batch size mismatch: input ${t.inputNames[e]} has ${a[e].shape[0]}; expected  ${o} based on input ${t.inputNames[0]}.`);for(let e=0;e<i.length;e++)v(i[e].shape[0]===o,()=>`Batch size mismatch: output ${t.outputNames[e]} has ${i[e].shape[0]}; expected  ${o} based on input ${t.inputNames[0]}.`);return{xs:a,ys:i}}function Cd(t,e,n){if(n instanceof bt)return[n];if(Array.isArray(n))return v(n.length===e.length,()=>`Received an array of ${n.length} Tensors, but expected ${e.length} to match the ${t} keys ${e}.`),n;{const r=[];for(const s of e){if(null==n[s])throw new Cu(`The feature data generated by the dataset lacks the required ${t} key '${s}'.`);r.push(n[s])}return r}}async function Nd(t,e,n){const r=null!=n.batchesPerEpoch;if(v(null!=t.optimizer,()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."),v(null!=n,()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."),v(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),()=>"For fitDataset(), config.epochs is expected to be a positive integer, but got "+n.epochs),v(!r||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),()=>"For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got "+n.batchesPerEpoch),v(null==n.validationSplit,()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead."),t.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");t.isTraining=!0;try{const s=null!=n.validationData;let a,i;if(s)if(Sd(n.validationData))v(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),()=>"For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got "+n.validationBatches);else{const t=function(t){if(3===t.length)throw new Nu("Validation with sample weights is not implemented yet.");return{xs:t[0],ys:t[1]}}(n.validationData);a=t.xs,i=t.ys}const o=t.makeTrainFunction(),l=t.getDedupedMetricsNames();let u;u=s?l.slice().concat(l.map(t=>"val_"+t)):l.slice();const c=Th(n.callbacks,n.yieldEvery),h=null==n.verbose?1:n.verbose,{callbackList:d,history:p}=_h(c,h,n.epochs,null,null,function(t,e){let n=null;null!=e.batchesPerEpoch?n=e.batchesPerEpoch:Number.isFinite(t.size)&&(n=t.size);return n}(e,n),null,s,u);d.setModel(t),t.history=p,await d.onTrainBegin(),t.stopTraining_=!1;let f=null==n.initialEpoch?0:n.initialEpoch,m=await e.iterator();for(;f<n.epochs;){const u={};await d.onEpochBegin(f);let c=0,h=0;for(r||(m=await e.iterator());!r||c<n.batchesPerEpoch;){const e=await m.next();if(r&&e.done){console.warn("You provided `batchesPerEpoch` as "+n.batchesPerEpoch+", but your dataset iterator ran out of data after "+c+" batches; interrupting training. Make sure that your dataset can generate at least `batchesPerEpoch * epochs` batches (in this case, "+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=e.value){const{xs:r,ys:s}=vd(t,e.value),a={};a.batch=h,a.size=r[0].shape[0],await d.onBatchBegin(h,a);const i=[];if(null!=n.classWeight){const e=bd(n.classWeight,t.outputNames);for(let t=0;t<e.length;++t)i.push(await xd(s[t],null,e[t]))}const u=r.concat(s).concat(i),p=o(u);ra(u);for(let t=0;t<l.length;++t){const e=l[t],n=p[t];a[e]=n,sa(n)}await d.onBatchEnd(h,a),Sh(a),h++,c++}if(r?c>=n.batchesPerEpoch:e.done){if(s){let e;e=Sd(n.validationData)?Au(await t.evaluateDataset(n.validationData,{batches:n.validationBatches})):Au(t.evaluate(a,i,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let n=0;n<t.metricsNames.length;++n)u["val_"+t.metricsNames[n]]=e[n]}break}if(t.stopTraining_)break}if(await d.onEpochEnd(f,u),f++,t.stopTraining_)break}return await d.onTrainEnd(),await t.history.syncData(),t.history}finally{t.isTraining=!1}}function Sd(t){return"function"==typeof t.iterator}function kd(t){v(t>0&&Number.isInteger(t),()=>"batchSize is required to be a positive integer, but got "+t)}function Id(t,e,n){return null==t?[null]:Array.isArray(t)?t.map(t=>wc(t,e,n-e)):wc(t,e,n-e)}function Ed(t,e){return na(()=>null==t?null:Array.isArray(t)?t.map(t=>Ed(t,e)):$c(t,"int32"===e.dtype?e:e.toInt()))}function $d(t,e){const n=[];let r=0,s=null;for(;r<t;)s=r+e,s>=t&&(s=t),n.push([r,s]),r=s;return n}async function Ad(t,e,n,r={}){if(t.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let s,a,i,o,l,u,c;t.isTraining=!0;try{const h=null==r.batchSize?32:r.batchSize;kd(h);const d=!1,p=await t.standardizeUserData(e,n,r.sampleWeight,r.classWeight,d,h);s=p[0],a=p[1],c=p[2];let f,m=!1;if(null!=r.validationData&&r.validationData.length>0){if(m=!0,2!==r.validationData.length)throw 3===r.validationData.length?new Nu("validationData including sample weights is not supported yet."):new Cu("When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; "+r.validationData+" is invalid.");i=r.validationData[0],o=r.validationData[1];const e=!0,n=await t.standardizeUserData(i,o,null,null,e,h);l=n[0],u=n[1],f=l.concat(u)}else if(null!=r.validationSplit&&r.validationSplit>0&&r.validationSplit<1){m=!0;const t=Math.floor(s[0].shape[0]*(1-r.validationSplit)),e=s[0].shape[0];l=Id(s,t,e),s=Id(s,0,t),u=Id(a,t,e),a=Id(a,0,t),f=l.concat(u)}else null!=r.validationSteps&&(m=!0);const g=s.concat(a).concat(c);t.checkTrainableWeightsConsistency();const b=t.makeTrainFunction(),x=t.getDedupedMetricsNames();let w,v;m?(t.makeTestFunction(),w=t.testFunction,v=x.slice().concat(x.map(t=>"val_"+t))):(w=null,f=[],v=x.slice());const C=Th(r.callbacks,r.yieldEvery);return await async function(t,e,n,r,s,a,i,o,l,u,c,h,d,p,f){null==s&&(s=32),null==a&&(a=1),null==c&&(c=!0),null==d&&(d=0);let m=!1;if(null!=l&&null!=u&&(m=!0),null!=f&&(m=!0,null==p))throw new Cu("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");const g=t.checkNumSamples(n,s,p,"steps_per_epoch");let b;null!=g&&(b=yc(0,g)),null==i&&(i=1);const{callbackList:x,history:w}=_h(o,i,a,d,g,p,s,m,h);x.setModel(t),t.history=w,await x.onTrainBegin(),t.stopTraining_=!1;for(let i=d;i<a;++i){await x.onEpochBegin(i);const a={};if(null!=p)throw new Nu("stepsPerEpoch mode is not implemented yet.");{if("batch"===c)throw new Nu("batch shuffling is not implemneted yet");c&&y(b);const i=pe(b),o=$d(g,s);for(let c=0;c<o.length;++c){const h={};if(await x.onBatchBegin(c,h),na(()=>{const d=o[c][0],p=o[c][1],f=wc(i,d,p-d);h.batch=c,h.size=p-d;const g=Ed(n,f),y=e(g);for(let t=0;t<r.length;++t){const e=r[t],n=y[t];h[e]=n,sa(n)}if(c===o.length-1&&m){const e=t.testLoop(l,u,s);for(let t=0;t<r.length;++t){const n=r[t],s=e[t];sa(s),a["val_"+n]=s}}}),await x.onBatchEnd(c,h),Sh(h),t.stopTraining_)break}i.dispose()}if(await x.onEpochEnd(i,a),t.stopTraining_)break}return await x.onTrainEnd(),await t.history.syncData(),t.history}(t,b,g,x,h,r.epochs,r.verbose,C,w,f,r.shuffle,v,r.initialEpoch,null,null)}finally{t.isTraining=!1,Td(s,e),Td(a,n),Td(l,i),Td(u,o),null!=c&&ra(c)}}function Rd(t){const e=[];t instanceof bt&&(t=[t]);for(let n=0;n<t.length;++n){const r=t[n];if(1===r.rank)e.push(xc(r,1));else{if(0===r.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");e.push(r)}}return e}function Td(t,e){if(null==t)return;const n=[];if(e instanceof bt)n.push(e.id);else if(Array.isArray(e))e.forEach(t=>n.push(t.id));else if(null!=e)for(const t in e){const r=e[t];n.push(r.id)}const r=[];if(t instanceof bt)-1===n.indexOf(t.id)&&r.push(t);else if(Array.isArray(t))t.forEach(t=>{-1===n.indexOf(t.id)&&r.push(t)});else if(null!=t)for(const e in t){const s=t[e];-1===n.indexOf(s.id)&&r.push(s)}r.forEach(t=>{t.isDisposed||t.dispose()})}function Dd(t){return Array.isArray(t)}function _d(t){return!function(t){return t instanceof bt}(t)&&!Dd(t)}function Od(t,e,n,r=!0,s=""){if(null==e||0===e.length){if(null!=t){let e=!1;if(Dd(t)&&t.length>0)e=!0;else if(_d(t)){for(const n in t)if(t.hasOwnProperty(n)){e=!0;break}}else e=!0;if(e)throw new Cu(`Error when checking model ${s} expected no data, but got `+t)}return[]}if(null==t)return e.map(t=>null);let a;if(_d(t)){t=t,a=[];for(const n of e){if(null==t[n])throw new Cu(`No data provided for "${n}". Need data for each key in: `+e);a.push(t[n])}}else if(Dd(t)){if((t=t).length!==e.length)throw new Cu(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${e.length} Tensor(s), but instead got the following list of Tensor(s): `+t);a=t}else{if(t=t,e.length>1)throw new Cu(`The model ${s} expects ${e.length} Tensor(s), but only received one Tensor. Found: Tensor with shape `+t.shape);a=[t]}if(a=Rd(a),null!=n)for(let t=0;t<e.length;++t){if(null==n[t])continue;const i=a[t];if(i.shape.length!==n[t].length)throw new Cu(`Error when checking ${s}: expected ${e[t]} to have ${n[t].length} dimension(s). but got array with shape `+i.shape);for(let a=0;a<n[t].length;++a){if(0===a&&!r)continue;const o=i.shape[a],l=n[t][a];if(null!=l&&l>=0&&o!==l)throw new Cu(`Error when checking ${s}: expected ${e[t]} to have shape [${n[t]}], but got array with shape [${i.shape}].`)}}return a}function Fd(t,e,n,r=!0,s=""){let a;if(Array.isArray(t)){if(t.length!==e.length)throw new Cu(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${e.length} Tensor(s), but instead got ${t.length} Tensors(s).`);a=t}else{if(e.length>1)throw new Cu(`The model expects ${e.length} ${s} Tensors, but only received one Tensor. Found: array with shape `+JSON.stringify(t.shape)+".");a=[t]}if(null!=n)for(let t=0;t<e.length;++t){if(null==n[t])continue;const i=a[t];if(i.shape.length!==n[t].length)throw new Cu(`Error when checking ${s}: expected ${e[t]} to have ${n[t].length} dimension(s), but got array with shape `+JSON.stringify(i.shape));for(let a=0;a<n[t].length;++a){if(0===a&&!r)continue;const o=i.shape[a],l=n[t][a];if(null!=l&&l!==o)throw new Cu(`Error when checking ${s}: expected ${e[t]} to have shape ${JSON.stringify(n[t])} but got array with shape ${JSON.stringify(i.shape)}.`)}}}class Md extends yd{constructor(t){super(t),this.isTraining=!1}summary(t,e,n=console.log){if(!this.built)throw new Cu("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");sd(this,t,e,n)}compile(t){if(null==t.loss&&(t.loss=[]),this.loss=t.loss,"string"==typeof t.optimizer)this.optimizer_=function(t){const e={Adagrad:()=>Gl.adagrad(.01),Adadelta:()=>Gl.adadelta(1,.95,xu()),Adam:()=>Gl.adam(.001,.9,.999,xu()),Adamax:()=>Gl.adamax(.002,.9,.999,xu(),0),RMSProp:()=>Gl.rmsprop(.001,.9,0,xu()),SGD:()=>Gl.sgd(.01)};if(e.adagrad=e.Adagrad,e.adadelta=e.Adadelta,e.adam=e.Adam,e.adamax=e.Adamax,e.rmsprop=e.RMSProp,e.sgd=e.SGD,t in e)return e[t]();throw new Cu("Unknown Optimizer "+t)}(t.optimizer),this.isOptimizerOwned=!0;else{if(!(t.optimizer instanceof Fl))throw new Cu("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=t.optimizer,this.isOptimizerOwned=!1}let e=[];if(Array.isArray(t.loss)||"string"==typeof t.loss||"function"==typeof t.loss)if(Array.isArray(t.loss)){if(t.loss.length!==this.outputs.length)throw new Cu(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${t.loss}.`);const n=t.loss;e=n.map(t=>Gh(t))}else{const n=Gh(t.loss);this.outputs.forEach(t=>{e.push(n)})}else{t.loss=t.loss;for(const e in t.loss)if(-1===this.outputNames.indexOf(e))throw new Cu(`Unknown entry in loss dictionary: "${e}". Only expected the following keys: `+this.outputNames);for(const n of this.outputNames)null==t.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),e.push(Gh(t.loss[n]))}this.lossFunctions=e,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let t=0;t<this.outputs.length;++t){const e=this.internalOutputShapes[t],n=this.outputNames[t];this.feedOutputNames.push(n),this.feedOutputShapes.push(e),this.feedLossFns.push(this.lossFunctions[t])}const n=[];this.metrics=t.metrics,this.metricsNames=["loss"],this.metricsTensors=[],lc("loss",()=>{for(let t=0;t<this.outputs.length;++t){if(-1!==n.indexOf(t))continue;const e=this.lossFunctions[t];this.outputs.length>1&&(this.metricsTensors.push([e,t]),this.metricsNames.push(this.outputNames[t]+"_loss"))}});const r=function(t,e){if(null==t||Array.isArray(t)&&0===t.length)return e.map(t=>[]);let n;if("string"==typeof t||"function"==typeof t)n=[t];else{if(!Array.isArray(t)&&"object"!=typeof t)throw new TypeError("Type of metrics argument not understood. Expected an string,function, Array, or Object, found: "+t);n=t}if(Array.isArray(n))return e.map(t=>n);{const t=[];for(const r of e){let e=n.hasOwnProperty(r)?n[r]:[];Array.isArray(e)||(e=[e]),t.push(e)}return t}}(t.metrics,this.outputNames),s=(t,e,n)=>{this.outputNames.length>1&&(e=this.outputNames[t]+"_"+e),this.metricsNames.push(e),this.metricsTensors.push([n,t])};lc("metric",()=>{for(let t=0;t<this.outputs.length;++t){if(-1!==n.indexOf(t))continue;(e=>{let n,r,a;for(const i of e){if("string"==typeof i&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(i)){const e=this.internalOutputShapes[t];let s;1===e[e.length-1]||this.lossFunctions[t]===Wh?-1!==["accuracy","acc"].indexOf(i)?r=jh:-1!==["crossentropy","ce"].indexOf(i)&&(r=Yh):this.lossFunctions[t]===Ph?-1!==["accuracy","acc"].indexOf(i)?r=Jh:-1!==["crossentropy","ce"].indexOf(i)&&(r=Qh):-1!==["accuracy","acc"].indexOf(i)?r=qh:-1!==["crossentropy","ce"].indexOf(i)&&(r=Zh),-1!==["accuracy","acc"].indexOf(i)?s="acc":-1!==["crossentropy","ce"].indexOf(i)&&(s="ce"),a=r,n=""+s}else{const t=ed(i);a=t,n=""+nd(i)}let e;lc(n,()=>{e=a}),s(t,n,e)}})(r[t])}}),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(t,e,n={}){const r=null==n.batchSize?32:n.batchSize;kd(r);const s=this.standardizeUserDataXY(t,e,!0,r);try{const a=s[0].concat(s[1]);this.makeTestFunction();const i=this.testFunction;return $u(this.testLoop(i,a,r,n.verbose,n.steps))}finally{Td(s[0],t),Td(s[1],e)}}async evaluateDataset(t,e){return this.makeTestFunction(),async function(t,e,n){const r=null!=(n=n||{}).batches,s=t.testFunction;let a=[];if(n.verbose>0)throw new Nu("Verbose mode is not implemented yet.");v(!r||n.batches>0&&Number.isInteger(n.batches),()=>"Test loop expects `batches` to be a positive integer, but received "+JSON.stringify(n.batches));const i="function"==typeof e.next?e:await e.iterator();let o=0,l=0;for(;!r||l<n.batches;){const e=await i.next();if(a=na(()=>{if(e.value){const{xs:n,ys:r}=vd(t,e.value),i=n.concat(r),u=na(()=>s(i));if(ra(i),0===l)for(let t=0;t<u.length;++t)a.push(de(0));const c=i[0].shape[0];for(let t=0;t<u.length;++t){const e=u[t],n=a[t];a[t]=na(()=>sn(a[t],Yn(c,e))),l>0&&ra(n)}ra(u),o+=c,++l}return a}),e.done){r&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let t=0;t<a.length;++t){const e=a[t];a[t]=nr(a[t],o),ra(e)}return $u(a)}(this,t,e)}checkNumSamples(t,e,n,r="steps"){let s;if(null!=n){if(s=null,null!=e)throw new Cu(`If ${r} is set, batchSize must be null or undefined.Got batchSize = `+e)}else{if(null==t)throw new Cu("Either the input data should have a defined shape, or "+r+" shoud be specified.");s=Array.isArray(t)?t[0].shape[0]:t.shape[0]}return s}execute(t,e){if(Array.isArray(e)&&0===e.length)throw new Cu("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(e),r=n?e:[e],s=this.retrieveSymbolicTensors(r),a=new cd;if(t instanceof bt&&(t=[t]),Array.isArray(t)){if(t.length!==this.inputs.length)throw new Cu(`The number of inputs provided (${t.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let e=0;e<this.inputs.length;++e)a.add(this.inputs[e],t[e])}else for(const e of this.inputs){const n=t[e.name];if(null==n)throw new Cu("No value is provided for the model's input "+e.name);a.add(e,n)}const i=pd(s,a);return n?i:i[0]}retrieveSymbolicTensors(t){const e=ku(null,t.length);let n=t.length;for(const r of this.layers){const s=Array.isArray(r.output)?r.output:[r.output],a=s.map(t=>t.name);for(let r=0;r<t.length;++r){const i=a.indexOf(t[r]);if(-1!==i&&(e[r]=s[i],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw e.forEach((e,r)=>{null==e&&n.push(t[r])}),new Cu("Cannot find SymbolicTensors for output name(s): "+JSON.stringify(n))}return e}predictLoop(t,e=32,n=!1){return na(()=>{const r=this.checkNumSamples(t);if(n)throw new Nu("Verbose predictLoop() is not implemented yet.");const s=$d(r,e),a=this.outputs.map(t=>[]);for(let e=0;e<s.length;++e){na(()=>{const n=s[e][0],r=s[e][1],a=Id(t,n,r),i=[];if(Array.isArray(a))for(let t=0;t<a.length;++t)i.push({key:this.inputs[t],value:a[t]});else i.push({key:this.inputs[0],value:a});const o=new cd(i);return pd(this.outputs,o)}).forEach((t,e)=>a[e].push(t))}return $u(a.map(t=>Ge(t,0)))})}predict(t,e={}){const n=Rd(t);Fd(n,this.inputNames,this.feedInputShapes,!1);try{const r=null==e.batchSize?32:e.batchSize;return kd(r),this.predictLoop(n,r)}finally{Td(n,t)}}predictOnBatch(t){Fd(t,this.inputNames,this.feedInputShapes,!0);const e=(Array.isArray(t)?t[0]:t).shape[0];return this.predictLoop(t,e)}standardizeUserDataXY(t,e,n=!0,r){if(null==this.optimizer_)throw new vu("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const s=[];for(let t=0;t<this.feedOutputShapes.length;++t){const e=this.feedOutputShapes[t];this.feedLossFns[t]===Ph?s.push(e.slice(0,e.length-1).concat([1])):s.push(e)}if(function(t,e,n){const r=Mu(t.map(t=>t.shape[0]));r.sort();const s=Mu(e.map(t=>t.shape[0]));if(s.sort(),r.length>1)throw new Cu("All input Tensors (x) should have the same number of samples. Got array shapes: "+JSON.stringify(t.map(t=>t.shape)));if(s.length>1)throw new Cu("All target Tensors (y) should have the same number of samples. Got array shapes: "+JSON.stringify(e.map(t=>t.shape)));if(r.length>0&&s.length>0&&!I(r,s))throw new Cu(`Input Tensors should have the same number of samples as target Tensors. Found ${r[0]} input sample(s) and ${s[0]} target sample(s).`)}(t=Od(t,this.feedInputNames,this.feedInputShapes,!1,"input"),e=Od(e,this.feedOutputNames,s,!1,"target")),function(t,e,n){const r=[Mh,Wh,Bh];for(let s=0;s<t.length;++s){const a=t[s],i=e[s],o=n[s];if(null!=i){if(i===Bh&&1===a.shape[a.shape.length-1])throw new Cu(`You are passing a target array of shape ${a.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==r.indexOf(i)){const t=a.shape.slice(1),e=o.slice(1);for(let n=0;n<t.length;++n){const r=t[n],s=e[n];if(null!=s&&r!==s)throw new Cu(`A target Tensor with shape ${a.shape} was passed for an output of shape ${o}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(e,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=r&&r>0&&t[0].shape[0]%r!=0)throw new Cu(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${r}. Found: ${t[0].shape[0]} sample(s).`);return[t,e]}async standardizeUserData(t,e,n,r,s=!0,a){const[i,o]=this.standardizeUserDataXY(t,e,s,a);if(null!=n)throw new Error("sample weight is not supported yet.");let l=null;if(null!=r){const t=bd(r,this.outputNames);l=[];for(let e=0;e<t.length;++e)l.push(await xd(o[e],null,t[e]))}return[i,o,l]}testLoop(t,e,n,r=0,s){return na(()=>{const a=this.checkNumSamples(e,n,s,"steps"),i=[];if(r>0)throw new Nu("Verbose mode is not implemented yet.");if(null!=s)throw new Nu("steps mode in testLoop() is not implemented yet");{const r=$d(a,n),s=pe(yc(0,a));for(let n=0;n<r.length;++n){const a=r[n][0],o=r[n][1],l=wc(s,a,o-a),u=Ed(e,l),c=t(u);if(0===n)for(let t=0;t<c.length;++t)i.push(de(0));for(let t=0;t<c.length;++t){const e=c[t];i[t]=sn(i[t],Yn(o-a,e))}}for(let t=0;t<i.length;++t)i[t]=nr(i[t],a)}return i})}getDedupedMetricsNames(){const t=this.metricsNames,e=[];for(let n=0;n<t.length;++n){const r=t[n];let s=r;if(Eu(t,r)>1){s+="_"+Eu(t.slice(0,n),r)}e.push(s)}return e}makeTrainFunction(){return t=>{const e=[],n=t.slice(0,this.inputs.length),r=t.slice(this.inputs.length,this.inputs.length+this.outputs.length),s=t.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),a=[],i=this.collectedTrainableWeights.map(t=>t.read());return[this.optimizer_.minimize(()=>{const t=[];for(let e=0;e<this.inputs.length;++e)t.push({key:this.inputs[e],value:n[e]});const i=new cd(t),o=pd(this.outputs,i,{training:!0});let l;for(let t=0;t<this.lossFunctions.length;++t){let n=(0,this.lossFunctions[t])(r[t],o[t]);null!=s[t]&&(n=wd(n,s[t]));const a=Oe(n);e.push(a),l=0===t?n:sn(l,n)}for(let t=0;t<this.metricsTensors.length;++t){let n;if(this.outputs.length>1&&t<this.outputs.length)n=e[t];else{const e=this.metricsTensors[t][0],s=this.metricsTensors[t][1];n=Oe(e(r[s],o[s]))}sa(n),a.push(n)}return l=Oe(l),this.calculateLosses().forEach(t=>{l=sn(l,t)}),l},!0,i)].concat(a)}}makeTestFunction(){this.testFunction=t=>na(()=>{const e=[];let n;const r=t.slice(0,this.inputs.length),s=t.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=[];for(let t=0;t<this.inputs.length;++t)a.push({key:this.inputs[t],value:r[t]});const i=new cd(a),o=pd(this.outputs,i);for(let t=0;t<this.lossFunctions.length;++t){const r=this.lossFunctions[t],a=Oe(r(s[t],o[t]));n=0===t?a:sn(n,a),e.push(n)}for(let t=0;t<this.metricsTensors.length;++t){const n=this.metricsTensors[t][0],r=this.metricsTensors[t][1],a=Oe(n(s[r],o[r]));e.push(a)}return e})}async fit(t,e,n={}){return Ad(this,t,e,n)}async fitDataset(t,e){return Nd(this,t,e)}async trainOnBatch(t,e){const n=await this.standardizeUserData(t,e),r=n[0],s=n[1],a=this.makeTrainFunction()(r.concat(s)),i=[];for(const t of a){const e=await t.data();i.push(e[0])}return ra(a),$u(i)}getNamedWeights(t){const e=[],n=null!=t&&t.trainableOnly,r=n?this.trainableWeights:this.weights,s=this.getWeights(n);for(let t=0;t<r.length;++t)n&&!r[t].trainable||e.push({name:r[t].originalName,tensor:s[t]});return e}set stopTraining(t){this.stopTraining_=t}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(t){this.optimizer_!==t&&(this.optimizer_=t,this.isOptimizerOwned=!1)}dispose(){const t=super.dispose();if(0===t.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const e=ea().numTensors;this.optimizer_.dispose(),t.numDisposedVariables+=e-ea().numTensors}return t}getLossIdentifiers(){let t;if("string"==typeof this.loss)t=Ru(this.loss);else if(Array.isArray(this.loss)){for(const t of this.loss)if("string"!=typeof t)throw new Error("Serialization of non-string loss is not supported.");t=this.loss.map(t=>Ru(t))}else{const e=Object.keys(this.loss);t={};const n=this.loss;for(const r of e){if("string"!=typeof n[r])throw new Error("Serialization of non-string loss is not supported.");t[r]=Ru(n[r])}}return t}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[Ru(nd(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map(t=>Ru(nd(t)));{const t={};for(const e in this.metrics)t[e]=Ru(nd(this.metrics[e]));return t}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(t){if(null!=t.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=t.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=t.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const e=Oh(ud(t.optimizer_config));let n,r;if("string"==typeof t.loss)n=Tu(t.loss);else if(Array.isArray(t.loss))n=t.loss.map(t=>Tu(t));else if(null!=t.loss){n={};for(const e in t.loss)n[e]=Tu(t.loss[e])}if(Array.isArray(t.metrics))r=t.metrics.map(t=>Tu(t));else if(null!=t.metrics){r={};for(const e in t.metrics)r[e]=Tu(t.metrics[e])}this.compile({loss:n,metrics:r,optimizer:e})}async save(t,e){if("string"==typeof t){const e=Jr(t);if(0===e.length)throw new Cu(`Cannot find any save handlers for URL '${t}'`);if(e.length>1)throw new Cu(`Found more than one (${e.length}) save handlers for URL '${t}'`);t=e[0]}if(null==t.save)throw new Cu("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const n=await Vr(this.getNamedWeights(e)),r={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:"TensorFlow.js tfjs-layers v2.0.0-rc.1",convertedBy:null};if(null!=e&&e.includeOptimizer&&null!=this.optimizer){r.trainingConfig=this.getTrainingConfig();const t="optimizer",{data:e,specs:s}=await Vr(await this.optimizer.getWeights(),t);n.specs.push(...s),n.data=Hr([n.data,e])}if(null!=this.userDefinedMetadata){const t=!0;rd(this.userDefinedMetadata,this.name,t),r.userDefinedMetadata=this.userDefinedMetadata}return r.weightData=n.data,r.weightSpecs=n.specs,t.save(r)}setUserDefinedMetadata(t){rd(t,this.name),this.userDefinedMetadata=t}getUserDefinedMetadata(){return this.userDefinedMetadata}}async function zd(t,e){if(null==e&&(e={}),"string"==typeof t){const n=Zr(t,e.onProgress);if(0===n.length)n.push(As(t,e));else if(n.length>1)throw new Cu(`Found more than one (${n.length}) load handlers for URL '${t}'`);t=n[0]}return async function(t,e,n){null==n&&(n={});if(null==t.load)throw new Cu("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const r=await t.load();let s=r.modelTopology;null!=s.model_config&&(s=s.model_config);const a=null==n.strict||n.strict,i=null!=r.weightData&&null!=r.weightSpecs&&a,o=Oh(ud(s),e,i),l=r.trainingConfig;null!=l&&o.loadTrainingConfig(l);null!=r.userDefinedMetadata&&o.setUserDefinedMetadata(r.userDefinedMetadata);if(null!=r.weightData){if(null==r.weightSpecs)throw new Cu("LayersModel artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.");const{modelWeights:t,optimizerWeights:e}=function(t,e){const n=Ur(t,e),r={},s=[];return e.forEach(t=>{"optimizer"===t.group?s.push({name:t.name,tensor:n[t.name]}):r[t.name]=n[t.name]}),{modelWeights:r,optimizerWeights:s}}(r.weightData,r.weightSpecs);o.loadWeights(t,a),null!=o.optimizer&&e.length>0&&await o.optimizer.setWeights(e),ra(t),ra(e.map(t=>t.tensor))}return o}(t,void 0,e)}Md.className="Model",Hs(Md);class Ld extends Md{constructor(t){if(super({inputs:[],outputs:[]}),t=t||{},this.trainable=!0,this.built=!1,this.name=null!=t.name?t.name:ih("sequential_"),null!=t.layers)for(const e of t.layers)this.add(e)}checkShape(t){if(t.inboundNodes[0].outputTensors[0].shape.some(t=>t<0))throw new Cu("Negative dimension size caused by adding layer "+t.name+" with input shape ["+t.inboundNodes[0].inputTensors[0].shape+"]")}add(t){const e=t instanceof Ld||t instanceof Md;let n;if(e){if(n=t,1!==n.outputs.length)throw new Cu("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new Cu("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===t.inboundNodes.length){if(null==t.batchInputShape)throw new Cu("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const e=Ch({batchShape:t.batchInputShape,dtype:t.dtype,name:t.name+"_input"});t.apply(e)}if(e)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==t.inboundNodes.length)throw new Cu(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${t.name} which has ${t.inboundNodes.length} pre-existing inbound connections.`);if(1!==t.inboundNodes[0].outputTensors.length)throw new Cu("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(t),this.outputs=[t.inboundNodes[0].outputTensors[0]],this.inputs=function t(e,n,r){if((null==n||null!=r&&r>0)&&(n=e.sourceLayer,r=e.nodeIndex),0===n.inboundNodes.length)return[e];{const e=n.inboundNodes[r];if(0===e.inboundLayers.length)return e.inputTensors;{const n=[];for(let r=0;r<e.inboundLayers.length;r++){const s=t(e.inputTensors[r],e.inboundLayers[r],e.nodeIndices[r]);for(const t of s)-1===n.indexOf(t)&&n.push(t)}return n}}}(this.outputs[0])}this.inboundNodes=[],new bh({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:ku(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map(t=>t.shape),outputShapes:this.outputs[0].shape})}else{const e=t.apply(this.outputs[0]);if(Array.isArray(e))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(t),this.outputs=[e],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(t),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const t=this.layers.length-1;this.layers[t].outboundNodes=[],this.outputs=[this.layers[t].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(t,e){return null==this.model&&this.build(),this.model.call(t,e)}build(t){if(ch(t),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new Md({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(t,e,n=console.log){this.built||this.build(),super.summary(t,e,n)}setWeights(t){null==this.model&&this.build(),this.model.setWeights(t)}evaluate(t,e,n={}){if(!this.built)throw new vu("The model needs to be compiled before being used.");return this.model.evaluate(t,e,n)}async evaluateDataset(t,e){if(!this.built)throw new vu("The model needs to be compiled before being used.");return this.model.evaluateDataset(t,e)}predict(t,e={}){return null==this.model&&this.build(),this.model.predict(t,e)}predictOnBatch(t){return null==this.model&&this.build(),this.model.predictOnBatch(t)}compile(t){this.build(),this.model.compile(t),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(t){this.model.optimizer=t}async fit(t,e,n={}){if(!this.built)throw new vu("The model needs to be compiled before being used.");return this.model.fit(t,e,n)}async fitDataset(t,e){if(!this.built)throw new vu("The model needs to be compiled before being used.");return this.model.fitDataset(t,e)}async trainOnBatch(t,e){return this.model.trainOnBatch(t,e)}static fromConfig(t,e,n={},r=!1){let s,a={};if(e instanceof Array){if(null==e[0].className||"Merge"===e[0].className)throw new Cu("Legacy serialization format not supported yet.");s=e}else v(null!=e.layers,()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."),s=e.layers,delete e.layers,a=e;const i=new t(a);if(!(i instanceof Ld))throw new Nu("Sequential.fromConfig called on non-Sequential input: "+i);for(const t of s){const e=Oh(t,void 0,r);r&&e.setFastWeightInitDuringBuild(!0),i.add(e)}return i}set stopTraining(t){if(null==this.model)throw new Cu("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=t}get stopTraining(){if(null==this.model)throw new Cu("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const t=[];for(const e of this.layers){const n={};n.className=e.getClassName(),n.config=e.getConfig(),t.push(n)}return{name:this.name,layers:t}}}function Bd(t){return Ch(t)}Ld.className="Sequential",Hs(Ld);class Pd extends js{getConfig(){return{}}}class Wd extends Pd{apply(t,e=1){return function(t,e=1){if(1!==e)throw new Nu(`Support for alpha values other than 1 (${e}) is not implemented yet.`);return mo(t)}(t,e)}}Wd.className="elu",Hs(Wd);class Vd extends Pd{apply(t){return wo(t)}}Vd.className="selu",Hs(Vd);class Ud extends Pd{apply(t){return bo(t)}}Ud.className="relu",Hs(Ud);class Gd extends Pd{apply(t){return na(()=>qn(6,bo(t)))}}Gd.className="relu6",Hs(Gd);class jd extends Pd{apply(t){return t}}jd.className="linear",Hs(jd);class qd extends Pd{apply(t){return $n(t)}}qd.className="sigmoid",Hs(qd);class Hd extends Pd{apply(t){return function(t){return na(()=>{const e=sn(.5,Yn(.2,t));return fn(e,0,1)})}(t)}}Hd.className="hardSigmoid",Hs(Hd);class Kd extends Pd{apply(t){return Fn(t)}}Kd.className="softplus",Hs(Kd);class Xd extends Pd{apply(t){return function(t){return na(()=>nr(t,an(t).add(1)))}(t)}}Xd.className="softsign",Hs(Xd);class Yd extends Pd{apply(t){return Bn(t)}}Yd.className="tanh",Hs(Yd);class Jd extends Pd{apply(t,e=-1){return vo(t,e)}}Jd.className="softmax",Hs(Jd);class Zd extends Pd{apply(t,e=-1){return Co(t,e)}}function Qd(t){return t.getClassName()}function tp(t,e={}){return Ou(t,qs.getMap().classNameMap,e,"activation")}function ep(t){if(null==t){const t={className:"linear",config:{}};return tp(t)}if("string"==typeof t){const e={};return e.className=t,e.config={},tp(e)}return t instanceof Pd?t:tp(t)}function np(t){if(null!=t&&"object"!=typeof t)throw new Error("Argument to L1L2 regularizer's constructor is expected to be an object, but received: "+t)}Zd.className="logSoftmax",Hs(Zd);class rp extends js{}class sp extends rp{constructor(t){super(),np(t),this.l1=null==t||null==t.l1?.01:t.l1,this.l2=null==t||null==t.l2?.01:t.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(t){return na(()=>{let e=ve([1]);return this.hasL1&&(e=sn(e,ze(Yn(this.l1,an(t))))),this.hasL2&&(e=sn(e,ze(Yn(this.l2,Ac(t))))),e.asScalar()})}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(t,e){return new t({l1:e.l1,l2:e.l2})}}sp.className="L1L2",Hs(sp);const ap={l1l2:"L1L2"};function ip(t){return _u(t)}function op(t,e={}){return Ou(t,qs.getMap().classNameMap,e,"regularizer")}function lp(t){if(null==t)return null;if("string"==typeof t){return op({className:t in ap?ap[t]:t,config:{}})}return t instanceof rp?t:op(t)}class up extends wh{constructor(t){super(null==t?{}:t),this.supportsMasking=!0,null!=t&&(this.maxValue=t.maxValue)}call(t,e){t=uh(t);let n=bo(t);return null!=this.maxValue&&(n=fn(n,0,this.maxValue)),n}computeOutputShape(t){return t}getConfig(){const t={maxValue:this.maxValue},e=super.getConfig();return Object.assign(t,e),t}}up.className="ReLU",Hs(up);class cp extends wh{constructor(t){super(null==t?{}:t),this.DEFAULT_ALPHA=.3,null==t&&(t={}),this.alpha=null==t.alpha?this.DEFAULT_ALPHA:t.alpha}call(t,e){const n=uh(t);return go(n,this.alpha)}computeOutputShape(t){return t}getConfig(){const t={alpha:this.alpha},e=super.getConfig();return Object.assign(t,e),t}}cp.className="LeakyReLU",Hs(cp);class hp extends wh{constructor(t){if(super(null==t?{}:t),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==t&&(t={}),this.supportsMasking=!0,this.alphaInitializer=eh(t.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=lp(t.alphaRegularizer),this.alphaConstraint=Ju(t.alphaConstraint),null==t.sharedAxes)this.sharedAxes=null;else if(Array.isArray(t.sharedAxes))this.sharedAxes=t.sharedAxes;else{if("number"!=typeof t.sharedAxes)throw new Cu("Expected sharedAxes to be a number or an array of numbers, but got "+t.sharedAxes);this.sharedAxes=[t.sharedAxes]}}build(t){const e=(t=ch(t)).slice(1);if(null!=this.sharedAxes)for(const t of this.sharedAxes)e[t-1]=1;this.alpha=this.addWeight("alpha",e,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let e=1;e<t.length;++e)n[e]=t[e];this.inputSpec=[new mh({ndim:t.length,axes:n})],this.built=!0}call(t,e){return t=uh(t),yo(t,this.alpha.read())}getConfig(){const t={alphaInitializer:th(this.alphaInitializer),alphaRegularizer:ip(this.alphaRegularizer),alphaConstraint:Xu(this.alphaConstraint),sharedAxes:this.sharedAxes},e=super.getConfig();return Object.assign(t,e),t}}hp.className="PReLU",Hs(hp);class dp extends wh{constructor(t){if(super(null==t?{}:t),this.DEFAULT_ALPHA=1,null==t&&(t={}),null!=t.alpha&&t.alpha!==this.DEFAULT_ALPHA)throw new Nu(`Non-default alpha value (${t.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==t.alpha?this.DEFAULT_ALPHA:t.alpha}call(t,e){const n=uh(t);return mo(n)}computeOutputShape(t){return t}getConfig(){const t={alpha:this.alpha},e=super.getConfig();return Object.assign(t,e),t}}dp.className="ELU",Hs(dp);class pp extends wh{constructor(t){super(null==t?{}:t),this.DEFAULT_THETA=1,null==t&&(t={}),this.theta=null==t.theta?this.DEFAULT_THETA:t.theta}call(t,e){const n=uh(t);return n.mul(bc(n.greater(this.theta),"float32"))}computeOutputShape(t){return t}getConfig(){const t={theta:this.theta},e=super.getConfig();return Object.assign(t,e),t}}pp.className="ThresholdedReLU",Hs(pp);class fp extends wh{constructor(t){super(null==t?{}:t),this.DEFAULT_AXIS=1,null==t&&(t={}),this.softmax=(new Jd).apply,this.axis=null==t.axis?this.DEFAULT_AXIS:t.axis}call(t,e){const n=uh(t);return this.softmax(n,this.axis)}computeOutputShape(t){return t}getConfig(){const t={axis:this.axis},e=super.getConfig();return Object.assign(t,e),t}}function mp(t,e,n){if("number"==typeof t)return ku(t,e);if(t.length!==e)throw new Cu(`The ${n} argument must be an integer or tuple of ${e} integers. Received: ${t.length} elements.`);for(let s=0;s<e;++s){const a=t[s];if((r=a)!==parseInt(r.toString(),10))throw new Cu(`The ${n} argument must be an integer or tuple of ${e} integers. Received: ${JSON.stringify(t)} including a non-integer number `+a)}return t;var r}function gp(t,e,n,r,s=1){if(null==t)return t;let a;return a="same"===n?t:t-(e+(e-1)*(s-1))+1,Math.floor((a+r-1)/r)}function yp(t,e,n,r){if(null==t)return null;if("valid"===r)t=t*e+gc([n-e,0]);else{if("same"!==r)throw new Cu(`Unsupport padding mode: ${r}.`);t*=e}return t}function bp(t,e){return na(()=>(sc(e),"channelsFirst"===e?Rr(t,[0,2,3,1]):t))}function xp(t,e){return na(()=>(sc(e),"channelsFirst"===e?Rr(t,[0,2,3,4,1]):t))}function wp(t,e,n,r=[1,1],s="valid",a,i,o=null){return na(()=>{if(null==a&&(a="channelsLast"),sc(a),3!==t.rank&&4!==t.rank)throw new Cu(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${t.rank}.`);if(3!==e.rank&&4!==e.rank)throw new Cu(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${t.rank}.`);let l=bp(t,a);if("causal"===s)throw new Nu("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=Tl({x:l,filter:e,strides:r,pad:"same"===s?"same":"valid",dilations:i,dataFormat:"NHWC",bias:n,activation:o}),"channelsFirst"===a&&(l=Rr(l,[0,3,1,2])),l})}fp.className="Softmax",Hs(fp);class vp extends wh{constructor(t,e){if(super(e),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",vp.verifyArgs(e),this.rank=t,Pu(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new Nu(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=mp(e.kernelSize,t,"kernelSize"),this.strides=mp(null==e.strides?1:e.strides,t,"strides"),this.padding=null==e.padding?"valid":e.padding,ac(this.padding),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,sc(this.dataFormat),this.activation=ep(e.activation),this.useBias=null==e.useBias||e.useBias,this.biasInitializer=eh(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=Ju(e.biasConstraint),this.biasRegularizer=lp(e.biasRegularizer),this.activityRegularizer=lp(e.activityRegularizer),this.dilationRate=mp(null==e.dilationRate?1:e.dilationRate,t,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new Cu("dilationRate must be a number or an array of a single number for 1D convolution, but received "+JSON.stringify(this.dilationRate));if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new Cu("dilationRate must be a number or array of two numbers for 2D convolution, but received "+JSON.stringify(this.dilationRate))}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new Cu("dilationRate must be a number or array of three numbers for 3D convolution, but received "+JSON.stringify(this.dilationRate))}static verifyArgs(t){if(Iu("kernelSize"in t,"required key 'kernelSize' not in config"),"number"!=typeof t.kernelSize&&!Bu(t.kernelSize,"number",1,3))throw new Cu(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(t.kernelSize)}.`)}getConfig(){const t={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:Qd(this.activation),useBias:this.useBias,biasInitializer:th(this.biasInitializer),biasRegularizer:ip(this.biasRegularizer),activityRegularizer:ip(this.activityRegularizer),biasConstraint:Xu(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}}class Cp extends vp{constructor(t,e){super(t,e),this.kernel=null,Cp.verifyArgs(e),this.filters=e.filters,Pu(this.filters,"filters"),this.kernelInitializer=eh(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=Ju(e.kernelConstraint),this.kernelRegularizer=lp(e.kernelRegularizer)}build(t){t=ch(t);const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e])throw new Cu("The channel dimension of the input should be defined. Found "+t[e]);const n=t[e],r=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[e]:n}}],this.built=!0}call(t,e){return na(()=>{let e;t=uh(t);const n=null==this.bias?null:this.bias.read(),r=Wu(this.activation.getClassName());if(null!=r&&2===this.rank)e=wp(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,r);else{if(1===this.rank)e=function(t,e,n,r=1,s="valid",a,i=1){return na(()=>{if(null==a&&(a="channelsLast"),sc(a),3!==t.shape.length)throw new Cu("The input of a conv1dWithBias operation should be 3, but is "+t.shape.length+" instead.");if(3!==e.shape.length)throw new Cu("The kernel for a conv1dWithBias operation should be 3, but is "+e.shape.length+" instead");if(null!=n&&1!==n.shape.length)throw new Cu("The bias for a conv1dWithBias operation should be 1, but is "+e.shape.length+" instead");if("channelsFirst"===a&&(t=Rr(t,[0,2,1])),"causal"===s)throw new Nu("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let o=Pi(t,e,r,"same"===s?"same":"valid","NWC",i);return null!=n&&(o=Tc(o,n)),o})}(t,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)e=wp(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new Nu("convolutions greater than 3D are not implemented yet.");e=function(t,e,n,r=[1,1,1],s="valid",a,i){return na(()=>{if(null==a&&(a="channelsLast"),sc(a),4!==t.rank&&5!==t.rank)throw new Cu("conv3dWithBias expects input to be of rank 4 or 5, but received "+t.rank+".");if(4!==e.rank&&5!==e.rank)throw new Cu("conv3dWithBias expects kernel to be of rank 4 or 5, but received "+t.rank+".");let o=xp(t,a);if("causal"===s)throw new Nu("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return o=Vi(o,e,r,"same"===s?"same":"valid","NDHWC",i),null!=n&&(o=Tc(o,n)),"channelsFirst"===a&&(o=Rr(o,[0,4,1,2,3])),o})}(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(e=this.activation.apply(e))}return e})}computeOutputShape(t){t=ch(t);const e=[],n="channelsLast"===this.dataFormat?t.slice(1,t.length-1):t.slice(2);for(let t=0;t<n.length;++t){const r=gp(n[t],this.kernelSize[t],this.padding,this.strides[t],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[t]);e.push(r)}let r=[t[0]];return"channelsLast"===this.dataFormat?(r=r.concat(e),r.push(this.filters)):(r.push(this.filters),r=r.concat(e)),r}getConfig(){const t={filters:this.filters,kernelInitializer:th(this.kernelInitializer),kernelRegularizer:ip(this.kernelRegularizer),kernelConstraint:Xu(this.kernelConstraint)},e=super.getConfig();return Object.assign(t,e),t}static verifyArgs(t){if(!("filters"in t)||"number"!=typeof t.filters||t.filters<1)throw new Cu("Convolution layer expected config.filters to be a 'number' > 0 but got "+JSON.stringify(t.filters))}}class Np extends Cp{constructor(t){super(2,t),Np.verifyArgs(t)}getConfig(){const t=super.getConfig();return delete t.rank,t}static verifyArgs(t){if("number"!=typeof t.kernelSize&&!Bu(t.kernelSize,"number",1,2))throw new Cu(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(t.kernelSize)}.`)}}Np.className="Conv2D",Hs(Np);class Sp extends Cp{constructor(t){super(3,t),Sp.verifyArgs(t)}getConfig(){const t=super.getConfig();return delete t.rank,t}static verifyArgs(t){if("number"!=typeof t.kernelSize&&(!Array.isArray(t.kernelSize)||1!==t.kernelSize.length&&3!==t.kernelSize.length))throw new Cu(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(t.kernelSize)}.`)}}Sp.className="Conv3D",Hs(Sp);class kp extends Np{constructor(t){if(super(t),this.inputSpec=[new mh({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new Cu("Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode "+this.padding)}build(t){if(4!==(t=ch(t)).length)throw new Cu("Input should have rank 4; Received input shape: "+JSON.stringify(t));const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e])throw new Cu("The channel dimension of the inputs should be defined. Found `None`.");const n=t[e],r=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",r,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new mh({ndim:4,axes:{[e]:n}})],this.built=!0}call(t,e){return na(()=>{let e=uh(t);if(4!==e.shape.length)throw new Cu("Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-"+e.shape.length);const n=e.shape,r=n[0];let s,a;"channelsFirst"===this.dataFormat?(s=2,a=3):(s=1,a=2);const i=n[s],o=n[a],l=this.kernelSize[0],u=this.kernelSize[1],c=this.strides[0],h=this.strides[1],d=[r,yp(i,c,l,this.padding),yp(o,h,u,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(e=Rr(e,[0,2,3,1]));let p=Xi(e,this.kernel.read(),d,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(p=Rr(p,[0,3,1,2])),null!=this.bias&&(p=Tc(p,this.bias.read(),this.dataFormat)),null!=this.activation&&(p=this.activation.apply(p)),p})}computeOutputShape(t){const e=(t=ch(t)).slice();let n,r,s;"channelsFirst"===this.dataFormat?(n=1,r=2,s=3):(n=3,r=1,s=2);const a=this.kernelSize[0],i=this.kernelSize[1],o=this.strides[0],l=this.strides[1];return e[n]=this.filters,e[r]=yp(e[r],o,a,this.padding),e[s]=yp(e[s],l,i,this.padding),e}getConfig(){const t=super.getConfig();return delete t.dilationRate,t}}kp.className="Conv2DTranspose",Hs(kp);class Ip extends Cp{constructor(t,e){if(super(t,e),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==e.filters)throw new Cu("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=e.kernelInitializer||null!=e.kernelRegularizer||null!=e.kernelConstraint)throw new Cu("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=e.padding&&"same"!==e.padding&&"valid"!==e.padding)throw new Cu(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received `+JSON.stringify(e.padding));this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=eh(e.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=lp(e.depthwiseRegularizer),this.depthwiseConstraint=Ju(e.depthwiseConstraint),this.pointwiseInitializer=eh(e.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=lp(e.pointwiseRegularizer),this.pointwiseConstraint=Ju(e.pointwiseConstraint)}build(t){if((t=ch(t)).length<this.rank+2)throw new Cu(`Inputs to SeparableConv${this.rank}D should have rank `+(this.rank+2)+", but received input shape: "+JSON.stringify(t));const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e]||t[e]<0)throw new Cu("The channel dimension of the inputs should be defined, but found "+JSON.stringify(t[e]));const n=t[e],r=this.kernelSize.concat([n,this.depthMultiplier]),s=[];for(let t=0;t<this.rank;++t)s.push(1);s.push(n*this.depthMultiplier,this.filters);this.depthwiseKernel=this.addWeight("depthwise_kernel",r,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",s,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,!0,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.inputSpec=[new mh({ndim:this.rank+2,axes:{[e]:n}})],this.built=!0}call(t,e){return na(()=>{let e;if(t=uh(t),1===this.rank)throw new Nu("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(t=Rr(t,[0,2,3,1])),e=Ki(t,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(e=Tc(e,this.bias.read(),this.dataFormat)),null!=this.activation&&(e=this.activation.apply(e)),"channelsFirst"===this.dataFormat&&(e=Rr(e,[0,3,1,2])),e})}getConfig(){const t=super.getConfig();return delete t.rank,delete t.kernelInitializer,delete t.kernelRegularizer,delete t.kernelConstraint,t.depthwiseInitializer=th(this.depthwiseInitializer),t.pointwiseInitializer=th(this.pointwiseInitializer),t.depthwiseRegularizer=ip(this.depthwiseRegularizer),t.pointwiseRegularizer=ip(this.pointwiseRegularizer),t.depthwiseConstraint=Xu(this.depthwiseConstraint),t.pointwiseConstraint=Xu(this.pointwiseConstraint),t}}Ip.className="SeparableConv";class Ep extends Ip{constructor(t){super(2,t)}}Ep.className="SeparableConv2D",Hs(Ep);class $p extends Cp{constructor(t){super(1,t),$p.verifyArgs(t),this.inputSpec=[{ndim:3}]}getConfig(){const t=super.getConfig();return delete t.rank,delete t.dataFormat,t}static verifyArgs(t){if("number"!=typeof t.kernelSize&&!Bu(t.kernelSize,"number",1,1))throw new Cu(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(t.kernelSize)}.`)}}$p.className="Conv1D",Hs($p);class Ap extends wh{constructor(t){super(t),"number"==typeof t.cropping?this.cropping=[[t.cropping,t.cropping],[t.cropping,t.cropping]]:"number"==typeof t.cropping[0]?this.cropping=[[t.cropping[0],t.cropping[0]],[t.cropping[1],t.cropping[1]]]:this.cropping=t.cropping,this.dataFormat=void 0===t.dataFormat?"channelsLast":t.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(t){return"channelsFirst"===this.dataFormat?[t[0],t[1],t[2]-this.cropping[0][0]-this.cropping[0][1],t[3]-this.cropping[1][0]-this.cropping[1][1]]:[t[0],t[1]-this.cropping[0][0]-this.cropping[0][1],t[2]-this.cropping[1][0]-this.cropping[1][1],t[3]]}call(t,e){return na(()=>{if(t=uh(t),"channelsLast"===this.dataFormat){const e=Cc(t,this.cropping[0][0],t.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return Cc(e,this.cropping[1][0],t.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const e=Cc(t,this.cropping[0][0],t.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return Cc(e,this.cropping[1][0],t.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}})}getConfig(){const t={cropping:this.cropping,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}Ap.className="Cropping2D",Hs(Ap);class Rp extends wh{constructor(t){super(t),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==t.size?this.DEFAULT_SIZE:t.size,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat}computeOutputShape(t){if("channelsFirst"===this.dataFormat){const e=null==t[2]?null:this.size[0]*t[2],n=null==t[3]?null:this.size[1]*t[3];return[t[0],t[1],e,n]}{const e=null==t[1]?null:this.size[0]*t[1],n=null==t[2]?null:this.size[1]*t[2];return[t[0],e,n,t[3]]}}call(t,e){return na(()=>{let e=uh(t);const n=e.shape;if("channelsFirst"===this.dataFormat){e=Rr(e,[0,2,3,1]);const t=this.size[0]*n[2],r=this.size[1]*n[3],s=e.resizeNearestNeighbor([t,r]);return Rr(s,[0,3,1,2])}{const t=this.size[0]*n[1],r=this.size[1]*n[2];return e.resizeNearestNeighbor([t,r])}})}getConfig(){const t={size:this.size,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}Rp.className="UpSampling2D",Hs(Rp);class Tp extends vp{constructor(t){super(2,t),this.depthwiseKernel=null,this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=eh(t.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=Ju(t.depthwiseConstraint),this.depthwiseRegularizer=lp(t.depthwiseRegularizer)}build(t){if((t=ch(t)).length<4)throw new Cu(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(t)}.`);const e="channelsFirst"===this.dataFormat?1:3;if(null==t[e]||t[e]<0)throw new Cu(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${t[e]}).`);const n=t[e],r=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",r,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return na(()=>{let e=function(t,e,n=[1,1],r="valid",s,a){return na(()=>{null==s&&(s="channelsLast"),sc(s);let i=bp(t,s);if(4!==t.rank)throw new Cu("Input for depthwiseConv2d is required to be 4-D, but is instead "+t.rank+"-D");if(4!==e.rank)throw new Cu("depthwiseKernel is required to be 4-D, but is instead "+e.rank+"-D");return i=ji(i,e,n,"same"===r?"same":"valid","NHWC",a),"channelsFirst"===s&&(i=Rr(i,[0,3,1,2])),i})}(t=uh(t),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(e=Tc(e,this.bias.read(),this.dataFormat)),null!=this.activation&&(e=this.activation.apply(e)),e})}computeOutputShape(t){t=ch(t);const e="channelsFirst"===this.dataFormat?t[2]:t[1],n="channelsFirst"===this.dataFormat?t[3]:t[2],r="channelsFirst"===this.dataFormat?t[1]*this.depthMultiplier:t[3]*this.depthMultiplier,s=gp(e,this.kernelSize[0],this.padding,this.strides[0]),a=gp(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[t[0],r,s,a]:[t[0],s,a,r]}getConfig(){const t=super.getConfig();return t.depthMultiplier=this.depthMultiplier,t.depthwiseInitializer=th(this.depthwiseInitializer),t.depthwiseRegularizer=ip(this.depthwiseRegularizer),t.depthwiseConstraint=Xu(this.depthwiseRegularizer),t}}Tp.className="DepthwiseConv2D",Hs(Tp);class Dp extends wh{constructor(t){super(t),this.rate=Math.max(Math.min(t.rate,1),0),this.noiseShape=t.noiseShape,this.seed=t.seed,this.supportsMasking=!0}getNoiseShape(t){if(null==this.noiseShape)return this.noiseShape;const e=t.shape,n=[];for(let t=0;t<this.noiseShape.length;++t)n.push(null==this.noiseShape[t]?e[t]:this.noiseShape[t]);return n}call(t,e){return na(()=>{this.invokeCallHook(t,e);const n=uh(t);if(0<this.rate&&this.rate<1){const t=null!=e.training&&e.training,r=this.getNoiseShape(n);return _c(()=>Dc(n,this.rate,r,this.seed),()=>n,t)}return t})}getConfig(){const t={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},e=super.getConfig();return Object.assign(t,e),t}dispose(){return super.dispose()}}Dp.className="Dropout",Hs(Dp);class _p extends Dp{constructor(t){super(t),this.inputSpec=[{ndim:3}]}getNoiseShape(t){const e=t.shape;return[e[0],1,e[2]]}}_p.className="SpatialDropout1D",Hs(_p);class Op extends wh{constructor(t){if(super(t),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==t.batchInputShape&&null==t.inputShape&&null!=t.inputDim){let e=null;null!=t.batchSize&&(e=t.batchSize),this.batchInputShape=[e,t.inputDim]}this.units=t.units,Pu(this.units,"units"),this.activation=ep(t.activation),null!=t.useBias&&(this.useBias=t.useBias),this.kernelInitializer=eh(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=eh(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=Ju(t.kernelConstraint),this.biasConstraint=Ju(t.biasConstraint),this.kernelRegularizer=lp(t.kernelRegularizer),this.biasRegularizer=lp(t.biasRegularizer),this.activityRegularizer=lp(t.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(t){const e=(t=ch(t))[t.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[e,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:e}}],this.built=!0}computeOutputShape(t){const e=(t=ch(t)).slice();return e[e.length-1]=this.units,e}call(t,e){return na(()=>{this.invokeCallHook(t,e);const n=uh(t),r=Wu(this.activation.getClassName());let s;return null!=r?s=Ec(n,this.kernel.read(),r,this.bias?this.bias.read():null):(s=Ec(n,this.kernel.read()),null!=this.bias&&(s=Tc(s,this.bias.read())),null!=this.activation&&(s=this.activation.apply(s))),s})}getConfig(){const t={units:this.units,activation:Qd(this.activation),useBias:this.useBias,kernelInitializer:th(this.kernelInitializer),biasInitializer:th(this.biasInitializer),kernelRegularizer:ip(this.kernelRegularizer),biasRegularizer:ip(this.biasRegularizer),activityRegularizer:ip(this.activityRegularizer),kernelConstraint:Xu(this.kernelConstraint),biasConstraint:Xu(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}}Op.className="Dense",Hs(Op);class Fp extends wh{constructor(t){super(t=t||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=t.dataFormat}computeOutputShape(t){t=ch(t);for(const e of t.slice(1))if(null==e)throw new Cu(`The shape of the input to "Flatten" is not fully defined (got ${t.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[t[0],pc(t,1)]}call(t,e){return na(()=>{this.invokeCallHook(t,e);let n=uh(t);if("channelsFirst"===this.dataFormat&&n.rank>1){const t=[0];for(let e=2;e<n.rank;++e)t.push(e);t.push(1),n=n.transpose(t)}return function(t){if(t.rank<=1)throw new Cu(`batchFlatten requires a minimum rank of 2. Got rank: ${t.rank}.`);const e=[t.shape[0],pc(t.shape,1)];return t.reshape(e)}(n)})}getConfig(){const t={};null!=this.dataFormat&&(t.dataFormat=this.dataFormat);const e=super.getConfig();return Object.assign(t,e),t}}Fp.className="Flatten",Hs(Fp);class Mp extends wh{constructor(t){super(t),this.supportsMasking=!0,this.activation=ep(t.activation)}call(t,e){return na(()=>{this.invokeCallHook(t,e);const n=uh(t);return this.activation.apply(n)})}getConfig(){const t={activation:Qd(this.activation)},e=super.getConfig();return Object.assign(t,e),t}}Mp.className="Activation",Hs(Mp);class zp extends wh{constructor(t){super(t),this.n=t.n,this.inputSpec=[{ndim:2}]}computeOutputShape(t){return[t[0],this.n,t[1]]}call(t,e){return na(()=>{return t=uh(t),e=t,n=this.n,na(()=>{if(2!==e.shape.length)throw new Cu(`repeat() expects a rank-2 tensor, but received a rank-${e.shape.length} tensor.`);return kc(xc(e,1),[1,n,1])});var e,n})}getConfig(){const t={n:this.n},e=super.getConfig();return Object.assign(t,e),t}}zp.className="RepeatVector",Hs(zp);class Lp extends wh{constructor(t){super(t),this.targetShape=t.targetShape;for(let t=0;t<this.targetShape.length;++t)this.isUnknown(this.targetShape[t])&&(this.targetShape[t]=null)}isUnknown(t){return t<0||null==t}fixUnknownDimension(t,e){const n="Total size of new array must be unchanged.",r=e.slice();let s=1,a=null;for(let t=0;t<r.length;++t){const e=r[t];if(this.isUnknown(e)){if(null!==a)throw new Cu("Can only specifiy one unknown dimension.");a=t}else s*=e}const i=pc(t);if(null!==a){if(0===s||i%s!=0)throw new Cu(n);r[a]=i/s}else if(i!==s)throw new Cu(n);return r}computeOutputShape(t){let e=!1;for(let n=0;n<t.length;++n)if(this.isUnknown(t[n])){e=!0;break}return e?t.slice(0,1).concat(this.targetShape):t.slice(0,1).concat(this.fixUnknownDimension(t.slice(1),this.targetShape))}call(t,e){return na(()=>{this.invokeCallHook(t,e);const n=uh(t),r=n.shape,s=r.slice(0,1).concat(this.fixUnknownDimension(r.slice(1),this.targetShape));return n.reshape(s)})}getConfig(){const t={targetShape:this.targetShape},e=super.getConfig();return Object.assign(t,e),t}}Lp.className="Reshape",Hs(Lp);class Bp extends wh{constructor(t){if(super(t),null==t.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(t.dims))throw new Error("Permute constructor requires `dims` to be an Array, but received "+t.dims+" instead.");const e=yc(1,t.dims.length+1);if(!I(t.dims.slice().sort(),e))throw new Error("Invalid permutation `dims`: "+JSON.stringify(t.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=t.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new mh({ndim:this.dims.length+1})]}computeOutputShape(t){const e=(t=ch(t)).slice();return this.dims.forEach((n,r)=>{e[r+1]=t[n]}),e}call(t,e){return Rr(uh(t),this.dimsIncludingBatch)}getConfig(){const t={dims:this.dims},e=super.getConfig();return Object.assign(t,e),t}}Bp.className="Permute",Hs(Bp);class Pp extends wh{constructor(t){super(null==t?{}:t),this.supportsMasking=!0,this.maskValue=null!=t?null==t.maskValue?0:t.maskValue:0}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={maskValue:this.maskValue};return Object.assign(e,t),e}computeMask(t,e){const n=uh(t);return Ae(La(n,this.maskValue),-1)}call(t,e){return na(()=>{this.invokeCallHook(t,e);const n=uh(t),r=Ae(La(n,this.maskValue),-1,!0);return n.mul(r.asType(n.dtype))})}}Pp.className="Masking",Hs(Pp);class Wp extends wh{constructor(t){if(super(t),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==t.batchInputShape&&null==t.inputShape){let e=null;null!=t.batchSize&&(e=t.batchSize),null==t.inputLength?this.batchInputShape=[e,null]:this.batchInputShape=[e].concat(Au(t.inputLength))}this.inputDim=t.inputDim,Pu(this.inputDim,"inputDim"),this.outputDim=t.outputDim,Pu(this.outputDim,"outputDim"),this.embeddingsInitializer=eh(t.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=lp(t.embeddingsRegularizer),this.activityRegularizer=lp(t.activityRegularizer),this.embeddingsConstraint=Ju(t.embeddingsConstraint),this.maskZero=t.maskZero,this.supportsMasking=t.maskZero,this.inputLength=t.inputLength}build(t){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(t){}computeMask(t,e){return na(()=>this.maskZero?(t=uh(t),La(t,Ie(t))):null)}computeOutputShape(t){if(t=ch(t),null==this.inputLength)return[...t,this.outputDim];const e=Au(this.inputLength);if(e.length!==t.length-1)throw new Cu(`"inputLength" is ${this.inputLength}, but received input shape has shape `+t);{let n=0;for(let r=0;r<e.length;++r){const s=e[r],a=t[r+1];if(null!=s&&null!=a&&s!==a)throw new Cu(`"inputLength" is ${this.inputLength}, but received input shape has shape `+t);null==s&&(e[n]=a),n++}}return[t[0],...e,this.outputDim]}call(t,e){return na(()=>{this.invokeCallHook(t,e);let n=uh(t);return"int32"!==n.dtype&&(n=bc(n,"int32")),$c(this.embeddings.read(),n.as1D()).reshape(ch(this.computeOutputShape(n.shape)))})}getConfig(){const t={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:th(this.embeddingsInitializer),embeddingsRegularizer:ip(this.embeddingsRegularizer),activityRegularizer:ip(this.activityRegularizer),embeddingsConstraint:Xu(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},e=super.getConfig();return Object.assign(t,e),t}}Wp.className="Embedding",Hs(Wp);class Vp extends wh{constructor(t){super(t||{}),this.supportsMasking=!0}mergeFunction(t){throw new Nu}computeElementwiseOpOutputShape(t,e){if(null==t||null==e)return null;if(t.length<e.length)return this.computeElementwiseOpOutputShape(e,t);if(0===e.length)return t;const n=t.slice(0,t.length-e.length);for(let r=0;r<e.length;++r){const s=t[t.length-e.length+r],a=e[r];if(null==s||null==a||s<0||a<0)n.push(null);else if(1===s)n.push(a);else if(1===a)n.push(s);else{if(s!==a)throw new Cu("Operands could not be broadcast together with shapes "+JSON.stringify(t)+" "+JSON.stringify(e));n.push(s)}}return n}build(t){if(Array.isArray(t)&&!Array.isArray(t[0])&&(t=[ch(t)]),(t=t).length<2)throw new Cu(`A merge layer should be called on an Array of at least 2 inputs. Got ${t.length} input(s).`);let e=[];for(const n of t)null!=n&&null!==n[0]&&e.push(n[0]);if(e=Mu(e),e.length>1)throw new Cu(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(t)}.`);let n=null==t[0]?null:t[0].slice(1);for(let e=1;e<t.length;++e){const r=null==t[e]?null:t[e].slice(1);n=this.computeElementwiseOpOutputShape(n,r)}const r=t.map(t=>t.length);-1===t.indexOf(null)&&1===Mu(r).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(t,e){return na(()=>{if(t=t,this.reshapeRequired){const e=[],n=t.map(t=>t.rank);if(-1===n.indexOf(null)){const r=gc(n);for(let n of t){const t=n.rank;for(let e=0;e<r-t;++e)n=xc(n,1);e.push(n)}return this.mergeFunction(e)}{let n=!1;for(const r of t){const t=r.rank;if(null==t){const t=r.shape,s=t[0],a=t.slice(1).concat([s]);let i=r.reshape([s].concat(pc(t.slice(1))));i=Rr(i,[1,0]),i=i.reshape(a),e.push(i),n=!0}else if(t>1){const s=yc(1,t).concat([0]);e.push(Rr(r,s)),n=!0}else e.push(r)}let r=this.mergeFunction(e);const s=r.rank;if(n)if(null==s){const t=r.shape,e=t[t.length-1],n=[e].concat(t.slice(0,t.length-1));r=Rr(r.reshape([-1,e]),[1,0]).reshape(n)}else if(s>1){const t=[s-1].concat(yc(0,s-1));r=Rr(r,t)}return r}}return this.mergeFunction(t)})}computeOutputShape(t){let e;e=null==(t=t)[0]?null:t[0].slice(1);for(let n=1;n<t.length;++n){const r=null==t[n]?null:t[n].slice(1);e=this.computeElementwiseOpOutputShape(e,r)}let n=[];for(const e of t)null!=e&&null!==e[0]&&n.push(e[0]);return n=Mu(n),e=1===n.length?n.concat(e):[null].concat(e),e}computeMask(t,e){return na(()=>{if(null==e)return null;if(!Array.isArray(e))throw new Cu("`mask` should be an Array");if(!Array.isArray(t))throw new Cu("`inputs` should be an Array");if(e.length!==t.length)throw new Cu(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${t.length} vs ${e.length})`);if(e.every(t=>null==t))return null;let n=(e=e.map(t=>null==t?t:Je(t,0)))[0];for(let t=1;t<e.length-1;++t)n=Aa(n,e[t]);return n})}}class Up extends Vp{constructor(t){super(t)}mergeFunction(t){return na(()=>{let e=t[0].clone();for(let n=1;n<t.length;++n)e=sn(e,t[n]);return e})}}Up.className="Add",Hs(Up);class Gp extends Vp{constructor(t){super(t)}mergeFunction(t){return na(()=>{let e=t[0].clone();for(let n=1;n<t.length;++n)e=Yn(e,t[n]);return e})}}Gp.className="Multiply",Hs(Gp);class jp extends Vp{constructor(t){super(t)}mergeFunction(t){return na(()=>{let e=t[0].clone();for(let n=1;n<t.length;++n)e=sn(e,t[n]);return Yn(1/t.length,e)})}}jp.className="Average",Hs(jp);class qp extends Vp{constructor(t){super(t)}mergeFunction(t){return na(()=>{let e=t[0];for(let n=1;n<t.length;++n)e=Gn(e,t[n]);return e})}}qp.className="Maximum",Hs(qp);class Hp extends Vp{constructor(t){super(t)}mergeFunction(t){return na(()=>{let e=t[0];for(let n=1;n<t.length;++n)e=qn(e,t[n]);return e})}}Hp.className="Minimum",Hs(Hp);class Kp extends Vp{constructor(t){super(t),this.DEFAULT_AXIS=-1,null==t&&(t={}),this.axis=null==t.axis?this.DEFAULT_AXIS:t.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(t){if(!Array.isArray(t)||!Array.isArray(t[0])||1===t.length)throw new Cu("A `Concatenate` layer should be called on a list of at least 2 inputs");t=t;let e=!0;for(const n of t)if(null!=n){e=!1;break}if(e)return;const n=[];for(let e=0;e<t.length;++e){const r=t[e].slice();r.splice(this.axis,1);let s=!1;for(const t of n)if(I(t,r)){s=!0;break}s||n.push(r)}if(n.length>1)throw new Cu("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(t))}mergeFunction(t){return na(()=>Nc(t,this.axis))}computeOutputShape(t){if(!Array.isArray(t)||!Array.isArray(t[0]))throw new Cu("A `Concatenate` layer should be called on a list of inputs.");const e=t,n=e[0].slice(),r=this.axis<0?n.length+this.axis:this.axis;for(const t of e.slice(1)){if(null==n[r]||null==t[r]){n[r]=null;break}n[r]+=t[r]}return n}computeMask(t,e){if(null==e)return null;if(!Array.isArray(e))throw new Cu("`mask` should be an array for Concatenate");if(!Array.isArray(t))throw new Cu("`inputs` should be an array for Concatenate");if(e.length!==t.length)throw new Cu(`Mismatch in the length of mask (${e.length}) and the legnth of inputs (${t.length})`);return na(()=>{let n=!0;if(e.forEach(t=>{null==t||(n=!1)}),n)return null;const r=[];for(let n=0;n<t.length;++n)null==e[n]?r.push(ke(t[n]).asType("bool")):e[n].rank<t[n].rank?r.push(Je(e[n],-1)):r.push(e[n]);const s=Ge(r,this.axis);return $e(s,-1,!1)})}getConfig(){const t={axis:this.axis},e=super.getConfig();return Object.assign(t,e),t}}function Xp(t,e){for(;t<0;)t+=e;return t}Kp.className="Concatenate",Hs(Kp);class Yp extends Vp{constructor(t){super(t),this.axes=t.axes,this.normalize=null!=t.normalize&&t.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(t){v(Array.isArray(t)&&2===t.length&&Array.isArray(t[0])&&Array.isArray(t[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const e=t[0],n=t[1];if(e.length>3||n.length>3)throw new Nu("Dot layer does not support tensors of 4D or higher rank yet.");const r=this.interpretAxes(e,n);if(e[r[0]]!==n[r[1]])throw new Cu(`Dimension incompatibility: ${e[r[0]]} !== ${n[r[1]]}`)}mergeFunction(t){if(2!==t.length)throw new Cu(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${t.length} input(s).`);let e,n=t[0],r=t[1];return e=Array.isArray(this.axes)?this.axes.map((e,n)=>Xp(e,t[n].shape.length)):[Xp(this.axes,n.shape.length),Xp(this.axes,r.shape.length)],this.normalize&&(n=Fh(n,e[0]),r=Fh(r,e[1])),function(t,e,n){if(t.shape.length>3||e.shape.length>3)throw new Nu("batchDot is not implemented for tensors of 4D or higher rank yet");if(v(t.shape.length>=2,()=>"batchDot requires the rank of x to be >= 2, but got "+t.shape.length),v(t.shape.length>=2,()=>"batchDot requires the rank of y to be >= 2, but got "+e.shape.length),"number"==typeof n&&(n=[n,n]),"complex64"===t.dtype||"complex64"===e.dtype)throw new Nu("batchDot is not implemented for complex64-type Tensors yet.");const r=t.shape.length,s=e.shape.length;null==n&&(n=[r-1,s-2]);const a=n;return na(()=>{let n,i;if(r>s){n=r-s;const t=[];for(let e=0;e<n;++e)t.push(1);e=e.reshape(e.shape.concat(t))}else if(s>r){n=s-r;const e=[];for(let t=0;t<n;++t)e.push(1);t=t.reshape(t.shape.concat(e))}else n=0;if(2===t.shape.length&&2===e.shape.length)i=a[0]===a[1]?t.mulStrict(e).sum(a[0]):t.transpose([1,0]).mulStrict(e).sum(a[1]);else{const n=a[0]!==t.shape.length-1,r=a[1]===e.shape.length-1;i=t.matMul(e,n,r)}if(n>0){let t;t=r>s?r+s-3:r-1;const e=[];for(let r=t;r<t+n;++r)e.push(r);i=i.squeeze(e)}return 1===i.shape.length&&(i=i.expandDims(1)),i})}(n,r,e)}interpretAxes(t,e){let n;return n=Array.isArray(this.axes)?this.axes:[Xp(this.axes,t.length),Xp(this.axes,e.length)],n}computeOutputShape(t){v(Array.isArray(t)&&2===t.length&&Array.isArray(t[0])&&Array.isArray(t[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const e=t[0].slice(),n=t[1].slice();if(e.length>3||n.length>3)throw new Nu("Dot layer does not support tensors of 4D or higher rank yet.");const r=this.interpretAxes(e,n);e.splice(r[0],1),n.splice(r[1],1),n.splice(0,1);const s=e.concat(n);return 1===s.length&&s.push(1),s}computeMask(t,e){return null}getConfig(){const t={axes:this.axes,normalize:this.normalize},e=super.getConfig();return Object.assign(t,e),t}}Yp.className="Dot",Hs(Yp);class Jp extends wh{constructor(t){super(t),this.supportsMasking=!0,this.stddev=t.stddev}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={stddev:this.stddev};return Object.assign(e,t),e}call(t,e){return na(()=>{this.invokeCallHook(t,e);const n=uh(t);return _c(()=>Ic(n.shape,0,this.stddev).add(n),()=>n,e.training||!1)})}}Jp.className="GaussianNoise",Hs(Jp);class Zp extends wh{constructor(t){super(t),this.supportsMasking=!0,this.rate=t.rate}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={rate:this.rate};return Object.assign(e,t),e}call(t,e){return na(()=>{this.invokeCallHook(t,e);const n=uh(t);if(this.rate>0&&this.rate<1){return _c(()=>{const t=Math.sqrt(this.rate/(1-this.rate));return n.mul(Ic(n.shape,1,t))},()=>n,e.training||!1)}return n})}}Zp.className="GaussianDropout",Hs(Zp);class Qp extends wh{constructor(t){super(t),this.supportsMasking=!0,this.rate=t.rate,this.noiseShape=t.noiseShape}_getNoiseShape(t){return this.noiseShape||uh(t).shape}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={rate:this.rate};return Object.assign(e,t),e}call(t,e){return na(()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(t);return _c(()=>{const e=uh(t),r=-1.7580993408473766;let s=ui(ri(n),this.rate);s=bc(s,"float32");const a=((1-this.rate)*(1+this.rate*r**2))**-.5,i=-a*r*this.rate;return e.mul(s).add(s.add(-1).mul(r)).mul(a).add(i)},()=>uh(t),e.training||!1)}return t})}}function tf(t,e,n,r,s,a=.001){let i;if(2===t.rank)i=ma(t,e,n,r,s,a);else if(3===t.rank)i=ba(t,e,n,r,s,a);else{if(4!==t.rank)throw new Nu(`batchNormalization is not implemented for array of rank ${t.rank} yet`);i=va(t,e,n,r,s,a)}return i}function ef(t,e,n,r,s=.001){return I(r.slice().sort(),yc(0,t.rank-1))?function(t,e,n,r,s=.001){return na(()=>{const a=Me(t,r),i=a.mean,o=a.variance;return[tf(t,i,o,n,e,s),i,o]})}(t,e,n,r,s):function(t,e,n,r,s=.001){return na(()=>{const a=Me(t,r),i=a.mean,o=a.variance,l=[];for(const e of yc(0,t.rank))-1!==r.indexOf(e)?l.push(1):l.push(t.shape[e]);const u=i.reshape(l),c=o.reshape(l),h=null==e?null:e.reshape(l),d=null==n?null:n.reshape(l);return[tf(t,u,c,d,h,s),i,o]})}(t,e,n,r,s)}Qp.className="AlphaDropout",Hs(Qp);class nf extends wh{constructor(t){null==t&&(t={}),super(t),this.supportsMasking=!0,this.axis=null==t.axis?-1:t.axis,this.momentum=null==t.momentum?.99:t.momentum,this.epsilon=null==t.epsilon?.001:t.epsilon,this.center=null==t.center||t.center,this.scale=null==t.scale||t.scale,this.betaInitializer=eh(t.betaInitializer||"zeros"),this.gammaInitializer=eh(t.gammaInitializer||"ones"),this.movingMeanInitializer=eh(t.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=eh(t.movingVarianceInitializer||"ones"),this.betaConstraint=Ju(t.betaConstraint),this.gammaConstraint=Ju(t.gammaConstraint),this.betaRegularizer=lp(t.betaRegularizer),this.gammaRegularizer=lp(t.gammaRegularizer)}build(t){t=ch(t);const e=this.axis>=0?this.axis:this.axis+t.length,n=t[e];if(null==n)throw new Cu(`Axis ${e} of input tensor should have a defined dimension but the layer received an input with shape `+JSON.stringify(t)+".");this.inputSpec=[new mh({ndim:t.length,axes:{[e]:n}})];const r=[n];this.scale&&(this.gamma=this.addWeight("gamma",r,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",r,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",r,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",r,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(t,e){return na(()=>{const n=null!=e.training&&e.training,r=uh(t),s=r.shape,a=s.length,i=yc(0,a),o=this.axis>=0?this.axis:this.axis+a;i.splice(o,1);const l=ku(1,a);l[o]=s[o];const u=i.slice();u.sort();const c=!I(u,yc(0,a).slice(0,a-1));if(!n)return(()=>{if(c){const t=this.movingMean.read().reshape(l),e=this.movingVariance.read().reshape(l),n=this.center?this.beta.read().reshape(l):null,s=this.scale?this.gamma.read().reshape(l):null;return tf(r,t,e,n,s,this.epsilon)}return tf(r,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[h,d,p]=ef(r,this.gamma.read(),this.beta.read(),i,this.epsilon),f=(t,e,n)=>{na(()=>{const r=1-n,s=t.read(),a=s.sub(e).mul(r);t.write(s.sub(a))})};return(()=>{f(this.movingMean,d,this.momentum),f(this.movingVariance,p,this.momentum)})(),h})}getConfig(){const t={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:th(this.betaInitializer),gammaInitializer:th(this.gammaInitializer),movingMeanInitializer:th(this.movingMeanInitializer),movingVarianceInitializer:th(this.movingVarianceInitializer),betaRegularizer:ip(this.betaRegularizer),gammaRegularizer:ip(this.gammaRegularizer),betaConstraint:Xu(this.betaConstraint),gammaConstraint:Xu(this.gammaConstraint)},e=super.getConfig();return Object.assign(t,e),t}}nf.className="BatchNormalization",Hs(nf);class rf extends wh{constructor(t){if(null==t&&(t={}),super(t),this.axis=null==t.axis?-1:t.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error("Expected axis to be an integer, but received "+this.axis)}else{if(!Array.isArray(this.axis))throw new Error("Expected axis to be an integer or an array of integers, but received "+JSON.stringify(this.axis));for(const t of this.axis)if(!Number.isInteger(t))throw new Error("Expected axis to be an array of integers, but received "+JSON.stringify(this.axis))}this.epsilon=null==t.epsilon?.001:t.epsilon,this.center=null==t.center||t.center,this.scale=null==t.scale||t.scale,this.betaInitializer=eh(t.betaInitializer||"zeros"),this.gammaInitializer=eh(t.gammaInitializer||"ones"),this.betaRegularizer=lp(t.betaRegularizer),this.gammaRegularizer=lp(t.gammaRegularizer),this.supportsMasking=!0}build(t){const e=(t=ch(t)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let t=0;t<this.axis.length;++t)this.axis[t]<0&&(this.axis[t]+=e);for(const t of this.axis)if(t<0||t>=e)throw new Error("Invalid axis: "+t);if(this.axis.length!==Mu(this.axis).length)throw new Error("Found duplicate axes in: "+this.axis);const n=this.axis.map(e=>t[e]);this.scale?this.gamma=this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,!0):this.gamma=null,this.center?this.beta=this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,!0):this.beta=null,this.built=!0}call(t,e){const n=uh(t),r=n.shape,s=r.length;return na(()=>{let{mean:t,variance:e}=Me(n,this.axis,!0);const a=ku(1,s);for(const t of this.axis)a[t]=r[t];const i=t=>null!=t&&t.shape.length!==s&&this.axis!==[s-1]?t.reshape(a):t;let o=i(this.gamma.read()),l=i(this.beta.read());const u=[],c=[];for(let t=0;t<s;++t)-1!==this.axis.indexOf(t)?(u.push(r[t]),c.push(1)):(u.push(1),c.push(r[t]));return t=t.tile(u),e=e.tile(u),o=o.tile(c),l=l.tile(c),tf(n,t,e,l,o,this.epsilon)})}getConfig(){const t={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:th(this.betaInitializer),gammaInitializer:th(this.gammaInitializer),betaRegularizer:ip(this.betaRegularizer),gammaRegularizer:ip(this.gammaRegularizer)},e=super.getConfig();return Object.assign(t,e),t}}rf.className="LayerNormalization",Hs(rf);class sf extends wh{constructor(t){if(null==t&&(t={}),super(t),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,null==t.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof t.padding)this.padding=[[t.padding,t.padding],[t.padding,t.padding]];else{if(t.padding=t.padding,2!==t.padding.length)throw new Cu(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${t.padding.length} array.`);let e,n;if("number"==typeof t.padding[0])e=[t.padding[0],t.padding[0]],n=[t.padding[1],t.padding[1]];else{if(t.padding=t.padding,2!==t.padding[0].length)throw new Cu(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${t.padding[0].length} array.`);if(e=t.padding[0],2!==t.padding[1].length)throw new Cu(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${t.padding[1].length} array.`);n=t.padding[1]}this.padding=[e,n]}this.inputSpec=[new mh({ndim:4})]}computeOutputShape(t){let e,n;return t=ch(t),"channelsFirst"===this.dataFormat?(e=null!=t[2]&&t[2]>=0?t[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=t[3]&&t[3]>=0?t[3]+this.padding[1][0]+this.padding[1][1]:null,[t[0],t[1],e,n]):(e=null!=t[1]&&t[1]>=0?t[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=t[2]&&t[2]>=0?t[2]+this.padding[1][0]+this.padding[1][1]:null,[t[0],e,n,t[3]])}call(t,e){return na(()=>{return e=uh(t),n=this.padding,r=this.dataFormat,na(()=>{if(4!==e.rank)throw new Cu("temporalPadding expects input tensor to be 4-D, but received a "+e.rank+"-D tensor.");if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new Cu("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==r&&(r="channelsLast"),"channelsLast"!==r&&"channelsFirst"!==r)throw new Cu(`Unknown data format: ${r}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let t;return t="channelsFirst"===r?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],mr(e,t)});var e,n,r})}getConfig(){const t={padding:this.padding,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}function af(t,e,n,r,s,a){return na(()=>{let i;sc(s),ic(a),ac(r),null==n&&(n=[1,1]),null==r&&(r="valid"),null==s&&(s="channelsLast"),null==a&&(a="max"),t=bp(t,s);const o="same"===r?"same":"valid";return i="max"===a?oo(t,e,n,o):lo(t,e,n,o),"channelsFirst"===s&&(i=Rr(i,[0,3,1,2])),i})}function of(t,e,n,r,s,a){return na(()=>{let i;sc(s),ic(a),ac(r),null==n&&(n=[1,1,1]),null==r&&(r="valid"),null==s&&(s="channelsLast"),null==a&&(a="max"),t=xp(t,s);const o="same"===r?"same":"valid";return i="max"===a?co(t,e,n,o):ho(t,e,n,o),"channelsFirst"===s&&(i=Rr(i,[0,4,1,2,3])),i})}sf.className="ZeroPadding2D",Hs(sf);class lf extends wh{constructor(t){if(null==t.poolSize&&(t.poolSize=2),super(t),"number"==typeof t.poolSize)this.poolSize=[t.poolSize];else{if(!Array.isArray(t.poolSize)||1!==t.poolSize.length||"number"!=typeof t.poolSize[0])throw new Cu("poolSize for 1D convolutional layer must be a number or an Array of a single number, but received "+JSON.stringify(t.poolSize));this.poolSize=t.poolSize}if(Pu(this.poolSize,"poolSize"),null==t.strides)this.strides=this.poolSize;else if("number"==typeof t.strides)this.strides=[t.strides];else{if(!Array.isArray(t.strides)||1!==t.strides.length||"number"!=typeof t.strides[0])throw new Cu("strides for 1D convolutional layer must be a number or an Array of a single number, but received "+JSON.stringify(t.strides));this.strides=t.strides}Pu(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,ac(this.padding),this.inputSpec=[new mh({ndim:3})]}computeOutputShape(t){const e=gp((t=ch(t))[1],this.poolSize[0],this.padding,this.strides[0]);return[t[0],e,t[2]]}call(t,e){return na(()=>{this.invokeCallHook(t,e),t=xc(uh(t),2);const n=this.poolingFunction(uh(t),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return tn(n,[2])})}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides},e=super.getConfig();return Object.assign(t,e),t}}class uf extends lf{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return sc(s),ac(r),af(t,e,n,r,s,"max")}}uf.className="MaxPooling1D",Hs(uf);class cf extends lf{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return sc(s),ac(r),af(t,e,n,r,s,"avg")}}cf.className="AveragePooling1D",Hs(cf);class hf extends wh{constructor(t){if(null==t.poolSize&&(t.poolSize=[2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize],null==t.strides)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(2!==t.strides.length)throw new Cu("If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length "+t.strides.length+".");this.strides=t.strides}else this.strides=[t.strides,t.strides];Pu(this.poolSize,"poolSize"),Pu(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,sc(this.dataFormat),ac(this.padding),this.inputSpec=[new mh({ndim:4})]}computeOutputShape(t){t=ch(t);let e="channelsFirst"===this.dataFormat?t[2]:t[1],n="channelsFirst"===this.dataFormat?t[3]:t[2];return e=gp(e,this.poolSize[0],this.padding,this.strides[0]),n=gp(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,n]:[t[0],e,n,t[3]]}call(t,e){return na(()=>(this.invokeCallHook(t,e),this.poolingFunction(uh(t),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}class df extends hf{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return sc(s),ac(r),af(t,e,n,r,s,"max")}}df.className="MaxPooling2D",Hs(df);class pf extends hf{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return sc(s),ac(r),af(t,e,n,r,s,"avg")}}pf.className="AveragePooling2D",Hs(pf);class ff extends wh{constructor(t){if(null==t.poolSize&&(t.poolSize=[2,2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize,t.poolSize],null==t.strides)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(3!==t.strides.length)throw new Cu("If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length "+t.strides.length+".");this.strides=t.strides}else this.strides=[t.strides,t.strides,t.strides];Pu(this.poolSize,"poolSize"),Pu(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,sc(this.dataFormat),ac(this.padding),this.inputSpec=[new mh({ndim:5})]}computeOutputShape(t){t=ch(t);let e="channelsFirst"===this.dataFormat?t[2]:t[1],n="channelsFirst"===this.dataFormat?t[3]:t[2],r="channelsFirst"===this.dataFormat?t[4]:t[3];return e=gp(e,this.poolSize[0],this.padding,this.strides[0]),n=gp(n,this.poolSize[1],this.padding,this.strides[1]),r=gp(r,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,n,r]:[t[0],e,n,r,t[4]]}call(t,e){return na(()=>(this.invokeCallHook(t,e),this.poolingFunction(uh(t),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}class mf extends ff{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return sc(s),ac(r),of(t,e,n,r,s,"max")}}mf.className="MaxPooling3D",Hs(mf);class gf extends ff{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return sc(s),ac(r),of(t,e,n,r,s,"avg")}}gf.className="AveragePooling3D",Hs(gf);class yf extends wh{constructor(t){super(t),this.inputSpec=[new mh({ndim:3})]}computeOutputShape(t){return[t[0],t[2]]}call(t,e){throw new Nu}}class bf extends yf{constructor(t){super(t||{})}call(t,e){return na(()=>{const e=uh(t);return Oe(e,1)})}}bf.className="GlobalAveragePooling1D",Hs(bf);class xf extends yf{constructor(t){super(t||{})}call(t,e){return na(()=>{const e=uh(t);return _e(e,1)})}}xf.className="GlobalMaxPooling1D",Hs(xf);class wf extends wh{constructor(t){super(t),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,sc(this.dataFormat),this.inputSpec=[new mh({ndim:4})]}computeOutputShape(t){return t=t,"channelsLast"===this.dataFormat?[t[0],t[3]]:[t[0],t[1]]}call(t,e){throw new Nu}getConfig(){const t={dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}class vf extends wf{call(t,e){return na(()=>{const e=uh(t);return"channelsLast"===this.dataFormat?Oe(e,[1,2]):Oe(e,[2,3])})}}vf.className="GlobalAveragePooling2D",Hs(vf);class Cf extends wf{call(t,e){return na(()=>{const e=uh(t);return"channelsLast"===this.dataFormat?_e(e,[1,2]):_e(e,[2,3])})}}function Nf(t,e,n,r){if(Array.isArray(t)){if(null!=e||null!=n)throw new Cu("When inputs is an array, neither initialState or constants should be provided");null!=r&&(n=t.slice(t.length-r,t.length),t=t.slice(0,t.length-r)),t.length>1&&(e=t.slice(1,t.length)),t=t[0]}function s(t){return null==t||Array.isArray(t)?t:[t]}return{inputs:t,initialState:e=s(e),constants:n=s(n)}}function Sf(t,e,n,r=!1,s,a,i=!1,o=!1){return na(()=>{const l=e.shape.length;if(l<3)throw new Cu(`Input should be at least 3D, but is ${l}D.`);const u=[1,0].concat(yc(2,l));if(e=Rr(e,u),null!=a)throw new Nu("The rnn() functoin of the deeplearn.js backend does not support constants yet.");i&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=s&&((s=s.asType("bool").asType("float32")).rank===l-1&&(s=Je(s,-1)),s=Rr(s,u)),r&&(e=to(e,0),null!=s&&(s=to(s,0)));const c=[];let h,d=n;const p=e.shape[0],f=nn(e);let m,g;null!=s&&(m=nn(s));for(let e=0;e<p;++e){const n=f[e],r=na(()=>t(n,d));if(null==s)h=r[0],d=r[1];else{const t=na(()=>{const t=m[e],n=ke(t).sub(t);return{output:r[0].mul(t).addStrict(d[0].mul(n)),newStates:d.map((e,s)=>r[1][s].mul(t).addStrict(e.mul(n)))}});h=t.output,d=t.newStates}o&&c.push(h)}if(o){g=en(c,1)}return[h,g,d]})}Cf.className="GlobalMaxPooling2D",Hs(Cf);class kf extends wh{constructor(t){let e;if(super(t),null==t.cell)throw new Cu("cell property is missing for the constructor of RNN.");if(e=Array.isArray(t.cell)?new _f({cells:t.cell}):t.cell,null==e.stateSize)throw new Cu("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=e,this.returnSequences=null!=t.returnSequences&&t.returnSequences,this.returnState=null!=t.returnState&&t.returnState,this.goBackwards=null!=t.goBackwards&&t.goBackwards,this._stateful=null!=t.stateful&&t.stateful,this.unroll=null!=t.unroll&&t.unroll,this.supportsMasking=!0,this.inputSpec=[new mh({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){if(null==this.states_){return yc(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map(t=>null)}return this.states_}setStates(t){this.states_=t}computeOutputShape(t){oh(t)&&(t=t[0]),t=t;let e=this.cell.stateSize;Array.isArray(e)||(e=[e]);const n=e[0];let r;if(r=this.returnSequences?[t[0],t[1],n]:[t[0],n],this.returnState){const n=[];for(const r of e)n.push([t[0],r]);return[r].concat(n)}return r}computeMask(t,e){return na(()=>{Array.isArray(e)&&(e=e[0]);const t=this.returnSequences?e:null;if(this.returnState){const e=this.states.map(t=>null);return[t].concat(e)}return t})}get states(){if(null==this.states_){const t=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,e=[];for(let n=0;n<t;++n)e.push(null);return e}return this.states_}set states(t){this.states_=t}build(t){if(null!=this.numConstants)throw new Nu("Constants support is not implemented in RNN yet.");oh(t)&&(t=t[0]),t=t;const e=this.stateful?t[0]:null,n=t[t.length-1];this.inputSpec[0]=new mh({shape:[e,null,n]});const r=[t[0]].concat(t.slice(2));let s;if(this.cell.build(r),s=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!I(this.stateSpec.map(t=>t.shape[t.shape.length-1]),s))throw new Cu(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is `+this.cell.stateSize)}else this.stateSpec=s.map(t=>new mh({shape:[null,t]}));this.stateful&&this.resetStates()}resetStates(t,e=!1){na(()=>{if(!this.stateful)throw new wu("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new Cu("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(t=>ve([n,t])):this.states_=[ve([n,this.cell.stateSize])];else if(null==t)ra(this.states_),null!=this.keptStates&&(ra(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(t=>ve([n,t])):this.states_[0]=ve([n,this.cell.stateSize]);else{if(Array.isArray(t)||(t=[t]),t.length!==this.states_.length)throw new Cu(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: `+t);!0===e?this.keptStates.push(this.states_.slice()):ra(this.states_);for(let e=0;e<this.states_.length;++e){const r=t[e],s=Array.isArray(this.cell.stateSize)?this.cell.stateSize[e]:this.cell.stateSize,a=[n,s];if(!I(r.shape,a))throw new Cu(`State ${e} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${r.shape}`);this.states_[e]=r}}this.states_=this.states_.map(t=>sa(t.clone()))})}apply(t,e){let n=null==e?null:e.initialState,r=null==e?null:e.constants;null==e&&(e={});const s=Nf(t,n,r,this.numConstants);t=s.inputs,n=s.initialState,r=s.constants;let a=[],i=[];if(null!=n){e.initialState=n,a=a.concat(n),this.stateSpec=[];for(const t of n)this.stateSpec.push(new mh({shape:t.shape}));i=i.concat(this.stateSpec)}if(null!=r&&(e.constants=r,a=a.concat(r),this.numConstants=r.length),a[0]instanceof gh){const n=[t].concat(a),r=this.inputSpec.concat(i),s=this.inputSpec;this.inputSpec=r;const o=super.apply(n,e);return this.inputSpec=s,o}return super.apply(t,e)}call(t,e){return na(()=>{const n=null==e?null:e.mask,r=null==e?null:e.training;let s=null==e?null:e.initialState;t=uh(t),null==s&&(s=this.stateful?this.states_:this.getInitialState(t));const a=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(s.length!==a)throw new Cu(`RNN Layer has ${a} state(s) but was passed `+s.length+" initial state(s).");this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const i={training:r},o=Sf((t,e)=>{const n=this.cell.call([t].concat(e),i);return[n[0],n.slice(1)]},t,s,this.goBackwards,n,null,this.unroll,this.returnSequences),l=o[0],u=o[1],c=o[2];this.stateful&&this.resetStates(c,r);const h=this.returnSequences?u:l;return this.returnState?[h].concat(c):h})}getInitialState(t){return na(()=>{let e=ve(t.shape);return e=ze(e,[1,2]),e=xc(e),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(t=>t>1?kc(e,[1,t]):e):this.cell.stateSize>1?[kc(e,[1,this.cell.stateSize])]:[e]})}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(t)}getConfig(){const t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);const e=this.cell.getConfig();t.cell={className:this.cell.getClassName(),config:e};const n=super.getConfig();return Object.assign(t,n),t}static fromConfig(t,e,n={}){const r=Oh(e.cell,n);return new t(Object.assign(e,{cell:r}))}}kf.className="RNN",Hs(kf);class If extends wh{}class Ef extends If{constructor(t){super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=t.units,Pu(this.units,"units"),this.activation=ep(null==t.activation?this.DEFAULT_ACTIVATION:t.activation),this.useBias=null==t.useBias||t.useBias,this.kernelInitializer=eh(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=eh(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=eh(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=lp(t.kernelRegularizer),this.recurrentRegularizer=lp(t.recurrentRegularizer),this.biasRegularizer=lp(t.biasRegularizer),this.kernelConstraint=Ju(t.kernelConstraint),this.recurrentConstraint=Ju(t.recurrentConstraint),this.biasConstraint=Ju(t.biasConstraint),this.dropout=mc([1,gc([0,null==t.dropout?0:t.dropout])]),this.recurrentDropout=mc([1,gc([0,null==t.recurrentDropout?0:t.recurrentDropout])]),this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){t=ch(t),this.kernel=this.addWeight("kernel",[t[t.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return na(()=>{if(2!==(t=t).length)throw new Cu(`SimpleRNNCell expects 2 input Tensors, got ${t.length}.`);let n=t[1];t=t[0];const r=null!=e.training&&e.training;let s;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Of(()=>ke(t),this.dropout,r)),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Of(()=>ke(n),this.recurrentDropout,r));const a=this.dropoutMask,i=this.recurrentDropoutMask;s=Ec(null!=a?Yn(t,a):t,this.kernel.read()),null!=this.bias&&(s=Tc(s,this.bias.read())),null!=i&&(n=Yn(n,i));let o=sn(s,Ec(n,this.recurrentKernel.read()));return null!=this.activation&&(o=this.activation.apply(o)),[o,o]})}getConfig(){const t={units:this.units,activation:Qd(this.activation),useBias:this.useBias,kernelInitializer:th(this.kernelInitializer),recurrentInitializer:th(this.recurrentInitializer),biasInitializer:th(this.biasInitializer),kernelRegularizer:ip(this.kernelRegularizer),recurrentRegularizer:ip(this.recurrentRegularizer),biasRegularizer:ip(this.biasRegularizer),activityRegularizer:ip(this.activityRegularizer),kernelConstraint:Xu(this.kernelConstraint),recurrentConstraint:Xu(this.recurrentConstraint),biasConstraint:Xu(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout},e=super.getConfig();return Object.assign(t,e),t}}Ef.className="SimpleRNNCell",Hs(Ef);class $f extends kf{constructor(t){t.cell=new Ef(t),super(t)}call(t,e){return na(()=>{null!=this.cell.dropoutMask&&(ra(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(ra(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==e?null:e.mask,r=null==e?null:e.training,s=null==e?null:e.initialState;return super.call(t,{mask:n,training:r,initialState:s})})}get units(){return this.cell.units}get activation(){return this.cell.activation}get useBias(){return this.cell.useBias}get kernelInitializer(){return this.cell.kernelInitializer}get recurrentInitializer(){return this.cell.recurrentInitializer}get biasInitializer(){return this.cell.biasInitializer}get kernelRegularizer(){return this.cell.kernelRegularizer}get recurrentRegularizer(){return this.cell.recurrentRegularizer}get biasRegularizer(){return this.cell.biasRegularizer}get kernelConstraint(){return this.cell.kernelConstraint}get recurrentConstraint(){return this.cell.recurrentConstraint}get biasConstraint(){return this.cell.biasConstraint}get dropout(){return this.cell.dropout}get recurrentDropout(){return this.cell.recurrentDropout}getConfig(){const t={units:this.units,activation:Qd(this.activation),useBias:this.useBias,kernelInitializer:th(this.kernelInitializer),recurrentInitializer:th(this.recurrentInitializer),biasInitializer:th(this.biasInitializer),kernelRegularizer:ip(this.kernelRegularizer),recurrentRegularizer:ip(this.recurrentRegularizer),biasRegularizer:ip(this.biasRegularizer),activityRegularizer:ip(this.activityRegularizer),kernelConstraint:Xu(this.kernelConstraint),recurrentConstraint:Xu(this.recurrentConstraint),biasConstraint:Xu(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout},e=super.getConfig();return delete e.cell,Object.assign(t,e),t}static fromConfig(t,e){return new t(e)}}$f.className="SimpleRNN",Hs($f);class Af extends If{constructor(t){super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=t.units,Pu(this.units,"units"),this.activation=ep(void 0===t.activation?this.DEFAULT_ACTIVATION:t.activation),this.recurrentActivation=ep(void 0===t.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:t.recurrentActivation),this.useBias=null==t.useBias||t.useBias,this.kernelInitializer=eh(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=eh(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=eh(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=lp(t.kernelRegularizer),this.recurrentRegularizer=lp(t.recurrentRegularizer),this.biasRegularizer=lp(t.biasRegularizer),this.kernelConstraint=Ju(t.kernelConstraint),this.recurrentConstraint=Ju(t.recurrentConstraint),this.biasConstraint=Ju(t.biasConstraint),this.dropout=mc([1,gc([0,null==t.dropout?0:t.dropout])]),this.recurrentDropout=mc([1,gc([0,null==t.recurrentDropout?0:t.recurrentDropout])]),this.implementation=t.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){const e=(t=ch(t))[t.length-1];this.kernel=this.addWeight("kernel",[e,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return na(()=>{if(2!==(t=t).length)throw new Cu("GRUCell expects 2 input Tensors (inputs, h, c), got "+t.length+".");const n=null!=e.training&&e.training;let r=t[1];t=t[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Of(()=>ke(t),this.dropout,n,3)),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Of(()=>ke(r),this.recurrentDropout,n,3));const s=this.dropoutMask,a=this.recurrentDropoutMask;let i,o,l;0<this.dropout&&this.dropout<1&&(t=Yn(t,s[0]));let u=Ec(t,this.kernel.read());this.useBias&&(u=Tc(u,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(r=Yn(r,a[0]));const c=this.recurrentKernel.read(),[h,d]=Pe(c,[2*this.units,this.units],c.rank-1),p=Ec(r,h),[f,m,g]=Pe(u,3,u.rank-1),[y,b]=Pe(p,2,p.rank-1);i=this.recurrentActivation.apply(sn(f,y)),o=this.recurrentActivation.apply(sn(m,b));const x=Ec(Yn(o,r),d);l=this.activation.apply(sn(g,x));const w=sn(Yn(i,r),Yn(sn(1,Sn(i)),l));return[w,w]})}getConfig(){const t={units:this.units,activation:Qd(this.activation),recurrentActivation:Qd(this.recurrentActivation),useBias:this.useBias,kernelInitializer:th(this.kernelInitializer),recurrentInitializer:th(this.recurrentInitializer),biasInitializer:th(this.biasInitializer),kernelRegularizer:ip(this.kernelRegularizer),recurrentRegularizer:ip(this.recurrentRegularizer),biasRegularizer:ip(this.biasRegularizer),activityRegularizer:ip(this.activityRegularizer),kernelConstraint:Xu(this.kernelConstraint),recurrentConstraint:Xu(this.recurrentConstraint),biasConstraint:Xu(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation},e=super.getConfig();return Object.assign(t,e),t}}Af.className="GRUCell",Hs(Af);class Rf extends kf{constructor(t){0===t.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),t.cell=new Af(t),super(t)}call(t,e){return na(()=>{null!=this.cell.dropoutMask&&(ra(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(ra(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==e?null:e.mask,r=null==e?null:e.training,s=null==e?null:e.initialState;return super.call(t,{mask:n,training:r,initialState:s})})}get units(){return this.cell.units}get activation(){return this.cell.activation}get recurrentActivation(){return this.cell.recurrentActivation}get useBias(){return this.cell.useBias}get kernelInitializer(){return this.cell.kernelInitializer}get recurrentInitializer(){return this.cell.recurrentInitializer}get biasInitializer(){return this.cell.biasInitializer}get kernelRegularizer(){return this.cell.kernelRegularizer}get recurrentRegularizer(){return this.cell.recurrentRegularizer}get biasRegularizer(){return this.cell.biasRegularizer}get kernelConstraint(){return this.cell.kernelConstraint}get recurrentConstraint(){return this.cell.recurrentConstraint}get biasConstraint(){return this.cell.biasConstraint}get dropout(){return this.cell.dropout}get recurrentDropout(){return this.cell.recurrentDropout}get implementation(){return this.cell.implementation}getConfig(){const t={units:this.units,activation:Qd(this.activation),recurrentActivation:Qd(this.recurrentActivation),useBias:this.useBias,kernelInitializer:th(this.kernelInitializer),recurrentInitializer:th(this.recurrentInitializer),biasInitializer:th(this.biasInitializer),kernelRegularizer:ip(this.kernelRegularizer),recurrentRegularizer:ip(this.recurrentRegularizer),biasRegularizer:ip(this.biasRegularizer),activityRegularizer:ip(this.activityRegularizer),kernelConstraint:Xu(this.kernelConstraint),recurrentConstraint:Xu(this.recurrentConstraint),biasConstraint:Xu(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation},e=super.getConfig();return delete e.cell,Object.assign(t,e),t}static fromConfig(t,e){return 0===e.implmentation&&(e.implementation=1),new t(e)}}Rf.className="GRU",Hs(Rf);class Tf extends If{constructor(t){super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=t.units,Pu(this.units,"units"),this.activation=ep(void 0===t.activation?this.DEFAULT_ACTIVATION:t.activation),this.recurrentActivation=ep(void 0===t.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:t.recurrentActivation),this.useBias=null==t.useBias||t.useBias,this.kernelInitializer=eh(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=eh(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=eh(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=t.unitForgetBias,this.kernelRegularizer=lp(t.kernelRegularizer),this.recurrentRegularizer=lp(t.recurrentRegularizer),this.biasRegularizer=lp(t.biasRegularizer),this.kernelConstraint=Ju(t.kernelConstraint),this.recurrentConstraint=Ju(t.recurrentConstraint),this.biasConstraint=Ju(t.biasConstraint),this.dropout=mc([1,gc([0,null==t.dropout?0:t.dropout])]),this.recurrentDropout=mc([1,gc([0,null==t.recurrentDropout?0:t.recurrentDropout])]),this.implementation=t.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){var e;const n=(t=ch(t))[t.length-1];let r;if(this.kernel=this.addWeight("kernel",[n,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const t=this.biasInitializer,n=this.units;r=new((e=class extends Mc{apply(e,r){const s=t.apply([n]),a=(new Lc).apply([n]),i=t.apply([2*n]);return Sc(Sc(s,a),i)}}).className="CustomInit",e)}else r=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,r,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(t,e){return na(()=>{const n=null!=e.training&&e.training;if(3!==(t=t).length)throw new Cu("LSTMCell expects 3 input Tensors (inputs, h, c), got "+t.length+".");let r=t[1];const s=t[2];t=t[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Of(()=>ke(t),this.dropout,n,4)),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Of(()=>ke(r),this.recurrentDropout,n,4));const a=this.dropoutMask,i=this.recurrentDropoutMask;let o,l,u,c;0<this.dropout&&this.dropout<1&&(t=Yn(t,a[0]));let h=Ec(t,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(r=Yn(r,i[0])),h=sn(h,Ec(r,this.recurrentKernel.read())),this.useBias&&(h=Tc(h,this.bias.read()));const[d,p,f,m]=Pe(h,4,h.rank-1);o=this.recurrentActivation.apply(d),l=this.recurrentActivation.apply(p),u=sn(Yn(l,s),Yn(o,this.activation.apply(f))),c=this.recurrentActivation.apply(m);const g=Yn(c,this.activation.apply(u));return[g,g,u]})}getConfig(){const t={units:this.units,activation:Qd(this.activation),recurrentActivation:Qd(this.recurrentActivation),useBias:this.useBias,kernelInitializer:th(this.kernelInitializer),recurrentInitializer:th(this.recurrentInitializer),biasInitializer:th(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:ip(this.kernelRegularizer),recurrentRegularizer:ip(this.recurrentRegularizer),biasRegularizer:ip(this.biasRegularizer),activityRegularizer:ip(this.activityRegularizer),kernelConstraint:Xu(this.kernelConstraint),recurrentConstraint:Xu(this.recurrentConstraint),biasConstraint:Xu(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation},e=super.getConfig();return Object.assign(t,e),t}}Tf.className="LSTMCell",Hs(Tf);class Df extends kf{constructor(t){0===t.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),t.cell=new Tf(t),super(t)}call(t,e){return na(()=>{null!=this.cell.dropoutMask&&(ra(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(ra(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==e?null:e.mask,r=null==e?null:e.training,s=null==e?null:e.initialState;return super.call(t,{mask:n,training:r,initialState:s})})}get units(){return this.cell.units}get activation(){return this.cell.activation}get recurrentActivation(){return this.cell.recurrentActivation}get useBias(){return this.cell.useBias}get kernelInitializer(){return this.cell.kernelInitializer}get recurrentInitializer(){return this.cell.recurrentInitializer}get biasInitializer(){return this.cell.biasInitializer}get unitForgetBias(){return this.cell.unitForgetBias}get kernelRegularizer(){return this.cell.kernelRegularizer}get recurrentRegularizer(){return this.cell.recurrentRegularizer}get biasRegularizer(){return this.cell.biasRegularizer}get kernelConstraint(){return this.cell.kernelConstraint}get recurrentConstraint(){return this.cell.recurrentConstraint}get biasConstraint(){return this.cell.biasConstraint}get dropout(){return this.cell.dropout}get recurrentDropout(){return this.cell.recurrentDropout}get implementation(){return this.cell.implementation}getConfig(){const t={units:this.units,activation:Qd(this.activation),recurrentActivation:Qd(this.recurrentActivation),useBias:this.useBias,kernelInitializer:th(this.kernelInitializer),recurrentInitializer:th(this.recurrentInitializer),biasInitializer:th(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:ip(this.kernelRegularizer),recurrentRegularizer:ip(this.recurrentRegularizer),biasRegularizer:ip(this.biasRegularizer),activityRegularizer:ip(this.activityRegularizer),kernelConstraint:Xu(this.kernelConstraint),recurrentConstraint:Xu(this.recurrentConstraint),biasConstraint:Xu(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation},e=super.getConfig();return delete e.cell,Object.assign(t,e),t}static fromConfig(t,e){return 0===e.implmentation&&(e.implementation=1),new t(e)}}Df.className="LSTM",Hs(Df);class _f extends If{constructor(t){super(t),this.cells=t.cells}get stateSize(){const t=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?t.push(...e.stateSize):t.push(e.stateSize);return t}call(t,e){return na(()=>{let n=(t=t).slice(1);const r=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?r.push(n.splice(0,t.stateSize.length)):r.push(n.splice(0,1));r.reverse();const s=[];let a;for(let i=0;i<this.cells.length;++i){const o=this.cells[i];n=r[i],a=0===i?[t[0]].concat(n):[a[0]].concat(n),a=o.call(a,e),s.push(a.slice(1))}n=[];for(const t of s.slice().reverse())n.push(...t);return[a[0]].concat(n)})}build(t){let e;oh(t)&&(t=t[0]),t=t,this.cells.forEach((n,r)=>{lc("RNNCell_"+r,()=>{n.build(t),e=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,t=[t[0],e]})}),this.built=!0}getConfig(){const t=[];for(const e of this.cells)t.push({className:e.getClassName(),config:e.getConfig()});const e={cells:t},n=super.getConfig();return Object.assign(e,n),e}static fromConfig(t,e,n={}){const r=[];for(const t of e.cells)r.push(Oh(t,n));return new t({cells:r})}get trainableWeights(){if(!this.trainable)return[];const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t}get nonTrainableWeights(){const t=[];for(const e of this.cells)t.push(...e.nonTrainableWeights);if(!this.trainable){const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e.concat(t)}return t}getWeights(){const t=[];for(const e of this.cells)t.push(...e.weights);return ph(t)}setWeights(t){const e=[];for(const n of this.cells){const r=n.weights.length,s=t.splice(r);for(let t=0;t<n.weights.length;++t)e.push([n.weights[t],s[t]])}fh(e)}}function Of(t,e,n=null,r=1){function s(){return Dc(t(),e)}if(r>1){const e=[];for(let a=0;a<r;a++)e.push(_c(s,t,n));return e.map(t=>sa(t.clone()))}return sa(_c(s,t,n).clone())}_f.className="StackedRNNCells",Hs(_f);class Ff extends wh{constructor(t){super(t),this.layer=t.layer}build(t){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(t){null!=this.layer&&(this.layer.trainable=t)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(t){this.layer.setWeights(t)}getConfig(){const t={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},e=super.getConfig();return Object.assign(t,e),t}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(t)}static fromConfig(t,e,n={}){const r=Oh(e.layer,n);delete e.layer;const s={layer:r};return Object.assign(s,e),new t(s)}}class Mf extends Ff{constructor(t){super(t),this.supportsMasking=!0}build(t){if((t=ch(t)).length<3)throw new Cu("TimeDistributed layer expects an input shape >= 3D, but received input shape "+JSON.stringify(t));this.inputSpec=[{shape:t}];const e=[t[0]].concat(t.slice(2));this.layer.built||(this.layer.build(e),this.layer.built=!0),super.build(t)}computeOutputShape(t){const e=[(t=ch(t))[0]].concat(t.slice(2)),n=this.layer.computeOutputShape(e),r=t[1];return[n[0],r].concat(n.slice(1))}call(t,e){return na(()=>Sf((t,n)=>[uh(this.layer.call(t,e)),[]],t=uh(t),[],!1,null,null,!1,!0)[1])}}Mf.className="TimeDistributed",Hs(Mf);class zf extends Ff{constructor(t){super(t);const e=t.layer.getConfig(),n={};n.className=t.layer.getClassName(),n.config=e,this.forwardLayer=Oh(n),e.goBackwards=!0!==e.goBackwards;const r={};var s;if(r.className=t.layer.getClassName(),r.config=e,this.backwardLayer=Oh(r),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===t.mergeMode?"concat":t.mergeMode,s=this.mergeMode,Lu(nc,"BidirectionalMergeMode",s),t.weights)throw new Nu("weights support is not implemented for Bidirectional layer yet.");this._stateful=t.layer.stateful,this.returnSequences=t.layer.returnSequences,this.returnState=t.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=t.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(t){this._trainable=t,null!=this.forwardLayer&&(this.forwardLayer.trainable=t),null!=this.backwardLayer&&(this.backwardLayer.trainable=t)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(t){const e=t.length,n=Math.floor(e/2);this.forwardLayer.setWeights(t.slice(0,n)),this.backwardLayer.setWeights(t.slice(n))}computeOutputShape(t){let e,n,r,s=this.forwardLayer.computeOutputShape(t);return Array.isArray(s)&&Array.isArray(s[0])||(s=[s]),s=s,this.returnState?(r=s.slice(1),e=s[0]):e=s[0],e=e,"concat"===this.mergeMode?(e[e.length-1]*=2,n=[e]):n=null==this.mergeMode?[e,e.slice()]:[e],this.returnState?null==this.mergeMode?n.concat(r).concat(r.slice()):[e].concat(r).concat(r.slice()):$u(n)}apply(t,e){let n=null==e?null:e.initialState,r=null==e?null:e.constants;null==e&&(e={});const s=Nf(t,n,r,this.numConstants);if(t=s.inputs,n=s.initialState,r=s.constants,Array.isArray(t)&&(n=t.slice(1),t=t[0]),(null==n||0===n.length)&&null==r)return super.apply(t,e);const a=[],i=[];if(null!=n){const t=n.length;if(t%2>0)throw new Cu("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");e.initialState=n,a.push(...n);const r=n.map(t=>new mh({shape:t.shape}));this.forwardLayer.stateSpec=r.slice(0,t/2),this.backwardLayer.stateSpec=r.slice(t/2),i.push(...r)}if(null!=r)throw new Nu("Support for constants in Bidirectional layers is not implemented yet.");const o=a[0]instanceof gh;for(const t of a)if(t instanceof gh!==o)throw new Cu("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(o){const n=[t].concat(a),r=this.inputSpec.concat(i),s=this.inputSpec;this.inputSpec=r;const o=super.apply(n,e);return this.inputSpec=s,o}return super.apply(t,e)}call(t,e){return na(()=>{const n=e.initialState;let r,s,a,i;if(null==n)r=this.forwardLayer.call(t,e),s=this.backwardLayer.call(t,e);else{const a=n.slice(0,n.length/2),i=n.slice(n.length/2);r=this.forwardLayer.call(t,Object.assign(e,{initialState:a})),s=this.backwardLayer.call(t,Object.assign(e,{initialState:i}))}return this.returnState&&(Array.isArray(r)&&(a=r.slice(1).concat(s.slice(1))),r=r[0],s=s[0]),this.returnSequences&&(s=to(s,1)),"concat"===this.mergeMode?i=Nc([r,s]):"sum"===this.mergeMode?i=sn(r,s):"ave"===this.mergeMode?i=Yn(.5,sn(r,s)):"mul"===this.mergeMode?i=Yn(r,s):null==this.mergeMode&&(i=[r,s]),this.returnState?null==this.mergeMode?i.concat(a):[i].concat(a):i})}resetStates(t){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(t){lc(this.forwardLayer.name,()=>{this.forwardLayer.build(t)}),lc(this.backwardLayer.name,()=>{this.backwardLayer.build(t)}),this.built=!0}computeMask(t,e){let n;if(Array.isArray(e)&&(e=e[0]),n=this.returnSequences?null==this.mergeMode?[e,e]:e:null==this.mergeMode?[null,null]:null,this.returnState){const t=this.forwardLayer.states.map(t=>null);return Array.isArray(n)?n.concat(t).concat(t):[n].concat(t).concat(t)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(t),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(t)}getConfig(){const t={mergeMode:this.mergeMode},e=super.getConfig();return Object.assign(t,e),t}static fromConfig(t,e){const n=Oh(e.layer);if(delete e.layer,null!=e.numConstants)throw new Nu("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const r=e;return r.layer=n,new t(r)}}function Lf(t){return new cf(t)}function Bf(t){return new pf(t)}function Pf(t){return new gf(t)}function Wf(t){return new xf(t)}function Vf(t){return new Cf(t)}function Uf(t){return new uf(t)}function Gf(t){return new df(t)}zf.className="Bidirectional",Hs(zf);const jf=Wf,qf=Vf,Hf=Uf,Kf=Gf;var Xf=Object.freeze({__proto__:null,inputLayer:function(t){return new vh(t)},elu:function(t){return new dp(t)},reLU:function(t){return new up(t)},leakyReLU:function(t){return new cp(t)},prelu:function(t){return new hp(t)},softmax:function(t){return new fp(t)},thresholdedReLU:function(t){return new pp(t)},conv1d:function(t){return new $p(t)},conv2d:function(t){return new Np(t)},conv2dTranspose:function(t){return new kp(t)},conv3d:function(t){return new Sp(t)},separableConv2d:function(t){return new Ep(t)},cropping2D:function(t){return new Ap(t)},upSampling2d:function(t){return new Rp(t)},depthwiseConv2d:function(t){return new Tp(t)},activation:function(t){return new Mp(t)},dense:function(t){return new Op(t)},dropout:function(t){return new Dp(t)},spatialDropout1d:function(t){return new _p(t)},flatten:function(t){return new Fp(t)},repeatVector:function(t){return new zp(t)},reshape:function(t){return new Lp(t)},permute:function(t){return new Bp(t)},embedding:function(t){return new Wp(t)},add:function(t){return new Up(t)},average:function(t){return new jp(t)},concatenate:function(t){return new Kp(t)},maximum:function(t){return new qp(t)},minimum:function(t){return new Hp(t)},multiply:function(t){return new Gp(t)},dot:function(t){return new Yp(t)},batchNormalization:function(t){return new nf(t)},layerNormalization:function(t){return new rf(t)},zeroPadding2d:function(t){return new sf(t)},averagePooling1d:Lf,avgPool1d:function(t){return Lf(t)},avgPooling1d:function(t){return Lf(t)},averagePooling2d:Bf,avgPool2d:function(t){return Bf(t)},avgPooling2d:function(t){return Bf(t)},averagePooling3d:Pf,avgPool3d:function(t){return Pf(t)},avgPooling3d:function(t){return Pf(t)},globalAveragePooling1d:function(t){return new bf(t)},globalAveragePooling2d:function(t){return new vf(t)},globalMaxPooling1d:Wf,globalMaxPooling2d:Vf,maxPooling1d:Uf,maxPooling2d:Gf,maxPooling3d:function(t){return new mf(t)},gru:function(t){return new Rf(t)},gruCell:function(t){return new Af(t)},lstm:function(t){return new Df(t)},lstmCell:function(t){return new Tf(t)},simpleRNN:function(t){return new $f(t)},simpleRNNCell:function(t){return new Ef(t)},rnn:function(t){return new kf(t)},stackedRNNCells:function(t){return new _f(t)},bidirectional:function(t){return new zf(t)},timeDistributed:function(t){return new Mf(t)},globalMaxPool1d:jf,globalMaxPool2d:qf,maxPool1d:Hf,maxPool2d:Kf,Layer:wh,RNN:kf,RNNCell:If,input:Bd,gaussianNoise:function(t){return new Jp(t)},gaussianDropout:function(t){return new Zp(t)},alphaDropout:function(t){return new Qp(t)},masking:function(t){return new Pp(t)}});var Yf=Object.freeze({__proto__:null,binaryAccuracy:function(t,e){return jh(t,e)},binaryCrossentropy:function(t,e){return Yh(t,e)},sparseCategoricalAccuracy:function(t,e){return Jh(t,e)},categoricalAccuracy:function(t,e){return qh(t,e)},categoricalCrossentropy:function(t,e){return Zh(t,e)},precision:function(t,e){return Kh(t,e)},recall:function(t,e){return Xh(t,e)},cosineProximity:function(t,e){return Vh(t,e)},meanAbsoluteError:function(t,e){return zh(t,e)},meanAbsolutePercentageError:function(t,e){return Lh(t,e)},MAPE:function(t,e){return Lh(t,e)},mape:function(t,e){return Lh(t,e)},meanSquaredError:function(t,e){return Mh(t,e)},MSE:function(t,e){return Mh(t,e)},mse:function(t,e){return Mh(t,e)}}),Jf=Object.freeze({__proto__:null,modelFromJSON:async function(t,e){"modelTopology"in t||(t={modelTopology:t});let n=(t=t).modelTopology;null!=n.model_config&&(n=n.model_config);const r=Oh(ud(n),e);if(null!=t.weightsManifest){const e=await Ns(t.weightsManifest,t.pathPrefix,r.weights.map(t=>t.originalName)),n={};for(const t of r.weights)n[t.originalName]=e[t.originalName];r.loadWeights(n),ra(e)}return r}});var Zf=Object.freeze({__proto__:null,l1l2:function(t){return new sp(t)},l1:function(t){return np(e=t),new sp({l1:null!=e?e.l1:null,l2:0});var e},l2:function(t){return np(e=t),new sp({l2:null!=e?e.l2:null,l1:0});var e}});class Qf extends Ih{constructor(){super(...arguments),this.model=null}setModel(t){if(!(t instanceof Md))throw new Error("model must be a LayersModel, not some other Container");this.model=t}}function tm(t,e){return t<e}function em(t,e){return t>e}class nm extends Qf{constructor(t){if(super(),null==t&&(t={}),t.restoreBestWeights)throw new Nu("restoreBestWeights = True is not implemented in EarlyStopping yet.");this.monitor=t.monitor||"val_loss",this.minDelta=Math.abs(t.minDelta||0),this.patience=t.patience||0,this.verbose=t.verbose||0,this.mode=t.mode||"auto",this.baseline=t.baseline,-1===["auto","min","max"].indexOf(this.mode)&&(console.warn(`EarlyStopping mode '${this.mode}' is invalid. Falling back to mode 'auto'.`),this.mode="auto"),"min"===this.mode?this.monitorFunc=tm:"max"===this.mode||-1!==this.monitor.indexOf("acc")?this.monitorFunc=em:this.monitorFunc=tm,this.monitorFunc===tm&&(this.minDelta*=-1)}async onTrainBegin(t){this.wait=0,this.stoppedEpoch=0,null!=this.baseline?this.best=this.baseline:this.best=this.monitorFunc===tm?1/0:-1/0}async onEpochEnd(t,e){await Nh(e);const n=this.getMonitorValue(e);null!=n&&(this.monitorFunc(n-this.minDelta,this.best)?(this.best=n,this.wait=0):(this.wait++,this.wait>=this.patience&&(this.stoppedEpoch=t,this.model.stopTraining=!0)))}async onTrainEnd(t){this.stoppedEpoch>0&&this.verbose&&console.log(`Epoch ${this.stoppedEpoch}: early stopping.`)}getMonitorValue(t){null==t&&(t={});const e=t[this.monitor];return null==e&&console.warn(`Metric for EarlyStopping ${this.monitor} is not available. Available metrics are: `+Object.keys(t)),e}}const rm={earlyStopping:function(t){return new nm(t)}};var sm,am;!function(t){t[t.DT_INVALID=0]="DT_INVALID",t[t.DT_FLOAT=1]="DT_FLOAT",t[t.DT_DOUBLE=2]="DT_DOUBLE",t[t.DT_INT32=3]="DT_INT32",t[t.DT_UINT8=4]="DT_UINT8",t[t.DT_INT16=5]="DT_INT16",t[t.DT_INT8=6]="DT_INT8",t[t.DT_STRING=7]="DT_STRING",t[t.DT_COMPLEX64=8]="DT_COMPLEX64",t[t.DT_INT64=9]="DT_INT64",t[t.DT_BOOL=10]="DT_BOOL",t[t.DT_QINT8=11]="DT_QINT8",t[t.DT_QUINT8=12]="DT_QUINT8",t[t.DT_QINT32=13]="DT_QINT32",t[t.DT_BFLOAT16=14]="DT_BFLOAT16",t[t.DT_FLOAT_REF=101]="DT_FLOAT_REF",t[t.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",t[t.DT_INT32_REF=103]="DT_INT32_REF",t[t.DT_UINT8_REF=104]="DT_UINT8_REF",t[t.DT_INT16_REF=105]="DT_INT16_REF",t[t.DT_INT8_REF=106]="DT_INT8_REF",t[t.DT_STRING_REF=107]="DT_STRING_REF",t[t.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",t[t.DT_INT64_REF=109]="DT_INT64_REF",t[t.DT_BOOL_REF=110]="DT_BOOL_REF",t[t.DT_QINT8_REF=111]="DT_QINT8_REF",t[t.DT_QUINT8_REF=112]="DT_QUINT8_REF",t[t.DT_QINT32_REF=113]="DT_QINT32_REF",t[t.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF"}(sm||(sm={})),function(t){let e;!function(t){t[t.LEGACY=0]="LEGACY",t[t.V1=1]="V1",t[t.V2=2]="V2"}(e=t.CheckpointFormatVersion||(t.CheckpointFormatVersion={}))}(am||(am={}));const im={};function om(t){return im[t]}function lm(t,e,n,r){const s=e.inputParams[t];if(s&&void 0!==s.inputIndexStart){const t=s.inputIndexStart,a=0===s.inputIndexEnd?void 0:void 0===s.inputIndexEnd?t+1:s.inputIndexEnd;if("tensor"===s.type)return um(e.inputNames[s.inputIndexStart],n,r);if("tensors"===s.type){return e.inputNames.slice(t,a).map(t=>um(t,n,r))}const i=Array.prototype.slice.call(um(e.inputNames.slice(t)[0],n,r).dataSync());return"number"===s.type?i[0]:i}const a=e.attrParams[t];return a&&a.value}function um(t,e,n){const[r,s]=dm(t),a=n.currentContextIds.find(t=>!!e[hm(r,t)]);return void 0!==a?e[hm(r,a)][s]:void 0}function cm(t,e){const[n,r]=dm(t);return[hm(n,e&&e.currentContextId),r]}function hm(t,e){return e?`${t}-${e}`:t}function dm(t){const e=t.lastIndexOf(":");return-1===e?[t,0]:[t.substring(0,e),Number(t.substring(e+1))]}function pm(t,e){const n=[];for(let r=0;r<t.length;r+=e)n.push(t.slice(r,r+e));return n}var fm=Object.freeze({__proto__:null,json:[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]});var mm=Object.freeze({__proto__:null,json:[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"clip_value_min",name:"clipValueMin",type:"number"},{tfName:"clip_value_max",name:"clipValueMax",type:"number"}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"clipValueMin",name:"clipValueMin",type:"number",defaultValue:0},{tfName:"clipValueMax",name:"clipValueMax",type:"number",defaultValue:6}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]});var gm=Object.freeze({__proto__:null,json:[{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"number"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"number"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"number"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"number"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"number"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"number"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"number"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"number"}]}]});var ym=Object.freeze({__proto__:null,json:[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]}]});var bm=Object.freeze({__proto__:null,json:[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}]});var xm=Object.freeze({__proto__:null,json:[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]});var wm=Object.freeze({__proto__:null,json:[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]}]});var vm=Object.freeze({__proto__:null,json:[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}]});var Cm=Object.freeze({__proto__:null,json:[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]}]});var Nm=Object.freeze({__proto__:null,json:[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]});var Sm=Object.freeze({__proto__:null,json:[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]});var km=Object.freeze({__proto__:null,json:[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}]});var Im=Object.freeze({__proto__:null,json:[{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]}]});var Em=Object.freeze({__proto__:null,json:[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool",notSupported:!0}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}]});var $m=Object.freeze({__proto__:null,json:[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}]});var Am=Object.freeze({__proto__:null,json:[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]}]});class Rm{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const t=[].concat(...[fm,mm,gm,ym,bm,xm,wm,Nm,Cm,vm,Sm,km,Im,Em,$m,Am].map(t=>t.json));this.opMappers=t.reduce((t,e)=>(t[e.tfOpName]=e,t),{})}transformGraph(t,e={}){const n=t.node,r=[],s=[],a=n.reduce((t,e)=>(t[e.name]=this.mapNode(e),e.op.startsWith("Placeholder")&&r.push(t[e.name]),"Const"===e.op&&s.push(t[e.name]),t),{});let i=[];const o=[];let l={},u={};null!=e&&(l=this.mapSignatureEntries(e.inputs),u=this.mapSignatureEntries(e.outputs));const c=Object.keys(a);return c.forEach(t=>{const e=a[t];e.inputNames.forEach(t=>{const[n]=cm(t);e.inputs.push(a[n]),a[n].children.push(e)})}),0===Object.keys(u).length?c.forEach(t=>{const e=a[t];0===e.children.length&&o.push(e)}):Object.keys(u).forEach(t=>{const[e]=cm(t),n=a[e];null!=n&&(n.signatureKey=u[t],o.push(n))}),Object.keys(l).length>0?Object.keys(l).forEach(t=>{const[e]=cm(t),n=a[e];n&&(n.signatureKey=l[t],i.push(n))}):i=r,{nodes:a,inputs:i,outputs:o,weights:s,placeholders:r,signature:e}}mapSignatureEntries(t){return Object.keys(t||{}).reduce((e,n)=>(e[t[n].name]=n,e),{})}mapNode(t){const e=om(t.op)||this.opMappers[t.op]||{};null==t.attr&&(t.attr={});const n={name:t.name,op:t.op,category:e.category,inputNames:(t.input||[]).map(t=>t.startsWith("^")?t.substr(1):t),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:t.attr};return null!=e.inputs&&(n.inputParams=e.inputs.reduce((t,e)=>(t[e.name]={type:e.type,inputIndexStart:e.start,inputIndexEnd:e.end},t),{})),null!=e.attrs&&(n.attrParams=e.attrs.reduce((e,n)=>{const r=n.type;let s=void 0;switch(n.type){case"string":s=Dm(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Dm(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":s=Wm(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Wm(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":s=Om(t.attr,n.tfName,n.defaultValue||0),void 0===s&&n.tfDeprecatedName&&(s=Om(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":s=Pm(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Pm(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":s=_m(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=_m(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":s=Um(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Um(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":s=Bm(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Bm(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":s=Vm(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Vm(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":s=Mm(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Mm(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":s=zm(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=zm(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${t.op}`)}return e[n.name]={value:s,type:r},e},{})),n}}function Tm(t,e){const n=Array.isArray(t)?String.fromCharCode.apply(null,t):function(t){const e=a().global;if(void 0!==e.atob)return e.atob(t);if("undefined"!=typeof Buffer)return new Buffer(t,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(t);return e?n:n.toLowerCase()}function Dm(t,e,n,r=!1){const s=t[e];return null!=s?Tm(s.s,r):n}function _m(t,e,n){const r=t[e];return r?r.b:n}function Om(t,e,n){const r=t[e]||{},s=null!=r.i?r.i:null!=r.f?r.f:n;return"number"==typeof s?s:parseInt(s,10)}function Fm(t){switch("string"==typeof t&&(t=sm[t]),t){case sm.DT_FLOAT:return"float32";case sm.DT_INT32:case sm.DT_INT64:case sm.DT_INT8:case sm.DT_UINT8:return"int32";case sm.DT_BOOL:return"bool";case sm.DT_DOUBLE:return"float32";case sm.DT_STRING:return"string";default:return null}}function Mm(t,e,n){const r=t[e];return r&&r.type?Fm(r.type):n}function zm(t,e,n){const r=t[e];return r&&r.list&&r.list.type?r.list.type.map(t=>Fm(t)):n}function Lm(t){if(!t.unknownRank)return null!=t.dim?t.dim.map(t=>"number"==typeof t.size?t.size:parseInt(t.size,10)):[]}function Bm(t,e,n){const r=t[e];return r&&r.shape?Lm(r.shape):n}function Pm(t,e,n){const r=t[e];return r?((r.list.f&&r.list.f.length?r.list.f:r.list.i)||[]).map(t=>"number"==typeof t?t:parseInt(t,10)):n}function Wm(t,e,n,r=!1){const s=t[e];return s&&s.list&&s.list.s?s.list.s.map(t=>Tm(t,r)):n}function Vm(t,e,n){const r=t[e];return r&&r.list&&r.list.shape?r.list.shape.map(t=>Lm(t)):n}function Um(t,e,n){const r=t[e];return r&&r.list&&r.list.b?r.list.b:n}class Gm{constructor(t,e,n){this.node=t,this.tensorMap=e,this.context=n,this.inputs=[],this.attrs={},this.inputs=t.inputNames.map(t=>this.getInput(t)),null!=t.rawAttrs&&(this.attrs=Object.keys(t.rawAttrs).reduce((t,e)=>(t[e]=this.getAttr(e),t),{}))}getInput(t){return um(t,this.tensorMap,this.context)}getAttr(t,e){const n=this.node.rawAttrs[t];if(null!=n.tensor)return um(t,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return Om(this.node.rawAttrs,t,e);if(null!=n.s)return Dm(this.node.rawAttrs,t,e);if(null!=n.b)return _m(this.node.rawAttrs,t,e);if(null!=n.shape)return Bm(this.node.rawAttrs,t,e);if(null!=n.type)return Mm(this.node.rawAttrs,t,e);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return Pm(this.node.rawAttrs,t,e);if(null!=n.list.s)return Wm(this.node.rawAttrs,t,e);if(null!=n.list.shape)return Vm(this.node.rawAttrs,t,e);if(null!=n.list.b)return Um(this.node.rawAttrs,t,e);if(null!=n.list.type)return zm(this.node.rawAttrs,t,e)}return e}}class jm{constructor(t,e,n,r,s,a,i){this.name=t,this.dtype=e,this.maxSize=n,this.elementShape=r,this.identicalElementShapes=s,this.dynamicSize=a,this.clearAfterRead=i,this.tensors=[],this.closed_=!1,this.id=jm.nextId++}get closed(){return this.closed_}clearAndClose(){this.tensors.forEach(t=>t.tensor.dispose()),this.tensors=[],this.closed_=!0}size(){return this.tensors.length}read(t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||t>=this.size())throw new Error(`Tried to read from index ${t}, but array size is: ${this.size()}`);const e=this.tensors[t];if(e.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${t} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(e.cleared=!0),e.read=!0,e.tensor}readMany(t){return t.map(t=>this.read(t))}write(t,e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||!this.dynamicSize&&t>=this.maxSize)throw new Error(`Tried to write to index ${t}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[t]||{};if(e.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t},\n          because the value dtype is ${e.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=e.shape),this.assertShapesMatchAllowUndefinedSize(this.elementShape,e.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${t}.`),n&&n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been read.`);if(n&&n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been written.`);n.tensor=e,n.written=!0,this.tensors[t]=n}writeMany(t,e){if(t.length!==e.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${t.length} is not the same as tensors size: ${e.length}.`);t.forEach((t,n)=>this.write(t,e[n]))}gather(t,e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${e}`);if(t)t=t.slice(0,this.size());else{t=[];for(let e=0;e<this.size();e++)t.push(e)}if(0===t.length)return ce([],[0].concat(this.elementShape));const n=this.readMany(t);return this.assertShapesMatchAllowUndefinedSize(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),en(n,0)}concat(t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${t}`);if(0===this.size())return ce([],[0].concat(this.elementShape));const e=[];for(let t=0;t<this.size();t++)e.push(t);const n=this.readMany(e);return this.assertShapesMatchAllowUndefinedSize(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),Ge(n,0)}scatter(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const n=Math.max(...t);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(t,nn(e,0))}split(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);let n=0;const r=t.map(t=>(n+=t,n));if(n!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${e.shape}`);if(!this.dynamicSize&&t.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${t.length}), and the TensorArray is not marked as dynamically resizeable`);const s=0===n?0:e.size/n,a=[];na(()=>{e=e.reshape([1,n,s]);for(let n=0;n<t.length;++n){const i=[0,0===n?0:r[n-1],0],o=[1,t[n],s];a[n]=Sr(e,i,o).reshape(this.elementShape)}return a});const i=[];for(let e=0;e<t.length;e++)i[e]=e;this.writeMany(i,a)}assertShapesMatchAllowUndefinedSize(t,e,n=""){v(this.shapesEqualAllowUndefinedSize(t,e),()=>n+` Shapes ${t} and ${e} must match`)}shapesEqualAllowUndefinedSize(t,e){if(t.length!==e.length)return!1;for(let n=0;n<t.length;n++)if(-1!==t[n]&&-1!==e[n]&&t[n]!==e[n])return!1;return!0}}jm.nextId=0;function qm(t,e,n){const r=((t,e,n)=>{switch(t.category){case"arithmetic":return na(()=>((t,e,n)=>{switch(t.op){case"BiasAdd":case"AddV2":case"Add":return[sn(lm("a",t,e,n),lm("b",t,e,n))];case"AddN":return[oa(lm("tensors",t,e,n))];case"FloorMod":case"Mod":return[Kn(lm("a",t,e,n),lm("b",t,e,n))];case"Mul":return[Yn(lm("a",t,e,n),lm("b",t,e,n))];case"RealDiv":case"Div":return[nr(lm("a",t,e,n),lm("b",t,e,n))];case"DivNoNan":return[Fa(lm("a",t,e,n),lm("b",t,e,n))];case"FloorDiv":return[Un(lm("a",t,e,n),lm("b",t,e,n))];case"Sub":return[ar(lm("a",t,e,n),lm("b",t,e,n))];case"Minimum":return[qn(lm("a",t,e,n),lm("b",t,e,n))];case"Maximum":return[Gn(lm("a",t,e,n),lm("b",t,e,n))];case"Pow":return[Zn(lm("a",t,e,n),lm("b",t,e,n))];case"SquaredDifference":return[si(lm("a",t,e,n),lm("b",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"basic_math":return na(()=>((t,e,n)=>{switch(t.op){case"Abs":case"ComplexAbs":return[an(lm("x",t,e,n))];case"Acos":return[on(lm("x",t,e,n))];case"Acosh":return[ln(lm("x",t,e,n))];case"Asin":return[un(lm("x",t,e,n))];case"Asinh":return[cn(lm("x",t,e,n))];case"Atan":return[hn(lm("x",t,e,n))];case"Atan2":return[Wn(lm("x",t,e,n),lm("y",t,e,n))];case"Atanh":return[dn(lm("x",t,e,n))];case"Ceil":return[pn(lm("x",t,e,n))];case"Complex":return[oe(lm("real",t,e,n),lm("imag",t,e,n))];case"Cos":return[mn(lm("x",t,e,n))];case"Cosh":return[gn(lm("x",t,e,n))];case"Elu":return[mo(lm("x",t,e,n))];case"Erf":return[yn(lm("x",t,e,n))];case"Exp":return[bn(lm("x",t,e,n))];case"Expm1":return[xn(lm("x",t,e,n))];case"Floor":return[wn(lm("x",t,e,n))];case"Log":return[vn(lm("x",t,e,n))];case"Log1p":return[Cn(lm("x",t,e,n))];case"Imag":return[ue(lm("x",t,e,n))];case"Neg":return[Sn(lm("x",t,e,n))];case"Reciprocal":return[kn(lm("x",t,e,n))];case"Real":return[le(lm("x",t,e,n))];case"Relu":return[bo(lm("x",t,e,n))];case"Round":return[In(lm("x",t,e,n))];case"Selu":return[wo(lm("x",t,e,n))];case"Sigmoid":return[$n(lm("x",t,e,n))];case"Sin":return[_n(lm("x",t,e,n))];case"Sign":return[An(lm("x",t,e,n))];case"Sinh":return[On(lm("x",t,e,n))];case"Softplus":return[Fn(lm("x",t,e,n))];case"Sqrt":return[Mn(lm("x",t,e,n))];case"Square":return[rr(lm("x",t,e,n))];case"Tanh":return[Bn(lm("x",t,e,n))];case"Tan":return[Ln(lm("x",t,e,n))];case"Relu6":case"ClipByValue":return[fn(lm("x",t,e,n),lm("clipValueMin",t,e,n),lm("clipValueMax",t,e,n))];case"Rsqrt":return[En(um(t.inputNames[0],e,n))];case"Prod":return[Le(lm("x",t,e,n),lm("axes",t,e,n))];case"LeakyRelu":return[go(lm("x",t,e,n),lm("alpha",t,e,n))];case"Prelu":return[yo(lm("x",t,e,n),lm("alpha",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"control":return(async(t,e,n)=>{switch(t.op){case"LoopCond":return[lm("pred",t,e,n).clone()];case"Switch":{const r=lm("pred",t,e,n),s=lm("data",t,e,n);return(await r.data())[0]?[void 0,s.clone()]:[s.clone(),void 0]}case"Merge":const r=t.inputNames.find(t=>void 0!==um(t,e,n));return r?[um(r,e,n).clone()]:void 0;case"Enter":const s=lm("frameName",t,e,n),a=lm("tensor",t,e,n);return n.enterFrame(s),[a.clone()];case"Exit":const i=lm("tensor",t,e,n);return n.exitFrame(),[i.clone()];case"NextIteration":const o=lm("tensor",t,e,n);return n.nextIteration(),[o.clone()];case"TensorArrayV3":const l=lm("size",t,e,n),u=lm("dtype",t,e,n),c=lm("elementShape",t,e,n),h=lm("dynamicSize",t,e,n),d=lm("clearAfterRead",t,e,n),p=lm("identicalElementShapes",t,e,n),f=lm("name",t,e,n),m=new jm(f,u,l,c,p,h,d);return n.addTensorArray(m),[de(m.id),de(1)];case"TensorArrayWriteV3":const g=lm("tensorArrayId",t,e,n),y=lm("index",t,e,n),b=lm("tensor",t,e,n);return n.getTensorArray(g).write(y,b),[de(1)];case"TensorArrayReadV3":const x=lm("tensorArrayId",t,e,n),w=lm("index",t,e,n);return[n.getTensorArray(x).read(w)];case"TensorArrayGatherV3":const v=lm("tensorArrayId",t,e,n),C=lm("indices",t,e,n),N=lm("dtype",t,e,n);return[n.getTensorArray(v).gather(C,N)];case"TensorArrayScatterV3":const S=lm("tensorArrayId",t,e,n),k=lm("indices",t,e,n),I=lm("tensor",t,e,n);return n.getTensorArray(S).scatter(k,I),[de(1)];case"TensorArrayConcatV3":const E=lm("tensorArrayId",t,e,n),$=n.getTensorArray(E),A=lm("dtype",t,e,n);return[$.concat(A)];case"TensorArraySplitV3":const R=lm("tensorArrayId",t,e,n),T=lm("tensor",t,e,n),D=lm("lengths",t,e,n);return n.getTensorArray(R).split(D,T),[de(1)];case"TensorArraySizeV3":const _=lm("tensorArrayId",t,e,n);return[de(n.getTensorArray(_).size(),"int32")];case"TensorArrayCloseV3":const O=lm("tensorArrayId",t,e,n);return n.getTensorArray(O).clearAndClose(),[de(0)];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n);case"convolution":return na(()=>((t,e,n)=>{switch(t.op){case"Conv1D":{const r=lm("stride",t,e,n),s=lm("pad",t,e,n),a=lm("dataFormat",t,e,n).toUpperCase(),i=lm("dilation",t,e,n);return[Pi(lm("x",t,e,n),lm("filter",t,e,n),r,s,a,i)]}case"Conv2D":{const r=lm("strides",t,e,n),s=lm("pad",t,e,n),a=lm("dataFormat",t,e,n).toUpperCase(),i=lm("dilations",t,e,n);return[Wi(lm("x",t,e,n),lm("filter",t,e,n),[r[1],r[2]],s,a,[i[1],i[2]])]}case"_FusedConv2D":case"FusedDepthwiseConv2dNative":{const[r,s]=lm("fusedOps",t,e,n),a="biasadd"===r,i="prelu"===s,o="fusedbatchnorm"===r,l=lm("numArgs",t,e,n);if(a){if(i&&2!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(o)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported.");const u=lm("strides",t,e,n),c=lm("pad",t,e,n),h=lm("dataFormat",t,e,n).toUpperCase(),d=lm("dilations",t,e,n),[p,f]=lm("args",t,e,n);return[("_FusedConv2D"===t.op?Tl:Dl)({x:lm("x",t,e,n),filter:lm("filter",t,e,n),strides:[u[1],u[2]],pad:c,dataFormat:h,dilations:[d[1],d[2]],bias:p,activation:s,preluActivationWeights:f})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const r=lm("outputShape",t,e,n),s=lm("strides",t,e,n),a=lm("pad",t,e,n);return[Xi(lm("x",t,e,n),lm("filter",t,e,n),r,[s[1],s[2]],a)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const r=lm("strides",t,e,n),s=lm("pad",t,e,n),a=lm("dilations",t,e,n),i=lm("dataFormat",t,e,n).toUpperCase();return[ji(lm("input",t,e,n),lm("filter",t,e,n),[r[1],r[2]],s,i,[a[1],a[2]])]}case"Conv3D":{const r=lm("strides",t,e,n),s=lm("pad",t,e,n),a=lm("dataFormat",t,e,n).toUpperCase(),i=lm("dilations",t,e,n);return[Vi(lm("x",t,e,n),lm("filter",t,e,n),[r[1],r[2],r[3]],s,a,[i[1],i[2],i[3]])]}case"AvgPool":{const r=lm("strides",t,e,n),s=lm("pad",t,e,n),a=lm("kernelSize",t,e,n);return[lo(lm("x",t,e,n),[a[1],a[2]],[r[1],r[2]],s)]}case"MaxPool":{const r=lm("strides",t,e,n),s=lm("pad",t,e,n),a=lm("kernelSize",t,e,n);return[oo(lm("x",t,e,n),[a[1],a[2]],[r[1],r[2]],s)]}case"MaxPoolWithArgmax":{const r=lm("strides",t,e,n),s=lm("pad",t,e,n),a=lm("kernelSize",t,e,n),i=lm("includeBatchInIndex",t,e,n),{result:o,indexes:l}=po(lm("x",t,e,n),[a[1],a[2]],[r[1],r[2]],s,i);return[o,l]}case"AvgPool3D":{const r=lm("strides",t,e,n),s=lm("pad",t,e,n),a=lm("kernelSize",t,e,n);return[ho(lm("x",t,e,n),[a[1],a[2],a[3]],[r[1],r[2],r[3]],s)]}case"MaxPool3D":{const r=lm("strides",t,e,n),s=lm("pad",t,e,n),a=lm("kernelSize",t,e,n);return[co(lm("x",t,e,n),[a[1],a[2],a[3]],[r[1],r[2],r[3]],s)]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"creation":return na(()=>((t,e,n)=>{switch(t.op){case"Fill":{const r=lm("shape",t,e,n),s=lm("dtype",t,e,n);return[Ce(r,lm("value",t,e,n),s)]}case"LinSpace":return[Ne(lm("start",t,e,n),lm("stop",t,e,n),lm("num",t,e,n))];case"Multinomial":{const r=lm("logits",t,e,n),s=lm("numSamples",t,e,n),a=lm("seed",t,e,n);return[za(r,s,a)]}case"OneHot":{const r=lm("indices",t,e,n),s=lm("depth",t,e,n),a=lm("onValue",t,e,n),i=lm("offValue",t,e,n);return[_s(r,s,a,i)]}case"Ones":return[we(lm("shape",t,e,n),lm("dtype",t,e,n))];case"OnesLike":return[ke(lm("x",t,e,n))];case"RandomUniform":return[ri(lm("shape",t,e,n),lm("minval",t,e,n),lm("maxval",t,e,n),lm("dtype",t,e,n))];case"Range":return[Se(lm("start",t,e,n),lm("stop",t,e,n),lm("step",t,e,n),lm("dtype",t,e,n))];case"TruncatedNormal":{const r=lm("shape",t,e,n),s=lm("mean",t,e,n),a=lm("stdDev",t,e,n),i=lm("seed",t,e,n);return[ai(r,s,a,lm("dtype",t,e,n),i)]}case"Zeros":return[ve(lm("shape",t,e,n),lm("dtype",t,e,n))];case"ZerosLike":return[Ie(lm("x",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"dynamic":return(async(t,e,n)=>{switch(t.op){case"NonMaxSuppressionV5":case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const r=lm("boxes",t,e,n),s=lm("scores",t,e,n),a=lm("maxOutputSize",t,e,n),i=lm("iouThreshold",t,e,n),o=lm("scoreThreshold",t,e,n);if("NonMaxSuppressionV5"===t.op){const l=lm("softNmsSigma",t,e,n),u=await Nl(r,s,a,i,o,l);return[u.selectedIndices,u.selectedScores]}return[await vl(r,s,a,i,o)]}case"Where":{const r=lm("condition",t,e,n).asType("bool"),s=[await Oa(r)];return r.dispose(),s}case"ListDiff":return rn(lm("x",t,e,n),lm("y",t,e,n));default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n);case"evaluation":return na(()=>((t,e,n)=>{switch(t.op){case"TopKV2":{const r=lm("x",t,e,n),s=lm("k",t,e,n),a=lm("sorted",t,e,n),i=Ao(r,s,a);return[i.values,i.indices]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"image":return na(()=>((t,e,n)=>{switch(t.op){case"ResizeBilinear":{const r=lm("images",t,e,n),s=lm("size",t,e,n),a=lm("alignCorners",t,e,n);return[bl(r,[s[0],s[1]],a)]}case"ResizeNearestNeighbor":{const r=lm("images",t,e,n),s=lm("size",t,e,n),a=lm("alignCorners",t,e,n);return[xl(r,[s[0],s[1]],a)]}case"CropAndResize":{const r=lm("image",t,e,n),s=lm("boxes",t,e,n),a=lm("boxInd",t,e,n),i=lm("cropSize",t,e,n),o=lm("method",t,e,n),l=lm("extrapolationValue",t,e,n);return[Sl(r,s,a,i,o,l)]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"graph":return na(()=>((t,e,n)=>{switch(t.op){case"Const":return e[t.name];case"PlaceholderWithDefault":const r=lm("default",t,e,n);return[um(t.name,e,n)||r];case"Placeholder":return[um(t.name,e,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":return[lm("x",t,e,n).clone()];case"IdentityN":return lm("x",t,e,n).map(t=>t.clone());case"Snapshot":return[lm("x",t,e,n).clone()];case"Shape":return[pe(lm("x",t,e,n).shape,"int32")];case"ShapeN":return lm("x",t,e,n).map(t=>pe(t.shape));case"Size":return[de(lm("x",t,e,n).size,"int32")];case"Rank":return[de(lm("x",t,e,n).rank,"int32")];case"NoOp":return[de(1)];case"Print":const s=lm("x",t,e,n),a=lm("data",t,e,n),i=lm("message",t,e,n),o=lm("summarize",t,e,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(i);for(let t=0;t<a.length;t++)console.log(Array.prototype.slice.call(a[t].dataSync()).slice(0,o));return[s];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"logical":return na(()=>((t,e,n)=>{switch(t.op){case"Equal":return[ii(lm("a",t,e,n),lm("b",t,e,n))];case"NotEqual":return[La(lm("a",t,e,n),lm("b",t,e,n))];case"Greater":return[li(lm("a",t,e,n),lm("b",t,e,n))];case"GreaterEqual":return[ui(lm("a",t,e,n),lm("b",t,e,n))];case"Less":return[di(lm("a",t,e,n),lm("b",t,e,n))];case"LessEqual":return[pi(lm("a",t,e,n),lm("b",t,e,n))];case"LogicalAnd":return[Aa(lm("a",t,e,n),lm("b",t,e,n))];case"LogicalNot":return[Ra(lm("a",t,e,n))];case"LogicalOr":return[Ta(lm("a",t,e,n),lm("b",t,e,n))];case"Select":case"SelectV2":return[_a(lm("condition",t,e,n),lm("a",t,e,n),lm("b",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"matrices":return na(()=>((t,e,n)=>{switch(t.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[Ji(lm("a",t,e,n),lm("b",t,e,n),lm("transposeA",t,e,n),lm("transposeB",t,e,n))];case"Transpose":return[Rr(lm("x",t,e,n),lm("perm",t,e,n))];case"_FusedMatMul":const[r,s]=lm("fusedOps",t,e,n),a="biasadd"===r,i="prelu"===s,o=lm("numArgs",t,e,n);if(a){if(i&&2!==o)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==o)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[l,u]=lm("args",t,e,n);return[Rl({a:lm("a",t,e,n),b:lm("b",t,e,n),transposeA:lm("transposeA",t,e,n),transposeB:lm("transposeB",t,e,n),bias:l,activation:s,preluActivationWeights:u})];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"normalization":return na(()=>((t,e,n)=>{switch(t.op){case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[da(lm("x",t,e,n),lm("mean",t,e,n),lm("variance",t,e,n),lm("offset",t,e,n),lm("scale",t,e,n),lm("epsilon",t,e,n))];case"LRN":return[No(lm("x",t,e,n),lm("radius",t,e,n),lm("bias",t,e,n),lm("alpha",t,e,n),lm("beta",t,e,n))];case"Softmax":return[vo(lm("x",t,e,n))];case"LogSoftmax":return[Co(lm("x",t,e,n))];case"SparseToDense":return[Mo(lm("sparseIndices",t,e,n),lm("outputShape",t,e,n),lm("sparseValues",t,e,n),lm("defaultValue",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"reduction":return na(()=>((t,e,n)=>{switch(t.op){case"Max":{const r=lm("axis",t,e,n),s=lm("keepDims",t,e,n);return[_e(lm("x",t,e,n),r,s)]}case"Mean":{const r=lm("axis",t,e,n),s=lm("keepDims",t,e,n);return[Oe(lm("x",t,e,n),r,s)]}case"Min":{const r=lm("axis",t,e,n),s=lm("keepDims",t,e,n);return[Fe(lm("x",t,e,n),r,s)]}case"Sum":{const r=lm("axis",t,e,n),s=lm("keepDims",t,e,n);return[ze(lm("x",t,e,n),r,s)]}case"All":{const r=lm("axis",t,e,n),s=lm("keepDims",t,e,n);return[$e(lm("x",t,e,n),r,s)]}case"Any":{const r=lm("axis",t,e,n),s=lm("keepDims",t,e,n);return[Ae(lm("x",t,e,n),r,s)]}case"ArgMax":{const r=lm("axis",t,e,n);return[Re(lm("x",t,e,n),r)]}case"ArgMin":{const r=lm("axis",t,e,n);return[Te(lm("x",t,e,n),r)]}case"Prod":{const r=lm("axis",t,e,n),s=lm("keepDims",t,e,n);return[Le(lm("x",t,e,n),r,s)]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"slice_join":return na(()=>((t,e,n)=>{switch(t.op){case"ConcatV2":case"Concat":{const r=lm("n",t,e,n),s=lm("axis",t,e,n);let a=lm("tensors",t,e,n);return a=a.slice(0,r),[Ge(a,s)]}case"GatherV2":case"Gather":{const r=lm("axis",t,e,n),s=lm("x",t,e,n),a=lm("indices",t,e,n);return[Ci(s,a.asType("int32"),r)]}case"ReverseV2":case"Reverse":{const r=lm("axis",t,e,n),s=lm("x",t,e,n);return[to(s,r)]}case"Slice":{const r=lm("begin",t,e,n),s=lm("size",t,e,n);return[Sr(lm("x",t,e,n),r,s)]}case"StridedSlice":{const r=lm("begin",t,e,n),s=lm("end",t,e,n),a=lm("strides",t,e,n),i=lm("beginMask",t,e,n),o=lm("endMask",t,e,n),l=lm("ellipsisMask",t,e,n),u=lm("newAxisMask",t,e,n),c=lm("shrinkAxisMask",t,e,n),h=lm("x",t,e,n);if(1===r.length&&h.shape.length>1)for(let t=1;t<h.shape.length;t++)r.push(0),s.push(h.shape[t]),a.push(a[0]);return[$o(h,r,s,a,i,o,l,u,c)]}case"Pack":return na(()=>{const r=lm("axis",t,e,n),s=lm("tensors",t,e,n),a=s[0].shape,i=s[0].squeeze().shape,o=s.map(t=>{const e=I(t.shape,a);if(!e&&!I(t.squeeze().shape,i))throw new Error("the input tensors shape does not match");return e?t:t.reshape(a)});return[en(o,r)]});case"Unpack":return na(()=>{const r=lm("axis",t,e,n),s=lm("tensor",t,e,n);return nn(s,r)});case"Tile":{const r=lm("reps",t,e,n);return[ir(lm("x",t,e,n),r)]}case"Split":case"SplitV":{const r=lm("axis",t,e,n),s=lm("numOrSizeSplits",t,e,n);return Pe(lm("x",t,e,n),s,r)}case"ScatterNd":{const r=lm("indices",t,e,n),s=lm("values",t,e,n),a=lm("shape",t,e,n);return[Ro(r,s,a)]}case"GatherNd":{const r=lm("x",t,e,n),s=lm("indices",t,e,n);return[zo(r,s)]}case"SparseToDense":{const r=lm("sparseIndices",t,e,n),s=lm("outputShape",t,e,n),a=lm("sparseValues",t,e,n),i=lm("defaultValue",t,e,n);return[Mo(r,a,s,a.dtype===i.dtype?i:i.asType(a.dtype))]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"spectral":return na(()=>((t,e,n)=>{switch(t.op){case"FFT":return[To(lm("x",t,e,n))];case"IFFT":return[Do(lm("x",t,e,n))];case"RFFT":return[_o(lm("x",t,e,n))];case"IRFFT":return[Oo(lm("x",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"transformation":return na(()=>((t,e,n)=>{switch(t.op){case"Cast":return[Ke(lm("x",t,e,n),lm("dtype",t,e,n))];case"ExpandDims":{const r=lm("axis",t,e,n);return[Je(lm("x",t,e,n),r)]}case"Squeeze":{const r=lm("axis",t,e,n);return[tn(lm("x",t,e,n),r)]}case"Reshape":return[Ze(lm("x",t,e,n),lm("shape",t,e,n))];case"PadV2":case"Pad":return[mr(lm("x",t,e,n),pm(lm("padding",t,e,n),2),lm("constantValue",t,e,n))];case"SpaceToBatchND":{const r=lm("blockShape",t,e,n),s=pm(lm("paddings",t,e,n),2);return[Qe(lm("x",t,e,n),r,s)]}case"BatchToSpaceND":{const r=lm("blockShape",t,e,n),s=pm(lm("crops",t,e,n),2);return[He(lm("x",t,e,n),r,s)]}case"DepthToSpace":{const r=lm("blockSize",t,e,n),s=lm("dataFormat",t,e,n).toUpperCase();return[Ye(lm("x",t,e,n),r,s)]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"custom":const r=om(t.op);if(r&&r.customExecutor)return r.customExecutor(new Gm(t,e,n));throw TypeError(`Custom op ${t.op} is not registered.`);default:throw TypeError(`Unknown op '${t.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(t,e,n);return r instanceof Promise?r.then(t=>[].concat(t)):[].concat(r)}class Hm{constructor(t,e){this.weightMap=t,this.tensorArrayMap=e,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(t,e){return{id:t,frameName:e,iterationId:0}}set currentContext(t){this.contexts!==t&&(this.contexts=t,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const t=[];for(let e=0;e<this.contexts.length-1;e++){const n=this.contexts.slice(0,this.contexts.length-e);t.push(this.contextIdforContexts(n))}t.push(""),this._currentContextIds=t}contextIdforContexts(t){return t?t.map(t=>0===t.id&&0===t.iterationId?"":`${t.frameName}-${t.iterationId}`).join("/"):""}enterFrame(t){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,t)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const t=Object.assign({},this.contexts[this.contexts.length-1]);t.iterationId+=1,t.id=this.lastId,this.contexts.splice(-1,1,t),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(t){return this.weightMap[t]}addTensorArray(t){this.tensorArrayMap[t.id]=t}getTensorArray(t){return this.tensorArrayMap[t]}}function Km(t,e,n){const r=new Set,s=[];let a=null,i=null;const o=new Set,l=Object.keys(t).map(t=>dm(t)[0]),u=[...e];for(;u.length>0;){const t=u.pop();(Jm(t)||Zm(t))&&null==a&&(a=t,i=a.children.map(t=>t.name).filter(t=>r.has(t))),r.add(t.name),null==n[t.name]&&(-1===l.indexOf(t.name)&&(0!==t.inputs.length?t.inputs.forEach(t=>{o.has(t.name)||(o.add(t.name),u.push(t))}):s.push(t.name)))}return{inputs:t,outputs:e,usedNodes:r,missingInputs:s,dynamicNode:a,syncInputs:i}}const Xm=["Switch","Merge","Enter","Exit","NextIteration"],Ym=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"];function Jm(t){return Xm.indexOf(t.op)>=0}function Zm(t){return Ym.indexOf(t.op)>=0}class Qm{constructor(t){this.graph=t,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._outputs=t.outputs,this._inputs=t.inputs,this._signature=t.signature}get weightMap(){return this._weightMap}set weightMap(t){const e=Object.keys(t).map(e=>t[e].map(t=>t.id));this.weightIds=[].concat(...e),this._weightMap=t}get inputs(){return this._inputs.map(t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0}))}get outputs(){return this._outputs.map(t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0}))}get inputNodes(){return this._inputs.map(t=>t.signatureKey||t.name)}get outputNodes(){return this._outputs.map(t=>t.signatureKey||t.name)}getCompilationKey(t,e){const n=t.map(t=>t.name).sort(),r=e.map(t=>t.name).sort();return n.join(this.SEPERATOR)+"--"+r.join(this.SEPERATOR)}compile(t,e){const n=Km(t,e,this.weightMap),{missingInputs:r,dynamicNode:s,syncInputs:a}=n;if(null!=s)throw new Error(`This execution contains the node '${s.name}', which has the dynamic op '${s.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);if(r.length>0){const n=e.map(t=>t.name),s=Object.keys(t);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${s}]. Missing the following inputs: [${r}]`)}return function(t,e,n){const{usedNodes:r,inputs:s}=n,a=[];Object.keys(s).map(t=>dm(t)[0]).map(e=>t.nodes[e]).forEach(t=>{r.has(t.name)&&a.push(t)}),t.weights.forEach(t=>{r.has(t.name)&&a.push(t)});const i=new Set,o=[];for(;a.length>0;){const t=a.pop();i.add(t.name),e[t.name]||o.push(t),t.children.forEach(t=>{!i.has(t.name)&&r.has(t.name)&&t.inputs.every(t=>i.has(t.name))&&a.push(t)})}return o}(this.graph,this.weightMap,n)}execute(t,e){t=this.mapInputs(t);const n=Object.keys(t).sort();this.checkInputs(t),this.checkInputShapeAndType(t),e=this.mapOutputs(e),this.checkOutputs(e);const r=n.map(t=>this.graph.nodes[dm(t)[0]]),s=e.map(t=>this.graph.nodes[dm(t)[0]]),a=this.getCompilationKey(r,s);let i=this.compiledMap.get(a);null==i&&(i=this.compile(t,s),this.compiledMap.set(a,i));const o={};return na(()=>{const n=new Hm(this._weightMap,o),r=Object.assign({},this.weightMap);Object.keys(t).forEach(e=>{const[n,s]=dm(e),a=[];a[s]=t[e],r[n]=a});const s=this.getFrozenTensorIds(r),a={};for(let t=0;t<i.length;t++){const o=i[t];if(!r[o.name]){const t=qm(o,r,n);if(t instanceof Promise)throw new Error(`The execution of the op '${o.op}' returned a promise. Please use model.executeAsync() instead.`);r[o.name]=t,this.checkTensorForDisposal(o.name,o,r,n,s,e,a)}}return e.map(t=>um(t,r,n))})}getFrozenTensorIds(t){const e=[].concat.apply([],Object.keys(t).map(e=>t[e]).map(t=>t.map(t=>t.id)));return new Set(e)}checkTensorForDisposal(t,e,n,r,s,a,i){"control"!==e.category&&-1===a.indexOf(t)&&(n[t].forEach(t=>{null!=t&&(i[t.id]=(i[t.id]||0)+e.children.length)}),e.inputs.forEach(t=>{if("control"!==t.category){const e=function(t,e,n){return e[hm(t,n.currentContextId)]}(t.name,n,r);null!=e&&e.forEach(t=>{if(t&&!s.has(t.id)){const e=i[t.id];1===e?(t.dispose(),delete i[t.id]):null!=e&&i[t.id]--}})}}))}async executeAsync(t,e){t=this.mapInputs(t),this.checkInputs(t),this.checkInputShapeAndType(t),e=this.mapOutputs(e),this.checkOutputs(e);const n=new Hm(this._weightMap,{}),r=await this.executeWithControlFlow(t,n,e),s=e.map(t=>um(t,r,n)),a=new Set(s.map(t=>t.id)),i=new Set(Object.keys(t).map(e=>t[e].id));return Object.keys(r).forEach(t=>{r[t].forEach(t=>{!t||t.isDisposed||a.has(t.id)||i.has(t.id)||-1!==this.weightIds.indexOf(t.id)||t.dispose()})}),s}async executeWithControlFlow(t,e,n){const r=Object.keys(t),s=r.map(t=>this.graph.nodes[dm(t)[0]]),a=n.map(t=>this.graph.nodes[dm(t)[0]]),{usedNodes:i,missingInputs:o,dynamicNode:l,syncInputs:u}=Km(t,a,this.weightMap),c=[...s,...this.graph.weights].map(t=>({node:t,contexts:e.currentContext})),h=Object.assign({},this.weightMap);Object.keys(t).forEach(e=>{const[n,r]=dm(e),s=[];s[r]=t[e],h[n]=s});const d={},p=this.getFrozenTensorIds(h),f={};for(;c.length>0;){const t=this.processStack(s,c,e,h,f,p,n,d,i);await Promise.all(t)}null==l&&console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const m=a.filter(t=>!Jm(t)&&!um(t.name,h,e)).map(t=>t.name);if(m.length>0){let t="";throw null!=l&&(t=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${u}]`),new Error(`Cannot compute the outputs [${m}] from the provided inputs [${r}]. Consider providing the following inputs: [${o}]. ${t}`)}return h}processStack(t,e,n,r,s,a,i,o,l){const u=[];for(;e.length>0;){const c=e.pop();n.currentContext=c.contexts;let h="";if("Enter"===c.node.op&&lm("isConstant",c.node,r,n)&&([h]=cm(c.node.name,n)),-1===t.indexOf(c.node)){const t=qm(c.node,r,n);h||([h]=cm(c.node.name,n));const d=n.currentContext;t instanceof Promise?u.push(t.then(t=>(r[h]=t,n.currentContext=d,this.checkTensorForDisposal(h,c.node,r,n,a,i,o),this.processChildNodes(c.node,e,n,r,s,l),t))):(r[h]=t,this.checkTensorForDisposal(h,c.node,r,n,a,i,o),this.processChildNodes(c.node,e,n,r,s,l))}else this.processChildNodes(c.node,e,n,r,s,l)}return u}processChildNodes(t,e,n,r,s,a){t.children.forEach(t=>{const[i]=cm(t.name,n);!s[i]&&a.has(t.name)&&("Merge"===t.op?t.inputNames.some(t=>!!um(t,r,n))&&(s[i]=!0,e.push({contexts:n.currentContext,node:t})):t.inputNames.every(t=>!!um(t,r,n))&&(s[i]=!0,e.push({contexts:n.currentContext,node:t})))})}dispose(){Object.keys(this.weightMap).forEach(t=>this.weightMap[t].forEach(t=>t.dispose()))}checkInputShapeAndType(t){Object.keys(t).forEach(e=>{const n=t[e],[r]=dm(e),s=this.graph.nodes[r];if(s.attrParams.shape&&s.attrParams.shape.value){const t=s.attrParams.shape.value;v(t.length===n.shape.length&&n.shape.every((e,n)=>-1===t[n]||t[n]===e),()=>`The shape of dict['${s.name}'] provided in model.execute(dict) must be [${t}], but was [${n.shape}]`)}s.attrParams.dtype&&s.attrParams.dtype.value&&v(n.dtype===s.attrParams.dtype.value,()=>`The dtype of dict['${s.name}'] provided in model.execute(dict) must be ${s.attrParams.dtype.value}, but was ${n.dtype}`)})}mapInputs(t){const e={};for(const n in t)if(null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]){e[this._signature.inputs[n].name]=t[n]}else e[n]=t[n];return e}checkInputs(t){const e=Object.keys(t).filter(t=>{const[e]=dm(t);return null==this.graph.nodes[e]});if(e.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${e}] that are not part of graph`)}mapOutputs(t){return t.map(t=>{if(null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[t]){return this._signature.outputs[t].name}return t},{})}checkOutputs(t){t.forEach(t=>{const[e]=dm(t);if(!this.graph.nodes[e])throw new Error(`The output '${t}' is not found in the graph`)})}}class tg{constructor(t,e={}){this.modelUrl=t,this.loadOptions=e,this.version="n/a",null==e&&(this.loadOptions={})}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}findIOHandler(){const t=this.modelUrl;if(null!=t.load)this.handler=t;else if(null!=this.loadOptions.requestInit)this.handler=As(t,this.loadOptions);else{const e=Zr(t,this.loadOptions.onProgress);if(0===e.length)e.push(As(t,this.loadOptions));else if(e.length>1)throw new Error(`Found more than one (${e.length}) load handlers for URL '${[t]}'`);this.handler=e[0]}}async load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");this.artifacts=await this.handler.load();const t=this.artifacts.modelTopology;let e={};null!=this.artifacts.userDefinedMetadata&&(e=this.artifacts.userDefinedMetadata.signature),this.version=`${t.versions.producer}.${t.versions.minConsumer}`;const n=Ur(this.artifacts.weightData,this.artifacts.weightSpecs);return this.executor=new Qm(Rm.Instance.transformGraph(t,e)),this.executor.weightMap=this.convertTensorMapToTensorsMap(n),!0}async save(t,e){if("string"==typeof t){const e=Jr(t);if(0===e.length)throw new Error(`Cannot find any save handlers for URL '${t}'`);if(e.length>1)throw new Error(`Found more than one (${e.length}) save handlers for URL '${t}'`);t=e[0]}if(null==t.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return t.save(this.artifacts)}predict(t,e){return this.execute(t,this.outputNodes)}normalizeInputs(t){if(!(t instanceof bt||Array.isArray(t)))return t;if((t=Array.isArray(t)?t:[t]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${t.length} input tensors.`);return this.inputNodes.reduce((e,n,r)=>(e[n]=t[r],e),{})}normalizeOutputs(t){return t=t||this.outputNodes,Array.isArray(t)?t:[t]}execute(t,e){t=this.normalizeInputs(t),e=this.normalizeOutputs(e);const n=this.executor.execute(t,e);return n.length>1?n:n[0]}async executeAsync(t,e){t=this.normalizeInputs(t),e=this.normalizeOutputs(e);const n=await this.executor.executeAsync(t,e);return n.length>1?n:n[0]}convertTensorMapToTensorsMap(t){return Object.keys(t).reduce((e,n)=>(e[n]=[t[n]],e),{})}dispose(){this.executor.dispose()}}function eg(t,e,n=new Map,r=new Set){if(null==t)return null;if(r.has(t))throw new Error("Circular references are not supported.");if(n.has(t))return n.get(t);const s=e(t);if(s.recurse&&null!==s.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(s.recurse){if(ag(t)){const s=Array.isArray(t)?[]:{};r.add(t);for(const a in t){const i=eg(t[a],e,n,r);s[a]=i}return r.delete(t),s}throw new Error("Can't recurse into non-iterable type: "+t)}return n.set(t,s.value),s.value}function ng(t,e=rg){return function t(e,n,r=new Set){const s=e[0];if(r.has(s))throw new Error("Circular references are not supported.");const a=n(e);if(a.recurse&&null!==a.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(a.recurse){if(ag(s)){const a=Array.isArray(s)?[]:{};r.add(s);for(const i in s){const s=e.map(t=>t[i]),o=t(s,n,r);a[i]=o}return r.delete(s),a}throw new Error("Can't recurse into non-iterable type: "+s)}return a.value}(t,e)}function rg(t){return null===t?null:ag(t[0])?{value:null,recurse:!0}:{value:t,recurse:!1}}async function sg(t,e){const n=new Map;eg(t,e,n);for(const t of Array.from(n.keys())){const e=n.get(t);if(e instanceof Promise){const r=await e;n.set(t,r)}}return eg(t,e,n)}function ag(t){return null!=t&&!ArrayBuffer.isView(t)&&(Array.isArray(t)||"object"==typeof t&&!(t instanceof bt))}function ig(t){return function(t,e){return eg(t,e)}(t,og)}function og(t){return t instanceof bt?{value:t.clone(),recurse:!1}:ag(t)?{value:null,recurse:!0}:{value:t,recurse:!1}}class lg{constructor(t){if(this.capacity=t,this.begin=0,this.end=0,null==t)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(t<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(t),this.doubledCapacity=2*t}wrap(t){for(;t<0;)t+=this.doubledCapacity;return t%this.doubledCapacity}get(t){if(t<0)throw new RangeError("Can't get item at a negative index.");return this.data[t%this.capacity]}set(t,e){if(t<0)throw new RangeError("Can't set item at a negative index.");this.data[t%this.capacity]=e}length(){let t=this.end-this.begin;return t<0&&(t=this.doubledCapacity+t),t}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(t){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,t),this.end=this.wrap(this.end+1)}pushAll(t){for(const e of t)this.push(e)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);const t=this.get(this.end);return this.set(this.end,void 0),t}unshift(t){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,t)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const t=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),t}shuffleExcise(t){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const e=this.wrap(this.begin+t),n=this.get(e);return this.set(e,this.pop()),n}}class ug extends lg{constructor(){super(ug.INITIAL_CAPACITY)}isFull(){return!1}push(t){super.isFull()&&this.expand(),super.push(t)}unshift(t){super.isFull()&&this.expand(),super.unshift(t)}expand(){const t=2*this.capacity,e=new Array(t),n=this.length();for(let t=0;t<n;t++)e[t]=this.get(this.wrap(this.begin+t));this.data=e,this.capacity=t,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n}}function cg(t){return new pg(t)}function hg(t){return new fg(t)}ug.INITIAL_CAPACITY=32;class dg{async toArray(){const t=[];let e=await this.next();for(;!e.done;)t.push(e.value),e=await this.next();return t}async toArrayForTest(){const t=this.prefetch(100),e=[];let n=await t.next();for(;!n.done;)e.push(n.value),n=await t.next();return e}async resolveFully(){let t=await this.next();for(;!t.done;)t=await this.next()}async resolveWhile(t){let e=await this.next(),n=t(e.value);for(;!e.done&&n;)e=await this.next(),n=t(e.value)}handleErrors(t){return new vg(this,t)}filter(t){return new xg(this,t)}map(t){return new wg(this,t)}mapAsync(t){return new Cg(this,t)}serialMapAsync(t){return new Cg(this,t).serial()}flatmap(t){return new Sg(this,t)}async forEachAsync(t){return this.map(t).resolveFully()}async serialForEach(t){return this.serialMapAsync(t).resolveWhile(t=>!0===t)}rowMajorBatch(t,e=!0){return new bg(this,t,e)}columnMajorBatch(t,e=!0,n=rg){return this.rowMajorBatch(t,e).map(t=>ng(t,n))}concatenate(t,e){return new kg(cg([this,t]),e)}take(t){return t<0||null==t?this:new yg(this,t)}skip(t){return t<0||null==t?this:new gg(this,t)}prefetch(t){return new $g(this,t)}shuffle(t,e){return new Ag(this,t,e)}serial(){return new mg(this)}}class pg extends dg{constructor(t){super(),this.items=t,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};const t=this.items[this.trav];return this.trav++,{value:ig(t),done:!1}}}class fg extends dg{constructor(t){super(),this.nextFn=t}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(t){throw t.message="Error thrown while iterating through a dataset: "+t.message,t}}}class mg extends dg{constructor(t){super(),this.upstream=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> Serial"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){return this.upstream.next()}}class gg extends dg{constructor(t,e){super(),this.upstream=t,this.maxCount=e,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> Skip"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){const t=await this.upstream.next();if(t.done)return t;ra(t.value)}return this.upstream.next()}}class yg extends dg{constructor(t,e){super(),this.upstream=t,this.maxCount=e,this.count=0}summary(){return this.upstream.summary()+" -> Take"}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class bg extends dg{constructor(t,e,n=!0){super(),this.upstream=t,this.batchSize=e,this.enableSmallLastBatch=n,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> RowMajorBatch"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){const t=[];for(;t.length<this.batchSize;){const e=await this.upstream.next();if(e.done)return this.enableSmallLastBatch&&t.length>0?{value:t,done:!1}:{value:null,done:!0};t.push(e.value)}return{value:t,done:!1}}}class xg extends dg{constructor(t,e){super(),this.upstream=t,this.predicate=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> Filter"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;;){const t=await this.upstream.next();if(t.done||this.predicate(t.value))return t;ra(t.value)}}}class wg extends dg{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return this.upstream.summary()+" -> Map"}async next(){const t=await this.upstream.next();if(t.done)return{value:null,done:!0};const e=Tt(t.value),n=this.transform(t.value),r=Tt(n);for(const t of e)Rt(t,r)||t.dispose();return{value:n,done:!1}}}class vg extends dg{constructor(t,e){super(),this.upstream=t,this.handler=e,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> handleErrors"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(t){if(!this.handler(t))return{value:null,done:!0}}}}class Cg extends dg{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return this.upstream.summary()+" -> AsyncMap"}async next(){const t=await this.upstream.next();if(t.done)return{value:null,done:!0};const e=Tt(t.value),n=await this.transform(t.value),r=Tt(n);for(const t of e)Rt(t,r)||t.dispose();return{value:n,done:!1}}}class Ng extends dg{constructor(){super(),this.outputQueue=new ug,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class Sg extends Ng{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return this.upstream.summary()+" -> Flatmap"}async pump(){const t=await this.upstream.next();if(t.done)return!1;const e=Tt(t.value),n=this.transform(t.value),r=Tt(n);this.outputQueue.pushAll(n);for(const t of e)Rt(t,r)||t.dispose();return!0}}class kg extends dg{constructor(t,e){super(),this.baseErrorHandler=e,this.lastRead=null,this.iterator=null,this.moreIterators=t}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(t){if(await t,null==this.iterator){const t=await this.moreIterators.next();if(t.done)return{value:null,done:!0};this.iterator=t.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}const e=await this.iterator.next();return e.done?(this.iterator=null,this.readFromChain(t)):e}}var Ig;!function(t){t[t.FAIL=0]="FAIL",t[t.SHORTEST=1]="SHORTEST",t[t.LONGEST=2]="LONGEST"}(Ig||(Ig={}));class Eg extends dg{constructor(t,e=Ig.FAIL){super(),this.iterators=t,this.mismatchMode=e,this.count=0,this.currentPromise=null}summary(){return"{TODO: fill in upstream of zip summaries} -> Zip"}async nextState(t){await t;let e=0,n=0;const r=await sg(this.iterators,(function(t){if(t instanceof dg){return{value:t.next().then(t=>(e++,t.done&&n++,t.value)),recurse:!1}}return{value:null,recurse:!0}}));if(e===n)return{value:null,done:!0};if(n>0)switch(this.mismatchMode){case Ig.FAIL:throw new Error(`Zipped streams should have the same length. Mismatched at element ${this.count}.`);case Ig.SHORTEST:return{value:null,done:!0};case Ig.LONGEST:}return this.count++,{value:r,done:!1}}async next(){return this.currentPromise=this.nextState(this.currentPromise),this.currentPromise}}class $g extends dg{constructor(t,e){super(),this.upstream=t,this.bufferSize=e,this.buffer=new lg(e)}summary(){return this.upstream.summary()+" -> Prefetch"}refill(){for(;!this.buffer.isFull();){const t=this.upstream.next();this.buffer.push(t)}}next(){return this.refill(),this.buffer.shift()}}class Ag extends $g{constructor(t,e,n){super(t,e),this.upstream=t,this.windowSize=e,this.upstreamExhausted=!1,this.random=Ja(n||tt().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}randomInt(t){return Math.floor(this.random()*t)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){const t=this.chooseIndex(),e=await this.buffer.shuffleExcise(t);if(!e.done)return this.refill(),e;this.upstreamExhausted=!0}return{value:null,done:!0}}}class Rg{constructor(){this.size=null}batch(t,e=!0){const n=this;let r;return v(t>0,()=>"batchSize needs to be positive, but it is\n      "+t),r=this.size===1/0||null==this.size?this.size:e?Math.ceil(this.size/t):Math.floor(this.size/t),Tg(async()=>(await n.iterator()).columnMajorBatch(t,e,Dg),r)}concatenate(t){const e=this;let n;return n=this.size===1/0||t.size===1/0?1/0:null!=this.size&&null!=t.size?this.size+t.size:null,Tg(async()=>(await e.iterator()).concatenate(await t.iterator()),n)}filter(t){const e=this;let n;return n=this.size===1/0?1/0:null,Tg(async()=>(await e.iterator()).filter(e=>na(()=>t(e))),n)}async forEachAsync(t){return(await this.iterator()).forEachAsync(t)}async forEach(t){return Qs("dataset.forEach() is deprecated and will be removed. Please use dataset.forEachAsync() instead"),this.forEachAsync(t)}map(t){const e=this;return Tg(async()=>(await e.iterator()).map(e=>na(()=>t(e))),this.size)}mapAsync(t){const e=this;return Tg(async()=>(await e.iterator()).mapAsync(t),this.size)}prefetch(t){if(null==t)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");const e=this;return Tg(async()=>(await e.iterator()).prefetch(t),this.size)}repeat(t){const e=this;let n;return n=null!=this.size&&t>0?this.size*t:0===t?0:null!=this.size&&(void 0===t||t<0)?1/0:null,Tg(async()=>{const n=hg(async()=>({value:await e.iterator(),done:!1}));return r=n.take(t),new kg(r,s);var r,s},n)}skip(t){const e=this;let n;return n=null!=this.size&&t>=0&&this.size>=t?this.size-t:null!=this.size&&(this.size<t||void 0===t||t<0)?0:null,Tg(async()=>(await e.iterator()).skip(t),n)}shuffle(t,e,n=!0){if(null==t||t<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);const r=this,s=Ja(e||tt().toString());return Tg(async()=>{let e=s.int32();return n&&(e+=s.int32()),(await r.iterator()).shuffle(t,e.toString())},this.size)}take(t){const e=this;let n;return n=null!=this.size&&this.size>t?t:null!=this.size&&this.size<=t?this.size:null,Tg(async()=>(await e.iterator()).take(t),n)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function Tg(t,e=null){return new class extends Rg{constructor(){super(...arguments),this.size=e}async iterator(){return t()}}}function Dg(t){if(null===t)return null;const e=t[0];if(null==(n=e)||null===(r=n)||"object"!=typeof r&&"function"!=typeof r||Array.isArray(n)||"object"==typeof n&&n instanceof bt||P(n)){return{value:function(t){if(0===t.length)throw new Error("Can't make a batch of zero elements.");return t[0]instanceof bt?en(t):ce(t)}(t),recurse:!1}}var n,r;return{value:null,recurse:!0}}Rg.MAX_BUFFER_SIZE=1e4;class _g extends Rg{constructor(t){super(),this.input=t}async iterator(){return(await this.input.iterator()).decodeUTF8().split("\n").map(t=>(t.endsWith("\r")&&(t=t.slice(0,-1)),t))}}const Og=Symbol("out"),Fg=Symbol("field"),Mg=Symbol("quote"),zg=Symbol("quoteafterquote"),Lg=Symbol("quoteinquote");class Bg extends Rg{constructor(t,e){super(),this.input=t,this.hasHeader=!0,this.fullColumnNames=null,this.columnNamesValidated=!1,this.columnConfigs=null,this.configuredColumnsOnly=!1,this.delimiter=",",this.delimWhitespace=!1,this.base=new _g(t),e||(e={}),this.hasHeader=!1!==e.hasHeader,this.fullColumnNames=e.columnNames,this.columnConfigs=e.columnConfigs,this.configuredColumnsOnly=e.configuredColumnsOnly,e.delimWhitespace?(v(null==e.delimiter,()=>"Delimiter should not be provided when delimWhitespace is true."),this.delimWhitespace=!0,this.delimiter=" "):this.delimiter=e.delimiter?e.delimiter:","}async columnNames(){return this.columnNamesValidated||await this.setColumnNames(),this.configuredColumnsOnly?Object.keys(this.columnConfigs):this.fullColumnNames}async setColumnNames(){const t=await this.maybeReadHeaderLine();if(!this.fullColumnNames&&!t)throw new Error("Column names must be provided if there is no header line.");this.fullColumnNames&&t&&v(t.length===this.fullColumnNames.length,()=>"The length of provided columnNames ("+this.fullColumnNames.length.toString()+") does not match the length of the header line read from file ("+t.length.toString()+")."),this.fullColumnNames||(this.fullColumnNames=t);const e=this.fullColumnNames.reduce((t,e)=>(t[e]=t[e]+1||1,t),{}),n=Object.keys(e).filter(t=>e[t]>1);if(v(0===n.length,()=>"Duplicate column names found: "+n.toString()),this.columnConfigs)for(const t of Object.keys(this.columnConfigs)){if(-1===this.fullColumnNames.indexOf(t))throw new Error('The key "'+t+'" provided in columnConfigs does not match any of the column names ('+this.fullColumnNames.toString()+").")}this.columnNamesValidated=!0}async maybeReadHeaderLine(){if(this.hasHeader){const t=await this.base.iterator(),e=await t.next();if(e.done)throw new Error("No data was found for CSV parsing.");const n=e.value;return this.parseRow(n,!1)}return null}async iterator(){this.columnNamesValidated||await this.setColumnNames();let t=await this.base.iterator();return this.hasHeader&&(t=t.skip(1)),t.map(t=>this.makeDataElement(t))}makeDataElement(t){const e=this.parseRow(t),n={},r={};for(let s=0;s<this.fullColumnNames.length;s++){const a=this.fullColumnNames[s],i=this.columnConfigs?this.columnConfigs[a]:null;if(!this.configuredColumnsOnly||i){const o=e[s];let l=null;if(""===o)if(i&&void 0!==i.default)l=i.default;else{if(i&&(i.required||i.isLabel))throw new Error(`Required column ${a} is empty in this line: ${t}`);l=void 0}else{const t=Number(o);if(isNaN(t))l=i&&"bool"===i.dtype?this.getBoolean(o):o;else if(i&&i.dtype)switch(i.dtype){case"float32":l=t;break;case"int32":l=Math.floor(t);break;case"bool":l=this.getBoolean(o);break;default:l=t}else l=t}i&&i.isLabel?r[a]=l:n[a]=l}}return 0===Object.keys(r).length?n:{xs:n,ys:r}}getBoolean(t){return"1"===t||"true"===t.toLowerCase()?1:0}parseRow(t,e=!0){const n=[];let r=0;const s=t.length;let a=Og;for(let e=0;e<s;e++)switch(a){case Og:switch(t.charAt(e)){case'"':r=e+1,a=Mg;break;case this.delimiter:if(r=e+1," "===this.delimiter&&this.delimWhitespace)break;n.push(""),a=Og;break;default:a=Fg,r=e}break;case Fg:switch(t.charAt(e)){case this.delimiter:n.push(t.substring(r,e)),a=Og,r=e+1}break;case Mg:switch(t.charAt(e)){case'"':a=zg}break;case zg:switch(t.charAt(e)){case this.delimiter:n.push(t.substring(r,e-1)),a=Og,r=e+1;break;case'"':a=Mg;break;default:a=Lg}break;case Lg:switch(t.charAt(e)){case'"':a=Mg}}if(a===zg?n.push(t.substring(r,s-1)):n.push(t.substring(r)),e&&n.length!==this.fullColumnNames.length)throw new Error(`Invalid row in csv file. Should have ${this.fullColumnNames.length} elements in a row, but got ${n}`);return n}}class Pg extends dg{constructor(t){super(),this.microphoneConfig=t,this.isClosed=!1,this.fftSize=t.fftSize||1024;const e=Math.log2(this.fftSize);if(this.fftSize<0||e<4||e>14||!Number.isInteger(e))throw new Error("Invalid fftSize: it must be a power of 2 between 2 to 4 and 2 to 14, but got "+this.fftSize);if(this.numFrames=t.numFramesPerSpectrogram||43,this.sampleRateHz=t.sampleRateHz,this.columnTruncateLength=t.columnTruncateLength||this.fftSize,this.audioTrackConstraints=t.audioTrackConstraints,this.smoothingTimeConstant=t.smoothingTimeConstant||0,this.includeSpectrogram=!1!==t.includeSpectrogram,this.includeWaveform=!0===t.includeWaveform,!this.includeSpectrogram&&!this.includeWaveform)throw new Error("Both includeSpectrogram and includeWaveform are false. At least one type of data should be returned.")}summary(){return"microphone"}static async create(t={}){if(a().get("IS_NODE"))throw new Error("microphone API is only supported in browser environment.");const e=new Pg(t);return await e.start(),e}async start(){try{this.stream=await navigator.mediaDevices.getUserMedia({audio:null==this.audioTrackConstraints||this.audioTrackConstraints,video:!1})}catch(t){throw new Error("Error thrown while initializing video stream: "+t.message)}if(!this.stream)throw new Error("Could not obtain audio from microphone.");const t=window.AudioContext||window.webkitAudioContext;if(this.audioContext=new t,this.sampleRateHz){if(this.audioContext.sampleRate!==this.sampleRateHz)throw new Error(`Mismatch in sampling rate: Expected: ${this.sampleRateHz}; Actual: `+this.audioContext.sampleRate)}else this.sampleRateHz=this.audioContext.sampleRate;const e=this.audioContext.createMediaStreamSource(this.stream);this.analyser=this.audioContext.createAnalyser(),this.analyser.fftSize=2*this.fftSize,this.analyser.smoothingTimeConstant=this.smoothingTimeConstant,e.connect(this.analyser),this.freqData=new Float32Array(this.fftSize),this.timeData=new Float32Array(this.fftSize)}async next(){if(this.isClosed)return{value:null,done:!0};let t,e;const n=await this.getAudioData();if(this.includeSpectrogram){const e=this.flattenQueue(n.freqDataQueue);t=this.getTensorFromAudioDataArray(e,[this.numFrames,this.columnTruncateLength,1])}if(this.includeWaveform){const t=this.flattenQueue(n.timeDataQueue);e=this.getTensorFromAudioDataArray(t,[this.numFrames*this.fftSize,1])}return{value:{spectrogram:t,waveform:e},done:!1}}async capture(){return(await this.next()).value}async getAudioData(){const t=[],e=[];let n=0;return new Promise(r=>{const s=setInterval(()=>{this.includeSpectrogram&&(this.analyser.getFloatFrequencyData(this.freqData),this.freqData[0]===-1/0&&r({freqDataQueue:t,timeDataQueue:e}),t.push(this.freqData.slice(0,this.columnTruncateLength))),this.includeWaveform&&(this.analyser.getFloatTimeDomainData(this.timeData),e.push(this.timeData.slice())),++n===this.numFrames&&(clearInterval(s),r({freqDataQueue:t,timeDataQueue:e}))},this.fftSize/this.sampleRateHz*1e3)})}stop(){this.isClosed||(this.isClosed=!0,this.analyser.disconnect(),this.audioContext.close(),null!=this.stream&&this.stream.getTracks().length>0&&this.stream.getTracks()[0].stop())}toArray(){throw new Error("Can not convert infinite audio stream to array.")}getSampleRate(){return this.sampleRateHz}flattenQueue(t){const e=t[0].length,n=new Float32Array(t.length*e);return t.forEach((t,r)=>n.set(t,r*e)),n}getTensorFromAudioDataArray(t,e){const n=new Float32Array(k(e));return n.set(t,n.length-t.length),ce(n,e)}}class Wg extends dg{constructor(t,e){if(super(),this.webcamVideoElement=t,this.webcamConfig=e,this.isClosed=!0,this.resize=!1,this.needToResize())if(this.resize=!0,this.cropSize=[this.webcamConfig.resizeHeight,this.webcamConfig.resizeWidth],this.cropBoxInd=pe([0],"int32"),this.webcamConfig.centerCrop){const t=1*this.webcamConfig.resizeWidth/this.webcamVideoElement.width,e=1*this.webcamConfig.resizeHeight/this.webcamVideoElement.height,n=(1-t)/2,r=(1-e)/2,s=n+t,a=e+r;this.cropBox=fe([r,n,a,s],[1,4])}else this.cropBox=fe([0,0,1,1],[1,4])}summary(){return"webcam"}static async create(t,e={}){if(a().get("IS_NODE"))throw new Error("tf.data.webcam is only supported in browser environment.");if(!t){if(t=document.createElement("video"),!e.resizeWidth||!e.resizeHeight)throw new Error("Please provide webcam video element, or resizeWidth and resizeHeight to create a hidden video element.");t.width=e.resizeWidth,t.height=e.resizeHeight}const n=new Wg(t,e);return await n.start(),n}async start(){this.webcamConfig.facingMode&&v("user"===this.webcamConfig.facingMode||"environment"===this.webcamConfig.facingMode,()=>`Invalid webcam facing mode: ${this.webcamConfig.facingMode}. Please provide 'user' or 'environment'`);try{this.stream=await navigator.mediaDevices.getUserMedia({video:{deviceId:this.webcamConfig.deviceId,facingMode:this.webcamConfig.facingMode?this.webcamConfig.facingMode:"user",width:this.webcamVideoElement.width,height:this.webcamVideoElement.height}})}catch(t){throw t.message="Error thrown while initializing video stream: "+t.message,t}if(!this.stream)throw new Error("Could not obtain video from webcam.");try{this.webcamVideoElement.srcObject=this.stream}catch(t){console.log(t),this.webcamVideoElement.src=window.URL.createObjectURL(this.stream)}return this.webcamVideoElement.play(),this.isClosed=!1,new Promise(t=>{this.webcamVideoElement.onloadedmetadata=()=>{t()}})}async next(){if(this.isClosed)return{value:null,done:!0};let t;try{t=zs(this.webcamVideoElement)}catch(t){throw new Error("Error thrown converting video to pixels: "+JSON.stringify(t))}if(!this.resize)return{value:t,done:!1};try{return{value:this.cropAndResizeFrame(t),done:!1}}catch(t){throw new Error("Error thrown cropping the video: "+t.message)}finally{t.dispose()}}needToResize(){return!(!this.webcamConfig.resizeWidth||!this.webcamConfig.resizeHeight||this.webcamVideoElement.width===this.webcamConfig.resizeWidth&&this.webcamVideoElement.height===this.webcamConfig.resizeHeight)}cropAndResizeFrame(t){return na(()=>{const e=t.toFloat().expandDims(0);let n;n=Sl(e,this.cropBox,this.cropBoxInd,this.cropSize,"bilinear");const r=n.shape;return n.reshape(r.slice(1))})}async capture(){return(await this.next()).value}stop(){this.stream.getTracks().forEach(t=>t.stop());try{this.webcamVideoElement.srcObject=null}catch(t){console.log(t),this.webcamVideoElement.src=null}this.isClosed=!0}toArray(){throw new Error("Can not convert infinite video stream to array.")}}class Vg{}var Ug=_r((function(t,e){var r=n.Buffer;function s(t,e){for(var n in t)e[n]=t[n]}function a(t,e,n){return r(t,e,n)}r.from&&r.alloc&&r.allocUnsafe&&r.allocUnsafeSlow?t.exports=n:(s(n,e),e.Buffer=a),s(r,a),a.from=function(t,e,n){if("number"==typeof t)throw new TypeError("Argument must not be a number");return r(t,e,n)},a.alloc=function(t,e,n){if("number"!=typeof t)throw new TypeError("Argument must be a number");var s=r(t);return void 0!==e?"string"==typeof n?s.fill(e,n):s.fill(e):s.fill(0),s},a.allocUnsafe=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return r(t)},a.allocUnsafeSlow=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return n.SlowBuffer(t)}})),Gg=(Ug.Buffer,Ug.Buffer),jg=Gg.isEncoding||function(t){switch((t=""+t)&&t.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};var qg=Hg;function Hg(t){var e;switch(this.encoding=function(t){var e=function(t){if(!t)return"utf8";for(var e;;)switch(t){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return t;default:if(e)return;t=(""+t).toLowerCase(),e=!0}}(t);if("string"!=typeof e&&(Gg.isEncoding===jg||!jg(t)))throw new Error("Unknown encoding: "+t);return e||t}(t),this.encoding){case"utf16le":this.text=Yg,this.end=Jg,e=4;break;case"utf8":this.fillLast=Xg,e=4;break;case"base64":this.text=Zg,this.end=Qg,e=3;break;default:return this.write=ty,void(this.end=ey)}this.lastNeed=0,this.lastTotal=0,this.lastChar=Gg.allocUnsafe(e)}function Kg(t){return t<=127?0:t>>5==6?2:t>>4==14?3:t>>3==30?4:t>>6==2?-1:-2}function Xg(t){var e=this.lastTotal-this.lastNeed,n=function(t,e,n){if(128!=(192&e[0]))return t.lastNeed=0,"�";if(t.lastNeed>1&&e.length>1){if(128!=(192&e[1]))return t.lastNeed=1,"�";if(t.lastNeed>2&&e.length>2&&128!=(192&e[2]))return t.lastNeed=2,"�"}}(this,t);return void 0!==n?n:this.lastNeed<=t.length?(t.copy(this.lastChar,e,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(t.copy(this.lastChar,e,0,t.length),void(this.lastNeed-=t.length))}function Yg(t,e){if((t.length-e)%2==0){var n=t.toString("utf16le",e);if(n){var r=n.charCodeAt(n.length-1);if(r>=55296&&r<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1],n.slice(0,-1)}return n}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=t[t.length-1],t.toString("utf16le",e,t.length-1)}function Jg(t){var e=t&&t.length?this.write(t):"";if(this.lastNeed){var n=this.lastTotal-this.lastNeed;return e+this.lastChar.toString("utf16le",0,n)}return e}function Zg(t,e){var n=(t.length-e)%3;return 0===n?t.toString("base64",e):(this.lastNeed=3-n,this.lastTotal=3,1===n?this.lastChar[0]=t[t.length-1]:(this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1]),t.toString("base64",e,t.length-n))}function Qg(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+this.lastChar.toString("base64",0,3-this.lastNeed):e}function ty(t){return t.toString(this.encoding)}function ey(t){return t&&t.length?this.write(t):""}Hg.prototype.write=function(t){if(0===t.length)return"";var e,n;if(this.lastNeed){if(void 0===(e=this.fillLast(t)))return"";n=this.lastNeed,this.lastNeed=0}else n=0;return n<t.length?e?e+this.text(t,n):this.text(t,n):e||""},Hg.prototype.end=function(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+"�":e},Hg.prototype.text=function(t,e){var n=function(t,e,n){var r=e.length-1;if(r<n)return 0;var s=Kg(e[r]);if(s>=0)return s>0&&(t.lastNeed=s-1),s;if(--r<n||-2===s)return 0;if((s=Kg(e[r]))>=0)return s>0&&(t.lastNeed=s-2),s;if(--r<n||-2===s)return 0;if((s=Kg(e[r]))>=0)return s>0&&(2===s?s=0:t.lastNeed=s-3),s;return 0}(this,t,e);if(!this.lastNeed)return t.toString("utf8",e);this.lastTotal=n;var r=t.length-(n-this.lastNeed);return t.copy(this.lastChar,0,r),t.toString("utf8",e,r)},Hg.prototype.fillLast=function(t){if(this.lastNeed<=t.length)return t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,t.length),this.lastNeed-=t.length};var ny={StringDecoder:qg};class ry extends dg{split(t){return new sy(this,t)}}class sy extends ry{constructor(t,e){super(),this.upstream=t,this.impl=new ay(t,e)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class ay extends Ng{constructor(t,e){super(),this.upstream=t,this.separator=e,this.carryover=""}summary(){return`${this.upstream.summary()} -> Split('${this.separator}')`}async pump(){const t=await this.upstream.next();if(t.done)return""!==this.carryover&&(this.outputQueue.push(this.carryover),this.carryover="",!0);const e=t.value.split(this.separator);e[0]=this.carryover+e[0];for(const t of e.slice(0,-1))this.outputQueue.push(t);return this.carryover=e[e.length-1],!0}}class iy extends dg{decodeUTF8(){return new oy(this)}}class oy extends ry{constructor(t){super(),this.upstream=t,this.impl=new ly(t)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class ly extends Ng{constructor(t){if(super(),this.upstream=t,a().get("IS_BROWSER"))this.decoder=new TextDecoder("utf-8");else{const{StringDecoder:t}=ny;this.decoder=new t("utf8")}}summary(){return this.upstream.summary()+" -> Utf8"}async pump(){const t=await this.upstream.next();let e,n;return!t.done&&(e=t.value,n=a().get("IS_BROWSER")?this.decoder.decode(e,{stream:!0}):this.decoder.write(Buffer.from(e.buffer)),this.outputQueue.push(n),!0)}}class uy extends iy{constructor(t,e={}){super(),this.file=t,this.options=e,v(t instanceof Uint8Array||!!a().get("IS_BROWSER")&&(t instanceof File||t instanceof Blob),()=>"FileChunkIterator only supports File, Blob and Uint8Array right now."),this.offset=e.offset||0,this.chunkSize=e.chunkSize||1048576}summary(){return"FileChunks "+this.file}async next(){if(this.offset>=(this.file instanceof Uint8Array?this.file.byteLength:this.file.size))return{value:null,done:!0};const t=new Promise((t,e)=>{const n=this.offset+this.chunkSize;if(this.file instanceof Uint8Array)t(new Uint8Array(this.file.slice(this.offset,n)));else{const r=new FileReader;r.onload=n=>{let s=r.result;if(s instanceof ArrayBuffer&&(s=new Uint8Array(s)),!(s instanceof Uint8Array))return e(new TypeError("FileReader returned unknown type."));t(s)},r.onabort=t=>e(new Error("Aborted")),r.onerror=t=>e(new Error(t.type));const s=this.file.slice(this.offset,n);r.readAsArrayBuffer(s)}this.offset=n});return{value:await t,done:!1}}}const cy=t=>({method:t.method,headers:t.headers,body:t.body,mode:t.mode,credentials:t.credentials,cache:t.cache,redirect:t.redirect,referrer:t.referrer,integrity:t.integrity});function hy(t){return"string"==typeof t&&"file://"===t.substr(0,7)}class dy extends Vg{constructor(t,e={}){super(),this.input=t,this.options=e}async iterator(){if(hy(this.input)&&a().get("IS_NODE")){const t=r;this.input=t.readFileSync(this.input.substr(7))}return new uy(this.input,this.options)}}class py extends Vg{constructor(t,e={}){super(),this.url=t,this.fileOptions=e}async iterator(){return hy(this.url)?new dy(this.url,this.fileOptions).iterator():async function(t,e={}){let n,r;"string"==typeof t?n=t:(n=t.url,r=cy(t));const s=await nt(n,r);if(s.ok){const t=new Uint8Array(await s.arrayBuffer());return new uy(t,e)}throw new Error(s.statusText)}(this.url,this.fileOptions)}}var fy=Object.freeze({__proto__:null,array:function(t){return Tg(async()=>cg(t),t.length)},Dataset:Rg,zip:function(t){if(!ag(t))throw new Error("The argument to zip() must be an object or array.");let e;if(Array.isArray(t))for(let n=0;n<t.length;n++)e=null==e?t[n].size:Math.min(e,t[n].size);else if(t instanceof Object)for(const n in t)e=null==e?t[n].size:Math.min(e,t[n].size);return Tg(async()=>function(t,e=Ig.FAIL){return new Eg(t,e)}(await sg(t,t=>{if(t instanceof Rg)return{value:t.iterator(),recurse:!1};if(ag(t))return{value:null,recurse:!0};throw new Error("Leaves of the structure passed to zip() must be Datasets, not primitives.")}),Ig.SHORTEST),e)},CSVDataset:Bg,TextLineDataset:_g,csv:function(t,e={}){return new Bg(new py(t),e)},func:function(t){const e=hg(t);return Tg(async()=>e)},generator:function(t){return Tg(async()=>{const e=await t();return hg(()=>e.next())})},microphone:async function(t){return Pg.create(t)},webcam:async function(t,e){return Wg.create(t,e)},FileDataSource:dy,URLDataSource:py,version_data:"2.0.0-rc.1"});function my(t,e){Array.isArray(t)||(t=[t]),t.forEach(t=>{null!=t&&v("complex64"!==t.dtype,()=>e+" does not support complex64 tensors.")})}function gy(t,e,n,r,s,a){const i=s.strideHeight,o=s.strideWidth,l=s.dilationHeight,u=s.dilationWidth,c=s.effectiveFilterHeight,h=s.effectiveFilterWidth,d=s.padInfo.top,p=s.padInfo.left,f="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=je(s.outShape,n),g=m.values,y=s.outShape[1]*s.outShape[2]*s.outShape[3],b=s.outShape[2]*s.outShape[3],x=s.outShape[3];for(let e=0;e<s.batchSize;++e){const n=e*y,m=e*r[0];for(let e=0;e<s.inChannels;++e)for(let y=0;y<s.outHeight;++y){const w=y*i-d,v=Math.max(0,w),C=Math.min(s.inHeight,c+w),N=n+y*b;for(let n=0;n<s.outWidth;++n){const i=n*o-p,c=Math.max(0,i),d=Math.min(s.inWidth,h+i);let y=f,b=0,w=0;for(let n=v;n<C;n+=l){const s=m+n*r[1];for(let n=c;n<d;n+=u){const i=t[s+n*r[2]+e];"max"===a&&i>y?y=i:"avg"===a&&(b+=i,w++)}if(isNaN(y))break}g[N+n*x+e]="avg"===a?b/w:y}}}return m}function yy(t,e,n,r,s=!1,a=!1){const i=je(r.outShape,"int32"),o=r.strideHeight,l=r.strideWidth,u=r.dilationHeight,c=r.dilationWidth,h=r.effectiveFilterHeight,d=r.effectiveFilterWidth,p=r.padInfo.top,f=r.padInfo.left,m=je(e,n,t);for(let t=0;t<r.batchSize;++t)for(let e=0;e<r.inChannels;++e)for(let n=0;n<r.outHeight;++n){const g=n*o-p;let y=g;for(;y<0;)y+=u;const b=Math.min(r.inHeight,h+g);for(let o=0;o<r.outWidth;++o){const h=o*l-f;let p=h;for(;p<0;)p+=c;const x=Math.min(r.inWidth,d+h);let w=Number.NEGATIVE_INFINITY,v=-1;for(let n=y;n<b;n+=u){const i=n-g;for(let o=p;o<x;o+=c){const l=o-h,u=m.get(t,n,o,e);u>w&&(w=u,v=s?a?((t*r.inHeight+n)*r.inWidth+o)*r.inChannels+e:(n*r.inWidth+o)*r.inChannels+e:i*d+l)}}i.set(v,t,n,o,e)}}return i}const by=hl,xy=hu,wy=du,vy=pu,Cy=$a;function Ny(t,e,n,r){if("linear"===n)return t.linear(e);if("relu"===n)return t.relu(e);if("elu"===n)return t.elu(e);if("relu6"===n)return t.relu6(e);if("prelu"===n)return t.prelu(e,r);throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}class Sy extends gu{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new mu(this,ta())}write(t,e,n){this.firstUse&&(this.firstUse=!1,a().get("IS_NODE")&&Zl("\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"));const r={};return this.data.set(r,{values:t,dtype:n}),r}move(t,e,n,r){this.data.set(t,{values:e,dtype:r})}numDataIds(){return this.data.numDataIds()}async read(t){return this.readSync(t)}readSync(t){const{dtype:e,complexTensors:n}=this.data.get(t);if("complex64"===e){return Ql(this.readSync(n.real.dataId),this.readSync(n.imag.dataId))}return this.data.get(t).values}bufferSync(t){const e=this.readSync(t.dataId);let n=e;if("string"===t.dtype)try{n=e.map(t=>st(t))}catch(t){throw new Error("Failed to decode encoded string bytes into utf-8")}return je(t.shape,t.dtype,n)}makeOutput(t,e,n){const r=this.write(t,e,n);return ta().makeTensorFromDataId(r,e,n,this)}disposeData(t){if(this.data.has(t)){const{complexTensors:e}=this.data.get(t);null!=e&&(e.real.dispose(),e.imag.dispose()),this.data.delete(t)}}async time(t){const e=tt();return t(),{kernelMs:tt()-e}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}complex(t,e){const n=this.makeOutput(null,t.shape,"complex64");return this.data.get(n.dataId).complexTensors={real:ta().keep(t.clone()),imag:ta().keep(e.clone())},n}real(t){return this.data.get(t.dataId).complexTensors.real.clone()}imag(t){return this.data.get(t.dataId).complexTensors.imag.clone()}slice(t,e,n){if(my(t,"slice"),vr(t.shape,e,n)){const r=Cr(e,t.strides),s=k(n);return ce(this.readSync(t.dataId).subarray(r,r+s),n,t.dtype)}const r=je(n,t.dtype),s=this.bufferSync(t);for(let t=0;t<r.size;++t){const n=r.indexToLoc(t).map((t,n)=>t+e[n]);r.values[t]=s.get(...n)}return r.toTensor()}stridedSlice(t,e,n,r){my(t,"stridedSlice");const s=br(e,n,r);if(s.some(t=>0===t))return ce([],s);const a=je(s,t.dtype),i=this.bufferSync(t);for(let t=0;t<a.size;t++){const n=a.indexToLoc(t),s=new Array(n.length);for(let t=0;t<s.length;t++)s[t]=n[t]*r[t]+e[t];a.set(i.get(...s),...n)}return a.toTensor()}diag(t){const e=this.readSync(t.dataId),n=je([t.size,t.size],t.dtype),r=n.values;for(let n=0;n<e.length;n++)r[n*t.size+n]=e[n];return n.toTensor()}unstack(t,e){const n=t.shape[e],r=new Array(t.rank-1);let s=0;for(let n=0;n<t.rank;n++)n!==e&&(r[s++]=t.shape[n]);const a=new Array(t.rank).fill(0),i=t.shape.slice();i[e]=1;const o=new Array(n);for(let n=0;n<o.length;n++)a[e]=n,o[n]=this.slice(t,a,i).reshape(r);return o}reverse(t,e){my(t,"reverse");const n=je(t.shape,t.dtype),r=this.bufferSync(t);for(let s=0;s<n.size;s++){const a=n.indexToLoc(s),i=a.slice();e.forEach(e=>i[e]=t.shape[e]-1-i[e]),n.set(r.get(...i),...a)}return n.toTensor()}concat(t,e){if("complex64"===t[0].dtype){const n=t.map(t=>le(t)),r=t.map(t=>ue(t));return oe(this.concat(n,e),this.concat(r,e))}const n=t.map(t=>{const n=k(t.shape.slice(e));return t.as2D(-1,n)}),r=Ue(n.map(t=>t.shape),1),s=je(r,t[0].dtype).values;if(1===n[0].shape[0]){let t=0;n.forEach(e=>{s.set(this.readSync(e.dataId),t),t+=e.size})}else{let t=0;n.forEach(e=>{const n=this.readSync(e.dataId);let a=0;for(let i=0;i<e.shape[0];++i){const o=i*r[1]+t;for(let t=0;t<e.shape[1];++t)s[o+t]=n[a++]}t+=e.shape[1]})}const a=Ue(t.map(t=>t.shape),e);return ce(s,a,t[0].dtype)}neg(t){return my(t,"neg"),this.multiply(de(-1),t)}add(t,e){return"complex64"===t.dtype||"complex64"===e.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),e.cast("complex64"),(t,e,n,r)=>({real:t+n,imag:e+r})):this.broadcastedBinaryOp(t,e,It(t.dtype,e.dtype),(t,e)=>t+e)}addN(t){my(t,"addN");const e=t.map(t=>this.readSync(t.dataId)),n=je(t[0].shape,t[0].dtype),r=n.values;for(let n=0;n<t.length;n++){const t=e[n];for(let e=0;e<r.length;e++)r[e]+=t[e]}return n.toTensor()}softmax(t,e){const n=_([e],t.shape),r=this.max(t,n),s=ee(r.shape,n),a=this.subtract(t,r.reshape(s)),i=this.exp(a),o=this.sum(i,n).reshape(s);return nr(i,o)}subtract(t,e){return"complex64"===t.dtype||"complex64"===e.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),e.cast("complex64"),(t,e,n,r)=>({real:t-n,imag:e-r})):this.broadcastedBinaryOp(t,e,It(t.dtype,e.dtype),(t,e)=>t-e)}pow(t,e){return my([t,e],"pow"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>Math.pow(t,e))}batchMatMul(t,e,n,r){my([t,e],"matMul");const s=n?t.shape[1]:t.shape[2],a=n?t.shape[2]:t.shape[1],i=r?e.shape[1]:e.shape[2],o=t.shape[0],l=this.readSync(t.dataId),u=this.readSync(e.dataId),[c,h,d]=n?[t.strides[0],1,t.strides[1]]:[t.strides[0],t.strides[1],1],[p,f,m]=r?[1,e.strides[1],e.strides[0]]:[e.strides[1],1,e.strides[0]],g=a*i,y=je([o,a,i],t.dtype),b=y.values,x=this.blockSize;for(let t=0;t<o;t++)for(let e=0;e<a;e+=x)for(let n=0;n<i;n+=x)for(let r=0;r<s;r+=x){const o=Math.min(e+x,a),y=Math.min(n+x,i),w=Math.min(r+x,s);for(let s=e;s<o;s++)for(let e=n;e<y;e++){let n=0;for(let a=r;a<w;a++)n+=l[t*c+s*h+a*d]*u[a*p+e*f+t*m];b[t*g+(s*i+e)]+=n}}return y.toTensor()}fusedBatchMatMul({a:t,b:e,transposeA:n,transposeB:r,bias:s,activation:a,preluActivationWeights:i}){let o=this.batchMatMul(t,e,n,r);return s&&(o=this.add(o,s)),a&&(o=Ny(this,o,a,i)),o}multiply(t,e){return"complex64"===t.dtype||"complex64"===e.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),e.cast("complex64"),(t,e,n,r)=>({real:t*n-e*r,imag:t*r+e*n})):this.broadcastedBinaryOp(t,e,It(t.dtype,e.dtype),(t,e)=>t*e)}floorDiv(t,e){my([t,e],"floorDiv");return this.broadcastedBinaryOp(t,e,"int32",(t,e)=>Math.floor(t/e))}sum(t,e){my(t,"sum"),ne("sum",e,t.rank);const[n,r]=te(t.shape,e),s=ve(n,It(t.dtype,"int32")),a=k(r),i=this.readSync(s.dataId),o=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*a;let n=0;for(let t=0;t<a;++t)n+=o[e+t];i[t]=n}return s}prod(t,e){my(t,"sum");const[n,r]=te(t.shape,e),s=ve(n,It(t.dtype,"int32")),a=k(r),i=this.readSync(s.dataId),o=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*a;let n=1;for(let t=0;t<a;++t)n*=o[e+t];i[t]=n}return s}unsortedSegmentSum(t,e,n){my(t,"unsortedSegmentSum");const r=[],s=t.rank-e.rank;for(let t=0;t<s;++t)e=e.expandDims(t+1);for(let s=0;s<n;++s){const n=de(s,"int32"),a=ii(n,e).asType("float32").mul(t).sum(0);r.push(a)}return en(r)}argMin(t,e){my(t,"argMin");const n=[e];ne("argMin",n,t.rank);const[r,s]=te(t.shape,n),a=ve(r,"int32"),i=k(s),o=this.readSync(a.dataId),l=this.readSync(t.dataId);for(let t=0;t<o.length;++t){const e=t*i;let n=l[e],r=0;for(let t=0;t<i;++t){const s=l[e+t];s<n&&(n=s,r=t)}o[t]=r}return a}argMax(t,e){my(t,"argMax");const n=[e];ne("argMax",n,t.rank);const[r,s]=te(t.shape,n),a=ve(r,"int32"),i=k(s),o=this.readSync(a.dataId),l=this.readSync(t.dataId);for(let t=0;t<o.length;++t){const e=t*i;let n=l[e],r=0;for(let t=0;t<i;++t){const s=l[e+t];s>n&&(n=s,r=t)}o[t]=r}return a}cumsum(t,e,n,r){if(my(t,"cumsum"),e!==t.rank-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${t.rank-1} but got axis=`+e);const s=It(t.dtype,"int32"),a=ve(t.shape,s),i=this.readSync(a.dataId),o=this.readSync(t.dataId),l=t.shape[t.rank-1],u=r?(t,e)=>t+l-e-1:(t,e)=>t+e;for(let t=0;t<o.length;t+=l)for(let e=0;e<l;e++){const r=u(t,e);if(0===e)i[r]=n?0:o[r];else{const s=u(t,e-1);i[r]=n?o[s]+i[s]:o[r]+i[s]}}return a}equal(t,e){return my([t,e],"equal"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t===e?1:0)}notEqual(t,e){return my([t,e],"notEqual"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t!==e?1:0)}less(t,e){return my([t,e],"less"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t<e?1:0)}lessEqual(t,e){return my([t,e],"lessEqual"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t<=e?1:0)}greater(t,e){return my([t,e],"greater"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t>e?1:0)}greaterEqual(t,e){return my([t,e],"greaterEqual"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t>=e?1:0)}logicalNot(t){my(t,"logicalNot");const e=this.readSync(t.dataId),n=new Uint8Array(e.length);for(let t=0;t<e.length;++t)n[t]=e[t]?0:1;return this.makeOutput(n,t.shape,"bool")}logicalAnd(t,e){return my([t,e],"logicalAnd"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t&&e)}logicalOr(t,e){return my([t,e],"logicalOr"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t||e)}select(t,e,n){my([t,e,n],"select");const r=this.readSync(t.dataId),s=this.readSync(e.dataId),a=this.readSync(n.dataId),i=ve(e.shape,It(e.dtype,n.dtype)),o=this.readSync(i.dataId);let l=0;const u=0===t.rank||t.rank>1||1===e.rank?1:k(e.shape.slice(1));for(let t=0;t<r.length;t++)for(let e=0;e<u;e++)1===r[t]?o[l++]=s[t]:o[l++]=a[t];return i}where(t){my([t],"where");const e=this.readSync(t.dataId);return Cy(t.shape,e)}topk(t,e,n){my(t,"topk");const r=this.readSync(t.dataId);return vy(r,t.shape,t.dtype,e)}min(t,e){my(t,"min"),ne("min",e,t.rank);const[n,r]=te(t.shape,e),s=ve(n,t.dtype),a=k(r),i=this.readSync(s.dataId),o=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*a;let n=o[e];for(let t=0;t<a;++t){const r=o[e+t];r<n&&(n=r)}i[t]=n}return s}minimum(t,e){return my([t,e],"minimum"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>Math.min(t,e))}mod(t,e){return my([t,e],"mod"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>{const n=t%e;return t<0&&e<0||t>=0&&e>=0?n:(n+e)%e})}max(t,e){my(t,"max"),ne("max",e,t.rank);const[n,r]=te(t.shape,e),s=ve(n,t.dtype),a=k(r),i=this.readSync(s.dataId),o=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*a;let n=o[e];for(let t=0;t<a;++t){const r=o[e+t];r>n&&(n=r)}i[t]=n}return s}maximum(t,e){return my([t,e],"maximum"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>Math.max(t,e))}all(t,e){my(t,"all"),ne("all",e,t.rank);const[n,r]=te(t.shape,e),s=ve(n,t.dtype),a=k(r),i=this.readSync(s.dataId),o=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*a;let n=o[e];for(let t=0;t<a;++t){const r=o[e+t];n=n&&r}i[t]=n}return s}any(t,e){my(t,"any"),ne("any",e,t.rank);const[n,r]=te(t.shape,e),s=ve(n,t.dtype),a=k(r),i=this.readSync(s.dataId),o=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*a;let n=o[e];for(let t=0;t<a;++t){const r=o[e+t];n=n||r}i[t]=n}return s}squaredDifference(t,e){return my([t,e],"squaredDifference"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>{const n=t-e;return n*n})}ceil(t){my(t,"ceil");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t)n[t]=Math.ceil(e[t]);return this.makeOutput(n,t.shape,"float32")}floor(t){my(t,"floor");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t)n[t]=Math.floor(e[t]);return this.makeOutput(n,t.shape,"float32")}sign(t){my(t,"x");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t)e[t]<0?n[t]=-1:e[t]>0?n[t]=1:n[t]=0;return this.makeOutput(n,t.shape,"float32")}isNaN(t){my(t,"x");const e=this.readSync(t.dataId),n=new Uint8Array(e.length);for(let t=0;t<e.length;++t)Number.isNaN(e[t])&&(n[t]=1);return this.makeOutput(n,t.shape,"bool")}isInf(t){my(t,"x");const e=this.readSync(t.dataId),n=new Uint8Array(e.length);for(let t=0;t<e.length;++t)Math.abs(e[t])===1/0&&(n[t]=1);return this.makeOutput(n,t.shape,"bool")}isFinite(t){my(t,"x");const e=this.readSync(t.dataId),n=new Uint8Array(e.length);for(let t=0;t<e.length;++t)Number.isFinite(e[t])&&(n[t]=1);return this.makeOutput(n,t.shape,"bool")}round(t){my(t,"round");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t){const r=Math.floor(e[t]);e[t]-r<.5?n[t]=Math.floor(e[t]):e[t]-r>.5?n[t]=Math.ceil(e[t]):n[t]=r%2==0?r:r+1}return this.makeOutput(n,t.shape,"float32")}exp(t){my(t,"exp");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t)n[t]=Math.exp(e[t]);return this.makeOutput(n,t.shape,"float32")}expm1(t){my(t,"expm1");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t)n[t]=Math.expm1(e[t]);return this.makeOutput(n,t.shape,"float32")}log(t){my(t,"log");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t){const r=e[t];n[t]=Math.log(r)}return this.makeOutput(n,t.shape,"float32")}log1p(t){my(t,"log1p");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t){const r=e[t];n[t]=Math.log1p(r)}return this.makeOutput(n,t.shape,"float32")}sqrt(t){my(t,"sqrt");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t){const r=e[t];n[t]=Math.sqrt(r)}return this.makeOutput(n,t.shape,"float32")}rsqrt(t){my(t,"rsqrt");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t){const r=e[t];n[t]=1/Math.sqrt(r)}return this.makeOutput(n,t.shape,"float32")}reciprocal(t){my(t,"reciprocal");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t)n[t]=1/e[t];return this.makeOutput(n,t.shape,"float32")}linear(t){return t}relu(t){my(t,"relu");const e=ve(t.shape,t.dtype),n=this.readSync(e.dataId),r=this.readSync(t.dataId);for(let t=0;t<r.length;++t)n[t]=Math.max(0,r[t]);return e}relu6(t){my(t,"relu");const e=ve(t.shape,t.dtype),n=this.readSync(e.dataId),r=this.readSync(t.dataId);for(let t=0;t<r.length;++t)n[t]=Math.min(Math.max(0,r[t]),6);return e}prelu(t,e){return my([t,e],"prelu"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>t<0?e*t:t)}elu(t){my(t,"elu");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t){const r=n[t];e[t]=r>=0?r:Math.exp(r)-1}return this.makeOutput(e,t.shape,"float32")}eluDer(t,e){my([t,e],"eluDer");const n=new Float32Array(e.size),r=this.readSync(e.dataId),s=this.readSync(t.dataId);for(let t=0;t<r.length;++t){const e=r[t];n[t]=e>=1?s[t]:s[t]*(e+1)}return this.makeOutput(n,e.shape,"float32")}selu(t){my(t,"selu");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t){const r=n[t];e[t]=r>=0?1.0507009873554805*r:1.7580993408473768*(Math.exp(r)-1)}return this.makeOutput(e,t.shape,"float32")}clip(t,e,n){my(t,"clip");const r=new Float32Array(t.size),s=this.readSync(t.dataId);for(let t=0;t<s.length;++t){const a=s[t];r[t]=a>n?n:a<e?e:a}return this.makeOutput(r,t.shape,"float32")}abs(t){const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.abs(n[t]);return this.makeOutput(e,t.shape,"float32")}complexAbs(t){const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let r=0;r<t.size;++r){const t=n[2*r],s=n[2*r+1];e[r]=Math.hypot(t,s)}return this.makeOutput(e,t.shape,"float32")}int(t){my(t,"int");const e=new Int32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=n[t];return this.makeOutput(e,t.shape,"int32")}sigmoid(t){my(t,"sigmoid");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=1/(1+Math.exp(-n[t]));return this.makeOutput(e,t.shape,"float32")}softplus(t){my(t,"softplus");const e=Math.log(1.1920928955078125e-7)+2,n=new Float32Array(t.size),r=this.readSync(t.dataId);for(let t=0;t<r.length;++t){const s=r[t]>-e,a=r[t]<e,i=Math.exp(r[t]);let o;o=a?i:s?r[t]:Math.log(1+i),n[t]=o}return this.makeOutput(n,t.shape,"float32")}sin(t){my(t,"sin");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.sin(n[t]);return this.makeOutput(e,t.shape,"float32")}cos(t){my(t,"cos");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.cos(n[t]);return this.makeOutput(e,t.shape,"float32")}tan(t){my(t,"tan");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.tan(n[t]);return this.makeOutput(e,t.shape,"float32")}asin(t){my(t,"asin");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.asin(n[t]);return this.makeOutput(e,t.shape,"float32")}acos(t){my(t,"acos");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.acos(n[t]);return this.makeOutput(e,t.shape,"float32")}atan(t){my(t,"atan");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.atan(n[t]);return this.makeOutput(e,t.shape,"float32")}atan2(t,e){return my([t,e],"atan2"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>Math.atan2(t,e))}sinh(t){my(t,"sinh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.sinh(n[t]);return this.makeOutput(e,t.shape,"float32")}cosh(t){my(t,"cosh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.cosh(n[t]);return this.makeOutput(e,t.shape,"float32")}tanh(t){my(t,"tanh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=$(n[t]);return this.makeOutput(e,t.shape,"float32")}asinh(t){my(t,"asinh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.asinh(n[t]);return this.makeOutput(e,t.shape,"float32")}acosh(t){my(t,"acosh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.acosh(n[t]);return this.makeOutput(e,t.shape,"float32")}atanh(t){my(t,"atanh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.atanh(n[t]);return this.makeOutput(e,t.shape,"float32")}erf(t){my(t,"erf");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t){const r=Math.sign(n[t]),s=Math.abs(n[t]),a=1/(1+.3275911*s);e[t]=r*(1-((((1.061405429*a-1.453152027)*a+1.421413741)*a-.284496736)*a+.254829592)*a*Math.exp(-s*s))}return this.makeOutput(e,t.shape,"float32")}step(t,e=0){my(t,"step");const n=new Float32Array(t.size),r=this.readSync(t.dataId);for(let t=0;t<r.length;++t){const s=r[t];isNaN(s)?n[t]=NaN:n[t]=s>0?1:e}return this.makeOutput(n,t.shape,"float32")}fusedConv2d({input:t,filter:e,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){let i=this.conv2d(t,e,n);return r&&(i=this.add(i,r)),s&&(i=Ny(this,i,s,a)),i}conv2d(t,e,n){my([t,e],"conv2d");const r=n.filterHeight,s=n.filterWidth,a=n.dilationHeight,i=n.dilationWidth,o=n.padInfo.left,l=n.padInfo.top,u="channelsLast"===n.dataFormat,c=je(n.outShape,t.dtype),h=t.strides[0],d=u?t.strides[1]:t.strides[2],p=u?t.strides[2]:1,f=u?1:t.strides[1],m=c.strides[0],g=u?c.strides[1]:c.strides[2],y=u?c.strides[2]:1,b=u?1:c.strides[1],x=this.readSync(t.dataId),w=this.readSync(e.dataId),v=c.values;for(let t=0;t<n.batchSize;++t){const u=t*h,c=t*m;for(let t=0;t<n.outHeight;++t){const h=c+t*g,m=t*n.strideHeight-l;for(let t=0;t<r;t++){const r=m+t*a;if(r<0||r>=n.inHeight)continue;const l=t*e.strides[0],c=u+r*d;for(let t=0;t<n.outWidth;++t){const r=h+t*y,a=t*n.strideWidth-o;for(let t=0;t<s;t++){const s=a+t*i;if(s<0||s>=n.inWidth)continue;const o=c+s*p;let u=l+t*e.strides[1];for(let t=0;t<n.inChannels;++t){const e=x[o+t*f];for(let t=0;t<n.outChannels;++t)v[r+t*b]+=e*w[u+t];u+=n.outChannels}}}}}}return c.toTensor()}conv3d(t,e,n){const r=n.filterDepth,s=n.filterHeight,a=n.filterWidth,i=n.dilationDepth,o=n.dilationHeight,l=n.dilationWidth,u=n.padInfo.front,c=n.padInfo.left,h=n.padInfo.top,d=je(n.outShape,t.dtype),p=this.readSync(t.dataId),f=this.readSync(e.dataId),m=d.values;for(let g=0;g<n.batchSize;++g){const y=g*t.strides[0],b=g*d.strides[0];for(let g=0;g<n.outDepth;++g){const x=b+g*d.strides[1],w=g*n.strideDepth-u;for(let u=0;u<r;u++){const r=w+u*i;if(r<0||r>=n.inDepth)continue;const g=u*e.strides[0],b=y+r*t.strides[1];for(let r=0;r<n.outHeight;++r){const i=x+r*d.strides[2],u=r*n.strideHeight-h;for(let r=0;r<s;r++){const s=u+r*o;if(s<0||s>=n.inHeight)continue;const h=g+r*e.strides[1],d=b+s*t.strides[2];for(let t=0;t<n.outWidth;++t){const r=i+t*n.outChannels,s=t*n.strideWidth-c;for(let t=0;t<a;t++){const a=s+t*l;if(a<0||a>=n.inWidth)continue;const i=h+t*e.strides[2],o=d+a*n.inChannels;let u=i;for(let t=0;t<n.inChannels;++t){const e=p[o+t];for(let t=0;t<n.outChannels;++t)m[r+t]+=e*f[u+t];u+=n.outChannels}}}}}}}}return d.toTensor()}conv2dDerInput(t,e,n){my([t,e],"conv2dDerInput");const r=je(n.inShape,"float32"),s=r.values,a=this.readSync(t.dataId),i=this.readSync(e.dataId),[o,l,u]=e.strides,{batchSize:c,filterHeight:h,filterWidth:d,inChannels:p,inHeight:f,inWidth:m,outChannels:g,outHeight:y,outWidth:b,strideHeight:x,strideWidth:w,dataFormat:v}=n,C=h-1-n.padInfo.top,N=d-1-n.padInfo.left,S="channelsLast"===v,k=r.strides[0],I=S?r.strides[1]:r.strides[2],E=S?r.strides[2]:1,$=S?1:r.strides[1],A=t.strides[0],R=S?t.strides[1]:t.strides[2],T=S?t.strides[2]:1,D=S?1:t.strides[1];for(let t=0;t<c;++t)for(let e=0;e<p;++e)for(let n=0;n<f;++n){const r=n-C,c=Math.max(0,Math.ceil(r/x)),p=Math.min(y,(h+r)/x);for(let f=0;f<m;++f){const m=f-N,y=Math.max(0,Math.ceil(m/w)),v=Math.min(b,(d+m)/w);let C=0;for(let n=c;n<p;++n){const s=n*x-r;for(let r=y;r<v;++r){const c=A*t+R*n+T*r,p=o*(h-1-s)+l*(d-1-(r*w-m))+u*e;for(let t=0;t<g;++t){C+=a[c+D*t]*i[p+t]}}}s[k*t+I*n+E*f+$*e]=C}}return r.toTensor()}conv3dDerInput(t,e,n){const r=je(n.inShape,"float32"),s=r.values,[a,i,o,l]=r.strides,u=this.readSync(t.dataId),[c,h,d,p]=t.strides,f=this.readSync(e.dataId),[m,g,y,b]=e.strides,{batchSize:x,filterDepth:w,filterHeight:v,filterWidth:C,inChannels:N,inDepth:S,inHeight:k,inWidth:I,outChannels:E,outDepth:$,outHeight:A,outWidth:R,strideDepth:T,strideHeight:D,strideWidth:_}=n,O=w-1-n.padInfo.front,F=v-1-n.padInfo.top,M=C-1-n.padInfo.left;for(let t=0;t<x;++t)for(let e=0;e<N;++e)for(let n=0;n<S;++n){const r=n-O,x=Math.max(0,Math.ceil(r/T)),N=Math.min($,(w+r)/T);for(let S=0;S<k;++S){const k=S-F,$=Math.max(0,Math.ceil(k/D)),O=Math.min(A,(v+k)/D);for(let A=0;A<I;++A){const I=A-M,F=Math.max(0,Math.ceil(I/_)),z=Math.min(R,(C+I)/_);let L=0;for(let n=x;n<N;++n){const s=n*T-r;for(let r=$;r<O;++r){const a=r*D-k;for(let i=F;i<z;++i){const o=c*t+h*n+d*r+p*i,l=m*(w-1-s)+g*(v-1-a)+y*(C-1-(i*_-I))+b*e;for(let t=0;t<E;++t){L+=u[o+t]*f[l+t]}}}}s[a*t+i*n+o*S+l*A+e]=L}}}return r.toTensor()}conv2dDerFilter(t,e,n){my([t,e],"conv2dDerFilter");const r=n.strideHeight,s=n.strideWidth,a=n.filterHeight,i=n.filterWidth,o="channelsLast"===n.dataFormat,l=je(n.filterShape,"float32"),u=n.padInfo.left,c=n.padInfo.top,h=this.bufferSync(t),d=this.bufferSync(e);for(let t=0;t<a;++t){const e=Math.max(0,Math.ceil((c-t)/r)),a=Math.min(n.outHeight,(n.inHeight+c-t)/r);for(let p=0;p<i;++p){const i=Math.max(0,Math.ceil((u-p)/s)),f=Math.min(n.outWidth,(n.inWidth+u-p)/s);for(let m=0;m<n.inChannels;++m)for(let g=0;g<n.outChannels;++g){let y=0;for(let l=0;l<n.batchSize;++l)for(let n=e;n<a;++n){const e=t+n*r-c;for(let t=i;t<f;++t){const r=p+t*s-u;y+=o?h.get(l,e,r,m)*d.get(l,n,t,g):h.get(l,m,e,r)*d.get(l,g,n,t)}}l.set(y,t,p,m,g)}}}return l.toTensor()}conv3dDerFilter(t,e,n){const r=n.strideDepth,s=n.strideHeight,a=n.strideWidth,i=n.filterDepth,o=n.filterHeight,l=n.filterWidth,u=je(n.filterShape,"float32"),c=u.values,[h,d,p,f]=u.strides,m=this.readSync(e.dataId),[g,y,b,x]=e.strides,w=this.readSync(t.dataId),[v,C,N,S]=t.strides,k=n.padInfo.front,I=n.padInfo.left,E=n.padInfo.top;for(let t=0;t<i;++t){const e=Math.max(0,Math.ceil((k-t)/r)),i=Math.min(n.outDepth,(n.inDepth+k-t)/r),u=t*h;for(let h=0;h<o;++h){const o=Math.max(0,Math.ceil((E-h)/s)),$=Math.min(n.outHeight,(n.inHeight+E-h)/s),A=h*d+u;for(let u=0;u<l;++u){const l=Math.max(0,Math.ceil((I-u)/a)),d=Math.min(n.outWidth,(n.inWidth+I-u)/a),R=u*p+A;for(let p=0;p<n.inChannels;++p){const A=p*f+R;for(let f=0;f<n.outChannels;++f){let R=0;for(let c=0;c<n.batchSize;++c){const n=c*v,A=c*g;for(let c=e;c<i;++c){const e=(t+c*r-k)*C+n,i=c*y+A;for(let t=o;t<$;++t){const n=(h+t*s-E)*N+e,r=t*b+i;for(let t=l;t<d;++t){const e=t*x+r;R+=w[(u+t*a-I)*S+n+p]*m[e+f]}}}}c[A+f]=R}}}}}return u.toTensor()}fusedDepthwiseConv2D({input:t,filter:e,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){let i=this.depthwiseConv2D(t,e,n);return r&&(i=this.add(i,r)),s&&(i=Ny(this,i,s,a)),i}depthwiseConv2D(t,e,n){my([t,e],"depthwiseConv2D");const r=n.filterHeight,s=n.filterWidth,a=n.dilationHeight,i=n.dilationWidth,o=n.padInfo.left,l=n.padInfo.top,u=n.outChannels/n.inChannels,c=je(n.outShape,t.dtype),h=this.readSync(t.dataId),d=this.readSync(e.dataId),p=c.values;for(let f=0;f<n.batchSize;++f){const m=f*t.strides[0],g=f*c.strides[0];for(let f=0;f<n.outHeight;++f){const y=g+f*c.strides[1],b=f*n.strideHeight-o;for(let o=0;o<r;++o){const r=b+o*a;if(r<0||r>=n.inHeight)continue;const f=o*e.strides[0],g=m+r*t.strides[1];for(let t=0;t<n.outWidth;++t){const r=y+t*c.strides[2],a=t*n.strideWidth-l;for(let t=0;t<s;++t){const s=a+t*i;if(s<0||s>=n.inWidth)continue;const o=f+t*e.strides[1],l=g+s*n.inChannels;let c=r,m=o;for(let t=0;t<n.inChannels;++t){const e=h[l+t];for(let t=0;t<u;++t)p[c+t]+=e*d[m+t];c+=u,m+=u}}}}}}return c.toTensor()}depthwiseConv2DDerInput(t,e,n){my([t,e],"depthwiseConv2DDerInput");const r=je(n.inShape,"float32"),s=r.values,[a,i,o]=r.strides,l=this.readSync(t.dataId),[u,c,h]=t.strides,d=this.readSync(e.dataId),[p,f,m]=e.strides,{batchSize:g,filterHeight:y,filterWidth:b,inChannels:x,inHeight:w,inWidth:v,outChannels:C,outHeight:N,outWidth:S,strideHeight:k,strideWidth:I}=n,E=y-1-n.padInfo.top,$=b-1-n.padInfo.left,A=C/x;for(let t=0;t<g;++t)for(let e=0;e<x;++e)for(let n=0;n<w;++n){const r=n-E,g=Math.max(0,Math.ceil(r/k)),x=Math.min(N,(y+r)/k);for(let w=0;w<v;++w){const v=w-$,C=Math.max(0,Math.ceil(v/I)),N=Math.min(S,(b+v)/I);let E=0;for(let n=g;n<x;++n){const s=n*k-r;for(let r=C;r<N;++r){const a=u*t+c*n+h*r,i=p*(y-1-s)+f*(b-1-(r*I-v))+m*e;for(let t=0;t<A;++t){E+=l[a+(e*A+t)]*d[i+t]}}}s[a*t+i*n+o*w+e]=E}}return r.toTensor()}depthwiseConv2DDerFilter(t,e,n){my([t,e],"depthwiseConv2DDerFilter");const r=n.strideHeight,s=n.strideWidth,a=n.filterHeight,i=n.filterWidth,o=je(n.filterShape,"float32"),l=n.padInfo.left,u=n.padInfo.top,c=n.outChannels/n.inChannels,h=this.bufferSync(t),d=this.bufferSync(e);for(let t=0;t<a;++t){const e=Math.max(0,Math.ceil((u-t)/r)),a=Math.min(n.outHeight,(n.inHeight+u-t)/r);for(let p=0;p<i;++p){const i=Math.max(0,Math.ceil((l-p)/s)),f=Math.min(n.outWidth,(n.inWidth+l-p)/s);for(let m=0;m<n.outChannels;++m){const g=Math.trunc(m/c),y=m%c;let b=0;for(let o=0;o<n.batchSize;++o)for(let n=e;n<a;++n){const e=t+n*r-u;for(let t=i;t<f;++t){const r=p+t*s-l;b+=h.get(o,e,r,g)*d.get(o,n,t,m)}}o.set(b,t,p,g,y)}}}return o.toTensor()}tile(t,e){return my(t,"tile"),wy(this.bufferSync(t),e)}pad(t,e,n){my(t,"pad");const r=e.map((e,n)=>e[0]+t.shape[n]+e[1]),s=e.map(t=>t[0]),a=this.bufferSync(t),i=je(r,t.dtype);0!==n&&i.values.fill(n);for(let e=0;e<t.size;e++){const t=a.indexToLoc(e),n=t.map((t,e)=>t+s[e]);i.set(a.get(...t),...n)}return i.toTensor()}gather(t,e,n){my([t,e],"gather");const r=t.shape.slice(),s=this.readSync(e.dataId);r[n]=s.length;const a=je(r,t.dtype),i=this.bufferSync(t);for(let t=0;t<a.size;++t){const e=a.indexToLoc(t),r=e.slice();r[n]=s[e[n]];const o=i.locToIndex(r);a.values[t]=i.values[o]}return a.toTensor()}batchToSpaceND(t,e,n){my([t],"batchToSpaceND");const r=e.reduce((t,e)=>t*e),s=Hl(t.shape,e,r),a=Kl(s.length,e.length),i=Xl(t.shape,e,r),o=Yl(n,e.length),l=Jl(i,n,e.length);return Rr(t.reshape(s),a).reshape(i).slice(o,l)}spaceToBatchND(t,e,n){my([t],"spaceToBatchND");const r=e.reduce((t,e)=>t*e),s=[[0,0]];s.push(...n);for(let n=1+e.length;n<t.shape.length;++n)s.push([0,0]);const a=t.pad(s),i=Hl(a.shape,e,r,!1),o=Kl(i.length,e.length,!1),l=Xl(a.shape,e,r,!1);return Rr(a.reshape(i),o).reshape(l)}maxPool(t,e){return my(t,"maxPool"),gy(this.readSync(t.dataId),t.shape,t.dtype,t.strides,e,"max").toTensor()}maxPoolBackprop(t,e,n,r){my([e,n],"maxPoolBackprop");const s=this.readSync(e.dataId),a=je(r.outShape,e.dtype,yy(s,e.shape,e.dtype,r).values),i=r.strideHeight,o=r.strideWidth,l=r.dilationHeight,u=r.dilationWidth,c=r.effectiveFilterHeight,h=r.effectiveFilterWidth,d=h-1-r.padInfo.left,p=c-1-r.padInfo.top,f=je(e.shape,"float32"),m=this.bufferSync(t);for(let t=0;t<r.batchSize;++t)for(let e=0;e<r.inChannels;++e)for(let n=0;n<r.inHeight;++n)for(let s=0;s<r.inWidth;++s){const g=n-p,y=s-d;let b=0;for(let n=0;n<c;n+=l){const s=(g+n)/i;if(!(s<0||s>=r.outHeight||Math.floor(s)!==s))for(let i=0;i<h;i+=u){const l=(y+i)/o;if(l<0||l>=r.outWidth||Math.floor(l)!==l)continue;const u=c*h-1-a.get(t,s,l,e)===n*h+i?1:0;0!==u&&(b+=m.get(t,s,l,e)*u)}}f.set(b,t,n,s,e)}return f.toTensor()}avgPoolBackprop(t,e,n){my([t,e],"avgPoolBackprop");const r=n.strideHeight,s=n.strideWidth,a=n.filterHeight,i=n.filterWidth,o=n.dilationHeight,l=n.dilationWidth,u=n.effectiveFilterHeight,c=n.effectiveFilterWidth,h=c-1-n.padInfo.left,d=u-1-n.padInfo.top,p=je(e.shape,"float32"),f=1/(a*i),m=this.bufferSync(t);for(let t=0;t<n.batchSize;++t)for(let e=0;e<n.inChannels;++e)for(let a=0;a<n.inHeight;++a)for(let i=0;i<n.inWidth;++i){const g=a-d,y=i-h;let b=0;for(let a=0;a<u;a+=o){const i=(g+a)/r;if(!(i<0||i>=n.outHeight||Math.floor(i)!==i))for(let r=0;r<c;r+=l){const a=(y+r)/s;a<0||a>=n.outWidth||Math.floor(a)!==a||(b+=m.get(t,i,a,e))}}p.set(b*f,t,a,i,e)}return p.toTensor()}pool3d(t,e,n){my(t,"pool3d");const r=e.strideDepth,s=e.strideHeight,a=e.strideWidth,i=e.dilationDepth,o=e.dilationHeight,l=e.dilationWidth,u=e.effectiveFilterDepth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,d=e.padInfo.front,p=e.padInfo.top,f=e.padInfo.left,m="max"===n?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,g=this.readSync(t.dataId),y=je(e.outShape,t.dtype),b=y.values,x=e.outShape[1]*e.outShape[2]*e.outShape[3]*e.outShape[4],w=e.outShape[2]*e.outShape[3]*e.outShape[4],v=e.outShape[3]*e.outShape[4],C=e.outShape[4];for(let y=0;y<e.batchSize;++y){const N=y*x,S=y*t.strides[0];for(let y=0;y<e.inChannels;++y)for(let x=0;x<e.outDepth;++x){const k=x*r-d;let I=k;for(;I<0;)I+=i;const E=Math.min(e.inDepth,u+k),$=N+x*w;for(let r=0;r<e.outHeight;++r){const u=r*s-p;let d=u;for(;d<0;)d+=o;const x=Math.min(e.inHeight,c+u),w=$+r*v;for(let r=0;r<e.outWidth;++r){const s=r*a-f;let u=s;for(;u<0;)u+=l;const c=Math.min(e.inWidth,h+s),p=w+r*C;let v=m,N=0,k=0;for(let e=I;e<E;e+=i){const r=S+e*t.strides[1];for(let e=d;e<x;e+=o){const s=r+e*t.strides[2];for(let e=u;e<c;e+=l){const r=g[s+e*t.strides[3]+y];if("max"===n&&r>v?v=r:"avg"===n&&(N+=r,k++),isNaN(v))break}if(isNaN(v))break}if(isNaN(v))break}b[p+y]="avg"===n?N/k:v}}}}return y.toTensor()}avgPool3d(t,e){return my(t,"avgPool3d"),this.pool3d(t,e,"avg").toFloat()}avgPool3dBackprop(t,e,n){my([t,e],"avgPool3dBackprop");const r=n.strideDepth,s=n.strideHeight,a=n.strideWidth,i=n.filterDepth,o=n.filterHeight,l=n.filterWidth,u=n.dilationDepth,c=n.dilationHeight,h=n.dilationWidth,d=n.effectiveFilterDepth,p=n.effectiveFilterHeight,f=n.effectiveFilterWidth,m=d-1-n.padInfo.front,g=f-1-n.padInfo.left,y=p-1-n.padInfo.top,b=je(e.shape,"float32"),x=1/(i*o*l),w=this.bufferSync(t);for(let t=0;t<n.batchSize;++t)for(let e=0;e<n.inChannels;++e)for(let i=0;i<n.inDepth;++i)for(let o=0;o<n.inHeight;++o)for(let l=0;l<n.inWidth;++l){const v=i-m,C=o-y,N=l-g;let S=0;for(let i=0;i<d;i+=u){const o=(v+i)/r;if(!(o<0||o>=n.outDepth||Math.floor(o)!==o))for(let r=0;r<p;r+=c){const i=(C+r)/s;if(!(i<0||i>=n.outHeight||Math.floor(i)!==i))for(let r=0;r<f;r+=h){const s=(N+r)/a;s<0||s>=n.outWidth||Math.floor(s)!==s||(S+=w.get(t,o,i,s,e))}}}b.set(S*x,t,i,o,l,e)}return b.toTensor()}maxPool3d(t,e){return my(t,"maxPool3d"),this.pool3d(t,e,"max").toFloat()}maxPool3dPositions(t,e){const n=je(e.outShape,"int32"),r=e.strideDepth,s=e.strideHeight,a=e.strideWidth,i=e.dilationDepth,o=e.dilationHeight,l=e.dilationWidth,u=e.effectiveFilterDepth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,d=e.padInfo.front,p=e.padInfo.top,f=e.padInfo.left,m=this.bufferSync(t);for(let t=0;t<e.batchSize;++t)for(let g=0;g<e.inChannels;++g)for(let y=0;y<e.outDepth;++y){const b=y*r-d;let x=b;for(;x<0;)x+=i;const w=Math.min(e.inDepth,u+b);for(let r=0;r<e.outHeight;++r){const u=r*s-p;let d=u;for(;d<0;)d+=o;const v=Math.min(e.inHeight,c+u);for(let s=0;s<e.outWidth;++s){const p=s*a-f;let C=p;for(;C<0;)C+=l;const N=Math.min(e.inWidth,h+p);let S=Number.NEGATIVE_INFINITY,k=-1;for(let e=x;e<w;e+=i){const n=e-b;for(let r=d;r<v;r+=o){const s=r-u;for(let a=C;a<N;a+=l){const i=a-p,o=m.get(t,e,r,a,g);o>=S&&(S=o,k=n*c*h+s*c+i)}}}n.set(k,t,y,r,s,g)}}}return n.toTensor()}maxPool3dBackprop(t,e,n,r){my([e,n],"maxPool3dBackprop");const s=this.maxPool3dPositions(e,r),a=r.strideDepth,i=r.strideHeight,o=r.strideWidth,l=r.dilationDepth,u=r.dilationHeight,c=r.dilationWidth,h=r.effectiveFilterDepth,d=r.effectiveFilterHeight,p=r.effectiveFilterWidth,f=h-1-r.padInfo.front,m=p-1-r.padInfo.left,g=d-1-r.padInfo.top,y=je(e.shape,"float32"),b=this.bufferSync(s),x=this.bufferSync(t);for(let t=0;t<r.batchSize;++t)for(let e=0;e<r.inChannels;++e)for(let n=0;n<r.inDepth;++n)for(let s=0;s<r.inHeight;++s)for(let w=0;w<r.inWidth;++w){const v=n-f,C=s-g,N=w-m;let S=0;for(let n=0;n<h;n+=l){const s=(v+n)/a;if(!(s<0||s>=r.outDepth||Math.floor(s)!==s))for(let a=0;a<d;a+=u){const l=(C+a)/i;if(!(l<0||l>=r.outHeight||Math.floor(l)!==l))for(let i=0;i<p;i+=c){const u=(N+i)/o;if(u<0||u>=r.outWidth||Math.floor(u)!==u)continue;const c=h*d*p-1-b.get(t,s,l,u,e)===n*d*p+a*p+i?1:0;0!==c&&(S+=x.get(t,s,l,u,e)*c)}}}y.set(S,t,n,s,w,e)}return y.toTensor()}cast(t,e){return ou(t,e,this)}reshape(t,e){return lu(t,e)}avgPool(t,e){return my(t,"avgPool"),my(t,"maxPool"),gy(this.readSync(t.dataId),t.shape,t.dtype,t.strides,e,"avg").toTensor().toFloat()}resizeBilinear(t,e,n,r){my(t,"resizeBilinear");const[s,a,i,o]=t.shape,l=this.readSync(t.dataId),u=new Float32Array(k([s,e,n,o])),c=[r&&e>1?a-1:a,r&&n>1?i-1:i],h=[r&&e>1?e-1:e,r&&n>1?n-1:n];let d=0;const p=c[0]/h[0],f=c[1]/h[1];for(let r=0;r<s;r++)for(let s=0;s<e;s++){const e=p*s,c=Math.floor(e),h=e-c,m=Math.min(a-1,Math.ceil(e)),g=r*t.strides[0]+c*t.strides[1],y=r*t.strides[0]+m*t.strides[1];for(let e=0;e<n;e++){const n=f*e,r=Math.floor(n),s=n-r,a=Math.min(i-1,Math.ceil(n)),c=g+r*t.strides[2],p=y+r*t.strides[2],m=g+a*t.strides[2],b=y+a*t.strides[2];for(let t=0;t<o;t++){const e=l[c+t],n=l[p+t],r=e+(l[m+t]-e)*s,a=r+(n+(l[b+t]-n)*s-r)*h;u[d++]=a}}}return ce(u,[s,e,n,o])}resizeBilinearBackprop(t,e,n){my([t,e],"resizeBilinearBackprop");const[r,s,a,i]=e.shape,[,o,l]=t.shape,u=new Float32Array(r*s*a*i),c=[n&&o>1?s-1:s,n&&l>1?a-1:a],h=[n&&o>1?o-1:o,n&&l>1?l-1:l],d=c[0]/h[0],p=c[1]/h[1],f=this.readSync(t.dataId);let m=0;for(let t=0;t<r;t++){const n=t*e.strides[0];for(let t=0;t<o;t++){const r=t*d,o=Math.floor(r),c=Math.min(Math.ceil(r),s-1),h=n+o*e.strides[1],g=n+c*e.strides[1],y=r-o,b=1-y;for(let t=0;t<l;t++){const n=t*p,r=Math.floor(n),s=Math.min(Math.ceil(n),a-1),o=n-r,l=1-o,c=h+r*e.strides[2],d=h+s*e.strides[2],x=g+r*e.strides[2],w=g+s*e.strides[2],v=b*l,C=b*o,N=y*l,S=y*o;for(let t=0;t<i;t++){const e=f[m++];u[c+t]+=e*v,u[d+t]+=e*C,u[x+t]+=e*N,u[w+t]+=e*S}}}}return ge(u,[r,a,s,i],e.dtype)}resizeNearestNeighbor(t,e,n,r){my(t,"resizeNearestNeighbor");const[s,a,i,o]=t.shape,l=this.readSync(t.dataId),u=new Float32Array(s*e*n*o),c=[r&&e>1?a-1:a,r&&n>1?i-1:i],h=[r&&e>1?e-1:e,r&&n>1?n-1:n],d=c[0]/h[0],p=c[1]/h[1];let f=0;for(let c=0;c<s;c++){const s=c*t.strides[0];for(let c=0;c<e;c++){const e=d*c,h=s+Math.min(a-1,r?Math.round(e):Math.floor(e))*t.strides[1];for(let e=0;e<n;e++){const n=p*e,s=h+Math.min(i-1,r?Math.round(n):Math.floor(n))*t.strides[2];for(let t=0;t<o;t++){const e=l[s+t];u[f++]=e}}}}return ce(u,[s,e,n,o],t.dtype)}resizeNearestNeighborBackprop(t,e,n){my([t,e],"resizeNearestNeighborBackprop");const[r,s,a,i]=e.shape,[,o,l]=t.shape,u=new Float32Array(r*s*a*i),c=this.readSync(t.dataId),h=[n&&o>1?s-1:s,n&&l>1?a-1:a],d=[n&&o>1?o-1:o,n&&l>1?l-1:l],p=h[0]/d[0],f=h[1]/d[1],m=1/p,g=1/f,y=2*Math.ceil(m)+2,b=2*Math.ceil(g)+2;for(let h=0;h<r;h++){const r=h*e.strides[0];for(let h=0;h<s;h++){const d=r+h*e.strides[1],x=Math.floor(h*m),w=Math.floor(x-y/2);for(let m=0;m<a;m++){const x=d+m*e.strides[2],v=Math.floor(m*g),C=Math.floor(v-b/2);for(let e=0;e<i;e++){let i=0;for(let u=0;u<y;u++){const d=u+w;if(d<0||d>=o)continue;const g=r+d*t.strides[1],y=d*p;if(h===Math.min(s-1,n?Math.round(y):Math.floor(y)))for(let r=0;r<b;r++){const s=r+C;if(s<0||s>=l)continue;const o=g+s*t.strides[2],u=s*f;m===Math.min(a-1,n?Math.round(u):Math.floor(u))&&(i+=c[o+e])}}u[x+e]=i}}}}return ge(u,e.shape,e.dtype)}batchNormalization(t,e,n,r,s,a){my([t,e,n,s,a],"batchNorm");const i=this.readSync(t.dataId),o=this.readSync(e.dataId),l=this.readSync(n.dataId),u=s?this.readSync(s.dataId):new Float32Array([1]),c=a?this.readSync(a.dataId):new Float32Array([0]),h=new Float32Array(i.length),d=c.length,p=u.length,f=l.length,m=o.length;let g=0,y=0,b=0,x=0;for(let t=0;t<i.length;++t)h[t]=c[g++]+(i[t]-o[y++])*u[b++]/Math.sqrt(l[x++]+r),g>=d&&(g=0),y>=m&&(y=0),b>=p&&(b=0),x>=f&&(x=0);return ge(h,t.shape)}localResponseNormalization4D(t,e,n,r,s){my(t,"localResponseNormalization4D");const a=t.shape[3],i=a-1,o=this.readSync(t.dataId),l=t.size,u=new Float32Array(l);function c(t){const n=t%a;let r=t-n+Math.max(0,n-e);const s=t-n+Math.min(n+e,i);let l=0;for(;r<=s;r++){const t=o[r];l+=t*t}return l}for(let t=0;t<l;t++){const e=c(t),a=o[t]*Math.pow(n+r*e,-s);u[t]=a}return ge(u,t.shape)}LRNGrad(t,e,n,r,s,a,i){my(t,"LRNGrad");const o=t.shape[3],l=this.readSync(t.dataId),u=this.readSync(e.dataId),c=this.readSync(n.dataId),h=new Float32Array(t.size),d=t.size;for(let t=0;t<d;t++){const e=t%o,n=t-e+Math.max(0,e-r),d=t-e+Math.min(o,e+r+1);let p=0;for(let t=n;t<d;t++)p+=Math.pow(u[t],2);p=a*p+s;for(let e=n;e<d;e++){let n=-2*a*i*u[e]*c[t]/p;t===e&&(n+=Math.pow(p,-i)),n*=l[t],h[e]+=n}}return ge(h,t.shape)}multinomial(t,e,n,r){my(t,"multinomial");const s=e?t:vo(t),a=s.shape[0],i=s.shape[1],o=ve([a,n],"int32"),l=this.readSync(o.dataId),u=this.readSync(s.dataId);for(let t=0;t<a;++t){const e=t*i,s=new Float32Array(i-1);s[0]=u[e];for(let t=1;t<s.length;++t)s[t]=s[t-1]+u[e+t];const a=Ja(r.toString()),o=t*n;for(let t=0;t<n;++t){const e=a();l[o+t]=s.length;for(let n=0;n<s.length;n++)if(e<s[n]){l[o+t]=n;break}}}return o}oneHot(t,e,n,r){my(t,"oneHot");const s=new Float32Array(t.size*e);s.fill(r);const a=this.readSync(t.dataId);for(let r=0;r<t.size;++r)a[r]>=0&&a[r]<e&&(s[r*e+a[r]]=n);return fe(s,[t.size,e],"int32")}nonMaxSuppression(t,e,n,r,s){my(t,"nonMaxSuppression");const a=this.readSync(t.dataId),i=this.readSync(e.dataId);return by(a,i,n,r,s)}fft(t){return this.fftBatch(t,!1)}ifft(t){return this.fftBatch(t,!0)}fftBatch(t,e){const n=t.shape[0],r=t.shape[1],s=je(t.shape,"float32"),a=je(t.shape,"float32"),i=le(t).as2D(n,r),o=ue(t).as2D(n,r);for(let t=0;t<n;t++){const n=i.slice([t,0],[1,r]),l=o.slice([t,0],[1,r]),u=oe(n,l),c=this.readSync(this.fftImpl(u,e).dataId);for(let e=0;e<r;e++){const n=ru(c,e);s.values[t*r+e]=n.real,a.values[t*r+e]=n.imag}}return oe(s.toTensor(),a.toTensor()).as2D(n,r)}fftImpl(t,e){const n=t.as1D(),r=n.size;if(this.isExponentOf2(r)){let s=this.fftRadix2(n,r,e).as2D(t.shape[0],t.shape[1]);return e&&(s=oe(le(s).div(de(r)),ue(s).div(de(r)))),s}{const n=this.readSync(t.dataId),s=tu(this.fourierTransformByMatmul(n,r,e));return oe(s.real,s.imag).as2D(t.shape[0],t.shape[1])}}isExponentOf2(t){return 0==(t&t-1)}fftRadix2(t,e,n){if(1===e)return t;const r=this.readSync(t.dataId),s=e/2,a=eu(r);let i=oe(a.real,a.imag).as1D();const o=nu(r);let l=oe(o.real,o.imag).as1D();i=this.fftRadix2(i,s,n),l=this.fftRadix2(l,s,n);const u=au(e,n),c=oe(u.real,u.imag).mul(l),h=i.add(c),d=i.sub(c),p=le(h).concat(le(d)),f=ue(h).concat(ue(d));return oe(p,f).as1D()}fourierTransformByMatmul(t,e,n){const r=new Float32Array(2*e);for(let s=0;s<e;s++){let a=0,i=0;for(let r=0;r<e;r++){const o=iu(s*r,e,n),l=ru(t,r);a+=l.real*o.real-l.imag*o.imag,i+=l.real*o.imag+l.imag*o.real}n&&(a/=e,i/=e),su(r,a,i,s)}return r}depthToSpace(t,e,n){v("NHWC"===n,()=>"Only NHWC dataFormat supported on CPU for depthToSpace. Got "+n),v(e>1,()=>"blockSize should be > 1 for depthToSpace, but was: "+e);const r=t.shape[0],s=t.shape[1],a=t.shape[2],i=t.shape[3],o=s*e,l=a*e,u=i/(e*e),c=this.readSync(t.dataId),h=new Float32Array(r*o*l*u);let d=0;for(let t=0;t<r;++t)for(let n=0;n<o;++n){const r=Math.floor(n/e),o=n%e;for(let n=0;n<l;++n){const l=Math.floor(n/e),p=(o*e+n%e)*u;for(let e=0;e<u;++e){const n=e+p+i*(l+a*(r+s*t));h[d++]=c[n]}}}return ge(h,[r,o,l,u])}broadcastedBinaryOp(t,e,n,r){const s=Vt(t.shape,e.shape),a=je(s,n),i=this.readSync(t.dataId),o=this.readSync(e.dataId),l=Pt(t.shape,s),u=Pt(e.shape,s),c=a.values;if(l.length+u.length===0)for(let t=0;t<c.length;++t)c[t]=r(i[t%i.length],o[t%o.length]);else{const n=this.bufferSync(t),s=this.bufferSync(e);for(let h=0;h<c.length;++h){const d=a.indexToLoc(h),p=d.slice(-t.rank);l.forEach(t=>p[t]=0);const f=n.locToIndex(p),m=d.slice(-e.rank);u.forEach(t=>m[t]=0);const g=s.locToIndex(m);c[h]=r(i[f],o[g])}}return a.toTensor()}broadcastedBinaryComplexOp(t,e,n){const r=Vt(t.shape,e.shape),s=je(r,"float32"),a=je(r,"float32"),i=this.readSync(t.dataId),o=this.readSync(e.dataId),l=Pt(t.shape,r),u=Pt(e.shape,r),c=s.values,h=a.values;if(l.length+u.length===0)for(let t=0;t<c.length;t++){const e=t%i.length,r=t%o.length,s=n(i[2*e],i[2*e+1],o[2*r],o[2*r+1]);c[t]=s.real,h[t]=s.imag}else{const r=this.bufferSync(this.data.get(t.dataId).complexTensors.real),a=this.bufferSync(this.data.get(e.dataId).complexTensors.real);for(let d=0;d<c.length;d++){const p=s.indexToLoc(d),f=p.slice(-t.rank);l.forEach(t=>f[t]=0);const m=r.locToIndex(f),g=p.slice(-e.rank);u.forEach(t=>g[t]=0);const y=a.locToIndex(g),b=n(i[2*m],i[2*m+1],o[2*y],o[2*y+1]);c[d]=b.real,h[d]=b.imag}}return this.complex(s.toTensor(),a.toTensor())}split(t,e,n){return xy(t,e,n)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}cropAndResize(t,e,n,r,s,a){const[i,o,l,u]=t.shape,c=e.shape[0],[h,d]=r,p=je([c,h,d,u],"float32"),f=this.readSync(e.dataId),m=this.readSync(n.dataId),g=this.readSync(t.dataId),y=t.strides,b=p.strides;for(let t=0;t<c;t++){const e=4*t,n=f[e],r=f[e+1],c=f[e+2],x=f[e+3],w=m[t];if(w>=i)continue;const v=h>1?(c-n)*(o-1)/(h-1):0,C=d>1?(x-r)*(l-1)/(d-1):0;for(let e=0;e<h;e++){const i=h>1?n*(o-1)+e*v:.5*(n+c)*(o-1);if(i<0||i>o-1)for(let n=0;n<d;n++)for(let r=0;r<u;r++){const s=r+n*b[2]+e*b[1]+t*b[0];p.values[s]=a}else if("bilinear"===s){const n=Math.floor(i),s=Math.ceil(i),o=i-n;for(let i=0;i<d;i++){const c=d>1?r*(l-1)+i*C:.5*(r+x)*(l-1);if(c<0||c>l-1){for(let n=0;n<u;n++){const r=n+i*b[2]+e*b[1]+t*b[0];p.values[r]=a}continue}const h=Math.floor(c),f=Math.ceil(c),m=c-h;for(let r=0;r<u;r++){let a=r+h*y[2]+n*y[1]+w*y[0];const l=g[a];a=r+f*y[2]+n*y[1]+w*y[0];const u=g[a];a=r+h*y[2]+s*y[1]+w*y[0];const c=g[a];a=r+f*y[2]+s*y[1]+w*y[0];const d=l+(u-l)*m,x=c+(g[a]-c)*m;a=r+i*b[2]+e*b[1]+t*b[0],p.values[a]=d+(x-d)*o}}}else for(let n=0;n<d;++n){const s=d>1?r*(l-1)+n*C:.5*(r+x)*(l-1);if(s<0||s>l-1){for(let r=0;r<u;r++){const s=r+n*b[2]+e*b[1]+t*b[0];p.values[s]=a}continue}const o=Math.round(s),c=Math.round(i);for(let r=0;r<u;r++){const s=r+o*y[2]+c*y[1]+w*y[0],a=r+n*b[2]+e*b[1]+t*b[0];p.values[a]=g[s]}}}}return p.toTensor()}sparseToDense(t,e,n,r){const{sliceRank:s,numUpdates:a,sliceSize:i,strides:o,outputSize:l}=Us(0,t,n);return this.scatter(t,e,n,l,i,a,s,o,r,!1)}gatherND(t,e){const n=e.shape,r=n[n.length-1],[s,a,i,o]=Bs(t,e);if(0===a)return ce([],s,t.dtype);const l=new ft([a,i],t.dtype),u=this.readSync(e.dataId),c=this.readSync(t.dataId);for(let e=0;e<a;e++){const n=[];let s=0;for(let t=0;t<r;t++){const a=u[e*r+t];s+=a*o[t],n.push(a)}if(s<0||s>=t.size/i)throw new Error(`Invalid indices: ${n} does not index into ${t.shape}`);for(let t=0;t<i;t++)l.values[e*i+t]=c[s*i+t]}return l.toTensor().reshape(s)}scatterND(t,e,n){const{sliceRank:r,numUpdates:s,sliceSize:a,strides:i,outputSize:o}=Us(0,t,n),l=de(0);return this.scatter(t,e,n,o,a,s,r,i,l,!0)}fill(t,e,n){const r=M(n=n||q(e),k(t));return r.fill(e),ta().makeTensor(r,t,n,this)}onesLike(t){if("string"===t.dtype)throw new Error("onesLike is not supported for string tensors");return this.fill(t.shape,1,t.dtype)}zerosLike(t){const e=M(t.dtype,k(t.shape));return this.makeOutput(e,t.shape,t.dtype)}linspace(t,e,n){return uu(t,e,n)}scatter(t,e,n,r,s,a,i,o,l,u){const c=[r/s,s],h=this.readSync(t.dataId),d=this.readSync(e.dataId);if(0===r)return ce([],n,e.dtype);const p=new ft(c,e.dtype);p.values.fill(this.readSync(l.dataId)[0]);for(let t=0;t<a;t++){const a=[];let l=0;for(let e=0;e<i;e++){const n=h[t*i+e];a.push(n),l+=n*o[e]}if(l<0||l>=r/s)throw new Error(`Invalid indices: ${a} does not index into ${n}`);for(let n=0;n<s;n++)u?p.values[l*s+n]+=d[t*s+n]:p.values[l*s+n]=0===e.rank?d[0]:d[t*s+n]}return p.toTensor().reshape(n)}}function ky(t,e){return{kernelName:t,backendName:"cpu",kernelFunc:({inputs:n,backend:r})=>{const{a:s,b:a}=n,i=r;my([s,a],t);const o=i.data.get(s.dataId).values,l=i.data.get(a.dataId).values,[u,c]=e(s.shape,a.shape,o,l,s.dtype);return{dataId:i.write(u,c,s.dtype),shape:c,dtype:s.dtype}}}}function Iy(t){return(e,n,r,s,a)=>{const i=Vt(e,n),o=i.length,l=X(i),u=F(a,k(i)),c=e.length,h=n.length,d=X(e),p=X(n),f=Pt(e,i),m=Pt(n,i);if(f.length+m.length===0)for(let e=0;e<u.length;++e)u[e]=t(r[e%r.length],s[e%s.length]);else for(let e=0;e<u.length;++e){const n=it(e,o,l),a=n.slice(-c);f.forEach(t=>a[t]=0);const i=at(a,c,d),g=n.slice(-h);m.forEach(t=>g[t]=0);const y=at(g,h,p);u[e]=t(r[i],s[y])}return[u,i]}}const Ey=ky("Div",Iy((t,e)=>t/e));const $y={kernelName:"MaxPoolWithArgmax",backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{filterSize:s,strides:a,pad:i,includeBatchInIndex:o}=e,l=n;my(r,"MaxPoolWithArgmax");const u=l.data.get(r.dataId).values,c=ki(r.shape,s,a,[1,1],i),[h,d]=function(t,e,n,r,s){const a=gy(t,0,n,X(e),s,"max"),i=yy(t,e,n,s,!0,r);return[a.values,i.values]}(u,r.shape,r.dtype,o,c),p=l.write(h,c.outShape,r.dtype),f=l.write(d,c.outShape,r.dtype);return[{dataId:p,shape:c.outShape,dtype:r.dtype},{dataId:f,shape:c.outShape,dtype:"int32"}]}},Ay=dl;function Ry(t,e,n,r,s){const a=k(e),i=e.length,o=X(e),l=X(s),u=F(n,k(s));for(let e=0;e<a;++e){const n=it(e,i,o),s=new Array(n.length);for(let t=0;t<s.length;t++)s[t]=n[r[t]];u[at(s,i,l)]=t[e]}return u}const Ty=[{kernelName:"NonMaxSuppressionV5",backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{boxes:r,scores:s}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o,softNmsSigma:l}=n,u=e;my(r,"NonMaxSuppressionWithScore");const c=u.data.get(r.dataId).values,h=u.data.get(s.dataId).values,d=a,p=i,f=o,m=l,{selectedIndices:g,selectedScores:y}=Ay(c,h,d,p,f,m);return[g,y]}},{kernelName:"Square",backendName:"cpu",kernelFunc:({inputs:t,backend:e})=>{const{x:n}=t,r=e;my(n,"square");const s=r.data.get(n.dataId).values,a=new Float32Array(s.length);for(let t=0;t<s.length;++t){const e=s[t];a[t]=e*e}return{dataId:r.write(a,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},ky("SquaredDifference",Iy((t,e)=>{const n=t-e;return n*n})),Ey,{kernelName:"Transpose",backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{perm:s}=e,a=n;my(r,"transpose");const i=r.shape.length,o=new Array(i);for(let t=0;t<o.length;t++)o[t]=r.shape[s[t]];const l=Ry(a.data.get(r.dataId).values,r.shape,r.dtype,s,o);return{dataId:a.write(l,o,r.dtype),shape:o,dtype:r.dtype}}},$y];for(const t of Ty)f(t);aa("cpu",()=>new Sy,1);const Dy={},_y={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function Oy(t){t in Dy||(Dy[t]=function(t){if(1!==t&&2!==t)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const e=function(t){if("undefined"!=typeof OffscreenCanvas&&2===t)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(t);if(e.addEventListener("webglcontextlost",e=>{e.preventDefault(),delete Dy[t]},!1),1===t)return e.getContext("webgl",_y)||e.getContext("experimental-webgl",_y);return e.getContext("webgl2",_y)}(t));const e=Dy[t];return e.isContextLost()?(delete Dy[t],Oy(t)):(e.disable(e.DEPTH_TEST),e.disable(e.STENCIL_TEST),e.disable(e.BLEND),e.disable(e.DITHER),e.disable(e.POLYGON_OFFSET_FILL),e.disable(e.SAMPLE_COVERAGE),e.enable(e.SCISSOR_TEST),e.enable(e.CULL_FACE),e.cullFace(e.BACK),Dy[t])}var Fy,My,zy;function Ly(t,e){return[e,t]}function By(t){const e=k(t);return A(Math.ceil(e/4))}function Py(t,e){return[Math.max(1,Math.ceil(e/2)),Math.max(1,Math.ceil(t/2))]}function Wy(t,e){const n=t;let r,s,i,o,l,u,c,h,d,p;return 2===a().getNumber("WEBGL_VERSION")?(r=n.R32F,s=n.R16F,i=n.RGBA16F,o=n.RGBA32F,l=n.RED,c=4,h=1,d=n.HALF_FLOAT,p=n.FLOAT):(r=t.RGBA,s=t.RGBA,i=t.RGBA,o=n.RGBA,l=t.RGBA,c=4,h=4,d=null!=e?e.HALF_FLOAT_OES:null,p=t.FLOAT),u=t.RGBA,{internalFormatFloat:r,internalFormatHalfFloat:s,internalFormatPackedHalfFloat:i,internalFormatPackedFloat:o,textureFormatFloat:l,downloadTextureFormat:u,downloadUnpackNumChannels:c,defaultNumChannels:h,textureTypeHalfFloat:d,textureTypeFloat:p}}function Vy(t,e,n){const r=n();return e&&function(t){const e=t.getError();if(e!==t.NO_ERROR)throw new Error("WebGL Error: "+function(t,e){switch(e){case t.NO_ERROR:return"NO_ERROR";case t.INVALID_ENUM:return"INVALID_ENUM";case t.INVALID_VALUE:return"INVALID_VALUE";case t.INVALID_OPERATION:return"INVALID_OPERATION";case t.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case t.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case t.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return"Unknown error code "+e}}(t,e))}(t),r}!function(t){t[t.DENSE=0]="DENSE",t[t.SHARED_BATCH=1]="SHARED_BATCH"}(Fy||(Fy={})),function(t){t[t.RENDER=0]="RENDER",t[t.UPLOAD=1]="UPLOAD",t[t.PIXELS=2]="PIXELS",t[t.DOWNLOAD=3]="DOWNLOAD"}(My||(My={})),function(t){t[t.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",t[t.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",t[t.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",t[t.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",t[t.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(zy||(zy={}));function Uy(t){return!!(a().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===t||5.96e-8<Math.abs(t)&&Math.abs(t)<65504)}function Gy(t,e,n){return Qy(t,e,()=>t.getExtension(n),'Extension "'+n+'" not supported on this browser.')}function jy(t,e,n){const r=Qy(t,e,()=>t.createShader(t.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(Vy(t,e,()=>t.shaderSource(r,n)),Vy(t,e,()=>t.compileShader(r)),!1===t.getShaderParameter(r,t.COMPILE_STATUS))throw function(t,e){const n=qy.exec(e);if(null==n)return console.log("Couldn't parse line number in error: "+e),void console.log(t);const r=+n[1],s=t.split("\n"),a=s.length.toString().length+2,i=s.map((t,e)=>R((e+1).toString(),a)+t);let o=0;for(let t=0;t<i.length;t++)o=Math.max(i[t].length,o);const l=i.slice(0,r-1),u=i.slice(r-1,r),c=i.slice(r);console.log(l.join("\n")),console.log(e.split("\n")[0]),console.log("%c "+R(u[0],o),"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}(n,t.getShaderInfoLog(r)),new Error("Failed to compile fragment shader.");return r}const qy=/ERROR: [0-9]+:([0-9]+):/g;function Hy(t,e,n){if(Vy(t,e,()=>t.validateProgram(n)),!1===t.getProgramParameter(n,t.VALIDATE_STATUS))throw console.log(t.getProgramInfoLog(n)),new Error("Shader program validation failed.")}function Ky(t,e,n,r,s,a,i,o){const l=t.getAttribLocation(n,r);return-1!==l&&(Vy(t,e,()=>t.bindBuffer(t.ARRAY_BUFFER,s)),Vy(t,e,()=>t.vertexAttribPointer(l,a,t.FLOAT,!1,i,o)),Vy(t,e,()=>t.enableVertexAttribArray(l)),!0)}function Xy(t,e,n,r){!function(t,e){const n=t.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=e+t.TEXTURE0;if(r<t.TEXTURE0||r>n){throw new Error(`textureUnit must be in ${`[gl.TEXTURE0, gl.TEXTURE${n}]`}.`)}}(t,r),Vy(t,e,()=>t.activeTexture(t.TEXTURE0+r)),Vy(t,e,()=>t.bindTexture(t.TEXTURE_2D,n))}function Yy(t,e,n,r){Vy(t,e,()=>t.bindFramebuffer(t.FRAMEBUFFER,r)),Vy(t,e,()=>t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,n,0))}function Jy(t,e,n){Vy(t,e,()=>t.bindFramebuffer(t.FRAMEBUFFER,n)),Vy(t,e,()=>t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,null,0))}function Zy(t){const e=t.checkFramebufferStatus(t.FRAMEBUFFER);if(e!==t.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(t,e){switch(e){case t.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case t.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return"unknown error "+e}}(t,e))}function Qy(t,e,n,r){const s=Vy(t,e,()=>n());if(null==s)throw new Error(r);return s}function tb(t,e=2){return k(t.slice(0,t.length-e))}function eb(t){if(0===t.length)throw Error("Cannot get rows and columns of an empty shape array.");return[t.length>1?t[t.length-2]:1,t[t.length-1]]}function nb(t){let e=[1,1,1];return 0===t.length||1===t.length&&1===t[0]||(e=[tb(t),...eb(t)]),e}function rb(t){return t%2==0}function sb(t,e){if(I(t=t.slice(-2),e=e.slice(-2)))return!0;if(!t.length||!e.length)return!0;if(0===t[0]||0===t[1]||0===e[0]||0===e[1])return!0;if(t.length!==e.length){const n=t.slice(-1)[0],r=e.slice(-1)[0];if(n===r)return!0;if(rb(n)&&rb(r)&&(1===t[0]||1===e[0]))return!0}return t[1]===e[1]&&rb(t[0])&&rb(e[0])}let ab,ib;function ob(t,e){return null!=t.getExtension(e)}function lb(t){try{if(null!=Oy(t))return!0}catch(t){return!1}return!1}function ub(t){if(0===t)return!1;const e=Oy(t);if(1!==t){if(ob(e,"EXT_color_buffer_float"))return cb(e);const t="EXT_color_buffer_half_float";if(ob(e,t)){const n=e.getExtension(t);return function(t,e){const n=Wy(t,e),r=t.createTexture();t.bindTexture(t.TEXTURE_2D,r);t.texImage2D(t.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const s=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,s),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,r,0);const a=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(r),t.deleteFramebuffer(s),a}(e,n)}return!1}return!!ob(e,"OES_texture_float")&&(!!ob(e,"WEBGL_color_buffer_float")&&cb(e))}function cb(t){const e=Wy(t),n=t.createTexture();t.bindTexture(t.TEXTURE_2D,n);t.texImage2D(t.TEXTURE_2D,0,e.internalFormatFloat,1,1,0,e.textureFormatFloat,e.textureTypeFloat,null);const r=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,r),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,n,0);const s=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(n),t.deleteFramebuffer(r),s}const hb=a();hb.registerFlag("HAS_WEBGL",()=>hb.getNumber("WEBGL_VERSION")>0),hb.registerFlag("WEBGL_VERSION",()=>lb(2)?2:lb(1)?1:0),hb.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>2===hb.get("WEBGL_VERSION")),hb.registerFlag("WEBGL_CPU_FORWARD",()=>!0),hb.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1),hb.registerFlag("WEBGL_PACK",()=>hb.getBool("HAS_WEBGL")),hb.registerFlag("WEBGL_PACK_NORMALIZATION",()=>hb.getBool("WEBGL_PACK")),hb.registerFlag("WEBGL_PACK_CLIP",()=>hb.getBool("WEBGL_PACK")),hb.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>!1),hb.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>hb.getBool("WEBGL_PACK")),hb.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>hb.getBool("WEBGL_PACK")),hb.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>hb.getBool("WEBGL_PACK")),hb.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>hb.getBool("WEBGL_PACK")),hb.registerFlag("WEBGL_PACK_REDUCE",()=>hb.getBool("WEBGL_PACK")),hb.registerFlag("WEBGL_LAZILY_UNPACK",()=>hb.getBool("WEBGL_PACK")),hb.registerFlag("WEBGL_CONV_IM2COL",()=>hb.getBool("WEBGL_PACK")),hb.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>function(t){if(null==ab){const e=Oy(t);ab=e.getParameter(e.MAX_TEXTURE_SIZE)}return ab}(hb.getNumber("WEBGL_VERSION"))),hb.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>function(t){if(null==ib){const e=Oy(t);ib=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,ib)}(hb.getNumber("WEBGL_VERSION"))),hb.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{const t=hb.getNumber("WEBGL_VERSION");return 0===t?0:function(t){if(0===t)return 0;let e;const n=Oy(t);return e=ob(n,"EXT_disjoint_timer_query_webgl2")&&2===t?2:ob(n,"EXT_disjoint_timer_query")?1:0,e}(t)}),hb.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>hb.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!Mt()),hb.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>function(t){if(0===t)return!1;const e=Oy(t);if(1===t){if(!ob(e,"OES_texture_float"))return!1}else if(!ob(e,"EXT_color_buffer_float"))return!1;return cb(e)}(hb.getNumber("WEBGL_VERSION"))),hb.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>!hb.getBool("WEBGL_FORCE_F16_TEXTURES")&&hb.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")),hb.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>ub(hb.getNumber("WEBGL_VERSION"))),hb.registerFlag("WEBGL_FENCE_API_ENABLED",()=>{return 2===(t=hb.getNumber("WEBGL_VERSION"))&&null!=Oy(t).fenceSync;var t}),hb.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>hb.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0);class db{constructor(t,e){this.outputShape=[],this.outputShape=t,this.variableNames=e.map((t,e)=>"T"+e);const n=[];this.variableNames.forEach(t=>{n.push(`float v${t} = get${t}AtOutCoords();`)});const r=this.variableNames.map(t=>"v"+t).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${r};\n        setOutput(result);\n      }\n    `}}class pb{constructor(t,e){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.variableNames=e.map((t,e)=>"T"+e);const n=[];this.variableNames.forEach(t=>{n.push(`vec4 v${t} = get${t}AtOutCoords();`)});const r=this.variableNames.map(t=>"v"+t).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${r};\n        setOutput(result);\n      }\n    `}}class fb{constructor(t,e,n){this.variableNames=["A"];const r=t.windowSize,s=t.batchSize,a=t.inSize,i=Math.ceil(a/r);n||this.variableNames.push("bestIndicesA"),this.outputShape=[s,i];const o="max"===e?">":"<",l=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${r};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${r}; i++) {\n          int inIdx = ${l};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${o} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}function mb(t,e){return["x","y","z","w","u","v"].slice(0,e).map(e=>`${t}.${e}`)}function gb(t,e){return 1===e?[t]:mb(t,e)}function yb(){let t,e,n,r,s,i,o,l,u,c;return 2===a().getNumber("WEBGL_VERSION")?(t="#version 300 es",e="in",n="out",r="in",s="texture",i="outputColor",o="out vec4 outputColor;",l="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",u="",c="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(t="",e="attribute",n="varying",r="varying",s="texture2D",i="gl_FragColor",o="",l="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",u="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",c="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:t,attribute:e,varyingVs:n,varyingFs:r,texture2D:s,output:i,defineOutput:o,defineSpecialNaN:l,defineSpecialInf:u,defineRound:c}}function bb(t,e,n="index"){const r=X(e);return r.map((e,s)=>`${`int ${t[s]} = ${n} / ${e}`}; ${s===r.length-1?`int ${t[s+1]} = ${n} - ${t[s]} * ${e}`:`index -= ${t[s]} * ${e}`};`).join("")}function xb(t){const e=X(t).map(t=>t.toString());return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${e[0]} + coords.y * ${e[1]} + coords.z;\n  }\n`}const wb="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:vb}=cu;function Cb(t,e,n,r){const s=[];t.forEach(t=>{const e=k(t.shapeInfo.logicalShape);t.shapeInfo.isUniform?s.push(`uniform float ${t.name}${e>1?`[${e}]`:""};`):(s.push(`uniform sampler2D ${t.name};`),s.push(`uniform int offset${t.name};`))});const a=s.join("\n"),i=t.map(t=>function(t,e,n=!1){let r="";r+=n?Sb(t):Nb(t);const s=t.shapeInfo.logicalShape,a=e.logicalShape;s.length<=a.length&&(r+=n?function(t,e){const n=t.name,r=n.charAt(0).toUpperCase()+n.slice(1),s="get"+r+"AtOutCoords",a=t.shapeInfo.logicalShape.length,i=e.logicalShape.length,o=vb(t.shapeInfo.logicalShape,e.logicalShape),l=Db(i),u=i-a;let c;const h=["x","y","z","w","u","v"];c=0===a?"":i<2&&o.length>=1?"coords = 0;":o.map(t=>`coords.${h[t+u]} = 0;`).join("\n");let d="";d=i<2&&a>0?"coords":t.shapeInfo.logicalShape.map((t,e)=>"coords."+h[e+u]).join(", ");let p="return outputValue;";const f=1===k(t.shapeInfo.logicalShape),m=1===k(e.logicalShape);if(1!==a||f||m){if(f&&!m)p=1===i?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(o.length){const t=a-2,e=a-1;o.indexOf(t)>-1&&o.indexOf(e)>-1?p="return vec4(outputValue.x);":o.indexOf(t)>-1?p="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":o.indexOf(e)>-1&&(p="return vec4(outputValue.xx, outputValue.zz);")}}else p="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${s}() {\n      ${l} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${r}(${d});\n      ${p}\n    }\n  `}(t,e):function(t,e){const n=t.name,r=n.charAt(0).toUpperCase()+n.slice(1),s="get"+r+"AtOutCoords",a=e.texShape,i=t.shapeInfo.texShape,o=t.shapeInfo.logicalShape.length,l=e.logicalShape.length;if(!t.shapeInfo.isUniform&&o===l&&null==t.shapeInfo.flatOffset&&I(i,a))return`\n      float ${s}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const u=Db(l),c=vb(t.shapeInfo.logicalShape,e.logicalShape),h=l-o;let d;const p=["x","y","z","w","u","v"];d=0===o?"":l<2&&c.length>=1?"coords = 0;":c.map(t=>`coords.${p[t+h]} = 0;`).join("\n");let f="";f=l<2&&o>0?"coords":t.shapeInfo.logicalShape.map((t,e)=>"coords."+p[e+h]).join(", ");return`\n    float ${s}() {\n      ${u} coords = getOutputCoords();\n      ${d}\n      return get${r}(${f});\n    }\n  `}(t,e));return r}(t,e,r)).join("\n"),o=e.texShape,l=yb(),u=function(t){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${t.texture2D}(textureSampler, uv).r;\n    }\n  `}(l);let c,h,d=function(t){return`${t.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${t.varyingFs} vec2 resultUV;\n    ${t.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${t.defineSpecialNaN}\n    ${t.defineSpecialInf}\n    ${t.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${kb}\n    ${Ib}\n    ${Eb}\n  `}(l);return e.isPacked?(c=function(t,e){switch(t.length){case 0:return Ab();case 1:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];if(1===n[0])return`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${n[1]}.0);\n      }\n    `;if(1===n[1])return`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${n[0]}.0);\n      }\n    `;return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      return 2 * (resTexRC.x * ${n[1]} + resTexRC.y);\n    }\n  `}(0,e);case 2:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];if(I(t,e))return`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${n[0]}, ${n[1]}));\n      }\n    `;const r=Math.ceil(t[1]/2);return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(t,e);case 3:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],r=Math.ceil(t[2]/2),s=r*Math.ceil(t[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      int b = index / ${s};\n      index -= b * ${s};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(t,e);default:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],r=Math.ceil(t[t.length-1]/2),s=r*Math.ceil(t[t.length-2]/2);let a=s,i="",o="b, r, c";for(let e=2;e<t.length-1;e++)a*=t[t.length-e-1],i=`\n      int b${e} = index / ${a};\n      index -= b${e} * ${a};\n    `+i,o=`b${e}, `+o;return`\n    ivec${t.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      ${i}\n\n      int b = index / ${s};\n      index -= b * ${s};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec${t.length}(${o});\n    }\n  `}(t,e)}}(e.logicalShape,o),h=function(t){return`\n    void setOutput(vec4 val) {\n      ${t.output} = val;\n    }\n  `}(l)):(c=function(t,e){switch(t.length){case 0:return Ab();case 1:return function(t,e){if(1===e[0])return`\n      int getOutputCoords() {\n        return int(resultUV.x * ${e[1]}.0);\n      }\n    `;if(1===e[1])return`\n      int getOutputCoords() {\n        return int(resultUV.y * ${e[0]}.0);\n      }\n    `;return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${e[0]}, ${e[1]}));\n      return resTexRC.x * ${e[1]} + resTexRC.y;\n    }\n  `}(0,e);case 2:return function(t,e){if(I(t,e))return`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${e[0]}, ${e[1]}));\n      }\n    `;if(1===t[1])return`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${e[0]}, ${e[1]}));\n        int index = resTexRC.x * ${e[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;if(1===t[0])return`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${e[0]}, ${e[1]}));\n        int index = resTexRC.x * ${e[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n      int r = index / ${t[1]};\n      int c = index - r * ${t[1]};\n      return ivec2(r, c);\n    }\n  `}(t,e);case 3:return function(t,e){const n=bb(["r","c","d"],t);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n      ${n}\n      return ivec3(r, c, d);\n    }\n  `}(t,e);case 4:return function(t,e){const n=bb(["r","c","d","d2"],t);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n      ${n}\n      return ivec4(r, c, d, d2);\n    }\n  `}(t,e);case 5:return function(t,e){const n=bb(["r","c","d","d2","d3"],t);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${e[0]},\n                             ${e[1]}));\n\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(t,e);case 6:return function(t,e){const n=bb(["r","c","d","d2","d3","d4"],t);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(t,e);default:throw new Error(t.length+"-D output sampling is not yet supported")}}(e.logicalShape,o),h=function(t){return`\n    void setOutput(float val) {\n      ${t.output} = vec4(val, 0, 0, 0);\n    }\n  `}(l)),r&&(d+=$b),[d,u,h,a,c,i,n].join("\n")}function Nb(t){const e=t.shapeInfo.logicalShape;switch(e.length){case 0:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return`float ${n}() {return ${e};}`;const[r,s]=t.shapeInfo.texShape;if(1===r&&1===s)return`\n      float ${n}() {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;const[a,i]=t.shapeInfo.texShape,o=Rb(e);return`\n    float ${n}() {\n      vec2 uv = uvFromFlat(${a}, ${i}, ${o});\n      return sampleTexture(${e}, uv);\n    }\n  `}(t);case 1:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return`\n      float ${n}(int index) {\n        ${Tb(t)}\n      }\n    `;const r=t.shapeInfo.texShape,s=r[0],a=r[1];if(1===a&&1===s)return`\n      float ${n}(int index) {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;const i=Rb(e);if(1===a)return`\n      float ${n}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${s}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;if(1===s)return`\n      float ${n}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${a}.0, 0.5);\n        return sampleTexture(${e}, uv);\n      }\n    `;return`\n    float ${n}(int index) {\n      vec2 uv = uvFromFlat(${s}, ${a}, index + ${i});\n      return sampleTexture(${e}, uv);\n    }\n  `}(t);case 2:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=t.shapeInfo.texShape;if(null!=s&&I(e,s)){const t=s[0],e=s[1];return`\n    float ${r}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${e}.0, ${t}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `}const{newShape:a,keptDims:i}=O(e),o=a;if(o.length<e.length){const e=_b(t,o),n=["row","col"];return`\n      ${Nb(e)}\n      float ${r}(int row, int col) {\n        return ${r}(${Ob(n,i)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${e[1]}, 1)));\n        ${Tb(t)}\n      }\n    `;const l=s[0],u=s[1],c=Rb(n);if(1===u)return`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${e[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${l}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;if(1===l)return`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${e[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${u}.0, 0.5);\n      return sampleTexture(${n}, uv);\n    }\n  `;return`\n  float ${r}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${e[1]} + col + ${c};\n    vec2 uv = uvFromFlat(${l}, ${u}, index);\n    return sampleTexture(${n}, uv);\n  }\n`}(t);case 3:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=e[1]*e[2],a=e[2],{newShape:i,keptDims:o}=O(e),l=i;if(l.length<e.length){const e=_b(t,l),n=["row","col","depth"];return`\n        ${Nb(e)}\n        float ${r}(int row, int col, int depth) {\n          return ${r}(${Ob(n,o)});\n        }\n      `}if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${s}, ${a}, 1)));\n        ${Tb(t)}\n      }\n    `;const u=t.shapeInfo.texShape,c=u[0],h=u[1],d=t.shapeInfo.flatOffset;if(h===s&&null==d)return`\n        float ${r}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${a}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${h}.0, ${c}.0);\n          return sampleTexture(${n}, uv);\n        }\n      `;if(h===a&&null==d)return`\n    float ${r}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${e[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${h}.0, ${c}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;const p=Rb(n);return`\n      float ${r}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${s} + col * ${a} + depth + ${p};\n        vec2 uv = uvFromFlat(${c}, ${h}, index);\n        return sampleTexture(${n}, uv);\n      }\n  `}(t);case 4:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=e[3],a=e[2]*s,i=e[1]*a,{newShape:o,keptDims:l}=O(e);if(o.length<e.length){const e=_b(t,o),n=["row","col","depth","depth2"];return`\n      ${Nb(e)}\n      float ${r}(int row, int col, int depth, int depth2) {\n        return ${r}(${Ob(n,l)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${i}, ${a}, ${s}, 1)));\n        ${Tb(t)}\n      }\n    `;const u=t.shapeInfo.flatOffset,c=t.shapeInfo.texShape,h=c[0],d=c[1];if(d===i&&null==u)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${a}, ${s}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(d===s&&null==u)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${e[1]*e[2]}, ${e[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const p=Rb(n);return`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${a} +\n          depth * ${s} + depth2;\n      vec2 uv = uvFromFlat(${h}, ${d}, index + ${p});\n      return sampleTexture(${n}, uv);\n    }\n  `}(t);case 5:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=e[4],a=e[3]*s,i=e[2]*a,o=e[1]*i,{newShape:l,keptDims:u}=O(e);if(l.length<e.length){const e=_b(t,l),n=["row","col","depth","depth2","depth3"];return`\n      ${Nb(e)}\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        return ${r}(${Ob(n,u)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${o}, ${i}, ${a}, ${s})) +\n          depth3;\n        ${Tb(t)}\n      }\n    `;const c=t.shapeInfo.flatOffset,h=t.shapeInfo.texShape,d=h[0],p=h[1];if(p===o&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${i}, ${a}, ${s}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(p===s&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${e[1]*e[2]*e[3]},\n               ${e[2]*e[3]}, ${e[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const f=Rb(n);return`\n    float ${r}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} + depth * ${a} +\n          depth2 * ${s} + depth3 + ${f};\n      vec2 uv = uvFromFlat(${d}, ${p}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(t);case 6:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:s,keptDims:a}=O(e);if(s.length<e.length){const e=_b(t,s),n=["row","col","depth","depth2","depth3","depth4"];return`\n      ${Nb(e)}\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${r}(${Ob(n,a)});\n      }\n    `}const i=e[5],o=e[4]*i,l=e[3]*o,u=e[2]*l,c=e[1]*u;if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${u}, ${l}, ${o})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${i}, 1)));\n        ${Tb(t)}\n      }\n    `;const h=t.shapeInfo.flatOffset,d=t.shapeInfo.texShape,p=d[0],f=d[1];if(f===c&&null==h)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${u}, ${l}, ${o}, ${i})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===i&&null==h)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${e[1]*e[2]*e[3]*e[4]},\n               ${e[2]*e[3]*e[4]},\n               ${e[3]*e[4]},\n               ${e[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const m=Rb(n);return`\n    float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${u} + depth * ${l} +\n          depth2 * ${o} + depth3 * ${i} + depth4 + ${m};\n      vec2 uv = uvFromFlat(${p}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(t);default:throw new Error(e.length+"-D input sampling is not yet supported")}}function Sb(t){switch(t.shapeInfo.logicalShape.length){case 0:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1),r=yb();return`\n    vec4 ${n}() {\n      return ${r.texture2D}(${e}, halfCR);\n    }\n  `}(t);case 1:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1),r=t.shapeInfo.texShape,s=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],a=yb();return`\n    vec4 ${n}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${s[0]}, ${s[1]}, index);\n      return ${a.texture2D}(${e}, uv);\n    }\n  `}(t);case 2:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=t.shapeInfo.texShape,a=s[0],i=s[1],o=yb();if(null!=s&&I(e,s))return`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${i}.0, ${a}.0);\n\n        return ${o.texture2D}(${n}, uv);\n      }\n    `;const l=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)],u=Math.ceil(e[1]/2);return`\n    vec4 ${r}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${u}, ${l[0]}, ${l[1]}, row, col);\n      return ${o.texture2D}(${n}, uv);\n    }\n  `}(t);case 3:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=t.shapeInfo.texShape,a=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];if(1===e[0]){const n=e.slice(1),s=[1,2],a=_b(t,n),i=["b","row","col"];return`\n        ${Sb(a)}\n        vec4 ${r}(int b, int row, int col) {\n          return ${r}(${Ob(i,s)});\n        }\n      `}const i=a[0],o=a[1],l=Math.ceil(e[2]/2),u=l*Math.ceil(e[1]/2),c=yb();return`\n    vec4 ${r}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${i}, ${o}, ${u}, ${l}, b, row, col);\n      return ${c.texture2D}(${n}, uv);\n    }\n  `}(t);default:return function(t){const e=t.shapeInfo.logicalShape,n=e.length,r=t.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=t.shapeInfo.texShape,i=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],o=i[0],l=i[1],u=Math.ceil(e[n-1]/2);let c=u*Math.ceil(e[n-2]/2),h="int b, int row, int col",d=`b * ${c} + (row / 2) * ${u} + (col / 2)`;for(let t=2;t<n-1;t++)h=`int b${t}, `+h,c*=e[n-t-1],d=`b${t} * ${c} + `+d;const p=yb();return`\n    vec4 ${s}(${h}) {\n      int index = ${d};\n      int texR = index / ${l};\n      int texC = index - texR * ${l};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${l}, ${o});\n      return ${p.texture2D}(${r}, uv);\n    }\n  `}(t)}}const kb="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",Ib="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",Eb="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",$b="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function Ab(){return"\n    int getOutputCoords() {\n      return 0;\n    }\n  "}function Rb(t){return"offset"+t}function Tb(t){const e=t.name,n=k(t.shapeInfo.logicalShape);return n<2?`return ${e};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${e}[i];\n      }\n    }\n  `}function Db(t){if(t<=1)return"int";if(2===t)return"ivec2";if(3===t)return"ivec3";if(4===t)return"ivec4";if(5===t)return"ivec5";if(6===t)return"ivec6";throw Error(`GPU for rank ${t} is not yet supported`)}function _b(t,e){const n=JSON.parse(JSON.stringify(t));return n.shapeInfo.logicalShape=e,n}function Ob(t,e){return e.map(e=>t[e]).join(", ")}class Fb{constructor(t,e,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,v(t.length>2,()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`);const s=t[t.length-1],a=Math.ceil(s/e);this.outputShape=t.slice(0,-1),a>1&&this.outputShape.push(a),r||this.variableNames.push("bestIndicesA");const i=this.outputShape,o=i.length,l=Db(o),u=gb("coords",o);let c,h;if(1===a){h=o+1;const t=Db(h);c=`\n        ${t} sourceLocR = ${t}(${u.join()}, 0);\n        ++${u[o-1]};\n        ${t} sourceLocG = ${t}(${u.join()}, 0);\n        ++${u[o-2]};\n        ${t} sourceLocA = ${t}(${u.join()}, 0);\n        --${u[o-1]};\n        ${t} sourceLocB = ${t}(${u.join()}, 0);\n        --${u[o-2]};`}else h=o,c=`\n        ${l} sourceLocR = coords;\n        ++${u[o-1]};\n        ${l} sourceLocG = coords;\n        ++${u[o-2]};\n        ${l} sourceLocA = coords;\n        --${u[o-1]};\n        ${l} sourceLocB = coords;\n        --${u[o-2]};`;const d=["x","y","z","w","u","v"].slice(0,h),p="."+d[h-1],f=d.map(t=>"int "+t),m=gb("sourceLocR",h-1).concat("inIdx.r"),g=gb("sourceLocG",h-1).concat("inIdx.g"),y=gb("sourceLocB",h-1).concat("inIdx.b"),b=gb("sourceLocA",h-1).concat("inIdx.a"),x="max"===n?"greaterThan":"lessThan",w=r?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${b.join()})));`,C=`vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${g.join()}) : 0.,\n            hasNextRow ? getAChannel(${y.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${b.join()}) : 0.)`,N=r?"":`\n      float getBestIndicesAChannel(${f.join()}) {\n        return getChannel(getBestIndicesA(${d.join()}),\n                                          vec2(${d.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${f.join()}) {\n        return getChannel(getA(${d.join()}),\n                               vec2(${d.slice(-2).join()}));\n      }\n      ${N}\n      void main() {\n        ${l} coords = getOutputCoords();\n        bool hasNextCol = ${u[o-1]} < ${i[o-1]-1};\n        bool hasNextRow = ${u[o-2]} < ${i[o-2]-1};\n        ${c}\n        ivec4 srcIdx = ivec4(sourceLocR${p}, sourceLocG${p},\n          sourceLocB${p}, sourceLocA${p}) * ${e};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${C};\n\n        for (int i = 0; i < ${e}; i++) {\n          inIdx = srcIdx;\n          ${w}\n          vec4 candidate = ${C};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${x}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}class Mb{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,s=t.strideWidth,a=t.dilationHeight,i=t.dilationWidth,o=t.effectiveFilterHeight,l=t.effectiveFilterWidth,u=o-1-t.padInfo.top,c=l-1-t.padInfo.left,h=1/(e*n);this.userCode=`\n      const ivec2 pads = ivec2(${u}, ${c});\n      const float avgMultiplier = float(${h});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n            wR += ${a}) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${l};\n            wC+= ${i}) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class zb{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const e=t.filterDepth,n=t.filterHeight,r=t.filterWidth,s=t.strideDepth,a=t.strideHeight,i=t.strideWidth,o=t.dilationDepth,l=t.dilationHeight,u=t.dilationWidth,c=t.effectiveFilterDepth,h=t.effectiveFilterHeight,d=t.effectiveFilterWidth,p=c-1-t.padInfo.front,f=h-1-t.padInfo.top,m=d-1-t.padInfo.left,g=1/(e*n*r);this.userCode=`\n      const ivec3 pads = ivec3(${p}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${o}) {\n          float dyD = float(dyDCorner + wD) / ${s}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${h};\n              wR += ${l}) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${d};\n                wC += ${u}) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Lb{constructor(t,e,n,r,s,a){this.outputShape=[],this.variableNames=["x","mean","variance"],Vt(t,e),Vt(t,n);let i="0.0";null!=r&&(Vt(t,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="1.0";null!=s&&(Vt(t,s),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${o};\n        float inv = scale * inversesqrt(variance + float(${a}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class Bb{constructor(t,e,n,r,s,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],Vt(t,e),Vt(t,n);let i="vec4(0.0)";null!=r&&(Vt(t,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="vec4(1.0)";null!=s&&(Vt(t,s),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${o};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${a}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const Pb="return areal * breal - aimag * bimag;",Wb="return areal * bimag + aimag * breal;";class Vb{constructor(t,e,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=Vt(e,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${t}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const Ub="return a + b;",Gb="return a - b;",jb="return a * b;",qb="return (a < 0.) ? b * a : a;";class Hb{constructor(t,e,n){this.variableNames=["A","B"],this.outputShape=Vt(e,n),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${t}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}const Kb="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";class Xb{constructor(t,e,n,r=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=Vt(e,n);const s=this.outputShape.length;let a="";if(r)if(0===s||1===k(this.outputShape))a="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else{if(a=`\n          ${Db(s)} coords = getOutputCoords();\n        `,1===s)a+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const t=gb("coords",s);a+=`\n            bool nextRowOutOfBounds =\n              (${t[s-2]} + 1) >= ${this.outputShape[s-2]};\n            bool nextColOutOfBounds =\n              (${t[s-1]} + 1) >= ${this.outputShape[s-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${t}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${a}\n\n        setOutput(result);\n      }\n    `}}class Yb{constructor(t){this.variableNames=["A"],this.outputShape=t,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}getCustomSetupFunc(t,e){return(n,r)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(r,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(r,"maxVal")),n.gl.uniform1f(this.minLoc,t),n.gl.uniform1f(this.maxLoc,e)}}}class Jb{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}getCustomSetupFunc(t,e){return(n,r)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(r,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(r,"maxVal")),n.gl.uniform1f(this.minLoc,t),n.gl.uniform1f(this.maxLoc,e)}}}class Zb{constructor(t){this.variableNames=["real","imag"],this.outputShape=t,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}class Qb{constructor(t){this.outputShape=[],this.outputShape=Ue(t,1),this.variableNames=t.map((t,e)=>"T"+e);const e=new Array(t.length-1);e[0]=t[0][1];for(let n=1;n<e.length;n++)e[n]=e[n-1]+t[n][1];const n=[`if (yC < ${e[0]}) setOutput(getT0(yR, yC));`];for(let t=1;t<e.length;t++){const r=e[t-1];n.push(`else if (yC < ${e[t]}) setOutput(getT${t}(yR, yC-${r}));`)}const r=e.length,s=e[e.length-1];n.push(`else setOutput(getT${r}(yR, yC-${s}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class tx{constructor(t,e){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=Ue(t,e);const n=this.outputShape,r=n.length,s=Db(r),a=gb("coords",r),i=["x","y","z","w","u","v"].slice(0,r);this.variableNames=t.map((t,e)=>"T"+e);const o=new Array(t.length-1);o[0]=t[0][e];for(let n=1;n<o.length;n++)o[n]=o[n-1]+t[n][e];const l=i[e],u=i.slice(-2),c=i.join();let h=`if (${l} < ${o[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${u.join()}));\n        }`;for(let t=1;t<o.length;t++){const e=o[t-1];h+=`\n        if (${l} < ${o[t]}  && ${l} >= ${o[t-1]}) {\n          return getChannel(\n            getT${t}(${ex(i,l,e)}),\n            vec2(${ex(u,l,e)}));\n        }`}const d=o.length,p=o[o.length-1];h+=`\n        return getChannel(\n          getT${d}(${ex(i,l,p)}),\n          vec2(${ex(u,l,p)}));`,this.userCode=`\n      float getValue(${i.map(t=>"int "+t)}) {\n        ${h}\n      }\n\n      void main() {\n        ${s} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${a}), 0., 0., 0.);\n\n        ${a[r-1]} = ${a[r-1]} + 1;\n        if (${a[r-1]} < ${n[r-1]}) {\n          result.g = getValue(${a});\n        }\n\n        ${a[r-2]} = ${a[r-2]} + 1;\n        if (${a[r-2]} < ${n[r-2]}) {\n          result.a = getValue(${a});\n        }\n\n        ${a[r-1]} = ${a[r-1]} - 1;\n        if (${a[r-2]} < ${n[r-2]} &&\n            ${a[r-1]} < ${n[r-1]}) {\n          result.b = getValue(${a});\n        }\n        setOutput(result);\n      }\n    `}}function ex(t,e,n){const r=t.indexOf(e);return t.map((t,e)=>e===r?`${t} - ${n}`:t).join()}class nx{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;const e=t.strideHeight,n=t.strideWidth,r=t.padInfo.top,s=t.padInfo.left,a="channelsLast"===t.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${e} - ${r};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${s};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              if (${a}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class rx{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,s=t.strideWidth,a="channelsLast"===t.dataFormat,i=e-1-t.padInfo.top,o=n-1-t.padInfo.left,l=a?1:2,u=a?2:3,c=a?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${l}], coords[${u}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n\n              if (${a}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class sx{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;const e=t.strideDepth,n=t.strideHeight,r=t.strideWidth,s=t.padInfo.front,a=t.padInfo.top,i=t.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yF = 0; yF < ${t.outDepth}; yF++) {\n            int xF = wF + yF * ${e} - ${s};\n\n            if (xF < 0 || xF >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${t.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${a};\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${t.outWidth}; yC++) {\n                int xC = wC + yC * ${r} - ${i};\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class ax{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterDepth,n=t.filterHeight,r=t.filterWidth,s=t.strideDepth,a=t.strideHeight,i=t.strideWidth,o=e-1-t.padInfo.front,l=n-1-t.padInfo.top,u=r-1-t.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${o}, ${l}, ${u});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${e}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${s}.0;\n\n          if (dyF < 0.0 || dyF >= ${t.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${e} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${r}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${r} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class ix{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;const e=t.strideHeight,n=t.strideWidth,r=t.padInfo.top,s=t.padInfo.left,a=t.outChannels/t.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${a} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${e} - ${r};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${s};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class ox{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,s=t.strideWidth,a=e-1-t.padInfo.top,i=n-1-t.padInfo.left,o=t.outChannels/t.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${o}; dm++) {\n              int d2 = d1 * ${o} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class lx{constructor(t,e=!1,n=null,r=!1){this.variableNames=["x","W"],this.outputShape=t.outShape;const s=t.padInfo.top,a=t.padInfo.left,i=t.strideHeight,o=t.strideWidth,l=t.dilationHeight,u=t.dilationWidth,c=t.filterHeight,h=t.filterWidth,d=4*Math.floor(t.inChannels/4),p=t.inChannels%4,f="channelsLast"===t.dataFormat,m=f?1:2,g=f?2:3,y=f?3:1;let b="",x="";n&&(b=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,x="result = activation(result);");const w=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${b}\n\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${s}, ${a});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${y}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${m}], coords[${g}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${c}; wR++) {\n          int xR = xRCorner + wR * ${l};\n\n          if (xR < 0 || xR >= ${t.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${h}; wC++) {\n            int xC = xCCorner + wC * ${u};\n\n            if (xC < 0 || xC >= ${t.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${d}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${f}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===p}) {\n\n              if (${f}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${d}) *\n                    getW(wR, wC, ${d}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${d}, xR, xC) *\n                    getW(wR, wC, ${d}, d2);\n              }\n\n            } else if (${2===p}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2)\n              );\n\n              if (${f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===p}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2),\n                getW(wR, wC, ${d} + 2, d2)\n              );\n\n              if (${f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1),\n                  getX(batch, xR, xC, ${d} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC),\n                  getX(batch, ${d} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${w}\n        ${x}\n        setOutput(result);\n      }\n    `}}class ux{constructor(t){this.variableNames=["x","W"],this.outputShape=t.outShape;const e=t.padInfo.front,n=t.padInfo.top,r=t.padInfo.left,s=t.strideDepth,a=t.strideHeight,i=t.strideWidth,o=t.dilationDepth,l=t.dilationHeight,u=t.dilationWidth,c=t.filterDepth,h=t.filterHeight,d=t.filterWidth,p=4*Math.floor(t.inChannels/4),f=t.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${s}, ${a}, ${i});\n      const ivec3 pads = ivec3(${e}, ${n}, ${r});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${o};\n\n          if (xF < 0 || xF >= ${t.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${l};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${d}; wC++) {\n              int xC = xCCorner + wC * ${u};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${p}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${p}) *\n                  getW(wF, wR, wC, ${p}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${p}),\n                  getX(batch, xF, xR, xC, ${p} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${p}, d2),\n                  getW(wF, wR, wC, ${p} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${p}),\n                  getX(batch, xF, xR, xC, ${p} + 1),\n                  getX(batch, xF, xR, xC, ${p} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${p}, d2),\n                  getW(wF, wR, wC, ${p} + 1, d2),\n                  getW(wF, wR, wC, ${p} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class cx{constructor(t,e=!1,n=null,r=!1){this.variableNames=["x","W"],this.outputShape=t.outShape;const s=t.inHeight,a=t.inWidth,i=t.padInfo.top,o=t.padInfo.left,l=t.strideHeight,u=t.strideWidth,c=t.dilationHeight,h=t.dilationWidth,d=t.filterHeight,p=t.filterWidth,f=t.outChannels/t.inChannels;let m="",g="";n&&(m=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,g="result = activation(result);");const y=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${m}\n\n      const ivec2 strides = ivec2(${l}, ${u});\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${f};\n        int q = d2 - d1 * ${f};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${d}; wR++) {\n          int xR = xRCorner + wR * ${c};\n\n          if (xR < 0 || xR >= ${s}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${p}; wC++) {\n            int xC = xCCorner + wC * ${h};\n\n            if (xC < 0 || xC >= ${a}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${y}\n        ${g}\n        setOutput(result);\n      }\n    `}}class hx{constructor(t,e=!1,n=null,r=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.outShape;const s=t.inHeight,a=t.inWidth,i=t.padInfo.top,o=t.padInfo.left,l=t.strideHeight,u=t.strideWidth,c=t.dilationHeight,h=t.dilationWidth,d=t.filterHeight,p=t.filterWidth,f=p;let m="int xR; int xC; int xCOffset;";for(let t=0;t<d;t++)for(let e=0;e<p;e++)m+=`\n          vec4 xTexelR${t}C${2*e} = vec4(0.);\n          vec4 wR${t}C${e} = vec4(0.);\n          vec4 xR${t}C${e} = vec4(0.);`;for(let t=0;t<d;t++)for(let e=0;e<f;e++){const n=2*e;if(m+=`\n          xR = xRCorner + ${t*c};\n          xC = xCCorner + ${n*h};\n        `,1===u){if(n<p&&(m+=o%2==1?`\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < ${s} && xCOffset >= 0 && xCOffset < ${a}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${a}) {\n                    xTexelR${t}C${n}.zw = vec2(0.);\n                  }\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < ${s} && xCOffset >= 0 && xCOffset < ${a}) {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${a}) {\n                    previous.zw = vec2(0.);\n                  }\n\n                  xR${t}C${n} = vec4(previous.zw, xTexelR${t}C${n}.xy);\n                } else {\n                  xR${t}C${n} = vec4(0, 0, xTexelR${t}C${n}.xy);\n                }\n              `:`\n                if(xR >= 0 && xR < ${s} && xC >= 0 && xC < ${a}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                xR${t}C${n} = xTexelR${t}C${n};\n              `,n+1<p)){const e=o%2==0?x(h):h;h%2==0&&o%2==1||h%2!=0&&o%2!=1?(m+=`\n                  xCOffset = xC + ${o%2} + ${e};\n\n                  if(xR >= 0 && xR < ${s} &&\n                    xCOffset >= 0 && xCOffset < ${a}) {\n                    xTexelR${t}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n                `,h>1&&(m+=`\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < ${s} &&\n                      xCOffset >= 0 && xCOffset < ${a}) {\n                      xTexelR${t}C${n} = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR${t}C${n} = vec4(0.);\n                    }\n                  `),m+=`\n                  xR${t}C${n+1} = vec4(\n                    xTexelR${t}C${n}.zw, xTexelR${t}C${n+2}.xy);\n                `):m+=`\n                  xCOffset = xC + ${e};\n\n                  if(xR >= 0 && xR < ${s} &&\n                    xCOffset >= 0 && xCOffset < ${a}) {\n                    xTexelR${t}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR${t}C${n+1} = xTexelR${t}C${n+2};\n                `}}else n<p&&(m+=`\n              if(xR >= 0 && xR < ${s}) {\n            `,o%2==1?(m+=`\n                xCOffset = xC + 1 - ${u};\n                if(xCOffset >= 0 && xCOffset < ${a}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${a}) {\n                  xTexelR${t}C${n+2} = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR${t}C${n+2} = vec4(0.);\n                }\n\n                xR${t}C${n} = vec4(\n                  xTexelR${t}C${n}.zw, xTexelR${t}C${n+2}.zw);\n              `,n+1<p&&(m+=`\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + ${u};\n                  if(xCOffset >= 0 && xCOffset < ${a}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR${t}C${n+1} = vec4(xTexelR${t}C${n+2}.xy, final.xy);\n                `)):(m+=`\n                if(xC >= 0 && xC < ${a}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + ${u};\n                if(xCOffset >= 0 && xCOffset < ${a}) {\n                  xTexelR${t}C${n+2} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${t}C${n+2} = vec4(0.);\n                }\n\n                xR${t}C${n} = vec4(\n                  xTexelR${t}C${n}.xy, xTexelR${t}C${n+2}.xy);\n              `,n+1<p&&(m+=`\n                  xR${t}C${n+1} = vec4(\n                    xTexelR${t}C${n}.zw, xTexelR${t}C${n+2}.zw);\n                `)),m+="}");n<p&&(m+=`\n            vec4 wTexelR${t}C${n} = getW(${t}, ${n}, d1, q);\n            wR${t}C${n} = vec4(wTexelR${t}C${n}.xz, wTexelR${t}C${n}.xz);\n          `,n+1<p&&(m+=`\n              vec4 wTexelR${t}C${n+1} = getW(${t}, ${n+1}, d1, q);\n              wR${t}C${n+1} =\n                vec4(wTexelR${t}C${n+1}.xz, wTexelR${t}C${n+1}.xz);`))}for(let t=0;t<d;t++)for(let e=0;e<p;e++)m+=`dotProd += xR${t}C${e} * wR${t}C${e};`;let g="",y="";n&&(g=r?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,y="result = activation(result);");const b=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${g}\n\n      const ivec2 strides = ivec2(${l}, ${u});\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        ${m}\n\n        vec4 result = dotProd;\n        ${b}\n        ${y}\n        setOutput(result);\n      }\n    `}}class dx{constructor(t,e,n,r,s){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[a,i,o,l]=t,[u]=e,[c,h]=n;this.outputShape=[u,c,h,l];const d="bilinear"===r?1:0,[p,f]=[i-1+".0",o-1+".0"],[m,g,y]=c>1?[""+(i-1)/(c-1),"(y2-y1) * height_ratio",`y1*${p} + float(y)*(height_scale)`]:["0.0","0.0","0.5 * (y1+y2) * "+p],[b,x,w]=h>1?[""+(o-1)/(h-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0","0.5 * (x1+x2) * "+f];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${x};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${p} ) {\n          setOutput(float(${s}));\n          return;\n        }\n        float in_x = ${w};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${s}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${d} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}class px{constructor(t,e,n){this.variableNames=["x"],this.outputShape=t;const r=t.length,s=t[t.length-1],a=n?"<":">";this.userCode=`\n      int getIndex(int i) {\n        ${n?`return ${s} -i - 1;`:"return i;"}\n      }\n\n      void main() {\n        ${Db(r)} coords = getOutputCoords();\n        int end = ${fx(r,"coords")};\n        float val = 0.0;\n        for (int i = ${s} - 1; i >= 0; i -= 1) {\n          int idx = getIndex(i);\n          if (idx ${a} end) {\n            continue;\n          }\n          if (idx == end && ${e}) {\n            continue;\n          }\n          ${fx(r,"coords")} = idx;\n          val += getX(${function(t,e){if(1===t)return""+e;if(2===t)return`${e}.x, ${e}.y`;if(3===t)return`${e}.x, ${e}.y, ${e}.z`;if(4===t)return`${e}.x, ${e}.y, ${e}.z, ${e}.w`;throw Error(`Cumulative sum for rank ${t} is not yet supported`)}(r,"coords")});\n        }\n        setOutput(val);\n      }\n    `}}function fx(t,e){if(1===t)return""+e;if(2===t)return e+".y";if(3===t)return e+".z";if(4===t)return e+".w";throw Error(`Cumulative sum for rank ${t} is not yet supported`)}class mx{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=Fy.DENSE;const e=By(t),n=yb();this.outputShape=t,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${bb(["r","c","d"],t)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${e[0]}, ${e[1]}));\n        int index = 4 * (resTexRC.x * ${e[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${n.output} = result;\n      }\n    `}}class gx{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=Fy.DENSE;const e=By(t),n=yb();this.outputShape=t,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${bb(["r","c","d"],t)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${e[0]}, ${e[1]}));\n        int index = 4 * (resTexRC.x * ${e[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${n.output} = result;\n      }\n    `}}class yx{constructor(t,e,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=t,this.blockSize=e,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${e};\n      int offset_h = imod(h, ${e});\n      int in_w = w / ${e};\n      int offset_w = imod(w, ${e});\n      int offset_d = (offset_h * ${e} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}class bx{constructor(t){this.variableNames=["X"],this.outputShape=[t,t],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}class xx{constructor(t){this.variableNames=["A"],this.outTexUsage=My.DOWNLOAD;const e=yb();this.outputShape=t,this.userCode=`\n      ${wb}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${e.output} = encode_float(x);\n      }\n    `}}class wx{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=My.DOWNLOAD;const e=yb();this.outputShape=t,this.userCode=`\n      ${wb}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${e.output} = encode_float(x);\n      }\n    `}}class vx{constructor(t,e,n=!1){this.variableNames=["A"];const r=yb(),[s,a]=e;this.outputShape=t;let i="result";n&&(i="floor(result * 255. + 0.5)"),this.userCode=`\n      ${xb(t)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n        \n        int r = flatIndex / ${a};\n        int c = imod(flatIndex, ${a});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${s}.0);\n        vec4 values = ${r.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${r.output} = vec4(${i}, 0., 0., 0.);\n      }\n    `}}class Cx{constructor(t,e,n=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const r=yb(),[s,a]=e;this.outputShape=t;let i="",o="result";n&&(o="floor(result * 255. + 0.5)");for(let e=0;e<=1;e++)for(let n=0;n<=1;n++){const o=2*e+n;i+=`\n          localCoords = coords;\n          if(localCoords[2] + ${n} < ${t[2]}) {\n            localCoords[2] += ${n};\n            if(localCoords[1] + ${e} < ${t[1]}) {\n              localCoords[1] += ${e};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${a};\n              c = imod(flatIndex, ${a});\n              uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${s}.0);\n              values = ${r.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${o}] = values[0];\n              } else if(offset == 1) {\n                result[${o}] = values[1];\n              } else if(offset == 2) {\n                result[${o}] = values[2];\n              } else {\n                result[${o}] = values[3];\n              }\n            }\n          }\n        `}this.userCode=`\n      ${xb(t)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ${i}\n\n        ${r.output} = ${o};\n      }\n    `}}const Nx="return real * expR - imag * expI;",Sx="return real * expI + imag * expR;";class kx{constructor(t,e,n){this.variableNames=["real","imag"];const r=e[1];this.outputShape=e;const s=n?"2.0 * "+Math.PI:"-2.0 * "+Math.PI,a=n?r+".0":"1.0";this.userCode=`\n      const float exponentMultiplier = ${s};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${t}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${r});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${r}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${a};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}class Ix{constructor(t,e){this.outputShape=[],this.variableNames=["x"],this.outputShape=t,this.userCode="\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}getCustomSetupFunc(t){return(e,n)=>{null==this.valueLoc&&(this.valueLoc=e.getUniformLocationNoThrow(n,"value")),e.gl.uniform1f(this.valueLoc,t)}}}class Ex{constructor(t,e,n){this.variableNames=["A","indices"];const r=t.slice();r[n]=e,this.outputShape=r,this.rank=r.length;const s=Db(this.rank),a=function(t,e){const n=t.length;if(n>4)throw Error(`Gather for rank ${n} is not yet supported`);if(1===n)return"int(getIndices(resRC))";const r=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[];for(let n=0;n<t.length;n++)n===e?s.push(`int(getIndices(${r[n]}))`):s.push(""+r[n]);return s.join()}(t,n);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        setOutput(getA(${a}));\n      }\n    `}}class $x{constructor(t,e,n){this.sliceDim=t,this.strides=e,this.variableNames=["x","indices"],this.outputShape=n;const r=Db(e.length),s=Db(n.length),a=this.sliceDim>1?"strides[j]":"strides";this.userCode=`\n        ${r} strides = ${r}(${this.strides});\n         void main() {\n          ${s} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${a};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `}}function Ax(t,e){const n=yb();return function(t,e,n){const r=Qy(t,e,()=>t.createShader(t.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(Vy(t,e,()=>t.shaderSource(r,n)),Vy(t,e,()=>t.compileShader(r)),!1===t.getShaderParameter(r,t.COMPILE_STATUS))throw console.log(t.getShaderInfoLog(r)),new Error("Failed to compile vertex shader.");return r}(t,e,`${n.version}\n    precision highp float;\n    ${n.attribute} vec3 clipSpacePos;\n    ${n.attribute} vec2 uv;\n    ${n.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}function Rx(t,e){return function(t,e,n){const r=Qy(t,e,()=>t.createBuffer(),"Unable to create WebGLBuffer");return Vy(t,e,()=>t.bindBuffer(t.ARRAY_BUFFER,r)),Vy(t,e,()=>t.bufferData(t.ARRAY_BUFFER,n,t.STATIC_DRAW)),r}(t,e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function Tx(t,e){return function(t,e,n){const r=Qy(t,e,()=>t.createBuffer(),"Unable to create WebGLBuffer");return Vy(t,e,()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,r)),Vy(t,e,()=>t.bufferData(t.ELEMENT_ARRAY_BUFFER,n,t.STATIC_DRAW)),r}(t,e,new Uint16Array([0,1,2,2,1,3]))}function Dx(t,e,n,r,s,i,o){!function(t,e){const n=a().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t<=0||e<=0){throw new Error("Requested texture size "+`[${t}x${e}]`+" is invalid.")}if(t>n||e>n){throw new Error("Requested texture size "+`[${t}x${e}]`+" greater than WebGL maximum on this browser / GPU "+`[${n}x${n}]`+".")}}(n,r);const l=function(t,e){return Qy(t,e,()=>t.createTexture(),"Unable to create WebGLTexture.")}(t,e),u=t.TEXTURE_2D;return Vy(t,e,()=>t.bindTexture(u,l)),Vy(t,e,()=>t.texParameteri(u,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE)),Vy(t,e,()=>t.texParameteri(u,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE)),Vy(t,e,()=>t.texParameteri(u,t.TEXTURE_MIN_FILTER,t.NEAREST)),Vy(t,e,()=>t.texParameteri(u,t.TEXTURE_MAG_FILTER,t.NEAREST)),Vy(t,e,()=>t.texImage2D(u,0,s,n,r,0,i,o,null)),Vy(t,e,()=>t.bindTexture(t.TEXTURE_2D,null)),l}function _x(t,e,n,r,s,a,i,o){const l=t,u=new Float32Array(function(t,e){const[n,r]=Py(t,e);return n*r*4}(a,i));return l.bindBuffer(l.PIXEL_PACK_BUFFER,e),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}class Ox{constructor(t){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const e=a().getNumber("WEBGL_VERSION");null!=t?(this.gl=t,function(t,e){Dy[t]=e}(e,t)):this.gl=Oy(e);let n="WEBGL_color_buffer_float";if(1===a().getNumber("WEBGL_VERSION")){const t="OES_texture_float",e="OES_texture_half_float";if(this.textureFloatExtension=Gy(this.gl,this.debug,t),ob(this.gl,e))this.textureHalfFloatExtension=Gy(this.gl,this.debug,e);else if(a().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),ob(this.gl,"EXT_color_buffer_half_float"))this.colorBufferHalfFloatExtension=Gy(this.gl,this.debug,"EXT_color_buffer_half_float");else if(a().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",ob(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!ob(this.gl,"EXT_color_buffer_half_float"))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension("EXT_color_buffer_half_float")}this.vertexBuffer=Rx(this.gl,this.debug),this.indexBuffer=Tx(this.gl,this.debug),this.framebuffer=function(t,e){return Qy(t,e,()=>t.createFramebuffer(),"Unable to create WebGLFramebuffer.")}(this.gl,this.debug),this.textureConfig=Wy(this.gl,this.textureHalfFloatExtension)}get debug(){return a().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const t=this.gl;Vy(t,this.debug,()=>t.finish()),Vy(t,this.debug,()=>t.bindFramebuffer(t.FRAMEBUFFER,null)),Vy(t,this.debug,()=>t.deleteFramebuffer(this.framebuffer)),Vy(t,this.debug,()=>t.bindBuffer(t.ARRAY_BUFFER,null)),Vy(t,this.debug,()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null)),Vy(t,this.debug,()=>t.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r,s){const[a,i]=Ly(n,r);return Dx(t,e,a,i,s.internalFormatFloat,s.textureFormatFloat,t.FLOAT)}(this.gl,this.debug,t,e,this.textureConfig)}createFloat16MatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r,s){const[a,i]=Ly(n,r);return Dx(t,e,a,i,s.internalFormatHalfFloat,s.textureFormatFloat,s.textureTypeHalfFloat)}(this.gl,this.debug,t,e,this.textureConfig)}createUnsignedBytesMatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r,s){const[a,i]=Ly(n,r);return Dx(t,e,a,i,t.RGBA,t.RGBA,t.UNSIGNED_BYTE)}(this.gl,this.debug,t,e,this.textureConfig)}uploadPixelDataToTexture(t,e){this.throwIfDisposed(),function(t,e,n,r){Vy(t,e,()=>t.bindTexture(t.TEXTURE_2D,n)),r.data instanceof Uint8Array?Vy(t,e,()=>t.texImage2D(t.TEXTURE_2D,0,t.RGBA,r.width,r.height,0,t.RGBA,t.UNSIGNED_BYTE,r.data)):Vy(t,e,()=>t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,r)),Vy(t,e,()=>t.bindTexture(t.TEXTURE_2D,null))}(this.gl,this.debug,t,e)}uploadDenseMatrixToTexture(t,e,n,r){this.throwIfDisposed(),function(t,e,n,r,s,a,i){let o,l,u;Vy(t,e,()=>t.bindTexture(t.TEXTURE_2D,n)),a instanceof Uint8Array?(o=new Uint8Array(r*s*4),l=t.UNSIGNED_BYTE,u=t.RGBA):(o=new Float32Array(r*s*4),l=t.FLOAT,u=i.internalFormatPackedFloat),o.set(a),Vy(t,e,()=>t.texImage2D(t.TEXTURE_2D,0,u,r,s,0,t.RGBA,l,o)),Vy(t,e,()=>t.bindTexture(t.TEXTURE_2D,null))}(this.gl,this.debug,t,e,n,r,this.textureConfig)}createFloat16PackedMatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r,s){const[a,i]=Py(n,r);return Dx(t,e,a,i,s.internalFormatPackedHalfFloat,t.RGBA,s.textureTypeHalfFloat)}(this.gl,this.debug,t,e,this.textureConfig)}createPackedMatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r,s){const[a,i]=Py(n,r);return Dx(t,e,a,i,s.internalFormatPackedFloat,t.RGBA,t.FLOAT)}(this.gl,this.debug,t,e,this.textureConfig)}deleteMatrixTexture(t){this.throwIfDisposed(),this.outputTexture===t&&(Jy(this.gl,this.debug,this.framebuffer),this.outputTexture=null),Vy(this.gl,this.debug,()=>this.gl.deleteTexture(t))}downloadByteEncodedFloatMatrixFromOutputTexture(t,e,n){return this.downloadMatrixDriver(t,()=>function(t,e,n,r,s){const[a,i]=Ly(n,r),o=new Uint8Array(n*r*4);return Vy(t,e,()=>t.readPixels(0,0,a,i,s.downloadTextureFormat,t.UNSIGNED_BYTE,o)),new Float32Array(o.buffer)}(this.gl,this.debug,e,n,this.textureConfig))}downloadPackedMatrixFromBuffer(t,e,n,r,s,a){return _x(this.gl,t,0,0,0,s,a,this.textureConfig)}downloadFloat32MatrixFromBuffer(t,e){return function(t,e,n){const r=t,s=new Float32Array(n);return r.bindBuffer(r.PIXEL_PACK_BUFFER,e),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,s),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),s}(this.gl,t,e)}createBufferFromTexture(t,e,n){this.bindTextureToFrameBuffer(t);const r=function(t,e,n,r,s){const a=t.createBuffer();Vy(t,e,()=>t.bindBuffer(t.PIXEL_PACK_BUFFER,a));const i=16*n*r;return Vy(t,e,()=>t.bufferData(t.PIXEL_PACK_BUFFER,i,t.STREAM_READ)),Vy(t,e,()=>t.readPixels(0,0,r,n,t.RGBA,t.FLOAT,0)),Vy(t,e,()=>t.bindBuffer(t.PIXEL_PACK_BUFFER,null)),a}(this.gl,this.debug,e,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),r}createAndWaitForFence(){const t=this.createFence(this.gl);return this.pollFence(t)}createFence(t){let e,n;if(a().getBool("WEBGL_FENCE_API_ENABLED")){const r=t,s=r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE,0);t.flush(),n=()=>{const t=r.clientWaitSync(s,0,0);return t===r.ALREADY_SIGNALED||t===r.CONDITION_SATISFIED},e=s}else a().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(e=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(e,a().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:e,isFencePassed:n}}downloadMatrixFromPackedTexture(t,e,n){return this.downloadMatrixDriver(t,()=>function(t,e,n,r){const s=new Float32Array(n*r*4);return Vy(t,e,()=>t.readPixels(0,0,r,n,t.RGBA,t.FLOAT,s)),s}(this.gl,this.debug,e,n))}createProgram(t){this.throwIfDisposed();const e=this.gl,n=jy(e,this.debug,t),r=Ax(e,this.debug),s=function(t,e){return Qy(t,e,()=>t.createProgram(),"Unable to create WebGLProgram.")}(e,this.debug);return Vy(e,this.debug,()=>e.attachShader(s,r)),Vy(e,this.debug,()=>e.attachShader(s,n)),function(t,e,n){if(Vy(t,e,()=>t.linkProgram(n)),!1===t.getProgramParameter(n,t.LINK_STATUS))throw console.log(t.getProgramInfoLog(n)),new Error("Failed to link vertex and fragment shaders.")}(e,this.debug,s),this.debug&&Hy(e,this.debug,s),this.vertexAttrsAreBound||(this.setProgram(s),this.vertexAttrsAreBound=function(t,e,n,r){return Vy(t,e,()=>t.bindBuffer(t.ARRAY_BUFFER,r)),Ky(t,e,n,"clipSpacePos",r,3,20,0)&&Ky(t,e,n,"uv",r,2,20,12)}(e,this.debug,this.program,this.vertexBuffer)),s}deleteProgram(t){this.throwIfDisposed(),t===this.program&&(this.program=null),null!=t&&Vy(this.gl,this.debug,()=>this.gl.deleteProgram(t))}setProgram(t){this.throwIfDisposed(),this.program=t,null!=this.program&&this.debug&&Hy(this.gl,this.debug,this.program),Vy(this.gl,this.debug,()=>this.gl.useProgram(t))}getUniformLocation(t,e,n=!0){return this.throwIfDisposed(),n?function(t,e,n,r){return Qy(t,e,()=>t.getUniformLocation(n,r),'uniform "'+r+'" not present in program.')}(this.gl,this.debug,t,e):function(t,e,n){return t.getUniformLocation(e,n)}(this.gl,t,e)}getAttributeLocation(t,e){return this.throwIfDisposed(),Vy(this.gl,this.debug,()=>this.gl.getAttribLocation(t,e))}getUniformLocationNoThrow(t,e){return this.throwIfDisposed(),this.gl.getUniformLocation(t,e)}setInputMatrixTexture(t,e,n){this.throwIfDisposed(),this.throwIfNoProgram(),function(t,e,n,r,s,a){Vy(t,e,()=>Xy(t,e,r,a)),Vy(t,e,()=>t.uniform1i(s,a))}(this.gl,this.debug,this.program,t,e,n)}setOutputMatrixTexture(t,e,n){this.setOutputMatrixTextureDriver(t,n,e)}setOutputPackedMatrixTexture(t,e,n){this.throwIfDisposed();const[r,s]=Py(e,n);this.setOutputMatrixTextureDriver(t,r,s)}setOutputMatrixWriteRegion(t,e,n,r){this.setOutputMatrixWriteRegionDriver(n,t,r,e)}setOutputPackedMatrixWriteRegion(t,e,n,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&Hy(this.gl,this.debug,this.program),Zy(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const t=this.gl;this.debug&&this.debugValidate(),Vy(t,this.debug,()=>t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),Vy(this.gl,this.debug,()=>this.gl.finish())}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=Gy(this.gl,this.debug,2===a().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===a().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const t=this.gl,e=this.getQueryTimerExtensionWebGL2(),n=t.createQuery();return t.beginQuery(e.TIME_ELAPSED_EXT,n),n}const t=this.getQueryTimerExtensionWebGL1(),e=t.createQueryEXT();return t.beginQueryEXT(t.TIME_ELAPSED_EXT,e),e}endQuery(){if(2===a().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const t=this.gl,e=this.getQueryTimerExtensionWebGL2();return void t.endQuery(e.TIME_ELAPSED_EXT)}const t=this.getQueryTimerExtensionWebGL1();t.endQueryEXT(t.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(t){return await T(()=>this.disposed||this.isQueryAvailable(t,a().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),this.getQueryTime(t,a().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(t,e){if(0===e)return null;if(2===e){const e=this.gl;return e.getQueryParameter(t,e.QUERY_RESULT)/1e6}{const e=this.getQueryTimerExtensionWebGL1();return e.getQueryObjectEXT(t,e.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(t,e){if(0===e)return!0;if(2===e){const e=this.gl,n=this.getQueryTimerExtensionWebGL2(),r=e.getQueryParameter(t,e.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),r&&!this.disjoint}{const e=this.getQueryTimerExtensionWebGL1(),n=e.getQueryObjectEXT(t,e.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(e.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(t){return new Promise(e=>{this.addItemToPoll(()=>t.isFencePassed(),()=>e())})}pollItems(){const t=function(t){let e=0;for(;e<t.length;++e){if(!t[e]())break}return e-1}(this.itemsToPoll.map(t=>t.isDoneFn));for(let e=0;e<=t;++e){const{resolveFn:t}=this.itemsToPoll[e];t()}this.itemsToPoll=this.itemsToPoll.slice(t+1)}addItemToPoll(t,e){this.itemsToPoll.push({isDoneFn:t,resolveFn:e}),this.itemsToPoll.length>1||T(()=>(this.pollItems(),0===this.itemsToPoll.length))}bindTextureToFrameBuffer(t){this.throwIfDisposed(),Yy(this.gl,this.debug,t,this.framebuffer),this.debug&&Zy(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(Yy(this.gl,this.debug,this.outputTexture,this.framebuffer),this.debug&&Zy(this.gl)):Jy(this.gl,this.debug,this.framebuffer)}downloadMatrixDriver(t,e){this.bindTextureToFrameBuffer(t);const n=e();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(t,e,n){this.throwIfDisposed();const r=this.gl;Yy(r,this.debug,t,this.framebuffer),this.debug&&Zy(r),this.outputTexture=t,Vy(r,this.debug,()=>r.viewport(0,0,e,n)),Vy(r,this.debug,()=>r.scissor(0,0,e,n))}setOutputMatrixWriteRegionDriver(t,e,n,r){this.throwIfDisposed(),Vy(this.gl,this.debug,()=>this.gl.scissor(t,e,n,r))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}function Fx(t,e){if(t.length!==e.length)throw Error(`Binary was compiled with ${t.length} inputs, but was executed with ${e.length} inputs`);t.forEach((t,n)=>{const r=t.logicalShape,s=e[n],a=s.shape;if(!I(r,a))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${a} must match`);if(t.isUniform&&s.isUniform)return;const i=t.texShape,o=s.isUniform?null:s.texData.texShape;if(!I(i,o))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${o} must match`)})}class Mx{constructor(t,e,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;const{filterWidth:r,inChannels:s,strideWidth:a,strideHeight:i,padInfo:o,outWidth:l,dilationWidth:u,dilationHeight:c,dataFormat:h}=n,{left:d,top:p}=o,f=s*r,m=yb(),g="channelsLast"===h,y=g?0:1,b=g?1:2;let x="";for(let n=0;n<=1;n++)for(let r=0;r<=1;r++)x+=`\n          blockIndex = rc.y + ${r};\n          pos = rc.x + ${n};\n\n          if(blockIndex < ${t[1]} && pos < ${t[0]}) {\n            offsetY = int(blockIndex / (${l})) * ${i} - ${p};\n            d0 = offsetY + ${c} * (pos / ${f});\n\n            if(d0 < ${e[y]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${l}.) * ${a}. - ${d}.);\n              d1 = offsetX + ${u} * (int(mod(float(pos), ${f}.) / ${s}.));\n\n              if(d1 < ${e[b]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${s}.));\n\n                if (${g}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*n+r}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*n+r}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${x}\n\n        ${m.output} = result;\n      }\n    `}}class zx{constructor(t,e,n,r,s){this.variableNames=["x"],this.outputShape=[];const a=e,i=t[3]-1;let o;this.outputShape=t;const l=`float(${n}) + float(${r}) * sum`;o=.5===s?`inversesqrt(${l})`:1===s?`1.0/(${l})`:`exp(log(${l}) * float(-${s}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${o};\n        setOutput(val);\n      }\n    `}}class Lx{constructor(t,e,n,r,s){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=t,this.depth=t[3],this.depthRadius=e,this.bias=n,this.alpha=r,this.beta=s,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${e})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${e} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${r}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${r})\n                * float(${s})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${s});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}class Bx{constructor(t,e,n,r,s){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const a=e,i=t[3]-1;let o;this.outputShape=t;const l=`float(${n}) + float(${r}) * sum`;o=.5===s?`inversesqrt(${l})`:1===s?`1.0/(${l})`:`exp(log(${l}) * float(-${s}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${o};\n        setOutput(result);\n      }\n    `}}class Px{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const e=t.strideHeight,n=t.strideWidth,r=t.dilationHeight,s=t.effectiveFilterHeight,a=t.effectiveFilterWidth,i=s-1-t.padInfo.top,o=a-1-t.padInfo.left,l=s*a-1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${s};\n          wR += ${r}) {\n          float dyR = float(dyRCorner + wR) / ${e}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${a}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${l} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${a} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Wx{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const e=t.strideDepth,n=t.strideHeight,r=t.strideWidth,s=t.dilationDepth,a=t.dilationHeight,i=t.dilationWidth,o=t.effectiveFilterDepth,l=t.effectiveFilterHeight,u=t.effectiveFilterWidth,c=o-1-t.padInfo.front,h=l-1-t.padInfo.top,d=u-1-t.padInfo.left,p=o*l*u-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${h}, ${d});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${o};\n           wD += ${s}) {\n          float dyD = float(dyDCorner + wD) / ${e}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${l};\n              wR += ${a}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${u};\n                wC += ${i}) {\n              float dyC = float(dyCCorner + wC) / ${r}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${p} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${l} * ${u} +\n                  wR * ${u} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Vx{constructor(t,e,n=!1,r=!1,s=!1,a=null,i=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;const o=n?t[1]:t[2],l=Math.ceil(o/2),u=n?"i * 2, rc.y":"rc.y, i * 2",c=r?"rc.z, i * 2":"i * 2, rc.z",h=n?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],d=r?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let p="",f="";a&&(p=i?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${a}\n        }`:`vec4 activation(vec4 x) {\n          ${a}\n        }`,f="result = activation(result);");const m=s?"result += getBiasAtOutCoords();":"";s&&this.variableNames.push("bias"),i&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${p}\n\n      const float sharedDimension = ${l}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${l}; i++) {\n          vec4 a = getMatrixA(rc.x, ${u});\n          vec4 b = getMatrixB(rc.x, ${c});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${h[0]} * ${d[0]});\n          result += (${h[1]} * ${d[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${m}\n\n        ${f}\n\n        setOutput(result);\n      }\n    `}}class Ux{constructor(t,e,n){this.variableNames=["probs"],this.outputShape=[t,n],this.userCode=`\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${e-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${e-1}));\n      }\n    `}getCustomSetupFunc(t){return(e,n)=>{null==this.seedLoc&&(this.seedLoc=e.getUniformLocation(n,"seed")),e.gl.uniform1f(this.seedLoc,t)}}}class Gx{constructor(t,e,n,r){this.variableNames=["indices"],this.outputShape=[t,e],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${r}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}class jx{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=t;const e=t.length;if(0===e)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const n=gb("rc",e),r=Db(e),s=function(t,e,n){if(1===t)return"rc > "+e[0];let r="";for(let s=t-2;s<t;s++)r+=`${n[s]} >= ${e[s]}`,s<t-1&&(r+="||");return r}(e,t,n),a=function(t,e,n,r){if(1===t)return"";const s=r.slice(-2);return`\n    int r = ${s[0]};\n    int c = ${s[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${e};\n    bool rEdge = rp1 >= ${n};\n  `}(e,t[t.length-1],t[t.length-2],n),i=function(t,e){const n=t.length,r=function(t,e){const n=[];for(let r=0;r<=1;r++)for(let s=0;s<=1;s++){let a=`${0===r?"r":"rp1"}, ${0===s?"c":"cp1"}`;for(let n=2;n<t;n++)a=e[e.length-1-n]+","+a;n.push(a)}return n}(n,e);if(1===n)return`getA(rc),\n            rc + 1 >= ${t[0]} ? 0. : getA(rc + 1),\n            0, 0`;return`getA(${r[0]}),\n          cEdge ? 0. : getA(${r[1]}),\n          rEdge ? 0. : getA(${r[2]}),\n          rEdge || cEdge ? 0. : getA(${r[3]})`}(t,n);this.userCode=`\n        void main() {\n          ${r} rc = getOutputCoords();\n\n          if(${s}) {\n            setOutput(vec4(0));\n          } else {\n            ${a}\n\n            setOutput(vec4(${i}));\n          }\n        }\n      `}}}class qx{constructor(t,e,n){this.variableNames=["x"],this.outputShape=e.map((e,n)=>e[0]+t[n]+e[1]);const r=t.length,s=Db(r),a=e.map(t=>t[0]).join(","),i=e.map((e,n)=>e[0]+t[n]).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?`\n      ${s} start = ${s}(${a});\n      ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(${n}));\n        } else {\n          ${s} coords = outC - start;\n          setOutput(getX(${o}));\n        }\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(${n}));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class Hx{constructor(t,e,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.map((e,n)=>e[0]+t[n]+e[1]);const r=t.length,s=Db(r),a=e.map(t=>t[0]).join(","),i=e.map((e,n)=>e[0]+t[n]).join(","),o=gb("rc",r),l=gb("source",r),u=`${o[r-1]} < ${this.outputShape[r-1]}`,c=1===r?"source":`vec2(${l.slice(-2).join()})`,h=[s+" rc = outputLoc;",`${o[r-1]} += 1;\n       if(${u}) {\n      `,1===r?"":`}\n       rc = outputLoc;\n       ${o[r-2]} += 1;\n       if(${o[r-2]} < ${this.outputShape[r-2]}) {`,1===r?"":`  ${o[r-1]} += 1;\n         if(${u}) {`],d=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let p="";for(let t=0,e=1===r?2:4;t<e;t++)p+=`\n        ${h[t]}\n        if (${d}) {\n          result[${t}] = float(${n});\n        } else {\n          ${s} source = rc - start;\n          result[${t}] = getChannel(getX(${l.join()}), ${c});\n        }\n      `;p+=1===r?"} ":"}}",this.userCode=`\n      const ${s} start = ${s}(${a});\n      const ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}class Kx{constructor(t,e,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===e&&n)throw new Error("Cannot compute positions for average pool.");const a=t.filterWidth,i=t.strideHeight,o=t.strideWidth,l=t.dilationHeight,u=t.dilationWidth,c=t.effectiveFilterHeight,h=t.effectiveFilterWidth,d=t.padInfo.top,p=t.padInfo.left;this.outputShape=t.outShape;const f="avg"===e,m=`((batch  * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + d`,g=`(xR * ${t.inWidth} + xC) * ${t.inChannels} + d`;let y="0.0";if(f||(y="-1.0 / 1e-20"),n){const e=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${i}, ${o});\n        const ivec2 pads = ivec2(${d}, ${p});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${l}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${u}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${e} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${r?s?m:g:`wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let b=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(b="avgValue / count");const x=4*Math.floor(a/4),w=a%4,v=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${d}, ${p});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${t.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${l}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${t.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${x}; wC += 4) {\n            int xC = xCCorner + wC * ${u};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              getValue(batch, xR, xC + 3 * ${u}, d)\n            );\n\n            ${v}\n          }\n\n          int xC = xCCorner + ${x};\n          if (${1===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${v}\n          } else if (${2===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${v}\n          } else if (${3===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              initializationValue\n            );\n\n            ${v}\n          }\n        }\n        setOutput(${b});\n      }\n    `}}class Xx{constructor(t,e,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===e&&n)throw new Error("Cannot compute positions for average pool.");const a=t.filterWidth,i=t.strideDepth,o=t.strideHeight,l=t.strideWidth,u=t.dilationDepth,c=t.dilationHeight,h=t.dilationWidth,d=t.effectiveFilterDepth,p=t.effectiveFilterHeight,f=t.effectiveFilterWidth,m=t.padInfo.front,g=t.padInfo.top,y=t.padInfo.left;this.outputShape=t.outShape;const b="avg"===e;let x="0.0";if(b||(x="-1.0 / 1e-20"),n){const e=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${i}, ${o}, ${l});\n        const ivec3 pads = ivec3(${m}, ${g}, ${y});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${d};\n              wD += ${u}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${p};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${e} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${r?s?`(((batch * ${t.inDepth} + xD) * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`((xD * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`wD * ${p} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let w=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(w="avgValue / count");const v=4*Math.floor(a/4),C=a%4,N=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${i}, ${o}, ${l});\n      const ivec3 pads = ivec3(${m}, ${g}, ${y});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${t.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${d};\n            wD += ${u}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${t.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${p};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${v}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${N}\n            }\n\n            int xC = xCCorner + ${v};\n            if (${1===C}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${N}\n            } else if (${2===C}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${N}\n            } else if (${3===C}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${N}\n            }\n          }\n          setOutput(${w});\n        }\n      }\n    `}}class Yx{constructor(t,e){this.variableNames=["x"];const n=t.windowSize,r=t.batchSize,s=t.inSize,a=Math.ceil(s/n);this.outputShape=[r,a];let i="0.0",o="";"prod"===e?i="1.0":"min"===e?(i="1.0 / 1e-20",o="min"):"max"===e&&(i="-1.0 / 1e-20",o="max");let l=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===e?l="sumValue":"prod"===e?l="prodValue":"all"===e?l="allValue":"any"===e&&(l="anyValue");const u=4*Math.floor(n/4),c=n%4;let h=`\n      if (${"sum"===e}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===e}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${o}(values, minMaxValue);\n      }\n    `,d="vec4";"all"===e?(i="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",d="bvec4"):"any"===e&&(i="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",d="bvec4");let p="";s%n>0&&(p=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${p}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${u}; i += 4) {\n          int inIdx = inOffset + i;\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${u};\n        if (${1===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${l});\n      }\n    `}}class Jx{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;let n="";for(let t=0;t<4;t++){let e="thisRC = rc;";t%2==1&&(e+="thisRC.z += 1;"),t>1&&(e+="thisRC.y += 1;"),n+=`\n        ${e}\n        ${t>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${t}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${t>0?"}":""}\n      `}var r;this.userCode=`\n      ${r=e,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${bb(["r","c","d"],r)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${xb(t)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${t[1]};\n        int cols = ${t[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class Zx{constructor(t,e,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e.shape;const[,r,s]=e.shape,[,a,i]=t.shape,o=[n&&a>1?r-1:r,n&&i>1?s-1:s],l=[n&&a>1?a-1:a,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,d=1/c,p=2*Math.ceil(h)+2,f=2*Math.ceil(d)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${d});\n\n        const int winHeight = int(${p});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${r-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${s-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}class Qx{constructor(t,e,n,r){this.variableNames=["A"],this.outputShape=[];const[s,a,i,o]=t;this.outputShape=[s,e,n,o];const l=[r&&e>1?a-1:a,r&&n>1?i-1:i],u=[r&&e>1?e-1:e,r&&n>1?n-1:n];this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${l[0]/u[0]},\n          ${l[1]/u[1]});\n      const vec2 inputShapeRC = vec2(${a}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class tw{constructor(t,e,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[s,a,i,o]=t;this.outputShape=[s,e,n,o];const l=[r&&e>1?a-1:a,r&&n>1?i-1:i],u=[r&&e>1?e-1:e,r&&n>1?n-1:n];this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${l[0]/u[0]},\n          ${l[1]/u[1]},\n          ${l[1]/u[1]});\n      const vec3 inputShapeRC = vec3(${a}.0, ${i}.0,\n                                     ${i}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${o-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}class ew{constructor(t,e,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e.shape;const[,r,s]=e.shape,[,a,i]=t.shape,o=[n&&a>1?r-1:r,n&&i>1?s-1:s],l=[n&&a>1?a-1:a,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,d=1/c,p=2*Math.ceil(h)+2,f=2*Math.ceil(d)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${d});\n\n        const int winHeight = int(${p});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${o[0]}) *\n                (float(dyR) / float(${l[0]}));\n\n            float sourceFracCol =\n                float(${o[1]}) *\n                  (float(dyC) / float(${l[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}class nw{constructor(t,e,n,r){this.variableNames=["A"],this.outputShape=[];const[s,a,i,o]=t;this.outputShape=[s,e,n,o];const l=[r&&e>1?a-1:a,r&&n>1?i-1:i],u=[r&&e>1?e-1:e,r&&n>1?n-1:n],c=r?"0.5":"0.0";this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${l[0]/u[0]},\n          ${l[1]/u[1]});\n      const vec2 inputShapeRC = vec2(${a}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${c})));\n\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class rw{constructor(t,e){this.variableNames=["x"];const n=t.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=t,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${t[0]} - coord - 1));\n        }\n      `);const r=t.map((n,r)=>(n=>-1!==e.indexOf(n)&&1!==t[n]?`${t[n]} - coords[${n}] - 1`:`coords[${n}]`)(r)).join(","),s=Db(n);this.userCode=`\n      void main() {\n        ${s} coords = getOutputCoords();\n        setOutput(getX(${r}));\n      }\n    `}}class sw{constructor(t,e){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=t.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=t;const r=gb("rc",n),s=`${r[n-1]} + 1 < ${this.outputShape[n-1]}`,a=`${r[n-2]} + 1 < ${this.outputShape[n-2]}`,i=Db(n);function o(n){const r=t.map((r,s)=>function(n,r){return-1!==e.indexOf(n)&&1!==t[n]?`${t[n]} - ${r[n]} - 1`:""+r[n]}(s,n));return`getChannel(getX(${r.join(",")}), vec2(${r.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${t[0]} - rc - 1),\n            ${t[0]} - rc - 1);\n          if(${s}){\n              result.g = getChannel(getX(${t[0]} - (rc  + 1) - 1),\n                ${t[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(t){return o(t)}(r.slice())};\n          if(${s}){\n            result.g = ${function(t){return t[n-1]="("+t[n-1]+" + 1)",o(t)}(r.slice())};\n          }\n          if(${a}) {\n            result.b = ${function(t){return t[n-2]="("+t[n-2]+" + 1)",o(t)}(r.slice())};\n            if(${s}) {\n              result.a = ${function(t){return t[n-1]="("+t[n-1]+" + 1)",t[n-2]="("+t[n-2]+" + 1)",o(t)}(r.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}class aw{constructor(t,e,n,r,s,a,i=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;const o=Db(s.length),l=Db(a.length);let u="";1===n?u="i":2===n&&(u="i, j");const c=`getIndices(${u})`;let h="";1===r?h="i":2===r&&(h="i, coords[1]");const d=`getUpdates(${h})`,p=e>1?"strides[j]":"strides";this.userCode=`\n        ${o} strides = ${o}(${s});\n\n        void main() {\n          ${l} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${t}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${e}; j++) {\n              int index = round(${c});\n              flattenedIndex += index * ${p};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${d};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}class iw{constructor(t,e){this.variableNames=["x","segmentIds"];const n=t.windowSize,r=t.batchSize,s=t.inSize,a=t.numSegments,i=a*Math.ceil(s/n);this.outputShape=[r,i];const o=4*Math.floor(n/4),l=n%4,u="\n        sumValue += dot(values, segFilter);\n    ";let c="";s%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `);let h="";s%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${h}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}class ow{constructor(t,e,n){let r,s;if(this.variableNames=["c","a","b"],this.outputShape=e,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)s="resRC",r="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],i=[];for(let r=0;r<e.length;r++)i.push(""+n[r]),r<t&&a.push(""+n[r]);r=a.join(),s=i.join()}const a=Db(n);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${r});\n        if (cVal >= 1.0) {\n          setOutput(getA(${s}));\n        } else {\n          setOutput(getB(${s}));\n        }\n      }\n    `}}class lw{constructor(t){this.variableNames=["source"],this.outputShape=t,this.rank=t.length;const e=Db(this.rank),n=`uniform int start[${this.rank}];`,r=function(t){if(1===t)return"sourceLoc";if(t<=6)return uw.slice(0,t).map(t=>"sourceLoc."+t).join(",");throw Error(`Slicing for rank ${t} is not yet supported`)}(this.rank);let s;s=`\n        ${e} sourceLoc;\n        ${e} coords = getOutputCoords();\n        ${t.map((t,e)=>`sourceLoc.${uw[e]} = start[${e}] + coords.${uw[e]};`).join("\n")}\n      `,this.userCode=`\n      ${n}\n      void main() {\n        ${s}\n        setOutput(getSource(${r}));\n      }\n    `}getCustomSetupFunc(t){if(t.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${t.length})`);return(e,n)=>{null==this.startLoc&&(this.startLoc=e.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||e.gl.uniform1iv(this.startLoc,t)}}}const uw=["x","y","z","w","u","v"];class cw{constructor(t){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.rank=t.length;const e=Db(this.rank),n=gb("coords",this.rank),r=gb("sourceLoc",this.rank),s=1===this.rank?"sourceLoc":`vec2(${r.slice(-2).join()})`,a=`getChannel(getSource(${r.join()}), ${s})`,i=`\n      result.x = ${a};\n      if (++${n[this.rank-1]} < ${t[this.rank-1]}) {\n        ++${r[this.rank-1]};\n        result.y = ${a};\n        --${r[this.rank-1]};\n      }\n    `,o=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${t[this.rank-2]}) {\n        ++${r[this.rank-2]};\n        result.z = ${a};\n        if (++${n[this.rank-1]} < ${t[this.rank-1]}) {\n          ++${r[this.rank-1]};\n          result.w = ${a};\n        }\n      }\n    `,l=this.rank<=4?`sourceLoc = coords +\n            ${e}(${t.map((t,e)=>`start[${e}]`).join()});`:t.map((t,e)=>`${r[e]} = ${n[e]} + start[${e}];`).join("\n");this.userCode=`\n      uniform int start[${this.rank}];\n      void main() {\n        ${e} coords = getOutputCoords();\n        ${e} sourceLoc;\n        ${l}\n        vec4 result = vec4(0.);\n        ${i}\n        ${o}\n        setOutput(result);\n      }\n    `}getCustomSetupFunc(t){if(t.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${t.length})`);return(e,n)=>{null==this.startLoc&&(this.startLoc=e.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||e.gl.uniform1iv(this.startLoc,t)}}}class hw{constructor(t,e,n){this.variableNames=["x"],this.outputShape=n;const r=n.length,s=Db(n.length),a=Db(n.length);let i="";if(1===r)i="coords * strides + begin";else{let t=0;i=n.map((e,r)=>(t++,1===n.length?`coords * strides[${r}] + begin[${r}]`:`coords[${t-1}] * strides[${r}] + begin[${r}]`)).join(",")}this.userCode=`\n      ${s} begin = ${s}(${t});\n      ${s} strides = ${s}(${e});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `}}class dw{constructor(t){this.gpgpu=t,this.numUsedTextures=0,this.numFreeTextures=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(t,e,n){const r=pw(e,n),s=fw(t,r,n);if(s in this.freeTextures||(this.freeTextures[s]=[]),s in this.usedTextures||(this.usedTextures[s]=[]),this.freeTextures[s].length>0){this.numFreeTextures--,this.numUsedTextures++,this.log();const t=this.freeTextures[s].shift();return this.usedTextures[s].push(t),t}let a;return this.numUsedTextures++,this.log(),r===zy.PACKED_2X2_FLOAT32?a=this.gpgpu.createPackedMatrixTexture(t[0],t[1]):r===zy.PACKED_2X2_FLOAT16?a=this.gpgpu.createFloat16PackedMatrixTexture(t[0],t[1]):r===zy.UNPACKED_FLOAT32?a=this.gpgpu.createFloat32MatrixTexture(t[0],t[1]):r===zy.UNPACKED_FLOAT16?a=this.gpgpu.createFloat16MatrixTexture(t[0],t[1]):r===zy.PACKED_4X1_UNSIGNED_BYTE&&(a=this.gpgpu.createUnsignedBytesMatrixTexture(t[0],t[1])),this.usedTextures[s].push(a),a}releaseTexture(t,e,n,r){if(null==this.freeTextures)return;const s=fw(e,pw(n,r),r);s in this.freeTextures||(this.freeTextures[s]=[]),this.freeTextures[s].push(t),this.numFreeTextures++,this.numUsedTextures--;const a=this.usedTextures[s],i=a.indexOf(t);if(i<0)throw new Error("Cannot release a texture that was never provided by this texture manager");a.splice(i,1),this.log()}log(){if(!this.logEnabled)return;const t=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${t})`)}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const t in this.freeTextures)this.freeTextures[t].forEach(t=>{this.gpgpu.deleteMatrixTexture(t)});for(const t in this.usedTextures)this.usedTextures[t].forEach(t=>{this.gpgpu.deleteMatrixTexture(t)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0}}}function pw(t,e){if(t===My.UPLOAD)return zy.PACKED_2X2_FLOAT32;if(t===My.RENDER||null==t)return function(t){return a().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?t?zy.PACKED_2X2_FLOAT32:zy.UNPACKED_FLOAT32:t?zy.PACKED_2X2_FLOAT16:zy.UNPACKED_FLOAT16}(e);if(t===My.DOWNLOAD||t===My.PIXELS)return zy.PACKED_4X1_UNSIGNED_BYTE;throw new Error("Unknown logical texture type "+t)}function fw(t,e,n){return`${t[0]}_${t[1]}_${e}_${n}`}class mw{constructor(t,e){this.variableNames=["A"];const n=new Array(t.length);for(let r=0;r<n.length;r++)n[r]=t[r]*e[r];this.outputShape=n,this.rank=n.length;const r=Db(this.rank),s=function(t){const e=t.length;if(e>5)throw Error(`Tile for rank ${e} is not yet supported`);if(1===e)return`imod(resRC, ${t[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],r=[];for(let e=0;e<t.length;e++)r.push(`imod(${n[e]}, ${t[e]})`);return r.join()}(t);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        setOutput(getA(${s}));\n      }\n    `}}class gw{constructor(t,e){this.variableNames=["A"],this.outputShape=t,this.userCode=`\n      float unaryOperation(float x) {\n        ${e}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const yw="if (isnan(x)) return x;",bw="return abs(x);",xw=yw+"\n  return (x < 0.0) ? 0.0 : x;\n",ww=yw+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",vw="return (x >= 0.0) ? x : (exp(x) - 1.0);",Cw=`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = 1.7580993408473768;\n  float scale = ${fo};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`;const Nw="return -x;",Sw="return ceil(x);",kw="return floor(x);",Iw="return exp(x);",Ew="return exp(x) - 1.0;",$w="return x;",Aw="\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",Rw="\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",Tw="\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n";class Dw{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${e}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class _w{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=t;const e=t.length,n=gb("rc",e),r=Db(e),s=function(t,e){if(1===t)return"rc";let n="";for(let r=0;r<t;r++)n+=e[r],r<t-1&&(n+=",");return n}(e,n),a=n.slice(-2),i=e<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`\n      void main() {\n        ${r} rc = getOutputCoords();\n        vec4 packedInput = getA(${s});\n\n        setOutput(getChannel(packedInput, ${i}));\n      }\n    `}}const{segment_util:Ow}=cu,Fw=hl,Mw=hu,zw=du,Lw=pu,Bw=$a,Pw={};function Ww(t,e=!1){if("linear"===t)return"return x;";if("relu"===t)return e?Aw:xw;if("elu"===t)return e?Tw:vw;if("relu6"===t)return e?Rw:ww;if("prelu"===t)return e?Kb:qb;throw new Error(`Activation ${t} has not been implemented for the WebGL backend.`)}class Vw extends gu{constructor(t){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!a().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(null==t){const t=Oy(a().getNumber("WEBGL_VERSION"));this.binaryCache=((e=a().getNumber("WEBGL_VERSION"))in Pw||(Pw[e]={}),Pw[e]),this.gpgpu=new Ox(t),this.canvas=t.canvas,this.gpgpuCreatedLocally=!0}else this.gpgpu=t,this.binaryCache={},this.gpgpuCreatedLocally=!1,this.canvas=t.gl.canvas;var e;this.textureManager=new dw(this.gpgpu),this.numMBBeforeWarning=null==a().global.screen?1024:a().global.screen.height*a().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new mu(this,ta())}numDataIds(){return this.texData.numDataIds()+(this.cpuBackend?this.cpuBackend.numDataIds():0)-this.pendingDeletes}write(t,e,n){if(a().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===n&&null!=t)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const r={};return this.texData.set(r,{shape:e,dtype:n,values:t,usage:My.UPLOAD}),r}move(t,e,n,r){if(a().getBool("DEBUG")&&this.checkNumericalProblems(e),"complex64"===r)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(t,{shape:n,dtype:r,values:e,usage:My.UPLOAD})}readSync(t){const e=this.texData.get(t),{values:n,dtype:r,complexTensors:s,slice:a,shape:i,isPacked:o}=e;if(null!=a){let e;e=o?new Dw(i,$w):new gw(i,$w);const n=this.runWebGLProgram(e,[{dataId:t,shape:i,dtype:r}],r),s=this.readSync(n.dataId);return this.disposeData(n.dataId),s}if(null!=n)return this.convertAndCacheOnCPU(t);if("string"===r)return n;const l=null!=this.activeTimers;let u,c;if(l&&(u=tt()),"complex64"===r){c=Ql(s.real.dataSync(),s.imag.dataSync())}else c=this.getValuesFromTexture(t);return l&&(this.downloadWaitMs+=tt()-u),this.convertAndCacheOnCPU(t,c)}async read(t){if(this.pendingRead.has(t)){const e=this.pendingRead.get(t);return new Promise(t=>e.push(t))}const e=this.texData.get(t),{values:n,shape:r,slice:s,dtype:i,complexTensors:o,isPacked:l}=e;if(null!=s){let e;e=l?new Dw(r,$w):new gw(r,$w);const n=this.runWebGLProgram(e,[{dataId:t,shape:r,dtype:i}],i),s=this.read(n.dataId);return this.disposeData(n.dataId),s}if(null!=n)return this.convertAndCacheOnCPU(t);if(!a().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===a().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let u,c,h=null;if("complex64"!==i&&a().get("WEBGL_BUFFER_SUPPORTED")){u=this.decode(t);const e=this.texData.get(u.dataId);h=this.gpgpu.createBufferFromTexture(e.texture,...By(r))}if(this.pendingRead.set(t,[]),"complex64"!==i&&await this.gpgpu.createAndWaitForFence(),"complex64"===i){const t=await Promise.all([o.real.data(),o.imag.data()]);c=Ql(t[0],t[1])}else if(null==h)c=this.getValuesFromTexture(t);else{const t=k(r);c=this.gpgpu.downloadFloat32MatrixFromBuffer(h,t)}null!=u&&this.disposeData(u.dataId);const d=this.convertAndCacheOnCPU(t,c),p=this.pendingRead.get(t);return this.pendingRead.delete(t),p.forEach(t=>t(d)),this.pendingDisposal.has(t)&&(this.pendingDisposal.delete(t),this.disposeData(t),this.pendingDeletes--),d}checkNumericalProblems(t){if(null!=t)for(let e=0;e<t.length;e++){const n=t[e];if(!Uy(n)){if(a().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(t){const{shape:e,dtype:n,isPacked:r}=this.texData.get(t),s=k(e);if(a().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(t),r=this.texData.get(n.dataId),a=this.gpgpu.downloadMatrixFromPackedTexture(r.texture,...By(e)).subarray(0,s);return this.disposeData(n.dataId),a}const i=a().getBool("WEBGL_PACK")&&!0===r,o=i?nb(e):e,l=i?new wx(o):new xx(o),u=this.runWebGLProgram(l,[{shape:o,dtype:n,dataId:t}],"float32"),c=this.texData.get(u.dataId),h=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(c.texture,c.texShape[0],c.texShape[1]).subarray(0,s);return this.disposeData(u.dataId),h}async time(t){const e=this.activeTimers,n=[];let r=!1;null==this.programTimersStack?(this.programTimersStack=n,r=!0):this.activeTimers.push(n),this.activeTimers=n,t();const s=S(this.activeTimers.map(t=>t.query)).filter(t=>null!=t),i=S(this.activeTimers.map(t=>t.name)).filter(t=>null!=t);this.activeTimers=e,r&&(this.programTimersStack=null);const o={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};if(a().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const t=await Promise.all(s);o.kernelMs=w(t),o.getExtraProfileInfo=()=>t.map((t,e)=>({name:i[e],ms:t})).map(t=>`${t.name}: ${t.ms}`).join(", ")}else o.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,o}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU}}startTimer(){return a().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:tt(),endMs:null}}endTimer(t){return a().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),t):(t.endMs=tt(),t)}async getQueryTime(t){if(a().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(t);const e=t;return e.endMs-e.startMs}disposeData(t){if(this.pendingDisposal.has(t))return;if(this.pendingRead.has(t))return this.pendingDisposal.add(t),void this.pendingDeletes++;if(!this.texData.has(t))return;this.releaseGPUData(t);const{complexTensors:e}=this.texData.get(t);null!=e&&(e.real.dispose(),e.imag.dispose()),this.texData.delete(t)}releaseGPUData(t){const{texture:e,dtype:n,texShape:r,usage:s,isPacked:a,slice:i}=this.texData.get(t),o=i&&i.origDataId||t,l=this.dataRefCount.get(o);l>1?this.dataRefCount.set(o,l-1):(this.dataRefCount.delete(o),null!=e&&(this.numBytesInGPU-=this.computeBytes(r,n),this.textureManager.releaseTexture(e,r,s,a)));const u=this.texData.get(t);u.texture=null,u.texShape=null,u.isPacked=!1,u.slice=null}getTexture(t){return this.uploadToGPU(t),this.texData.get(t).texture}getDataInfo(t){return this.texData.get(t)}getCPUBackend(){return a().getBool("WEBGL_CPU_FORWARD")?(null==this.cpuBackend&&(this.cpuBackend=ta().findBackend("cpu")),this.cpuBackend):null}shouldExecuteOnCPU(t,e=128){return null!=this.getCPUBackend()&&t.every(t=>null==this.texData.get(t.dataId).texture&&k(t.shape)<e)}getGPGPUContext(){return this.gpgpu}complex(t,e){const n=this.makeOutput(t.shape,"complex64");return this.texData.get(n.dataId).complexTensors={real:ta().keep(t.clone()),imag:ta().keep(e.clone())},n}real(t){return this.texData.get(t.dataId).complexTensors.real.clone()}imag(t){return this.texData.get(t.dataId).complexTensors.imag.clone()}slice(t,e,n){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.slice(t,e,n);if(0===k(n))return ce([],n,t.dtype);const{isPacked:r}=this.texData.get(t.dataId),s=vr(t.shape,e,n);if(r||!s){const r=a().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new cw(n):new lw(n),s=r.getCustomSetupFunc(e);return this.compileAndRun(r,[t],null,s)}return this.uploadToGPU(t.dataId),this.shallowSlice(t,e,n)}shallowSlice(t,e,n){const r=this.texData.get(t.dataId),s=this.makeOutput(n,t.dtype),a=this.texData.get(s.dataId);Object.assign(a,r),a.shape=n,a.dtype=t.dtype;let i=Cr(e,t.strides);r.slice&&(i+=r.slice.flatOffset),a.slice={flatOffset:i,origDataId:r.slice&&r.slice.origDataId||t.dataId};const o=this.dataRefCount.get(a.slice.origDataId)||1;return this.dataRefCount.set(a.slice.origDataId,o+1),s}stridedSlice(t,e,n,r){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.stridedSlice(t,e,n,r);const s=br(e,n,r);if(s.some(t=>0===t))return ce([],s);const a=new hw(e,r,s);return this.compileAndRun(a,[t])}reverse(t,e){const n=a().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new sw(t.shape,e):new rw(t.shape,e);return this.compileAndRun(n,[t])}concat(t,e){if("complex64"===t[0].dtype){const n=t.map(t=>le(t)),r=t.map(t=>ue(t));return oe(this.concat(n,e),this.concat(r,e))}if(this.shouldExecuteOnCPU(t))return this.cpuBackend.concat(t,e);if(1===t.length)return t[0];if(t.length>a().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const n=Math.floor(t.length/2),r=this.concat(t.slice(0,n),e),s=this.concat(t.slice(n),e);return this.concat([r,s],e)}if(a().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&t[0].rank>1){const n=new tx(t.map(t=>t.shape),e);return this.compileAndRun(n,t)}const n=Ue(t.map(t=>t.shape),e),r=t.map(t=>t.as2D(-1,k(t.shape.slice(e)))),s=new Qb(r.map(t=>t.shape));return this.compileAndRun(s,r).reshape(n)}neg(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.neg(t);if(a().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Nw,t.dtype);const e=new gw(t.shape,Nw);return this.compileAndRun(e,[t])}batchMatMul(t,e,n,r){const s=n?t.shape[2]:t.shape[1],a=r?e.shape[1]:e.shape[2],i=n?t.shape[1]:t.shape[2],[o,,]=t.shape;if((1===s||1===a)&&i>1e3){n&&(t=Rr(t,[0,2,1])),r&&(e=Rr(e,[0,2,1]));const s=1===a?t:t.as3D(o,i,1),l=1===a?2:1,u=1===a?e.as3D(o,1,i):e;return this.multiply(s,u).sum(l,!0)}const l=It(t.dtype,e.dtype),u=new Vx(t.shape,[o,s,a],n,r);return this.compileAndRun(u,[t,e],l)}fusedBatchMatMul({a:t,b:e,transposeA:n,transposeB:r,bias:s,activation:a,preluActivationWeights:i}){const o=n?t.shape[2]:t.shape[1],l=r?e.shape[1]:e.shape[2],[u,,]=t.shape,c=It(t.dtype,e.dtype),h=null!=s,d=null!=i,p=a?Ww(a,!0):null,f=new Vx(t.shape,[u,o,l],n,r,h,p,d),m=[t,e];return s&&m.push(s),i&&m.push(i),this.compileAndRun(f,m,c)}multiply(t,e){if("complex64"===t.dtype){const n=this.texData.get(t.dataId),r=this.texData.get(e.dataId),s=new Vb(Pb,t.shape,e.shape),a=new Vb(Wb,t.shape,e.shape),i=[this.makeComplexComponentTensorInfo(t,n.complexTensors.real),this.makeComplexComponentTensorInfo(t,n.complexTensors.imag),this.makeComplexComponentTensorInfo(e,r.complexTensors.real),this.makeComplexComponentTensorInfo(e,r.complexTensors.imag)],o=this.compileAndRun(s,i),l=this.compileAndRun(a,i),u=this.complex(o,l);return o.dispose(),l.dispose(),u}if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.multiply(t,e);if(a().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,jb,t.dtype);const n=new Hb(jb,t.shape,e.shape);return this.compileAndRun(n,[t,e],t.dtype)}batchNormalization(t,e,n,r,s,i){const o=[t,e,n];let l=null;null!=i&&(l=i.shape,o.push(i));let u=null;if(null!=s&&(u=s.shape,o.push(s)),a().getBool("WEBGL_PACK_NORMALIZATION")){const s=new Bb(t.shape,e.shape,n.shape,l,u,r);return this.compileAndRun(s,o)}const c=new Lb(t.shape,e.shape,n.shape,l,u,r);return this.compileAndRun(c,o)}localResponseNormalization4D(t,e,n,r,s){const i=a().getBool("WEBGL_PACK_NORMALIZATION")?new Bx(t.shape,e,n,r,s):new zx(t.shape,e,n,r,s);return this.compileAndRun(i,[t])}LRNGrad(t,e,n,r,s,a,i){const o=new Lx(e.shape,r,s,a,i);return this.compileAndRun(o,[e,n,t])}tile(t,e){if("string"===t.dtype){const n=this.readSync(t.dataId).map(t=>st(t)),r=je(t.shape,t.dtype,n);return zw(r,e)}const n=new mw(t.shape,e);return this.compileAndRun(n,[t])}pad(t,e,n){const r=a().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Hx(t.shape,e,n):new qx(t.shape,e,n);return this.compileAndRun(r,[t])}gather(t,e,n){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.gather(t,e,n);const r=new Ex(t.shape,e.size,n);return this.compileAndRun(r,[t,e])}batchToSpaceND(t,e,n){v(t.rank<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");const r=e.reduce((t,e)=>t*e),s=Hl(t.shape,e,r),a=Kl(s.length,e.length),i=Xl(t.shape,e,r),o=Yl(n,e.length),l=Jl(i,n,e.length);return Rr(t.reshape(s),a).reshape(i).slice(o,l)}spaceToBatchND(t,e,n){v(t.rank<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");const r=e.reduce((t,e)=>t*e),s=[[0,0]];s.push(...n);for(let n=1+e.length;n<t.shape.length;++n)s.push([0,0]);const a=t.pad(s),i=Hl(a.shape,e,r,!1),o=Kl(i.length,e.length,!1),l=Xl(a.shape,e,r,!1);return Rr(a.reshape(i),o).reshape(l)}reduce(t,e,n){const r=t.shape[0],s=t.shape[1],a=yi(s),i=new Yx({windowSize:a,inSize:s,batchSize:r},e),o=this.compileAndRun(i,[t],n);return 1===o.shape[1]?o:this.reduce(o,e,n)}argReduce(t,e,n=null){let r=t.shape[0],s=t.shape[1];null!=n&&(r=n.shape[0],s=n.shape[1]);const a=yi(s),i=new fb({windowSize:a,inSize:s,batchSize:r},e,null==n),o=[t];null!=n&&o.push(n);const l=this.compileAndRun(i,o,"int32");return 1===l.shape[1]?l:this.argReduce(t,e,l)}argReducePacked(t,e,n=null){const r=null!=n?n.shape:t.shape,s=yi(r[r.length-1]),a=new Fb(r,s,e,null==n),i=null==n?[t]:[t,n],o=this.compileAndRun(a,i,"int32");return o.rank===t.rank?this.argReducePacked(t,e,o):o}sum(t,e){ne("sum",e,t.rank);const[n,r]=te(t.shape,e),s=k(r),a=t.as2D(-1,s),i=Et(t.dtype);return this.reduce(a,"sum",i).reshape(n)}prod(t,e){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.prod(t,e);const[n,r]=te(t.shape,e),s=k(r),a=t.as2D(-1,s),i=Et(t.dtype);return this.reduce(a,"prod",i).reshape(n)}unsortedSegmentSum(t,e,n){let r=0;const s=re([r],t.rank);let a=t;null!=s&&(a=Rr(t,s),r=ae(1,t.rank)[0]);const i=Ow.computeOutShape(a.shape,r,n),o=k([a.shape[r]]),l=a.as2D(-1,o),u=Et(t.dtype);let c=this.segOpCompute(l,"unsortedSegmentSum",e,u,n).reshape(i);return null!=s&&(c=Rr(c,se(s))),c}segOpCompute(t,e,n,r,s){const a=t.shape[0],i=t.shape[1],o=Ow.segOpComputeOptimalWindowSize(i,s),l=new iw({windowSize:o,inSize:i,batchSize:a,numSegments:s},e),u=this.compileAndRun(l,[t,n],r);return u.shape[1]===s?u:(n=Se(0,s).tile([i/o]),this.segOpCompute(u,e,n,r,s))}argMinMaxReduce(t,e,n){const r=[e];if(ne("arg"+n.charAt(0).toUpperCase()+n.slice(1),r,t.rank),!a().getBool("WEBGL_PACK_REDUCE")||t.rank<=2){const[e,s]=te(t.shape,r),a=k(s),i=t.as2D(-1,a);return this.argReduce(i,n).reshape(e)}return this.argReducePacked(t,n)}argMin(t,e){return this.argMinMaxReduce(t,e,"min")}argMax(t,e){return this.argMinMaxReduce(t,e,"max")}cumsum(t,e,n,r){if(e!==t.rank-1)throw new Error(`WebGL cumsum shader expects an inner-most axis=${t.rank-1} but got axis=`+e);const s=new px(t.shape,n,r);return this.compileAndRun(s,[t])}equal(t,e){if(a().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(equal(a, b));\n","bool");const n=new Hb("return float(a == b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}notEqual(t,e){if(a().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(notEqual(a, b));\n","bool");const n=new Hb("return float(a != b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}less(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.less(t,e);if(a().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(lessThan(a, b));\n","bool");const n=new Hb("return float(a < b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}lessEqual(t,e){if(a().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(lessThanEqual(a, b));\n","bool");const n=new Hb("return float(a <= b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}greater(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.greater(t,e);if(a().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(greaterThan(a, b));\n","bool");const n=new Hb("return float(a > b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}greaterEqual(t,e){if(a().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(greaterThanEqual(a, b));\n","bool");const n=new Hb("return float(a >= b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}logicalNot(t){const e=new gw(t.shape,"return float(!(x >= 1.0));");return this.compileAndRun(e,[t])}logicalAnd(t,e){if(a().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n","bool");const n=new Hb("return float(a >= 1.0 && b >= 1.0);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}logicalOr(t,e){if(a().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n","bool");const n=new Hb("return float(a >= 1.0 || b >= 1.0);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}select(t,e,n){const r=new ow(t.rank,e.shape,e.rank);return this.compileAndRun(r,[t,e,n],It(e.dtype,n.dtype))}where(t){Zl("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const e=t.dataSync();return Bw(t.shape,e)}topk(t,e,n){const r=t.dataSync();return Lw(r,t.shape,t.dtype,e)}min(t,e){ne("min",e,t.rank);const[n,r]=te(t.shape,e),s=k(r),a=t.as2D(-1,s);return this.reduce(a,"min",a.dtype).reshape(n)}minimum(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.minimum(t,e);const n=a().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Xb("\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new Hb("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",t.shape,e.shape);return this.compileAndRun(n,[t,e])}mod(t,e){const n=a().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Xb("\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new Hb("if (b == 0.0) return NAN;\n  return mod(a, b);",t.shape,e.shape);return this.compileAndRun(n,[t,e])}max(t,e){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.max(t,e);ne("max",e,t.rank);const[n,r]=te(t.shape,e),s=k(r),a=t.as2D(-1,s);return this.reduce(a,"max",a.dtype).reshape(n)}maximum(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.maximum(t,e);const n=a().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Xb("\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new Hb("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",t.shape,e.shape);return this.compileAndRun(n,[t,e])}all(t,e){ne("all",e,t.rank);const[n,r]=te(t.shape,e),s=k(r),a=t.as2D(-1,s);return this.reduce(a,"all",a.dtype).reshape(n)}any(t,e){ne("any",e,t.rank);const[n,r]=te(t.shape,e),s=k(r),a=t.as2D(-1,s);return this.reduce(a,"any",a.dtype).reshape(n)}floorDiv(t,e){if(a().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n","int32");const n=new Hb("\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",t.shape,e.shape);return this.compileAndRun(n,[t,e],"int32")}add(t,e){if("complex64"===t.dtype&&"complex64"===e.dtype)return this.complexSeparableBinaryOp(t,e,Ub);if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.add(t,e);const n=It(t.dtype,e.dtype);if(a().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,Ub,n);const r=new Hb(Ub,t.shape,e.shape);return this.compileAndRun(r,[t,e],n)}packedUnaryOp(t,e,n){const r=new Dw(t.shape,e);return this.compileAndRun(r,[t],n)}packedBinaryOp(t,e,n,r,s=!1){const a=new Xb(n,t.shape,e.shape,s);return this.compileAndRun(a,[t,e],r)}complexSeparableBinaryOp(t,e,n){const r=this.texData.get(t.dataId),s=this.texData.get(e.dataId),[a,i]=[[r.complexTensors.real,s.complexTensors.real],[r.complexTensors.imag,s.complexTensors.imag]].map(r=>{const[s,a]=r,i=this.makeComplexComponentTensorInfo(t,s),o=this.makeComplexComponentTensorInfo(e,a),l=new Hb(n,t.shape,e.shape);return this.compileAndRun(l,[i,o],It(s.dtype,a.dtype))}),o=this.complex(a,i);return a.dispose(),i.dispose(),o}makeComplexComponentTensorInfo(t,e){return{dataId:e.dataId,dtype:e.dtype,shape:t.shape}}addN(t){if(1===t.length)return t[0];if(t.length>a().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const e=Math.floor(t.length/2),n=this.addN(t.slice(0,e)),r=this.addN(t.slice(e));return this.addN([n,r])}const e=t.map(t=>t.dtype).reduce((t,e)=>It(t,e)),n=t.map(t=>t.shape),r=a().getBool("WEBGL_PACK")?new pb(t[0].shape,n):new db(t[0].shape,n);return this.compileAndRun(r,t,e)}subtract(t,e){if("complex64"===t.dtype&&"complex64"===e.dtype)return this.complexSeparableBinaryOp(t,e,Gb);if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.subtract(t,e);const n=It(t.dtype,e.dtype);if(a().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,Gb,t.dtype);const r=new Hb(Gb,t.shape,e.shape);return this.compileAndRun(r,[t,e],n)}pow(t,e){const n=a().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Xb("\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new Hb("\nif(a < 0.0 && floor(b) < b){\n  return NAN;\n}\nif (b == 0.0) {\n  return 1.0;\n}\nreturn (round(mod(b, 2.0)) != 1) ?\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",t.shape,e.shape),r=It(t.dtype,e.dtype);return this.compileAndRun(n,[t,e],r)}ceil(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.ceil(t);if(a().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Sw,t.dtype);const e=new gw(t.shape,Sw);return this.compileAndRun(e,[t])}floor(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.floor(t);if(a().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,kw,t.dtype);const e=new gw(t.shape,kw);return this.compileAndRun(e,[t])}sign(t){const e=new gw(t.shape,"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n");return this.compileAndRun(e,[t])}isNaN(t){const e=new gw(t.shape,"return float(isnan(x));");return this.compileAndRun(e,[t],"bool")}isInf(t){const e=new gw(t.shape,"return float(isinf(x));");return this.compileAndRun(e,[t],"bool")}isFinite(t){const e=new gw(t.shape,"return float(!isnan(x) && !isinf(x));");return this.compileAndRun(e,[t],"bool")}round(t){const e=new gw(t.shape,"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n");return this.compileAndRun(e,[t])}exp(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.exp(t);if(a().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Iw,t.dtype);const e=new gw(t.shape,Iw);return this.compileAndRun(e,[t])}expm1(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.expm1(t);if(a().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Ew,t.dtype);const e=new gw(t.shape,Ew);return this.compileAndRun(e,[t])}softmax(t,e){const n=_([e],t.shape),r=this.max(t,n),s=ee(r.shape,n),a=this.subtract(t,r.reshape(s)),i=this.exp(a),o=this.sum(i,n).reshape(s);return nr(i,o)}log(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.log(t);if(a().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,"\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",t.dtype);const e=new gw(t.shape,"if (x < 0.0) return NAN;\n  return log(x);");return this.compileAndRun(e,[t])}log1p(t){const e=new gw(t.shape,"return log(1.0 + x);");return this.compileAndRun(e,[t])}sqrt(t){const e=new gw(t.shape,"return sqrt(x);");return this.compileAndRun(e,[t])}rsqrt(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.rsqrt(t);const e=new gw(t.shape,"return inversesqrt(x);");return this.compileAndRun(e,[t])}reciprocal(t){const e=new gw(t.shape,"return 1.0 / x;");return this.compileAndRun(e,[t])}relu(t){let e;return e=a().getBool("WEBGL_PACK")?new Dw(t.shape,Aw):new gw(t.shape,xw),this.compileAndRun(e,[t])}relu6(t){let e;return e=a().getBool("WEBGL_PACK")?new Dw(t.shape,Rw):new gw(t.shape,ww),this.compileAndRun(e,[t])}prelu(t,e){const n=a().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Xb(Kb,t.shape,e.shape):new Hb(qb,t.shape,e.shape);return this.compileAndRun(n,[t,e])}elu(t){if(a().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Tw,t.dtype);const e=new gw(t.shape,vw);return this.compileAndRun(e,[t])}eluDer(t,e){const n=a().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Xb("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",t.shape,e.shape):new Hb("return (b >= 1.0) ? a : a * (b + 1.0);",t.shape,e.shape);return this.compileAndRun(n,[t,e])}selu(t){const e=new gw(t.shape,Cw);return this.compileAndRun(e,[t])}int(t){const e=new gw(t.shape,"return float(int(x));");return this.compileAndRun(e,[t],"int32")}clip(t,e,n){let r;r=a().getBool("WEBGL_PACK_CLIP")?new Jb(t.shape):new Yb(t.shape);const s=r.getCustomSetupFunc(e,n);return this.compileAndRun(r,[t],null,s)}abs(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.abs(t);if(a().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,bw,t.dtype);const e=new gw(t.shape,bw);return this.compileAndRun(e,[t])}complexAbs(t){const e=this.texData.get(t.dataId),n=new Zb(t.shape),r=[this.makeComplexComponentTensorInfo(t,e.complexTensors.real),this.makeComplexComponentTensorInfo(t,e.complexTensors.imag)];return this.compileAndRun(n,r)}sigmoid(t){const e=new gw(t.shape,"return 1.0 / (1.0 + exp(-1.0 * x));");return this.compileAndRun(e,[t])}softplus(t){const e=new gw(t.shape,"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n");return this.compileAndRun(e,[t])}sin(t){const e=new gw(t.shape,"if (isnan(x)) return x;\n  return sin(x);\n");return this.compileAndRun(e,[t])}cos(t){const e=new gw(t.shape,"if (isnan(x)) return x;\n  return cos(x);\n");return this.compileAndRun(e,[t])}tan(t){const e=new gw(t.shape,"return tan(x);");return this.compileAndRun(e,[t])}asin(t){const e=new gw(t.shape,"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n");return this.compileAndRun(e,[t])}acos(t){const e=new gw(t.shape,"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n");return this.compileAndRun(e,[t])}atan(t){const e=new gw(t.shape,"if (isnan(x)) return x;\n  return atan(x);\n");return this.compileAndRun(e,[t])}atan2(t,e){const n=a().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Xb("\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new Hb("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",t.shape,e.shape);return this.compileAndRun(n,[t,e])}sinh(t){const e=new gw(t.shape,"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n");return this.compileAndRun(e,[t])}cosh(t){const e=new gw(t.shape,"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n");return this.compileAndRun(e,[t])}tanh(t){const e=new gw(t.shape,"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n");return this.compileAndRun(e,[t])}asinh(t){const e=new gw(t.shape,"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));");return this.compileAndRun(e,[t])}acosh(t){const e=new gw(t.shape,"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\n  return log(x + sqrt(x * x - 1.0));");return this.compileAndRun(e,[t])}atanh(t){const e=new gw(t.shape,"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;");return this.compileAndRun(e,[t])}erf(t){const e=new gw(t.shape,'\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = 0.3275911;\n  float a1 = 0.254829592;\n  float a2 = -0.284496736;\n  float a3 = 1.421413741;\n  float a4 = -1.453152027;\n  float a5 = 1.061405429;\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n');return this.compileAndRun(e,[t])}step(t,e){const n=new gw(t.shape,function(t=0){return`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${t});\n  `}(e));return this.compileAndRun(n,[t])}conv2dByMatMul(t,e,n,r,s,i){const o=t.shape,l=this.texData.get(t.dataId),u=n.inChannels,c=o[0]*o[1]*o[2],h=n.outChannels,d="channelsLast"===n.dataFormat,p=(1===c||1===h)&&u>1e3,f=o[2]%2!=0&&!!l.isPacked;if(p||!a().getBool("WEBGL_LAZILY_UNPACK")||!a().getBool("WEBGL_PACK_BINARY_OPERATIONS")||!f){const a=d?o[0]*o[1]*o[2]:o[0]*o[2]*o[3],l=this.reshape(t,[1,a,n.inChannels]),u=this.reshape(e,[1,n.inChannels,n.outChannels]);return this.reshape(this.fusedBatchMatMul({a:l,b:u,transposeA:!1,transposeB:!1,bias:r,activation:s,preluActivationWeights:i}),n.outShape)}const m=d?o[0]*o[1]*(o[2]+1):o[0]*o[2]*(o[3]+1),g={dataId:t.dataId,shape:[1,m,n.inChannels],dtype:t.dtype},y=l.shape;l.shape=l.shape.slice(),l.shape[l.shape.length-2]++,v(sb(l.shape,g.shape),()=>`packed reshape ${l.shape} to ${g.shape} isn't free`);const b=this.reshape(e,[1,n.inChannels,n.outChannels]),x=this.fusedBatchMatMul({a:g,b:b,transposeA:!1,transposeB:!1,bias:r,activation:s,preluActivationWeights:i}),w=this.texData.get(x.dataId);return v(w.isPacked,()=>"batchMatMul result is expected to be packed"),l.shape=y,w.shape=n.outShape,ta().makeTensorFromDataId(x.dataId,n.outShape,x.dtype)}conv2dWithIm2Row(t,e,n,r,s,a){const{filterWidth:i,filterHeight:o,inChannels:l,outWidth:u,outHeight:c,dataFormat:h}=n,d="channelsLast"===h,p=i*o*l,f=c*u,m=[p,f],g=t.squeeze([0]),y=e.reshape([1,p,-1]),b=new Mx(m,g.shape,n),x=this.compileAndRun(b,[g]).reshape([1,m[0],m[1]]),w=null!=r,v=null!=a,C=s?Ww(s,!0):null,N=new Vx(x.shape,[1,f,n.outChannels],!0,!1,w,C,v),S=[x,y];r&&S.push(r),v&&S.push(a);const k=this.compileAndRun(N,S);return d?k.reshape([1,c,u,n.outChannels]):k.reshape([1,n.outChannels,c,u])}fusedConv2d({input:t,filter:e,convInfo:n,bias:r,activation:s,preluActivationWeights:i}){if(1===n.filterHeight&&1===n.filterWidth&&1===n.dilationHeight&&1===n.dilationWidth&&1===n.strideHeight&&1===n.strideWidth&&("SAME"===n.padInfo.type||"VALID"===n.padInfo.type))return this.conv2dByMatMul(t,e,n,r,s,i);if(a().getBool("WEBGL_CONV_IM2COL")&&1===t.shape[0])return this.conv2dWithIm2Row(t,e,n,r,s,i);const o=null!=r,l=null!=i,u=s?Ww(s,!1):null,c=new lx(n,o,u,l),h=[t,e];return r&&h.push(r),i&&h.push(i),this.compileAndRun(c,h)}conv2d(t,e,n){if(1===n.filterHeight&&1===n.filterWidth&&1===n.dilationHeight&&1===n.dilationWidth&&1===n.strideHeight&&1===n.strideWidth&&("SAME"===n.padInfo.type||"VALID"===n.padInfo.type))return this.conv2dByMatMul(t,e,n);if(a().getBool("WEBGL_CONV_IM2COL")&&1===t.shape[0])return this.conv2dWithIm2Row(t,e,n);const r=new lx(n);return this.compileAndRun(r,[t,e])}conv2dDerInput(t,e,n){const r=new rx(n);return this.compileAndRun(r,[t,e])}conv2dDerFilter(t,e,n){const r=new nx(n);return this.compileAndRun(r,[t,e])}fusedDepthwiseConv2D({input:t,filter:e,convInfo:n,bias:r,activation:s,preluActivationWeights:i}){const o=a().getBool("WEBGL_PACK_DEPTHWISECONV")&&n.strideWidth<=2&&n.outChannels/n.inChannels==1,l=s?Ww(s,o):null,u=[t,e],c=null!=r,h=null!=i;let d;return c&&u.push(r),h&&u.push(i),o?(d=new hx(n,c,l,h),this.compileAndRun(d,u)):(d=new cx(n,c,l,h),this.compileAndRun(d,u))}depthwiseConv2D(t,e,n){let r;return a().getBool("WEBGL_PACK_DEPTHWISECONV")&&n.strideWidth<=2&&n.outChannels/n.inChannels==1?(r=new hx(n),this.compileAndRun(r,[t,e])):(r=new cx(n),this.compileAndRun(r,[t,e]))}depthwiseConv2DDerInput(t,e,n){const r=new ox(n);return this.compileAndRun(r,[t,e])}depthwiseConv2DDerFilter(t,e,n){const r=new ix(n);return this.compileAndRun(r,[t,e])}conv3d(t,e,n){const r=new ux(n);return this.compileAndRun(r,[t,e])}conv3dDerInput(t,e,n){const r=new ax(n);return this.compileAndRun(r,[t,e])}conv3dDerFilter(t,e,n){const r=new sx(n);return this.compileAndRun(r,[t,e])}maxPool(t,e){const n=new Kx(e,"max",!1);return this.compileAndRun(n,[t])}avgPool(t,e){const n=new Kx(e,"avg",!1);return this.compileAndRun(n,[t],"float32")}maxPoolBackprop(t,e,n,r){const s=new Kx(r,"max",!0),a=this.compileAndRun(s,[e]),i=new Px(r),o=this.compileAndRun(i,[t,a],e.dtype);return a.dispose(),o}avgPoolBackprop(t,e,n){const r=new Mb(n);return this.compileAndRun(r,[t],e.dtype)}cast(t,e){return ou(t,e,this)}unstack(t,e){const n=t.shape[e],r=new Array(t.rank-1);let s=0;for(let n=0;n<t.rank;n++)n!==e&&(r[s++]=t.shape[n]);const a=new Array(t.rank).fill(0),i=t.shape.slice();i[e]=1;const o=new Array(n);for(let n=0;n<o.length;n++)a[e]=n,o[n]=this.slice(t,a,i).reshape(r);return o}avgPool3d(t,e){const n=new Xx(e,"avg",!1);return this.compileAndRun(n,[t],"float32")}avgPool3dBackprop(t,e,n){const r=new zb(n);return this.compileAndRun(r,[t],e.dtype)}maxPool3d(t,e){const n=new Xx(e,"max",!1);return this.compileAndRun(n,[t],"float32")}maxPool3dBackprop(t,e,n,r){const s=new Xx(r,"max",!0),a=this.compileAndRun(s,[e]),i=new Wx(r),o=this.compileAndRun(i,[t,a],e.dtype);return a.dispose(),o}reshape(t,e){const n=this.texData.get(t.dataId);if(n.isPacked&&!sb(t.shape,e)&&(null===n.texture||!sb(n.shape,e))){const n=this.packedReshape(t,e);return ta().makeTensorFromDataId(n.dataId,n.shape,n.dtype)}return lu(t,e)}resizeBilinear(t,e,n,r){const s=a().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new tw(t.shape,e,n,r):new Qx(t.shape,e,n,r);return this.compileAndRun(s,[t],"float32")}resizeBilinearBackprop(t,e,n){const r=new Zx(t,e,n);return this.compileAndRun(r,[t])}resizeNearestNeighbor(t,e,n,r){const s=new nw(t.shape,e,n,r);return this.compileAndRun(s,[t])}resizeNearestNeighborBackprop(t,e,n){const r=new ew(t,e,n);return this.compileAndRun(r,[t])}multinomial(t,e,n,r){const s=e?t:vo(t),a=s.shape[0],i=s.shape[1],o=new Ux(a,i,n),l=o.getCustomSetupFunc(r);return this.compileAndRun(o,[s],"int32",l)}oneHot(t,e,n,r){const s=new Gx(t.size,e,n,r);return this.compileAndRun(s,[t])}diag(t){const e=new bx(t.size);return this.compileAndRun(e,[t])}nonMaxSuppression(t,e,n,r,s){Zl("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const a=t.dataSync(),i=e.dataSync();return Fw(a,i,n,r,s)}cropAndResize(t,e,n,r,s,a){const i=new dx(t.shape,e.shape,r,s,a);return this.compileAndRun(i,[t,e,n],"float32")}depthToSpace(t,e,n){v(e>1,()=>"blockSize should be > 1 for depthToSpace, but was: "+e);const r=t.shape[0],s="NHWC"===n?t.shape[1]:t.shape[2],a="NHWC"===n?t.shape[2]:t.shape[3],i="NHWC"===n?t.shape[3]:t.shape[1],o=s*e,l=a*e,u=i/(e*e),c=new yx("NHWC"===n?[r,o,l,u]:[r,u,o,l],e,n);return this.compileAndRun(c,[t])}split(t,e,n){return Mw(t,e,n)}scatterND(t,e,n){const{sliceRank:r,numUpdates:s,sliceSize:a,strides:i,outputSize:o}=Us(0,t,n),l=[o/a,a],u=t.reshape([s,r]),c=e.reshape([s,a]);if(0===o)return lu(ce([]),n);const h=de(0),d=new aw(s,r,u.rank,c.rank,i,l);return this.compileAndRun(d,[c,u,h]).reshape(n)}sparseToDense(t,e,n,r){const{sliceRank:s,numUpdates:a,strides:i,outputSize:o}=Us(0,t,n),l=new aw(a,s,t.rank,e.rank,i,[o,1],!1);return this.compileAndRun(l,[e,t,r]).reshape(n)}fft(t){return this.fftImpl(t,!1)}ifft(t){return this.fftImpl(t,!0)}fftImpl(t,e){const n=this.texData.get(t.dataId),r=new kx(Nx,t.shape,e),s=new kx(Sx,t.shape,e),a=[this.makeComplexComponentTensorInfo(t,n.complexTensors.real),this.makeComplexComponentTensorInfo(t,n.complexTensors.imag)],i=this.compileAndRun(r,a),o=this.compileAndRun(s,a),l=this.complex(i,o).as2D(t.shape[0],t.shape[1]);return i.dispose(),o.dispose(),l}gatherND(t,e){const n=e.shape,r=n[n.length-1],[s,a,i,o]=Bs(t,e),l=e.reshape([a,r]),u=t.reshape([t.size/i,i]),c=new $x(r,o,[a,i]);return this.compileAndRun(c,[u,l]).reshape(s)}fill(t,e,n){if("string"===(n=n||q(e))){const r=M(n,k(t));return r.fill(e),ta().makeTensor(r,t,n,this)}{const r=new Ix(t,e),s=r.getCustomSetupFunc(e);return this.compileAndRun(r,[],n,s)}}onesLike(t){if("string"===t.dtype)throw new Error("onesLike is not supported under string dtype");return this.fill(t.shape,1,t.dtype)}zerosLike(t){return this.fill(t.shape,"string"===t.dtype?"":0,t.dtype)}linspace(t,e,n){return uu(t,e,n)}makeTensorInfo(t,e){const n=this.write(null,t,e);return this.texData.get(n).usage=null,{dataId:n,shape:t,dtype:e}}makeOutput(t,e){const{dataId:n}=this.makeTensorInfo(t,e);return ta().makeTensorFromDataId(n,t,e,this)}unpackTensor(t){const e=new _w(t.shape);return this.runWebGLProgram(e,[t],t.dtype)}packTensor(t){const e=new jx(t.shape);return this.runWebGLProgram(e,[t],t.dtype,null,!0)}packedReshape(t,e){const n=[tb(t.shape),...eb(t.shape)],r={dtype:t.dtype,shape:n,dataId:t.dataId},s=[tb(e),...eb(e)],a=new Jx(s,n),i=this.runWebGLProgram(a,[r],t.dtype,null,!0);return{dataId:i.dataId,shape:e,dtype:i.dtype}}decode(t){const e=this.texData.get(t),{isPacked:n,shape:r,dtype:s}=e,a=nb(r);let i;i=n?new gx(a):new mx(a);return{dtype:s,shape:r,dataId:this.runWebGLProgram(i,[{shape:a,dtype:s,dataId:t}],s,null,!0).dataId}}runWebGLProgram(t,e,n,r,s=!1){const i=this.makeTensorInfo(t.outputShape,n),o=this.texData.get(i.dataId);if(t.packedOutput&&(o.isPacked=!0),t.outPackingScheme===Fy.DENSE){const e=By(t.outputShape);o.texShape=e.map(t=>2*t)}if(null!=t.outTexUsage&&(o.usage=t.outTexUsage),0===k(i.shape))return o.values=F(i.dtype,0),i;const l=[],u=e.map(e=>{if("complex64"===e.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(e.dataId);if(null==n.texture){if(!t.packedInputs&&k(e.shape)<=a().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:e.shape,texData:null,isUniform:!0,uniformValues:n.values};t.packedInputs&&(n.isPacked=!0,n.shape=e.shape)}else if(!!n.isPacked!=!!t.packedInputs)e=n.isPacked?this.unpackTensor(e):this.packTensor(e),l.push(e),n=this.texData.get(e.dataId);else if(n.isPacked&&!sb(n.shape,e.shape)){const t=e,r=e.shape;e.shape=n.shape,e=this.packedReshape(e,r),l.push(e),n=this.texData.get(e.dataId),t.shape=r}return this.uploadToGPU(e.dataId),{shape:e.shape,texData:n,isUniform:!1}});this.uploadToGPU(i.dataId);const c={shape:i.shape,texData:o,isUniform:!1},h=function(t,e,n){let r="";e.concat(n).forEach(t=>{const e=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0,n=t.isUniform?"uniform":t.texData.texShape;r+=`${t.shape}_${n}_${e}`});const s=t.userCode;let a=t.constructor.name;return a+="_"+r+"_"+s,a}(t,u,c),d=this.getAndSaveBinary(h,()=>function(t,e,n,r){const s=e.userCode,i=n.map((t,n)=>{const r={logicalShape:t.shape,texShape:t.isUniform?null:t.texData.texShape,isUniform:t.isUniform,isPacked:!t.isUniform&&t.texData.isPacked,flatOffset:null};return null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0&&(r.flatOffset=t.texData.slice.flatOffset),{name:e.variableNames[n],shapeInfo:r}}),o=i.map(t=>t.shapeInfo),l={logicalShape:r.shape,texShape:r.texData.texShape,isUniform:!1,isPacked:r.texData.isPacked,flatOffset:null},u=Cb(i,l,s,e.packedInputs),c=t.createProgram(u);let h=null;const d=t.getUniformLocation(c,"NAN",!1);1===a().getNumber("WEBGL_VERSION")&&(h=t.getUniformLocation(c,"INFINITY",!1));const p={};for(let n=0;n<e.variableNames.length;n++){const r=e.variableNames[n],s=!1;p[r]=t.getUniformLocation(c,r,s),p["offset"+r]=t.getUniformLocation(c,"offset"+r,s)}return{program:e,source:u,webGLProgram:c,uniformLocations:p,inShapeInfos:o,outShapeInfo:l,infLoc:h,nanLoc:d}}(this.gpgpu,t,u,c)),p=null!=this.activeTimers;let f;if(p&&(f=this.startTimer()),function(t,e,n,r,s){Fx(e.inShapeInfos,n),Fx([e.outShapeInfo],[r]);const i=r.texData.texture,o=r.texData.texShape;r.texData.isPacked?t.setOutputPackedMatrixTexture(i,o[0],o[1]):t.setOutputMatrixTexture(i,o[0],o[1]),t.setProgram(e.webGLProgram),1===a().getNumber("WEBGL_VERSION")&&null!==e.infLoc&&t.gl.uniform1f(e.infLoc,1/0),null!==e.nanLoc&&t.gl.uniform1f(e.nanLoc,NaN),n.forEach((n,r)=>{const s=e.program.variableNames[r],a=e.uniformLocations[s],i=e.uniformLocations["offset"+s];if(null!=a)if(n.isUniform)if(k(n.shape)<2)t.gl.uniform1f(a,n.uniformValues[0]);else{let e=n.uniformValues;e instanceof Float32Array||(e=new Float32Array(e)),t.gl.uniform1fv(a,e)}else null!=n.texData.slice&&null!=i&&t.gl.uniform1i(i,n.texData.slice.flatOffset),t.setInputMatrixTexture(n.texData.texture,a,r)}),null!=s&&s(t,e.webGLProgram),t.executeProgram()}(this.gpgpu,d,u,c,r),l.forEach(t=>this.disposeData(t.dataId)),p&&(f=this.endTimer(f),this.activeTimers.push({name:t.constructor.name,query:this.getQueryTime(f)})),!a().getBool("WEBGL_LAZILY_UNPACK")&&o.isPacked&&!1===s){const t=this.unpackTensor(i);return this.disposeData(i.dataId),t}return i}compileAndRun(t,e,n,r,s=!1){n=n||e[0].dtype;const a=this.runWebGLProgram(t,e,n,r,s);return ta().makeTensorFromDataId(a.dataId,a.shape,a.dtype)}getAndSaveBinary(t,e){return t in this.binaryCache||(this.binaryCache[t]=e()),this.binaryCache[t]}getTextureManager(){return this.textureManager}dispose(){if(!this.disposed){if(!a().getBool("IS_TEST")){Object.keys(this.binaryCache).forEach(t=>{this.gpgpu.deleteProgram(this.binaryCache[t].webGLProgram),delete this.binaryCache[t]})}this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0}}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=na(()=>{if(!a().get("WEBGL_RENDER_FLOAT32_ENABLED")){const t=a().getBool("DEBUG");a().set("DEBUG",!1);const e=this.abs(de(1e-8)).dataSync()[0];if(a().set("DEBUG",t),e>0)return 32}return 16})),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(t){const e=this.texData.get(t),{shape:n,dtype:r,values:s,texture:i,usage:o,isPacked:l}=e;if(null!=i)return;const u=null!=this.activeTimers;let c;u&&(c=tt());let h=e.texShape;if(null==h&&(h=function(t,e=!1){let n=a().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e&&(n*=2,1===(t=t.map((e,n)=>n>=t.length-2?x(t[n]):t[n])).length&&(t=[2,t[0]])),2!==t.length){const e=O(t);t=e.newShape}let r=k(t);if(t.length<=1&&r<=n)return[1,r];if(2===t.length&&t[0]<=n&&t[1]<=n)return t;if(3===t.length&&t[0]*t[1]<=n&&t[2]<=n)return[t[0]*t[1],t[2]];if(3===t.length&&t[0]<=n&&t[1]*t[2]<=n)return[t[0],t[1]*t[2]];if(4===t.length&&t[0]*t[1]*t[2]<=n&&t[3]<=n)return[t[0]*t[1]*t[2],t[3]];if(4===t.length&&t[0]<=n&&t[1]*t[2]*t[3]<=n)return[t[0],t[1]*t[2]*t[3]];if(e){const e=tb(t);let n=2,s=2;return t.length&&([n,s]=eb(t)),r=e*(n/2)*(s/2),A(r).map(t=>2*t)}return A(r)}(n,l),e.texShape=h),null!=s){const t=nb(n);let a,i=h[1],o=h[0];const d=s instanceof Uint8Array;l?([i,o]=Py(h[0],h[1]),a=new Cx(t,[o,i],d)):a=new vx(t,[o,i],d);const p=this.makeTensorInfo([o,i],r);this.texData.get(p.dataId).usage=d?My.PIXELS:My.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(p.dataId),i,o,s);const f=!0,m=this.runWebGLProgram(a,[p],r,null,f),g=this.texData.get(m.dataId);e.texture=g.texture,e.texShape=g.texShape,e.isPacked=g.isPacked,e.usage=g.usage,this.disposeData(p.dataId),this.texData.delete(m.dataId),e.values=null,u&&(this.uploadWaitMs+=tt()-c)}else{const t=this.acquireTexture(h,o,r,l);e.texture=t}}convertAndCacheOnCPU(t,e){const n=this.texData.get(t),{dtype:r}=n;return this.releaseGPUData(t),null!=e&&(n.values=function(t,e){if("float32"===e||"complex64"===e)return t;if("int32"===e||"bool"===e){const n="int32"===e?new Int32Array(t.length):new Uint8Array(t.length);for(let e=0;e<n.length;++e)n[e]=Math.round(t[e]);return n}throw new Error("Unknown dtype "+e)}(e,r)),n.values}acquireTexture(t,e,n,r){if(this.numBytesInGPU+=this.computeBytes(t,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const t=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${t} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(t,e,r)}computeBytes(t,e){return t[0]*t[1]*W(e)}}const Uw={kernelName:"Div",backendName:"webgl",kernelFunc:({inputs:t,backend:e})=>{const{a:n,b:r}=t;return function(t,e,n){let r=new Hb("\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",t.shape,e.shape);return a().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&(r=new Xb("\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",t.shape,e.shape,!0)),n.runWebGLProgram(r,[t,e],"float32")}(n,r,e)}};class Gw{constructor(t){this.variableNames=["A"];const e=yb(),[n,r]=t;this.outputShape=t,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${n}.0);\n\n        vec4 values = ${e.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class jw{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const e=yb(),[n,r]=t;this.outputShape=t,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${r}.0, ${n}.0);\n            vec4 values = ${e.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${e.output} = result;\n      }\n    `}}const qw={kernelName:"FromPixels",backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t;let{pixels:s}=e;const{numChannels:i}=r,o="undefined"!=typeof HTMLVideoElement&&s instanceof HTMLVideoElement,l="undefined"!=typeof HTMLImageElement&&s instanceof HTMLImageElement,[u,c]=o?[s.videoWidth,s.videoHeight]:[s.width,s.height],h=[c,u],d=[c,u,i];(l||o)&&(null==Hw&&(Hw=document.createElement("canvas").getContext("2d")),Hw.canvas.width=u,Hw.canvas.height=c,Hw.drawImage(s,0,0,u,c),s=Hw.canvas);const p=n.makeTensorInfo(h,"int32");n.texData.get(p.dataId).usage=My.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(p.dataId),s);const f=a().getBool("WEBGL_PACK")?new jw(d):new Gw(d),m=n.runWebGLProgram(f,[p],"int32");return n.disposeData(p.dataId),m}};let Hw;const Kw={kernelName:"MaxPoolWithArgmax",backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{filterSize:s,strides:a,pad:i,includeBatchInIndex:o}=e,l=n;v(4===r.shape.length,()=>`Error in maxPool: input must be rank 4 but got rank ${r.shape.length}.`);const u=[1,1];v(Fi(a,u),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${u}'`);const c=ki(r.shape,s,a,u,i),[h,d]=function(t,e,n,r){let s=new Kx(n,"max",!1);const a=r.runWebGLProgram(s,[t],"float32");return s=new Kx(n,"max",!0,!0,e),[a,r.runWebGLProgram(s,[t],"float32")]}(r,o,c,l);return[h,d]}},Xw=dl,Yw={kernelName:"NonMaxSuppressionV5",backendName:"webgl",kernelFunc:({inputs:t,backend:e,attrs:n})=>{Zl("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{boxes:r,scores:s}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o,softNmsSigma:l}=n,u=e,c=u.readSync(r.dataId),h=u.readSync(s.dataId),d=a,p=i,f=o,m=l,{selectedIndices:g,selectedScores:y}=Xw(c,h,d,p,f,m);return[g,y]}},Jw={kernelName:"Square",backendName:"webgl",kernelFunc:({inputs:t,backend:e})=>{const{x:n}=t,r=e,s=new gw(n.shape,"return x * x;");return r.runWebGLProgram(s,[n],n.dtype)}},Zw={kernelName:"SquaredDifference",backendName:"webgl",kernelFunc:({inputs:t,backend:e})=>{const{a:n,b:r}=t,s=e,i=a().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Xb("return (a - b) * (a - b);",n.shape,r.shape):new Hb("return (a - b) * (a - b);",n.shape,r.shape);return s.compileAndRun(i,[n,r])}};class Qw{constructor(t,e){this.variableNames=["A"];const n=new Array(t.length);for(let r=0;r<n.length;r++)n[r]=t[e[r]];this.outputShape=n,this.rank=n.length;const r=Db(this.rank),s=function(t){const e=t.length;if(e>6)throw Error(`Transpose for rank ${e} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=new Array(e);for(let e=0;e<t.length;e++)r[t[e]]=n[e];return r.join()}(e);this.userCode=`\n    void main() {\n      ${r} resRC = getOutputCoords();\n      setOutput(getA(${s}));\n    }\n    `}}class tv{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(t.length);for(let r=0;r<n.length;r++)n[r]=t[e[r]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const r=Db(this.rank),s=mb("rc",this.rank),a=new Array(this.rank);for(let t=0;t<e.length;t++)a[e[t]]=s[t];const i=`vec2(${a.slice(-2).join()})`,o=`++${s[this.rank-1]} < ${n[this.rank-1]}`,l=`getChannel(getA(${a.join()}), ${i})`;this.userCode=`\n    void main() {\n      ${r} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${l};\n      if(${o}) {\n        result[1] = ${l};\n      }\n      --${s[this.rank-1]};\n      if(++${s[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${l};\n        if(${o}) {\n          result[3] = ${l};\n        }\n      }\n      setOutput(result);\n    }\n    `}}const ev=[qw,Uw,Yw,Jw,Zw,{kernelName:"Transpose",backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{perm:s}=e,i=n,o=r.shape.length,l=new Array(o);for(let t=0;t<l.length;t++)l[t]=r.shape[s[t]];let u;if(i.shouldExecuteOnCPU([r])){const t=Ry(i.texData.get(r.dataId).values,r.shape,r.dtype,s,l);u=i.makeTensorInfo(l,r.dtype),i.texData.get(u.dataId).values=t}else u=function(t,e,n){const r=a().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new tv(t.shape,e):new Qw(t.shape,e);return n.runWebGLProgram(r,[t],t.dtype)}(r,s,i);return u}},Kw];for(const t of ev)f(t);zt()&&aa("webgl",()=>new Vw,2);const nv={"tfjs-core":"2.0.0-rc.1","tfjs-data":"2.0.0-rc.1","tfjs-layers":"2.0.0-rc.1","tfjs-converter":"2.0.0-rc.1",tfjs:"2.0.0-rc.1"};t.AdadeltaOptimizer=Ml,t.AdagradOptimizer=zl,t.AdamOptimizer=Ll,t.AdamaxOptimizer=Bl,t.Add="Add",t.AddN="AddN",t.BroadcastTo="BroadcastTo",t.Callback=Qf,t.CallbackList=Eh,t.Concat="Concat",t.CustomCallback=Rh,t.DataStorage=mu,t.Div="Div",t.EarlyStopping=nm,t.Environment=s,t.FromPixels="FromPixels",t.FusedBatchNorm="FusedBatchNorm",t.GraphModel=tg,t.History=Ah,t.Identity="Identity",t.InputSpec=mh,t.KernelBackend=gu,t.LayerVariable=dh,t.LayersModel=Md,t.MaxPoolWithArgmax="MaxPoolWithArgmax",t.MomentumOptimizer=Wl,t.NonMaxSuppressionV5="NonMaxSuppressionV5",t.NotEqual="NotEqual",t.OneHot="OneHot",t.Optimizer=Fl,t.PadV2="PadV2",t.RMSPropOptimizer=Vl,t.RNN=kf,t.SGDOptimizer=Pl,t.Sequential=Ld,t.SplitV="SplitV",t.Square="Square",t.SquaredDifference="SquaredDifference",t.Sub="Sub",t.SymbolicTensor=gh,t.Tensor=bt,t.TensorBuffer=ft,t.Tile="Tile",t.Transpose="Transpose",t.Variable=xt,t.abs=an,t.acos=on,t.acosh=ln,t.add=sn,t.addN=oa,t.addStrict=Pn,t.all=$e,t.any=Ae,t.argMax=Re,t.argMin=Te,t.asin=un,t.asinh=cn,t.atan=hn,t.atan2=Wn,t.atanh=dn,t.avgPool=lo,t.avgPool3d=ho,t.backend=ia,t.backend_util=cu,t.basicLSTMCell=ko,t.batchNorm=da,t.batchNorm2d=ma,t.batchNorm3d=ba,t.batchNorm4d=va,t.batchNormalization=ha,t.batchNormalization2d=fa,t.batchNormalization3d=ya,t.batchNormalization4d=wa,t.batchToSpaceND=He,t.booleanMaskAsync=Si,t.broadcastTo=Na,t.browser=Ls,t.buffer=je,t.callbacks=rm,t.cast=Ke,t.ceil=pn,t.clipByValue=fn,t.clone=Ca,t.complex=oe,t.concat=Ge,t.concat1d=Sa,t.concat2d=ka,t.concat3d=Ia,t.concat4d=Ea,t.constraints=Zu,t.conv1d=Pi,t.conv2d=Wi,t.conv2dTranspose=Xi,t.conv3d=Vi,t.conv3dTranspose=Yi,t.cos=mn,t.cosh=gn,t.cumsum=Xe,t.customGrad=Yt,t.data=fy,t.deprecationWarn=Qs,t.depthToSpace=Ye,t.depthwiseConv2d=ji,t.deregisterOp=function(t){delete im[t]},t.device_util=Lt,t.diag=Lo,t.disableDeprecationWarnings=function(){a().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")},t.dispose=ra,t.disposeVariables=function(){Ft.disposeVariables()},t.div=nr,t.divNoNan=Fa,t.divStrict=Vn,t.dot=Zi,t.dropout=Bo,t.elu=mo,t.enableDebugMode=function(){a().set("DEBUG",!0)},t.enableProdMode=function(){a().set("PROD",!0)},t.engine=ta,t.env=a,t.equal=ii,t.equalStrict=oi,t.erf=yn,t.exp=bn,t.expandDims=Je,t.expm1=xn,t.eye=Ma,t.fft=To,t.fill=Ce,t.findBackend=function(t){return Ft.findBackend(t)},t.findBackendFactory=function(t){return Ft.findBackendFactory(t)},t.floor=wn,t.floorDiv=Un,t.frame=Uo,t.fused=_l,t.gather=Ci,t.gatherND=zo,t.gather_util=Ps,t.getBackend=function(){return Ft.backendName},t.getGradient=d,t.getKernel=h,t.getKernelsForBackend=p,t.grad=function(t){return v(H(t),()=>"The f passed in grad(f) must be a function"),(e,n)=>{const r=Ht(e,"x","tf.grad",null),s=null!=n?Ht(n,"dy","tf.grad"):null;return Ft.tidy(()=>{const{value:e,grads:n}=Ft.gradients(()=>t(r),[r],s);return null!=s&&C(e.shape,s.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),Jt(n),n[0]})}},t.grads=function(t){return v(H(t),()=>"The f passed in grads(f) must be a function"),(e,n)=>{v(Array.isArray(e),()=>"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s");const r=Kt(e,"args","tf.grads",null),s=null!=n?Ht(n,"dy","tf.grads"):null;return Ft.tidy(()=>{const{value:e,grads:n}=Ft.gradients(()=>t(...r),r,s);return null!=s&&C(e.shape,s.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),Jt(n),n})}},t.greater=li,t.greaterEqual=ui,t.greaterEqualStrict=ci,t.greaterStrict=hi,t.hammingWindow=Vo,t.hannWindow=Wo,t.ifft=Do,t.imag=ue,t.image=kl,t.inTopKAsync=qo,t.initializers=nh,t.input=Bd,t.io=Ds,t.irfft=Oo,t.isFinite=Dn,t.isInf=Tn,t.isNaN=Rn,t.keep=sa,t.kernel_impls=fu,t.layers=Xf,t.leakyRelu=go,t.less=di,t.lessEqual=pi,t.lessEqualStrict=fi,t.lessStrict=mi,t.linalg=ll,t.linspace=Ne,t.loadGraphModel=async function(t,e={}){if(null==t)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==e&&(e={}),e.fromTFHub&&null==t.load&&(t.endsWith("/")||(t+="/"),t+="model.json?tfjs-format=file");const n=new tg(t,e);return await n.load(),n},t.loadLayersModel=function(t,e){return null==e&&(e={}),zd(t,e)},t.localResponseNormalization=No,t.log=vn,t.log1p=Cn,t.logSigmoid=Nn,t.logSoftmax=Co,t.logSumExp=De,t.logicalAnd=Aa,t.logicalNot=Ra,t.logicalOr=Ta,t.logicalXor=Da,t.losses=rl,t.matMul=Ji,t.math=Fs,t.max=_e,t.maxPool=oo,t.maxPool3d=co,t.maxPoolWithArgmax=po,t.maximum=Gn,t.maximumStrict=jn,t.mean=Oe,t.memory=ea,t.metrics=Yf,t.min=Fe,t.minimum=qn,t.minimumStrict=Hn,t.mod=Kn,t.modStrict=Xn,t.model=function(t){return new Md(t)},t.models=Jf,t.moments=Me,t.movingAverage=Eo,t.mul=Yn,t.mulStrict=Jn,t.multiRNNCell=Io,t.multinomial=za,t.neg=Sn,t.nextFrame=ql,t.norm=So,t.notEqual=La,t.notEqualStrict=gi,t.oneHot=_s,t.ones=we,t.onesLike=ke,t.op=ie,t.outerProduct=Qi,t.pad=mr,t.pad1d=Ba,t.pad2d=Pa,t.pad3d=Wa,t.pad4d=Va,t.pool=uo,t.pow=Zn,t.powStrict=Qn,t.prelu=yo,t.print=qe,t.prod=Le,t.profile=function(t){return Ft.profile(t)},t.rand=Ua,t.randomGamma=ei,t.randomNormal=ni,t.randomUniform=ri,t.range=Se,t.ready=function(){return Ft.ready()},t.real=le,t.reciprocal=kn,t.registerBackend=aa,t.registerCallbackConstructor=function(t,e){Dh.registerCallbackConstructor(t,e)},t.registerGradient=m,t.registerKernel=f,t.registerOp=function(t,e){const n={tfOpName:t,category:"custom",inputs:[],attrs:[],customExecutor:e};im[t]=n},t.regularizers=Zf,t.relu=bo,t.relu6=xo,t.removeBackend=function(t){Ft.removeBackend(t)},t.reshape=Ze,t.reverse=to,t.reverse1d=eo,t.reverse2d=no,t.reverse3d=ro,t.reverse4d=so,t.rfft=_o,t.round=In,t.rsqrt=En,t.scalar=de,t.scatterND=Ro,t.scatter_util=Gs,t.selu=wo,t.separableConv2d=Ki,t.sequential=function(t){return new Ld(t)},t.serialization=Ks,t.setBackend=function(t){return Ft.setBackend(t)},t.setPlatform=function(t,e){a().setPlatform(t,e)},t.setdiff1dAsync=rn,t.sigmoid=$n,t.sign=An,t.signal=jo,t.sin=_n,t.sinh=On,t.slice=Sr,t.slice1d=kr,t.slice2d=Ir,t.slice3d=Er,t.slice4d=$r,t.slice_util=Nr,t.softmax=vo,t.softplus=Fn,t.spaceToBatchND=Qe,t.sparseToDense=Mo,t.spectral=Fo,t.split=Pe,t.sqrt=Mn,t.square=rr,t.squaredDifference=si,t.squaredDifferenceStrict=tr,t.squeeze=tn,t.stack=en,t.step=zn,t.stft=Go,t.stridedSlice=$o,t.sub=ar,t.subStrict=er,t.sum=ze,t.sumOutType=Et,t.tan=Ln,t.tanh=Bn,t.tensor=ce,t.tensor1d=pe,t.tensor2d=fe,t.tensor3d=me,t.tensor4d=ge,t.tensor5d=ye,t.tensor6d=be,t.tensor_util=Dt,t.test_util=Zs,t.tidy=na,t.tile=ir,t.time=function(t){return Ft.time(t)},t.topk=Ao,t.train=Gl,t.transpose=Rr,t.truncatedNormal=ai,t.unregisterGradient=function(t){if(!c.has(t))throw new Error(`The gradient '${t}' for backend is not registered`);c.delete(t)},t.unregisterKernel=function(t,e){const n=g(t,e);if(!u.has(n))throw new Error(`The kernel '${t}' for backend '${e}' is not registered`);u.delete(n)},t.unsortedSegmentSum=Ni,t.unstack=nn,t.upcastType=It,t.util=ot,t.valueAndGrad=function(t){return v(H(t),()=>"The f passed in valueAndGrad(f) must be a function"),(e,n)=>{v(e instanceof bt,()=>"The x passed in valueAndGrad(f)(x) must be a tensor"),v(null==n||n instanceof bt,()=>"The dy passed in valueAndGrad(f)(x, dy) must be a tensor");const{grads:r,value:s}=Ft.gradients(()=>t(e),[e],n);return Jt(r),{grad:r[0],value:s}}},t.valueAndGrads=function(t){return v(H(t),()=>"The f passed in valueAndGrads(f) must be a function"),(e,n)=>{v(Array.isArray(e)&&e.every(t=>t instanceof bt),()=>"The args passed in valueAndGrads(f)(args) must be array of tensors"),v(null==n||n instanceof bt,()=>"The dy passed in valueAndGrads(f)(args, dy) must be a tensor");const r=Ft.gradients(()=>t(...e),e,n);return null!=n&&C(r.value.shape,n.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),Jt(r.grads),r}},t.variable=xe,t.variableGrads=Xt,t.version=nv,t.version_converter="2.0.0-rc.1",t.version_core="2.0.0-rc.1",t.version_layers="2.0.0-rc.1",t.where=_a,t.whereAsync=Oa,t.zeros=ve,t.zerosLike=Ie,Object.defineProperty(t,"__esModule",{value:!0})}));
//# sourceMappingURL=tf.es2017.min.js.map
