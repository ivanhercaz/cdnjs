{"version":3,"file":"flicking.js","sources":["../src/consts.ts","../src/utils.ts","../src/components/Panel.ts","../src/components/PanelManager.ts","../src/states/State.ts","../src/states/IdleState.ts","../src/states/HoldingState.ts","../src/states/DraggingState.ts","../src/states/AnimatingState.ts","../src/states/DisabledState.ts","../src/components/StateMachine.ts","../src/moves/MoveType.ts","../src/moves/Snap.ts","../src/moves/FreeScroll.ts","../src/components/Viewport.ts","../src/ga/ga.ts","../src/Flicking.ts","../src/index.umd.ts"],"sourcesContent":["/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport { FlickingOptions, EventType, Direction, AxesEventType, StateType, MoveTypeSnapOption, MoveTypeFreeScrollOption, FlickingMethodsKeys } from \"./types\";\n\nexport const MOVE_TYPE: {\n  SNAP: \"snap\";\n  FREE_SCROLL: \"freeScroll\";\n} = {\n  SNAP: \"snap\",\n  FREE_SCROLL: \"freeScroll\",\n};\n\nexport const DEFAULT_MOVE_TYPE_OPTIONS: {\n  snap: MoveTypeSnapOption,\n  freeScroll: MoveTypeFreeScrollOption,\n} = {\n  snap: {\n    type: \"snap\",\n    count: 1,\n  },\n  freeScroll: {\n    type: \"freeScroll\",\n  },\n};\nexport const isBrowser = typeof document !== \"undefined\";\n\n/**\n * Default options for creating Flicking.\n * @ko 플리킹을 만들 때 사용하는 기본 옵션들\n * @private\n * @memberof eg.Flicking\n */\nexport const DEFAULT_OPTIONS: Readonly<FlickingOptions> = {\n  classPrefix: \"eg-flick\",\n  deceleration: 0.0075,\n  horizontal: true,\n  circular: false,\n  infinite: false,\n  infiniteThreshold: 0,\n  lastIndex: Infinity,\n  threshold: 40,\n  duration: 100,\n  panelEffect: x => 1 - Math.pow(1 - x, 3),\n  defaultIndex: 0,\n  inputType: [\"touch\", \"mouse\"],\n  thresholdAngle: 45,\n  bounce: 10,\n  autoResize: false,\n  adaptive: false,\n  zIndex: 2000,\n  bound: false,\n  overflow: false,\n  hanger: \"50%\",\n  anchor: \"50%\",\n  gap: 0,\n  moveType: DEFAULT_MOVE_TYPE_OPTIONS.snap,\n  useOffset: false,\n  isEqualSize: false,\n  isConstantSize: false,\n  renderOnlyVisible: false,\n  renderExternal: false,\n  collectStatistics: true,\n};\n\nexport const DEFAULT_VIEWPORT_CSS = {\n  position: \"relative\",\n  zIndex: DEFAULT_OPTIONS.zIndex,\n  overflow: \"hidden\",\n};\n\nexport const DEFAULT_CAMERA_CSS = {\n  width: \"100%\",\n  height: \"100%\",\n  willChange: \"transform\",\n};\n\nexport const DEFAULT_PANEL_CSS = {\n  position: \"absolute\",\n};\n\nexport const EVENTS: EventType = {\n  HOLD_START: \"holdStart\",\n  HOLD_END: \"holdEnd\",\n  MOVE_START: \"moveStart\",\n  MOVE: \"move\",\n  MOVE_END: \"moveEnd\",\n  CHANGE: \"change\",\n  RESTORE: \"restore\",\n  SELECT: \"select\",\n  NEED_PANEL: \"needPanel\",\n  VISIBLE_CHANGE: \"visibleChange\",\n};\n\nexport const AXES_EVENTS: AxesEventType = {\n  HOLD: \"hold\",\n  CHANGE: \"change\",\n  RELEASE: \"release\",\n  ANIMATION_END: \"animationEnd\",\n  FINISH: \"finish\",\n};\n\nexport const STATE_TYPE: StateType = {\n  IDLE: 0,\n  HOLDING: 1,\n  DRAGGING: 2,\n  ANIMATING: 3,\n  DISABLED: 4,\n};\n\nexport const DIRECTION: Direction = {\n  PREV: \"PREV\",\n  NEXT: \"NEXT\",\n};\nexport const FLICKING_METHODS: {[key in FlickingMethodsKeys]: true} = {\n  prev: true,\n  next: true,\n  moveTo: true,\n  getIndex: true,\n  getAllPanels: true,\n  getCurrentPanel: true,\n  getElement: true,\n  getPanel: true,\n  getPanelCount: true,\n  getStatus: true,\n  getVisiblePanels: true,\n  setLastIndex: true,\n  enableInput: true,\n  disableInput: true,\n  destroy: true,\n  resize: true,\n  setStatus: true,\n  addPlugins: true,\n  removePlugins: true,\n  isPlaying: true,\n  getLastIndex: true,\n};\n\n// Check whether browser supports transform: translate3d\n// https://stackoverflow.com/questions/5661671/detecting-transform-translate3d-support\nexport let checkTranslateSupport = () => {\n  const transforms = {\n    webkitTransform: \"-webkit-transform\",\n    msTransform: \"-ms-transform\",\n    MozTransform: \"-moz-transform\",\n    OTransform: \"-o-transform\",\n    transform: \"transform\",\n  };\n\n  if (!isBrowser) {\n    return {\n      name: transforms.transform,\n      has3d: true,\n    };\n  }\n  const supportedStyle = document.documentElement.style;\n  let transformName = \"\";\n  for (const prefixedTransform in transforms) {\n    if (prefixedTransform in supportedStyle) {\n      transformName = prefixedTransform;\n    }\n  }\n\n  if (!transformName) {\n    throw new Error(\"Browser doesn't support CSS3 2D Transforms.\");\n  }\n\n  const el = document.createElement(\"div\");\n\n  document.documentElement.insertBefore(el, null);\n\n  el.style[transformName] = \"translate3d(1px, 1px, 1px)\";\n  const styleVal = window.getComputedStyle(el).getPropertyValue(transforms[transformName]);\n\n  el.parentElement!.removeChild(el);\n\n  const transformInfo = {\n    name: transformName,\n    has3d: styleVal.length > 0 && styleVal !== \"none\",\n  };\n\n  checkTranslateSupport = () => transformInfo;\n\n  return transformInfo;\n};\n\nexport const TRANSFORM = checkTranslateSupport();\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport { ElementLike, OriginalStyle, BoundingBox } from \"./types\";\nimport Flicking from \"./Flicking\";\nimport { FLICKING_METHODS } from \"./consts\";\n\nexport function merge(target: object, ...srcs: object[]): object {\n  srcs.forEach(source => {\n    Object.keys(source).forEach(key => {\n      const value = source[key];\n      target[key] = value;\n    });\n  });\n\n  return target;\n}\n\nexport function parseElement(element: ElementLike | ElementLike[]): HTMLElement[] {\n  if (!Array.isArray(element)) {\n    element = [element];\n  }\n\n  const elements: HTMLElement[] = [];\n  element.forEach(el => {\n    if (isString(el)) {\n      const tempDiv = document.createElement(\"div\");\n      tempDiv.innerHTML = el;\n\n      elements.push(...toArray(tempDiv.children) as HTMLElement[]);\n      while (tempDiv.firstChild) {\n        tempDiv.removeChild(tempDiv.firstChild);\n      }\n    } else {\n      elements.push(el as HTMLElement);\n    }\n  });\n\n  return elements;\n}\n\nexport function isString(value: any): value is string {\n  return typeof value === \"string\";\n}\n\n// Get class list of element as string array\nexport function classList(element: HTMLElement): string[] {\n  return element.classList\n    ? toArray(element.classList)\n    : element.className.split(\" \");\n}\n\n// Add class to specified element\nexport function addClass(element: HTMLElement, className: string): void {\n  if (element.classList) {\n    element.classList.add(className);\n  } else {\n    if (!hasClass(element, className)) {\n      element.className = (`${element.className} ${className}`).replace(/\\s{2,}/g, \" \");\n    }\n  }\n}\n\nexport function hasClass(element: HTMLElement, className: string): boolean {\n  if (element.classList) {\n    return element.classList.contains(className);\n  } else {\n    return (element.className.split(\" \").indexOf(className) >= 0);\n  }\n}\n\nexport function applyCSS(element: HTMLElement, cssObj: object): void {\n  Object.keys(cssObj).forEach(property => {\n    element.style[property] = cssObj[property];\n  });\n}\n\nexport function clamp(val: number, min: number, max: number) {\n  return Math.max(Math.min(val, max), min);\n}\n\n// Min: inclusive, Max: exclusive\nexport function isBetween(val: number, min: number, max: number) {\n  return val >= min && val <= max;\n}\n\nexport interface ArrayLike<T> {\n  length: number;\n  [index: number]: T;\n}\n\nexport function toArray<T>(iterable: ArrayLike<T>): T[] {\n  return [].slice.call(iterable);\n}\n\nexport function isArray(arr: any): boolean {\n  return arr && arr.constructor === Array;\n}\n\nexport function parseArithmeticExpression(cssValue: number | string, base: number, defaultVal?: number): number {\n  // Set base / 2 to default value, if it's undefined\n  const defaultValue = defaultVal != null ? defaultVal : base / 2;\n  const cssRegex = /(?:(\\+|\\-)\\s*)?(\\d+(?:\\.\\d+)?(%|px)?)/g;\n\n  if (typeof cssValue === \"number\") {\n    return clamp(cssValue, 0, base);\n  }\n\n  let idx = 0;\n  let calculatedValue = 0;\n  let matchResult = cssRegex.exec(cssValue);\n  while (matchResult != null) {\n    let sign = matchResult[1];\n    const value = matchResult[2];\n    const unit = matchResult[3];\n\n    let parsedValue = parseFloat(value);\n\n    if (idx <= 0) {\n      sign = sign || \"+\";\n    }\n\n    // Return default value for values not in good form\n    if (!sign) {\n      return defaultValue;\n    }\n\n    if (unit === \"%\") {\n      parsedValue = (parsedValue / 100) * base;\n    }\n\n    calculatedValue += sign === \"+\"\n      ? parsedValue\n      : -parsedValue;\n\n    // Match next occurrence\n    ++idx;\n    matchResult = cssRegex.exec(cssValue);\n  }\n\n  // None-matched\n  if (idx === 0) {\n    return defaultValue;\n  }\n\n  // Clamp between 0 ~ base\n  return clamp(calculatedValue, 0, base);\n}\n\nexport function getProgress(pos: number, range: number[]) {\n  // start, anchor, end\n  // -1 , 0 , 1\n  const [min, center, max] = range;\n\n  if (pos > center && (max - center)) {\n    // 0 ~ 1\n    return (pos - center) / (max - center);\n  } else if (pos < center && (center - min)) {\n    // -1 ~ 0\n    return (pos - center) / (center - min);\n  } else if (pos !== center && max - min) {\n    return (pos - min) / (max - min);\n  }\n  return 0;\n}\n\nexport function findIndex<T>(iterable: T[], callback: (el: T) => boolean): number {\n  for (let i = 0; i < iterable.length; i += 1) {\n    const element = iterable[i];\n    if (element && callback(element)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n// return [0, 1, ...., max - 1]\nexport function counter(max: number): number[] {\n  const counterArray: number[] = [];\n  for (let i = 0; i < max; i += 1) {\n    counterArray[i] = i;\n  }\n  return counterArray;\n}\n\n// Circulate number between range [min, max]\n/*\n * \"indexed\" means min and max is not same, so if it's true \"min - 1\" should be max\n * While if it's false, \"min - 1\" should be \"max - 1\"\n * use `indexed: true` when it should be used for circulating integers like index\n * or `indexed: false` when it should be used for something like positions.\n */\nexport function circulate(value: number, min: number, max: number, indexed: boolean): number {\n  const size = indexed\n    ? max - min + 1\n    : max - min;\n  if (value < min) {\n    const offset = indexed\n      ? (min - value - 1) % size\n      : (min - value) % size;\n    value = max - offset;\n  } else if (value > max) {\n    const offset = indexed\n      ? (value - max - 1) % size\n      : (value - max) % size;\n    value = min + offset;\n  }\n\n  return value;\n}\n\nexport function restoreStyle(element: HTMLElement, originalStyle: OriginalStyle): void {\n  originalStyle.className\n    ? element.setAttribute(\"class\", originalStyle.className)\n    : element.removeAttribute(\"class\");\n  originalStyle.style\n    ? element.setAttribute(\"style\", originalStyle.style)\n    : element.removeAttribute(\"style\");\n}\n\n/**\n * Decorator that makes the method of flicking available in the framework.\n * @ko 프레임워크에서 플리킹의 메소드를 사용할 수 있게 하는 데코레이터.\n * @memberof eg.Flicking\n * @private\n * @example\n * ```js\n * import Flicking, { withFlickingMethods } from \"@egjs/flicking\";\n *\n * class Flicking extends React.Component<Partial<FlickingProps & FlickingOptions>> {\n *   &#64;withFlickingMethods\n *   private flicking: Flicking;\n * }\n * ```\n */\nexport function withFlickingMethods(prototype: any, flickingName: string) {\n  Object.keys(FLICKING_METHODS).forEach((name: keyof Flicking) => {\n    if (prototype[name]) {\n      return;\n    }\n    prototype[name] = function(...args) {\n      const result = this[flickingName][name](...args);\n\n      // fix `this` type to return your own `flicking` instance to the instance using the decorator.\n      if (result === this[flickingName]) {\n        return this;\n      } else {\n        return result;\n      }\n    };\n  });\n}\n\nexport function getBbox(element: HTMLElement, useOffset: boolean) {\n  let bbox: BoundingBox;\n  if (useOffset) {\n    bbox = {\n      x: 0,\n      y: 0,\n      width: element.offsetWidth,\n      height: element.offsetHeight,\n    };\n  } else {\n    const clientRect = element.getBoundingClientRect();\n    bbox = {\n      x: clientRect.left,\n      y: clientRect.top,\n      width: clientRect.width,\n      height: clientRect.height,\n    };\n  }\n  return bbox;\n}\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport Viewport from \"./Viewport\";\nimport { OriginalStyle, FlickingPanel, ElementLike, DestroyOption, BoundingBox } from \"../types\";\nimport { DEFAULT_PANEL_CSS, EVENTS } from \"../consts\";\nimport { addClass, applyCSS, parseArithmeticExpression, parseElement, getProgress, restoreStyle, hasClass, getBbox } from \"../utils\";\n\nclass Panel implements FlickingPanel {\n  public viewport: Viewport;\n  public prevSibling: Panel | null;\n  public nextSibling: Panel | null;\n\n  protected state: {\n    index: number;\n    position: number;\n    relativeAnchorPosition: number;\n    size: number;\n    isClone: boolean;\n    isVirtual: boolean;\n    // Index of cloned panel, zero-based integer(original: -1, cloned: [0, 1, 2, ...])\n    // if cloneIndex is 0, that means it's first cloned panel of original panel\n    cloneIndex: number;\n    originalStyle: OriginalStyle;\n    cachedBbox: BoundingBox | null;\n  };\n  private element: HTMLElement;\n  private original?: Panel;\n  private clonedPanels: Panel[];\n\n  public constructor(\n    element?: HTMLElement | null,\n    index?: number,\n    viewport?: Viewport,\n  ) {\n    this.viewport = viewport!;\n    this.prevSibling = null;\n    this.nextSibling = null;\n    this.clonedPanels = [];\n\n    this.state = {\n      index: index!,\n      position: 0,\n      relativeAnchorPosition: 0,\n      size: 0,\n      isClone: false,\n      isVirtual: false,\n      cloneIndex: -1,\n      originalStyle: {\n        className: \"\",\n        style: \"\",\n      },\n      cachedBbox: null,\n    };\n    this.setElement(element);\n  }\n\n  public resize(givenBbox?: BoundingBox): void {\n    const state = this.state;\n    const options = this.viewport.options;\n    const bbox = givenBbox\n      ? givenBbox\n      : this.getBbox();\n    this.state.cachedBbox = bbox;\n    const prevSize = state.size;\n\n    state.size = options.horizontal\n      ? bbox.width\n      : bbox.height;\n\n    if (prevSize !== state.size) {\n      state.relativeAnchorPosition = parseArithmeticExpression(options.anchor, state.size);\n    }\n\n    if (!state.isClone) {\n      this.clonedPanels.forEach(panel => {\n        const cloneState = panel.state;\n\n        cloneState.size = state.size;\n        cloneState.cachedBbox = state.cachedBbox;\n        cloneState.relativeAnchorPosition = state.relativeAnchorPosition;\n      });\n    }\n  }\n\n  public unCacheBbox(): void {\n    this.state.cachedBbox = null;\n  }\n\n  public getProgress() {\n    const viewport = this.viewport;\n    const options = viewport.options;\n    const panelCount = viewport.panelManager.getPanelCount();\n    const scrollAreaSize = viewport.getScrollAreaSize();\n\n    const relativeIndex = (options.circular ? Math.floor(this.getPosition() / scrollAreaSize) * panelCount : 0) + this.getIndex();\n    const progress = relativeIndex - viewport.getCurrentProgress();\n\n    return progress;\n  }\n\n  public getOutsetProgress() {\n    const viewport = this.viewport;\n    const outsetRange = [\n      -this.getSize(),\n      viewport.getRelativeHangerPosition() - this.getRelativeAnchorPosition(),\n      viewport.getSize(),\n    ];\n    const relativePanelPosition = this.getPosition() - viewport.getCameraPosition();\n    const outsetProgress = getProgress(relativePanelPosition, outsetRange);\n\n    return outsetProgress;\n  }\n\n  public getVisibleRatio() {\n    const viewport = this.viewport;\n    const panelSize = this.getSize();\n    const relativePanelPosition = this.getPosition() - viewport.getCameraPosition();\n    const rightRelativePanelPosition = relativePanelPosition + panelSize;\n\n    const visibleSize = Math.min(viewport.getSize(), rightRelativePanelPosition) - Math.max(relativePanelPosition, 0);\n    const visibleRatio = visibleSize >= 0\n      ? visibleSize / panelSize\n      : 0;\n\n    return visibleRatio;\n  }\n\n  public focus(duration?: number): void {\n    const viewport = this.viewport;\n    const currentPanel = viewport.getCurrentPanel();\n    const hangerPosition = viewport.getHangerPosition();\n    const anchorPosition = this.getAnchorPosition();\n    if (hangerPosition === anchorPosition || !currentPanel) {\n      return;\n    }\n\n    const currentPosition = currentPanel.getPosition();\n    const eventType = currentPosition === this.getPosition()\n      ? \"\"\n      : EVENTS.CHANGE;\n\n    viewport.moveTo(this, viewport.findEstimatedPosition(this), eventType, null, duration);\n  }\n\n  public update(updateFunction: ((element: HTMLElement) => any) | null = null, shouldResize: boolean = true): void {\n    const identicalPanels = this.getIdenticalPanels();\n\n    if (updateFunction) {\n      identicalPanels.forEach(eachPanel => {\n        updateFunction(eachPanel.getElement());\n      });\n    }\n\n    if (shouldResize) {\n      identicalPanels.forEach(eachPanel => {\n        eachPanel.unCacheBbox();\n      });\n      this.viewport.addVisiblePanel(this);\n      this.viewport.resize();\n    }\n  }\n\n  public prev(): FlickingPanel | null {\n    const viewport = this.viewport;\n    const options = viewport.options;\n    const prevSibling = this.prevSibling;\n\n    if (!prevSibling) {\n      return null;\n    }\n\n    const currentIndex = this.getIndex();\n    const currentPosition = this.getPosition();\n    const prevPanelIndex = prevSibling.getIndex();\n    const prevPanelPosition = prevSibling.getPosition();\n    const prevPanelSize = prevSibling.getSize();\n\n    const hasEmptyPanelBetween = currentIndex - prevPanelIndex > 1;\n    const notYetMinPanel = options.infinite\n      && currentIndex > 0\n      && prevPanelIndex > currentIndex;\n\n    if (hasEmptyPanelBetween || notYetMinPanel) {\n      // Empty panel exists between\n      return null;\n    }\n\n    const newPosition = currentPosition - prevPanelSize - options.gap;\n\n    let prevPanel = prevSibling;\n    if (prevPanelPosition !== newPosition) {\n      prevPanel = prevSibling.clone(prevSibling.getCloneIndex(), true);\n      prevPanel.setPosition(newPosition);\n    }\n\n    return prevPanel;\n  }\n\n  public next(): FlickingPanel | null {\n    const viewport = this.viewport;\n    const options = viewport.options;\n    const nextSibling = this.nextSibling;\n    const lastIndex = viewport.panelManager.getLastIndex();\n\n    if (!nextSibling) {\n      return null;\n    }\n\n    const currentIndex = this.getIndex();\n    const currentPosition = this.getPosition();\n    const nextPanelIndex = nextSibling.getIndex();\n    const nextPanelPosition = nextSibling.getPosition();\n\n    const hasEmptyPanelBetween = nextPanelIndex - currentIndex > 1;\n    const notYetMaxPanel = options.infinite\n      && currentIndex < lastIndex\n      && nextPanelIndex < currentIndex;\n\n    if (hasEmptyPanelBetween || notYetMaxPanel) {\n      return null;\n    }\n\n    const newPosition = currentPosition + this.getSize() + options.gap;\n\n    let nextPanel = nextSibling;\n    if (nextPanelPosition !== newPosition) {\n      nextPanel = nextSibling.clone(nextSibling.getCloneIndex(), true);\n      nextPanel.setPosition(newPosition);\n    }\n\n    return nextPanel;\n  }\n\n  public insertBefore(element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const viewport = this.viewport;\n    const parsedElements = parseElement(element);\n    const firstPanel = viewport.panelManager.firstPanel()!;\n    const prevSibling = this.prevSibling;\n    // Finding correct inserting index\n    // While it should insert removing empty spaces,\n    // It also should have to be bigger than prevSibling' s index\n    const targetIndex = prevSibling && firstPanel.getIndex() !== this.getIndex()\n      ? Math.max(prevSibling.getIndex() + 1, this.getIndex() - parsedElements.length)\n      : Math.max(this.getIndex() - parsedElements.length, 0);\n\n    return viewport.insert(targetIndex, parsedElements);\n  }\n\n  public insertAfter(element: ElementLike | ElementLike[]): FlickingPanel[] {\n    return this.viewport.insert(this.getIndex() + 1, element);\n  }\n\n  public remove(): FlickingPanel {\n    this.viewport.remove(this.getIndex());\n\n    return this;\n  }\n\n  public destroy(option: Partial<DestroyOption>): void {\n    if (!option.preserveUI) {\n      const originalStyle = this.state.originalStyle;\n\n      restoreStyle(this.element, originalStyle);\n    }\n\n    // release resources\n    for (const x in this) {\n      (this as any)[x] = null;\n    }\n  }\n\n  public getElement(): HTMLElement {\n    return this.element;\n  }\n\n  public getAnchorPosition(): number {\n    return this.state.position + this.state.relativeAnchorPosition;\n  }\n\n  public getRelativeAnchorPosition(): number {\n    return this.state.relativeAnchorPosition;\n  }\n\n  public getIndex(): number {\n    return this.state.index;\n  }\n\n  public getPosition(): number {\n    return this.state.position;\n  }\n\n  public getSize(): number {\n    return this.state.size;\n  }\n\n  public getBbox(): BoundingBox {\n    const state = this.state;\n    const viewport = this.viewport;\n    const element = this.element;\n    const options = viewport.options;\n\n    if (!element) {\n      state.cachedBbox = {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0,\n      };\n    } else if (!state.cachedBbox) {\n      const wasVisible = Boolean(element.parentNode);\n      const cameraElement = viewport.getCameraElement();\n      if (!wasVisible) {\n        cameraElement.appendChild(element);\n        viewport.addVisiblePanel(this);\n      }\n      state.cachedBbox = getBbox(element, options.useOffset);\n\n      if (!wasVisible && viewport.options.renderExternal) {\n        cameraElement.removeChild(element);\n      }\n    }\n    return state.cachedBbox!;\n  }\n\n  public isClone(): boolean {\n    return this.state.isClone;\n  }\n\n  public getOverlappedClass(classes: string[]): string | undefined {\n    const element = this.element;\n\n    for (const className of classes) {\n      if (hasClass(element, className)) {\n        return className;\n      }\n    }\n  }\n\n  public getCloneIndex(): number {\n    return this.state.cloneIndex;\n  }\n\n  public getClonedPanels(): Panel[] {\n    const state = this.state;\n\n    return state.isClone\n      ? this.original!.getClonedPanels()\n      : this.clonedPanels;\n  }\n\n  public getIdenticalPanels(): Panel[] {\n    const state = this.state;\n\n    return state.isClone\n      ? this.original!.getIdenticalPanels()\n      : [this, ...this.clonedPanels];\n  }\n\n  public getOriginalPanel(): Panel {\n    return this.state.isClone\n      ? this.original!\n      : this;\n  }\n\n  public setIndex(index: number): void {\n    const state = this.state;\n\n    state.index = index;\n    this.clonedPanels.forEach(panel => panel.state.index = index);\n  }\n\n  public setPosition(pos: number): this {\n    this.state.position = pos;\n\n    return this;\n  }\n\n  public setPositionCSS(offset: number = 0): void {\n    if (!this.element) {\n      return;\n    }\n    const state = this.state;\n    const pos = state.position;\n    const options = this.viewport.options;\n    const elementStyle = this.element.style;\n    const currentElementStyle = options.horizontal\n      ? elementStyle.left\n      : elementStyle.top;\n    const styleToApply = `${pos - offset}px`;\n\n    if (!state.isVirtual && currentElementStyle !== styleToApply) {\n      options.horizontal\n        ? elementStyle.left = styleToApply\n        : elementStyle.top = styleToApply;\n    }\n  }\n\n  public clone(cloneIndex: number, isVirtual: boolean = false, element?: HTMLElement | null): Panel {\n    const state = this.state;\n    const viewport = this.viewport;\n    let cloneElement = element;\n\n    if (!cloneElement && this.element) {\n      cloneElement = isVirtual ? this.element : this.element.cloneNode(true) as HTMLElement;\n    }\n    const clonedPanel = new Panel(cloneElement, state.index, viewport);\n    const clonedState = clonedPanel.state;\n\n    clonedPanel.original = state.isClone\n      ? this.original\n      : this;\n    clonedState.isClone = true;\n    clonedState.isVirtual = isVirtual;\n    clonedState.cloneIndex = cloneIndex;\n    // Inherit some state values\n    clonedState.size = state.size;\n    clonedState.relativeAnchorPosition = state.relativeAnchorPosition;\n    clonedState.originalStyle = state.originalStyle;\n    clonedState.cachedBbox = state.cachedBbox;\n\n    if (!isVirtual) {\n      this.clonedPanels.push(clonedPanel);\n    } else {\n      clonedPanel.prevSibling = this.prevSibling;\n      clonedPanel.nextSibling = this.nextSibling;\n    }\n\n    return clonedPanel;\n  }\n\n  public removeElement(): void {\n    if (!this.viewport.options.renderExternal) {\n      const element = this.element;\n      element.parentNode!.removeChild(element);\n    }\n\n    // Do the same thing for clones\n    if (!this.state.isClone) {\n      this.removeClonedPanelsAfter(0);\n    }\n  }\n\n  public removeClonedPanelsAfter(start: number): void {\n    const options = this.viewport.options;\n    const removingPanels = this.clonedPanels.splice(start);\n\n    if (!options.renderExternal && !options.renderOnlyVisible) {\n      removingPanels.forEach(panel => {\n        panel.removeElement();\n      });\n    }\n  }\n\n  public setElement(element?: HTMLElement | null): void {\n    if (!element) {\n      return;\n    }\n    const currentElement = this.element;\n    if (element !== currentElement) {\n      const options = this.viewport.options;\n\n      if (currentElement) {\n        if (options.horizontal) {\n          element.style.left = currentElement.style.left;\n        } else {\n          element.style.top = currentElement.style.top;\n        }\n      } else {\n        const originalStyle = this.state.originalStyle;\n\n        originalStyle.className = element.getAttribute(\"class\");\n        originalStyle.style = element.getAttribute(\"style\");\n      }\n\n      this.element = element;\n\n      if (options.classPrefix) {\n        addClass(element, `${options.classPrefix}-panel`);\n      }\n\n      // Update size info after applying panel css\n      applyCSS(this.element, DEFAULT_PANEL_CSS);\n    }\n  }\n}\n\nexport default Panel;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport Panel from \"./Panel\";\nimport { FlickingOptions } from \"../types\";\nimport { findIndex, counter } from \"../utils\";\n\nclass PanelManager {\n  private cameraElement: HTMLElement;\n  private options: FlickingOptions;\n  private panels: Panel[];\n  private clones: Panel[][];\n  // index range of existing panels\n  private range: {\n    min: number;\n    max: number;\n  };\n  private length: number;\n  private lastIndex: number;\n  private cloneCount: number;\n\n  constructor(\n    cameraElement: HTMLElement,\n    options: FlickingOptions,\n  ) {\n    this.cameraElement = cameraElement;\n    this.panels = [];\n    this.clones = [];\n    this.range = {\n      min: -1,\n      max: -1,\n    };\n    this.length = 0;\n    this.cloneCount = 0;\n    this.options = options;\n    this.lastIndex = options.lastIndex;\n  }\n\n  public firstPanel(): Panel | undefined {\n    return this.panels[this.range.min];\n  }\n\n  public lastPanel(): Panel | undefined {\n    return this.panels[this.range.max];\n  }\n\n  public allPanels(): ReadonlyArray<Panel> {\n    return [\n      ...this.panels,\n      ...this.clones.reduce((allClones, clones) => [...allClones, ...clones], []),\n    ];\n  }\n\n  public originalPanels(): ReadonlyArray<Panel> {\n    return this.panels;\n  }\n\n  public clonedPanels(): ReadonlyArray<Panel[]> {\n    return this.clones;\n  }\n\n  public replacePanels(newPanels: Panel[], newClones: Panel[][]): void {\n    this.panels = newPanels;\n    this.clones = newClones;\n\n    this.range = {\n      min: findIndex(newPanels, panel => Boolean(panel)),\n      max: newPanels.length - 1,\n    };\n    this.length = newPanels.filter(panel => Boolean(panel)).length;\n  }\n\n  public has(index: number): boolean {\n    return !!this.panels[index];\n  }\n\n  public get(index: number): Panel | undefined {\n    return this.panels[index];\n  }\n\n  public getPanelCount(): number {\n    return this.length;\n  }\n\n  public getLastIndex(): number {\n    return this.lastIndex;\n  }\n\n  public getRange(): Readonly<{ min: number, max: number }> {\n    return this.range;\n  }\n\n  public getCloneCount(): number {\n    return this.cloneCount;\n  }\n\n  public setLastIndex(lastIndex: number): void {\n    this.lastIndex = lastIndex;\n\n    const firstPanel = this.firstPanel();\n    const lastPanel = this.lastPanel();\n\n    if (!firstPanel || !lastPanel) {\n      return; // no meaning of updating range & length\n    }\n\n    // Remove panels above new last index\n    const range = this.range;\n    if (lastPanel.getIndex() > lastIndex) {\n      const removingPanels = this.panels.splice(lastIndex + 1);\n      this.length -= removingPanels.length;\n\n      const firstRemovedPanel = removingPanels.filter(panel => !!panel)[0];\n      const possibleLastPanel = firstRemovedPanel.prevSibling;\n      if (possibleLastPanel) {\n        range.max = possibleLastPanel.getIndex();\n      } else {\n        range.min = -1;\n        range.max = -1;\n      }\n\n      if (this.shouldRender()) {\n        removingPanels.forEach(panel => panel.removeElement());\n      }\n    }\n  }\n\n  public setCloneCount(cloneCount: number): void {\n    this.cloneCount = cloneCount;\n  }\n\n  // Insert at index\n  // Returns pushed elements from index, inserting at 'empty' position doesn't push elements behind it\n  public insert(index: number, newPanels: Panel[]): number {\n    const panels = this.panels;\n    const range = this.range;\n    const isCircular = this.options.circular;\n    const lastIndex = this.lastIndex;\n\n    // Find first panel that index is greater than inserting index\n    const nextSibling = this.findFirstPanelFrom(index);\n\n    // if it's null, element will be inserted at last position\n    // https://developer.mozilla.org/ko/docs/Web/API/Node/insertBefore#Syntax\n    const firstPanel = this.firstPanel();\n    const siblingElement = nextSibling\n      ? nextSibling.getElement()\n      : isCircular && firstPanel\n        ? firstPanel.getClonedPanels()[0].getElement()\n        : null;\n\n    // Insert panels before sibling element\n    this.insertNewPanels(newPanels, siblingElement);\n\n    let pushedIndex = newPanels.length;\n    // Like when setting index 50 while visible panels are 0, 1, 2\n    if (index > range.max) {\n      newPanels.forEach((panel, offset) => {\n        panels[index + offset] = panel;\n      });\n    } else {\n      const panelsAfterIndex = panels.slice(index, index + newPanels.length);\n      // Find empty from beginning\n      let emptyPanelCount = findIndex(panelsAfterIndex, panel => !!panel);\n      if (emptyPanelCount < 0) {\n        // All empty\n        emptyPanelCount = panelsAfterIndex.length;\n      }\n      pushedIndex = newPanels.length - emptyPanelCount;\n\n      // Insert removing empty panels\n      panels.splice(index, emptyPanelCount, ...newPanels);\n\n      // Remove panels after last index\n      if (panels.length > lastIndex + 1) {\n        const removedPanels = panels.splice(lastIndex + 1)\n          .filter(panel => Boolean(panel));\n        this.length -= removedPanels.length;\n\n        // Find first\n        const newLastIndex = lastIndex - findIndex(this.panels.concat().reverse(), panel => !!panel);\n\n        // Can be filled with empty after newLastIndex\n        this.panels.splice(newLastIndex + 1);\n        this.range.max = newLastIndex;\n\n        if (this.shouldRender()) {\n          removedPanels.forEach(panel => panel.removeElement());\n        }\n      }\n    }\n\n    // Update index of previous panels\n    if (pushedIndex > 0) {\n      panels.slice(index + newPanels.length).forEach(panel => {\n        panel.setIndex(panel.getIndex() + pushedIndex);\n      });\n    }\n\n    // Update state\n    this.length += newPanels.length;\n    this.updateIndex(index);\n\n    if (isCircular) {\n      this.addNewClones(index, newPanels, newPanels.length - pushedIndex, nextSibling);\n      const clones = this.clones;\n      const panelCount = this.panels.length;\n      if (clones[0] && clones[0].length > lastIndex + 1) {\n        clones.forEach(cloneSet => {\n          cloneSet.splice(panelCount);\n        });\n      }\n    }\n\n    return pushedIndex;\n  }\n\n  public replace(index: number, newPanels: Panel[]): Panel[] {\n    const panels = this.panels;\n    const range = this.range;\n    const options = this.options;\n    const isCircular = options.circular;\n\n    // Find first panel that index is greater than inserting index\n    const nextSibling = this.findFirstPanelFrom(index + newPanels.length);\n\n    // if it's null, element will be inserted at last position\n    // https://developer.mozilla.org/ko/docs/Web/API/Node/insertBefore#Syntax\n    const firstPanel = this.firstPanel();\n    const siblingElement = nextSibling\n      ? nextSibling.getElement()\n      : isCircular && firstPanel\n        ? firstPanel.getClonedPanels()[0].getElement()\n        : null;\n\n    // Insert panels before sibling element\n    this.insertNewPanels(newPanels, siblingElement);\n\n    if (index > range.max) {\n      // Temporarily insert null at index to use splice()\n      (panels[index] as any) = null;\n    }\n\n    const replacedPanels = panels.splice(index, newPanels.length, ...newPanels);\n    const wasNonEmptyCount = replacedPanels.filter(panel => Boolean(panel)).length;\n\n    // Suppose inserting [1, 2, 3] at 0 position when there were [empty, 1]\n    // So length should be increased by 3(inserting panels) - 1(non-empty panels)\n    this.length += newPanels.length - wasNonEmptyCount;\n    this.updateIndex(index);\n\n    if (isCircular) {\n      this.addNewClones(index, newPanels, newPanels.length, nextSibling);\n    }\n\n    if (this.shouldRender()) {\n      replacedPanels.forEach(panel => panel && panel.removeElement());\n    }\n\n    return replacedPanels;\n  }\n\n  public remove(index: number, deleteCount: number = 1): Panel[] {\n    const isCircular = this.options.circular;\n    const panels = this.panels;\n    const clones = this.clones;\n    // Delete count should be equal or larger than 0\n    deleteCount = Math.max(deleteCount, 0);\n\n    const deletedPanels = panels\n      .splice(index, deleteCount)\n      .filter(panel => !!panel);\n\n    if (this.shouldRender()) {\n      deletedPanels.forEach(panel => panel.removeElement());\n    }\n\n    if (isCircular) {\n      clones.forEach(cloneSet => {\n        cloneSet.splice(index, deleteCount);\n      });\n    }\n\n    // Update indexes\n    panels\n      .slice(index)\n      .forEach(panel => {\n        panel.setIndex(panel.getIndex() - deleteCount);\n      });\n\n    // Check last panel is empty\n    let lastIndex = panels.length - 1;\n    if (!panels[lastIndex]) {\n      const reversedPanels = panels.concat().reverse();\n      const nonEmptyIndexFromLast = findIndex(reversedPanels, panel => !!panel);\n      lastIndex = nonEmptyIndexFromLast < 0\n        ? -1 // All empty\n        : lastIndex - nonEmptyIndexFromLast;\n\n      // Remove all empty panels from last\n      panels.splice(lastIndex + 1);\n      if (isCircular) {\n        clones.forEach(cloneSet => {\n          cloneSet.splice(lastIndex + 1);\n        });\n      }\n    }\n\n    // Update range & length\n    this.range = {\n      min: findIndex(panels, panel => !!panel),\n      max: lastIndex,\n    };\n    this.length -= deletedPanels.length;\n\n    if (this.length <= 0) {\n      // Reset clones\n      this.clones = [];\n      this.cloneCount = 0;\n    }\n\n    return deletedPanels;\n  }\n\n  public chainAllPanels() {\n    const allPanels = this.allPanels().filter(panel => !!panel);\n    const allPanelsCount = allPanels.length;\n\n    if (allPanelsCount <= 1) {\n      return;\n    }\n\n    allPanels.slice(1, allPanels.length - 1).forEach((panel, idx) => {\n      const prevPanel = allPanels[idx];\n      const nextPanel = allPanels[idx + 2];\n\n      panel.prevSibling = prevPanel;\n      panel.nextSibling = nextPanel;\n    });\n\n    const firstPanel = allPanels[0];\n    const lastPanel = allPanels[allPanelsCount - 1];\n\n    firstPanel.prevSibling = null;\n    firstPanel.nextSibling = allPanels[1];\n    lastPanel.prevSibling = allPanels[allPanelsCount - 2];\n    lastPanel.nextSibling = null;\n\n    if (this.options.circular) {\n      firstPanel.prevSibling = lastPanel;\n      lastPanel.nextSibling = firstPanel;\n    }\n  }\n\n  public insertClones(cloneIndex: number, index: number, clonedPanels: Panel[], deleteCount: number = 0): void {\n    const clones = this.clones;\n    const lastIndex = this.lastIndex;\n\n    if (!clones[cloneIndex]) {\n      const newClones: Panel[] = [];\n      clonedPanels.forEach((panel, offset) => {\n        newClones[index + offset] = panel;\n      });\n\n      clones[cloneIndex] = newClones;\n    } else {\n      const insertTarget = clones[cloneIndex];\n\n      if (index >= insertTarget.length) {\n        clonedPanels.forEach((panel, offset) => {\n          insertTarget[index + offset] = panel;\n        });\n      } else {\n        insertTarget.splice(index, deleteCount, ...clonedPanels);\n        // Remove panels after last index\n        if (clonedPanels.length > lastIndex + 1) {\n          clonedPanels.splice(lastIndex + 1);\n        }\n      }\n    }\n  }\n\n  // clones are operating in set\n  public removeClonesAfter(cloneIndex: number): void {\n    const panels = this.panels;\n\n    panels.forEach(panel => {\n      panel.removeClonedPanelsAfter(cloneIndex);\n    });\n    this.clones.splice(cloneIndex);\n  }\n\n  public findPanelOf(element: HTMLElement): Panel | undefined {\n    const allPanels = this.allPanels();\n    for (const panel of allPanels) {\n      if (!panel) {\n        continue;\n      }\n      const panelElement = panel.getElement();\n      if (panelElement.contains(element)) {\n        return panel;\n      }\n    }\n  }\n\n  public findFirstPanelFrom(index: number): Panel | undefined {\n    for (const panel of this.panels.slice(index)) {\n      if (panel && panel.getIndex() >= index && panel.getElement().parentNode) {\n        return panel;\n      }\n    }\n  }\n\n  private addNewClones(index: number, originalPanels: Panel[], deleteCount: number, nextSibling: Panel | undefined) {\n    const cameraElement = this.cameraElement;\n    const cloneCount = this.getCloneCount();\n    const lastPanel = this.lastPanel();\n    const lastPanelClones: Panel[] = lastPanel\n      ? lastPanel.getClonedPanels()\n      : [];\n    const nextSiblingClones: Panel[] = nextSibling\n      ? nextSibling.getClonedPanels()\n      : [];\n\n    for (const cloneIndex of counter(cloneCount)) {\n      const cloneNextSibling = nextSiblingClones[cloneIndex];\n      const lastPanelSibling = lastPanelClones[cloneIndex];\n\n      const cloneSiblingElement = cloneNextSibling\n        ? cloneNextSibling.getElement()\n        : lastPanelSibling\n          ? lastPanelSibling.getElement().nextElementSibling\n          : null;\n\n      const newClones = originalPanels.map(panel => {\n        const clone = panel.clone(cloneIndex);\n\n        if (this.shouldRender()) {\n          cameraElement.insertBefore(clone.getElement(), cloneSiblingElement);\n        }\n\n        return clone;\n      });\n\n      this.insertClones(cloneIndex, index, newClones, deleteCount);\n    }\n  }\n\n  private updateIndex(insertingIndex: number) {\n    const panels = this.panels;\n    const range = this.range;\n\n    const newLastIndex = panels.length - 1;\n    if (newLastIndex > range.max) {\n      range.max = newLastIndex;\n    }\n    if (insertingIndex < range.min || range.min < 0) {\n      range.min = insertingIndex;\n    }\n  }\n\n  private insertNewPanels(newPanels: Panel[], siblingElement: HTMLElement | null) {\n    if (this.shouldRender()) {\n      const fragment = document.createDocumentFragment();\n      newPanels.forEach(panel => fragment.appendChild(panel.getElement()));\n      this.cameraElement.insertBefore(fragment, siblingElement);\n    }\n  }\n\n  private shouldRender(): boolean {\n    const options = this.options;\n\n    return !options.renderExternal && !options.renderOnlyVisible;\n  }\n}\n\nexport default PanelManager;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport Panel from \"../components/Panel\";\nimport { ValueOf, Direction, StateType, FlickingContext } from \"../types\";\n\nabstract class State {\n  public delta: number = 0;\n  public direction: ValueOf<Direction> | null = null;\n  public targetPanel: Panel | null = null;\n  public lastPosition: number = 0;\n  public abstract readonly type: ValueOf<StateType>;\n  public abstract readonly holding: boolean;\n  public abstract readonly playing: boolean;\n\n  public onEnter(prevState: State): void {\n    this.delta = prevState.delta;\n    this.direction = prevState.direction;\n    this.targetPanel = prevState.targetPanel;\n    this.lastPosition = prevState.lastPosition;\n  }\n\n  public onExit(nextState: State): void {\n    // DO NOTHING\n  }\n\n  public onHold(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n\n  public onChange(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n\n  public onRelease(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n\n  public onAnimationEnd(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n\n  public onFinish(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n}\n\nexport default State;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport State from \"./State\";\nimport { EVENTS, STATE_TYPE } from \"../consts\";\nimport { FlickingContext } from \"../types\";\n\nclass IdleState extends State {\n  public readonly type = STATE_TYPE.IDLE;\n  public readonly holding = false;\n  public readonly playing = false;\n\n  public onEnter() {\n    this.direction = null;\n    this.targetPanel = null;\n    this.delta = 0;\n    this.lastPosition = 0;\n  }\n\n  public onHold(e: any, { flicking, viewport, triggerEvent, transitTo }: FlickingContext): void {\n    // Shouldn't do any action until any panels on flicking area\n    if (flicking.getPanelCount() <= 0) {\n      if (viewport.options.infinite) {\n        viewport.moveCamera(viewport.getCameraPosition(), e);\n      }\n      transitTo(STATE_TYPE.DISABLED);\n      return;\n    }\n\n    this.lastPosition = viewport.getCameraPosition();\n    triggerEvent(EVENTS.HOLD_START, e, true)\n      .onSuccess(() => {\n        transitTo(STATE_TYPE.HOLDING);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  // By methods call\n  public onChange(e: any, context: FlickingContext): void {\n    const { triggerEvent, transitTo } = context;\n\n    triggerEvent(EVENTS.MOVE_START, e, false)\n      .onSuccess(() => {\n        // Trigger AnimatingState's onChange, to trigger \"move\" event immediately\n        transitTo(STATE_TYPE.ANIMATING)\n          .onChange(e, context);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n}\n\nexport default IdleState;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport State from \"./State\";\nimport { STATE_TYPE, EVENTS, DIRECTION } from \"../consts\";\nimport { FlickingContext } from \"../types\";\n\nclass HoldingState extends State {\n  public readonly type = STATE_TYPE.HOLDING;\n  public readonly holding = true;\n  public readonly playing = true;\n\n  private releaseEvent: any = null;\n\n  public onChange(e: any, context: FlickingContext): void {\n    const { flicking, triggerEvent, transitTo } = context;\n\n    const offset = flicking.options.horizontal\n      ? e.inputEvent.offsetX\n      : e.inputEvent.offsetY;\n    this.direction = offset < 0\n      ? DIRECTION.NEXT\n      : DIRECTION.PREV;\n\n    triggerEvent(EVENTS.MOVE_START, e, true)\n      .onSuccess(() => {\n        // Trigger DraggingState's onChange, to trigger \"move\" event immediately\n        transitTo(STATE_TYPE.DRAGGING)\n          .onChange(e, context);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  public onRelease(e: any, context: FlickingContext): void {\n    const { viewport, triggerEvent, transitTo } = context;\n\n    triggerEvent(EVENTS.HOLD_END, e, true);\n\n    if (e.delta.flick !== 0) {\n      // Sometimes \"release\" event on axes triggered before \"change\" event\n      // Especially if user flicked panel fast in really short amount of time\n      // if delta is not zero, that means above case happened.\n\n      // Event flow should be HOLD_START -> MOVE_START -> MOVE -> HOLD_END\n      // At least one move event should be included between holdStart and holdEnd\n      e.setTo({ flick: viewport.getCameraPosition() }, 0);\n      transitTo(STATE_TYPE.IDLE);\n      return;\n    }\n\n    // Can't handle select event here,\n    // As \"finish\" axes event happens\n    this.releaseEvent = e;\n  }\n\n  public onFinish(e: any, { viewport, triggerEvent, transitTo }: FlickingContext): void {\n    // Should transite to IDLE state before select event\n    // As user expects hold is already finished\n    transitTo(STATE_TYPE.IDLE);\n\n    if (!this.releaseEvent) {\n      return;\n    }\n\n    // Handle release event here\n    // To prevent finish event called twice\n    const releaseEvent = this.releaseEvent;\n\n    // Static click\n    const srcEvent = releaseEvent.inputEvent.srcEvent;\n\n    let clickedElement: HTMLElement;\n    if (srcEvent.type === \"touchend\") {\n      const touchEvent = srcEvent as TouchEvent;\n      const touch = touchEvent.changedTouches[0];\n      clickedElement = document.elementFromPoint(touch.clientX, touch.clientY) as HTMLElement;\n    } else {\n      clickedElement = srcEvent.target;\n    }\n    const clickedPanel = viewport.panelManager.findPanelOf(clickedElement);\n    const cameraPosition = viewport.getCameraPosition();\n\n    if (clickedPanel) {\n      const clickedPanelPosition = clickedPanel.getPosition();\n      const direction = clickedPanelPosition > cameraPosition\n        ? DIRECTION.NEXT\n        : clickedPanelPosition < cameraPosition\n          ? DIRECTION.PREV\n          : null;\n\n      // Don't provide axes event, to use axes instance instead\n      triggerEvent(EVENTS.SELECT, null, true, {\n        direction, // Direction to the clicked panel\n        index: clickedPanel.getIndex(),\n        panel: clickedPanel,\n      });\n    }\n  }\n}\n\nexport default HoldingState;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport State from \"./State\";\nimport { STATE_TYPE, EVENTS } from \"../consts\";\nimport { FlickingContext } from \"../types\";\n\nclass DraggingState extends State {\n  public readonly type = STATE_TYPE.DRAGGING;\n  public readonly holding = true;\n  public readonly playing = true;\n\n  public onChange(e: any, { moveCamera, transitTo }: FlickingContext): void {\n    if (!e.delta.flick) {\n      return;\n    }\n\n    moveCamera(e)\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  public onRelease(e: any, context: FlickingContext): void {\n    const { flicking, viewport, triggerEvent, transitTo, stopCamera } = context;\n\n    const delta = this.delta;\n    const absDelta = Math.abs(delta);\n    const options = flicking.options;\n    const horizontal = options.horizontal;\n    const moveType = viewport.moveType;\n    const inputEvent = e.inputEvent;\n\n    const velocity = horizontal\n      ? inputEvent.velocityX\n      : inputEvent.velocityY;\n    const inputDelta = horizontal\n      ? inputEvent.deltaX\n      : inputEvent.deltaY;\n    const isNextDirection = Math.abs(velocity) > 1\n      ? velocity < 0\n      : absDelta > 0\n        ? delta > 0\n        : inputDelta < 0;\n\n    const swipeDistance = viewport.options.bound\n      ? Math.max(absDelta, Math.abs(inputDelta))\n      : absDelta;\n    const swipeAngle = inputEvent.deltaX\n      ? Math.abs(180 * Math.atan(inputEvent.deltaY / inputEvent.deltaX) / Math.PI)\n      : 90;\n    const belowAngleThreshold = horizontal\n      ? swipeAngle <= options.thresholdAngle\n      : swipeAngle > options.thresholdAngle;\n    const overThreshold = swipeDistance >= options.threshold\n      && belowAngleThreshold;\n\n    const moveTypeContext = {\n      viewport,\n      axesEvent: e,\n      state: this,\n      swipeDistance,\n      isNextDirection,\n    };\n\n    // Update last position to cope with Axes's animating behavior\n    // Axes uses start position when animation start\n    triggerEvent(EVENTS.HOLD_END, e, true);\n\n    const targetPanel = this.targetPanel;\n    if (!overThreshold && targetPanel) {\n      // Interrupted while animating\n      const interruptDestInfo = moveType.findPanelWhenInterrupted(moveTypeContext);\n\n      viewport.moveTo(\n        interruptDestInfo.panel,\n        interruptDestInfo.destPos,\n        interruptDestInfo.eventType,\n        e,\n        interruptDestInfo.duration,\n      );\n      transitTo(STATE_TYPE.ANIMATING);\n      return;\n    }\n\n    const currentPanel = viewport.getCurrentPanel();\n    const nearestPanel = viewport.getNearestPanel();\n\n    if (!currentPanel || !nearestPanel) {\n      // There're no panels\n      e.stop();\n      transitTo(STATE_TYPE.IDLE);\n      return;\n    }\n\n    const destInfo = overThreshold\n      ? moveType.findTargetPanel(moveTypeContext)\n      : moveType.findRestorePanel(moveTypeContext);\n\n    viewport.moveTo(\n      destInfo.panel,\n      destInfo.destPos,\n      destInfo.eventType,\n      e,\n      destInfo.duration,\n    ).onSuccess(() => {\n      transitTo(STATE_TYPE.ANIMATING);\n    }).onStopped(() => {\n      transitTo(STATE_TYPE.DISABLED);\n      stopCamera(e);\n    });\n  }\n}\n\nexport default DraggingState;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport State from \"./State\";\nimport { STATE_TYPE, EVENTS } from \"../consts\";\nimport { FlickingContext } from \"../types\";\nimport { circulate } from \"../utils\";\n\nclass AnimatingState extends State {\n  public readonly type = STATE_TYPE.ANIMATING;\n  public readonly holding = false;\n  public readonly playing = true;\n\n  public onHold(e: any, { viewport, triggerEvent, transitTo }: FlickingContext): void {\n    const options = viewport.options;\n    const scrollArea = viewport.getScrollArea();\n    const scrollAreaSize = viewport.getScrollAreaSize();\n    const loopCount = Math.floor((this.lastPosition + this.delta - scrollArea.prev) / scrollAreaSize);\n\n    const targetPanel = this.targetPanel;\n    if (options.circular && loopCount !== 0 && targetPanel) {\n      const cloneCount = viewport.panelManager.getCloneCount();\n      const originalTargetPosition = targetPanel.getPosition();\n\n      // cloneIndex is from -1 to cloneCount - 1\n      const newCloneIndex = circulate(targetPanel.getCloneIndex() - loopCount, -1, cloneCount - 1, true);\n      const newTargetPosition = originalTargetPosition - loopCount * scrollAreaSize;\n      const newTargetPanel = targetPanel.getIdenticalPanels()[newCloneIndex + 1].clone(newCloneIndex, true);\n\n      // Set new target panel considering looped count\n      newTargetPanel.setPosition(newTargetPosition);\n      this.targetPanel = newTargetPanel;\n    }\n\n    // Reset last position and delta\n    this.delta = 0;\n    this.lastPosition = viewport.getCameraPosition();\n\n    // Update current panel as current nearest panel\n    viewport.setCurrentPanel(viewport.getNearestPanel()!);\n    triggerEvent(EVENTS.HOLD_START, e, true)\n      .onSuccess(() => {\n        transitTo(STATE_TYPE.DRAGGING);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  public onChange(e: any, { moveCamera, transitTo }: FlickingContext): void {\n    if (!e.delta.flick) {\n      return;\n    }\n\n    moveCamera(e)\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  public onFinish(e: any, { flicking, viewport, triggerEvent, transitTo }: FlickingContext) {\n    const isTrusted = e && e.isTrusted;\n\n    viewport.options.bound\n      ? viewport.setCurrentPanel(this.targetPanel!)\n      : viewport.setCurrentPanel(viewport.getNearestPanel()!);\n    transitTo(STATE_TYPE.IDLE);\n    triggerEvent(EVENTS.MOVE_END, e, isTrusted, {\n      direction: this.direction,\n    });\n\n    if (flicking.options.adaptive) {\n      viewport.updateAdaptiveSize();\n    }\n  }\n}\n\nexport default AnimatingState;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport State from \"./State\";\nimport { STATE_TYPE } from \"../consts\";\nimport { FlickingContext } from \"../types\";\n\nclass DisabledState extends State {\n  public readonly type = STATE_TYPE.DISABLED;\n  public readonly holding = false;\n  public readonly playing = true;\n\n  public onAnimationEnd(e: any, { transitTo }: FlickingContext): void {\n    transitTo(STATE_TYPE.IDLE);\n  }\n\n  public onChange(e: any, { viewport, transitTo }: FlickingContext): void {\n    // Can stop Axes's change event\n    e.stop();\n\n    // Should update axes position as it's already changed at this moment\n    viewport.updateAxesPosition(viewport.getCameraPosition());\n    transitTo(STATE_TYPE.IDLE);\n  }\n\n  public onRelease(e: any, { transitTo }: FlickingContext): void {\n    // This is needed when stopped hold start event\n    if (e.delta.flick === 0) {\n      transitTo(STATE_TYPE.IDLE);\n    }\n  }\n}\n\nexport default DisabledState;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport State from \"../states/State\";\nimport { AxesEventType, ValueOf, FlickingContext, StateType } from \"../types\";\nimport { AXES_EVENTS, STATE_TYPE } from \"../consts\";\nimport IdleState from \"../states/IdleState\";\nimport HoldingState from \"../states/HoldingState\";\nimport DraggingState from \"../states/DraggingState\";\nimport AnimatingState from \"../states/AnimatingState\";\nimport DisabledState from \"../states/DisabledState\";\n\nclass StateMachine {\n  private state: State = new IdleState();\n\n  public fire(eventType: ValueOf<AxesEventType>, e: any, context: FlickingContext) {\n    const currentState = this.state;\n    switch (eventType) {\n      case AXES_EVENTS.HOLD:\n        currentState.onHold(e, context);\n        break;\n      case AXES_EVENTS.CHANGE:\n        currentState.onChange(e, context);\n        break;\n      case AXES_EVENTS.RELEASE:\n        currentState.onRelease(e, context);\n        break;\n      case AXES_EVENTS.ANIMATION_END:\n        currentState.onAnimationEnd(e, context);\n        break;\n      case AXES_EVENTS.FINISH:\n        currentState.onFinish(e, context);\n        break;\n    }\n  }\n\n  public getState(): State {\n    return this.state;\n  }\n\n  public transitTo = (nextStateType: ValueOf<StateType>): State => {\n    const currentState = this.state;\n\n    if (currentState.type !== nextStateType) {\n      let nextState: State;\n\n      switch (nextStateType) {\n        case STATE_TYPE.IDLE:\n          nextState = new IdleState();\n          break;\n        case STATE_TYPE.HOLDING:\n          nextState = new HoldingState();\n          break;\n        case STATE_TYPE.DRAGGING:\n          nextState = new DraggingState();\n          break;\n        case STATE_TYPE.ANIMATING:\n          nextState = new AnimatingState();\n          break;\n        case STATE_TYPE.DISABLED:\n          nextState = new DisabledState();\n          break;\n      }\n\n      currentState.onExit(nextState!);\n      nextState!.onEnter(currentState);\n\n      this.state = nextState!;\n    }\n    return this.state;\n  }\n}\n\nexport default StateMachine;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport { MoveTypeStringOption, MoveTypeContext, DestinationInfo } from \"../types\";\nimport Panel from \"../components/Panel\";\nimport { EVENTS } from \"../consts\";\n\nabstract class MoveType {\n  protected readonly abstract type: string;\n\n  public abstract findTargetPanel(ctx: MoveTypeContext): DestinationInfo;\n\n  public is(type: MoveTypeStringOption): boolean {\n    return type === this.type;\n  }\n\n  public findRestorePanel(ctx: MoveTypeContext): DestinationInfo {\n    const viewport = ctx.viewport;\n    const options = viewport.options;\n\n    const panel = options.circular\n      ? this.findRestorePanelInCircularMode(ctx)\n      : viewport.getCurrentPanel()!;\n\n    return {\n      panel,\n      destPos: viewport.findEstimatedPosition(panel),\n      duration: options.duration,\n      eventType: EVENTS.RESTORE,\n    };\n  }\n\n  public findPanelWhenInterrupted(ctx: MoveTypeContext): DestinationInfo {\n    const { state, viewport } = ctx;\n    const targetPanel = state.targetPanel!;\n\n    return {\n      panel: targetPanel,\n      destPos: viewport.findEstimatedPosition(targetPanel),\n      duration: viewport.options.duration,\n      eventType: \"\",\n    };\n  }\n\n  // Calculate minimum distance to \"change\" panel\n  protected calcBrinkOfChange(ctx: MoveTypeContext): number {\n    const { viewport, isNextDirection } = ctx;\n\n    const options = viewport.options;\n    const currentPanel = viewport.getCurrentPanel()!;\n    const halfGap = options.gap / 2;\n\n    const relativeAnchorPosition = currentPanel.getRelativeAnchorPosition();\n\n    // Minimum distance needed to decide prev/next panel as nearest\n    /*\n     * |  Prev  |     Next     |\n     * |--------|--------------|\n     * [][      |<-Anchor    ][] <- Panel + Half-Gap\n     */\n    let minimumDistanceToChange = isNextDirection\n      ? currentPanel.getSize() - relativeAnchorPosition + halfGap\n      : relativeAnchorPosition + halfGap;\n\n    minimumDistanceToChange = Math.max(minimumDistanceToChange, options.threshold);\n\n    return minimumDistanceToChange;\n  }\n\n  private findRestorePanelInCircularMode(ctx: MoveTypeContext): Panel {\n    const viewport = ctx.viewport;\n    const originalPanel = viewport.getCurrentPanel()!.getOriginalPanel();\n    const hangerPosition = viewport.getHangerPosition();\n\n    const firstClonedPanel = originalPanel.getIdenticalPanels()[1];\n    const lapped = Math.abs(originalPanel.getAnchorPosition() - hangerPosition)\n      > Math.abs(firstClonedPanel.getAnchorPosition() - hangerPosition);\n\n    return (!ctx.isNextDirection && lapped)\n      ? firstClonedPanel\n      : originalPanel;\n  }\n}\n\nexport default MoveType;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport MoveType from \"./MoveType\";\nimport { MOVE_TYPE, EVENTS } from \"../consts\";\nimport { MoveTypeContext, DestinationInfo } from \"../types\";\nimport { clamp } from \"../utils\";\n\nclass Snap extends MoveType {\n  protected readonly type: string = MOVE_TYPE.SNAP;\n  protected count: number;\n\n  constructor(count: number) {\n    super();\n    this.count = count;\n  }\n\n  public findTargetPanel(ctx: MoveTypeContext): DestinationInfo {\n    const { viewport, axesEvent, swipeDistance } = ctx;\n    const snapCount = this.count;\n    const eventDelta = Math.abs(axesEvent.delta.flick);\n    const currentPanel = viewport.getCurrentPanel()!;\n    const nearestPanel = viewport.getNearestPanel()!;\n    const minimumDistanceToChange = this.calcBrinkOfChange(ctx);\n    const nearestIsCurrent = nearestPanel.getIndex() === currentPanel.getIndex();\n\n    // This can happen when bounce is 0\n    const shouldMoveWhenBounceIs0 = viewport.canSetBoundMode() && nearestIsCurrent;\n    const shouldMoveToAdjacent = !viewport.isOutOfBound()\n      && (swipeDistance <= minimumDistanceToChange || shouldMoveWhenBounceIs0);\n\n    if (snapCount > 1 && eventDelta > minimumDistanceToChange) {\n      return this.findSnappedPanel(ctx);\n    } else if (shouldMoveToAdjacent) {\n      return this.findAdjacentPanel(ctx);\n    } else {\n      return {\n        panel: nearestPanel,\n        duration: viewport.options.duration,\n        destPos: viewport.findEstimatedPosition(nearestPanel),\n        // As swipeDistance holds mouse/touch position change regardless of bounce option value\n        // swipDistance > minimumDistanceToChange can happen in bounce area\n        // Second condition is for handling that.\n        eventType: (swipeDistance <= minimumDistanceToChange)\n          || (viewport.isOutOfBound() && nearestIsCurrent)\n          ? EVENTS.RESTORE\n          : EVENTS.CHANGE,\n      };\n    }\n  }\n\n  protected findSnappedPanel(ctx: MoveTypeContext): DestinationInfo {\n    const { axesEvent, viewport, state, isNextDirection } = ctx;\n\n    const eventDelta = Math.abs(axesEvent.delta.flick);\n    const minimumDistanceToChange = this.calcBrinkOfChange(ctx);\n    const snapCount = this.count;\n    const options = viewport.options;\n    const scrollAreaSize = viewport.getScrollAreaSize();\n    const halfGap = options.gap / 2;\n    const estimatedHangerPos = axesEvent.destPos.flick + viewport.getRelativeHangerPosition();\n\n    let panelToMove = viewport.getNearestPanel()!;\n    let cycleIndex = panelToMove.getCloneIndex() + 1; // 0(original) or 1(clone)\n    let passedPanelCount = 0;\n\n    while (passedPanelCount < snapCount) {\n      // Since panelToMove holds also cloned panels, we should use original panel's position\n      const originalPanel = panelToMove.getOriginalPanel();\n      const panelPosition = originalPanel.getPosition() + cycleIndex * scrollAreaSize;\n      const panelSize = originalPanel.getSize();\n\n      const panelNextPosition = panelPosition + panelSize + halfGap;\n      const panelPrevPosition = panelPosition - halfGap;\n\n      // Current panelToMove contains destPos\n      if (\n        (isNextDirection && panelNextPosition > estimatedHangerPos)\n        || (!isNextDirection && panelPrevPosition < estimatedHangerPos)\n      ) {\n        break;\n      }\n\n      const siblingPanel = isNextDirection\n        ? panelToMove.nextSibling\n        : panelToMove.prevSibling;\n      if (!siblingPanel) {\n        break;\n      }\n\n      const panelIndex = panelToMove.getIndex();\n      const siblingIndex = siblingPanel.getIndex();\n      if ((isNextDirection && siblingIndex <= panelIndex)\n        || (!isNextDirection && siblingIndex >= panelIndex)\n      ) {\n        cycleIndex = isNextDirection\n          ? cycleIndex + 1\n          : cycleIndex - 1;\n      }\n      panelToMove = siblingPanel;\n      passedPanelCount += 1;\n    }\n\n    const originalPosition = panelToMove.getOriginalPanel().getPosition();\n\n    if (cycleIndex !== 0) {\n      panelToMove = panelToMove.clone(panelToMove.getCloneIndex(), true);\n      panelToMove.setPosition(originalPosition + cycleIndex * scrollAreaSize);\n    }\n\n    const defaultDuration = viewport.options.duration;\n    const duration = clamp(axesEvent.duration, defaultDuration, defaultDuration * passedPanelCount);\n\n    return {\n      panel: panelToMove,\n      destPos: viewport.findEstimatedPosition(panelToMove),\n      duration,\n      eventType: Math.max(eventDelta, state.delta) > minimumDistanceToChange\n        ? EVENTS.CHANGE\n        : EVENTS.RESTORE,\n    };\n  }\n\n  private findAdjacentPanel(ctx: MoveTypeContext): DestinationInfo {\n    const { viewport, isNextDirection } = ctx;\n\n    const options = viewport.options;\n    const currentIndex = viewport.getCurrentIndex();\n    const currentPanel = viewport.panelManager.get(currentIndex)!;\n    const hangerPosition = viewport.getHangerPosition();\n    const scrollArea = viewport.getScrollArea();\n\n    const firstClonedPanel = currentPanel.getIdenticalPanels()[1];\n    const lapped = options.circular\n      && (Math.abs(currentPanel.getAnchorPosition() - hangerPosition)\n        > Math.abs(firstClonedPanel.getAnchorPosition() - hangerPosition));\n\n    // If lapped in circular mode, use first cloned panel as base panel\n    const basePanel = lapped\n      ? firstClonedPanel\n      : currentPanel;\n    const basePosition = basePanel.getPosition();\n\n    const adjacentPanel = isNextDirection\n      ? basePanel.nextSibling\n      : basePanel.prevSibling;\n\n    const eventType = adjacentPanel\n      ? EVENTS.CHANGE\n      : EVENTS.RESTORE;\n    const panelToMove = adjacentPanel\n      ? adjacentPanel\n      : basePanel;\n    const targetRelativeAnchorPosition = panelToMove.getRelativeAnchorPosition();\n\n    const estimatedPanelPosition = options.circular\n      ? isNextDirection\n        ? basePosition + basePanel.getSize() + targetRelativeAnchorPosition + options.gap\n        : basePosition - (panelToMove.getSize() - targetRelativeAnchorPosition) - options.gap\n      : panelToMove.getAnchorPosition();\n    const estimatedPosition = estimatedPanelPosition - viewport.getRelativeHangerPosition();\n    const destPos = viewport.canSetBoundMode()\n      ? clamp(estimatedPosition, scrollArea.prev, scrollArea.next)\n      : estimatedPosition;\n\n    return {\n      panel: panelToMove,\n      destPos,\n      duration: options.duration,\n      eventType,\n    };\n  }\n}\n\nexport default Snap;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport Snap from \"./Snap\";\nimport { MOVE_TYPE, EVENTS } from \"../consts\";\nimport { MoveTypeContext, DestinationInfo } from \"../types\";\nimport { circulate, clamp } from \"../utils\";\n\nclass FreeScroll extends Snap {\n  protected readonly type: string = MOVE_TYPE.FREE_SCROLL;\n\n  constructor() {\n    // Set snap count to Infinity\n    super(Infinity);\n  }\n\n  public findTargetPanel(ctx: MoveTypeContext): DestinationInfo {\n    const { axesEvent, state, viewport } = ctx;\n    const destPos = axesEvent.destPos.flick;\n    const minimumDistanceToChange = this.calcBrinkOfChange(ctx);\n    const scrollArea = viewport.getScrollArea();\n    const currentPanel = viewport.getCurrentPanel()!;\n    const options = viewport.options;\n\n    const delta = Math.abs(axesEvent.delta.flick + state.delta);\n    if (delta > minimumDistanceToChange) {\n      const destInfo = super.findSnappedPanel(ctx);\n\n      destInfo.duration = axesEvent.duration;\n      destInfo.destPos = destPos;\n      destInfo.eventType = !options.circular && destInfo.panel === currentPanel\n        ? \"\"\n        : EVENTS.CHANGE;\n\n      return destInfo;\n    } else {\n      let estimatedPosition = options.circular\n        ? circulate(destPos, scrollArea.prev, scrollArea.next, false)\n        : destPos;\n      estimatedPosition = clamp(estimatedPosition, scrollArea.prev, scrollArea.next);\n      estimatedPosition += viewport.getRelativeHangerPosition();\n\n      const estimatedPanel = viewport.findNearestPanelAt(estimatedPosition)!;\n\n      return {\n        panel: estimatedPanel,\n        destPos,\n        duration: axesEvent.duration,\n        eventType: \"\",\n      };\n    }\n  }\n\n  public findRestorePanel(ctx: MoveTypeContext): DestinationInfo {\n    return this.findTargetPanel(ctx);\n  }\n\n  public findPanelWhenInterrupted(ctx: MoveTypeContext): DestinationInfo {\n    const { viewport } = ctx;\n\n    return {\n      panel: viewport.getNearestPanel()!,\n      destPos: viewport.getCameraPosition(),\n      duration: 0,\n      eventType: \"\",\n    };\n  }\n\n  protected calcBrinkOfChange(ctx: MoveTypeContext): number {\n    const { viewport, isNextDirection } = ctx;\n\n    const options = viewport.options;\n    const currentPanel = viewport.getCurrentPanel()!;\n    const halfGap = options.gap / 2;\n\n    const lastPosition = viewport.stateMachine.getState().lastPosition;\n    const currentPanelPosition = currentPanel.getPosition();\n\n    // As camera can stop anywhere in free scroll mode,\n    // minimumDistanceToChange should be calculated differently.\n    // Ref #191(https://github.com/naver/egjs-flicking/issues/191)\n    const lastHangerPosition = lastPosition + viewport.getRelativeHangerPosition();\n\n    const scrollAreaSize = viewport.getScrollAreaSize();\n    let minimumDistanceToChange = isNextDirection\n      ? currentPanelPosition + currentPanel.getSize() - lastHangerPosition + halfGap\n      : lastHangerPosition - currentPanelPosition + halfGap;\n    minimumDistanceToChange = Math.abs(minimumDistanceToChange % scrollAreaSize);\n\n    return Math.min(minimumDistanceToChange, scrollAreaSize - minimumDistanceToChange);\n  }\n}\n\nexport default FreeScroll;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Axes, { PanInput } from \"@egjs/axes\";\n\nimport Flicking from \"../Flicking\";\nimport Panel from \"./Panel\";\nimport PanelManager from \"./PanelManager\";\nimport StateMachine from \"./StateMachine\";\nimport MoveType from \"../moves/MoveType\";\nimport { FlickingOptions, FlickingPanel, FlickingStatus, ElementLike, EventType, TriggerCallback, NeedPanelEvent, FlickingEvent, MoveTypeObjectOption, OriginalStyle, Plugin, DestroyOption, BoundingBox } from \"../types\";\nimport { DEFAULT_VIEWPORT_CSS, DEFAULT_CAMERA_CSS, TRANSFORM, DEFAULT_OPTIONS, EVENTS, DIRECTION, STATE_TYPE, MOVE_TYPE } from \"../consts\";\nimport { clamp, applyCSS, toArray, parseArithmeticExpression, isBetween, isArray, parseElement, hasClass, restoreStyle, circulate, findIndex, getBbox } from \"../utils\";\nimport Snap from \"../moves/Snap\";\nimport FreeScroll from \"../moves/FreeScroll\";\n\nexport default class Viewport {\n  public options: FlickingOptions;\n  public stateMachine: StateMachine;\n  public panelManager: PanelManager;\n  public moveType: MoveType;\n\n  private flicking: Flicking;\n  private axes: Axes;\n  private panInput: PanInput;\n\n  private viewportElement: HTMLElement;\n  private cameraElement: HTMLElement;\n\n  private triggerEvent: Flicking[\"triggerEvent\"];\n  private axesHandlers: { [key: string]: any };\n\n  private currentPanel: Panel | undefined;\n  private nearestPanel: Panel | undefined;\n  private visiblePanels: Panel[];\n\n  private plugins: Plugin[] = [];\n  private panelBboxes: { [className: string]: BoundingBox };\n  private state: {\n    size: number;\n    position: number;\n    panelMaintainRatio: number;\n    relativeHangerPosition: number;\n    positionOffset: number;\n    scrollArea: {\n      prev: number;\n      next: number;\n    };\n    translate: {\n      name: string,\n      has3d: boolean,\n    };\n    infiniteThreshold: number;\n    checkedIndexes: Array<[number, number]>;\n    visibleIndex: {\n      min: number;\n      max: number;\n    };\n    isAdaptiveCached: boolean;\n    isViewportGiven: boolean;\n    isCameraGiven: boolean;\n    originalViewportStyle: OriginalStyle;\n    originalCameraStyle: OriginalStyle;\n    cachedBbox: BoundingBox | null;\n  };\n\n  constructor(\n    flicking: Flicking,\n    options: FlickingOptions,\n    triggerEvent: Flicking[\"triggerEvent\"],\n  ) {\n    this.flicking = flicking;\n    this.triggerEvent = triggerEvent;\n\n    this.state = {\n      size: 0,\n      position: 0,\n      panelMaintainRatio: 0,\n      relativeHangerPosition: 0,\n      positionOffset: 0,\n      scrollArea: {\n        prev: 0,\n        next: 0,\n      },\n      visibleIndex: {\n        min: NaN,\n        max: NaN,\n      },\n      translate: TRANSFORM,\n      infiniteThreshold: 0,\n      checkedIndexes: [],\n      isAdaptiveCached: false,\n      isViewportGiven: false,\n      isCameraGiven: false,\n      originalViewportStyle: {\n        className: null,\n        style: null,\n      },\n      originalCameraStyle: {\n        className: null,\n        style: null,\n      },\n      cachedBbox: null,\n    };\n    this.options = options;\n    this.stateMachine = new StateMachine();\n    this.visiblePanels = [];\n    this.panelBboxes = {};\n\n    this.build();\n  }\n\n  public moveTo(\n    panel: Panel,\n    destPos: number,\n    eventType: EventType[\"CHANGE\"] | EventType[\"RESTORE\"] | \"\",\n    axesEvent: any,\n    duration: number = this.options.duration,\n  ): TriggerCallback {\n    const state = this.state;\n    const currentState = this.stateMachine.getState();\n    const currentPosition = state.position;\n\n    const isTrusted = axesEvent\n      ? axesEvent.isTrusted\n      : false;\n    const direction = destPos === currentPosition\n      ? null\n      : destPos > currentPosition\n        ? DIRECTION.NEXT\n        : DIRECTION.PREV;\n\n    let eventResult: TriggerCallback;\n    if (eventType === EVENTS.CHANGE) {\n      eventResult = this.triggerEvent(EVENTS.CHANGE, axesEvent, isTrusted, {\n        index: panel.getIndex(),\n        panel,\n        direction,\n      });\n    } else if (eventType === EVENTS.RESTORE) {\n      eventResult = this.triggerEvent(EVENTS.RESTORE, axesEvent, isTrusted);\n    } else {\n      eventResult = {\n        onSuccess(callback: () => void): TriggerCallback {\n          callback();\n          return this;\n        },\n        onStopped(): TriggerCallback {\n          return this;\n        },\n      };\n    }\n\n    eventResult.onSuccess(() => {\n      currentState.delta = 0;\n      currentState.lastPosition = this.getCameraPosition();\n      currentState.targetPanel = panel;\n      currentState.direction = destPos === currentPosition\n        ? null\n        : destPos > currentPosition\n          ? DIRECTION.NEXT\n          : DIRECTION.PREV;\n\n      if (destPos === currentPosition) {\n        // no move\n        this.nearestPanel = panel;\n        this.currentPanel = panel;\n      }\n\n      if (axesEvent && axesEvent.setTo) {\n        // freeScroll only occurs in release events\n        axesEvent.setTo({ flick: destPos }, duration);\n      } else {\n        this.axes.setTo({ flick: destPos }, duration);\n      }\n    });\n\n    return eventResult;\n  }\n\n  public moveCamera(pos: number, axesEvent?: any): void {\n    const state = this.state;\n    const options = this.options;\n    const transform = state.translate.name;\n    const scrollArea = state.scrollArea;\n\n    // Update position & nearestPanel\n    if (options.circular && !isBetween(pos, scrollArea.prev, scrollArea.next)) {\n      pos = circulate(pos, scrollArea.prev, scrollArea.next, false);\n    }\n    state.position = pos;\n    this.nearestPanel = this.findNearestPanel();\n    const nearestPanel = this.nearestPanel;\n    const originalNearestPosition = nearestPanel\n      ? nearestPanel.getPosition()\n      : 0;\n\n    // From 0(panel position) to 1(panel position + panel size)\n    // When it's on gap area value will be (val > 1 || val < 0)\n    if (nearestPanel) {\n      const hangerPosition = this.getHangerPosition();\n      const panelPosition = nearestPanel.getPosition();\n      const panelSize = nearestPanel.getSize();\n      const halfGap = options.gap / 2;\n\n      // As panel's range is from panel position - half gap ~ panel pos + panel size + half gap\n      state.panelMaintainRatio = (hangerPosition - panelPosition + halfGap) / (panelSize + 2 * halfGap);\n    } else {\n      state.panelMaintainRatio = 0;\n    }\n\n    this.checkNeedPanel(axesEvent);\n\n    // Possibly modified after need panel, if it's looped\n    const modifiedNearestPosition = nearestPanel\n      ? nearestPanel.getPosition()\n      : 0;\n\n    pos += (modifiedNearestPosition - originalNearestPosition);\n    state.position = pos;\n\n    this.updateVisiblePanels();\n\n    // Offset is needed to fix camera layer size in visible-only rendering mode\n    const posOffset = options.renderOnlyVisible\n      ? state.positionOffset\n      : 0;\n    const moveVector = options.horizontal\n      ? [-(pos - posOffset), 0] : [0, -(pos - posOffset)];\n    const moveCoord = moveVector.map(coord => `${Math.round(coord)}px`).join(\", \");\n\n    this.cameraElement.style[transform] = state.translate.has3d\n      ? `translate3d(${moveCoord}, 0px)`\n      : `translate(${moveCoord})`;\n  }\n\n  public stopCamera = (axesEvent: any): void => {\n    if (axesEvent && axesEvent.setTo) {\n      axesEvent.setTo({ flick: this.state.position }, 0);\n    }\n\n    this.stateMachine.transitTo(STATE_TYPE.IDLE);\n  }\n\n  public unCacheBbox(): void {\n    const state = this.state;\n    const options = this.options;\n\n    state.cachedBbox = null;\n    state.visibleIndex = { min: NaN, max: NaN };\n\n    const viewportElement = this.viewportElement;\n    if (!options.horizontal) {\n      // Don't preserve previous width for adaptive resizing\n      viewportElement.style.width = \"\";\n    } else {\n      viewportElement.style.height = \"\";\n    }\n    state.isAdaptiveCached = false;\n    this.panelBboxes = {};\n  }\n\n  public resize(): void {\n    this.updateSize();\n    this.updateOriginalPanelPositions();\n    this.updateAdaptiveSize();\n    this.updateScrollArea();\n    this.updateClonePanels();\n    this.updateCameraPosition();\n    this.updatePlugins();\n  }\n\n  // Find nearest anchor from current hanger position\n  public findNearestPanel(): Panel | undefined {\n    const state = this.state;\n    const panelManager = this.panelManager;\n    const hangerPosition = this.getHangerPosition();\n\n    if (this.isOutOfBound()) {\n      const position = state.position;\n\n      return position <= state.scrollArea.prev\n        ? panelManager.firstPanel()\n        : panelManager.lastPanel();\n    }\n\n    return this.findNearestPanelAt(hangerPosition);\n  }\n\n  public findNearestPanelAt(position: number): Panel | undefined {\n    const panelManager = this.panelManager;\n\n    const allPanels = panelManager.allPanels();\n    let minimumDistance = Infinity;\n    let nearestPanel: Panel | undefined;\n\n    for (const panel of allPanels) {\n      if (!panel) {\n        continue;\n      }\n      const prevPosition = panel.getPosition();\n      const nextPosition = prevPosition + panel.getSize();\n\n      // Use shortest distance from panel's range\n      const distance = isBetween(position, prevPosition, nextPosition)\n        ? 0\n        : Math.min(\n          Math.abs(prevPosition - position),\n          Math.abs(nextPosition - position),\n        );\n\n      if (distance > minimumDistance) {\n        break;\n      } else if (distance === minimumDistance) {\n        const minimumAnchorDistance = Math.abs(position - nearestPanel!.getAnchorPosition());\n        const anchorDistance = Math.abs(position - panel.getAnchorPosition());\n\n        if (anchorDistance > minimumAnchorDistance) {\n          break;\n        }\n      }\n\n      minimumDistance = distance;\n      nearestPanel = panel;\n    }\n\n    return nearestPanel;\n  }\n\n  public findNearestIdenticalPanel(panel: Panel): Panel {\n    let nearest = panel;\n    let shortestDistance = Infinity;\n    const hangerPosition = this.getHangerPosition();\n\n    const identicals = panel.getIdenticalPanels();\n    identicals.forEach(identical => {\n      const anchorPosition = identical.getAnchorPosition();\n      const distance = Math.abs(anchorPosition - hangerPosition);\n\n      if (distance < shortestDistance) {\n        nearest = identical;\n        shortestDistance = distance;\n      }\n    });\n\n    return nearest;\n  }\n\n  // Find shortest camera position that distance is minimum\n  public findShortestPositionToPanel(panel: Panel): number {\n    const state = this.state;\n    const options = this.options;\n    const anchorPosition = panel.getAnchorPosition();\n    const hangerPosition = this.getHangerPosition();\n    const distance = Math.abs(hangerPosition - anchorPosition);\n    const scrollAreaSize = state.scrollArea.next - state.scrollArea.prev;\n\n    if (!options.circular) {\n      const position = anchorPosition - state.relativeHangerPosition;\n      return this.canSetBoundMode()\n        ? clamp(position, state.scrollArea.prev, state.scrollArea.next)\n        : position;\n    } else {\n      // If going out of viewport border is more efficient way of moving, choose that position\n      return distance <= scrollAreaSize - distance\n        ? anchorPosition - state.relativeHangerPosition\n        : anchorPosition > hangerPosition\n          // PREV TO NEXT\n          ? anchorPosition - state.relativeHangerPosition - scrollAreaSize\n          // NEXT TO PREV\n          : anchorPosition - state.relativeHangerPosition + scrollAreaSize;\n    }\n  }\n\n  public findEstimatedPosition(panel: Panel): number {\n    const scrollArea = this.getScrollArea();\n\n    let estimatedPosition = panel.getAnchorPosition() - this.getRelativeHangerPosition();\n    estimatedPosition = this.canSetBoundMode()\n      ? clamp(estimatedPosition, scrollArea.prev, scrollArea.next)\n      : estimatedPosition;\n\n    return estimatedPosition;\n  }\n\n  public addVisiblePanel(panel: Panel): void {\n    if (this.getVisibleIndexOf(panel) < 0) {\n      this.visiblePanels.push(panel);\n    }\n  }\n\n  public enable(): void {\n    this.panInput.enable();\n  }\n\n  public disable(): void {\n    this.panInput.disable();\n  }\n\n  public insert(index: number, element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const lastIndex = this.panelManager.getLastIndex();\n\n    // Index should not below 0\n    if (index < 0 || index > lastIndex) {\n      return [];\n    }\n\n    const state = this.state;\n    const options = this.options;\n    const parsedElements = parseElement(element);\n\n    const panels = parsedElements\n      .map((el, idx) => new Panel(el, index + idx, this))\n      .slice(0, lastIndex - index + 1);\n\n    if (panels.length <= 0) {\n      return [];\n    }\n\n    const pushedIndex = this.panelManager.insert(index, panels);\n\n    // ...then calc bbox for all panels\n    this.resizePanels(panels);\n\n    if (!this.currentPanel) {\n      this.currentPanel = panels[0];\n      this.nearestPanel = panels[0];\n\n      const newCenterPanel = panels[0];\n      const newPanelPosition = this.findEstimatedPosition(newCenterPanel);\n      state.position = newPanelPosition;\n      this.updateAxesPosition(newPanelPosition);\n      state.panelMaintainRatio = (newCenterPanel.getRelativeAnchorPosition() + options.gap / 2) / (newCenterPanel.getSize() + options.gap);\n    }\n\n    // Update checked indexes in infinite mode\n    this.updateCheckedIndexes({ min: index, max: index });\n    state.checkedIndexes.forEach((indexes, idx) => {\n      const [min, max] = indexes;\n      if (index < min) {\n        // Push checked index\n        state.checkedIndexes.splice(idx, 1, [min + pushedIndex, max + pushedIndex]);\n      }\n    });\n\n    // Uncache visible index to refresh panels\n    state.visibleIndex = {\n      min: NaN,\n      max: NaN,\n    };\n\n    this.resize();\n\n    return panels;\n  }\n\n  public replace(index: number, element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const state = this.state;\n    const options = this.options;\n    const panelManager = this.panelManager;\n    const lastIndex = panelManager.getLastIndex();\n\n    // Index should not below 0\n    if (index < 0 || index > lastIndex) {\n      return [];\n    }\n\n    const parsedElements = parseElement(element);\n    const panels = parsedElements\n      .map((el, idx) => new Panel(el, index + idx, this))\n      .slice(0, lastIndex - index + 1);\n\n    if (panels.length <= 0) {\n      return [];\n    }\n\n    const replacedPanels = panelManager.replace(index, panels);\n\n    replacedPanels.forEach(panel => {\n      const visibleIndex = this.getVisibleIndexOf(panel);\n      if (visibleIndex > -1) {\n        this.visiblePanels.splice(visibleIndex, 1);\n      }\n    });\n\n    // ...then calc bbox for all panels\n    this.resizePanels(panels);\n\n    const currentPanel = this.currentPanel;\n    const wasEmpty = !currentPanel;\n    if (wasEmpty) {\n      this.currentPanel = panels[0];\n      this.nearestPanel = panels[0];\n\n      const newCenterPanel = panels[0];\n      const newPanelPosition = this.findEstimatedPosition(newCenterPanel);\n      state.position = newPanelPosition;\n      this.updateAxesPosition(newPanelPosition);\n      state.panelMaintainRatio = (newCenterPanel.getRelativeAnchorPosition() + options.gap / 2) / (newCenterPanel.getSize() + options.gap);\n    } else if (isBetween(currentPanel!.getIndex(), index, index + panels.length - 1)) {\n      // Current panel is replaced\n      this.currentPanel = panelManager.get(currentPanel!.getIndex());\n    }\n\n    // Update checked indexes in infinite mode\n    this.updateCheckedIndexes({ min: index, max: index + panels.length - 1 });\n\n    // Uncache visible index to refresh panels\n    state.visibleIndex = {\n      min: NaN,\n      max: NaN,\n    };\n\n    this.resize();\n\n    return panels;\n  }\n\n  public remove(index: number, deleteCount: number = 1): FlickingPanel[] {\n    const state = this.state;\n    // Index should not below 0\n    index = Math.max(index, 0);\n\n    const panelManager = this.panelManager;\n    const currentIndex = this.getCurrentIndex();\n\n    const removedPanels = panelManager.remove(index, deleteCount);\n    if (isBetween(currentIndex, index, index + deleteCount - 1)) {\n      // Current panel is removed\n      // Use panel at removing index - 1 as new current panel if it exists\n      const newCurrentIndex = Math.max(index - 1, panelManager.getRange().min);\n      this.currentPanel = panelManager.get(newCurrentIndex);\n    }\n\n    // Update checked indexes in infinite mode\n    if (deleteCount > 0) {\n      // Check whether removing index will affect checked indexes\n      // Suppose index 0 is empty and removed index 1, then checked index 0 should be deleted and vice versa.\n      this.updateCheckedIndexes({ min: index - 1, max: index + deleteCount });\n      // Uncache visible index to refresh panels\n      state.visibleIndex = {\n        min: NaN,\n        max: NaN,\n      };\n    }\n\n    if (panelManager.getPanelCount() <= 0) {\n      this.currentPanel = undefined;\n      this.nearestPanel = undefined;\n    }\n\n    this.resize();\n\n    const scrollArea = state.scrollArea;\n    if (state.position < scrollArea.prev || state.position > scrollArea.next) {\n      const newPosition = circulate(state.position, scrollArea.prev, scrollArea.next, false);\n      this.moveCamera(newPosition);\n      this.updateAxesPosition(newPosition);\n    }\n\n    return removedPanels;\n  }\n\n  public updateAdaptiveSize(): void {\n    const state = this.state;\n    const options = this.options;\n    const horizontal = options.horizontal;\n    const currentPanel = this.getCurrentPanel();\n\n    if (!currentPanel) {\n      return;\n    }\n\n    const shouldApplyAdaptive = options.adaptive || !state.isAdaptiveCached;\n    const viewportStyle = this.viewportElement.style;\n    if (shouldApplyAdaptive) {\n      let sizeToApply: number;\n      if (options.adaptive) {\n        const panelBbox = currentPanel.getBbox();\n\n        sizeToApply = horizontal ? panelBbox.height : panelBbox.width;\n      } else {\n        // Find minimum height of panels to maximum panel size\n        const maximumPanelSize = this.panelManager.originalPanels().reduce((maximum, panel) => {\n          const panelBbox = panel.getBbox();\n          return Math.max(maximum, horizontal ? panelBbox.height : panelBbox.width);\n        }, 0);\n\n        sizeToApply = maximumPanelSize;\n      }\n\n      const viewportBbox = this.updateBbox();\n      sizeToApply = Math.max(sizeToApply, horizontal ? viewportBbox.height : viewportBbox.width);\n\n      state.isAdaptiveCached = true;\n      const viewportSize = `${sizeToApply}px`;\n      if (horizontal) {\n        viewportStyle.height = viewportSize;\n      } else if (!horizontal) {\n        viewportStyle.width = viewportSize;\n      }\n    }\n  }\n\n  public updateBbox(): BoundingBox {\n    const state = this.state;\n    const options = this.options;\n    const viewportElement = this.viewportElement;\n\n    if (!state.cachedBbox) {\n      state.cachedBbox = getBbox(viewportElement, options.useOffset);\n    }\n\n    return state.cachedBbox!;\n  }\n\n  public updatePlugins(): void {\n    // update for resize\n    this.plugins.forEach(plugin => {\n      plugin.update && plugin.update(this.flicking);\n    });\n  }\n\n  public destroy(option: Partial<DestroyOption>): void {\n    const state = this.state;\n    const wrapper = this.flicking.getElement();\n    const viewportElement = this.viewportElement;\n    const cameraElement = this.cameraElement;\n    const originalPanels = this.panelManager.originalPanels();\n\n    this.removePlugins(this.plugins);\n    if (!option.preserveUI) {\n      restoreStyle(viewportElement, state.originalViewportStyle);\n      restoreStyle(cameraElement, state.originalCameraStyle);\n\n      if (!state.isCameraGiven && !this.options.renderExternal) {\n        const topmostElement = state.isViewportGiven\n          ? viewportElement\n          : wrapper;\n        const deletingElement = state.isViewportGiven\n          ? cameraElement\n          : viewportElement;\n\n        originalPanels.forEach(panel => {\n          topmostElement.appendChild(panel.getElement());\n        });\n\n        topmostElement.removeChild(deletingElement);\n      }\n    }\n\n    this.axes.destroy();\n    this.panInput.destroy();\n\n    originalPanels.forEach(panel => { panel.destroy(option); });\n\n    // release resources\n    for (const x in this) {\n      (this as any)[x] = null;\n    }\n  }\n\n  public restore(status: FlickingStatus): void {\n    const panels = status.panels;\n    const defaultIndex = this.options.defaultIndex;\n    const cameraElement = this.cameraElement;\n    const panelManager = this.panelManager;\n\n    // Restore index\n    cameraElement.innerHTML = panels.map(panel => panel.html).join(\"\");\n\n    // Create panels first\n    this.refreshPanels();\n    const createdPanels = panelManager.originalPanels();\n\n    // ...then order it by its index\n    const orderedPanels: Panel[] = [];\n    panels.forEach((panel, idx) => {\n      const createdPanel = createdPanels[idx];\n      createdPanel.setIndex(panel.index);\n      orderedPanels[panel.index] = createdPanel;\n    });\n    panelManager.replacePanels(orderedPanels, []);\n    panelManager.setCloneCount(0); // No clones at this point\n\n    const panelCount = panelManager.getPanelCount();\n    if (panelCount > 0) {\n      this.currentPanel = panelManager.get(status.index)\n        || panelManager.get(defaultIndex)\n        || panelManager.firstPanel();\n      this.nearestPanel = this.currentPanel;\n    } else {\n      this.currentPanel = undefined;\n      this.nearestPanel = undefined;\n    }\n    this.visiblePanels = orderedPanels.filter(panel => Boolean(panel));\n\n    this.resize();\n\n    this.axes.setTo({ flick: status.position }, 0);\n    this.moveCamera(status.position);\n  }\n\n  public calcVisiblePanels(): Panel[] {\n    const allPanels = this.panelManager.allPanels();\n    if (this.options.renderOnlyVisible) {\n      const { min, max } = this.state.visibleIndex;\n      const visiblePanels = min >= 0\n        ? allPanels.slice(min, max + 1)\n        : allPanels.slice(0, max + 1).concat(allPanels.slice(min));\n\n      return visiblePanels.filter(panel => panel);\n    } else {\n      return allPanels.filter(panel => {\n        const outsetProgress = panel.getOutsetProgress();\n\n        return outsetProgress > -1 && outsetProgress < 1;\n      });\n    }\n  }\n\n  public getCurrentPanel(): Panel | undefined {\n    return this.currentPanel;\n  }\n\n  public getCurrentIndex(): number {\n    const currentPanel = this.currentPanel;\n\n    return currentPanel\n      ? currentPanel.getIndex()\n      : -1;\n  }\n\n  public getNearestPanel(): Panel | undefined {\n    return this.nearestPanel;\n  }\n\n  // Get progress from nearest panel\n  public getCurrentProgress(): number {\n    const currentState = this.stateMachine.getState();\n    let nearestPanel = currentState.playing || currentState.holding\n      ? this.nearestPanel\n      : this.currentPanel;\n\n    const panelManager = this.panelManager;\n    if (!nearestPanel) {\n      // There're no panels\n      return NaN;\n    }\n    const { prev: prevRange, next: nextRange } = this.getScrollArea();\n    const cameraPosition = this.getCameraPosition();\n    const isOutOfBound = this.isOutOfBound();\n    let prevPanel = nearestPanel.prevSibling;\n    let nextPanel = nearestPanel.nextSibling;\n    let hangerPosition = this.getHangerPosition();\n    let nearestAnchorPos = nearestPanel.getAnchorPosition();\n\n    if (\n      isOutOfBound\n      && prevPanel\n      && nextPanel\n      && cameraPosition < nextRange\n      // On the basis of anchor, prevPanel is nearestPanel.\n      && (hangerPosition - prevPanel.getAnchorPosition() < nearestAnchorPos - hangerPosition)\n    ) {\n      nearestPanel = prevPanel;\n      nextPanel = nearestPanel.nextSibling;\n      prevPanel = nearestPanel.prevSibling;\n      nearestAnchorPos = nearestPanel.getAnchorPosition();\n    }\n    const nearestIndex = nearestPanel.getIndex() + (nearestPanel.getCloneIndex() + 1) * panelManager.getPanelCount();\n    const nearestSize = nearestPanel.getSize();\n\n    if (isOutOfBound) {\n      const relativeHangerPosition = this.getRelativeHangerPosition();\n\n      if (nearestAnchorPos > nextRange + relativeHangerPosition) {\n        // next bounce area: hangerPosition - relativeHangerPosition - nextRange\n        hangerPosition = nearestAnchorPos + hangerPosition - relativeHangerPosition - nextRange;\n      } else if (nearestAnchorPos < prevRange + relativeHangerPosition) {\n        // prev bounce area: hangerPosition - relativeHangerPosition - prevRange\n        hangerPosition = nearestAnchorPos + hangerPosition - relativeHangerPosition - prevRange;\n      }\n    }\n    const hangerIsNextToNearestPanel = hangerPosition >= nearestAnchorPos;\n    const gap = this.options.gap;\n\n    let basePosition = nearestAnchorPos;\n    let targetPosition = nearestAnchorPos;\n    if (hangerIsNextToNearestPanel) {\n      targetPosition = nextPanel\n        ? nextPanel.getAnchorPosition()\n        : nearestAnchorPos + nearestSize + gap;\n    } else {\n      basePosition = prevPanel\n        ? prevPanel.getAnchorPosition()\n        : nearestAnchorPos - nearestSize - gap;\n    }\n\n    const progressBetween = (hangerPosition - basePosition) / (targetPosition - basePosition);\n    const startIndex = hangerIsNextToNearestPanel\n      ? nearestIndex\n      : prevPanel\n        ? prevPanel.getIndex()\n        : nearestIndex - 1;\n\n    return startIndex + progressBetween;\n  }\n\n  // Update axes flick position without triggering event\n  public updateAxesPosition(position: number) {\n    const axes = this.axes;\n    axes.off();\n    axes.setTo({\n      flick: position,\n    }, 0);\n    axes.on(this.axesHandlers);\n  }\n\n  public getSize(): number {\n    return this.state.size;\n  }\n\n  public getScrollArea(): { prev: number, next: number } {\n    return this.state.scrollArea;\n  }\n\n  public isOutOfBound(): boolean {\n    const state = this.state;\n    const options = this.options;\n    const scrollArea = state.scrollArea;\n\n    return !options.circular\n      && options.bound\n      && (state.position <= scrollArea.prev || state.position >= scrollArea.next);\n  }\n\n  public canSetBoundMode(): boolean {\n    const state = this.state;\n    const options = this.options;\n    const lastPanel = this.panelManager.lastPanel();\n    if (!lastPanel) {\n      return false;\n    }\n\n    const summedPanelSize = lastPanel.getPosition() + lastPanel.getSize();\n\n    return options.bound\n      && !options.circular\n      && summedPanelSize >= state.size;\n  }\n\n  public getViewportElement(): HTMLElement {\n    return this.viewportElement;\n  }\n\n  public getCameraElement(): HTMLElement {\n    return this.cameraElement;\n  }\n\n  public getScrollAreaSize(): number {\n    const scrollArea = this.state.scrollArea;\n\n    return scrollArea.next - scrollArea.prev;\n  }\n\n  public getRelativeHangerPosition(): number {\n    return this.state.relativeHangerPosition;\n  }\n\n  public getHangerPosition(): number {\n    return this.state.position + this.state.relativeHangerPosition;\n  }\n\n  public getCameraPosition(): number {\n    return this.state.position;\n  }\n\n  public getPositionOffset(): number {\n    return this.state.positionOffset;\n  }\n\n  public getCheckedIndexes(): Array<[number, number]> {\n    return this.state.checkedIndexes;\n  }\n\n  public getVisibleIndex(): { min: number; max: number } {\n    return this.state.visibleIndex;\n  }\n\n  public getVisiblePanels(): Panel[] {\n    return this.visiblePanels;\n  }\n\n  public setCurrentPanel(panel: Panel): void {\n    this.currentPanel = panel;\n  }\n\n  public setLastIndex(index: number): void {\n    const currentPanel = this.currentPanel;\n    const panelManager = this.panelManager;\n\n    panelManager.setLastIndex(index);\n    if (currentPanel && currentPanel.getIndex() > index) {\n      this.currentPanel = panelManager.lastPanel();\n    }\n\n    this.resize();\n  }\n\n  public setVisiblePanels(panels: Panel[]): void {\n    this.visiblePanels = panels;\n  }\n\n  public connectAxesHandler(handlers: { [key: string]: (event: { [key: string]: any; }) => any }): void {\n    const axes = this.axes;\n\n    this.axesHandlers = handlers;\n    axes.on(handlers);\n  }\n\n  public addPlugins(plugins: Plugin | Plugin[]) {\n    const newPlugins = ([] as Plugin[]).concat(plugins);\n\n    newPlugins.forEach(plugin => {\n      plugin.init(this.flicking);\n    });\n\n    this.plugins = this.plugins.concat(newPlugins);\n    return this;\n  }\n\n  public removePlugins(plugins: Plugin | Plugin[]) {\n    const currentPlugins = this.plugins;\n    const removedPlugins = ([] as Plugin[]).concat(plugins);\n\n    removedPlugins.forEach(plugin => {\n      const index = currentPlugins.indexOf(plugin);\n\n      if (index > -1) {\n        currentPlugins.splice(index, 1);\n      }\n\n      plugin.destroy(this.flicking);\n    });\n    return this;\n  }\n\n  public updateCheckedIndexes(changedRange: { min: number, max: number }): void {\n    const state = this.state;\n\n    let removed = 0;\n    state.checkedIndexes.concat().forEach((indexes, idx) => {\n      const [min, max] = indexes;\n      // Can fill part of indexes in range\n      if (changedRange.min <= max && changedRange.max >= min) {\n        // Remove checked index from list\n        state.checkedIndexes.splice(idx - removed, 1);\n        removed++;\n      }\n    });\n  }\n\n  public resetVisibleIndex(): void {\n    const visibleIndex = this.state.visibleIndex;\n    visibleIndex.min = NaN;\n    visibleIndex.max = NaN;\n  }\n\n  public appendUncachedPanelElements(panels: Panel[]): void {\n    const options = this.options;\n    const fragment = document.createDocumentFragment();\n\n    if (options.isEqualSize) {\n      const prevVisiblePanels = this.visiblePanels;\n      const equalSizeClasses = options.isEqualSize as string[]; // for readability\n      const cached: { [className: string]: boolean } = {};\n\n      this.visiblePanels = [];\n\n      Object.keys(this.panelBboxes).forEach(className => {\n        cached[className] = true;\n      });\n\n      panels.forEach(panel => {\n        const overlappedClass = panel.getOverlappedClass(equalSizeClasses);\n        if (overlappedClass && !cached[overlappedClass]) {\n          if (!options.renderExternal) {\n            fragment.appendChild(panel.getElement());\n          }\n          this.visiblePanels.push(panel);\n          cached[overlappedClass] = true;\n        } else if (!overlappedClass) {\n          if (!options.renderExternal) {\n            fragment.appendChild(panel.getElement());\n          }\n          this.visiblePanels.push(panel);\n        }\n      });\n      prevVisiblePanels.forEach(panel => {\n        this.addVisiblePanel(panel);\n      });\n    } else {\n      if (!options.renderExternal) {\n        panels.forEach(panel => fragment.appendChild(panel.getElement()));\n      }\n      this.visiblePanels = panels.filter(panel => Boolean(panel));\n    }\n\n    if (!options.renderExternal) {\n      this.cameraElement.appendChild(fragment);\n    }\n  }\n\n  private updateClonePanels() {\n    const panelManager = this.panelManager;\n\n    // Clone panels in circular mode\n    if (this.options.circular && panelManager.getPanelCount() > 0) {\n      this.clonePanels();\n      this.updateClonedPanelPositions();\n    }\n    panelManager.chainAllPanels();\n  }\n\n  private getVisibleIndexOf(panel: Panel): number {\n    return findIndex(this.visiblePanels, visiblePanel => visiblePanel === panel);\n  }\n\n  private build(): void {\n    this.setElements();\n    this.applyCSSValue();\n    this.setMoveType();\n    this.setAxesInstance();\n    this.refreshPanels();\n    this.setDefaultPanel();\n    this.resize();\n    this.moveToDefaultPanel();\n  }\n\n  private setElements(): void {\n    const state = this.state;\n    const options = this.options;\n    const wrapper = this.flicking.getElement();\n    const classPrefix = options.classPrefix;\n\n    const viewportCandidate = wrapper.children[0] as HTMLElement;\n    const hasViewportElement = viewportCandidate && hasClass(viewportCandidate, `${classPrefix}-viewport`);\n\n    const viewportElement = hasViewportElement\n      ? viewportCandidate\n      : document.createElement(\"div\");\n\n    const cameraCandidate = hasViewportElement\n      ? viewportElement.children[0] as HTMLElement\n      : wrapper.children[0] as HTMLElement;\n    const hasCameraElement = cameraCandidate && hasClass(cameraCandidate, `${classPrefix}-camera`);\n\n    const cameraElement = hasCameraElement\n      ? cameraCandidate\n      : document.createElement(\"div\");\n\n    if (!hasCameraElement) {\n      cameraElement.className = `${classPrefix}-camera`;\n\n      const panelElements = hasViewportElement\n        ? viewportElement.children\n        : wrapper.children;\n\n      // Make all panels to be a child of camera element\n      // wrapper <- viewport <- camera <- panels[1...n]\n      toArray(panelElements).forEach(child => {\n        cameraElement.appendChild(child);\n      });\n    } else {\n      state.originalCameraStyle = {\n        className: cameraElement.getAttribute(\"class\"),\n        style: cameraElement.getAttribute(\"style\"),\n      };\n    }\n\n    if (!hasViewportElement) {\n      viewportElement.className = `${classPrefix}-viewport`;\n\n      // Add viewport element to wrapper\n      wrapper.appendChild(viewportElement);\n    } else {\n      state.originalViewportStyle = {\n        className: viewportElement.getAttribute(\"class\"),\n        style: viewportElement.getAttribute(\"style\"),\n      };\n    }\n\n    if (!hasCameraElement || !hasViewportElement) {\n      viewportElement.appendChild(cameraElement);\n    }\n\n    this.viewportElement = viewportElement;\n    this.cameraElement = cameraElement;\n    state.isViewportGiven = hasViewportElement;\n    state.isCameraGiven = hasCameraElement;\n  }\n\n  private applyCSSValue(): void {\n    const options = this.options;\n    const viewportElement = this.viewportElement;\n    const cameraElement = this.cameraElement;\n    const viewportStyle = this.viewportElement.style;\n\n    // Set default css values for each element\n    applyCSS(viewportElement, DEFAULT_VIEWPORT_CSS);\n    applyCSS(cameraElement, DEFAULT_CAMERA_CSS);\n\n    viewportElement.style.zIndex = `${options.zIndex}`;\n    if (options.horizontal) {\n      viewportStyle.minHeight = \"100%\";\n      viewportStyle.width = \"100%\";\n    } else {\n      viewportStyle.minWidth = \"100%\";\n      viewportStyle.height = \"100%\";\n    }\n    if (options.overflow) {\n      viewportStyle.overflow = \"visible\";\n    }\n\n    this.panelManager = new PanelManager(this.cameraElement, options);\n  }\n\n  private setMoveType(): void {\n    const moveType = this.options.moveType as MoveTypeObjectOption;\n\n    switch (moveType.type) {\n      case MOVE_TYPE.SNAP:\n        this.moveType = new Snap(moveType.count);\n        break;\n      case MOVE_TYPE.FREE_SCROLL:\n        this.moveType = new FreeScroll();\n        break;\n      default:\n        throw new Error(\"moveType is not correct!\");\n    }\n  }\n\n  private setAxesInstance(): void {\n    const state = this.state;\n    const options = this.options;\n\n    const scrollArea = state.scrollArea;\n    const horizontal = options.horizontal;\n\n    this.axes = new Axes({\n      flick: {\n        range: [scrollArea.prev, scrollArea.next],\n        circular: options.circular,\n        bounce: [0, 0], // will be updated in resize()\n      },\n    }, {\n      easing: options.panelEffect,\n      deceleration: options.deceleration,\n      interruptable: true,\n    });\n\n    this.panInput = new PanInput(this.viewportElement, {\n      inputType: options.inputType,\n      thresholdAngle: options.thresholdAngle,\n      scale: options.horizontal ? [-1, 0] : [0, -1],\n    });\n\n    this.axes.connect(horizontal ? [\"flick\", \"\"] : [\"\", \"flick\"], this.panInput);\n  }\n\n  private refreshPanels(): void {\n    const panelManager = this.panelManager;\n    // Panel elements were attached to camera element by Flicking class\n    const panelElements = this.cameraElement.children;\n\n    // Initialize panels\n    const panels = toArray(panelElements).map(\n      (el: HTMLElement, idx: number) => new Panel(el, idx, this),\n    );\n\n    panelManager.replacePanels(panels, []);\n    this.visiblePanels = panels.filter(panel => Boolean(panel));\n  }\n\n  private setDefaultPanel(): void {\n    const options = this.options;\n    const panelManager = this.panelManager;\n    const indexRange = this.panelManager.getRange();\n    const index = clamp(options.defaultIndex, indexRange.min, indexRange.max);\n\n    this.currentPanel = panelManager.get(index);\n  }\n\n  private clonePanels() {\n    const state = this.state;\n    const options = this.options;\n    const panelManager = this.panelManager;\n\n    const gap = options.gap;\n    const viewportSize = state.size;\n    const firstPanel = panelManager.firstPanel();\n    const lastPanel = panelManager.lastPanel()!;\n\n    // There're no panels exist\n    if (!firstPanel) {\n      return;\n    }\n\n    // For each panels, clone itself while last panel's position + size is below viewport size\n    const panels = panelManager.originalPanels();\n    const reversedPanels = panels.concat().reverse();\n\n    const sumOriginalPanelSize = lastPanel.getPosition() + lastPanel.getSize() - firstPanel.getPosition() + gap;\n    const relativeAnchorPosition = firstPanel.getRelativeAnchorPosition();\n    const relativeHangerPosition = this.getRelativeHangerPosition();\n\n    const areaPrev = (relativeHangerPosition - relativeAnchorPosition) % sumOriginalPanelSize;\n    let sizeSum = 0;\n    let panelAtLeftBoundary!: Panel;\n    for (const panel of reversedPanels) {\n      if (!panel) {\n        continue;\n      }\n      sizeSum += panel.getSize() + gap;\n      if (sizeSum >= areaPrev) {\n        panelAtLeftBoundary = panel;\n        break;\n      }\n    }\n\n    const areaNext = (viewportSize - relativeHangerPosition + relativeAnchorPosition) % sumOriginalPanelSize;\n    sizeSum = 0;\n    let panelAtRightBoundary!: Panel;\n    for (const panel of panels) {\n      if (!panel) {\n        continue;\n      }\n      sizeSum += panel.getSize() + gap;\n      if (sizeSum >= areaNext) {\n        panelAtRightBoundary = panel;\n        break;\n      }\n    }\n\n    // Need one more set of clones on prev area of original panel 0\n    const needCloneOnPrev = panelAtLeftBoundary.getIndex() !== 0\n      && panelAtLeftBoundary.getIndex() <= panelAtRightBoundary.getIndex();\n\n    // Visible count of panel 0 on first screen\n    const panel0OnFirstscreen = Math.ceil((relativeHangerPosition + firstPanel.getSize() - relativeAnchorPosition) / sumOriginalPanelSize)\n      + Math.ceil((viewportSize - relativeHangerPosition + relativeAnchorPosition) / sumOriginalPanelSize)\n      - 1; // duplication\n\n    const cloneCount = panel0OnFirstscreen\n      + (needCloneOnPrev ? 1 : 0);\n    const prevCloneCount = panelManager.getCloneCount();\n\n    panelManager.setCloneCount(cloneCount);\n    if (options.renderExternal) {\n      return;\n    }\n\n    if (cloneCount > prevCloneCount) {\n      // should clone more\n      for (let cloneIndex = prevCloneCount; cloneIndex < cloneCount; cloneIndex++) {\n        const clones = panels.map(origPanel => origPanel.clone(cloneIndex));\n        const fragment = document.createDocumentFragment();\n        clones.forEach(panel => fragment.appendChild(panel.getElement()));\n\n        this.cameraElement.appendChild(fragment);\n        this.visiblePanels.push(...clones.filter(clone => Boolean(clone)));\n        panelManager.insertClones(cloneIndex, 0, clones);\n      }\n    } else if (cloneCount < prevCloneCount) {\n      // should remove some\n      panelManager.removeClonesAfter(cloneCount);\n    }\n  }\n\n  private moveToDefaultPanel(): void {\n    const state = this.state;\n    const panelManager = this.panelManager;\n    const options = this.options;\n    const indexRange = this.panelManager.getRange();\n\n    const defaultIndex = clamp(options.defaultIndex, indexRange.min, indexRange.max);\n    const defaultPanel = panelManager.get(defaultIndex);\n\n    let defaultPosition = 0;\n    if (defaultPanel) {\n      defaultPosition = defaultPanel.getAnchorPosition() - state.relativeHangerPosition;\n      defaultPosition = this.canSetBoundMode()\n        ? clamp(defaultPosition, state.scrollArea.prev, state.scrollArea.next)\n        : defaultPosition;\n    }\n\n    this.moveCamera(defaultPosition);\n    this.axes.setTo({ flick: defaultPosition }, 0);\n  }\n\n  private updateSize(): void {\n    const state = this.state;\n    const options = this.options;\n    const panels = this.panelManager.originalPanels()\n      .filter(panel => Boolean(panel));\n    const bbox = this.updateBbox();\n\n    const prevSize = state.size;\n    // Update size & hanger position\n    state.size = options.horizontal\n      ? bbox.width\n      : bbox.height;\n\n    if (prevSize !== state.size) {\n      state.relativeHangerPosition = parseArithmeticExpression(options.hanger, state.size);\n      state.infiniteThreshold = parseArithmeticExpression(options.infiniteThreshold, state.size);\n    }\n\n    if (panels.length <= 0) {\n      return;\n    }\n\n    this.resizePanels(panels);\n  }\n\n  private updateOriginalPanelPositions(): void {\n    const gap = this.options.gap;\n    const panelManager = this.panelManager;\n\n    const firstPanel = panelManager.firstPanel();\n    const panels = panelManager.originalPanels();\n\n    if (!firstPanel) {\n      return;\n    }\n\n    const currentPanel = this.currentPanel!;\n    const nearestPanel = this.nearestPanel;\n    const currentState = this.stateMachine.getState();\n    const scrollArea = this.state.scrollArea;\n\n    // Update panel position && fit to wrapper\n    let nextPanelPos = firstPanel.getPosition();\n    let maintainingPanel: Panel = firstPanel;\n    if (nearestPanel) {\n      // We should maintain nearestPanel's position\n      const looped = !isBetween(currentState.lastPosition + currentState.delta, scrollArea.prev, scrollArea.next);\n\n      maintainingPanel = looped\n        ? currentPanel\n        : nearestPanel;\n    } else if (firstPanel.getIndex() > 0) {\n      maintainingPanel = currentPanel;\n    }\n\n    const panelsBeforeMaintainPanel = panels.slice(0, maintainingPanel.getIndex() + (maintainingPanel.getCloneIndex() + 1) * panels.length);\n    const accumulatedSize = panelsBeforeMaintainPanel.reduce((total, panel) => {\n      return total + panel.getSize() + gap;\n    }, 0);\n\n    nextPanelPos = maintainingPanel.getPosition() - accumulatedSize;\n\n    panels.forEach(panel => {\n      const newPosition = nextPanelPos;\n      const panelSize = panel.getSize();\n\n      panel.setPosition(newPosition);\n      nextPanelPos += panelSize + gap;\n    });\n\n    if (!this.options.renderOnlyVisible) {\n      panels.forEach(panel => panel.setPositionCSS());\n    }\n  }\n\n  private updateClonedPanelPositions(): void {\n    const state = this.state;\n    const options = this.options;\n    const panelManager = this.panelManager;\n    const clonedPanels = panelManager.clonedPanels()\n      .reduce((allClones, clones) => [...allClones, ...clones], [])\n      .filter(panel => Boolean(panel));\n\n    const scrollArea = state.scrollArea;\n\n    const firstPanel = panelManager.firstPanel();\n    const lastPanel = panelManager.lastPanel()!;\n\n    if (!firstPanel) {\n      return;\n    }\n\n    const sumOriginalPanelSize = lastPanel.getPosition() + lastPanel.getSize() - firstPanel.getPosition() + options.gap;\n\n    // Locate all cloned panels linearly first\n    for (const panel of clonedPanels) {\n      const origPanel = panel.getOriginalPanel();\n      const cloneIndex = panel.getCloneIndex();\n      const cloneBasePos = sumOriginalPanelSize * (cloneIndex + 1);\n      const clonedPanelPos = cloneBasePos + origPanel.getPosition();\n\n      panel.setPosition(clonedPanelPos);\n    }\n\n    let lastReplacePosition = firstPanel.getPosition();\n    // reverse() pollutes original array, so copy it with concat()\n    for (const panel of clonedPanels.concat().reverse()) {\n      const panelSize = panel.getSize();\n      const replacePosition = lastReplacePosition - panelSize - options.gap;\n\n      if (replacePosition + panelSize <= scrollArea.prev) {\n        // Replace is not meaningful, as it won't be seen in current scroll area\n        break;\n      }\n\n      panel.setPosition(replacePosition);\n      lastReplacePosition = replacePosition;\n    }\n\n    if (!this.options.renderOnlyVisible) {\n      clonedPanels.forEach(panel => {\n        panel.setPositionCSS();\n      });\n    }\n  }\n\n  private updateScrollArea(): void {\n    const state = this.state;\n    const panelManager = this.panelManager;\n    const options = this.options;\n    const axes = this.axes;\n\n    // Set viewport scrollable area\n    const firstPanel = panelManager.firstPanel();\n    const lastPanel = panelManager.lastPanel() as Panel;\n    const relativeHangerPosition = state.relativeHangerPosition;\n\n    if (!firstPanel) {\n      state.scrollArea = {\n        prev: 0,\n        next: 0,\n      };\n    } else if (this.canSetBoundMode()) {\n      state.scrollArea = {\n        prev: firstPanel.getPosition(),\n        next: lastPanel.getPosition() + lastPanel.getSize() - state.size,\n      };\n    } else if (options.circular) {\n      const sumOriginalPanelSize = lastPanel.getPosition() + lastPanel.getSize() - firstPanel.getPosition() + options.gap;\n\n      // Maximum scroll extends to first clone sequence's first panel\n      state.scrollArea = {\n        prev: firstPanel.getAnchorPosition() - relativeHangerPosition,\n        next: sumOriginalPanelSize + firstPanel.getAnchorPosition() - relativeHangerPosition,\n      };\n    } else {\n      state.scrollArea = {\n        prev: firstPanel.getAnchorPosition() - relativeHangerPosition,\n        next: lastPanel.getAnchorPosition() - relativeHangerPosition,\n      };\n    }\n\n    const viewportSize = state.size;\n    const bounce = options.bounce;\n\n    let parsedBounce: number[];\n    if (isArray(bounce)) {\n      parsedBounce = (bounce as string[]).map(val => parseArithmeticExpression(val, viewportSize, DEFAULT_OPTIONS.bounce as number));\n    } else {\n      const parsedVal = parseArithmeticExpression(bounce as number | string, viewportSize, DEFAULT_OPTIONS.bounce as number);\n      parsedBounce = [parsedVal, parsedVal];\n    }\n\n    // Update axes range and bounce\n    const flick = axes.axis.flick;\n    flick.range = [state.scrollArea.prev, state.scrollArea.next];\n    flick.bounce = parsedBounce;\n  }\n\n  // Update camera position after resizing\n  private updateCameraPosition(): void {\n    const state = this.state;\n    const currentPanel = this.getCurrentPanel();\n    const currentState = this.stateMachine.getState();\n    const isFreeScroll = this.moveType.is(MOVE_TYPE.FREE_SCROLL);\n    const relativeHangerPosition = this.getRelativeHangerPosition();\n    const halfGap = this.options.gap / 2;\n\n    if (currentState.holding || currentState.playing) {\n      this.updateVisiblePanels();\n      return;\n    }\n\n    let newPosition: number;\n    if (isFreeScroll) {\n      const nearestPanel = this.getNearestPanel();\n\n      newPosition = nearestPanel\n        ? nearestPanel.getPosition() - halfGap + (nearestPanel.getSize() + 2 * halfGap) * state.panelMaintainRatio - relativeHangerPosition\n        : this.getCameraPosition();\n    } else {\n      newPosition = currentPanel\n        ? currentPanel.getAnchorPosition() - relativeHangerPosition\n        : this.getCameraPosition();\n    }\n\n    if (this.canSetBoundMode()) {\n      newPosition = clamp(newPosition, state.scrollArea.prev, state.scrollArea.next);\n    }\n\n    // Pause & resume axes to prevent axes's \"change\" event triggered\n    // This should be done before moveCamera, as moveCamera can trigger needPanel\n    this.updateAxesPosition(newPosition);\n\n    this.moveCamera(newPosition);\n  }\n\n  private checkNeedPanel(axesEvent?: any): void {\n    const state = this.state;\n    const options = this.options;\n    const panelManager = this.panelManager;\n    const currentPanel = this.currentPanel;\n    const nearestPanel = this.nearestPanel;\n    const currentState = this.stateMachine.getState();\n\n    if (!options.infinite) {\n      return;\n    }\n\n    const gap = options.gap;\n    const infiniteThreshold = state.infiniteThreshold;\n    const maxLastIndex = panelManager.getLastIndex();\n\n    if (maxLastIndex < 0) {\n      return;\n    }\n\n    if (!currentPanel || !nearestPanel) {\n      // There're no panels\n      this.triggerNeedPanel({\n        axesEvent,\n        siblingPanel: null,\n        direction: null,\n        indexRange: {\n          min: 0,\n          max: maxLastIndex,\n          length: maxLastIndex + 1,\n        },\n      });\n      return;\n    }\n\n    const originalNearestPosition = nearestPanel.getPosition();\n\n    // Check next direction\n    let checkingPanel: Panel | null = !currentState.holding && !currentState.playing\n      ? currentPanel\n      : nearestPanel;\n\n    while (checkingPanel) {\n      const currentIndex = checkingPanel.getIndex();\n      const nextSibling = checkingPanel.nextSibling;\n      const lastPanel = panelManager.lastPanel()!;\n      const atLastPanel = currentIndex === lastPanel.getIndex();\n      const nextIndex = !atLastPanel && nextSibling\n        ? nextSibling.getIndex()\n        : maxLastIndex + 1;\n      const currentNearestPosition = nearestPanel.getPosition();\n      const panelRight = checkingPanel.getPosition() + checkingPanel.getSize() - (currentNearestPosition - originalNearestPosition);\n      const cameraNext = state.position + state.size;\n\n      // There're empty panels between\n      const emptyPanelExistsBetween = (nextIndex - currentIndex > 1);\n      // Expected prev panel's left position is smaller than camera position\n      const overThreshold = panelRight + gap - infiniteThreshold <= cameraNext;\n\n      if (emptyPanelExistsBetween && overThreshold) {\n        this.triggerNeedPanel({\n          axesEvent,\n          siblingPanel: checkingPanel,\n          direction: DIRECTION.NEXT,\n          indexRange: {\n            min: currentIndex + 1,\n            max: nextIndex - 1,\n            length: nextIndex - currentIndex - 1,\n          },\n        });\n      }\n\n      // Trigger needPanel in circular & at max panel index\n      if (options.circular && currentIndex === maxLastIndex && overThreshold) {\n        const firstPanel = panelManager.firstPanel();\n        const firstIndex = firstPanel\n          ? firstPanel.getIndex()\n          : -1;\n\n        if (firstIndex > 0) {\n          this.triggerNeedPanel({\n            axesEvent,\n            siblingPanel: checkingPanel,\n            direction: DIRECTION.NEXT,\n            indexRange: {\n              min: 0,\n              max: firstIndex - 1,\n              length: firstIndex,\n            },\n          });\n        }\n      }\n\n      // Check whether panels are changed\n      const lastPanelAfterNeed = panelManager.lastPanel()!;\n      const atLastPanelAfterNeed = lastPanelAfterNeed && currentIndex === lastPanelAfterNeed.getIndex();\n\n      if (atLastPanelAfterNeed || !overThreshold) {\n        break;\n      }\n\n      checkingPanel = checkingPanel.nextSibling;\n    }\n\n    // Check prev direction\n    checkingPanel = nearestPanel;\n    while (checkingPanel) {\n      const cameraPrev = state.position;\n      const checkingIndex = checkingPanel.getIndex();\n      const prevSibling = checkingPanel.prevSibling;\n      const firstPanel = panelManager.firstPanel()!;\n      const atFirstPanel = checkingIndex === firstPanel.getIndex();\n      const prevIndex = !atFirstPanel && prevSibling\n        ? prevSibling.getIndex()\n        : -1;\n      const currentNearestPosition = nearestPanel.getPosition();\n      const panelLeft = checkingPanel.getPosition() - (currentNearestPosition - originalNearestPosition);\n\n      // There're empty panels between\n      const emptyPanelExistsBetween = checkingIndex - prevIndex > 1;\n      // Expected prev panel's right position is smaller than camera position\n      const overThreshold = panelLeft - gap + infiniteThreshold >= cameraPrev;\n      if (emptyPanelExistsBetween && overThreshold) {\n        this.triggerNeedPanel({\n          axesEvent,\n          siblingPanel: checkingPanel,\n          direction: DIRECTION.PREV,\n          indexRange: {\n            min: prevIndex + 1,\n            max: checkingIndex - 1,\n            length: checkingIndex - prevIndex - 1,\n          },\n        });\n      }\n\n      // Trigger needPanel in circular & at panel 0\n      if (options.circular && checkingIndex === 0 && overThreshold) {\n        const lastPanel = panelManager.lastPanel();\n\n        if (lastPanel && lastPanel.getIndex() < maxLastIndex) {\n          const lastIndex = lastPanel.getIndex();\n\n          this.triggerNeedPanel({\n            axesEvent,\n            siblingPanel: checkingPanel,\n            direction: DIRECTION.PREV,\n            indexRange: {\n              min: lastIndex + 1,\n              max: maxLastIndex,\n              length: maxLastIndex - lastIndex,\n            },\n          });\n        }\n      }\n\n      // Check whether panels were changed\n      const firstPanelAfterNeed = panelManager.firstPanel();\n      const atFirstPanelAfterNeed = firstPanelAfterNeed && checkingIndex === firstPanelAfterNeed.getIndex();\n\n      // Looped in circular mode\n      if (atFirstPanelAfterNeed || !overThreshold) {\n        break;\n      }\n\n      checkingPanel = checkingPanel.prevSibling;\n    }\n  }\n\n  private triggerNeedPanel(params: {\n    axesEvent: any;\n    siblingPanel: Panel | null,\n    direction: FlickingEvent[\"direction\"];\n    indexRange: NeedPanelEvent[\"range\"];\n  }): void {\n    const { axesEvent, siblingPanel, direction, indexRange } = params;\n    const options = this.options;\n    const checkedIndexes = this.state.checkedIndexes;\n    const alreadyTriggered = checkedIndexes.some(([min, max]) => min === indexRange.min || max === indexRange.max);\n    const hasHandler = this.flicking.hasOn(EVENTS.NEED_PANEL);\n\n    if (alreadyTriggered || !hasHandler) {\n      return;\n    }\n\n    // Should done before triggering event, as we can directly add panels by event callback\n    checkedIndexes.push([indexRange.min, indexRange.max]);\n\n    const index = siblingPanel\n      ? siblingPanel.getIndex()\n      : 0;\n    const isTrusted = axesEvent\n      ? axesEvent.isTrusted\n      : false;\n\n    this.triggerEvent(\n      EVENTS.NEED_PANEL,\n      axesEvent,\n      isTrusted,\n      {\n        index,\n        panel: siblingPanel,\n        direction,\n        range: indexRange,\n        fill: (element: ElementLike | ElementLike[]) => {\n          const panelManager = this.panelManager;\n          if (!siblingPanel) {\n            return this.insert(panelManager.getRange().max + 1, element);\n          }\n\n          const parsedElements = parseElement(element);\n          // Slice elements to fit size equal to empty spaces\n          const elements = direction === DIRECTION.NEXT\n            ? parsedElements.slice(0, indexRange.length)\n            : parsedElements.slice(-indexRange.length);\n\n          if (direction === DIRECTION.NEXT) {\n            if (options.circular && index === panelManager.getLastIndex()) {\n              // needPanel event is triggered on last index, insert at index 0\n              return this.insert(0, elements);\n            } else {\n              return siblingPanel.insertAfter(elements);\n            }\n          } else if (direction === DIRECTION.PREV) {\n            if (options.circular && index === 0) {\n              // needPanel event is triggered on first index(0), insert at the last index\n              return this.insert(indexRange.max - elements.length + 1, elements);\n            } else {\n              return siblingPanel.insertBefore(elements);\n            }\n          } else {\n            // direction is null when there're no panels exist\n            return this.insert(0, elements);\n          }\n        },\n      } as Partial<NeedPanelEvent>,\n    );\n  }\n\n  private updateVisiblePanels() {\n    const state = this.state;\n    const options = this.options;\n    const cameraElement = this.cameraElement;\n    const visibleIndex = state.visibleIndex;\n    const { renderExternal, renderOnlyVisible } = options;\n    if (!renderOnlyVisible) {\n      return;\n    }\n\n    if (!this.nearestPanel) {\n      this.resetVisibleIndex();\n      while (cameraElement.firstChild) {\n        cameraElement.removeChild(cameraElement.firstChild);\n      }\n      return;\n    }\n\n    const newVisibleIndex = this.calcNewVisiblePanelIndex();\n\n    if (newVisibleIndex.min !== visibleIndex.min || newVisibleIndex.max !== visibleIndex.max) {\n      state.visibleIndex = newVisibleIndex;\n      if (isNaN(newVisibleIndex.min) || isNaN(newVisibleIndex.max)) {\n        return;\n      }\n\n      const prevVisiblePanels = this.visiblePanels;\n      const newVisiblePanels = this.calcVisiblePanels();\n\n      const { addedPanels, removedPanels } = this.checkVisiblePanelChange(prevVisiblePanels, newVisiblePanels);\n\n      if (newVisiblePanels.length > 0) {\n        const firstVisiblePanelPos = newVisiblePanels[0].getPosition();\n        state.positionOffset = firstVisiblePanelPos;\n      }\n\n      newVisiblePanels.forEach(panel => {\n        panel.setPositionCSS(state.positionOffset);\n      });\n\n      if (!renderExternal) {\n        removedPanels.forEach(panel => {\n          const panelElement = panel.getElement();\n          panelElement.parentNode && cameraElement.removeChild(panelElement);\n        });\n\n        const fragment = document.createDocumentFragment();\n        addedPanels.forEach(panel => {\n          fragment.appendChild(panel.getElement());\n        });\n\n        cameraElement.appendChild(fragment);\n      }\n      this.visiblePanels = newVisiblePanels;\n\n      this.flicking.trigger(EVENTS.VISIBLE_CHANGE, {\n        type: EVENTS.VISIBLE_CHANGE,\n        range: {\n          min: newVisibleIndex.min,\n          max: newVisibleIndex.max,\n        },\n      });\n    } else {\n      this.visiblePanels.forEach(panel => panel.setPositionCSS(state.positionOffset));\n    }\n  }\n\n  private calcNewVisiblePanelIndex() {\n    const cameraPos = this.getCameraPosition();\n    const viewportSize = this.getSize();\n    const basePanel = this.nearestPanel!;\n    const panelManager = this.panelManager;\n    const allPanelCount = panelManager.getRange().max + 1;\n    const cloneCount = panelManager.getCloneCount();\n\n    const checkLastPanel = (\n      panel: Panel,\n      getNextPanel: (panel: Panel) => Panel | null,\n      isOutOfViewport: (panel: Panel) => boolean,\n    ): Panel => {\n      let lastPanel = panel;\n      while (true) {\n        const nextPanel = getNextPanel(lastPanel);\n        if (!nextPanel || isOutOfViewport(nextPanel)) {\n          break;\n        }\n        lastPanel = nextPanel;\n      }\n      return lastPanel;\n    };\n\n    const lastPanelOfNextDir = checkLastPanel(basePanel, panel => {\n      const nextPanel = panel.nextSibling;\n\n      if (nextPanel && nextPanel.getPosition() >= panel.getPosition()) {\n        return nextPanel;\n      } else {\n        return null;\n      }\n    }, panel => panel.getPosition() >= cameraPos + viewportSize);\n\n    const lastPanelOfPrevDir = checkLastPanel(basePanel, panel => {\n      const prevPanel = panel.prevSibling;\n\n      if (prevPanel && prevPanel.getPosition() <= panel.getPosition()) {\n        return prevPanel;\n      } else {\n        return null;\n      }\n    }, panel => panel.getPosition() + panel.getSize() <= cameraPos);\n\n    const minPanelCloneIndex = lastPanelOfPrevDir.getCloneIndex();\n    const maxPanelCloneOffset = allPanelCount * (lastPanelOfNextDir.getCloneIndex() + 1);\n    const minPanelCloneOffset = minPanelCloneIndex > -1\n      ? allPanelCount * (cloneCount - minPanelCloneIndex)\n      : 0;\n\n    const newVisibleIndex = {\n      // Relative index including clone, can be negative number\n      min: basePanel.getCloneIndex() > -1\n        ? lastPanelOfPrevDir.getIndex() + minPanelCloneOffset\n        : lastPanelOfPrevDir.getIndex() - minPanelCloneOffset,\n      // Relative index including clone\n      max: lastPanelOfNextDir.getIndex() + maxPanelCloneOffset,\n    };\n\n    // Stopped on first cloned first panel\n    if (lastPanelOfPrevDir.getIndex() === 0 && lastPanelOfPrevDir.getCloneIndex() === 0) {\n      newVisibleIndex.min = allPanelCount;\n    }\n\n    return newVisibleIndex;\n  }\n\n  private checkVisiblePanelChange(prevVisiblePanels: Panel[], newVisiblePanels: Panel[]) {\n    const prevRefCount = prevVisiblePanels.map(() => 0);\n    const newRefCount = newVisiblePanels.map(() => 0);\n\n    prevVisiblePanels.forEach((prevPanel, prevIndex) => {\n      newVisiblePanels.forEach((newPanel, newIndex) => {\n        if (prevPanel === newPanel) {\n          prevRefCount[prevIndex]++;\n          newRefCount[newIndex]++;\n        }\n      });\n    });\n\n    const removedPanels = prevRefCount.reduce((removed: Panel[], count, index) => {\n      return count === 0\n        ? [...removed, prevVisiblePanels[index]]\n        : removed;\n    }, []);\n    const addedPanels = newRefCount.reduce((added: Panel[], count, index) => {\n      return count === 0\n        ? [...added, newVisiblePanels[index]]\n        : added;\n    }, []);\n\n    return { removedPanels, addedPanels };\n  }\n\n  private resizePanels(panels: Panel[]): void {\n    const options = this.options;\n    const panelBboxes = this.panelBboxes;\n\n    if (options.isEqualSize === true) {\n      if (!panelBboxes.default) {\n        const defaultPanel = panels[0];\n        panelBboxes.default = defaultPanel.getBbox();\n      }\n\n      const defaultBbox = panelBboxes.default;\n\n      panels.forEach(panel => {\n        panel.resize(defaultBbox);\n      });\n      return;\n    } else if (options.isEqualSize) {\n      const equalSizeClasses = options.isEqualSize;\n\n      panels.forEach(panel => {\n        const overlappedClass = panel.getOverlappedClass(equalSizeClasses);\n        if (overlappedClass) {\n          panel.resize(panelBboxes[overlappedClass]);\n          panelBboxes[overlappedClass] = panel.getBbox();\n        } else {\n          panel.resize();\n        }\n      });\n      return;\n    }\n    panels.forEach(panel => {\n      panel.resize();\n    });\n  }\n}\n","import { isBrowser } from \"../consts\";\n\nconst tid = \"UA-70842526-24\";\nconst cid = (Math.random() * Math.pow(10, 20)) / Math.pow(10, 10);\n\nexport function sendEvent(category: string, action: string, label: any) {\n  if (!isBrowser) {\n    return;\n  }\n\n  try {\n    const innerWidth = window.innerWidth;\n    const innerHeight = window.innerHeight;\n    const screen = window.screen || { width: innerWidth, height: innerHeight };\n    const collectInfos = [\n      \"v=1\",\n      \"t=event\",\n      `dl=${location.href}`,\n      `ul=${(navigator.language || \"en-us\").toLowerCase()}`,\n      `de=${document.charset || document.inputEncoding || document.characterSet || \"utf-8\"}`,\n      `dr=${document.referrer}`,\n      `dt=${document.title}`,\n      `sr=${screen.width}x${screen.height}`,\n      `vp=${innerWidth}x${innerHeight}`,\n      `ec=${category}`,\n      `ea=${action}`,\n      `el=${JSON.stringify(label)}`,\n      `cid=${cid}`,\n      `tid=${tid}`,\n      \"cd1=#__VERSION__#\",\n      `z=${Math.floor(Math.random() * 10000000)}`,\n    ];\n    const req = new XMLHttpRequest();\n    req.open(\"GET\", `https://www.google-analytics.com/collect?${collectInfos.join(\"&\")}`);\n    req.send();\n  } catch (e) {}\n}\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport Component from \"@egjs/component\";\nimport Viewport from \"./components/Viewport\";\nimport Panel from \"./components/Panel\";\n\nimport { merge, getProgress, parseElement, isString, counter, findIndex } from \"./utils\";\nimport { DEFAULT_OPTIONS, EVENTS, DIRECTION, AXES_EVENTS, STATE_TYPE, DEFAULT_MOVE_TYPE_OPTIONS } from \"./consts\";\nimport {\n  FlickingOptions,\n  FlickingEvent,\n  Direction,\n  EventType,\n  FlickingPanel,\n  TriggerCallback,\n  FlickingContext,\n  FlickingStatus,\n  Plugin,\n  ElementLike,\n  DestroyOption,\n  BeforeSyncResult,\n  SyncResult,\n} from \"./types\";\nimport { sendEvent } from \"./ga/ga\";\nimport { DiffResult } from \"@egjs/list-differ\";\n\n/**\n * @memberof eg\n * @extends eg.Component\n * @support {\"ie\": \"10+\", \"ch\" : \"latest\", \"ff\" : \"latest\",  \"sf\" : \"latest\" , \"edge\" : \"latest\", \"ios\" : \"7+\", \"an\" : \"4.X+\"}\n * @requires {@link https://github.com/naver/egjs-component|eg.Component}\n * @requires {@link https://github.com/naver/egjs-axes|eg.Axes}\n * @see Easing Functions Cheat Sheet {@link http://easings.net/} <ko>이징 함수 Cheat Sheet {@link http://easings.net/}</ko>\n */\nclass Flicking extends Component {\n  /**\n   * Version info string\n   * @ko 버전정보 문자열\n   * @example\n   * eg.Flicking.VERSION;  // ex) 3.0.0\n   * @memberof eg.Flicking\n   */\n  public static VERSION: string = \"#__VERSION__#\";\n  /**\n   * Direction constant - \"PREV\" or \"NEXT\"\n   * @ko 방향 상수 - \"PREV\" 또는 \"NEXT\"\n   * @type {object}\n   * @property {\"PREV\"} PREV - Prev direction from current hanger position.<br/>It's `left(←️)` direction when `horizontal: true`.<br/>Or, `up(↑️)` direction when `horizontal: false`.<ko>현재 행어를 기준으로 이전 방향.<br/>`horizontal: true`일 경우 `왼쪽(←️)` 방향.<br/>`horizontal: false`일 경우 `위쪽(↑️)`방향이다.</ko>\n   * @property {\"NEXT\"} NEXT - Next direction from current hanger position.<br/>It's `right(→)` direction when `horizontal: true`.<br/>Or, `down(↓️)` direction when `horizontal: false`.<ko>현재 행어를 기준으로 다음 방향.<br/>`horizontal: true`일 경우 `오른쪽(→)` 방향.<br/>`horizontal: false`일 경우 `아래쪽(↓️)`방향이다.</ko>\n   * @example\n   * eg.Flicking.DIRECTION.PREV; // \"PREV\"\n   * eg.Flicking.DIRECTION.NEXT; // \"NEXT\"\n   */\n  public static DIRECTION: Direction = DIRECTION;\n\n  /**\n   * Event type object with event name strings.\n   * @ko 이벤트 이름 문자열들을 담은 객체\n   * @type {object}\n   * @property {\"holdStart\"} HOLD_START - holdStart event<ko>holdStart 이벤트</ko>\n   * @property {\"holdEnd\"} HOLD_END - holdEnd event<ko>holdEnd 이벤트</ko>\n   * @property {\"moveStart\"} MOVE_START - moveStart event<ko>moveStart 이벤트</ko>\n   * @property {\"move\"} MOVE - move event<ko>move 이벤트</ko>\n   * @property {\"moveEnd\"} MOVE_END - moveEnd event<ko>moveEnd 이벤트</ko>\n   * @property {\"change\"} CHANGE - change event<ko>change 이벤트</ko>\n   * @property {\"restore\"} RESTORE - restore event<ko>restore 이벤트</ko>\n   * @property {\"select\"} SELECT - select event<ko>select 이벤트</ko>\n   * @property {\"needPanel\"} NEED_PANEL - needPanel event<ko>needPanel 이벤트</ko>\n   * @example\n   * eg.Flicking.EVENTS.MOVE_START; // \"MOVE_START\"\n   */\n  public static EVENTS: EventType = EVENTS;\n\n  public options: FlickingOptions;\n\n  private wrapper: HTMLElement;\n  private viewport: Viewport;\n  private eventContext: FlickingContext;\n  private isPanelChangedAtBeforeSync: boolean = false;\n\n  /**\n   * @param element A base element for the eg.Flicking module. When specifying a value as a `string` type, you must specify a css selector string to select the element.<ko>eg.Flicking 모듈을 사용할 기준 요소. `string`타입으로 값 지정시 요소를 선택하기 위한 css 선택자 문자열을 지정해야 한다.</ko>\n   * @param options An option object of the eg.Flicking module<ko>eg.Flicking 모듈의 옵션 객체</ko>\n   * @param {string} [options.classPrefix=\"eg-flick\"] A prefix of class names will be added for the panels, viewport, and camera.<ko>패널들과 뷰포트, 카메라에 추가될 클래스 이름의 접두사.</ko>\n   * @param {number} [options.deceleration=0.0075] Deceleration value for panel movement animation for animation triggered by manual user input. A higher value means a shorter running time.<ko>사용자의 동작으로 가속도가 적용된 패널 이동 애니메이션의 감속도. 값이 높을수록 애니메이션 실행 시간이 짧아진다.</ko>\n   * @param {boolean} [options.horizontal=true] The direction of panel movement. (true: horizontal, false: vertical)<ko>패널 이동 방향. (true: 가로방향, false: 세로방향)</ko>\n   * @param {boolean} [options.circular=false] Enables circular mode, which connects first/last panel for continuous scrolling.<ko>순환 모드를 활성화한다. 순환 모드에서는 양 끝의 패널이 서로 연결되어 끊김없는 스크롤이 가능하다.</ko>\n   * @param {boolean} [options.infinite=false] Enables infinite mode, which can automatically trigger needPanel until reaching the last panel's index reaches the lastIndex.<ko>무한 모드를 활성화한다. 무한 모드에서는 needPanel 이벤트를 자동으로 트리거한다. 해당 동작은 마지막 패널의 인덱스가 lastIndex와 일치할때까지 일어난다.</ko>\n   * @param {number} [options.infiniteThreshold=0] A Threshold from viewport edge before triggering `needPanel` event in infinite mode.<ko>무한 모드에서 `needPanel`이벤트가 발생하기 위한 뷰포트 끝으로부터의 최대 거리.</ko>\n   * @param {number} [options.lastIndex=Infinity] Maximum panel index that Flicking can set. Flicking won't trigger `needPanel` when the event's panel index is greater than it.<br/>Also, if the last panel's index reached a given index, you can't add more panels.<ko>Flicking이 설정 가능한 패널의 최대 인덱스. `needPanel` 이벤트에 지정된 인덱스가 최대 패널의 개수보다 같거나 커야 하는 경우에 이벤트를 트리거하지 않게 한다.<br>또한, 마지막 패널의 인덱스가 주어진 인덱스와 동일할 경우, 새로운 패널을 더 이상 추가할 수 없다.</ko>\n   * @param {number} [options.threshold=40] Movement threshold to change panel(unit: pixel). It should be dragged above the threshold to change the current panel.<ko>패널 변경을 위한 이동 임계값 (단위: 픽셀). 주어진 값 이상으로 스크롤해야만 패널 변경이 가능하다.</ko>\n   * @param {number} [options.duration=100] Duration of the panel movement animation. (unit: ms)<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>\n   * @param {function} [options.panelEffect=x => 1 - Math.pow(1 - x, 3)] An easing function applied to the panel movement animation. Default value is `easeOutCubic`.<ko>패널 이동 애니메이션에 적용할 easing함수. 기본값은 `easeOutCubic`이다.</ko>\n   * @param {number} [options.defaultIndex=0] Index of the panel to set as default when initializing. A zero-based integer.<ko>초기화시 지정할 디폴트 패널의 인덱스로, 0부터 시작하는 정수.</ko>\n   * @param {string[]} [options.inputType=[\"touch,\"mouse\"]] Types of input devices to enable.({@link https://naver.github.io/egjs-axes/release/latest/doc/global.html#PanInputOption Reference})<ko>활성화할 입력 장치 종류. ({@link https://naver.github.io/egjs-axes/release/latest/doc/global.html#PanInputOption 참고})</ko>\n   * @param {number} [options.thresholdAngle=45] The threshold angle value(0 ~ 90).<br>If the input angle from click/touched position is above or below this value in horizontal and vertical mode each, scrolling won't happen.<ko>스크롤 동작을 막기 위한 임계각(0 ~ 90).<br>클릭/터치한 지점으로부터 계산된 사용자 입력의 각도가 horizontal/vertical 모드에서 각각 크거나 작으면, 스크롤 동작이 이루어지지 않는다.</ko>\n   * @param {number|string|number[]|string[]} [options.bounce=[10,10]] The size value of the bounce area. Only can be enabled when `circular=false`.<br>You can set different bounce value for prev/next direction by using array.<br>`number` for px value, and `string` for px, and % value relative to viewport size.(ex - 0, \"10px\", \"20%\")<ko>바운스 영역의 크기값. `circular=false`인 경우에만 사용할 수 있다.<br>배열을 통해 prev/next 방향에 대해 서로 다른 바운스 값을 지정 가능하다.<br>`number`를 통해 px값을, `stirng`을 통해 px 혹은 뷰포트 크기 대비 %값을 사용할 수 있다.(ex - 0, \"10px\", \"20%\")</ko>\n   * @param {boolean} [options.autoResize=false] Whether the `resize` method should be called automatically after a window resize event.<ko>window의 `resize` 이벤트 이후 자동으로 resize()메소드를 호출할지의 여부.</ko>\n   * @param {boolean} [options.adaptive=false] Whether the height(horizontal)/width(vertical) of the viewport element reflects the height/width value of the panel after completing the movement.<ko>목적 패널로 이동한 후 그 패널의 높이(horizontal)/너비(vertical)값을 뷰포트 요소의 높이/너비값에 반영할지 여부.</ko>\n   * @param {number|\"\"} [options.zIndex=2000] z-index value for viewport element.<ko>뷰포트 엘리먼트의 z-index 값.</ko>\n   * @param {boolean} [options.bound=false] Prevent the view from going out of the first/last panel. Only can be enabled when `circular=false`.<ko>뷰가 첫번째와 마지막 패널 밖으로 나가는 것을 막아준다. `circular=false`인 경우에만 사용할 수 있다.</ko>\n   * @param {boolean} [options.overflow=false] Disables CSS property `overflow: hidden` in viewport if `true`.<ko>`true`로 설정시 뷰포트에 `overflow: hidden` 속성을 해제한다.</ko>\n   * @param {string} [options.hanger=\"50%\"] The reference position of the hanger in the viewport, which hangs panel anchors should be stopped at.<br>It should be provided in px or % value of viewport size.<br>You can combinate those values with plus/minus sign.<br>ex) \"50\", \"100px\", \"0%\", \"25% + 100px\"<ko>뷰포트 내부의 행어의 위치. 패널의 앵커들이 뷰포트 내에서 멈추는 지점에 해당한다.<br>px값이나, 뷰포트의 크기 대비 %값을 사용할 수 있고, 이를 + 혹은 - 기호로 연계하여 사용할 수도 있다.<br>예) \"50\", \"100px\", \"0%\", \"25% + 100px\"</ko>\n   * @param {string} [options.anchor=\"50%\"] The reference position of the anchor in panels, which can be hanged by viewport hanger.<br>It should be provided in px or % value of panel size.<br>You can combinate those values with plus/minus sign.<br>ex) \"50\", \"100px\", \"0%\", \"25% + 100px\"<ko>패널 내부의 앵커의 위치. 뷰포트의 행어와 연계하여 패널이 화면 내에서 멈추는 지점을 설정할 수 있다.<br>px값이나, 패널의 크기 대비 %값을 사용할 수 있고, 이를 + 혹은 - 기호로 연계하여 사용할 수도 있다.<br>예) \"50\", \"100px\", \"0%\", \"25% + 100px\"</ko>\n   * @param {number} [options.gap=0] Space value between panels. Should be given in number.(px)<ko>패널간에 부여할 간격의 크기를 나타내는 숫자.(px)</ko>\n   * @param {eg.Flicking.MoveTypeOption} [options.moveType=\"snap\"] Movement style by user input. (ex: snap, freeScroll)<ko>사용자 입력에 의한 이동 방식.(ex: snap, freeScroll)</ko>\n   * @param {boolean} [options.useOffset=false] Whether to use `offsetWidth`/`offsetHeight` instead of `getBoundingClientRect` for panel/viewport size calculation.<br/>You can use this option to calculate the original panel size when CSS transform is applied to viewport or panel.<br/>⚠️ If panel size is not fixed integer value, there can be a 1px gap between panels.<ko>패널과 뷰포트의 크기를 계산할 때 `offsetWidth`/`offsetHeight`를 `getBoundingClientRect` 대신 사용할지 여부.<br/>패널이나 뷰포트에 CSS transform이 설정되어 있을 때 원래 패널 크기를 계산하려면 옵션을 활성화한다.<br/>⚠️ 패널의 크기가 정수로 고정되어있지 않다면 패널 사이에 1px의 공간이 생길 수 있다.</ko>\n   * @param {boolean} [options.renderOnlyVisible] Whether to render visible panels only. This can dramatically increase performance when there're many panels.<ko>보이는 패널만 렌더링할지 여부를 설정한다. 패널이 많을 경우에 퍼포먼스를 크게 향상시킬 수 있다.</ko>\n   * @param {boolean|string[]} [options.isEqualSize] This option indicates whether all panels have the same size(true) of first panel, or it can hold a list of class names that determines panel size.<br/>Enabling this option can increase performance while recalculating panel size.<ko>모든 패널의 크기가 동일한지(true), 혹은 패널 크기를 결정하는 패널 클래스들의 리스트.<br/>이 옵션을 설정하면 패널 크기 재설정시에 성능을 높일 수 있다.</ko>\n   * @param {boolean} [options.isConstantSize] Whether all panels have a constant size that won't be changed after resize. Enabling this option can increase performance while recalculating panel size.<ko>모든 패널의 크기가 불변인지의 여부. 이 옵션을 'true'로 설정하면 패널 크기 재설정시에 성능을 높일 수 있다.</ko>\n   * @param {boolean} [options.renderExternal] Whether to use external rendering. It will delegate DOM manipulation and can synchronize the rendered state by calling `sync()` method. You can use this option to use in frameworks like React, Vue, Angular, which has its states and rendering methods.<ko>외부 렌더링을 사용할 지의 여부. 이 옵션을 사용시 렌더링을 외부에 위임할 수 있고, `sync()`를 호출하여 그 상태를 동기화할 수 있다. 이 옵션을 사용하여, React, Vue, Angular 등 자체적인 상태와 렌더링 방법을 갖는 프레임워크에 대응할 수 있다.</ko>\n   * @param {boolean} [options.collectStatistics=true] Whether to collect statistics on how you are using `Flicking`. These statistical data do not contain any personal information and are used only as a basis for the development of a user-friendly product.<ko>어떻게 `Flicking`을 사용하고 있는지에 대한 통계 수집 여부를 나타낸다. 이 통계자료는 개인정보를 포함하고 있지 않으며 오직 사용자 친화적인 제품으로 발전시키기 위한 근거자료로서 활용한다.</ko>\n   */\n  constructor(\n    element: string | HTMLElement,\n    options: Partial<FlickingOptions> = {},\n  ) {\n    super();\n\n    // Set flicking wrapper user provided\n    let wrapper: HTMLElement | null;\n    if (isString(element)) {\n      wrapper = document.querySelector(element);\n      if (!wrapper) {\n        throw new Error(\"Base element doesn't exist.\");\n      }\n    } else if (element.nodeName && element.nodeType === 1) {\n      wrapper = element;\n    } else {\n      throw new Error(\"Element should be provided in string or HTMLElement.\");\n    }\n\n    this.wrapper = wrapper;\n    // Override default options\n    this.options = merge({}, DEFAULT_OPTIONS, options) as FlickingOptions;\n    // Override moveType option\n    const currentOptions = this.options;\n    const moveType = currentOptions.moveType;\n\n    if (moveType in DEFAULT_MOVE_TYPE_OPTIONS) {\n      currentOptions.moveType = DEFAULT_MOVE_TYPE_OPTIONS[moveType as keyof typeof DEFAULT_MOVE_TYPE_OPTIONS];\n    }\n\n    // Make viewport instance with panel container element\n    this.viewport = new Viewport(this, this.options, this.triggerEvent);\n    this.listenInput();\n    this.listenResize();\n\n    if (this.options.collectStatistics) {\n      sendEvent(\n        \"usage\",\n        \"options\",\n        options,\n      );\n    }\n  }\n\n  /**\n   * Move to the previous panel if it exists.\n   * @ko 이전 패널이 존재시 해당 패널로 이동한다.\n   * @param [duration=options.duration] Duration of the panel movement animation.(unit: ms)<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public prev(duration?: number): this {\n    const currentPanel = this.getCurrentPanel();\n    const currentState = this.viewport.stateMachine.getState();\n\n    if (currentPanel && currentState.type === STATE_TYPE.IDLE) {\n      const prevPanel = currentPanel.prev();\n      if (prevPanel) {\n        prevPanel.focus(duration);\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Move to the next panel if it exists.\n   * @ko 다음 패널이 존재시 해당 패널로 이동한다.\n   * @param [duration=options.duration] Duration of the panel movement animation(unit: ms).<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public next(duration?: number): this {\n    const currentPanel = this.getCurrentPanel();\n    const currentState = this.viewport.stateMachine.getState();\n\n    if (currentPanel && currentState.type === STATE_TYPE.IDLE) {\n      const nextPanel = currentPanel.next();\n      if (nextPanel) {\n        nextPanel.focus(duration);\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Move to the panel of given index.\n   * @ko 주어진 인덱스에 해당하는 패널로 이동한다.\n   * @param index The index number of the panel to move.<ko>이동할 패널의 인덱스 번호.</ko>\n   * @param duration [duration=options.duration] Duration of the panel movement.(unit: ms)<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public moveTo(index: number, duration?: number): this {\n    const viewport = this.viewport;\n    const panel = viewport.panelManager.get(index);\n    const state = viewport.stateMachine.getState();\n\n    if (!panel || state.type !== STATE_TYPE.IDLE) {\n      return this;\n    }\n\n    const anchorPosition = panel.getAnchorPosition();\n    const hangerPosition = viewport.getHangerPosition();\n\n    let targetPanel = panel;\n    if (this.options.circular) {\n      const scrollAreaSize = viewport.getScrollAreaSize();\n      // Check all three possible locations, find the nearest position among them.\n      const possiblePositions = [\n        anchorPosition - scrollAreaSize,\n        anchorPosition,\n        anchorPosition + scrollAreaSize,\n      ];\n      const nearestPosition = possiblePositions.reduce((nearest, current) => {\n        return (Math.abs(current - hangerPosition) < Math.abs(nearest - hangerPosition))\n          ? current\n          : nearest;\n      }, Infinity) - panel.getRelativeAnchorPosition();\n\n      const identicals = panel.getIdenticalPanels();\n      const offset = nearestPosition - anchorPosition;\n      if (offset > 0) {\n        // First cloned panel is nearest\n        targetPanel = identicals[1];\n      } else if (offset < 0) {\n        // Last cloned panel is nearest\n        targetPanel = identicals[identicals.length - 1];\n      }\n\n      targetPanel = targetPanel.clone(targetPanel.getCloneIndex(), true);\n      targetPanel.setPosition(nearestPosition);\n    }\n    const currentIndex = this.getIndex();\n\n    if (hangerPosition === targetPanel.getAnchorPosition() && currentIndex === index) {\n      return this;\n    }\n\n    const eventType = panel.getIndex() === viewport.getCurrentIndex()\n      ? \"\"\n      : EVENTS.CHANGE;\n\n    viewport.moveTo(\n      targetPanel,\n      viewport.findEstimatedPosition(targetPanel),\n      eventType,\n      null,\n      duration,\n    );\n    return this;\n  }\n\n  /**\n   * Return index of the current panel. `-1` if no panel exists.\n   * @ko 현재 패널의 인덱스 번호를 반환한다. 패널이 하나도 없을 경우 `-1`을 반환한다.\n   * @return Current panel's index, zero-based integer.<ko>현재 패널의 인덱스 번호. 0부터 시작하는 정수.</ko>\n   */\n  public getIndex(): number {\n    return this.viewport.getCurrentIndex();\n  }\n\n  /**\n   * Return the wrapper element user provided in constructor.\n   * @ko 사용자가 생성자에서 제공한 래퍼 엘리먼트를 반환한다.\n   * @return Wrapper element user provided.<ko>사용자가 제공한 래퍼 엘리먼트.</ko>\n   */\n  public getElement(): HTMLElement {\n    return this.wrapper;\n  }\n\n  /**\n   * Return current panel. `null` if no panel exists.\n   * @ko 현재 패널을 반환한다. 패널이 하나도 없을 경우 `null`을 반환한다.\n   * @return Current panel.<ko>현재 패널.</ko>\n   */\n  public getCurrentPanel(): FlickingPanel | null {\n    const viewport = this.viewport;\n    const panel = viewport.getCurrentPanel();\n    return panel\n      ? panel\n      : null;\n  }\n\n  /**\n   * Return the panel of given index. `null` if it doesn't exists.\n   * @ko 주어진 인덱스에 해당하는 패널을 반환한다. 해당 패널이 존재하지 않을 시 `null`이다.\n   * @return Panel of given index.<ko>주어진 인덱스에 해당하는 패널.</ko>\n   */\n  public getPanel(index: number): FlickingPanel | null {\n    const viewport = this.viewport;\n    const panel = viewport.panelManager.get(index);\n    return panel\n      ? panel\n      : null;\n  }\n\n  /**\n   * Return all panels.\n   * @ko 모든 패널들을 반환한다.\n   * @param - Should include cloned panels or not.<ko>복사된 패널들을 포함할지의 여부.</ko>\n   * @return All panels.<ko>모든 패널들.</ko>\n   */\n  public getAllPanels(includeClone?: boolean): FlickingPanel[] {\n    const viewport = this.viewport;\n    const panelManager = viewport.panelManager;\n    const panels = includeClone\n      ? panelManager.allPanels()\n      : panelManager.originalPanels();\n\n    return panels\n      .filter(panel => !!panel);\n  }\n\n  /**\n   * Return the panels currently shown in viewport area.\n   * @ko 현재 뷰포트 영역에서 보여지고 있는 패널들을 반환한다.\n   * @return Panels currently shown in viewport area.<ko>현재 뷰포트 영역에 보여지는 패널들</ko>\n   */\n  public getVisiblePanels(): FlickingPanel[] {\n    return this.viewport.calcVisiblePanels();\n  }\n\n  /**\n   * Return length of original panels.\n   * @ko 원본 패널의 개수를 반환한다.\n   * @return Length of original panels.<ko>원본 패널의 개수</ko>\n   */\n  public getPanelCount(): number {\n    return this.viewport.panelManager.getPanelCount();\n  }\n\n  /**\n   * Return how many groups of clones are created.\n   * @ko 몇 개의 클론 그룹이 생성되었는지를 반환한다.\n   * @return Length of cloned panel groups.<ko>클론된 패널 그룹의 개수</ko>\n   */\n  public getCloneCount(): number {\n    return this.viewport.panelManager.getCloneCount();\n  }\n\n  /**\n   * Get maximum panel index for `infinite` mode.\n   * @ko `infinite` 모드에서 적용되는 추가 가능한 패널의 최대 인덱스 값을 반환한다.\n   * @see {@link eg.Flicking.FlickingOptions}\n   * @return Maximum index of panel that can be added.<ko>최대 추가 가능한 패널의 인덱스.</ko>\n   */\n  public getLastIndex(): number {\n    return this.viewport.panelManager.getLastIndex();\n  }\n\n  /**\n   * Set maximum panel index for `infinite' mode.<br>[needPanel]{@link eg.Flicking#events:needPanel} won't be triggered anymore when last panel's index reaches it.<br>Also, you can't add more panels after it.\n   * @ko `infinite` 모드에서 적용되는 패널의 최대 인덱스를 설정한다.<br>마지막 패널의 인덱스가 설정한 값에 도달할 경우 더 이상 [needPanel]{@link eg.Flicking#events:needPanel} 이벤트가 발생되지 않는다.<br>또한, 설정한 인덱스 이후로 새로운 패널을 추가할 수 없다.\n   * @param - Maximum panel index.\n   * @see {@link eg.Flicking.FlickingOptions}\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public setLastIndex(index: number): this {\n    this.viewport.setLastIndex(index);\n\n    return this;\n  }\n\n  /**\n   * Return panel movement animation.\n   * @ko 현재 패널 이동 애니메이션이 진행 중인지를 반환한다.\n   * @return Is animating or not.<ko>애니메이션 진행 여부.</ko>\n   */\n  public isPlaying(): boolean {\n    return this.viewport.stateMachine.getState().playing;\n  }\n\n  /**\n   * Unblock input devices.\n   * @ko 막았던 입력 장치로부터의 입력을 푼다.\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public enableInput(): this {\n    this.viewport.enable();\n\n    return this;\n  }\n\n  /**\n   * Block input devices.\n   * @ko 입력 장치로부터의 입력을 막는다.\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public disableInput(): this {\n    this.viewport.disable();\n\n    return this;\n  }\n\n  /**\n   * Get current flicking status. You can restore current state by giving returned value to [setStatus()]{@link eg.Flicking#setStatus}.\n   * @ko 현재 상태 값을 반환한다. 반환받은 값을 [setStatus()]{@link eg.Flicking#setStatus} 메소드의 인자로 지정하면 현재 상태를 복원할 수 있다.\n   * @return An object with current status value information.<ko>현재 상태값 정보를 가진 객체.</ko>\n   */\n  public getStatus(): FlickingStatus {\n    const viewport = this.viewport;\n\n    const panels = viewport.panelManager.originalPanels()\n      .filter(panel => !!panel)\n      .map(panel => {\n        return {\n          html: panel.getElement().outerHTML,\n          index: panel.getIndex(),\n        };\n      });\n\n    return {\n      index: viewport.getCurrentIndex(),\n      panels,\n      position: viewport.getCameraPosition(),\n    };\n  }\n\n  /**\n   * Restore to the state of the `status`.\n   * @ko `status`의 상태로 복원한다.\n   * @param status Status value to be restored. You can specify the return value of the [getStatus()]{@link eg.Flicking#getStatus} method.<ko>복원할 상태 값. [getStatus()]{@link eg.Flicking#getStatus}메서드의 반환값을 지정하면 된다.</ko>\n   */\n  public setStatus(status: FlickingStatus): void {\n    this.viewport.restore(status);\n  }\n\n  /**\n   * Add plugins that can have different effects on Flicking.\n   * @ko 플리킹에 다양한 효과를 부여할 수 있는 플러그인을 추가한다.\n   * @param - The plugin(s) to add.<ko>추가할 플러그인(들).</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public addPlugins(plugins: Plugin | Plugin[]) {\n    this.viewport.addPlugins(plugins);\n    return this;\n  }\n\n  /**\n   * Remove plugins from Flicking.\n   * @ko 플리킹으로부터 플러그인들을 제거한다.\n   * @param - The plugin(s) to remove.<ko>제거 플러그인(들).</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public removePlugins(plugins: Plugin | Plugin[]) {\n    this.viewport.removePlugins(plugins);\n    return this;\n  }\n\n  /**\n   * Return the reference element and all its children to the state they were in before the instance was created. Remove all attached event handlers. Specify `null` for all attributes of the instance (including inherited attributes).\n   * @ko 기준 요소와 그 하위 패널들을 인스턴스 생성전의 상태로 되돌린다. 부착된 모든 이벤트 핸들러를 탈거한다. 인스턴스의 모든 속성(상속받은 속성포함)에 `null`을 지정한다.\n   * @example\n   * const flick = new eg.Flicking(\"#flick\");\n   * flick.destroy();\n   * console.log(flick.moveTo); // null\n   */\n  public destroy(option: Partial<DestroyOption> = {}): void {\n    this.off();\n\n    if (this.options.autoResize) {\n      window.removeEventListener(\"resize\", this.resize);\n    }\n\n    this.viewport.destroy(option);\n\n    // release resources\n    for (const x in this) {\n      (this as any)[x] = null;\n    }\n  }\n\n  /**\n   * Update panels to current state.\n   * @ko 패널들을 현재 상태에 맞춰 갱신한다.\n   * @method\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public resize = (): this => {\n    const viewport = this.viewport;\n    const options = this.options;\n\n    const allPanels = viewport.panelManager.allPanels();\n    if (!options.isConstantSize) {\n      allPanels.forEach(panel => panel.unCacheBbox());\n    }\n\n    const shouldResetElements = options.renderOnlyVisible\n      && !options.isConstantSize\n      && options.isEqualSize !== true;\n\n    viewport.unCacheBbox();\n    // This should be done before adding panels, to lower performance issue\n    viewport.updateBbox();\n\n    if (shouldResetElements) {\n      viewport.appendUncachedPanelElements(allPanels as Panel[]);\n    }\n\n    viewport.resize();\n\n    return this;\n  }\n\n  /**\n   * Add new panels at the beginning of panels.\n   * @ko 제일 앞에 새로운 패널을 추가한다.\n   * @param element - Either HTMLElement, HTML string, or array of them.<br>It can be also HTML string of multiple elements with same depth.<ko>HTMLElement 혹은 HTML 문자열, 혹은 그것들의 배열도 가능하다.<br>또한, 같은 depth의 여러 개의 엘리먼트에 해당하는 HTML 문자열도 가능하다.</ko>\n   * @return Array of appended panels.<ko>추가된 패널들의 배열</ko>\n   * @example\n   * // Suppose there were no panels at initialization\n   * const flicking = new eg.Flicking(\"#flick\");\n   * flicking.replace(3, document.createElement(\"div\")); // Add new panel at index 3\n   * flicking.prepend(\"\\<div\\>Panel\\</div\\>\"); // Prepended at index 2\n   * flicking.prepend([\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]); // Prepended at index 0, 1\n   * flicking.prepend(\"\\<div\\>Panel\\</div\\>\"); // Prepended at index 0, pushing every panels behind it.\n   */\n  public prepend(element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const viewport = this.viewport;\n    const parsedElements = parseElement(element);\n\n    const insertingIndex = Math.max(viewport.panelManager.getRange().min - parsedElements.length, 0);\n    return viewport.insert(insertingIndex, parsedElements);\n  }\n\n  /**\n   * Add new panels at the end of panels.\n   * @ko 제일 끝에 새로운 패널을 추가한다.\n   * @param element - Either HTMLElement, HTML string, or array of them.<br>It can be also HTML string of multiple elements with same depth.<ko>HTMLElement 혹은 HTML 문자열, 혹은 그것들의 배열도 가능하다.<br>또한, 같은 depth의 여러 개의 엘리먼트에 해당하는 HTML 문자열도 가능하다.</ko>\n   * @return Array of appended panels.<ko>추가된 패널들의 배열</ko>\n   * @example\n   * // Suppose there were no panels at initialization\n   * const flicking = new eg.Flicking(\"#flick\");\n   * flicking.append(document.createElement(\"div\")); // Appended at index 0\n   * flicking.append(\"\\<div\\>Panel\\</div\\>\"); // Appended at index 1\n   * flicking.append([\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]); // Appended at index 2, 3\n   * // Even this is possible\n   * flicking.append(\"\\<div\\>Panel 1\\</div\\>\\<div\\>Panel 2\\</div\\>\"); // Appended at index 4, 5\n   */\n  public append(element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const viewport = this.viewport;\n\n    return viewport.insert(viewport.panelManager.getRange().max + 1, element);\n  }\n\n  /**\n   * Replace existing panels with new panels from given index. If target index is empty, add new panel at target index.\n   * @ko 주어진 인덱스로부터의 패널들을 새로운 패널들로 교체한다. 인덱스에 해당하는 자리가 비어있다면, 새로운 패널을 해당 자리에 집어넣는다.\n   * @param index - Start index to replace new panels.<ko>새로운 패널들로 교체할 시작 인덱스</ko>\n   * @param element - Either HTMLElement, HTML string, or array of them.<br>It can be also HTML string of multiple elements with same depth.<ko>HTMLElement 혹은 HTML 문자열, 혹은 그것들의 배열도 가능하다.<br>또한, 같은 depth의 여러 개의 엘리먼트에 해당하는 HTML 문자열도 가능하다.</ko>\n   * @return Array of created panels by replace.<ko>교체되어 새롭게 추가된 패널들의 배열</ko>\n   * @example\n   * // Suppose there were no panels at initialization\n   * const flicking = new eg.Flicking(\"#flick\");\n   *\n   * // This will add new panel at index 3,\n   * // Index 0, 1, 2 is empty at this moment.\n   * // [empty, empty, empty, PANEL]\n   * flicking.replace(3, document.createElement(\"div\"));\n   *\n   * // As index 2 was empty, this will also add new panel at index 2.\n   * // [empty, empty, PANEL, PANEL]\n   * flicking.replace(2, \"\\<div\\>Panel\\</div\\>\");\n   *\n   * // Index 3 was not empty, so it will replace previous one.\n   * // It will also add new panels at index 4 and 5.\n   * // before - [empty, empty, PANEL, PANEL]\n   * // after - [empty, empty, PANEL, NEW_PANEL, NEW_PANEL, NEW_PANEL]\n   * flicking.replace(3, [\"\\<div\\>Panel\\</div\\>\", \"\\<div\\>Panel\\</div\\>\", \"\\<div\\>Panel\\</div\\>\"])\n   */\n  public replace(index: number, element: ElementLike | ElementLike[]): FlickingPanel[] {\n    return this.viewport.replace(index, element);\n  }\n\n  /**\n   * Remove panel at target index. This will decrease index of panels behind it.\n   * @ko `index`에 해당하는 자리의 패널을 제거한다. 수행시 `index` 이후의 패널들의 인덱스가 감소된다.\n   * @param index - Index of panel to remove.<ko>제거할 패널의 인덱스</ko>\n   * @param {number} [deleteCount=1] - Number of panels to remove from index.<ko>`index` 이후로 제거할 패널의 개수.</ko>\n   * @return Array of removed panels<ko>제거된 패널들의 배열</ko>\n   */\n  public remove(index: number, deleteCount: number = 1): FlickingPanel[] {\n    return this.viewport.remove(index, deleteCount);\n  }\n\n  /**\n   * Get indexes to render. Should be used with `renderOnlyVisible` option.\n   * @private\n   * @ko 렌더링이 필요한 인덱스들을 반환한다. `renderOnlyVisible` 옵션과 함께 사용해야 한다.\n   * @param - Info object of how panel infos are changed.<ko>패널 정보들의 변경 정보를 담는 오브젝트.</ko>\n   * @return Array of indexes to render.<ko>렌더링할 인덱스의 배열</ko>\n   */\n  public getRenderingIndexes(diffResult: DiffResult<any>): number[] {\n    const viewport = this.viewport;\n    const { min, max } = viewport.getVisibleIndex();\n    const maintained = diffResult.maintained.reduce((values: {[key: number]: number}, [before, after]) => {\n      values[before] = after;\n      return values;\n    }, {});\n\n    const prevPanelCount = diffResult.prevList.length;\n    const panelCount = diffResult.list.length;\n    const added = diffResult.added;\n    const list = counter(prevPanelCount * (this.getCloneCount() + 1));\n\n    let visibles = min >= 0\n      ? list.slice(min, max + 1)\n      : list.slice(0, max + 1).concat(list.slice(min));\n    visibles = visibles\n      .filter(val => maintained[val % prevPanelCount] != null)\n      .map(val => {\n        const cloneIndex = Math.floor(val / prevPanelCount);\n        const changedIndex = maintained[val % prevPanelCount];\n\n        return changedIndex + panelCount * cloneIndex;\n      });\n\n    const renderingPanels = [...visibles, ...added];\n    const allPanels = viewport.panelManager.allPanels();\n\n    viewport.setVisiblePanels(renderingPanels.map(index => allPanels[index]));\n\n    return renderingPanels;\n  }\n\n  /**\n   * Synchronize info of panels instance with info given by external rendering.\n   * @ko 외부 렌더링 방식에 의해 입력받은 패널의 정보와 현재 플리킹이 갖는 패널 정보를 동기화한다.\n   * @private\n   * @param - Info object of how panel infos are changed.<ko>패널 정보들의 변경 정보를 담는 오브젝트.</ko>\n   * @param - Whether called from sync method <ko> sync 메소드로부터 호출됐는지 여부 </ko>\n   */\n  public beforeSync(diffInfo: BeforeSyncResult) {\n    const { maintained, added, changed, removed } = diffInfo;\n    const viewport = this.viewport;\n    const panelManager = viewport.panelManager;\n    const isCircular = this.options.circular;\n    const cloneCount = panelManager.getCloneCount();\n    const prevClonedPanels = panelManager.clonedPanels();\n\n    // Update visible panels\n    const newVisiblePanels = viewport.getVisiblePanels()\n      .filter(panel => findIndex(removed, index => {\n        return index === panel.getIndex();\n      }) < 0);\n    viewport.setVisiblePanels(newVisiblePanels);\n\n    // Did not changed at all\n    if (\n      added.length <= 0\n      && removed.length <= 0\n      && changed.length <= 0\n      && cloneCount === prevClonedPanels.length\n    ) {\n      return this;\n    }\n    const prevOriginalPanels = panelManager.originalPanels();\n    const newPanels: Panel[] = [];\n    const newClones: Panel[][] = counter(cloneCount).map(() => []);\n\n    maintained.forEach(([beforeIdx, afterIdx]) => {\n      newPanels[afterIdx] = prevOriginalPanels[beforeIdx];\n      newPanels[afterIdx].setIndex(afterIdx);\n    });\n\n    added.forEach(addIndex => {\n      newPanels[addIndex] = new Panel(null, addIndex, this.viewport);\n    });\n\n    if (isCircular) {\n      counter(cloneCount).forEach(groupIndex => {\n        const prevCloneGroup = prevClonedPanels[groupIndex];\n        const newCloneGroup = newClones[groupIndex];\n\n        maintained.forEach(([beforeIdx, afterIdx]) => {\n          newCloneGroup[afterIdx] = prevCloneGroup\n            ? prevCloneGroup[beforeIdx]\n            : newPanels[afterIdx].clone(groupIndex, false);\n\n          newCloneGroup[afterIdx].setIndex(afterIdx);\n        });\n\n        added.forEach(addIndex => {\n          const newPanel = newPanels[addIndex];\n\n          newCloneGroup[addIndex] = newPanel.clone(groupIndex, false);\n        });\n      });\n    }\n\n    added.forEach(index => { viewport.updateCheckedIndexes({ min: index, max: index }); });\n    removed.forEach(index => { viewport.updateCheckedIndexes({ min: index - 1, max: index + 1 }); });\n\n    const checkedIndexes = viewport.getCheckedIndexes();\n    checkedIndexes.forEach(([min, max], idx) => {\n      // Push checked indexes backward\n      const pushedIndex = added.filter(index => index < min && panelManager.has(index)).length\n        - removed.filter(index => index < min).length;\n      checkedIndexes.splice(idx, 1, [min + pushedIndex, max + pushedIndex]);\n    });\n\n    // Only effective only when there are least one panel which have changed its index\n    if (changed.length > 0) {\n      // Removed checked index by changed ones after pushing\n      maintained.forEach(([, next]) => { viewport.updateCheckedIndexes({ min: next, max: next }); });\n    }\n    panelManager.replacePanels(newPanels, newClones);\n    this.isPanelChangedAtBeforeSync = true;\n  }\n\n  /**\n   * Synchronize info of panels with DOM info given by external rendering.\n   * @ko 외부 렌더링 방식에 의해 입력받은 DOM의 정보와 현재 플리킹이 갖는 패널 정보를 동기화 한다.\n   * @private\n   * @param - Info object of how panel elements are changed.<ko>패널의 DOM 요소들의 변경 정보를 담는 오브젝트.</ko>\n   */\n  public sync(diffInfo: SyncResult): this {\n    const { list, maintained, added, changed, removed } = diffInfo;\n\n    // Did not changed at all\n    if (added.length <= 0 && removed.length <= 0 && changed.length <= 0) {\n      return this;\n    }\n    const viewport = this.viewport;\n    const { renderOnlyVisible, circular } = this.options;\n    const panelManager = viewport.panelManager;\n\n    if (!renderOnlyVisible) {\n      const indexRange = panelManager.getRange();\n      let beforeDiffInfo: BeforeSyncResult = diffInfo;\n\n      if (circular) {\n        const prevOriginalPanelCount = indexRange.max;\n        const originalPanelCount = (list.length / (panelManager.getCloneCount() + 1)) >> 0;\n        const originalAdded = added.filter(index => index < originalPanelCount);\n        const originalRemoved = removed.filter(index => index <= prevOriginalPanelCount);\n        const originalMaintained = maintained.filter(([beforeIdx]) => beforeIdx <= prevOriginalPanelCount);\n        const originalChanged = changed.filter(([beforeIdx]) => beforeIdx <= prevOriginalPanelCount);\n\n        beforeDiffInfo = {\n          added: originalAdded,\n          maintained: originalMaintained,\n          removed: originalRemoved,\n          changed: originalChanged,\n        };\n      }\n      this.beforeSync(beforeDiffInfo);\n    }\n\n    const visiblePanels = renderOnlyVisible\n      ? viewport.getVisiblePanels()\n      : this.getAllPanels(true);\n\n    added.forEach(addedIndex => {\n      const addedElement = list[addedIndex];\n      const beforePanel = visiblePanels[addedIndex] as Panel;\n\n      beforePanel.setElement(addedElement);\n      // As it can be 0\n      beforePanel.unCacheBbox();\n    });\n    if (this.isPanelChangedAtBeforeSync) {\n      viewport.resetVisibleIndex();\n      this.isPanelChangedAtBeforeSync = false;\n    }\n    viewport.resize();\n\n    return this;\n  }\n\n  private listenInput(): void {\n    const flicking = this;\n    const viewport = flicking.viewport;\n    const stateMachine = viewport.stateMachine;\n\n    // Set event context\n    flicking.eventContext = {\n      flicking,\n      viewport: flicking.viewport,\n      transitTo: stateMachine.transitTo,\n      triggerEvent: flicking.triggerEvent,\n      moveCamera: flicking.moveCamera,\n      stopCamera: viewport.stopCamera,\n    };\n\n    const handlers = {};\n    for (const key in AXES_EVENTS) {\n      const eventType = AXES_EVENTS[key];\n\n      handlers[eventType] = (e: any) => stateMachine.fire(eventType, e, flicking.eventContext);\n    }\n\n    // Connect Axes instance with PanInput\n    flicking.viewport.connectAxesHandler(handlers);\n  }\n\n  private listenResize(): void {\n    if (this.options.autoResize) {\n      window.addEventListener(\"resize\", this.resize);\n    }\n  }\n\n  private triggerEvent = <T extends FlickingEvent>(\n    eventName: string,\n    axesEvent: any,\n    isTrusted: boolean,\n    params: Partial<T> = {},\n  ): TriggerCallback => {\n    const viewport = this.viewport;\n\n    let canceled: boolean = true;\n\n    // Ignore events before viewport is initialized\n    if (viewport) {\n      const state = viewport.stateMachine.getState();\n      const { prev, next } = viewport.getScrollArea();\n      const pos = viewport.getCameraPosition();\n      let progress = getProgress(pos, [prev, prev, next]);\n\n      if (this.options.circular) {\n        progress %= 1;\n      }\n      canceled = !super.trigger(eventName, merge({\n        type: eventName,\n        index: this.getIndex(),\n        panel: this.getCurrentPanel(),\n        direction: state.direction,\n        holding: state.holding,\n        progress,\n        axesEvent,\n        isTrusted,\n      }, params));\n    }\n\n    return {\n      onSuccess(callback: () => void): TriggerCallback {\n        if (!canceled) {\n          callback();\n        }\n        return this;\n      },\n      onStopped(callback: () => void): TriggerCallback {\n        if (canceled) {\n          callback();\n        }\n        return this;\n      },\n    } as TriggerCallback;\n  }\n\n  // Return result of \"move\" event triggered\n  private moveCamera = (axesEvent: any): TriggerCallback => {\n    const viewport = this.viewport;\n    const state = viewport.stateMachine.getState();\n    const options = this.options;\n\n    const pos = axesEvent.pos.flick;\n    const previousPosition = viewport.getCameraPosition();\n\n    if (axesEvent.isTrusted && state.holding) {\n      const inputOffset = options.horizontal\n        ? axesEvent.inputEvent.offsetX\n        : axesEvent.inputEvent.offsetY;\n\n      const isNextDirection = inputOffset < 0;\n\n      let cameraChange = pos - previousPosition;\n      const looped = isNextDirection === (pos < previousPosition);\n      if (options.circular && looped) {\n        // Reached at max/min range of axes\n        const scrollAreaSize = viewport.getScrollAreaSize();\n        cameraChange = (cameraChange > 0 ? -1 : 1) * (scrollAreaSize - Math.abs(cameraChange));\n      }\n\n      const currentDirection = cameraChange === 0\n        ? state.direction\n        : cameraChange > 0\n          ? DIRECTION.NEXT\n          : DIRECTION.PREV;\n\n      state.direction = currentDirection;\n    }\n    state.delta += axesEvent.delta.flick;\n\n    viewport.moveCamera(pos, axesEvent);\n    return this.triggerEvent(EVENTS.MOVE, axesEvent, axesEvent.isTrusted)\n      .onStopped(() => {\n        // Undo camera movement\n        viewport.moveCamera(previousPosition, axesEvent);\n      });\n  }\n}\n\nexport default Flicking;\n","import Flicking from \"./Flicking\";\nimport { withFlickingMethods } from \"./utils\";\nimport { DEFAULT_OPTIONS, MOVE_TYPE } from \"./consts\";\n\n(Flicking as any).withFlickingMethods = withFlickingMethods;\n(Flicking as any).DEFAULT_OPTIONS = DEFAULT_OPTIONS;\n(Flicking as any).MOVE_TYPE = MOVE_TYPE;\nexport default Flicking;\n"],"names":["MOVE_TYPE","SNAP","FREE_SCROLL","DEFAULT_MOVE_TYPE_OPTIONS","snap","type","count","freeScroll","isBrowser","document","DEFAULT_OPTIONS","classPrefix","deceleration","horizontal","circular","infinite","infiniteThreshold","lastIndex","Infinity","threshold","duration","panelEffect","x","Math","pow","defaultIndex","inputType","thresholdAngle","bounce","autoResize","adaptive","zIndex","bound","overflow","hanger","anchor","gap","moveType","useOffset","isEqualSize","isConstantSize","renderOnlyVisible","renderExternal","collectStatistics","DEFAULT_VIEWPORT_CSS","position","DEFAULT_CAMERA_CSS","width","height","willChange","DEFAULT_PANEL_CSS","EVENTS","HOLD_START","HOLD_END","MOVE_START","MOVE","MOVE_END","CHANGE","RESTORE","SELECT","NEED_PANEL","VISIBLE_CHANGE","AXES_EVENTS","HOLD","RELEASE","ANIMATION_END","FINISH","STATE_TYPE","IDLE","HOLDING","DRAGGING","ANIMATING","DISABLED","DIRECTION","PREV","NEXT","FLICKING_METHODS","prev","next","moveTo","getIndex","getAllPanels","getCurrentPanel","getElement","getPanel","getPanelCount","getStatus","getVisiblePanels","setLastIndex","enableInput","disableInput","destroy","resize","setStatus","addPlugins","removePlugins","isPlaying","getLastIndex","checkTranslateSupport","transforms","webkitTransform","msTransform","MozTransform","OTransform","transform","name","has3d","supportedStyle","documentElement","style","transformName","prefixedTransform","Error","el","createElement","insertBefore","styleVal","window","getComputedStyle","getPropertyValue","parentElement","removeChild","transformInfo","length","TRANSFORM","target","_i","srcs","forEach","source","Object","keys","key","value","element","Array","isArray","elements","isString","tempDiv","innerHTML","push","toArray","children","firstChild","className","classList","add","hasClass","replace","contains","split","indexOf","cssObj","property","val","min","max","iterable","slice","call","arr","constructor","cssValue","base","defaultVal","defaultValue","cssRegex","clamp","idx","calculatedValue","matchResult","exec","sign","unit","parsedValue","parseFloat","pos","range","center","callback","i","counterArray","indexed","size","offset","originalStyle","setAttribute","removeAttribute","prototype","flickingName","args","result","_a","bbox","y","offsetWidth","offsetHeight","clientRect","getBoundingClientRect","left","top","index","viewport","prevSibling","nextSibling","clonedPanels","state","relativeAnchorPosition","isClone","isVirtual","cloneIndex","cachedBbox","setElement","givenBbox","options","getBbox","prevSize","parseArithmeticExpression","panel","cloneState","panelCount","panelManager","scrollAreaSize","getScrollAreaSize","relativeIndex","floor","getPosition","progress","getCurrentProgress","outsetRange","getSize","getRelativeHangerPosition","getRelativeAnchorPosition","relativePanelPosition","getCameraPosition","outsetProgress","getProgress","panelSize","rightRelativePanelPosition","visibleSize","visibleRatio","currentPanel","hangerPosition","getHangerPosition","anchorPosition","getAnchorPosition","currentPosition","eventType","findEstimatedPosition","updateFunction","shouldResize","identicalPanels","getIdenticalPanels","eachPanel","unCacheBbox","addVisiblePanel","currentIndex","prevPanelIndex","prevPanelPosition","prevPanelSize","hasEmptyPanelBetween","notYetMinPanel","newPosition","prevPanel","clone","getCloneIndex","setPosition","nextPanelIndex","nextPanelPosition","notYetMaxPanel","nextPanel","parsedElements","parseElement","firstPanel","targetIndex","insert","remove","option","preserveUI","restoreStyle","wasVisible","Boolean","parentNode","cameraElement","getCameraElement","appendChild","classes","classes_1","original","getClonedPanels","elementStyle","currentElementStyle","styleToApply","cloneElement","cloneNode","clonedPanel","Panel","clonedState","removeClonedPanelsAfter","start","removingPanels","splice","removeElement","currentElement","getAttribute","addClass","applyCSS","panels","clones","cloneCount","reduce","allClones","newPanels","newClones","findIndex","filter","lastPanel","firstRemovedPanel","possibleLastPanel","shouldRender","isCircular","findFirstPanelFrom","siblingElement","insertNewPanels","pushedIndex","panelsAfterIndex","emptyPanelCount","removedPanels","newLastIndex","concat","reverse","setIndex","updateIndex","addNewClones","panelCount_1","cloneSet","replacedPanels","wasNonEmptyCount","deleteCount","deletedPanels","reversedPanels","nonEmptyIndexFromLast","allPanels","allPanelsCount","newClones_1","insertTarget_1","allPanels_1","panelElement","originalPanels","getCloneCount","lastPanelClones","nextSiblingClones","cloneNextSibling","lastPanelSibling","cloneSiblingElement","nextElementSibling","map","_this","this_1","insertClones","counter","insertingIndex","fragment_1","createDocumentFragment","prevState","delta","direction","targetPanel","lastPosition","nextState","e","context","tslib_1","flicking","triggerEvent","transitTo","moveCamera","onSuccess","onStopped","onChange","State","inputEvent","offsetX","offsetY","flick","setTo","releaseEvent","srcEvent","clickedElement","touchEvent","touch","changedTouches","elementFromPoint","clientX","clientY","clickedPanel","findPanelOf","cameraPosition","clickedPanelPosition","stopCamera","absDelta","abs","velocity","velocityX","velocityY","inputDelta","deltaX","deltaY","isNextDirection","swipeDistance","swipeAngle","atan","PI","belowAngleThreshold","overThreshold","moveTypeContext","axesEvent","interruptDestInfo","findPanelWhenInterrupted","destPos","nearestPanel","getNearestPanel","stop","destInfo","findTargetPanel","findRestorePanel","scrollArea","getScrollArea","loopCount","originalTargetPosition","newCloneIndex","circulate","newTargetPosition","newTargetPanel","setCurrentPanel","isTrusted","updateAdaptiveSize","updateAxesPosition","IdleState","nextStateType","currentState","HoldingState","DraggingState","AnimatingState","DisabledState","onExit","onEnter","onHold","onRelease","onAnimationEnd","onFinish","ctx","findRestorePanelInCircularMode","halfGap","minimumDistanceToChange","originalPanel","getOriginalPanel","firstClonedPanel","lapped","_super","snapCount","eventDelta","calcBrinkOfChange","nearestIsCurrent","shouldMoveWhenBounceIs0","canSetBoundMode","shouldMoveToAdjacent","isOutOfBound","findSnappedPanel","findAdjacentPanel","estimatedHangerPos","panelToMove","cycleIndex","passedPanelCount","panelPosition","panelNextPosition","panelPrevPosition","siblingPanel","panelIndex","siblingIndex","originalPosition","defaultDuration","getCurrentIndex","get","basePanel","basePosition","adjacentPanel","targetRelativeAnchorPosition","estimatedPanelPosition","estimatedPosition","MoveType","estimatedPanel","findNearestPanelAt","stateMachine","getState","currentPanelPosition","lastHangerPosition","Snap","panelMaintainRatio","relativeHangerPosition","positionOffset","visibleIndex","NaN","translate","checkedIndexes","isAdaptiveCached","isViewportGiven","isCameraGiven","originalViewportStyle","originalCameraStyle","StateMachine","visiblePanels","panelBboxes","build","eventResult","axes","isBetween","findNearestPanel","originalNearestPosition","checkNeedPanel","modifiedNearestPosition","updateVisiblePanels","posOffset","moveVector","moveCoord","coord","round","join","viewportElement","updateSize","updateOriginalPanelPositions","updateScrollArea","updateClonePanels","updateCameraPosition","updatePlugins","minimumDistance","prevPosition","nextPosition","distance","minimumAnchorDistance","anchorDistance","nearest","shortestDistance","identicals","identical","getVisibleIndexOf","panInput","enable","disable","resizePanels","newCenterPanel","newPanelPosition","updateCheckedIndexes","indexes","wasEmpty","newCurrentIndex","getRange","undefined","shouldApplyAdaptive","viewportStyle","sizeToApply","panelBbox","maximumPanelSize","maximum","viewportBbox","updateBbox","viewportSize","plugins","plugin","update","wrapper","topmostElement_1","deletingElement","status","html","refreshPanels","createdPanels","orderedPanels","createdPanel","replacePanels","setCloneCount","getOutsetProgress","playing","holding","prevRange","nextRange","nearestAnchorPos","nearestIndex","nearestSize","hangerIsNextToNearestPanel","targetPosition","progressBetween","startIndex","off","on","axesHandlers","summedPanelSize","handlers","newPlugins","init","currentPlugins","removedPlugins","changedRange","removed","fragment","prevVisiblePanels","equalSizeClasses_1","cached_1","overlappedClass","getOverlappedClass","clonePanels","updateClonedPanelPositions","chainAllPanels","visiblePanel","setElements","applyCSSValue","setMoveType","setAxesInstance","setDefaultPanel","moveToDefaultPanel","viewportCandidate","hasViewportElement","cameraCandidate","hasCameraElement","panelElements","child","minHeight","minWidth","PanelManager","FreeScroll","Axes","easing","interruptable","PanInput","scale","connect","indexRange","sumOriginalPanelSize","areaPrev","sizeSum","panelAtLeftBoundary","reversedPanels_1","areaNext","panelAtRightBoundary","panels_1","needCloneOnPrev","panel0OnFirstscreen","ceil","prevCloneCount","origPanel","removeClonesAfter","defaultPanel","defaultPosition","nextPanelPos","maintainingPanel","looped","panelsBeforeMaintainPanel","accumulatedSize","total","setPositionCSS","clonedPanels_1","cloneBasePos","clonedPanelPos","lastReplacePosition","_b","replacePosition","parsedBounce","parsedVal","axis","isFreeScroll","is","maxLastIndex","triggerNeedPanel","checkingPanel","atLastPanel","nextIndex","currentNearestPosition","panelRight","cameraNext","emptyPanelExistsBetween","firstIndex","lastPanelAfterNeed","atLastPanelAfterNeed","cameraPrev","checkingIndex","atFirstPanel","prevIndex","panelLeft","firstPanelAfterNeed","atFirstPanelAfterNeed","params","alreadyTriggered","some","hasHandler","hasOn","fill","insertAfter","resetVisibleIndex","newVisibleIndex","calcNewVisiblePanelIndex","isNaN","newVisiblePanels","calcVisiblePanels","addedPanels","firstVisiblePanelPos","trigger","cameraPos","allPanelCount","checkLastPanel","getNextPanel","isOutOfViewport","lastPanelOfNextDir","lastPanelOfPrevDir","minPanelCloneIndex","maxPanelCloneOffset","minPanelCloneOffset","prevRefCount","newRefCount","newPanel","newIndex","added","default","defaultBbox_1","equalSizeClasses_2","tid","cid","random","category","action","label","innerWidth","innerHeight","screen","collectInfos","location","href","navigator","language","toLowerCase","charset","inputEncoding","characterSet","referrer","title","JSON","stringify","req","XMLHttpRequest","open","send","shouldResetElements","appendUncachedPanelElements","eventName","canceled","merge","previousPosition","inputOffset","cameraChange","currentDirection","querySelector","nodeName","nodeType","currentOptions","Viewport","listenInput","listenResize","sendEvent","focus","possiblePositions","nearestPosition","current","includeClone","outerHTML","restore","removeEventListener","diffResult","maintained","values","before","after","prevPanelCount","prevList","list","visibles","changedIndex","renderingPanels","setVisiblePanels","diffInfo","changed","prevClonedPanels","prevOriginalPanels","beforeIdx","afterIdx","addIndex","groupIndex","prevCloneGroup","newCloneGroup","getCheckedIndexes","has","isPanelChangedAtBeforeSync","beforeDiffInfo","prevOriginalPanelCount_1","originalPanelCount_1","originalAdded","originalRemoved","originalMaintained","originalChanged","beforeSync","addedIndex","addedElement","beforePanel","eventContext","fire","connectAxesHandler","addEventListener","Flicking","Component","withFlickingMethods"],"mappings":"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"}