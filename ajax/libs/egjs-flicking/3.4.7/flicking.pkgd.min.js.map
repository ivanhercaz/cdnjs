{"version":3,"file":"flicking.pkgd.min.js","sources":["../node_modules/@egjs/component/dist/component.esm.js","../node_modules/@egjs/hammerjs/dist/hammer.esm.js","../node_modules/@egjs/axes/dist/axes.esm.js","../src/consts.ts","../src/utils.ts","../src/components/Panel.ts","../src/components/PanelManager.ts","../src/states/State.ts","../src/states/IdleState.ts","../src/states/HoldingState.ts","../src/states/DraggingState.ts","../src/states/AnimatingState.ts","../src/states/DisabledState.ts","../src/components/StateMachine.ts","../src/moves/Snap.ts","../src/moves/MoveType.ts","../src/moves/FreeScroll.ts","../src/components/Viewport.ts","../src/ga/ga.ts","../src/Flicking.ts","../src/index.umd.ts"],"sourcesContent":["/*\nCopyright (c) 2017 NAVER Corp.\n@egjs/component project is licensed under the MIT license\n\n@egjs/component JavaScript library\nhttps://naver.github.io/egjs-component\n\n@version 2.1.2\n*/\n/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nfunction isUndefined(value) {\n  return typeof value === \"undefined\";\n}\n/**\n * A class used to manage events in a component\n * @ko 컴포넌트의 이벤트을 관리할 수 있게 하는 클래스\n * @alias eg.Component\n */\n\n\nvar Component =\n/*#__PURE__*/\nfunction () {\n  var Component =\n  /*#__PURE__*/\n  function () {\n    /**\n    * Version info string\n    * @ko 버전정보 문자열\n    * @name VERSION\n    * @static\n    * @type {String}\n    * @example\n    * eg.Component.VERSION;  // ex) 2.0.0\n    * @memberof eg.Component\n    */\n\n    /**\n     * @support {\"ie\": \"7+\", \"ch\" : \"latest\", \"ff\" : \"latest\",  \"sf\" : \"latest\", \"edge\" : \"latest\", \"ios\" : \"7+\", \"an\" : \"2.1+ (except 3.x)\"}\n     */\n    function Component() {\n      this._eventHandler = {};\n      this.options = {};\n    }\n    /**\n     * Triggers a custom event.\n     * @ko 커스텀 이벤트를 발생시킨다\n     * @param {String} eventName The name of the custom event to be triggered <ko>발생할 커스텀 이벤트의 이름</ko>\n     * @param {Object} customEvent Event data to be sent when triggering a custom event <ko>커스텀 이벤트가 발생할 때 전달할 데이터</ko>\n     * @return {Boolean} Indicates whether the event has occurred. If the stop() method is called by a custom event handler, it will return false and prevent the event from occurring. <a href=\"https://github.com/naver/egjs-component/wiki/How-to-make-Component-event-design%3F\">Ref</a> <ko>이벤트 발생 여부. 커스텀 이벤트 핸들러에서 stop() 메서드를 호출하면 'false'를 반환하고 이벤트 발생을 중단한다. <a href=\"https://github.com/naver/egjs-component/wiki/How-to-make-Component-event-design%3F\">참고</a></ko>\n     * @example\n    class Some extends eg.Component {\n     some(){\n     \tif(this.trigger(\"beforeHi\")){ // When event call to stop return false.\n    \tthis.trigger(\"hi\");// fire hi event.\n     \t}\n     }\n    }\n    const some = new Some();\n    some.on(\"beforeHi\", (e) => {\n    if(condition){\n    \te.stop(); // When event call to stop, `hi` event not call.\n    }\n    });\n    some.on(\"hi\", (e) => {\n    // `currentTarget` is component instance.\n    console.log(some === e.currentTarget); // true\n    });\n    // If you want to more know event design. You can see article.\n    // https://github.com/naver/egjs-component/wiki/How-to-make-Component-event-design%3F\n     */\n\n\n    var _proto = Component.prototype;\n\n    _proto.trigger = function trigger(eventName, customEvent) {\n      if (customEvent === void 0) {\n        customEvent = {};\n      }\n\n      var handlerList = this._eventHandler[eventName] || [];\n      var hasHandlerList = handlerList.length > 0;\n\n      if (!hasHandlerList) {\n        return true;\n      } // If detach method call in handler in first time then handler list calls.\n\n\n      handlerList = handlerList.concat();\n      customEvent.eventType = eventName;\n      var isCanceled = false;\n      var arg = [customEvent];\n      var i = 0;\n\n      customEvent.stop = function () {\n        isCanceled = true;\n      };\n\n      customEvent.currentTarget = this;\n\n      for (var _len = arguments.length, restParam = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n        restParam[_key - 2] = arguments[_key];\n      }\n\n      if (restParam.length >= 1) {\n        arg = arg.concat(restParam);\n      }\n\n      for (i = 0; handlerList[i]; i++) {\n        handlerList[i].apply(this, arg);\n      }\n\n      return !isCanceled;\n    };\n    /**\n     * Executed event just one time.\n     * @ko 이벤트가 한번만 실행된다.\n     * @param {eventName} eventName The name of the event to be attached <ko>등록할 이벤트의 이름</ko>\n     * @param {Function} handlerToAttach The handler function of the event to be attached <ko>등록할 이벤트의 핸들러 함수</ko>\n     * @return {eg.Component} An instance of a component itself<ko>컴포넌트 자신의 인스턴스</ko>\n     * @example\n    class Some extends eg.Component {\n     hi() {\n       alert(\"hi\");\n     }\n     thing() {\n       this.once(\"hi\", this.hi);\n     }\n    }\n    var some = new Some();\n    some.thing();\n    some.trigger(\"hi\");\n    // fire alert(\"hi\");\n    some.trigger(\"hi\");\n    // Nothing happens\n     */\n\n\n    _proto.once = function once(eventName, handlerToAttach) {\n      if (typeof eventName === \"object\" && isUndefined(handlerToAttach)) {\n        var eventHash = eventName;\n        var i;\n\n        for (i in eventHash) {\n          this.once(i, eventHash[i]);\n        }\n\n        return this;\n      } else if (typeof eventName === \"string\" && typeof handlerToAttach === \"function\") {\n        var self = this;\n        this.on(eventName, function listener() {\n          for (var _len2 = arguments.length, arg = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n            arg[_key2] = arguments[_key2];\n          }\n\n          handlerToAttach.apply(self, arg);\n          self.off(eventName, listener);\n        });\n      }\n\n      return this;\n    };\n    /**\n     * Checks whether an event has been attached to a component.\n     * @ko 컴포넌트에 이벤트가 등록됐는지 확인한다.\n     * @param {String} eventName The name of the event to be attached <ko>등록 여부를 확인할 이벤트의 이름</ko>\n     * @return {Boolean} Indicates whether the event is attached. <ko>이벤트 등록 여부</ko>\n     * @example\n    class Some extends eg.Component {\n     some() {\n       this.hasOn(\"hi\");// check hi event.\n     }\n    }\n     */\n\n\n    _proto.hasOn = function hasOn(eventName) {\n      return !!this._eventHandler[eventName];\n    };\n    /**\n     * Attaches an event to a component.\n     * @ko 컴포넌트에 이벤트를 등록한다.\n     * @param {eventName} eventName The name of the event to be attached <ko>등록할 이벤트의 이름</ko>\n     * @param {Function} handlerToAttach The handler function of the event to be attached <ko>등록할 이벤트의 핸들러 함수</ko>\n     * @return {eg.Component} An instance of a component itself<ko>컴포넌트 자신의 인스턴스</ko>\n     * @example\n    class Some extends eg.Component {\n     hi() {\n       console.log(\"hi\");\n     }\n     some() {\n       this.on(\"hi\",this.hi); //attach event\n     }\n    }\n    */\n\n\n    _proto.on = function on(eventName, handlerToAttach) {\n      if (typeof eventName === \"object\" && isUndefined(handlerToAttach)) {\n        var eventHash = eventName;\n        var name;\n\n        for (name in eventHash) {\n          this.on(name, eventHash[name]);\n        }\n\n        return this;\n      } else if (typeof eventName === \"string\" && typeof handlerToAttach === \"function\") {\n        var handlerList = this._eventHandler[eventName];\n\n        if (isUndefined(handlerList)) {\n          this._eventHandler[eventName] = [];\n          handlerList = this._eventHandler[eventName];\n        }\n\n        handlerList.push(handlerToAttach);\n      }\n\n      return this;\n    };\n    /**\n     * Detaches an event from the component.\n     * @ko 컴포넌트에 등록된 이벤트를 해제한다\n     * @param {eventName} eventName The name of the event to be detached <ko>해제할 이벤트의 이름</ko>\n     * @param {Function} handlerToDetach The handler function of the event to be detached <ko>해제할 이벤트의 핸들러 함수</ko>\n     * @return {eg.Component} An instance of a component itself <ko>컴포넌트 자신의 인스턴스</ko>\n     * @example\n    class Some extends eg.Component {\n     hi() {\n       console.log(\"hi\");\n     }\n     some() {\n       this.off(\"hi\",this.hi); //detach event\n     }\n    }\n     */\n\n\n    _proto.off = function off(eventName, handlerToDetach) {\n      // All event detach.\n      if (isUndefined(eventName)) {\n        this._eventHandler = {};\n        return this;\n      } // All handler of specific event detach.\n\n\n      if (isUndefined(handlerToDetach)) {\n        if (typeof eventName === \"string\") {\n          this._eventHandler[eventName] = undefined;\n          return this;\n        } else {\n          var eventHash = eventName;\n          var name;\n\n          for (name in eventHash) {\n            this.off(name, eventHash[name]);\n          }\n\n          return this;\n        }\n      } // The handler of specific event detach.\n\n\n      var handlerList = this._eventHandler[eventName];\n\n      if (handlerList) {\n        var k;\n        var handlerFunction;\n\n        for (k = 0; (handlerFunction = handlerList[k]) !== undefined; k++) {\n          if (handlerFunction === handlerToDetach) {\n            handlerList = handlerList.splice(k, 1);\n            break;\n          }\n        }\n      }\n\n      return this;\n    };\n\n    return Component;\n  }();\n\n  Component.VERSION = \"2.1.2\";\n  return Component;\n}();\n\nexport default Component;\n//# sourceMappingURL=component.esm.js.map\n","/*! Hammer.JS - v2.0.15 - 2019-04-04\n * http://naver.github.io/egjs\n *\n * Forked By Naver egjs\n * Copyright (c) hammerjs\n * Licensed under the MIT license */\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\n/**\n * @private\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} target\n * @param {...Object} objects_to_assign\n * @returns {Object} target\n */\nvar assign;\n\nif (typeof Object.assign !== 'function') {\n  assign = function assign(target) {\n    if (target === undefined || target === null) {\n      throw new TypeError('Cannot convert undefined or null to object');\n    }\n\n    var output = Object(target);\n\n    for (var index = 1; index < arguments.length; index++) {\n      var source = arguments[index];\n\n      if (source !== undefined && source !== null) {\n        for (var nextKey in source) {\n          if (source.hasOwnProperty(nextKey)) {\n            output[nextKey] = source[nextKey];\n          }\n        }\n      }\n    }\n\n    return output;\n  };\n} else {\n  assign = Object.assign;\n}\n\nvar assign$1 = assign;\n\nvar VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\nvar TEST_ELEMENT = typeof document === \"undefined\" ? {\n  style: {}\n} : document.createElement('div');\nvar TYPE_FUNCTION = 'function';\nvar round = Math.round,\n    abs = Math.abs;\nvar now = Date.now;\n\n/**\n * @private\n * get the prefixed property\n * @param {Object} obj\n * @param {String} property\n * @returns {String|Undefined} prefixed\n */\n\nfunction prefixed(obj, property) {\n  var prefix;\n  var prop;\n  var camelProp = property[0].toUpperCase() + property.slice(1);\n  var i = 0;\n\n  while (i < VENDOR_PREFIXES.length) {\n    prefix = VENDOR_PREFIXES[i];\n    prop = prefix ? prefix + camelProp : property;\n\n    if (prop in obj) {\n      return prop;\n    }\n\n    i++;\n  }\n\n  return undefined;\n}\n\n/* eslint-disable no-new-func, no-nested-ternary */\nvar win;\n\nif (typeof window === \"undefined\") {\n  // window is undefined in node.js\n  win = {};\n} else {\n  win = window;\n}\n\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\nfunction getTouchActionProps() {\n  if (!NATIVE_TOUCH_ACTION) {\n    return false;\n  }\n\n  var touchMap = {};\n  var cssSupports = win.CSS && win.CSS.supports;\n  ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function (val) {\n    // If css.supports is not supported but there is native touch-action assume it supports\n    // all values. This is the case for IE 10 and 11.\n    return touchMap[val] = cssSupports ? win.CSS.supports('touch-action', val) : true;\n  });\n  return touchMap;\n}\n\nvar TOUCH_ACTION_COMPUTE = 'compute';\nvar TOUCH_ACTION_AUTO = 'auto';\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\n\nvar TOUCH_ACTION_NONE = 'none';\nvar TOUCH_ACTION_PAN_X = 'pan-x';\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\nvar TOUCH_ACTION_MAP = getTouchActionProps();\n\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\nvar SUPPORT_TOUCH = 'ontouchstart' in win;\nvar SUPPORT_POINTER_EVENTS = prefixed(win, 'PointerEvent') !== undefined;\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\nvar INPUT_TYPE_TOUCH = 'touch';\nvar INPUT_TYPE_PEN = 'pen';\nvar INPUT_TYPE_MOUSE = 'mouse';\nvar INPUT_TYPE_KINECT = 'kinect';\nvar COMPUTE_INTERVAL = 25;\nvar INPUT_START = 1;\nvar INPUT_MOVE = 2;\nvar INPUT_END = 4;\nvar INPUT_CANCEL = 8;\nvar DIRECTION_NONE = 1;\nvar DIRECTION_LEFT = 2;\nvar DIRECTION_RIGHT = 4;\nvar DIRECTION_UP = 8;\nvar DIRECTION_DOWN = 16;\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\nvar PROPS_XY = ['x', 'y'];\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\n/**\n * @private\n * walk objects and arrays\n * @param {Object} obj\n * @param {Function} iterator\n * @param {Object} context\n */\nfunction each(obj, iterator, context) {\n  var i;\n\n  if (!obj) {\n    return;\n  }\n\n  if (obj.forEach) {\n    obj.forEach(iterator, context);\n  } else if (obj.length !== undefined) {\n    i = 0;\n\n    while (i < obj.length) {\n      iterator.call(context, obj[i], i, obj);\n      i++;\n    }\n  } else {\n    for (i in obj) {\n      obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n    }\n  }\n}\n\n/**\n * @private\n * let a boolean value also be a function that must return a boolean\n * this first item in args will be used as the context\n * @param {Boolean|Function} val\n * @param {Array} [args]\n * @returns {Boolean}\n */\n\nfunction boolOrFn(val, args) {\n  if (typeof val === TYPE_FUNCTION) {\n    return val.apply(args ? args[0] || undefined : undefined, args);\n  }\n\n  return val;\n}\n\n/**\n * @private\n * small indexOf wrapper\n * @param {String} str\n * @param {String} find\n * @returns {Boolean} found\n */\nfunction inStr(str, find) {\n  return str.indexOf(find) > -1;\n}\n\n/**\n * @private\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n * @param {String} actions\n * @returns {*}\n */\n\nfunction cleanTouchActions(actions) {\n  // none\n  if (inStr(actions, TOUCH_ACTION_NONE)) {\n    return TOUCH_ACTION_NONE;\n  }\n\n  var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n  var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y); // if both pan-x and pan-y are set (different recognizers\n  // for different directions, e.g. horizontal pan but vertical swipe?)\n  // we need none (as otherwise with pan-x pan-y combined none of these\n  // recognizers will work, since the browser would handle all panning\n\n  if (hasPanX && hasPanY) {\n    return TOUCH_ACTION_NONE;\n  } // pan-x OR pan-y\n\n\n  if (hasPanX || hasPanY) {\n    return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n  } // manipulation\n\n\n  if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n    return TOUCH_ACTION_MANIPULATION;\n  }\n\n  return TOUCH_ACTION_AUTO;\n}\n\n/**\n * @private\n * Touch Action\n * sets the touchAction property or uses the js alternative\n * @param {Manager} manager\n * @param {String} value\n * @constructor\n */\n\nvar TouchAction =\n/*#__PURE__*/\nfunction () {\n  function TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n  }\n  /**\n   * @private\n   * set the touchAction value on the element or enable the polyfill\n   * @param {String} value\n   */\n\n\n  var _proto = TouchAction.prototype;\n\n  _proto.set = function set(value) {\n    // find out the touch-action by the event handlers\n    if (value === TOUCH_ACTION_COMPUTE) {\n      value = this.compute();\n    }\n\n    if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n      this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n    }\n\n    this.actions = value.toLowerCase().trim();\n  };\n  /**\n   * @private\n   * just re-set the touchAction value\n   */\n\n\n  _proto.update = function update() {\n    this.set(this.manager.options.touchAction);\n  };\n  /**\n   * @private\n   * compute the value for the touchAction property based on the recognizer's settings\n   * @returns {String} value\n   */\n\n\n  _proto.compute = function compute() {\n    var actions = [];\n    each(this.manager.recognizers, function (recognizer) {\n      if (boolOrFn(recognizer.options.enable, [recognizer])) {\n        actions = actions.concat(recognizer.getTouchAction());\n      }\n    });\n    return cleanTouchActions(actions.join(' '));\n  };\n  /**\n   * @private\n   * this method is called on each input cycle and provides the preventing of the browser behavior\n   * @param {Object} input\n   */\n\n\n  _proto.preventDefaults = function preventDefaults(input) {\n    var srcEvent = input.srcEvent;\n    var direction = input.offsetDirection; // if the touch action did prevented once this session\n\n    if (this.manager.session.prevented) {\n      srcEvent.preventDefault();\n      return;\n    }\n\n    var actions = this.actions;\n    var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\n    if (hasNone) {\n      // do not prevent defaults if this is a tap gesture\n      var isTapPointer = input.pointers.length === 1;\n      var isTapMovement = input.distance < 2;\n      var isTapTouchTime = input.deltaTime < 250;\n\n      if (isTapPointer && isTapMovement && isTapTouchTime) {\n        return;\n      }\n    }\n\n    if (hasPanX && hasPanY) {\n      // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n      return;\n    }\n\n    if (hasNone || hasPanY && direction & DIRECTION_HORIZONTAL || hasPanX && direction & DIRECTION_VERTICAL) {\n      return this.preventSrc(srcEvent);\n    }\n  };\n  /**\n   * @private\n   * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n   * @param {Object} srcEvent\n   */\n\n\n  _proto.preventSrc = function preventSrc(srcEvent) {\n    this.manager.session.prevented = true;\n    srcEvent.preventDefault();\n  };\n\n  return TouchAction;\n}();\n\n/**\n * @private\n * find if a node is in the given parent\n * @method hasParent\n * @param {HTMLElement} node\n * @param {HTMLElement} parent\n * @return {Boolean} found\n */\nfunction hasParent(node, parent) {\n  while (node) {\n    if (node === parent) {\n      return true;\n    }\n\n    node = node.parentNode;\n  }\n\n  return false;\n}\n\n/**\n * @private\n * get the center of all the pointers\n * @param {Array} pointers\n * @return {Object} center contains `x` and `y` properties\n */\n\nfunction getCenter(pointers) {\n  var pointersLength = pointers.length; // no need to loop when only one touch\n\n  if (pointersLength === 1) {\n    return {\n      x: round(pointers[0].clientX),\n      y: round(pointers[0].clientY)\n    };\n  }\n\n  var x = 0;\n  var y = 0;\n  var i = 0;\n\n  while (i < pointersLength) {\n    x += pointers[i].clientX;\n    y += pointers[i].clientY;\n    i++;\n  }\n\n  return {\n    x: round(x / pointersLength),\n    y: round(y / pointersLength)\n  };\n}\n\n/**\n * @private\n * create a simple clone from the input used for storage of firstInput and firstMultiple\n * @param {Object} input\n * @returns {Object} clonedInputData\n */\n\nfunction simpleCloneInputData(input) {\n  // make a simple copy of the pointers because we will get a reference if we don't\n  // we only need clientXY for the calculations\n  var pointers = [];\n  var i = 0;\n\n  while (i < input.pointers.length) {\n    pointers[i] = {\n      clientX: round(input.pointers[i].clientX),\n      clientY: round(input.pointers[i].clientY)\n    };\n    i++;\n  }\n\n  return {\n    timeStamp: now(),\n    pointers: pointers,\n    center: getCenter(pointers),\n    deltaX: input.deltaX,\n    deltaY: input.deltaY\n  };\n}\n\n/**\n * @private\n * calculate the absolute distance between two points\n * @param {Object} p1 {x, y}\n * @param {Object} p2 {x, y}\n * @param {Array} [props] containing x and y keys\n * @return {Number} distance\n */\n\nfunction getDistance(p1, p2, props) {\n  if (!props) {\n    props = PROPS_XY;\n  }\n\n  var x = p2[props[0]] - p1[props[0]];\n  var y = p2[props[1]] - p1[props[1]];\n  return Math.sqrt(x * x + y * y);\n}\n\n/**\n * @private\n * calculate the angle between two coordinates\n * @param {Object} p1\n * @param {Object} p2\n * @param {Array} [props] containing x and y keys\n * @return {Number} angle\n */\n\nfunction getAngle(p1, p2, props) {\n  if (!props) {\n    props = PROPS_XY;\n  }\n\n  var x = p2[props[0]] - p1[props[0]];\n  var y = p2[props[1]] - p1[props[1]];\n  return Math.atan2(y, x) * 180 / Math.PI;\n}\n\n/**\n * @private\n * get the direction between two points\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */\n\nfunction getDirection(x, y) {\n  if (x === y) {\n    return DIRECTION_NONE;\n  }\n\n  if (abs(x) >= abs(y)) {\n    return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n  }\n\n  return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n\nfunction computeDeltaXY(session, input) {\n  var center = input.center; // let { offsetDelta:offset = {}, prevDelta = {}, prevInput = {} } = session;\n  // jscs throwing error on defalut destructured values and without defaults tests fail\n\n  var offset = session.offsetDelta || {};\n  var prevDelta = session.prevDelta || {};\n  var prevInput = session.prevInput || {};\n\n  if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n    prevDelta = session.prevDelta = {\n      x: prevInput.deltaX || 0,\n      y: prevInput.deltaY || 0\n    };\n    offset = session.offsetDelta = {\n      x: center.x,\n      y: center.y\n    };\n  }\n\n  input.deltaX = prevDelta.x + (center.x - offset.x);\n  input.deltaY = prevDelta.y + (center.y - offset.y);\n}\n\n/**\n * @private\n * calculate the velocity between two points. unit is in px per ms.\n * @param {Number} deltaTime\n * @param {Number} x\n * @param {Number} y\n * @return {Object} velocity `x` and `y`\n */\nfunction getVelocity(deltaTime, x, y) {\n  return {\n    x: x / deltaTime || 0,\n    y: y / deltaTime || 0\n  };\n}\n\n/**\n * @private\n * calculate the scale factor between two pointersets\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} scale\n */\n\nfunction getScale(start, end) {\n  return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n}\n\n/**\n * @private\n * calculate the rotation degrees between two pointersets\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} rotation\n */\n\nfunction getRotation(start, end) {\n  return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n}\n\n/**\n * @private\n * velocity is calculated every x ms\n * @param {Object} session\n * @param {Object} input\n */\n\nfunction computeIntervalInputData(session, input) {\n  var last = session.lastInterval || input;\n  var deltaTime = input.timeStamp - last.timeStamp;\n  var velocity;\n  var velocityX;\n  var velocityY;\n  var direction;\n\n  if (input.eventType !== INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n    var deltaX = input.deltaX - last.deltaX;\n    var deltaY = input.deltaY - last.deltaY;\n    var v = getVelocity(deltaTime, deltaX, deltaY);\n    velocityX = v.x;\n    velocityY = v.y;\n    velocity = abs(v.x) > abs(v.y) ? v.x : v.y;\n    direction = getDirection(deltaX, deltaY);\n    session.lastInterval = input;\n  } else {\n    // use latest velocity info if it doesn't overtake a minimum period\n    velocity = last.velocity;\n    velocityX = last.velocityX;\n    velocityY = last.velocityY;\n    direction = last.direction;\n  }\n\n  input.velocity = velocity;\n  input.velocityX = velocityX;\n  input.velocityY = velocityY;\n  input.direction = direction;\n}\n\n/**\n* @private\n * extend the data with some usable properties like scale, rotate, velocity etc\n * @param {Object} manager\n * @param {Object} input\n */\n\nfunction computeInputData(manager, input) {\n  var session = manager.session;\n  var pointers = input.pointers;\n  var pointersLength = pointers.length; // store the first input to calculate the distance and direction\n\n  if (!session.firstInput) {\n    session.firstInput = simpleCloneInputData(input);\n  } // to compute scale and rotation we need to store the multiple touches\n\n\n  if (pointersLength > 1 && !session.firstMultiple) {\n    session.firstMultiple = simpleCloneInputData(input);\n  } else if (pointersLength === 1) {\n    session.firstMultiple = false;\n  }\n\n  var firstInput = session.firstInput,\n      firstMultiple = session.firstMultiple;\n  var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n  var center = input.center = getCenter(pointers);\n  input.timeStamp = now();\n  input.deltaTime = input.timeStamp - firstInput.timeStamp;\n  input.angle = getAngle(offsetCenter, center);\n  input.distance = getDistance(offsetCenter, center);\n  computeDeltaXY(session, input);\n  input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n  var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n  input.overallVelocityX = overallVelocity.x;\n  input.overallVelocityY = overallVelocity.y;\n  input.overallVelocity = abs(overallVelocity.x) > abs(overallVelocity.y) ? overallVelocity.x : overallVelocity.y;\n  input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n  input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n  input.maxPointers = !session.prevInput ? input.pointers.length : input.pointers.length > session.prevInput.maxPointers ? input.pointers.length : session.prevInput.maxPointers;\n  computeIntervalInputData(session, input); // find the correct target\n\n  var target = manager.element;\n\n  if (hasParent(input.srcEvent.target, target)) {\n    target = input.srcEvent.target;\n  }\n\n  input.target = target;\n}\n\n/**\n * @private\n * handle input events\n * @param {Manager} manager\n * @param {String} eventType\n * @param {Object} input\n */\n\nfunction inputHandler(manager, eventType, input) {\n  var pointersLen = input.pointers.length;\n  var changedPointersLen = input.changedPointers.length;\n  var isFirst = eventType & INPUT_START && pointersLen - changedPointersLen === 0;\n  var isFinal = eventType & (INPUT_END | INPUT_CANCEL) && pointersLen - changedPointersLen === 0;\n  input.isFirst = !!isFirst;\n  input.isFinal = !!isFinal;\n\n  if (isFirst) {\n    manager.session = {};\n  } // source event is the normalized value of the domEvents\n  // like 'touchstart, mouseup, pointerdown'\n\n\n  input.eventType = eventType; // compute scale, rotation etc\n\n  computeInputData(manager, input); // emit secret event\n\n  manager.emit('hammer.input', input);\n  manager.recognize(input);\n  manager.session.prevInput = input;\n}\n\n/**\n * @private\n * split string on whitespace\n * @param {String} str\n * @returns {Array} words\n */\nfunction splitStr(str) {\n  return str.trim().split(/\\s+/g);\n}\n\n/**\n * @private\n * addEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\n\nfunction addEventListeners(target, types, handler) {\n  each(splitStr(types), function (type) {\n    target.addEventListener(type, handler, false);\n  });\n}\n\n/**\n * @private\n * removeEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\n\nfunction removeEventListeners(target, types, handler) {\n  each(splitStr(types), function (type) {\n    target.removeEventListener(type, handler, false);\n  });\n}\n\n/**\n * @private\n * get the window object of an element\n * @param {HTMLElement} element\n * @returns {DocumentView|Window}\n */\nfunction getWindowForElement(element) {\n  var doc = element.ownerDocument || element;\n  return doc.defaultView || doc.parentWindow || window;\n}\n\n/**\n * @private\n * create new input type manager\n * @param {Manager} manager\n * @param {Function} callback\n * @returns {Input}\n * @constructor\n */\n\nvar Input =\n/*#__PURE__*/\nfunction () {\n  function Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget; // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n\n    this.domHandler = function (ev) {\n      if (boolOrFn(manager.options.enable, [manager])) {\n        self.handler(ev);\n      }\n    };\n\n    this.init();\n  }\n  /**\n   * @private\n   * should handle the inputEvent data and trigger the callback\n   * @virtual\n   */\n\n\n  var _proto = Input.prototype;\n\n  _proto.handler = function handler() {};\n  /**\n   * @private\n   * bind the events\n   */\n\n\n  _proto.init = function init() {\n    this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n    this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n    this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n  };\n  /**\n   * @private\n   * unbind the events\n   */\n\n\n  _proto.destroy = function destroy() {\n    this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n    this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n    this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n  };\n\n  return Input;\n}();\n\n/**\n * @private\n * find if a array contains the object using indexOf or a simple polyFill\n * @param {Array} src\n * @param {String} find\n * @param {String} [findByKey]\n * @return {Boolean|Number} false when not found, or the index\n */\nfunction inArray(src, find, findByKey) {\n  if (src.indexOf && !findByKey) {\n    return src.indexOf(find);\n  } else {\n    var i = 0;\n\n    while (i < src.length) {\n      if (findByKey && src[i][findByKey] == find || !findByKey && src[i] === find) {\n        // do not use === here, test fails\n        return i;\n      }\n\n      i++;\n    }\n\n    return -1;\n  }\n}\n\nvar POINTER_INPUT_MAP = {\n  pointerdown: INPUT_START,\n  pointermove: INPUT_MOVE,\n  pointerup: INPUT_END,\n  pointercancel: INPUT_CANCEL,\n  pointerout: INPUT_CANCEL\n}; // in IE10 the pointer types is defined as an enum\n\nvar IE10_POINTER_TYPE_ENUM = {\n  2: INPUT_TYPE_TOUCH,\n  3: INPUT_TYPE_PEN,\n  4: INPUT_TYPE_MOUSE,\n  5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n\n};\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel'; // IE10 has prefixed support, and case-sensitive\n\nif (win.MSPointerEvent && !win.PointerEvent) {\n  POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n  POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n}\n/**\n * @private\n * Pointer events input\n * @constructor\n * @extends Input\n */\n\n\nvar PointerEventInput =\n/*#__PURE__*/\nfunction (_Input) {\n  _inheritsLoose(PointerEventInput, _Input);\n\n  function PointerEventInput() {\n    var _this;\n\n    var proto = PointerEventInput.prototype;\n    proto.evEl = POINTER_ELEMENT_EVENTS;\n    proto.evWin = POINTER_WINDOW_EVENTS;\n    _this = _Input.apply(this, arguments) || this;\n    _this.store = _this.manager.session.pointerEvents = [];\n    return _this;\n  }\n  /**\n   * @private\n   * handle mouse events\n   * @param {Object} ev\n   */\n\n\n  var _proto = PointerEventInput.prototype;\n\n  _proto.handler = function handler(ev) {\n    var store = this.store;\n    var removePointer = false;\n    var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n    var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n    var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n    var isTouch = pointerType === INPUT_TYPE_TOUCH; // get index of the event in the store\n\n    var storeIndex = inArray(store, ev.pointerId, 'pointerId'); // start and mouse must be down\n\n    if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n      if (storeIndex < 0) {\n        store.push(ev);\n        storeIndex = store.length - 1;\n      }\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n      removePointer = true;\n    } // it not found, so the pointer hasn't been down (so it's probably a hover)\n\n\n    if (storeIndex < 0) {\n      return;\n    } // update the event in the store\n\n\n    store[storeIndex] = ev;\n    this.callback(this.manager, eventType, {\n      pointers: store,\n      changedPointers: [ev],\n      pointerType: pointerType,\n      srcEvent: ev\n    });\n\n    if (removePointer) {\n      // remove from the store\n      store.splice(storeIndex, 1);\n    }\n  };\n\n  return PointerEventInput;\n}(Input);\n\n/**\n * @private\n * convert array-like objects to real arrays\n * @param {Object} obj\n * @returns {Array}\n */\nfunction toArray(obj) {\n  return Array.prototype.slice.call(obj, 0);\n}\n\n/**\n * @private\n * unique array with objects based on a key (like 'id') or just by the array's value\n * @param {Array} src [{id:1},{id:2},{id:1}]\n * @param {String} [key]\n * @param {Boolean} [sort=False]\n * @returns {Array} [{id:1},{id:2}]\n */\n\nfunction uniqueArray(src, key, sort) {\n  var results = [];\n  var values = [];\n  var i = 0;\n\n  while (i < src.length) {\n    var val = key ? src[i][key] : src[i];\n\n    if (inArray(values, val) < 0) {\n      results.push(src[i]);\n    }\n\n    values[i] = val;\n    i++;\n  }\n\n  if (sort) {\n    if (!key) {\n      results = results.sort();\n    } else {\n      results = results.sort(function (a, b) {\n        return a[key] > b[key];\n      });\n    }\n  }\n\n  return results;\n}\n\nvar TOUCH_INPUT_MAP = {\n  touchstart: INPUT_START,\n  touchmove: INPUT_MOVE,\n  touchend: INPUT_END,\n  touchcancel: INPUT_CANCEL\n};\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n/**\n * @private\n * Multi-user touch events input\n * @constructor\n * @extends Input\n */\n\nvar TouchInput =\n/*#__PURE__*/\nfunction (_Input) {\n  _inheritsLoose(TouchInput, _Input);\n\n  function TouchInput() {\n    var _this;\n\n    TouchInput.prototype.evTarget = TOUCH_TARGET_EVENTS;\n    _this = _Input.apply(this, arguments) || this;\n    _this.targetIds = {}; // this.evTarget = TOUCH_TARGET_EVENTS;\n\n    return _this;\n  }\n\n  var _proto = TouchInput.prototype;\n\n  _proto.handler = function handler(ev) {\n    var type = TOUCH_INPUT_MAP[ev.type];\n    var touches = getTouches.call(this, ev, type);\n\n    if (!touches) {\n      return;\n    }\n\n    this.callback(this.manager, type, {\n      pointers: touches[0],\n      changedPointers: touches[1],\n      pointerType: INPUT_TYPE_TOUCH,\n      srcEvent: ev\n    });\n  };\n\n  return TouchInput;\n}(Input);\n\nfunction getTouches(ev, type) {\n  var allTouches = toArray(ev.touches);\n  var targetIds = this.targetIds; // when there is only one touch, the process can be simplified\n\n  if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n    targetIds[allTouches[0].identifier] = true;\n    return [allTouches, allTouches];\n  }\n\n  var i;\n  var targetTouches;\n  var changedTouches = toArray(ev.changedTouches);\n  var changedTargetTouches = [];\n  var target = this.target; // get target touches from touches\n\n  targetTouches = allTouches.filter(function (touch) {\n    return hasParent(touch.target, target);\n  }); // collect touches\n\n  if (type === INPUT_START) {\n    i = 0;\n\n    while (i < targetTouches.length) {\n      targetIds[targetTouches[i].identifier] = true;\n      i++;\n    }\n  } // filter changed touches to only contain touches that exist in the collected target ids\n\n\n  i = 0;\n\n  while (i < changedTouches.length) {\n    if (targetIds[changedTouches[i].identifier]) {\n      changedTargetTouches.push(changedTouches[i]);\n    } // cleanup removed touches\n\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n      delete targetIds[changedTouches[i].identifier];\n    }\n\n    i++;\n  }\n\n  if (!changedTargetTouches.length) {\n    return;\n  }\n\n  return [// merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n  uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true), changedTargetTouches];\n}\n\nvar MOUSE_INPUT_MAP = {\n  mousedown: INPUT_START,\n  mousemove: INPUT_MOVE,\n  mouseup: INPUT_END\n};\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n/**\n * @private\n * Mouse events input\n * @constructor\n * @extends Input\n */\n\nvar MouseInput =\n/*#__PURE__*/\nfunction (_Input) {\n  _inheritsLoose(MouseInput, _Input);\n\n  function MouseInput() {\n    var _this;\n\n    var proto = MouseInput.prototype;\n    proto.evEl = MOUSE_ELEMENT_EVENTS;\n    proto.evWin = MOUSE_WINDOW_EVENTS;\n    _this = _Input.apply(this, arguments) || this;\n    _this.pressed = false; // mousedown state\n\n    return _this;\n  }\n  /**\n   * @private\n   * handle mouse events\n   * @param {Object} ev\n   */\n\n\n  var _proto = MouseInput.prototype;\n\n  _proto.handler = function handler(ev) {\n    var eventType = MOUSE_INPUT_MAP[ev.type]; // on start we want to have the left mouse button down\n\n    if (eventType & INPUT_START && ev.button === 0) {\n      this.pressed = true;\n    }\n\n    if (eventType & INPUT_MOVE && ev.which !== 1) {\n      eventType = INPUT_END;\n    } // mouse must be down\n\n\n    if (!this.pressed) {\n      return;\n    }\n\n    if (eventType & INPUT_END) {\n      this.pressed = false;\n    }\n\n    this.callback(this.manager, eventType, {\n      pointers: [ev],\n      changedPointers: [ev],\n      pointerType: INPUT_TYPE_MOUSE,\n      srcEvent: ev\n    });\n  };\n\n  return MouseInput;\n}(Input);\n\n/**\n * @private\n * Combined touch and mouse input\n *\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n * This because touch devices also emit mouse events while doing a touch.\n *\n * @constructor\n * @extends Input\n */\n\nvar DEDUP_TIMEOUT = 2500;\nvar DEDUP_DISTANCE = 25;\n\nfunction setLastTouch(eventData) {\n  var _eventData$changedPoi = eventData.changedPointers,\n      touch = _eventData$changedPoi[0];\n\n  if (touch.identifier === this.primaryTouch) {\n    var lastTouch = {\n      x: touch.clientX,\n      y: touch.clientY\n    };\n    var lts = this.lastTouches;\n    this.lastTouches.push(lastTouch);\n\n    var removeLastTouch = function removeLastTouch() {\n      var i = lts.indexOf(lastTouch);\n\n      if (i > -1) {\n        lts.splice(i, 1);\n      }\n    };\n\n    setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n  }\n}\n\nfunction recordTouches(eventType, eventData) {\n  if (eventType & INPUT_START) {\n    this.primaryTouch = eventData.changedPointers[0].identifier;\n    setLastTouch.call(this, eventData);\n  } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n    setLastTouch.call(this, eventData);\n  }\n}\n\nfunction isSyntheticEvent(eventData) {\n  var x = eventData.srcEvent.clientX;\n  var y = eventData.srcEvent.clientY;\n\n  for (var i = 0; i < this.lastTouches.length; i++) {\n    var t = this.lastTouches[i];\n    var dx = Math.abs(x - t.x);\n    var dy = Math.abs(y - t.y);\n\n    if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nvar TouchMouseInput =\n/*#__PURE__*/\nfunction () {\n  var TouchMouseInput =\n  /*#__PURE__*/\n  function (_Input) {\n    _inheritsLoose(TouchMouseInput, _Input);\n\n    function TouchMouseInput(_manager, callback) {\n      var _this;\n\n      _this = _Input.call(this, _manager, callback) || this;\n\n      _this.handler = function (manager, inputEvent, inputData) {\n        var isTouch = inputData.pointerType === INPUT_TYPE_TOUCH;\n        var isMouse = inputData.pointerType === INPUT_TYPE_MOUSE;\n\n        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n          return;\n        } // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n\n\n        if (isTouch) {\n          recordTouches.call(_assertThisInitialized(_assertThisInitialized(_this)), inputEvent, inputData);\n        } else if (isMouse && isSyntheticEvent.call(_assertThisInitialized(_assertThisInitialized(_this)), inputData)) {\n          return;\n        }\n\n        _this.callback(manager, inputEvent, inputData);\n      };\n\n      _this.touch = new TouchInput(_this.manager, _this.handler);\n      _this.mouse = new MouseInput(_this.manager, _this.handler);\n      _this.primaryTouch = null;\n      _this.lastTouches = [];\n      return _this;\n    }\n    /**\n     * @private\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */\n\n\n    var _proto = TouchMouseInput.prototype;\n\n    /**\n     * @private\n     * remove the event listeners\n     */\n    _proto.destroy = function destroy() {\n      this.touch.destroy();\n      this.mouse.destroy();\n    };\n\n    return TouchMouseInput;\n  }(Input);\n\n  return TouchMouseInput;\n}();\n\n/**\n * @private\n * create new input type manager\n * called by the Manager constructor\n * @param {Hammer} manager\n * @returns {Input}\n */\n\nfunction createInputInstance(manager) {\n  var Type; // let inputClass = manager.options.inputClass;\n\n  var inputClass = manager.options.inputClass;\n\n  if (inputClass) {\n    Type = inputClass;\n  } else if (SUPPORT_POINTER_EVENTS) {\n    Type = PointerEventInput;\n  } else if (SUPPORT_ONLY_TOUCH) {\n    Type = TouchInput;\n  } else if (!SUPPORT_TOUCH) {\n    Type = MouseInput;\n  } else {\n    Type = TouchMouseInput;\n  }\n\n  return new Type(manager, inputHandler);\n}\n\n/**\n * @private\n * if the argument is an array, we want to execute the fn on each entry\n * if it aint an array we don't want to do a thing.\n * this is used by all the methods that accept a single and array argument.\n * @param {*|Array} arg\n * @param {String} fn\n * @param {Object} [context]\n * @returns {Boolean}\n */\n\nfunction invokeArrayArg(arg, fn, context) {\n  if (Array.isArray(arg)) {\n    each(arg, context[fn], context);\n    return true;\n  }\n\n  return false;\n}\n\nvar STATE_POSSIBLE = 1;\nvar STATE_BEGAN = 2;\nvar STATE_CHANGED = 4;\nvar STATE_ENDED = 8;\nvar STATE_RECOGNIZED = STATE_ENDED;\nvar STATE_CANCELLED = 16;\nvar STATE_FAILED = 32;\n\n/**\n * @private\n * get a unique id\n * @returns {number} uniqueId\n */\nvar _uniqueId = 1;\nfunction uniqueId() {\n  return _uniqueId++;\n}\n\n/**\n * @private\n * get a recognizer by name if it is bound to a manager\n * @param {Recognizer|String} otherRecognizer\n * @param {Recognizer} recognizer\n * @returns {Recognizer}\n */\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n  var manager = recognizer.manager;\n\n  if (manager) {\n    return manager.get(otherRecognizer);\n  }\n\n  return otherRecognizer;\n}\n\n/**\n * @private\n * get a usable string, used as event postfix\n * @param {constant} state\n * @returns {String} state\n */\n\nfunction stateStr(state) {\n  if (state & STATE_CANCELLED) {\n    return 'cancel';\n  } else if (state & STATE_ENDED) {\n    return 'end';\n  } else if (state & STATE_CHANGED) {\n    return 'move';\n  } else if (state & STATE_BEGAN) {\n    return 'start';\n  }\n\n  return '';\n}\n\n/**\n * @private\n * Recognizer flow explained; *\n * All recognizers have the initial state of POSSIBLE when a input session starts.\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\n *\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n * which determines with state it should be.\n *\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n * POSSIBLE to give it another change on the next cycle.\n *\n *               Possible\n *                  |\n *            +-----+---------------+\n *            |                     |\n *      +-----+-----+               |\n *      |           |               |\n *   Failed      Cancelled          |\n *                          +-------+------+\n *                          |              |\n *                      Recognized       Began\n *                                         |\n *                                      Changed\n *                                         |\n *                                  Ended/Recognized\n */\n\n/**\n * @private\n * Recognizer\n * Every recognizer needs to extend from this class.\n * @constructor\n * @param {Object} options\n */\n\nvar Recognizer =\n/*#__PURE__*/\nfunction () {\n  function Recognizer(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.options = _extends({\n      enable: true\n    }, options);\n    this.id = uniqueId();\n    this.manager = null; // default is enable true\n\n    this.state = STATE_POSSIBLE;\n    this.simultaneous = {};\n    this.requireFail = [];\n  }\n  /**\n   * @private\n   * set options\n   * @param {Object} options\n   * @return {Recognizer}\n   */\n\n\n  var _proto = Recognizer.prototype;\n\n  _proto.set = function set(options) {\n    assign$1(this.options, options); // also update the touchAction, in case something changed about the directions/enabled state\n\n    this.manager && this.manager.touchAction.update();\n    return this;\n  };\n  /**\n   * @private\n   * recognize simultaneous with an other recognizer.\n   * @param {Recognizer} otherRecognizer\n   * @returns {Recognizer} this\n   */\n\n\n  _proto.recognizeWith = function recognizeWith(otherRecognizer) {\n    if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n      return this;\n    }\n\n    var simultaneous = this.simultaneous;\n    otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n\n    if (!simultaneous[otherRecognizer.id]) {\n      simultaneous[otherRecognizer.id] = otherRecognizer;\n      otherRecognizer.recognizeWith(this);\n    }\n\n    return this;\n  };\n  /**\n   * @private\n   * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n   * @param {Recognizer} otherRecognizer\n   * @returns {Recognizer} this\n   */\n\n\n  _proto.dropRecognizeWith = function dropRecognizeWith(otherRecognizer) {\n    if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n      return this;\n    }\n\n    otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n    delete this.simultaneous[otherRecognizer.id];\n    return this;\n  };\n  /**\n   * @private\n   * recognizer can only run when an other is failing\n   * @param {Recognizer} otherRecognizer\n   * @returns {Recognizer} this\n   */\n\n\n  _proto.requireFailure = function requireFailure(otherRecognizer) {\n    if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n      return this;\n    }\n\n    var requireFail = this.requireFail;\n    otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n\n    if (inArray(requireFail, otherRecognizer) === -1) {\n      requireFail.push(otherRecognizer);\n      otherRecognizer.requireFailure(this);\n    }\n\n    return this;\n  };\n  /**\n   * @private\n   * drop the requireFailure link. it does not remove the link on the other recognizer.\n   * @param {Recognizer} otherRecognizer\n   * @returns {Recognizer} this\n   */\n\n\n  _proto.dropRequireFailure = function dropRequireFailure(otherRecognizer) {\n    if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n      return this;\n    }\n\n    otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n    var index = inArray(this.requireFail, otherRecognizer);\n\n    if (index > -1) {\n      this.requireFail.splice(index, 1);\n    }\n\n    return this;\n  };\n  /**\n   * @private\n   * has require failures boolean\n   * @returns {boolean}\n   */\n\n\n  _proto.hasRequireFailures = function hasRequireFailures() {\n    return this.requireFail.length > 0;\n  };\n  /**\n   * @private\n   * if the recognizer can recognize simultaneous with an other recognizer\n   * @param {Recognizer} otherRecognizer\n   * @returns {Boolean}\n   */\n\n\n  _proto.canRecognizeWith = function canRecognizeWith(otherRecognizer) {\n    return !!this.simultaneous[otherRecognizer.id];\n  };\n  /**\n   * @private\n   * You should use `tryEmit` instead of `emit` directly to check\n   * that all the needed recognizers has failed before emitting.\n   * @param {Object} input\n   */\n\n\n  _proto.emit = function emit(input) {\n    var self = this;\n    var state = this.state;\n\n    function emit(event) {\n      self.manager.emit(event, input);\n    } // 'panstart' and 'panmove'\n\n\n    if (state < STATE_ENDED) {\n      emit(self.options.event + stateStr(state));\n    }\n\n    emit(self.options.event); // simple 'eventName' events\n\n    if (input.additionalEvent) {\n      // additional event(panleft, panright, pinchin, pinchout...)\n      emit(input.additionalEvent);\n    } // panend and pancancel\n\n\n    if (state >= STATE_ENDED) {\n      emit(self.options.event + stateStr(state));\n    }\n  };\n  /**\n   * @private\n   * Check that all the require failure recognizers has failed,\n   * if true, it emits a gesture event,\n   * otherwise, setup the state to FAILED.\n   * @param {Object} input\n   */\n\n\n  _proto.tryEmit = function tryEmit(input) {\n    if (this.canEmit()) {\n      return this.emit(input);\n    } // it's failing anyway\n\n\n    this.state = STATE_FAILED;\n  };\n  /**\n   * @private\n   * can we emit?\n   * @returns {boolean}\n   */\n\n\n  _proto.canEmit = function canEmit() {\n    var i = 0;\n\n    while (i < this.requireFail.length) {\n      if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n        return false;\n      }\n\n      i++;\n    }\n\n    return true;\n  };\n  /**\n   * @private\n   * update the recognizer\n   * @param {Object} inputData\n   */\n\n\n  _proto.recognize = function recognize(inputData) {\n    // make a new copy of the inputData\n    // so we can change the inputData without messing up the other recognizers\n    var inputDataClone = assign$1({}, inputData); // is is enabled and allow recognizing?\n\n    if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n      this.reset();\n      this.state = STATE_FAILED;\n      return;\n    } // reset when we've reached the end\n\n\n    if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n      this.state = STATE_POSSIBLE;\n    }\n\n    this.state = this.process(inputDataClone); // the recognizer has recognized a gesture\n    // so trigger an event\n\n    if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n      this.tryEmit(inputDataClone);\n    }\n  };\n  /**\n   * @private\n   * return the state of the recognizer\n   * the actual recognizing happens in this method\n   * @virtual\n   * @param {Object} inputData\n   * @returns {constant} STATE\n   */\n\n  /* jshint ignore:start */\n\n\n  _proto.process = function process(inputData) {};\n  /* jshint ignore:end */\n\n  /**\n   * @private\n   * return the preferred touch-action\n   * @virtual\n   * @returns {Array}\n   */\n\n\n  _proto.getTouchAction = function getTouchAction() {};\n  /**\n   * @private\n   * called when the gesture isn't allowed to recognize\n   * like when another is being recognized or it is disabled\n   * @virtual\n   */\n\n\n  _proto.reset = function reset() {};\n\n  return Recognizer;\n}();\n\nvar defaults = {\n  /**\n   * @private\n   * set if DOM events are being triggered.\n   * But this is slower and unused by simple implementations, so disabled by default.\n   * @type {Boolean}\n   * @default false\n   */\n  domEvents: false,\n\n  /**\n   * @private\n   * The value for the touchAction property/fallback.\n   * When set to `compute` it will magically set the correct value based on the added recognizers.\n   * @type {String}\n   * @default compute\n   */\n  touchAction: TOUCH_ACTION_COMPUTE,\n\n  /**\n   * @private\n   * @type {Boolean}\n   * @default true\n   */\n  enable: true,\n\n  /**\n   * @private\n   * EXPERIMENTAL FEATURE -- can be removed/changed\n   * Change the parent input target element.\n   * If Null, then it is being set the to main element.\n   * @type {Null|EventTarget}\n   * @default null\n   */\n  inputTarget: null,\n\n  /**\n   * @private\n   * force an input class\n   * @type {Null|Function}\n   * @default null\n   */\n  inputClass: null,\n\n  /**\n   * @private\n   * Default recognizer setup when calling `Hammer()`\n   * When creating a new Manager these will be skipped.\n   * @type {Array}\n   */\n  preset: [],\n\n  /**\n   * @private\n   * Some CSS properties can be used to improve the working of Hammer.\n   * Add them to this method and they will be set when creating a new Manager.\n   * @namespace\n   */\n  cssProps: {\n    /**\n     * @private\n     * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n     * @type {String}\n     * @default 'none'\n     */\n    userSelect: \"none\",\n\n    /**\n     * @private\n     * Disable the Windows Phone grippers when pressing an element.\n     * @type {String}\n     * @default 'none'\n     */\n    touchSelect: \"none\",\n\n    /**\n     * @private\n     * Disables the default callout shown when you touch and hold a touch target.\n     * On iOS, when you touch and hold a touch target such as a link, Safari displays\n     * a callout containing information about the link. This property allows you to disable that callout.\n     * @type {String}\n     * @default 'none'\n     */\n    touchCallout: \"none\",\n\n    /**\n     * @private\n     * Specifies whether zooming is enabled. Used by IE10>\n     * @type {String}\n     * @default 'none'\n     */\n    contentZooming: \"none\",\n\n    /**\n     * @private\n     * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n     * @type {String}\n     * @default 'none'\n     */\n    userDrag: \"none\",\n\n    /**\n     * @private\n     * Overrides the highlight color shown when the user taps a link or a JavaScript\n     * clickable element in iOS. This property obeys the alpha value, if specified.\n     * @type {String}\n     * @default 'rgba(0,0,0,0)'\n     */\n    tapHighlightColor: \"rgba(0,0,0,0)\"\n  }\n};\n\nvar STOP = 1;\nvar FORCED_STOP = 2;\n/**\n * @private\n * add/remove the css properties as defined in manager.options.cssProps\n * @param {Manager} manager\n * @param {Boolean} add\n */\n\nfunction toggleCssProps(manager, add) {\n  var element = manager.element;\n\n  if (!element.style) {\n    return;\n  }\n\n  var prop;\n  each(manager.options.cssProps, function (value, name) {\n    prop = prefixed(element.style, name);\n\n    if (add) {\n      manager.oldCssProps[prop] = element.style[prop];\n      element.style[prop] = value;\n    } else {\n      element.style[prop] = manager.oldCssProps[prop] || \"\";\n    }\n  });\n\n  if (!add) {\n    manager.oldCssProps = {};\n  }\n}\n/**\n * @private\n * trigger dom event\n * @param {String} event\n * @param {Object} data\n */\n\n\nfunction triggerDomEvent(event, data) {\n  var gestureEvent = document.createEvent(\"Event\");\n  gestureEvent.initEvent(event, true, true);\n  gestureEvent.gesture = data;\n  data.target.dispatchEvent(gestureEvent);\n}\n/**\n* @private\n * Manager\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\n\n\nvar Manager =\n/*#__PURE__*/\nfunction () {\n  function Manager(element, options) {\n    var _this = this;\n\n    this.options = assign$1({}, defaults, options || {});\n    this.options.inputTarget = this.options.inputTarget || element;\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n    this.oldCssProps = {};\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n    toggleCssProps(this, true);\n    each(this.options.recognizers, function (item) {\n      var recognizer = _this.add(new item[0](item[1]));\n\n      item[2] && recognizer.recognizeWith(item[2]);\n      item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n  }\n  /**\n   * @private\n   * set options\n   * @param {Object} options\n   * @returns {Manager}\n   */\n\n\n  var _proto = Manager.prototype;\n\n  _proto.set = function set(options) {\n    assign$1(this.options, options); // Options that need a little more setup\n\n    if (options.touchAction) {\n      this.touchAction.update();\n    }\n\n    if (options.inputTarget) {\n      // Clean up existing event listeners and reinitialize\n      this.input.destroy();\n      this.input.target = options.inputTarget;\n      this.input.init();\n    }\n\n    return this;\n  };\n  /**\n   * @private\n   * stop recognizing for this session.\n   * This session will be discarded, when a new [input]start event is fired.\n   * When forced, the recognizer cycle is stopped immediately.\n   * @param {Boolean} [force]\n   */\n\n\n  _proto.stop = function stop(force) {\n    this.session.stopped = force ? FORCED_STOP : STOP;\n  };\n  /**\n   * @private\n   * run the recognizers!\n   * called by the inputHandler function on every movement of the pointers (touches)\n   * it walks through all the recognizers and tries to detect the gesture that is being made\n   * @param {Object} inputData\n   */\n\n\n  _proto.recognize = function recognize(inputData) {\n    var session = this.session;\n\n    if (session.stopped) {\n      return;\n    } // run the touch-action polyfill\n\n\n    this.touchAction.preventDefaults(inputData);\n    var recognizer;\n    var recognizers = this.recognizers; // this holds the recognizer that is being recognized.\n    // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n    // if no recognizer is detecting a thing, it is set to `null`\n\n    var curRecognizer = session.curRecognizer; // reset when the last recognizer is recognized\n    // or when we're in a new session\n\n    if (!curRecognizer || curRecognizer && curRecognizer.state & STATE_RECOGNIZED) {\n      session.curRecognizer = null;\n      curRecognizer = null;\n    }\n\n    var i = 0;\n\n    while (i < recognizers.length) {\n      recognizer = recognizers[i]; // find out if we are allowed try to recognize the input for this one.\n      // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n      // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n      //      that is being recognized.\n      // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n      //      this can be setup with the `recognizeWith()` method on the recognizer.\n\n      if (session.stopped !== FORCED_STOP && ( // 1\n      !curRecognizer || recognizer === curRecognizer || // 2\n      recognizer.canRecognizeWith(curRecognizer))) {\n        // 3\n        recognizer.recognize(inputData);\n      } else {\n        recognizer.reset();\n      } // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n      // current active recognizer. but only if we don't already have an active recognizer\n\n\n      if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n        session.curRecognizer = recognizer;\n        curRecognizer = recognizer;\n      }\n\n      i++;\n    }\n  };\n  /**\n   * @private\n   * get a recognizer by its event name.\n   * @param {Recognizer|String} recognizer\n   * @returns {Recognizer|Null}\n   */\n\n\n  _proto.get = function get(recognizer) {\n    if (recognizer instanceof Recognizer) {\n      return recognizer;\n    }\n\n    var recognizers = this.recognizers;\n\n    for (var i = 0; i < recognizers.length; i++) {\n      if (recognizers[i].options.event === recognizer) {\n        return recognizers[i];\n      }\n    }\n\n    return null;\n  };\n  /**\n   * @private add a recognizer to the manager\n   * existing recognizers with the same event name will be removed\n   * @param {Recognizer} recognizer\n   * @returns {Recognizer|Manager}\n   */\n\n\n  _proto.add = function add(recognizer) {\n    if (invokeArrayArg(recognizer, \"add\", this)) {\n      return this;\n    } // remove existing\n\n\n    var existing = this.get(recognizer.options.event);\n\n    if (existing) {\n      this.remove(existing);\n    }\n\n    this.recognizers.push(recognizer);\n    recognizer.manager = this;\n    this.touchAction.update();\n    return recognizer;\n  };\n  /**\n   * @private\n   * remove a recognizer by name or instance\n   * @param {Recognizer|String} recognizer\n   * @returns {Manager}\n   */\n\n\n  _proto.remove = function remove(recognizer) {\n    if (invokeArrayArg(recognizer, \"remove\", this)) {\n      return this;\n    }\n\n    var targetRecognizer = this.get(recognizer); // let's make sure this recognizer exists\n\n    if (recognizer) {\n      var recognizers = this.recognizers;\n      var index = inArray(recognizers, targetRecognizer);\n\n      if (index !== -1) {\n        recognizers.splice(index, 1);\n        this.touchAction.update();\n      }\n    }\n\n    return this;\n  };\n  /**\n   * @private\n   * bind event\n   * @param {String} events\n   * @param {Function} handler\n   * @returns {EventEmitter} this\n   */\n\n\n  _proto.on = function on(events, handler) {\n    if (events === undefined || handler === undefined) {\n      return this;\n    }\n\n    var handlers = this.handlers;\n    each(splitStr(events), function (event) {\n      handlers[event] = handlers[event] || [];\n      handlers[event].push(handler);\n    });\n    return this;\n  };\n  /**\n   * @private unbind event, leave emit blank to remove all handlers\n   * @param {String} events\n   * @param {Function} [handler]\n   * @returns {EventEmitter} this\n   */\n\n\n  _proto.off = function off(events, handler) {\n    if (events === undefined) {\n      return this;\n    }\n\n    var handlers = this.handlers;\n    each(splitStr(events), function (event) {\n      if (!handler) {\n        delete handlers[event];\n      } else {\n        handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n      }\n    });\n    return this;\n  };\n  /**\n   * @private emit event to the listeners\n   * @param {String} event\n   * @param {Object} data\n   */\n\n\n  _proto.emit = function emit(event, data) {\n    // we also want to trigger dom events\n    if (this.options.domEvents) {\n      triggerDomEvent(event, data);\n    } // no handlers, so skip it all\n\n\n    var handlers = this.handlers[event] && this.handlers[event].slice();\n\n    if (!handlers || !handlers.length) {\n      return;\n    }\n\n    data.type = event;\n\n    data.preventDefault = function () {\n      data.srcEvent.preventDefault();\n    };\n\n    var i = 0;\n\n    while (i < handlers.length) {\n      handlers[i](data);\n      i++;\n    }\n  };\n  /**\n   * @private\n   * destroy the manager and unbinds all events\n   * it doesn't unbind dom events, that is the user own responsibility\n   */\n\n\n  _proto.destroy = function destroy() {\n    this.element && toggleCssProps(this, false);\n    this.handlers = {};\n    this.session = {};\n    this.input.destroy();\n    this.element = null;\n  };\n\n  return Manager;\n}();\n\nvar SINGLE_TOUCH_INPUT_MAP = {\n  touchstart: INPUT_START,\n  touchmove: INPUT_MOVE,\n  touchend: INPUT_END,\n  touchcancel: INPUT_CANCEL\n};\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n/**\n * @private\n * Touch events input\n * @constructor\n * @extends Input\n */\n\nvar SingleTouchInput =\n/*#__PURE__*/\nfunction (_Input) {\n  _inheritsLoose(SingleTouchInput, _Input);\n\n  function SingleTouchInput() {\n    var _this;\n\n    var proto = SingleTouchInput.prototype;\n    proto.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    proto.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    _this = _Input.apply(this, arguments) || this;\n    _this.started = false;\n    return _this;\n  }\n\n  var _proto = SingleTouchInput.prototype;\n\n  _proto.handler = function handler(ev) {\n    var type = SINGLE_TOUCH_INPUT_MAP[ev.type]; // should we handle the touch events?\n\n    if (type === INPUT_START) {\n      this.started = true;\n    }\n\n    if (!this.started) {\n      return;\n    }\n\n    var touches = normalizeSingleTouches.call(this, ev, type); // when done, reset the started state\n\n    if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n      this.started = false;\n    }\n\n    this.callback(this.manager, type, {\n      pointers: touches[0],\n      changedPointers: touches[1],\n      pointerType: INPUT_TYPE_TOUCH,\n      srcEvent: ev\n    });\n  };\n\n  return SingleTouchInput;\n}(Input);\n\nfunction normalizeSingleTouches(ev, type) {\n  var all = toArray(ev.touches);\n  var changed = toArray(ev.changedTouches);\n\n  if (type & (INPUT_END | INPUT_CANCEL)) {\n    all = uniqueArray(all.concat(changed), 'identifier', true);\n  }\n\n  return [all, changed];\n}\n\n/**\n * @private\n * This recognizer is just used as a base for the simple attribute recognizers.\n * @constructor\n * @extends Recognizer\n */\n\nvar AttrRecognizer =\n/*#__PURE__*/\nfunction (_Recognizer) {\n  _inheritsLoose(AttrRecognizer, _Recognizer);\n\n  function AttrRecognizer(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return _Recognizer.call(this, _extends({\n      pointers: 1\n    }, options)) || this;\n  }\n  /**\n   * @private\n   * Used to check if it the recognizer receives valid input, like input.distance > 10.\n   * @memberof AttrRecognizer\n   * @param {Object} input\n   * @returns {Boolean} recognized\n   */\n\n\n  var _proto = AttrRecognizer.prototype;\n\n  _proto.attrTest = function attrTest(input) {\n    var optionPointers = this.options.pointers;\n    return optionPointers === 0 || input.pointers.length === optionPointers;\n  };\n  /**\n   * @private\n   * Process the input and return the state for the recognizer\n   * @memberof AttrRecognizer\n   * @param {Object} input\n   * @returns {*} State\n   */\n\n\n  _proto.process = function process(input) {\n    var state = this.state;\n    var eventType = input.eventType;\n    var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n    var isValid = this.attrTest(input); // on cancel input and we've recognized before, return STATE_CANCELLED\n\n    if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n      return state | STATE_CANCELLED;\n    } else if (isRecognized || isValid) {\n      if (eventType & INPUT_END) {\n        return state | STATE_ENDED;\n      } else if (!(state & STATE_BEGAN)) {\n        return STATE_BEGAN;\n      }\n\n      return state | STATE_CHANGED;\n    }\n\n    return STATE_FAILED;\n  };\n\n  return AttrRecognizer;\n}(Recognizer);\n\n/**\n * @private\n * A tap is recognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n * a single tap.\n *\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n * multi-taps being recognized.\n * @constructor\n * @extends Recognizer\n */\n\nvar TapRecognizer =\n/*#__PURE__*/\nfunction (_Recognizer) {\n  _inheritsLoose(TapRecognizer, _Recognizer);\n\n  function TapRecognizer(options) {\n    var _this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    _this = _Recognizer.call(this, _extends({\n      event: 'tap',\n      pointers: 1,\n      taps: 1,\n      interval: 300,\n      // max time between the multi-tap taps\n      time: 250,\n      // max time of the pointer to be down (like finger on the screen)\n      threshold: 9,\n      // a minimal movement is ok, but keep it low\n      posThreshold: 10\n    }, options)) || this; // previous time and center,\n    // used for tap counting\n\n    _this.pTime = false;\n    _this.pCenter = false;\n    _this._timer = null;\n    _this._input = null;\n    _this.count = 0;\n    return _this;\n  }\n\n  var _proto = TapRecognizer.prototype;\n\n  _proto.getTouchAction = function getTouchAction() {\n    return [TOUCH_ACTION_MANIPULATION];\n  };\n\n  _proto.process = function process(input) {\n    var _this2 = this;\n\n    var options = this.options;\n    var validPointers = input.pointers.length === options.pointers;\n    var validMovement = input.distance < options.threshold;\n    var validTouchTime = input.deltaTime < options.time;\n    this.reset();\n\n    if (input.eventType & INPUT_START && this.count === 0) {\n      return this.failTimeout();\n    } // we only allow little movement\n    // and we've reached an end event, so a tap is possible\n\n\n    if (validMovement && validTouchTime && validPointers) {\n      if (input.eventType !== INPUT_END) {\n        return this.failTimeout();\n      }\n\n      var validInterval = this.pTime ? input.timeStamp - this.pTime < options.interval : true;\n      var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n      this.pTime = input.timeStamp;\n      this.pCenter = input.center;\n\n      if (!validMultiTap || !validInterval) {\n        this.count = 1;\n      } else {\n        this.count += 1;\n      }\n\n      this._input = input; // if tap count matches we have recognized it,\n      // else it has began recognizing...\n\n      var tapCount = this.count % options.taps;\n\n      if (tapCount === 0) {\n        // no failing requirements, immediately trigger the tap event\n        // or wait as long as the multitap interval to trigger\n        if (!this.hasRequireFailures()) {\n          return STATE_RECOGNIZED;\n        } else {\n          this._timer = setTimeout(function () {\n            _this2.state = STATE_RECOGNIZED;\n\n            _this2.tryEmit();\n          }, options.interval);\n          return STATE_BEGAN;\n        }\n      }\n    }\n\n    return STATE_FAILED;\n  };\n\n  _proto.failTimeout = function failTimeout() {\n    var _this3 = this;\n\n    this._timer = setTimeout(function () {\n      _this3.state = STATE_FAILED;\n    }, this.options.interval);\n    return STATE_FAILED;\n  };\n\n  _proto.reset = function reset() {\n    clearTimeout(this._timer);\n  };\n\n  _proto.emit = function emit() {\n    if (this.state === STATE_RECOGNIZED) {\n      this._input.tapCount = this.count;\n      this.manager.emit(this.options.event, this._input);\n    }\n  };\n\n  return TapRecognizer;\n}(Recognizer);\n\n/**\n * @private\n * direction cons to string\n * @param {constant} direction\n * @returns {String}\n */\n\nfunction directionStr(direction) {\n  if (direction === DIRECTION_DOWN) {\n    return 'down';\n  } else if (direction === DIRECTION_UP) {\n    return 'up';\n  } else if (direction === DIRECTION_LEFT) {\n    return 'left';\n  } else if (direction === DIRECTION_RIGHT) {\n    return 'right';\n  }\n\n  return '';\n}\n\n/**\n * @private\n * Pan\n * Recognized when the pointer is down and moved in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\n\nvar PanRecognizer =\n/*#__PURE__*/\nfunction (_AttrRecognizer) {\n  _inheritsLoose(PanRecognizer, _AttrRecognizer);\n\n  function PanRecognizer(options) {\n    var _this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    _this = _AttrRecognizer.call(this, _extends({\n      event: 'pan',\n      threshold: 10,\n      pointers: 1,\n      direction: DIRECTION_ALL\n    }, options)) || this;\n    _this.pX = null;\n    _this.pY = null;\n    return _this;\n  }\n\n  var _proto = PanRecognizer.prototype;\n\n  _proto.getTouchAction = function getTouchAction() {\n    var direction = this.options.direction;\n    var actions = [];\n\n    if (direction & DIRECTION_HORIZONTAL) {\n      actions.push(TOUCH_ACTION_PAN_Y);\n    }\n\n    if (direction & DIRECTION_VERTICAL) {\n      actions.push(TOUCH_ACTION_PAN_X);\n    }\n\n    return actions;\n  };\n\n  _proto.directionTest = function directionTest(input) {\n    var options = this.options;\n    var hasMoved = true;\n    var distance = input.distance;\n    var direction = input.direction;\n    var x = input.deltaX;\n    var y = input.deltaY; // lock to axis?\n\n    if (!(direction & options.direction)) {\n      if (options.direction & DIRECTION_HORIZONTAL) {\n        direction = x === 0 ? DIRECTION_NONE : x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n        hasMoved = x !== this.pX;\n        distance = Math.abs(input.deltaX);\n      } else {\n        direction = y === 0 ? DIRECTION_NONE : y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n        hasMoved = y !== this.pY;\n        distance = Math.abs(input.deltaY);\n      }\n    }\n\n    input.direction = direction;\n    return hasMoved && distance > options.threshold && direction & options.direction;\n  };\n\n  _proto.attrTest = function attrTest(input) {\n    return AttrRecognizer.prototype.attrTest.call(this, input) && ( // replace with a super call\n    this.state & STATE_BEGAN || !(this.state & STATE_BEGAN) && this.directionTest(input));\n  };\n\n  _proto.emit = function emit(input) {\n    this.pX = input.deltaX;\n    this.pY = input.deltaY;\n    var direction = directionStr(input.direction);\n\n    if (direction) {\n      input.additionalEvent = this.options.event + direction;\n    }\n\n    _AttrRecognizer.prototype.emit.call(this, input);\n  };\n\n  return PanRecognizer;\n}(AttrRecognizer);\n\n/**\n * @private\n * Swipe\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\n\nvar SwipeRecognizer =\n/*#__PURE__*/\nfunction (_AttrRecognizer) {\n  _inheritsLoose(SwipeRecognizer, _AttrRecognizer);\n\n  function SwipeRecognizer(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return _AttrRecognizer.call(this, _extends({\n      event: 'swipe',\n      threshold: 10,\n      velocity: 0.3,\n      direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n      pointers: 1\n    }, options)) || this;\n  }\n\n  var _proto = SwipeRecognizer.prototype;\n\n  _proto.getTouchAction = function getTouchAction() {\n    return PanRecognizer.prototype.getTouchAction.call(this);\n  };\n\n  _proto.attrTest = function attrTest(input) {\n    var direction = this.options.direction;\n    var velocity;\n\n    if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n      velocity = input.overallVelocity;\n    } else if (direction & DIRECTION_HORIZONTAL) {\n      velocity = input.overallVelocityX;\n    } else if (direction & DIRECTION_VERTICAL) {\n      velocity = input.overallVelocityY;\n    }\n\n    return _AttrRecognizer.prototype.attrTest.call(this, input) && direction & input.offsetDirection && input.distance > this.options.threshold && input.maxPointers === this.options.pointers && abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n  };\n\n  _proto.emit = function emit(input) {\n    var direction = directionStr(input.offsetDirection);\n\n    if (direction) {\n      this.manager.emit(this.options.event + direction, input);\n    }\n\n    this.manager.emit(this.options.event, input);\n  };\n\n  return SwipeRecognizer;\n}(AttrRecognizer);\n\n/**\n * @private\n * Pinch\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * @constructor\n * @extends AttrRecognizer\n */\n\nvar PinchRecognizer =\n/*#__PURE__*/\nfunction (_AttrRecognizer) {\n  _inheritsLoose(PinchRecognizer, _AttrRecognizer);\n\n  function PinchRecognizer(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return _AttrRecognizer.call(this, _extends({\n      event: 'pinch',\n      threshold: 0,\n      pointers: 2\n    }, options)) || this;\n  }\n\n  var _proto = PinchRecognizer.prototype;\n\n  _proto.getTouchAction = function getTouchAction() {\n    return [TOUCH_ACTION_NONE];\n  };\n\n  _proto.attrTest = function attrTest(input) {\n    return _AttrRecognizer.prototype.attrTest.call(this, input) && (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n  };\n\n  _proto.emit = function emit(input) {\n    if (input.scale !== 1) {\n      var inOut = input.scale < 1 ? 'in' : 'out';\n      input.additionalEvent = this.options.event + inOut;\n    }\n\n    _AttrRecognizer.prototype.emit.call(this, input);\n  };\n\n  return PinchRecognizer;\n}(AttrRecognizer);\n\n/**\n * @private\n * Rotate\n * Recognized when two or more pointer are moving in a circular motion.\n * @constructor\n * @extends AttrRecognizer\n */\n\nvar RotateRecognizer =\n/*#__PURE__*/\nfunction (_AttrRecognizer) {\n  _inheritsLoose(RotateRecognizer, _AttrRecognizer);\n\n  function RotateRecognizer(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return _AttrRecognizer.call(this, _extends({\n      event: 'rotate',\n      threshold: 0,\n      pointers: 2\n    }, options)) || this;\n  }\n\n  var _proto = RotateRecognizer.prototype;\n\n  _proto.getTouchAction = function getTouchAction() {\n    return [TOUCH_ACTION_NONE];\n  };\n\n  _proto.attrTest = function attrTest(input) {\n    return _AttrRecognizer.prototype.attrTest.call(this, input) && (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n  };\n\n  return RotateRecognizer;\n}(AttrRecognizer);\n\n/**\n * @private\n * Press\n * Recognized when the pointer is down for x ms without any movement.\n * @constructor\n * @extends Recognizer\n */\n\nvar PressRecognizer =\n/*#__PURE__*/\nfunction (_Recognizer) {\n  _inheritsLoose(PressRecognizer, _Recognizer);\n\n  function PressRecognizer(options) {\n    var _this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    _this = _Recognizer.call(this, _extends({\n      event: 'press',\n      pointers: 1,\n      time: 251,\n      // minimal time of the pointer to be pressed\n      threshold: 9\n    }, options)) || this;\n    _this._timer = null;\n    _this._input = null;\n    return _this;\n  }\n\n  var _proto = PressRecognizer.prototype;\n\n  _proto.getTouchAction = function getTouchAction() {\n    return [TOUCH_ACTION_AUTO];\n  };\n\n  _proto.process = function process(input) {\n    var _this2 = this;\n\n    var options = this.options;\n    var validPointers = input.pointers.length === options.pointers;\n    var validMovement = input.distance < options.threshold;\n    var validTime = input.deltaTime > options.time;\n    this._input = input; // we only allow little movement\n    // and we've reached an end event, so a tap is possible\n\n    if (!validMovement || !validPointers || input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime) {\n      this.reset();\n    } else if (input.eventType & INPUT_START) {\n      this.reset();\n      this._timer = setTimeout(function () {\n        _this2.state = STATE_RECOGNIZED;\n\n        _this2.tryEmit();\n      }, options.time);\n    } else if (input.eventType & INPUT_END) {\n      return STATE_RECOGNIZED;\n    }\n\n    return STATE_FAILED;\n  };\n\n  _proto.reset = function reset() {\n    clearTimeout(this._timer);\n  };\n\n  _proto.emit = function emit(input) {\n    if (this.state !== STATE_RECOGNIZED) {\n      return;\n    }\n\n    if (input && input.eventType & INPUT_END) {\n      this.manager.emit(this.options.event + \"up\", input);\n    } else {\n      this._input.timeStamp = now();\n      this.manager.emit(this.options.event, this._input);\n    }\n  };\n\n  return PressRecognizer;\n}(Recognizer);\n\n/**\n * @private\n * wrap a method with a deprecation warning and stack trace\n * @param {Function} method\n * @param {String} name\n * @param {String} message\n * @returns {Function} A new function wrapping the supplied method.\n */\nfunction deprecate(method, name, message) {\n  var deprecationMessage = \"DEPRECATED METHOD: \" + name + \"\\n\" + message + \" AT \\n\";\n  return function () {\n    var e = new Error('get-stack-trace');\n    var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '').replace(/^\\s+at\\s+/gm, '').replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n    var log = window.console && (window.console.warn || window.console.log);\n\n    if (log) {\n      log.call(window.console, deprecationMessage, stack);\n    }\n\n    return method.apply(this, arguments);\n  };\n}\n\n/**\n * @private\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} dest\n * @param {Object} src\n * @param {Boolean} [merge=false]\n * @returns {Object} dest\n */\n\nvar extend = deprecate(function (dest, src, merge) {\n  var keys = Object.keys(src);\n  var i = 0;\n\n  while (i < keys.length) {\n    if (!merge || merge && dest[keys[i]] === undefined) {\n      dest[keys[i]] = src[keys[i]];\n    }\n\n    i++;\n  }\n\n  return dest;\n}, 'extend', 'Use `assign`.');\n\n/**\n * @private\n * merge the values from src in the dest.\n * means that properties that exist in dest will not be overwritten by src\n * @param {Object} dest\n * @param {Object} src\n * @returns {Object} dest\n */\n\nvar merge = deprecate(function (dest, src) {\n  return extend(dest, src, true);\n}, 'merge', 'Use `assign`.');\n\n/**\n * @private\n * simple class inheritance\n * @param {Function} child\n * @param {Function} base\n * @param {Object} [properties]\n */\n\nfunction inherit(child, base, properties) {\n  var baseP = base.prototype;\n  var childP;\n  childP = child.prototype = Object.create(baseP);\n  childP.constructor = child;\n  childP._super = baseP;\n\n  if (properties) {\n    assign$1(childP, properties);\n  }\n}\n\n/**\n * @private\n * simple function bind\n * @param {Function} fn\n * @param {Object} context\n * @returns {Function}\n */\nfunction bindFn(fn, context) {\n  return function boundFn() {\n    return fn.apply(context, arguments);\n  };\n}\n\n/**\n * @private\n * Simple way to create a manager with a default set of recognizers.\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\n\nvar Hammer =\n/*#__PURE__*/\nfunction () {\n  var Hammer =\n  /**\n    * @private\n    * @const {string}\n    */\n  function Hammer(element, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return new Manager(element, _extends({\n      recognizers: [// RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n      [RotateRecognizer, {\n        enable: false\n      }], [PinchRecognizer, {\n        enable: false\n      }, ['rotate']], [SwipeRecognizer, {\n        direction: DIRECTION_HORIZONTAL\n      }], [PanRecognizer, {\n        direction: DIRECTION_HORIZONTAL\n      }, ['swipe']], [TapRecognizer], [TapRecognizer, {\n        event: 'doubletap',\n        taps: 2\n      }, ['tap']], [PressRecognizer]]\n    }, options));\n  };\n\n  Hammer.VERSION = \"2.0.15\";\n  Hammer.DIRECTION_ALL = DIRECTION_ALL;\n  Hammer.DIRECTION_DOWN = DIRECTION_DOWN;\n  Hammer.DIRECTION_LEFT = DIRECTION_LEFT;\n  Hammer.DIRECTION_RIGHT = DIRECTION_RIGHT;\n  Hammer.DIRECTION_UP = DIRECTION_UP;\n  Hammer.DIRECTION_HORIZONTAL = DIRECTION_HORIZONTAL;\n  Hammer.DIRECTION_VERTICAL = DIRECTION_VERTICAL;\n  Hammer.DIRECTION_NONE = DIRECTION_NONE;\n  Hammer.DIRECTION_DOWN = DIRECTION_DOWN;\n  Hammer.INPUT_START = INPUT_START;\n  Hammer.INPUT_MOVE = INPUT_MOVE;\n  Hammer.INPUT_END = INPUT_END;\n  Hammer.INPUT_CANCEL = INPUT_CANCEL;\n  Hammer.STATE_POSSIBLE = STATE_POSSIBLE;\n  Hammer.STATE_BEGAN = STATE_BEGAN;\n  Hammer.STATE_CHANGED = STATE_CHANGED;\n  Hammer.STATE_ENDED = STATE_ENDED;\n  Hammer.STATE_RECOGNIZED = STATE_RECOGNIZED;\n  Hammer.STATE_CANCELLED = STATE_CANCELLED;\n  Hammer.STATE_FAILED = STATE_FAILED;\n  Hammer.Manager = Manager;\n  Hammer.Input = Input;\n  Hammer.TouchAction = TouchAction;\n  Hammer.TouchInput = TouchInput;\n  Hammer.MouseInput = MouseInput;\n  Hammer.PointerEventInput = PointerEventInput;\n  Hammer.TouchMouseInput = TouchMouseInput;\n  Hammer.SingleTouchInput = SingleTouchInput;\n  Hammer.Recognizer = Recognizer;\n  Hammer.AttrRecognizer = AttrRecognizer;\n  Hammer.Tap = TapRecognizer;\n  Hammer.Pan = PanRecognizer;\n  Hammer.Swipe = SwipeRecognizer;\n  Hammer.Pinch = PinchRecognizer;\n  Hammer.Rotate = RotateRecognizer;\n  Hammer.Press = PressRecognizer;\n  Hammer.on = addEventListeners;\n  Hammer.off = removeEventListeners;\n  Hammer.each = each;\n  Hammer.merge = merge;\n  Hammer.extend = extend;\n  Hammer.bindFn = bindFn;\n  Hammer.assign = assign$1;\n  Hammer.inherit = inherit;\n  Hammer.bindFn = bindFn;\n  Hammer.prefixed = prefixed;\n  Hammer.toArray = toArray;\n  Hammer.inArray = inArray;\n  Hammer.uniqueArray = uniqueArray;\n  Hammer.splitStr = splitStr;\n  Hammer.boolOrFn = boolOrFn;\n  Hammer.hasParent = hasParent;\n  Hammer.addEventListeners = addEventListeners;\n  Hammer.removeEventListeners = removeEventListeners;\n  Hammer.defaults = defaults;\n  return Hammer;\n}();\n\nexport default Hammer;\nexport { INPUT_START, INPUT_MOVE, INPUT_END, INPUT_CANCEL, STATE_POSSIBLE, STATE_BEGAN, STATE_CHANGED, STATE_ENDED, STATE_RECOGNIZED, STATE_CANCELLED, STATE_FAILED, DIRECTION_NONE, DIRECTION_LEFT, DIRECTION_RIGHT, DIRECTION_UP, DIRECTION_DOWN, DIRECTION_HORIZONTAL, DIRECTION_VERTICAL, DIRECTION_ALL, Manager, Input, TouchAction, TouchInput, MouseInput, PointerEventInput, TouchMouseInput, SingleTouchInput, Recognizer, AttrRecognizer, TapRecognizer as Tap, PanRecognizer as Pan, SwipeRecognizer as Swipe, PinchRecognizer as Pinch, RotateRecognizer as Rotate, PressRecognizer as Press, addEventListeners as on, removeEventListeners as off, each, merge, extend, assign$1 as assign, inherit, bindFn, prefixed, toArray, inArray, uniqueArray, splitStr, boolOrFn, hasParent, addEventListeners, removeEventListeners, defaults };\n//# sourceMappingURL=hammer.esm.js.map\n","/*\nCopyright (c) 2017 NAVER Corp.\n@egjs/axes project is licensed under the MIT license\n\n@egjs/axes JavaScript library\nhttps://github.com/naver/egjs-axes\n\n@version 2.5.13\n*/\nimport { DIRECTION_NONE, DIRECTION_LEFT, DIRECTION_RIGHT, DIRECTION_UP, DIRECTION_DOWN, DIRECTION_HORIZONTAL, DIRECTION_VERTICAL, DIRECTION_ALL, Manager, PointerEventInput, TouchMouseInput, TouchInput, MouseInput, Pan, Pinch } from '@egjs/hammerjs';\nimport Component from '@egjs/component';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\nvar extendStatics = Object.setPrototypeOf || {\n  __proto__: []\n} instanceof Array && function (d, b) {\n  d.__proto__ = b;\n} || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n};\n\nfunction __extends(d, b) {\n  extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nvar __assign = Object.assign || function __assign(t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n  }\n\n  return t;\n};\n\n/* eslint-disable no-new-func, no-nested-ternary */\nvar win;\n\nif (typeof window === \"undefined\") {\n  // window is undefined in node.js\n  win = {};\n} else {\n  win = window;\n}\n\n// export const DIRECTION_NONE = 1;\nvar FIXED_DIGIT = 100000;\nvar TRANSFORM = function () {\n  if (typeof document === \"undefined\") {\n    return \"\";\n  }\n\n  var bodyStyle = (document.head || document.getElementsByTagName(\"head\")[0]).style;\n  var target = [\"transform\", \"webkitTransform\", \"msTransform\", \"mozTransform\"];\n\n  for (var i = 0, len = target.length; i < len; i++) {\n    if (target[i] in bodyStyle) {\n      return target[i];\n    }\n  }\n\n  return \"\";\n}();\n\nfunction toArray(nodes) {\n  // const el = Array.prototype.slice.call(nodes);\n  // for IE8\n  var el = [];\n\n  for (var i = 0, len = nodes.length; i < len; i++) {\n    el.push(nodes[i]);\n  }\n\n  return el;\n}\nfunction $(param, multi) {\n  if (multi === void 0) {\n    multi = false;\n  }\n\n  var el;\n\n  if (typeof param === \"string\") {\n    // String (HTML, Selector)\n    // check if string is HTML tag format\n    var match = param.match(/^<([a-z]+)\\s*([^>]*)>/); // creating element\n\n    if (match) {\n      // HTML\n      var dummy = document.createElement(\"div\");\n      dummy.innerHTML = param;\n      el = toArray(dummy.childNodes);\n    } else {\n      // Selector\n      el = toArray(document.querySelectorAll(param));\n    }\n\n    if (!multi) {\n      el = el.length >= 1 ? el[0] : undefined;\n    }\n  } else if (param === win) {\n    // window\n    el = param;\n  } else if (param.nodeName && (param.nodeType === 1 || param.nodeType === 9)) {\n    // HTMLElement, Document\n    el = param;\n  } else if (\"jQuery\" in win && param instanceof jQuery || param.constructor.prototype.jquery) {\n    // jQuery\n    el = multi ? param.toArray() : param.get(0);\n  } else if (Array.isArray(param)) {\n    el = param.map(function (v) {\n      return $(v);\n    });\n\n    if (!multi) {\n      el = el.length >= 1 ? el[0] : undefined;\n    }\n  }\n\n  return el;\n}\nvar raf = win.requestAnimationFrame || win.webkitRequestAnimationFrame;\nvar caf = win.cancelAnimationFrame || win.webkitCancelAnimationFrame;\n\nif (raf && !caf) {\n  var keyInfo_1 = {};\n  var oldraf_1 = raf;\n\n  raf = function (callback) {\n    function wrapCallback(timestamp) {\n      if (keyInfo_1[key]) {\n        callback(timestamp);\n      }\n    }\n\n    var key = oldraf_1(wrapCallback);\n    keyInfo_1[key] = true;\n    return key;\n  };\n\n  caf = function (key) {\n    delete keyInfo_1[key];\n  };\n} else if (!(raf && caf)) {\n  raf = function (callback) {\n    return win.setTimeout(function () {\n      callback(win.performance && win.performance.now && win.performance.now() || new Date().getTime());\n    }, 16);\n  };\n\n  caf = win.clearTimeout;\n}\n/**\n * A polyfill for the window.requestAnimationFrame() method.\n * @see  https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame\n * @private\n */\n\n\nfunction requestAnimationFrame(fp) {\n  return raf(fp);\n}\n/**\n* A polyfill for the window.cancelAnimationFrame() method. It cancels an animation executed through a call to the requestAnimationFrame() method.\n* @param {Number} key −\tThe ID value returned through a call to the requestAnimationFrame() method. <ko>requestAnimationFrame() 메서드가 반환한 아이디 값</ko>\n* @see  https://developer.mozilla.org/en-US/docs/Web/API/Window/cancelAnimationFrame\n* @private\n*/\n\nfunction cancelAnimationFrame(key) {\n  caf(key);\n}\nfunction mapToFixed(obj) {\n  return map(obj, function (value) {\n    return toFixed(value);\n  });\n}\nfunction map(obj, callback) {\n  var tranformed = {};\n\n  for (var k in obj) {\n    k && (tranformed[k] = callback(obj[k], k));\n  }\n\n  return tranformed;\n}\nfunction filter(obj, callback) {\n  var filtered = {};\n\n  for (var k in obj) {\n    k && callback(obj[k], k) && (filtered[k] = obj[k]);\n  }\n\n  return filtered;\n}\nfunction every(obj, callback) {\n  for (var k in obj) {\n    if (k && !callback(obj[k], k)) {\n      return false;\n    }\n  }\n\n  return true;\n}\nfunction equal(target, base) {\n  return every(target, function (v, k) {\n    return v === base[k];\n  });\n}\nfunction toFixed(num) {\n  return Math.round(num * FIXED_DIGIT) / FIXED_DIGIT;\n}\n\nfunction getInsidePosition(destPos, range, circular, bounce) {\n  var toDestPos = destPos;\n  var targetRange = [circular[0] ? range[0] : bounce ? range[0] - bounce[0] : range[0], circular[1] ? range[1] : bounce ? range[1] + bounce[1] : range[1]];\n  toDestPos = Math.max(targetRange[0], toDestPos);\n  toDestPos = Math.min(targetRange[1], toDestPos);\n  return +toFixed(toDestPos);\n} // determine outside\n\nfunction isOutside(pos, range) {\n  return pos < range[0] || pos > range[1];\n}\nfunction getDuration(distance, deceleration) {\n  var duration = Math.sqrt(distance / deceleration * 2); // when duration is under 100, then value is zero\n\n  return duration < 100 ? 0 : duration;\n}\nfunction isCircularable(destPos, range, circular) {\n  return circular[1] && destPos > range[1] || circular[0] && destPos < range[0];\n}\nfunction getCirculatedPos(pos, range, circular, isAccurate) {\n  var toPos = pos;\n  var min = range[0];\n  var max = range[1];\n  var length = max - min;\n\n  if (circular[1] && pos > max) {\n    // right\n    toPos = (toPos - max) % length + min;\n  }\n\n  if (circular[0] && pos < min) {\n    // left\n    toPos = (toPos - min) % length + max;\n  }\n\n  return isAccurate ? toPos : +toFixed(toPos);\n}\n\nfunction minMax(value, min, max) {\n  return Math.max(Math.min(value, max), min);\n}\n\nvar AnimationManager =\n/*#__PURE__*/\nfunction () {\n  function AnimationManager(_a) {\n    var options = _a.options,\n        itm = _a.itm,\n        em = _a.em,\n        axm = _a.axm;\n    this.options = options;\n    this.itm = itm;\n    this.em = em;\n    this.axm = axm;\n    this.animationEnd = this.animationEnd.bind(this);\n  }\n\n  var __proto = AnimationManager.prototype;\n\n  __proto.getDuration = function (depaPos, destPos, wishDuration) {\n    var _this = this;\n\n    var duration;\n\n    if (typeof wishDuration !== \"undefined\") {\n      duration = wishDuration;\n    } else {\n      var durations_1 = map(destPos, function (v, k) {\n        return getDuration(Math.abs(v - depaPos[k]), _this.options.deceleration);\n      });\n      duration = Object.keys(durations_1).reduce(function (max, v) {\n        return Math.max(max, durations_1[v]);\n      }, -Infinity);\n    }\n\n    return minMax(duration, this.options.minimumDuration, this.options.maximumDuration);\n  };\n\n  __proto.createAnimationParam = function (pos, duration, option) {\n    var depaPos = this.axm.get();\n    var destPos = pos;\n    var inputEvent = option && option.event || null;\n    return {\n      depaPos: depaPos,\n      destPos: destPos,\n      duration: minMax(duration, this.options.minimumDuration, this.options.maximumDuration),\n      delta: this.axm.getDelta(depaPos, destPos),\n      inputEvent: inputEvent,\n      input: option && option.input || null,\n      isTrusted: !!inputEvent,\n      done: this.animationEnd\n    };\n  };\n\n  __proto.grab = function (axes, option) {\n    if (this._animateParam && axes.length) {\n      var orgPos_1 = this.axm.get(axes);\n      var pos = this.axm.map(orgPos_1, function (v, opt) {\n        return getCirculatedPos(v, opt.range, opt.circular, false);\n      });\n\n      if (!every(pos, function (v, k) {\n        return orgPos_1[k] === v;\n      })) {\n        this.em.triggerChange(pos, false, orgPos_1, option, !!option);\n      }\n\n      this._animateParam = null;\n      this._raf && cancelAnimationFrame(this._raf);\n      this._raf = null;\n      this.em.triggerAnimationEnd(!!(option && option.event));\n    }\n  };\n\n  __proto.getEventInfo = function () {\n    if (this._animateParam && this._animateParam.input && this._animateParam.inputEvent) {\n      return {\n        input: this._animateParam.input,\n        event: this._animateParam.inputEvent\n      };\n    } else {\n      return null;\n    }\n  };\n\n  __proto.restore = function (option) {\n    var pos = this.axm.get();\n    var destPos = this.axm.map(pos, function (v, opt) {\n      return Math.min(opt.range[1], Math.max(opt.range[0], v));\n    });\n    this.animateTo(destPos, this.getDuration(pos, destPos), option);\n  };\n\n  __proto.animationEnd = function () {\n    var beforeParam = this.getEventInfo();\n    this._animateParam = null; // for Circular\n\n    var circularTargets = this.axm.filter(this.axm.get(), function (v, opt) {\n      return isCircularable(v, opt.range, opt.circular);\n    });\n    Object.keys(circularTargets).length > 0 && this.setTo(this.axm.map(circularTargets, function (v, opt) {\n      return getCirculatedPos(v, opt.range, opt.circular, false);\n    }));\n    this.itm.setInterrupt(false);\n    this.em.triggerAnimationEnd(!!beforeParam);\n\n    if (this.axm.isOutside()) {\n      this.restore(beforeParam);\n    } else {\n      this.finish(!!beforeParam);\n    }\n  };\n\n  __proto.finish = function (isTrusted) {\n    this._animateParam = null;\n    this.itm.setInterrupt(false);\n    this.em.triggerFinish(isTrusted);\n  };\n\n  __proto.animateLoop = function (param, complete) {\n    if (param.duration) {\n      this._animateParam = __assign({}, param);\n      var info_1 = this._animateParam;\n      var self_1 = this;\n      var prevPos_1 = info_1.depaPos;\n      var prevEasingPer_1 = 0;\n      var directions_1 = map(prevPos_1, function (value, key) {\n        return value <= info_1.destPos[key] ? 1 : -1;\n      });\n      var prevTime_1 = new Date().getTime();\n      info_1.startTime = prevTime_1;\n\n      (function loop() {\n        self_1._raf = null;\n        var currentTime = new Date().getTime();\n        var easingPer = self_1.easing((currentTime - info_1.startTime) / param.duration);\n        var toPos = map(prevPos_1, function (pos, key) {\n          return pos + info_1.delta[key] * (easingPer - prevEasingPer_1);\n        });\n        toPos = self_1.axm.map(toPos, function (pos, options, key) {\n          // fix absolute position to relative position\n          // fix the bouncing phenomenon by changing the range.\n          var nextPos = getCirculatedPos(pos, options.range, options.circular, true);\n\n          if (pos !== nextPos) {\n            // circular\n            param.destPos[key] += -directions_1[key] * (options.range[1] - options.range[0]);\n            prevPos_1[key] += -directions_1[key] * (options.range[1] - options.range[0]);\n          }\n\n          return nextPos;\n        });\n        var isCanceled = !self_1.em.triggerChange(toPos, false, mapToFixed(prevPos_1));\n        prevPos_1 = toPos;\n        prevTime_1 = currentTime;\n        prevEasingPer_1 = easingPer;\n\n        if (easingPer >= 1) {\n          var destPos = param.destPos;\n\n          if (!equal(destPos, self_1.axm.get(Object.keys(destPos)))) {\n            self_1.em.triggerChange(destPos, true, mapToFixed(prevPos_1));\n          }\n\n          complete();\n          return;\n        } else if (isCanceled) {\n          self_1.finish(false);\n        } else {\n          // animationEnd\n          self_1._raf = requestAnimationFrame(loop);\n        }\n      })();\n    } else {\n      this.em.triggerChange(param.destPos, true);\n      complete();\n    }\n  };\n\n  __proto.getUserControll = function (param) {\n    var userWish = param.setTo();\n    userWish.destPos = this.axm.get(userWish.destPos);\n    userWish.duration = minMax(userWish.duration, this.options.minimumDuration, this.options.maximumDuration);\n    return userWish;\n  };\n\n  __proto.animateTo = function (destPos, duration, option) {\n    var _this = this;\n\n    var param = this.createAnimationParam(destPos, duration, option);\n\n    var depaPos = __assign({}, param.depaPos);\n\n    var retTrigger = this.em.triggerAnimationStart(param); // to control\n\n    var userWish = this.getUserControll(param); // You can't stop the 'animationStart' event when 'circular' is true.\n\n    if (!retTrigger && this.axm.every(userWish.destPos, function (v, opt) {\n      return isCircularable(v, opt.range, opt.circular);\n    })) {\n      console.warn(\"You can't stop the 'animation' event when 'circular' is true.\");\n    }\n\n    if (retTrigger && !equal(userWish.destPos, depaPos)) {\n      var inputEvent = option && option.event || null;\n      this.animateLoop({\n        depaPos: depaPos,\n        destPos: userWish.destPos,\n        duration: userWish.duration,\n        delta: this.axm.getDelta(depaPos, userWish.destPos),\n        isTrusted: !!inputEvent,\n        inputEvent: inputEvent,\n        input: option && option.input || null\n      }, function () {\n        return _this.animationEnd();\n      });\n    }\n  };\n\n  __proto.easing = function (p) {\n    return p > 1 ? 1 : this.options.easing(p);\n  };\n\n  __proto.setTo = function (pos, duration) {\n    if (duration === void 0) {\n      duration = 0;\n    }\n\n    var axes = Object.keys(pos);\n    this.grab(axes);\n    var orgPos = this.axm.get(axes);\n\n    if (equal(pos, orgPos)) {\n      return this;\n    }\n\n    this.itm.setInterrupt(true);\n    var movedPos = filter(pos, function (v, k) {\n      return orgPos[k] !== v;\n    });\n\n    if (!Object.keys(movedPos).length) {\n      return this;\n    }\n\n    movedPos = this.axm.map(movedPos, function (v, opt) {\n      var range = opt.range,\n          circular = opt.circular;\n\n      if (circular && (circular[0] || circular[1])) {\n        return v;\n      } else {\n        return getInsidePosition(v, range, circular);\n      }\n    });\n\n    if (equal(movedPos, orgPos)) {\n      return this;\n    }\n\n    if (duration > 0) {\n      this.animateTo(movedPos, duration);\n    } else {\n      this.em.triggerChange(movedPos);\n      this.finish(false);\n    }\n\n    return this;\n  };\n\n  __proto.setBy = function (pos, duration) {\n    if (duration === void 0) {\n      duration = 0;\n    }\n\n    return this.setTo(map(this.axm.get(Object.keys(pos)), function (v, k) {\n      return v + pos[k];\n    }), duration);\n  };\n\n  return AnimationManager;\n}();\n\nvar EventManager =\n/*#__PURE__*/\nfunction () {\n  function EventManager(axes) {\n    this.axes = axes;\n  }\n  /**\n   * This event is fired when a user holds an element on the screen of the device.\n   * @ko 사용자가 기기의 화면에 손을 대고 있을 때 발생하는 이벤트\n   * @name eg.Axes#hold\n   * @event\n   * @type {object} The object of data to be sent when the event is fired<ko>이벤트가 발생할 때 전달되는 데이터 객체</ko>\n   * @property {Object.<string, number>} pos coordinate <ko>좌표 정보</ko>\n   * @property {Object} input The instance of inputType where the event occurred<ko>이벤트가 발생한 inputType 인스턴스</ko>\n   * @property {Object} inputEvent The event object received from inputType <ko>inputType으로 부터 받은 이벤트 객체</ko>\n   * @property {Boolean} isTrusted Returns true if an event was generated by the user action, or false if it was caused by a script or API call <ko>사용자의 액션에 의해 이벤트가 발생하였으면 true, 스크립트나 API호출에 의해 발생하였을 경우에는 false를 반환한다.</ko>\n   *\n   * @example\n   * const axes = new eg.Axes({\n   *   \"x\": {\n   *      range: [0, 100]\n   *   },\n   *   \"zoom\": {\n   *      range: [50, 30]\n   *   }\n   * }).on(\"hold\", function(event) {\n   *   // event.pos\n   *   // event.input\n   *   // event.inputEvent\n   *   // isTrusted\n   * });\n   */\n\n\n  var __proto = EventManager.prototype;\n\n  __proto.triggerHold = function (pos, option) {\n    this.axes.trigger(\"hold\", {\n      pos: pos,\n      input: option.input || null,\n      inputEvent: option.event || null,\n      isTrusted: true\n    });\n  };\n  /**\n   * Specifies the coordinates to move after the 'change' event. It works when the holding value of the change event is true.\n   * @ko 'change' 이벤트 이후 이동할 좌표를 지정한다. change이벤트의 holding 값이 true일 경우에 동작한다\n   * @name set\n  * @function\n   * @param {Object.<string, number>} pos The coordinate to move to <ko>이동할 좌표</ko>\n   * @example\n   * const axes = new eg.Axes({\n   *   \"x\": {\n   *      range: [0, 100]\n   *   },\n   *   \"zoom\": {\n   *      range: [50, 30]\n   *   }\n   * }).on(\"change\", function(event) {\n   *   event.holding && event.set({x: 10});\n   * });\n   */\n\n  /** Specifies the animation coordinates to move after the 'release' or 'animationStart' events.\n   * @ko 'release' 또는 'animationStart' 이벤트 이후 이동할 좌표를 지정한다.\n   * @name setTo\n  * @function\n   * @param {Object.<string, number>} pos The coordinate to move to <ko>이동할 좌표</ko>\n   * @param {Number} [duration] Duration of the animation (unit: ms) <ko>애니메이션 진행 시간(단위: ms)</ko>\n   * @example\n   * const axes = new eg.Axes({\n   *   \"x\": {\n   *      range: [0, 100]\n   *   },\n   *   \"zoom\": {\n   *      range: [50, 30]\n   *   }\n   * }).on(\"animationStart\", function(event) {\n   *   event.setTo({x: 10}, 2000);\n   * });\n   */\n\n  /**\n   * This event is fired when a user release an element on the screen of the device.\n   * @ko 사용자가 기기의 화면에서 손을 뗐을 때 발생하는 이벤트\n   * @name eg.Axes#release\n   * @event\n   * @type {object} The object of data to be sent when the event is fired<ko>이벤트가 발생할 때 전달되는 데이터 객체</ko>\n   * @property {Object.<string, number>} depaPos The coordinates when releasing an element<ko>손을 뗐을 때의 좌표 </ko>\n   * @property {Object.<string, number>} destPos The coordinates to move to after releasing an element<ko>손을 뗀 뒤에 이동할 좌표</ko>\n   * @property {Object.<string, number>} delta  The movement variation of coordinate <ko>좌표의 변화량</ko>\n   * @property {Object} inputEvent The event object received from inputType <ko>inputType으로 부터 받은 이벤트 객체</ko>\n   * @property {Object} input The instance of inputType where the event occurred<ko>이벤트가 발생한 inputType 인스턴스</ko>\n   * @property {setTo} setTo Specifies the animation coordinates to move after the event <ko>이벤트 이후 이동할 애니메이션 좌표를 지정한다</ko>\n   * @property {Boolean} isTrusted Returns true if an event was generated by the user action, or false if it was caused by a script or API call <ko>사용자의 액션에 의해 이벤트가 발생하였으면 true, 스크립트나 API호출에 의해 발생하였을 경우에는 false를 반환한다.</ko>\n   *\n   * @example\n   * const axes = new eg.Axes({\n   *   \"x\": {\n   *      range: [0, 100]\n   *   },\n   *   \"zoom\": {\n   *      range: [50, 30]\n   *   }\n   * }).on(\"release\", function(event) {\n   *   // event.depaPos\n   *   // event.destPos\n   *   // event.delta\n   *   // event.input\n   *   // event.inputEvent\n   *   // event.setTo\n   *   // event.isTrusted\n   *\n   *   // if you want to change the animation coordinates to move after the 'release' event.\n   *   event.setTo({x: 10}, 2000);\n   * });\n   */\n\n\n  __proto.triggerRelease = function (param) {\n    param.setTo = this.createUserControll(param.destPos, param.duration);\n    this.axes.trigger(\"release\", param);\n  };\n  /**\n   * This event is fired when coordinate changes.\n   * @ko 좌표가 변경됐을 때 발생하는 이벤트\n   * @name eg.Axes#change\n   * @event\n   * @type {object} The object of data to be sent when the event is fired <ko>이벤트가 발생할 때 전달되는 데이터 객체</ko>\n   * @property {Object.<string, number>} pos  The coordinate <ko>좌표</ko>\n   * @property {Object.<string, number>} delta  The movement variation of coordinate <ko>좌표의 변화량</ko>\n   * @property {Boolean} holding Indicates whether a user holds an element on the screen of the device.<ko>사용자가 기기의 화면을 누르고 있는지 여부</ko>\n   * @property {Object} input The instance of inputType where the event occurred. If the value is changed by animation, it returns 'null'.<ko>이벤트가 발생한 inputType 인스턴스. 애니메이션에 의해 값이 변경될 경우에는 'null'을 반환한다.</ko>\n   * @property {Object} inputEvent The event object received from inputType. If the value is changed by animation, it returns 'null'.<ko>inputType으로 부터 받은 이벤트 객체. 애니메이션에 의해 값이 변경될 경우에는 'null'을 반환한다.</ko>\n   * @property {set} set Specifies the coordinates to move after the event. It works when the holding value is true <ko>이벤트 이후 이동할 좌표를 지정한다. holding 값이 true일 경우에 동작한다.</ko>\n   * @property {Boolean} isTrusted Returns true if an event was generated by the user action, or false if it was caused by a script or API call <ko>사용자의 액션에 의해 이벤트가 발생하였으면 true, 스크립트나 API호출에 의해 발생하였을 경우에는 false를 반환한다.</ko>\n   *\n   * @example\n   * const axes = new eg.Axes({\n   *   \"x\": {\n   *      range: [0, 100]\n   *   },\n   *   \"zoom\": {\n   *      range: [50, 30]\n   *   }\n   * }).on(\"change\", function(event) {\n   *   // event.pos\n   *   // event.delta\n   *   // event.input\n   *   // event.inputEvent\n   *   // event.holding\n   *   // event.set\n   *   // event.isTrusted\n   *\n   *   // if you want to change the coordinates to move after the 'change' event.\n   *   // it works when the holding value of the change event is true.\n   *   event.holding && event.set({x: 10});\n   * });\n   */\n\n\n  __proto.triggerChange = function (pos, isAccurate, depaPos, option, holding) {\n    if (holding === void 0) {\n      holding = false;\n    }\n\n    var am = this.am;\n    var axm = am.axm;\n    var eventInfo = am.getEventInfo();\n    var moveTo = axm.moveTo(pos, isAccurate, depaPos);\n    var inputEvent = option && option.event || eventInfo && eventInfo.event || null;\n    var param = {\n      pos: moveTo.pos,\n      delta: moveTo.delta,\n      holding: holding,\n      inputEvent: inputEvent,\n      isTrusted: !!inputEvent,\n      input: option && option.input || eventInfo && eventInfo.input || null,\n      set: inputEvent ? this.createUserControll(moveTo.pos) : function () {}\n    };\n    var result = this.axes.trigger(\"change\", param);\n    inputEvent && axm.set(param.set()[\"destPos\"]);\n    return result;\n  };\n  /**\n   * This event is fired when animation starts.\n   * @ko 에니메이션이 시작할 때 발생한다.\n   * @name eg.Axes#animationStart\n   * @event\n   * @type {object} The object of data to be sent when the event is fired<ko>이벤트가 발생할 때 전달되는 데이터 객체</ko>\n   * @property {Object.<string, number>} depaPos The coordinates when animation starts<ko>애니메이션이 시작 되었을 때의 좌표 </ko>\n   * @property {Object.<string, number>} destPos The coordinates to move to. If you change this value, you can run the animation<ko>이동할 좌표. 이값을 변경하여 애니메이션을 동작시킬수 있다</ko>\n   * @property {Object.<string, number>} delta  The movement variation of coordinate <ko>좌표의 변화량</ko>\n   * @property {Number} duration Duration of the animation (unit: ms). If you change this value, you can control the animation duration time.<ko>애니메이션 진행 시간(단위: ms). 이값을 변경하여 애니메이션의 이동시간을 조절할 수 있다.</ko>\n   * @property {Object} input The instance of inputType where the event occurred. If the value is changed by animation, it returns 'null'.<ko>이벤트가 발생한 inputType 인스턴스. 애니메이션에 의해 값이 변경될 경우에는 'null'을 반환한다.</ko>\n   * @property {Object} inputEvent The event object received from inputType <ko>inputType으로 부터 받은 이벤트 객체</ko>\n   * @property {setTo} setTo Specifies the animation coordinates to move after the event <ko>이벤트 이후 이동할 애니메이션 좌표를 지정한다</ko>\n   * @property {Boolean} isTrusted Returns true if an event was generated by the user action, or false if it was caused by a script or API call <ko>사용자의 액션에 의해 이벤트가 발생하였으면 true, 스크립트나 API호출에 의해 발생하였을 경우에는 false를 반환한다.</ko>\n   *\n   * @example\n   * const axes = new eg.Axes({\n   *   \"x\": {\n   *      range: [0, 100]\n   *   },\n   *   \"zoom\": {\n   *      range: [50, 30]\n   *   }\n   * }).on(\"release\", function(event) {\n   *   // event.depaPos\n   *   // event.destPos\n   *   // event.delta\n   *   // event.input\n   *   // event.inputEvent\n   *   // event.setTo\n   *   // event.isTrusted\n   *\n   *   // if you want to change the animation coordinates to move after the 'animationStart' event.\n   *   event.setTo({x: 10}, 2000);\n   * });\n   */\n\n\n  __proto.triggerAnimationStart = function (param) {\n    param.setTo = this.createUserControll(param.destPos, param.duration);\n    return this.axes.trigger(\"animationStart\", param);\n  };\n  /**\n   * This event is fired when animation ends.\n   * @ko 에니메이션이 끝났을 때 발생한다.\n   * @name eg.Axes#animationEnd\n   * @event\n   * @type {object} The object of data to be sent when the event is fired<ko>이벤트가 발생할 때 전달되는 데이터 객체</ko>\n   * @property {Boolean} isTrusted Returns true if an event was generated by the user action, or false if it was caused by a script or API call <ko>사용자의 액션에 의해 이벤트가 발생하였으면 true, 스크립트나 API호출에 의해 발생하였을 경우에는 false를 반환한다.</ko>\n   *\n   * @example\n   * const axes = new eg.Axes({\n   *   \"x\": {\n   *      range: [0, 100]\n   *   },\n   *   \"zoom\": {\n   *      range: [50, 30]\n   *   }\n   * }).on(\"animationEnd\", function(event) {\n   *   // event.isTrusted\n   * });\n   */\n\n\n  __proto.triggerAnimationEnd = function (isTrusted) {\n    if (isTrusted === void 0) {\n      isTrusted = false;\n    }\n\n    this.axes.trigger(\"animationEnd\", {\n      isTrusted: isTrusted\n    });\n  };\n  /**\n   * This event is fired when all actions have been completed.\n   * @ko 에니메이션이 끝났을 때 발생한다.\n   * @name eg.Axes#finish\n   * @event\n   * @type {object} The object of data to be sent when the event is fired<ko>이벤트가 발생할 때 전달되는 데이터 객체</ko>\n   * @property {Boolean} isTrusted Returns true if an event was generated by the user action, or false if it was caused by a script or API call <ko>사용자의 액션에 의해 이벤트가 발생하였으면 true, 스크립트나 API호출에 의해 발생하였을 경우에는 false를 반환한다.</ko>\n   *\n   * @example\n   * const axes = new eg.Axes({\n   *   \"x\": {\n   *      range: [0, 100]\n   *   },\n   *   \"zoom\": {\n   *      range: [50, 30]\n   *   }\n   * }).on(\"finish\", function(event) {\n   *   // event.isTrusted\n   * });\n   */\n\n\n  __proto.triggerFinish = function (isTrusted) {\n    if (isTrusted === void 0) {\n      isTrusted = false;\n    }\n\n    this.axes.trigger(\"finish\", {\n      isTrusted: isTrusted\n    });\n  };\n\n  __proto.createUserControll = function (pos, duration) {\n    if (duration === void 0) {\n      duration = 0;\n    } // to controll\n\n\n    var userControl = {\n      destPos: __assign({}, pos),\n      duration: duration\n    };\n    return function (toPos, userDuration) {\n      toPos && (userControl.destPos = __assign({}, toPos));\n      userDuration !== undefined && (userControl.duration = userDuration);\n      return userControl;\n    };\n  };\n\n  __proto.setAnimationManager = function (am) {\n    this.am = am;\n  };\n\n  __proto.destroy = function () {\n    this.axes.off();\n  };\n\n  return EventManager;\n}();\n\nvar InterruptManager =\n/*#__PURE__*/\nfunction () {\n  function InterruptManager(options) {\n    this.options = options;\n    this._prevented = false; //  check whether the animation event was prevented\n  }\n\n  var __proto = InterruptManager.prototype;\n\n  __proto.isInterrupting = function () {\n    // when interruptable is 'true', return value is always 'true'.\n    return this.options.interruptable || this._prevented;\n  };\n\n  __proto.isInterrupted = function () {\n    return !this.options.interruptable && this._prevented;\n  };\n\n  __proto.setInterrupt = function (prevented) {\n    !this.options.interruptable && (this._prevented = prevented);\n  };\n\n  return InterruptManager;\n}();\n\nvar AxisManager =\n/*#__PURE__*/\nfunction () {\n  function AxisManager(axis, options) {\n    var _this = this;\n\n    this.axis = axis;\n    this.options = options;\n\n    this._complementOptions();\n\n    this._pos = Object.keys(this.axis).reduce(function (acc, v) {\n      acc[v] = _this.axis[v].range[0];\n      return acc;\n    }, {});\n  }\n  /**\n     * set up 'css' expression\n     * @private\n     */\n\n\n  var __proto = AxisManager.prototype;\n\n  __proto._complementOptions = function () {\n    var _this = this;\n\n    Object.keys(this.axis).forEach(function (axis) {\n      _this.axis[axis] = __assign({\n        range: [0, 100],\n        bounce: [0, 0],\n        circular: [false, false]\n      }, _this.axis[axis]);\n      [\"bounce\", \"circular\"].forEach(function (v) {\n        var axisOption = _this.axis;\n        var key = axisOption[axis][v];\n\n        if (/string|number|boolean/.test(typeof key)) {\n          axisOption[axis][v] = [key, key];\n        }\n      });\n    });\n  };\n\n  __proto.getDelta = function (depaPos, destPos) {\n    var fullDepaPos = this.get(depaPos);\n    return map(this.get(destPos), function (v, k) {\n      return v - fullDepaPos[k];\n    });\n  };\n\n  __proto.get = function (axes) {\n    var _this = this;\n\n    if (axes && Array.isArray(axes)) {\n      return axes.reduce(function (acc, v) {\n        if (v && v in _this._pos) {\n          acc[v] = _this._pos[v];\n        }\n\n        return acc;\n      }, {});\n    } else {\n      return __assign({}, this._pos, axes || {});\n    }\n  };\n\n  __proto.moveTo = function (pos, isAccurate, depaPos) {\n    if (depaPos === void 0) {\n      depaPos = this._pos;\n    }\n\n    var delta = map(this._pos, function (v, key) {\n      return key in pos && key in depaPos ? pos[key] - depaPos[key] : 0;\n    });\n    this.set(this.map(pos, function (v, opt) {\n      return opt ? getCirculatedPos(v, opt.range, opt.circular, isAccurate) : 0;\n    }));\n    return {\n      pos: __assign({}, this._pos),\n      delta: delta\n    };\n  };\n\n  __proto.set = function (pos) {\n    for (var k in pos) {\n      if (k && k in this._pos) {\n        this._pos[k] = pos[k];\n      }\n    }\n  };\n\n  __proto.every = function (pos, callback) {\n    var axisOptions = this.axis;\n    return every(pos, function (value, key) {\n      return callback(value, axisOptions[key], key);\n    });\n  };\n\n  __proto.filter = function (pos, callback) {\n    var axisOptions = this.axis;\n    return filter(pos, function (value, key) {\n      return callback(value, axisOptions[key], key);\n    });\n  };\n\n  __proto.map = function (pos, callback) {\n    var axisOptions = this.axis;\n    return map(pos, function (value, key) {\n      return callback(value, axisOptions[key], key);\n    });\n  };\n\n  __proto.isOutside = function (axes) {\n    return !this.every(axes ? this.get(axes) : this._pos, function (v, opt) {\n      return !isOutside(v, opt.range);\n    });\n  };\n\n  return AxisManager;\n}();\n\nvar InputObserver =\n/*#__PURE__*/\nfunction () {\n  function InputObserver(_a) {\n    var options = _a.options,\n        itm = _a.itm,\n        em = _a.em,\n        axm = _a.axm,\n        am = _a.am;\n    this.isOutside = false;\n    this.moveDistance = null;\n    this.isStopped = false;\n    this.options = options;\n    this.itm = itm;\n    this.em = em;\n    this.axm = axm;\n    this.am = am;\n  } // when move pointer is held in outside\n\n\n  var __proto = InputObserver.prototype;\n\n  __proto.atOutside = function (pos) {\n    var _this = this;\n\n    if (this.isOutside) {\n      return this.axm.map(pos, function (v, opt) {\n        var tn = opt.range[0] - opt.bounce[0];\n        var tx = opt.range[1] + opt.bounce[1];\n        return v > tx ? tx : v < tn ? tn : v;\n      });\n    } else {\n      // when start pointer is held in inside\n      // get a initialization slope value to prevent smooth animation.\n      var initSlope_1 = this.am.easing(0.00001) / 0.00001;\n      return this.axm.map(pos, function (v, opt) {\n        var min = opt.range[0];\n        var max = opt.range[1];\n        var out = opt.bounce;\n        var circular = opt.circular;\n\n        if (circular && (circular[0] || circular[1])) {\n          return v;\n        } else if (v < min) {\n          // left\n          return min - _this.am.easing((min - v) / (out[0] * initSlope_1)) * out[0];\n        } else if (v > max) {\n          // right\n          return max + _this.am.easing((v - max) / (out[1] * initSlope_1)) * out[1];\n        }\n\n        return v;\n      });\n    }\n  };\n\n  __proto.get = function (input) {\n    return this.axm.get(input.axes);\n  };\n\n  __proto.hold = function (input, event) {\n    if (this.itm.isInterrupted() || !input.axes.length) {\n      return;\n    }\n\n    var changeOption = {\n      input: input,\n      event: event\n    };\n    this.isStopped = false;\n    this.itm.setInterrupt(true);\n    this.am.grab(input.axes, changeOption);\n    !this.moveDistance && this.em.triggerHold(this.axm.get(), changeOption);\n    this.isOutside = this.axm.isOutside(input.axes);\n    this.moveDistance = this.axm.get(input.axes);\n  };\n\n  __proto.change = function (input, event, offset) {\n    if (this.isStopped || !this.itm.isInterrupting() || this.axm.every(offset, function (v) {\n      return v === 0;\n    })) {\n      return;\n    }\n\n    var depaPos = this.moveDistance || this.axm.get(input.axes);\n    var destPos; // for outside logic\n\n    destPos = map(depaPos, function (v, k) {\n      return v + (offset[k] || 0);\n    });\n    this.moveDistance && (this.moveDistance = destPos); // from outside to inside\n\n    if (this.isOutside && this.axm.every(depaPos, function (v, opt) {\n      return !isOutside(v, opt.range);\n    })) {\n      this.isOutside = false;\n    }\n\n    depaPos = this.atOutside(depaPos);\n    destPos = this.atOutside(destPos);\n    var isCanceled = !this.em.triggerChange(destPos, false, depaPos, {\n      input: input,\n      event: event\n    }, true);\n\n    if (isCanceled) {\n      this.isStopped = true;\n      this.moveDistance = null;\n      this.am.finish(false);\n    }\n  };\n\n  __proto.release = function (input, event, offset, inputDuration) {\n    if (this.isStopped || !this.itm.isInterrupting() || !this.moveDistance) {\n      return;\n    }\n\n    var pos = this.axm.get(input.axes);\n    var depaPos = this.axm.get();\n    var destPos = this.axm.get(this.axm.map(offset, function (v, opt, k) {\n      if (opt.circular && (opt.circular[0] || opt.circular[1])) {\n        return pos[k] + v;\n      } else {\n        return getInsidePosition(pos[k] + v, opt.range, opt.circular, opt.bounce);\n      }\n    }));\n    var duration = this.am.getDuration(destPos, pos, inputDuration);\n\n    if (duration === 0) {\n      destPos = __assign({}, depaPos);\n    } // prepare params\n\n\n    var param = {\n      depaPos: depaPos,\n      destPos: destPos,\n      duration: duration,\n      delta: this.axm.getDelta(depaPos, destPos),\n      inputEvent: event,\n      input: input,\n      isTrusted: true\n    };\n    this.em.triggerRelease(param);\n    this.moveDistance = null; // to contol\n\n    var userWish = this.am.getUserControll(param);\n    var isEqual = equal(userWish.destPos, depaPos);\n    var changeOption = {\n      input: input,\n      event: event\n    };\n\n    if (isEqual || userWish.duration === 0) {\n      !isEqual && this.em.triggerChange(userWish.destPos, false, depaPos, changeOption, true);\n      this.itm.setInterrupt(false);\n\n      if (this.axm.isOutside()) {\n        this.am.restore(changeOption);\n      } else {\n        this.em.triggerFinish(true);\n      }\n    } else {\n      this.am.animateTo(userWish.destPos, userWish.duration, changeOption);\n    }\n  };\n\n  return InputObserver;\n}();\n\n/**\n * @typedef {Object} AxisOption The Axis information. The key of the axis specifies the name to use as the logical virtual coordinate system.\n * @ko 축 정보. 축의 키는 논리적인 가상 좌표계로 사용할 이름을 지정한다.\n * @property {Number[]} [range] The coordinate of range <ko>좌표 범위</ko>\n * @property {Number} [range.0=0] The coordinate of the minimum <ko>최소 좌표</ko>\n * @property {Number} [range.1=0] The coordinate of the maximum <ko>최대 좌표</ko>\n * @property {Number[]} [bounce] The size of bouncing area. The coordinates can exceed the coordinate area as much as the bouncing area based on user action. If the coordinates does not exceed the bouncing area when an element is dragged, the coordinates where bouncing effects are applied are retuned back into the coordinate area<ko>바운스 영역의 크기. 사용자의 동작에 따라 좌표가 좌표 영역을 넘어 바운스 영역의 크기만큼 더 이동할 수 있다. 사용자가 끌어다 놓는 동작을 했을 때 좌표가 바운스 영역에 있으면, 바운스 효과가 적용된 좌표가 다시 좌표 영역 안으로 들어온다</ko>\n * @property {Number} [bounce.0=0] The size of coordinate of the minimum area <ko>최소 좌표 바운스 영역의 크기</ko>\n * @property {Number} [bounce.1=0] The size of coordinate of the maximum area <ko>최대 좌표 바운스 영역의 크기</ko>\n * @property {Boolean[]} [circular] Indicates whether a circular element is available. If it is set to \"true\" and an element is dragged outside the coordinate area, the element will appear on the other side.<ko>순환 여부. 'true'로 설정한 방향의 좌표 영역 밖으로 엘리먼트가 이동하면 반대 방향에서 엘리먼트가 나타난다</ko>\n * @property {Boolean} [circular.0=false] Indicates whether to circulate to the coordinate of the minimum <ko>최소 좌표 방향의 순환 여부</ko>\n * @property {Boolean} [circular.1=false] Indicates whether to circulate to the coordinate of the maximum <ko>최대 좌표 방향의 순환 여부</ko>\n**/\n\n/**\n * @typedef {Object} AxesOption The option object of the eg.Axes module\n * @ko eg.Axes 모듈의 옵션 객체\n * @property {Function} [easing=easing.easeOutCubic] The easing function to apply to an animation <ko>애니메이션에 적용할 easing 함수</ko>\n * @property {Number} [maximumDuration=Infinity] Maximum duration of the animation <ko>가속도에 의해 애니메이션이 동작할 때의 최대 좌표 이동 시간</ko>\n * @property {Number} [minimumDuration=0] Minimum duration of the animation <ko>가속도에 의해 애니메이션이 동작할 때의 최소 좌표 이동 시간</ko>\n * @property {Number} [deceleration=0.0006] Deceleration of the animation where acceleration is manually enabled by user. A higher value indicates shorter running time. <ko>사용자의 동작으로 가속도가 적용된 애니메이션의 감속도. 값이 높을수록 애니메이션 실행 시간이 짧아진다</ko>\n * @property {Boolean} [interruptable=true] Indicates whether an animation is interruptible.<br>- true: It can be paused or stopped by user action or the API.<br>- false: It cannot be paused or stopped by user action or the API while it is running.<ko>진행 중인 애니메이션 중지 가능 여부.<br>- true: 사용자의 동작이나 API로 애니메이션을 중지할 수 있다.<br>- false: 애니메이션이 진행 중일 때는 사용자의 동작이나 API가 적용되지 않는다</ko>\n**/\n\n/**\n * @class eg.Axes\n * @classdesc A module used to change the information of user action entered by various input devices such as touch screen or mouse into the logical virtual coordinates. You can easily create a UI that responds to user actions.\n * @ko 터치 입력 장치나 마우스와 같은 다양한 입력 장치를 통해 전달 받은 사용자의 동작을 논리적인 가상 좌표로 변경하는 모듈이다. 사용자 동작에 반응하는 UI를 손쉽게 만들수 있다.\n * @extends eg.Component\n *\n * @param {Object.<string, AxisOption>} axis Axis information managed by eg.Axes. The key of the axis specifies the name to use as the logical virtual coordinate system.  <ko>eg.Axes가 관리하는 축 정보. 축의 키는 논리적인 가상 좌표계로 사용할 이름을 지정한다.</ko>\n * @param {AxesOption} [options] The option object of the eg.Axes module<ko>eg.Axes 모듈의 옵션 객체</ko>\n * @param {Object.<string, number>} [startPos] The coordinates to be moved when creating an instance. not triggering change event.<ko>인스턴스 생성시 이동할 좌표, change 이벤트는 발생하지 않음.</ko>\n *\n * @support {\"ie\": \"10+\", \"ch\" : \"latest\", \"ff\" : \"latest\",  \"sf\" : \"latest\", \"edge\" : \"latest\", \"ios\" : \"7+\", \"an\" : \"2.3+ (except 3.x)\"}\n * @example\n *\n * // 1. Initialize eg.Axes\n * const axes = new eg.Axes({\n *\tsomething1: {\n *\t\trange: [0, 150],\n *\t\tbounce: 50\n *\t},\n *\tsomething2: {\n *\t\trange: [0, 200],\n *\t\tbounce: 100\n *\t},\n *\tsomethingN: {\n *\t\trange: [1, 10],\n *\t}\n * }, {\n *  deceleration : 0.0024\n * });\n *\n * // 2. attach event handler\n * axes.on({\n *\t\"hold\" : function(evt) {\n *\t},\n *\t\"release\" : function(evt) {\n *\t},\n *\t\"animationStart\" : function(evt) {\n *\t},\n *\t\"animationEnd\" : function(evt) {\n *\t},\n *\t\"change\" : function(evt) {\n *\t}\n * });\n *\n * // 3. Initialize inputTypes\n * const panInputArea = new eg.Axes.PanInput(\"#area\", {\n *\tscale: [0.5, 1]\n * });\n * const panInputHmove = new eg.Axes.PanInput(\"#hmove\");\n * const panInputVmove = new eg.Axes.PanInput(\"#vmove\");\n * const pinchInputArea = new eg.Axes.PinchInput(\"#area\", {\n *\tscale: 1.5\n * });\n *\n * // 4. Connect eg.Axes and InputTypes\n * // [PanInput] When the mouse or touchscreen is down and moved.\n * // Connect the 'something2' axis to the mouse or touchscreen x position and\n * // connect the 'somethingN' axis to the mouse or touchscreen y position.\n * axes.connect([\"something2\", \"somethingN\"], panInputArea); // or axes.connect(\"something2 somethingN\", panInputArea);\n *\n * // Connect only one 'something1' axis to the mouse or touchscreen x position.\n * axes.connect([\"something1\"], panInputHmove); // or axes.connect(\"something1\", panInputHmove);\n *\n * // Connect only one 'something2' axis to the mouse or touchscreen y position.\n * axes.connect([\"\", \"something2\"], panInputVmove); // or axes.connect(\" something2\", panInputVmove);\n *\n * // [PinchInput] Connect 'something2' axis when two pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * axes.connect(\"something2\", pinchInputArea);\n */\n\nvar Axes =\n/*#__PURE__*/\nfunction (_super) {\n  __extends(Axes, _super);\n\n  function Axes(axis, options, startPos) {\n    if (axis === void 0) {\n      axis = {};\n    }\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.axis = axis;\n    _this._inputs = [];\n    _this.options = __assign({\n      easing: function easeOutCubic(x) {\n        return 1 - Math.pow(1 - x, 3);\n      },\n      interruptable: true,\n      maximumDuration: Infinity,\n      minimumDuration: 0,\n      deceleration: 0.0006\n    }, options);\n    _this.itm = new InterruptManager(_this.options);\n    _this.axm = new AxisManager(_this.axis, _this.options);\n    _this.em = new EventManager(_this);\n    _this.am = new AnimationManager(_this);\n    _this.io = new InputObserver(_this);\n\n    _this.em.setAnimationManager(_this.am);\n\n    startPos && _this.em.triggerChange(startPos);\n    return _this;\n  }\n  /**\n   * Connect the axis of eg.Axes to the inputType.\n   * @ko eg.Axes의 축과 inputType을 연결한다\n   * @method eg.Axes#connect\n   * @param {(String[]|String)} axes The name of the axis to associate with inputType <ko>inputType과 연결할 축의 이름</ko>\n   * @param {Object} inputType The inputType instance to associate with the axis of eg.Axes <ko>eg.Axes의 축과 연결할 inputType 인스턴스<ko>\n   * @return {eg.Axes} An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n   * @example\n   * const axes = new eg.Axes({\n   *   \"x\": {\n   *      range: [0, 100]\n   *   },\n   *   \"xOther\": {\n   *      range: [-100, 100]\n   *   }\n   * });\n   *\n   * axes.connect(\"x\", new eg.Axes.PanInput(\"#area1\"))\n   *    .connect(\"x xOther\", new eg.Axes.PanInput(\"#area2\"))\n   *    .connect(\" xOther\", new eg.Axes.PanInput(\"#area3\"))\n   *    .connect([\"x\"], new eg.Axes.PanInput(\"#area4\"))\n   *    .connect([\"xOther\", \"x\"], new eg.Axes.PanInput(\"#area5\"))\n   *    .connect([\"\", \"xOther\"], new eg.Axes.PanInput(\"#area6\"));\n   */\n\n\n  var __proto = Axes.prototype;\n\n  __proto.connect = function (axes, inputType) {\n    var mapped;\n\n    if (typeof axes === \"string\") {\n      mapped = axes.split(\" \");\n    } else {\n      mapped = axes.concat();\n    } // check same instance\n\n\n    if (~this._inputs.indexOf(inputType)) {\n      this.disconnect(inputType);\n    } // check same element in hammer type for share\n\n\n    if (\"hammer\" in inputType) {\n      var targets = this._inputs.filter(function (v) {\n        return v.hammer && v.element === inputType.element;\n      });\n\n      if (targets.length) {\n        inputType.hammer = targets[0].hammer;\n      }\n    }\n\n    inputType.mapAxes(mapped);\n    inputType.connect(this.io);\n\n    this._inputs.push(inputType);\n\n    return this;\n  };\n  /**\n   * Disconnect the axis of eg.Axes from the inputType.\n   * @ko eg.Axes의 축과 inputType의 연결을 끊는다.\n   * @method eg.Axes#disconnect\n   * @param {Object} [inputType] An inputType instance associated with the axis of eg.Axes <ko>eg.Axes의 축과 연결한 inputType 인스턴스<ko>\n   * @return {eg.Axes} An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n   * @example\n   * const axes = new eg.Axes({\n   *   \"x\": {\n   *      range: [0, 100]\n   *   },\n   *   \"xOther\": {\n   *      range: [-100, 100]\n   *   }\n   * });\n   *\n   * const input1 = new eg.Axes.PanInput(\"#area1\");\n   * const input2 = new eg.Axes.PanInput(\"#area2\");\n   * const input3 = new eg.Axes.PanInput(\"#area3\");\n   *\n   * axes.connect(\"x\", input1);\n   *    .connect(\"x xOther\", input2)\n   *    .connect([\"xOther\", \"x\"], input3);\n   *\n   * axes.disconnect(input1); // disconnects input1\n   * axes.disconnect(); // disconnects all of them\n   */\n\n\n  __proto.disconnect = function (inputType) {\n    if (inputType) {\n      var index = this._inputs.indexOf(inputType);\n\n      if (index >= 0) {\n        this._inputs[index].disconnect();\n\n        this._inputs.splice(index, 1);\n      }\n    } else {\n      this._inputs.forEach(function (v) {\n        return v.disconnect();\n      });\n\n      this._inputs = [];\n    }\n\n    return this;\n  };\n  /**\n   * Returns the current position of the coordinates.\n   * @ko 좌표의 현재 위치를 반환한다\n   * @method eg.Axes#get\n   * @param {Object} [axes] The names of the axis <ko>축 이름들</ko>\n   * @return {Object.<string, number>} Axis coordinate information <ko>축 좌표 정보</ko>\n   * @example\n   * const axes = new eg.Axes({\n   *   \"x\": {\n   *      range: [0, 100]\n   *   },\n   *   \"xOther\": {\n   *      range: [-100, 100]\n   *   },\n   * \t \"zoom\": {\n   *      range: [50, 30]\n   *   }\n   * });\n   *\n   * axes.get(); // {\"x\": 0, \"xOther\": -100, \"zoom\": 50}\n   * axes.get([\"x\", \"zoom\"]); // {\"x\": 0, \"zoom\": 50}\n   */\n\n\n  __proto.get = function (axes) {\n    return this.axm.get(axes);\n  };\n  /**\n   * Moves an axis to specific coordinates.\n   * @ko 좌표를 이동한다.\n   * @method eg.Axes#setTo\n   * @param {Object.<string, number>} pos The coordinate to move to <ko>이동할 좌표</ko>\n   * @param {Number} [duration=0] Duration of the animation (unit: ms) <ko>애니메이션 진행 시간(단위: ms)</ko>\n   * @return {eg.Axes} An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n   * @example\n   * const axes = new eg.Axes({\n   *   \"x\": {\n   *      range: [0, 100]\n   *   },\n   *   \"xOther\": {\n   *      range: [-100, 100]\n   *   },\n   * \t \"zoom\": {\n   *      range: [50, 30]\n   *   }\n   * });\n   *\n   * axes.setTo({\"x\": 30, \"zoom\": 60});\n   * axes.get(); // {\"x\": 30, \"xOther\": -100, \"zoom\": 60}\n   *\n   * axes.setTo({\"x\": 100, \"xOther\": 60}, 1000); // animatation\n   *\n   * // after 1000 ms\n   * axes.get(); // {\"x\": 100, \"xOther\": 60, \"zoom\": 60}\n   */\n\n\n  __proto.setTo = function (pos, duration) {\n    if (duration === void 0) {\n      duration = 0;\n    }\n\n    this.am.setTo(pos, duration);\n    return this;\n  };\n  /**\n   * Moves an axis from the current coordinates to specific coordinates.\n   * @ko 현재 좌표를 기준으로 좌표를 이동한다.\n   * @method eg.Axes#setBy\n   * @param {Object.<string, number>} pos The coordinate to move to <ko>이동할 좌표</ko>\n   * @param {Number} [duration=0] Duration of the animation (unit: ms) <ko>애니메이션 진행 시간(단위: ms)</ko>\n   * @return {eg.Axes} An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n   * @example\n   * const axes = new eg.Axes({\n   *   \"x\": {\n   *      range: [0, 100]\n   *   },\n   *   \"xOther\": {\n   *      range: [-100, 100]\n   *   },\n   * \t \"zoom\": {\n   *      range: [50, 30]\n   *   }\n   * });\n   *\n   * axes.setBy({\"x\": 30, \"zoom\": 10});\n   * axes.get(); // {\"x\": 30, \"xOther\": -100, \"zoom\": 60}\n   *\n   * axes.setBy({\"x\": 70, \"xOther\": 60}, 1000); // animatation\n   *\n   * // after 1000 ms\n   * axes.get(); // {\"x\": 100, \"xOther\": -40, \"zoom\": 60}\n   */\n\n\n  __proto.setBy = function (pos, duration) {\n    if (duration === void 0) {\n      duration = 0;\n    }\n\n    this.am.setBy(pos, duration);\n    return this;\n  };\n  /**\n   * Returns whether there is a coordinate in the bounce area of ​​the target axis.\n   * @ko 대상 축 중 bounce영역에 좌표가 존재하는지를 반환한다\n   * @method eg.Axes#isBounceArea\n   * @param {Object} [axes] The names of the axis <ko>축 이름들</ko>\n   * @return {Boolen} Whether the bounce area exists. <ko>bounce 영역 존재 여부</ko>\n   * @example\n   * const axes = new eg.Axes({\n   *   \"x\": {\n   *      range: [0, 100]\n   *   },\n   *   \"xOther\": {\n   *      range: [-100, 100]\n   *   },\n   * \t \"zoom\": {\n   *      range: [50, 30]\n   *   }\n   * });\n   *\n   * axes.isBounceArea([\"x\"]);\n   * axes.isBounceArea([\"x\", \"zoom\"]);\n   * axes.isBounceArea();\n   */\n\n\n  __proto.isBounceArea = function (axes) {\n    return this.axm.isOutside(axes);\n  };\n  /**\n  * Destroys properties, and events used in a module and disconnect all connections to inputTypes.\n  * @ko 모듈에 사용한 속성, 이벤트를 해제한다. 모든 inputType과의 연결을 끊는다.\n  * @method eg.Axes#destroy\n  */\n\n\n  __proto.destroy = function () {\n    this.disconnect();\n    this.em.destroy();\n  };\n  /**\n   * Version info string\n   * @ko 버전정보 문자열\n   * @name VERSION\n   * @static\n   * @type {String}\n   * @example\n   * eg.Axes.VERSION;  // ex) 3.3.3\n   * @memberof eg.Axes\n   */\n\n\n  Axes.VERSION = \"2.5.13\";\n  /**\n   * @name eg.Axes.TRANSFORM\n   * @desc Returns the transform attribute with CSS vendor prefixes.\n   * @ko CSS vendor prefixes를 붙인 transform 속성을 반환한다.\n   *\n   * @constant\n   * @type {String}\n   * @example\n   * eg.Axes.TRANSFORM; // \"transform\" or \"webkitTransform\"\n   */\n\n  Axes.TRANSFORM = TRANSFORM;\n  /**\n   * @name eg.Axes.DIRECTION_NONE\n   * @constant\n   * @type {Number}\n   */\n\n  Axes.DIRECTION_NONE = DIRECTION_NONE;\n  /**\n   * @name eg.Axes.DIRECTION_LEFT\n   * @constant\n   * @type {Number}\n  */\n\n  Axes.DIRECTION_LEFT = DIRECTION_LEFT;\n  /**\n   * @name eg.Axes.DIRECTION_RIGHT\n   * @constant\n   * @type {Number}\n  */\n\n  Axes.DIRECTION_RIGHT = DIRECTION_RIGHT;\n  /**\n   * @name eg.Axes.DIRECTION_UP\n   * @constant\n   * @type {Number}\n  */\n\n  Axes.DIRECTION_UP = DIRECTION_UP;\n  /**\n   * @name eg.Axes.DIRECTION_DOWN\n   * @constant\n   * @type {Number}\n  */\n\n  Axes.DIRECTION_DOWN = DIRECTION_DOWN;\n  /**\n   * @name eg.Axes.DIRECTION_HORIZONTAL\n   * @constant\n   * @type {Number}\n  */\n\n  Axes.DIRECTION_HORIZONTAL = DIRECTION_HORIZONTAL;\n  /**\n   * @name eg.Axes.DIRECTION_VERTICAL\n   * @constant\n   * @type {Number}\n  */\n\n  Axes.DIRECTION_VERTICAL = DIRECTION_VERTICAL;\n  /**\n   * @name eg.Axes.DIRECTION_ALL\n   * @constant\n   * @type {Number}\n  */\n\n  Axes.DIRECTION_ALL = DIRECTION_ALL;\n  return Axes;\n}(Component);\n\nvar SUPPORT_POINTER_EVENTS = \"PointerEvent\" in win || \"MSPointerEvent\" in win;\nvar SUPPORT_TOUCH = \"ontouchstart\" in win;\nvar UNIQUEKEY = \"_EGJS_AXES_INPUTTYPE_\";\nfunction toAxis(source, offset) {\n  return offset.reduce(function (acc, v, i) {\n    if (source[i]) {\n      acc[source[i]] = v;\n    }\n\n    return acc;\n  }, {});\n}\nfunction createHammer(element, options) {\n  try {\n    // create Hammer\n    return new Manager(element, __assign({}, options));\n  } catch (e) {\n    return null;\n  }\n}\nfunction convertInputType(inputType) {\n  if (inputType === void 0) {\n    inputType = [];\n  }\n\n  var hasTouch = false;\n  var hasMouse = false;\n  var hasPointer = false;\n  inputType.forEach(function (v) {\n    switch (v) {\n      case \"mouse\":\n        hasMouse = true;\n        break;\n\n      case \"touch\":\n        hasTouch = SUPPORT_TOUCH;\n        break;\n\n      case \"pointer\":\n        hasPointer = SUPPORT_POINTER_EVENTS;\n      // no default\n    }\n  });\n\n  if (hasPointer) {\n    return PointerEventInput;\n  } else if (hasTouch && hasMouse) {\n    return TouchMouseInput;\n  } else if (hasTouch) {\n    return TouchInput;\n  } else if (hasMouse) {\n    return MouseInput;\n  }\n\n  return null;\n}\n\nfunction getDirectionByAngle(angle, thresholdAngle) {\n  if (thresholdAngle < 0 || thresholdAngle > 90) {\n    return DIRECTION_NONE;\n  }\n\n  var toAngle = Math.abs(angle);\n  return toAngle > thresholdAngle && toAngle < 180 - thresholdAngle ? DIRECTION_VERTICAL : DIRECTION_HORIZONTAL;\n}\nfunction getNextOffset(speeds, deceleration) {\n  var normalSpeed = Math.sqrt(speeds[0] * speeds[0] + speeds[1] * speeds[1]);\n  var duration = Math.abs(normalSpeed / -deceleration);\n  return [speeds[0] / 2 * duration, speeds[1] / 2 * duration];\n}\nfunction useDirection(checkType, direction, userDirection) {\n  if (userDirection) {\n    return !!(direction === DIRECTION_ALL || direction & checkType && userDirection & checkType);\n  } else {\n    return !!(direction & checkType);\n  }\n}\n/**\n * @typedef {Object} PanInputOption The option object of the eg.Axes.PanInput module.\n * @ko eg.Axes.PanInput 모듈의 옵션 객체\n * @property {String[]} [inputType=[\"touch\",\"mouse\", \"pointer\"]] Types of input devices.<br>- touch: Touch screen<br>- mouse: Mouse <ko>입력 장치 종류.<br>- touch: 터치 입력 장치<br>- mouse: 마우스</ko>\n * @property {Number[]} [scale] Coordinate scale that a user can move<ko>사용자의 동작으로 이동하는 좌표의 배율</ko>\n * @property {Number} [scale.0=1] horizontal axis scale <ko>수평축 배율</ko>\n * @property {Number} [scale.1=1] vertical axis scale <ko>수직축 배율</ko>\n * @property {Number} [thresholdAngle=45] The threshold value that determines whether user action is horizontal or vertical (0~90) <ko>사용자의 동작이 가로 방향인지 세로 방향인지 판단하는 기준 각도(0~90)</ko>\n * @property {Number} [threshold=0] Minimal pan distance required before recognizing <ko>사용자의 Pan 동작을 인식하기 위해산 최소한의 거리</ko>\n * @property {Object} [hammerManagerOptions={cssProps: {userSelect: \"none\",touchSelect: \"none\",touchCallout: \"none\",userDrag: \"none\"}] Options of Hammer.Manager <ko>Hammer.Manager의 옵션</ko>\n**/\n\n/**\n * @class eg.Axes.PanInput\n * @classdesc A module that passes the amount of change to eg.Axes when the mouse or touchscreen is down and moved. use less than two axes.\n * @ko 마우스나 터치 스크린을 누르고 움직일때의 변화량을 eg.Axes에 전달하는 모듈. 두개 이하의 축을 사용한다.\n *\n * @example\n * const pan = new eg.Axes.PanInput(\"#area\", {\n * \t\tinputType: [\"touch\"],\n * \t\tscale: [1, 1.3],\n * });\n *\n * // Connect the 'something2' axis to the mouse or touchscreen x position when the mouse or touchscreen is down and moved.\n * // Connect the 'somethingN' axis to the mouse or touchscreen y position when the mouse or touchscreen is down and moved.\n * axes.connect([\"something2\", \"somethingN\"], pan); // or axes.connect(\"something2 somethingN\", pan);\n *\n * // Connect only one 'something1' axis to the mouse or touchscreen x position when the mouse or touchscreen is down and moved.\n * axes.connect([\"something1\"], pan); // or axes.connect(\"something1\", pan);\n *\n * // Connect only one 'something2' axis to the mouse or touchscreen y position when the mouse or touchscreen is down and moved.\n * axes.connect([\"\", \"something2\"], pan); // or axes.connect(\" something2\", pan);\n *\n * @param {HTMLElement|String|jQuery} element An element to use the eg.Axes.PanInput module <ko>eg.Axes.PanInput 모듈을 사용할 엘리먼트</ko>\n * @param {PanInputOption} [options] The option object of the eg.Axes.PanInput module<ko>eg.Axes.PanInput 모듈의 옵션 객체</ko>\n */\n\nvar PanInput =\n/*#__PURE__*/\nfunction () {\n  function PanInput(el, options) {\n    this.axes = [];\n    this.hammer = null;\n    this.element = null;\n    this.panRecognizer = null;\n    /**\n     * Hammer helps you add support for touch gestures to your page\n     *\n     * @external Hammer\n     * @see {@link http://hammerjs.github.io|Hammer.JS}\n     * @see {@link http://hammerjs.github.io/jsdoc/Hammer.html|Hammer.JS API documents}\n     * @see Hammer.JS applies specific CSS properties by {@link http://hammerjs.github.io/jsdoc/Hammer.defaults.cssProps.html|default} when creating an instance. The eg.Axes module removes all default CSS properties provided by Hammer.JS\n     */\n\n    if (typeof Manager === \"undefined\") {\n      throw new Error(\"The Hammerjs must be loaded before eg.Axes.PanInput.\\nhttp://hammerjs.github.io/\");\n    }\n\n    this.element = $(el);\n    this.options = __assign({\n      inputType: [\"touch\", \"mouse\", \"pointer\"],\n      scale: [1, 1],\n      thresholdAngle: 45,\n      threshold: 0,\n      hammerManagerOptions: {\n        // css properties were removed due to usablility issue\n        // http://hammerjs.github.io/jsdoc/Hammer.defaults.cssProps.html\n        cssProps: {\n          userSelect: \"none\",\n          touchSelect: \"none\",\n          touchCallout: \"none\",\n          userDrag: \"none\"\n        }\n      }\n    }, options);\n    this.onHammerInput = this.onHammerInput.bind(this);\n    this.onPanmove = this.onPanmove.bind(this);\n    this.onPanend = this.onPanend.bind(this);\n  }\n\n  var __proto = PanInput.prototype;\n\n  __proto.mapAxes = function (axes) {\n    var useHorizontal = !!axes[0];\n    var useVertical = !!axes[1];\n\n    if (useHorizontal && useVertical) {\n      this._direction = DIRECTION_ALL;\n    } else if (useHorizontal) {\n      this._direction = DIRECTION_HORIZONTAL;\n    } else if (useVertical) {\n      this._direction = DIRECTION_VERTICAL;\n    } else {\n      this._direction = DIRECTION_NONE;\n    }\n\n    this.axes = axes;\n  };\n\n  __proto.connect = function (observer) {\n    var hammerOption = {\n      direction: this._direction,\n      threshold: this.options.threshold\n    };\n\n    if (this.hammer) {\n      // for sharing hammer instance.\n      // hammer remove previous PanRecognizer.\n      this.removeRecognizer();\n      this.dettachEvent();\n    } else {\n      var keyValue = this.element[UNIQUEKEY];\n\n      if (!keyValue) {\n        keyValue = String(Math.round(Math.random() * new Date().getTime()));\n      }\n\n      var inputClass = convertInputType(this.options.inputType);\n\n      if (!inputClass) {\n        throw new Error(\"Wrong inputType parameter!\");\n      }\n\n      this.hammer = createHammer(this.element, __assign({\n        inputClass: inputClass\n      }, this.options.hammerManagerOptions));\n      this.element[UNIQUEKEY] = keyValue;\n    }\n\n    this.panRecognizer = new Pan(hammerOption);\n    this.hammer.add(this.panRecognizer);\n    this.attachEvent(observer);\n    return this;\n  };\n\n  __proto.disconnect = function () {\n    this.removeRecognizer();\n\n    if (this.hammer) {\n      this.dettachEvent();\n    }\n\n    this._direction = DIRECTION_NONE;\n    return this;\n  };\n  /**\n  * Destroys elements, properties, and events used in a module.\n  * @ko 모듈에 사용한 엘리먼트와 속성, 이벤트를 해제한다.\n  * @method eg.Axes.PanInput#destroy\n  */\n\n\n  __proto.destroy = function () {\n    this.disconnect();\n\n    if (this.hammer && this.hammer.recognizers.length === 0) {\n      this.hammer.destroy();\n    }\n\n    delete this.element[UNIQUEKEY];\n    this.element = null;\n    this.hammer = null;\n  };\n  /**\n   * Enables input devices\n   * @ko 입력 장치를 사용할 수 있게 한다\n   * @method eg.Axes.PanInput#enable\n   * @return {eg.Axes.PanInput} An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n   */\n\n\n  __proto.enable = function () {\n    this.hammer && (this.hammer.get(\"pan\").options.enable = true);\n    return this;\n  };\n  /**\n   * Disables input devices\n   * @ko 입력 장치를 사용할 수 없게 한다.\n   * @method eg.Axes.PanInput#disable\n   * @return {eg.Axes.PanInput} An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n   */\n\n\n  __proto.disable = function () {\n    this.hammer && (this.hammer.get(\"pan\").options.enable = false);\n    return this;\n  };\n  /**\n   * Returns whether to use an input device\n   * @ko 입력 장치를 사용 여부를 반환한다.\n   * @method eg.Axes.PanInput#isEnable\n   * @return {Boolean} Whether to use an input device <ko>입력장치 사용여부</ko>\n   */\n\n\n  __proto.isEnable = function () {\n    return !!(this.hammer && this.hammer.get(\"pan\").options.enable);\n  };\n\n  __proto.removeRecognizer = function () {\n    if (this.hammer && this.panRecognizer) {\n      this.hammer.remove(this.panRecognizer);\n      this.panRecognizer = null;\n    }\n  };\n\n  __proto.onHammerInput = function (event) {\n    if (this.isEnable()) {\n      if (event.isFirst) {\n        this.observer.hold(this, event);\n      } else if (event.isFinal) {\n        this.onPanend(event);\n      }\n    }\n  };\n\n  __proto.onPanmove = function (event) {\n    var userDirection = getDirectionByAngle(event.angle, this.options.thresholdAngle); // not support offset properties in Hammerjs - start\n\n    var prevInput = this.hammer.session.prevInput;\n    /* eslint-disable no-param-reassign */\n\n    if (prevInput) {\n      event.offsetX = event.deltaX - prevInput.deltaX;\n      event.offsetY = event.deltaY - prevInput.deltaY;\n    } else {\n      event.offsetX = 0;\n      event.offsetY = 0;\n    }\n\n    var offset = this.getOffset([event.offsetX, event.offsetY], [useDirection(DIRECTION_HORIZONTAL, this._direction, userDirection), useDirection(DIRECTION_VERTICAL, this._direction, userDirection)]);\n    var prevent = offset.some(function (v) {\n      return v !== 0;\n    });\n\n    if (prevent) {\n      event.srcEvent.preventDefault();\n      event.srcEvent.stopPropagation();\n    }\n\n    event.preventSystemEvent = prevent;\n    prevent && this.observer.change(this, event, toAxis(this.axes, offset));\n  };\n\n  __proto.onPanend = function (event) {\n    var offset = this.getOffset([Math.abs(event.velocityX) * (event.deltaX < 0 ? -1 : 1), Math.abs(event.velocityY) * (event.deltaY < 0 ? -1 : 1)], [useDirection(DIRECTION_HORIZONTAL, this._direction), useDirection(DIRECTION_VERTICAL, this._direction)]);\n    offset = getNextOffset(offset, this.observer.options.deceleration);\n    this.observer.release(this, event, toAxis(this.axes, offset));\n  };\n\n  __proto.attachEvent = function (observer) {\n    this.observer = observer;\n    this.hammer.on(\"hammer.input\", this.onHammerInput).on(\"panstart panmove\", this.onPanmove);\n  };\n\n  __proto.dettachEvent = function () {\n    this.hammer.off(\"hammer.input\", this.onHammerInput).off(\"panstart panmove\", this.onPanmove);\n    this.observer = null;\n  };\n\n  __proto.getOffset = function (properties, direction) {\n    var offset = [0, 0];\n    var scale = this.options.scale;\n\n    if (direction[0]) {\n      offset[0] = properties[0] * scale[0];\n    }\n\n    if (direction[1]) {\n      offset[1] = properties[1] * scale[1];\n    }\n\n    return offset;\n  };\n\n  return PanInput;\n}();\n\nvar RotatePanInput =\n/*#__PURE__*/\nfunction (_super) {\n  __extends(RotatePanInput, _super);\n\n  function RotatePanInput(el, options) {\n    var _this = _super.call(this, el, options) || this;\n\n    _this.prevQuadrant = null;\n    _this.lastDiff = 0;\n    return _this;\n  }\n\n  var __proto = RotatePanInput.prototype;\n\n  __proto.mapAxes = function (axes) {\n    this._direction = Axes.DIRECTION_ALL;\n    this.axes = axes;\n  };\n\n  __proto.onHammerInput = function (event) {\n    if (this.isEnable()) {\n      if (event.isFirst) {\n        this.observer.hold(this, event);\n        this.onPanstart(event);\n      } else if (event.isFinal) {\n        this.onPanend(event);\n      }\n    }\n  };\n\n  __proto.onPanstart = function (event) {\n    var rect = this.element.getBoundingClientRect();\n    /**\n     * Responsive\n     */\n    // TODO: how to do if element is ellipse not circle.\n\n    this.coefficientForDistanceToAngle = 360 / (rect.width * Math.PI); // from 2*pi*r * x / 360\n    // TODO: provide a way to set origin like https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin\n\n    this.rotateOrigin = [rect.left + (rect.width - 1) / 2, rect.top + (rect.height - 1) / 2]; // init angle.\n\n    this.prevAngle = null;\n    this.triggerChange(event);\n  };\n\n  __proto.onPanmove = function (event) {\n    this.triggerChange(event);\n  };\n\n  __proto.onPanend = function (event) {\n    this.triggerChange(event);\n    this.triggerAnimation(event);\n  };\n\n  __proto.triggerChange = function (event) {\n    var angle = this.getAngle(event.center.x, event.center.y);\n    var quadrant = this.getQuadrant(event.center.x, event.center.y);\n    var diff = this.getDifference(this.prevAngle, angle, this.prevQuadrant, quadrant);\n    this.prevAngle = angle;\n    this.prevQuadrant = quadrant;\n\n    if (diff === 0) {\n      return;\n    }\n\n    this.lastDiff = diff;\n    this.observer.change(this, event, toAxis(this.axes, [-diff])); // minus for clockwise\n  };\n\n  __proto.triggerAnimation = function (event) {\n    var vx = event.velocityX;\n    var vy = event.velocityY;\n    var velocity = Math.sqrt(vx * vx + vy * vy) * (this.lastDiff > 0 ? -1 : 1); // clockwise\n\n    var duration = Math.abs(velocity / -this.observer.options.deceleration);\n    var distance = velocity / 2 * duration;\n    this.observer.release(this, event, toAxis(this.axes, [distance * this.coefficientForDistanceToAngle]));\n  };\n\n  __proto.getDifference = function (prevAngle, angle, prevQuadrant, quadrant) {\n    var diff;\n\n    if (prevAngle === null) {\n      diff = 0;\n    } else if (prevQuadrant === 1 && quadrant === 4) {\n      diff = -prevAngle - (360 - angle);\n    } else if (prevQuadrant === 4 && quadrant === 1) {\n      diff = 360 - prevAngle + angle;\n    } else {\n      diff = angle - prevAngle;\n    }\n\n    return diff;\n  };\n\n  __proto.getPosFromOrigin = function (posX, posY) {\n    return {\n      x: posX - this.rotateOrigin[0],\n      y: this.rotateOrigin[1] - posY\n    };\n  };\n\n  __proto.getAngle = function (posX, posY) {\n    var _a = this.getPosFromOrigin(posX, posY),\n        x = _a.x,\n        y = _a.y;\n\n    var angle = Math.atan2(y, x) * 180 / Math.PI; // console.log(angle, x, y);\n\n    return angle < 0 ? 360 + angle : angle;\n  };\n  /**\n   * Quadrant\n   *       y(+)\n   *       |\n   *   2   |    1\n   * --------------->x(+)\n   *   3   |    4\n   *       |\n   */\n\n\n  __proto.getQuadrant = function (posX, posY) {\n    var _a = this.getPosFromOrigin(posX, posY),\n        x = _a.x,\n        y = _a.y;\n\n    var q = 0;\n\n    if (x >= 0 && y >= 0) {\n      q = 1;\n    } else if (x < 0 && y >= 0) {\n      q = 2;\n    } else if (x < 0 && y < 0) {\n      q = 3;\n    } else if (x >= 0 && y < 0) {\n      q = 4;\n    }\n\n    return q;\n  };\n\n  return RotatePanInput;\n}(PanInput);\n\n/**\n * @typedef {Object} PinchInputOption The option object of the eg.Axes.PinchInput module\n * @ko eg.Axes.PinchInput 모듈의 옵션 객체\n * @property {Number} [scale=1] Coordinate scale that a user can move<ko>사용자의 동작으로 이동하는 좌표의 배율</ko>\n * @property {Number} [threshold=0] Minimal scale before recognizing <ko>사용자의 Pinch 동작을 인식하기 위해산 최소한의 배율</ko>\n * @property {Object} [hammerManagerOptions={cssProps: {userSelect: \"none\",touchSelect: \"none\",touchCallout: \"none\",userDrag: \"none\"}] Options of Hammer.Manager <ko>Hammer.Manager의 옵션</ko>\n**/\n\n/**\n * @class eg.Axes.PinchInput\n * @classdesc A module that passes the amount of change to eg.Axes when two pointers are moving toward (zoom-in) or away from each other (zoom-out). use one axis.\n * @ko 2개의 pointer를 이용하여 zoom-in하거나 zoom-out 하는 동작의 변화량을 eg.Axes에 전달하는 모듈. 한 개 의 축을 사용한다.\n * @example\n * const pinch = new eg.Axes.PinchInput(\"#area\", {\n * \t\tscale: 1\n * });\n *\n * // Connect 'something' axis when two pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * axes.connect(\"something\", pinch);\n *\n * @param {HTMLElement|String|jQuery} element An element to use the eg.Axes.PinchInput module <ko>eg.Axes.PinchInput 모듈을 사용할 엘리먼트</ko>\n * @param {PinchInputOption} [options] The option object of the eg.Axes.PinchInput module<ko>eg.Axes.PinchInput 모듈의 옵션 객체</ko>\n */\n\nvar PinchInput =\n/*#__PURE__*/\nfunction () {\n  function PinchInput(el, options) {\n    this.axes = [];\n    this.hammer = null;\n    this.element = null;\n    this._base = null;\n    this._prev = null;\n    this.pinchRecognizer = null;\n    /**\n     * Hammer helps you add support for touch gestures to your page\n     *\n     * @external Hammer\n     * @see {@link http://hammerjs.github.io|Hammer.JS}\n     * @see {@link http://hammerjs.github.io/jsdoc/Hammer.html|Hammer.JS API documents}\n     * @see Hammer.JS applies specific CSS properties by {@link http://hammerjs.github.io/jsdoc/Hammer.defaults.cssProps.html|default} when creating an instance. The eg.Axes module removes all default CSS properties provided by Hammer.JS\n     */\n\n    if (typeof Manager === \"undefined\") {\n      throw new Error(\"The Hammerjs must be loaded before eg.Axes.PinchInput.\\nhttp://hammerjs.github.io/\");\n    }\n\n    this.element = $(el);\n    this.options = __assign({\n      scale: 1,\n      threshold: 0,\n      inputType: [\"touch\", \"pointer\"],\n      hammerManagerOptions: {\n        // css properties were removed due to usablility issue\n        // http://hammerjs.github.io/jsdoc/Hammer.defaults.cssProps.html\n        cssProps: {\n          userSelect: \"none\",\n          touchSelect: \"none\",\n          touchCallout: \"none\",\n          userDrag: \"none\"\n        }\n      }\n    }, options);\n    this.onPinchStart = this.onPinchStart.bind(this);\n    this.onPinchMove = this.onPinchMove.bind(this);\n    this.onPinchEnd = this.onPinchEnd.bind(this);\n  }\n\n  var __proto = PinchInput.prototype;\n\n  __proto.mapAxes = function (axes) {\n    this.axes = axes;\n  };\n\n  __proto.connect = function (observer) {\n    var hammerOption = {\n      threshold: this.options.threshold\n    };\n\n    if (this.hammer) {\n      // for sharing hammer instance.\n      // hammer remove previous PinchRecognizer.\n      this.removeRecognizer();\n      this.dettachEvent();\n    } else {\n      var keyValue = this.element[UNIQUEKEY];\n\n      if (!keyValue) {\n        keyValue = String(Math.round(Math.random() * new Date().getTime()));\n      }\n\n      var inputClass = convertInputType(this.options.inputType);\n\n      if (!inputClass) {\n        throw new Error(\"Wrong inputType parameter!\");\n      }\n\n      this.hammer = createHammer(this.element, __assign({\n        inputClass: inputClass\n      }, this.options.hammerManagerOptions));\n      this.element[UNIQUEKEY] = keyValue;\n    }\n\n    this.pinchRecognizer = new Pinch(hammerOption);\n    this.hammer.add(this.pinchRecognizer);\n    this.attachEvent(observer);\n    return this;\n  };\n\n  __proto.disconnect = function () {\n    this.removeRecognizer();\n\n    if (this.hammer) {\n      this.hammer.remove(this.pinchRecognizer);\n      this.pinchRecognizer = null;\n      this.dettachEvent();\n    }\n\n    return this;\n  };\n  /**\n  * Destroys elements, properties, and events used in a module.\n  * @ko 모듈에 사용한 엘리먼트와 속성, 이벤트를 해제한다.\n  * @method eg.Axes.PinchInput#destroy\n  */\n\n\n  __proto.destroy = function () {\n    this.disconnect();\n\n    if (this.hammer && this.hammer.recognizers.length === 0) {\n      this.hammer.destroy();\n    }\n\n    delete this.element[UNIQUEKEY];\n    this.element = null;\n    this.hammer = null;\n  };\n\n  __proto.removeRecognizer = function () {\n    if (this.hammer && this.pinchRecognizer) {\n      this.hammer.remove(this.pinchRecognizer);\n      this.pinchRecognizer = null;\n    }\n  };\n\n  __proto.onPinchStart = function (event) {\n    this._base = this.observer.get(this)[this.axes[0]];\n    var offset = this.getOffset(event.scale);\n    this.observer.hold(this, event);\n    this.observer.change(this, event, toAxis(this.axes, [offset]));\n    this._prev = event.scale;\n  };\n\n  __proto.onPinchMove = function (event) {\n    var offset = this.getOffset(event.scale, this._prev);\n    this.observer.change(this, event, toAxis(this.axes, [offset]));\n    this._prev = event.scale;\n  };\n\n  __proto.onPinchEnd = function (event) {\n    var offset = this.getOffset(event.scale, this._prev);\n    this.observer.change(this, event, toAxis(this.axes, [offset]));\n    this.observer.release(this, event, toAxis(this.axes, [0]), 0);\n    this._base = null;\n    this._prev = null;\n  };\n\n  __proto.getOffset = function (pinchScale, prev) {\n    if (prev === void 0) {\n      prev = 1;\n    }\n\n    return this._base * (pinchScale - prev) * this.options.scale;\n  };\n\n  __proto.attachEvent = function (observer) {\n    this.observer = observer;\n    this.hammer.on(\"pinchstart\", this.onPinchStart).on(\"pinchmove\", this.onPinchMove).on(\"pinchend\", this.onPinchEnd);\n  };\n\n  __proto.dettachEvent = function () {\n    this.hammer.off(\"pinchstart\", this.onPinchStart).off(\"pinchmove\", this.onPinchMove).off(\"pinchend\", this.onPinchEnd);\n    this.observer = null;\n    this._prev = null;\n  };\n  /**\n   * Enables input devices\n   * @ko 입력 장치를 사용할 수 있게 한다\n   * @method eg.Axes.PinchInput#enable\n   * @return {eg.Axes.PinchInput} An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n   */\n\n\n  __proto.enable = function () {\n    this.hammer && (this.hammer.get(\"pinch\").options.enable = true);\n    return this;\n  };\n  /**\n   * Disables input devices\n   * @ko 입력 장치를 사용할 수 없게 한다.\n   * @method eg.Axes.PinchInput#disable\n   * @return {eg.Axes.PinchInput} An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n   */\n\n\n  __proto.disable = function () {\n    this.hammer && (this.hammer.get(\"pinch\").options.enable = false);\n    return this;\n  };\n  /**\n   * Returns whether to use an input device\n   * @ko 입력 장치를 사용 여부를 반환한다.\n   * @method eg.Axes.PinchInput#isEnable\n   * @return {Boolean} Whether to use an input device <ko>입력장치 사용여부</ko>\n   */\n\n\n  __proto.isEnable = function () {\n    return !!(this.hammer && this.hammer.get(\"pinch\").options.enable);\n  };\n\n  return PinchInput;\n}();\n\n/**\n * @typedef {Object} WheelInputOption The option object of the eg.Axes.WheelInput module\n * @ko eg.Axes.WheelInput 모듈의 옵션 객체\n * @property {Number} [scale=1] Coordinate scale that a user can move<ko>사용자의 동작으로 이동하는 좌표의 배율</ko>\n**/\n\n/**\n * @class eg.Axes.WheelInput\n * @classdesc A module that passes the amount of change to eg.Axes when the mouse wheel is moved. use one axis.\n * @ko 마우스 휠이 움직일때의 변화량을 eg.Axes에 전달하는 모듈. 한 개 의 축을 사용한다.\n *\n * @example\n * const wheel = new eg.Axes.WheelInput(\"#area\", {\n * \t\tscale: 1\n * });\n *\n * // Connect 'something' axis when the mousewheel is moved.\n * axes.connect(\"something\", wheel);\n *\n * @param {HTMLElement|String|jQuery} element An element to use the eg.Axes.WheelInput module <ko>eg.Axes.WheelInput 모듈을 사용할 엘리먼트</ko>\n * @param {WheelInputOption} [options] The option object of the eg.Axes.WheelInput module<ko>eg.Axes.WheelInput 모듈의 옵션 객체</ko>\n */\n\nvar WheelInput =\n/*#__PURE__*/\nfunction () {\n  function WheelInput(el, options) {\n    this.axes = [];\n    this.element = null;\n    this._isEnabled = false;\n    this._isHolded = false;\n    this._timer = null;\n    this.element = $(el);\n    this.options = __assign({\n      scale: 1,\n      useNormalized: true\n    }, options);\n    this.onWheel = this.onWheel.bind(this);\n  }\n\n  var __proto = WheelInput.prototype;\n\n  __proto.mapAxes = function (axes) {\n    this.axes = axes;\n  };\n\n  __proto.connect = function (observer) {\n    this.dettachEvent();\n    this.attachEvent(observer);\n    return this;\n  };\n\n  __proto.disconnect = function () {\n    this.dettachEvent();\n    return this;\n  };\n  /**\n  * Destroys elements, properties, and events used in a module.\n  * @ko 모듈에 사용한 엘리먼트와 속성, 이벤트를 해제한다.\n  * @method eg.Axes.WheelInput#destroy\n  */\n\n\n  __proto.destroy = function () {\n    this.disconnect();\n    this.element = null;\n  };\n\n  __proto.onWheel = function (event) {\n    var _this = this;\n\n    if (!this._isEnabled) {\n      return;\n    }\n\n    event.preventDefault();\n\n    if (event.deltaY === 0) {\n      return;\n    }\n\n    if (!this._isHolded) {\n      this.observer.hold(this, event);\n      this._isHolded = true;\n    }\n\n    var offset = (event.deltaY > 0 ? -1 : 1) * this.options.scale * (this.options.useNormalized ? 1 : Math.abs(event.deltaY));\n    this.observer.change(this, event, toAxis(this.axes, [offset]));\n    clearTimeout(this._timer);\n    this._timer = setTimeout(function () {\n      if (_this._isHolded) {\n        _this._isHolded = false;\n\n        _this.observer.release(_this, event, toAxis(_this.axes, [0]));\n      }\n    }, 50);\n  };\n\n  __proto.attachEvent = function (observer) {\n    this.observer = observer;\n    this.element.addEventListener(\"wheel\", this.onWheel);\n    this._isEnabled = true;\n  };\n\n  __proto.dettachEvent = function () {\n    this.element.removeEventListener(\"wheel\", this.onWheel);\n    this._isEnabled = false;\n    this.observer = null;\n\n    if (this._timer) {\n      clearTimeout(this._timer);\n      this._timer = null;\n    }\n  };\n  /**\n   * Enables input devices\n   * @ko 입력 장치를 사용할 수 있게 한다\n   * @method eg.Axes.WheelInput#enable\n   * @return {eg.Axes.WheelInput} An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n   */\n\n\n  __proto.enable = function () {\n    this._isEnabled = true;\n    return this;\n  };\n  /**\n   * Disables input devices\n   * @ko 입력 장치를 사용할 수 없게 한다.\n   * @method eg.Axes.WheelInput#disable\n   * @return {eg.Axes.WheelInput} An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n   */\n\n\n  __proto.disable = function () {\n    this._isEnabled = false;\n    return this;\n  };\n  /**\n   * Returns whether to use an input device\n   * @ko 입력 장치를 사용 여부를 반환한다.\n   * @method eg.Axes.WheelInput#isEnable\n   * @return {Boolean} Whether to use an input device <ko>입력장치 사용여부</ko>\n   */\n\n\n  __proto.isEnable = function () {\n    return this._isEnabled;\n  };\n\n  return WheelInput;\n}();\n\nvar KEY_LEFT_ARROW = 37;\nvar KEY_A = 65;\nvar KEY_UP_ARROW = 38;\nvar KEY_W = 87;\nvar KEY_RIGHT_ARROW = 39;\nvar KEY_D = 68;\nvar KEY_DOWN_ARROW = 40;\nvar KEY_S = 83;\nvar DIRECTION_REVERSE = -1;\nvar DIRECTION_FORWARD = 1;\nvar DIRECTION_HORIZONTAL$1 = -1;\nvar DIRECTION_VERTICAL$1 = 1;\nvar DELAY = 80;\n/**\n * @typedef {Object} MoveKeyInputOption The option object of the eg.Axes.MoveKeyInput module\n * @ko eg.Axes.MoveKeyInput 모듈의 옵션 객체\n * @property {Array<Number>} [scale] Coordinate scale that a user can move<ko>사용자의 동작으로 이동하는 좌표의 배율</ko>\n * @property {Number} [scale[0]=1] Coordinate scale for the first axis<ko>첫번째 축의 배율</ko>\n * @property {Number} [scale[1]=1] Coordinate scale for the decond axis<ko>두번째 축의 배율</ko>\n**/\n\n/**\n * @class eg.Axes.MoveKeyInput\n * @classdesc A module that passes the amount of change to eg.Axes when the move key stroke is occured. use two axis.\n * @ko 이동키 입력이 발생했을 때의 변화량을 eg.Axes에 전달하는 모듈. 두 개 의 축을 사용한다.\n *\n * @example\n * const moveKey = new eg.Axes.MoveKeyInput(\"#area\", {\n * \t\tscale: [1, 1]\n * });\n *\n * // Connect 'x', 'y' axes when the moveKey is pressed.\n * axes.connect([\"x\", \"y\"], moveKey);\n *\n * @param {HTMLElement|String|jQuery} element An element to use the eg.Axes.MoveKeyInput module <ko>eg.Axes.MoveKeyInput 모듈을 사용할 엘리먼트</ko>\n * @param {MoveKeyInputOption} [options] The option object of the eg.Axes.MoveKeyInput module<ko>eg.Axes.MoveKeyInput 모듈의 옵션 객체</ko>\n */\n\nvar MoveKeyInput =\n/*#__PURE__*/\nfunction () {\n  function MoveKeyInput(el, options) {\n    this.axes = [];\n    this.element = null;\n    this._isEnabled = false;\n    this._isHolded = false;\n    this._timer = null;\n    this.element = $(el);\n    this.options = __assign({\n      scale: [1, 1]\n    }, options);\n    this.onKeydown = this.onKeydown.bind(this);\n    this.onKeyup = this.onKeyup.bind(this);\n  }\n\n  var __proto = MoveKeyInput.prototype;\n\n  __proto.mapAxes = function (axes) {\n    this.axes = axes;\n  };\n\n  __proto.connect = function (observer) {\n    this.dettachEvent(); // add tabindex=\"0\" to the container for making it focusable\n\n    if (this.element.getAttribute(\"tabindex\") !== \"0\") {\n      this.element.setAttribute(\"tabindex\", \"0\");\n    }\n\n    this.attachEvent(observer);\n    return this;\n  };\n\n  __proto.disconnect = function () {\n    this.dettachEvent();\n    return this;\n  };\n  /**\n  * Destroys elements, properties, and events used in a module.\n  * @ko 모듈에 사용한 엘리먼트와 속성, 이벤트를 해제한다.\n  * @method eg.Axes.MoveKeyInput#destroy\n  */\n\n\n  __proto.destroy = function () {\n    this.disconnect();\n    this.element = null;\n  };\n\n  __proto.onKeydown = function (e) {\n    if (!this._isEnabled) {\n      return;\n    }\n\n    var isMoveKey = true;\n    var direction = DIRECTION_FORWARD;\n    var move = DIRECTION_HORIZONTAL$1;\n\n    switch (e.keyCode) {\n      case KEY_LEFT_ARROW:\n      case KEY_A:\n        direction = DIRECTION_REVERSE;\n        break;\n\n      case KEY_RIGHT_ARROW:\n      case KEY_D:\n        break;\n\n      case KEY_DOWN_ARROW:\n      case KEY_S:\n        direction = DIRECTION_REVERSE;\n        move = DIRECTION_VERTICAL$1;\n        break;\n\n      case KEY_UP_ARROW:\n      case KEY_W:\n        move = DIRECTION_VERTICAL$1;\n        break;\n\n      default:\n        isMoveKey = false;\n    }\n\n    if (move === DIRECTION_HORIZONTAL$1 && !this.axes[0] || move === DIRECTION_VERTICAL$1 && !this.axes[1]) {\n      isMoveKey = false;\n    }\n\n    if (!isMoveKey) {\n      return;\n    }\n\n    var offsets = move === DIRECTION_HORIZONTAL$1 ? [+this.options.scale[0] * direction, 0] : [0, +this.options.scale[1] * direction];\n\n    if (!this._isHolded) {\n      this.observer.hold(this, event);\n      this._isHolded = true;\n    }\n\n    clearTimeout(this._timer);\n    this.observer.change(this, event, toAxis(this.axes, offsets));\n  };\n\n  __proto.onKeyup = function (e) {\n    var _this = this;\n\n    if (!this._isHolded) {\n      return;\n    }\n\n    clearTimeout(this._timer);\n    this._timer = setTimeout(function () {\n      _this.observer.release(_this, e, toAxis(_this.axes, [0, 0]));\n\n      _this._isHolded = false;\n    }, DELAY);\n  };\n\n  __proto.attachEvent = function (observer) {\n    this.observer = observer;\n    this.element.addEventListener(\"keydown\", this.onKeydown, false);\n    this.element.addEventListener(\"keypress\", this.onKeydown, false);\n    this.element.addEventListener(\"keyup\", this.onKeyup, false);\n    this._isEnabled = true;\n  };\n\n  __proto.dettachEvent = function () {\n    this.element.removeEventListener(\"keydown\", this.onKeydown, false);\n    this.element.removeEventListener(\"keypress\", this.onKeydown, false);\n    this.element.removeEventListener(\"keyup\", this.onKeyup, false);\n    this._isEnabled = false;\n    this.observer = null;\n  };\n  /**\n   * Enables input devices\n   * @ko 입력 장치를 사용할 수 있게 한다\n   * @method eg.Axes.MoveKeyInput#enable\n   * @return {eg.Axes.MoveKeyInput} An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n   */\n\n\n  __proto.enable = function () {\n    this._isEnabled = true;\n    return this;\n  };\n  /**\n   * Disables input devices\n   * @ko 입력 장치를 사용할 수 없게 한다.\n   * @method eg.Axes.MoveKeyInput#disable\n   * @return {eg.Axes.MoveKeyInput} An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n   */\n\n\n  __proto.disable = function () {\n    this._isEnabled = false;\n    return this;\n  };\n  /**\n   * Returns whether to use an input device\n   * @ko 입력 장치를 사용 여부를 반환한다.\n   * @method eg.Axes.MoveKeyInput#isEnable\n   * @return {Boolean} Whether to use an input device <ko>입력장치 사용여부</ko>\n   */\n\n\n  __proto.isEnable = function () {\n    return this._isEnabled;\n  };\n\n  return MoveKeyInput;\n}();\n\nexport default Axes;\nexport { PanInput, RotatePanInput, PinchInput, WheelInput, MoveKeyInput };\n//# sourceMappingURL=axes.esm.js.map\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport { FlickingOptions, EventType, Direction, AxesEventType, StateType, MoveTypeSnapOption, MoveTypeFreeScrollOption, FlickingMethodsKeys } from \"./types\";\n\nexport const MOVE_TYPE: {\n  SNAP: \"snap\";\n  FREE_SCROLL: \"freeScroll\";\n} = {\n  SNAP: \"snap\",\n  FREE_SCROLL: \"freeScroll\",\n};\n\nexport const DEFAULT_MOVE_TYPE_OPTIONS: {\n  snap: MoveTypeSnapOption,\n  freeScroll: MoveTypeFreeScrollOption,\n} = {\n  snap: {\n    type: \"snap\",\n    count: 1,\n  },\n  freeScroll: {\n    type: \"freeScroll\",\n  },\n};\nexport const isBrowser = typeof document !== \"undefined\";\n\n/**\n * Default options for creating Flicking.\n * @ko 플리킹을 만들 때 사용하는 기본 옵션들\n * @private\n * @memberof eg.Flicking\n */\nexport const DEFAULT_OPTIONS: Readonly<FlickingOptions> = {\n  classPrefix: \"eg-flick\",\n  deceleration: 0.0075,\n  horizontal: true,\n  circular: false,\n  infinite: false,\n  infiniteThreshold: 0,\n  lastIndex: Infinity,\n  threshold: 40,\n  duration: 100,\n  panelEffect: x => 1 - Math.pow(1 - x, 3),\n  defaultIndex: 0,\n  inputType: [\"touch\", \"mouse\"],\n  thresholdAngle: 45,\n  bounce: 10,\n  autoResize: false,\n  adaptive: false,\n  zIndex: 2000,\n  bound: false,\n  overflow: false,\n  hanger: \"50%\",\n  anchor: \"50%\",\n  gap: 0,\n  moveType: DEFAULT_MOVE_TYPE_OPTIONS.snap,\n  useOffset: false,\n  isEqualSize: false,\n  isConstantSize: false,\n  renderOnlyVisible: false,\n  renderExternal: false,\n  collectStatistics: true,\n};\n\nexport const DEFAULT_VIEWPORT_CSS = {\n  position: \"relative\",\n  zIndex: DEFAULT_OPTIONS.zIndex,\n  overflow: \"hidden\",\n};\n\nexport const DEFAULT_CAMERA_CSS = {\n  width: \"100%\",\n  height: \"100%\",\n  willChange: \"transform\",\n};\n\nexport const DEFAULT_PANEL_CSS = {\n  position: \"absolute\",\n};\n\nexport const EVENTS: EventType = {\n  HOLD_START: \"holdStart\",\n  HOLD_END: \"holdEnd\",\n  MOVE_START: \"moveStart\",\n  MOVE: \"move\",\n  MOVE_END: \"moveEnd\",\n  CHANGE: \"change\",\n  RESTORE: \"restore\",\n  SELECT: \"select\",\n  NEED_PANEL: \"needPanel\",\n  VISIBLE_CHANGE: \"visibleChange\",\n};\n\nexport const AXES_EVENTS: AxesEventType = {\n  HOLD: \"hold\",\n  CHANGE: \"change\",\n  RELEASE: \"release\",\n  ANIMATION_END: \"animationEnd\",\n  FINISH: \"finish\",\n};\n\nexport const STATE_TYPE: StateType = {\n  IDLE: 0,\n  HOLDING: 1,\n  DRAGGING: 2,\n  ANIMATING: 3,\n  DISABLED: 4,\n};\n\nexport const DIRECTION: Direction = {\n  PREV: \"PREV\",\n  NEXT: \"NEXT\",\n};\nexport const FLICKING_METHODS: {[key in FlickingMethodsKeys]: true} = {\n  prev: true,\n  next: true,\n  moveTo: true,\n  getIndex: true,\n  getAllPanels: true,\n  getCurrentPanel: true,\n  getElement: true,\n  getPanel: true,\n  getPanelCount: true,\n  getStatus: true,\n  getVisiblePanels: true,\n  enableInput: true,\n  disableInput: true,\n  destroy: true,\n  resize: true,\n  setStatus: true,\n  isPlaying: true,\n};\n\n// Check whether browser supports transform: translate3d\n// https://stackoverflow.com/questions/5661671/detecting-transform-translate3d-support\nexport let checkTranslateSupport = () => {\n  const transforms = {\n    webkitTransform: \"-webkit-transform\",\n    msTransform: \"-ms-transform\",\n    MozTransform: \"-moz-transform\",\n    OTransform: \"-o-transform\",\n    transform: \"transform\",\n  };\n\n  if (!isBrowser) {\n    return {\n      name: transforms.transform,\n      has3d: true,\n    };\n  }\n  const supportedStyle = document.documentElement.style;\n  let transformName = \"\";\n  for (const prefixedTransform in transforms) {\n    if (prefixedTransform in supportedStyle) {\n      transformName = prefixedTransform;\n    }\n  }\n\n  if (!transformName) {\n    throw new Error(\"Browser doesn't support CSS3 2D Transforms.\");\n  }\n\n  const el = document.createElement(\"div\");\n\n  document.documentElement.insertBefore(el, null);\n\n  el.style[transformName] = \"translate3d(1px, 1px, 1px)\";\n  const styleVal = window.getComputedStyle(el).getPropertyValue(transforms[transformName]);\n\n  el.parentElement!.removeChild(el);\n\n  const transformInfo = {\n    name: transformName,\n    has3d: styleVal.length > 0 && styleVal !== \"none\",\n  };\n\n  checkTranslateSupport = () => transformInfo;\n\n  return transformInfo;\n};\n\nexport const TRANSFORM = checkTranslateSupport();\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport { ElementLike, OriginalStyle, BoundingBox } from \"./types\";\nimport Flicking from \"./Flicking\";\nimport { FLICKING_METHODS } from \"./consts\";\n\nexport function merge(target: object, ...srcs: object[]): object {\n  srcs.forEach(source => {\n    Object.keys(source).forEach(key => {\n      const value = source[key];\n      target[key] = value;\n    });\n  });\n\n  return target;\n}\n\nexport function parseElement(element: ElementLike | ElementLike[]): HTMLElement[] {\n  if (!Array.isArray(element)) {\n    element = [element];\n  }\n\n  const elements: HTMLElement[] = [];\n  element.forEach(el => {\n    if (isString(el)) {\n      const tempDiv = document.createElement(\"div\");\n      tempDiv.innerHTML = el;\n\n      elements.push(...toArray(tempDiv.children) as HTMLElement[]);\n      while (tempDiv.firstChild) {\n        tempDiv.removeChild(tempDiv.firstChild);\n      }\n    } else {\n      elements.push(el as HTMLElement);\n    }\n  });\n\n  return elements;\n}\n\nexport function isString(value: any): value is string {\n  return typeof value === \"string\";\n}\n\n// Get class list of element as string array\nexport function classList(element: HTMLElement): string[] {\n  return element.classList\n    ? toArray(element.classList)\n    : element.className.split(\" \");\n}\n\n// Add class to specified element\nexport function addClass(element: HTMLElement, className: string): void {\n  if (element.classList) {\n    element.classList.add(className);\n  } else {\n    if (!hasClass(element, className)) {\n      element.className = (`${element.className} ${className}`).replace(/\\s{2,}/g, \" \");\n    }\n  }\n}\n\nexport function hasClass(element: HTMLElement, className: string): boolean {\n  if (element.classList) {\n    return element.classList.contains(className);\n  } else {\n    return (element.className.split(\" \").indexOf(className) >= 0);\n  }\n}\n\nexport function applyCSS(element: HTMLElement, cssObj: object): void {\n  Object.keys(cssObj).forEach(property => {\n    element.style[property] = cssObj[property];\n  });\n}\n\nexport function clamp(val: number, min: number, max: number) {\n  return Math.max(Math.min(val, max), min);\n}\n\n// Min: inclusive, Max: exclusive\nexport function isBetween(val: number, min: number, max: number) {\n  return val >= min && val <= max;\n}\n\nexport interface ArrayLike<T> {\n  length: number;\n  [index: number]: T;\n}\n\nexport function toArray<T>(iterable: ArrayLike<T>): T[] {\n  return [].slice.call(iterable);\n}\n\nexport function isArray(arr: any): boolean {\n  return arr && arr.constructor === Array;\n}\n\nexport function parseArithmeticExpression(cssValue: number | string, base: number, defaultVal?: number): number {\n  // Set base / 2 to default value, if it's undefined\n  const defaultValue = defaultVal != null ? defaultVal : base / 2;\n  const cssRegex = /(?:(\\+|\\-)\\s*)?(\\d+(?:\\.\\d+)?(%|px)?)/g;\n\n  if (typeof cssValue === \"number\") {\n    return clamp(cssValue, 0, base);\n  }\n\n  let idx = 0;\n  let calculatedValue = 0;\n  let matchResult = cssRegex.exec(cssValue);\n  while (matchResult != null) {\n    let sign = matchResult[1];\n    const value = matchResult[2];\n    const unit = matchResult[3];\n\n    let parsedValue = parseFloat(value);\n\n    if (idx <= 0) {\n      sign = sign || \"+\";\n    }\n\n    // Return default value for values not in good form\n    if (!sign) {\n      return defaultValue;\n    }\n\n    if (unit === \"%\") {\n      parsedValue = (parsedValue / 100) * base;\n    }\n\n    calculatedValue += sign === \"+\"\n      ? parsedValue\n      : -parsedValue;\n\n    // Match next occurrence\n    ++idx;\n    matchResult = cssRegex.exec(cssValue);\n  }\n\n  // None-matched\n  if (idx === 0) {\n    return defaultValue;\n  }\n\n  // Clamp between 0 ~ base\n  return clamp(calculatedValue, 0, base);\n}\n\nexport function getProgress(pos: number, range: number[]) {\n  // start, anchor, end\n  // -1 , 0 , 1\n  const [min, center, max] = range;\n\n  if (pos > center && (max - center)) {\n    // 0 ~ 1\n    return (pos - center) / (max - center);\n  } else if (pos < center && (center - min)) {\n    // -1 ~ 0\n    return (pos - center) / (center - min);\n  } else if (pos !== center && max - min) {\n    return (pos - min) / (max - min);\n  }\n  return 0;\n}\n\nexport function findIndex<T>(iterable: T[], callback: (el: T) => boolean): number {\n  for (let i = 0; i < iterable.length; i += 1) {\n    const element = iterable[i];\n    if (element && callback(element)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n// return [0, 1, ...., max - 1]\nexport function counter(max: number): number[] {\n  const counterArray: number[] = [];\n  for (let i = 0; i < max; i += 1) {\n    counterArray[i] = i;\n  }\n  return counterArray;\n}\n\n// Circulate number between range [min, max]\n/*\n * \"indexed\" means min and max is not same, so if it's true \"min - 1\" should be max\n * While if it's false, \"min - 1\" should be \"max - 1\"\n * use `indexed: true` when it should be used for circulating integers like index\n * or `indexed: false` when it should be used for something like positions.\n */\nexport function circulate(value: number, min: number, max: number, indexed: boolean): number {\n  const size = indexed\n    ? max - min + 1\n    : max - min;\n  if (value < min) {\n    const offset = indexed\n      ? (min - value - 1) % size\n      : (min - value) % size;\n    value = max - offset;\n  } else if (value > max) {\n    const offset = indexed\n      ? (value - max - 1) % size\n      : (value - max) % size;\n    value = min + offset;\n  }\n\n  return value;\n}\n\nexport function restoreStyle(element: HTMLElement, originalStyle: OriginalStyle): void {\n  originalStyle.className\n    ? element.setAttribute(\"class\", originalStyle.className)\n    : element.removeAttribute(\"class\");\n  originalStyle.style\n    ? element.setAttribute(\"style\", originalStyle.style)\n    : element.removeAttribute(\"style\");\n}\n\n/**\n * Decorator that makes the method of flicking available in the framework.\n * @ko 프레임워크에서 플리킹의 메소드를 사용할 수 있게 하는 데코레이터.\n * @memberof eg.Flicking\n * @private\n * @example\n * ```js\n * import Flicking, { withFlickingMethods } from \"@egjs/flicking\";\n *\n * class Flicking extends React.Component<Partial<FlickingProps & FlickingOptions>> {\n *   &#64;withFlickingMethods\n *   private flicking: Flicking;\n * }\n * ```\n */\nexport function withFlickingMethods(prototype: any, flickingName: string) {\n  Object.keys(FLICKING_METHODS).forEach((name: keyof Flicking) => {\n    if (prototype[name]) {\n      return;\n    }\n    prototype[name] = function(...args) {\n      const result = this[flickingName][name](...args);\n\n      // fix `this` type to return your own `flicking` instance to the instance using the decorator.\n      if (result === this[flickingName]) {\n        return this;\n      } else {\n        return result;\n      }\n    };\n  });\n}\n\nexport function getBbox(element: HTMLElement, useOffset: boolean) {\n  let bbox: BoundingBox;\n  if (useOffset) {\n    bbox = {\n      x: 0,\n      y: 0,\n      width: element.offsetWidth,\n      height: element.offsetHeight,\n    };\n  } else {\n    const clientRect = element.getBoundingClientRect();\n    bbox = {\n      x: clientRect.left,\n      y: clientRect.top,\n      width: clientRect.width,\n      height: clientRect.height,\n    };\n  }\n  return bbox;\n}\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport Viewport from \"./Viewport\";\nimport { OriginalStyle, FlickingPanel, ElementLike, DestroyOption, BoundingBox } from \"../types\";\nimport { DEFAULT_PANEL_CSS, EVENTS } from \"../consts\";\nimport { addClass, applyCSS, parseArithmeticExpression, parseElement, getProgress, restoreStyle, hasClass, getBbox } from \"../utils\";\n\nclass Panel implements FlickingPanel {\n  public viewport: Viewport;\n  public prevSibling: Panel | null;\n  public nextSibling: Panel | null;\n\n  protected state: {\n    index: number;\n    position: number;\n    relativeAnchorPosition: number;\n    size: number;\n    isClone: boolean;\n    isVirtual: boolean;\n    // Index of cloned panel, zero-based integer(original: -1, cloned: [0, 1, 2, ...])\n    // if cloneIndex is 0, that means it's first cloned panel of original panel\n    cloneIndex: number;\n    originalStyle: OriginalStyle;\n    cachedBbox: BoundingBox | null;\n  };\n  private element: HTMLElement;\n  private original?: Panel;\n  private clonedPanels: Panel[];\n\n  public constructor(\n    element?: HTMLElement | null,\n    index?: number,\n    viewport?: Viewport,\n  ) {\n    this.viewport = viewport!;\n    this.prevSibling = null;\n    this.nextSibling = null;\n    this.clonedPanels = [];\n\n    this.state = {\n      index: index!,\n      position: 0,\n      relativeAnchorPosition: 0,\n      size: 0,\n      isClone: false,\n      isVirtual: false,\n      cloneIndex: -1,\n      originalStyle: {\n        className: \"\",\n        style: \"\",\n      },\n      cachedBbox: null,\n    };\n    this.setElement(element);\n  }\n\n  public resize(givenBbox?: BoundingBox): void {\n    const state = this.state;\n    const options = this.viewport.options;\n    const bbox = givenBbox\n      ? givenBbox\n      : this.getBbox();\n    this.state.cachedBbox = bbox;\n    const prevSize = state.size;\n\n    state.size = options.horizontal\n      ? bbox.width\n      : bbox.height;\n\n    if (prevSize !== state.size) {\n      state.relativeAnchorPosition = parseArithmeticExpression(options.anchor, state.size);\n    }\n\n    if (!state.isClone) {\n      this.clonedPanels.forEach(panel => {\n        const cloneState = panel.state;\n\n        cloneState.size = state.size;\n        cloneState.cachedBbox = state.cachedBbox;\n        cloneState.relativeAnchorPosition = state.relativeAnchorPosition;\n      });\n    }\n  }\n\n  public unCacheBbox(): void {\n    this.state.cachedBbox = null;\n  }\n\n  public getProgress() {\n    const viewport = this.viewport;\n    const options = viewport.options;\n    const panelCount = viewport.panelManager.getPanelCount();\n    const scrollAreaSize = viewport.getScrollAreaSize();\n\n    const relativeIndex = (options.circular ? Math.floor(this.getPosition() / scrollAreaSize) * panelCount : 0) + this.getIndex();\n    const progress = relativeIndex - viewport.getCurrentProgress();\n\n    return progress;\n  }\n\n  public getOutsetProgress() {\n    const viewport = this.viewport;\n    const outsetRange = [\n      -this.getSize(),\n      viewport.getRelativeHangerPosition() - this.getRelativeAnchorPosition(),\n      viewport.getSize(),\n    ];\n    const relativePanelPosition = this.getPosition() - viewport.getCameraPosition();\n    const outsetProgress = getProgress(relativePanelPosition, outsetRange);\n\n    return outsetProgress;\n  }\n\n  public getVisibleRatio() {\n    const viewport = this.viewport;\n    const panelSize = this.getSize();\n    const relativePanelPosition = this.getPosition() - viewport.getCameraPosition();\n    const rightRelativePanelPosition = relativePanelPosition + panelSize;\n\n    const visibleSize = Math.min(viewport.getSize(), rightRelativePanelPosition) - Math.max(relativePanelPosition, 0);\n    const visibleRatio = visibleSize >= 0\n      ? visibleSize / panelSize\n      : 0;\n\n    return visibleRatio;\n  }\n\n  public focus(duration?: number): void {\n    const viewport = this.viewport;\n    const currentPanel = viewport.getCurrentPanel();\n    const hangerPosition = viewport.getHangerPosition();\n    const anchorPosition = this.getAnchorPosition();\n    if (hangerPosition === anchorPosition || !currentPanel) {\n      return;\n    }\n\n    const currentPosition = currentPanel.getPosition();\n    const eventType = currentPosition === this.getPosition()\n      ? \"\"\n      : EVENTS.CHANGE;\n\n    viewport.moveTo(this, viewport.findEstimatedPosition(this), eventType, null, duration);\n  }\n\n  public update(updateFunction: ((element: HTMLElement) => any) | null = null, shouldResize: boolean = true): void {\n    const identicalPanels = this.getIdenticalPanels();\n\n    if (updateFunction) {\n      identicalPanels.forEach(eachPanel => {\n        updateFunction(eachPanel.getElement());\n      });\n    }\n\n    if (shouldResize) {\n      identicalPanels.forEach(eachPanel => {\n        eachPanel.unCacheBbox();\n      });\n      this.viewport.addVisiblePanel(this);\n      this.viewport.resize();\n    }\n  }\n\n  public prev(): FlickingPanel | null {\n    const viewport = this.viewport;\n    const options = viewport.options;\n    const prevSibling = this.prevSibling;\n\n    if (!prevSibling) {\n      return null;\n    }\n\n    const currentIndex = this.getIndex();\n    const currentPosition = this.getPosition();\n    const prevPanelIndex = prevSibling.getIndex();\n    const prevPanelPosition = prevSibling.getPosition();\n    const prevPanelSize = prevSibling.getSize();\n\n    const hasEmptyPanelBetween = currentIndex - prevPanelIndex > 1;\n    const notYetMinPanel = options.infinite\n      && currentIndex > 0\n      && prevPanelIndex > currentIndex;\n\n    if (hasEmptyPanelBetween || notYetMinPanel) {\n      // Empty panel exists between\n      return null;\n    }\n\n    const newPosition = currentPosition - prevPanelSize - options.gap;\n\n    let prevPanel = prevSibling;\n    if (prevPanelPosition !== newPosition) {\n      prevPanel = prevSibling.clone(prevSibling.getCloneIndex(), true);\n      prevPanel.setPosition(newPosition);\n    }\n\n    return prevPanel;\n  }\n\n  public next(): FlickingPanel | null {\n    const viewport = this.viewport;\n    const options = viewport.options;\n    const nextSibling = this.nextSibling;\n    const lastIndex = viewport.panelManager.getLastIndex();\n\n    if (!nextSibling) {\n      return null;\n    }\n\n    const currentIndex = this.getIndex();\n    const currentPosition = this.getPosition();\n    const nextPanelIndex = nextSibling.getIndex();\n    const nextPanelPosition = nextSibling.getPosition();\n\n    const hasEmptyPanelBetween = nextPanelIndex - currentIndex > 1;\n    const notYetMaxPanel = options.infinite\n      && currentIndex < lastIndex\n      && nextPanelIndex < currentIndex;\n\n    if (hasEmptyPanelBetween || notYetMaxPanel) {\n      return null;\n    }\n\n    const newPosition = currentPosition + this.getSize() + options.gap;\n\n    let nextPanel = nextSibling;\n    if (nextPanelPosition !== newPosition) {\n      nextPanel = nextSibling.clone(nextSibling.getCloneIndex(), true);\n      nextPanel.setPosition(newPosition);\n    }\n\n    return nextPanel;\n  }\n\n  public insertBefore(element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const viewport = this.viewport;\n    const parsedElements = parseElement(element);\n    const firstPanel = viewport.panelManager.firstPanel()!;\n    const prevSibling = this.prevSibling;\n    // Finding correct inserting index\n    // While it should insert removing empty spaces,\n    // It also should have to be bigger than prevSibling' s index\n    const targetIndex = prevSibling && firstPanel.getIndex() !== this.getIndex()\n      ? Math.max(prevSibling.getIndex() + 1, this.getIndex() - parsedElements.length)\n      : Math.max(this.getIndex() - parsedElements.length, 0);\n\n    return viewport.insert(targetIndex, parsedElements);\n  }\n\n  public insertAfter(element: ElementLike | ElementLike[]): FlickingPanel[] {\n    return this.viewport.insert(this.getIndex() + 1, element);\n  }\n\n  public remove(): FlickingPanel {\n    this.viewport.remove(this.getIndex());\n\n    return this;\n  }\n\n  public destroy(option: Partial<DestroyOption>): void {\n    if (!option.preserveUI) {\n      const originalStyle = this.state.originalStyle;\n\n      restoreStyle(this.element, originalStyle);\n    }\n\n    // release resources\n    for (const x in this) {\n      (this as any)[x] = null;\n    }\n  }\n\n  public getElement(): HTMLElement {\n    return this.element;\n  }\n\n  public getAnchorPosition(): number {\n    return this.state.position + this.state.relativeAnchorPosition;\n  }\n\n  public getRelativeAnchorPosition(): number {\n    return this.state.relativeAnchorPosition;\n  }\n\n  public getIndex(): number {\n    return this.state.index;\n  }\n\n  public getPosition(): number {\n    return this.state.position;\n  }\n\n  public getSize(): number {\n    return this.state.size;\n  }\n\n  public getBbox(): BoundingBox {\n    const state = this.state;\n    const viewport = this.viewport;\n    const element = this.element;\n    const options = viewport.options;\n\n    if (!element) {\n      state.cachedBbox = {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0,\n      };\n    } else if (!state.cachedBbox) {\n      const wasVisible = Boolean(element.parentNode);\n      const cameraElement = viewport.getCameraElement();\n      if (!wasVisible) {\n        cameraElement.appendChild(element);\n        viewport.addVisiblePanel(this);\n      }\n      state.cachedBbox = getBbox(element, options.useOffset);\n\n      if (!wasVisible && viewport.options.renderExternal) {\n        cameraElement.removeChild(element);\n      }\n    }\n    return state.cachedBbox!;\n  }\n\n  public isClone(): boolean {\n    return this.state.isClone;\n  }\n\n  public getOverlappedClass(classes: string[]): string | undefined {\n    const element = this.element;\n\n    for (const className of classes) {\n      if (hasClass(element, className)) {\n        return className;\n      }\n    }\n  }\n\n  public getCloneIndex(): number {\n    return this.state.cloneIndex;\n  }\n\n  public getClonedPanels(): Panel[] {\n    const state = this.state;\n\n    return state.isClone\n      ? this.original!.getClonedPanels()\n      : this.clonedPanels;\n  }\n\n  public getIdenticalPanels(): Panel[] {\n    const state = this.state;\n\n    return state.isClone\n      ? this.original!.getIdenticalPanels()\n      : [this, ...this.clonedPanels];\n  }\n\n  public getOriginalPanel(): Panel {\n    return this.state.isClone\n      ? this.original!\n      : this;\n  }\n\n  public setIndex(index: number): void {\n    const state = this.state;\n\n    state.index = index;\n    this.clonedPanels.forEach(panel => panel.state.index = index);\n  }\n\n  public setPosition(pos: number): this {\n    this.state.position = pos;\n\n    return this;\n  }\n\n  public setPositionCSS(offset: number = 0): void {\n    if (!this.element) {\n      return;\n    }\n    const state = this.state;\n    const pos = state.position;\n    const options = this.viewport.options;\n    const elementStyle = this.element.style;\n    const currentElementStyle = options.horizontal\n      ? elementStyle.left\n      : elementStyle.top;\n    const styleToApply = `${pos - offset}px`;\n\n    if (!state.isVirtual && currentElementStyle !== styleToApply) {\n      options.horizontal\n        ? elementStyle.left = styleToApply\n        : elementStyle.top = styleToApply;\n    }\n  }\n\n  public clone(cloneIndex: number, isVirtual: boolean = false, element?: HTMLElement | null): Panel {\n    const state = this.state;\n    const viewport = this.viewport;\n    let cloneElement = element;\n\n    if (!cloneElement && this.element) {\n      cloneElement = isVirtual ? this.element : this.element.cloneNode(true) as HTMLElement;\n    }\n    const clonedPanel = new Panel(cloneElement, state.index, viewport);\n    const clonedState = clonedPanel.state;\n\n    clonedPanel.original = state.isClone\n      ? this.original\n      : this;\n    clonedState.isClone = true;\n    clonedState.isVirtual = isVirtual;\n    clonedState.cloneIndex = cloneIndex;\n    // Inherit some state values\n    clonedState.size = state.size;\n    clonedState.relativeAnchorPosition = state.relativeAnchorPosition;\n    clonedState.originalStyle = state.originalStyle;\n    clonedState.cachedBbox = state.cachedBbox;\n\n    if (!isVirtual) {\n      this.clonedPanels.push(clonedPanel);\n    } else {\n      clonedPanel.prevSibling = this.prevSibling;\n      clonedPanel.nextSibling = this.nextSibling;\n    }\n\n    return clonedPanel;\n  }\n\n  public removeElement(): void {\n    if (!this.viewport.options.renderExternal) {\n      const element = this.element;\n      element.parentNode && element.parentNode.removeChild(element);\n    }\n\n    // Do the same thing for clones\n    if (!this.state.isClone) {\n      this.removeClonedPanelsAfter(0);\n    }\n  }\n\n  public removeClonedPanelsAfter(start: number): void {\n    const options = this.viewport.options;\n    const removingPanels = this.clonedPanels.splice(start);\n\n    if (!options.renderExternal) {\n      removingPanels.forEach(panel => {\n        panel.removeElement();\n      });\n    }\n  }\n\n  public setElement(element?: HTMLElement | null): void {\n    if (!element) {\n      return;\n    }\n    const currentElement = this.element;\n    if (element !== currentElement) {\n      const options = this.viewport.options;\n\n      if (currentElement) {\n        if (options.horizontal) {\n          element.style.left = currentElement.style.left;\n        } else {\n          element.style.top = currentElement.style.top;\n        }\n      } else {\n        const originalStyle = this.state.originalStyle;\n\n        originalStyle.className = element.getAttribute(\"class\");\n        originalStyle.style = element.getAttribute(\"style\");\n      }\n\n      this.element = element;\n\n      if (options.classPrefix) {\n        addClass(element, `${options.classPrefix}-panel`);\n      }\n\n      // Update size info after applying panel css\n      applyCSS(this.element, DEFAULT_PANEL_CSS);\n    }\n  }\n}\n\nexport default Panel;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport Panel from \"./Panel\";\nimport { FlickingOptions } from \"../types\";\nimport { findIndex, counter } from \"../utils\";\n\nclass PanelManager {\n  private cameraElement: HTMLElement;\n  private options: FlickingOptions;\n  private panels: Panel[];\n  private clones: Panel[][];\n  // index range of existing panels\n  private range: {\n    min: number;\n    max: number;\n  };\n  private length: number;\n  private lastIndex: number;\n  private cloneCount: number;\n\n  constructor(\n    cameraElement: HTMLElement,\n    options: FlickingOptions,\n  ) {\n    this.cameraElement = cameraElement;\n    this.panels = [];\n    this.clones = [];\n    this.range = {\n      min: -1,\n      max: -1,\n    };\n    this.length = 0;\n    this.cloneCount = 0;\n    this.options = options;\n    this.lastIndex = options.lastIndex;\n  }\n\n  public firstPanel(): Panel | undefined {\n    return this.panels[this.range.min];\n  }\n\n  public lastPanel(): Panel | undefined {\n    return this.panels[this.range.max];\n  }\n\n  public allPanels(): ReadonlyArray<Panel> {\n    return [\n      ...this.panels,\n      ...this.clones.reduce((allClones, clones) => [...allClones, ...clones], []),\n    ];\n  }\n\n  public originalPanels(): ReadonlyArray<Panel> {\n    return this.panels;\n  }\n\n  public clonedPanels(): ReadonlyArray<Panel[]> {\n    return this.clones;\n  }\n\n  public replacePanels(newPanels: Panel[], newClones: Panel[][]): void {\n    this.panels = newPanels;\n    this.clones = newClones;\n\n    this.range = {\n      min: findIndex(newPanels, panel => Boolean(panel)),\n      max: newPanels.length - 1,\n    };\n    this.length = newPanels.filter(panel => Boolean(panel)).length;\n  }\n\n  public has(index: number): boolean {\n    return !!this.panels[index];\n  }\n\n  public get(index: number): Panel | undefined {\n    return this.panels[index];\n  }\n\n  public getPanelCount(): number {\n    return this.length;\n  }\n\n  public getLastIndex(): number {\n    return this.lastIndex;\n  }\n\n  public getRange(): Readonly<{ min: number, max: number }> {\n    return this.range;\n  }\n\n  public getCloneCount(): number {\n    return this.cloneCount;\n  }\n\n  public setLastIndex(lastIndex: number): void {\n    this.lastIndex = lastIndex;\n\n    const firstPanel = this.firstPanel();\n    const lastPanel = this.lastPanel();\n\n    if (!firstPanel || !lastPanel) {\n      return; // no meaning of updating range & length\n    }\n\n    // Remove panels above new last index\n    const range = this.range;\n    if (lastPanel.getIndex() > lastIndex) {\n      const removingPanels = this.panels.splice(lastIndex + 1);\n      this.length -= removingPanels.length;\n\n      const firstRemovedPanel = removingPanels.filter(panel => !!panel)[0];\n      const possibleLastPanel = firstRemovedPanel.prevSibling;\n      if (possibleLastPanel) {\n        range.max = possibleLastPanel.getIndex();\n      } else {\n        range.min = -1;\n        range.max = -1;\n      }\n\n      if (this.shouldRender()) {\n        removingPanels.forEach(panel => panel.removeElement());\n      }\n    }\n  }\n\n  public setCloneCount(cloneCount: number): void {\n    this.cloneCount = cloneCount;\n  }\n\n  // Insert at index\n  // Returns pushed elements from index, inserting at 'empty' position doesn't push elements behind it\n  public insert(index: number, newPanels: Panel[]): number {\n    const panels = this.panels;\n    const range = this.range;\n    const isCircular = this.options.circular;\n    const lastIndex = this.lastIndex;\n\n    // Find first panel that index is greater than inserting index\n    const nextSibling = this.findFirstPanelFrom(index);\n\n    // if it's null, element will be inserted at last position\n    // https://developer.mozilla.org/ko/docs/Web/API/Node/insertBefore#Syntax\n    const firstPanel = this.firstPanel();\n    const siblingElement = nextSibling\n      ? nextSibling.getElement()\n      : isCircular && firstPanel\n        ? firstPanel.getClonedPanels()[0].getElement()\n        : null;\n\n    // Insert panels before sibling element\n    this.insertNewPanels(newPanels, siblingElement);\n\n    let pushedIndex = newPanels.length;\n    // Like when setting index 50 while visible panels are 0, 1, 2\n    if (index > range.max) {\n      newPanels.forEach((panel, offset) => {\n        panels[index + offset] = panel;\n      });\n    } else {\n      const panelsAfterIndex = panels.slice(index, index + newPanels.length);\n      // Find empty from beginning\n      let emptyPanelCount = findIndex(panelsAfterIndex, panel => !!panel);\n      if (emptyPanelCount < 0) {\n        // All empty\n        emptyPanelCount = panelsAfterIndex.length;\n      }\n      pushedIndex = newPanels.length - emptyPanelCount;\n\n      // Insert removing empty panels\n      panels.splice(index, emptyPanelCount, ...newPanels);\n\n      // Remove panels after last index\n      if (panels.length > lastIndex + 1) {\n        const removedPanels = panels.splice(lastIndex + 1)\n          .filter(panel => Boolean(panel));\n        this.length -= removedPanels.length;\n\n        // Find first\n        const newLastIndex = lastIndex - findIndex(this.panels.concat().reverse(), panel => !!panel);\n\n        // Can be filled with empty after newLastIndex\n        this.panels.splice(newLastIndex + 1);\n        this.range.max = newLastIndex;\n\n        if (this.shouldRender()) {\n          removedPanels.forEach(panel => panel.removeElement());\n        }\n      }\n    }\n\n    // Update index of previous panels\n    if (pushedIndex > 0) {\n      panels.slice(index + newPanels.length).forEach(panel => {\n        panel.setIndex(panel.getIndex() + pushedIndex);\n      });\n    }\n\n    // Update state\n    this.length += newPanels.length;\n    this.updateIndex(index);\n\n    if (isCircular) {\n      this.addNewClones(index, newPanels, newPanels.length - pushedIndex, nextSibling);\n      const clones = this.clones;\n      const panelCount = this.panels.length;\n      if (clones[0] && clones[0].length > lastIndex + 1) {\n        clones.forEach(cloneSet => {\n          cloneSet.splice(panelCount);\n        });\n      }\n    }\n\n    return pushedIndex;\n  }\n\n  public replace(index: number, newPanels: Panel[]): Panel[] {\n    const panels = this.panels;\n    const range = this.range;\n    const options = this.options;\n    const isCircular = options.circular;\n\n    // Find first panel that index is greater than inserting index\n    const nextSibling = this.findFirstPanelFrom(index + newPanels.length);\n\n    // if it's null, element will be inserted at last position\n    // https://developer.mozilla.org/ko/docs/Web/API/Node/insertBefore#Syntax\n    const firstPanel = this.firstPanel();\n    const siblingElement = nextSibling\n      ? nextSibling.getElement()\n      : isCircular && firstPanel\n        ? firstPanel.getClonedPanels()[0].getElement()\n        : null;\n\n    // Insert panels before sibling element\n    this.insertNewPanels(newPanels, siblingElement);\n\n    if (index > range.max) {\n      // Temporarily insert null at index to use splice()\n      (panels[index] as any) = null;\n    }\n\n    const replacedPanels = panels.splice(index, newPanels.length, ...newPanels);\n    const wasNonEmptyCount = replacedPanels.filter(panel => Boolean(panel)).length;\n\n    // Suppose inserting [1, 2, 3] at 0 position when there were [empty, 1]\n    // So length should be increased by 3(inserting panels) - 1(non-empty panels)\n    this.length += newPanels.length - wasNonEmptyCount;\n    this.updateIndex(index);\n\n    if (isCircular) {\n      this.addNewClones(index, newPanels, newPanels.length, nextSibling);\n    }\n\n    if (this.shouldRender()) {\n      replacedPanels.forEach(panel => panel && panel.removeElement());\n    }\n\n    return replacedPanels;\n  }\n\n  public remove(index: number, deleteCount: number = 1): Panel[] {\n    const isCircular = this.options.circular;\n    const panels = this.panels;\n    const clones = this.clones;\n    // Delete count should be equal or larger than 0\n    deleteCount = Math.max(deleteCount, 0);\n\n    const deletedPanels = panels\n      .splice(index, deleteCount)\n      .filter(panel => !!panel);\n\n    if (this.shouldRender()) {\n      deletedPanels.forEach(panel => panel.removeElement());\n    }\n\n    if (isCircular) {\n      clones.forEach(cloneSet => {\n        cloneSet.splice(index, deleteCount);\n      });\n    }\n\n    // Update indexes\n    panels\n      .slice(index)\n      .forEach(panel => {\n        panel.setIndex(panel.getIndex() - deleteCount);\n      });\n\n    // Check last panel is empty\n    let lastIndex = panels.length - 1;\n    if (!panels[lastIndex]) {\n      const reversedPanels = panels.concat().reverse();\n      const nonEmptyIndexFromLast = findIndex(reversedPanels, panel => !!panel);\n      lastIndex = nonEmptyIndexFromLast < 0\n        ? -1 // All empty\n        : lastIndex - nonEmptyIndexFromLast;\n\n      // Remove all empty panels from last\n      panels.splice(lastIndex + 1);\n      if (isCircular) {\n        clones.forEach(cloneSet => {\n          cloneSet.splice(lastIndex + 1);\n        });\n      }\n    }\n\n    // Update range & length\n    this.range = {\n      min: findIndex(panels, panel => !!panel),\n      max: lastIndex,\n    };\n    this.length -= deletedPanels.length;\n\n    if (this.length <= 0) {\n      // Reset clones\n      this.clones = [];\n      this.cloneCount = 0;\n    }\n\n    return deletedPanels;\n  }\n\n  public chainAllPanels() {\n    const allPanels = this.allPanels().filter(panel => !!panel);\n    const allPanelsCount = allPanels.length;\n\n    if (allPanelsCount <= 1) {\n      return;\n    }\n\n    allPanels.slice(1, allPanels.length - 1).forEach((panel, idx) => {\n      const prevPanel = allPanels[idx];\n      const nextPanel = allPanels[idx + 2];\n\n      panel.prevSibling = prevPanel;\n      panel.nextSibling = nextPanel;\n    });\n\n    const firstPanel = allPanels[0];\n    const lastPanel = allPanels[allPanelsCount - 1];\n\n    firstPanel.prevSibling = null;\n    firstPanel.nextSibling = allPanels[1];\n    lastPanel.prevSibling = allPanels[allPanelsCount - 2];\n    lastPanel.nextSibling = null;\n\n    if (this.options.circular) {\n      firstPanel.prevSibling = lastPanel;\n      lastPanel.nextSibling = firstPanel;\n    }\n  }\n\n  public insertClones(cloneIndex: number, index: number, clonedPanels: Panel[], deleteCount: number = 0): void {\n    const clones = this.clones;\n    const lastIndex = this.lastIndex;\n\n    if (!clones[cloneIndex]) {\n      const newClones: Panel[] = [];\n      clonedPanels.forEach((panel, offset) => {\n        newClones[index + offset] = panel;\n      });\n\n      clones[cloneIndex] = newClones;\n    } else {\n      const insertTarget = clones[cloneIndex];\n\n      if (index >= insertTarget.length) {\n        clonedPanels.forEach((panel, offset) => {\n          insertTarget[index + offset] = panel;\n        });\n      } else {\n        insertTarget.splice(index, deleteCount, ...clonedPanels);\n        // Remove panels after last index\n        if (clonedPanels.length > lastIndex + 1) {\n          clonedPanels.splice(lastIndex + 1);\n        }\n      }\n    }\n  }\n\n  // clones are operating in set\n  public removeClonesAfter(cloneIndex: number): void {\n    const panels = this.panels;\n\n    panels.forEach(panel => {\n      panel.removeClonedPanelsAfter(cloneIndex);\n    });\n    this.clones.splice(cloneIndex);\n  }\n\n  public findPanelOf(element: HTMLElement): Panel | undefined {\n    const allPanels = this.allPanels();\n    for (const panel of allPanels) {\n      if (!panel) {\n        continue;\n      }\n      const panelElement = panel.getElement();\n      if (panelElement.contains(element)) {\n        return panel;\n      }\n    }\n  }\n\n  public findFirstPanelFrom(index: number): Panel | undefined {\n    for (const panel of this.panels.slice(index)) {\n      if (panel && panel.getIndex() >= index && panel.getElement().parentNode) {\n        return panel;\n      }\n    }\n  }\n\n  private addNewClones(index: number, originalPanels: Panel[], deleteCount: number, nextSibling: Panel | undefined) {\n    const cameraElement = this.cameraElement;\n    const cloneCount = this.getCloneCount();\n    const lastPanel = this.lastPanel();\n    const lastPanelClones: Panel[] = lastPanel\n      ? lastPanel.getClonedPanels()\n      : [];\n    const nextSiblingClones: Panel[] = nextSibling\n      ? nextSibling.getClonedPanels()\n      : [];\n\n    for (const cloneIndex of counter(cloneCount)) {\n      const cloneNextSibling = nextSiblingClones[cloneIndex];\n      const lastPanelSibling = lastPanelClones[cloneIndex];\n\n      const cloneSiblingElement = cloneNextSibling\n        ? cloneNextSibling.getElement()\n        : lastPanelSibling\n          ? lastPanelSibling.getElement().nextElementSibling\n          : null;\n\n      const newClones = originalPanels.map(panel => {\n        const clone = panel.clone(cloneIndex);\n\n        if (this.shouldRender()) {\n          cameraElement.insertBefore(clone.getElement(), cloneSiblingElement);\n        }\n\n        return clone;\n      });\n\n      this.insertClones(cloneIndex, index, newClones, deleteCount);\n    }\n  }\n\n  private updateIndex(insertingIndex: number) {\n    const panels = this.panels;\n    const range = this.range;\n\n    const newLastIndex = panels.length - 1;\n    if (newLastIndex > range.max) {\n      range.max = newLastIndex;\n    }\n    if (insertingIndex < range.min || range.min < 0) {\n      range.min = insertingIndex;\n    }\n  }\n\n  private insertNewPanels(newPanels: Panel[], siblingElement: HTMLElement | null) {\n    if (this.shouldRender()) {\n      const fragment = document.createDocumentFragment();\n      newPanels.forEach(panel => fragment.appendChild(panel.getElement()));\n      this.cameraElement.insertBefore(fragment, siblingElement);\n    }\n  }\n\n  private shouldRender(): boolean {\n    const options = this.options;\n\n    return !options.renderExternal && !options.renderOnlyVisible;\n  }\n}\n\nexport default PanelManager;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport Panel from \"../components/Panel\";\nimport { ValueOf, Direction, StateType, FlickingContext } from \"../types\";\n\nabstract class State {\n  public delta: number = 0;\n  public direction: ValueOf<Direction> | null = null;\n  public targetPanel: Panel | null = null;\n  public lastPosition: number = 0;\n  public abstract readonly type: ValueOf<StateType>;\n  public abstract readonly holding: boolean;\n  public abstract readonly playing: boolean;\n\n  public onEnter(prevState: State): void {\n    this.delta = prevState.delta;\n    this.direction = prevState.direction;\n    this.targetPanel = prevState.targetPanel;\n    this.lastPosition = prevState.lastPosition;\n  }\n\n  public onExit(nextState: State): void {\n    // DO NOTHING\n  }\n\n  public onHold(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n\n  public onChange(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n\n  public onRelease(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n\n  public onAnimationEnd(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n\n  public onFinish(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n}\n\nexport default State;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport State from \"./State\";\nimport { EVENTS, STATE_TYPE } from \"../consts\";\nimport { FlickingContext } from \"../types\";\n\nclass IdleState extends State {\n  public readonly type = STATE_TYPE.IDLE;\n  public readonly holding = false;\n  public readonly playing = false;\n\n  public onEnter() {\n    this.direction = null;\n    this.targetPanel = null;\n    this.delta = 0;\n    this.lastPosition = 0;\n  }\n\n  public onHold(e: any, { flicking, viewport, triggerEvent, transitTo }: FlickingContext): void {\n    // Shouldn't do any action until any panels on flicking area\n    if (flicking.getPanelCount() <= 0) {\n      if (viewport.options.infinite) {\n        viewport.moveCamera(viewport.getCameraPosition(), e);\n      }\n      transitTo(STATE_TYPE.DISABLED);\n      return;\n    }\n\n    this.lastPosition = viewport.getCameraPosition();\n    triggerEvent(EVENTS.HOLD_START, e, true)\n      .onSuccess(() => {\n        transitTo(STATE_TYPE.HOLDING);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  // By methods call\n  public onChange(e: any, context: FlickingContext): void {\n    const { triggerEvent, transitTo } = context;\n\n    triggerEvent(EVENTS.MOVE_START, e, false)\n      .onSuccess(() => {\n        // Trigger AnimatingState's onChange, to trigger \"move\" event immediately\n        transitTo(STATE_TYPE.ANIMATING)\n          .onChange(e, context);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n}\n\nexport default IdleState;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport State from \"./State\";\nimport { STATE_TYPE, EVENTS, DIRECTION } from \"../consts\";\nimport { FlickingContext } from \"../types\";\n\nclass HoldingState extends State {\n  public readonly type = STATE_TYPE.HOLDING;\n  public readonly holding = true;\n  public readonly playing = true;\n\n  private releaseEvent: any = null;\n\n  public onChange(e: any, context: FlickingContext): void {\n    const { flicking, triggerEvent, transitTo } = context;\n\n    const offset = flicking.options.horizontal\n      ? e.inputEvent.offsetX\n      : e.inputEvent.offsetY;\n    this.direction = offset < 0\n      ? DIRECTION.NEXT\n      : DIRECTION.PREV;\n\n    triggerEvent(EVENTS.MOVE_START, e, true)\n      .onSuccess(() => {\n        // Trigger DraggingState's onChange, to trigger \"move\" event immediately\n        transitTo(STATE_TYPE.DRAGGING)\n          .onChange(e, context);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  public onRelease(e: any, context: FlickingContext): void {\n    const { viewport, triggerEvent, transitTo } = context;\n\n    triggerEvent(EVENTS.HOLD_END, e, true);\n\n    if (e.delta.flick !== 0) {\n      // Sometimes \"release\" event on axes triggered before \"change\" event\n      // Especially if user flicked panel fast in really short amount of time\n      // if delta is not zero, that means above case happened.\n\n      // Event flow should be HOLD_START -> MOVE_START -> MOVE -> HOLD_END\n      // At least one move event should be included between holdStart and holdEnd\n      e.setTo({ flick: viewport.getCameraPosition() }, 0);\n      transitTo(STATE_TYPE.IDLE);\n      return;\n    }\n\n    // Can't handle select event here,\n    // As \"finish\" axes event happens\n    this.releaseEvent = e;\n  }\n\n  public onFinish(e: any, { viewport, triggerEvent, transitTo }: FlickingContext): void {\n    // Should transite to IDLE state before select event\n    // As user expects hold is already finished\n    transitTo(STATE_TYPE.IDLE);\n\n    if (!this.releaseEvent) {\n      return;\n    }\n\n    // Handle release event here\n    // To prevent finish event called twice\n    const releaseEvent = this.releaseEvent;\n\n    // Static click\n    const srcEvent = releaseEvent.inputEvent.srcEvent;\n\n    let clickedElement: HTMLElement;\n    if (srcEvent.type === \"touchend\") {\n      const touchEvent = srcEvent as TouchEvent;\n      const touch = touchEvent.changedTouches[0];\n      clickedElement = document.elementFromPoint(touch.clientX, touch.clientY) as HTMLElement;\n    } else {\n      clickedElement = srcEvent.target;\n    }\n    const clickedPanel = viewport.panelManager.findPanelOf(clickedElement);\n    const cameraPosition = viewport.getCameraPosition();\n\n    if (clickedPanel) {\n      const clickedPanelPosition = clickedPanel.getPosition();\n      const direction = clickedPanelPosition > cameraPosition\n        ? DIRECTION.NEXT\n        : clickedPanelPosition < cameraPosition\n          ? DIRECTION.PREV\n          : null;\n\n      // Don't provide axes event, to use axes instance instead\n      triggerEvent(EVENTS.SELECT, null, true, {\n        direction, // Direction to the clicked panel\n        index: clickedPanel.getIndex(),\n        panel: clickedPanel,\n      });\n    }\n  }\n}\n\nexport default HoldingState;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport State from \"./State\";\nimport { STATE_TYPE, EVENTS } from \"../consts\";\nimport { FlickingContext } from \"../types\";\n\nclass DraggingState extends State {\n  public readonly type = STATE_TYPE.DRAGGING;\n  public readonly holding = true;\n  public readonly playing = true;\n\n  public onChange(e: any, { moveCamera, transitTo }: FlickingContext): void {\n    if (!e.delta.flick) {\n      return;\n    }\n\n    moveCamera(e)\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  public onRelease(e: any, context: FlickingContext): void {\n    const { flicking, viewport, triggerEvent, transitTo, stopCamera } = context;\n\n    const delta = this.delta;\n    const absDelta = Math.abs(delta);\n    const options = flicking.options;\n    const horizontal = options.horizontal;\n    const moveType = viewport.moveType;\n    const inputEvent = e.inputEvent;\n\n    const velocity = horizontal\n      ? inputEvent.velocityX\n      : inputEvent.velocityY;\n    const inputDelta = horizontal\n      ? inputEvent.deltaX\n      : inputEvent.deltaY;\n    const isNextDirection = Math.abs(velocity) > 1\n      ? velocity < 0\n      : absDelta > 0\n        ? delta > 0\n        : inputDelta < 0;\n\n    const swipeDistance = viewport.options.bound\n      ? Math.max(absDelta, Math.abs(inputDelta))\n      : absDelta;\n    const swipeAngle = inputEvent.deltaX\n      ? Math.abs(180 * Math.atan(inputEvent.deltaY / inputEvent.deltaX) / Math.PI)\n      : 90;\n    const belowAngleThreshold = horizontal\n      ? swipeAngle <= options.thresholdAngle\n      : swipeAngle > options.thresholdAngle;\n    const overThreshold = swipeDistance >= options.threshold\n      && belowAngleThreshold;\n\n    const moveTypeContext = {\n      viewport,\n      axesEvent: e,\n      state: this,\n      swipeDistance,\n      isNextDirection,\n    };\n\n    // Update last position to cope with Axes's animating behavior\n    // Axes uses start position when animation start\n    triggerEvent(EVENTS.HOLD_END, e, true);\n\n    const targetPanel = this.targetPanel;\n    if (!overThreshold && targetPanel) {\n      // Interrupted while animating\n      const interruptDestInfo = moveType.findPanelWhenInterrupted(moveTypeContext);\n\n      viewport.moveTo(\n        interruptDestInfo.panel,\n        interruptDestInfo.destPos,\n        interruptDestInfo.eventType,\n        e,\n        interruptDestInfo.duration,\n      );\n      transitTo(STATE_TYPE.ANIMATING);\n      return;\n    }\n\n    const currentPanel = viewport.getCurrentPanel();\n    const nearestPanel = viewport.getNearestPanel();\n\n    if (!currentPanel || !nearestPanel) {\n      // There're no panels\n      e.stop();\n      transitTo(STATE_TYPE.IDLE);\n      return;\n    }\n\n    const destInfo = overThreshold\n      ? moveType.findTargetPanel(moveTypeContext)\n      : moveType.findRestorePanel(moveTypeContext);\n\n    viewport.moveTo(\n      destInfo.panel,\n      destInfo.destPos,\n      destInfo.eventType,\n      e,\n      destInfo.duration,\n    ).onSuccess(() => {\n      transitTo(STATE_TYPE.ANIMATING);\n    }).onStopped(() => {\n      transitTo(STATE_TYPE.DISABLED);\n      stopCamera(e);\n    });\n  }\n}\n\nexport default DraggingState;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport State from \"./State\";\nimport { STATE_TYPE, EVENTS } from \"../consts\";\nimport { FlickingContext } from \"../types\";\nimport { circulate } from \"../utils\";\n\nclass AnimatingState extends State {\n  public readonly type = STATE_TYPE.ANIMATING;\n  public readonly holding = false;\n  public readonly playing = true;\n\n  public onHold(e: any, { viewport, triggerEvent, transitTo }: FlickingContext): void {\n    const options = viewport.options;\n    const scrollArea = viewport.getScrollArea();\n    const scrollAreaSize = viewport.getScrollAreaSize();\n    const loopCount = Math.floor((this.lastPosition + this.delta - scrollArea.prev) / scrollAreaSize);\n\n    const targetPanel = this.targetPanel;\n    if (options.circular && loopCount !== 0 && targetPanel) {\n      const cloneCount = viewport.panelManager.getCloneCount();\n      const originalTargetPosition = targetPanel.getPosition();\n\n      // cloneIndex is from -1 to cloneCount - 1\n      const newCloneIndex = circulate(targetPanel.getCloneIndex() - loopCount, -1, cloneCount - 1, true);\n      const newTargetPosition = originalTargetPosition - loopCount * scrollAreaSize;\n      const newTargetPanel = targetPanel.getIdenticalPanels()[newCloneIndex + 1].clone(newCloneIndex, true);\n\n      // Set new target panel considering looped count\n      newTargetPanel.setPosition(newTargetPosition);\n      this.targetPanel = newTargetPanel;\n    }\n\n    // Reset last position and delta\n    this.delta = 0;\n    this.lastPosition = viewport.getCameraPosition();\n\n    // Update current panel as current nearest panel\n    viewport.setCurrentPanel(viewport.getNearestPanel()!);\n    triggerEvent(EVENTS.HOLD_START, e, true)\n      .onSuccess(() => {\n        transitTo(STATE_TYPE.DRAGGING);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  public onChange(e: any, { moveCamera, transitTo }: FlickingContext): void {\n    if (!e.delta.flick) {\n      return;\n    }\n\n    moveCamera(e)\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  public onFinish(e: any, { flicking, viewport, triggerEvent, transitTo }: FlickingContext) {\n    const isTrusted = e && e.isTrusted;\n\n    viewport.options.bound\n      ? viewport.setCurrentPanel(this.targetPanel!)\n      : viewport.setCurrentPanel(viewport.getNearestPanel()!);\n\n    if (flicking.options.adaptive) {\n      viewport.updateAdaptiveSize();\n    }\n\n    transitTo(STATE_TYPE.IDLE);\n    viewport.updateCameraPosition();\n    triggerEvent(EVENTS.MOVE_END, e, isTrusted, {\n      direction: this.direction,\n    });\n  }\n}\n\nexport default AnimatingState;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport State from \"./State\";\nimport { STATE_TYPE } from \"../consts\";\nimport { FlickingContext } from \"../types\";\n\nclass DisabledState extends State {\n  public readonly type = STATE_TYPE.DISABLED;\n  public readonly holding = false;\n  public readonly playing = true;\n\n  public onAnimationEnd(e: any, { transitTo }: FlickingContext): void {\n    transitTo(STATE_TYPE.IDLE);\n  }\n\n  public onChange(e: any, { viewport, transitTo }: FlickingContext): void {\n    // Can stop Axes's change event\n    e.stop();\n\n    // Should update axes position as it's already changed at this moment\n    viewport.updateAxesPosition(viewport.getCameraPosition());\n    transitTo(STATE_TYPE.IDLE);\n  }\n\n  public onRelease(e: any, { transitTo }: FlickingContext): void {\n    // This is needed when stopped hold start event\n    if (e.delta.flick === 0) {\n      transitTo(STATE_TYPE.IDLE);\n    }\n  }\n}\n\nexport default DisabledState;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport State from \"../states/State\";\nimport { AxesEventType, ValueOf, FlickingContext, StateType } from \"../types\";\nimport { AXES_EVENTS, STATE_TYPE } from \"../consts\";\nimport IdleState from \"../states/IdleState\";\nimport HoldingState from \"../states/HoldingState\";\nimport DraggingState from \"../states/DraggingState\";\nimport AnimatingState from \"../states/AnimatingState\";\nimport DisabledState from \"../states/DisabledState\";\n\nclass StateMachine {\n  private state: State = new IdleState();\n\n  public fire(eventType: ValueOf<AxesEventType>, e: any, context: FlickingContext) {\n    const currentState = this.state;\n    switch (eventType) {\n      case AXES_EVENTS.HOLD:\n        currentState.onHold(e, context);\n        break;\n      case AXES_EVENTS.CHANGE:\n        currentState.onChange(e, context);\n        break;\n      case AXES_EVENTS.RELEASE:\n        currentState.onRelease(e, context);\n        break;\n      case AXES_EVENTS.ANIMATION_END:\n        currentState.onAnimationEnd(e, context);\n        break;\n      case AXES_EVENTS.FINISH:\n        currentState.onFinish(e, context);\n        break;\n    }\n  }\n\n  public getState(): State {\n    return this.state;\n  }\n\n  public transitTo = (nextStateType: ValueOf<StateType>): State => {\n    const currentState = this.state;\n\n    if (currentState.type !== nextStateType) {\n      let nextState: State;\n\n      switch (nextStateType) {\n        case STATE_TYPE.IDLE:\n          nextState = new IdleState();\n          break;\n        case STATE_TYPE.HOLDING:\n          nextState = new HoldingState();\n          break;\n        case STATE_TYPE.DRAGGING:\n          nextState = new DraggingState();\n          break;\n        case STATE_TYPE.ANIMATING:\n          nextState = new AnimatingState();\n          break;\n        case STATE_TYPE.DISABLED:\n          nextState = new DisabledState();\n          break;\n      }\n\n      currentState.onExit(nextState!);\n      nextState!.onEnter(currentState);\n\n      this.state = nextState!;\n    }\n    return this.state;\n  }\n}\n\nexport default StateMachine;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport MoveType from \"./MoveType\";\nimport { MOVE_TYPE, EVENTS } from \"../consts\";\nimport { MoveTypeContext, DestinationInfo } from \"../types\";\nimport { clamp } from \"../utils\";\n\nclass Snap extends MoveType {\n  protected readonly type: string = MOVE_TYPE.SNAP;\n  protected count: number;\n\n  constructor(count: number) {\n    super();\n    this.count = count;\n  }\n\n  public findTargetPanel(ctx: MoveTypeContext): DestinationInfo {\n    const { viewport, axesEvent, swipeDistance } = ctx;\n    const snapCount = this.count;\n    const eventDelta = Math.abs(axesEvent.delta.flick);\n    const currentPanel = viewport.getCurrentPanel()!;\n    const nearestPanel = viewport.getNearestPanel()!;\n    const minimumDistanceToChange = this.calcBrinkOfChange(ctx);\n    const nearestIsCurrent = nearestPanel.getIndex() === currentPanel.getIndex();\n\n    // This can happen when bounce is 0\n    const shouldMoveWhenBounceIs0 = viewport.canSetBoundMode() && nearestIsCurrent;\n    const shouldMoveToAdjacent = !viewport.isOutOfBound()\n      && (swipeDistance <= minimumDistanceToChange || shouldMoveWhenBounceIs0);\n\n    if (snapCount > 1 && eventDelta > minimumDistanceToChange) {\n      return this.findSnappedPanel(ctx);\n    } else if (shouldMoveToAdjacent) {\n      return this.findAdjacentPanel(ctx);\n    } else {\n      return {\n        panel: nearestPanel,\n        duration: viewport.options.duration,\n        destPos: viewport.findEstimatedPosition(nearestPanel),\n        // As swipeDistance holds mouse/touch position change regardless of bounce option value\n        // swipDistance > minimumDistanceToChange can happen in bounce area\n        // Second condition is for handling that.\n        eventType: (swipeDistance <= minimumDistanceToChange)\n          || (viewport.isOutOfBound() && nearestIsCurrent)\n          ? EVENTS.RESTORE\n          : EVENTS.CHANGE,\n      };\n    }\n  }\n\n  protected findSnappedPanel(ctx: MoveTypeContext): DestinationInfo {\n    const { axesEvent, viewport, state, isNextDirection } = ctx;\n\n    const eventDelta = Math.abs(axesEvent.delta.flick);\n    const minimumDistanceToChange = this.calcBrinkOfChange(ctx);\n    const snapCount = this.count;\n    const options = viewport.options;\n    const scrollAreaSize = viewport.getScrollAreaSize();\n    const halfGap = options.gap / 2;\n    const estimatedHangerPos = axesEvent.destPos.flick + viewport.getRelativeHangerPosition();\n\n    let panelToMove = viewport.getNearestPanel()!;\n    let cycleIndex = panelToMove.getCloneIndex() + 1; // 0(original) or 1(clone)\n    let passedPanelCount = 0;\n\n    while (passedPanelCount < snapCount) {\n      // Since panelToMove holds also cloned panels, we should use original panel's position\n      const originalPanel = panelToMove.getOriginalPanel();\n      const panelPosition = originalPanel.getPosition() + cycleIndex * scrollAreaSize;\n      const panelSize = originalPanel.getSize();\n\n      const panelNextPosition = panelPosition + panelSize + halfGap;\n      const panelPrevPosition = panelPosition - halfGap;\n\n      // Current panelToMove contains destPos\n      if (\n        (isNextDirection && panelNextPosition > estimatedHangerPos)\n        || (!isNextDirection && panelPrevPosition < estimatedHangerPos)\n      ) {\n        break;\n      }\n\n      const siblingPanel = isNextDirection\n        ? panelToMove.nextSibling\n        : panelToMove.prevSibling;\n      if (!siblingPanel) {\n        break;\n      }\n\n      const panelIndex = panelToMove.getIndex();\n      const siblingIndex = siblingPanel.getIndex();\n      if ((isNextDirection && siblingIndex <= panelIndex)\n        || (!isNextDirection && siblingIndex >= panelIndex)\n      ) {\n        cycleIndex = isNextDirection\n          ? cycleIndex + 1\n          : cycleIndex - 1;\n      }\n      panelToMove = siblingPanel;\n      passedPanelCount += 1;\n    }\n\n    const originalPosition = panelToMove.getOriginalPanel().getPosition();\n\n    if (cycleIndex !== 0) {\n      panelToMove = panelToMove.clone(panelToMove.getCloneIndex(), true);\n      panelToMove.setPosition(originalPosition + cycleIndex * scrollAreaSize);\n    }\n\n    const defaultDuration = viewport.options.duration;\n    const duration = clamp(axesEvent.duration, defaultDuration, defaultDuration * passedPanelCount);\n\n    return {\n      panel: panelToMove,\n      destPos: viewport.findEstimatedPosition(panelToMove),\n      duration,\n      eventType: Math.max(eventDelta, state.delta) > minimumDistanceToChange\n        ? EVENTS.CHANGE\n        : EVENTS.RESTORE,\n    };\n  }\n\n  private findAdjacentPanel(ctx: MoveTypeContext): DestinationInfo {\n    const { viewport, isNextDirection } = ctx;\n\n    const options = viewport.options;\n    const currentIndex = viewport.getCurrentIndex();\n    const currentPanel = viewport.panelManager.get(currentIndex)!;\n    const hangerPosition = viewport.getHangerPosition();\n    const scrollArea = viewport.getScrollArea();\n\n    const firstClonedPanel = currentPanel.getIdenticalPanels()[1];\n    const lapped = options.circular\n      && (Math.abs(currentPanel.getAnchorPosition() - hangerPosition)\n        > Math.abs(firstClonedPanel.getAnchorPosition() - hangerPosition));\n\n    // If lapped in circular mode, use first cloned panel as base panel\n    const basePanel = lapped\n      ? firstClonedPanel\n      : currentPanel;\n    const basePosition = basePanel.getPosition();\n\n    const adjacentPanel = isNextDirection\n      ? basePanel.nextSibling\n      : basePanel.prevSibling;\n\n    const eventType = adjacentPanel\n      ? EVENTS.CHANGE\n      : EVENTS.RESTORE;\n    const panelToMove = adjacentPanel\n      ? adjacentPanel\n      : basePanel;\n    const targetRelativeAnchorPosition = panelToMove.getRelativeAnchorPosition();\n\n    const estimatedPanelPosition = options.circular\n      ? isNextDirection\n        ? basePosition + basePanel.getSize() + targetRelativeAnchorPosition + options.gap\n        : basePosition - (panelToMove.getSize() - targetRelativeAnchorPosition) - options.gap\n      : panelToMove.getAnchorPosition();\n    const estimatedPosition = estimatedPanelPosition - viewport.getRelativeHangerPosition();\n    const destPos = viewport.canSetBoundMode()\n      ? clamp(estimatedPosition, scrollArea.prev, scrollArea.next)\n      : estimatedPosition;\n\n    return {\n      panel: panelToMove,\n      destPos,\n      duration: options.duration,\n      eventType,\n    };\n  }\n}\n\nexport default Snap;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport { MoveTypeStringOption, MoveTypeContext, DestinationInfo } from \"../types\";\nimport Panel from \"../components/Panel\";\nimport { EVENTS } from \"../consts\";\n\nabstract class MoveType {\n  protected readonly abstract type: string;\n\n  public abstract findTargetPanel(ctx: MoveTypeContext): DestinationInfo;\n\n  public is(type: MoveTypeStringOption): boolean {\n    return type === this.type;\n  }\n\n  public findRestorePanel(ctx: MoveTypeContext): DestinationInfo {\n    const viewport = ctx.viewport;\n    const options = viewport.options;\n\n    const panel = options.circular\n      ? this.findRestorePanelInCircularMode(ctx)\n      : viewport.getCurrentPanel()!;\n\n    return {\n      panel,\n      destPos: viewport.findEstimatedPosition(panel),\n      duration: options.duration,\n      eventType: EVENTS.RESTORE,\n    };\n  }\n\n  public findPanelWhenInterrupted(ctx: MoveTypeContext): DestinationInfo {\n    const { state, viewport } = ctx;\n    const targetPanel = state.targetPanel!;\n\n    return {\n      panel: targetPanel,\n      destPos: viewport.findEstimatedPosition(targetPanel),\n      duration: viewport.options.duration,\n      eventType: \"\",\n    };\n  }\n\n  // Calculate minimum distance to \"change\" panel\n  protected calcBrinkOfChange(ctx: MoveTypeContext): number {\n    const { viewport, isNextDirection } = ctx;\n\n    const options = viewport.options;\n    const currentPanel = viewport.getCurrentPanel()!;\n    const halfGap = options.gap / 2;\n\n    const relativeAnchorPosition = currentPanel.getRelativeAnchorPosition();\n\n    // Minimum distance needed to decide prev/next panel as nearest\n    /*\n     * |  Prev  |     Next     |\n     * |--------|--------------|\n     * [][      |<-Anchor    ][] <- Panel + Half-Gap\n     */\n    let minimumDistanceToChange = isNextDirection\n      ? currentPanel.getSize() - relativeAnchorPosition + halfGap\n      : relativeAnchorPosition + halfGap;\n\n    minimumDistanceToChange = Math.max(minimumDistanceToChange, options.threshold);\n\n    return minimumDistanceToChange;\n  }\n\n  private findRestorePanelInCircularMode(ctx: MoveTypeContext): Panel {\n    const viewport = ctx.viewport;\n    const originalPanel = viewport.getCurrentPanel()!.getOriginalPanel();\n    const hangerPosition = viewport.getHangerPosition();\n\n    const firstClonedPanel = originalPanel.getIdenticalPanels()[1];\n    const lapped = Math.abs(originalPanel.getAnchorPosition() - hangerPosition)\n      > Math.abs(firstClonedPanel.getAnchorPosition() - hangerPosition);\n\n    return (!ctx.isNextDirection && lapped)\n      ? firstClonedPanel\n      : originalPanel;\n  }\n}\n\nexport default MoveType;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport Snap from \"./Snap\";\nimport { MOVE_TYPE, EVENTS } from \"../consts\";\nimport { MoveTypeContext, DestinationInfo } from \"../types\";\nimport { circulate, clamp } from \"../utils\";\n\nclass FreeScroll extends Snap {\n  protected readonly type: string = MOVE_TYPE.FREE_SCROLL;\n\n  constructor() {\n    // Set snap count to Infinity\n    super(Infinity);\n  }\n\n  public findTargetPanel(ctx: MoveTypeContext): DestinationInfo {\n    const { axesEvent, state, viewport } = ctx;\n    const destPos = axesEvent.destPos.flick;\n    const minimumDistanceToChange = this.calcBrinkOfChange(ctx);\n    const scrollArea = viewport.getScrollArea();\n    const currentPanel = viewport.getCurrentPanel()!;\n    const options = viewport.options;\n\n    const delta = Math.abs(axesEvent.delta.flick + state.delta);\n    if (delta > minimumDistanceToChange) {\n      const destInfo = super.findSnappedPanel(ctx);\n\n      destInfo.duration = axesEvent.duration;\n      destInfo.destPos = destPos;\n      destInfo.eventType = !options.circular && destInfo.panel === currentPanel\n        ? \"\"\n        : EVENTS.CHANGE;\n\n      return destInfo;\n    } else {\n      let estimatedPosition = options.circular\n        ? circulate(destPos, scrollArea.prev, scrollArea.next, false)\n        : destPos;\n      estimatedPosition = clamp(estimatedPosition, scrollArea.prev, scrollArea.next);\n      estimatedPosition += viewport.getRelativeHangerPosition();\n\n      const estimatedPanel = viewport.findNearestPanelAt(estimatedPosition)!;\n\n      return {\n        panel: estimatedPanel,\n        destPos,\n        duration: axesEvent.duration,\n        eventType: \"\",\n      };\n    }\n  }\n\n  public findRestorePanel(ctx: MoveTypeContext): DestinationInfo {\n    return this.findTargetPanel(ctx);\n  }\n\n  public findPanelWhenInterrupted(ctx: MoveTypeContext): DestinationInfo {\n    const { viewport } = ctx;\n\n    return {\n      panel: viewport.getNearestPanel()!,\n      destPos: viewport.getCameraPosition(),\n      duration: 0,\n      eventType: \"\",\n    };\n  }\n\n  protected calcBrinkOfChange(ctx: MoveTypeContext): number {\n    const { viewport, isNextDirection } = ctx;\n\n    const options = viewport.options;\n    const currentPanel = viewport.getCurrentPanel()!;\n    const halfGap = options.gap / 2;\n\n    const lastPosition = viewport.stateMachine.getState().lastPosition;\n    const currentPanelPosition = currentPanel.getPosition();\n\n    // As camera can stop anywhere in free scroll mode,\n    // minimumDistanceToChange should be calculated differently.\n    // Ref #191(https://github.com/naver/egjs-flicking/issues/191)\n    const lastHangerPosition = lastPosition + viewport.getRelativeHangerPosition();\n\n    const scrollAreaSize = viewport.getScrollAreaSize();\n    let minimumDistanceToChange = isNextDirection\n      ? currentPanelPosition + currentPanel.getSize() - lastHangerPosition + halfGap\n      : lastHangerPosition - currentPanelPosition + halfGap;\n    minimumDistanceToChange = Math.abs(minimumDistanceToChange % scrollAreaSize);\n\n    return Math.min(minimumDistanceToChange, scrollAreaSize - minimumDistanceToChange);\n  }\n}\n\nexport default FreeScroll;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Axes, { PanInput } from \"@egjs/axes\";\n\nimport Flicking from \"../Flicking\";\nimport Panel from \"./Panel\";\nimport PanelManager from \"./PanelManager\";\nimport StateMachine from \"./StateMachine\";\nimport MoveType from \"../moves/MoveType\";\nimport { FlickingOptions, FlickingPanel, FlickingStatus, ElementLike, EventType, TriggerCallback, NeedPanelEvent, FlickingEvent, MoveTypeObjectOption, OriginalStyle, Plugin, DestroyOption, BoundingBox } from \"../types\";\nimport { DEFAULT_VIEWPORT_CSS, DEFAULT_CAMERA_CSS, TRANSFORM, DEFAULT_OPTIONS, EVENTS, DIRECTION, STATE_TYPE, MOVE_TYPE } from \"../consts\";\nimport { clamp, applyCSS, toArray, parseArithmeticExpression, isBetween, isArray, parseElement, hasClass, restoreStyle, circulate, findIndex, getBbox } from \"../utils\";\nimport Snap from \"../moves/Snap\";\nimport FreeScroll from \"../moves/FreeScroll\";\n\nexport default class Viewport {\n  public options: FlickingOptions;\n  public stateMachine: StateMachine;\n  public panelManager: PanelManager;\n  public moveType: MoveType;\n\n  private flicking: Flicking;\n  private axes: Axes;\n  private panInput: PanInput;\n\n  private viewportElement: HTMLElement;\n  private cameraElement: HTMLElement;\n\n  private triggerEvent: Flicking[\"triggerEvent\"];\n  private axesHandlers: { [key: string]: any };\n\n  private currentPanel: Panel | undefined;\n  private nearestPanel: Panel | undefined;\n  private visiblePanels: Panel[];\n\n  private plugins: Plugin[] = [];\n  private panelBboxes: { [className: string]: BoundingBox };\n  private state: {\n    size: number;\n    position: number;\n    panelMaintainRatio: number;\n    relativeHangerPosition: number;\n    positionOffset: number;\n    scrollArea: {\n      prev: number;\n      next: number;\n    };\n    translate: {\n      name: string,\n      has3d: boolean,\n    };\n    infiniteThreshold: number;\n    checkedIndexes: Array<[number, number]>;\n    isAdaptiveCached: boolean;\n    isViewportGiven: boolean;\n    isCameraGiven: boolean;\n    originalViewportStyle: OriginalStyle;\n    originalCameraStyle: OriginalStyle;\n    cachedBbox: BoundingBox | null;\n  };\n\n  constructor(\n    flicking: Flicking,\n    options: FlickingOptions,\n    triggerEvent: Flicking[\"triggerEvent\"],\n  ) {\n    this.flicking = flicking;\n    this.triggerEvent = triggerEvent;\n\n    this.state = {\n      size: 0,\n      position: 0,\n      panelMaintainRatio: 0,\n      relativeHangerPosition: 0,\n      positionOffset: 0,\n      scrollArea: {\n        prev: 0,\n        next: 0,\n      },\n      translate: TRANSFORM,\n      infiniteThreshold: 0,\n      checkedIndexes: [],\n      isAdaptiveCached: false,\n      isViewportGiven: false,\n      isCameraGiven: false,\n      originalViewportStyle: {\n        className: null,\n        style: null,\n      },\n      originalCameraStyle: {\n        className: null,\n        style: null,\n      },\n      cachedBbox: null,\n    };\n    this.options = options;\n    this.stateMachine = new StateMachine();\n    this.visiblePanels = [];\n    this.panelBboxes = {};\n\n    this.build();\n  }\n\n  public moveTo(\n    panel: Panel,\n    destPos: number,\n    eventType: EventType[\"CHANGE\"] | EventType[\"RESTORE\"] | \"\",\n    axesEvent: any,\n    duration: number = this.options.duration,\n  ): TriggerCallback {\n    const state = this.state;\n    const currentState = this.stateMachine.getState();\n    const currentPosition = state.position;\n\n    const isTrusted = axesEvent\n      ? axesEvent.isTrusted\n      : false;\n    const direction = destPos === currentPosition\n      ? null\n      : destPos > currentPosition\n        ? DIRECTION.NEXT\n        : DIRECTION.PREV;\n\n    let eventResult: TriggerCallback;\n    if (eventType === EVENTS.CHANGE) {\n      eventResult = this.triggerEvent(EVENTS.CHANGE, axesEvent, isTrusted, {\n        index: panel.getIndex(),\n        panel,\n        direction,\n      });\n    } else if (eventType === EVENTS.RESTORE) {\n      eventResult = this.triggerEvent(EVENTS.RESTORE, axesEvent, isTrusted);\n    } else {\n      eventResult = {\n        onSuccess(callback: () => void): TriggerCallback {\n          callback();\n          return this;\n        },\n        onStopped(): TriggerCallback {\n          return this;\n        },\n      };\n    }\n\n    eventResult.onSuccess(() => {\n      currentState.delta = 0;\n      currentState.lastPosition = this.getCameraPosition();\n      currentState.targetPanel = panel;\n      currentState.direction = destPos === currentPosition\n        ? null\n        : destPos > currentPosition\n          ? DIRECTION.NEXT\n          : DIRECTION.PREV;\n\n      if (destPos === currentPosition) {\n        // no move\n        this.nearestPanel = panel;\n        this.currentPanel = panel;\n      }\n\n      if (axesEvent && axesEvent.setTo) {\n        // freeScroll only occurs in release events\n        axesEvent.setTo({ flick: destPos }, duration);\n      } else {\n        this.axes.setTo({ flick: destPos }, duration);\n      }\n    });\n\n    return eventResult;\n  }\n\n  public moveCamera(pos: number, axesEvent?: any): void {\n    const state = this.state;\n    const options = this.options;\n    const transform = state.translate.name;\n    const scrollArea = state.scrollArea;\n\n    // Update position & nearestPanel\n    if (options.circular && !isBetween(pos, scrollArea.prev, scrollArea.next)) {\n      pos = circulate(pos, scrollArea.prev, scrollArea.next, false);\n    }\n    state.position = pos;\n    this.nearestPanel = this.findNearestPanel();\n    const nearestPanel = this.nearestPanel;\n    const originalNearestPosition = nearestPanel\n      ? nearestPanel.getPosition()\n      : 0;\n\n    // From 0(panel position) to 1(panel position + panel size)\n    // When it's on gap area value will be (val > 1 || val < 0)\n    if (nearestPanel) {\n      const hangerPosition = this.getHangerPosition();\n      const panelPosition = nearestPanel.getPosition();\n      const panelSize = nearestPanel.getSize();\n      const halfGap = options.gap / 2;\n\n      // As panel's range is from panel position - half gap ~ panel pos + panel size + half gap\n      state.panelMaintainRatio = (hangerPosition - panelPosition + halfGap) / (panelSize + 2 * halfGap);\n    } else {\n      state.panelMaintainRatio = 0;\n    }\n\n    this.checkNeedPanel(axesEvent);\n\n    // Possibly modified after need panel, if it's looped\n    const modifiedNearestPosition = nearestPanel\n      ? nearestPanel.getPosition()\n      : 0;\n\n    pos += (modifiedNearestPosition - originalNearestPosition);\n    state.position = pos;\n\n    this.updateVisiblePanels();\n\n    // Offset is needed to fix camera layer size in visible-only rendering mode\n    const posOffset = options.renderOnlyVisible\n      ? state.positionOffset\n      : 0;\n    const moveVector = options.horizontal\n      ? [-(pos - posOffset), 0] : [0, -(pos - posOffset)];\n    const moveCoord = moveVector.map(coord => `${Math.round(coord)}px`).join(\", \");\n\n    this.cameraElement.style[transform] = state.translate.has3d\n      ? `translate3d(${moveCoord}, 0px)`\n      : `translate(${moveCoord})`;\n  }\n\n  public stopCamera = (axesEvent: any): void => {\n    if (axesEvent && axesEvent.setTo) {\n      axesEvent.setTo({ flick: this.state.position }, 0);\n    }\n\n    this.stateMachine.transitTo(STATE_TYPE.IDLE);\n  }\n\n  public unCacheBbox(): void {\n    const state = this.state;\n    const options = this.options;\n\n    state.cachedBbox = null;\n    this.visiblePanels = [];\n\n    const viewportElement = this.viewportElement;\n    if (!options.horizontal) {\n      // Don't preserve previous width for adaptive resizing\n      viewportElement.style.width = \"\";\n    } else {\n      viewportElement.style.height = \"\";\n    }\n    state.isAdaptiveCached = false;\n    this.panelBboxes = {};\n  }\n\n  public resize(): void {\n    this.updateSize();\n    this.updateOriginalPanelPositions();\n    this.updateAdaptiveSize();\n    this.updateScrollArea();\n    this.updateClonePanels();\n    this.updateCameraPosition();\n    this.updatePlugins();\n  }\n\n  // Find nearest anchor from current hanger position\n  public findNearestPanel(): Panel | undefined {\n    const state = this.state;\n    const panelManager = this.panelManager;\n    const hangerPosition = this.getHangerPosition();\n\n    if (this.isOutOfBound()) {\n      const position = state.position;\n\n      return position <= state.scrollArea.prev\n        ? panelManager.firstPanel()\n        : panelManager.lastPanel();\n    }\n\n    return this.findNearestPanelAt(hangerPosition);\n  }\n\n  public findNearestPanelAt(position: number): Panel | undefined {\n    const panelManager = this.panelManager;\n\n    const allPanels = panelManager.allPanels();\n    let minimumDistance = Infinity;\n    let nearestPanel: Panel | undefined;\n\n    for (const panel of allPanels) {\n      if (!panel) {\n        continue;\n      }\n      const prevPosition = panel.getPosition();\n      const nextPosition = prevPosition + panel.getSize();\n\n      // Use shortest distance from panel's range\n      const distance = isBetween(position, prevPosition, nextPosition)\n        ? 0\n        : Math.min(\n          Math.abs(prevPosition - position),\n          Math.abs(nextPosition - position),\n        );\n\n      if (distance > minimumDistance) {\n        break;\n      } else if (distance === minimumDistance) {\n        const minimumAnchorDistance = Math.abs(position - nearestPanel!.getAnchorPosition());\n        const anchorDistance = Math.abs(position - panel.getAnchorPosition());\n\n        if (anchorDistance > minimumAnchorDistance) {\n          break;\n        }\n      }\n\n      minimumDistance = distance;\n      nearestPanel = panel;\n    }\n\n    return nearestPanel;\n  }\n\n  public findNearestIdenticalPanel(panel: Panel): Panel {\n    let nearest = panel;\n    let shortestDistance = Infinity;\n    const hangerPosition = this.getHangerPosition();\n\n    const identicals = panel.getIdenticalPanels();\n    identicals.forEach(identical => {\n      const anchorPosition = identical.getAnchorPosition();\n      const distance = Math.abs(anchorPosition - hangerPosition);\n\n      if (distance < shortestDistance) {\n        nearest = identical;\n        shortestDistance = distance;\n      }\n    });\n\n    return nearest;\n  }\n\n  // Find shortest camera position that distance is minimum\n  public findShortestPositionToPanel(panel: Panel): number {\n    const state = this.state;\n    const options = this.options;\n    const anchorPosition = panel.getAnchorPosition();\n    const hangerPosition = this.getHangerPosition();\n    const distance = Math.abs(hangerPosition - anchorPosition);\n    const scrollAreaSize = state.scrollArea.next - state.scrollArea.prev;\n\n    if (!options.circular) {\n      const position = anchorPosition - state.relativeHangerPosition;\n      return this.canSetBoundMode()\n        ? clamp(position, state.scrollArea.prev, state.scrollArea.next)\n        : position;\n    } else {\n      // If going out of viewport border is more efficient way of moving, choose that position\n      return distance <= scrollAreaSize - distance\n        ? anchorPosition - state.relativeHangerPosition\n        : anchorPosition > hangerPosition\n          // PREV TO NEXT\n          ? anchorPosition - state.relativeHangerPosition - scrollAreaSize\n          // NEXT TO PREV\n          : anchorPosition - state.relativeHangerPosition + scrollAreaSize;\n    }\n  }\n\n  public findEstimatedPosition(panel: Panel): number {\n    const scrollArea = this.getScrollArea();\n\n    let estimatedPosition = panel.getAnchorPosition() - this.getRelativeHangerPosition();\n    estimatedPosition = this.canSetBoundMode()\n      ? clamp(estimatedPosition, scrollArea.prev, scrollArea.next)\n      : estimatedPosition;\n\n    return estimatedPosition;\n  }\n\n  public addVisiblePanel(panel: Panel): void {\n    if (this.getVisibleIndexOf(panel) < 0) {\n      this.visiblePanels.push(panel);\n    }\n  }\n\n  public enable(): void {\n    this.panInput.enable();\n  }\n\n  public disable(): void {\n    this.panInput.disable();\n  }\n\n  public insert(index: number, element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const lastIndex = this.panelManager.getLastIndex();\n\n    // Index should not below 0\n    if (index < 0 || index > lastIndex) {\n      return [];\n    }\n\n    const state = this.state;\n    const options = this.options;\n    const parsedElements = parseElement(element);\n\n    const panels = parsedElements\n      .map((el, idx) => new Panel(el, index + idx, this))\n      .slice(0, lastIndex - index + 1);\n\n    if (panels.length <= 0) {\n      return [];\n    }\n\n    const pushedIndex = this.panelManager.insert(index, panels);\n\n    // ...then calc bbox for all panels\n    this.resizePanels(panels);\n\n    if (!this.currentPanel) {\n      this.currentPanel = panels[0];\n      this.nearestPanel = panels[0];\n\n      const newCenterPanel = panels[0];\n      const newPanelPosition = this.findEstimatedPosition(newCenterPanel);\n      state.position = newPanelPosition;\n      this.updateAxesPosition(newPanelPosition);\n      state.panelMaintainRatio = (newCenterPanel.getRelativeAnchorPosition() + options.gap / 2) / (newCenterPanel.getSize() + options.gap);\n    }\n\n    // Update checked indexes in infinite mode\n    this.updateCheckedIndexes({ min: index, max: index });\n    state.checkedIndexes.forEach((indexes, idx) => {\n      const [min, max] = indexes;\n      if (index < min) {\n        // Push checked index\n        state.checkedIndexes.splice(idx, 1, [min + pushedIndex, max + pushedIndex]);\n      }\n    });\n\n    this.resize();\n\n    return panels;\n  }\n\n  public replace(index: number, element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const state = this.state;\n    const options = this.options;\n    const panelManager = this.panelManager;\n    const lastIndex = panelManager.getLastIndex();\n\n    // Index should not below 0\n    if (index < 0 || index > lastIndex) {\n      return [];\n    }\n\n    const parsedElements = parseElement(element);\n    const panels = parsedElements\n      .map((el, idx) => new Panel(el, index + idx, this))\n      .slice(0, lastIndex - index + 1);\n\n    if (panels.length <= 0) {\n      return [];\n    }\n\n    const replacedPanels = panelManager.replace(index, panels);\n\n    replacedPanels.forEach(panel => {\n      const visibleIndex = this.getVisibleIndexOf(panel);\n      if (visibleIndex > -1) {\n        this.visiblePanels.splice(visibleIndex, 1);\n      }\n    });\n\n    // ...then calc bbox for all panels\n    this.resizePanels(panels);\n\n    const currentPanel = this.currentPanel;\n    const wasEmpty = !currentPanel;\n    if (wasEmpty) {\n      this.currentPanel = panels[0];\n      this.nearestPanel = panels[0];\n\n      const newCenterPanel = panels[0];\n      const newPanelPosition = this.findEstimatedPosition(newCenterPanel);\n      state.position = newPanelPosition;\n      this.updateAxesPosition(newPanelPosition);\n      state.panelMaintainRatio = (newCenterPanel.getRelativeAnchorPosition() + options.gap / 2) / (newCenterPanel.getSize() + options.gap);\n    } else if (isBetween(currentPanel!.getIndex(), index, index + panels.length - 1)) {\n      // Current panel is replaced\n      this.currentPanel = panelManager.get(currentPanel!.getIndex());\n    }\n\n    // Update checked indexes in infinite mode\n    this.updateCheckedIndexes({ min: index, max: index + panels.length - 1 });\n\n    this.resize();\n\n    return panels;\n  }\n\n  public remove(index: number, deleteCount: number = 1): FlickingPanel[] {\n    const state = this.state;\n    // Index should not below 0\n    index = Math.max(index, 0);\n\n    const panelManager = this.panelManager;\n    const currentIndex = this.getCurrentIndex();\n\n    const removedPanels = panelManager.remove(index, deleteCount);\n    if (isBetween(currentIndex, index, index + deleteCount - 1)) {\n      // Current panel is removed\n      // Use panel at removing index - 1 as new current panel if it exists\n      const newCurrentIndex = Math.max(index - 1, panelManager.getRange().min);\n      this.currentPanel = panelManager.get(newCurrentIndex);\n    }\n\n    // Update checked indexes in infinite mode\n    if (deleteCount > 0) {\n      // Check whether removing index will affect checked indexes\n      // Suppose index 0 is empty and removed index 1, then checked index 0 should be deleted and vice versa.\n      this.updateCheckedIndexes({ min: index - 1, max: index + deleteCount });\n      // Uncache visible panels to refresh panels\n      this.visiblePanels = [];\n    }\n\n    if (panelManager.getPanelCount() <= 0) {\n      this.currentPanel = undefined;\n      this.nearestPanel = undefined;\n    }\n\n    this.resize();\n\n    const scrollArea = state.scrollArea;\n    if (state.position < scrollArea.prev || state.position > scrollArea.next) {\n      const newPosition = circulate(state.position, scrollArea.prev, scrollArea.next, false);\n      this.moveCamera(newPosition);\n      this.updateAxesPosition(newPosition);\n    }\n\n    return removedPanels;\n  }\n\n  public updateAdaptiveSize(): void {\n    const state = this.state;\n    const options = this.options;\n    const horizontal = options.horizontal;\n    const currentPanel = this.getCurrentPanel();\n\n    if (!currentPanel) {\n      return;\n    }\n\n    const shouldApplyAdaptive = options.adaptive || !state.isAdaptiveCached;\n    const viewportStyle = this.viewportElement.style;\n    if (shouldApplyAdaptive) {\n      let sizeToApply: number;\n      if (options.adaptive) {\n        const panelBbox = currentPanel.getBbox();\n\n        sizeToApply = horizontal ? panelBbox.height : panelBbox.width;\n      } else {\n        // Find minimum height of panels to maximum panel size\n        const maximumPanelSize = this.panelManager.originalPanels().reduce((maximum, panel) => {\n          const panelBbox = panel.getBbox();\n          return Math.max(maximum, horizontal ? panelBbox.height : panelBbox.width);\n        }, 0);\n\n        sizeToApply = maximumPanelSize;\n      }\n\n      if (!state.isAdaptiveCached) {\n        const viewportBbox = this.updateBbox();\n        sizeToApply = Math.max(sizeToApply, horizontal ? viewportBbox.height : viewportBbox.width);\n        state.isAdaptiveCached = true;\n      }\n\n      const viewportSize = `${sizeToApply}px`;\n      if (horizontal) {\n        viewportStyle.height = viewportSize;\n        state.cachedBbox!.height = sizeToApply;\n      } else {\n        viewportStyle.width = viewportSize;\n        state.cachedBbox!.width = sizeToApply;\n      }\n    }\n  }\n\n  // Update camera position after resizing\n  public updateCameraPosition(): void {\n    const state = this.state;\n    const currentPanel = this.getCurrentPanel();\n    const currentState = this.stateMachine.getState();\n    const isFreeScroll = this.moveType.is(MOVE_TYPE.FREE_SCROLL);\n    const relativeHangerPosition = this.getRelativeHangerPosition();\n    const halfGap = this.options.gap / 2;\n\n    if (currentState.holding || currentState.playing) {\n      this.updateVisiblePanels();\n      return;\n    }\n\n    let newPosition: number;\n    if (isFreeScroll) {\n      const nearestPanel = this.getNearestPanel();\n\n      newPosition = nearestPanel\n        ? nearestPanel.getPosition() - halfGap + (nearestPanel.getSize() + 2 * halfGap) * state.panelMaintainRatio - relativeHangerPosition\n        : this.getCameraPosition();\n    } else {\n      newPosition = currentPanel\n        ? currentPanel.getAnchorPosition() - relativeHangerPosition\n        : this.getCameraPosition();\n    }\n\n    if (this.canSetBoundMode()) {\n      newPosition = clamp(newPosition, state.scrollArea.prev, state.scrollArea.next);\n    }\n\n    // Pause & resume axes to prevent axes's \"change\" event triggered\n    // This should be done before moveCamera, as moveCamera can trigger needPanel\n    this.updateAxesPosition(newPosition);\n\n    this.moveCamera(newPosition);\n  }\n\n  public updateBbox(): BoundingBox {\n    const state = this.state;\n    const options = this.options;\n    const viewportElement = this.viewportElement;\n\n    if (!state.cachedBbox) {\n      state.cachedBbox = getBbox(viewportElement, options.useOffset);\n    }\n\n    return state.cachedBbox!;\n  }\n\n  public updatePlugins(): void {\n    // update for resize\n    this.plugins.forEach(plugin => {\n      plugin.update && plugin.update(this.flicking);\n    });\n  }\n\n  public destroy(option: Partial<DestroyOption>): void {\n    const state = this.state;\n    const wrapper = this.flicking.getElement();\n    const viewportElement = this.viewportElement;\n    const cameraElement = this.cameraElement;\n    const originalPanels = this.panelManager.originalPanels();\n\n    this.removePlugins(this.plugins);\n    if (!option.preserveUI) {\n      restoreStyle(viewportElement, state.originalViewportStyle);\n      restoreStyle(cameraElement, state.originalCameraStyle);\n\n      if (!state.isCameraGiven && !this.options.renderExternal) {\n        const topmostElement = state.isViewportGiven\n          ? viewportElement\n          : wrapper;\n        const deletingElement = state.isViewportGiven\n          ? cameraElement\n          : viewportElement;\n\n        originalPanels.forEach(panel => {\n          topmostElement.appendChild(panel.getElement());\n        });\n\n        topmostElement.removeChild(deletingElement);\n      }\n    }\n\n    this.axes.destroy();\n    this.panInput.destroy();\n\n    originalPanels.forEach(panel => { panel.destroy(option); });\n\n    // release resources\n    for (const x in this) {\n      (this as any)[x] = null;\n    }\n  }\n\n  public restore(status: FlickingStatus): void {\n    const panels = status.panels;\n    const defaultIndex = this.options.defaultIndex;\n    const cameraElement = this.cameraElement;\n    const panelManager = this.panelManager;\n\n    // Restore index\n    cameraElement.innerHTML = panels.map(panel => panel.html).join(\"\");\n\n    // Create panels first\n    this.refreshPanels();\n    const createdPanels = panelManager.originalPanels();\n\n    // ...then order it by its index\n    const orderedPanels: Panel[] = [];\n    panels.forEach((panel, idx) => {\n      const createdPanel = createdPanels[idx];\n      createdPanel.setIndex(panel.index);\n      orderedPanels[panel.index] = createdPanel;\n    });\n    panelManager.replacePanels(orderedPanels, []);\n    panelManager.setCloneCount(0); // No clones at this point\n\n    const panelCount = panelManager.getPanelCount();\n    if (panelCount > 0) {\n      this.currentPanel = panelManager.get(status.index)\n        || panelManager.get(defaultIndex)\n        || panelManager.firstPanel();\n      this.nearestPanel = this.currentPanel;\n    } else {\n      this.currentPanel = undefined;\n      this.nearestPanel = undefined;\n    }\n    this.visiblePanels = orderedPanels.filter(panel => Boolean(panel));\n\n    this.resize();\n\n    this.axes.setTo({ flick: status.position }, 0);\n    this.moveCamera(status.position);\n  }\n\n  public calcVisiblePanels(): Panel[] {\n    const allPanels = this.panelManager.allPanels();\n    if (this.options.renderOnlyVisible) {\n      const cameraPos = this.getCameraPosition();\n      const viewportSize = this.getSize();\n      const basePanel = this.nearestPanel!;\n\n      const getNextPanel = (panel: Panel) => {\n        const nextPanel = panel.nextSibling;\n\n        if (nextPanel && nextPanel.getPosition() >= panel.getPosition()) {\n          return nextPanel;\n        } else {\n          return null;\n        }\n      };\n\n      const getPrevPanel = (panel: Panel) => {\n        const prevPanel = panel.prevSibling;\n\n        if (prevPanel && prevPanel.getPosition() <= panel.getPosition()) {\n          return prevPanel;\n        } else {\n          return null;\n        }\n      };\n\n      const isOutOfBoundNext = (panel: Panel) => panel.getPosition() >= cameraPos + viewportSize;\n      const isOutOfBoundPrev = (panel: Panel) => panel.getPosition() + panel.getSize() <= cameraPos;\n\n      const getVisiblePanels = (\n        panel: Panel,\n        getNext: (panel: Panel) => Panel | null,\n        isOutOfViewport: (panel: Panel) => boolean,\n      ): Panel[] => {\n        const visiblePanels: Panel[] = [];\n\n        let lastPanel = panel;\n        while (true) {\n          const nextPanel = getNext(lastPanel);\n          if (!nextPanel || isOutOfViewport(nextPanel)) {\n            break;\n          }\n          visiblePanels.push(nextPanel);\n          lastPanel = nextPanel;\n        }\n        return visiblePanels;\n      };\n\n      const panelCount = this.panelManager.getPanelCount();\n      const getAbsIndex = (panel: Panel) => panel.getIndex() + (panel.getCloneIndex() + 1) * panelCount;\n      const nextPanels = getVisiblePanels(basePanel, getNextPanel, isOutOfBoundNext);\n      const prevPanels = getVisiblePanels(basePanel, getPrevPanel, isOutOfBoundPrev);\n\n      return [basePanel, ...nextPanels, ...prevPanels].sort((panel1, panel2) => getAbsIndex(panel1) - getAbsIndex(panel2));\n    } else {\n      return allPanels.filter(panel => {\n        const outsetProgress = panel.getOutsetProgress();\n\n        return outsetProgress > -1 && outsetProgress < 1;\n      });\n    }\n  }\n\n  public getCurrentPanel(): Panel | undefined {\n    return this.currentPanel;\n  }\n\n  public getCurrentIndex(): number {\n    const currentPanel = this.currentPanel;\n\n    return currentPanel\n      ? currentPanel.getIndex()\n      : -1;\n  }\n\n  public getNearestPanel(): Panel | undefined {\n    return this.nearestPanel;\n  }\n\n  // Get progress from nearest panel\n  public getCurrentProgress(): number {\n    const currentState = this.stateMachine.getState();\n    let nearestPanel = currentState.playing || currentState.holding\n      ? this.nearestPanel\n      : this.currentPanel;\n\n    const panelManager = this.panelManager;\n    if (!nearestPanel) {\n      // There're no panels\n      return NaN;\n    }\n    const { prev: prevRange, next: nextRange } = this.getScrollArea();\n    const cameraPosition = this.getCameraPosition();\n    const isOutOfBound = this.isOutOfBound();\n    let prevPanel = nearestPanel.prevSibling;\n    let nextPanel = nearestPanel.nextSibling;\n    let hangerPosition = this.getHangerPosition();\n    let nearestAnchorPos = nearestPanel.getAnchorPosition();\n\n    if (\n      isOutOfBound\n      && prevPanel\n      && nextPanel\n      && cameraPosition < nextRange\n      // On the basis of anchor, prevPanel is nearestPanel.\n      && (hangerPosition - prevPanel.getAnchorPosition() < nearestAnchorPos - hangerPosition)\n    ) {\n      nearestPanel = prevPanel;\n      nextPanel = nearestPanel.nextSibling;\n      prevPanel = nearestPanel.prevSibling;\n      nearestAnchorPos = nearestPanel.getAnchorPosition();\n    }\n    const nearestIndex = nearestPanel.getIndex() + (nearestPanel.getCloneIndex() + 1) * panelManager.getPanelCount();\n    const nearestSize = nearestPanel.getSize();\n\n    if (isOutOfBound) {\n      const relativeHangerPosition = this.getRelativeHangerPosition();\n\n      if (nearestAnchorPos > nextRange + relativeHangerPosition) {\n        // next bounce area: hangerPosition - relativeHangerPosition - nextRange\n        hangerPosition = nearestAnchorPos + hangerPosition - relativeHangerPosition - nextRange;\n      } else if (nearestAnchorPos < prevRange + relativeHangerPosition) {\n        // prev bounce area: hangerPosition - relativeHangerPosition - prevRange\n        hangerPosition = nearestAnchorPos + hangerPosition - relativeHangerPosition - prevRange;\n      }\n    }\n    const hangerIsNextToNearestPanel = hangerPosition >= nearestAnchorPos;\n    const gap = this.options.gap;\n\n    let basePosition = nearestAnchorPos;\n    let targetPosition = nearestAnchorPos;\n    if (hangerIsNextToNearestPanel) {\n      targetPosition = nextPanel\n        ? nextPanel.getAnchorPosition()\n        : nearestAnchorPos + nearestSize + gap;\n    } else {\n      basePosition = prevPanel\n        ? prevPanel.getAnchorPosition()\n        : nearestAnchorPos - nearestSize - gap;\n    }\n\n    const progressBetween = (hangerPosition - basePosition) / (targetPosition - basePosition);\n    const startIndex = hangerIsNextToNearestPanel\n      ? nearestIndex\n      : prevPanel\n        ? prevPanel.getIndex()\n        : nearestIndex - 1;\n\n    return startIndex + progressBetween;\n  }\n\n  // Update axes flick position without triggering event\n  public updateAxesPosition(position: number) {\n    const axes = this.axes;\n    axes.off();\n    axes.setTo({\n      flick: position,\n    }, 0);\n    axes.on(this.axesHandlers);\n  }\n\n  public getSize(): number {\n    return this.state.size;\n  }\n\n  public getScrollArea(): { prev: number, next: number } {\n    return this.state.scrollArea;\n  }\n\n  public isOutOfBound(): boolean {\n    const state = this.state;\n    const options = this.options;\n    const scrollArea = state.scrollArea;\n\n    return !options.circular\n      && options.bound\n      && (state.position <= scrollArea.prev || state.position >= scrollArea.next);\n  }\n\n  public canSetBoundMode(): boolean {\n    const options = this.options;\n\n    return options.bound && !options.circular;\n  }\n\n  public getViewportElement(): HTMLElement {\n    return this.viewportElement;\n  }\n\n  public getCameraElement(): HTMLElement {\n    return this.cameraElement;\n  }\n\n  public getScrollAreaSize(): number {\n    const scrollArea = this.state.scrollArea;\n\n    return scrollArea.next - scrollArea.prev;\n  }\n\n  public getRelativeHangerPosition(): number {\n    return this.state.relativeHangerPosition;\n  }\n\n  public getHangerPosition(): number {\n    return this.state.position + this.state.relativeHangerPosition;\n  }\n\n  public getCameraPosition(): number {\n    return this.state.position;\n  }\n\n  public getPositionOffset(): number {\n    return this.state.positionOffset;\n  }\n\n  public getCheckedIndexes(): Array<[number, number]> {\n    return this.state.checkedIndexes;\n  }\n\n  public getVisiblePanels(): Panel[] {\n    return this.visiblePanels;\n  }\n\n  public setCurrentPanel(panel: Panel): void {\n    this.currentPanel = panel;\n  }\n\n  public setLastIndex(index: number): void {\n    const currentPanel = this.currentPanel;\n    const panelManager = this.panelManager;\n\n    panelManager.setLastIndex(index);\n    if (currentPanel && currentPanel.getIndex() > index) {\n      this.currentPanel = panelManager.lastPanel();\n    }\n\n    this.resize();\n  }\n\n  public setVisiblePanels(panels: Panel[]): void {\n    this.visiblePanels = panels;\n  }\n\n  public connectAxesHandler(handlers: { [key: string]: (event: { [key: string]: any; }) => any }): void {\n    const axes = this.axes;\n\n    this.axesHandlers = handlers;\n    axes.on(handlers);\n  }\n\n  public addPlugins(plugins: Plugin | Plugin[]) {\n    const newPlugins = ([] as Plugin[]).concat(plugins);\n\n    newPlugins.forEach(plugin => {\n      plugin.init(this.flicking);\n    });\n\n    this.plugins = this.plugins.concat(newPlugins);\n    return this;\n  }\n\n  public removePlugins(plugins: Plugin | Plugin[]) {\n    const currentPlugins = this.plugins;\n    const removedPlugins = ([] as Plugin[]).concat(plugins);\n\n    removedPlugins.forEach(plugin => {\n      const index = currentPlugins.indexOf(plugin);\n\n      if (index > -1) {\n        currentPlugins.splice(index, 1);\n      }\n\n      plugin.destroy(this.flicking);\n    });\n    return this;\n  }\n\n  public updateCheckedIndexes(changedRange: { min: number, max: number }): void {\n    const state = this.state;\n\n    let removed = 0;\n    state.checkedIndexes.concat().forEach((indexes, idx) => {\n      const [min, max] = indexes;\n      // Can fill part of indexes in range\n      if (changedRange.min <= max && changedRange.max >= min) {\n        // Remove checked index from list\n        state.checkedIndexes.splice(idx - removed, 1);\n        removed++;\n      }\n    });\n  }\n\n  public appendUncachedPanelElements(panels: Panel[]): void {\n    const options = this.options;\n    const fragment = document.createDocumentFragment();\n\n    if (options.isEqualSize) {\n      const prevVisiblePanels = this.visiblePanels;\n      const equalSizeClasses = options.isEqualSize as string[]; // for readability\n      const cached: { [className: string]: boolean } = {};\n\n      this.visiblePanels = [];\n\n      Object.keys(this.panelBboxes).forEach(className => {\n        cached[className] = true;\n      });\n\n      panels.forEach(panel => {\n        const overlappedClass = panel.getOverlappedClass(equalSizeClasses);\n        if (overlappedClass && !cached[overlappedClass]) {\n          if (!options.renderExternal) {\n            fragment.appendChild(panel.getElement());\n          }\n          this.visiblePanels.push(panel);\n          cached[overlappedClass] = true;\n        } else if (!overlappedClass) {\n          if (!options.renderExternal) {\n            fragment.appendChild(panel.getElement());\n          }\n          this.visiblePanels.push(panel);\n        }\n      });\n      prevVisiblePanels.forEach(panel => {\n        this.addVisiblePanel(panel);\n      });\n    } else {\n      if (!options.renderExternal) {\n        panels.forEach(panel => fragment.appendChild(panel.getElement()));\n      }\n      this.visiblePanels = panels.filter(panel => Boolean(panel));\n    }\n\n    if (!options.renderExternal) {\n      this.cameraElement.appendChild(fragment);\n    }\n  }\n\n  private updateClonePanels() {\n    const panelManager = this.panelManager;\n\n    // Clone panels in circular mode\n    if (this.options.circular && panelManager.getPanelCount() > 0) {\n      this.clonePanels();\n      this.updateClonedPanelPositions();\n    }\n    panelManager.chainAllPanels();\n  }\n\n  private getVisibleIndexOf(panel: Panel): number {\n    return findIndex(this.visiblePanels, visiblePanel => visiblePanel === panel);\n  }\n\n  private build(): void {\n    this.setElements();\n    this.applyCSSValue();\n    this.setMoveType();\n    this.setAxesInstance();\n    this.refreshPanels();\n    this.setDefaultPanel();\n    this.resize();\n    this.moveToDefaultPanel();\n  }\n\n  private setElements(): void {\n    const state = this.state;\n    const options = this.options;\n    const wrapper = this.flicking.getElement();\n    const classPrefix = options.classPrefix;\n\n    const viewportCandidate = wrapper.children[0] as HTMLElement;\n    const hasViewportElement = viewportCandidate && hasClass(viewportCandidate, `${classPrefix}-viewport`);\n\n    const viewportElement = hasViewportElement\n      ? viewportCandidate\n      : document.createElement(\"div\");\n\n    const cameraCandidate = hasViewportElement\n      ? viewportElement.children[0] as HTMLElement\n      : wrapper.children[0] as HTMLElement;\n    const hasCameraElement = cameraCandidate && hasClass(cameraCandidate, `${classPrefix}-camera`);\n\n    const cameraElement = hasCameraElement\n      ? cameraCandidate\n      : document.createElement(\"div\");\n\n    if (!hasCameraElement) {\n      cameraElement.className = `${classPrefix}-camera`;\n\n      const panelElements = hasViewportElement\n        ? viewportElement.children\n        : wrapper.children;\n\n      // Make all panels to be a child of camera element\n      // wrapper <- viewport <- camera <- panels[1...n]\n      toArray(panelElements).forEach(child => {\n        cameraElement.appendChild(child);\n      });\n    } else {\n      state.originalCameraStyle = {\n        className: cameraElement.getAttribute(\"class\"),\n        style: cameraElement.getAttribute(\"style\"),\n      };\n    }\n\n    if (!hasViewportElement) {\n      viewportElement.className = `${classPrefix}-viewport`;\n\n      // Add viewport element to wrapper\n      wrapper.appendChild(viewportElement);\n    } else {\n      state.originalViewportStyle = {\n        className: viewportElement.getAttribute(\"class\"),\n        style: viewportElement.getAttribute(\"style\"),\n      };\n    }\n\n    if (!hasCameraElement || !hasViewportElement) {\n      viewportElement.appendChild(cameraElement);\n    }\n\n    this.viewportElement = viewportElement;\n    this.cameraElement = cameraElement;\n    state.isViewportGiven = hasViewportElement;\n    state.isCameraGiven = hasCameraElement;\n  }\n\n  private applyCSSValue(): void {\n    const options = this.options;\n    const viewportElement = this.viewportElement;\n    const cameraElement = this.cameraElement;\n    const viewportStyle = this.viewportElement.style;\n\n    // Set default css values for each element\n    applyCSS(viewportElement, DEFAULT_VIEWPORT_CSS);\n    applyCSS(cameraElement, DEFAULT_CAMERA_CSS);\n\n    viewportElement.style.zIndex = `${options.zIndex}`;\n    if (options.horizontal) {\n      viewportStyle.minHeight = \"100%\";\n      viewportStyle.width = \"100%\";\n    } else {\n      viewportStyle.minWidth = \"100%\";\n      viewportStyle.height = \"100%\";\n    }\n    if (options.overflow) {\n      viewportStyle.overflow = \"visible\";\n    }\n\n    this.panelManager = new PanelManager(this.cameraElement, options);\n  }\n\n  private setMoveType(): void {\n    const moveType = this.options.moveType as MoveTypeObjectOption;\n\n    switch (moveType.type) {\n      case MOVE_TYPE.SNAP:\n        this.moveType = new Snap(moveType.count);\n        break;\n      case MOVE_TYPE.FREE_SCROLL:\n        this.moveType = new FreeScroll();\n        break;\n      default:\n        throw new Error(\"moveType is not correct!\");\n    }\n  }\n\n  private setAxesInstance(): void {\n    const state = this.state;\n    const options = this.options;\n\n    const scrollArea = state.scrollArea;\n    const horizontal = options.horizontal;\n\n    this.axes = new Axes({\n      flick: {\n        range: [scrollArea.prev, scrollArea.next],\n        circular: options.circular,\n        bounce: [0, 0], // will be updated in resize()\n      },\n    }, {\n      easing: options.panelEffect,\n      deceleration: options.deceleration,\n      interruptable: true,\n    });\n\n    this.panInput = new PanInput(this.viewportElement, {\n      inputType: options.inputType,\n      thresholdAngle: options.thresholdAngle,\n      scale: options.horizontal ? [-1, 0] : [0, -1],\n    });\n\n    this.axes.connect(horizontal ? [\"flick\", \"\"] : [\"\", \"flick\"], this.panInput);\n  }\n\n  private refreshPanels(): void {\n    const panelManager = this.panelManager;\n    // Panel elements were attached to camera element by Flicking class\n    const panelElements = this.cameraElement.children;\n\n    // Initialize panels\n    const panels = toArray(panelElements).map(\n      (el: HTMLElement, idx: number) => new Panel(el, idx, this),\n    );\n\n    panelManager.replacePanels(panels, []);\n    this.visiblePanels = panels.filter(panel => Boolean(panel));\n  }\n\n  private setDefaultPanel(): void {\n    const options = this.options;\n    const panelManager = this.panelManager;\n    const indexRange = this.panelManager.getRange();\n    const index = clamp(options.defaultIndex, indexRange.min, indexRange.max);\n\n    this.currentPanel = panelManager.get(index);\n  }\n\n  private clonePanels() {\n    const state = this.state;\n    const options = this.options;\n    const panelManager = this.panelManager;\n\n    const gap = options.gap;\n    const viewportSize = state.size;\n    const firstPanel = panelManager.firstPanel();\n    const lastPanel = panelManager.lastPanel()!;\n\n    // There're no panels exist\n    if (!firstPanel) {\n      return;\n    }\n\n    // For each panels, clone itself while last panel's position + size is below viewport size\n    const panels = panelManager.originalPanels();\n    const reversedPanels = panels.concat().reverse();\n\n    const sumOriginalPanelSize = lastPanel.getPosition() + lastPanel.getSize() - firstPanel.getPosition() + gap;\n    const relativeAnchorPosition = firstPanel.getRelativeAnchorPosition();\n    const relativeHangerPosition = this.getRelativeHangerPosition();\n\n    const areaPrev = (relativeHangerPosition - relativeAnchorPosition) % sumOriginalPanelSize;\n    let sizeSum = 0;\n    let panelAtLeftBoundary!: Panel;\n    for (const panel of reversedPanels) {\n      if (!panel) {\n        continue;\n      }\n      sizeSum += panel.getSize() + gap;\n      if (sizeSum >= areaPrev) {\n        panelAtLeftBoundary = panel;\n        break;\n      }\n    }\n\n    const areaNext = (viewportSize - relativeHangerPosition + relativeAnchorPosition) % sumOriginalPanelSize;\n    sizeSum = 0;\n    let panelAtRightBoundary!: Panel;\n    for (const panel of panels) {\n      if (!panel) {\n        continue;\n      }\n      sizeSum += panel.getSize() + gap;\n      if (sizeSum >= areaNext) {\n        panelAtRightBoundary = panel;\n        break;\n      }\n    }\n\n    // Need one more set of clones on prev area of original panel 0\n    const needCloneOnPrev = panelAtLeftBoundary.getIndex() !== 0\n      && panelAtLeftBoundary.getIndex() <= panelAtRightBoundary.getIndex();\n\n    // Visible count of panel 0 on first screen\n    const panel0OnFirstscreen = Math.ceil((relativeHangerPosition + firstPanel.getSize() - relativeAnchorPosition) / sumOriginalPanelSize)\n      + Math.ceil((viewportSize - relativeHangerPosition + relativeAnchorPosition) / sumOriginalPanelSize)\n      - 1; // duplication\n\n    const cloneCount = panel0OnFirstscreen\n      + (needCloneOnPrev ? 1 : 0);\n    const prevCloneCount = panelManager.getCloneCount();\n\n    panelManager.setCloneCount(cloneCount);\n    if (options.renderExternal) {\n      return;\n    }\n\n    if (cloneCount > prevCloneCount) {\n      // should clone more\n      for (let cloneIndex = prevCloneCount; cloneIndex < cloneCount; cloneIndex++) {\n        const clones = panels.map(origPanel => origPanel.clone(cloneIndex));\n        const fragment = document.createDocumentFragment();\n        clones.forEach(panel => fragment.appendChild(panel.getElement()));\n\n        this.cameraElement.appendChild(fragment);\n        this.visiblePanels.push(...clones.filter(clone => Boolean(clone)));\n        panelManager.insertClones(cloneIndex, 0, clones);\n      }\n    } else if (cloneCount < prevCloneCount) {\n      // should remove some\n      panelManager.removeClonesAfter(cloneCount);\n    }\n  }\n\n  private moveToDefaultPanel(): void {\n    const state = this.state;\n    const panelManager = this.panelManager;\n    const options = this.options;\n    const indexRange = this.panelManager.getRange();\n\n    const defaultIndex = clamp(options.defaultIndex, indexRange.min, indexRange.max);\n    const defaultPanel = panelManager.get(defaultIndex);\n\n    let defaultPosition = 0;\n    if (defaultPanel) {\n      defaultPosition = defaultPanel.getAnchorPosition() - state.relativeHangerPosition;\n      defaultPosition = this.canSetBoundMode()\n        ? clamp(defaultPosition, state.scrollArea.prev, state.scrollArea.next)\n        : defaultPosition;\n    }\n\n    this.moveCamera(defaultPosition);\n    this.axes.setTo({ flick: defaultPosition }, 0);\n  }\n\n  private updateSize(): void {\n    const state = this.state;\n    const options = this.options;\n    const panels = this.panelManager.originalPanels()\n      .filter(panel => Boolean(panel));\n    const bbox = this.updateBbox();\n\n    const prevSize = state.size;\n    // Update size & hanger position\n    state.size = options.horizontal\n      ? bbox.width\n      : bbox.height;\n\n    if (prevSize !== state.size) {\n      state.relativeHangerPosition = parseArithmeticExpression(options.hanger, state.size);\n      state.infiniteThreshold = parseArithmeticExpression(options.infiniteThreshold, state.size);\n    }\n\n    if (panels.length <= 0) {\n      return;\n    }\n\n    this.resizePanels(panels);\n  }\n\n  private updateOriginalPanelPositions(): void {\n    const gap = this.options.gap;\n    const panelManager = this.panelManager;\n\n    const firstPanel = panelManager.firstPanel();\n    const panels = panelManager.originalPanels();\n\n    if (!firstPanel) {\n      return;\n    }\n\n    const currentPanel = this.currentPanel!;\n    const nearestPanel = this.nearestPanel;\n    const currentState = this.stateMachine.getState();\n    const scrollArea = this.state.scrollArea;\n\n    // Update panel position && fit to wrapper\n    let nextPanelPos = firstPanel.getPosition();\n    let maintainingPanel: Panel = firstPanel;\n    if (nearestPanel) {\n      // We should maintain nearestPanel's position\n      const looped = !isBetween(currentState.lastPosition + currentState.delta, scrollArea.prev, scrollArea.next);\n\n      maintainingPanel = looped\n        ? currentPanel\n        : nearestPanel;\n    } else if (firstPanel.getIndex() > 0) {\n      maintainingPanel = currentPanel;\n    }\n\n    const panelsBeforeMaintainPanel = panels.slice(0, maintainingPanel.getIndex() + (maintainingPanel.getCloneIndex() + 1) * panels.length);\n    const accumulatedSize = panelsBeforeMaintainPanel.reduce((total, panel) => {\n      return total + panel.getSize() + gap;\n    }, 0);\n\n    nextPanelPos = maintainingPanel.getPosition() - accumulatedSize;\n\n    panels.forEach(panel => {\n      const newPosition = nextPanelPos;\n      const panelSize = panel.getSize();\n\n      panel.setPosition(newPosition);\n      nextPanelPos += panelSize + gap;\n    });\n\n    if (!this.options.renderOnlyVisible) {\n      panels.forEach(panel => panel.setPositionCSS());\n    }\n  }\n\n  private updateClonedPanelPositions(): void {\n    const state = this.state;\n    const options = this.options;\n    const panelManager = this.panelManager;\n    const clonedPanels = panelManager.clonedPanels()\n      .reduce((allClones, clones) => [...allClones, ...clones], [])\n      .filter(panel => Boolean(panel));\n\n    const scrollArea = state.scrollArea;\n\n    const firstPanel = panelManager.firstPanel();\n    const lastPanel = panelManager.lastPanel()!;\n\n    if (!firstPanel) {\n      return;\n    }\n\n    const sumOriginalPanelSize = lastPanel.getPosition() + lastPanel.getSize() - firstPanel.getPosition() + options.gap;\n\n    // Locate all cloned panels linearly first\n    for (const panel of clonedPanels) {\n      const origPanel = panel.getOriginalPanel();\n      const cloneIndex = panel.getCloneIndex();\n      const cloneBasePos = sumOriginalPanelSize * (cloneIndex + 1);\n      const clonedPanelPos = cloneBasePos + origPanel.getPosition();\n\n      panel.setPosition(clonedPanelPos);\n    }\n\n    let lastReplacePosition = firstPanel.getPosition();\n    // reverse() pollutes original array, so copy it with concat()\n    for (const panel of clonedPanels.concat().reverse()) {\n      const panelSize = panel.getSize();\n      const replacePosition = lastReplacePosition - panelSize - options.gap;\n\n      if (replacePosition + panelSize <= scrollArea.prev) {\n        // Replace is not meaningful, as it won't be seen in current scroll area\n        break;\n      }\n\n      panel.setPosition(replacePosition);\n      lastReplacePosition = replacePosition;\n    }\n\n    if (!this.options.renderOnlyVisible) {\n      clonedPanels.forEach(panel => {\n        panel.setPositionCSS();\n      });\n    }\n  }\n\n  private updateScrollArea(): void {\n    const state = this.state;\n    const panelManager = this.panelManager;\n    const options = this.options;\n    const axes = this.axes;\n\n    // Set viewport scrollable area\n    const firstPanel = panelManager.firstPanel();\n    const lastPanel = panelManager.lastPanel() as Panel;\n    const relativeHangerPosition = state.relativeHangerPosition;\n\n    if (!firstPanel) {\n      state.scrollArea = {\n        prev: 0,\n        next: 0,\n      };\n    } else if (this.canSetBoundMode()) {\n      const sumOriginalPanelSize = lastPanel.getPosition() + lastPanel.getSize() - firstPanel.getPosition();\n\n      if (sumOriginalPanelSize >= state.size) {\n        state.scrollArea = {\n          prev: firstPanel.getPosition(),\n          next: lastPanel.getPosition() + lastPanel.getSize() - state.size,\n        };\n      } else {\n        // Find anchor position of set of the combined panels\n        const relAnchorPosOfCombined = parseArithmeticExpression(options.anchor, sumOriginalPanelSize);\n        const anchorPos = firstPanel.getPosition() + clamp(\n          relAnchorPosOfCombined,\n          sumOriginalPanelSize - (state.size - relativeHangerPosition),\n          relativeHangerPosition,\n        );\n\n        state.scrollArea = {\n          prev: anchorPos - relativeHangerPosition,\n          next: anchorPos - relativeHangerPosition,\n        };\n      }\n    } else if (options.circular) {\n      const sumOriginalPanelSize = lastPanel.getPosition() + lastPanel.getSize() - firstPanel.getPosition() + options.gap;\n\n      // Maximum scroll extends to first clone sequence's first panel\n      state.scrollArea = {\n        prev: firstPanel.getAnchorPosition() - relativeHangerPosition,\n        next: sumOriginalPanelSize + firstPanel.getAnchorPosition() - relativeHangerPosition,\n      };\n    } else {\n      state.scrollArea = {\n        prev: firstPanel.getAnchorPosition() - relativeHangerPosition,\n        next: lastPanel.getAnchorPosition() - relativeHangerPosition,\n      };\n    }\n\n    const viewportSize = state.size;\n    const bounce = options.bounce;\n\n    let parsedBounce: number[];\n    if (isArray(bounce)) {\n      parsedBounce = (bounce as string[]).map(val => parseArithmeticExpression(val, viewportSize, DEFAULT_OPTIONS.bounce as number));\n    } else {\n      const parsedVal = parseArithmeticExpression(bounce as number | string, viewportSize, DEFAULT_OPTIONS.bounce as number);\n      parsedBounce = [parsedVal, parsedVal];\n    }\n\n    // Update axes range and bounce\n    const flick = axes.axis.flick;\n    flick.range = [state.scrollArea.prev, state.scrollArea.next];\n    flick.bounce = parsedBounce;\n  }\n\n  private checkNeedPanel(axesEvent?: any): void {\n    const state = this.state;\n    const options = this.options;\n    const panelManager = this.panelManager;\n    const currentPanel = this.currentPanel;\n    const nearestPanel = this.nearestPanel;\n    const currentState = this.stateMachine.getState();\n\n    if (!options.infinite) {\n      return;\n    }\n\n    const gap = options.gap;\n    const infiniteThreshold = state.infiniteThreshold;\n    const maxLastIndex = panelManager.getLastIndex();\n\n    if (maxLastIndex < 0) {\n      return;\n    }\n\n    if (!currentPanel || !nearestPanel) {\n      // There're no panels\n      this.triggerNeedPanel({\n        axesEvent,\n        siblingPanel: null,\n        direction: null,\n        indexRange: {\n          min: 0,\n          max: maxLastIndex,\n          length: maxLastIndex + 1,\n        },\n      });\n      return;\n    }\n\n    const originalNearestPosition = nearestPanel.getPosition();\n\n    // Check next direction\n    let checkingPanel: Panel | null = !currentState.holding && !currentState.playing\n      ? currentPanel\n      : nearestPanel;\n\n    while (checkingPanel) {\n      const currentIndex = checkingPanel.getIndex();\n      const nextSibling = checkingPanel.nextSibling;\n      const lastPanel = panelManager.lastPanel()!;\n      const atLastPanel = currentIndex === lastPanel.getIndex();\n      const nextIndex = !atLastPanel && nextSibling\n        ? nextSibling.getIndex()\n        : maxLastIndex + 1;\n      const currentNearestPosition = nearestPanel.getPosition();\n      const panelRight = checkingPanel.getPosition() + checkingPanel.getSize() - (currentNearestPosition - originalNearestPosition);\n      const cameraNext = state.position + state.size;\n\n      // There're empty panels between\n      const emptyPanelExistsBetween = (nextIndex - currentIndex > 1);\n      // Expected prev panel's left position is smaller than camera position\n      const overThreshold = panelRight + gap - infiniteThreshold <= cameraNext;\n\n      if (emptyPanelExistsBetween && overThreshold) {\n        this.triggerNeedPanel({\n          axesEvent,\n          siblingPanel: checkingPanel,\n          direction: DIRECTION.NEXT,\n          indexRange: {\n            min: currentIndex + 1,\n            max: nextIndex - 1,\n            length: nextIndex - currentIndex - 1,\n          },\n        });\n      }\n\n      // Trigger needPanel in circular & at max panel index\n      if (options.circular && currentIndex === maxLastIndex && overThreshold) {\n        const firstPanel = panelManager.firstPanel();\n        const firstIndex = firstPanel\n          ? firstPanel.getIndex()\n          : -1;\n\n        if (firstIndex > 0) {\n          this.triggerNeedPanel({\n            axesEvent,\n            siblingPanel: checkingPanel,\n            direction: DIRECTION.NEXT,\n            indexRange: {\n              min: 0,\n              max: firstIndex - 1,\n              length: firstIndex,\n            },\n          });\n        }\n      }\n\n      // Check whether panels are changed\n      const lastPanelAfterNeed = panelManager.lastPanel()!;\n      const atLastPanelAfterNeed = lastPanelAfterNeed && currentIndex === lastPanelAfterNeed.getIndex();\n\n      if (atLastPanelAfterNeed || !overThreshold) {\n        break;\n      }\n\n      checkingPanel = checkingPanel.nextSibling;\n    }\n\n    // Check prev direction\n    checkingPanel = nearestPanel;\n    while (checkingPanel) {\n      const cameraPrev = state.position;\n      const checkingIndex = checkingPanel.getIndex();\n      const prevSibling = checkingPanel.prevSibling;\n      const firstPanel = panelManager.firstPanel()!;\n      const atFirstPanel = checkingIndex === firstPanel.getIndex();\n      const prevIndex = !atFirstPanel && prevSibling\n        ? prevSibling.getIndex()\n        : -1;\n      const currentNearestPosition = nearestPanel.getPosition();\n      const panelLeft = checkingPanel.getPosition() - (currentNearestPosition - originalNearestPosition);\n\n      // There're empty panels between\n      const emptyPanelExistsBetween = checkingIndex - prevIndex > 1;\n      // Expected prev panel's right position is smaller than camera position\n      const overThreshold = panelLeft - gap + infiniteThreshold >= cameraPrev;\n      if (emptyPanelExistsBetween && overThreshold) {\n        this.triggerNeedPanel({\n          axesEvent,\n          siblingPanel: checkingPanel,\n          direction: DIRECTION.PREV,\n          indexRange: {\n            min: prevIndex + 1,\n            max: checkingIndex - 1,\n            length: checkingIndex - prevIndex - 1,\n          },\n        });\n      }\n\n      // Trigger needPanel in circular & at panel 0\n      if (options.circular && checkingIndex === 0 && overThreshold) {\n        const lastPanel = panelManager.lastPanel();\n\n        if (lastPanel && lastPanel.getIndex() < maxLastIndex) {\n          const lastIndex = lastPanel.getIndex();\n\n          this.triggerNeedPanel({\n            axesEvent,\n            siblingPanel: checkingPanel,\n            direction: DIRECTION.PREV,\n            indexRange: {\n              min: lastIndex + 1,\n              max: maxLastIndex,\n              length: maxLastIndex - lastIndex,\n            },\n          });\n        }\n      }\n\n      // Check whether panels were changed\n      const firstPanelAfterNeed = panelManager.firstPanel();\n      const atFirstPanelAfterNeed = firstPanelAfterNeed && checkingIndex === firstPanelAfterNeed.getIndex();\n\n      // Looped in circular mode\n      if (atFirstPanelAfterNeed || !overThreshold) {\n        break;\n      }\n\n      checkingPanel = checkingPanel.prevSibling;\n    }\n  }\n\n  private triggerNeedPanel(params: {\n    axesEvent: any;\n    siblingPanel: Panel | null,\n    direction: FlickingEvent[\"direction\"];\n    indexRange: NeedPanelEvent[\"range\"];\n  }): void {\n    const { axesEvent, siblingPanel, direction, indexRange } = params;\n    const options = this.options;\n    const checkedIndexes = this.state.checkedIndexes;\n    const alreadyTriggered = checkedIndexes.some(([min, max]) => min === indexRange.min || max === indexRange.max);\n    const hasHandler = this.flicking.hasOn(EVENTS.NEED_PANEL);\n\n    if (alreadyTriggered || !hasHandler) {\n      return;\n    }\n\n    // Should done before triggering event, as we can directly add panels by event callback\n    checkedIndexes.push([indexRange.min, indexRange.max]);\n\n    const index = siblingPanel\n      ? siblingPanel.getIndex()\n      : 0;\n    const isTrusted = axesEvent\n      ? axesEvent.isTrusted\n      : false;\n\n    this.triggerEvent(\n      EVENTS.NEED_PANEL,\n      axesEvent,\n      isTrusted,\n      {\n        index,\n        panel: siblingPanel,\n        direction,\n        range: indexRange,\n        fill: (element: ElementLike | ElementLike[]) => {\n          const panelManager = this.panelManager;\n          if (!siblingPanel) {\n            return this.insert(panelManager.getRange().max + 1, element);\n          }\n\n          const parsedElements = parseElement(element);\n          // Slice elements to fit size equal to empty spaces\n          const elements = direction === DIRECTION.NEXT\n            ? parsedElements.slice(0, indexRange.length)\n            : parsedElements.slice(-indexRange.length);\n\n          if (direction === DIRECTION.NEXT) {\n            if (options.circular && index === panelManager.getLastIndex()) {\n              // needPanel event is triggered on last index, insert at index 0\n              return this.insert(0, elements);\n            } else {\n              return siblingPanel.insertAfter(elements);\n            }\n          } else if (direction === DIRECTION.PREV) {\n            if (options.circular && index === 0) {\n              // needPanel event is triggered on first index(0), insert at the last index\n              return this.insert(indexRange.max - elements.length + 1, elements);\n            } else {\n              return siblingPanel.insertBefore(elements);\n            }\n          } else {\n            // direction is null when there're no panels exist\n            return this.insert(0, elements);\n          }\n        },\n      } as Partial<NeedPanelEvent>,\n    );\n  }\n\n  private updateVisiblePanels() {\n    const state = this.state;\n    const options = this.options;\n    const panelManager = this.panelManager;\n    const currentState = this.stateMachine.getState();\n    const cameraElement = this.cameraElement;\n    const { renderExternal, renderOnlyVisible } = options;\n    if (!renderOnlyVisible) {\n      return;\n    }\n\n    if (!this.nearestPanel) {\n      this.visiblePanels = [];\n      while (cameraElement.firstChild) {\n        cameraElement.removeChild(cameraElement.firstChild);\n      }\n      return;\n    }\n\n    const prevVisiblePanels = this.visiblePanels;\n    const newVisiblePanels = this.calcVisiblePanels();\n\n    const { addedPanels, removedPanels } = this.checkVisiblePanelChange(prevVisiblePanels, newVisiblePanels);\n\n    if (addedPanels.length <= 0 && removedPanels.length <= 0) {\n      // Visible panels not changed\n      return;\n    }\n\n    if (currentState.holding) {\n      newVisiblePanels.push(...removedPanels);\n    } else {\n      const firstVisiblePanelPos = newVisiblePanels[0].getPosition();\n      state.positionOffset = firstVisiblePanelPos;\n    }\n\n    newVisiblePanels.forEach(panel => {\n      panel.setPositionCSS(state.positionOffset);\n    });\n\n    if (!renderExternal) {\n      if (!currentState.holding) {\n        removedPanels.forEach(panel => {\n          const panelElement = panel.getElement();\n          panelElement.parentNode && cameraElement.removeChild(panelElement);\n        });\n      }\n\n      const fragment = document.createDocumentFragment();\n      addedPanels.forEach(panel => {\n        fragment.appendChild(panel.getElement());\n      });\n\n      cameraElement.appendChild(fragment);\n    }\n\n    const firstVisiblePanel = newVisiblePanels[0];\n    const lastVisiblePanel = newVisiblePanels[newVisiblePanels.length - 1];\n    const getAbsIndex = (panel: Panel) => panel.getIndex() + (panel.getCloneIndex() + 1) * panelManager.getPanelCount();\n\n    const newVisibleRange = {\n      min: getAbsIndex(firstVisiblePanel),\n      max: getAbsIndex(lastVisiblePanel),\n    };\n    this.visiblePanels = newVisiblePanels;\n    this.flicking.trigger(EVENTS.VISIBLE_CHANGE, {\n      type: EVENTS.VISIBLE_CHANGE,\n      range: newVisibleRange,\n    });\n  }\n\n  private checkVisiblePanelChange(prevVisiblePanels: Panel[], newVisiblePanels: Panel[]) {\n    const prevRefCount = prevVisiblePanels.map(() => 0);\n    const newRefCount = newVisiblePanels.map(() => 0);\n\n    prevVisiblePanels.forEach((prevPanel, prevIndex) => {\n      newVisiblePanels.forEach((newPanel, newIndex) => {\n        if (prevPanel === newPanel) {\n          prevRefCount[prevIndex]++;\n          newRefCount[newIndex]++;\n        }\n      });\n    });\n\n    const removedPanels = prevRefCount.reduce((removed: Panel[], count, index) => {\n      return count === 0\n        ? [...removed, prevVisiblePanels[index]]\n        : removed;\n    }, []);\n    const addedPanels = newRefCount.reduce((added: Panel[], count, index) => {\n      return count === 0\n        ? [...added, newVisiblePanels[index]]\n        : added;\n    }, []);\n\n    return { removedPanels, addedPanels };\n  }\n\n  private resizePanels(panels: Panel[]): void {\n    const options = this.options;\n    const panelBboxes = this.panelBboxes;\n\n    if (options.isEqualSize === true) {\n      if (!panelBboxes.default) {\n        const defaultPanel = panels[0];\n        panelBboxes.default = defaultPanel.getBbox();\n      }\n\n      const defaultBbox = panelBboxes.default;\n\n      panels.forEach(panel => {\n        panel.resize(defaultBbox);\n      });\n      return;\n    } else if (options.isEqualSize) {\n      const equalSizeClasses = options.isEqualSize;\n\n      panels.forEach(panel => {\n        const overlappedClass = panel.getOverlappedClass(equalSizeClasses);\n        if (overlappedClass) {\n          panel.resize(panelBboxes[overlappedClass]);\n          panelBboxes[overlappedClass] = panel.getBbox();\n        } else {\n          panel.resize();\n        }\n      });\n      return;\n    }\n    panels.forEach(panel => {\n      panel.resize();\n    });\n  }\n}\n","import { isBrowser } from \"../consts\";\n\nconst tid = \"UA-70842526-24\";\nconst cid = (Math.random() * Math.pow(10, 20)) / Math.pow(10, 10);\n\nexport function sendEvent(category: string, action: string, label: any) {\n  if (!isBrowser) {\n    return;\n  }\n\n  try {\n    const innerWidth = window.innerWidth;\n    const innerHeight = window.innerHeight;\n    const screen = window.screen || { width: innerWidth, height: innerHeight };\n    const collectInfos = [\n      \"v=1\",\n      \"t=event\",\n      `dl=${location.href}`,\n      `ul=${(navigator.language || \"en-us\").toLowerCase()}`,\n      `de=${document.charset || document.inputEncoding || document.characterSet || \"utf-8\"}`,\n      `dr=${document.referrer}`,\n      `dt=${document.title}`,\n      `sr=${screen.width}x${screen.height}`,\n      `vp=${innerWidth}x${innerHeight}`,\n      `ec=${category}`,\n      `ea=${action}`,\n      `el=${JSON.stringify(label)}`,\n      `cid=${cid}`,\n      `tid=${tid}`,\n      \"cd1=#__VERSION__#\",\n      `z=${Math.floor(Math.random() * 10000000)}`,\n    ];\n    const req = new XMLHttpRequest();\n    req.open(\"GET\", `https://www.google-analytics.com/collect?${collectInfos.join(\"&\")}`);\n    req.send();\n  } catch (e) {}\n}\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport Component from \"@egjs/component\";\nimport Viewport from \"./components/Viewport\";\nimport Panel from \"./components/Panel\";\n\nimport { merge, getProgress, parseElement, isString, counter, findIndex } from \"./utils\";\nimport { DEFAULT_OPTIONS, EVENTS, DIRECTION, AXES_EVENTS, STATE_TYPE, DEFAULT_MOVE_TYPE_OPTIONS } from \"./consts\";\nimport {\n  FlickingOptions,\n  FlickingEvent,\n  Direction,\n  EventType,\n  FlickingPanel,\n  TriggerCallback,\n  FlickingContext,\n  FlickingStatus,\n  Plugin,\n  ElementLike,\n  DestroyOption,\n  BeforeSyncResult,\n  SyncResult,\n} from \"./types\";\nimport { sendEvent } from \"./ga/ga\";\nimport { DiffResult } from \"@egjs/list-differ\";\n\n/**\n * @memberof eg\n * @extends eg.Component\n * @support {\"ie\": \"10+\", \"ch\" : \"latest\", \"ff\" : \"latest\",  \"sf\" : \"latest\" , \"edge\" : \"latest\", \"ios\" : \"7+\", \"an\" : \"4.X+\"}\n * @requires {@link https://github.com/naver/egjs-component|eg.Component}\n * @requires {@link https://github.com/naver/egjs-axes|eg.Axes}\n * @see Easing Functions Cheat Sheet {@link http://easings.net/} <ko>이징 함수 Cheat Sheet {@link http://easings.net/}</ko>\n */\nclass Flicking extends Component {\n  /**\n   * Version info string\n   * @ko 버전정보 문자열\n   * @example\n   * eg.Flicking.VERSION;  // ex) 3.0.0\n   * @memberof eg.Flicking\n   */\n  public static VERSION: string = \"#__VERSION__#\";\n  /**\n   * Direction constant - \"PREV\" or \"NEXT\"\n   * @ko 방향 상수 - \"PREV\" 또는 \"NEXT\"\n   * @type {object}\n   * @property {\"PREV\"} PREV - Prev direction from current hanger position.<br/>It's `left(←️)` direction when `horizontal: true`.<br/>Or, `up(↑️)` direction when `horizontal: false`.<ko>현재 행어를 기준으로 이전 방향.<br/>`horizontal: true`일 경우 `왼쪽(←️)` 방향.<br/>`horizontal: false`일 경우 `위쪽(↑️)`방향이다.</ko>\n   * @property {\"NEXT\"} NEXT - Next direction from current hanger position.<br/>It's `right(→)` direction when `horizontal: true`.<br/>Or, `down(↓️)` direction when `horizontal: false`.<ko>현재 행어를 기준으로 다음 방향.<br/>`horizontal: true`일 경우 `오른쪽(→)` 방향.<br/>`horizontal: false`일 경우 `아래쪽(↓️)`방향이다.</ko>\n   * @example\n   * eg.Flicking.DIRECTION.PREV; // \"PREV\"\n   * eg.Flicking.DIRECTION.NEXT; // \"NEXT\"\n   */\n  public static DIRECTION: Direction = DIRECTION;\n\n  /**\n   * Event type object with event name strings.\n   * @ko 이벤트 이름 문자열들을 담은 객체\n   * @type {object}\n   * @property {\"holdStart\"} HOLD_START - holdStart event<ko>holdStart 이벤트</ko>\n   * @property {\"holdEnd\"} HOLD_END - holdEnd event<ko>holdEnd 이벤트</ko>\n   * @property {\"moveStart\"} MOVE_START - moveStart event<ko>moveStart 이벤트</ko>\n   * @property {\"move\"} MOVE - move event<ko>move 이벤트</ko>\n   * @property {\"moveEnd\"} MOVE_END - moveEnd event<ko>moveEnd 이벤트</ko>\n   * @property {\"change\"} CHANGE - change event<ko>change 이벤트</ko>\n   * @property {\"restore\"} RESTORE - restore event<ko>restore 이벤트</ko>\n   * @property {\"select\"} SELECT - select event<ko>select 이벤트</ko>\n   * @property {\"needPanel\"} NEED_PANEL - needPanel event<ko>needPanel 이벤트</ko>\n   * @example\n   * eg.Flicking.EVENTS.MOVE_START; // \"MOVE_START\"\n   */\n  public static EVENTS: EventType = EVENTS;\n\n  public options: FlickingOptions;\n\n  private wrapper: HTMLElement;\n  private viewport: Viewport;\n  private eventContext: FlickingContext;\n  private isPanelChangedAtBeforeSync: boolean = false;\n\n  /**\n   * @param element A base element for the eg.Flicking module. When specifying a value as a `string` type, you must specify a css selector string to select the element.<ko>eg.Flicking 모듈을 사용할 기준 요소. `string`타입으로 값 지정시 요소를 선택하기 위한 css 선택자 문자열을 지정해야 한다.</ko>\n   * @param options An option object of the eg.Flicking module<ko>eg.Flicking 모듈의 옵션 객체</ko>\n   * @param {string} [options.classPrefix=\"eg-flick\"] A prefix of class names will be added for the panels, viewport, and camera.<ko>패널들과 뷰포트, 카메라에 추가될 클래스 이름의 접두사.</ko>\n   * @param {number} [options.deceleration=0.0075] Deceleration value for panel movement animation for animation triggered by manual user input. A higher value means a shorter running time.<ko>사용자의 동작으로 가속도가 적용된 패널 이동 애니메이션의 감속도. 값이 높을수록 애니메이션 실행 시간이 짧아진다.</ko>\n   * @param {boolean} [options.horizontal=true] The direction of panel movement. (true: horizontal, false: vertical)<ko>패널 이동 방향. (true: 가로방향, false: 세로방향)</ko>\n   * @param {boolean} [options.circular=false] Enables circular mode, which connects first/last panel for continuous scrolling.<ko>순환 모드를 활성화한다. 순환 모드에서는 양 끝의 패널이 서로 연결되어 끊김없는 스크롤이 가능하다.</ko>\n   * @param {boolean} [options.infinite=false] Enables infinite mode, which can automatically trigger needPanel until reaching the last panel's index reaches the lastIndex.<ko>무한 모드를 활성화한다. 무한 모드에서는 needPanel 이벤트를 자동으로 트리거한다. 해당 동작은 마지막 패널의 인덱스가 lastIndex와 일치할때까지 일어난다.</ko>\n   * @param {number} [options.infiniteThreshold=0] A Threshold from viewport edge before triggering `needPanel` event in infinite mode.<ko>무한 모드에서 `needPanel`이벤트가 발생하기 위한 뷰포트 끝으로부터의 최대 거리.</ko>\n   * @param {number} [options.lastIndex=Infinity] Maximum panel index that Flicking can set. Flicking won't trigger `needPanel` when the event's panel index is greater than it.<br/>Also, if the last panel's index reached a given index, you can't add more panels.<ko>Flicking이 설정 가능한 패널의 최대 인덱스. `needPanel` 이벤트에 지정된 인덱스가 최대 패널의 개수보다 같거나 커야 하는 경우에 이벤트를 트리거하지 않게 한다.<br>또한, 마지막 패널의 인덱스가 주어진 인덱스와 동일할 경우, 새로운 패널을 더 이상 추가할 수 없다.</ko>\n   * @param {number} [options.threshold=40] Movement threshold to change panel(unit: pixel). It should be dragged above the threshold to change the current panel.<ko>패널 변경을 위한 이동 임계값 (단위: 픽셀). 주어진 값 이상으로 스크롤해야만 패널 변경이 가능하다.</ko>\n   * @param {number} [options.duration=100] Duration of the panel movement animation. (unit: ms)<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>\n   * @param {function} [options.panelEffect=x => 1 - Math.pow(1 - x, 3)] An easing function applied to the panel movement animation. Default value is `easeOutCubic`.<ko>패널 이동 애니메이션에 적용할 easing함수. 기본값은 `easeOutCubic`이다.</ko>\n   * @param {number} [options.defaultIndex=0] Index of the panel to set as default when initializing. A zero-based integer.<ko>초기화시 지정할 디폴트 패널의 인덱스로, 0부터 시작하는 정수.</ko>\n   * @param {string[]} [options.inputType=[\"touch,\"mouse\"]] Types of input devices to enable.({@link https://naver.github.io/egjs-axes/release/latest/doc/global.html#PanInputOption Reference})<ko>활성화할 입력 장치 종류. ({@link https://naver.github.io/egjs-axes/release/latest/doc/global.html#PanInputOption 참고})</ko>\n   * @param {number} [options.thresholdAngle=45] The threshold angle value(0 ~ 90).<br>If the input angle from click/touched position is above or below this value in horizontal and vertical mode each, scrolling won't happen.<ko>스크롤 동작을 막기 위한 임계각(0 ~ 90).<br>클릭/터치한 지점으로부터 계산된 사용자 입력의 각도가 horizontal/vertical 모드에서 각각 크거나 작으면, 스크롤 동작이 이루어지지 않는다.</ko>\n   * @param {number|string|number[]|string[]} [options.bounce=[10,10]] The size value of the bounce area. Only can be enabled when `circular=false`.<br>You can set different bounce value for prev/next direction by using array.<br>`number` for px value, and `string` for px, and % value relative to viewport size.(ex - 0, \"10px\", \"20%\")<ko>바운스 영역의 크기값. `circular=false`인 경우에만 사용할 수 있다.<br>배열을 통해 prev/next 방향에 대해 서로 다른 바운스 값을 지정 가능하다.<br>`number`를 통해 px값을, `stirng`을 통해 px 혹은 뷰포트 크기 대비 %값을 사용할 수 있다.(ex - 0, \"10px\", \"20%\")</ko>\n   * @param {boolean} [options.autoResize=false] Whether the `resize` method should be called automatically after a window resize event.<ko>window의 `resize` 이벤트 이후 자동으로 resize()메소드를 호출할지의 여부.</ko>\n   * @param {boolean} [options.adaptive=false] Whether the height(horizontal)/width(vertical) of the viewport element reflects the height/width value of the panel after completing the movement.<ko>목적 패널로 이동한 후 그 패널의 높이(horizontal)/너비(vertical)값을 뷰포트 요소의 높이/너비값에 반영할지 여부.</ko>\n   * @param {number|\"\"} [options.zIndex=2000] z-index value for viewport element.<ko>뷰포트 엘리먼트의 z-index 값.</ko>\n   * @param {boolean} [options.bound=false] Prevent the view from going out of the first/last panel. Only can be enabled when `circular=false`.<ko>뷰가 첫번째와 마지막 패널 밖으로 나가는 것을 막아준다. `circular=false`인 경우에만 사용할 수 있다.</ko>\n   * @param {boolean} [options.overflow=false] Disables CSS property `overflow: hidden` in viewport if `true`.<ko>`true`로 설정시 뷰포트에 `overflow: hidden` 속성을 해제한다.</ko>\n   * @param {string} [options.hanger=\"50%\"] The reference position of the hanger in the viewport, which hangs panel anchors should be stopped at.<br>It should be provided in px or % value of viewport size.<br>You can combinate those values with plus/minus sign.<br>ex) \"50\", \"100px\", \"0%\", \"25% + 100px\"<ko>뷰포트 내부의 행어의 위치. 패널의 앵커들이 뷰포트 내에서 멈추는 지점에 해당한다.<br>px값이나, 뷰포트의 크기 대비 %값을 사용할 수 있고, 이를 + 혹은 - 기호로 연계하여 사용할 수도 있다.<br>예) \"50\", \"100px\", \"0%\", \"25% + 100px\"</ko>\n   * @param {string} [options.anchor=\"50%\"] The reference position of the anchor in panels, which can be hanged by viewport hanger.<br>It should be provided in px or % value of panel size.<br>You can combinate those values with plus/minus sign.<br>ex) \"50\", \"100px\", \"0%\", \"25% + 100px\"<ko>패널 내부의 앵커의 위치. 뷰포트의 행어와 연계하여 패널이 화면 내에서 멈추는 지점을 설정할 수 있다.<br>px값이나, 패널의 크기 대비 %값을 사용할 수 있고, 이를 + 혹은 - 기호로 연계하여 사용할 수도 있다.<br>예) \"50\", \"100px\", \"0%\", \"25% + 100px\"</ko>\n   * @param {number} [options.gap=0] Space value between panels. Should be given in number.(px)<ko>패널간에 부여할 간격의 크기를 나타내는 숫자.(px)</ko>\n   * @param {eg.Flicking.MoveTypeOption} [options.moveType=\"snap\"] Movement style by user input. (ex: snap, freeScroll)<ko>사용자 입력에 의한 이동 방식.(ex: snap, freeScroll)</ko>\n   * @param {boolean} [options.useOffset=false] Whether to use `offsetWidth`/`offsetHeight` instead of `getBoundingClientRect` for panel/viewport size calculation.<br/>You can use this option to calculate the original panel size when CSS transform is applied to viewport or panel.<br/>⚠️ If panel size is not fixed integer value, there can be a 1px gap between panels.<ko>패널과 뷰포트의 크기를 계산할 때 `offsetWidth`/`offsetHeight`를 `getBoundingClientRect` 대신 사용할지 여부.<br/>패널이나 뷰포트에 CSS transform이 설정되어 있을 때 원래 패널 크기를 계산하려면 옵션을 활성화한다.<br/>⚠️ 패널의 크기가 정수로 고정되어있지 않다면 패널 사이에 1px의 공간이 생길 수 있다.</ko>\n   * @param {boolean} [options.renderOnlyVisible] Whether to render visible panels only. This can dramatically increase performance when there're many panels.<ko>보이는 패널만 렌더링할지 여부를 설정한다. 패널이 많을 경우에 퍼포먼스를 크게 향상시킬 수 있다.</ko>\n   * @param {boolean|string[]} [options.isEqualSize] This option indicates whether all panels have the same size(true) of first panel, or it can hold a list of class names that determines panel size.<br/>Enabling this option can increase performance while recalculating panel size.<ko>모든 패널의 크기가 동일한지(true), 혹은 패널 크기를 결정하는 패널 클래스들의 리스트.<br/>이 옵션을 설정하면 패널 크기 재설정시에 성능을 높일 수 있다.</ko>\n   * @param {boolean} [options.isConstantSize] Whether all panels have a constant size that won't be changed after resize. Enabling this option can increase performance while recalculating panel size.<ko>모든 패널의 크기가 불변인지의 여부. 이 옵션을 'true'로 설정하면 패널 크기 재설정시에 성능을 높일 수 있다.</ko>\n   * @param {boolean} [options.renderExternal] Whether to use external rendering. It will delegate DOM manipulation and can synchronize the rendered state by calling `sync()` method. You can use this option to use in frameworks like React, Vue, Angular, which has its states and rendering methods.<ko>외부 렌더링을 사용할 지의 여부. 이 옵션을 사용시 렌더링을 외부에 위임할 수 있고, `sync()`를 호출하여 그 상태를 동기화할 수 있다. 이 옵션을 사용하여, React, Vue, Angular 등 자체적인 상태와 렌더링 방법을 갖는 프레임워크에 대응할 수 있다.</ko>\n   * @param {boolean} [options.collectStatistics=true] Whether to collect statistics on how you are using `Flicking`. These statistical data do not contain any personal information and are used only as a basis for the development of a user-friendly product.<ko>어떻게 `Flicking`을 사용하고 있는지에 대한 통계 수집 여부를 나타낸다. 이 통계자료는 개인정보를 포함하고 있지 않으며 오직 사용자 친화적인 제품으로 발전시키기 위한 근거자료로서 활용한다.</ko>\n   */\n  constructor(\n    element: string | HTMLElement,\n    options: Partial<FlickingOptions> = {},\n  ) {\n    super();\n\n    // Set flicking wrapper user provided\n    let wrapper: HTMLElement | null;\n    if (isString(element)) {\n      wrapper = document.querySelector(element);\n      if (!wrapper) {\n        throw new Error(\"Base element doesn't exist.\");\n      }\n    } else if (element.nodeName && element.nodeType === 1) {\n      wrapper = element;\n    } else {\n      throw new Error(\"Element should be provided in string or HTMLElement.\");\n    }\n\n    this.wrapper = wrapper;\n    // Override default options\n    this.options = merge({}, DEFAULT_OPTIONS, options) as FlickingOptions;\n    // Override moveType option\n    const currentOptions = this.options;\n    const moveType = currentOptions.moveType;\n\n    if (moveType in DEFAULT_MOVE_TYPE_OPTIONS) {\n      currentOptions.moveType = DEFAULT_MOVE_TYPE_OPTIONS[moveType as keyof typeof DEFAULT_MOVE_TYPE_OPTIONS];\n    }\n\n    // Make viewport instance with panel container element\n    this.viewport = new Viewport(this, this.options, this.triggerEvent);\n    this.listenInput();\n    this.listenResize();\n\n    if (this.options.collectStatistics) {\n      sendEvent(\n        \"usage\",\n        \"options\",\n        options,\n      );\n    }\n  }\n\n  /**\n   * Move to the previous panel if it exists.\n   * @ko 이전 패널이 존재시 해당 패널로 이동한다.\n   * @param [duration=options.duration] Duration of the panel movement animation.(unit: ms)<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public prev(duration?: number): this {\n    const currentPanel = this.getCurrentPanel();\n    const currentState = this.viewport.stateMachine.getState();\n\n    if (currentPanel && currentState.type === STATE_TYPE.IDLE) {\n      const prevPanel = currentPanel.prev();\n      if (prevPanel) {\n        prevPanel.focus(duration);\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Move to the next panel if it exists.\n   * @ko 다음 패널이 존재시 해당 패널로 이동한다.\n   * @param [duration=options.duration] Duration of the panel movement animation(unit: ms).<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public next(duration?: number): this {\n    const currentPanel = this.getCurrentPanel();\n    const currentState = this.viewport.stateMachine.getState();\n\n    if (currentPanel && currentState.type === STATE_TYPE.IDLE) {\n      const nextPanel = currentPanel.next();\n      if (nextPanel) {\n        nextPanel.focus(duration);\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Move to the panel of given index.\n   * @ko 주어진 인덱스에 해당하는 패널로 이동한다.\n   * @param index The index number of the panel to move.<ko>이동할 패널의 인덱스 번호.</ko>\n   * @param duration [duration=options.duration] Duration of the panel movement.(unit: ms)<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public moveTo(index: number, duration?: number): this {\n    const viewport = this.viewport;\n    const panel = viewport.panelManager.get(index);\n    const state = viewport.stateMachine.getState();\n\n    if (!panel || state.type !== STATE_TYPE.IDLE) {\n      return this;\n    }\n\n    const anchorPosition = panel.getAnchorPosition();\n    const hangerPosition = viewport.getHangerPosition();\n\n    let targetPanel = panel;\n    if (this.options.circular) {\n      const scrollAreaSize = viewport.getScrollAreaSize();\n      // Check all three possible locations, find the nearest position among them.\n      const possiblePositions = [\n        anchorPosition - scrollAreaSize,\n        anchorPosition,\n        anchorPosition + scrollAreaSize,\n      ];\n      const nearestPosition = possiblePositions.reduce((nearest, current) => {\n        return (Math.abs(current - hangerPosition) < Math.abs(nearest - hangerPosition))\n          ? current\n          : nearest;\n      }, Infinity) - panel.getRelativeAnchorPosition();\n\n      const identicals = panel.getIdenticalPanels();\n      const offset = nearestPosition - anchorPosition;\n      if (offset > 0) {\n        // First cloned panel is nearest\n        targetPanel = identicals[1];\n      } else if (offset < 0) {\n        // Last cloned panel is nearest\n        targetPanel = identicals[identicals.length - 1];\n      }\n\n      targetPanel = targetPanel.clone(targetPanel.getCloneIndex(), true);\n      targetPanel.setPosition(nearestPosition);\n    }\n    const currentIndex = this.getIndex();\n\n    if (hangerPosition === targetPanel.getAnchorPosition() && currentIndex === index) {\n      return this;\n    }\n\n    const eventType = panel.getIndex() === viewport.getCurrentIndex()\n      ? \"\"\n      : EVENTS.CHANGE;\n\n    viewport.moveTo(\n      targetPanel,\n      viewport.findEstimatedPosition(targetPanel),\n      eventType,\n      null,\n      duration,\n    );\n    return this;\n  }\n\n  /**\n   * Return index of the current panel. `-1` if no panel exists.\n   * @ko 현재 패널의 인덱스 번호를 반환한다. 패널이 하나도 없을 경우 `-1`을 반환한다.\n   * @return Current panel's index, zero-based integer.<ko>현재 패널의 인덱스 번호. 0부터 시작하는 정수.</ko>\n   */\n  public getIndex(): number {\n    return this.viewport.getCurrentIndex();\n  }\n\n  /**\n   * Return the wrapper element user provided in constructor.\n   * @ko 사용자가 생성자에서 제공한 래퍼 엘리먼트를 반환한다.\n   * @return Wrapper element user provided.<ko>사용자가 제공한 래퍼 엘리먼트.</ko>\n   */\n  public getElement(): HTMLElement {\n    return this.wrapper;\n  }\n\n  /**\n   * Return current panel. `null` if no panel exists.\n   * @ko 현재 패널을 반환한다. 패널이 하나도 없을 경우 `null`을 반환한다.\n   * @return Current panel.<ko>현재 패널.</ko>\n   */\n  public getCurrentPanel(): FlickingPanel | null {\n    const viewport = this.viewport;\n    const panel = viewport.getCurrentPanel();\n    return panel\n      ? panel\n      : null;\n  }\n\n  /**\n   * Return the panel of given index. `null` if it doesn't exists.\n   * @ko 주어진 인덱스에 해당하는 패널을 반환한다. 해당 패널이 존재하지 않을 시 `null`이다.\n   * @return Panel of given index.<ko>주어진 인덱스에 해당하는 패널.</ko>\n   */\n  public getPanel(index: number): FlickingPanel | null {\n    const viewport = this.viewport;\n    const panel = viewport.panelManager.get(index);\n    return panel\n      ? panel\n      : null;\n  }\n\n  /**\n   * Return all panels.\n   * @ko 모든 패널들을 반환한다.\n   * @param - Should include cloned panels or not.<ko>복사된 패널들을 포함할지의 여부.</ko>\n   * @return All panels.<ko>모든 패널들.</ko>\n   */\n  public getAllPanels(includeClone?: boolean): FlickingPanel[] {\n    const viewport = this.viewport;\n    const panelManager = viewport.panelManager;\n    const panels = includeClone\n      ? panelManager.allPanels()\n      : panelManager.originalPanels();\n\n    return panels\n      .filter(panel => !!panel);\n  }\n\n  /**\n   * Return the panels currently shown in viewport area.\n   * @ko 현재 뷰포트 영역에서 보여지고 있는 패널들을 반환한다.\n   * @return Panels currently shown in viewport area.<ko>현재 뷰포트 영역에 보여지는 패널들</ko>\n   */\n  public getVisiblePanels(): FlickingPanel[] {\n    return this.viewport.calcVisiblePanels();\n  }\n\n  /**\n   * Return length of original panels.\n   * @ko 원본 패널의 개수를 반환한다.\n   * @return Length of original panels.<ko>원본 패널의 개수</ko>\n   */\n  public getPanelCount(): number {\n    return this.viewport.panelManager.getPanelCount();\n  }\n\n  /**\n   * Return how many groups of clones are created.\n   * @ko 몇 개의 클론 그룹이 생성되었는지를 반환한다.\n   * @return Length of cloned panel groups.<ko>클론된 패널 그룹의 개수</ko>\n   */\n  public getCloneCount(): number {\n    return this.viewport.panelManager.getCloneCount();\n  }\n\n  /**\n   * Get maximum panel index for `infinite` mode.\n   * @ko `infinite` 모드에서 적용되는 추가 가능한 패널의 최대 인덱스 값을 반환한다.\n   * @see {@link eg.Flicking.FlickingOptions}\n   * @return Maximum index of panel that can be added.<ko>최대 추가 가능한 패널의 인덱스.</ko>\n   */\n  public getLastIndex(): number {\n    return this.viewport.panelManager.getLastIndex();\n  }\n\n  /**\n   * Set maximum panel index for `infinite' mode.<br>[needPanel]{@link eg.Flicking#events:needPanel} won't be triggered anymore when last panel's index reaches it.<br>Also, you can't add more panels after it.\n   * @ko `infinite` 모드에서 적용되는 패널의 최대 인덱스를 설정한다.<br>마지막 패널의 인덱스가 설정한 값에 도달할 경우 더 이상 [needPanel]{@link eg.Flicking#events:needPanel} 이벤트가 발생되지 않는다.<br>또한, 설정한 인덱스 이후로 새로운 패널을 추가할 수 없다.\n   * @param - Maximum panel index.\n   * @see {@link eg.Flicking.FlickingOptions}\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public setLastIndex(index: number): this {\n    this.viewport.setLastIndex(index);\n\n    return this;\n  }\n\n  /**\n   * Return panel movement animation.\n   * @ko 현재 패널 이동 애니메이션이 진행 중인지를 반환한다.\n   * @return Is animating or not.<ko>애니메이션 진행 여부.</ko>\n   */\n  public isPlaying(): boolean {\n    return this.viewport.stateMachine.getState().playing;\n  }\n\n  /**\n   * Unblock input devices.\n   * @ko 막았던 입력 장치로부터의 입력을 푼다.\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public enableInput(): this {\n    this.viewport.enable();\n\n    return this;\n  }\n\n  /**\n   * Block input devices.\n   * @ko 입력 장치로부터의 입력을 막는다.\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public disableInput(): this {\n    this.viewport.disable();\n\n    return this;\n  }\n\n  /**\n   * Get current flicking status. You can restore current state by giving returned value to [setStatus()]{@link eg.Flicking#setStatus}.\n   * @ko 현재 상태 값을 반환한다. 반환받은 값을 [setStatus()]{@link eg.Flicking#setStatus} 메소드의 인자로 지정하면 현재 상태를 복원할 수 있다.\n   * @return An object with current status value information.<ko>현재 상태값 정보를 가진 객체.</ko>\n   */\n  public getStatus(): FlickingStatus {\n    const viewport = this.viewport;\n\n    const panels = viewport.panelManager.originalPanels()\n      .filter(panel => !!panel)\n      .map(panel => {\n        return {\n          html: panel.getElement().outerHTML,\n          index: panel.getIndex(),\n        };\n      });\n\n    return {\n      index: viewport.getCurrentIndex(),\n      panels,\n      position: viewport.getCameraPosition(),\n    };\n  }\n\n  /**\n   * Restore to the state of the `status`.\n   * @ko `status`의 상태로 복원한다.\n   * @param status Status value to be restored. You can specify the return value of the [getStatus()]{@link eg.Flicking#getStatus} method.<ko>복원할 상태 값. [getStatus()]{@link eg.Flicking#getStatus}메서드의 반환값을 지정하면 된다.</ko>\n   */\n  public setStatus(status: FlickingStatus): void {\n    this.viewport.restore(status);\n  }\n\n  /**\n   * Add plugins that can have different effects on Flicking.\n   * @ko 플리킹에 다양한 효과를 부여할 수 있는 플러그인을 추가한다.\n   * @param - The plugin(s) to add.<ko>추가할 플러그인(들).</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public addPlugins(plugins: Plugin | Plugin[]) {\n    this.viewport.addPlugins(plugins);\n    return this;\n  }\n\n  /**\n   * Remove plugins from Flicking.\n   * @ko 플리킹으로부터 플러그인들을 제거한다.\n   * @param - The plugin(s) to remove.<ko>제거 플러그인(들).</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public removePlugins(plugins: Plugin | Plugin[]) {\n    this.viewport.removePlugins(plugins);\n    return this;\n  }\n\n  /**\n   * Return the reference element and all its children to the state they were in before the instance was created. Remove all attached event handlers. Specify `null` for all attributes of the instance (including inherited attributes).\n   * @ko 기준 요소와 그 하위 패널들을 인스턴스 생성전의 상태로 되돌린다. 부착된 모든 이벤트 핸들러를 탈거한다. 인스턴스의 모든 속성(상속받은 속성포함)에 `null`을 지정한다.\n   * @example\n   * const flick = new eg.Flicking(\"#flick\");\n   * flick.destroy();\n   * console.log(flick.moveTo); // null\n   */\n  public destroy(option: Partial<DestroyOption> = {}): void {\n    this.off();\n\n    if (this.options.autoResize) {\n      window.removeEventListener(\"resize\", this.resize);\n    }\n\n    this.viewport.destroy(option);\n\n    // release resources\n    for (const x in this) {\n      (this as any)[x] = null;\n    }\n  }\n\n  /**\n   * Update panels to current state.\n   * @ko 패널들을 현재 상태에 맞춰 갱신한다.\n   * @method\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public resize = (): this => {\n    const viewport = this.viewport;\n    const options = this.options;\n    const wrapper = this.getElement();\n\n    const allPanels = viewport.panelManager.allPanels();\n    if (!options.isConstantSize) {\n      allPanels.forEach(panel => panel.unCacheBbox());\n    }\n\n    const shouldResetElements = options.renderOnlyVisible\n      && !options.isConstantSize\n      && options.isEqualSize !== true;\n\n    // Temporarily set parent's height to prevent scroll (#333)\n    const parent = wrapper.parentElement!;\n    const origStyle = parent.style.height;\n    parent.style.height = `${parent.offsetHeight}px`;\n\n    viewport.unCacheBbox();\n    // This should be done before adding panels, to lower performance issue\n    viewport.updateBbox();\n\n    if (shouldResetElements) {\n      viewport.appendUncachedPanelElements(allPanels as Panel[]);\n    }\n\n    viewport.resize();\n    parent.style.height = origStyle;\n\n    return this;\n  }\n\n  /**\n   * Add new panels at the beginning of panels.\n   * @ko 제일 앞에 새로운 패널을 추가한다.\n   * @param element - Either HTMLElement, HTML string, or array of them.<br>It can be also HTML string of multiple elements with same depth.<ko>HTMLElement 혹은 HTML 문자열, 혹은 그것들의 배열도 가능하다.<br>또한, 같은 depth의 여러 개의 엘리먼트에 해당하는 HTML 문자열도 가능하다.</ko>\n   * @return Array of appended panels.<ko>추가된 패널들의 배열</ko>\n   * @example\n   * // Suppose there were no panels at initialization\n   * const flicking = new eg.Flicking(\"#flick\");\n   * flicking.replace(3, document.createElement(\"div\")); // Add new panel at index 3\n   * flicking.prepend(\"\\<div\\>Panel\\</div\\>\"); // Prepended at index 2\n   * flicking.prepend([\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]); // Prepended at index 0, 1\n   * flicking.prepend(\"\\<div\\>Panel\\</div\\>\"); // Prepended at index 0, pushing every panels behind it.\n   */\n  public prepend(element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const viewport = this.viewport;\n    const parsedElements = parseElement(element);\n\n    const insertingIndex = Math.max(viewport.panelManager.getRange().min - parsedElements.length, 0);\n    return viewport.insert(insertingIndex, parsedElements);\n  }\n\n  /**\n   * Add new panels at the end of panels.\n   * @ko 제일 끝에 새로운 패널을 추가한다.\n   * @param element - Either HTMLElement, HTML string, or array of them.<br>It can be also HTML string of multiple elements with same depth.<ko>HTMLElement 혹은 HTML 문자열, 혹은 그것들의 배열도 가능하다.<br>또한, 같은 depth의 여러 개의 엘리먼트에 해당하는 HTML 문자열도 가능하다.</ko>\n   * @return Array of appended panels.<ko>추가된 패널들의 배열</ko>\n   * @example\n   * // Suppose there were no panels at initialization\n   * const flicking = new eg.Flicking(\"#flick\");\n   * flicking.append(document.createElement(\"div\")); // Appended at index 0\n   * flicking.append(\"\\<div\\>Panel\\</div\\>\"); // Appended at index 1\n   * flicking.append([\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]); // Appended at index 2, 3\n   * // Even this is possible\n   * flicking.append(\"\\<div\\>Panel 1\\</div\\>\\<div\\>Panel 2\\</div\\>\"); // Appended at index 4, 5\n   */\n  public append(element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const viewport = this.viewport;\n\n    return viewport.insert(viewport.panelManager.getRange().max + 1, element);\n  }\n\n  /**\n   * Replace existing panels with new panels from given index. If target index is empty, add new panel at target index.\n   * @ko 주어진 인덱스로부터의 패널들을 새로운 패널들로 교체한다. 인덱스에 해당하는 자리가 비어있다면, 새로운 패널을 해당 자리에 집어넣는다.\n   * @param index - Start index to replace new panels.<ko>새로운 패널들로 교체할 시작 인덱스</ko>\n   * @param element - Either HTMLElement, HTML string, or array of them.<br>It can be also HTML string of multiple elements with same depth.<ko>HTMLElement 혹은 HTML 문자열, 혹은 그것들의 배열도 가능하다.<br>또한, 같은 depth의 여러 개의 엘리먼트에 해당하는 HTML 문자열도 가능하다.</ko>\n   * @return Array of created panels by replace.<ko>교체되어 새롭게 추가된 패널들의 배열</ko>\n   * @example\n   * // Suppose there were no panels at initialization\n   * const flicking = new eg.Flicking(\"#flick\");\n   *\n   * // This will add new panel at index 3,\n   * // Index 0, 1, 2 is empty at this moment.\n   * // [empty, empty, empty, PANEL]\n   * flicking.replace(3, document.createElement(\"div\"));\n   *\n   * // As index 2 was empty, this will also add new panel at index 2.\n   * // [empty, empty, PANEL, PANEL]\n   * flicking.replace(2, \"\\<div\\>Panel\\</div\\>\");\n   *\n   * // Index 3 was not empty, so it will replace previous one.\n   * // It will also add new panels at index 4 and 5.\n   * // before - [empty, empty, PANEL, PANEL]\n   * // after - [empty, empty, PANEL, NEW_PANEL, NEW_PANEL, NEW_PANEL]\n   * flicking.replace(3, [\"\\<div\\>Panel\\</div\\>\", \"\\<div\\>Panel\\</div\\>\", \"\\<div\\>Panel\\</div\\>\"])\n   */\n  public replace(index: number, element: ElementLike | ElementLike[]): FlickingPanel[] {\n    return this.viewport.replace(index, element);\n  }\n\n  /**\n   * Remove panel at target index. This will decrease index of panels behind it.\n   * @ko `index`에 해당하는 자리의 패널을 제거한다. 수행시 `index` 이후의 패널들의 인덱스가 감소된다.\n   * @param index - Index of panel to remove.<ko>제거할 패널의 인덱스</ko>\n   * @param {number} [deleteCount=1] - Number of panels to remove from index.<ko>`index` 이후로 제거할 패널의 개수.</ko>\n   * @return Array of removed panels<ko>제거된 패널들의 배열</ko>\n   */\n  public remove(index: number, deleteCount: number = 1): FlickingPanel[] {\n    return this.viewport.remove(index, deleteCount);\n  }\n\n  /**\n   * Get indexes to render. Should be used with `renderOnlyVisible` option.\n   * @private\n   * @ko 렌더링이 필요한 인덱스들을 반환한다. `renderOnlyVisible` 옵션과 함께 사용해야 한다.\n   * @param - Info object of how panel infos are changed.<ko>패널 정보들의 변경 정보를 담는 오브젝트.</ko>\n   * @return Array of indexes to render.<ko>렌더링할 인덱스의 배열</ko>\n   */\n  public getRenderingIndexes(diffResult: DiffResult<any>): number[] {\n    const viewport = this.viewport;\n    const visiblePanels = viewport.getVisiblePanels();\n    const maintained = diffResult.maintained.reduce((values: {[key: number]: number}, [before, after]) => {\n      values[before] = after;\n      return values;\n    }, {});\n\n    const prevPanelCount = diffResult.prevList.length;\n    const panelCount = diffResult.list.length;\n    const added = diffResult.added;\n    const getPanelAbsIndex = (panel: Panel) => {\n      return panel.getIndex() + (panel.getCloneIndex() + 1) * prevPanelCount;\n    };\n\n    let visibleIndexes = visiblePanels.map(panel => getPanelAbsIndex(panel));\n    visibleIndexes = visibleIndexes\n      .filter(val => maintained[val % prevPanelCount] != null)\n      .map(val => {\n        const cloneIndex = Math.floor(val / prevPanelCount);\n        const changedIndex = maintained[val % prevPanelCount];\n\n        return changedIndex + panelCount * cloneIndex;\n      });\n\n    const renderingPanels = [...visibleIndexes, ...added];\n    const allPanels = viewport.panelManager.allPanels();\n\n    viewport.setVisiblePanels(renderingPanels.map(index => allPanels[index]));\n\n    return renderingPanels;\n  }\n\n  /**\n   * Synchronize info of panels instance with info given by external rendering.\n   * @ko 외부 렌더링 방식에 의해 입력받은 패널의 정보와 현재 플리킹이 갖는 패널 정보를 동기화한다.\n   * @private\n   * @param - Info object of how panel infos are changed.<ko>패널 정보들의 변경 정보를 담는 오브젝트.</ko>\n   * @param - Whether called from sync method <ko> sync 메소드로부터 호출됐는지 여부 </ko>\n   */\n  public beforeSync(diffInfo: BeforeSyncResult) {\n    const { maintained, added, changed, removed } = diffInfo;\n    const viewport = this.viewport;\n    const panelManager = viewport.panelManager;\n    const isCircular = this.options.circular;\n    const cloneCount = panelManager.getCloneCount();\n    const prevClonedPanels = panelManager.clonedPanels();\n\n    // Update visible panels\n    const newVisiblePanels = viewport.getVisiblePanels()\n      .filter(panel => findIndex(removed, index => {\n        return index === panel.getIndex();\n      }) < 0);\n    viewport.setVisiblePanels(newVisiblePanels);\n\n    // Did not changed at all\n    if (\n      added.length <= 0\n      && removed.length <= 0\n      && changed.length <= 0\n      && cloneCount === prevClonedPanels.length\n    ) {\n      return this;\n    }\n    const prevOriginalPanels = panelManager.originalPanels();\n    const newPanels: Panel[] = [];\n    const newClones: Panel[][] = counter(cloneCount).map(() => []);\n\n    maintained.forEach(([beforeIdx, afterIdx]) => {\n      newPanels[afterIdx] = prevOriginalPanels[beforeIdx];\n      newPanels[afterIdx].setIndex(afterIdx);\n    });\n\n    added.forEach(addIndex => {\n      newPanels[addIndex] = new Panel(null, addIndex, this.viewport);\n    });\n\n    if (isCircular) {\n      counter(cloneCount).forEach(groupIndex => {\n        const prevCloneGroup = prevClonedPanels[groupIndex];\n        const newCloneGroup = newClones[groupIndex];\n\n        maintained.forEach(([beforeIdx, afterIdx]) => {\n          newCloneGroup[afterIdx] = prevCloneGroup\n            ? prevCloneGroup[beforeIdx]\n            : newPanels[afterIdx].clone(groupIndex, false);\n\n          newCloneGroup[afterIdx].setIndex(afterIdx);\n        });\n\n        added.forEach(addIndex => {\n          const newPanel = newPanels[addIndex];\n\n          newCloneGroup[addIndex] = newPanel.clone(groupIndex, false);\n        });\n      });\n    }\n\n    added.forEach(index => { viewport.updateCheckedIndexes({ min: index, max: index }); });\n    removed.forEach(index => { viewport.updateCheckedIndexes({ min: index - 1, max: index + 1 }); });\n\n    const checkedIndexes = viewport.getCheckedIndexes();\n    checkedIndexes.forEach(([min, max], idx) => {\n      // Push checked indexes backward\n      const pushedIndex = added.filter(index => index < min && panelManager.has(index)).length\n        - removed.filter(index => index < min).length;\n      checkedIndexes.splice(idx, 1, [min + pushedIndex, max + pushedIndex]);\n    });\n\n    // Only effective only when there are least one panel which have changed its index\n    if (changed.length > 0) {\n      // Removed checked index by changed ones after pushing\n      maintained.forEach(([, next]) => { viewport.updateCheckedIndexes({ min: next, max: next }); });\n    }\n    panelManager.replacePanels(newPanels, newClones);\n    this.isPanelChangedAtBeforeSync = true;\n  }\n\n  /**\n   * Synchronize info of panels with DOM info given by external rendering.\n   * @ko 외부 렌더링 방식에 의해 입력받은 DOM의 정보와 현재 플리킹이 갖는 패널 정보를 동기화 한다.\n   * @private\n   * @param - Info object of how panel elements are changed.<ko>패널의 DOM 요소들의 변경 정보를 담는 오브젝트.</ko>\n   */\n  public sync(diffInfo: SyncResult): this {\n    const { list, maintained, added, changed, removed } = diffInfo;\n\n    // Did not changed at all\n    if (added.length <= 0 && removed.length <= 0 && changed.length <= 0) {\n      return this;\n    }\n    const viewport = this.viewport;\n    const { renderOnlyVisible, circular } = this.options;\n    const panelManager = viewport.panelManager;\n\n    if (!renderOnlyVisible) {\n      const indexRange = panelManager.getRange();\n      let beforeDiffInfo: BeforeSyncResult = diffInfo;\n\n      if (circular) {\n        const prevOriginalPanelCount = indexRange.max;\n        const originalPanelCount = (list.length / (panelManager.getCloneCount() + 1)) >> 0;\n        const originalAdded = added.filter(index => index < originalPanelCount);\n        const originalRemoved = removed.filter(index => index <= prevOriginalPanelCount);\n        const originalMaintained = maintained.filter(([beforeIdx]) => beforeIdx <= prevOriginalPanelCount);\n        const originalChanged = changed.filter(([beforeIdx]) => beforeIdx <= prevOriginalPanelCount);\n\n        beforeDiffInfo = {\n          added: originalAdded,\n          maintained: originalMaintained,\n          removed: originalRemoved,\n          changed: originalChanged,\n        };\n      }\n      this.beforeSync(beforeDiffInfo);\n    }\n\n    const visiblePanels = renderOnlyVisible\n      ? viewport.getVisiblePanels()\n      : this.getAllPanels(true);\n\n    added.forEach(addedIndex => {\n      const addedElement = list[addedIndex];\n      const beforePanel = visiblePanels[addedIndex] as Panel;\n\n      beforePanel.setElement(addedElement);\n      // As it can be 0\n      beforePanel.unCacheBbox();\n    });\n    if (this.isPanelChangedAtBeforeSync) {\n      // Reset visible panels\n      viewport.setVisiblePanels([]);\n      this.isPanelChangedAtBeforeSync = false;\n    }\n    viewport.resize();\n\n    return this;\n  }\n\n  private listenInput(): void {\n    const flicking = this;\n    const viewport = flicking.viewport;\n    const stateMachine = viewport.stateMachine;\n\n    // Set event context\n    flicking.eventContext = {\n      flicking,\n      viewport: flicking.viewport,\n      transitTo: stateMachine.transitTo,\n      triggerEvent: flicking.triggerEvent,\n      moveCamera: flicking.moveCamera,\n      stopCamera: viewport.stopCamera,\n    };\n\n    const handlers = {};\n    for (const key in AXES_EVENTS) {\n      const eventType = AXES_EVENTS[key];\n\n      handlers[eventType] = (e: any) => stateMachine.fire(eventType, e, flicking.eventContext);\n    }\n\n    // Connect Axes instance with PanInput\n    flicking.viewport.connectAxesHandler(handlers);\n  }\n\n  private listenResize(): void {\n    if (this.options.autoResize) {\n      window.addEventListener(\"resize\", this.resize);\n    }\n  }\n\n  private triggerEvent = <T extends FlickingEvent>(\n    eventName: string,\n    axesEvent: any,\n    isTrusted: boolean,\n    params: Partial<T> = {},\n  ): TriggerCallback => {\n    const viewport = this.viewport;\n\n    let canceled: boolean = true;\n\n    // Ignore events before viewport is initialized\n    if (viewport) {\n      const state = viewport.stateMachine.getState();\n      const { prev, next } = viewport.getScrollArea();\n      const pos = viewport.getCameraPosition();\n      let progress = getProgress(pos, [prev, prev, next]);\n\n      if (this.options.circular) {\n        progress %= 1;\n      }\n      canceled = !super.trigger(eventName, merge({\n        type: eventName,\n        index: this.getIndex(),\n        panel: this.getCurrentPanel(),\n        direction: state.direction,\n        holding: state.holding,\n        progress,\n        axesEvent,\n        isTrusted,\n      }, params));\n    }\n\n    return {\n      onSuccess(callback: () => void): TriggerCallback {\n        if (!canceled) {\n          callback();\n        }\n        return this;\n      },\n      onStopped(callback: () => void): TriggerCallback {\n        if (canceled) {\n          callback();\n        }\n        return this;\n      },\n    } as TriggerCallback;\n  }\n\n  // Return result of \"move\" event triggered\n  private moveCamera = (axesEvent: any): TriggerCallback => {\n    const viewport = this.viewport;\n    const state = viewport.stateMachine.getState();\n    const options = this.options;\n\n    const pos = axesEvent.pos.flick;\n    const previousPosition = viewport.getCameraPosition();\n\n    if (axesEvent.isTrusted && state.holding) {\n      const inputOffset = options.horizontal\n        ? axesEvent.inputEvent.offsetX\n        : axesEvent.inputEvent.offsetY;\n\n      const isNextDirection = inputOffset < 0;\n\n      let cameraChange = pos - previousPosition;\n      const looped = isNextDirection === (pos < previousPosition);\n      if (options.circular && looped) {\n        // Reached at max/min range of axes\n        const scrollAreaSize = viewport.getScrollAreaSize();\n        cameraChange = (cameraChange > 0 ? -1 : 1) * (scrollAreaSize - Math.abs(cameraChange));\n      }\n\n      const currentDirection = cameraChange === 0\n        ? state.direction\n        : cameraChange > 0\n          ? DIRECTION.NEXT\n          : DIRECTION.PREV;\n\n      state.direction = currentDirection;\n    }\n    state.delta += axesEvent.delta.flick;\n\n    viewport.moveCamera(pos, axesEvent);\n    return this.triggerEvent(EVENTS.MOVE, axesEvent, axesEvent.isTrusted)\n      .onStopped(() => {\n        // Undo camera movement\n        viewport.moveCamera(previousPosition, axesEvent);\n      });\n  }\n}\n\nexport default Flicking;\n","import Flicking from \"./Flicking\";\nimport { withFlickingMethods } from \"./utils\";\nimport { DEFAULT_OPTIONS, MOVE_TYPE } from \"./consts\";\n\n(Flicking as any).withFlickingMethods = withFlickingMethods;\n(Flicking as any).DEFAULT_OPTIONS = DEFAULT_OPTIONS;\n(Flicking as any).MOVE_TYPE = MOVE_TYPE;\nexport default Flicking;\n"],"names":["isUndefined","value","Component","_eventHandler","options","_proto","prototype","trigger","eventName","customEvent","handlerList","this","length","concat","eventType","isCanceled","arg","i","stop","currentTarget","_len","arguments","restParam","Array","_key","apply","once","handlerToAttach","eventHash","self","on","listener","_len2","_key2","off","hasOn","name","push","handlerToDetach","undefined","k","handlerFunction","splice","VERSION","_extends","Object","assign","target","source","key","hasOwnProperty","call","_inheritsLoose","subClass","superClass","create","constructor","__proto__","_assertThisInitialized","ReferenceError","win","assign$1","TypeError","output","index","nextKey","VENDOR_PREFIXES","TEST_ELEMENT","document","style","createElement","TYPE_FUNCTION","round","Math","abs","now","Date","prefixed","obj","property","prefix","prop","camelProp","toUpperCase","slice","window","PREFIXED_TOUCH_ACTION","NATIVE_TOUCH_ACTION","TOUCH_ACTION_COMPUTE","TOUCH_ACTION_MANIPULATION","TOUCH_ACTION_NONE","TOUCH_ACTION_PAN_X","TOUCH_ACTION_PAN_Y","TOUCH_ACTION_MAP","touchMap","cssSupports","CSS","supports","forEach","val","getTouchActionProps","SUPPORT_TOUCH","SUPPORT_POINTER_EVENTS","SUPPORT_ONLY_TOUCH","test","navigator","userAgent","INPUT_TYPE_TOUCH","INPUT_TYPE_MOUSE","COMPUTE_INTERVAL","INPUT_START","INPUT_END","INPUT_CANCEL","DIRECTION_NONE","DIRECTION_LEFT","DIRECTION_RIGHT","DIRECTION_UP","DIRECTION_DOWN","DIRECTION_HORIZONTAL","DIRECTION_VERTICAL","DIRECTION_ALL","PROPS_XY","PROPS_CLIENT_XY","each","iterator","context","boolOrFn","args","inStr","str","find","indexOf","TouchAction","manager","set","compute","element","actions","toLowerCase","trim","update","touchAction","recognizers","recognizer","enable","getTouchAction","hasPanX","hasPanY","cleanTouchActions","join","preventDefaults","input","srcEvent","direction","offsetDirection","session","prevented","preventDefault","hasNone","isTapPointer","pointers","isTapMovement","distance","isTapTouchTime","deltaTime","preventSrc","hasParent","node","parent","parentNode","getCenter","pointersLength","x","clientX","y","clientY","simpleCloneInputData","timeStamp","center","deltaX","deltaY","getDistance","p1","p2","props","sqrt","getAngle","atan2","PI","getDirection","getVelocity","computeInputData","firstInput","firstMultiple","offset","prevDelta","prevInput","offsetCenter","angle","offsetDelta","start","end","overallVelocity","overallVelocityX","overallVelocityY","scale","rotation","maxPointers","velocity","velocityX","velocityY","last","lastInterval","v","computeIntervalInputData","inputHandler","pointersLen","changedPointersLen","changedPointers","isFirst","isFinal","emit","recognize","splitStr","split","addEventListeners","types","handler","type","addEventListener","removeEventListeners","removeEventListener","getWindowForElement","doc","ownerDocument","defaultView","parentWindow","Input","callback","inputTarget","domHandler","ev","init","evEl","evTarget","evWin","destroy","inArray","src","findByKey","POINTER_INPUT_MAP","pointerdown","pointermove","pointerup","pointercancel","pointerout","IE10_POINTER_TYPE_ENUM","POINTER_ELEMENT_EVENTS","POINTER_WINDOW_EVENTS","MSPointerEvent","PointerEvent","PointerEventInput","_Input","_this","proto","store","pointerEvents","removePointer","eventTypeNormalized","replace","pointerType","isTouch","storeIndex","pointerId","button","toArray","TOUCH_INPUT_MAP","touchstart","touchmove","touchend","touchcancel","TouchInput","targetIds","touches","targetTouches","allTouches","identifier","changedTouches","changedTargetTouches","filter","touch","sort","results","values","a","b","uniqueArray","MOUSE_INPUT_MAP","mousedown","mousemove","mouseup","MouseInput","pressed","which","DEDUP_TIMEOUT","DEDUP_DISTANCE","setLastTouch","eventData","primaryTouch","lastTouch","lts","lastTouches","setTimeout","TouchMouseInput","_manager","inputEvent","inputData","isMouse","sourceCapabilities","firesTouchEvents","t","dx","dy","mouse","invokeArrayArg","fn","isArray","_uniqueId","getRecognizerByNameIfManager","otherRecognizer","get","stateStr","state","Recognizer","id","simultaneous","requireFail","recognizeWith","dropRecognizeWith","requireFailure","dropRequireFailure","hasRequireFailures","canRecognizeWith","event","additionalEvent","tryEmit","canEmit","inputDataClone","reset","process","defaults","domEvents","inputClass","preset","cssProps","userSelect","touchSelect","touchCallout","contentZooming","userDrag","tapHighlightColor","toggleCssProps","add","oldCssProps","Manager","handlers","item","force","stopped","curRecognizer","existing","remove","targetRecognizer","events","data","gestureEvent","createEvent","initEvent","gesture","dispatchEvent","AttrRecognizer","_Recognizer","attrTest","optionPointers","isRecognized","isValid","PanRecognizer","_AttrRecognizer","threshold","pX","pY","directionTest","hasMoved","extendStatics","setPrototypeOf","d","p","__assign","s","n","FIXED_DIGIT","TRANSFORM","bodyStyle","head","getElementsByTagName","len","nodes","el","raf","requestAnimationFrame","webkitRequestAnimationFrame","caf","cancelAnimationFrame","webkitCancelAnimationFrame","keyInfo_1","oldraf_1","timestamp","performance","getTime","clearTimeout","mapToFixed","map","toFixed","tranformed","filtered","every","equal","base","num","getInsidePosition","destPos","range","circular","bounce","toDestPos","targetRange","max","min","isOutside","pos","isCircularable","getCirculatedPos","isAccurate","toPos","minMax","AnimationManager","_a","itm","em","axm","animationEnd","bind","__proto","getDuration","depaPos","wishDuration","duration","durations_1","deceleration","keys","reduce","Infinity","minimumDuration","maximumDuration","createAnimationParam","option","delta","getDelta","isTrusted","done","grab","axes","_animateParam","orgPos_1","opt","triggerChange","_raf","triggerAnimationEnd","getEventInfo","restore","animateTo","beforeParam","circularTargets","setTo","setInterrupt","finish","triggerFinish","animateLoop","param","complete","info_1","self_1","prevPos_1","prevEasingPer_1","directions_1","prevTime_1","startTime","loop","currentTime","easingPer","easing","nextPos","getUserControll","userWish","retTrigger","triggerAnimationStart","console","warn","orgPos","movedPos","setBy","EventManager","triggerHold","triggerRelease","createUserControll","holding","am","eventInfo","moveTo","result","userControl","userDuration","setAnimationManager","InterruptManager","_prevented","isInterrupting","interruptable","isInterrupted","AxisManager","axis","_complementOptions","_pos","acc","axisOption","fullDepaPos","axisOptions","InputObserver","moveDistance","isStopped","atOutside","tn","tx","initSlope_1","out","hold","changeOption","change","release","inputDuration","isEqual","Axes","_super","startPos","_inputs","pow","io","__","__extends","connect","inputType","mapped","disconnect","targets","hammer","mapAxes","isBounceArea","UNIQUEKEY","toAxis","useDirection","checkType","userDirection","PanInput","panRecognizer","Error","$","multi","match","dummy","innerHTML","childNodes","querySelectorAll","nodeName","nodeType","jQuery","jquery","thresholdAngle","hammerManagerOptions","onHammerInput","onPanmove","onPanend","useHorizontal","useVertical","_direction","observer","hammerOption","removeRecognizer","dettachEvent","keyValue","String","random","hasTouch","hasMouse","hasPointer","convertInputType","e","createHammer","Pan","attachEvent","disable","isEnable","toAngle","getDirectionByAngle","offsetY","offsetX","getOffset","prevent","some","stopPropagation","preventSystemEvent","speeds","normalSpeed","properties","MOVE_TYPE","SNAP","FREE_SCROLL","DEFAULT_MOVE_TYPE_OPTIONS","snap","count","freeScroll","isBrowser","DEFAULT_OPTIONS","classPrefix","horizontal","infinite","infiniteThreshold","lastIndex","panelEffect","defaultIndex","autoResize","adaptive","zIndex","bound","overflow","hanger","anchor","gap","moveType","useOffset","isEqualSize","isConstantSize","renderOnlyVisible","renderExternal","collectStatistics","DEFAULT_VIEWPORT_CSS","position","DEFAULT_CAMERA_CSS","width","height","willChange","DEFAULT_PANEL_CSS","EVENTS","HOLD_START","HOLD_END","MOVE_START","MOVE","MOVE_END","CHANGE","RESTORE","SELECT","NEED_PANEL","VISIBLE_CHANGE","AXES_EVENTS","HOLD","RELEASE","ANIMATION_END","FINISH","STATE_TYPE","DIRECTION","PREV","NEXT","FLICKING_METHODS","prev","next","getIndex","getAllPanels","getCurrentPanel","getElement","getPanel","getPanelCount","getStatus","getVisiblePanels","enableInput","disableInput","resize","setStatus","isPlaying","checkTranslateSupport","transforms","webkitTransform","msTransform","MozTransform","OTransform","transform","has3d","supportedStyle","documentElement","transformName","prefixedTransform","insertBefore","styleVal","getComputedStyle","getPropertyValue","parentElement","removeChild","transformInfo","_i","srcs","elements","isString","tempDiv","children","firstChild","className","classList","contains","cssObj","iterable","cssValue","defaultVal","defaultValue","cssRegex","clamp","idx","calculatedValue","matchResult","exec","sign","unit","parsedValue","parseFloat","counterArray","indexed","size","originalStyle","setAttribute","removeAttribute","bbox","offsetWidth","offsetHeight","clientRect","getBoundingClientRect","left","top","viewport","prevSibling","nextSibling","clonedPanels","relativeAnchorPosition","isClone","isVirtual","cloneIndex","cachedBbox","setElement","givenBbox","getBbox","prevSize","parseArithmeticExpression","panel","cloneState","panelCount","panelManager","scrollAreaSize","getScrollAreaSize","floor","getPosition","getCurrentProgress","outsetRange","getSize","getRelativeHangerPosition","getRelativeAnchorPosition","getProgress","getCameraPosition","panelSize","relativePanelPosition","rightRelativePanelPosition","visibleSize","currentPanel","getHangerPosition","getAnchorPosition","findEstimatedPosition","updateFunction","shouldResize","identicalPanels","getIdenticalPanels","eachPanel","unCacheBbox","addVisiblePanel","currentIndex","currentPosition","prevPanelIndex","prevPanelPosition","prevPanelSize","hasEmptyPanelBetween","notYetMinPanel","newPosition","prevPanel","clone","getCloneIndex","setPosition","getLastIndex","nextPanelIndex","nextPanelPosition","notYetMaxPanel","nextPanel","parsedElements","parseElement","firstPanel","targetIndex","insert","preserveUI","restoreStyle","wasVisible","Boolean","cameraElement","getCameraElement","appendChild","classes","classes_1","hasClass","original","getClonedPanels","elementStyle","currentElementStyle","styleToApply","cloneElement","cloneNode","clonedPanel","Panel","clonedState","removeClonedPanelsAfter","removingPanels","removeElement","currentElement","getAttribute","applyCSS","panels","clones","cloneCount","allClones","newPanels","newClones","findIndex","lastPanel","possibleLastPanel","shouldRender","isCircular","findFirstPanelFrom","siblingElement","insertNewPanels","pushedIndex","panelsAfterIndex","emptyPanelCount","removedPanels","newLastIndex","reverse","setIndex","updateIndex","addNewClones","panelCount_1","cloneSet","replacedPanels","wasNonEmptyCount","deleteCount","deletedPanels","nonEmptyIndexFromLast","allPanels","allPanelsCount","insertTarget_1","newClones_1","allPanels_1","originalPanels","getCloneCount","lastPanelClones","nextSiblingClones","cloneNextSibling","lastPanelSibling","cloneSiblingElement","nextElementSibling","this_1","insertClones","counter","insertingIndex","fragment_1","createDocumentFragment","prevState","targetPanel","lastPosition","nextState","tslib_1","flicking","triggerEvent","transitTo","moveCamera","onSuccess","onStopped","onChange","State","flick","releaseEvent","clickedElement","elementFromPoint","clickedPanel","findPanelOf","cameraPosition","clickedPanelPosition","stopCamera","absDelta","inputDelta","isNextDirection","swipeDistance","swipeAngle","atan","belowAngleThreshold","overThreshold","moveTypeContext","axesEvent","interruptDestInfo","findPanelWhenInterrupted","nearestPanel","getNearestPanel","destInfo","findTargetPanel","findRestorePanel","scrollArea","getScrollArea","loopCount","originalTargetPosition","newCloneIndex","circulate","newTargetPosition","newTargetPanel","setCurrentPanel","updateAdaptiveSize","updateCameraPosition","updateAxesPosition","IdleState","nextStateType","currentState","HoldingState","DraggingState","AnimatingState","DisabledState","onExit","onEnter","onHold","onRelease","onAnimationEnd","onFinish","ctx","snapCount","eventDelta","minimumDistanceToChange","calcBrinkOfChange","nearestIsCurrent","shouldMoveWhenBounceIs0","canSetBoundMode","shouldMoveToAdjacent","isOutOfBound","findSnappedPanel","findAdjacentPanel","halfGap","estimatedHangerPos","panelToMove","cycleIndex","passedPanelCount","originalPanel","getOriginalPanel","panelPosition","siblingPanel","panelIndex","siblingIndex","originalPosition","defaultDuration","getCurrentIndex","hangerPosition","firstClonedPanel","basePanel","basePosition","adjacentPanel","targetRelativeAnchorPosition","estimatedPosition","findRestorePanelInCircularMode","lapped","findNearestPanelAt","stateMachine","getState","currentPanelPosition","lastHangerPosition","Snap","panelMaintainRatio","relativeHangerPosition","positionOffset","translate","checkedIndexes","isAdaptiveCached","isViewportGiven","isCameraGiven","originalViewportStyle","originalCameraStyle","StateMachine","visiblePanels","panelBboxes","build","eventResult","isBetween","findNearestPanel","originalNearestPosition","checkNeedPanel","updateVisiblePanels","posOffset","moveCoord","coord","viewportElement","updateSize","updateOriginalPanelPositions","updateScrollArea","updateClonePanels","updatePlugins","minimumDistance","prevPosition","nextPosition","nearest","shortestDistance","identical","anchorPosition","getVisibleIndexOf","panInput","resizePanels","newCenterPanel","newPanelPosition","updateCheckedIndexes","indexes","visibleIndex","newCurrentIndex","getRange","shouldApplyAdaptive","viewportStyle","sizeToApply","panelBbox","maximum","viewportBbox","updateBbox","viewportSize","isFreeScroll","is","playing","plugins","plugin","wrapper","removePlugins","topmostElement_1","deletingElement","status","html","refreshPanels","createdPanels","orderedPanels","createdPanel","replacePanels","setCloneCount","cameraPos_1","viewportSize_1","getNext","isOutOfViewport","getAbsIndex_1","nextPanels","prevPanels","panel1","panel2","outsetProgress","getOutsetProgress","NaN","prevRange","nextRange","nearestAnchorPos","nearestIndex","nearestSize","hangerIsNextToNearestPanel","targetPosition","progressBetween","axesHandlers","setLastIndex","newPlugins","currentPlugins","changedRange","removed","fragment","prevVisiblePanels","equalSizeClasses_1","cached_1","overlappedClass","getOverlappedClass","clonePanels","updateClonedPanelPositions","chainAllPanels","visiblePanel","setElements","applyCSSValue","setMoveType","setAxesInstance","setDefaultPanel","moveToDefaultPanel","viewportCandidate","hasViewportElement","cameraCandidate","hasCameraElement","child","minHeight","minWidth","PanelManager","FreeScroll","indexRange","panelAtLeftBoundary","reversedPanels","sumOriginalPanelSize","areaPrev","sizeSum","reversedPanels_1","panelAtRightBoundary","areaNext","panels_1","needCloneOnPrev","ceil","prevCloneCount","origPanel","removeClonesAfter","defaultPanel","defaultPosition","nextPanelPos","maintainingPanel","accumulatedSize","total","setPositionCSS","clonedPanels_1","clonedPanelPos","lastReplacePosition","_b","replacePosition","relAnchorPosOfCombined","anchorPos","parsedBounce","arr","parsedVal","maxLastIndex","checkingPanel","nextIndex","currentNearestPosition","triggerNeedPanel","firstIndex","lastPanelAfterNeed","cameraPrev","checkingIndex","prevIndex","firstPanelAfterNeed","params","alreadyTriggered","hasHandler","fill","insertAfter","newVisiblePanels","calcVisiblePanels","addedPanels","firstVisiblePanelPos","panelElement","firstVisiblePanel","lastVisiblePanel","getAbsIndex","newVisibleRange","prevRefCount","newRefCount","newPanel","newIndex","added","equalSizeClasses_2","default","defaultBbox_1","tid","cid","shouldResetElements","origStyle","appendUncachedPanelElements","canceled","progress","merge","previousPosition","inputOffset","cameraChange","looped","currentDirection","querySelector","currentOptions","Viewport","listenInput","listenResize","category","action","label","innerWidth","innerHeight","screen","collectInfos","location","href","language","charset","inputEncoding","characterSet","referrer","title","JSON","stringify","req","XMLHttpRequest","open","send","sendEvent","focus","nearestPosition","current","identicals","includeClone","outerHTML","addPlugins","diffResult","maintained","before","after","prevPanelCount","prevList","list","visibleIndexes","renderingPanels","setVisiblePanels","diffInfo","changed","prevClonedPanels","prevOriginalPanels","beforeIdx","afterIdx","addIndex","groupIndex","prevCloneGroup","newCloneGroup","getCheckedIndexes","has","isPanelChangedAtBeforeSync","beforeDiffInfo","prevOriginalPanelCount_1","originalPanelCount_1","originalAdded","originalRemoved","beforeSync","addedIndex","addedElement","beforePanel","eventContext","fire","connectAxesHandler","Flicking","withFlickingMethods","flickingName"],"mappings":"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"}