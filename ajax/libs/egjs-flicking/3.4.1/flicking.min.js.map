{"version":3,"file":"flicking.min.js","sources":["../src/consts.ts","../src/utils.ts","../src/components/Panel.ts","../src/components/PanelManager.ts","../src/states/State.ts","../src/states/IdleState.ts","../src/states/HoldingState.ts","../src/states/DraggingState.ts","../src/states/AnimatingState.ts","../src/states/DisabledState.ts","../src/components/StateMachine.ts","../src/moves/Snap.ts","../src/moves/MoveType.ts","../src/moves/FreeScroll.ts","../src/components/Viewport.ts","../src/ga/ga.ts","../src/Flicking.ts","../src/index.umd.ts"],"sourcesContent":["/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport { FlickingOptions, EventType, Direction, AxesEventType, StateType, MoveTypeSnapOption, MoveTypeFreeScrollOption, FlickingMethodsKeys } from \"./types\";\n\nexport const MOVE_TYPE: {\n  SNAP: \"snap\";\n  FREE_SCROLL: \"freeScroll\";\n} = {\n  SNAP: \"snap\",\n  FREE_SCROLL: \"freeScroll\",\n};\n\nexport const DEFAULT_MOVE_TYPE_OPTIONS: {\n  snap: MoveTypeSnapOption,\n  freeScroll: MoveTypeFreeScrollOption,\n} = {\n  snap: {\n    type: \"snap\",\n    count: 1,\n  },\n  freeScroll: {\n    type: \"freeScroll\",\n  },\n};\nexport const isBrowser = typeof document !== \"undefined\";\n\n/**\n * Default options for creating Flicking.\n * @ko 플리킹을 만들 때 사용하는 기본 옵션들\n * @private\n * @memberof eg.Flicking\n */\nexport const DEFAULT_OPTIONS: Readonly<FlickingOptions> = {\n  classPrefix: \"eg-flick\",\n  deceleration: 0.0075,\n  horizontal: true,\n  circular: false,\n  infinite: false,\n  infiniteThreshold: 0,\n  lastIndex: Infinity,\n  threshold: 40,\n  duration: 100,\n  panelEffect: x => 1 - Math.pow(1 - x, 3),\n  defaultIndex: 0,\n  inputType: [\"touch\", \"mouse\"],\n  thresholdAngle: 45,\n  bounce: 10,\n  autoResize: false,\n  adaptive: false,\n  zIndex: 2000,\n  bound: false,\n  overflow: false,\n  hanger: \"50%\",\n  anchor: \"50%\",\n  gap: 0,\n  moveType: DEFAULT_MOVE_TYPE_OPTIONS.snap,\n  useOffset: false,\n  isEqualSize: false,\n  isConstantSize: false,\n  renderOnlyVisible: false,\n  renderExternal: false,\n  collectStatistics: true,\n};\n\nexport const DEFAULT_VIEWPORT_CSS = {\n  position: \"relative\",\n  zIndex: DEFAULT_OPTIONS.zIndex,\n  overflow: \"hidden\",\n};\n\nexport const DEFAULT_CAMERA_CSS = {\n  width: \"100%\",\n  height: \"100%\",\n  willChange: \"transform\",\n};\n\nexport const DEFAULT_PANEL_CSS = {\n  position: \"absolute\",\n};\n\nexport const EVENTS: EventType = {\n  HOLD_START: \"holdStart\",\n  HOLD_END: \"holdEnd\",\n  MOVE_START: \"moveStart\",\n  MOVE: \"move\",\n  MOVE_END: \"moveEnd\",\n  CHANGE: \"change\",\n  RESTORE: \"restore\",\n  SELECT: \"select\",\n  NEED_PANEL: \"needPanel\",\n  VISIBLE_CHANGE: \"visibleChange\",\n};\n\nexport const AXES_EVENTS: AxesEventType = {\n  HOLD: \"hold\",\n  CHANGE: \"change\",\n  RELEASE: \"release\",\n  ANIMATION_END: \"animationEnd\",\n  FINISH: \"finish\",\n};\n\nexport const STATE_TYPE: StateType = {\n  IDLE: 0,\n  HOLDING: 1,\n  DRAGGING: 2,\n  ANIMATING: 3,\n  DISABLED: 4,\n};\n\nexport const DIRECTION: Direction = {\n  PREV: \"PREV\",\n  NEXT: \"NEXT\",\n};\nexport const FLICKING_METHODS: {[key in FlickingMethodsKeys]: true} = {\n  prev: true,\n  next: true,\n  moveTo: true,\n  getIndex: true,\n  getAllPanels: true,\n  getCurrentPanel: true,\n  getElement: true,\n  getPanel: true,\n  getPanelCount: true,\n  getStatus: true,\n  getVisiblePanels: true,\n  setLastIndex: true,\n  enableInput: true,\n  disableInput: true,\n  destroy: true,\n  resize: true,\n  setStatus: true,\n  addPlugins: true,\n  removePlugins: true,\n  isPlaying: true,\n  getLastIndex: true,\n};\n\n// Check whether browser supports transform: translate3d\n// https://stackoverflow.com/questions/5661671/detecting-transform-translate3d-support\nexport let checkTranslateSupport = () => {\n  const transforms = {\n    webkitTransform: \"-webkit-transform\",\n    msTransform: \"-ms-transform\",\n    MozTransform: \"-moz-transform\",\n    OTransform: \"-o-transform\",\n    transform: \"transform\",\n  };\n\n  if (!isBrowser) {\n    return {\n      name: transforms.transform,\n      has3d: true,\n    };\n  }\n  const supportedStyle = document.documentElement.style;\n  let transformName = \"\";\n  for (const prefixedTransform in transforms) {\n    if (prefixedTransform in supportedStyle) {\n      transformName = prefixedTransform;\n    }\n  }\n\n  if (!transformName) {\n    throw new Error(\"Browser doesn't support CSS3 2D Transforms.\");\n  }\n\n  const el = document.createElement(\"div\");\n\n  document.documentElement.insertBefore(el, null);\n\n  el.style[transformName] = \"translate3d(1px, 1px, 1px)\";\n  const styleVal = window.getComputedStyle(el).getPropertyValue(transforms[transformName]);\n\n  el.parentElement!.removeChild(el);\n\n  const transformInfo = {\n    name: transformName,\n    has3d: styleVal.length > 0 && styleVal !== \"none\",\n  };\n\n  checkTranslateSupport = () => transformInfo;\n\n  return transformInfo;\n};\n\nexport const TRANSFORM = checkTranslateSupport();\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport { ElementLike, OriginalStyle, BoundingBox } from \"./types\";\nimport Flicking from \"./Flicking\";\nimport { FLICKING_METHODS } from \"./consts\";\n\nexport function merge(target: object, ...srcs: object[]): object {\n  srcs.forEach(source => {\n    Object.keys(source).forEach(key => {\n      const value = source[key];\n      target[key] = value;\n    });\n  });\n\n  return target;\n}\n\nexport function parseElement(element: ElementLike | ElementLike[]): HTMLElement[] {\n  if (!Array.isArray(element)) {\n    element = [element];\n  }\n\n  const elements: HTMLElement[] = [];\n  element.forEach(el => {\n    if (isString(el)) {\n      const tempDiv = document.createElement(\"div\");\n      tempDiv.innerHTML = el;\n\n      elements.push(...toArray(tempDiv.children) as HTMLElement[]);\n      while (tempDiv.firstChild) {\n        tempDiv.removeChild(tempDiv.firstChild);\n      }\n    } else {\n      elements.push(el as HTMLElement);\n    }\n  });\n\n  return elements;\n}\n\nexport function isString(value: any): value is string {\n  return typeof value === \"string\";\n}\n\n// Get class list of element as string array\nexport function classList(element: HTMLElement): string[] {\n  return element.classList\n    ? toArray(element.classList)\n    : element.className.split(\" \");\n}\n\n// Add class to specified element\nexport function addClass(element: HTMLElement, className: string): void {\n  if (element.classList) {\n    element.classList.add(className);\n  } else {\n    if (!hasClass(element, className)) {\n      element.className = (`${element.className} ${className}`).replace(/\\s{2,}/g, \" \");\n    }\n  }\n}\n\nexport function hasClass(element: HTMLElement, className: string): boolean {\n  if (element.classList) {\n    return element.classList.contains(className);\n  } else {\n    return (element.className.split(\" \").indexOf(className) >= 0);\n  }\n}\n\nexport function applyCSS(element: HTMLElement, cssObj: object): void {\n  Object.keys(cssObj).forEach(property => {\n    element.style[property] = cssObj[property];\n  });\n}\n\nexport function clamp(val: number, min: number, max: number) {\n  return Math.max(Math.min(val, max), min);\n}\n\n// Min: inclusive, Max: exclusive\nexport function isBetween(val: number, min: number, max: number) {\n  return val >= min && val <= max;\n}\n\nexport interface ArrayLike<T> {\n  length: number;\n  [index: number]: T;\n}\n\nexport function toArray<T>(iterable: ArrayLike<T>): T[] {\n  return [].slice.call(iterable);\n}\n\nexport function isArray(arr: any): boolean {\n  return arr && arr.constructor === Array;\n}\n\nexport function parseArithmeticExpression(cssValue: number | string, base: number, defaultVal?: number): number {\n  // Set base / 2 to default value, if it's undefined\n  const defaultValue = defaultVal != null ? defaultVal : base / 2;\n  const cssRegex = /(?:(\\+|\\-)\\s*)?(\\d+(?:\\.\\d+)?(%|px)?)/g;\n\n  if (typeof cssValue === \"number\") {\n    return clamp(cssValue, 0, base);\n  }\n\n  let idx = 0;\n  let calculatedValue = 0;\n  let matchResult = cssRegex.exec(cssValue);\n  while (matchResult != null) {\n    let sign = matchResult[1];\n    const value = matchResult[2];\n    const unit = matchResult[3];\n\n    let parsedValue = parseFloat(value);\n\n    if (idx <= 0) {\n      sign = sign || \"+\";\n    }\n\n    // Return default value for values not in good form\n    if (!sign) {\n      return defaultValue;\n    }\n\n    if (unit === \"%\") {\n      parsedValue = (parsedValue / 100) * base;\n    }\n\n    calculatedValue += sign === \"+\"\n      ? parsedValue\n      : -parsedValue;\n\n    // Match next occurrence\n    ++idx;\n    matchResult = cssRegex.exec(cssValue);\n  }\n\n  // None-matched\n  if (idx === 0) {\n    return defaultValue;\n  }\n\n  // Clamp between 0 ~ base\n  return clamp(calculatedValue, 0, base);\n}\n\nexport function getProgress(pos: number, range: number[]) {\n  // start, anchor, end\n  // -1 , 0 , 1\n  const [min, center, max] = range;\n\n  if (pos > center && (max - center)) {\n    // 0 ~ 1\n    return (pos - center) / (max - center);\n  } else if (pos < center && (center - min)) {\n    // -1 ~ 0\n    return (pos - center) / (center - min);\n  } else if (pos !== center && max - min) {\n    return (pos - min) / (max - min);\n  }\n  return 0;\n}\n\nexport function findIndex<T>(iterable: T[], callback: (el: T) => boolean): number {\n  for (let i = 0; i < iterable.length; i += 1) {\n    const element = iterable[i];\n    if (element && callback(element)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n// return [0, 1, ...., max - 1]\nexport function counter(max: number): number[] {\n  const counterArray: number[] = [];\n  for (let i = 0; i < max; i += 1) {\n    counterArray[i] = i;\n  }\n  return counterArray;\n}\n\n// Circulate number between range [min, max]\n/*\n * \"indexed\" means min and max is not same, so if it's true \"min - 1\" should be max\n * While if it's false, \"min - 1\" should be \"max - 1\"\n * use `indexed: true` when it should be used for circulating integers like index\n * or `indexed: false` when it should be used for something like positions.\n */\nexport function circulate(value: number, min: number, max: number, indexed: boolean): number {\n  const size = indexed\n    ? max - min + 1\n    : max - min;\n  if (value < min) {\n    const offset = indexed\n      ? (min - value - 1) % size\n      : (min - value) % size;\n    value = max - offset;\n  } else if (value > max) {\n    const offset = indexed\n      ? (value - max - 1) % size\n      : (value - max) % size;\n    value = min + offset;\n  }\n\n  return value;\n}\n\nexport function restoreStyle(element: HTMLElement, originalStyle: OriginalStyle): void {\n  originalStyle.className\n    ? element.setAttribute(\"class\", originalStyle.className)\n    : element.removeAttribute(\"class\");\n  originalStyle.style\n    ? element.setAttribute(\"style\", originalStyle.style)\n    : element.removeAttribute(\"style\");\n}\n\n/**\n * Decorator that makes the method of flicking available in the framework.\n * @ko 프레임워크에서 플리킹의 메소드를 사용할 수 있게 하는 데코레이터.\n * @memberof eg.Flicking\n * @private\n * @example\n * ```js\n * import Flicking, { withFlickingMethods } from \"@egjs/flicking\";\n *\n * class Flicking extends React.Component<Partial<FlickingProps & FlickingOptions>> {\n *   &#64;withFlickingMethods\n *   private flicking: Flicking;\n * }\n * ```\n */\nexport function withFlickingMethods(prototype: any, flickingName: string) {\n  Object.keys(FLICKING_METHODS).forEach((name: keyof Flicking) => {\n    if (prototype[name]) {\n      return;\n    }\n    prototype[name] = function(...args) {\n      const result = this[flickingName][name](...args);\n\n      // fix `this` type to return your own `flicking` instance to the instance using the decorator.\n      if (result === this[flickingName]) {\n        return this;\n      } else {\n        return result;\n      }\n    };\n  });\n}\n\nexport function getBbox(element: HTMLElement, useOffset: boolean) {\n  let bbox: BoundingBox;\n  if (useOffset) {\n    bbox = {\n      x: 0,\n      y: 0,\n      width: element.offsetWidth,\n      height: element.offsetHeight,\n    };\n  } else {\n    const clientRect = element.getBoundingClientRect();\n    bbox = {\n      x: clientRect.left,\n      y: clientRect.top,\n      width: clientRect.width,\n      height: clientRect.height,\n    };\n  }\n  return bbox;\n}\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport Viewport from \"./Viewport\";\nimport { OriginalStyle, FlickingPanel, ElementLike, DestroyOption, BoundingBox } from \"../types\";\nimport { DEFAULT_PANEL_CSS, EVENTS } from \"../consts\";\nimport { addClass, applyCSS, parseArithmeticExpression, parseElement, getProgress, restoreStyle, hasClass, getBbox } from \"../utils\";\n\nclass Panel implements FlickingPanel {\n  public viewport: Viewport;\n  public prevSibling: Panel | null;\n  public nextSibling: Panel | null;\n\n  protected state: {\n    index: number;\n    position: number;\n    relativeAnchorPosition: number;\n    size: number;\n    isClone: boolean;\n    isVirtual: boolean;\n    // Index of cloned panel, zero-based integer(original: -1, cloned: [0, 1, 2, ...])\n    // if cloneIndex is 0, that means it's first cloned panel of original panel\n    cloneIndex: number;\n    originalStyle: OriginalStyle;\n    cachedBbox: BoundingBox | null;\n  };\n  private element: HTMLElement;\n  private original?: Panel;\n  private clonedPanels: Panel[];\n\n  public constructor(\n    element?: HTMLElement | null,\n    index?: number,\n    viewport?: Viewport,\n  ) {\n    this.viewport = viewport!;\n    this.prevSibling = null;\n    this.nextSibling = null;\n    this.clonedPanels = [];\n\n    this.state = {\n      index: index!,\n      position: 0,\n      relativeAnchorPosition: 0,\n      size: 0,\n      isClone: false,\n      isVirtual: false,\n      cloneIndex: -1,\n      originalStyle: {\n        className: \"\",\n        style: \"\",\n      },\n      cachedBbox: null,\n    };\n    this.setElement(element);\n  }\n\n  public resize(givenBbox?: BoundingBox): void {\n    const state = this.state;\n    const options = this.viewport.options;\n    const bbox = givenBbox\n      ? givenBbox\n      : this.getBbox();\n    this.state.cachedBbox = bbox;\n    const prevSize = state.size;\n\n    state.size = options.horizontal\n      ? bbox.width\n      : bbox.height;\n\n    if (prevSize !== state.size) {\n      state.relativeAnchorPosition = parseArithmeticExpression(options.anchor, state.size);\n    }\n\n    if (!state.isClone) {\n      this.clonedPanels.forEach(panel => {\n        const cloneState = panel.state;\n\n        cloneState.size = state.size;\n        cloneState.cachedBbox = state.cachedBbox;\n        cloneState.relativeAnchorPosition = state.relativeAnchorPosition;\n      });\n    }\n  }\n\n  public unCacheBbox(): void {\n    this.state.cachedBbox = null;\n  }\n\n  public getProgress() {\n    const viewport = this.viewport;\n    const options = viewport.options;\n    const panelCount = viewport.panelManager.getPanelCount();\n    const scrollAreaSize = viewport.getScrollAreaSize();\n\n    const relativeIndex = (options.circular ? Math.floor(this.getPosition() / scrollAreaSize) * panelCount : 0) + this.getIndex();\n    const progress = relativeIndex - viewport.getCurrentProgress();\n\n    return progress;\n  }\n\n  public getOutsetProgress() {\n    const viewport = this.viewport;\n    const outsetRange = [\n      -this.getSize(),\n      viewport.getRelativeHangerPosition() - this.getRelativeAnchorPosition(),\n      viewport.getSize(),\n    ];\n    const relativePanelPosition = this.getPosition() - viewport.getCameraPosition();\n    const outsetProgress = getProgress(relativePanelPosition, outsetRange);\n\n    return outsetProgress;\n  }\n\n  public getVisibleRatio() {\n    const viewport = this.viewport;\n    const panelSize = this.getSize();\n    const relativePanelPosition = this.getPosition() - viewport.getCameraPosition();\n    const rightRelativePanelPosition = relativePanelPosition + panelSize;\n\n    const visibleSize = Math.min(viewport.getSize(), rightRelativePanelPosition) - Math.max(relativePanelPosition, 0);\n    const visibleRatio = visibleSize >= 0\n      ? visibleSize / panelSize\n      : 0;\n\n    return visibleRatio;\n  }\n\n  public focus(duration?: number): void {\n    const viewport = this.viewport;\n    const currentPanel = viewport.getCurrentPanel();\n    const hangerPosition = viewport.getHangerPosition();\n    const anchorPosition = this.getAnchorPosition();\n    if (hangerPosition === anchorPosition || !currentPanel) {\n      return;\n    }\n\n    const currentPosition = currentPanel.getPosition();\n    const eventType = currentPosition === this.getPosition()\n      ? \"\"\n      : EVENTS.CHANGE;\n\n    viewport.moveTo(this, viewport.findEstimatedPosition(this), eventType, null, duration);\n  }\n\n  public update(updateFunction: ((element: HTMLElement) => any) | null = null, shouldResize: boolean = true): void {\n    const identicalPanels = this.getIdenticalPanels();\n\n    if (updateFunction) {\n      identicalPanels.forEach(eachPanel => {\n        updateFunction(eachPanel.getElement());\n      });\n    }\n\n    if (shouldResize) {\n      identicalPanels.forEach(eachPanel => {\n        eachPanel.unCacheBbox();\n      });\n      this.viewport.addVisiblePanel(this);\n      this.viewport.resize();\n    }\n  }\n\n  public prev(): FlickingPanel | null {\n    const viewport = this.viewport;\n    const options = viewport.options;\n    const prevSibling = this.prevSibling;\n\n    if (!prevSibling) {\n      return null;\n    }\n\n    const currentIndex = this.getIndex();\n    const currentPosition = this.getPosition();\n    const prevPanelIndex = prevSibling.getIndex();\n    const prevPanelPosition = prevSibling.getPosition();\n    const prevPanelSize = prevSibling.getSize();\n\n    const hasEmptyPanelBetween = currentIndex - prevPanelIndex > 1;\n    const notYetMinPanel = options.infinite\n      && currentIndex > 0\n      && prevPanelIndex > currentIndex;\n\n    if (hasEmptyPanelBetween || notYetMinPanel) {\n      // Empty panel exists between\n      return null;\n    }\n\n    const newPosition = currentPosition - prevPanelSize - options.gap;\n\n    let prevPanel = prevSibling;\n    if (prevPanelPosition !== newPosition) {\n      prevPanel = prevSibling.clone(prevSibling.getCloneIndex(), true);\n      prevPanel.setPosition(newPosition);\n    }\n\n    return prevPanel;\n  }\n\n  public next(): FlickingPanel | null {\n    const viewport = this.viewport;\n    const options = viewport.options;\n    const nextSibling = this.nextSibling;\n    const lastIndex = viewport.panelManager.getLastIndex();\n\n    if (!nextSibling) {\n      return null;\n    }\n\n    const currentIndex = this.getIndex();\n    const currentPosition = this.getPosition();\n    const nextPanelIndex = nextSibling.getIndex();\n    const nextPanelPosition = nextSibling.getPosition();\n\n    const hasEmptyPanelBetween = nextPanelIndex - currentIndex > 1;\n    const notYetMaxPanel = options.infinite\n      && currentIndex < lastIndex\n      && nextPanelIndex < currentIndex;\n\n    if (hasEmptyPanelBetween || notYetMaxPanel) {\n      return null;\n    }\n\n    const newPosition = currentPosition + this.getSize() + options.gap;\n\n    let nextPanel = nextSibling;\n    if (nextPanelPosition !== newPosition) {\n      nextPanel = nextSibling.clone(nextSibling.getCloneIndex(), true);\n      nextPanel.setPosition(newPosition);\n    }\n\n    return nextPanel;\n  }\n\n  public insertBefore(element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const viewport = this.viewport;\n    const parsedElements = parseElement(element);\n    const firstPanel = viewport.panelManager.firstPanel()!;\n    const prevSibling = this.prevSibling;\n    // Finding correct inserting index\n    // While it should insert removing empty spaces,\n    // It also should have to be bigger than prevSibling' s index\n    const targetIndex = prevSibling && firstPanel.getIndex() !== this.getIndex()\n      ? Math.max(prevSibling.getIndex() + 1, this.getIndex() - parsedElements.length)\n      : Math.max(this.getIndex() - parsedElements.length, 0);\n\n    return viewport.insert(targetIndex, parsedElements);\n  }\n\n  public insertAfter(element: ElementLike | ElementLike[]): FlickingPanel[] {\n    return this.viewport.insert(this.getIndex() + 1, element);\n  }\n\n  public remove(): FlickingPanel {\n    this.viewport.remove(this.getIndex());\n\n    return this;\n  }\n\n  public destroy(option: Partial<DestroyOption>): void {\n    if (!option.preserveUI) {\n      const originalStyle = this.state.originalStyle;\n\n      restoreStyle(this.element, originalStyle);\n    }\n\n    // release resources\n    for (const x in this) {\n      (this as any)[x] = null;\n    }\n  }\n\n  public getElement(): HTMLElement {\n    return this.element;\n  }\n\n  public getAnchorPosition(): number {\n    return this.state.position + this.state.relativeAnchorPosition;\n  }\n\n  public getRelativeAnchorPosition(): number {\n    return this.state.relativeAnchorPosition;\n  }\n\n  public getIndex(): number {\n    return this.state.index;\n  }\n\n  public getPosition(): number {\n    return this.state.position;\n  }\n\n  public getSize(): number {\n    return this.state.size;\n  }\n\n  public getBbox(): BoundingBox {\n    const state = this.state;\n    const viewport = this.viewport;\n    const element = this.element;\n    const options = viewport.options;\n\n    if (!element) {\n      state.cachedBbox = {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0,\n      };\n    } else if (!state.cachedBbox) {\n      const wasVisible = Boolean(element.parentNode);\n      const cameraElement = viewport.getCameraElement();\n      if (!wasVisible) {\n        cameraElement.appendChild(element);\n        viewport.addVisiblePanel(this);\n      }\n      state.cachedBbox = getBbox(element, options.useOffset);\n\n      if (!wasVisible && viewport.options.renderExternal) {\n        cameraElement.removeChild(element);\n      }\n    }\n    return state.cachedBbox!;\n  }\n\n  public isClone(): boolean {\n    return this.state.isClone;\n  }\n\n  public getOverlappedClass(classes: string[]): string | undefined {\n    const element = this.element;\n\n    for (const className of classes) {\n      if (hasClass(element, className)) {\n        return className;\n      }\n    }\n  }\n\n  public getCloneIndex(): number {\n    return this.state.cloneIndex;\n  }\n\n  public getClonedPanels(): Panel[] {\n    const state = this.state;\n\n    return state.isClone\n      ? this.original!.getClonedPanels()\n      : this.clonedPanels;\n  }\n\n  public getIdenticalPanels(): Panel[] {\n    const state = this.state;\n\n    return state.isClone\n      ? this.original!.getIdenticalPanels()\n      : [this, ...this.clonedPanels];\n  }\n\n  public getOriginalPanel(): Panel {\n    return this.state.isClone\n      ? this.original!\n      : this;\n  }\n\n  public setIndex(index: number): void {\n    const state = this.state;\n\n    state.index = index;\n    this.clonedPanels.forEach(panel => panel.state.index = index);\n  }\n\n  public setPosition(pos: number): this {\n    this.state.position = pos;\n\n    return this;\n  }\n\n  public setPositionCSS(offset: number = 0): void {\n    if (!this.element) {\n      return;\n    }\n    const state = this.state;\n    const pos = state.position;\n    const options = this.viewport.options;\n    const elementStyle = this.element.style;\n    const currentElementStyle = options.horizontal\n      ? elementStyle.left\n      : elementStyle.top;\n    const styleToApply = `${pos - offset}px`;\n\n    if (!state.isVirtual && currentElementStyle !== styleToApply) {\n      options.horizontal\n        ? elementStyle.left = styleToApply\n        : elementStyle.top = styleToApply;\n    }\n  }\n\n  public clone(cloneIndex: number, isVirtual: boolean = false, element?: HTMLElement | null): Panel {\n    const state = this.state;\n    const viewport = this.viewport;\n    let cloneElement = element;\n\n    if (!cloneElement && this.element) {\n      cloneElement = isVirtual ? this.element : this.element.cloneNode(true) as HTMLElement;\n    }\n    const clonedPanel = new Panel(cloneElement, state.index, viewport);\n    const clonedState = clonedPanel.state;\n\n    clonedPanel.original = state.isClone\n      ? this.original\n      : this;\n    clonedState.isClone = true;\n    clonedState.isVirtual = isVirtual;\n    clonedState.cloneIndex = cloneIndex;\n    // Inherit some state values\n    clonedState.size = state.size;\n    clonedState.relativeAnchorPosition = state.relativeAnchorPosition;\n    clonedState.originalStyle = state.originalStyle;\n    clonedState.cachedBbox = state.cachedBbox;\n\n    if (!isVirtual) {\n      this.clonedPanels.push(clonedPanel);\n    } else {\n      clonedPanel.prevSibling = this.prevSibling;\n      clonedPanel.nextSibling = this.nextSibling;\n    }\n\n    return clonedPanel;\n  }\n\n  public removeElement(): void {\n    if (!this.viewport.options.renderExternal) {\n      const element = this.element;\n      element.parentNode!.removeChild(element);\n    }\n\n    // Do the same thing for clones\n    if (!this.state.isClone) {\n      this.removeClonedPanelsAfter(0);\n    }\n  }\n\n  public removeClonedPanelsAfter(start: number): void {\n    const options = this.viewport.options;\n    const removingPanels = this.clonedPanels.splice(start);\n\n    if (!options.renderExternal && !options.renderOnlyVisible) {\n      removingPanels.forEach(panel => {\n        panel.removeElement();\n      });\n    }\n  }\n\n  public setElement(element?: HTMLElement | null): void {\n    if (!element) {\n      return;\n    }\n    const currentElement = this.element;\n    if (element !== currentElement) {\n      const options = this.viewport.options;\n\n      if (currentElement) {\n        if (options.horizontal) {\n          element.style.left = currentElement.style.left;\n        } else {\n          element.style.top = currentElement.style.top;\n        }\n      } else {\n        const originalStyle = this.state.originalStyle;\n\n        originalStyle.className = element.getAttribute(\"class\");\n        originalStyle.style = element.getAttribute(\"style\");\n      }\n\n      this.element = element;\n\n      if (options.classPrefix) {\n        addClass(element, `${options.classPrefix}-panel`);\n      }\n\n      // Update size info after applying panel css\n      applyCSS(this.element, DEFAULT_PANEL_CSS);\n    }\n  }\n}\n\nexport default Panel;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport Panel from \"./Panel\";\nimport { FlickingOptions } from \"../types\";\nimport { findIndex, counter } from \"../utils\";\n\nclass PanelManager {\n  private cameraElement: HTMLElement;\n  private options: FlickingOptions;\n  private panels: Panel[];\n  private clones: Panel[][];\n  // index range of existing panels\n  private range: {\n    min: number;\n    max: number;\n  };\n  private length: number;\n  private lastIndex: number;\n  private cloneCount: number;\n\n  constructor(\n    cameraElement: HTMLElement,\n    options: FlickingOptions,\n  ) {\n    this.cameraElement = cameraElement;\n    this.panels = [];\n    this.clones = [];\n    this.range = {\n      min: -1,\n      max: -1,\n    };\n    this.length = 0;\n    this.cloneCount = 0;\n    this.options = options;\n    this.lastIndex = options.lastIndex;\n  }\n\n  public firstPanel(): Panel | undefined {\n    return this.panels[this.range.min];\n  }\n\n  public lastPanel(): Panel | undefined {\n    return this.panels[this.range.max];\n  }\n\n  public allPanels(): ReadonlyArray<Panel> {\n    return [\n      ...this.panels,\n      ...this.clones.reduce((allClones, clones) => [...allClones, ...clones], []),\n    ];\n  }\n\n  public originalPanels(): ReadonlyArray<Panel> {\n    return this.panels;\n  }\n\n  public clonedPanels(): ReadonlyArray<Panel[]> {\n    return this.clones;\n  }\n\n  public replacePanels(newPanels: Panel[], newClones: Panel[][]): void {\n    this.panels = newPanels;\n    this.clones = newClones;\n\n    this.range = {\n      min: findIndex(newPanels, panel => Boolean(panel)),\n      max: newPanels.length - 1,\n    };\n    this.length = newPanels.filter(panel => Boolean(panel)).length;\n  }\n\n  public has(index: number): boolean {\n    return !!this.panels[index];\n  }\n\n  public get(index: number): Panel | undefined {\n    return this.panels[index];\n  }\n\n  public getPanelCount(): number {\n    return this.length;\n  }\n\n  public getLastIndex(): number {\n    return this.lastIndex;\n  }\n\n  public getRange(): Readonly<{ min: number, max: number }> {\n    return this.range;\n  }\n\n  public getCloneCount(): number {\n    return this.cloneCount;\n  }\n\n  public setLastIndex(lastIndex: number): void {\n    this.lastIndex = lastIndex;\n\n    const firstPanel = this.firstPanel();\n    const lastPanel = this.lastPanel();\n\n    if (!firstPanel || !lastPanel) {\n      return; // no meaning of updating range & length\n    }\n\n    // Remove panels above new last index\n    const range = this.range;\n    if (lastPanel.getIndex() > lastIndex) {\n      const removingPanels = this.panels.splice(lastIndex + 1);\n      this.length -= removingPanels.length;\n\n      const firstRemovedPanel = removingPanels.filter(panel => !!panel)[0];\n      const possibleLastPanel = firstRemovedPanel.prevSibling;\n      if (possibleLastPanel) {\n        range.max = possibleLastPanel.getIndex();\n      } else {\n        range.min = -1;\n        range.max = -1;\n      }\n\n      if (this.shouldRender()) {\n        removingPanels.forEach(panel => panel.removeElement());\n      }\n    }\n  }\n\n  public setCloneCount(cloneCount: number): void {\n    this.cloneCount = cloneCount;\n  }\n\n  // Insert at index\n  // Returns pushed elements from index, inserting at 'empty' position doesn't push elements behind it\n  public insert(index: number, newPanels: Panel[]): number {\n    const panels = this.panels;\n    const range = this.range;\n    const isCircular = this.options.circular;\n    const lastIndex = this.lastIndex;\n\n    // Find first panel that index is greater than inserting index\n    const nextSibling = this.findFirstPanelFrom(index);\n\n    // if it's null, element will be inserted at last position\n    // https://developer.mozilla.org/ko/docs/Web/API/Node/insertBefore#Syntax\n    const firstPanel = this.firstPanel();\n    const siblingElement = nextSibling\n      ? nextSibling.getElement()\n      : isCircular && firstPanel\n        ? firstPanel.getClonedPanels()[0].getElement()\n        : null;\n\n    // Insert panels before sibling element\n    this.insertNewPanels(newPanels, siblingElement);\n\n    let pushedIndex = newPanels.length;\n    // Like when setting index 50 while visible panels are 0, 1, 2\n    if (index > range.max) {\n      newPanels.forEach((panel, offset) => {\n        panels[index + offset] = panel;\n      });\n    } else {\n      const panelsAfterIndex = panels.slice(index, index + newPanels.length);\n      // Find empty from beginning\n      let emptyPanelCount = findIndex(panelsAfterIndex, panel => !!panel);\n      if (emptyPanelCount < 0) {\n        // All empty\n        emptyPanelCount = panelsAfterIndex.length;\n      }\n      pushedIndex = newPanels.length - emptyPanelCount;\n\n      // Insert removing empty panels\n      panels.splice(index, emptyPanelCount, ...newPanels);\n\n      // Remove panels after last index\n      if (panels.length > lastIndex + 1) {\n        const removedPanels = panels.splice(lastIndex + 1)\n          .filter(panel => Boolean(panel));\n        this.length -= removedPanels.length;\n\n        // Find first\n        const newLastIndex = lastIndex - findIndex(this.panels.concat().reverse(), panel => !!panel);\n\n        // Can be filled with empty after newLastIndex\n        this.panels.splice(newLastIndex + 1);\n        this.range.max = newLastIndex;\n\n        if (this.shouldRender()) {\n          removedPanels.forEach(panel => panel.removeElement());\n        }\n      }\n    }\n\n    // Update index of previous panels\n    if (pushedIndex > 0) {\n      panels.slice(index + newPanels.length).forEach(panel => {\n        panel.setIndex(panel.getIndex() + pushedIndex);\n      });\n    }\n\n    // Update state\n    this.length += newPanels.length;\n    this.updateIndex(index);\n\n    if (isCircular) {\n      this.addNewClones(index, newPanels, newPanels.length - pushedIndex, nextSibling);\n      const clones = this.clones;\n      const panelCount = this.panels.length;\n      if (clones[0] && clones[0].length > lastIndex + 1) {\n        clones.forEach(cloneSet => {\n          cloneSet.splice(panelCount);\n        });\n      }\n    }\n\n    return pushedIndex;\n  }\n\n  public replace(index: number, newPanels: Panel[]): Panel[] {\n    const panels = this.panels;\n    const range = this.range;\n    const options = this.options;\n    const isCircular = options.circular;\n\n    // Find first panel that index is greater than inserting index\n    const nextSibling = this.findFirstPanelFrom(index + newPanels.length);\n\n    // if it's null, element will be inserted at last position\n    // https://developer.mozilla.org/ko/docs/Web/API/Node/insertBefore#Syntax\n    const firstPanel = this.firstPanel();\n    const siblingElement = nextSibling\n      ? nextSibling.getElement()\n      : isCircular && firstPanel\n        ? firstPanel.getClonedPanels()[0].getElement()\n        : null;\n\n    // Insert panels before sibling element\n    this.insertNewPanels(newPanels, siblingElement);\n\n    if (index > range.max) {\n      // Temporarily insert null at index to use splice()\n      (panels[index] as any) = null;\n    }\n\n    const replacedPanels = panels.splice(index, newPanels.length, ...newPanels);\n    const wasNonEmptyCount = replacedPanels.filter(panel => Boolean(panel)).length;\n\n    // Suppose inserting [1, 2, 3] at 0 position when there were [empty, 1]\n    // So length should be increased by 3(inserting panels) - 1(non-empty panels)\n    this.length += newPanels.length - wasNonEmptyCount;\n    this.updateIndex(index);\n\n    if (isCircular) {\n      this.addNewClones(index, newPanels, newPanels.length, nextSibling);\n    }\n\n    if (this.shouldRender()) {\n      replacedPanels.forEach(panel => panel && panel.removeElement());\n    }\n\n    return replacedPanels;\n  }\n\n  public remove(index: number, deleteCount: number = 1): Panel[] {\n    const isCircular = this.options.circular;\n    const panels = this.panels;\n    const clones = this.clones;\n    // Delete count should be equal or larger than 0\n    deleteCount = Math.max(deleteCount, 0);\n\n    const deletedPanels = panels\n      .splice(index, deleteCount)\n      .filter(panel => !!panel);\n\n    if (this.shouldRender()) {\n      deletedPanels.forEach(panel => panel.removeElement());\n    }\n\n    if (isCircular) {\n      clones.forEach(cloneSet => {\n        cloneSet.splice(index, deleteCount);\n      });\n    }\n\n    // Update indexes\n    panels\n      .slice(index)\n      .forEach(panel => {\n        panel.setIndex(panel.getIndex() - deleteCount);\n      });\n\n    // Check last panel is empty\n    let lastIndex = panels.length - 1;\n    if (!panels[lastIndex]) {\n      const reversedPanels = panels.concat().reverse();\n      const nonEmptyIndexFromLast = findIndex(reversedPanels, panel => !!panel);\n      lastIndex = nonEmptyIndexFromLast < 0\n        ? -1 // All empty\n        : lastIndex - nonEmptyIndexFromLast;\n\n      // Remove all empty panels from last\n      panels.splice(lastIndex + 1);\n      if (isCircular) {\n        clones.forEach(cloneSet => {\n          cloneSet.splice(lastIndex + 1);\n        });\n      }\n    }\n\n    // Update range & length\n    this.range = {\n      min: findIndex(panels, panel => !!panel),\n      max: lastIndex,\n    };\n    this.length -= deletedPanels.length;\n\n    if (this.length <= 0) {\n      // Reset clones\n      this.clones = [];\n      this.cloneCount = 0;\n    }\n\n    return deletedPanels;\n  }\n\n  public chainAllPanels() {\n    const allPanels = this.allPanels().filter(panel => !!panel);\n    const allPanelsCount = allPanels.length;\n\n    if (allPanelsCount <= 1) {\n      return;\n    }\n\n    allPanels.slice(1, allPanels.length - 1).forEach((panel, idx) => {\n      const prevPanel = allPanels[idx];\n      const nextPanel = allPanels[idx + 2];\n\n      panel.prevSibling = prevPanel;\n      panel.nextSibling = nextPanel;\n    });\n\n    const firstPanel = allPanels[0];\n    const lastPanel = allPanels[allPanelsCount - 1];\n\n    firstPanel.prevSibling = null;\n    firstPanel.nextSibling = allPanels[1];\n    lastPanel.prevSibling = allPanels[allPanelsCount - 2];\n    lastPanel.nextSibling = null;\n\n    if (this.options.circular) {\n      firstPanel.prevSibling = lastPanel;\n      lastPanel.nextSibling = firstPanel;\n    }\n  }\n\n  public insertClones(cloneIndex: number, index: number, clonedPanels: Panel[], deleteCount: number = 0): void {\n    const clones = this.clones;\n    const lastIndex = this.lastIndex;\n\n    if (!clones[cloneIndex]) {\n      const newClones: Panel[] = [];\n      clonedPanels.forEach((panel, offset) => {\n        newClones[index + offset] = panel;\n      });\n\n      clones[cloneIndex] = newClones;\n    } else {\n      const insertTarget = clones[cloneIndex];\n\n      if (index >= insertTarget.length) {\n        clonedPanels.forEach((panel, offset) => {\n          insertTarget[index + offset] = panel;\n        });\n      } else {\n        insertTarget.splice(index, deleteCount, ...clonedPanels);\n        // Remove panels after last index\n        if (clonedPanels.length > lastIndex + 1) {\n          clonedPanels.splice(lastIndex + 1);\n        }\n      }\n    }\n  }\n\n  // clones are operating in set\n  public removeClonesAfter(cloneIndex: number): void {\n    const panels = this.panels;\n\n    panels.forEach(panel => {\n      panel.removeClonedPanelsAfter(cloneIndex);\n    });\n    this.clones.splice(cloneIndex);\n  }\n\n  public findPanelOf(element: HTMLElement): Panel | undefined {\n    const allPanels = this.allPanels();\n    for (const panel of allPanels) {\n      if (!panel) {\n        continue;\n      }\n      const panelElement = panel.getElement();\n      if (panelElement.contains(element)) {\n        return panel;\n      }\n    }\n  }\n\n  public findFirstPanelFrom(index: number): Panel | undefined {\n    for (const panel of this.panels.slice(index)) {\n      if (panel && panel.getIndex() >= index && panel.getElement().parentNode) {\n        return panel;\n      }\n    }\n  }\n\n  private addNewClones(index: number, originalPanels: Panel[], deleteCount: number, nextSibling: Panel | undefined) {\n    const cameraElement = this.cameraElement;\n    const cloneCount = this.getCloneCount();\n    const lastPanel = this.lastPanel();\n    const lastPanelClones: Panel[] = lastPanel\n      ? lastPanel.getClonedPanels()\n      : [];\n    const nextSiblingClones: Panel[] = nextSibling\n      ? nextSibling.getClonedPanels()\n      : [];\n\n    for (const cloneIndex of counter(cloneCount)) {\n      const cloneNextSibling = nextSiblingClones[cloneIndex];\n      const lastPanelSibling = lastPanelClones[cloneIndex];\n\n      const cloneSiblingElement = cloneNextSibling\n        ? cloneNextSibling.getElement()\n        : lastPanelSibling\n          ? lastPanelSibling.getElement().nextElementSibling\n          : null;\n\n      const newClones = originalPanels.map(panel => {\n        const clone = panel.clone(cloneIndex);\n\n        if (this.shouldRender()) {\n          cameraElement.insertBefore(clone.getElement(), cloneSiblingElement);\n        }\n\n        return clone;\n      });\n\n      this.insertClones(cloneIndex, index, newClones, deleteCount);\n    }\n  }\n\n  private updateIndex(insertingIndex: number) {\n    const panels = this.panels;\n    const range = this.range;\n\n    const newLastIndex = panels.length - 1;\n    if (newLastIndex > range.max) {\n      range.max = newLastIndex;\n    }\n    if (insertingIndex < range.min || range.min < 0) {\n      range.min = insertingIndex;\n    }\n  }\n\n  private insertNewPanels(newPanels: Panel[], siblingElement: HTMLElement | null) {\n    if (this.shouldRender()) {\n      const fragment = document.createDocumentFragment();\n      newPanels.forEach(panel => fragment.appendChild(panel.getElement()));\n      this.cameraElement.insertBefore(fragment, siblingElement);\n    }\n  }\n\n  private shouldRender(): boolean {\n    const options = this.options;\n\n    return !options.renderExternal && !options.renderOnlyVisible;\n  }\n}\n\nexport default PanelManager;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport Panel from \"../components/Panel\";\nimport { ValueOf, Direction, StateType, FlickingContext } from \"../types\";\n\nabstract class State {\n  public delta: number = 0;\n  public direction: ValueOf<Direction> | null = null;\n  public targetPanel: Panel | null = null;\n  public lastPosition: number = 0;\n  public abstract readonly type: ValueOf<StateType>;\n  public abstract readonly holding: boolean;\n  public abstract readonly playing: boolean;\n\n  public onEnter(prevState: State): void {\n    this.delta = prevState.delta;\n    this.direction = prevState.direction;\n    this.targetPanel = prevState.targetPanel;\n    this.lastPosition = prevState.lastPosition;\n  }\n\n  public onExit(nextState: State): void {\n    // DO NOTHING\n  }\n\n  public onHold(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n\n  public onChange(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n\n  public onRelease(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n\n  public onAnimationEnd(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n\n  public onFinish(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n}\n\nexport default State;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport State from \"./State\";\nimport { EVENTS, STATE_TYPE } from \"../consts\";\nimport { FlickingContext } from \"../types\";\n\nclass IdleState extends State {\n  public readonly type = STATE_TYPE.IDLE;\n  public readonly holding = false;\n  public readonly playing = false;\n\n  public onEnter() {\n    this.direction = null;\n    this.targetPanel = null;\n    this.delta = 0;\n    this.lastPosition = 0;\n  }\n\n  public onHold(e: any, { flicking, viewport, triggerEvent, transitTo }: FlickingContext): void {\n    // Shouldn't do any action until any panels on flicking area\n    if (flicking.getPanelCount() <= 0) {\n      if (viewport.options.infinite) {\n        viewport.moveCamera(viewport.getCameraPosition(), e);\n      }\n      transitTo(STATE_TYPE.DISABLED);\n      return;\n    }\n\n    this.lastPosition = viewport.getCameraPosition();\n    triggerEvent(EVENTS.HOLD_START, e, true)\n      .onSuccess(() => {\n        transitTo(STATE_TYPE.HOLDING);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  // By methods call\n  public onChange(e: any, context: FlickingContext): void {\n    const { triggerEvent, transitTo } = context;\n\n    triggerEvent(EVENTS.MOVE_START, e, false)\n      .onSuccess(() => {\n        // Trigger AnimatingState's onChange, to trigger \"move\" event immediately\n        transitTo(STATE_TYPE.ANIMATING)\n          .onChange(e, context);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n}\n\nexport default IdleState;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport State from \"./State\";\nimport { STATE_TYPE, EVENTS, DIRECTION } from \"../consts\";\nimport { FlickingContext } from \"../types\";\n\nclass HoldingState extends State {\n  public readonly type = STATE_TYPE.HOLDING;\n  public readonly holding = true;\n  public readonly playing = true;\n\n  private releaseEvent: any = null;\n\n  public onChange(e: any, context: FlickingContext): void {\n    const { flicking, triggerEvent, transitTo } = context;\n\n    const offset = flicking.options.horizontal\n      ? e.inputEvent.offsetX\n      : e.inputEvent.offsetY;\n    this.direction = offset < 0\n      ? DIRECTION.NEXT\n      : DIRECTION.PREV;\n\n    triggerEvent(EVENTS.MOVE_START, e, true)\n      .onSuccess(() => {\n        // Trigger DraggingState's onChange, to trigger \"move\" event immediately\n        transitTo(STATE_TYPE.DRAGGING)\n          .onChange(e, context);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  public onRelease(e: any, context: FlickingContext): void {\n    const { viewport, triggerEvent, transitTo } = context;\n\n    triggerEvent(EVENTS.HOLD_END, e, true);\n\n    if (e.delta.flick !== 0) {\n      // Sometimes \"release\" event on axes triggered before \"change\" event\n      // Especially if user flicked panel fast in really short amount of time\n      // if delta is not zero, that means above case happened.\n\n      // Event flow should be HOLD_START -> MOVE_START -> MOVE -> HOLD_END\n      // At least one move event should be included between holdStart and holdEnd\n      e.setTo({ flick: viewport.getCameraPosition() }, 0);\n      transitTo(STATE_TYPE.IDLE);\n      return;\n    }\n\n    // Can't handle select event here,\n    // As \"finish\" axes event happens\n    this.releaseEvent = e;\n  }\n\n  public onFinish(e: any, { viewport, triggerEvent, transitTo }: FlickingContext): void {\n    // Should transite to IDLE state before select event\n    // As user expects hold is already finished\n    transitTo(STATE_TYPE.IDLE);\n\n    if (!this.releaseEvent) {\n      return;\n    }\n\n    // Handle release event here\n    // To prevent finish event called twice\n    const releaseEvent = this.releaseEvent;\n\n    // Static click\n    const clickedElement = releaseEvent.inputEvent.srcEvent.target;\n    const clickedPanel = viewport.panelManager.findPanelOf(clickedElement);\n    const cameraPosition = viewport.getCameraPosition();\n\n    if (clickedPanel) {\n      const clickedPanelPosition = clickedPanel.getPosition();\n      const direction = clickedPanelPosition > cameraPosition\n        ? DIRECTION.NEXT\n        : clickedPanelPosition < cameraPosition\n          ? DIRECTION.PREV\n          : null;\n\n      // Don't provide axes event, to use axes instance instead\n      triggerEvent(EVENTS.SELECT, null, true, {\n        direction, // Direction to the clicked panel\n        index: clickedPanel.getIndex(),\n        panel: clickedPanel,\n      });\n    }\n  }\n}\n\nexport default HoldingState;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport State from \"./State\";\nimport { STATE_TYPE, EVENTS } from \"../consts\";\nimport { FlickingContext } from \"../types\";\n\nclass DraggingState extends State {\n  public readonly type = STATE_TYPE.DRAGGING;\n  public readonly holding = true;\n  public readonly playing = true;\n\n  public onChange(e: any, { moveCamera, transitTo }: FlickingContext): void {\n    if (!e.delta.flick) {\n      return;\n    }\n\n    moveCamera(e)\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  public onRelease(e: any, context: FlickingContext): void {\n    const { flicking, viewport, triggerEvent, transitTo, stopCamera } = context;\n\n    const delta = this.delta;\n    const absDelta = Math.abs(delta);\n    const options = flicking.options;\n    const horizontal = options.horizontal;\n    const moveType = viewport.moveType;\n    const inputEvent = e.inputEvent;\n\n    const velocity = horizontal\n      ? inputEvent.velocityX\n      : inputEvent.velocityY;\n    const inputDelta = horizontal\n      ? inputEvent.deltaX\n      : inputEvent.deltaY;\n    const isNextDirection = Math.abs(velocity) > 1\n      ? velocity < 0\n      : absDelta > 0\n        ? delta > 0\n        : inputDelta < 0;\n\n    const swipeDistance = viewport.options.bound\n      ? Math.max(absDelta, Math.abs(inputDelta))\n      : absDelta;\n    const swipeAngle = inputEvent.deltaX\n      ? Math.abs(180 * Math.atan(inputEvent.deltaY / inputEvent.deltaX) / Math.PI)\n      : 90;\n    const belowAngleThreshold = horizontal\n      ? swipeAngle <= options.thresholdAngle\n      : swipeAngle > options.thresholdAngle;\n    const overThreshold = swipeDistance >= options.threshold\n      && belowAngleThreshold;\n\n    const moveTypeContext = {\n      viewport,\n      axesEvent: e,\n      state: this,\n      swipeDistance,\n      isNextDirection,\n    };\n\n    // Update last position to cope with Axes's animating behavior\n    // Axes uses start position when animation start\n    triggerEvent(EVENTS.HOLD_END, e, true);\n\n    const targetPanel = this.targetPanel;\n    if (!overThreshold && targetPanel) {\n      // Interrupted while animating\n      const interruptDestInfo = moveType.findPanelWhenInterrupted(moveTypeContext);\n\n      viewport.moveTo(\n        interruptDestInfo.panel,\n        interruptDestInfo.destPos,\n        interruptDestInfo.eventType,\n        e,\n        interruptDestInfo.duration,\n      );\n      transitTo(STATE_TYPE.ANIMATING);\n      return;\n    }\n\n    const currentPanel = viewport.getCurrentPanel();\n    const nearestPanel = viewport.getNearestPanel();\n\n    if (!currentPanel || !nearestPanel) {\n      // There're no panels\n      e.stop();\n      transitTo(STATE_TYPE.IDLE);\n      return;\n    }\n\n    const destInfo = overThreshold\n      ? moveType.findTargetPanel(moveTypeContext)\n      : moveType.findRestorePanel(moveTypeContext);\n\n    viewport.moveTo(\n      destInfo.panel,\n      destInfo.destPos,\n      destInfo.eventType,\n      e,\n      destInfo.duration,\n    ).onSuccess(() => {\n      transitTo(STATE_TYPE.ANIMATING);\n    }).onStopped(() => {\n      transitTo(STATE_TYPE.DISABLED);\n      stopCamera(e);\n    });\n  }\n}\n\nexport default DraggingState;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport State from \"./State\";\nimport { STATE_TYPE, EVENTS } from \"../consts\";\nimport { FlickingContext } from \"../types\";\nimport { circulate } from \"../utils\";\n\nclass AnimatingState extends State {\n  public readonly type = STATE_TYPE.ANIMATING;\n  public readonly holding = false;\n  public readonly playing = true;\n\n  public onHold(e: any, { viewport, triggerEvent, transitTo }: FlickingContext): void {\n    const options = viewport.options;\n    const scrollArea = viewport.getScrollArea();\n    const scrollAreaSize = viewport.getScrollAreaSize();\n    const loopCount = Math.floor((this.lastPosition + this.delta - scrollArea.prev) / scrollAreaSize);\n\n    const targetPanel = this.targetPanel;\n    if (options.circular && loopCount !== 0 && targetPanel) {\n      const cloneCount = viewport.panelManager.getCloneCount();\n      const originalTargetPosition = targetPanel.getPosition();\n\n      // cloneIndex is from -1 to cloneCount - 1\n      const newCloneIndex = circulate(targetPanel.getCloneIndex() - loopCount, -1, cloneCount - 1, true);\n      const newTargetPosition = originalTargetPosition - loopCount * scrollAreaSize;\n      const newTargetPanel = targetPanel.getIdenticalPanels()[newCloneIndex + 1].clone(newCloneIndex, true);\n\n      // Set new target panel considering looped count\n      newTargetPanel.setPosition(newTargetPosition);\n      this.targetPanel = newTargetPanel;\n    }\n\n    // Reset last position and delta\n    this.delta = 0;\n    this.lastPosition = viewport.getCameraPosition();\n\n    // Update current panel as current nearest panel\n    viewport.setCurrentPanel(viewport.getNearestPanel()!);\n    triggerEvent(EVENTS.HOLD_START, e, true)\n      .onSuccess(() => {\n        transitTo(STATE_TYPE.DRAGGING);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  public onChange(e: any, { moveCamera, transitTo }: FlickingContext): void {\n    if (!e.delta.flick) {\n      return;\n    }\n\n    moveCamera(e)\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  public onFinish(e: any, { flicking, viewport, triggerEvent, transitTo }: FlickingContext) {\n    const isTrusted = e && e.isTrusted;\n\n    viewport.options.bound\n      ? viewport.setCurrentPanel(this.targetPanel!)\n      : viewport.setCurrentPanel(viewport.getNearestPanel()!);\n    transitTo(STATE_TYPE.IDLE);\n    triggerEvent(EVENTS.MOVE_END, e, isTrusted, {\n      direction: this.direction,\n    });\n\n    if (flicking.options.adaptive) {\n      viewport.updateAdaptiveSize();\n    }\n  }\n}\n\nexport default AnimatingState;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport State from \"./State\";\nimport { STATE_TYPE } from \"../consts\";\nimport { FlickingContext } from \"../types\";\n\nclass DisabledState extends State {\n  public readonly type = STATE_TYPE.DISABLED;\n  public readonly holding = false;\n  public readonly playing = true;\n\n  public onAnimationEnd(e: any, { transitTo }: FlickingContext): void {\n    transitTo(STATE_TYPE.IDLE);\n  }\n\n  public onChange(e: any, { viewport, transitTo }: FlickingContext): void {\n    // Can stop Axes's change event\n    e.stop();\n\n    // Should update axes position as it's already changed at this moment\n    viewport.updateAxesPosition(viewport.getCameraPosition());\n    transitTo(STATE_TYPE.IDLE);\n  }\n\n  public onRelease(e: any, { transitTo }: FlickingContext): void {\n    // This is needed when stopped hold start event\n    if (e.delta.flick === 0) {\n      transitTo(STATE_TYPE.IDLE);\n    }\n  }\n}\n\nexport default DisabledState;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport State from \"../states/State\";\nimport { AxesEventType, ValueOf, FlickingContext, StateType } from \"../types\";\nimport { AXES_EVENTS, STATE_TYPE } from \"../consts\";\nimport IdleState from \"../states/IdleState\";\nimport HoldingState from \"../states/HoldingState\";\nimport DraggingState from \"../states/DraggingState\";\nimport AnimatingState from \"../states/AnimatingState\";\nimport DisabledState from \"../states/DisabledState\";\n\nclass StateMachine {\n  private state: State = new IdleState();\n\n  public fire(eventType: ValueOf<AxesEventType>, e: any, context: FlickingContext) {\n    const currentState = this.state;\n    switch (eventType) {\n      case AXES_EVENTS.HOLD:\n        currentState.onHold(e, context);\n        break;\n      case AXES_EVENTS.CHANGE:\n        currentState.onChange(e, context);\n        break;\n      case AXES_EVENTS.RELEASE:\n        currentState.onRelease(e, context);\n        break;\n      case AXES_EVENTS.ANIMATION_END:\n        currentState.onAnimationEnd(e, context);\n        break;\n      case AXES_EVENTS.FINISH:\n        currentState.onFinish(e, context);\n        break;\n    }\n  }\n\n  public getState(): State {\n    return this.state;\n  }\n\n  public transitTo = (nextStateType: ValueOf<StateType>): State => {\n    const currentState = this.state;\n\n    if (currentState.type !== nextStateType) {\n      let nextState: State;\n\n      switch (nextStateType) {\n        case STATE_TYPE.IDLE:\n          nextState = new IdleState();\n          break;\n        case STATE_TYPE.HOLDING:\n          nextState = new HoldingState();\n          break;\n        case STATE_TYPE.DRAGGING:\n          nextState = new DraggingState();\n          break;\n        case STATE_TYPE.ANIMATING:\n          nextState = new AnimatingState();\n          break;\n        case STATE_TYPE.DISABLED:\n          nextState = new DisabledState();\n          break;\n      }\n\n      currentState.onExit(nextState!);\n      nextState!.onEnter(currentState);\n\n      this.state = nextState!;\n    }\n    return this.state;\n  }\n}\n\nexport default StateMachine;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport MoveType from \"./MoveType\";\nimport { MOVE_TYPE, EVENTS } from \"../consts\";\nimport { MoveTypeContext, DestinationInfo } from \"../types\";\nimport { clamp } from \"../utils\";\n\nclass Snap extends MoveType {\n  protected readonly type: string = MOVE_TYPE.SNAP;\n  protected count: number;\n\n  constructor(count: number) {\n    super();\n    this.count = count;\n  }\n\n  public findTargetPanel(ctx: MoveTypeContext): DestinationInfo {\n    const { viewport, axesEvent, swipeDistance } = ctx;\n    const snapCount = this.count;\n    const eventDelta = Math.abs(axesEvent.delta.flick);\n    const currentPanel = viewport.getCurrentPanel()!;\n    const nearestPanel = viewport.getNearestPanel()!;\n    const minimumDistanceToChange = this.calcBrinkOfChange(ctx);\n\n    // This can happen when bounce is 0\n    const shouldMoveWhenBounceIs0 = viewport.canSetBoundMode()\n      && (nearestPanel.getIndex() === currentPanel.getIndex());\n    const shouldMoveToAdjacent = !viewport.isOutOfBound()\n      && (swipeDistance <= minimumDistanceToChange || shouldMoveWhenBounceIs0);\n\n    if (snapCount > 1 && eventDelta > minimumDistanceToChange) {\n      return this.findSnappedPanel(ctx);\n    } else if (shouldMoveToAdjacent) {\n      return this.findAdjacentPanel(ctx);\n    } else {\n      return {\n        panel: nearestPanel,\n        duration: viewport.options.duration,\n        destPos: viewport.findEstimatedPosition(nearestPanel),\n        eventType: swipeDistance <= minimumDistanceToChange\n          ? EVENTS.RESTORE\n          : EVENTS.CHANGE,\n      };\n    }\n  }\n\n  protected findSnappedPanel(ctx: MoveTypeContext): DestinationInfo {\n    const { axesEvent, viewport, state, isNextDirection } = ctx;\n\n    const eventDelta = Math.abs(axesEvent.delta.flick);\n    const minimumDistanceToChange = this.calcBrinkOfChange(ctx);\n    const snapCount = this.count;\n    const options = viewport.options;\n    const scrollAreaSize = viewport.getScrollAreaSize();\n    const halfGap = options.gap / 2;\n    const estimatedHangerPos = axesEvent.destPos.flick + viewport.getRelativeHangerPosition();\n\n    let panelToMove = viewport.getNearestPanel()!;\n    let cycleIndex = panelToMove.getCloneIndex() + 1; // 0(original) or 1(clone)\n    let passedPanelCount = 0;\n\n    while (passedPanelCount < snapCount) {\n      // Since panelToMove holds also cloned panels, we should use original panel's position\n      const originalPanel = panelToMove.getOriginalPanel();\n      const panelPosition = originalPanel.getPosition() + cycleIndex * scrollAreaSize;\n      const panelSize = originalPanel.getSize();\n\n      const panelNextPosition = panelPosition + panelSize + halfGap;\n      const panelPrevPosition = panelPosition - halfGap;\n\n      // Current panelToMove contains destPos\n      if (\n        (isNextDirection && panelNextPosition > estimatedHangerPos)\n        || (!isNextDirection && panelPrevPosition < estimatedHangerPos)\n      ) {\n        break;\n      }\n\n      const siblingPanel = isNextDirection\n        ? panelToMove.nextSibling\n        : panelToMove.prevSibling;\n      if (!siblingPanel) {\n        break;\n      }\n\n      const panelIndex = panelToMove.getIndex();\n      const siblingIndex = siblingPanel.getIndex();\n      if ((isNextDirection && siblingIndex <= panelIndex)\n        || (!isNextDirection && siblingIndex >= panelIndex)\n      ) {\n        cycleIndex = isNextDirection\n          ? cycleIndex + 1\n          : cycleIndex - 1;\n      }\n      panelToMove = siblingPanel;\n      passedPanelCount += 1;\n    }\n\n    const originalPosition = panelToMove.getOriginalPanel().getPosition();\n\n    if (cycleIndex !== 0) {\n      panelToMove = panelToMove.clone(panelToMove.getCloneIndex(), true);\n      panelToMove.setPosition(originalPosition + cycleIndex * scrollAreaSize);\n    }\n\n    const defaultDuration = viewport.options.duration;\n    const duration = clamp(axesEvent.duration, defaultDuration, defaultDuration * passedPanelCount);\n\n    return {\n      panel: panelToMove,\n      destPos: viewport.findEstimatedPosition(panelToMove),\n      duration,\n      eventType: Math.max(eventDelta, state.delta) > minimumDistanceToChange\n        ? EVENTS.CHANGE\n        : EVENTS.RESTORE,\n    };\n  }\n\n  private findAdjacentPanel(ctx: MoveTypeContext): DestinationInfo {\n    const { viewport, isNextDirection } = ctx;\n\n    const options = viewport.options;\n    const currentIndex = viewport.getCurrentIndex();\n    const currentPanel = viewport.panelManager.get(currentIndex)!;\n    const hangerPosition = viewport.getHangerPosition();\n    const scrollArea = viewport.getScrollArea();\n\n    const firstClonedPanel = currentPanel.getIdenticalPanels()[1];\n    const lapped = options.circular\n      && (Math.abs(currentPanel.getAnchorPosition() - hangerPosition)\n        > Math.abs(firstClonedPanel.getAnchorPosition() - hangerPosition));\n\n    // If lapped in circular mode, use first cloned panel as base panel\n    const basePanel = lapped\n      ? firstClonedPanel\n      : currentPanel;\n    const basePosition = basePanel.getPosition();\n\n    const adjacentPanel = isNextDirection\n      ? basePanel.nextSibling\n      : basePanel.prevSibling;\n\n    const eventType = adjacentPanel\n      ? EVENTS.CHANGE\n      : EVENTS.RESTORE;\n    const panelToMove = adjacentPanel\n      ? adjacentPanel\n      : basePanel;\n    const targetRelativeAnchorPosition = panelToMove.getRelativeAnchorPosition();\n\n    const estimatedPanelPosition = options.circular\n      ? isNextDirection\n        ? basePosition + basePanel.getSize() + targetRelativeAnchorPosition + options.gap\n        : basePosition - (panelToMove.getSize() - targetRelativeAnchorPosition) - options.gap\n      : panelToMove.getAnchorPosition();\n    const estimatedPosition = estimatedPanelPosition - viewport.getRelativeHangerPosition();\n    const destPos = viewport.canSetBoundMode()\n      ? clamp(estimatedPosition, scrollArea.prev, scrollArea.next)\n      : estimatedPosition;\n\n    return {\n      panel: panelToMove,\n      destPos,\n      duration: options.duration,\n      eventType,\n    };\n  }\n}\n\nexport default Snap;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport { MoveTypeStringOption, MoveTypeContext, DestinationInfo } from \"../types\";\nimport Panel from \"../components/Panel\";\nimport { EVENTS } from \"../consts\";\n\nabstract class MoveType {\n  protected readonly abstract type: string;\n\n  public abstract findTargetPanel(ctx: MoveTypeContext): DestinationInfo;\n\n  public is(type: MoveTypeStringOption): boolean {\n    return type === this.type;\n  }\n\n  public findRestorePanel(ctx: MoveTypeContext): DestinationInfo {\n    const viewport = ctx.viewport;\n    const options = viewport.options;\n\n    const panel = options.circular\n      ? this.findRestorePanelInCircularMode(ctx)\n      : viewport.getCurrentPanel()!;\n\n    return {\n      panel,\n      destPos: viewport.findEstimatedPosition(panel),\n      duration: options.duration,\n      eventType: EVENTS.RESTORE,\n    };\n  }\n\n  public findPanelWhenInterrupted(ctx: MoveTypeContext): DestinationInfo {\n    const { state, viewport } = ctx;\n    const targetPanel = state.targetPanel!;\n\n    return {\n      panel: targetPanel,\n      destPos: viewport.findEstimatedPosition(targetPanel),\n      duration: viewport.options.duration,\n      eventType: \"\",\n    };\n  }\n\n  // Calculate minimum distance to \"change\" panel\n  protected calcBrinkOfChange(ctx: MoveTypeContext): number {\n    const { viewport, isNextDirection } = ctx;\n\n    const options = viewport.options;\n    const currentPanel = viewport.getCurrentPanel()!;\n    const halfGap = options.gap / 2;\n\n    const relativeAnchorPosition = currentPanel.getRelativeAnchorPosition();\n\n    // Minimum distance needed to decide prev/next panel as nearest\n    /*\n     * |  Prev  |     Next     |\n     * |--------|--------------|\n     * [][      |<-Anchor    ][] <- Panel + Half-Gap\n     */\n    let minimumDistanceToChange = isNextDirection\n      ? currentPanel.getSize() - relativeAnchorPosition + halfGap\n      : relativeAnchorPosition + halfGap;\n\n    minimumDistanceToChange = Math.max(minimumDistanceToChange, options.threshold);\n\n    return minimumDistanceToChange;\n  }\n\n  private findRestorePanelInCircularMode(ctx: MoveTypeContext): Panel {\n    const viewport = ctx.viewport;\n    const originalPanel = viewport.getCurrentPanel()!.getOriginalPanel();\n    const hangerPosition = viewport.getHangerPosition();\n\n    const firstClonedPanel = originalPanel.getIdenticalPanels()[1];\n    const lapped = Math.abs(originalPanel.getAnchorPosition() - hangerPosition)\n      > Math.abs(firstClonedPanel.getAnchorPosition() - hangerPosition);\n\n    return (!ctx.isNextDirection && lapped)\n      ? firstClonedPanel\n      : originalPanel;\n  }\n}\n\nexport default MoveType;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport Snap from \"./Snap\";\nimport { MOVE_TYPE, EVENTS } from \"../consts\";\nimport { MoveTypeContext, DestinationInfo } from \"../types\";\nimport { circulate, clamp } from \"../utils\";\n\nclass FreeScroll extends Snap {\n  protected readonly type: string = MOVE_TYPE.FREE_SCROLL;\n\n  constructor() {\n    // Set snap count to Infinity\n    super(Infinity);\n  }\n\n  public findTargetPanel(ctx: MoveTypeContext): DestinationInfo {\n    const { axesEvent, state, viewport } = ctx;\n    const destPos = axesEvent.destPos.flick;\n    const minimumDistanceToChange = this.calcBrinkOfChange(ctx);\n    const scrollArea = viewport.getScrollArea();\n    const currentPanel = viewport.getCurrentPanel()!;\n    const options = viewport.options;\n\n    const delta = Math.abs(axesEvent.delta.flick + state.delta);\n    if (delta > minimumDistanceToChange) {\n      const destInfo = super.findSnappedPanel(ctx);\n\n      destInfo.duration = axesEvent.duration;\n      destInfo.destPos = destPos;\n      destInfo.eventType = !options.circular && destInfo.panel === currentPanel\n        ? \"\"\n        : EVENTS.CHANGE;\n\n      return destInfo;\n    } else {\n      let estimatedPosition = options.circular\n        ? circulate(destPos, scrollArea.prev, scrollArea.next, false)\n        : destPos;\n      estimatedPosition = clamp(estimatedPosition, scrollArea.prev, scrollArea.next);\n      estimatedPosition += viewport.getRelativeHangerPosition();\n\n      const estimatedPanel = viewport.findNearestPanelAt(estimatedPosition)!;\n\n      return {\n        panel: estimatedPanel,\n        destPos,\n        duration: axesEvent.duration,\n        eventType: \"\",\n      };\n    }\n  }\n\n  public findRestorePanel(ctx: MoveTypeContext): DestinationInfo {\n    return this.findTargetPanel(ctx);\n  }\n\n  public findPanelWhenInterrupted(ctx: MoveTypeContext): DestinationInfo {\n    const { viewport } = ctx;\n\n    return {\n      panel: viewport.getNearestPanel()!,\n      destPos: viewport.getCameraPosition(),\n      duration: 0,\n      eventType: \"\",\n    };\n  }\n\n  protected calcBrinkOfChange(ctx: MoveTypeContext): number {\n    const { viewport, isNextDirection } = ctx;\n\n    const options = viewport.options;\n    const currentPanel = viewport.getCurrentPanel()!;\n    const halfGap = options.gap / 2;\n\n    const lastPosition = viewport.stateMachine.getState().lastPosition;\n    const currentPanelPosition = currentPanel.getPosition();\n\n    // As camera can stop anywhere in free scroll mode,\n    // minimumDistanceToChange should be calculated differently.\n    // Ref #191(https://github.com/naver/egjs-flicking/issues/191)\n    const lastHangerPosition = lastPosition + viewport.getRelativeHangerPosition();\n\n    const scrollAreaSize = viewport.getScrollAreaSize();\n    let minimumDistanceToChange = isNextDirection\n      ? currentPanelPosition + currentPanel.getSize() - lastHangerPosition + halfGap\n      : lastHangerPosition - currentPanelPosition + halfGap;\n    minimumDistanceToChange = Math.abs(minimumDistanceToChange % scrollAreaSize);\n\n    return Math.min(minimumDistanceToChange, scrollAreaSize - minimumDistanceToChange);\n  }\n}\n\nexport default FreeScroll;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Axes, { PanInput } from \"@egjs/axes\";\n\nimport Flicking from \"../Flicking\";\nimport Panel from \"./Panel\";\nimport PanelManager from \"./PanelManager\";\nimport StateMachine from \"./StateMachine\";\nimport MoveType from \"../moves/MoveType\";\nimport { FlickingOptions, FlickingPanel, FlickingStatus, ElementLike, EventType, TriggerCallback, NeedPanelEvent, FlickingEvent, MoveTypeObjectOption, OriginalStyle, Plugin, DestroyOption, BoundingBox } from \"../types\";\nimport { DEFAULT_VIEWPORT_CSS, DEFAULT_CAMERA_CSS, TRANSFORM, DEFAULT_OPTIONS, EVENTS, DIRECTION, STATE_TYPE, MOVE_TYPE } from \"../consts\";\nimport { clamp, applyCSS, toArray, parseArithmeticExpression, isBetween, isArray, parseElement, hasClass, restoreStyle, circulate, findIndex, getBbox } from \"../utils\";\nimport Snap from \"../moves/Snap\";\nimport FreeScroll from \"../moves/FreeScroll\";\n\nexport default class Viewport {\n  public options: FlickingOptions;\n  public stateMachine: StateMachine;\n  public panelManager: PanelManager;\n  public moveType: MoveType;\n\n  private flicking: Flicking;\n  private axes: Axes;\n  private panInput: PanInput;\n\n  private viewportElement: HTMLElement;\n  private cameraElement: HTMLElement;\n\n  private triggerEvent: Flicking[\"triggerEvent\"];\n  private axesHandlers: { [key: string]: any };\n\n  private currentPanel: Panel | undefined;\n  private nearestPanel: Panel | undefined;\n  private visiblePanels: Panel[];\n\n  private plugins: Plugin[] = [];\n  private panelBboxes: { [className: string]: BoundingBox };\n  private state: {\n    size: number;\n    position: number;\n    panelMaintainRatio: number;\n    relativeHangerPosition: number;\n    positionOffset: number;\n    scrollArea: {\n      prev: number;\n      next: number;\n    };\n    translate: {\n      name: string,\n      has3d: boolean,\n    };\n    infiniteThreshold: number;\n    checkedIndexes: Array<[number, number]>;\n    visibleIndex: {\n      min: number;\n      max: number;\n    };\n    isAdaptiveCached: boolean;\n    isViewportGiven: boolean;\n    isCameraGiven: boolean;\n    originalViewportStyle: OriginalStyle;\n    originalCameraStyle: OriginalStyle;\n    cachedBbox: BoundingBox | null;\n  };\n\n  constructor(\n    flicking: Flicking,\n    options: FlickingOptions,\n    triggerEvent: Flicking[\"triggerEvent\"],\n  ) {\n    this.flicking = flicking;\n    this.triggerEvent = triggerEvent;\n\n    this.state = {\n      size: 0,\n      position: 0,\n      panelMaintainRatio: 0,\n      relativeHangerPosition: 0,\n      positionOffset: 0,\n      scrollArea: {\n        prev: 0,\n        next: 0,\n      },\n      visibleIndex: {\n        min: NaN,\n        max: NaN,\n      },\n      translate: TRANSFORM,\n      infiniteThreshold: 0,\n      checkedIndexes: [],\n      isAdaptiveCached: false,\n      isViewportGiven: false,\n      isCameraGiven: false,\n      originalViewportStyle: {\n        className: null,\n        style: null,\n      },\n      originalCameraStyle: {\n        className: null,\n        style: null,\n      },\n      cachedBbox: null,\n    };\n    this.options = options;\n    this.stateMachine = new StateMachine();\n    this.visiblePanels = [];\n    this.panelBboxes = {};\n\n    this.build();\n  }\n\n  public moveTo(\n    panel: Panel,\n    destPos: number,\n    eventType: EventType[\"CHANGE\"] | EventType[\"RESTORE\"] | \"\",\n    axesEvent: any,\n    duration: number = this.options.duration,\n  ): TriggerCallback {\n    const state = this.state;\n    const currentState = this.stateMachine.getState();\n    const currentPosition = state.position;\n\n    const isTrusted = axesEvent\n      ? axesEvent.isTrusted\n      : false;\n    const direction = destPos === currentPosition\n      ? null\n      : destPos > currentPosition\n        ? DIRECTION.NEXT\n        : DIRECTION.PREV;\n\n    let eventResult: TriggerCallback;\n    if (eventType === EVENTS.CHANGE) {\n      eventResult = this.triggerEvent(EVENTS.CHANGE, axesEvent, isTrusted, {\n        index: panel.getIndex(),\n        panel,\n        direction,\n      });\n    } else if (eventType === EVENTS.RESTORE) {\n      eventResult = this.triggerEvent(EVENTS.RESTORE, axesEvent, isTrusted);\n    } else {\n      eventResult = {\n        onSuccess(callback: () => void): TriggerCallback {\n          callback();\n          return this;\n        },\n        onStopped(): TriggerCallback {\n          return this;\n        },\n      };\n    }\n\n    eventResult.onSuccess(() => {\n      currentState.delta = 0;\n      currentState.lastPosition = this.getCameraPosition();\n      currentState.targetPanel = panel;\n      currentState.direction = destPos === currentPosition\n        ? null\n        : destPos > currentPosition\n          ? DIRECTION.NEXT\n          : DIRECTION.PREV;\n\n      if (destPos === currentPosition) {\n        // no move\n        this.nearestPanel = panel;\n        this.currentPanel = panel;\n      }\n\n      if (axesEvent && axesEvent.setTo) {\n        // freeScroll only occurs in release events\n        axesEvent.setTo({ flick: destPos }, duration);\n      } else {\n        this.axes.setTo({ flick: destPos }, duration);\n      }\n    });\n\n    return eventResult;\n  }\n\n  public moveCamera(pos: number, axesEvent?: any): void {\n    const state = this.state;\n    const options = this.options;\n    const transform = state.translate.name;\n    const scrollArea = state.scrollArea;\n\n    // Update position & nearestPanel\n    if (options.circular && !isBetween(pos, scrollArea.prev, scrollArea.next)) {\n      pos = circulate(pos, scrollArea.prev, scrollArea.next, false);\n    }\n    state.position = pos;\n    this.nearestPanel = this.findNearestPanel();\n    const nearestPanel = this.nearestPanel;\n    const originalNearestPosition = nearestPanel\n      ? nearestPanel.getPosition()\n      : 0;\n\n    // From 0(panel position) to 1(panel position + panel size)\n    // When it's on gap area value will be (val > 1 || val < 0)\n    if (nearestPanel) {\n      const hangerPosition = this.getHangerPosition();\n      const panelPosition = nearestPanel.getPosition();\n      const panelSize = nearestPanel.getSize();\n      const halfGap = options.gap / 2;\n\n      // As panel's range is from panel position - half gap ~ panel pos + panel size + half gap\n      state.panelMaintainRatio = (hangerPosition - panelPosition + halfGap) / (panelSize + 2 * halfGap);\n    } else {\n      state.panelMaintainRatio = 0;\n    }\n\n    this.checkNeedPanel(axesEvent);\n\n    // Possibly modified after need panel, if it's looped\n    const modifiedNearestPosition = nearestPanel\n      ? nearestPanel.getPosition()\n      : 0;\n\n    pos += (modifiedNearestPosition - originalNearestPosition);\n    state.position = pos;\n\n    this.updateVisiblePanels();\n\n    // Offset is needed to fix camera layer size in visible-only rendering mode\n    const posOffset = options.renderOnlyVisible\n      ? state.positionOffset\n      : 0;\n    const moveVector = options.horizontal\n      ? [-(pos - posOffset), 0] : [0, -(pos - posOffset)];\n    const moveCoord = moveVector.map(coord => `${Math.round(coord)}px`).join(\", \");\n\n    this.cameraElement.style[transform] = state.translate.has3d\n      ? `translate3d(${moveCoord}, 0px)`\n      : `translate(${moveCoord})`;\n  }\n\n  public stopCamera = (axesEvent: any): void => {\n    if (axesEvent && axesEvent.setTo) {\n      axesEvent.setTo({ flick: this.state.position }, 0);\n    }\n\n    this.stateMachine.transitTo(STATE_TYPE.IDLE);\n  }\n\n  public unCacheBbox(): void {\n    const state = this.state;\n    const options = this.options;\n\n    state.cachedBbox = null;\n    state.visibleIndex = { min: NaN, max: NaN };\n\n    const viewportElement = this.viewportElement;\n    if (!options.horizontal) {\n      // Don't preserve previous width for adaptive resizing\n      viewportElement.style.width = \"\";\n    } else {\n      viewportElement.style.height = \"\";\n    }\n    state.isAdaptiveCached = false;\n    this.panelBboxes = {};\n  }\n\n  public resize(): void {\n    this.updateSize();\n    this.updateOriginalPanelPositions();\n    this.updateAdaptiveSize();\n    this.updateScrollArea();\n    this.updateClonePanels();\n    this.updateCameraPosition();\n    this.updatePlugins();\n  }\n\n  // Find nearest anchor from current hanger position\n  public findNearestPanel(): Panel | undefined {\n    const state = this.state;\n    const panelManager = this.panelManager;\n    const hangerPosition = this.getHangerPosition();\n\n    if (this.isOutOfBound()) {\n      const position = state.position;\n\n      return position <= state.scrollArea.prev\n        ? panelManager.firstPanel()\n        : panelManager.lastPanel();\n    }\n\n    return this.findNearestPanelAt(hangerPosition);\n  }\n\n  public findNearestPanelAt(position: number): Panel | undefined {\n    const panelManager = this.panelManager;\n\n    const allPanels = panelManager.allPanels();\n    let minimumDistance = Infinity;\n    let nearestPanel: Panel | undefined;\n\n    for (const panel of allPanels) {\n      if (!panel) {\n        continue;\n      }\n      const prevPosition = panel.getPosition();\n      const nextPosition = prevPosition + panel.getSize();\n\n      // Use shortest distance from panel's range\n      const distance = isBetween(position, prevPosition, nextPosition)\n        ? 0\n        : Math.min(\n          Math.abs(prevPosition - position),\n          Math.abs(nextPosition - position),\n        );\n\n      if (distance > minimumDistance) {\n        break;\n      } else if (distance === minimumDistance) {\n        const minimumAnchorDistance = Math.abs(position - nearestPanel!.getAnchorPosition());\n        const anchorDistance = Math.abs(position - panel.getAnchorPosition());\n\n        if (anchorDistance > minimumAnchorDistance) {\n          break;\n        }\n      }\n\n      minimumDistance = distance;\n      nearestPanel = panel;\n    }\n\n    return nearestPanel;\n  }\n\n  public findNearestIdenticalPanel(panel: Panel): Panel {\n    let nearest = panel;\n    let shortestDistance = Infinity;\n    const hangerPosition = this.getHangerPosition();\n\n    const identicals = panel.getIdenticalPanels();\n    identicals.forEach(identical => {\n      const anchorPosition = identical.getAnchorPosition();\n      const distance = Math.abs(anchorPosition - hangerPosition);\n\n      if (distance < shortestDistance) {\n        nearest = identical;\n        shortestDistance = distance;\n      }\n    });\n\n    return nearest;\n  }\n\n  // Find shortest camera position that distance is minimum\n  public findShortestPositionToPanel(panel: Panel): number {\n    const state = this.state;\n    const options = this.options;\n    const anchorPosition = panel.getAnchorPosition();\n    const hangerPosition = this.getHangerPosition();\n    const distance = Math.abs(hangerPosition - anchorPosition);\n    const scrollAreaSize = state.scrollArea.next - state.scrollArea.prev;\n\n    if (!options.circular) {\n      const position = anchorPosition - state.relativeHangerPosition;\n      return this.canSetBoundMode()\n        ? clamp(position, state.scrollArea.prev, state.scrollArea.next)\n        : position;\n    } else {\n      // If going out of viewport border is more efficient way of moving, choose that position\n      return distance <= scrollAreaSize - distance\n        ? anchorPosition - state.relativeHangerPosition\n        : anchorPosition > hangerPosition\n          // PREV TO NEXT\n          ? anchorPosition - state.relativeHangerPosition - scrollAreaSize\n          // NEXT TO PREV\n          : anchorPosition - state.relativeHangerPosition + scrollAreaSize;\n    }\n  }\n\n  public findEstimatedPosition(panel: Panel): number {\n    const scrollArea = this.getScrollArea();\n\n    let estimatedPosition = panel.getAnchorPosition() - this.getRelativeHangerPosition();\n    estimatedPosition = this.canSetBoundMode()\n      ? clamp(estimatedPosition, scrollArea.prev, scrollArea.next)\n      : estimatedPosition;\n\n    return estimatedPosition;\n  }\n\n  public addVisiblePanel(panel: Panel): void {\n    if (this.getVisibleIndexOf(panel) < 0) {\n      this.visiblePanels.push(panel);\n    }\n  }\n\n  public enable(): void {\n    this.panInput.enable();\n  }\n\n  public disable(): void {\n    this.panInput.disable();\n  }\n\n  public insert(index: number, element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const lastIndex = this.panelManager.getLastIndex();\n\n    // Index should not below 0\n    if (index < 0 || index > lastIndex) {\n      return [];\n    }\n\n    const state = this.state;\n    const options = this.options;\n    const parsedElements = parseElement(element);\n\n    const panels = parsedElements\n      .map((el, idx) => new Panel(el, index + idx, this))\n      .slice(0, lastIndex - index + 1);\n\n    if (panels.length <= 0) {\n      return [];\n    }\n\n    const pushedIndex = this.panelManager.insert(index, panels);\n\n    // ...then calc bbox for all panels\n    this.resizePanels(panels);\n\n    if (!this.currentPanel) {\n      this.currentPanel = panels[0];\n      this.nearestPanel = panels[0];\n\n      const newCenterPanel = panels[0];\n      const newPanelPosition = this.findEstimatedPosition(newCenterPanel);\n      state.position = newPanelPosition;\n      this.updateAxesPosition(newPanelPosition);\n      state.panelMaintainRatio = (newCenterPanel.getRelativeAnchorPosition() + options.gap / 2) / (newCenterPanel.getSize() + options.gap);\n    }\n\n    // Update checked indexes in infinite mode\n    this.updateCheckedIndexes({ min: index, max: index });\n    state.checkedIndexes.forEach((indexes, idx) => {\n      const [min, max] = indexes;\n      if (index < min) {\n        // Push checked index\n        state.checkedIndexes.splice(idx, 1, [min + pushedIndex, max + pushedIndex]);\n      }\n    });\n\n    // Uncache visible index to refresh panels\n    state.visibleIndex = {\n      min: NaN,\n      max: NaN,\n    };\n\n    this.resize();\n\n    return panels;\n  }\n\n  public replace(index: number, element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const state = this.state;\n    const options = this.options;\n    const panelManager = this.panelManager;\n    const lastIndex = panelManager.getLastIndex();\n\n    // Index should not below 0\n    if (index < 0 || index > lastIndex) {\n      return [];\n    }\n\n    const parsedElements = parseElement(element);\n    const panels = parsedElements\n      .map((el, idx) => new Panel(el, index + idx, this))\n      .slice(0, lastIndex - index + 1);\n\n    if (panels.length <= 0) {\n      return [];\n    }\n\n    const replacedPanels = panelManager.replace(index, panels);\n\n    replacedPanels.forEach(panel => {\n      const visibleIndex = this.getVisibleIndexOf(panel);\n      if (visibleIndex > -1) {\n        this.visiblePanels.splice(visibleIndex, 1);\n      }\n    });\n\n    // ...then calc bbox for all panels\n    this.resizePanels(panels);\n\n    const currentPanel = this.currentPanel;\n    const wasEmpty = !currentPanel;\n    if (wasEmpty) {\n      this.currentPanel = panels[0];\n      this.nearestPanel = panels[0];\n\n      const newCenterPanel = panels[0];\n      const newPanelPosition = this.findEstimatedPosition(newCenterPanel);\n      state.position = newPanelPosition;\n      this.updateAxesPosition(newPanelPosition);\n      state.panelMaintainRatio = (newCenterPanel.getRelativeAnchorPosition() + options.gap / 2) / (newCenterPanel.getSize() + options.gap);\n    } else if (isBetween(currentPanel!.getIndex(), index, index + panels.length - 1)) {\n      // Current panel is replaced\n      this.currentPanel = panelManager.get(currentPanel!.getIndex());\n    }\n\n    // Update checked indexes in infinite mode\n    this.updateCheckedIndexes({ min: index, max: index + panels.length - 1 });\n\n    // Uncache visible index to refresh panels\n    state.visibleIndex = {\n      min: NaN,\n      max: NaN,\n    };\n\n    this.resize();\n\n    return panels;\n  }\n\n  public remove(index: number, deleteCount: number = 1): FlickingPanel[] {\n    const state = this.state;\n    // Index should not below 0\n    index = Math.max(index, 0);\n\n    const panelManager = this.panelManager;\n    const currentIndex = this.getCurrentIndex();\n\n    const removedPanels = panelManager.remove(index, deleteCount);\n    if (isBetween(currentIndex, index, index + deleteCount - 1)) {\n      // Current panel is removed\n      // Use panel at removing index - 1 as new current panel if it exists\n      const newCurrentIndex = Math.max(index - 1, panelManager.getRange().min);\n      this.currentPanel = panelManager.get(newCurrentIndex);\n    }\n\n    // Update checked indexes in infinite mode\n    if (deleteCount > 0) {\n      // Check whether removing index will affect checked indexes\n      // Suppose index 0 is empty and removed index 1, then checked index 0 should be deleted and vice versa.\n      this.updateCheckedIndexes({ min: index - 1, max: index + deleteCount });\n      // Uncache visible index to refresh panels\n      state.visibleIndex = {\n        min: NaN,\n        max: NaN,\n      };\n    }\n\n    if (panelManager.getPanelCount() <= 0) {\n      this.currentPanel = undefined;\n      this.nearestPanel = undefined;\n    }\n\n    this.resize();\n\n    const scrollArea = state.scrollArea;\n    if (state.position < scrollArea.prev || state.position > scrollArea.next) {\n      const newPosition = circulate(state.position, scrollArea.prev, scrollArea.next, false);\n      this.moveCamera(newPosition);\n      this.updateAxesPosition(newPosition);\n    }\n\n    return removedPanels;\n  }\n\n  public updateAdaptiveSize(): void {\n    const state = this.state;\n    const options = this.options;\n    const horizontal = options.horizontal;\n    const currentPanel = this.getCurrentPanel();\n\n    if (!currentPanel) {\n      return;\n    }\n\n    const shouldApplyAdaptive = options.adaptive || !state.isAdaptiveCached;\n    const viewportStyle = this.viewportElement.style;\n    if (shouldApplyAdaptive) {\n      let sizeToApply: number;\n      if (options.adaptive) {\n        const panelBbox = currentPanel.getBbox();\n\n        sizeToApply = horizontal ? panelBbox.height : panelBbox.width;\n      } else {\n        // Find minimum height of panels to maximum panel size\n        const maximumPanelSize = this.panelManager.originalPanels().reduce((maximum, panel) => {\n          const panelBbox = panel.getBbox();\n          return Math.max(maximum, horizontal ? panelBbox.height : panelBbox.width);\n        }, 0);\n\n        sizeToApply = maximumPanelSize;\n      }\n\n      const viewportBbox = this.updateBbox();\n      sizeToApply = Math.max(sizeToApply, horizontal ? viewportBbox.height : viewportBbox.width);\n\n      state.isAdaptiveCached = true;\n      const viewportSize = `${sizeToApply}px`;\n      if (horizontal) {\n        viewportStyle.height = viewportSize;\n      } else if (!horizontal) {\n        viewportStyle.width = viewportSize;\n      }\n    }\n  }\n\n  public updateBbox(): BoundingBox {\n    const state = this.state;\n    const options = this.options;\n    const viewportElement = this.viewportElement;\n\n    if (!state.cachedBbox) {\n      state.cachedBbox = getBbox(viewportElement, options.useOffset);\n    }\n\n    return state.cachedBbox!;\n  }\n\n  public updatePlugins(): void {\n    // update for resize\n    this.plugins.forEach(plugin => {\n      plugin.update && plugin.update(this.flicking);\n    });\n  }\n\n  public destroy(option: Partial<DestroyOption>): void {\n    const state = this.state;\n    const wrapper = this.flicking.getElement();\n    const viewportElement = this.viewportElement;\n    const cameraElement = this.cameraElement;\n    const originalPanels = this.panelManager.originalPanels();\n\n    this.removePlugins(this.plugins);\n    if (!option.preserveUI) {\n      restoreStyle(viewportElement, state.originalViewportStyle);\n      restoreStyle(cameraElement, state.originalCameraStyle);\n\n      if (!state.isCameraGiven && !this.options.renderExternal) {\n        const topmostElement = state.isViewportGiven\n          ? viewportElement\n          : wrapper;\n        const deletingElement = state.isViewportGiven\n          ? cameraElement\n          : viewportElement;\n\n        originalPanels.forEach(panel => {\n          topmostElement.appendChild(panel.getElement());\n        });\n\n        topmostElement.removeChild(deletingElement);\n      }\n    }\n\n    this.axes.destroy();\n    this.panInput.destroy();\n\n    originalPanels.forEach(panel => { panel.destroy(option); });\n\n    // release resources\n    for (const x in this) {\n      (this as any)[x] = null;\n    }\n  }\n\n  public restore(status: FlickingStatus): void {\n    const panels = status.panels;\n    const defaultIndex = this.options.defaultIndex;\n    const cameraElement = this.cameraElement;\n    const panelManager = this.panelManager;\n\n    // Restore index\n    cameraElement.innerHTML = panels.map(panel => panel.html).join(\"\");\n\n    // Create panels first\n    this.refreshPanels();\n    const createdPanels = panelManager.originalPanels();\n\n    // ...then order it by its index\n    const orderedPanels: Panel[] = [];\n    panels.forEach((panel, idx) => {\n      const createdPanel = createdPanels[idx];\n      createdPanel.setIndex(panel.index);\n      orderedPanels[panel.index] = createdPanel;\n    });\n    panelManager.replacePanels(orderedPanels, []);\n    panelManager.setCloneCount(0); // No clones at this point\n\n    const panelCount = panelManager.getPanelCount();\n    if (panelCount > 0) {\n      this.currentPanel = panelManager.get(status.index)\n        || panelManager.get(defaultIndex)\n        || panelManager.firstPanel();\n      this.nearestPanel = this.currentPanel;\n    } else {\n      this.currentPanel = undefined;\n      this.nearestPanel = undefined;\n    }\n    this.visiblePanels = orderedPanels.filter(panel => Boolean(panel));\n\n    this.resize();\n\n    this.axes.setTo({ flick: status.position }, 0);\n    this.moveCamera(status.position);\n  }\n\n  public calcVisiblePanels(): Panel[] {\n    const allPanels = this.panelManager.allPanels();\n    if (this.options.renderOnlyVisible) {\n      const { min, max } = this.state.visibleIndex;\n      const visiblePanels = min >= 0\n        ? allPanels.slice(min, max + 1)\n        : allPanels.slice(0, max + 1).concat(allPanels.slice(min));\n\n      return visiblePanels.filter(panel => panel);\n    } else {\n      return allPanels.filter(panel => {\n        const outsetProgress = panel.getOutsetProgress();\n\n        return outsetProgress > -1 && outsetProgress < 1;\n      });\n    }\n  }\n\n  public getCurrentPanel(): Panel | undefined {\n    return this.currentPanel;\n  }\n\n  public getCurrentIndex(): number {\n    const currentPanel = this.currentPanel;\n\n    return currentPanel\n      ? currentPanel.getIndex()\n      : -1;\n  }\n\n  public getNearestPanel(): Panel | undefined {\n    return this.nearestPanel;\n  }\n\n  // Get progress from nearest panel\n  public getCurrentProgress(): number {\n    const currentState = this.stateMachine.getState();\n    let nearestPanel = currentState.playing || currentState.holding\n      ? this.nearestPanel\n      : this.currentPanel;\n\n    const panelManager = this.panelManager;\n    if (!nearestPanel) {\n      // There're no panels\n      return NaN;\n    }\n    const { prev: prevRange, next: nextRange } = this.getScrollArea();\n    const cameraPosition = this.getCameraPosition();\n    const isOutOfBound = this.isOutOfBound();\n    let prevPanel = nearestPanel.prevSibling;\n    let nextPanel = nearestPanel.nextSibling;\n    let hangerPosition = this.getHangerPosition();\n    let nearestAnchorPos = nearestPanel.getAnchorPosition();\n\n    if (\n      isOutOfBound\n      && prevPanel\n      && nextPanel\n      && cameraPosition < nextRange\n      // On the basis of anchor, prevPanel is nearestPanel.\n      && (hangerPosition - prevPanel.getAnchorPosition() < nearestAnchorPos - hangerPosition)\n    ) {\n      nearestPanel = prevPanel;\n      nextPanel = nearestPanel.nextSibling;\n      prevPanel = nearestPanel.prevSibling;\n      nearestAnchorPos = nearestPanel.getAnchorPosition();\n    }\n    const nearestIndex = nearestPanel.getIndex() + (nearestPanel.getCloneIndex() + 1) * panelManager.getPanelCount();\n    const nearestSize = nearestPanel.getSize();\n\n    if (isOutOfBound) {\n      const relativeHangerPosition = this.getRelativeHangerPosition();\n\n      if (nearestAnchorPos > nextRange + relativeHangerPosition) {\n        // next bounce area: hangerPosition - relativeHangerPosition - nextRange\n        hangerPosition = nearestAnchorPos + hangerPosition - relativeHangerPosition - nextRange;\n      } else if (nearestAnchorPos < prevRange + relativeHangerPosition) {\n        // prev bounce area: hangerPosition - relativeHangerPosition - prevRange\n        hangerPosition = nearestAnchorPos + hangerPosition - relativeHangerPosition - prevRange;\n      }\n    }\n    const hangerIsNextToNearestPanel = hangerPosition >= nearestAnchorPos;\n    const gap = this.options.gap;\n\n    let basePosition = nearestAnchorPos;\n    let targetPosition = nearestAnchorPos;\n    if (hangerIsNextToNearestPanel) {\n      targetPosition = nextPanel\n        ? nextPanel.getAnchorPosition()\n        : nearestAnchorPos + nearestSize + gap;\n    } else {\n      basePosition = prevPanel\n        ? prevPanel.getAnchorPosition()\n        : nearestAnchorPos - nearestSize - gap;\n    }\n\n    const progressBetween = (hangerPosition - basePosition) / (targetPosition - basePosition);\n    const startIndex = hangerIsNextToNearestPanel\n      ? nearestIndex\n      : prevPanel\n        ? prevPanel.getIndex()\n        : nearestIndex - 1;\n\n    return startIndex + progressBetween;\n  }\n\n  // Update axes flick position without triggering event\n  public updateAxesPosition(position: number) {\n    const axes = this.axes;\n    axes.off();\n    axes.setTo({\n      flick: position,\n    }, 0);\n    axes.on(this.axesHandlers);\n  }\n\n  public getSize(): number {\n    return this.state.size;\n  }\n\n  public getScrollArea(): { prev: number, next: number } {\n    return this.state.scrollArea;\n  }\n\n  public isOutOfBound(): boolean {\n    const state = this.state;\n    const options = this.options;\n    const scrollArea = state.scrollArea;\n\n    return !options.circular\n      && options.bound\n      && (state.position <= scrollArea.prev || state.position >= scrollArea.next);\n  }\n\n  public canSetBoundMode(): boolean {\n    const state = this.state;\n    const options = this.options;\n    const lastPanel = this.panelManager.lastPanel();\n    if (!lastPanel) {\n      return false;\n    }\n\n    const summedPanelSize = lastPanel.getPosition() + lastPanel.getSize();\n\n    return options.bound\n      && !options.circular\n      && summedPanelSize >= state.size;\n  }\n\n  public getViewportElement(): HTMLElement {\n    return this.viewportElement;\n  }\n\n  public getCameraElement(): HTMLElement {\n    return this.cameraElement;\n  }\n\n  public getScrollAreaSize(): number {\n    const scrollArea = this.state.scrollArea;\n\n    return scrollArea.next - scrollArea.prev;\n  }\n\n  public getRelativeHangerPosition(): number {\n    return this.state.relativeHangerPosition;\n  }\n\n  public getHangerPosition(): number {\n    return this.state.position + this.state.relativeHangerPosition;\n  }\n\n  public getCameraPosition(): number {\n    return this.state.position;\n  }\n\n  public getPositionOffset(): number {\n    return this.state.positionOffset;\n  }\n\n  public getCheckedIndexes(): Array<[number, number]> {\n    return this.state.checkedIndexes;\n  }\n\n  public getVisibleIndex(): { min: number; max: number } {\n    return this.state.visibleIndex;\n  }\n\n  public getVisiblePanels(): Panel[] {\n    return this.visiblePanels;\n  }\n\n  public setCurrentPanel(panel: Panel): void {\n    this.currentPanel = panel;\n  }\n\n  public setLastIndex(index: number): void {\n    const currentPanel = this.currentPanel;\n    const panelManager = this.panelManager;\n\n    panelManager.setLastIndex(index);\n    if (currentPanel && currentPanel.getIndex() > index) {\n      this.currentPanel = panelManager.lastPanel();\n    }\n\n    this.resize();\n  }\n\n  public setVisiblePanels(panels: Panel[]): void {\n    this.visiblePanels = panels;\n  }\n\n  public connectAxesHandler(handlers: { [key: string]: (event: { [key: string]: any; }) => any }): void {\n    const axes = this.axes;\n\n    this.axesHandlers = handlers;\n    axes.on(handlers);\n  }\n\n  public addPlugins(plugins: Plugin | Plugin[]) {\n    const newPlugins = ([] as Plugin[]).concat(plugins);\n\n    newPlugins.forEach(plugin => {\n      plugin.init(this.flicking);\n    });\n\n    this.plugins = this.plugins.concat(newPlugins);\n    return this;\n  }\n\n  public removePlugins(plugins: Plugin | Plugin[]) {\n    const currentPlugins = this.plugins;\n    const removedPlugins = ([] as Plugin[]).concat(plugins);\n\n    removedPlugins.forEach(plugin => {\n      const index = currentPlugins.indexOf(plugin);\n\n      if (index > -1) {\n        currentPlugins.splice(index, 1);\n      }\n\n      plugin.destroy(this.flicking);\n    });\n    return this;\n  }\n\n  public updateCheckedIndexes(changedRange: { min: number, max: number }): void {\n    const state = this.state;\n\n    let removed = 0;\n    state.checkedIndexes.concat().forEach((indexes, idx) => {\n      const [min, max] = indexes;\n      // Can fill part of indexes in range\n      if (changedRange.min <= max && changedRange.max >= min) {\n        // Remove checked index from list\n        state.checkedIndexes.splice(idx - removed, 1);\n        removed++;\n      }\n    });\n  }\n\n  public resetVisibleIndex(): void {\n    const visibleIndex = this.state.visibleIndex;\n    visibleIndex.min = NaN;\n    visibleIndex.max = NaN;\n  }\n\n  public appendUncachedPanelElements(panels: Panel[]): void {\n    const options = this.options;\n    const fragment = document.createDocumentFragment();\n\n    if (options.isEqualSize) {\n      const prevVisiblePanels = this.visiblePanels;\n      const equalSizeClasses = options.isEqualSize as string[]; // for readability\n      const cached: { [className: string]: boolean } = {};\n\n      this.visiblePanels = [];\n\n      Object.keys(this.panelBboxes).forEach(className => {\n        cached[className] = true;\n      });\n\n      panels.forEach(panel => {\n        const overlappedClass = panel.getOverlappedClass(equalSizeClasses);\n        if (overlappedClass && !cached[overlappedClass]) {\n          if (!options.renderExternal) {\n            fragment.appendChild(panel.getElement());\n          }\n          this.visiblePanels.push(panel);\n          cached[overlappedClass] = true;\n        } else if (!overlappedClass) {\n          if (!options.renderExternal) {\n            fragment.appendChild(panel.getElement());\n          }\n          this.visiblePanels.push(panel);\n        }\n      });\n      prevVisiblePanels.forEach(panel => {\n        this.addVisiblePanel(panel);\n      });\n    } else {\n      if (!options.renderExternal) {\n        panels.forEach(panel => fragment.appendChild(panel.getElement()));\n      }\n      this.visiblePanels = panels.filter(panel => Boolean(panel));\n    }\n\n    if (!options.renderExternal) {\n      this.cameraElement.appendChild(fragment);\n    }\n  }\n\n  private updateClonePanels() {\n    const panelManager = this.panelManager;\n\n    // Clone panels in circular mode\n    if (this.options.circular && panelManager.getPanelCount() > 0) {\n      this.clonePanels();\n      this.updateClonedPanelPositions();\n    }\n    panelManager.chainAllPanels();\n  }\n\n  private getVisibleIndexOf(panel: Panel): number {\n    return findIndex(this.visiblePanels, visiblePanel => visiblePanel === panel);\n  }\n\n  private build(): void {\n    this.setElements();\n    this.applyCSSValue();\n    this.setMoveType();\n    this.setAxesInstance();\n    this.refreshPanels();\n    this.setDefaultPanel();\n    this.resize();\n    this.moveToDefaultPanel();\n  }\n\n  private setElements(): void {\n    const state = this.state;\n    const options = this.options;\n    const wrapper = this.flicking.getElement();\n    const classPrefix = options.classPrefix;\n\n    const viewportCandidate = wrapper.children[0] as HTMLElement;\n    const hasViewportElement = viewportCandidate && hasClass(viewportCandidate, `${classPrefix}-viewport`);\n\n    const viewportElement = hasViewportElement\n      ? viewportCandidate\n      : document.createElement(\"div\");\n\n    const cameraCandidate = hasViewportElement\n      ? viewportElement.children[0] as HTMLElement\n      : wrapper.children[0] as HTMLElement;\n    const hasCameraElement = cameraCandidate && hasClass(cameraCandidate, `${classPrefix}-camera`);\n\n    const cameraElement = hasCameraElement\n      ? cameraCandidate\n      : document.createElement(\"div\");\n\n    if (!hasCameraElement) {\n      cameraElement.className = `${classPrefix}-camera`;\n\n      const panelElements = hasViewportElement\n        ? viewportElement.children\n        : wrapper.children;\n\n      // Make all panels to be a child of camera element\n      // wrapper <- viewport <- camera <- panels[1...n]\n      toArray(panelElements).forEach(child => {\n        cameraElement.appendChild(child);\n      });\n    } else {\n      state.originalCameraStyle = {\n        className: cameraElement.getAttribute(\"class\"),\n        style: cameraElement.getAttribute(\"style\"),\n      };\n    }\n\n    if (!hasViewportElement) {\n      viewportElement.className = `${classPrefix}-viewport`;\n\n      // Add viewport element to wrapper\n      wrapper.appendChild(viewportElement);\n    } else {\n      state.originalViewportStyle = {\n        className: viewportElement.getAttribute(\"class\"),\n        style: viewportElement.getAttribute(\"style\"),\n      };\n    }\n\n    if (!hasCameraElement || !hasViewportElement) {\n      viewportElement.appendChild(cameraElement);\n    }\n\n    this.viewportElement = viewportElement;\n    this.cameraElement = cameraElement;\n    state.isViewportGiven = hasViewportElement;\n    state.isCameraGiven = hasCameraElement;\n  }\n\n  private applyCSSValue(): void {\n    const options = this.options;\n    const viewportElement = this.viewportElement;\n    const cameraElement = this.cameraElement;\n    const viewportStyle = this.viewportElement.style;\n\n    // Set default css values for each element\n    applyCSS(viewportElement, DEFAULT_VIEWPORT_CSS);\n    applyCSS(cameraElement, DEFAULT_CAMERA_CSS);\n\n    viewportElement.style.zIndex = `${options.zIndex}`;\n    if (options.horizontal) {\n      viewportStyle.minHeight = \"100%\";\n      viewportStyle.width = \"100%\";\n    } else {\n      viewportStyle.minWidth = \"100%\";\n      viewportStyle.height = \"100%\";\n    }\n    if (options.overflow) {\n      viewportStyle.overflow = \"visible\";\n    }\n\n    this.panelManager = new PanelManager(this.cameraElement, options);\n  }\n\n  private setMoveType(): void {\n    const moveType = this.options.moveType as MoveTypeObjectOption;\n\n    switch (moveType.type) {\n      case MOVE_TYPE.SNAP:\n        this.moveType = new Snap(moveType.count);\n        break;\n      case MOVE_TYPE.FREE_SCROLL:\n        this.moveType = new FreeScroll();\n        break;\n      default:\n        throw new Error(\"moveType is not correct!\");\n    }\n  }\n\n  private setAxesInstance(): void {\n    const state = this.state;\n    const options = this.options;\n\n    const scrollArea = state.scrollArea;\n    const horizontal = options.horizontal;\n\n    this.axes = new Axes({\n      flick: {\n        range: [scrollArea.prev, scrollArea.next],\n        circular: options.circular,\n        bounce: [0, 0], // will be updated in resize()\n      },\n    }, {\n      easing: options.panelEffect,\n      deceleration: options.deceleration,\n      interruptable: true,\n    });\n\n    this.panInput = new PanInput(this.viewportElement, {\n      inputType: options.inputType,\n      thresholdAngle: options.thresholdAngle,\n      scale: options.horizontal ? [-1, 0] : [0, -1],\n    });\n\n    this.axes.connect(horizontal ? [\"flick\", \"\"] : [\"\", \"flick\"], this.panInput);\n  }\n\n  private refreshPanels(): void {\n    const panelManager = this.panelManager;\n    // Panel elements were attached to camera element by Flicking class\n    const panelElements = this.cameraElement.children;\n\n    // Initialize panels\n    const panels = toArray(panelElements).map(\n      (el: HTMLElement, idx: number) => new Panel(el, idx, this),\n    );\n\n    panelManager.replacePanels(panels, []);\n    this.visiblePanels = panels.filter(panel => Boolean(panel));\n  }\n\n  private setDefaultPanel(): void {\n    const options = this.options;\n    const panelManager = this.panelManager;\n    const indexRange = this.panelManager.getRange();\n    const index = clamp(options.defaultIndex, indexRange.min, indexRange.max);\n\n    this.currentPanel = panelManager.get(index);\n  }\n\n  private clonePanels() {\n    const state = this.state;\n    const options = this.options;\n    const panelManager = this.panelManager;\n\n    const gap = options.gap;\n    const viewportSize = state.size;\n    const firstPanel = panelManager.firstPanel();\n    const lastPanel = panelManager.lastPanel()!;\n\n    // There're no panels exist\n    if (!firstPanel) {\n      return;\n    }\n\n    // For each panels, clone itself while last panel's position + size is below viewport size\n    const panels = panelManager.originalPanels();\n    const reversedPanels = panels.concat().reverse();\n\n    const sumOriginalPanelSize = lastPanel.getPosition() + lastPanel.getSize() - firstPanel.getPosition() + gap;\n    const relativeAnchorPosition = firstPanel.getRelativeAnchorPosition();\n    const relativeHangerPosition = this.getRelativeHangerPosition();\n\n    const areaPrev = (relativeHangerPosition - relativeAnchorPosition) % sumOriginalPanelSize;\n    let sizeSum = 0;\n    let panelAtLeftBoundary!: Panel;\n    for (const panel of reversedPanels) {\n      if (!panel) {\n        continue;\n      }\n      sizeSum += panel.getSize() + gap;\n      if (sizeSum >= areaPrev) {\n        panelAtLeftBoundary = panel;\n        break;\n      }\n    }\n\n    const areaNext = (viewportSize - relativeHangerPosition + relativeAnchorPosition) % sumOriginalPanelSize;\n    sizeSum = 0;\n    let panelAtRightBoundary!: Panel;\n    for (const panel of panels) {\n      if (!panel) {\n        continue;\n      }\n      sizeSum += panel.getSize() + gap;\n      if (sizeSum >= areaNext) {\n        panelAtRightBoundary = panel;\n        break;\n      }\n    }\n\n    // Need one more set of clones on prev area of original panel 0\n    const needCloneOnPrev = panelAtLeftBoundary.getIndex() !== 0\n      && panelAtLeftBoundary.getIndex() <= panelAtRightBoundary.getIndex();\n\n    // Visible count of panel 0 on first screen\n    const panel0OnFirstscreen = Math.ceil((relativeHangerPosition + firstPanel.getSize() - relativeAnchorPosition) / sumOriginalPanelSize)\n      + Math.ceil((viewportSize - relativeHangerPosition + relativeAnchorPosition) / sumOriginalPanelSize)\n      - 1; // duplication\n\n    const cloneCount = panel0OnFirstscreen\n      + (needCloneOnPrev ? 1 : 0);\n    const prevCloneCount = panelManager.getCloneCount();\n\n    panelManager.setCloneCount(cloneCount);\n    if (options.renderExternal) {\n      return;\n    }\n\n    if (cloneCount > prevCloneCount) {\n      // should clone more\n      for (let cloneIndex = prevCloneCount; cloneIndex < cloneCount; cloneIndex++) {\n        const clones = panels.map(origPanel => origPanel.clone(cloneIndex));\n        const fragment = document.createDocumentFragment();\n        clones.forEach(panel => fragment.appendChild(panel.getElement()));\n\n        this.cameraElement.appendChild(fragment);\n        this.visiblePanels.push(...clones.filter(clone => Boolean(clone)));\n        panelManager.insertClones(cloneIndex, 0, clones);\n      }\n    } else if (cloneCount < prevCloneCount) {\n      // should remove some\n      panelManager.removeClonesAfter(cloneCount);\n    }\n  }\n\n  private moveToDefaultPanel(): void {\n    const state = this.state;\n    const panelManager = this.panelManager;\n    const options = this.options;\n    const indexRange = this.panelManager.getRange();\n\n    const defaultIndex = clamp(options.defaultIndex, indexRange.min, indexRange.max);\n    const defaultPanel = panelManager.get(defaultIndex);\n\n    let defaultPosition = 0;\n    if (defaultPanel) {\n      defaultPosition = defaultPanel.getAnchorPosition() - state.relativeHangerPosition;\n      defaultPosition = this.canSetBoundMode()\n        ? clamp(defaultPosition, state.scrollArea.prev, state.scrollArea.next)\n        : defaultPosition;\n    }\n\n    this.moveCamera(defaultPosition);\n    this.axes.setTo({ flick: defaultPosition }, 0);\n  }\n\n  private updateSize(): void {\n    const state = this.state;\n    const options = this.options;\n    const panels = this.panelManager.originalPanels()\n      .filter(panel => Boolean(panel));\n    const bbox = this.updateBbox();\n\n    const prevSize = state.size;\n    // Update size & hanger position\n    state.size = options.horizontal\n      ? bbox.width\n      : bbox.height;\n\n    if (prevSize !== state.size) {\n      state.relativeHangerPosition = parseArithmeticExpression(options.hanger, state.size);\n      state.infiniteThreshold = parseArithmeticExpression(options.infiniteThreshold, state.size);\n    }\n\n    if (panels.length <= 0) {\n      return;\n    }\n\n    this.resizePanels(panels);\n  }\n\n  private updateOriginalPanelPositions(): void {\n    const gap = this.options.gap;\n    const panelManager = this.panelManager;\n\n    const firstPanel = panelManager.firstPanel();\n    const panels = panelManager.originalPanels();\n\n    if (!firstPanel) {\n      return;\n    }\n\n    const currentPanel = this.currentPanel!;\n    const nearestPanel = this.nearestPanel;\n    const currentState = this.stateMachine.getState();\n    const scrollArea = this.state.scrollArea;\n\n    // Update panel position && fit to wrapper\n    let nextPanelPos = firstPanel.getPosition();\n    let maintainingPanel: Panel = firstPanel;\n    if (nearestPanel) {\n      // We should maintain nearestPanel's position\n      const looped = !isBetween(currentState.lastPosition + currentState.delta, scrollArea.prev, scrollArea.next);\n\n      maintainingPanel = looped\n        ? currentPanel\n        : nearestPanel;\n    } else if (firstPanel.getIndex() > 0) {\n      maintainingPanel = currentPanel;\n    }\n\n    const panelsBeforeMaintainPanel = panels.slice(0, maintainingPanel.getIndex() + (maintainingPanel.getCloneIndex() + 1) * panels.length);\n    const accumulatedSize = panelsBeforeMaintainPanel.reduce((total, panel) => {\n      return total + panel.getSize() + gap;\n    }, 0);\n\n    nextPanelPos = maintainingPanel.getPosition() - accumulatedSize;\n\n    panels.forEach(panel => {\n      const newPosition = nextPanelPos;\n      const panelSize = panel.getSize();\n\n      panel.setPosition(newPosition);\n      nextPanelPos += panelSize + gap;\n    });\n\n    if (!this.options.renderOnlyVisible) {\n      panels.forEach(panel => panel.setPositionCSS());\n    }\n  }\n\n  private updateClonedPanelPositions(): void {\n    const state = this.state;\n    const options = this.options;\n    const panelManager = this.panelManager;\n    const clonedPanels = panelManager.clonedPanels()\n      .reduce((allClones, clones) => [...allClones, ...clones], [])\n      .filter(panel => Boolean(panel));\n\n    const scrollArea = state.scrollArea;\n\n    const firstPanel = panelManager.firstPanel();\n    const lastPanel = panelManager.lastPanel()!;\n\n    if (!firstPanel) {\n      return;\n    }\n\n    const sumOriginalPanelSize = lastPanel.getPosition() + lastPanel.getSize() - firstPanel.getPosition() + options.gap;\n\n    // Locate all cloned panels linearly first\n    for (const panel of clonedPanels) {\n      const origPanel = panel.getOriginalPanel();\n      const cloneIndex = panel.getCloneIndex();\n      const cloneBasePos = sumOriginalPanelSize * (cloneIndex + 1);\n      const clonedPanelPos = cloneBasePos + origPanel.getPosition();\n\n      panel.setPosition(clonedPanelPos);\n    }\n\n    let lastReplacePosition = firstPanel.getPosition();\n    // reverse() pollutes original array, so copy it with concat()\n    for (const panel of clonedPanels.concat().reverse()) {\n      const panelSize = panel.getSize();\n      const replacePosition = lastReplacePosition - panelSize - options.gap;\n\n      if (replacePosition + panelSize <= scrollArea.prev) {\n        // Replace is not meaningful, as it won't be seen in current scroll area\n        break;\n      }\n\n      panel.setPosition(replacePosition);\n      lastReplacePosition = replacePosition;\n    }\n\n    if (!this.options.renderOnlyVisible) {\n      clonedPanels.forEach(panel => {\n        panel.setPositionCSS();\n      });\n    }\n  }\n\n  private updateScrollArea(): void {\n    const state = this.state;\n    const panelManager = this.panelManager;\n    const options = this.options;\n    const axes = this.axes;\n\n    // Set viewport scrollable area\n    const firstPanel = panelManager.firstPanel();\n    const lastPanel = panelManager.lastPanel() as Panel;\n    const relativeHangerPosition = state.relativeHangerPosition;\n\n    if (!firstPanel) {\n      state.scrollArea = {\n        prev: 0,\n        next: 0,\n      };\n    } else if (this.canSetBoundMode()) {\n      state.scrollArea = {\n        prev: firstPanel.getPosition(),\n        next: lastPanel.getPosition() + lastPanel.getSize() - state.size,\n      };\n    } else if (options.circular) {\n      const sumOriginalPanelSize = lastPanel.getPosition() + lastPanel.getSize() - firstPanel.getPosition() + options.gap;\n\n      // Maximum scroll extends to first clone sequence's first panel\n      state.scrollArea = {\n        prev: firstPanel.getAnchorPosition() - relativeHangerPosition,\n        next: sumOriginalPanelSize + firstPanel.getAnchorPosition() - relativeHangerPosition,\n      };\n    } else {\n      state.scrollArea = {\n        prev: firstPanel.getAnchorPosition() - relativeHangerPosition,\n        next: lastPanel.getAnchorPosition() - relativeHangerPosition,\n      };\n    }\n\n    const viewportSize = state.size;\n    const bounce = options.bounce;\n\n    let parsedBounce: number[];\n    if (isArray(bounce)) {\n      parsedBounce = (bounce as string[]).map(val => parseArithmeticExpression(val, viewportSize, DEFAULT_OPTIONS.bounce as number));\n    } else {\n      const parsedVal = parseArithmeticExpression(bounce as number | string, viewportSize, DEFAULT_OPTIONS.bounce as number);\n      parsedBounce = [parsedVal, parsedVal];\n    }\n\n    // Update axes range and bounce\n    const flick = axes.axis.flick;\n    flick.range = [state.scrollArea.prev, state.scrollArea.next];\n    flick.bounce = parsedBounce;\n  }\n\n  // Update camera position after resizing\n  private updateCameraPosition(): void {\n    const state = this.state;\n    const currentPanel = this.getCurrentPanel();\n    const currentState = this.stateMachine.getState();\n    const isFreeScroll = this.moveType.is(MOVE_TYPE.FREE_SCROLL);\n    const relativeHangerPosition = this.getRelativeHangerPosition();\n    const halfGap = this.options.gap / 2;\n\n    if (currentState.holding || currentState.playing) {\n      this.updateVisiblePanels();\n      return;\n    }\n\n    let newPosition: number;\n    if (isFreeScroll) {\n      const nearestPanel = this.getNearestPanel();\n\n      newPosition = nearestPanel\n        ? nearestPanel.getPosition() - halfGap + (nearestPanel.getSize() + 2 * halfGap) * state.panelMaintainRatio - relativeHangerPosition\n        : this.getCameraPosition();\n    } else {\n      newPosition = currentPanel\n        ? currentPanel.getAnchorPosition() - relativeHangerPosition\n        : this.getCameraPosition();\n    }\n\n    if (this.canSetBoundMode()) {\n      newPosition = clamp(newPosition, state.scrollArea.prev, state.scrollArea.next);\n    }\n\n    // Pause & resume axes to prevent axes's \"change\" event triggered\n    // This should be done before moveCamera, as moveCamera can trigger needPanel\n    this.updateAxesPosition(newPosition);\n\n    this.moveCamera(newPosition);\n  }\n\n  private checkNeedPanel(axesEvent?: any): void {\n    const state = this.state;\n    const options = this.options;\n    const panelManager = this.panelManager;\n    const currentPanel = this.currentPanel;\n    const nearestPanel = this.nearestPanel;\n    const currentState = this.stateMachine.getState();\n\n    if (!options.infinite) {\n      return;\n    }\n\n    const gap = options.gap;\n    const infiniteThreshold = state.infiniteThreshold;\n    const maxLastIndex = panelManager.getLastIndex();\n\n    if (maxLastIndex < 0) {\n      return;\n    }\n\n    if (!currentPanel || !nearestPanel) {\n      // There're no panels\n      this.triggerNeedPanel({\n        axesEvent,\n        siblingPanel: null,\n        direction: null,\n        indexRange: {\n          min: 0,\n          max: maxLastIndex,\n          length: maxLastIndex + 1,\n        },\n      });\n      return;\n    }\n\n    const originalNearestPosition = nearestPanel.getPosition();\n\n    // Check next direction\n    let checkingPanel: Panel | null = !currentState.holding && !currentState.playing\n      ? currentPanel\n      : nearestPanel;\n\n    while (checkingPanel) {\n      const currentIndex = checkingPanel.getIndex();\n      const nextSibling = checkingPanel.nextSibling;\n      const lastPanel = panelManager.lastPanel()!;\n      const atLastPanel = currentIndex === lastPanel.getIndex();\n      const nextIndex = !atLastPanel && nextSibling\n        ? nextSibling.getIndex()\n        : maxLastIndex + 1;\n      const currentNearestPosition = nearestPanel.getPosition();\n      const panelRight = checkingPanel.getPosition() + checkingPanel.getSize() - (currentNearestPosition - originalNearestPosition);\n      const cameraNext = state.position + state.size;\n\n      // There're empty panels between\n      const emptyPanelExistsBetween = (nextIndex - currentIndex > 1);\n      // Expected prev panel's left position is smaller than camera position\n      const overThreshold = panelRight + gap - infiniteThreshold <= cameraNext;\n\n      if (emptyPanelExistsBetween && overThreshold) {\n        this.triggerNeedPanel({\n          axesEvent,\n          siblingPanel: checkingPanel,\n          direction: DIRECTION.NEXT,\n          indexRange: {\n            min: currentIndex + 1,\n            max: nextIndex - 1,\n            length: nextIndex - currentIndex - 1,\n          },\n        });\n      }\n\n      // Trigger needPanel in circular & at max panel index\n      if (options.circular && currentIndex === maxLastIndex && overThreshold) {\n        const firstPanel = panelManager.firstPanel();\n        const firstIndex = firstPanel\n          ? firstPanel.getIndex()\n          : -1;\n\n        if (firstIndex > 0) {\n          this.triggerNeedPanel({\n            axesEvent,\n            siblingPanel: checkingPanel,\n            direction: DIRECTION.NEXT,\n            indexRange: {\n              min: 0,\n              max: firstIndex - 1,\n              length: firstIndex,\n            },\n          });\n        }\n      }\n\n      // Check whether panels are changed\n      const lastPanelAfterNeed = panelManager.lastPanel()!;\n      const atLastPanelAfterNeed = lastPanelAfterNeed && currentIndex === lastPanelAfterNeed.getIndex();\n\n      if (atLastPanelAfterNeed || !overThreshold) {\n        break;\n      }\n\n      checkingPanel = checkingPanel.nextSibling;\n    }\n\n    // Check prev direction\n    checkingPanel = nearestPanel;\n    while (checkingPanel) {\n      const cameraPrev = state.position;\n      const checkingIndex = checkingPanel.getIndex();\n      const prevSibling = checkingPanel.prevSibling;\n      const firstPanel = panelManager.firstPanel()!;\n      const atFirstPanel = checkingIndex === firstPanel.getIndex();\n      const prevIndex = !atFirstPanel && prevSibling\n        ? prevSibling.getIndex()\n        : -1;\n      const currentNearestPosition = nearestPanel.getPosition();\n      const panelLeft = checkingPanel.getPosition() - (currentNearestPosition - originalNearestPosition);\n\n      // There're empty panels between\n      const emptyPanelExistsBetween = checkingIndex - prevIndex > 1;\n      // Expected prev panel's right position is smaller than camera position\n      const overThreshold = panelLeft - gap + infiniteThreshold >= cameraPrev;\n      if (emptyPanelExistsBetween && overThreshold) {\n        this.triggerNeedPanel({\n          axesEvent,\n          siblingPanel: checkingPanel,\n          direction: DIRECTION.PREV,\n          indexRange: {\n            min: prevIndex + 1,\n            max: checkingIndex - 1,\n            length: checkingIndex - prevIndex - 1,\n          },\n        });\n      }\n\n      // Trigger needPanel in circular & at panel 0\n      if (options.circular && checkingIndex === 0 && overThreshold) {\n        const lastPanel = panelManager.lastPanel();\n\n        if (lastPanel && lastPanel.getIndex() < maxLastIndex) {\n          const lastIndex = lastPanel.getIndex();\n\n          this.triggerNeedPanel({\n            axesEvent,\n            siblingPanel: checkingPanel,\n            direction: DIRECTION.PREV,\n            indexRange: {\n              min: lastIndex + 1,\n              max: maxLastIndex,\n              length: maxLastIndex - lastIndex,\n            },\n          });\n        }\n      }\n\n      // Check whether panels were changed\n      const firstPanelAfterNeed = panelManager.firstPanel();\n      const atFirstPanelAfterNeed = firstPanelAfterNeed && checkingIndex === firstPanelAfterNeed.getIndex();\n\n      // Looped in circular mode\n      if (atFirstPanelAfterNeed || !overThreshold) {\n        break;\n      }\n\n      checkingPanel = checkingPanel.prevSibling;\n    }\n  }\n\n  private triggerNeedPanel(params: {\n    axesEvent: any;\n    siblingPanel: Panel | null,\n    direction: FlickingEvent[\"direction\"];\n    indexRange: NeedPanelEvent[\"range\"];\n  }): void {\n    const { axesEvent, siblingPanel, direction, indexRange } = params;\n    const options = this.options;\n    const checkedIndexes = this.state.checkedIndexes;\n    const alreadyTriggered = checkedIndexes.some(([min, max]) => min === indexRange.min || max === indexRange.max);\n    const hasHandler = this.flicking.hasOn(EVENTS.NEED_PANEL);\n\n    if (alreadyTriggered || !hasHandler) {\n      return;\n    }\n\n    // Should done before triggering event, as we can directly add panels by event callback\n    checkedIndexes.push([indexRange.min, indexRange.max]);\n\n    const index = siblingPanel\n      ? siblingPanel.getIndex()\n      : 0;\n    const isTrusted = axesEvent\n      ? axesEvent.isTrusted\n      : false;\n\n    this.triggerEvent(\n      EVENTS.NEED_PANEL,\n      axesEvent,\n      isTrusted,\n      {\n        index,\n        panel: siblingPanel,\n        direction,\n        range: indexRange,\n        fill: (element: ElementLike | ElementLike[]) => {\n          const panelManager = this.panelManager;\n          if (!siblingPanel) {\n            return this.insert(panelManager.getRange().max + 1, element);\n          }\n\n          const parsedElements = parseElement(element);\n          // Slice elements to fit size equal to empty spaces\n          const elements = direction === DIRECTION.NEXT\n            ? parsedElements.slice(0, indexRange.length)\n            : parsedElements.slice(-indexRange.length);\n\n          if (direction === DIRECTION.NEXT) {\n            if (options.circular && index === panelManager.getLastIndex()) {\n              // needPanel event is triggered on last index, insert at index 0\n              return this.insert(0, elements);\n            } else {\n              return siblingPanel.insertAfter(elements);\n            }\n          } else if (direction === DIRECTION.PREV) {\n            if (options.circular && index === 0) {\n              // needPanel event is triggered on first index(0), insert at the last index\n              return this.insert(indexRange.max - elements.length + 1, elements);\n            } else {\n              return siblingPanel.insertBefore(elements);\n            }\n          } else {\n            // direction is null when there're no panels exist\n            return this.insert(0, elements);\n          }\n        },\n      } as Partial<NeedPanelEvent>,\n    );\n  }\n\n  private updateVisiblePanels() {\n    const state = this.state;\n    const options = this.options;\n    const cameraElement = this.cameraElement;\n    const visibleIndex = state.visibleIndex;\n    const { renderExternal, renderOnlyVisible } = options;\n    if (!renderOnlyVisible) {\n      return;\n    }\n\n    if (!this.nearestPanel) {\n      this.resetVisibleIndex();\n      while (cameraElement.firstChild) {\n        cameraElement.removeChild(cameraElement.firstChild);\n      }\n      return;\n    }\n\n    const newVisibleIndex = this.calcNewVisiblePanelIndex();\n\n    if (newVisibleIndex.min !== visibleIndex.min || newVisibleIndex.max !== visibleIndex.max) {\n      state.visibleIndex = newVisibleIndex;\n      if (isNaN(newVisibleIndex.min) || isNaN(newVisibleIndex.max)) {\n        return;\n      }\n\n      const prevVisiblePanels = this.visiblePanels;\n      const newVisiblePanels = this.calcVisiblePanels();\n\n      const { addedPanels, removedPanels } = this.checkVisiblePanelChange(prevVisiblePanels, newVisiblePanels);\n\n      if (newVisiblePanels.length > 0) {\n        const firstVisiblePanelPos = newVisiblePanels[0].getPosition();\n        state.positionOffset = firstVisiblePanelPos;\n      }\n\n      newVisiblePanels.forEach(panel => {\n        panel.setPositionCSS(state.positionOffset);\n      });\n\n      if (!renderExternal) {\n        removedPanels.forEach(panel => {\n          const panelElement = panel.getElement();\n          panelElement.parentNode && cameraElement.removeChild(panelElement);\n        });\n\n        const fragment = document.createDocumentFragment();\n        addedPanels.forEach(panel => {\n          fragment.appendChild(panel.getElement());\n        });\n\n        cameraElement.appendChild(fragment);\n      }\n      this.visiblePanels = newVisiblePanels;\n\n      this.flicking.trigger(EVENTS.VISIBLE_CHANGE, {\n        type: EVENTS.VISIBLE_CHANGE,\n        range: {\n          min: newVisibleIndex.min,\n          max: newVisibleIndex.max,\n        },\n      });\n    } else {\n      this.visiblePanels.forEach(panel => panel.setPositionCSS(state.positionOffset));\n    }\n  }\n\n  private calcNewVisiblePanelIndex() {\n    const cameraPos = this.getCameraPosition();\n    const viewportSize = this.getSize();\n    const basePanel = this.nearestPanel!;\n    const panelManager = this.panelManager;\n    const allPanelCount = panelManager.getRange().max + 1;\n    const cloneCount = panelManager.getCloneCount();\n\n    const checkLastPanel = (\n      panel: Panel,\n      getNextPanel: (panel: Panel) => Panel | null,\n      isOutOfViewport: (panel: Panel) => boolean,\n    ): Panel => {\n      let lastPanel = panel;\n      while (true) {\n        const nextPanel = getNextPanel(lastPanel);\n        if (!nextPanel || isOutOfViewport(nextPanel)) {\n          break;\n        }\n        lastPanel = nextPanel;\n      }\n      return lastPanel;\n    };\n\n    const lastPanelOfNextDir = checkLastPanel(basePanel, panel => {\n      const nextPanel = panel.nextSibling;\n\n      if (nextPanel && nextPanel.getPosition() >= panel.getPosition()) {\n        return nextPanel;\n      } else {\n        return null;\n      }\n    }, panel => panel.getPosition() >= cameraPos + viewportSize);\n\n    const lastPanelOfPrevDir = checkLastPanel(basePanel, panel => {\n      const prevPanel = panel.prevSibling;\n\n      if (prevPanel && prevPanel.getPosition() <= panel.getPosition()) {\n        return prevPanel;\n      } else {\n        return null;\n      }\n    }, panel => panel.getPosition() + panel.getSize() <= cameraPos);\n\n    const minPanelCloneIndex = lastPanelOfPrevDir.getCloneIndex();\n    const maxPanelCloneOffset = allPanelCount * (lastPanelOfNextDir.getCloneIndex() + 1);\n    const minPanelCloneOffset = minPanelCloneIndex > -1\n      ? allPanelCount * (cloneCount - minPanelCloneIndex)\n      : 0;\n\n    const newVisibleIndex = {\n      // Relative index including clone, can be negative number\n      min: basePanel.getCloneIndex() > -1\n        ? lastPanelOfPrevDir.getIndex() + minPanelCloneOffset\n        : lastPanelOfPrevDir.getIndex() - minPanelCloneOffset,\n      // Relative index including clone\n      max: lastPanelOfNextDir.getIndex() + maxPanelCloneOffset,\n    };\n\n    // Stopped on first cloned first panel\n    if (lastPanelOfPrevDir.getIndex() === 0 && lastPanelOfPrevDir.getCloneIndex() === 0) {\n      newVisibleIndex.min = allPanelCount;\n    }\n\n    return newVisibleIndex;\n  }\n\n  private checkVisiblePanelChange(prevVisiblePanels: Panel[], newVisiblePanels: Panel[]) {\n    const prevRefCount = prevVisiblePanels.map(() => 0);\n    const newRefCount = newVisiblePanels.map(() => 0);\n\n    prevVisiblePanels.forEach((prevPanel, prevIndex) => {\n      newVisiblePanels.forEach((newPanel, newIndex) => {\n        if (prevPanel === newPanel) {\n          prevRefCount[prevIndex]++;\n          newRefCount[newIndex]++;\n        }\n      });\n    });\n\n    const removedPanels = prevRefCount.reduce((removed: Panel[], count, index) => {\n      return count === 0\n        ? [...removed, prevVisiblePanels[index]]\n        : removed;\n    }, []);\n    const addedPanels = newRefCount.reduce((added: Panel[], count, index) => {\n      return count === 0\n        ? [...added, newVisiblePanels[index]]\n        : added;\n    }, []);\n\n    return { removedPanels, addedPanels };\n  }\n\n  private resizePanels(panels: Panel[]): void {\n    const options = this.options;\n    const panelBboxes = this.panelBboxes;\n\n    if (options.isEqualSize === true) {\n      if (!panelBboxes.default) {\n        const defaultPanel = panels[0];\n        panelBboxes.default = defaultPanel.getBbox();\n      }\n\n      const defaultBbox = panelBboxes.default;\n\n      panels.forEach(panel => {\n        panel.resize(defaultBbox);\n      });\n      return;\n    } else if (options.isEqualSize) {\n      const equalSizeClasses = options.isEqualSize;\n\n      panels.forEach(panel => {\n        const overlappedClass = panel.getOverlappedClass(equalSizeClasses);\n        if (overlappedClass) {\n          panel.resize(panelBboxes[overlappedClass]);\n          panelBboxes[overlappedClass] = panel.getBbox();\n        } else {\n          panel.resize();\n        }\n      });\n      return;\n    }\n    panels.forEach(panel => {\n      panel.resize();\n    });\n  }\n}\n","import { isBrowser } from \"../consts\";\n\nconst tid = \"UA-70842526-24\";\nconst cid = (Math.random() * Math.pow(10, 20)) / Math.pow(10, 10);\n\nexport function sendEvent(category: string, action: string, label: any) {\n  if (!isBrowser) {\n    return;\n  }\n\n  try {\n    const innerWidth = window.innerWidth;\n    const innerHeight = window.innerHeight;\n    const screen = window.screen || { width: innerWidth, height: innerHeight };\n    const collectInfos = [\n      \"v=1\",\n      \"t=event\",\n      `dl=${location.href}`,\n      `ul=${(navigator.language || \"en-us\").toLowerCase()}`,\n      `de=${document.charset || document.inputEncoding || document.characterSet || \"utf-8\"}`,\n      `dr=${document.referrer}`,\n      `dt=${document.title}`,\n      `sr=${screen.width}x${screen.height}`,\n      `vp=${innerWidth}x${innerHeight}`,\n      `ec=${category}`,\n      `ea=${action}`,\n      `el=${JSON.stringify(label)}`,\n      `cid=${cid}`,\n      `tid=${tid}`,\n      \"cd1=#__VERSION__#\",\n      `z=${Math.floor(Math.random() * 10000000)}`,\n    ];\n    const req = new XMLHttpRequest();\n    req.open(\"GET\", `https://www.google-analytics.com/collect?${collectInfos.join(\"&\")}`);\n    req.send();\n  } catch (e) {}\n}\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport Component from \"@egjs/component\";\nimport Viewport from \"./components/Viewport\";\nimport Panel from \"./components/Panel\";\n\nimport { merge, getProgress, parseElement, isString, counter, findIndex } from \"./utils\";\nimport { DEFAULT_OPTIONS, EVENTS, DIRECTION, AXES_EVENTS, STATE_TYPE, DEFAULT_MOVE_TYPE_OPTIONS } from \"./consts\";\nimport { FlickingOptions, FlickingEvent, Direction, EventType, FlickingPanel, TriggerCallback, FlickingContext, FlickingStatus, Plugin, ElementLike, DestroyOption, BeforeSyncResult, SyncResult } from \"./types\";\nimport { sendEvent } from \"./ga/ga\";\nimport { DiffResult } from \"@egjs/list-differ\";\n\n/**\n * @memberof eg\n * @extends eg.Component\n * @support {\"ie\": \"10+\", \"ch\" : \"latest\", \"ff\" : \"latest\",  \"sf\" : \"latest\" , \"edge\" : \"latest\", \"ios\" : \"7+\", \"an\" : \"4.X+\"}\n * @requires {@link https://github.com/naver/egjs-component|eg.Component}\n * @requires {@link https://github.com/naver/egjs-axes|eg.Axes}\n * @see Easing Functions Cheat Sheet {@link http://easings.net/} <ko>이징 함수 Cheat Sheet {@link http://easings.net/}</ko>\n */\nclass Flicking extends Component {\n  /**\n   * Version info string\n   * @ko 버전정보 문자열\n   * @example\n   * eg.Flicking.VERSION;  // ex) 3.0.0\n   * @memberof eg.Flicking\n   */\n  public static VERSION: string = \"#__VERSION__#\";\n  /**\n   * Direction constant - \"PREV\" or \"NEXT\"\n   * @ko 방향 상수 - \"PREV\" 또는 \"NEXT\"\n   * @type {object}\n   * @property {\"PREV\"} PREV - Prev direction from current hanger position.<br/>It's `left(←️)` direction when `horizontal: true`.<br/>Or, `up(↑️)` direction when `horizontal: false`.<ko>현재 행어를 기준으로 이전 방향.<br/>`horizontal: true`일 경우 `왼쪽(←️)` 방향.<br/>`horizontal: false`일 경우 `위쪽(↑️)`방향이다.</ko>\n   * @property {\"NEXT\"} NEXT - Next direction from current hanger position.<br/>It's `right(→)` direction when `horizontal: true`.<br/>Or, `down(↓️)` direction when `horizontal: false`.<ko>현재 행어를 기준으로 다음 방향.<br/>`horizontal: true`일 경우 `오른쪽(→)` 방향.<br/>`horizontal: false`일 경우 `아래쪽(↓️)`방향이다.</ko>\n   * @example\n   * eg.Flicking.DIRECTION.PREV; // \"PREV\"\n   * eg.Flicking.DIRECTION.NEXT; // \"NEXT\"\n   */\n  public static DIRECTION: Direction = DIRECTION;\n\n  /**\n   * Event type object with event name strings.\n   * @ko 이벤트 이름 문자열들을 담은 객체\n   * @type {object}\n   * @property {\"holdStart\"} HOLD_START - holdStart event<ko>holdStart 이벤트</ko>\n   * @property {\"holdEnd\"} HOLD_END - holdEnd event<ko>holdEnd 이벤트</ko>\n   * @property {\"moveStart\"} MOVE_START - moveStart event<ko>moveStart 이벤트</ko>\n   * @property {\"move\"} MOVE - move event<ko>move 이벤트</ko>\n   * @property {\"moveEnd\"} MOVE_END - moveEnd event<ko>moveEnd 이벤트</ko>\n   * @property {\"change\"} CHANGE - change event<ko>change 이벤트</ko>\n   * @property {\"restore\"} RESTORE - restore event<ko>restore 이벤트</ko>\n   * @property {\"select\"} SELECT - select event<ko>select 이벤트</ko>\n   * @property {\"needPanel\"} NEED_PANEL - needPanel event<ko>needPanel 이벤트</ko>\n   * @example\n   * eg.Flicking.EVENTS.MOVE_START; // \"MOVE_START\"\n   */\n  public static EVENTS: EventType = EVENTS;\n\n  public options: FlickingOptions;\n\n  private wrapper: HTMLElement;\n  private viewport: Viewport;\n  private eventContext: FlickingContext;\n  private isPanelChangedAtBeforeSync: boolean = false;\n\n  /**\n   * @param element A base element for the eg.Flicking module. When specifying a value as a `string` type, you must specify a css selector string to select the element.<ko>eg.Flicking 모듈을 사용할 기준 요소. `string`타입으로 값 지정시 요소를 선택하기 위한 css 선택자 문자열을 지정해야 한다.</ko>\n   * @param options An option object of the eg.Flicking module<ko>eg.Flicking 모듈의 옵션 객체</ko>\n   * @param {string} [options.classPrefix=\"eg-flick\"] A prefix of class names will be added for the panels, viewport, and camera.<ko>패널들과 뷰포트, 카메라에 추가될 클래스 이름의 접두사.</ko>\n   * @param {number} [options.deceleration=0.0075] Deceleration value for panel movement animation for animation triggered by manual user input. A higher value means a shorter running time.<ko>사용자의 동작으로 가속도가 적용된 패널 이동 애니메이션의 감속도. 값이 높을수록 애니메이션 실행 시간이 짧아진다.</ko>\n   * @param {boolean} [options.horizontal=true] The direction of panel movement. (true: horizontal, false: vertical)<ko>패널 이동 방향. (true: 가로방향, false: 세로방향)</ko>\n   * @param {boolean} [options.circular=false] Enables circular mode, which connects first/last panel for continuous scrolling.<ko>순환 모드를 활성화한다. 순환 모드에서는 양 끝의 패널이 서로 연결되어 끊김없는 스크롤이 가능하다.</ko>\n   * @param {boolean} [options.infinite=false] Enables infinite mode, which can automatically trigger needPanel until reaching the last panel's index reaches the lastIndex.<ko>무한 모드를 활성화한다. 무한 모드에서는 needPanel 이벤트를 자동으로 트리거한다. 해당 동작은 마지막 패널의 인덱스가 lastIndex와 일치할때까지 일어난다.</ko>\n   * @param {number} [options.infiniteThreshold=0] A Threshold from viewport edge before triggering `needPanel` event in infinite mode.<ko>무한 모드에서 `needPanel`이벤트가 발생하기 위한 뷰포트 끝으로부터의 최대 거리.</ko>\n   * @param {number} [options.lastIndex=Infinity] Maximum panel index that Flicking can set. Flicking won't trigger `needPanel` when the event's panel index is greater than it.<br/>Also, if the last panel's index reached a given index, you can't add more panels.<ko>Flicking이 설정 가능한 패널의 최대 인덱스. `needPanel` 이벤트에 지정된 인덱스가 최대 패널의 개수보다 같거나 커야 하는 경우에 이벤트를 트리거하지 않게 한다.<br>또한, 마지막 패널의 인덱스가 주어진 인덱스와 동일할 경우, 새로운 패널을 더 이상 추가할 수 없다.</ko>\n   * @param {number} [options.threshold=40] Movement threshold to change panel(unit: pixel). It should be dragged above the threshold to change the current panel.<ko>패널 변경을 위한 이동 임계값 (단위: 픽셀). 주어진 값 이상으로 스크롤해야만 패널 변경이 가능하다.</ko>\n   * @param {number} [options.duration=100] Duration of the panel movement animation. (unit: ms)<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>\n   * @param {function} [options.panelEffect=x => 1 - Math.pow(1 - x, 3)] An easing function applied to the panel movement animation. Default value is `easeOutCubic`.<ko>패널 이동 애니메이션에 적용할 easing함수. 기본값은 `easeOutCubic`이다.</ko>\n   * @param {number} [options.defaultIndex=0] Index of the panel to set as default when initializing. A zero-based integer.<ko>초기화시 지정할 디폴트 패널의 인덱스로, 0부터 시작하는 정수.</ko>\n   * @param {string[]} [options.inputType=[\"touch,\"mouse\"]] Types of input devices to enable.({@link https://naver.github.io/egjs-axes/release/latest/doc/global.html#PanInputOption Reference})<ko>활성화할 입력 장치 종류. ({@link https://naver.github.io/egjs-axes/release/latest/doc/global.html#PanInputOption 참고})</ko>\n   * @param {number} [options.thresholdAngle=45] The threshold angle value(0 ~ 90).<br>If the input angle from click/touched position is above or below this value in horizontal and vertical mode each, scrolling won't happen.<ko>스크롤 동작을 막기 위한 임계각(0 ~ 90).<br>클릭/터치한 지점으로부터 계산된 사용자 입력의 각도가 horizontal/vertical 모드에서 각각 크거나 작으면, 스크롤 동작이 이루어지지 않는다.</ko>\n   * @param {number|string|number[]|string[]} [options.bounce=[10,10]] The size value of the bounce area. Only can be enabled when `circular=false`.<br>You can set different bounce value for prev/next direction by using array.<br>`number` for px value, and `string` for px, and % value relative to viewport size.(ex - 0, \"10px\", \"20%\")<ko>바운스 영역의 크기값. `circular=false`인 경우에만 사용할 수 있다.<br>배열을 통해 prev/next 방향에 대해 서로 다른 바운스 값을 지정 가능하다.<br>`number`를 통해 px값을, `stirng`을 통해 px 혹은 뷰포트 크기 대비 %값을 사용할 수 있다.(ex - 0, \"10px\", \"20%\")</ko>\n   * @param {boolean} [options.autoResize=false] Whether the `resize` method should be called automatically after a window resize event.<ko>window의 `resize` 이벤트 이후 자동으로 resize()메소드를 호출할지의 여부.</ko>\n   * @param {boolean} [options.adaptive=false] Whether the height(horizontal)/width(vertical) of the viewport element reflects the height/width value of the panel after completing the movement.<ko>목적 패널로 이동한 후 그 패널의 높이(horizontal)/너비(vertical)값을 뷰포트 요소의 높이/너비값에 반영할지 여부.</ko>\n   * @param {number|\"\"} [options.zIndex=2000] z-index value for viewport element.<ko>뷰포트 엘리먼트의 z-index 값.</ko>\n   * @param {boolean} [options.bound=false] Prevent the view from going out of the first/last panel. Only can be enabled when `circular=false`.<ko>뷰가 첫번째와 마지막 패널 밖으로 나가는 것을 막아준다. `circular=false`인 경우에만 사용할 수 있다.</ko>\n   * @param {boolean} [options.overflow=false] Disables CSS property `overflow: hidden` in viewport if `true`.<ko>`true`로 설정시 뷰포트에 `overflow: hidden` 속성을 해제한다.</ko>\n   * @param {string} [options.hanger=\"50%\"] The reference position of the hanger in the viewport, which hangs panel anchors should be stopped at.<br>It should be provided in px or % value of viewport size.<br>You can combinate those values with plus/minus sign.<br>ex) \"50\", \"100px\", \"0%\", \"25% + 100px\"<ko>뷰포트 내부의 행어의 위치. 패널의 앵커들이 뷰포트 내에서 멈추는 지점에 해당한다.<br>px값이나, 뷰포트의 크기 대비 %값을 사용할 수 있고, 이를 + 혹은 - 기호로 연계하여 사용할 수도 있다.<br>예) \"50\", \"100px\", \"0%\", \"25% + 100px\"</ko>\n   * @param {string} [options.anchor=\"50%\"] The reference position of the anchor in panels, which can be hanged by viewport hanger.<br>It should be provided in px or % value of panel size.<br>You can combinate those values with plus/minus sign.<br>ex) \"50\", \"100px\", \"0%\", \"25% + 100px\"<ko>패널 내부의 앵커의 위치. 뷰포트의 행어와 연계하여 패널이 화면 내에서 멈추는 지점을 설정할 수 있다.<br>px값이나, 패널의 크기 대비 %값을 사용할 수 있고, 이를 + 혹은 - 기호로 연계하여 사용할 수도 있다.<br>예) \"50\", \"100px\", \"0%\", \"25% + 100px\"</ko>\n   * @param {number} [options.gap=0] Space value between panels. Should be given in number.(px)<ko>패널간에 부여할 간격의 크기를 나타내는 숫자.(px)</ko>\n   * @param {eg.Flicking.MoveTypeOption} [options.moveType=\"snap\"] Movement style by user input. (ex: snap, freeScroll)<ko>사용자 입력에 의한 이동 방식.(ex: snap, freeScroll)</ko>\n   * @param {boolean} [options.useOffset=false] Whether to use `offsetWidth`/`offsetHeight` instead of `getBoundingClientRect` for panel/viewport size calculation.<br/>You can use this option to calculate the original panel size when CSS transform is applied to viewport or panel.<br/>⚠️ If panel size is not fixed integer value, there can be a 1px gap between panels.<ko>패널과 뷰포트의 크기를 계산할 때 `offsetWidth`/`offsetHeight`를 `getBoundingClientRect` 대신 사용할지 여부.<br/>패널이나 뷰포트에 CSS transform이 설정되어 있을 때 원래 패널 크기를 계산하려면 옵션을 활성화한다.<br/>⚠️ 패널의 크기가 정수로 고정되어있지 않다면 패널 사이에 1px의 공간이 생길 수 있다.</ko>\n   * @param {boolean} [options.renderOnlyVisible] Whether all panels have a constant size that won't be changed after resize. Enabling this option can increase performance while recalculating panel size.<ko>모든 패널의 크기가 불변인지의 여부. 이 옵션을 'true'로 설정하면 패널 크기 재설정시에 성능을 높일 수 있다.</ko>\n   * @param {boolean|string[]} [options.isEqualSize] Whether to render visible panels only. This can dramatically increase performance when there're many panels.<ko>보이는 패널만 렌더링할지 여부를 설정한다. 패널이 많을 경우에 퍼포먼스를 크게 향상시킬 수 있다.</ko>\n   * @param {boolean} [options.isConstantSize] This option indicates whether all panels have the same size(true) of first panel, or it can hold a list of class names that determines panel size.<br/>Enabling this option can increase performance while recalculating panel size.<ko>모든 패널의 크기가 동일한지(true), 혹은 패널 크기를 결정하는 패널 클래스들의 리스트.<br/>이 옵션을 설정하면 패널 크기 재설정시에 성능을 높일 수 있다.</ko>\n   * @param {boolean} [options.renderExternal] Whether to use external rendering. It will delegate DOM manipulation and can synchronize the rendered state by calling `sync()` method. You can use this option to use in frameworks like React, Vue, Angular, which has its states and rendering methods.<ko>외부 렌더링을 사용할 지의 여부. 이 옵션을 사용시 렌더링을 외부에 위임할 수 있고, `sync()`를 호출하여 그 상태를 동기화할 수 있다. 이 옵션을 사용하여, React, Vue, Angular 등 자체적인 상태와 렌더링 방법을 갖는 프레임워크에 대응할 수 있다.</ko>\n   * @param {boolean} [options.collectStatistics=true] Whether to collect statistics on how you are using `Flicking`. These statistical data do not contain any personal information and are used only as a basis for the development of a user-friendly product.<ko>어떻게 `Flicking`을 사용하고 있는지에 대한 통계 수집 여부를 나타낸다. 이 통계자료는 개인정보를 포함하고 있지 않으며 오직 사용자 친화적인 제품으로 발전시키기 위한 근거자료로서 활용한다.</ko>\n   */\n  constructor(\n    element: string | HTMLElement,\n    options: Partial<FlickingOptions> = {},\n  ) {\n    super();\n\n    // Set flicking wrapper user provided\n    let wrapper: HTMLElement | null;\n    if (isString(element)) {\n      wrapper = document.querySelector(element);\n      if (!wrapper) {\n        throw new Error(\"Base element doesn't exist.\");\n      }\n    } else if (element.nodeName && element.nodeType === 1) {\n      wrapper = element;\n    } else {\n      throw new Error(\"Element should be provided in string or HTMLElement.\");\n    }\n\n    this.wrapper = wrapper;\n    // Override default options\n    this.options = merge({}, DEFAULT_OPTIONS, options) as FlickingOptions;\n    // Override moveType option\n    const currentOptions = this.options;\n    const moveType = currentOptions.moveType;\n\n    if (moveType in DEFAULT_MOVE_TYPE_OPTIONS) {\n      currentOptions.moveType = DEFAULT_MOVE_TYPE_OPTIONS[moveType as keyof typeof DEFAULT_MOVE_TYPE_OPTIONS];\n    }\n\n    // Make viewport instance with panel container element\n    this.viewport = new Viewport(this, this.options, this.triggerEvent);\n    this.listenInput();\n    this.listenResize();\n\n    if (this.options.collectStatistics) {\n      sendEvent(\"usage\", \"options\", options);\n    }\n  }\n\n  /**\n   * Move to the previous panel if it exists.\n   * @ko 이전 패널이 존재시 해당 패널로 이동한다.\n   * @param [duration=options.duration] Duration of the panel movement animation.(unit: ms)<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public prev(duration?: number): this {\n    const currentPanel = this.getCurrentPanel();\n    const currentState = this.viewport.stateMachine.getState();\n\n    if (currentPanel && currentState.type === STATE_TYPE.IDLE) {\n      const prevPanel = currentPanel.prev();\n      if (prevPanel) {\n        prevPanel.focus(duration);\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Move to the next panel if it exists.\n   * @ko 다음 패널이 존재시 해당 패널로 이동한다.\n   * @param [duration=options.duration] Duration of the panel movement animation(unit: ms).<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public next(duration?: number): this {\n    const currentPanel = this.getCurrentPanel();\n    const currentState = this.viewport.stateMachine.getState();\n\n    if (currentPanel && currentState.type === STATE_TYPE.IDLE) {\n      const nextPanel = currentPanel.next();\n      if (nextPanel) {\n        nextPanel.focus(duration);\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Move to the panel of given index.\n   * @ko 주어진 인덱스에 해당하는 패널로 이동한다.\n   * @param index The index number of the panel to move.<ko>이동할 패널의 인덱스 번호.</ko>\n   * @param duration [duration=options.duration] Duration of the panel movement.(unit: ms)<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public moveTo(index: number, duration?: number): this {\n    const viewport = this.viewport;\n    const panel = viewport.panelManager.get(index);\n    const state = viewport.stateMachine.getState();\n\n    if (!panel || state.type !== STATE_TYPE.IDLE) {\n      return this;\n    }\n\n    const anchorPosition = panel.getAnchorPosition();\n    const hangerPosition = viewport.getHangerPosition();\n\n    let targetPanel = panel;\n    if (this.options.circular) {\n      const scrollAreaSize = viewport.getScrollAreaSize();\n      // Check all three possible locations, find the nearest position among them.\n      const possiblePositions = [\n        anchorPosition - scrollAreaSize,\n        anchorPosition,\n        anchorPosition + scrollAreaSize,\n      ];\n      const nearestPosition = possiblePositions.reduce((nearest, current) => {\n        return (Math.abs(current - hangerPosition) < Math.abs(nearest - hangerPosition))\n          ? current\n          : nearest;\n      }, Infinity) - panel.getRelativeAnchorPosition();\n\n      const identicals = panel.getIdenticalPanels();\n      const offset = nearestPosition - anchorPosition;\n      if (offset > 0) {\n        // First cloned panel is nearest\n        targetPanel = identicals[1];\n      } else if (offset < 0) {\n        // Last cloned panel is nearest\n        targetPanel = identicals[identicals.length - 1];\n      }\n\n      targetPanel = targetPanel.clone(targetPanel.getCloneIndex(), true);\n      targetPanel.setPosition(nearestPosition);\n    }\n    const currentIndex = this.getIndex();\n\n    if (hangerPosition === targetPanel.getAnchorPosition() && currentIndex === index) {\n      return this;\n    }\n\n    const eventType = panel.getIndex() === viewport.getCurrentIndex()\n      ? \"\"\n      : EVENTS.CHANGE;\n\n    viewport.moveTo(\n      targetPanel,\n      viewport.findEstimatedPosition(targetPanel),\n      eventType,\n      null,\n      duration,\n    );\n    return this;\n  }\n\n  /**\n   * Return index of the current panel. `-1` if no panel exists.\n   * @ko 현재 패널의 인덱스 번호를 반환한다. 패널이 하나도 없을 경우 `-1`을 반환한다.\n   * @return Current panel's index, zero-based integer.<ko>현재 패널의 인덱스 번호. 0부터 시작하는 정수.</ko>\n   */\n  public getIndex(): number {\n    return this.viewport.getCurrentIndex();\n  }\n\n  /**\n   * Return the wrapper element user provided in constructor.\n   * @ko 사용자가 생성자에서 제공한 래퍼 엘리먼트를 반환한다.\n   * @return Wrapper element user provided.<ko>사용자가 제공한 래퍼 엘리먼트.</ko>\n   */\n  public getElement(): HTMLElement {\n    return this.wrapper;\n  }\n\n  /**\n   * Return current panel. `null` if no panel exists.\n   * @ko 현재 패널을 반환한다. 패널이 하나도 없을 경우 `null`을 반환한다.\n   * @return Current panel.<ko>현재 패널.</ko>\n   */\n  public getCurrentPanel(): FlickingPanel | null {\n    const viewport = this.viewport;\n    const panel = viewport.getCurrentPanel();\n    return panel\n      ? panel\n      : null;\n  }\n\n  /**\n   * Return the panel of given index. `null` if it doesn't exists.\n   * @ko 주어진 인덱스에 해당하는 패널을 반환한다. 해당 패널이 존재하지 않을 시 `null`이다.\n   * @return Panel of given index.<ko>주어진 인덱스에 해당하는 패널.</ko>\n   */\n  public getPanel(index: number): FlickingPanel | null {\n    const viewport = this.viewport;\n    const panel = viewport.panelManager.get(index);\n    return panel\n      ? panel\n      : null;\n  }\n\n  /**\n   * Return all panels.\n   * @ko 모든 패널들을 반환한다.\n   * @param - Should include cloned panels or not.<ko>복사된 패널들을 포함할지의 여부.</ko>\n   * @return All panels.<ko>모든 패널들.</ko>\n   */\n  public getAllPanels(includeClone?: boolean): FlickingPanel[] {\n    const viewport = this.viewport;\n    const panelManager = viewport.panelManager;\n    const panels = includeClone\n      ? panelManager.allPanels()\n      : panelManager.originalPanels();\n\n    return panels\n      .filter(panel => !!panel);\n  }\n\n  /**\n   * Return the panels currently shown in viewport area.\n   * @ko 현재 뷰포트 영역에서 보여지고 있는 패널들을 반환한다.\n   * @return Panels currently shown in viewport area.<ko>현재 뷰포트 영역에 보여지는 패널들</ko>\n   */\n  public getVisiblePanels(): FlickingPanel[] {\n    return this.viewport.calcVisiblePanels();\n  }\n\n  /**\n   * Return length of original panels.\n   * @ko 원본 패널의 개수를 반환한다.\n   * @return Length of original panels.<ko>원본 패널의 개수</ko>\n   */\n  public getPanelCount(): number {\n    return this.viewport.panelManager.getPanelCount();\n  }\n\n  /**\n   * Return how many groups of clones are created.\n   * @ko 몇 개의 클론 그룹이 생성되었는지를 반환한다.\n   * @return Length of cloned panel groups.<ko>클론된 패널 그룹의 개수</ko>\n   */\n  public getCloneCount(): number {\n    return this.viewport.panelManager.getCloneCount();\n  }\n\n  /**\n   * Get maximum panel index for `infinite` mode.\n   * @ko `infinite` 모드에서 적용되는 추가 가능한 패널의 최대 인덱스 값을 반환한다.\n   * @see {@link eg.Flicking.FlickingOptions}\n   * @return Maximum index of panel that can be added.<ko>최대 추가 가능한 패널의 인덱스.</ko>\n   */\n  public getLastIndex(): number {\n    return this.viewport.panelManager.getLastIndex();\n  }\n\n  /**\n   * Set maximum panel index for `infinite' mode.<br>[needPanel]{@link eg.Flicking#events:needPanel} won't be triggered anymore when last panel's index reaches it.<br>Also, you can't add more panels after it.\n   * @ko `infinite` 모드에서 적용되는 패널의 최대 인덱스를 설정한다.<br>마지막 패널의 인덱스가 설정한 값에 도달할 경우 더 이상 [needPanel]{@link eg.Flicking#events:needPanel} 이벤트가 발생되지 않는다.<br>또한, 설정한 인덱스 이후로 새로운 패널을 추가할 수 없다.\n   * @param - Maximum panel index.\n   * @see {@link eg.Flicking.FlickingOptions}\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public setLastIndex(index: number): this {\n    this.viewport.setLastIndex(index);\n\n    return this;\n  }\n\n  /**\n   * Return panel movement animation.\n   * @ko 현재 패널 이동 애니메이션이 진행 중인지를 반환한다.\n   * @return Is animating or not.<ko>애니메이션 진행 여부.</ko>\n   */\n  public isPlaying(): boolean {\n    return this.viewport.stateMachine.getState().playing;\n  }\n\n  /**\n   * Unblock input devices.\n   * @ko 막았던 입력 장치로부터의 입력을 푼다.\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public enableInput(): this {\n    this.viewport.enable();\n\n    return this;\n  }\n\n  /**\n   * Block input devices.\n   * @ko 입력 장치로부터의 입력을 막는다.\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public disableInput(): this {\n    this.viewport.disable();\n\n    return this;\n  }\n\n  /**\n   * Get current flicking status. You can restore current state by giving returned value to [setStatus()]{@link eg.Flicking#setStatus}.\n   * @ko 현재 상태 값을 반환한다. 반환받은 값을 [setStatus()]{@link eg.Flicking#setStatus} 메소드의 인자로 지정하면 현재 상태를 복원할 수 있다.\n   * @return An object with current status value information.<ko>현재 상태값 정보를 가진 객체.</ko>\n   */\n  public getStatus(): FlickingStatus {\n    const viewport = this.viewport;\n\n    const panels = viewport.panelManager.originalPanels()\n      .filter(panel => !!panel)\n      .map(panel => {\n        return {\n          html: panel.getElement().outerHTML,\n          index: panel.getIndex(),\n        };\n      });\n\n    return {\n      index: viewport.getCurrentIndex(),\n      panels,\n      position: viewport.getCameraPosition(),\n    };\n  }\n\n  /**\n   * Restore to the state of the `status`.\n   * @ko `status`의 상태로 복원한다.\n   * @param status Status value to be restored. You can specify the return value of the [getStatus()]{@link eg.Flicking#getStatus} method.<ko>복원할 상태 값. [getStatus()]{@link eg.Flicking#getStatus}메서드의 반환값을 지정하면 된다.</ko>\n   */\n  public setStatus(status: FlickingStatus): void {\n    this.viewport.restore(status);\n  }\n\n  /**\n   * Add plugins that can have different effects on Flicking.\n   * @ko 플리킹에 다양한 효과를 부여할 수 있는 플러그인을 추가한다.\n   * @param - The plugin(s) to add.<ko>추가할 플러그인(들).</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public addPlugins(plugins: Plugin | Plugin[]) {\n    this.viewport.addPlugins(plugins);\n    return this;\n  }\n\n  /**\n   * Remove plugins from Flicking.\n   * @ko 플리킹으로부터 플러그인들을 제거한다.\n   * @param - The plugin(s) to remove.<ko>제거 플러그인(들).</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public removePlugins(plugins: Plugin | Plugin[]) {\n    this.viewport.removePlugins(plugins);\n    return this;\n  }\n\n  /**\n   * Return the reference element and all its children to the state they were in before the instance was created. Remove all attached event handlers. Specify `null` for all attributes of the instance (including inherited attributes).\n   * @ko 기준 요소와 그 하위 패널들을 인스턴스 생성전의 상태로 되돌린다. 부착된 모든 이벤트 핸들러를 탈거한다. 인스턴스의 모든 속성(상속받은 속성포함)에 `null`을 지정한다.\n   * @example\n   * const flick = new eg.Flicking(\"#flick\");\n   * flick.destroy();\n   * console.log(flick.moveTo); // null\n   */\n  public destroy(option: Partial<DestroyOption> = {}): void {\n    this.off();\n\n    if (this.options.autoResize) {\n      window.removeEventListener(\"resize\", this.resize);\n    }\n\n    this.viewport.destroy(option);\n\n    // release resources\n    for (const x in this) {\n      (this as any)[x] = null;\n    }\n  }\n\n  /**\n   * Update panels to current state.\n   * @ko 패널들을 현재 상태에 맞춰 갱신한다.\n   * @method\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public resize = (): this => {\n    const viewport = this.viewport;\n    const options = this.options;\n\n    const allPanels = viewport.panelManager.allPanels();\n    if (!options.isConstantSize) {\n      allPanels.forEach(panel => panel.unCacheBbox());\n    }\n\n    const shouldResetElements = options.renderOnlyVisible\n      && !options.isConstantSize\n      && options.isEqualSize !== true;\n\n    viewport.unCacheBbox();\n    // This should be done before adding panels, to lower performance issue\n    viewport.updateBbox();\n\n    if (shouldResetElements) {\n      viewport.appendUncachedPanelElements(allPanels as Panel[]);\n    }\n\n    viewport.resize();\n\n    return this;\n  }\n\n  /**\n   * Add new panels at the beginning of panels.\n   * @ko 제일 앞에 새로운 패널을 추가한다.\n   * @param element - Either HTMLElement, HTML string, or array of them.<br>It can be also HTML string of multiple elements with same depth.<ko>HTMLElement 혹은 HTML 문자열, 혹은 그것들의 배열도 가능하다.<br>또한, 같은 depth의 여러 개의 엘리먼트에 해당하는 HTML 문자열도 가능하다.</ko>\n   * @return Array of appended panels.<ko>추가된 패널들의 배열</ko>\n   * @example\n   * // Suppose there were no panels at initialization\n   * const flicking = new eg.Flicking(\"#flick\");\n   * flicking.replace(3, document.createElement(\"div\")); // Add new panel at index 3\n   * flicking.prepend(\"\\<div\\>Panel\\</div\\>\"); // Prepended at index 2\n   * flicking.prepend([\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]); // Prepended at index 0, 1\n   * flicking.prepend(\"\\<div\\>Panel\\</div\\>\"); // Prepended at index 0, pushing every panels behind it.\n   */\n  public prepend(element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const viewport = this.viewport;\n    const parsedElements = parseElement(element);\n\n    const insertingIndex = Math.max(viewport.panelManager.getRange().min - parsedElements.length, 0);\n    return viewport.insert(insertingIndex, parsedElements);\n  }\n\n  /**\n   * Add new panels at the end of panels.\n   * @ko 제일 끝에 새로운 패널을 추가한다.\n   * @param element - Either HTMLElement, HTML string, or array of them.<br>It can be also HTML string of multiple elements with same depth.<ko>HTMLElement 혹은 HTML 문자열, 혹은 그것들의 배열도 가능하다.<br>또한, 같은 depth의 여러 개의 엘리먼트에 해당하는 HTML 문자열도 가능하다.</ko>\n   * @return Array of appended panels.<ko>추가된 패널들의 배열</ko>\n   * @example\n   * // Suppose there were no panels at initialization\n   * const flicking = new eg.Flicking(\"#flick\");\n   * flicking.append(document.createElement(\"div\")); // Appended at index 0\n   * flicking.append(\"\\<div\\>Panel\\</div\\>\"); // Appended at index 1\n   * flicking.append([\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]); // Appended at index 2, 3\n   * // Even this is possible\n   * flicking.append(\"\\<div\\>Panel 1\\</div\\>\\<div\\>Panel 2\\</div\\>\"); // Appended at index 4, 5\n   */\n  public append(element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const viewport = this.viewport;\n\n    return viewport.insert(viewport.panelManager.getRange().max + 1, element);\n  }\n\n  /**\n   * Replace existing panels with new panels from given index. If target index is empty, add new panel at target index.\n   * @ko 주어진 인덱스로부터의 패널들을 새로운 패널들로 교체한다. 인덱스에 해당하는 자리가 비어있다면, 새로운 패널을 해당 자리에 집어넣는다.\n   * @param index - Start index to replace new panels.<ko>새로운 패널들로 교체할 시작 인덱스</ko>\n   * @param element - Either HTMLElement, HTML string, or array of them.<br>It can be also HTML string of multiple elements with same depth.<ko>HTMLElement 혹은 HTML 문자열, 혹은 그것들의 배열도 가능하다.<br>또한, 같은 depth의 여러 개의 엘리먼트에 해당하는 HTML 문자열도 가능하다.</ko>\n   * @return Array of created panels by replace.<ko>교체되어 새롭게 추가된 패널들의 배열</ko>\n   * @example\n   * // Suppose there were no panels at initialization\n   * const flicking = new eg.Flicking(\"#flick\");\n   *\n   * // This will add new panel at index 3,\n   * // Index 0, 1, 2 is empty at this moment.\n   * // [empty, empty, empty, PANEL]\n   * flicking.replace(3, document.createElement(\"div\"));\n   *\n   * // As index 2 was empty, this will also add new panel at index 2.\n   * // [empty, empty, PANEL, PANEL]\n   * flicking.replace(2, \"\\<div\\>Panel\\</div\\>\");\n   *\n   * // Index 3 was not empty, so it will replace previous one.\n   * // It will also add new panels at index 4 and 5.\n   * // before - [empty, empty, PANEL, PANEL]\n   * // after - [empty, empty, PANEL, NEW_PANEL, NEW_PANEL, NEW_PANEL]\n   * flicking.replace(3, [\"\\<div\\>Panel\\</div\\>\", \"\\<div\\>Panel\\</div\\>\", \"\\<div\\>Panel\\</div\\>\"])\n   */\n  public replace(index: number, element: ElementLike | ElementLike[]): FlickingPanel[] {\n    return this.viewport.replace(index, element);\n  }\n\n  /**\n   * Remove panel at target index. This will decrease index of panels behind it.\n   * @ko `index`에 해당하는 자리의 패널을 제거한다. 수행시 `index` 이후의 패널들의 인덱스가 감소된다.\n   * @param index - Index of panel to remove.<ko>제거할 패널의 인덱스</ko>\n   * @param {number} [deleteCount=1] - Number of panels to remove from index.<ko>`index` 이후로 제거할 패널의 개수.</ko>\n   * @return Array of removed panels<ko>제거된 패널들의 배열</ko>\n   */\n  public remove(index: number, deleteCount: number = 1): FlickingPanel[] {\n    return this.viewport.remove(index, deleteCount);\n  }\n\n  /**\n   * Get indexes to render. Should be used with `renderOnlyVisible` option.\n   * @private\n   * @ko 렌더링이 필요한 인덱스들을 반환한다. `renderOnlyVisible` 옵션과 함께 사용해야 한다.\n   * @param - Info object of how panel infos are changed.<ko>패널 정보들의 변경 정보를 담는 오브젝트.</ko>\n   * @return Array of indexes to render.<ko>렌더링할 인덱스의 배열</ko>\n   */\n  public getRenderingIndexes(diffResult: DiffResult<any>): number[] {\n    const viewport = this.viewport;\n    const { min, max } = viewport.getVisibleIndex();\n    const maintained = diffResult.maintained.reduce((values: {[key: number]: number}, [before, after]) => {\n      values[before] = after;\n      return values;\n    }, {});\n\n    const prevPanelCount = diffResult.prevList.length;\n    const panelCount = diffResult.list.length;\n    const added = diffResult.added;\n    const list = counter(prevPanelCount * (this.getCloneCount() + 1));\n\n    let visibles = min >= 0\n      ? list.slice(min, max + 1)\n      : list.slice(0, max + 1).concat(list.slice(min));\n    visibles = visibles\n      .filter(val => maintained[val % prevPanelCount] != null)\n      .map(val => {\n        const cloneIndex = Math.floor(val / prevPanelCount);\n        const changedIndex = maintained[val % prevPanelCount];\n\n        return changedIndex + panelCount * cloneIndex;\n      });\n\n    const renderingPanels = [...visibles, ...added];\n    const allPanels = viewport.panelManager.allPanels();\n\n    viewport.setVisiblePanels(renderingPanels.map(index => allPanels[index]));\n\n    return renderingPanels;\n  }\n\n  /**\n   * Synchronize info of panels instance with info given by external rendering.\n   * @ko 외부 렌더링 방식에 의해 입력받은 패널의 정보와 현재 플리킹이 갖는 패널 정보를 동기화한다.\n   * @private\n   * @param - Info object of how panel infos are changed.<ko>패널 정보들의 변경 정보를 담는 오브젝트.</ko>\n   * @param - Whether called from sync method <ko> sync 메소드로부터 호출됐는지 여부 </ko>\n   */\n  public beforeSync(diffInfo: BeforeSyncResult) {\n    const { maintained, added, changed, removed } = diffInfo;\n    const viewport = this.viewport;\n    const panelManager = viewport.panelManager;\n    const isCircular = this.options.circular;\n    const cloneCount = panelManager.getCloneCount();\n    const prevClonedPanels = panelManager.clonedPanels();\n\n    // Update visible panels\n    const newVisiblePanels = viewport.getVisiblePanels()\n      .filter(panel => findIndex(removed, index => {\n        return index === panel.getIndex();\n      }) < 0);\n    viewport.setVisiblePanels(newVisiblePanels);\n\n    // Did not changed at all\n    if (\n      added.length <= 0\n      && removed.length <= 0\n      && changed.length <= 0\n      && cloneCount === prevClonedPanels.length\n    ) {\n      return this;\n    }\n    const prevOriginalPanels = panelManager.originalPanels();\n    const newPanels: Panel[] = [];\n    const newClones: Panel[][] = counter(cloneCount).map(() => []);\n\n    maintained.forEach(([beforeIdx, afterIdx]) => {\n      newPanels[afterIdx] = prevOriginalPanels[beforeIdx];\n      newPanels[afterIdx].setIndex(afterIdx);\n    });\n\n    added.forEach(addIndex => {\n      newPanels[addIndex] = new Panel(null, addIndex, this.viewport);\n    });\n\n    if (isCircular) {\n      counter(cloneCount).forEach(groupIndex => {\n        const prevCloneGroup = prevClonedPanels[groupIndex];\n        const newCloneGroup = newClones[groupIndex];\n\n        maintained.forEach(([beforeIdx, afterIdx]) => {\n          newCloneGroup[afterIdx] = prevCloneGroup\n            ? prevCloneGroup[beforeIdx]\n            : newPanels[afterIdx].clone(groupIndex, false);\n\n          newCloneGroup[afterIdx].setIndex(afterIdx);\n        });\n\n        added.forEach(addIndex => {\n          const newPanel = newPanels[addIndex];\n\n          newCloneGroup[addIndex] = newPanel.clone(groupIndex, false);\n        });\n      });\n    }\n\n    added.forEach(index => { viewport.updateCheckedIndexes({ min: index, max: index }); });\n    removed.forEach(index => { viewport.updateCheckedIndexes({ min: index - 1, max: index + 1 }); });\n\n    const checkedIndexes = viewport.getCheckedIndexes();\n    checkedIndexes.forEach(([min, max], idx) => {\n      // Push checked indexes backward\n      const pushedIndex = added.filter(index => index < min && panelManager.has(index)).length\n        - removed.filter(index => index < min).length;\n      checkedIndexes.splice(idx, 1, [min + pushedIndex, max + pushedIndex]);\n    });\n\n    // Only effective only when there are least one panel which have changed its index\n    if (changed.length > 0) {\n      // Removed checked index by changed ones after pushing\n      maintained.forEach(([, next]) => { viewport.updateCheckedIndexes({ min: next, max: next }); });\n    }\n    panelManager.replacePanels(newPanels, newClones);\n    this.isPanelChangedAtBeforeSync = true;\n  }\n\n  /**\n   * Synchronize info of panels with DOM info given by external rendering.\n   * @ko 외부 렌더링 방식에 의해 입력받은 DOM의 정보와 현재 플리킹이 갖는 패널 정보를 동기화 한다.\n   * @private\n   * @param - Info object of how panel elements are changed.<ko>패널의 DOM 요소들의 변경 정보를 담는 오브젝트.</ko>\n   */\n  public sync(diffInfo: SyncResult): this {\n    const { list, maintained, added, changed, removed } = diffInfo;\n\n    // Did not changed at all\n    if (added.length <= 0 && removed.length <= 0 && changed.length <= 0) {\n      return this;\n    }\n    const viewport = this.viewport;\n    const { renderOnlyVisible, circular } = this.options;\n    const panelManager = viewport.panelManager;\n\n    if (!renderOnlyVisible) {\n      const indexRange = panelManager.getRange();\n      let beforeDiffInfo: BeforeSyncResult = diffInfo;\n\n      if (circular) {\n        const prevOriginalPanelCount = indexRange.max;\n        const originalPanelCount = (list.length / (panelManager.getCloneCount() + 1)) >> 0;\n        const originalAdded = added.filter(index => index < originalPanelCount);\n        const originalRemoved = removed.filter(index => index <= prevOriginalPanelCount);\n        const originalMaintained = maintained.filter(([beforeIdx]) => beforeIdx <= prevOriginalPanelCount);\n        const originalChanged = changed.filter(([beforeIdx]) => beforeIdx <= prevOriginalPanelCount);\n\n        beforeDiffInfo = {\n          added: originalAdded,\n          maintained: originalMaintained,\n          removed: originalRemoved,\n          changed: originalChanged,\n        };\n      }\n      this.beforeSync(beforeDiffInfo);\n    }\n\n    const visiblePanels = renderOnlyVisible\n      ? viewport.getVisiblePanels()\n      : this.getAllPanels(true);\n\n    added.forEach(addedIndex => {\n      const addedElement = list[addedIndex];\n      const beforePanel = visiblePanels[addedIndex] as Panel;\n\n      beforePanel.setElement(addedElement);\n      // As it can be 0\n      beforePanel.unCacheBbox();\n    });\n    if (this.isPanelChangedAtBeforeSync) {\n      viewport.resetVisibleIndex();\n      this.isPanelChangedAtBeforeSync = false;\n    }\n    viewport.resize();\n\n    return this;\n  }\n\n  private listenInput(): void {\n    const flicking = this;\n    const viewport = flicking.viewport;\n    const stateMachine = viewport.stateMachine;\n\n    // Set event context\n    flicking.eventContext = {\n      flicking,\n      viewport: flicking.viewport,\n      transitTo: stateMachine.transitTo,\n      triggerEvent: flicking.triggerEvent,\n      moveCamera: flicking.moveCamera,\n      stopCamera: viewport.stopCamera,\n    };\n\n    const handlers = {};\n    for (const key in AXES_EVENTS) {\n      const eventType = AXES_EVENTS[key];\n\n      handlers[eventType] = (e: any) => stateMachine.fire(eventType, e, flicking.eventContext);\n    }\n\n    // Connect Axes instance with PanInput\n    flicking.viewport.connectAxesHandler(handlers);\n  }\n\n  private listenResize(): void {\n    if (this.options.autoResize) {\n      window.addEventListener(\"resize\", this.resize);\n    }\n  }\n\n  private triggerEvent = <T extends FlickingEvent>(\n    eventName: string,\n    axesEvent: any,\n    isTrusted: boolean,\n    params: Partial<T> = {},\n  ): TriggerCallback => {\n    const viewport = this.viewport;\n\n    let canceled: boolean = true;\n\n    // Ignore events before viewport is initialized\n    if (viewport) {\n      const state = viewport.stateMachine.getState();\n      const { prev, next } = viewport.getScrollArea();\n      const pos = viewport.getCameraPosition();\n      let progress = getProgress(pos, [prev, prev, next]);\n\n      if (this.options.circular) {\n        progress %= 1;\n      }\n      canceled = !super.trigger(eventName, merge({\n        type: eventName,\n        index: this.getIndex(),\n        panel: this.getCurrentPanel(),\n        direction: state.direction,\n        holding: state.holding,\n        progress,\n        axesEvent,\n        isTrusted,\n      }, params));\n    }\n\n    return {\n      onSuccess(callback: () => void): TriggerCallback {\n        if (!canceled) {\n          callback();\n        }\n        return this;\n      },\n      onStopped(callback: () => void): TriggerCallback {\n        if (canceled) {\n          callback();\n        }\n        return this;\n      },\n    } as TriggerCallback;\n  }\n\n  // Return result of \"move\" event triggered\n  private moveCamera = (axesEvent: any): TriggerCallback => {\n    const viewport = this.viewport;\n    const state = viewport.stateMachine.getState();\n    const options = this.options;\n\n    const pos = axesEvent.pos.flick;\n    const previousPosition = viewport.getCameraPosition();\n\n    if (axesEvent.isTrusted && state.holding) {\n      const inputOffset = options.horizontal\n        ? axesEvent.inputEvent.offsetX\n        : axesEvent.inputEvent.offsetY;\n\n      const isNextDirection = inputOffset < 0;\n\n      let cameraChange = pos - previousPosition;\n      const looped = isNextDirection === (pos < previousPosition);\n      if (options.circular && looped) {\n        // Reached at max/min range of axes\n        const scrollAreaSize = viewport.getScrollAreaSize();\n        cameraChange = (cameraChange > 0 ? -1 : 1) * (scrollAreaSize - Math.abs(cameraChange));\n      }\n\n      const currentDirection = cameraChange === 0\n        ? state.direction\n        : cameraChange > 0\n          ? DIRECTION.NEXT\n          : DIRECTION.PREV;\n\n      state.direction = currentDirection;\n    }\n    state.delta += axesEvent.delta.flick;\n\n    viewport.moveCamera(pos, axesEvent);\n    return this.triggerEvent(EVENTS.MOVE, axesEvent, axesEvent.isTrusted)\n      .onStopped(() => {\n        // Undo camera movement\n        viewport.moveCamera(previousPosition, axesEvent);\n      });\n  }\n}\n\nexport default Flicking;\n","import Flicking from \"./Flicking\";\nimport { withFlickingMethods } from \"./utils\";\nimport { DEFAULT_OPTIONS, MOVE_TYPE } from \"./consts\";\n\n(Flicking as any).withFlickingMethods = withFlickingMethods;\n(Flicking as any).DEFAULT_OPTIONS = DEFAULT_OPTIONS;\n(Flicking as any).MOVE_TYPE = MOVE_TYPE;\nexport default Flicking;\n"],"names":["MOVE_TYPE","SNAP","FREE_SCROLL","DEFAULT_MOVE_TYPE_OPTIONS","snap","type","count","freeScroll","isBrowser","document","DEFAULT_OPTIONS","classPrefix","deceleration","horizontal","circular","infinite","infiniteThreshold","lastIndex","Infinity","threshold","duration","panelEffect","x","Math","pow","defaultIndex","inputType","thresholdAngle","bounce","autoResize","adaptive","zIndex","bound","overflow","hanger","anchor","gap","moveType","useOffset","isEqualSize","isConstantSize","renderOnlyVisible","renderExternal","collectStatistics","DEFAULT_VIEWPORT_CSS","position","DEFAULT_CAMERA_CSS","width","height","willChange","DEFAULT_PANEL_CSS","EVENTS","HOLD_START","HOLD_END","MOVE_START","MOVE","MOVE_END","CHANGE","RESTORE","SELECT","NEED_PANEL","VISIBLE_CHANGE","AXES_EVENTS","HOLD","RELEASE","ANIMATION_END","FINISH","STATE_TYPE","DIRECTION","PREV","NEXT","FLICKING_METHODS","prev","next","moveTo","getIndex","getAllPanels","getCurrentPanel","getElement","getPanel","getPanelCount","getStatus","getVisiblePanels","setLastIndex","enableInput","disableInput","destroy","resize","setStatus","addPlugins","removePlugins","isPlaying","getLastIndex","checkTranslateSupport","transforms","webkitTransform","msTransform","MozTransform","OTransform","transform","name","has3d","supportedStyle","documentElement","style","transformName","prefixedTransform","Error","el","createElement","insertBefore","styleVal","window","getComputedStyle","getPropertyValue","parentElement","removeChild","transformInfo","length","TRANSFORM","target","_i","srcs","forEach","source","Object","keys","key","value","element","Array","isArray","elements","isString","tempDiv","innerHTML","push","toArray","children","firstChild","className","classList","contains","split","indexOf","cssObj","property","val","min","max","iterable","slice","call","cssValue","base","defaultVal","defaultValue","cssRegex","clamp","idx","calculatedValue","matchResult","exec","sign","unit","parsedValue","parseFloat","pos","range","center","callback","i","counterArray","indexed","size","originalStyle","setAttribute","removeAttribute","bbox","y","offsetWidth","offsetHeight","clientRect","getBoundingClientRect","left","top","index","viewport","prevSibling","nextSibling","clonedPanels","state","relativeAnchorPosition","isClone","isVirtual","cloneIndex","cachedBbox","setElement","givenBbox","this","options","getBbox","prevSize","parseArithmeticExpression","panel","cloneState","panelCount","panelManager","scrollAreaSize","getScrollAreaSize","floor","getPosition","getCurrentProgress","outsetRange","getSize","getRelativeHangerPosition","getRelativeAnchorPosition","getProgress","getCameraPosition","panelSize","relativePanelPosition","rightRelativePanelPosition","visibleSize","currentPanel","getHangerPosition","getAnchorPosition","eventType","findEstimatedPosition","updateFunction","shouldResize","identicalPanels","getIdenticalPanels","eachPanel","unCacheBbox","addVisiblePanel","currentIndex","currentPosition","prevPanelIndex","prevPanelPosition","prevPanelSize","hasEmptyPanelBetween","notYetMinPanel","newPosition","prevPanel","clone","getCloneIndex","setPosition","nextPanelIndex","nextPanelPosition","notYetMaxPanel","nextPanel","parsedElements","parseElement","firstPanel","targetIndex","insert","remove","option","preserveUI","restoreStyle","wasVisible","Boolean","parentNode","cameraElement","getCameraElement","appendChild","classes","classes_1","hasClass","original","getClonedPanels","offset","elementStyle","currentElementStyle","styleToApply","cloneElement","cloneNode","clonedPanel","Panel","clonedState","removeClonedPanelsAfter","start","removingPanels","splice","removeElement","currentElement","getAttribute","add","replace","applyCSS","panels","clones","cloneCount","reduce","allClones","newPanels","newClones","findIndex","filter","lastPanel","possibleLastPanel","shouldRender","isCircular","findFirstPanelFrom","siblingElement","insertNewPanels","pushedIndex","panelsAfterIndex","emptyPanelCount","removedPanels","newLastIndex","concat","reverse","setIndex","updateIndex","addNewClones","panelCount_1","cloneSet","replacedPanels","wasNonEmptyCount","deleteCount","deletedPanels","nonEmptyIndexFromLast","allPanels","allPanelsCount","insertTarget_1","newClones_1","allPanels_1","_a","originalPanels","getCloneCount","lastPanelClones","nextSiblingClones","cloneNextSibling","lastPanelSibling","cloneSiblingElement","nextElementSibling","map","_this","this_1","insertClones","counter","insertingIndex","fragment_1","createDocumentFragment","prevState","delta","direction","targetPanel","lastPosition","nextState","e","context","tslib_1","flicking","triggerEvent","transitTo","moveCamera","onSuccess","onStopped","onChange","State","inputEvent","offsetX","offsetY","flick","setTo","releaseEvent","clickedElement","srcEvent","clickedPanel","findPanelOf","cameraPosition","clickedPanelPosition","stopCamera","absDelta","abs","velocity","velocityX","velocityY","inputDelta","deltaX","deltaY","isNextDirection","swipeDistance","swipeAngle","atan","PI","belowAngleThreshold","overThreshold","moveTypeContext","axesEvent","interruptDestInfo","findPanelWhenInterrupted","destPos","nearestPanel","getNearestPanel","stop","destInfo","findTargetPanel","findRestorePanel","scrollArea","getScrollArea","loopCount","originalTargetPosition","newCloneIndex","circulate","newTargetPosition","newTargetPanel","setCurrentPanel","isTrusted","updateAdaptiveSize","updateAxesPosition","IdleState","nextStateType","currentState","HoldingState","DraggingState","AnimatingState","DisabledState","onExit","onEnter","onHold","onRelease","onAnimationEnd","onFinish","_super","ctx","snapCount","eventDelta","minimumDistanceToChange","calcBrinkOfChange","shouldMoveWhenBounceIs0","canSetBoundMode","shouldMoveToAdjacent","isOutOfBound","findSnappedPanel","findAdjacentPanel","halfGap","estimatedHangerPos","panelToMove","cycleIndex","passedPanelCount","originalPanel","getOriginalPanel","panelPosition","siblingPanel","panelIndex","siblingIndex","originalPosition","defaultDuration","getCurrentIndex","get","hangerPosition","firstClonedPanel","basePanel","basePosition","adjacentPanel","targetRelativeAnchorPosition","estimatedPosition","findRestorePanelInCircularMode","lapped","findNearestPanelAt","stateMachine","getState","currentPanelPosition","lastHangerPosition","Snap","panelMaintainRatio","relativeHangerPosition","positionOffset","visibleIndex","NaN","translate","checkedIndexes","isAdaptiveCached","isViewportGiven","isCameraGiven","originalViewportStyle","originalCameraStyle","StateMachine","visiblePanels","panelBboxes","build","eventResult","axes","isBetween","findNearestPanel","originalNearestPosition","checkNeedPanel","updateVisiblePanels","posOffset","moveCoord","coord","round","join","viewportElement","updateSize","updateOriginalPanelPositions","updateScrollArea","updateClonePanels","updateCameraPosition","updatePlugins","minimumDistance","prevPosition","nextPosition","distance","nearest","shortestDistance","identical","anchorPosition","getVisibleIndexOf","panInput","enable","disable","resizePanels","newCenterPanel","newPanelPosition","updateCheckedIndexes","indexes","newCurrentIndex","getRange","undefined","shouldApplyAdaptive","viewportStyle","sizeToApply","panelBbox","maximum","viewportBbox","updateBbox","viewportSize","plugins","plugin","update","wrapper","topmostElement_1","deletingElement","status","html","refreshPanels","createdPanels","orderedPanels","createdPanel","replacePanels","setCloneCount","outsetProgress","getOutsetProgress","playing","holding","prevRange","nextRange","nearestAnchorPos","nearestIndex","nearestSize","hangerIsNextToNearestPanel","targetPosition","progressBetween","off","on","axesHandlers","summedPanelSize","handlers","newPlugins","init","currentPlugins","changedRange","removed","fragment","prevVisiblePanels","equalSizeClasses_1","cached_1","overlappedClass","getOverlappedClass","clonePanels","updateClonedPanelPositions","chainAllPanels","visiblePanel","setElements","applyCSSValue","setMoveType","setAxesInstance","setDefaultPanel","moveToDefaultPanel","viewportCandidate","hasViewportElement","cameraCandidate","hasCameraElement","child","minHeight","minWidth","PanelManager","FreeScroll","Axes","easing","interruptable","PanInput","scale","connect","indexRange","panelAtLeftBoundary","reversedPanels","sumOriginalPanelSize","areaPrev","sizeSum","reversedPanels_1","panelAtRightBoundary","areaNext","panels_1","needCloneOnPrev","ceil","prevCloneCount","origPanel","removeClonesAfter","defaultPanel","defaultPosition","nextPanelPos","maintainingPanel","accumulatedSize","total","setPositionCSS","clonedPanels_1","clonedPanelPos","lastReplacePosition","_b","replacePosition","parsedBounce","arr","constructor","parsedVal","axis","isFreeScroll","is","maxLastIndex","checkingPanel","nextIndex","currentNearestPosition","triggerNeedPanel","firstIndex","lastPanelAfterNeed","cameraPrev","checkingIndex","prevIndex","firstPanelAfterNeed","params","alreadyTriggered","some","hasHandler","hasOn","fill","insertAfter","newVisibleIndex","calcNewVisiblePanelIndex","isNaN","newVisiblePanels","calcVisiblePanels","addedPanels","firstVisiblePanelPos","panelElement","trigger","resetVisibleIndex","cameraPos","allPanelCount","checkLastPanel","getNextPanel","isOutOfViewport","lastPanelOfNextDir","lastPanelOfPrevDir","minPanelCloneIndex","maxPanelCloneOffset","minPanelCloneOffset","prevRefCount","newRefCount","newPanel","newIndex","added","equalSizeClasses_2","default","defaultBbox_1","tid","cid","random","shouldResetElements","appendUncachedPanelElements","eventName","canceled","progress","merge","previousPosition","inputOffset","cameraChange","looped","currentDirection","querySelector","nodeName","nodeType","currentOptions","Viewport","listenInput","listenResize","category","action","label","innerWidth","innerHeight","screen","collectInfos","location","href","navigator","language","toLowerCase","charset","inputEncoding","characterSet","referrer","title","JSON","stringify","req","XMLHttpRequest","open","send","sendEvent","focus","nearestPosition","current","identicals","includeClone","outerHTML","restore","removeEventListener","diffResult","maintained","values","before","after","prevPanelCount","prevList","list","visibles","renderingPanels","setVisiblePanels","diffInfo","changed","prevClonedPanels","prevOriginalPanels","beforeIdx","afterIdx","addIndex","groupIndex","prevCloneGroup","newCloneGroup","getCheckedIndexes","has","isPanelChangedAtBeforeSync","beforeDiffInfo","prevOriginalPanelCount_1","originalPanelCount_1","originalAdded","originalRemoved","beforeSync","addedIndex","addedElement","beforePanel","eventContext","fire","connectAxesHandler","addEventListener","Flicking","Component","withFlickingMethods","prototype","flickingName","args","result"],"mappings":";;;;;;;;knBAOO,IAAMA,EAGT,CACFC,KAAM,OACNC,YAAa,cAGFC,EAGT,CACFC,KAAM,CACJC,KAAM,OACNC,MAAO,GAETC,WAAY,CACVF,KAAM,eAGGG,EAAgC,oBAAbC,SAQnBC,EAA6C,CACxDC,YAAa,WACbC,aAAc,MACdC,YAAY,EACZC,UAAU,EACVC,UAAU,EACVC,kBAAmB,EACnBC,UAAWC,EAAAA,EACXC,UAAW,GACXC,SAAU,IACVC,YAAa,SAAAC,UAAK,EAAIC,KAAKC,IAAI,EAAIF,EAAG,IACtCG,aAAc,EACdC,UAAW,CAAC,QAAS,SACrBC,eAAgB,GAChBC,OAAQ,GACRC,YAAY,EACZC,UAAU,EACVC,OAAQ,IACRC,OAAO,EACPC,UAAU,EACVC,OAAQ,MACRC,OAAQ,MACRC,IAAK,EACLC,SAAUlC,EAA0BC,KACpCkC,WAAW,EACXC,aAAa,EACbC,gBAAgB,EAChBC,mBAAmB,EACnBC,gBAAgB,EAChBC,mBAAmB,GAGRC,EAAuB,CAClCC,SAAU,WACVd,OAAQrB,EAAgBqB,OACxBE,SAAU,UAGCa,EAAqB,CAChCC,MAAO,OACPC,OAAQ,OACRC,WAAY,aAGDC,EAAoB,CAC/BL,SAAU,YAGCM,EAAoB,CAC/BC,WAAY,YACZC,SAAU,UACVC,WAAY,YACZC,KAAM,OACNC,SAAU,UACVC,OAAQ,SACRC,QAAS,UACTC,OAAQ,SACRC,WAAY,YACZC,eAAgB,iBAGLC,EAA6B,CACxCC,KAAM,OACNN,OAAQ,SACRO,QAAS,UACTC,cAAe,eACfC,OAAQ,UAGGC,EACL,EADKA,EAEF,EAFEA,EAGD,EAHCA,EAIA,EAJAA,EAKD,EAGCC,EAAuB,CAClCC,KAAM,OACNC,KAAM,QAEKC,EAAyD,CACpEC,MAAM,EACNC,MAAM,EACNC,QAAQ,EACRC,UAAU,EACVC,cAAc,EACdC,iBAAiB,EACjBC,YAAY,EACZC,UAAU,EACVC,eAAe,EACfC,WAAW,EACXC,kBAAkB,EAClBC,cAAc,EACdC,aAAa,EACbC,cAAc,EACdC,SAAS,EACTC,QAAQ,EACRC,WAAW,EACXC,YAAY,EACZC,eAAe,EACfC,WAAW,EACXC,cAAc,GAKLC,EAAwB,eAC3BC,EAAa,CACjBC,gBAAiB,oBACjBC,YAAa,gBACbC,aAAc,iBACdC,WAAY,eACZC,UAAW,iBAGR3F,QACI,CACL4F,KAAMN,EAAWK,UACjBE,OAAO,OAGLC,EAAiB7F,SAAS8F,gBAAgBC,MAC5CC,EAAgB,OACf,IAAMC,KAAqBZ,EAC1BY,KAAqBJ,IACvBG,EAAgBC,OAIfD,QACG,IAAIE,MAAM,mDAGZC,EAAKnG,SAASoG,cAAc,OAElCpG,SAAS8F,gBAAgBO,aAAaF,EAAI,MAE1CA,EAAGJ,MAAMC,GAAiB,iCACpBM,EAAWC,OAAOC,iBAAiBL,GAAIM,iBAAiBpB,EAAWW,IAEzEG,EAAGO,cAAeC,YAAYR,OAExBS,EAAgB,CACpBjB,KAAMK,EACNJ,MAAyB,EAAlBU,EAASO,QAA2B,SAAbP,UAGhClB,EAAwB,kBAAMwB,GAEvBA,GAGIE,EAAY1B,eCnLH2B,oBAAgBC,mBAAAA,IAAAC,2BACpCA,EAAKC,QAAQ,SAAAC,GACXC,OAAOC,KAAKF,GAAQD,QAAQ,SAAAI,OACpBC,EAAQJ,EAAOG,GACrBP,EAAOO,GAAOC,MAIXR,aAGoBS,GACtBC,MAAMC,QAAQF,KACjBA,EAAU,CAACA,QAGPG,EAA0B,UAChCH,EAAQN,QAAQ,SAAAf,MACVyB,EAASzB,GAAK,KACV0B,EAAU7H,SAASoG,cAAc,WACvCyB,EAAQC,UAAY3B,EAEpBwB,EAASI,WAATJ,EAAiBK,EAAQH,EAAQI,WAC1BJ,EAAQK,YACbL,EAAQlB,YAAYkB,EAAQK,iBAG9BP,EAASI,KAAK5B,KAIXwB,aAGgBJ,SACC,iBAAVA,aAqBSC,EAAsBW,UACzCX,EAAQY,UACHZ,EAAQY,UAAUC,SAASF,GAEyB,GAAnDX,EAAQW,UAAUG,MAAM,KAAKC,QAAQJ,cAIxBX,EAAsBgB,GAC7CpB,OAAOC,KAAKmB,GAAQtB,QAAQ,SAAAuB,GAC1BjB,EAAQzB,MAAM0C,GAAYD,EAAOC,gBAIfC,EAAaC,EAAaC,UACvC9H,KAAK8H,IAAI9H,KAAK6H,IAAID,EAAKE,GAAMD,cAIZD,EAAaC,EAAaC,UACpCD,GAAPD,GAAcA,GAAOE,aAQHC,SAClB,GAAGC,MAAMC,KAAKF,cAOmBG,EAA2BC,EAAcC,OAE3EC,EAA6B,MAAdD,EAAqBA,EAAaD,EAAO,EACxDG,EAAW,4CAEO,iBAAbJ,SACFK,EAAML,EAAU,EAAGC,WAGxBK,EAAM,EACNC,EAAkB,EAClBC,EAAcJ,EAASK,KAAKT,GACV,MAAfQ,GAAqB,KACtBE,EAAOF,EAAY,GACjBjC,EAAQiC,EAAY,GACpBG,EAAOH,EAAY,GAErBI,EAAcC,WAAWtC,MAEzB+B,GAAO,IACTI,EAAOA,GAAQ,MAIZA,SACIP,EAGI,MAATQ,IACFC,EAAeA,EAAc,IAAOX,GAGtCM,GAA4B,MAATG,EACfE,GACCA,IAGHN,EACFE,EAAcJ,EAASK,KAAKT,UAIlB,IAARM,EACKH,EAIFE,EAAME,EAAiB,EAAGN,cAGPa,EAAaC,OAGhCpB,OAAKqB,OAAQpB,cAEVoB,EAANF,GAAiBlB,EAAMoB,GAEjBF,EAAME,IAAWpB,EAAMoB,GACtBF,EAAME,GAAWA,EAASrB,GAE3BmB,EAAME,IAAWA,EAASrB,GACzBmB,IAAQE,GAAUpB,EAAMD,GACzBmB,EAAMnB,IAAQC,EAAMD,GAEvB,aAGoBE,EAAeoB,OACrC,IAAIC,EAAI,EAAGA,EAAIrB,EAAShC,OAAQqD,GAAK,EAAG,KACrC1C,EAAUqB,EAASqB,MACrB1C,GAAWyC,EAASzC,UACf0C,SAIH,aAIctB,WAChBuB,EAAyB,GACtBD,EAAI,EAAGA,EAAItB,EAAKsB,GAAK,EAC5BC,EAAaD,GAAKA,SAEbC,aAUiB5C,EAAeoB,EAAaC,EAAawB,OAC3DC,EAAOD,EACTxB,EAAMD,EAAM,EACZC,EAAMD,KACNpB,EAAQoB,EAIVpB,EAAQqB,GAHOwB,GACVzB,EAAMpB,EAAQ,GAAK8C,GACnB1B,EAAMpB,GAAS8C,QAEf,GAAYzB,EAARrB,EAAa,CAItBA,EAAQoB,GAHOyB,GACV7C,EAAQqB,EAAM,GAAKyB,GACnB9C,EAAQqB,GAAOyB,UAIf9C,aAGoBC,EAAsB8C,GACjDA,EAAcnC,UACVX,EAAQ+C,aAAa,QAASD,EAAcnC,WAC5CX,EAAQgD,gBAAgB,SAC5BF,EAAcvE,MACVyB,EAAQ+C,aAAa,QAASD,EAAcvE,OAC5CyB,EAAQgD,gBAAgB,oBAoCNhD,EAAsB3F,OACxC4I,KACA5I,EACF4I,EAAO,CACL5J,EAAG,EACH6J,EAAG,EACHpI,MAAOkF,EAAQmD,YACfpI,OAAQiF,EAAQoD,kBAEb,KACCC,EAAarD,EAAQsD,wBAC3BL,EAAO,CACL5J,EAAGgK,EAAWE,KACdL,EAAGG,EAAWG,IACd1I,MAAOuI,EAAWvI,MAClBC,OAAQsI,EAAWtI,eAGhBkI,ECxQT,4BAuBIjD,EACAyD,EACAC,QAEKA,SAAWA,OACXC,YAAc,UACdC,YAAc,UACdC,aAAe,QAEfC,MAAQ,CACXL,MAAOA,EACP7I,SAAU,EACVmJ,uBAAwB,EACxBlB,KAAM,EACNmB,SAAS,EACTC,WAAW,EACXC,YAAa,EACbpB,cAAe,CACbnC,UAAW,GACXpC,MAAO,IAET4F,WAAY,WAETC,WAAWpE,qCAGlB,SAAcqE,OACNP,EAAQQ,KAAKR,MACbS,EAAUD,KAAKZ,SAASa,QACxBtB,EAAOoB,GAETC,KAAKE,eACJV,MAAMK,WAAalB,MAClBwB,EAAWX,EAAMjB,KAEvBiB,EAAMjB,KAAO0B,EAAQ3L,WACjBqK,EAAKnI,MACLmI,EAAKlI,OAEL0J,IAAaX,EAAMjB,OACrBiB,EAAMC,uBAAyBW,EAA0BH,EAAQrK,OAAQ4J,EAAMjB,OAG5EiB,EAAME,cACJH,aAAanE,QAAQ,SAAAiF,OAClBC,EAAaD,EAAMb,MAEzBc,EAAW/B,KAAOiB,EAAMjB,KACxB+B,EAAWT,WAAaL,EAAMK,WAC9BS,EAAWb,uBAAyBD,EAAMC,wCAKhD,gBACOD,MAAMK,WAAa,oBAG1B,eACQT,EAAWY,KAAKZ,SAChBa,EAAUb,EAASa,QACnBM,EAAanB,EAASoB,aAAa/H,gBACnCgI,EAAiBrB,EAASsB,2BAETT,EAAQ1L,SAAWS,KAAK2L,MAAMX,KAAKY,cAAgBH,GAAkBF,EAAa,GAAKP,KAAK5H,WAClFgH,EAASyB,0CAK5C,eACQzB,EAAWY,KAAKZ,SAChB0B,EAAc,EACjBd,KAAKe,UACN3B,EAAS4B,4BAA8BhB,KAAKiB,4BAC5C7B,EAAS2B,kBAGYG,EADOlB,KAAKY,cAAgBxB,EAAS+B,oBACFL,sBAK5D,eACQ1B,EAAWY,KAAKZ,SAChBgC,EAAYpB,KAAKe,UACjBM,EAAwBrB,KAAKY,cAAgBxB,EAAS+B,oBACtDG,EAA6BD,EAAwBD,EAErDG,EAAcvM,KAAK6H,IAAIuC,EAAS2B,UAAWO,GAA8BtM,KAAK8H,IAAIuE,EAAuB,UAC3E,GAAfE,EACjBA,EAAcH,EACd,WAKN,SAAavM,OACLuK,EAAWY,KAAKZ,SAChBoC,EAAepC,EAAS9G,qBACP8G,EAASqC,sBACTzB,KAAK0B,qBACcF,OAKpCG,EADkBH,EAAaZ,gBACCZ,KAAKY,cACvC,GACAhK,EAAOM,OAEXkI,EAASjH,OAAO6H,KAAMZ,EAASwC,sBAAsB5B,MAAO2B,EAAW,KAAM9M,cAG/E,SAAcgN,EAA+DC,gBAA/DD,qBAA+DC,UACrEC,EAAkB/B,KAAKgC,qBAEzBH,GACFE,EAAgB3G,QAAQ,SAAA6G,GACtBJ,EAAeI,EAAU1J,gBAIzBuJ,IACFC,EAAgB3G,QAAQ,SAAA6G,GACtBA,EAAUC,qBAEP9C,SAAS+C,gBAAgBnC,WACzBZ,SAASpG,kBAIlB,eAEQiH,EADWD,KAAKZ,SACGa,QACnBZ,EAAcW,KAAKX,gBAEpBA,SACI,SAGH+C,EAAepC,KAAK5H,WACpBiK,EAAkBrC,KAAKY,cACvB0B,EAAiBjD,EAAYjH,WAC7BmK,EAAoBlD,EAAYuB,cAChC4B,EAAgBnD,EAAY0B,UAE5B0B,EAAuD,EAAhCL,EAAeE,EACtCI,EAAiBzC,EAAQzL,UACX,EAAf4N,GACiBA,EAAjBE,KAEDG,GAAwBC,SAEnB,SAGHC,EAAcN,EAAkBG,EAAgBvC,EAAQpK,IAE1D+M,EAAYvD,SACZkD,IAAsBI,IACxBC,EAAYvD,EAAYwD,MAAMxD,EAAYyD,iBAAiB,IACjDC,YAAYJ,GAGjBC,UAGT,eACQxD,EAAWY,KAAKZ,SAChBa,EAAUb,EAASa,QACnBX,EAAcU,KAAKV,YACnB5K,EAAY0K,EAASoB,aAAanH,mBAEnCiG,SACI,SAGH8C,EAAepC,KAAK5H,WACpBiK,EAAkBrC,KAAKY,cACvBoC,EAAiB1D,EAAYlH,WAC7B6K,EAAoB3D,EAAYsB,cAEhC6B,EAAuD,EAAhCO,EAAiBZ,EACxCc,EAAiBjD,EAAQzL,UAC1B4N,EAAe1N,GACfsO,EAAiBZ,KAElBK,GAAwBS,SACnB,SAGHP,EAAcN,EAAkBrC,KAAKe,UAAYd,EAAQpK,IAE3DsN,EAAY7D,SACZ2D,IAAsBN,IACxBQ,EAAY7D,EAAYuD,MAAMvD,EAAYwD,iBAAiB,IACjDC,YAAYJ,GAGjBQ,kBAGT,SAAoBzH,OACZ0D,EAAWY,KAAKZ,SAChBgE,EAAiBC,EAAa3H,GAC9B4H,EAAalE,EAASoB,aAAa8C,aACnCjE,EAAcW,KAAKX,YAInBkE,EAAclE,GAAeiE,EAAWlL,aAAe4H,KAAK5H,WAC9DpD,KAAK8H,IAAIuC,EAAYjH,WAAa,EAAG4H,KAAK5H,WAAagL,EAAerI,QACtE/F,KAAK8H,IAAIkD,KAAK5H,WAAagL,EAAerI,OAAQ,UAE/CqE,EAASoE,OAAOD,EAAaH,kBAGtC,SAAmB1H,UACVsE,KAAKZ,SAASoE,OAAOxD,KAAK5H,WAAa,EAAGsD,aAGnD,uBACO0D,SAASqE,OAAOzD,KAAK5H,YAEnB4H,gBAGT,SAAe0D,OACRA,EAAOC,WAAY,KAChBnF,EAAgBwB,KAAKR,MAAMhB,cAEjCoF,EAAa5D,KAAKtE,QAAS8C,OAIxB,IAAMzJ,KAAKiL,UACAjL,GAAK,mBAIvB,kBACSiL,KAAKtE,6BAGd,kBACSsE,KAAKR,MAAMlJ,SAAW0J,KAAKR,MAAMC,oDAG1C,kBACSO,KAAKR,MAAMC,mCAGpB,kBACSO,KAAKR,MAAML,qBAGpB,kBACSa,KAAKR,MAAMlJ,oBAGpB,kBACS0J,KAAKR,MAAMjB,gBAGpB,eACQiB,EAAQQ,KAAKR,MACbJ,EAAWY,KAAKZ,SAChB1D,EAAUsE,KAAKtE,QACfuE,EAAUb,EAASa,WAEpBvE,GAOE,IAAK8D,EAAMK,WAAY,KACtBgE,EAAaC,QAAQpI,EAAQqI,YAC7BC,EAAgB5E,EAAS6E,mBAC1BJ,IACHG,EAAcE,YAAYxI,GAC1B0D,EAAS+C,gBAAgBnC,OAE3BR,EAAMK,WAAaK,EAAQxE,EAASuE,EAAQlK,YAEvC8N,GAAczE,EAASa,QAAQ9J,gBAClC6N,EAAcnJ,YAAYa,SAhB5B8D,EAAMK,WAAa,CACjB9K,EAAG,EACH6J,EAAG,EACHpI,MAAO,EACPC,OAAQ,UAeL+I,EAAMK,sBAGf,kBACSG,KAAKR,MAAME,8BAGpB,SAA0ByE,WAClBzI,EAAUsE,KAAKtE,YAEG0I,IAAAlJ,WAAAA,SAAbmB,UACLgI,EAAS3I,EAASW,UACbA,oBAKb,kBACS2D,KAAKR,MAAMI,8BAGpB,kBACgBI,KAAKR,MAENE,QACTM,KAAKsE,SAAUC,kBACfvE,KAAKT,mCAGX,kBACgBS,KAAKR,MAENE,QACTM,KAAKsE,SAAUtC,sBACdhC,aAASA,KAAKT,kCAGrB,kBACSS,KAAKR,MAAME,QACdM,KAAKsE,SACLtE,iBAGN,SAAgBb,GACAa,KAAKR,MAEbL,MAAQA,OACTI,aAAanE,QAAQ,SAAAiF,UAASA,EAAMb,MAAML,MAAQA,mBAGzD,SAAmBnB,eACZwB,MAAMlJ,SAAW0H,EAEfgC,uBAGT,SAAsBwE,mBAAAA,KACfxE,KAAKtE,aAGJ8D,EAAQQ,KAAKR,MACbxB,EAAMwB,EAAMlJ,SACZ2J,EAAUD,KAAKZ,SAASa,QACxBwE,EAAezE,KAAKtE,QAAQzB,MAC5ByK,EAAsBzE,EAAQ3L,WAChCmQ,EAAaxF,KACbwF,EAAavF,IACXyF,EAAkB3G,EAAMwG,OAEzBhF,EAAMG,WAAa+E,IAAwBC,IAC9C1E,EAAQ3L,WACJmQ,EAAaxF,KAAO0F,EACpBF,EAAavF,IAAMyF,aAI3B,SAAa/E,EAAoBD,EAA4BjE,gBAA5BiE,UACzBH,EAAQQ,KAAKR,MACbJ,EAAWY,KAAKZ,SAClBwF,EAAelJ,GAEdkJ,GAAgB5E,KAAKtE,UACxBkJ,EAAejF,EAAYK,KAAKtE,QAAUsE,KAAKtE,QAAQmJ,WAAU,QAE7DC,EAAc,IAAIC,EAAMH,EAAcpF,EAAML,MAAOC,GACnD4F,EAAcF,EAAYtF,aAEhCsF,EAAYR,SAAW9E,EAAME,QACzBM,KAAKsE,SACLtE,KACJgF,EAAYtF,SAAU,EACtBsF,EAAYrF,UAAYA,EACxBqF,EAAYpF,WAAaA,EAEzBoF,EAAYzG,KAAOiB,EAAMjB,KACzByG,EAAYvF,uBAAyBD,EAAMC,uBAC3CuF,EAAYxG,cAAgBgB,EAAMhB,cAClCwG,EAAYnF,WAAaL,EAAMK,WAE1BF,GAGHmF,EAAYzF,YAAcW,KAAKX,YAC/ByF,EAAYxF,YAAcU,KAAKV,kBAH1BC,aAAatD,KAAK6I,GAMlBA,mBAGT,eACO9E,KAAKZ,SAASa,QAAQ9J,eAAgB,KACnCuF,EAAUsE,KAAKtE,QACrBA,EAAQqI,WAAYlJ,YAAYa,GAI7BsE,KAAKR,MAAME,cACTuF,wBAAwB,8BAIjC,SAA+BC,OACvBjF,EAAUD,KAAKZ,SAASa,QACxBkF,EAAiBnF,KAAKT,aAAa6F,OAAOF,GAE3CjF,EAAQ9J,gBAAmB8J,EAAQ/J,mBACtCiP,EAAe/J,QAAQ,SAAAiF,GACrBA,EAAMgF,gCAKZ,SAAkB3J,MACXA,ODlZgBA,EAAsBW,ECqZrCiJ,EAAiBtF,KAAKtE,WACxBA,IAAY4J,EAAgB,KACxBrF,EAAUD,KAAKZ,SAASa,WAE1BqF,EACErF,EAAQ3L,WACVoH,EAAQzB,MAAMgF,KAAOqG,EAAerL,MAAMgF,KAE1CvD,EAAQzB,MAAMiF,IAAMoG,EAAerL,MAAMiF,QAEtC,KACCV,EAAgBwB,KAAKR,MAAMhB,cAEjCA,EAAcnC,UAAYX,EAAQ6J,aAAa,SAC/C/G,EAAcvE,MAAQyB,EAAQ6J,aAAa,cAGxC7J,QAAUA,EAEXuE,EAAQ7L,cDxaOsH,ECyaRA,EDza8BW,ECyalB4D,EAAQ7L,qBDxa/BsH,EAAQY,UACVZ,EAAQY,UAAUkJ,IAAInJ,GAEjBgI,EAAS3I,EAASW,KACrBX,EAAQW,WAAgBX,EAAQW,cAAaA,GAAaoJ,QAAQ,UAAW,OCwa7EC,EAAS1F,KAAKtE,QAAS/E,mCC5czBqN,EACA/D,QAEK+D,cAAgBA,OAChB2B,OAAS,QACTC,OAAS,QACT3H,MAAQ,CACXpB,KAAM,EACNC,KAAM,QAEH/B,OAAS,OACT8K,WAAa,OACb5F,QAAUA,OACVvL,UAAYuL,EAAQvL,gDAG3B,kBACSsL,KAAK2F,OAAO3F,KAAK/B,MAAMpB,kBAGhC,kBACSmD,KAAK2F,OAAO3F,KAAK/B,MAAMnB,kBAGhC,kBAEOkD,KAAK2F,cACL3F,KAAK4F,OAAOE,OAAO,SAACC,EAAWH,UAAeG,SAAcH,IAAS,uBAI5E,kBACS5F,KAAK2F,uBAGd,kBACS3F,KAAK4F,wBAGd,SAAqBI,EAAoBC,QAClCN,OAASK,OACTJ,OAASK,OAEThI,MAAQ,CACXpB,IAAKqJ,EAAUF,EAAW,SAAA3F,UAASyD,QAAQzD,KAC3CvD,IAAKkJ,EAAUjL,OAAS,QAErBA,OAASiL,EAAUG,OAAO,SAAA9F,UAASyD,QAAQzD,KAAQtF,cAG1D,SAAWoE,WACAa,KAAK2F,OAAOxG,UAGvB,SAAWA,UACFa,KAAK2F,OAAOxG,oBAGrB,kBACSa,KAAKjF,uBAGd,kBACSiF,KAAKtL,sBAGd,kBACSsL,KAAK/B,uBAGd,kBACS+B,KAAK6F,2BAGd,SAAoBnR,QACbA,UAAYA,MAEX4O,EAAatD,KAAKsD,aAClB8C,EAAYpG,KAAKoG,eAElB9C,GAAe8C,OAKdnI,EAAQ+B,KAAK/B,SACfmI,EAAUhO,WAAa1D,EAAW,KAC9ByQ,EAAiBnF,KAAK2F,OAAOP,OAAO1Q,EAAY,QACjDqG,QAAUoK,EAAepK,WAGxBsL,EADoBlB,EAAegB,OAAO,SAAA9F,WAAWA,IAAO,GACtBhB,YAE1CpB,EAAMnB,IADJuJ,EACUA,EAAkBjO,WAE9B6F,EAAMpB,KAAO,EAIXmD,KAAKsG,gBACPnB,EAAe/J,QAAQ,SAAAiF,UAASA,EAAMgF,qCAK5C,SAAqBQ,QACdA,WAAaA,YAKpB,SAAc1G,EAAe6G,OACrBL,EAAS3F,KAAK2F,OACd1H,EAAQ+B,KAAK/B,MACbsI,EAAavG,KAAKC,QAAQ1L,SAC1BG,EAAYsL,KAAKtL,UAGjB4K,EAAcU,KAAKwG,mBAAmBrH,GAItCmE,EAAatD,KAAKsD,aAClBmD,EAAiBnH,EACnBA,EAAY/G,aACZgO,GAAcjD,EACZA,EAAWiB,kBAAkB,GAAGhM,aAChC,UAGDmO,gBAAgBV,EAAWS,OAE5BE,EAAcX,EAAUjL,UAExBoE,EAAQlB,EAAMnB,IAChBkJ,EAAU5K,QAAQ,SAACiF,EAAOmE,GACxBmB,EAAOxG,EAAQqF,GAAUnE,QAEtB,KACCuG,EAAmBjB,EAAO3I,MAAMmC,EAAOA,EAAQ6G,EAAUjL,QAE3D8L,EAAkBX,EAAUU,EAAkB,SAAAvG,WAAWA,OACzDwG,EAAkB,IAEpBA,EAAkBD,EAAiB7L,QAErC4L,EAAcX,EAAUjL,OAAS8L,EAGjClB,EAAOP,aAAPO,GAAcxG,EAAO0H,UAAoBb,IAGrCL,EAAO5K,OAASrG,EAAY,EAAG,KAC3BoS,EAAgBnB,EAAOP,OAAO1Q,EAAY,GAC7CyR,OAAO,SAAA9F,UAASyD,QAAQzD,UACtBtF,QAAU+L,EAAc/L,WAGvBgM,EAAerS,EAAYwR,EAAUlG,KAAK2F,OAAOqB,SAASC,UAAW,SAAA5G,WAAWA,SAGjFsF,OAAOP,OAAO2B,EAAe,QAC7B9I,MAAMnB,IAAMiK,EAEb/G,KAAKsG,gBACPQ,EAAc1L,QAAQ,SAAAiF,UAASA,EAAMgF,sBAMzB,EAAdsB,GACFhB,EAAO3I,MAAMmC,EAAQ6G,EAAUjL,QAAQK,QAAQ,SAAAiF,GAC7CA,EAAM6G,SAAS7G,EAAMjI,WAAauO,UAKjC5L,QAAUiL,EAAUjL,YACpBoM,YAAYhI,GAEboH,EAAY,MACTa,aAAajI,EAAO6G,EAAWA,EAAUjL,OAAS4L,EAAarH,OAC9DsG,EAAS5F,KAAK4F,OACdyB,EAAarH,KAAK2F,OAAO5K,OAC3B6K,EAAO,IAAMA,EAAO,GAAG7K,OAASrG,EAAY,GAC9CkR,EAAOxK,QAAQ,SAAAkM,GACbA,EAASlC,OAAOiC,YAKfV,aAGT,SAAexH,EAAe6G,OACtBL,EAAS3F,KAAK2F,OACd1H,EAAQ+B,KAAK/B,MAEbsI,EADUvG,KAAKC,QACM1L,SAGrB+K,EAAcU,KAAKwG,mBAAmBrH,EAAQ6G,EAAUjL,QAIxDuI,EAAatD,KAAKsD,aAClBmD,EAAiBnH,EACnBA,EAAY/G,aACZgO,GAAcjD,EACZA,EAAWiB,kBAAkB,GAAGhM,aAChC,UAGDmO,gBAAgBV,EAAWS,GAE5BtH,EAAQlB,EAAMnB,MAEf6I,EAAOxG,GAAiB,UAGrBoI,EAAiB5B,EAAOP,aAAPO,GAAcxG,EAAO6G,EAAUjL,eAAWiL,IAC3DwB,EAAmBD,EAAepB,OAAO,SAAA9F,UAASyD,QAAQzD,KAAQtF,mBAInEA,QAAUiL,EAAUjL,OAASyM,OAC7BL,YAAYhI,GAEboH,QACGa,aAAajI,EAAO6G,EAAWA,EAAUjL,OAAQuE,GAGpDU,KAAKsG,gBACPiB,EAAenM,QAAQ,SAAAiF,UAASA,GAASA,EAAMgF,kBAG1CkC,YAGT,SAAcpI,EAAesI,gBAAAA,SACrBlB,EAAavG,KAAKC,QAAQ1L,SAC1BoR,EAAS3F,KAAK2F,OACdC,EAAS5F,KAAK4F,OAEpB6B,EAAczS,KAAK8H,IAAI2K,EAAa,OAE9BC,EAAgB/B,EACnBP,OAAOjG,EAAOsI,GACdtB,OAAO,SAAA9F,WAAWA,IAEjBL,KAAKsG,gBACPoB,EAActM,QAAQ,SAAAiF,UAASA,EAAMgF,kBAGnCkB,GACFX,EAAOxK,QAAQ,SAAAkM,GACbA,EAASlC,OAAOjG,EAAOsI,KAK3B9B,EACG3I,MAAMmC,GACN/D,QAAQ,SAAAiF,GACPA,EAAM6G,SAAS7G,EAAMjI,WAAaqP,SAIlC/S,EAAYiR,EAAO5K,OAAS,MAC3B4K,EAAOjR,GAAY,KAEhBiT,EAAwBzB,EADPP,EAAOqB,SAASC,UACiB,SAAA5G,WAAWA,IACnE3L,EAAYiT,EAAwB,GAC/B,EACDjT,EAAYiT,EAGhBhC,EAAOP,OAAO1Q,EAAY,GACtB6R,GACFX,EAAOxK,QAAQ,SAAAkM,GACbA,EAASlC,OAAO1Q,EAAY,iBAM7BuJ,MAAQ,CACXpB,IAAKqJ,EAAUP,EAAQ,SAAAtF,WAAWA,IAClCvD,IAAKpI,QAEFqG,QAAU2M,EAAc3M,OAEzBiF,KAAKjF,QAAU,SAEZ6K,OAAS,QACTC,WAAa,GAGb6B,oBAGT,eACQE,EAAY5H,KAAK4H,YAAYzB,OAAO,SAAA9F,WAAWA,IAC/CwH,EAAiBD,EAAU7M,YAE7B8M,GAAkB,IAItBD,EAAU5K,MAAM,EAAG4K,EAAU7M,OAAS,GAAGK,QAAQ,SAACiF,EAAO7C,OACjDoF,EAAYgF,EAAUpK,GACtB2F,EAAYyE,EAAUpK,EAAM,GAElC6C,EAAMhB,YAAcuD,EACpBvC,EAAMf,YAAc6D,QAGhBG,EAAasE,EAAU,GACvBxB,EAAYwB,EAAUC,EAAiB,GAE7CvE,EAAWjE,YAAc,KACzBiE,EAAWhE,YAAcsI,EAAU,GACnCxB,EAAU/G,YAAcuI,EAAUC,EAAiB,GACnDzB,EAAU9G,YAAc,KAEpBU,KAAKC,QAAQ1L,YACf+O,EAAWjE,YAAc+G,GACf9G,YAAcgE,oBAI5B,SAAoB1D,EAAoBT,EAAeI,EAAuBkI,gBAAAA,SACtE7B,EAAS5F,KAAK4F,OACdlR,EAAYsL,KAAKtL,aAElBkR,EAAOhG,GAOL,KACCkI,EAAelC,EAAOhG,GAExBT,GAAS2I,EAAa/M,OACxBwE,EAAanE,QAAQ,SAACiF,EAAOmE,GAC3BsD,EAAa3I,EAAQqF,GAAUnE,KAGjCyH,EAAa1C,aAAb0C,GAAoB3I,EAAOsI,UAAgBlI,IAEvCA,EAAaxE,OAASrG,EAAY,GACpC6K,EAAa6F,OAAO1Q,EAAY,QAlBb,KACjBqT,EAAqB,GAC3BxI,EAAanE,QAAQ,SAACiF,EAAOmE,GAC3BuD,EAAU5I,EAAQqF,GAAUnE,IAG9BuF,EAAOhG,GAAcmI,wBAmBzB,SAAyBnI,GACRI,KAAK2F,OAEbvK,QAAQ,SAAAiF,GACbA,EAAM4E,wBAAwBrF,UAE3BgG,OAAOR,OAAOxF,kBAGrB,SAAmBlE,eAEGsM,EADFhI,KAAK4H,YACH1M,WAAAA,SAATmF,UACJA,KAGgBA,EAAM9H,aACVgE,SAASb,UACjB2E,yBAKb,SAA0BlB,OACJ,QAAA8I,EAAAjI,KAAK2F,OAAO3I,MAAMmC,GAAlBjE,WAAAA,SAATmF,UACLA,GAASA,EAAMjI,YAAc+G,GAASkB,EAAM9H,aAAawL,kBACpD1D,mBAKb,SAAqBlB,EAAe+I,EAAyBT,EAAqBnI,kBAC1E0E,EAAgBhE,KAAKgE,cACrB6B,EAAa7F,KAAKmI,gBAClB/B,EAAYpG,KAAKoG,YACjBgC,EAA2BhC,EAC7BA,EAAU7B,kBACV,GACE8D,EAA6B/I,EAC/BA,EAAYiF,kBACZ,cAEO3E,OACH0I,EAAmBD,EAAkBzI,GACrC2I,EAAmBH,EAAgBxI,GAEnC4I,EAAsBF,EACxBA,EAAiB/P,aACjBgQ,EACEA,EAAiBhQ,aAAakQ,mBAC9B,KAEAxC,EAAYiC,EAAeQ,IAAI,SAAArI,OAC7BwC,EAAQxC,EAAMwC,MAAMjD,UAEtB+I,EAAKrC,gBACPtC,EAAczJ,aAAasI,EAAMtK,aAAciQ,GAG1C3F,IAGT+F,EAAKC,aAAajJ,EAAYT,EAAO8G,EAAWwB,eApBzBQ,EAAAa,EAAQjD,GAAR3K,WAAAA,6BAwB3B,SAAoB6N,OACZpD,EAAS3F,KAAK2F,OACd1H,EAAQ+B,KAAK/B,MAEb8I,EAAepB,EAAO5K,OAAS,EACjCgM,EAAe9I,EAAMnB,MACvBmB,EAAMnB,IAAMiK,IAEVgC,EAAiB9K,EAAMpB,KAAOoB,EAAMpB,IAAM,KAC5CoB,EAAMpB,IAAMkM,sBAIhB,SAAwB/C,EAAoBS,MACtCzG,KAAKsG,eAAgB,KACjB0C,EAAW9U,SAAS+U,yBAC1BjD,EAAU5K,QAAQ,SAAAiF,UAAS2I,EAAS9E,YAAY7D,EAAM9H,qBACjDyL,cAAczJ,aAAayO,EAAUvC,oBAI9C,eACQxG,EAAUD,KAAKC,eAEbA,EAAQ9J,iBAAmB8J,EAAQ/J,6DCjdtB,iBACuB,sBACX,uBACL,qCAK9B,SAAegT,QACRC,MAAQD,EAAUC,WAClBC,UAAYF,EAAUE,eACtBC,YAAcH,EAAUG,iBACxBC,aAAeJ,EAAUI,uBAGhC,SAAcC,cAId,SAAcC,EAAQC,gBAItB,SAAgBD,EAAQC,iBAIxB,SAAiBD,EAAQC,sBAIzB,SAAsBD,EAAQC,gBAI9B,SAAgBD,EAAQC,0FClCRd,OAAO/Q,EACP+Q,WAAU,EACVA,WAAU,IAHJe,0CAKtB,gBACON,UAAY,UACZC,YAAc,UACdF,MAAQ,OACRG,aAAe,YAGtB,SAAcE,EAAQvB,OAAE0B,aAAUvK,aAAUwK,iBAAcC,iBAEpDF,EAASlR,iBAAmB,SAC1B2G,EAASa,QAAQzL,UACnB4K,EAAS0K,WAAW1K,EAAS+B,oBAAqBqI,QAEpDK,EAAUjS,QAIP0R,aAAelK,EAAS+B,oBAC7ByI,EAAahT,EAAOC,WAAY2S,GAAG,GAChCO,UAAU,WACTF,EAAUjS,KAEXoS,UAAU,WACTH,EAAUjS,iBAKhB,SAAgB4R,EAAQC,OACdG,iBAAcC,cAEtBD,EAAahT,EAAOG,WAAYyS,GAAG,GAChCO,UAAU,WAETF,EAAUjS,GACPqS,SAAST,EAAGC,KAEhBO,UAAU,WACTH,EAAUjS,SA3CMsS,mFCCNvB,OAAO/Q,EACP+Q,WAAU,EACVA,WAAU,EAElBA,eAAoB,OALHe,2CAOzB,SAAgBF,EAAQC,OACdE,aAAUC,iBAAcC,cAE1BrF,EAASmF,EAAS1J,QAAQ3L,WAC5BkV,EAAEW,WAAWC,QACbZ,EAAEW,WAAWE,aACZjB,UAAY5E,EAAS,EACtB3M,EAAUE,KACVF,EAAUC,KAEd8R,EAAahT,EAAOG,WAAYyS,GAAG,GAChCO,UAAU,WAETF,EAAUjS,GACPqS,SAAST,EAAGC,KAEhBO,UAAU,WACTH,EAAUjS,kBAIhB,SAAiB4R,EAAQC,OACfrK,aAAUwK,iBAAcC,iBAEhCD,EAAahT,EAAOE,SAAU0S,GAAG,GAEX,IAAlBA,EAAEL,MAAMmB,aAOVd,EAAEe,MAAM,CAAED,MAAOlL,EAAS+B,qBAAuB,QACjD0I,EAAUjS,QAMP4S,aAAehB,cAGtB,SAAgBA,EAAQvB,OAAE7I,aAAUwK,qBAGlCC,eAAUjS,GAELoI,KAAKwK,kBASJC,EAHezK,KAAKwK,aAGUL,WAAWO,SAASzP,OAClD0P,EAAevL,EAASoB,aAAaoK,YAAYH,GACjDI,EAAiBzL,EAAS+B,uBAE5BwJ,EAAc,KACVG,EAAuBH,EAAa/J,cAQ1CgJ,EAAahT,EAAOQ,OAAQ,MAAM,EAAM,CACtCgS,UARuCyB,EAAvBC,EACdjT,EAAUE,KACV+S,EAAuBD,EACrBhT,EAAUC,KACV,KAKJqH,MAAOwL,EAAavS,WACpBiI,MAAOsK,UAhFYT,mFCCTvB,OAAO/Q,EACP+Q,WAAU,EACVA,WAAU,IAHAe,2CAK1B,SAAgBF,EAAQvB,OAAE6B,eAAYD,cAC/BL,EAAEL,MAAMmB,OAIbR,EAAWN,GACRQ,UAAU,WACTH,EAAUjS,kBAIhB,SAAiB4R,EAAQC,OACfE,aAAUvK,aAAUwK,iBAAcC,cAAWkB,eAE/C5B,EAAQnJ,KAAKmJ,MACb6B,EAAWhW,KAAKiW,IAAI9B,GACpBlJ,EAAU0J,EAAS1J,QACnB3L,EAAa2L,EAAQ3L,WACrBwB,EAAWsJ,EAAStJ,SACpBqU,EAAaX,EAAEW,WAEfe,EAAW5W,EACb6V,EAAWgB,UACXhB,EAAWiB,UACTC,EAAa/W,EACf6V,EAAWmB,OACXnB,EAAWoB,OACTC,EAAuC,EAArBxW,KAAKiW,IAAIC,GAC7BA,EAAW,EACA,EAAXF,EACU,EAAR7B,EACAkC,EAAa,EAEbI,EAAgBrM,EAASa,QAAQxK,MACnCT,KAAK8H,IAAIkO,EAAUhW,KAAKiW,IAAII,IAC5BL,EACEU,EAAavB,EAAWmB,OAC1BtW,KAAKiW,IAAI,IAAMjW,KAAK2W,KAAKxB,EAAWoB,OAASpB,EAAWmB,QAAUtW,KAAK4W,IACvE,GACEC,EAAsBvX,EACxBoX,GAAczL,EAAQ7K,eACtBsW,EAAazL,EAAQ7K,eACnB0W,EAAgBL,GAAiBxL,EAAQrL,WAC1CiX,EAECE,EAAkB,CACtB3M,WACA4M,UAAWxC,EACXhK,MAAOQ,KACPyL,gBACAD,mBAKF5B,EAAahT,EAAOE,SAAU0S,GAAG,OAE3BH,EAAcrJ,KAAKqJ,gBACpByC,GAAiBzC,EAAa,KAE3B4C,EAAoBnW,EAASoW,yBAAyBH,UAE5D3M,EAASjH,OACP8T,EAAkB5L,MAClB4L,EAAkBE,QAClBF,EAAkBtK,UAClB6H,EACAyC,EAAkBpX,eAEpBgV,EAAUjS,OAIN4J,EAAepC,EAAS9G,kBACxB8T,EAAehN,EAASiN,sBAEzB7K,IAAiB4K,SAEpB5C,EAAE8C,YACFzC,EAAUjS,OAIN2U,EAAWT,EACbhW,EAAS0W,gBAAgBT,GACzBjW,EAAS2W,iBAAiBV,GAE9B3M,EAASjH,OACPoU,EAASlM,MACTkM,EAASJ,QACTI,EAAS5K,UACT6H,EACA+C,EAAS1X,UACTkV,UAAU,WACVF,EAAUjS,KACToS,UAAU,WACXH,EAAUjS,GACVmT,EAAWvB,SAtGWU,mFCEVvB,OAAO/Q,EACP+Q,WAAU,EACVA,WAAU,IAHCe,yCAK3B,SAAcF,EAAQvB,OAAE7I,aAAUwK,iBAAcC,cACxC5J,EAAUb,EAASa,QACnByM,EAAatN,EAASuN,gBACtBlM,EAAiBrB,EAASsB,oBAC1BkM,EAAY5X,KAAK2L,OAAOX,KAAKsJ,aAAetJ,KAAKmJ,MAAQuD,EAAWzU,MAAQwI,GAE5E4I,EAAcrJ,KAAKqJ,eACrBpJ,EAAQ1L,UAA0B,IAAdqY,GAAmBvD,EAAa,KAChDxD,EAAazG,EAASoB,aAAa2H,gBACnC0E,EAAyBxD,EAAYzI,cAGrCkM,EAAgBC,EAAU1D,EAAYvG,gBAAkB8J,GAAY,EAAG/G,EAAa,GAAG,GACvFmH,EAAoBH,EAAyBD,EAAYnM,EACzDwM,EAAiB5D,EAAYrH,qBAAqB8K,EAAgB,GAAGjK,MAAMiK,GAAe,GAGhGG,EAAelK,YAAYiK,QACtB3D,YAAc4D,OAIhB9D,MAAQ,OACRG,aAAelK,EAAS+B,oBAG7B/B,EAAS8N,gBAAgB9N,EAASiN,mBAClCzC,EAAahT,EAAOC,WAAY2S,GAAG,GAChCO,UAAU,WACTF,EAAUjS,KAEXoS,UAAU,WACTH,EAAUjS,iBAIhB,SAAgB4R,EAAQvB,OAAE6B,eAAYD,cAC/BL,EAAEL,MAAMmB,OAIbR,EAAWN,GACRQ,UAAU,WACTH,EAAUjS,iBAIhB,SAAgB4R,EAAQvB,OAAE0B,aAAUvK,aAAUwK,iBAAcC,cACpDsD,EAAY3D,GAAKA,EAAE2D,UAEzB/N,EAASa,QAAQxK,MACb2J,EAAS8N,gBAAgBlN,KAAKqJ,aAC9BjK,EAAS8N,gBAAgB9N,EAASiN,mBACtCxC,EAAUjS,GACVgS,EAAahT,EAAOK,SAAUuS,EAAG2D,EAAW,CAC1C/D,UAAWpJ,KAAKoJ,YAGdO,EAAS1J,QAAQ1K,UACnB6J,EAASgO,yBAhEclD,mFCAXvB,OAAO/Q,EACP+Q,WAAU,EACVA,WAAU,IAHAe,iDAK1B,SAAsBF,EAAQvB,IAC5B4B,eAAUjS,eAGZ,SAAgB4R,EAAQvB,OAAE7I,aAAUyK,cAElCL,EAAE8C,OAGFlN,EAASiO,mBAAmBjO,EAAS+B,qBACrC0I,EAAUjS,gBAGZ,SAAiB4R,EAAQvB,OAAE4B,cAEH,IAAlBL,EAAEL,MAAMmB,OACVT,EAAUjS,OArBYsS,mDCMH,IAAIoD,iBA2BR,SAACC,OACZC,EAAe7E,EAAKnJ,SAEtBgO,EAAa1Z,OAASyZ,EAAe,KACnChE,gBAEIgE,QACD3V,EACH2R,EAAY,IAAI+D,aAEb1V,EACH2R,EAAY,IAAIkE,aAEb7V,EACH2R,EAAY,IAAImE,aAEb9V,EACH2R,EAAY,IAAIoE,aAEb/V,EACH2R,EAAY,IAAIqE,EAIpBJ,EAAaK,OAAOtE,GACpBA,EAAWuE,QAAQN,GAEnB7E,EAAKnJ,MAAQ+J,SAERZ,EAAKnJ,uCAtDd,SAAYmC,EAAmC6H,EAAQC,OAC/C+D,EAAexN,KAAKR,aAClBmC,QACDpK,EAAYC,KACfgW,EAAaO,OAAOvE,EAAGC,cAEpBlS,EAAYL,OACfsW,EAAavD,SAAST,EAAGC,cAEtBlS,EAAYE,QACf+V,EAAaQ,UAAUxE,EAAGC,cAEvBlS,EAAYG,cACf8V,EAAaS,eAAezE,EAAGC,cAE5BlS,EAAYI,OACf6V,EAAaU,SAAS1E,EAAGC,gBAK/B,kBACSzJ,KAAKR,qCCzBFzL,SACVoa,0BAJiBxF,OAAelV,EAAUC,KAK1CiV,EAAK5U,MAAQA,IANE2V,kDASjB,SAAuB0E,OACbhP,aAAU4M,cAAWP,kBACvB4C,EAAYrO,KAAKjM,MACjBua,EAAatZ,KAAKiW,IAAIe,EAAU7C,MAAMmB,OACtC9I,EAAepC,EAAS9G,kBACxB8T,EAAehN,EAASiN,kBACxBkC,EAA0BvO,KAAKwO,kBAAkBJ,GAGjDK,EAA0BrP,EAASsP,mBACnCtC,EAAahU,aAAeoJ,EAAapJ,WACzCuW,GAAwBvP,EAASwP,iBACjCnD,GAAiB8C,GAA2BE,UAElC,EAAZJ,GAA8BE,EAAbD,EACZtO,KAAK6O,iBAAiBT,GACpBO,EACF3O,KAAK8O,kBAAkBV,GAEvB,CACL/N,MAAO+L,EACPvX,SAAUuK,EAASa,QAAQpL,SAC3BsX,QAAS/M,EAASwC,sBAAsBwK,GACxCzK,UAAW8J,GAAiB8C,EACxB3X,EAAOO,QACPP,EAAOM,4BAKjB,SAA2BkX,WACjBpC,cAAW5M,aAAUI,UAAOgM,oBAE9B8C,EAAatZ,KAAKiW,IAAIe,EAAU7C,MAAMmB,OACtCiE,EAA0BvO,KAAKwO,kBAAkBJ,GACjDC,EAAYrO,KAAKjM,MACjBkM,EAAUb,EAASa,QACnBQ,EAAiBrB,EAASsB,oBAC1BqO,EAAU9O,EAAQpK,IAAM,EACxBmZ,EAAqBhD,EAAUG,QAAQ7B,MAAQlL,EAAS4B,4BAE1DiO,EAAc7P,EAASiN,kBACvB6C,EAAaD,EAAYnM,gBAAkB,EAC3CqM,EAAmB,EAEhBA,EAAmBd,GAAW,KAE7Be,EAAgBH,EAAYI,mBAC5BC,EAAgBF,EAAcxO,cAAgBsO,EAAazO,EAC3DW,EAAYgO,EAAcrO,aAO7ByK,GAAuCwD,EALhBM,EAAgBlO,EAAY2N,IAM/CvD,GALmB8D,EAAgBP,EAKIC,YAKxCO,EAAe/D,EACjByD,EAAY3P,YACZ2P,EAAY5P,gBACXkQ,YAICC,EAAaP,EAAY7W,WACzBqX,EAAeF,EAAanX,YAC7BoT,GAAmBiE,GAAgBD,IACjChE,GAAmCgE,GAAhBC,KAExBP,EAAa1D,EACT0D,EAAa,EACbA,EAAa,GAEnBD,EAAcM,EACdJ,GAAoB,MAGhBO,EAAmBT,EAAYI,mBAAmBzO,cAErC,IAAfsO,IACFD,EAAcA,EAAYpM,MAAMoM,EAAYnM,iBAAiB,IACjDC,YAAY2M,EAAmBR,EAAazO,OAGpDkP,EAAkBvQ,EAASa,QAAQpL,SACnCA,EAAW0I,EAAMyO,EAAUnX,SAAU8a,EAAiBA,EAAkBR,SAEvE,CACL9O,MAAO4O,EACP9C,QAAS/M,EAASwC,sBAAsBqN,GACxCpa,WACA8M,UAAW3M,KAAK8H,IAAIwR,EAAY9O,EAAM2J,OAASoF,EAC3C3X,EAAOM,OACPN,EAAOO,8BAIf,SAA0BiX,OAChBhP,aAAUoM,oBAEZvL,EAAUb,EAASa,QACnBmC,EAAehD,EAASwQ,kBACxBpO,EAAepC,EAASoB,aAAaqP,IAAIzN,GACzC0N,EAAiB1Q,EAASqC,oBAC1BiL,EAAatN,EAASuN,gBAEtBoD,EAAmBvO,EAAaQ,qBAAqB,GAMrDgO,EALS/P,EAAQ1L,UACjBS,KAAKiW,IAAIzJ,EAAaE,oBAAsBoO,GAC5C9a,KAAKiW,IAAI8E,EAAiBrO,oBAAsBoO,GAIlDC,EACAvO,EACEyO,EAAeD,EAAUpP,cAEzBsP,EAAgB1E,EAClBwE,EAAU1Q,YACV0Q,EAAU3Q,YAERsC,EAAYuO,EACdtZ,EAAOM,OACPN,EAAOO,QACL8X,EAAciB,GAEhBF,EACEG,EAA+BlB,EAAYhO,4BAO3CmP,GALyBnQ,EAAQ1L,SACnCiX,EACEyE,EAAeD,EAAUjP,UAAYoP,EAA+BlQ,EAAQpK,IAC5Eoa,GAAgBhB,EAAYlO,UAAYoP,GAAgClQ,EAAQpK,IAClFoZ,EAAYvN,qBACmCtC,EAAS4B,kCAKrD,CACLX,MAAO4O,EACP9C,QANc/M,EAASsP,kBACrBnR,EAAM6S,EAAmB1D,EAAWzU,KAAMyU,EAAWxU,MACrDkY,EAKFvb,SAAUoL,EAAQpL,SAClB8M,wECzJJ,SAAU7N,UACDA,IAASkM,KAAKlM,yBAGvB,SAAwBsa,OAChBhP,EAAWgP,EAAIhP,SACfa,EAAUb,EAASa,QAEnBI,EAAQJ,EAAQ1L,SAClByL,KAAKqQ,+BAA+BjC,GACpChP,EAAS9G,wBAEN,CACL+H,QACA8L,QAAS/M,EAASwC,sBAAsBvB,GACxCxL,SAAUoL,EAAQpL,SAClB8M,UAAW/K,EAAOO,qCAItB,SAAgCiX,OACtB5O,UAAOJ,aACTiK,EAAc7J,EAAM6J,kBAEnB,CACLhJ,MAAOgJ,EACP8C,QAAS/M,EAASwC,sBAAsByH,GACxCxU,SAAUuK,EAASa,QAAQpL,SAC3B8M,UAAW,yBAKf,SAA4ByM,OAClBhP,aAAUoM,oBAEZvL,EAAUb,EAASa,QACnBuB,EAAepC,EAAS9G,kBACxByW,EAAU9O,EAAQpK,IAAM,EAExB4J,EAAyB+B,EAAaP,4BAQxCsN,EAA0B/C,EAC1BhK,EAAaT,UAAYtB,EAAyBsP,EAClDtP,EAAyBsP,SAE7BR,EAA0BvZ,KAAK8H,IAAIyR,EAAyBtO,EAAQrL,6CAKtE,SAAuCwZ,OAC/BhP,EAAWgP,EAAIhP,SACfgQ,EAAgBhQ,EAAS9G,kBAAmB+W,mBAC5CS,EAAiB1Q,EAASqC,oBAE1BsO,EAAmBX,EAAcpN,qBAAqB,GACtDsO,EAAStb,KAAKiW,IAAImE,EAAc1N,oBAAsBoO,GACxD9a,KAAKiW,IAAI8E,EAAiBrO,oBAAsBoO,UAE3C1B,EAAI5C,iBAAmB8E,EAC5BP,EACAX,0CCnEJjB,YAAMxZ,EAAAA,gBAJWgU,OAAelV,EAAUE,cADrB+V,kDAQvB,SAAuB0E,OACbpC,cAAWxM,UAAOJ,aACpB+M,EAAUH,EAAUG,QAAQ7B,MAC5BiE,EAA0BvO,KAAKwO,kBAAkBJ,GACjD1B,EAAatN,EAASuN,gBACtBnL,EAAepC,EAAS9G,kBACxB2H,EAAUb,EAASa,WAGbsO,EADEvZ,KAAKiW,IAAIe,EAAU7C,MAAMmB,MAAQ9K,EAAM2J,OAChB,KAC7BoD,EAAW4B,YAAMU,2BAAiBT,UAExC7B,EAAS1X,SAAWmX,EAAUnX,SAC9B0X,EAASJ,QAAUA,EACnBI,EAAS5K,UAAa1B,EAAQ1L,UAAYgY,EAASlM,QAAUmB,EAEzD5K,EAAOM,OADP,GAGGqV,MAEH6D,EAAoBnQ,EAAQ1L,SAC5BwY,EAAUZ,EAASO,EAAWzU,KAAMyU,EAAWxU,MAAM,GACrDiU,SACJiE,EAAoB7S,EAAM6S,EAAmB1D,EAAWzU,KAAMyU,EAAWxU,MACzEkY,GAAqBhR,EAAS4B,4BAIvB,CACLX,MAHqBjB,EAASmR,mBAAmBH,GAIjDjE,UACAtX,SAAUmX,EAAUnX,SACpB8M,UAAW,wBAKjB,SAAwByM,UACfpO,KAAKwM,gBAAgB4B,+BAG9B,SAAgCA,OACtBhP,mBAED,CACLiB,MAAOjB,EAASiN,kBAChBF,QAAS/M,EAAS+B,oBAClBtM,SAAU,EACV8M,UAAW,yBAIf,SAA4ByM,OAClBhP,aAAUoM,oBAEZvL,EAAUb,EAASa,QACnBuB,EAAepC,EAAS9G,kBACxByW,EAAU9O,EAAQpK,IAAM,EAExByT,EAAelK,EAASoR,aAAaC,WAAWnH,aAChDoH,EAAuBlP,EAAaZ,cAKpC+P,EAAqBrH,EAAelK,EAAS4B,4BAE7CP,EAAiBrB,EAASsB,oBAC5B6N,EAA0B/C,EAC1BkF,EAAuBlP,EAAaT,UAAY4P,EAAqB5B,EACrE4B,EAAqBD,EAAuB3B,SAChDR,EAA0BvZ,KAAKiW,IAAIsD,EAA0B9N,GAEtDzL,KAAK6H,IAAI0R,EAAyB9N,EAAiB8N,OAjFrCqC,2BC0DrBjH,EACA1J,EACA2J,2BAjC0B,mBAwMR,SAACoC,GACfA,GAAaA,EAAUzB,OACzByB,EAAUzB,MAAM,CAAED,MAAO3B,EAAKnJ,MAAMlJ,UAAY,GAGlDqS,EAAK6H,aAAa3G,UAAUjS,SA1KvB+R,SAAWA,OACXC,aAAeA,OAEfpK,MAAQ,CACXjB,KAAM,EACNjI,SAAU,EACVua,mBAAoB,EACpBC,uBAAwB,EACxBC,eAAgB,EAChBrE,WAAY,CACVzU,KAAM,EACNC,KAAM,GAER8Y,aAAc,CACZnU,IAAKoU,IACLnU,IAAKmU,KAEPC,UAAWlW,EACXvG,kBAAmB,EACnB0c,eAAgB,GAChBC,kBAAkB,EAClBC,iBAAiB,EACjBC,eAAe,EACfC,sBAAuB,CACrBlV,UAAW,KACXpC,MAAO,MAETuX,oBAAqB,CACnBnV,UAAW,KACXpC,MAAO,MAET4F,WAAY,WAETI,QAAUA,OACVuQ,aAAe,IAAIiB,OACnBC,cAAgB,QAChBC,YAAc,QAEdC,0CAGP,SACEvR,EACA8L,EACAxK,EACAqK,EACAnX,2BAAAA,EAAmBmL,KAAKC,QAAQpL,cAe5Bgd,EAbErS,EAAQQ,KAAKR,MACbgO,EAAexN,KAAKwQ,aAAaC,WACjCpO,EAAkB7C,EAAMlJ,SAExB6W,IAAYnB,GACdA,EAAUmB,UAER/D,EAAY+C,IAAY9J,EAC1B,KACUA,EAAV8J,EACEtU,EAAUE,KACVF,EAAUC,YAId+Z,EADElQ,IAAc/K,EAAOM,OACT8I,KAAK4J,aAAahT,EAAOM,OAAQ8U,EAAWmB,EAAW,CACnEhO,MAAOkB,EAAMjI,WACbiI,QACA+I,cAEOzH,IAAc/K,EAAOO,QAChB6I,KAAK4J,aAAahT,EAAOO,QAAS6U,EAAWmB,GAE7C,CACZpD,UAAA,SAAU5L,UACRA,IACO6B,MAETgK,UAAA,kBACShK,QAKD+J,UAAU,WACpByD,EAAarE,MAAQ,EACrBqE,EAAalE,aAAeX,EAAKxH,oBACjCqM,EAAanE,YAAchJ,EAC3BmN,EAAapE,UAAY+C,IAAY9J,EACjC,KACUA,EAAV8J,EACEtU,EAAUE,KACVF,EAAUC,KAEZqU,IAAY9J,IAEdsG,EAAKyD,aAAe/L,EACpBsI,EAAKnH,aAAenB,GAGlB2L,GAAaA,EAAUzB,MAEzByB,EAAUzB,MAAM,CAAED,MAAO6B,GAAWtX,GAEpC8T,EAAKmJ,KAAKvH,MAAM,CAAED,MAAO6B,GAAWtX,KAIjCgd,gBAGT,SAAkB7T,EAAagO,OACvBxM,EAAQQ,KAAKR,MACbS,EAAUD,KAAKC,QACfrG,EAAY4F,EAAM0R,UAAUrX,KAC5B6S,EAAalN,EAAMkN,WAGrBzM,EAAQ1L,WAAawd,EAAU/T,EAAK0O,EAAWzU,KAAMyU,EAAWxU,QAClE8F,EAAM+O,EAAU/O,EAAK0O,EAAWzU,KAAMyU,EAAWxU,MAAM,IAEzDsH,EAAMlJ,SAAW0H,OACZoO,aAAepM,KAAKgS,uBACnB5F,EAAepM,KAAKoM,aACpB6F,EAA0B7F,EAC5BA,EAAaxL,cACb,KAIAwL,EAAc,KACV0D,EAAiB9P,KAAKyB,oBACtB6N,EAAgBlD,EAAaxL,cAC7BQ,EAAYgL,EAAarL,UACzBgO,EAAU9O,EAAQpK,IAAM,EAG9B2J,EAAMqR,oBAAsBf,EAAiBR,EAAgBP,IAAY3N,EAAY,EAAI2N,QAEzFvP,EAAMqR,mBAAqB,OAGxBqB,eAAelG,GAOpBhO,IAJgCoO,EAC5BA,EAAaxL,cACb,GAE8BqR,EAClCzS,EAAMlJ,SAAW0H,OAEZmU,0BAGCC,EAAYnS,EAAQ/J,kBACtBsJ,EAAMuR,eACN,EAGEsB,GAFapS,EAAQ3L,WACvB,GAAG0J,EAAMoU,GAAY,GAAK,CAAC,IAAKpU,EAAMoU,KACb1J,IAAI,SAAA4J,UAAYtd,KAAKud,MAAMD,UAAYE,KAAK,WAEpExO,cAAc/J,MAAML,GAAa4F,EAAM0R,UAAUpX,MAClD,eAAeuY,WACf,aAAaA,qBAWnB,eACQ7S,EAAQQ,KAAKR,MACbS,EAAUD,KAAKC,QAErBT,EAAMK,WAAa,KACnBL,EAAMwR,aAAe,CAAEnU,IAAKoU,IAAKnU,IAAKmU,SAEhCwB,EAAkBzS,KAAKyS,gBACxBxS,EAAQ3L,WAIXme,EAAgBxY,MAAMxD,OAAS,GAF/Bgc,EAAgBxY,MAAMzD,MAAQ,GAIhCgJ,EAAM4R,kBAAmB,OACpBO,YAAc,aAGrB,gBACOe,kBACAC,oCACAvF,0BACAwF,wBACAC,yBACAC,4BACAC,oCAIP,eACQvT,EAAQQ,KAAKR,MACbgB,EAAeR,KAAKQ,aACpBsP,EAAiB9P,KAAKyB,2BAExBzB,KAAK4O,eACUpP,EAAMlJ,UAEJkJ,EAAMkN,WAAWzU,KAChCuI,EAAa8C,aACb9C,EAAa4F,YAGZpG,KAAKuQ,mBAAmBT,yBAGjC,SAA0BxZ,WAKpB8V,EADA4G,EAAkBre,EAAAA,MAGFqT,EANChI,KAAKQ,aAEKoH,YAIX1M,WAAAA,SAATmF,UACJA,OAGC4S,EAAe5S,EAAMO,cACrBsS,EAAeD,EAAe5S,EAAMU,UAGpCoS,EAAWpB,EAAUzb,EAAU2c,EAAcC,GAC/C,EACAle,KAAK6H,IACL7H,KAAKiW,IAAIgI,EAAe3c,GACxBtB,KAAKiW,IAAIiI,EAAe5c,OAGb0c,EAAXG,QAEG,GAAIA,IAAaH,GACQhe,KAAKiW,IAAI3U,EAAW8V,EAAc1K,qBACzC1M,KAAKiW,IAAI3U,EAAW+J,EAAMqB,2BAOnDsR,EAAkBG,EAClB/G,EAAe/L,UAGV+L,+BAGT,SAAiC/L,OAC3B+S,EAAU/S,EACVgT,EAAmB1e,EAAAA,EACjBmb,EAAiB9P,KAAKyB,2BAETpB,EAAM2B,qBACd5G,QAAQ,SAAAkY,OACXC,EAAiBD,EAAU5R,oBAC3ByR,EAAWne,KAAKiW,IAAIsI,EAAiBzD,GAEvCqD,EAAWE,IACbD,EAAUE,EACVD,EAAmBF,KAIhBC,iCAIT,SAAmC/S,OAC3Bb,EAAQQ,KAAKR,MACbS,EAAUD,KAAKC,QACfsT,EAAiBlT,EAAMqB,oBACvBoO,EAAiB9P,KAAKyB,oBACtB0R,EAAWne,KAAKiW,IAAI6E,EAAiByD,GACrC9S,EAAiBjB,EAAMkN,WAAWxU,KAAOsH,EAAMkN,WAAWzU,QAE3DgI,EAAQ1L,gBAOJ4e,GAAY1S,EAAiB0S,EAChCI,EAAiB/T,EAAMsR,uBACNhB,EAAjByD,EAEEA,EAAiB/T,EAAMsR,uBAAyBrQ,EAEhD8S,EAAiB/T,EAAMsR,uBAAyBrQ,MAZhDnK,EAAWid,EAAiB/T,EAAMsR,8BACjC9Q,KAAK0O,kBACRnR,EAAMjH,EAAUkJ,EAAMkN,WAAWzU,KAAMuH,EAAMkN,WAAWxU,MACxD5B,2BAaR,SAA6B+J,OACrBqM,EAAa1M,KAAK2M,gBAEpByD,EAAoB/P,EAAMqB,oBAAsB1B,KAAKgB,mCACzDoP,EAAoBpQ,KAAK0O,kBACrBnR,EAAM6S,EAAmB1D,EAAWzU,KAAMyU,EAAWxU,MACrDkY,qBAKN,SAAuB/P,GACjBL,KAAKwT,kBAAkBnT,GAAS,QAC7BqR,cAAczV,KAAKoE,aAI5B,gBACOoT,SAASC,oBAGhB,gBACOD,SAASE,oBAGhB,SAAcxU,EAAezD,cACrBhH,EAAYsL,KAAKQ,aAAanH,kBAGhC8F,EAAQ,GAAazK,EAARyK,QACR,OAGHK,EAAQQ,KAAKR,MACbS,EAAUD,KAAKC,QAGf0F,EAFiBtC,EAAa3H,GAGjCgN,IAAI,SAACrO,EAAImD,UAAQ,IAAIuH,EAAM1K,EAAI8E,EAAQ3B,EAAKmL,KAC5C3L,MAAM,EAAGtI,EAAYyK,EAAQ,MAE5BwG,EAAO5K,QAAU,QACZ,OAGH4L,EAAc3G,KAAKQ,aAAagD,OAAOrE,EAAOwG,WAG/CiO,aAAajO,IAEb3F,KAAKwB,aAAc,MACjBA,aAAemE,EAAO,QACtByG,aAAezG,EAAO,OAErBkO,EAAiBlO,EAAO,GACxBmO,EAAmB9T,KAAK4B,sBAAsBiS,GACpDrU,EAAMlJ,SAAWwd,OACZzG,mBAAmByG,GACxBtU,EAAMqR,oBAAsBgD,EAAe5S,4BAA8BhB,EAAQpK,IAAM,IAAMge,EAAe9S,UAAYd,EAAQpK,iBAI7Hke,qBAAqB,CAAElX,IAAKsC,EAAOrC,IAAKqC,IAC7CK,EAAM2R,eAAe/V,QAAQ,SAAC4Y,EAASxW,OAC9BX,OAAKC,OACRqC,EAAQtC,GAEV2C,EAAM2R,eAAe/L,OAAO5H,EAAK,EAAG,CAACX,EAAM8J,EAAa7J,EAAM6J,MAKlEnH,EAAMwR,aAAe,CACnBnU,IAAKoU,IACLnU,IAAKmU,UAGFjY,SAEE2M,aAGT,SAAexG,EAAezD,cACtB8D,EAAQQ,KAAKR,MACbS,EAAUD,KAAKC,QACfO,EAAeR,KAAKQ,aACpB9L,EAAY8L,EAAanH,kBAG3B8F,EAAQ,GAAazK,EAARyK,QACR,OAIHwG,EADiBtC,EAAa3H,GAEjCgN,IAAI,SAACrO,EAAImD,UAAQ,IAAIuH,EAAM1K,EAAI8E,EAAQ3B,EAAKmL,KAC5C3L,MAAM,EAAGtI,EAAYyK,EAAQ,MAE5BwG,EAAO5K,QAAU,QACZ,GAGcyF,EAAaiF,QAAQtG,EAAOwG,GAEpCvK,QAAQ,SAAAiF,OACf2Q,EAAerI,EAAK6K,kBAAkBnT,IACxB,EAAhB2Q,GACFrI,EAAK+I,cAActM,OAAO4L,EAAc,UAKvC4C,aAAajO,OAEZnE,EAAexB,KAAKwB,iBACRA,EACJ,MACPA,aAAemE,EAAO,QACtByG,aAAezG,EAAO,OAErBkO,EAAiBlO,EAAO,GACxBmO,EAAmB9T,KAAK4B,sBAAsBiS,GACpDrU,EAAMlJ,SAAWwd,OACZzG,mBAAmByG,GACxBtU,EAAMqR,oBAAsBgD,EAAe5S,4BAA8BhB,EAAQpK,IAAM,IAAMge,EAAe9S,UAAYd,EAAQpK,UACvHkc,EAAUvQ,EAAcpJ,WAAY+G,EAAOA,EAAQwG,EAAO5K,OAAS,UAEvEyG,aAAehB,EAAaqP,IAAIrO,EAAcpJ,yBAIhD2b,qBAAqB,CAAElX,IAAKsC,EAAOrC,IAAKqC,EAAQwG,EAAO5K,OAAS,IAGrEyE,EAAMwR,aAAe,CACnBnU,IAAKoU,IACLnU,IAAKmU,UAGFjY,SAEE2M,YAGT,SAAcxG,EAAesI,gBAAAA,SACrBjI,EAAQQ,KAAKR,MAEnBL,EAAQnK,KAAK8H,IAAIqC,EAAO,OAElBqB,EAAeR,KAAKQ,aACpB4B,EAAepC,KAAK4P,kBAEpB9I,EAAgBtG,EAAaiD,OAAOtE,EAAOsI,MAC7CsK,EAAU3P,EAAcjD,EAAOA,EAAQsI,EAAc,GAAI,KAGrDwM,EAAkBjf,KAAK8H,IAAIqC,EAAQ,EAAGqB,EAAa0T,WAAWrX,UAC/D2E,aAAehB,EAAaqP,IAAIoE,GAIrB,EAAdxM,SAGGsM,qBAAqB,CAAElX,IAAKsC,EAAQ,EAAGrC,IAAKqC,EAAQsI,IAEzDjI,EAAMwR,aAAe,CACnBnU,IAAKoU,IACLnU,IAAKmU,MAILzQ,EAAa/H,iBAAmB,SAC7B+I,kBAAe2S,OACf/H,kBAAe+H,QAGjBnb,aAEC0T,EAAalN,EAAMkN,cACrBlN,EAAMlJ,SAAWoW,EAAWzU,MAAQuH,EAAMlJ,SAAWoW,EAAWxU,KAAM,KAClEyK,EAAcoK,EAAUvN,EAAMlJ,SAAUoW,EAAWzU,KAAMyU,EAAWxU,MAAM,QAC3E4R,WAAWnH,QACX0K,mBAAmB1K,UAGnBmE,wBAGT,eACQtH,EAAQQ,KAAKR,MACbS,EAAUD,KAAKC,QACf3L,EAAa2L,EAAQ3L,WACrBkN,EAAexB,KAAK1H,qBAErBkJ,OAIC4S,EAAsBnU,EAAQ1K,WAAaiK,EAAM4R,iBACjDiD,EAAgBrU,KAAKyS,gBAAgBxY,SACvCma,EAAqB,KACnBE,YACArU,EAAQ1K,SAAU,KACdgf,EAAY/S,EAAatB,UAE/BoU,EAAchgB,EAAaigB,EAAU9d,OAAS8d,EAAU/d,UACnD,CAOL8d,EALyBtU,KAAKQ,aAAa0H,iBAAiBpC,OAAO,SAAC0O,EAASnU,OACrEkU,EAAYlU,EAAMH,iBACjBlL,KAAK8H,IAAI0X,EAASlgB,EAAaigB,EAAU9d,OAAS8d,EAAU/d,QAClE,OAKCie,EAAezU,KAAK0U,aAC1BJ,EAActf,KAAK8H,IAAIwX,EAAahgB,EAAamgB,EAAahe,OAASge,EAAaje,OAEpFgJ,EAAM4R,kBAAmB,MACnBuD,EAAkBL,OACpBhgB,EACF+f,EAAc5d,OAASke,EACbrgB,IACV+f,EAAc7d,MAAQme,mBAK5B,eACQnV,EAAQQ,KAAKR,MACbS,EAAUD,KAAKC,QACfwS,EAAkBzS,KAAKyS,uBAExBjT,EAAMK,aACTL,EAAMK,WAAaK,EAAQuS,EAAiBxS,EAAQlK,YAG/CyJ,EAAMK,4BAGf,2BAEO+U,QAAQxZ,QAAQ,SAAAyZ,GACnBA,EAAOC,QAAUD,EAAOC,OAAOnM,EAAKgB,uBAIxC,SAAejG,OACPlE,EAAQQ,KAAKR,MACbuV,EAAU/U,KAAK2J,SAASpR,aACxBka,EAAkBzS,KAAKyS,gBACvBzO,EAAgBhE,KAAKgE,cACrBkE,EAAiBlI,KAAKQ,aAAa0H,yBAEpC/O,cAAc6G,KAAK4U,UACnBlR,EAAOC,aACVC,EAAa6O,EAAiBjT,EAAM+R,uBACpC3N,EAAaI,EAAexE,EAAMgS,sBAE7BhS,EAAM8R,gBAAkBtR,KAAKC,QAAQ9J,gBAAgB,KAClD6e,EAAiBxV,EAAM6R,gBACzBoB,EACAsC,EACEE,EAAkBzV,EAAM6R,gBAC1BrN,EACAyO,EAEJvK,EAAe9M,QAAQ,SAAAiF,GACrB2U,EAAe9Q,YAAY7D,EAAM9H,gBAGnCyc,EAAena,YAAYoa,OAU1B,IAAMlgB,UANN+c,KAAK/Y,eACL0a,SAAS1a,UAEdmP,EAAe9M,QAAQ,SAAAiF,GAAWA,EAAMtH,QAAQ2K,KAGhC1D,UACAjL,GAAK,gBAIvB,SAAemgB,OACPvP,EAASuP,EAAOvP,OAChBzQ,EAAe8K,KAAKC,QAAQ/K,aAC5B8O,EAAgBhE,KAAKgE,cACrBxD,EAAeR,KAAKQ,aAG1BwD,EAAchI,UAAY2J,EAAO+C,IAAI,SAAArI,UAASA,EAAM8U,OAAM3C,KAAK,SAG1D4C,oBACCC,EAAgB7U,EAAa0H,iBAG7BoN,EAAyB,GAC/B3P,EAAOvK,QAAQ,SAACiF,EAAO7C,OACf+X,EAAeF,EAAc7X,GACnC+X,EAAarO,SAAS7G,EAAMlB,OAC5BmW,EAAcjV,EAAMlB,OAASoW,IAE/B/U,EAAagV,cAAcF,EAAe,IAC1C9U,EAAaiV,cAAc,OAErBlV,EAAaC,EAAa/H,qBAKzB2T,aAJU,EAAb7L,QACGiB,aAAehB,EAAaqP,IAAIqF,EAAO/V,QACvCqB,EAAaqP,IAAI3a,IACjBsL,EAAa8C,aACEtD,KAAKwB,wBAEpBA,kBAAe2S,QAGjBzC,cAAgB4D,EAAcnP,OAAO,SAAA9F,UAASyD,QAAQzD,UAEtDrH,cAEA8Y,KAAKvH,MAAM,CAAED,MAAO4K,EAAO5e,UAAY,QACvCwT,WAAWoL,EAAO5e,+BAGzB,eACQsR,EAAY5H,KAAKQ,aAAaoH,eAChC5H,KAAKC,QAAQ/J,kBAAmB,KAC5B+R,0BAAEpL,QAAKC,eACgB,GAAPD,EAClB+K,EAAU5K,MAAMH,EAAKC,EAAM,GAC3B8K,EAAU5K,MAAM,EAAGF,EAAM,GAAGkK,OAAOY,EAAU5K,MAAMH,KAElCsJ,OAAO,SAAA9F,UAASA,WAE9BuH,EAAUzB,OAAO,SAAA9F,OAChBqV,EAAiBrV,EAAMsV,2BAEJ,EAAlBD,GAAuBA,EAAiB,uBAKrD,kBACS1V,KAAKwB,gCAGd,eACQA,EAAexB,KAAKwB,oBAEnBA,EACHA,EAAapJ,YACZ,qBAGP,kBACS4H,KAAKoM,mCAId,eACQoB,EAAexN,KAAKwQ,aAAaC,WACnCrE,EAAeoB,EAAaoI,SAAWpI,EAAaqI,QACpD7V,KAAKoM,aACLpM,KAAKwB,aAEHhB,EAAeR,KAAKQ,iBACrB4L,SAEI6E,QAEHhJ,uBAAE6N,SAAiBC,SACnBlL,EAAiB7K,KAAKmB,oBACtByN,EAAe5O,KAAK4O,eACtBhM,EAAYwJ,EAAa/M,YACzB8D,EAAYiJ,EAAa9M,YACzBwQ,EAAiB9P,KAAKyB,oBACtBuU,EAAmB5J,EAAa1K,oBAGlCkN,GACGhM,GACAO,GACA0H,EAAiBkL,GAEhBjG,EAAiBlN,EAAUlB,oBAAsBsU,EAAmBlG,IAGxE3M,GADAiJ,EAAexJ,GACUtD,YACzBsD,EAAYwJ,EAAa/M,YACzB2W,EAAmB5J,EAAa1K,yBAE5BuU,EAAe7J,EAAahU,YAAcgU,EAAatJ,gBAAkB,GAAKtC,EAAa/H,gBAC3Fyd,EAAc9J,EAAarL,aAE7B6N,EAAc,KACVkC,EAAyB9Q,KAAKgB,4BAEb+U,EAAYjF,EAA/BkF,EAEFlG,EAAiBkG,EAAmBlG,EAAiBgB,EAAyBiF,EACrEC,EAAmBF,EAAYhF,IAExChB,EAAiBkG,EAAmBlG,EAAiBgB,EAAyBgF,OAG5EK,EAA+CH,GAAlBlG,EAC7Bja,EAAMmK,KAAKC,QAAQpK,IAErBoa,EAAe+F,EACfI,EAAiBJ,EACjBG,EACFC,EAAiBjT,EACbA,EAAUzB,oBACVsU,EAAmBE,EAAcrgB,EAErCoa,EAAerN,EACXA,EAAUlB,oBACVsU,EAAmBE,EAAcrgB,MAGjCwgB,GAAmBvG,EAAiBG,IAAiBmG,EAAiBnG,UACzDkG,EACfF,EACArT,EACEA,EAAUxK,WACV6d,EAAe,GAEDI,wBAItB,SAA0B/f,OAClBwb,EAAO9R,KAAK8R,KAClBA,EAAKwE,MACLxE,EAAKvH,MAAM,CACTD,MAAOhU,GACN,GACHwb,EAAKyE,GAAGvW,KAAKwW,yBAGf,kBACSxW,KAAKR,MAAMjB,sBAGpB,kBACSyB,KAAKR,MAAMkN,2BAGpB,eACQlN,EAAQQ,KAAKR,MACbS,EAAUD,KAAKC,QACfyM,EAAalN,EAAMkN,kBAEjBzM,EAAQ1L,UACX0L,EAAQxK,QACP+J,EAAMlJ,UAAYoW,EAAWzU,MAAQuH,EAAMlJ,UAAYoW,EAAWxU,yBAG1E,eACQsH,EAAQQ,KAAKR,MACbS,EAAUD,KAAKC,QACfmG,EAAYpG,KAAKQ,aAAa4F,gBAC/BA,SACI,MAGHqQ,EAAkBrQ,EAAUxF,cAAgBwF,EAAUrF,iBAErDd,EAAQxK,QACTwK,EAAQ1L,UACTkiB,GAAmBjX,EAAMjB,2BAGhC,kBACSyB,KAAKyS,oCAGd,kBACSzS,KAAKgE,mCAGd,eACQ0I,EAAa1M,KAAKR,MAAMkN,kBAEvBA,EAAWxU,KAAOwU,EAAWzU,kCAGtC,kBACS+H,KAAKR,MAAMsR,4CAGpB,kBACS9Q,KAAKR,MAAMlJ,SAAW0J,KAAKR,MAAMsR,4CAG1C,kBACS9Q,KAAKR,MAAMlJ,8BAGpB,kBACS0J,KAAKR,MAAMuR,oCAGpB,kBACS/Q,KAAKR,MAAM2R,kCAGpB,kBACSnR,KAAKR,MAAMwR,iCAGpB,kBACShR,KAAK0R,iCAGd,SAAuBrR,QAChBmB,aAAenB,kBAGtB,SAAoBlB,OACZqC,EAAexB,KAAKwB,aACpBhB,EAAeR,KAAKQ,aAE1BA,EAAa5H,aAAauG,GACtBqC,GAAgBA,EAAapJ,WAAa+G,SACvCqC,aAAehB,EAAa4F,kBAG9BpN,6BAGP,SAAwB2M,QACjB+L,cAAgB/L,wBAGvB,SAA0B+Q,OAClB5E,EAAO9R,KAAK8R,UAEb0E,aAAeE,EACpB5E,EAAKyE,GAAGG,iBAGV,SAAkB9B,cACV+B,EAAc,GAAgB3P,OAAO4N,UAE3C+B,EAAWvb,QAAQ,SAAAyZ,GACjBA,EAAO+B,KAAKjO,EAAKgB,iBAGdiL,QAAU5U,KAAK4U,QAAQ5N,OAAO2P,GAC5B3W,sBAGT,SAAqB4U,cACbiC,EAAiB7W,KAAK4U,cACJ,GAAgB5N,OAAO4N,GAEhCxZ,QAAQ,SAAAyZ,OACf1V,EAAQ0X,EAAepa,QAAQoY,IAExB,EAAT1V,GACF0X,EAAezR,OAAOjG,EAAO,GAG/B0V,EAAO9b,QAAQ4P,EAAKgB,YAEf3J,6BAGT,SAA4B8W,OACpBtX,EAAQQ,KAAKR,MAEfuX,EAAU,EACdvX,EAAM2R,eAAenK,SAAS5L,QAAQ,SAAC4Y,EAASxW,OACvCX,OAAKC,OAERga,EAAaja,KAAOC,GAAOga,EAAaha,KAAOD,IAEjD2C,EAAM2R,eAAe/L,OAAO5H,EAAMuZ,EAAS,GAC3CA,4BAKN,eACQ/F,EAAehR,KAAKR,MAAMwR,aAChCA,EAAanU,IAAMoU,IACnBD,EAAalU,IAAMmU,mCAGrB,SAAmCtL,cAC3B1F,EAAUD,KAAKC,QACf+W,EAAW9iB,SAAS+U,4BAEtBhJ,EAAQjK,YAAa,KACjBihB,EAAoBjX,KAAK0R,cACzBwF,EAAmBjX,EAAQjK,YAC3BmhB,EAA2C,QAE5CzF,cAAgB,GAErBpW,OAAOC,KAAKyE,KAAK2R,aAAavW,QAAQ,SAAAiB,GACpC8a,EAAO9a,IAAa,IAGtBsJ,EAAOvK,QAAQ,SAAAiF,OACP+W,EAAkB/W,EAAMgX,mBAAmBH,GAC7CE,IAAoBD,EAAOC,IACxBnX,EAAQ9J,gBACX6gB,EAAS9S,YAAY7D,EAAM9H,cAE7BoQ,EAAK+I,cAAczV,KAAKoE,GACxB8W,EAAOC,IAAmB,GAChBA,IACLnX,EAAQ9J,gBACX6gB,EAAS9S,YAAY7D,EAAM9H,cAE7BoQ,EAAK+I,cAAczV,KAAKoE,MAG5B4W,EAAkB7b,QAAQ,SAAAiF,GACxBsI,EAAKxG,gBAAgB9B,UAGlBJ,EAAQ9J,gBACXwP,EAAOvK,QAAQ,SAAAiF,UAAS2W,EAAS9S,YAAY7D,EAAM9H,qBAEhDmZ,cAAgB/L,EAAOQ,OAAO,SAAA9F,UAASyD,QAAQzD,KAGjDJ,EAAQ9J,qBACN6N,cAAcE,YAAY8S,wBAInC,eACQxW,EAAeR,KAAKQ,aAGtBR,KAAKC,QAAQ1L,UAA2C,EAA/BiM,EAAa/H,uBACnC6e,mBACAC,8BAEP/W,EAAagX,sCAGf,SAA0BnX,UACjB6F,EAAUlG,KAAK0R,cAAe,SAAA+F,UAAgBA,IAAiBpX,aAGxE,gBACOqX,mBACAC,qBACAC,mBACAC,uBACAzC,qBACA0C,uBACA9e,cACA+e,oCAGP,eACQvY,EAAQQ,KAAKR,MACbS,EAAUD,KAAKC,QACf8U,EAAU/U,KAAK2J,SAASpR,aACxBnE,EAAc6L,EAAQ7L,YAEtB4jB,EAAoBjD,EAAQ5Y,SAAS,GACrC8b,EAAqBD,GAAqB3T,EAAS2T,EAAsB5jB,eAEzEqe,EAAkBwF,EACpBD,EACA9jB,SAASoG,cAAc,OAErB4d,EAAkBD,EACpBxF,EAAgBtW,SAAS,GACzB4Y,EAAQ5Y,SAAS,GACfgc,EAAmBD,GAAmB7T,EAAS6T,EAAoB9jB,aAEnE4P,EAAgBmU,EAClBD,EACAhkB,SAASoG,cAAc,OAEtB6d,EAaH3Y,EAAMgS,oBAAsB,CAC1BnV,UAAW2H,EAAcuB,aAAa,SACtCtL,MAAO+J,EAAcuB,aAAa,WAdpCvB,EAAc3H,UAAejI,YAQ7B8H,EANsB+b,EAClBxF,EAAgBtW,SAChB4Y,EAAQ5Y,UAIWf,QAAQ,SAAAgd,GAC7BpU,EAAcE,YAAYkU,MASzBH,EAMHzY,EAAM+R,sBAAwB,CAC5BlV,UAAWoW,EAAgBlN,aAAa,SACxCtL,MAAOwY,EAAgBlN,aAAa,WAPtCkN,EAAgBpW,UAAejI,cAG/B2gB,EAAQ7Q,YAAYuO,IAQjB0F,GAAqBF,GACxBxF,EAAgBvO,YAAYF,QAGzByO,gBAAkBA,OAClBzO,cAAgBA,EACrBxE,EAAM6R,gBAAkB4G,EACxBzY,EAAM8R,cAAgB6G,mBAGxB,eACQlY,EAAUD,KAAKC,QACfwS,EAAkBzS,KAAKyS,gBACvBzO,EAAgBhE,KAAKgE,cACrBqQ,EAAgBrU,KAAKyS,gBAAgBxY,MAG3CyL,EAAS+M,EAAiBpc,GAC1BqP,EAAS1B,EAAezN,GAExBkc,EAAgBxY,MAAMzE,OAAS,GAAGyK,EAAQzK,OACtCyK,EAAQ3L,YACV+f,EAAcgE,UAAY,OAC1BhE,EAAc7d,MAAQ,SAEtB6d,EAAciE,SAAW,OACzBjE,EAAc5d,OAAS,QAErBwJ,EAAQvK,WACV2e,EAAc3e,SAAW,gBAGtB8K,aAAe,IAAI+X,EAAavY,KAAKgE,cAAe/D,kBAG3D,eACQnK,EAAWkK,KAAKC,QAAQnK,gBAEtBA,EAAShC,WACVL,EAAUC,UACRoC,SAAW,IAAI8a,EAAK9a,EAAS/B,kBAE/BN,EAAUE,iBACRmC,SAAW,IAAI0iB,sBAGd,IAAIpe,MAAM,gDAItB,eACQoF,EAAQQ,KAAKR,MACbS,EAAUD,KAAKC,QAEfyM,EAAalN,EAAMkN,WACnBpY,EAAa2L,EAAQ3L,gBAEtBwd,KAAO,IAAI2G,EAAK,CACnBnO,MAAO,CACLrM,MAAO,CAACyO,EAAWzU,KAAMyU,EAAWxU,MACpC3D,SAAU0L,EAAQ1L,SAClBc,OAAQ,CAAC,EAAG,KAEb,CACDqjB,OAAQzY,EAAQnL,YAChBT,aAAc4L,EAAQ5L,aACtBskB,eAAe,SAGZlF,SAAW,IAAImF,WAAS5Y,KAAKyS,gBAAiB,CACjDtd,UAAW8K,EAAQ9K,UACnBC,eAAgB6K,EAAQ7K,eACxByjB,MAAO5Y,EAAQ3L,WAAa,EAAE,EAAG,GAAK,CAAC,GAAI,UAGxCwd,KAAKgH,QAAQxkB,EAAa,CAAC,QAAS,IAAM,CAAC,GAAI,SAAU0L,KAAKyT,2BAGrE,sBACQjT,EAAeR,KAAKQ,aAKpBmF,EAASzJ,EAHO8D,KAAKgE,cAAc7H,UAGHuM,IACpC,SAACrO,EAAiBmD,UAAgB,IAAIuH,EAAM1K,EAAImD,EAAKmL,KAGvDnI,EAAagV,cAAc7P,EAAQ,SAC9B+L,cAAgB/L,EAAOQ,OAAO,SAAA9F,UAASyD,QAAQzD,wBAGtD,eACQJ,EAAUD,KAAKC,QACfO,EAAeR,KAAKQ,aACpBuY,EAAa/Y,KAAKQ,aAAa0T,WAC/B/U,EAAQ5B,EAAM0C,EAAQ/K,aAAc6jB,EAAWlc,IAAKkc,EAAWjc,UAEhE0E,aAAehB,EAAaqP,IAAI1Q,kBAGvC,eACQK,EAAQQ,KAAKR,MACbS,EAAUD,KAAKC,QACfO,EAAeR,KAAKQ,aAEpB3K,EAAMoK,EAAQpK,IACd8e,EAAenV,EAAMjB,KACrB+E,EAAa9C,EAAa8C,aAC1B8C,EAAY5F,EAAa4F,eAG1B9C,WAcD0V,EATErT,EAASnF,EAAa0H,iBACtB+Q,EAAiBtT,EAAOqB,SAASC,UAEjCiS,EAAuB9S,EAAUxF,cAAgBwF,EAAUrF,UAAYuC,EAAW1C,cAAgB/K,EAClG4J,EAAyB6D,EAAWrC,4BACpC6P,EAAyB9Q,KAAKgB,4BAE9BmY,GAAYrI,EAAyBrR,GAA0ByZ,EACjEE,EAAU,MAEMC,IAAAne,WAAAA,SAATmF,SAKM8Y,IADfC,GAAW/Y,EAAMU,UAAYlL,GACJ,CACvBmjB,EAAsB3Y,iBAOtBiZ,EAFEC,GAAY5E,EAAe7D,EAAyBrR,GAA0ByZ,IACpFE,EAAU,EAEUI,IAAAvR,WAAAA,SAAT5H,MAAAA,SAKMkZ,IADfH,GAAW/Y,EAAMU,UAAYlL,GACJ,CACvByjB,EAAuBjZ,aAMrBoZ,EAAqD,IAAnCT,EAAoB5gB,YACvC4gB,EAAoB5gB,YAAckhB,EAAqBlhB,WAOtDyN,EAJsB7Q,KAAK0kB,MAAM5I,EAAyBxN,EAAWvC,UAAYtB,GAA0ByZ,GAC7GlkB,KAAK0kB,MAAM/E,EAAe7D,EAAyBrR,GAA0ByZ,GAC7E,GAGCO,EAAkB,EAAI,GACrBE,EAAiBnZ,EAAa2H,mBAEpC3H,EAAaiV,cAAc5P,IACvB5F,EAAQ9J,kBAIKwjB,EAAb9T,qBAEOjG,SACDgG,EAASD,EAAO+C,IAAI,SAAAkR,UAAaA,EAAU/W,MAAMjD,KACjDoX,EAAW9iB,SAAS+U,yBAC1BrD,EAAOxK,QAAQ,SAAAiF,UAAS2W,EAAS9S,YAAY7D,EAAM9H,gBAEnDqQ,EAAK5E,cAAcE,YAAY8S,IAC/B/O,EAAAW,EAAK8I,eAAczV,aAAQ2J,EAAOO,OAAO,SAAAtD,UAASiB,QAAQjB,MAC1DrC,EAAaqI,aAAajJ,EAAY,EAAGgG,WAPlChG,EAAa+Z,EAAgB/Z,EAAaiG,EAAYjG,MAAtDA,QASAiG,EAAa8T,GAEtBnZ,EAAaqZ,kBAAkBhU,0BAInC,eACQrG,EAAQQ,KAAKR,MACbgB,EAAeR,KAAKQ,aACpBP,EAAUD,KAAKC,QACf8Y,EAAa/Y,KAAKQ,aAAa0T,WAE/Bhf,EAAeqI,EAAM0C,EAAQ/K,aAAc6jB,EAAWlc,IAAKkc,EAAWjc,KACtEgd,EAAetZ,EAAaqP,IAAI3a,GAElC6kB,EAAkB,EAClBD,IACFC,EAAkBD,EAAapY,oBAAsBlC,EAAMsR,uBAC3DiJ,EAAkB/Z,KAAK0O,kBACnBnR,EAAMwc,EAAiBva,EAAMkN,WAAWzU,KAAMuH,EAAMkN,WAAWxU,MAC/D6hB,QAGDjQ,WAAWiQ,QACXjI,KAAKvH,MAAM,CAAED,MAAOyP,GAAmB,iBAG9C,eACQva,EAAQQ,KAAKR,MACbS,EAAUD,KAAKC,QACf0F,EAAS3F,KAAKQ,aAAa0H,iBAC9B/B,OAAO,SAAA9F,UAASyD,QAAQzD,KACrB1B,EAAOqB,KAAK0U,aAEZvU,EAAWX,EAAMjB,KAEvBiB,EAAMjB,KAAO0B,EAAQ3L,WACjBqK,EAAKnI,MACLmI,EAAKlI,OAEL0J,IAAaX,EAAMjB,OACrBiB,EAAMsR,uBAAyB1Q,EAA0BH,EAAQtK,OAAQ6J,EAAMjB,MAC/EiB,EAAM/K,kBAAoB2L,EAA0BH,EAAQxL,kBAAmB+K,EAAMjB,OAGnFoH,EAAO5K,QAAU,QAIhB6Y,aAAajO,mCAGpB,eACQ9P,EAAMmK,KAAKC,QAAQpK,IACnB2K,EAAeR,KAAKQ,aAEpB8C,EAAa9C,EAAa8C,aAC1BqC,EAASnF,EAAa0H,oBAEvB5E,OAIC9B,EAAexB,KAAKwB,aACpB4K,EAAepM,KAAKoM,aACpBoB,EAAexN,KAAKwQ,aAAaC,WACjC/D,EAAa1M,KAAKR,MAAMkN,WAG1BsN,EAAe1W,EAAW1C,cAC1BqZ,EAA0B3W,KAC1B8I,EAIF6N,GAFgBlI,EAAUvE,EAAalE,aAAekE,EAAarE,MAAOuD,EAAWzU,KAAMyU,EAAWxU,MAGlGsJ,EACA4K,OAC6B,EAAxB9I,EAAWlL,aACpB6hB,EAAmBzY,OAIf0Y,EAD4BvU,EAAO3I,MAAM,EAAGid,EAAiB7hB,YAAc6hB,EAAiBnX,gBAAkB,GAAK6C,EAAO5K,QAC9E+K,OAAO,SAACqU,EAAO9Z,UACxD8Z,EAAQ9Z,EAAMU,UAAYlL,GAChC,GAEHmkB,EAAeC,EAAiBrZ,cAAgBsZ,EAEhDvU,EAAOvK,QAAQ,SAAAiF,OACPsC,EAAcqX,EACd5Y,EAAYf,EAAMU,UAExBV,EAAM0C,YAAYJ,GAClBqX,GAAgB5Y,EAAYvL,IAGzBmK,KAAKC,QAAQ/J,mBAChByP,EAAOvK,QAAQ,SAAAiF,UAASA,EAAM+Z,kDAIlC,eACQ5a,EAAQQ,KAAKR,MACbS,EAAUD,KAAKC,QACfO,EAAeR,KAAKQ,aACpBjB,EAAeiB,EAAajB,eAC/BuG,OAAO,SAACC,EAAWH,UAAeG,SAAcH,IAAS,IACzDO,OAAO,SAAA9F,UAASyD,QAAQzD,KAErBqM,EAAalN,EAAMkN,WAEnBpJ,EAAa9C,EAAa8C,aAC1B8C,EAAY5F,EAAa4F,eAE1B9C,WAIC4V,EAAuB9S,EAAUxF,cAAgBwF,EAAUrF,UAAYuC,EAAW1C,cAAgBX,EAAQpK,QAG5FwkB,IAAAnf,WAAAA,SACZ0e,GADGvZ,QACegP,mBAGlBiL,EADepB,GADF7Y,EAAMyC,gBACiC,GACpB8W,EAAUhZ,cAEhDP,EAAM0C,YAAYuX,WAGhBC,EAAsBjX,EAAW1C,kBAEjB4Z,EAAAjb,EAAayH,SAASC,UAAtBgB,WAAAA,SAAT5H,EACHe,GADGf,QACeU,UAClB0Z,EAAkBF,EAAsBnZ,EAAYnB,EAAQpK,OAE9D4kB,EAAkBrZ,GAAasL,EAAWzU,WAK9CoI,EAAM0C,YAAY0X,GAClBF,EAAsBE,EAGnBza,KAAKC,QAAQ/J,mBAChBqJ,EAAanE,QAAQ,SAAAiF,GACnBA,EAAM+Z,wCAKZ,eACQ5a,EAAQQ,KAAKR,MACbgB,EAAeR,KAAKQ,aACpBP,EAAUD,KAAKC,QACf6R,EAAO9R,KAAK8R,KAGZxO,EAAa9C,EAAa8C,aAC1B8C,EAAY5F,EAAa4F,YACzB0K,EAAyBtR,EAAMsR,0BAEhCxN,EAKE,GAAItD,KAAK0O,kBACdlP,EAAMkN,WAAa,CACjBzU,KAAMqL,EAAW1C,cACjB1I,KAAMkO,EAAUxF,cAAgBwF,EAAUrF,UAAYvB,EAAMjB,WAEzD,GAAI0B,EAAQ1L,SAAU,KACrB2kB,EAAuB9S,EAAUxF,cAAgBwF,EAAUrF,UAAYuC,EAAW1C,cAAgBX,EAAQpK,IAGhH2J,EAAMkN,WAAa,CACjBzU,KAAMqL,EAAW5B,oBAAsBoP,EACvC5Y,KAAMghB,EAAuB5V,EAAW5B,oBAAsBoP,QAGhEtR,EAAMkN,WAAa,CACjBzU,KAAMqL,EAAW5B,oBAAsBoP,EACvC5Y,KAAMkO,EAAU1E,oBAAsBoP,QApBxCtR,EAAMkN,WAAa,CACjBzU,KAAM,EACNC,KAAM,OAyBNwiB,Eb11CgBC,Eau1CdhG,EAAenV,EAAMjB,KACrBlJ,EAAS4K,EAAQ5K,Wbx1CHslB,Ea21CRtlB,Ib11CAslB,EAAIC,cAAgBjf,Ma21C9B+e,EAAgBrlB,EAAoBqT,IAAI,SAAA9L,UAAOwD,EAA0BxD,EAAK+X,EAAcxgB,EAAgBkB,cACvG,KACCwlB,EAAYza,EAA0B/K,EAA2Bsf,EAAcxgB,EAAgBkB,QACrGqlB,EAAe,CAACG,EAAWA,OAIvBvQ,EAAQwH,EAAKgJ,KAAKxQ,MACxBA,EAAMrM,MAAQ,CAACuB,EAAMkN,WAAWzU,KAAMuH,EAAMkN,WAAWxU,MACvDoS,EAAMjV,OAASqlB,0BAIjB,eACQlb,EAAQQ,KAAKR,MACbgC,EAAexB,KAAK1H,kBACpBkV,EAAexN,KAAKwQ,aAAaC,WACjCsK,EAAe/a,KAAKlK,SAASklB,GAAGvnB,EAAUE,aAC1Cmd,EAAyB9Q,KAAKgB,4BAC9B+N,EAAU/O,KAAKC,QAAQpK,IAAM,KAE/B2X,EAAaqI,SAAWrI,EAAaoI,aAClCzD,+BAIHxP,KACAoY,EAAc,KACV3O,EAAepM,KAAKqM,kBAE1B1J,EAAcyJ,EACVA,EAAaxL,cAAgBmO,GAAW3C,EAAarL,UAAY,EAAIgO,GAAWvP,EAAMqR,mBAAqBC,EAC3G9Q,KAAKmB,yBAETwB,EAAcnB,EACVA,EAAaE,oBAAsBoP,EACnC9Q,KAAKmB,oBAGPnB,KAAK0O,oBACP/L,EAAcpF,EAAMoF,EAAanD,EAAMkN,WAAWzU,KAAMuH,EAAMkN,WAAWxU,YAKtEmV,mBAAmB1K,QAEnBmH,WAAWnH,sBAGlB,SAAuBqJ,OACfxM,EAAQQ,KAAKR,MACbS,EAAUD,KAAKC,QACfO,EAAeR,KAAKQ,aACpBgB,EAAexB,KAAKwB,aACpB4K,EAAepM,KAAKoM,aACpBoB,EAAexN,KAAKwQ,aAAaC,cAElCxQ,EAAQzL,cAIPqB,EAAMoK,EAAQpK,IACdpB,EAAoB+K,EAAM/K,kBAC1BwmB,EAAeza,EAAanH,oBAE9B4hB,EAAe,MAIdzZ,GAAiB4K,WAehB6F,EAA0B7F,EAAaxL,cAGzCsa,EAA+B1N,EAAaqI,SAAYrI,EAAaoI,QAErExJ,EADA5K,EAGG0Z,GAAe,KACd9Y,EAAe8Y,EAAc9iB,WAC7BkH,EAAc4b,EAAc5b,YAG5B6b,IADc/Y,KADdgE,EAAY5F,EAAa4F,aACgBhO,aACbkH,EAC9BA,EAAYlH,WACZ6iB,EAAe,EACbG,EAAyBhP,EAAaxL,cAOtCkL,EANaoP,EAActa,cAAgBsa,EAAcna,WAAaqa,EAAyBnJ,GAMlEpc,EAAMpB,GALtB+K,EAAMlJ,SAAWkJ,EAAMjB,QAGkB,EAA3B4c,EAAY/Y,GAId0J,QACxBuP,iBAAiB,CACpBrP,YACAuD,aAAc2L,EACd9R,UAAWvR,EAAUE,KACrBghB,WAAY,CACVlc,IAAKuF,EAAe,EACpBtF,IAAKqe,EAAY,EACjBpgB,OAAQogB,EAAY/Y,EAAe,KAMrCnC,EAAQ1L,UAAY6N,IAAiB6Y,GAAgBnP,EAAe,KAEhEwP,GADAhY,EAAa9C,EAAa8C,cAE5BA,EAAWlL,YACV,EAEY,EAAbkjB,QACGD,iBAAiB,CACpBrP,YACAuD,aAAc2L,EACd9R,UAAWvR,EAAUE,KACrBghB,WAAY,CACVlc,IAAK,EACLC,IAAKwe,EAAa,EAClBvgB,OAAQugB,SAOVC,EAAqB/a,EAAa4F,eACXmV,GAAsBnZ,IAAiBmZ,EAAmBnjB,aAE1D0T,QAI7BoP,EAAgBA,EAAc5b,gBAIhC4b,EAAgB9O,EACT8O,GAAe,KAId5X,EA2BE8C,EA9BFoV,EAAahc,EAAMlJ,SACnBmlB,EAAgBP,EAAc9iB,WAC9BiH,EAAc6b,EAAc7b,YAG5Bqc,IADeD,KADfnY,EAAa9C,EAAa8C,cACkBlL,aACfiH,EAC/BA,EAAYjH,YACX,EACCgjB,EAAyBhP,EAAaxL,cAMtCkL,EAAuD0P,GAL3CN,EAActa,eAAiBwa,EAAyBnJ,GAKxCpc,EAAMpB,KAFoB,EAA5BgnB,EAAgBC,GAGjB5P,QACxBuP,iBAAiB,CACpBrP,YACAuD,aAAc2L,EACd9R,UAAWvR,EAAUC,KACrBihB,WAAY,CACVlc,IAAK6e,EAAY,EACjB5e,IAAK2e,EAAgB,EACrB1gB,OAAQ0gB,EAAgBC,EAAY,KAMtCzb,EAAQ1L,UAA8B,IAAlBknB,GAAuB3P,MACvC1F,EAAY5F,EAAa4F,cAEdA,EAAUhO,WAAa6iB,EAAc,KAC9CvmB,EAAY0R,EAAUhO,gBAEvBijB,iBAAiB,CACpBrP,YACAuD,aAAc2L,EACd9R,UAAWvR,EAAUC,KACrBihB,WAAY,CACVlc,IAAKnI,EAAY,EACjBoI,IAAKme,EACLlgB,OAAQkgB,EAAevmB,SAOzBinB,EAAsBnb,EAAa8C,gBACXqY,GAAuBF,IAAkBE,EAAoBvjB,aAG7D0T,QAI9BoP,EAAgBA,EAAc7b,uBA9IzBgc,iBAAiB,CACpBrP,YACAuD,aAAc,KACdnG,UAAW,KACX2P,WAAY,CACVlc,IAAK,EACLC,IAAKme,EACLlgB,OAAQkgB,EAAe,0BA2I/B,SAAyBW,cAMf5P,cAAWuD,iBAAcnG,cAAW2P,eACtC9Y,EAAUD,KAAKC,QACfkR,EAAiBnR,KAAKR,MAAM2R,eAC5B0K,EAAmB1K,EAAe2K,KAAK,SAAC7T,OAACpL,OAAKC,cAASD,IAAQkc,EAAWlc,KAAOC,IAAQic,EAAWjc,MACpGif,EAAa/b,KAAK2J,SAASqS,MAAMplB,EAAOS,gBAE1CwkB,GAAqBE,GAKzB5K,EAAelV,KAAK,CAAC8c,EAAWlc,IAAKkc,EAAWjc,UAE1CqC,EAAQoQ,EACVA,EAAanX,WACb,EACE+U,IAAYnB,GACdA,EAAUmB,eAGTvD,aACHhT,EAAOS,WACP2U,EACAmB,EACA,CACEhO,QACAkB,MAAOkP,EACPnG,YACAnL,MAAO8a,EACPkD,KAAM,SAACvgB,OACC8E,EAAemI,EAAKnI,iBACrB+O,SACI5G,EAAKnF,OAAOhD,EAAa0T,WAAWpX,IAAM,EAAGpB,OAGhD0H,EAAiBC,EAAa3H,GAE9BG,EAAWuN,IAAcvR,EAAUE,KACrCqL,EAAepG,MAAM,EAAG+b,EAAWhe,QACnCqI,EAAepG,OAAO+b,EAAWhe,eAEjCqO,IAAcvR,EAAUE,KACtBkI,EAAQ1L,UAAY4K,IAAUqB,EAAanH,eAEtCsP,EAAKnF,OAAO,EAAG3H,GAEf0T,EAAa2M,YAAYrgB,GAEzBuN,IAAcvR,EAAUC,KAC7BmI,EAAQ1L,UAAsB,IAAV4K,EAEfwJ,EAAKnF,OAAOuV,EAAWjc,IAAMjB,EAASd,OAAS,EAAGc,GAElD0T,EAAahV,aAAasB,GAI5B8M,EAAKnF,OAAO,EAAG3H,8BAOhC,eACQ2D,EAAQQ,KAAKR,MACbS,EAAUD,KAAKC,QACf+D,EAAgBhE,KAAKgE,cACrBgN,EAAexR,EAAMwR,aACnB7a,6CAKH6J,KAAKoM,kBAQJ+P,EAAkBnc,KAAKoc,8BAEzBD,EAAgBtf,MAAQmU,EAAanU,KAAOsf,EAAgBrf,MAAQkU,EAAalU,IAAK,IACxF0C,EAAMwR,aAAemL,EACjBE,MAAMF,EAAgBtf,MAAQwf,MAAMF,EAAgBrf,gBAIlDma,EAAoBjX,KAAK0R,cACzB4K,EAAmBtc,KAAKuc,oBAExBtU,oCAAEuU,gBAAa1V,qBAES,EAA1BwV,EAAiBvhB,OAAY,KACzB0hB,EAAuBH,EAAiB,GAAG1b,cACjDpB,EAAMuR,eAAiB0L,KAGzBH,EAAiBlhB,QAAQ,SAAAiF,GACvBA,EAAM+Z,eAAe5a,EAAMuR,mBAGxB5a,EAAgB,CACnB2Q,EAAc1L,QAAQ,SAAAiF,OACdqc,EAAerc,EAAM9H,aAC3BmkB,EAAa3Y,YAAcC,EAAcnJ,YAAY6hB,SAGjD1T,EAAW9U,SAAS+U,yBAC1BuT,EAAYphB,QAAQ,SAAAiF,GAClB2I,EAAS9E,YAAY7D,EAAM9H,gBAG7ByL,EAAcE,YAAY8E,QAEvB0I,cAAgB4K,OAEhB3S,SAASgT,QAAQ/lB,EAAOU,eAAgB,CAC3CxD,KAAM8C,EAAOU,eACb2G,MAAO,CACLpB,IAAKsf,EAAgBtf,IACrBC,IAAKqf,EAAgBrf,iBAIpB4U,cAActW,QAAQ,SAAAiF,UAASA,EAAM+Z,eAAe5a,EAAMuR,gCApD1D6L,oBACE5Y,EAAc5H,YACnB4H,EAAcnJ,YAAYmJ,EAAc5H,wCAsD9C,eACQygB,EAAY7c,KAAKmB,oBACjBwT,EAAe3U,KAAKe,UACpBiP,EAAYhQ,KAAKoM,aACjB5L,EAAeR,KAAKQ,aACpBsc,EAAgBtc,EAAa0T,WAAWpX,IAAM,EAC9C+I,EAAarF,EAAa2H,gBAE1B4U,EAAiB,SACrB1c,EACA2c,EACAC,WAEI7W,EAAY/F,IACH,KACL8C,EAAY6Z,EAAa5W,OAC1BjD,GAAa8Z,EAAgB9Z,SAGlCiD,EAAYjD,SAEPiD,GAGH8W,EAAqBH,EAAe/M,EAAW,SAAA3P,OAC7C8C,EAAY9C,EAAMf,mBAEpB6D,GAAaA,EAAUvC,eAAiBP,EAAMO,cACzCuC,EAEA,MAER,SAAA9C,UAASA,EAAMO,eAAiBic,EAAYlI,IAEzCwI,EAAqBJ,EAAe/M,EAAW,SAAA3P,OAC7CuC,EAAYvC,EAAMhB,mBAEpBuD,GAAaA,EAAUhC,eAAiBP,EAAMO,cACzCgC,EAEA,MAER,SAAAvC,UAASA,EAAMO,cAAgBP,EAAMU,WAAa8b,IAE/CO,EAAqBD,EAAmBra,gBACxCua,EAAsBP,GAAiBI,EAAmBpa,gBAAkB,GAC5Ewa,GAA4C,EAAtBF,EACxBN,GAAiBjX,EAAauX,GAC9B,EAEEjB,EAAkB,CAEtBtf,KAAkC,EAA7BmT,EAAUlN,gBACXqa,EAAmB/kB,WAAaklB,EAChCH,EAAmB/kB,WAAaklB,EAEpCxgB,IAAKogB,EAAmB9kB,WAAailB,UAID,IAAlCF,EAAmB/kB,YAA2D,IAAvC+kB,EAAmBra,kBAC5DqZ,EAAgBtf,IAAMigB,GAGjBX,6BAGT,SAAgClF,EAA4BqF,OACpDiB,EAAetG,EAAkBvO,IAAI,kBAAM,IAC3C8U,EAAclB,EAAiB5T,IAAI,kBAAM,WAE/CuO,EAAkB7b,QAAQ,SAACwH,EAAW8Y,GACpCY,EAAiBlhB,QAAQ,SAACqiB,EAAUC,GAC9B9a,IAAc6a,IAChBF,EAAa7B,KACb8B,EAAYE,UAgBX,CAAE5W,cAXayW,EAAazX,OAAO,SAACiR,EAAkBhjB,EAAOoL,UACjD,IAAVpL,EACCgjB,UAASE,EAAkB9X,KAC/B4X,GACH,IAOqByF,YANJgB,EAAY1X,OAAO,SAAC6X,EAAgB5pB,EAAOoL,UAC5C,IAAVpL,EACC4pB,UAAOrB,EAAiBnd,KAC5Bwe,GACH,qBAKL,SAAqBhY,OACb1F,EAAUD,KAAKC,QACf0R,EAAc3R,KAAK2R,gBAEG,IAAxB1R,EAAQjK,YAYL,GAAIiK,EAAQjK,YAAZ,KACC4nB,EAAmB3d,EAAQjK,YAEjC2P,EAAOvK,QAAQ,SAAAiF,OACP+W,EAAkB/W,EAAMgX,mBAAmBuG,GAC7CxG,GACF/W,EAAMrH,OAAO2Y,EAAYyF,IACzBzF,EAAYyF,GAAmB/W,EAAMH,WAErCG,EAAMrH,gBAKZ2M,EAAOvK,QAAQ,SAAAiF,GACbA,EAAMrH,oBA1BD2Y,EAAYkM,QAAS,KAClB/D,EAAenU,EAAO,GAC5BgM,EAAYkM,QAAU/D,EAAa5Z,cAG/B4d,EAAcnM,EAAYkM,QAEhClY,EAAOvK,QAAQ,SAAAiF,GACbA,EAAMrH,OAAO8kB,YCz4DfC,EAAM,iBACNC,EAAOhpB,KAAKipB,SAAWjpB,KAAKC,IAAI,GAAI,IAAOD,KAAKC,IAAI,GAAI,ICoB9D,6BAgFIyG,EACAuE,gBAAAA,UAKI8U,IAHJ5G,sBAvCMxF,8BAAsC,EAwZvCA,SAAS,eACRvJ,EAAWuJ,EAAKvJ,SAChBa,EAAU0I,EAAK1I,QAEf2H,EAAYxI,EAASoB,aAAaoH,YACnC3H,EAAQhK,gBACX2R,EAAUxM,QAAQ,SAAAiF,UAASA,EAAM6B,oBAG7Bgc,EAAsBje,EAAQ/J,oBAC9B+J,EAAQhK,iBACe,IAAxBgK,EAAQjK,mBAEboJ,EAAS8C,cAET9C,EAASsV,aAELwJ,GACF9e,EAAS+e,4BAA4BvW,GAGvCxI,EAASpG,SAEF2P,GA6SDA,eAAe,SACrByV,EACApS,EACAmB,EACAyO,gBAAAA,UAEMxc,EAAWuJ,EAAKvJ,SAElBif,GAAoB,KAGpBjf,EAAU,KACNI,EAAQJ,EAASoR,aAAaC,WAC9BxI,oBAAEhQ,SAAMC,SAEVomB,EAAWpd,EADH9B,EAAS+B,oBACW,CAAClJ,EAAMA,EAAMC,IAEzCyQ,EAAK1I,QAAQ1L,WACf+pB,GAAY,GAEdD,GAAYlQ,YAAMwO,eAAQyB,EAAWG,EAAM,CACzCzqB,KAAMsqB,EACNjf,MAAOwJ,EAAKvQ,WACZiI,MAAOsI,EAAKrQ,kBACZ8Q,UAAW5J,EAAM4J,UACjByM,QAASrW,EAAMqW,QACfyI,WACAtS,YACAmB,aACCyO,UAGE,CACL7R,UAAA,SAAU5L,UACHkgB,GACHlgB,IAEK6B,MAETgK,UAAA,SAAU7L,UACJkgB,GACFlgB,IAEK6B,QAML2I,aAAa,SAACqD,OACd5M,EAAWuJ,EAAKvJ,SAChBI,EAAQJ,EAASoR,aAAaC,WAC9BxQ,EAAU0I,EAAK1I,QAEfjC,EAAMgO,EAAUhO,IAAIsM,MACpBkU,EAAmBpf,EAAS+B,uBAE9B6K,EAAUmB,WAAa3N,EAAMqW,QAAS,KAClC4I,EAAcxe,EAAQ3L,WACxB0X,EAAU7B,WAAWC,QACrB4B,EAAU7B,WAAWE,QAIrBqU,EAAe1gB,EAAMwgB,EACnBG,EAHkBF,EAAc,IAGFzgB,EAAMwgB,KACtCve,EAAQ1L,UAAYoqB,EAGtBD,GAA+B,EAAfA,GAAoB,EAAI,IADjBtf,EAASsB,oBAC+B1L,KAAKiW,IAAIyT,QAGpEE,EAAoC,IAAjBF,EACrBlf,EAAM4J,UACS,EAAfsV,EACE7mB,EAAUE,KACVF,EAAUC,KAEhB0H,EAAM4J,UAAYwV,SAEpBpf,EAAM2J,OAAS6C,EAAU7C,MAAMmB,MAE/BlL,EAAS0K,WAAW9L,EAAKgO,GAClBrD,EAAKiB,aAAahT,EAAOI,KAAMgV,EAAWA,EAAUmB,WACxDnD,UAAU,WAET5K,EAAS0K,WAAW0U,EAAkBxS,MAvwBtClQ,EAASJ,SACXqZ,EAAU7gB,SAAS2qB,cAAcnjB,UAEzB,IAAItB,MAAM,mCAEb,CAAA,IAAIsB,EAAQojB,UAAiC,IAArBpjB,EAAQqjB,eAG/B,IAAI3kB,MAAM,wDAFhB2a,EAAUrZ,EAKZiN,EAAKoM,QAAUA,EAEfpM,EAAK1I,QAAUse,EAAM,GAAIpqB,EAAiB8L,OAEpC+e,EAAiBrW,EAAK1I,QACtBnK,EAAWkpB,EAAelpB,gBAE5BA,KAAYlC,IACdorB,EAAelpB,SAAWlC,EAA0BkC,IAItD6S,EAAKvJ,SAAW,IAAI6f,EAAStW,EAAMA,EAAK1I,QAAS0I,EAAKiB,cACtDjB,EAAKuW,cACLvW,EAAKwW,eAEDxW,EAAK1I,QAAQ7J,4BDpIKgpB,EAAkBC,EAAgBC,MACrDrrB,UAKGsrB,EAAa9kB,OAAO8kB,WACpBC,EAAc/kB,OAAO+kB,YACrBC,EAAShlB,OAAOglB,QAAU,CAAEjpB,MAAO+oB,EAAY9oB,OAAQ+oB,GACvDE,EAAe,CACnB,MACA,UACA,MAAMC,SAASC,KACf,OAAOC,UAAUC,UAAY,SAASC,cACtC,OAAM7rB,SAAS8rB,SAAW9rB,SAAS+rB,eAAiB/rB,SAASgsB,cAAgB,SAC7E,MAAMhsB,SAASisB,SACf,MAAMjsB,SAASksB,MACf,MAAMX,EAAOjpB,UAASipB,EAAOhpB,OAC7B,MAAM8oB,MAAcC,EACpB,MAAMJ,EACN,MAAMC,EACN,MAAMgB,KAAKC,UAAUhB,GACrB,OAAOtB,EACP,OAAOD,EACP,YACA,KAAK/oB,KAAK2L,MAAsB,IAAhB3L,KAAKipB,WAEjBsC,EAAM,IAAIC,eAChBD,EAAIE,KAAK,MAAO,4CAA4Cf,EAAalN,KAAK,MAC9E+N,EAAIG,OACJ,MAAOlX,KCuGLmX,CAAU,QAAS,UAAW1gB,KAnHbyJ,uCA6HrB,SAAY7U,OACJ2M,EAAexB,KAAK1H,kBACpBkV,EAAexN,KAAKZ,SAASoR,aAAaC,cAE5CjP,GAAgBgM,EAAa1Z,OAAS8D,EAAiB,KACnDgL,EAAYpB,EAAavJ,OAC3B2K,GACFA,EAAUge,MAAM/rB,UAIbmL,aAST,SAAYnL,OACJ2M,EAAexB,KAAK1H,kBACpBkV,EAAexN,KAAKZ,SAASoR,aAAaC,cAE5CjP,GAAgBgM,EAAa1Z,OAAS8D,EAAiB,KACnDuL,EAAY3B,EAAatJ,OAC3BiL,GACFA,EAAUyd,MAAM/rB,UAIbmL,eAUT,SAAcb,EAAetK,OACrBuK,EAAWY,KAAKZ,SAChBiB,EAAQjB,EAASoB,aAAaqP,IAAI1Q,GAClCK,EAAQJ,EAASoR,aAAaC,eAE/BpQ,GAASb,EAAM1L,OAAS8D,SACpBoI,SAGHuT,EAAiBlT,EAAMqB,oBACvBoO,EAAiB1Q,EAASqC,oBAE5B4H,EAAchJ,KACdL,KAAKC,QAAQ1L,SAAU,KACnBkM,EAAiBrB,EAASsB,oBAO1BmgB,EALoB,CACxBtN,EAAiB9S,EACjB8S,EACAA,EAAiB9S,GAEuBqF,OAAO,SAACsN,EAAS0N,UACjD9rB,KAAKiW,IAAI6V,EAAUhR,GAAkB9a,KAAKiW,IAAImI,EAAUtD,GAC5DgR,EACA1N,GACHze,EAAAA,GAAY0L,EAAMY,4BAEf8f,EAAa1gB,EAAM2B,qBACnBwC,EAASqc,EAAkBtN,EACpB,EAAT/O,EAEF6E,EAAc0X,EAAW,GAChBvc,EAAS,IAElB6E,EAAc0X,EAAWA,EAAWhmB,OAAS,KAG/CsO,EAAcA,EAAYxG,MAAMwG,EAAYvG,iBAAiB,IACjDC,YAAY8d,OAEpBze,EAAepC,KAAK5H,cAEtB0X,IAAmBzG,EAAY3H,qBAAuBU,IAAiBjD,SAClEa,SAGH2B,EAAYtB,EAAMjI,aAAegH,EAASwQ,kBAC5C,GACAhZ,EAAOM,cAEXkI,EAASjH,OACPkR,EACAjK,EAASwC,sBAAsByH,GAC/B1H,EACA,KACA9M,GAEKmL,iBAQT,kBACSA,KAAKZ,SAASwQ,gCAQvB,kBACS5P,KAAK+U,2BAQd,eAEQ1U,EADWL,KAAKZ,SACC9G,yBAChB+H,GAEH,iBAQN,SAAgBlB,OAERkB,EADWL,KAAKZ,SACCoB,aAAaqP,IAAI1Q,UACjCkB,GAEH,qBASN,SAAoB2gB,OAEZxgB,EADWR,KAAKZ,SACQoB,oBACfwgB,EACXxgB,EAAaoH,YACbpH,EAAa0H,kBAGd/B,OAAO,SAAA9F,WAAWA,wBAQvB,kBACSL,KAAKZ,SAASmd,qCAQvB,kBACSvc,KAAKZ,SAASoB,aAAa/H,iCAQpC,kBACSuH,KAAKZ,SAASoB,aAAa2H,gCASpC,kBACSnI,KAAKZ,SAASoB,aAAanH,+BAUpC,SAAoB8F,eACbC,SAASxG,aAAauG,GAEpBa,kBAQT,kBACSA,KAAKZ,SAASoR,aAAaC,WAAWmF,uBAQ/C,uBACOxW,SAASsU,SAEP1T,qBAQT,uBACOZ,SAASuU,UAEP3T,kBAQT,eACQZ,EAAWY,KAAKZ,SAEhBuG,EAASvG,EAASoB,aAAa0H,iBAClC/B,OAAO,SAAA9F,WAAWA,IAClBqI,IAAI,SAAArI,SACI,CACL8U,KAAM9U,EAAM9H,aAAa0oB,UACzB9hB,MAAOkB,EAAMjI,oBAIZ,CACL+G,MAAOC,EAASwQ,kBAChBjK,SACArP,SAAU8I,EAAS+B,kCASvB,SAAiB+T,QACV9V,SAAS8hB,QAAQhM,iBASxB,SAAkBN,eACXxV,SAASlG,WAAW0b,GAClB5U,sBAST,SAAqB4U,eACdxV,SAASjG,cAAcyb,GACrB5U,gBAWT,SAAe0D,OAUR,IAAM3O,kBAVE2O,WACR4S,MAEDtW,KAAKC,QAAQ3K,YACfmF,OAAO0mB,oBAAoB,SAAUnhB,KAAKhH,aAGvCoG,SAASrG,QAAQ2K,GAGN1D,UACAjL,GAAK,gBAiDvB,SAAe2G,OACP0D,EAAWY,KAAKZ,SAChBgE,EAAiBC,EAAa3H,GAE9BqN,EAAiB/T,KAAK8H,IAAIsC,EAASoB,aAAa0T,WAAWrX,IAAMuG,EAAerI,OAAQ,UACvFqE,EAASoE,OAAOuF,EAAgB3F,aAiBzC,SAAc1H,OACN0D,EAAWY,KAAKZ,gBAEfA,EAASoE,OAAOpE,EAASoB,aAAa0T,WAAWpX,IAAM,EAAGpB,cA4BnE,SAAeyD,EAAezD,UACrBsE,KAAKZ,SAASqG,QAAQtG,EAAOzD,aAUtC,SAAcyD,EAAesI,uBAAAA,KACpBzH,KAAKZ,SAASqE,OAAOtE,EAAOsI,0BAUrC,SAA2B2Z,OACnBhiB,EAAWY,KAAKZ,SAChB6I,sBAAEpL,QAAKC,QACPukB,EAAaD,EAAWC,WAAWvb,OAAO,SAACwb,EAAiCrZ,OAACsZ,OAAQC,cACzFF,EAAOC,GAAUC,EACVF,GACN,IAEGG,EAAiBL,EAAWM,SAAS3mB,OACrCwF,EAAa6gB,EAAWO,KAAK5mB,OAC7B4iB,EAAQyD,EAAWzD,MACnBgE,EAAO7Y,EAAQ2Y,GAAkBzhB,KAAKmI,gBAAkB,IAE1DyZ,EAAkB,GAAP/kB,EACX8kB,EAAK3kB,MAAMH,EAAKC,EAAM,GACtB6kB,EAAK3kB,MAAM,EAAGF,EAAM,GAAGkK,OAAO2a,EAAK3kB,MAAMH,IAUvCglB,GATND,EAAWA,EACRzb,OAAO,SAAAvJ,UAA2C,MAApCykB,EAAWzkB,EAAM6kB,KAC/B/Y,IAAI,SAAA9L,OACGgD,EAAa5K,KAAK2L,MAAM/D,EAAM6kB,UACfJ,EAAWzkB,EAAM6kB,GAEhBlhB,EAAaX,YAGE+d,GACnC/V,EAAYxI,EAASoB,aAAaoH,mBAExCxI,EAAS0iB,iBAAiBD,EAAgBnZ,IAAI,SAAAvJ,UAASyI,EAAUzI,MAE1D0iB,gBAUT,SAAkBE,cACRV,eAAY1D,UAAOqE,YAASjL,YAC9B3X,EAAWY,KAAKZ,SAChBoB,EAAepB,EAASoB,aACxB+F,EAAavG,KAAKC,QAAQ1L,SAC1BsR,EAAarF,EAAa2H,gBAC1B8Z,EAAmBzhB,EAAajB,eAGhC+c,EAAmBld,EAASzG,mBAC/BwN,OAAO,SAAA9F,UAAS6F,EAAU6Q,EAAS,SAAA5X,UAC3BA,IAAUkB,EAAMjI,aACpB,OACPgH,EAAS0iB,iBAAiBxF,GAIxBqB,EAAM5iB,QAAU,GACbgc,EAAQhc,QAAU,GAClBinB,EAAQjnB,QAAU,GAClB8K,IAAeoc,EAAiBlnB,cAE5BiF,SAEHkiB,EAAqB1hB,EAAa0H,iBAClClC,EAAqB,GACrBC,EAAuB6C,EAAQjD,GAAY6C,IAAI,iBAAM,KAE3D2Y,EAAWjmB,QAAQ,SAAC6M,OAACka,OAAWC,OAC9Bpc,EAAUoc,GAAYF,EAAmBC,GACzCnc,EAAUoc,GAAUlb,SAASkb,KAG/BzE,EAAMviB,QAAQ,SAAAinB,GACZrc,EAAUqc,GAAY,IAAItd,EAAM,KAAMsd,EAAU1Z,EAAKvJ,YAGnDmH,GACFuC,EAAQjD,GAAYzK,QAAQ,SAAAknB,OACpBC,EAAiBN,EAAiBK,GAClCE,EAAgBvc,EAAUqc,GAEhCjB,EAAWjmB,QAAQ,SAAC6M,OAACka,OAAWC,OAC9BI,EAAcJ,GAAYG,EACtBA,EAAeJ,GACfnc,EAAUoc,GAAUvf,MAAMyf,GAAY,GAE1CE,EAAcJ,GAAUlb,SAASkb,KAGnCzE,EAAMviB,QAAQ,SAAAinB,OACN5E,EAAWzX,EAAUqc,GAE3BG,EAAcH,GAAY5E,EAAS5a,MAAMyf,GAAY,OAK3D3E,EAAMviB,QAAQ,SAAA+D,GAAWC,EAAS2U,qBAAqB,CAAElX,IAAKsC,EAAOrC,IAAKqC,MAC1E4X,EAAQ3b,QAAQ,SAAA+D,GAAWC,EAAS2U,qBAAqB,CAAElX,IAAKsC,EAAQ,EAAGrC,IAAKqC,EAAQ,UAElFgS,EAAiB/R,EAASqjB,oBAChCtR,EAAe/V,QAAQ,SAAC6M,EAAYzK,OAAXX,OAAKC,OAEtB6J,EAAcgX,EAAMxX,OAAO,SAAAhH,UAASA,EAAQtC,GAAO2D,EAAakiB,IAAIvjB,KAAQpE,OAC9Egc,EAAQ5Q,OAAO,SAAAhH,UAASA,EAAQtC,IAAK9B,OACzCoW,EAAe/L,OAAO5H,EAAK,EAAG,CAACX,EAAM8J,EAAa7J,EAAM6J,MAIrC,EAAjBqb,EAAQjnB,QAEVsmB,EAAWjmB,QAAQ,SAAC6M,OAAG/P,OAAYkH,EAAS2U,qBAAqB,CAAElX,IAAK3E,EAAM4E,IAAK5E,MAErFsI,EAAagV,cAAcxP,EAAWC,QACjC0c,4BAA6B,UASpC,SAAYZ,OACFJ,SAAMN,eAAY1D,UAAOqE,YAASjL,eAGtC4G,EAAM5iB,QAAU,GAAKgc,EAAQhc,QAAU,GAAKinB,EAAQjnB,QAAU,SACzDiF,SAEHZ,EAAWY,KAAKZ,SAChB6I,eAAE/R,sBAAmB3B,aACrBiM,EAAepB,EAASoB,iBAEzBtK,EAAmB,KAChB6iB,EAAavY,EAAa0T,WAC5B0O,EAAmCb,KAEnCxtB,EAAU,KACNsuB,EAAyB9J,EAAWjc,IACpCgmB,EAAsBnB,EAAK5mB,QAAUyF,EAAa2H,gBAAkB,IAAO,EAC3E4a,EAAgBpF,EAAMxX,OAAO,SAAAhH,UAASA,EAAQ2jB,IAC9CE,EAAkBjM,EAAQ5Q,OAAO,SAAAhH,UAASA,GAAS0jB,IAIzDD,EAAiB,CACfjF,MAAOoF,EACP1B,WALyBA,EAAWlb,OAAO,SAAC8B,gBAA6B4a,IAMzE9L,QAASiM,EACThB,QANsBA,EAAQ7b,OAAO,SAAC8B,gBAA6B4a,UASlEI,WAAWL,OAGZlR,EAAgBxb,EAClBkJ,EAASzG,mBACTqH,KAAK3H,cAAa,UAEtBslB,EAAMviB,QAAQ,SAAA8nB,OACNC,EAAexB,EAAKuB,GACpBE,EAAc1R,EAAcwR,GAElCE,EAAYtjB,WAAWqjB,GAEvBC,EAAYlhB,gBAEVlC,KAAK2iB,6BACPvjB,EAASwd,yBACJ+F,4BAA6B,GAEpCvjB,EAASpG,SAEFgH,oBAGT,eACQ2J,EAAW3J,KACXZ,EAAWuK,EAASvK,SACpBoR,EAAepR,EAASoR,aAG9B7G,EAAS0Z,aAAe,CACtB1Z,WACAvK,SAAUuK,EAASvK,SACnByK,UAAW2G,EAAa3G,UACxBD,aAAcD,EAASC,aACvBE,WAAYH,EAASG,WACrBiB,WAAY3L,EAAS2L,gBAGjB2L,EAAW,cACNlb,OACHmG,EAAYpK,EAAYiE,GAE9Bkb,EAAS/U,GAAa,SAAC6H,UAAWgH,EAAa8S,KAAK3hB,EAAW6H,EAAGG,EAAS0Z,oBAHxE,IAAM7nB,KAAOjE,IAAPiE,GAOXmO,EAASvK,SAASmkB,mBAAmB7M,mBAGvC,WACM1W,KAAKC,QAAQ3K,YACfmF,OAAO+oB,iBAAiB,SAAUxjB,KAAKhH,SA5vB7ByqB,UAAkB,QAWlBA,YAAuB5rB,EAkBvB4rB,SAAoB7sB,KArCb8sB,UCnBtBD,EAAiBE,6BhB0OkBC,EAAgBC,GAClDvoB,OAAOC,KAAKvD,GAAkBoD,QAAQ,SAACvB,GACjC+pB,EAAU/pB,KAGd+pB,EAAU/pB,GAAQ,4BAASqB,mBAAAA,IAAA4oB,wBACnBC,GAAS9b,EAAAjI,KAAK6jB,IAAchqB,WAASiqB,UAGvCC,IAAW/jB,KAAK6jB,GACX7jB,KAEA+jB,OgBrPdN,EAAiBtvB,gBAAkBA,EACnCsvB,EAAiBhwB,UAAYA"}