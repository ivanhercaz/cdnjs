(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Ipfs"] = factory();
	else
		root["Ipfs"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 367);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */

/* eslint-disable no-proto */


var base64 = __webpack_require__(377);

var ieee754 = __webpack_require__(195);

var isArray = __webpack_require__(196);

exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */

Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined ? global.TYPED_ARRAY_SUPPORT : typedArraySupport();
/*
 * Export kMaxLength after typed array support is determined.
 */

exports.kMaxLength = kMaxLength();

function typedArraySupport() {
  try {
    var arr = new Uint8Array(1);
    arr.__proto__ = {
      __proto__: Uint8Array.prototype,
      foo: function foo() {
        return 42;
      }
    };
    return arr.foo() === 42 && // typed array instances can be augmented
    typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
    arr.subarray(1, 1).byteLength === 0; // ie10 has broken `subarray`
  } catch (e) {
    return false;
  }
}

function kMaxLength() {
  return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
}

function createBuffer(that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length');
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length);
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length);
    }

    that.length = length;
  }

  return that;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */


function Buffer(arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length);
  } // Common case.


  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error('If encoding is specified then the first argument must be a string');
    }

    return allocUnsafe(this, arg);
  }

  return from(this, arg, encodingOrOffset, length);
}

Buffer.poolSize = 8192; // not used by this implementation
// TODO: Legacy, not needed anymore. Remove in next major version.

Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype;
  return arr;
};

function from(that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number');
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length);
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset);
  }

  return fromObject(that, value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/


Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length);
};

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype;
  Buffer.__proto__ = Uint8Array;

  if (typeof Symbol !== 'undefined' && Symbol.species && Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    });
  }
}

function assertSize(size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number');
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative');
  }
}

function alloc(that, size, fill, encoding) {
  assertSize(size);

  if (size <= 0) {
    return createBuffer(that, size);
  }

  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
  }

  return createBuffer(that, size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/


Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding);
};

function allocUnsafe(that, size) {
  assertSize(size);
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);

  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0;
    }
  }

  return that;
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */


Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */


Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size);
};

function fromString(that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8';
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding');
  }

  var length = byteLength(string, encoding) | 0;
  that = createBuffer(that, length);
  var actual = that.write(string, encoding);

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual);
  }

  return that;
}

function fromArrayLike(that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0;
  that = createBuffer(that, length);

  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255;
  }

  return that;
}

function fromArrayBuffer(that, array, byteOffset, length) {
  array.byteLength; // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds');
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds');
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array);
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset);
  } else {
    array = new Uint8Array(array, byteOffset, length);
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array;
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array);
  }

  return that;
}

function fromObject(that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0;
    that = createBuffer(that, len);

    if (that.length === 0) {
      return that;
    }

    obj.copy(that, 0, 0, len);
    return that;
  }

  if (obj) {
    if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0);
      }

      return fromArrayLike(that, obj);
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data);
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
}

function checked(length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');
  }

  return length | 0;
}

function SlowBuffer(length) {
  if (+length != length) {
    // eslint-disable-line eqeqeq
    length = 0;
  }

  return Buffer.alloc(+length);
}

Buffer.isBuffer = function isBuffer(b) {
  return !!(b != null && b._isBuffer);
};

Buffer.compare = function compare(a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers');
  }

  if (a === b) return 0;
  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
};

Buffer.isEncoding = function isEncoding(encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true;

    default:
      return false;
  }
};

Buffer.concat = function concat(list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers');
  }

  if (list.length === 0) {
    return Buffer.alloc(0);
  }

  var i;

  if (length === undefined) {
    length = 0;

    for (i = 0; i < list.length; ++i) {
      length += list[i].length;
    }
  }

  var buffer = Buffer.allocUnsafe(length);
  var pos = 0;

  for (i = 0; i < list.length; ++i) {
    var buf = list[i];

    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    }

    buf.copy(buffer, pos);
    pos += buf.length;
  }

  return buffer;
};

function byteLength(string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length;
  }

  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength;
  }

  if (typeof string !== 'string') {
    string = '' + string;
  }

  var len = string.length;
  if (len === 0) return 0; // Use a for loop to avoid recursion

  var loweredCase = false;

  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len;

      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length;

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2;

      case 'hex':
        return len >>> 1;

      case 'base64':
        return base64ToBytes(string).length;

      default:
        if (loweredCase) return utf8ToBytes(string).length; // assume utf8

        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
}

Buffer.byteLength = byteLength;

function slowToString(encoding, start, end) {
  var loweredCase = false; // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.
  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.

  if (start === undefined || start < 0) {
    start = 0;
  } // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.


  if (start > this.length) {
    return '';
  }

  if (end === undefined || end > this.length) {
    end = this.length;
  }

  if (end <= 0) {
    return '';
  } // Force coersion to uint32. This will also coerce falsey/NaN values to 0.


  end >>>= 0;
  start >>>= 0;

  if (end <= start) {
    return '';
  }

  if (!encoding) encoding = 'utf8';

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end);

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end);

      case 'ascii':
        return asciiSlice(this, start, end);

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end);

      case 'base64':
        return base64Slice(this, start, end);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = (encoding + '').toLowerCase();
        loweredCase = true;
    }
  }
} // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.


Buffer.prototype._isBuffer = true;

function swap(b, n, m) {
  var i = b[n];
  b[n] = b[m];
  b[m] = i;
}

Buffer.prototype.swap16 = function swap16() {
  var len = this.length;

  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits');
  }

  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1);
  }

  return this;
};

Buffer.prototype.swap32 = function swap32() {
  var len = this.length;

  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits');
  }

  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3);
    swap(this, i + 1, i + 2);
  }

  return this;
};

Buffer.prototype.swap64 = function swap64() {
  var len = this.length;

  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits');
  }

  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7);
    swap(this, i + 1, i + 6);
    swap(this, i + 2, i + 5);
    swap(this, i + 3, i + 4);
  }

  return this;
};

Buffer.prototype.toString = function toString() {
  var length = this.length | 0;
  if (length === 0) return '';
  if (arguments.length === 0) return utf8Slice(this, 0, length);
  return slowToString.apply(this, arguments);
};

Buffer.prototype.equals = function equals(b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
  if (this === b) return true;
  return Buffer.compare(this, b) === 0;
};

Buffer.prototype.inspect = function inspect() {
  var str = '';
  var max = exports.INSPECT_MAX_BYTES;

  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
    if (this.length > max) str += ' ... ';
  }

  return '<Buffer ' + str + '>';
};

Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer');
  }

  if (start === undefined) {
    start = 0;
  }

  if (end === undefined) {
    end = target ? target.length : 0;
  }

  if (thisStart === undefined) {
    thisStart = 0;
  }

  if (thisEnd === undefined) {
    thisEnd = this.length;
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index');
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0;
  }

  if (thisStart >= thisEnd) {
    return -1;
  }

  if (start >= end) {
    return 1;
  }

  start >>>= 0;
  end >>>= 0;
  thisStart >>>= 0;
  thisEnd >>>= 0;
  if (this === target) return 0;
  var x = thisEnd - thisStart;
  var y = end - start;
  var len = Math.min(x, y);
  var thisCopy = this.slice(thisStart, thisEnd);
  var targetCopy = target.slice(start, end);

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i];
      y = targetCopy[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
}; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf


function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1; // Normalize byteOffset

  if (typeof byteOffset === 'string') {
    encoding = byteOffset;
    byteOffset = 0;
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff;
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000;
  }

  byteOffset = +byteOffset; // Coerce to Number.

  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
  } // Normalize byteOffset: negative offsets start from the end of the buffer


  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;

  if (byteOffset >= buffer.length) {
    if (dir) return -1;else byteOffset = buffer.length - 1;
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0;else return -1;
  } // Normalize val


  if (typeof val === 'string') {
    val = Buffer.from(val, encoding);
  } // Finally, search either indexOf (if dir is true) or lastIndexOf


  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1;
    }

    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
  } else if (typeof val === 'number') {
    val = val & 0xFF; // Search for a byte value [0-255]

    if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
      }
    }

    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
  }

  throw new TypeError('val must be string, number or Buffer');
}

function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
  var indexSize = 1;
  var arrLength = arr.length;
  var valLength = val.length;

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase();

    if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1;
      }

      indexSize = 2;
      arrLength /= 2;
      valLength /= 2;
      byteOffset /= 2;
    }
  }

  function read(buf, i) {
    if (indexSize === 1) {
      return buf[i];
    } else {
      return buf.readUInt16BE(i * indexSize);
    }
  }

  var i;

  if (dir) {
    var foundIndex = -1;

    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i;
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
      } else {
        if (foundIndex !== -1) i -= i - foundIndex;
        foundIndex = -1;
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;

    for (i = byteOffset; i >= 0; i--) {
      var found = true;

      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false;
          break;
        }
      }

      if (found) return i;
    }
  }

  return -1;
}

Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1;
};

Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};

Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};

function hexWrite(buf, string, offset, length) {
  offset = Number(offset) || 0;
  var remaining = buf.length - offset;

  if (!length) {
    length = remaining;
  } else {
    length = Number(length);

    if (length > remaining) {
      length = remaining;
    }
  } // must be an even number of digits


  var strLen = string.length;
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');

  if (length > strLen / 2) {
    length = strLen / 2;
  }

  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16);
    if (isNaN(parsed)) return i;
    buf[offset + i] = parsed;
  }

  return i;
}

function utf8Write(buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}

function asciiWrite(buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length);
}

function latin1Write(buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length);
}

function base64Write(buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length);
}

function ucs2Write(buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}

Buffer.prototype.write = function write(string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8';
    length = this.length;
    offset = 0; // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset;
    length = this.length;
    offset = 0; // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0;

    if (isFinite(length)) {
      length = length | 0;
      if (encoding === undefined) encoding = 'utf8';
    } else {
      encoding = length;
      length = undefined;
    } // legacy write(string, encoding, offset, length) - remove in v0.13

  } else {
    throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
  }

  var remaining = this.length - offset;
  if (length === undefined || length > remaining) length = remaining;

  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds');
  }

  if (!encoding) encoding = 'utf8';
  var loweredCase = false;

  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length);

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length);

      case 'ascii':
        return asciiWrite(this, string, offset, length);

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length);

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
};

Buffer.prototype.toJSON = function toJSON() {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  };
};

function base64Slice(buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf);
  } else {
    return base64.fromByteArray(buf.slice(start, end));
  }
}

function utf8Slice(buf, start, end) {
  end = Math.min(buf.length, end);
  var res = [];
  var i = start;

  while (i < end) {
    var firstByte = buf[i];
    var codePoint = null;
    var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint;

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte;
          }

          break;

        case 2:
          secondByte = buf[i + 1];

          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;

            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint;
            }
          }

          break;

        case 3:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];

          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;

            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint;
            }
          }

          break;

        case 4:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          fourthByte = buf[i + 3];

          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;

            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint;
            }
          }

      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD;
      bytesPerSequence = 1;
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000;
      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
      codePoint = 0xDC00 | codePoint & 0x3FF;
    }

    res.push(codePoint);
    i += bytesPerSequence;
  }

  return decodeCodePointsArray(res);
} // Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety


var MAX_ARGUMENTS_LENGTH = 0x1000;

function decodeCodePointsArray(codePoints) {
  var len = codePoints.length;

  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
  } // Decode in chunks to avoid "call stack size exceeded".


  var res = '';
  var i = 0;

  while (i < len) {
    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
  }

  return res;
}

function asciiSlice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F);
  }

  return ret;
}

function latin1Slice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i]);
  }

  return ret;
}

function hexSlice(buf, start, end) {
  var len = buf.length;
  if (!start || start < 0) start = 0;
  if (!end || end < 0 || end > len) end = len;
  var out = '';

  for (var i = start; i < end; ++i) {
    out += toHex(buf[i]);
  }

  return out;
}

function utf16leSlice(buf, start, end) {
  var bytes = buf.slice(start, end);
  var res = '';

  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
  }

  return res;
}

Buffer.prototype.slice = function slice(start, end) {
  var len = this.length;
  start = ~~start;
  end = end === undefined ? len : ~~end;

  if (start < 0) {
    start += len;
    if (start < 0) start = 0;
  } else if (start > len) {
    start = len;
  }

  if (end < 0) {
    end += len;
    if (end < 0) end = 0;
  } else if (end > len) {
    end = len;
  }

  if (end < start) end = start;
  var newBuf;

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end);
    newBuf.__proto__ = Buffer.prototype;
  } else {
    var sliceLen = end - start;
    newBuf = new Buffer(sliceLen, undefined);

    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start];
    }
  }

  return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */


function checkOffset(offset, ext, length) {
  if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
}

Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var val = this[offset];
  var mul = 1;
  var i = 0;

  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }

  return val;
};

Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;

  if (!noAssert) {
    checkOffset(offset, byteLength, this.length);
  }

  var val = this[offset + --byteLength];
  var mul = 1;

  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul;
  }

  return val;
};

Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  return this[offset];
};

Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] | this[offset + 1] << 8;
};

Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] << 8 | this[offset + 1];
};

Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};

Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};

Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var val = this[offset];
  var mul = 1;
  var i = 0;

  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }

  mul *= 0x80;
  if (val >= mul) val -= Math.pow(2, 8 * byteLength);
  return val;
};

Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var i = byteLength;
  var mul = 1;
  var val = this[offset + --i];

  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul;
  }

  mul *= 0x80;
  if (val >= mul) val -= Math.pow(2, 8 * byteLength);
  return val;
};

Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  if (!(this[offset] & 0x80)) return this[offset];
  return (0xff - this[offset] + 1) * -1;
};

Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset] | this[offset + 1] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset + 1] | this[offset] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};

Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};

Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754.read(this, offset, true, 23, 4);
};

Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754.read(this, offset, false, 23, 4);
};

Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754.read(this, offset, true, 52, 8);
};

Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754.read(this, offset, false, 52, 8);
};

function checkInt(buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
}

Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;

  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var mul = 1;
  var i = 0;
  this[offset] = value & 0xFF;

  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;

  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var i = byteLength - 1;
  var mul = 1;
  this[offset + i] = value & 0xFF;

  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  this[offset] = value & 0xff;
  return offset + 1;
};

function objectWriteUInt16(buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1;

  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
  } else {
    objectWriteUInt16(this, value, offset, true);
  }

  return offset + 2;
};

Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
  } else {
    objectWriteUInt16(this, value, offset, false);
  }

  return offset + 2;
};

function objectWriteUInt32(buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1;

  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, true);
  }

  return offset + 4;
};

Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, false);
  }

  return offset + 4;
};

Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;

  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);
    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = 0;
  var mul = 1;
  var sub = 0;
  this[offset] = value & 0xFF;

  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1;
    }

    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;

  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);
    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = byteLength - 1;
  var mul = 1;
  var sub = 0;
  this[offset + i] = value & 0xFF;

  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1;
    }

    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  if (value < 0) value = 0xff + value + 1;
  this[offset] = value & 0xff;
  return offset + 1;
};

Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
  } else {
    objectWriteUInt16(this, value, offset, true);
  }

  return offset + 2;
};

Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
  } else {
    objectWriteUInt16(this, value, offset, false);
  }

  return offset + 2;
};

Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
  } else {
    objectWriteUInt32(this, value, offset, true);
  }

  return offset + 4;
};

Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (value < 0) value = 0xffffffff + value + 1;

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, false);
  }

  return offset + 4;
};

function checkIEEE754(buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
  if (offset < 0) throw new RangeError('Index out of range');
}

function writeFloat(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
  }

  ieee754.write(buf, value, offset, littleEndian, 23, 4);
  return offset + 4;
}

Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert);
};

Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert);
};

function writeDouble(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
  }

  ieee754.write(buf, value, offset, littleEndian, 52, 8);
  return offset + 8;
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert);
};

Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert);
}; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)


Buffer.prototype.copy = function copy(target, targetStart, start, end) {
  if (!start) start = 0;
  if (!end && end !== 0) end = this.length;
  if (targetStart >= target.length) targetStart = target.length;
  if (!targetStart) targetStart = 0;
  if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done

  if (end === start) return 0;
  if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions

  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds');
  }

  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');
  if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?

  if (end > this.length) end = this.length;

  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start;
  }

  var len = end - start;
  var i;

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start];
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start];
    }
  } else {
    Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
  }

  return len;
}; // Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])


Buffer.prototype.fill = function fill(val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start;
      start = 0;
      end = this.length;
    } else if (typeof end === 'string') {
      encoding = end;
      end = this.length;
    }

    if (val.length === 1) {
      var code = val.charCodeAt(0);

      if (code < 256) {
        val = code;
      }
    }

    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string');
    }

    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding);
    }
  } else if (typeof val === 'number') {
    val = val & 255;
  } // Invalid ranges are not set to a default, so can range check early.


  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index');
  }

  if (end <= start) {
    return this;
  }

  start = start >>> 0;
  end = end === undefined ? this.length : end >>> 0;
  if (!val) val = 0;
  var i;

  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val;
    }
  } else {
    var bytes = Buffer.isBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());
    var len = bytes.length;

    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len];
    }
  }

  return this;
}; // HELPER FUNCTIONS
// ================


var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

function base64clean(str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''

  if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not

  while (str.length % 4 !== 0) {
    str = str + '=';
  }

  return str;
}

function stringtrim(str) {
  if (str.trim) return str.trim();
  return str.replace(/^\s+|\s+$/g, '');
}

function toHex(n) {
  if (n < 16) return '0' + n.toString(16);
  return n.toString(16);
}

function utf8ToBytes(string, units) {
  units = units || Infinity;
  var codePoint;
  var length = string.length;
  var leadSurrogate = null;
  var bytes = [];

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i); // is surrogate component

    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        } // valid lead


        leadSurrogate = codePoint;
        continue;
      } // 2 leads in a row


      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        leadSurrogate = codePoint;
        continue;
      } // valid surrogate pair


      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
    }

    leadSurrogate = null; // encode utf8

    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break;
      bytes.push(codePoint);
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break;
      bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break;
      bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break;
      bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else {
      throw new Error('Invalid code point');
    }
  }

  return bytes;
}

function asciiToBytes(str) {
  var byteArray = [];

  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
  }

  return byteArray;
}

function utf16leToBytes(str, units) {
  var c, hi, lo;
  var byteArray = [];

  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break;
    c = str.charCodeAt(i);
    hi = c >> 8;
    lo = c % 256;
    byteArray.push(lo);
    byteArray.push(hi);
  }

  return byteArray;
}

function base64ToBytes(str) {
  return base64.toByteArray(base64clean(str));
}

function blitBuffer(src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if (i + offset >= dst.length || i >= src.length) break;
    dst[i + offset] = src[i];
  }

  return i;
}

function isnan(val) {
  return val !== val; // eslint-disable-line no-self-compare
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(8)))

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

/* eslint-env browser */

/**
 * This is the web browser implementation of `debug()`.
 */
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = localstorage();
/**
 * Colors.
 */

exports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];
/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */
// eslint-disable-next-line complexity

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
    return true;
  } // Internet Explorer and Edge do not support colors.


  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
    return false;
  } // Is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632


  return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
  typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
  // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
}
/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */


function formatArgs(args) {
  args[0] = (this.useColors ? '%c' : '') + this.namespace + (this.useColors ? ' %c' : ' ') + args[0] + (this.useColors ? '%c ' : ' ') + '+' + module.exports.humanize(this.diff);

  if (!this.useColors) {
    return;
  }

  const c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit'); // The final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into

  let index = 0;
  let lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, match => {
    if (match === '%%') {
      return;
    }

    index++;

    if (match === '%c') {
      // We only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });
  args.splice(lastC, 0, c);
}
/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */


function log(...args) {
  // This hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return typeof console === 'object' && console.log && console.log(...args);
}
/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */


function save(namespaces) {
  try {
    if (namespaces) {
      exports.storage.setItem('debug', namespaces);
    } else {
      exports.storage.removeItem('debug');
    }
  } catch (error) {// Swallow
    // XXX (@Qix-) should we be logging these?
  }
}
/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */


function load() {
  let r;

  try {
    r = exports.storage.getItem('debug');
  } catch (error) {} // Swallow
  // XXX (@Qix-) should we be logging these?
  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG


  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}
/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */


function localstorage() {
  try {
    // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
    // The Browser also has localStorage in the global context.
    return localStorage;
  } catch (error) {// Swallow
    // XXX (@Qix-) should we be logging these?
  }
}

module.exports = __webpack_require__(370)(exports);
const {
  formatters
} = module.exports;
/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

formatters.j = function (v) {
  try {
    return JSON.stringify(v);
  } catch (error) {
    return '[UnexpectedJSONParseError]: ' + error.message;
  }
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5)))

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function createError(err, code, props) {
  var key;

  if (!(err instanceof Error)) {
    throw new TypeError('Please pass an Error to err-code');
  }

  if (typeof code === 'object') {
    props = code;
  } else if (code != null) {
    err.code = code;
  }

  if (props) {
    for (key in props) {
      err[key] = props[key];
    }
  }

  return err;
}

module.exports = createError;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const mh = __webpack_require__(16);

const multibase = __webpack_require__(53);

const multicodec = __webpack_require__(15);

const codecs = __webpack_require__(72);

const CIDUtil = __webpack_require__(393);

const withIs = __webpack_require__(21);
/**
 * @typedef {Object} SerializedCID
 * @param {string} codec
 * @param {number} version
 * @param {Buffer} multihash
 */

/**
 * Test if the given input is a CID.
 * @function isCID
 * @memberof CID
 * @static
 * @param {any} other
 * @returns {bool}
 */

/**
 * Class representing a CID `<mbase><version><mcodec><mhash>`
 * , as defined in [ipld/cid](https://github.com/multiformats/cid).
 * @class CID
 */


class CID {
  /**
   * Create a new CID.
   *
   * The algorithm for argument input is roughly:
   * ```
   * if (cid)
   *   -> create a copy
   * else if (str)
   *   if (1st char is on multibase table) -> CID String
   *   else -> bs58 encoded multihash
   * else if (Buffer)
   *   if (1st byte is 0 or 1) -> CID
   *   else -> multihash
   * else if (Number)
   *   -> construct CID by parts
   * ```
   *
   * @param {string|Buffer|CID} version
   * @param {string} [codec]
   * @param {Buffer} [multihash]
   * @param {string} [multibaseName]
   *
   * @example
   * new CID(<version>, <codec>, <multihash>, <multibaseName>)
   * new CID(<cidStr>)
   * new CID(<cid.buffer>)
   * new CID(<multihash>)
   * new CID(<bs58 encoded multihash>)
   * new CID(<cid>)
   */
  constructor(version, codec, multihash, multibaseName) {
    if (_CID.isCID(version)) {
      // version is an exising CID instance
      const cid = version;
      this.version = cid.version;
      this.codec = cid.codec;
      this.multihash = Buffer.from(cid.multihash); // Default guard for when a CID < 0.7 is passed with no multibaseName

      this.multibaseName = cid.multibaseName || (cid.version === 0 ? 'base58btc' : 'base32');
      return;
    }

    if (typeof version === 'string') {
      // e.g. 'base32' or false
      const baseName = multibase.isEncoded(version);

      if (baseName) {
        // version is a CID String encoded with multibase, so v1
        const cid = multibase.decode(version);
        this.version = parseInt(cid.slice(0, 1).toString('hex'), 16);
        this.codec = multicodec.getCodec(cid.slice(1));
        this.multihash = multicodec.rmPrefix(cid.slice(1));
        this.multibaseName = baseName;
      } else {
        // version is a base58btc string multihash, so v0
        this.version = 0;
        this.codec = 'dag-pb';
        this.multihash = mh.fromB58String(version);
        this.multibaseName = 'base58btc';
      }

      CID.validateCID(this);
      Object.defineProperty(this, 'string', {
        value: version
      });
      return;
    }

    if (Buffer.isBuffer(version)) {
      const firstByte = version.slice(0, 1);
      const v = parseInt(firstByte.toString('hex'), 16);

      if (v === 1) {
        // version is a CID buffer
        const cid = version;
        this.version = v;
        this.codec = multicodec.getCodec(cid.slice(1));
        this.multihash = multicodec.rmPrefix(cid.slice(1));
        this.multibaseName = 'base32';
      } else {
        // version is a raw multihash buffer, so v0
        this.version = 0;
        this.codec = 'dag-pb';
        this.multihash = version;
        this.multibaseName = 'base58btc';
      }

      CID.validateCID(this);
      return;
    } // otherwise, assemble the CID from the parameters

    /**
     * @type {number}
     */


    this.version = version;
    /**
     * @type {string}
     */

    this.codec = codec;
    /**
     * @type {Buffer}
     */

    this.multihash = multihash;
    /**
     * @type {string}
     */

    this.multibaseName = multibaseName || (version === 0 ? 'base58btc' : 'base32');
    CID.validateCID(this);
  }
  /**
   * The CID as a `Buffer`
   *
   * @return {Buffer}
   * @readonly
   *
   * @memberOf CID
   */


  get buffer() {
    let buffer = this._buffer;

    if (!buffer) {
      if (this.version === 0) {
        buffer = this.multihash;
      } else if (this.version === 1) {
        buffer = Buffer.concat([Buffer.from('01', 'hex'), multicodec.getCodeVarint(this.codec), this.multihash]);
      } else {
        throw new Error('unsupported version');
      } // Cache this buffer so it doesn't have to be recreated


      Object.defineProperty(this, '_buffer', {
        value: buffer
      });
    }

    return buffer;
  }
  /**
   * Get the prefix of the CID.
   *
   * @returns {Buffer}
   * @readonly
   */


  get prefix() {
    return Buffer.concat([Buffer.from("0".concat(this.version), 'hex'), multicodec.getCodeVarint(this.codec), mh.prefix(this.multihash)]);
  }
  /**
   * Convert to a CID of version `0`.
   *
   * @returns {CID}
   */


  toV0() {
    if (this.codec !== 'dag-pb') {
      throw new Error('Cannot convert a non dag-pb CID to CIDv0');
    }

    const {
      name,
      length
    } = mh.decode(this.multihash);

    if (name !== 'sha2-256') {
      throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0');
    }

    if (length !== 32) {
      throw new Error('Cannot convert non 32 byte multihash CID to CIDv0');
    }

    return new _CID(0, this.codec, this.multihash);
  }
  /**
   * Convert to a CID of version `1`.
   *
   * @returns {CID}
   */


  toV1() {
    return new _CID(1, this.codec, this.multihash);
  }
  /**
   * Encode the CID into a string.
   *
   * @param {string} [base=this.multibaseName] - Base encoding to use.
   * @returns {string}
   */


  toBaseEncodedString(base = this.multibaseName) {
    if (this.string && base === this.multibaseName) {
      return this.string;
    }

    let str = null;

    if (this.version === 0) {
      if (base !== 'base58btc') {
        throw new Error('not supported with CIDv0, to support different bases, please migrate the instance do CIDv1, you can do that through cid.toV1()');
      }

      str = mh.toB58String(this.multihash);
    } else if (this.version === 1) {
      str = multibase.encode(base, this.buffer).toString();
    } else {
      throw new Error('unsupported version');
    }

    if (base === this.multibaseName) {
      // cache the string value
      Object.defineProperty(this, 'string', {
        value: str
      });
    }

    return str;
  }

  toString(base) {
    return this.toBaseEncodedString(base);
  }
  /**
   * Serialize to a plain object.
   *
   * @returns {SerializedCID}
   */


  toJSON() {
    return {
      codec: this.codec,
      version: this.version,
      hash: this.multihash
    };
  }
  /**
   * Compare equality with another CID.
   *
   * @param {CID} other
   * @returns {bool}
   */


  equals(other) {
    return this.codec === other.codec && this.version === other.version && this.multihash.equals(other.multihash);
  }
  /**
   * Test if the given input is a valid CID object.
   * Throws if it is not.
   *
   * @param {any} other
   * @returns {void}
   */


  static validateCID(other) {
    const errorMsg = CIDUtil.checkCIDComponents(other);

    if (errorMsg) {
      throw new Error(errorMsg);
    }
  }

}

const _CID = withIs(CID, {
  className: 'CID',
  symbolName: '@ipld/js-cid/CID'
});

_CID.codecs = codecs;
module.exports = _CID;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor;
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor;

      var TempCtor = function TempCtor() {};

      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }
  };
}

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* eslint-disable node/no-deprecated-api */
var buffer = __webpack_require__(0);

var Buffer = buffer.Buffer; // alternative to using Object.keys for old browsers

function copyProps(src, dst) {
  for (var key in src) {
    dst[key] = src[key];
  }
}

if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer;
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports);
  exports.Buffer = SafeBuffer;
}

function SafeBuffer(arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length);
}

SafeBuffer.prototype = Object.create(Buffer.prototype); // Copy static methods from Buffer

copyProps(Buffer, SafeBuffer);

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number');
  }

  return Buffer(arg, encodingOrOffset, length);
};

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number');
  }

  var buf = Buffer(size);

  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding);
    } else {
      buf.fill(fill);
    }
  } else {
    buf.fill(0);
  }

  return buf;
};

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number');
  }

  return Buffer(size);
};

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number');
  }

  return buffer.SlowBuffer(size);
};

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Node.js module for Forge.
 *
 * @author Dave Longley
 *
 * Copyright 2011-2016 Digital Bazaar, Inc.
 */
module.exports = {
  // default options
  options: {
    usePureJavaScript: false
  }
};

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var g; // This works in non-strict mode

g = function () {
  return this;
}();

try {
  // This works if eval is allowed (see CSP)
  g = g || new Function("return this")();
} catch (e) {
  // This works if the window reference is available
  if (typeof window === "object") g = window;
} // g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}


module.exports = g;

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {/*
 * Id is an object representation of a peer Id. a peer Id is a multihash
 */


const mh = __webpack_require__(16);

const CID = __webpack_require__(3);

const cryptoKeys = __webpack_require__(198);

const assert = __webpack_require__(13);

const withIs = __webpack_require__(21);

const {
  PeerIdProto
} = __webpack_require__(478);

class PeerId {
  constructor(id, privKey, pubKey) {
    assert(Buffer.isBuffer(id), 'invalid id provided');

    if (privKey && pubKey) {
      assert(privKey.public.bytes.equals(pubKey.bytes), 'inconsistent arguments');
    }

    this._id = id;
    this._idB58String = mh.toB58String(this.id);
    this._privKey = privKey;
    this._pubKey = pubKey;
  }

  get id() {
    return this._id;
  }

  set id(val) {
    throw new Error('Id is immutable');
  }

  get privKey() {
    return this._privKey;
  }

  set privKey(privKey) {
    this._privKey = privKey;
  }

  get pubKey() {
    if (this._pubKey) {
      return this._pubKey;
    }

    if (this._privKey) {
      return this._privKey.public;
    }

    try {
      const decoded = mh.decode(this.id);

      if (decoded.name === 'identity') {
        this._pubKey = cryptoKeys.unmarshalPublicKey(decoded.digest);
      }
    } catch (_) {// Ignore, there is no valid public key
    }

    return this._pubKey;
  }

  set pubKey(pubKey) {
    this._pubKey = pubKey;
  } // Return the protobuf version of the public key, matching go ipfs formatting


  marshalPubKey() {
    if (this.pubKey) {
      return cryptoKeys.marshalPublicKey(this.pubKey);
    }
  } // Return the protobuf version of the private key, matching go ipfs formatting


  marshalPrivKey() {
    if (this.privKey) {
      return cryptoKeys.marshalPrivateKey(this.privKey);
    }
  } // Return the protobuf version of the peer-id


  marshal(excludePriv) {
    return PeerIdProto.encode({
      id: this.toBytes(),
      pubKey: this.marshalPubKey(),
      privKey: excludePriv ? null : this.marshalPrivKey()
    });
  }

  toPrint() {
    let pid = this.toB58String(); // All sha256 nodes start with Qm
    // We can skip the Qm to make the peer.ID more useful

    if (pid.startsWith('Qm')) {
      pid = pid.slice(2);
    }

    let maxRunes = 6;

    if (pid.length < maxRunes) {
      maxRunes = pid.length;
    }

    return '<peer.ID ' + pid.substr(0, maxRunes) + '>';
  } // return the jsonified version of the key, matching the formatting
  // of go-ipfs for its config file


  toJSON() {
    return {
      id: this.toB58String(),
      privKey: toB64Opt(this.marshalPrivKey()),
      pubKey: toB64Opt(this.marshalPubKey())
    };
  } // encode/decode functions


  toHexString() {
    return mh.toHexString(this.id);
  }

  toBytes() {
    return this.id;
  }

  toB58String() {
    return this._idB58String;
  } // return self-describing String representation
  // in default format from RFC 0001: https://github.com/libp2p/specs/pull/209


  toString() {
    if (!this._idCIDString) {
      const cid = new CID(1, 'libp2p-key', this.id, 'base32');
      this._idCIDString = cid.toBaseEncodedString('base32');
    }

    return this._idCIDString;
  }
  /**
   * Checks the equality of `this` peer against a given PeerId.
   * @param {Buffer|PeerId} id
   * @returns {boolean}
   */


  equals(id) {
    if (Buffer.isBuffer(id)) {
      return this.id.equals(id);
    } else if (id.id) {
      return this.id.equals(id.id);
    } else {
      throw new Error('not valid Id');
    }
  }
  /**
   * Checks the equality of `this` peer against a given PeerId.
   * @deprecated Use `.equals`
   * @param {Buffer|PeerId} id
   * @returns {boolean}
   */


  isEqual(id) {
    return this.equals(id);
  }
  /*
   * Check if this PeerId instance is valid (privKey -> pubKey -> Id)
   */


  isValid() {
    // TODO: needs better checking
    return Boolean(this.privKey && this.privKey.public && this.privKey.public.bytes && Buffer.isBuffer(this.pubKey.bytes) && this.privKey.public.bytes.equals(this.pubKey.bytes));
  }

}

const PeerIdWithIs = withIs(PeerId, {
  className: 'PeerId',
  symbolName: '@libp2p/js-peer-id/PeerId'
});
exports = module.exports = PeerIdWithIs;

const computeDigest = pubKey => {
  if (pubKey.bytes.length <= 42) {
    return mh.encode(pubKey.bytes, 'identity');
  } else {
    return pubKey.hash();
  }
};

const computePeerId = async (privKey, pubKey) => {
  const digest = await computeDigest(pubKey);
  return new PeerIdWithIs(digest, privKey, pubKey);
}; // generation


exports.create = async opts => {
  opts = opts || {};
  opts.bits = opts.bits || 2048;
  opts.keyType = opts.keyType || 'RSA';
  const key = await cryptoKeys.generateKeyPair(opts.keyType, opts.bits);
  return computePeerId(key, key.public);
};

exports.createFromHexString = str => {
  return new PeerIdWithIs(mh.fromHexString(str));
};

exports.createFromBytes = buf => {
  return new PeerIdWithIs(buf);
};

exports.createFromB58String = str => {
  return exports.createFromCID(str); // B58String is CIDv0
};

const validMulticodec = cid => {
  // supported: 'libp2p-key' (CIDv1) and 'dag-pb' (CIDv0 converted to CIDv1)
  return cid.codec === 'libp2p-key' || cid.codec === 'dag-pb';
};

exports.createFromCID = cid => {
  cid = CID.isCID(cid) ? cid : new CID(cid);
  if (!validMulticodec(cid)) throw new Error('Supplied PeerID CID has invalid multicodec: ' + cid.codec);
  return new PeerIdWithIs(cid.multihash);
}; // Public Key input will be a buffer


exports.createFromPubKey = async key => {
  let buf = key;

  if (typeof buf === 'string') {
    buf = Buffer.from(key, 'base64');
  }

  if (!Buffer.isBuffer(buf)) {
    throw new Error('Supplied key is neither a base64 string nor a buffer');
  }

  const pubKey = await cryptoKeys.unmarshalPublicKey(buf);
  return computePeerId(null, pubKey);
}; // Private key input will be a string


exports.createFromPrivKey = async key => {
  let buf = key;

  if (typeof buf === 'string') {
    buf = Buffer.from(key, 'base64');
  }

  if (!Buffer.isBuffer(buf)) {
    throw new Error('Supplied key is neither a base64 string nor a buffer');
  }

  const privKey = await cryptoKeys.unmarshalPrivateKey(buf);
  return computePeerId(privKey, privKey.public);
};

exports.createFromJSON = async obj => {
  const id = mh.fromB58String(obj.id);
  const rawPrivKey = obj.privKey && Buffer.from(obj.privKey, 'base64');
  const rawPubKey = obj.pubKey && Buffer.from(obj.pubKey, 'base64');
  const pub = rawPubKey && (await cryptoKeys.unmarshalPublicKey(rawPubKey));

  if (!rawPrivKey) {
    return new PeerIdWithIs(id, null, pub);
  }

  const privKey = await cryptoKeys.unmarshalPrivateKey(rawPrivKey);
  const privDigest = await computeDigest(privKey.public);
  let pubDigest;

  if (pub) {
    pubDigest = await computeDigest(pub);
  }

  if (pub && !privDigest.equals(pubDigest)) {
    throw new Error('Public and private key do not match');
  }

  if (id && !privDigest.equals(id)) {
    throw new Error('Id and private key do not match');
  }

  return new PeerIdWithIs(id, privKey, pub);
};

exports.createFromProtobuf = async buf => {
  if (typeof buf === 'string') {
    buf = Buffer.from(buf, 'hex');
  }

  let {
    id,
    privKey,
    pubKey
  } = PeerIdProto.decode(buf);
  privKey = privKey ? await cryptoKeys.unmarshalPrivateKey(privKey) : false;
  pubKey = pubKey ? await cryptoKeys.unmarshalPublicKey(pubKey) : false;
  let pubDigest;
  let privDigest;

  if (privKey) {
    privDigest = await computeDigest(privKey.public);
  }

  if (pubKey) {
    pubDigest = await computeDigest(pubKey);
  }

  if (privKey) {
    if (pubKey) {
      if (!privDigest.equals(pubDigest)) {
        throw new Error('Public and private key do not match');
      }
    }

    return new PeerIdWithIs(privDigest, privKey, privKey.public);
  } // TODO: val id and pubDigest


  if (pubKey) {
    return new PeerIdWithIs(pubDigest, null, pubKey);
  }

  if (id) {
    return new PeerIdWithIs(id);
  }

  throw new Error('Protobuf did not contain any usable key material');
};

exports.isPeerId = peerId => {
  return Boolean(typeof peerId === 'object' && peerId._id && peerId._idB58String);
};

function toB64Opt(val) {
  if (val) {
    return val.toString('base64');
  }
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, setImmediate, global, Buffer) {

/**
 * Utility functions for web applications.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2018 Digital Bazaar, Inc.
 */
var forge = __webpack_require__(7);

var baseN = __webpack_require__(405);
/* Utilities API */


var util = module.exports = forge.util = forge.util || {}; // define setImmediate and nextTick

(function () {
  // use native nextTick (unless we're in webpack)
  // webpack (or better node-libs-browser polyfill) sets process.browser.
  // this way we can detect webpack properly
  if (typeof process !== 'undefined' && process.nextTick && !process.browser) {
    util.nextTick = process.nextTick;

    if (typeof setImmediate === 'function') {
      util.setImmediate = setImmediate;
    } else {
      // polyfill setImmediate with nextTick, older versions of node
      // (those w/o setImmediate) won't totally starve IO
      util.setImmediate = util.nextTick;
    }

    return;
  } // polyfill nextTick with native setImmediate


  if (typeof setImmediate === 'function') {
    util.setImmediate = function () {
      return setImmediate.apply(undefined, arguments);
    };

    util.nextTick = function (callback) {
      return setImmediate(callback);
    };

    return;
  }
  /* Note: A polyfill upgrade pattern is used here to allow combining
  polyfills. For example, MutationObserver is fast, but blocks UI updates,
  so it needs to allow UI updates periodically, so it falls back on
  postMessage or setTimeout. */
  // polyfill with setTimeout


  util.setImmediate = function (callback) {
    setTimeout(callback, 0);
  }; // upgrade polyfill to use postMessage


  if (typeof window !== 'undefined' && typeof window.postMessage === 'function') {
    var msg = 'forge.setImmediate';
    var callbacks = [];

    util.setImmediate = function (callback) {
      callbacks.push(callback); // only send message when one hasn't been sent in
      // the current turn of the event loop

      if (callbacks.length === 1) {
        window.postMessage(msg, '*');
      }
    };

    function handler(event) {
      if (event.source === window && event.data === msg) {
        event.stopPropagation();
        var copy = callbacks.slice();
        callbacks.length = 0;
        copy.forEach(function (callback) {
          callback();
        });
      }
    }

    window.addEventListener('message', handler, true);
  } // upgrade polyfill to use MutationObserver


  if (typeof MutationObserver !== 'undefined') {
    // polyfill with MutationObserver
    var now = Date.now();
    var attr = true;
    var div = document.createElement('div');
    var callbacks = [];
    new MutationObserver(function () {
      var copy = callbacks.slice();
      callbacks.length = 0;
      copy.forEach(function (callback) {
        callback();
      });
    }).observe(div, {
      attributes: true
    });
    var oldSetImmediate = util.setImmediate;

    util.setImmediate = function (callback) {
      if (Date.now() - now > 15) {
        now = Date.now();
        oldSetImmediate(callback);
      } else {
        callbacks.push(callback); // only trigger observer when it hasn't been triggered in
        // the current turn of the event loop

        if (callbacks.length === 1) {
          div.setAttribute('a', attr = !attr);
        }
      }
    };
  }

  util.nextTick = util.setImmediate;
})(); // check if running under Node.js


util.isNodejs = typeof process !== 'undefined' && process.versions && process.versions.node; // 'self' will also work in Web Workers (instance of WorkerGlobalScope) while
// it will point to `window` in the main thread.
// To remain compatible with older browsers, we fall back to 'window' if 'self'
// is not available.

util.globalScope = function () {
  if (util.isNodejs) {
    return global;
  }

  return typeof self === 'undefined' ? window : self;
}(); // define isArray


util.isArray = Array.isArray || function (x) {
  return Object.prototype.toString.call(x) === '[object Array]';
}; // define isArrayBuffer


util.isArrayBuffer = function (x) {
  return typeof ArrayBuffer !== 'undefined' && x instanceof ArrayBuffer;
}; // define isArrayBufferView


util.isArrayBufferView = function (x) {
  return x && util.isArrayBuffer(x.buffer) && x.byteLength !== undefined;
};
/**
 * Ensure a bits param is 8, 16, 24, or 32. Used to validate input for
 * algorithms where bit manipulation, JavaScript limitations, and/or algorithm
 * design only allow for byte operations of a limited size.
 *
 * @param n number of bits.
 *
 * Throw Error if n invalid.
 */


function _checkBitsParam(n) {
  if (!(n === 8 || n === 16 || n === 24 || n === 32)) {
    throw new Error('Only 8, 16, 24, or 32 bits supported: ' + n);
  }
} // TODO: set ByteBuffer to best available backing


util.ByteBuffer = ByteStringBuffer;
/** Buffer w/BinaryString backing */

/**
 * Constructor for a binary string backed byte buffer.
 *
 * @param [b] the bytes to wrap (either encoded as string, one byte per
 *          character, or as an ArrayBuffer or Typed Array).
 */

function ByteStringBuffer(b) {
  // TODO: update to match DataBuffer API
  // the data in this buffer
  this.data = ''; // the pointer for reading from this buffer

  this.read = 0;

  if (typeof b === 'string') {
    this.data = b;
  } else if (util.isArrayBuffer(b) || util.isArrayBufferView(b)) {
    if (typeof Buffer !== 'undefined' && b instanceof Buffer) {
      this.data = b.toString('binary');
    } else {
      // convert native buffer to forge buffer
      // FIXME: support native buffers internally instead
      var arr = new Uint8Array(b);

      try {
        this.data = String.fromCharCode.apply(null, arr);
      } catch (e) {
        for (var i = 0; i < arr.length; ++i) {
          this.putByte(arr[i]);
        }
      }
    }
  } else if (b instanceof ByteStringBuffer || typeof b === 'object' && typeof b.data === 'string' && typeof b.read === 'number') {
    // copy existing buffer
    this.data = b.data;
    this.read = b.read;
  } // used for v8 optimization


  this._constructedStringLength = 0;
}

util.ByteStringBuffer = ByteStringBuffer;
/* Note: This is an optimization for V8-based browsers. When V8 concatenates
  a string, the strings are only joined logically using a "cons string" or
  "constructed/concatenated string". These containers keep references to one
  another and can result in very large memory usage. For example, if a 2MB
  string is constructed by concatenating 4 bytes together at a time, the
  memory usage will be ~44MB; so ~22x increase. The strings are only joined
  together when an operation requiring their joining takes place, such as
  substr(). This function is called when adding data to this buffer to ensure
  these types of strings are periodically joined to reduce the memory
  footprint. */

var _MAX_CONSTRUCTED_STRING_LENGTH = 4096;

util.ByteStringBuffer.prototype._optimizeConstructedString = function (x) {
  this._constructedStringLength += x;

  if (this._constructedStringLength > _MAX_CONSTRUCTED_STRING_LENGTH) {
    // this substr() should cause the constructed string to join
    this.data.substr(0, 1);
    this._constructedStringLength = 0;
  }
};
/**
 * Gets the number of bytes in this buffer.
 *
 * @return the number of bytes in this buffer.
 */


util.ByteStringBuffer.prototype.length = function () {
  return this.data.length - this.read;
};
/**
 * Gets whether or not this buffer is empty.
 *
 * @return true if this buffer is empty, false if not.
 */


util.ByteStringBuffer.prototype.isEmpty = function () {
  return this.length() <= 0;
};
/**
 * Puts a byte in this buffer.
 *
 * @param b the byte to put.
 *
 * @return this buffer.
 */


util.ByteStringBuffer.prototype.putByte = function (b) {
  return this.putBytes(String.fromCharCode(b));
};
/**
 * Puts a byte in this buffer N times.
 *
 * @param b the byte to put.
 * @param n the number of bytes of value b to put.
 *
 * @return this buffer.
 */


util.ByteStringBuffer.prototype.fillWithByte = function (b, n) {
  b = String.fromCharCode(b);
  var d = this.data;

  while (n > 0) {
    if (n & 1) {
      d += b;
    }

    n >>>= 1;

    if (n > 0) {
      b += b;
    }
  }

  this.data = d;

  this._optimizeConstructedString(n);

  return this;
};
/**
 * Puts bytes in this buffer.
 *
 * @param bytes the bytes (as a binary encoded string) to put.
 *
 * @return this buffer.
 */


util.ByteStringBuffer.prototype.putBytes = function (bytes) {
  this.data += bytes;

  this._optimizeConstructedString(bytes.length);

  return this;
};
/**
 * Puts a UTF-16 encoded string into this buffer.
 *
 * @param str the string to put.
 *
 * @return this buffer.
 */


util.ByteStringBuffer.prototype.putString = function (str) {
  return this.putBytes(util.encodeUtf8(str));
};
/**
 * Puts a 16-bit integer in this buffer in big-endian order.
 *
 * @param i the 16-bit integer.
 *
 * @return this buffer.
 */


util.ByteStringBuffer.prototype.putInt16 = function (i) {
  return this.putBytes(String.fromCharCode(i >> 8 & 0xFF) + String.fromCharCode(i & 0xFF));
};
/**
 * Puts a 24-bit integer in this buffer in big-endian order.
 *
 * @param i the 24-bit integer.
 *
 * @return this buffer.
 */


util.ByteStringBuffer.prototype.putInt24 = function (i) {
  return this.putBytes(String.fromCharCode(i >> 16 & 0xFF) + String.fromCharCode(i >> 8 & 0xFF) + String.fromCharCode(i & 0xFF));
};
/**
 * Puts a 32-bit integer in this buffer in big-endian order.
 *
 * @param i the 32-bit integer.
 *
 * @return this buffer.
 */


util.ByteStringBuffer.prototype.putInt32 = function (i) {
  return this.putBytes(String.fromCharCode(i >> 24 & 0xFF) + String.fromCharCode(i >> 16 & 0xFF) + String.fromCharCode(i >> 8 & 0xFF) + String.fromCharCode(i & 0xFF));
};
/**
 * Puts a 16-bit integer in this buffer in little-endian order.
 *
 * @param i the 16-bit integer.
 *
 * @return this buffer.
 */


util.ByteStringBuffer.prototype.putInt16Le = function (i) {
  return this.putBytes(String.fromCharCode(i & 0xFF) + String.fromCharCode(i >> 8 & 0xFF));
};
/**
 * Puts a 24-bit integer in this buffer in little-endian order.
 *
 * @param i the 24-bit integer.
 *
 * @return this buffer.
 */


util.ByteStringBuffer.prototype.putInt24Le = function (i) {
  return this.putBytes(String.fromCharCode(i & 0xFF) + String.fromCharCode(i >> 8 & 0xFF) + String.fromCharCode(i >> 16 & 0xFF));
};
/**
 * Puts a 32-bit integer in this buffer in little-endian order.
 *
 * @param i the 32-bit integer.
 *
 * @return this buffer.
 */


util.ByteStringBuffer.prototype.putInt32Le = function (i) {
  return this.putBytes(String.fromCharCode(i & 0xFF) + String.fromCharCode(i >> 8 & 0xFF) + String.fromCharCode(i >> 16 & 0xFF) + String.fromCharCode(i >> 24 & 0xFF));
};
/**
 * Puts an n-bit integer in this buffer in big-endian order.
 *
 * @param i the n-bit integer.
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return this buffer.
 */


util.ByteStringBuffer.prototype.putInt = function (i, n) {
  _checkBitsParam(n);

  var bytes = '';

  do {
    n -= 8;
    bytes += String.fromCharCode(i >> n & 0xFF);
  } while (n > 0);

  return this.putBytes(bytes);
};
/**
 * Puts a signed n-bit integer in this buffer in big-endian order. Two's
 * complement representation is used.
 *
 * @param i the n-bit integer.
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return this buffer.
 */


util.ByteStringBuffer.prototype.putSignedInt = function (i, n) {
  // putInt checks n
  if (i < 0) {
    i += 2 << n - 1;
  }

  return this.putInt(i, n);
};
/**
 * Puts the given buffer into this buffer.
 *
 * @param buffer the buffer to put into this one.
 *
 * @return this buffer.
 */


util.ByteStringBuffer.prototype.putBuffer = function (buffer) {
  return this.putBytes(buffer.getBytes());
};
/**
 * Gets a byte from this buffer and advances the read pointer by 1.
 *
 * @return the byte.
 */


util.ByteStringBuffer.prototype.getByte = function () {
  return this.data.charCodeAt(this.read++);
};
/**
 * Gets a uint16 from this buffer in big-endian order and advances the read
 * pointer by 2.
 *
 * @return the uint16.
 */


util.ByteStringBuffer.prototype.getInt16 = function () {
  var rval = this.data.charCodeAt(this.read) << 8 ^ this.data.charCodeAt(this.read + 1);
  this.read += 2;
  return rval;
};
/**
 * Gets a uint24 from this buffer in big-endian order and advances the read
 * pointer by 3.
 *
 * @return the uint24.
 */


util.ByteStringBuffer.prototype.getInt24 = function () {
  var rval = this.data.charCodeAt(this.read) << 16 ^ this.data.charCodeAt(this.read + 1) << 8 ^ this.data.charCodeAt(this.read + 2);
  this.read += 3;
  return rval;
};
/**
 * Gets a uint32 from this buffer in big-endian order and advances the read
 * pointer by 4.
 *
 * @return the word.
 */


util.ByteStringBuffer.prototype.getInt32 = function () {
  var rval = this.data.charCodeAt(this.read) << 24 ^ this.data.charCodeAt(this.read + 1) << 16 ^ this.data.charCodeAt(this.read + 2) << 8 ^ this.data.charCodeAt(this.read + 3);
  this.read += 4;
  return rval;
};
/**
 * Gets a uint16 from this buffer in little-endian order and advances the read
 * pointer by 2.
 *
 * @return the uint16.
 */


util.ByteStringBuffer.prototype.getInt16Le = function () {
  var rval = this.data.charCodeAt(this.read) ^ this.data.charCodeAt(this.read + 1) << 8;
  this.read += 2;
  return rval;
};
/**
 * Gets a uint24 from this buffer in little-endian order and advances the read
 * pointer by 3.
 *
 * @return the uint24.
 */


util.ByteStringBuffer.prototype.getInt24Le = function () {
  var rval = this.data.charCodeAt(this.read) ^ this.data.charCodeAt(this.read + 1) << 8 ^ this.data.charCodeAt(this.read + 2) << 16;
  this.read += 3;
  return rval;
};
/**
 * Gets a uint32 from this buffer in little-endian order and advances the read
 * pointer by 4.
 *
 * @return the word.
 */


util.ByteStringBuffer.prototype.getInt32Le = function () {
  var rval = this.data.charCodeAt(this.read) ^ this.data.charCodeAt(this.read + 1) << 8 ^ this.data.charCodeAt(this.read + 2) << 16 ^ this.data.charCodeAt(this.read + 3) << 24;
  this.read += 4;
  return rval;
};
/**
 * Gets an n-bit integer from this buffer in big-endian order and advances the
 * read pointer by ceil(n/8).
 *
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return the integer.
 */


util.ByteStringBuffer.prototype.getInt = function (n) {
  _checkBitsParam(n);

  var rval = 0;

  do {
    // TODO: Use (rval * 0x100) if adding support for 33 to 53 bits.
    rval = (rval << 8) + this.data.charCodeAt(this.read++);
    n -= 8;
  } while (n > 0);

  return rval;
};
/**
 * Gets a signed n-bit integer from this buffer in big-endian order, using
 * two's complement, and advances the read pointer by n/8.
 *
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return the integer.
 */


util.ByteStringBuffer.prototype.getSignedInt = function (n) {
  // getInt checks n
  var x = this.getInt(n);
  var max = 2 << n - 2;

  if (x >= max) {
    x -= max << 1;
  }

  return x;
};
/**
 * Reads bytes out as a binary encoded string and clears them from the
 * buffer. Note that the resulting string is binary encoded (in node.js this
 * encoding is referred to as `binary`, it is *not* `utf8`).
 *
 * @param count the number of bytes to read, undefined or null for all.
 *
 * @return a binary encoded string of bytes.
 */


util.ByteStringBuffer.prototype.getBytes = function (count) {
  var rval;

  if (count) {
    // read count bytes
    count = Math.min(this.length(), count);
    rval = this.data.slice(this.read, this.read + count);
    this.read += count;
  } else if (count === 0) {
    rval = '';
  } else {
    // read all bytes, optimize to only copy when needed
    rval = this.read === 0 ? this.data : this.data.slice(this.read);
    this.clear();
  }

  return rval;
};
/**
 * Gets a binary encoded string of the bytes from this buffer without
 * modifying the read pointer.
 *
 * @param count the number of bytes to get, omit to get all.
 *
 * @return a string full of binary encoded characters.
 */


util.ByteStringBuffer.prototype.bytes = function (count) {
  return typeof count === 'undefined' ? this.data.slice(this.read) : this.data.slice(this.read, this.read + count);
};
/**
 * Gets a byte at the given index without modifying the read pointer.
 *
 * @param i the byte index.
 *
 * @return the byte.
 */


util.ByteStringBuffer.prototype.at = function (i) {
  return this.data.charCodeAt(this.read + i);
};
/**
 * Puts a byte at the given index without modifying the read pointer.
 *
 * @param i the byte index.
 * @param b the byte to put.
 *
 * @return this buffer.
 */


util.ByteStringBuffer.prototype.setAt = function (i, b) {
  this.data = this.data.substr(0, this.read + i) + String.fromCharCode(b) + this.data.substr(this.read + i + 1);
  return this;
};
/**
 * Gets the last byte without modifying the read pointer.
 *
 * @return the last byte.
 */


util.ByteStringBuffer.prototype.last = function () {
  return this.data.charCodeAt(this.data.length - 1);
};
/**
 * Creates a copy of this buffer.
 *
 * @return the copy.
 */


util.ByteStringBuffer.prototype.copy = function () {
  var c = util.createBuffer(this.data);
  c.read = this.read;
  return c;
};
/**
 * Compacts this buffer.
 *
 * @return this buffer.
 */


util.ByteStringBuffer.prototype.compact = function () {
  if (this.read > 0) {
    this.data = this.data.slice(this.read);
    this.read = 0;
  }

  return this;
};
/**
 * Clears this buffer.
 *
 * @return this buffer.
 */


util.ByteStringBuffer.prototype.clear = function () {
  this.data = '';
  this.read = 0;
  return this;
};
/**
 * Shortens this buffer by triming bytes off of the end of this buffer.
 *
 * @param count the number of bytes to trim off.
 *
 * @return this buffer.
 */


util.ByteStringBuffer.prototype.truncate = function (count) {
  var len = Math.max(0, this.length() - count);
  this.data = this.data.substr(this.read, len);
  this.read = 0;
  return this;
};
/**
 * Converts this buffer to a hexadecimal string.
 *
 * @return a hexadecimal string.
 */


util.ByteStringBuffer.prototype.toHex = function () {
  var rval = '';

  for (var i = this.read; i < this.data.length; ++i) {
    var b = this.data.charCodeAt(i);

    if (b < 16) {
      rval += '0';
    }

    rval += b.toString(16);
  }

  return rval;
};
/**
 * Converts this buffer to a UTF-16 string (standard JavaScript string).
 *
 * @return a UTF-16 string.
 */


util.ByteStringBuffer.prototype.toString = function () {
  return util.decodeUtf8(this.bytes());
};
/** End Buffer w/BinaryString backing */

/** Buffer w/UInt8Array backing */

/**
 * FIXME: Experimental. Do not use yet.
 *
 * Constructor for an ArrayBuffer-backed byte buffer.
 *
 * The buffer may be constructed from a string, an ArrayBuffer, DataView, or a
 * TypedArray.
 *
 * If a string is given, its encoding should be provided as an option,
 * otherwise it will default to 'binary'. A 'binary' string is encoded such
 * that each character is one byte in length and size.
 *
 * If an ArrayBuffer, DataView, or TypedArray is given, it will be used
 * *directly* without any copying. Note that, if a write to the buffer requires
 * more space, the buffer will allocate a new backing ArrayBuffer to
 * accommodate. The starting read and write offsets for the buffer may be
 * given as options.
 *
 * @param [b] the initial bytes for this buffer.
 * @param options the options to use:
 *          [readOffset] the starting read offset to use (default: 0).
 *          [writeOffset] the starting write offset to use (default: the
 *            length of the first parameter).
 *          [growSize] the minimum amount, in bytes, to grow the buffer by to
 *            accommodate writes (default: 1024).
 *          [encoding] the encoding ('binary', 'utf8', 'utf16', 'hex') for the
 *            first parameter, if it is a string (default: 'binary').
 */


function DataBuffer(b, options) {
  // default options
  options = options || {}; // pointers for read from/write to buffer

  this.read = options.readOffset || 0;
  this.growSize = options.growSize || 1024;
  var isArrayBuffer = util.isArrayBuffer(b);
  var isArrayBufferView = util.isArrayBufferView(b);

  if (isArrayBuffer || isArrayBufferView) {
    // use ArrayBuffer directly
    if (isArrayBuffer) {
      this.data = new DataView(b);
    } else {
      // TODO: adjust read/write offset based on the type of view
      // or specify that this must be done in the options ... that the
      // offsets are byte-based
      this.data = new DataView(b.buffer, b.byteOffset, b.byteLength);
    }

    this.write = 'writeOffset' in options ? options.writeOffset : this.data.byteLength;
    return;
  } // initialize to empty array buffer and add any given bytes using putBytes


  this.data = new DataView(new ArrayBuffer(0));
  this.write = 0;

  if (b !== null && b !== undefined) {
    this.putBytes(b);
  }

  if ('writeOffset' in options) {
    this.write = options.writeOffset;
  }
}

util.DataBuffer = DataBuffer;
/**
 * Gets the number of bytes in this buffer.
 *
 * @return the number of bytes in this buffer.
 */

util.DataBuffer.prototype.length = function () {
  return this.write - this.read;
};
/**
 * Gets whether or not this buffer is empty.
 *
 * @return true if this buffer is empty, false if not.
 */


util.DataBuffer.prototype.isEmpty = function () {
  return this.length() <= 0;
};
/**
 * Ensures this buffer has enough empty space to accommodate the given number
 * of bytes. An optional parameter may be given that indicates a minimum
 * amount to grow the buffer if necessary. If the parameter is not given,
 * the buffer will be grown by some previously-specified default amount
 * or heuristic.
 *
 * @param amount the number of bytes to accommodate.
 * @param [growSize] the minimum amount, in bytes, to grow the buffer by if
 *          necessary.
 */


util.DataBuffer.prototype.accommodate = function (amount, growSize) {
  if (this.length() >= amount) {
    return this;
  }

  growSize = Math.max(growSize || this.growSize, amount); // grow buffer

  var src = new Uint8Array(this.data.buffer, this.data.byteOffset, this.data.byteLength);
  var dst = new Uint8Array(this.length() + growSize);
  dst.set(src);
  this.data = new DataView(dst.buffer);
  return this;
};
/**
 * Puts a byte in this buffer.
 *
 * @param b the byte to put.
 *
 * @return this buffer.
 */


util.DataBuffer.prototype.putByte = function (b) {
  this.accommodate(1);
  this.data.setUint8(this.write++, b);
  return this;
};
/**
 * Puts a byte in this buffer N times.
 *
 * @param b the byte to put.
 * @param n the number of bytes of value b to put.
 *
 * @return this buffer.
 */


util.DataBuffer.prototype.fillWithByte = function (b, n) {
  this.accommodate(n);

  for (var i = 0; i < n; ++i) {
    this.data.setUint8(b);
  }

  return this;
};
/**
 * Puts bytes in this buffer. The bytes may be given as a string, an
 * ArrayBuffer, a DataView, or a TypedArray.
 *
 * @param bytes the bytes to put.
 * @param [encoding] the encoding for the first parameter ('binary', 'utf8',
 *          'utf16', 'hex'), if it is a string (default: 'binary').
 *
 * @return this buffer.
 */


util.DataBuffer.prototype.putBytes = function (bytes, encoding) {
  if (util.isArrayBufferView(bytes)) {
    var src = new Uint8Array(bytes.buffer, bytes.byteOffset, bytes.byteLength);
    var len = src.byteLength - src.byteOffset;
    this.accommodate(len);
    var dst = new Uint8Array(this.data.buffer, this.write);
    dst.set(src);
    this.write += len;
    return this;
  }

  if (util.isArrayBuffer(bytes)) {
    var src = new Uint8Array(bytes);
    this.accommodate(src.byteLength);
    var dst = new Uint8Array(this.data.buffer);
    dst.set(src, this.write);
    this.write += src.byteLength;
    return this;
  } // bytes is a util.DataBuffer or equivalent


  if (bytes instanceof util.DataBuffer || typeof bytes === 'object' && typeof bytes.read === 'number' && typeof bytes.write === 'number' && util.isArrayBufferView(bytes.data)) {
    var src = new Uint8Array(bytes.data.byteLength, bytes.read, bytes.length());
    this.accommodate(src.byteLength);
    var dst = new Uint8Array(bytes.data.byteLength, this.write);
    dst.set(src);
    this.write += src.byteLength;
    return this;
  }

  if (bytes instanceof util.ByteStringBuffer) {
    // copy binary string and process as the same as a string parameter below
    bytes = bytes.data;
    encoding = 'binary';
  } // string conversion


  encoding = encoding || 'binary';

  if (typeof bytes === 'string') {
    var view; // decode from string

    if (encoding === 'hex') {
      this.accommodate(Math.ceil(bytes.length / 2));
      view = new Uint8Array(this.data.buffer, this.write);
      this.write += util.binary.hex.decode(bytes, view, this.write);
      return this;
    }

    if (encoding === 'base64') {
      this.accommodate(Math.ceil(bytes.length / 4) * 3);
      view = new Uint8Array(this.data.buffer, this.write);
      this.write += util.binary.base64.decode(bytes, view, this.write);
      return this;
    } // encode text as UTF-8 bytes


    if (encoding === 'utf8') {
      // encode as UTF-8 then decode string as raw binary
      bytes = util.encodeUtf8(bytes);
      encoding = 'binary';
    } // decode string as raw binary


    if (encoding === 'binary' || encoding === 'raw') {
      // one byte per character
      this.accommodate(bytes.length);
      view = new Uint8Array(this.data.buffer, this.write);
      this.write += util.binary.raw.decode(view);
      return this;
    } // encode text as UTF-16 bytes


    if (encoding === 'utf16') {
      // two bytes per character
      this.accommodate(bytes.length * 2);
      view = new Uint16Array(this.data.buffer, this.write);
      this.write += util.text.utf16.encode(view);
      return this;
    }

    throw new Error('Invalid encoding: ' + encoding);
  }

  throw Error('Invalid parameter: ' + bytes);
};
/**
 * Puts the given buffer into this buffer.
 *
 * @param buffer the buffer to put into this one.
 *
 * @return this buffer.
 */


util.DataBuffer.prototype.putBuffer = function (buffer) {
  this.putBytes(buffer);
  buffer.clear();
  return this;
};
/**
 * Puts a string into this buffer.
 *
 * @param str the string to put.
 * @param [encoding] the encoding for the string (default: 'utf16').
 *
 * @return this buffer.
 */


util.DataBuffer.prototype.putString = function (str) {
  return this.putBytes(str, 'utf16');
};
/**
 * Puts a 16-bit integer in this buffer in big-endian order.
 *
 * @param i the 16-bit integer.
 *
 * @return this buffer.
 */


util.DataBuffer.prototype.putInt16 = function (i) {
  this.accommodate(2);
  this.data.setInt16(this.write, i);
  this.write += 2;
  return this;
};
/**
 * Puts a 24-bit integer in this buffer in big-endian order.
 *
 * @param i the 24-bit integer.
 *
 * @return this buffer.
 */


util.DataBuffer.prototype.putInt24 = function (i) {
  this.accommodate(3);
  this.data.setInt16(this.write, i >> 8 & 0xFFFF);
  this.data.setInt8(this.write, i >> 16 & 0xFF);
  this.write += 3;
  return this;
};
/**
 * Puts a 32-bit integer in this buffer in big-endian order.
 *
 * @param i the 32-bit integer.
 *
 * @return this buffer.
 */


util.DataBuffer.prototype.putInt32 = function (i) {
  this.accommodate(4);
  this.data.setInt32(this.write, i);
  this.write += 4;
  return this;
};
/**
 * Puts a 16-bit integer in this buffer in little-endian order.
 *
 * @param i the 16-bit integer.
 *
 * @return this buffer.
 */


util.DataBuffer.prototype.putInt16Le = function (i) {
  this.accommodate(2);
  this.data.setInt16(this.write, i, true);
  this.write += 2;
  return this;
};
/**
 * Puts a 24-bit integer in this buffer in little-endian order.
 *
 * @param i the 24-bit integer.
 *
 * @return this buffer.
 */


util.DataBuffer.prototype.putInt24Le = function (i) {
  this.accommodate(3);
  this.data.setInt8(this.write, i >> 16 & 0xFF);
  this.data.setInt16(this.write, i >> 8 & 0xFFFF, true);
  this.write += 3;
  return this;
};
/**
 * Puts a 32-bit integer in this buffer in little-endian order.
 *
 * @param i the 32-bit integer.
 *
 * @return this buffer.
 */


util.DataBuffer.prototype.putInt32Le = function (i) {
  this.accommodate(4);
  this.data.setInt32(this.write, i, true);
  this.write += 4;
  return this;
};
/**
 * Puts an n-bit integer in this buffer in big-endian order.
 *
 * @param i the n-bit integer.
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return this buffer.
 */


util.DataBuffer.prototype.putInt = function (i, n) {
  _checkBitsParam(n);

  this.accommodate(n / 8);

  do {
    n -= 8;
    this.data.setInt8(this.write++, i >> n & 0xFF);
  } while (n > 0);

  return this;
};
/**
 * Puts a signed n-bit integer in this buffer in big-endian order. Two's
 * complement representation is used.
 *
 * @param i the n-bit integer.
 * @param n the number of bits in the integer.
 *
 * @return this buffer.
 */


util.DataBuffer.prototype.putSignedInt = function (i, n) {
  _checkBitsParam(n);

  this.accommodate(n / 8);

  if (i < 0) {
    i += 2 << n - 1;
  }

  return this.putInt(i, n);
};
/**
 * Gets a byte from this buffer and advances the read pointer by 1.
 *
 * @return the byte.
 */


util.DataBuffer.prototype.getByte = function () {
  return this.data.getInt8(this.read++);
};
/**
 * Gets a uint16 from this buffer in big-endian order and advances the read
 * pointer by 2.
 *
 * @return the uint16.
 */


util.DataBuffer.prototype.getInt16 = function () {
  var rval = this.data.getInt16(this.read);
  this.read += 2;
  return rval;
};
/**
 * Gets a uint24 from this buffer in big-endian order and advances the read
 * pointer by 3.
 *
 * @return the uint24.
 */


util.DataBuffer.prototype.getInt24 = function () {
  var rval = this.data.getInt16(this.read) << 8 ^ this.data.getInt8(this.read + 2);
  this.read += 3;
  return rval;
};
/**
 * Gets a uint32 from this buffer in big-endian order and advances the read
 * pointer by 4.
 *
 * @return the word.
 */


util.DataBuffer.prototype.getInt32 = function () {
  var rval = this.data.getInt32(this.read);
  this.read += 4;
  return rval;
};
/**
 * Gets a uint16 from this buffer in little-endian order and advances the read
 * pointer by 2.
 *
 * @return the uint16.
 */


util.DataBuffer.prototype.getInt16Le = function () {
  var rval = this.data.getInt16(this.read, true);
  this.read += 2;
  return rval;
};
/**
 * Gets a uint24 from this buffer in little-endian order and advances the read
 * pointer by 3.
 *
 * @return the uint24.
 */


util.DataBuffer.prototype.getInt24Le = function () {
  var rval = this.data.getInt8(this.read) ^ this.data.getInt16(this.read + 1, true) << 8;
  this.read += 3;
  return rval;
};
/**
 * Gets a uint32 from this buffer in little-endian order and advances the read
 * pointer by 4.
 *
 * @return the word.
 */


util.DataBuffer.prototype.getInt32Le = function () {
  var rval = this.data.getInt32(this.read, true);
  this.read += 4;
  return rval;
};
/**
 * Gets an n-bit integer from this buffer in big-endian order and advances the
 * read pointer by n/8.
 *
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return the integer.
 */


util.DataBuffer.prototype.getInt = function (n) {
  _checkBitsParam(n);

  var rval = 0;

  do {
    // TODO: Use (rval * 0x100) if adding support for 33 to 53 bits.
    rval = (rval << 8) + this.data.getInt8(this.read++);
    n -= 8;
  } while (n > 0);

  return rval;
};
/**
 * Gets a signed n-bit integer from this buffer in big-endian order, using
 * two's complement, and advances the read pointer by n/8.
 *
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return the integer.
 */


util.DataBuffer.prototype.getSignedInt = function (n) {
  // getInt checks n
  var x = this.getInt(n);
  var max = 2 << n - 2;

  if (x >= max) {
    x -= max << 1;
  }

  return x;
};
/**
 * Reads bytes out as a binary encoded string and clears them from the
 * buffer.
 *
 * @param count the number of bytes to read, undefined or null for all.
 *
 * @return a binary encoded string of bytes.
 */


util.DataBuffer.prototype.getBytes = function (count) {
  // TODO: deprecate this method, it is poorly named and
  // this.toString('binary') replaces it
  // add a toTypedArray()/toArrayBuffer() function
  var rval;

  if (count) {
    // read count bytes
    count = Math.min(this.length(), count);
    rval = this.data.slice(this.read, this.read + count);
    this.read += count;
  } else if (count === 0) {
    rval = '';
  } else {
    // read all bytes, optimize to only copy when needed
    rval = this.read === 0 ? this.data : this.data.slice(this.read);
    this.clear();
  }

  return rval;
};
/**
 * Gets a binary encoded string of the bytes from this buffer without
 * modifying the read pointer.
 *
 * @param count the number of bytes to get, omit to get all.
 *
 * @return a string full of binary encoded characters.
 */


util.DataBuffer.prototype.bytes = function (count) {
  // TODO: deprecate this method, it is poorly named, add "getString()"
  return typeof count === 'undefined' ? this.data.slice(this.read) : this.data.slice(this.read, this.read + count);
};
/**
 * Gets a byte at the given index without modifying the read pointer.
 *
 * @param i the byte index.
 *
 * @return the byte.
 */


util.DataBuffer.prototype.at = function (i) {
  return this.data.getUint8(this.read + i);
};
/**
 * Puts a byte at the given index without modifying the read pointer.
 *
 * @param i the byte index.
 * @param b the byte to put.
 *
 * @return this buffer.
 */


util.DataBuffer.prototype.setAt = function (i, b) {
  this.data.setUint8(i, b);
  return this;
};
/**
 * Gets the last byte without modifying the read pointer.
 *
 * @return the last byte.
 */


util.DataBuffer.prototype.last = function () {
  return this.data.getUint8(this.write - 1);
};
/**
 * Creates a copy of this buffer.
 *
 * @return the copy.
 */


util.DataBuffer.prototype.copy = function () {
  return new util.DataBuffer(this);
};
/**
 * Compacts this buffer.
 *
 * @return this buffer.
 */


util.DataBuffer.prototype.compact = function () {
  if (this.read > 0) {
    var src = new Uint8Array(this.data.buffer, this.read);
    var dst = new Uint8Array(src.byteLength);
    dst.set(src);
    this.data = new DataView(dst);
    this.write -= this.read;
    this.read = 0;
  }

  return this;
};
/**
 * Clears this buffer.
 *
 * @return this buffer.
 */


util.DataBuffer.prototype.clear = function () {
  this.data = new DataView(new ArrayBuffer(0));
  this.read = this.write = 0;
  return this;
};
/**
 * Shortens this buffer by triming bytes off of the end of this buffer.
 *
 * @param count the number of bytes to trim off.
 *
 * @return this buffer.
 */


util.DataBuffer.prototype.truncate = function (count) {
  this.write = Math.max(0, this.length() - count);
  this.read = Math.min(this.read, this.write);
  return this;
};
/**
 * Converts this buffer to a hexadecimal string.
 *
 * @return a hexadecimal string.
 */


util.DataBuffer.prototype.toHex = function () {
  var rval = '';

  for (var i = this.read; i < this.data.byteLength; ++i) {
    var b = this.data.getUint8(i);

    if (b < 16) {
      rval += '0';
    }

    rval += b.toString(16);
  }

  return rval;
};
/**
 * Converts this buffer to a string, using the given encoding. If no
 * encoding is given, 'utf8' (UTF-8) is used.
 *
 * @param [encoding] the encoding to use: 'binary', 'utf8', 'utf16', 'hex',
 *          'base64' (default: 'utf8').
 *
 * @return a string representation of the bytes in this buffer.
 */


util.DataBuffer.prototype.toString = function (encoding) {
  var view = new Uint8Array(this.data, this.read, this.length());
  encoding = encoding || 'utf8'; // encode to string

  if (encoding === 'binary' || encoding === 'raw') {
    return util.binary.raw.encode(view);
  }

  if (encoding === 'hex') {
    return util.binary.hex.encode(view);
  }

  if (encoding === 'base64') {
    return util.binary.base64.encode(view);
  } // decode to text


  if (encoding === 'utf8') {
    return util.text.utf8.decode(view);
  }

  if (encoding === 'utf16') {
    return util.text.utf16.decode(view);
  }

  throw new Error('Invalid encoding: ' + encoding);
};
/** End Buffer w/UInt8Array backing */

/**
 * Creates a buffer that stores bytes. A value may be given to populate the
 * buffer with data. This value can either be string of encoded bytes or a
 * regular string of characters. When passing a string of binary encoded
 * bytes, the encoding `raw` should be given. This is also the default. When
 * passing a string of characters, the encoding `utf8` should be given.
 *
 * @param [input] a string with encoded bytes to store in the buffer.
 * @param [encoding] (default: 'raw', other: 'utf8').
 */


util.createBuffer = function (input, encoding) {
  // TODO: deprecate, use new ByteBuffer() instead
  encoding = encoding || 'raw';

  if (input !== undefined && encoding === 'utf8') {
    input = util.encodeUtf8(input);
  }

  return new util.ByteBuffer(input);
};
/**
 * Fills a string with a particular value. If you want the string to be a byte
 * string, pass in String.fromCharCode(theByte).
 *
 * @param c the character to fill the string with, use String.fromCharCode
 *          to fill the string with a byte value.
 * @param n the number of characters of value c to fill with.
 *
 * @return the filled string.
 */


util.fillString = function (c, n) {
  var s = '';

  while (n > 0) {
    if (n & 1) {
      s += c;
    }

    n >>>= 1;

    if (n > 0) {
      c += c;
    }
  }

  return s;
};
/**
 * Performs a per byte XOR between two byte strings and returns the result as a
 * string of bytes.
 *
 * @param s1 first string of bytes.
 * @param s2 second string of bytes.
 * @param n the number of bytes to XOR.
 *
 * @return the XOR'd result.
 */


util.xorBytes = function (s1, s2, n) {
  var s3 = '';
  var b = '';
  var t = '';
  var i = 0;
  var c = 0;

  for (; n > 0; --n, ++i) {
    b = s1.charCodeAt(i) ^ s2.charCodeAt(i);

    if (c >= 10) {
      s3 += t;
      t = '';
      c = 0;
    }

    t += String.fromCharCode(b);
    ++c;
  }

  s3 += t;
  return s3;
};
/**
 * Converts a hex string into a 'binary' encoded string of bytes.
 *
 * @param hex the hexadecimal string to convert.
 *
 * @return the binary-encoded string of bytes.
 */


util.hexToBytes = function (hex) {
  // TODO: deprecate: "Deprecated. Use util.binary.hex.decode instead."
  var rval = '';
  var i = 0;

  if (hex.length & 1 == 1) {
    // odd number of characters, convert first character alone
    i = 1;
    rval += String.fromCharCode(parseInt(hex[0], 16));
  } // convert 2 characters (1 byte) at a time


  for (; i < hex.length; i += 2) {
    rval += String.fromCharCode(parseInt(hex.substr(i, 2), 16));
  }

  return rval;
};
/**
 * Converts a 'binary' encoded string of bytes to hex.
 *
 * @param bytes the byte string to convert.
 *
 * @return the string of hexadecimal characters.
 */


util.bytesToHex = function (bytes) {
  // TODO: deprecate: "Deprecated. Use util.binary.hex.encode instead."
  return util.createBuffer(bytes).toHex();
};
/**
 * Converts an 32-bit integer to 4-big-endian byte string.
 *
 * @param i the integer.
 *
 * @return the byte string.
 */


util.int32ToBytes = function (i) {
  return String.fromCharCode(i >> 24 & 0xFF) + String.fromCharCode(i >> 16 & 0xFF) + String.fromCharCode(i >> 8 & 0xFF) + String.fromCharCode(i & 0xFF);
}; // base64 characters, reverse mapping


var _base64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
var _base64Idx = [
/*43 -43 = 0*/

/*'+',  1,  2,  3,'/' */
62, -1, -1, -1, 63,
/*'0','1','2','3','4','5','6','7','8','9' */
52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
/*15, 16, 17,'=', 19, 20, 21 */
-1, -1, -1, 64, -1, -1, -1,
/*65 - 43 = 22*/

/*'A','B','C','D','E','F','G','H','I','J','K','L','M', */
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
/*'N','O','P','Q','R','S','T','U','V','W','X','Y','Z' */
13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
/*91 - 43 = 48 */

/*48, 49, 50, 51, 52, 53 */
-1, -1, -1, -1, -1, -1,
/*97 - 43 = 54*/

/*'a','b','c','d','e','f','g','h','i','j','k','l','m' */
26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,
/*'n','o','p','q','r','s','t','u','v','w','x','y','z' */
39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51]; // base58 characters (Bitcoin alphabet)

var _base58 = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';
/**
 * Base64 encodes a 'binary' encoded string of bytes.
 *
 * @param input the binary encoded string of bytes to base64-encode.
 * @param maxline the maximum number of encoded characters per line to use,
 *          defaults to none.
 *
 * @return the base64-encoded output.
 */

util.encode64 = function (input, maxline) {
  // TODO: deprecate: "Deprecated. Use util.binary.base64.encode instead."
  var line = '';
  var output = '';
  var chr1, chr2, chr3;
  var i = 0;

  while (i < input.length) {
    chr1 = input.charCodeAt(i++);
    chr2 = input.charCodeAt(i++);
    chr3 = input.charCodeAt(i++); // encode 4 character group

    line += _base64.charAt(chr1 >> 2);
    line += _base64.charAt((chr1 & 3) << 4 | chr2 >> 4);

    if (isNaN(chr2)) {
      line += '==';
    } else {
      line += _base64.charAt((chr2 & 15) << 2 | chr3 >> 6);
      line += isNaN(chr3) ? '=' : _base64.charAt(chr3 & 63);
    }

    if (maxline && line.length > maxline) {
      output += line.substr(0, maxline) + '\r\n';
      line = line.substr(maxline);
    }
  }

  output += line;
  return output;
};
/**
 * Base64 decodes a string into a 'binary' encoded string of bytes.
 *
 * @param input the base64-encoded input.
 *
 * @return the binary encoded string.
 */


util.decode64 = function (input) {
  // TODO: deprecate: "Deprecated. Use util.binary.base64.decode instead."
  // remove all non-base64 characters
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  var output = '';
  var enc1, enc2, enc3, enc4;
  var i = 0;

  while (i < input.length) {
    enc1 = _base64Idx[input.charCodeAt(i++) - 43];
    enc2 = _base64Idx[input.charCodeAt(i++) - 43];
    enc3 = _base64Idx[input.charCodeAt(i++) - 43];
    enc4 = _base64Idx[input.charCodeAt(i++) - 43];
    output += String.fromCharCode(enc1 << 2 | enc2 >> 4);

    if (enc3 !== 64) {
      // decoded at least 2 bytes
      output += String.fromCharCode((enc2 & 15) << 4 | enc3 >> 2);

      if (enc4 !== 64) {
        // decoded 3 bytes
        output += String.fromCharCode((enc3 & 3) << 6 | enc4);
      }
    }
  }

  return output;
};
/**
 * Encodes the given string of characters (a standard JavaScript
 * string) as a binary encoded string where the bytes represent
 * a UTF-8 encoded string of characters. Non-ASCII characters will be
 * encoded as multiple bytes according to UTF-8.
 *
 * @param str a standard string of characters to encode.
 *
 * @return the binary encoded string.
 */


util.encodeUtf8 = function (str) {
  return unescape(encodeURIComponent(str));
};
/**
 * Decodes a binary encoded string that contains bytes that
 * represent a UTF-8 encoded string of characters -- into a
 * string of characters (a standard JavaScript string).
 *
 * @param str the binary encoded string to decode.
 *
 * @return the resulting standard string of characters.
 */


util.decodeUtf8 = function (str) {
  return decodeURIComponent(escape(str));
}; // binary encoding/decoding tools
// FIXME: Experimental. Do not use yet.


util.binary = {
  raw: {},
  hex: {},
  base64: {},
  base58: {},
  baseN: {
    encode: baseN.encode,
    decode: baseN.decode
  }
};
/**
 * Encodes a Uint8Array as a binary-encoded string. This encoding uses
 * a value between 0 and 255 for each character.
 *
 * @param bytes the Uint8Array to encode.
 *
 * @return the binary-encoded string.
 */

util.binary.raw.encode = function (bytes) {
  return String.fromCharCode.apply(null, bytes);
};
/**
 * Decodes a binary-encoded string to a Uint8Array. This encoding uses
 * a value between 0 and 255 for each character.
 *
 * @param str the binary-encoded string to decode.
 * @param [output] an optional Uint8Array to write the output to; if it
 *          is too small, an exception will be thrown.
 * @param [offset] the start offset for writing to the output (default: 0).
 *
 * @return the Uint8Array or the number of bytes written if output was given.
 */


util.binary.raw.decode = function (str, output, offset) {
  var out = output;

  if (!out) {
    out = new Uint8Array(str.length);
  }

  offset = offset || 0;
  var j = offset;

  for (var i = 0; i < str.length; ++i) {
    out[j++] = str.charCodeAt(i);
  }

  return output ? j - offset : out;
};
/**
 * Encodes a 'binary' string, ArrayBuffer, DataView, TypedArray, or
 * ByteBuffer as a string of hexadecimal characters.
 *
 * @param bytes the bytes to convert.
 *
 * @return the string of hexadecimal characters.
 */


util.binary.hex.encode = util.bytesToHex;
/**
 * Decodes a hex-encoded string to a Uint8Array.
 *
 * @param hex the hexadecimal string to convert.
 * @param [output] an optional Uint8Array to write the output to; if it
 *          is too small, an exception will be thrown.
 * @param [offset] the start offset for writing to the output (default: 0).
 *
 * @return the Uint8Array or the number of bytes written if output was given.
 */

util.binary.hex.decode = function (hex, output, offset) {
  var out = output;

  if (!out) {
    out = new Uint8Array(Math.ceil(hex.length / 2));
  }

  offset = offset || 0;
  var i = 0,
      j = offset;

  if (hex.length & 1) {
    // odd number of characters, convert first character alone
    i = 1;
    out[j++] = parseInt(hex[0], 16);
  } // convert 2 characters (1 byte) at a time


  for (; i < hex.length; i += 2) {
    out[j++] = parseInt(hex.substr(i, 2), 16);
  }

  return output ? j - offset : out;
};
/**
 * Base64-encodes a Uint8Array.
 *
 * @param input the Uint8Array to encode.
 * @param maxline the maximum number of encoded characters per line to use,
 *          defaults to none.
 *
 * @return the base64-encoded output string.
 */


util.binary.base64.encode = function (input, maxline) {
  var line = '';
  var output = '';
  var chr1, chr2, chr3;
  var i = 0;

  while (i < input.byteLength) {
    chr1 = input[i++];
    chr2 = input[i++];
    chr3 = input[i++]; // encode 4 character group

    line += _base64.charAt(chr1 >> 2);
    line += _base64.charAt((chr1 & 3) << 4 | chr2 >> 4);

    if (isNaN(chr2)) {
      line += '==';
    } else {
      line += _base64.charAt((chr2 & 15) << 2 | chr3 >> 6);
      line += isNaN(chr3) ? '=' : _base64.charAt(chr3 & 63);
    }

    if (maxline && line.length > maxline) {
      output += line.substr(0, maxline) + '\r\n';
      line = line.substr(maxline);
    }
  }

  output += line;
  return output;
};
/**
 * Decodes a base64-encoded string to a Uint8Array.
 *
 * @param input the base64-encoded input string.
 * @param [output] an optional Uint8Array to write the output to; if it
 *          is too small, an exception will be thrown.
 * @param [offset] the start offset for writing to the output (default: 0).
 *
 * @return the Uint8Array or the number of bytes written if output was given.
 */


util.binary.base64.decode = function (input, output, offset) {
  var out = output;

  if (!out) {
    out = new Uint8Array(Math.ceil(input.length / 4) * 3);
  } // remove all non-base64 characters


  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  offset = offset || 0;
  var enc1, enc2, enc3, enc4;
  var i = 0,
      j = offset;

  while (i < input.length) {
    enc1 = _base64Idx[input.charCodeAt(i++) - 43];
    enc2 = _base64Idx[input.charCodeAt(i++) - 43];
    enc3 = _base64Idx[input.charCodeAt(i++) - 43];
    enc4 = _base64Idx[input.charCodeAt(i++) - 43];
    out[j++] = enc1 << 2 | enc2 >> 4;

    if (enc3 !== 64) {
      // decoded at least 2 bytes
      out[j++] = (enc2 & 15) << 4 | enc3 >> 2;

      if (enc4 !== 64) {
        // decoded 3 bytes
        out[j++] = (enc3 & 3) << 6 | enc4;
      }
    }
  } // make sure result is the exact decoded length


  return output ? j - offset : out.subarray(0, j);
}; // add support for base58 encoding/decoding with Bitcoin alphabet


util.binary.base58.encode = function (input, maxline) {
  return util.binary.baseN.encode(input, _base58, maxline);
};

util.binary.base58.decode = function (input, maxline) {
  return util.binary.baseN.decode(input, _base58, maxline);
}; // text encoding/decoding tools
// FIXME: Experimental. Do not use yet.


util.text = {
  utf8: {},
  utf16: {}
};
/**
 * Encodes the given string as UTF-8 in a Uint8Array.
 *
 * @param str the string to encode.
 * @param [output] an optional Uint8Array to write the output to; if it
 *          is too small, an exception will be thrown.
 * @param [offset] the start offset for writing to the output (default: 0).
 *
 * @return the Uint8Array or the number of bytes written if output was given.
 */

util.text.utf8.encode = function (str, output, offset) {
  str = util.encodeUtf8(str);
  var out = output;

  if (!out) {
    out = new Uint8Array(str.length);
  }

  offset = offset || 0;
  var j = offset;

  for (var i = 0; i < str.length; ++i) {
    out[j++] = str.charCodeAt(i);
  }

  return output ? j - offset : out;
};
/**
 * Decodes the UTF-8 contents from a Uint8Array.
 *
 * @param bytes the Uint8Array to decode.
 *
 * @return the resulting string.
 */


util.text.utf8.decode = function (bytes) {
  return util.decodeUtf8(String.fromCharCode.apply(null, bytes));
};
/**
 * Encodes the given string as UTF-16 in a Uint8Array.
 *
 * @param str the string to encode.
 * @param [output] an optional Uint8Array to write the output to; if it
 *          is too small, an exception will be thrown.
 * @param [offset] the start offset for writing to the output (default: 0).
 *
 * @return the Uint8Array or the number of bytes written if output was given.
 */


util.text.utf16.encode = function (str, output, offset) {
  var out = output;

  if (!out) {
    out = new Uint8Array(str.length * 2);
  }

  var view = new Uint16Array(out.buffer);
  offset = offset || 0;
  var j = offset;
  var k = offset;

  for (var i = 0; i < str.length; ++i) {
    view[k++] = str.charCodeAt(i);
    j += 2;
  }

  return output ? j - offset : out;
};
/**
 * Decodes the UTF-16 contents from a Uint8Array.
 *
 * @param bytes the Uint8Array to decode.
 *
 * @return the resulting string.
 */


util.text.utf16.decode = function (bytes) {
  return String.fromCharCode.apply(null, new Uint16Array(bytes.buffer));
};
/**
 * Deflates the given data using a flash interface.
 *
 * @param api the flash interface.
 * @param bytes the data.
 * @param raw true to return only raw deflate data, false to include zlib
 *          header and trailer.
 *
 * @return the deflated data as a string.
 */


util.deflate = function (api, bytes, raw) {
  bytes = util.decode64(api.deflate(util.encode64(bytes)).rval); // strip zlib header and trailer if necessary

  if (raw) {
    // zlib header is 2 bytes (CMF,FLG) where FLG indicates that
    // there is a 4-byte DICT (alder-32) block before the data if
    // its 5th bit is set
    var start = 2;
    var flg = bytes.charCodeAt(1);

    if (flg & 0x20) {
      start = 6;
    } // zlib trailer is 4 bytes of adler-32


    bytes = bytes.substring(start, bytes.length - 4);
  }

  return bytes;
};
/**
 * Inflates the given data using a flash interface.
 *
 * @param api the flash interface.
 * @param bytes the data.
 * @param raw true if the incoming data has no zlib header or trailer and is
 *          raw DEFLATE data.
 *
 * @return the inflated data as a string, null on error.
 */


util.inflate = function (api, bytes, raw) {
  // TODO: add zlib header and trailer if necessary/possible
  var rval = api.inflate(util.encode64(bytes)).rval;
  return rval === null ? null : util.decode64(rval);
};
/**
 * Sets a storage object.
 *
 * @param api the storage interface.
 * @param id the storage ID to use.
 * @param obj the storage object, null to remove.
 */


var _setStorageObject = function _setStorageObject(api, id, obj) {
  if (!api) {
    throw new Error('WebStorage not available.');
  }

  var rval;

  if (obj === null) {
    rval = api.removeItem(id);
  } else {
    // json-encode and base64-encode object
    obj = util.encode64(JSON.stringify(obj));
    rval = api.setItem(id, obj);
  } // handle potential flash error


  if (typeof rval !== 'undefined' && rval.rval !== true) {
    var error = new Error(rval.error.message);
    error.id = rval.error.id;
    error.name = rval.error.name;
    throw error;
  }
};
/**
 * Gets a storage object.
 *
 * @param api the storage interface.
 * @param id the storage ID to use.
 *
 * @return the storage object entry or null if none exists.
 */


var _getStorageObject = function _getStorageObject(api, id) {
  if (!api) {
    throw new Error('WebStorage not available.');
  } // get the existing entry


  var rval = api.getItem(id);
  /* Note: We check api.init because we can't do (api == localStorage)
    on IE because of "Class doesn't support Automation" exception. Only
    the flash api has an init method so this works too, but we need a
    better solution in the future. */
  // flash returns item wrapped in an object, handle special case

  if (api.init) {
    if (rval.rval === null) {
      if (rval.error) {
        var error = new Error(rval.error.message);
        error.id = rval.error.id;
        error.name = rval.error.name;
        throw error;
      } // no error, but also no item


      rval = null;
    } else {
      rval = rval.rval;
    }
  } // handle decoding


  if (rval !== null) {
    // base64-decode and json-decode data
    rval = JSON.parse(util.decode64(rval));
  }

  return rval;
};
/**
 * Stores an item in local storage.
 *
 * @param api the storage interface.
 * @param id the storage ID to use.
 * @param key the key for the item.
 * @param data the data for the item (any javascript object/primitive).
 */


var _setItem = function _setItem(api, id, key, data) {
  // get storage object
  var obj = _getStorageObject(api, id);

  if (obj === null) {
    // create a new storage object
    obj = {};
  } // update key


  obj[key] = data; // set storage object

  _setStorageObject(api, id, obj);
};
/**
 * Gets an item from local storage.
 *
 * @param api the storage interface.
 * @param id the storage ID to use.
 * @param key the key for the item.
 *
 * @return the item.
 */


var _getItem = function _getItem(api, id, key) {
  // get storage object
  var rval = _getStorageObject(api, id);

  if (rval !== null) {
    // return data at key
    rval = key in rval ? rval[key] : null;
  }

  return rval;
};
/**
 * Removes an item from local storage.
 *
 * @param api the storage interface.
 * @param id the storage ID to use.
 * @param key the key for the item.
 */


var _removeItem = function _removeItem(api, id, key) {
  // get storage object
  var obj = _getStorageObject(api, id);

  if (obj !== null && key in obj) {
    // remove key
    delete obj[key]; // see if entry has no keys remaining

    var empty = true;

    for (var prop in obj) {
      empty = false;
      break;
    }

    if (empty) {
      // remove entry entirely if no keys are left
      obj = null;
    } // set storage object


    _setStorageObject(api, id, obj);
  }
};
/**
 * Clears the local disk storage identified by the given ID.
 *
 * @param api the storage interface.
 * @param id the storage ID to use.
 */


var _clearItems = function _clearItems(api, id) {
  _setStorageObject(api, id, null);
};
/**
 * Calls a storage function.
 *
 * @param func the function to call.
 * @param args the arguments for the function.
 * @param location the location argument.
 *
 * @return the return value from the function.
 */


var _callStorageFunction = function _callStorageFunction(func, args, location) {
  var rval = null; // default storage types

  if (typeof location === 'undefined') {
    location = ['web', 'flash'];
  } // apply storage types in order of preference


  var type;
  var done = false;
  var exception = null;

  for (var idx in location) {
    type = location[idx];

    try {
      if (type === 'flash' || type === 'both') {
        if (args[0] === null) {
          throw new Error('Flash local storage not available.');
        }

        rval = func.apply(this, args);
        done = type === 'flash';
      }

      if (type === 'web' || type === 'both') {
        args[0] = localStorage;
        rval = func.apply(this, args);
        done = true;
      }
    } catch (ex) {
      exception = ex;
    }

    if (done) {
      break;
    }
  }

  if (!done) {
    throw exception;
  }

  return rval;
};
/**
 * Stores an item on local disk.
 *
 * The available types of local storage include 'flash', 'web', and 'both'.
 *
 * The type 'flash' refers to flash local storage (SharedObject). In order
 * to use flash local storage, the 'api' parameter must be valid. The type
 * 'web' refers to WebStorage, if supported by the browser. The type 'both'
 * refers to storing using both 'flash' and 'web', not just one or the
 * other.
 *
 * The location array should list the storage types to use in order of
 * preference:
 *
 * ['flash']: flash only storage
 * ['web']: web only storage
 * ['both']: try to store in both
 * ['flash','web']: store in flash first, but if not available, 'web'
 * ['web','flash']: store in web first, but if not available, 'flash'
 *
 * The location array defaults to: ['web', 'flash']
 *
 * @param api the flash interface, null to use only WebStorage.
 * @param id the storage ID to use.
 * @param key the key for the item.
 * @param data the data for the item (any javascript object/primitive).
 * @param location an array with the preferred types of storage to use.
 */


util.setItem = function (api, id, key, data, location) {
  _callStorageFunction(_setItem, arguments, location);
};
/**
 * Gets an item on local disk.
 *
 * Set setItem() for details on storage types.
 *
 * @param api the flash interface, null to use only WebStorage.
 * @param id the storage ID to use.
 * @param key the key for the item.
 * @param location an array with the preferred types of storage to use.
 *
 * @return the item.
 */


util.getItem = function (api, id, key, location) {
  return _callStorageFunction(_getItem, arguments, location);
};
/**
 * Removes an item on local disk.
 *
 * Set setItem() for details on storage types.
 *
 * @param api the flash interface.
 * @param id the storage ID to use.
 * @param key the key for the item.
 * @param location an array with the preferred types of storage to use.
 */


util.removeItem = function (api, id, key, location) {
  _callStorageFunction(_removeItem, arguments, location);
};
/**
 * Clears the local disk storage identified by the given ID.
 *
 * Set setItem() for details on storage types.
 *
 * @param api the flash interface if flash is available.
 * @param id the storage ID to use.
 * @param location an array with the preferred types of storage to use.
 */


util.clearItems = function (api, id, location) {
  _callStorageFunction(_clearItems, arguments, location);
};
/**
 * Parses the scheme, host, and port from an http(s) url.
 *
 * @param str the url string.
 *
 * @return the parsed url object or null if the url is invalid.
 */


util.parseUrl = function (str) {
  // FIXME: this regex looks a bit broken
  var regex = /^(https?):\/\/([^:&^\/]*):?(\d*)(.*)$/g;
  regex.lastIndex = 0;
  var m = regex.exec(str);
  var url = m === null ? null : {
    full: str,
    scheme: m[1],
    host: m[2],
    port: m[3],
    path: m[4]
  };

  if (url) {
    url.fullHost = url.host;

    if (url.port) {
      if (url.port !== 80 && url.scheme === 'http') {
        url.fullHost += ':' + url.port;
      } else if (url.port !== 443 && url.scheme === 'https') {
        url.fullHost += ':' + url.port;
      }
    } else if (url.scheme === 'http') {
      url.port = 80;
    } else if (url.scheme === 'https') {
      url.port = 443;
    }

    url.full = url.scheme + '://' + url.fullHost;
  }

  return url;
};
/* Storage for query variables */


var _queryVariables = null;
/**
 * Returns the window location query variables. Query is parsed on the first
 * call and the same object is returned on subsequent calls. The mapping
 * is from keys to an array of values. Parameters without values will have
 * an object key set but no value added to the value array. Values are
 * unescaped.
 *
 * ...?k1=v1&k2=v2:
 * {
 *   "k1": ["v1"],
 *   "k2": ["v2"]
 * }
 *
 * ...?k1=v1&k1=v2:
 * {
 *   "k1": ["v1", "v2"]
 * }
 *
 * ...?k1=v1&k2:
 * {
 *   "k1": ["v1"],
 *   "k2": []
 * }
 *
 * ...?k1=v1&k1:
 * {
 *   "k1": ["v1"]
 * }
 *
 * ...?k1&k1:
 * {
 *   "k1": []
 * }
 *
 * @param query the query string to parse (optional, default to cached
 *          results from parsing window location search query).
 *
 * @return object mapping keys to variables.
 */

util.getQueryVariables = function (query) {
  var parse = function parse(q) {
    var rval = {};
    var kvpairs = q.split('&');

    for (var i = 0; i < kvpairs.length; i++) {
      var pos = kvpairs[i].indexOf('=');
      var key;
      var val;

      if (pos > 0) {
        key = kvpairs[i].substring(0, pos);
        val = kvpairs[i].substring(pos + 1);
      } else {
        key = kvpairs[i];
        val = null;
      }

      if (!(key in rval)) {
        rval[key] = [];
      } // disallow overriding object prototype keys


      if (!(key in Object.prototype) && val !== null) {
        rval[key].push(unescape(val));
      }
    }

    return rval;
  };

  var rval;

  if (typeof query === 'undefined') {
    // set cached variables if needed
    if (_queryVariables === null) {
      if (typeof window !== 'undefined' && window.location && window.location.search) {
        // parse window search query
        _queryVariables = parse(window.location.search.substring(1));
      } else {
        // no query variables available
        _queryVariables = {};
      }
    }

    rval = _queryVariables;
  } else {
    // parse given query
    rval = parse(query);
  }

  return rval;
};
/**
 * Parses a fragment into a path and query. This method will take a URI
 * fragment and break it up as if it were the main URI. For example:
 *    /bar/baz?a=1&b=2
 * results in:
 *    {
 *       path: ["bar", "baz"],
 *       query: {"k1": ["v1"], "k2": ["v2"]}
 *    }
 *
 * @return object with a path array and query object.
 */


util.parseFragment = function (fragment) {
  // default to whole fragment
  var fp = fragment;
  var fq = ''; // split into path and query if possible at the first '?'

  var pos = fragment.indexOf('?');

  if (pos > 0) {
    fp = fragment.substring(0, pos);
    fq = fragment.substring(pos + 1);
  } // split path based on '/' and ignore first element if empty


  var path = fp.split('/');

  if (path.length > 0 && path[0] === '') {
    path.shift();
  } // convert query into object


  var query = fq === '' ? {} : util.getQueryVariables(fq);
  return {
    pathString: fp,
    queryString: fq,
    path: path,
    query: query
  };
};
/**
 * Makes a request out of a URI-like request string. This is intended to
 * be used where a fragment id (after a URI '#') is parsed as a URI with
 * path and query parts. The string should have a path beginning and
 * delimited by '/' and optional query parameters following a '?'. The
 * query should be a standard URL set of key value pairs delimited by
 * '&'. For backwards compatibility the initial '/' on the path is not
 * required. The request object has the following API, (fully described
 * in the method code):
 *    {
 *       path: <the path string part>.
 *       query: <the query string part>,
 *       getPath(i): get part or all of the split path array,
 *       getQuery(k, i): get part or all of a query key array,
 *       getQueryLast(k, _default): get last element of a query key array.
 *    }
 *
 * @return object with request parameters.
 */


util.makeRequest = function (reqString) {
  var frag = util.parseFragment(reqString);
  var req = {
    // full path string
    path: frag.pathString,
    // full query string
    query: frag.queryString,

    /**
     * Get path or element in path.
     *
     * @param i optional path index.
     *
     * @return path or part of path if i provided.
     */
    getPath: function getPath(i) {
      return typeof i === 'undefined' ? frag.path : frag.path[i];
    },

    /**
     * Get query, values for a key, or value for a key index.
     *
     * @param k optional query key.
     * @param i optional query key index.
     *
     * @return query, values for a key, or value for a key index.
     */
    getQuery: function getQuery(k, i) {
      var rval;

      if (typeof k === 'undefined') {
        rval = frag.query;
      } else {
        rval = frag.query[k];

        if (rval && typeof i !== 'undefined') {
          rval = rval[i];
        }
      }

      return rval;
    },
    getQueryLast: function getQueryLast(k, _default) {
      var rval;
      var vals = req.getQuery(k);

      if (vals) {
        rval = vals[vals.length - 1];
      } else {
        rval = _default;
      }

      return rval;
    }
  };
  return req;
};
/**
 * Makes a URI out of a path, an object with query parameters, and a
 * fragment. Uses jQuery.param() internally for query string creation.
 * If the path is an array, it will be joined with '/'.
 *
 * @param path string path or array of strings.
 * @param query object with query parameters. (optional)
 * @param fragment fragment string. (optional)
 *
 * @return string object with request parameters.
 */


util.makeLink = function (path, query, fragment) {
  // join path parts if needed
  path = jQuery.isArray(path) ? path.join('/') : path;
  var qstr = jQuery.param(query || {});
  fragment = fragment || '';
  return path + (qstr.length > 0 ? '?' + qstr : '') + (fragment.length > 0 ? '#' + fragment : '');
};
/**
 * Follows a path of keys deep into an object hierarchy and set a value.
 * If a key does not exist or it's value is not an object, create an
 * object in it's place. This can be destructive to a object tree if
 * leaf nodes are given as non-final path keys.
 * Used to avoid exceptions from missing parts of the path.
 *
 * @param object the starting object.
 * @param keys an array of string keys.
 * @param value the value to set.
 */


util.setPath = function (object, keys, value) {
  // need to start at an object
  if (typeof object === 'object' && object !== null) {
    var i = 0;
    var len = keys.length;

    while (i < len) {
      var next = keys[i++];

      if (i == len) {
        // last
        object[next] = value;
      } else {
        // more
        var hasNext = next in object;

        if (!hasNext || hasNext && typeof object[next] !== 'object' || hasNext && object[next] === null) {
          object[next] = {};
        }

        object = object[next];
      }
    }
  }
};
/**
 * Follows a path of keys deep into an object hierarchy and return a value.
 * If a key does not exist, create an object in it's place.
 * Used to avoid exceptions from missing parts of the path.
 *
 * @param object the starting object.
 * @param keys an array of string keys.
 * @param _default value to return if path not found.
 *
 * @return the value at the path if found, else default if given, else
 *         undefined.
 */


util.getPath = function (object, keys, _default) {
  var i = 0;
  var len = keys.length;
  var hasNext = true;

  while (hasNext && i < len && typeof object === 'object' && object !== null) {
    var next = keys[i++];
    hasNext = next in object;

    if (hasNext) {
      object = object[next];
    }
  }

  return hasNext ? object : _default;
};
/**
 * Follow a path of keys deep into an object hierarchy and delete the
 * last one. If a key does not exist, do nothing.
 * Used to avoid exceptions from missing parts of the path.
 *
 * @param object the starting object.
 * @param keys an array of string keys.
 */


util.deletePath = function (object, keys) {
  // need to start at an object
  if (typeof object === 'object' && object !== null) {
    var i = 0;
    var len = keys.length;

    while (i < len) {
      var next = keys[i++];

      if (i == len) {
        // last
        delete object[next];
      } else {
        // more
        if (!(next in object) || typeof object[next] !== 'object' || object[next] === null) {
          break;
        }

        object = object[next];
      }
    }
  }
};
/**
 * Check if an object is empty.
 *
 * Taken from:
 * http://stackoverflow.com/questions/679915/how-do-i-test-for-an-empty-javascript-object-from-json/679937#679937
 *
 * @param object the object to check.
 */


util.isEmpty = function (obj) {
  for (var prop in obj) {
    if (obj.hasOwnProperty(prop)) {
      return false;
    }
  }

  return true;
};
/**
 * Format with simple printf-style interpolation.
 *
 * %%: literal '%'
 * %s,%o: convert next argument into a string.
 *
 * @param format the string to format.
 * @param ... arguments to interpolate into the format string.
 */


util.format = function (format) {
  var re = /%./g; // current match

  var match; // current part

  var part; // current arg index

  var argi = 0; // collected parts to recombine later

  var parts = []; // last index found

  var last = 0; // loop while matches remain

  while (match = re.exec(format)) {
    part = format.substring(last, re.lastIndex - 2); // don't add empty strings (ie, parts between %s%s)

    if (part.length > 0) {
      parts.push(part);
    }

    last = re.lastIndex; // switch on % code

    var code = match[0][1];

    switch (code) {
      case 's':
      case 'o':
        // check if enough arguments were given
        if (argi < arguments.length) {
          parts.push(arguments[argi++ + 1]);
        } else {
          parts.push('<?>');
        }

        break;
      // FIXME: do proper formating for numbers, etc
      //case 'f':
      //case 'd':

      case '%':
        parts.push('%');
        break;

      default:
        parts.push('<%' + code + '?>');
    }
  } // add trailing part of format string


  parts.push(format.substring(last));
  return parts.join('');
};
/**
 * Formats a number.
 *
 * http://snipplr.com/view/5945/javascript-numberformat--ported-from-php/
 */


util.formatNumber = function (number, decimals, dec_point, thousands_sep) {
  // http://kevin.vanzonneveld.net
  // +   original by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)
  // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
  // +     bugfix by: Michael White (http://crestidg.com)
  // +     bugfix by: Benjamin Lupton
  // +     bugfix by: Allan Jensen (http://www.winternet.no)
  // +    revised by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)
  // *     example 1: number_format(1234.5678, 2, '.', '');
  // *     returns 1: 1234.57
  var n = number,
      c = isNaN(decimals = Math.abs(decimals)) ? 2 : decimals;
  var d = dec_point === undefined ? ',' : dec_point;
  var t = thousands_sep === undefined ? '.' : thousands_sep,
      s = n < 0 ? '-' : '';
  var i = parseInt(n = Math.abs(+n || 0).toFixed(c), 10) + '';
  var j = i.length > 3 ? i.length % 3 : 0;
  return s + (j ? i.substr(0, j) + t : '') + i.substr(j).replace(/(\d{3})(?=\d)/g, '$1' + t) + (c ? d + Math.abs(n - i).toFixed(c).slice(2) : '');
};
/**
 * Formats a byte size.
 *
 * http://snipplr.com/view/5949/format-humanize-file-byte-size-presentation-in-javascript/
 */


util.formatSize = function (size) {
  if (size >= 1073741824) {
    size = util.formatNumber(size / 1073741824, 2, '.', '') + ' GiB';
  } else if (size >= 1048576) {
    size = util.formatNumber(size / 1048576, 2, '.', '') + ' MiB';
  } else if (size >= 1024) {
    size = util.formatNumber(size / 1024, 0) + ' KiB';
  } else {
    size = util.formatNumber(size, 0) + ' bytes';
  }

  return size;
};
/**
 * Converts an IPv4 or IPv6 string representation into bytes (in network order).
 *
 * @param ip the IPv4 or IPv6 address to convert.
 *
 * @return the 4-byte IPv6 or 16-byte IPv6 address or null if the address can't
 *         be parsed.
 */


util.bytesFromIP = function (ip) {
  if (ip.indexOf('.') !== -1) {
    return util.bytesFromIPv4(ip);
  }

  if (ip.indexOf(':') !== -1) {
    return util.bytesFromIPv6(ip);
  }

  return null;
};
/**
 * Converts an IPv4 string representation into bytes (in network order).
 *
 * @param ip the IPv4 address to convert.
 *
 * @return the 4-byte address or null if the address can't be parsed.
 */


util.bytesFromIPv4 = function (ip) {
  ip = ip.split('.');

  if (ip.length !== 4) {
    return null;
  }

  var b = util.createBuffer();

  for (var i = 0; i < ip.length; ++i) {
    var num = parseInt(ip[i], 10);

    if (isNaN(num)) {
      return null;
    }

    b.putByte(num);
  }

  return b.getBytes();
};
/**
 * Converts an IPv6 string representation into bytes (in network order).
 *
 * @param ip the IPv6 address to convert.
 *
 * @return the 16-byte address or null if the address can't be parsed.
 */


util.bytesFromIPv6 = function (ip) {
  var blanks = 0;
  ip = ip.split(':').filter(function (e) {
    if (e.length === 0) ++blanks;
    return true;
  });
  var zeros = (8 - ip.length + blanks) * 2;
  var b = util.createBuffer();

  for (var i = 0; i < 8; ++i) {
    if (!ip[i] || ip[i].length === 0) {
      b.fillWithByte(0, zeros);
      zeros = 0;
      continue;
    }

    var bytes = util.hexToBytes(ip[i]);

    if (bytes.length < 2) {
      b.putByte(0);
    }

    b.putBytes(bytes);
  }

  return b.getBytes();
};
/**
 * Converts 4-bytes into an IPv4 string representation or 16-bytes into
 * an IPv6 string representation. The bytes must be in network order.
 *
 * @param bytes the bytes to convert.
 *
 * @return the IPv4 or IPv6 string representation if 4 or 16 bytes,
 *         respectively, are given, otherwise null.
 */


util.bytesToIP = function (bytes) {
  if (bytes.length === 4) {
    return util.bytesToIPv4(bytes);
  }

  if (bytes.length === 16) {
    return util.bytesToIPv6(bytes);
  }

  return null;
};
/**
 * Converts 4-bytes into an IPv4 string representation. The bytes must be
 * in network order.
 *
 * @param bytes the bytes to convert.
 *
 * @return the IPv4 string representation or null for an invalid # of bytes.
 */


util.bytesToIPv4 = function (bytes) {
  if (bytes.length !== 4) {
    return null;
  }

  var ip = [];

  for (var i = 0; i < bytes.length; ++i) {
    ip.push(bytes.charCodeAt(i));
  }

  return ip.join('.');
};
/**
 * Converts 16-bytes into an IPv16 string representation. The bytes must be
 * in network order.
 *
 * @param bytes the bytes to convert.
 *
 * @return the IPv16 string representation or null for an invalid # of bytes.
 */


util.bytesToIPv6 = function (bytes) {
  if (bytes.length !== 16) {
    return null;
  }

  var ip = [];
  var zeroGroups = [];
  var zeroMaxGroup = 0;

  for (var i = 0; i < bytes.length; i += 2) {
    var hex = util.bytesToHex(bytes[i] + bytes[i + 1]); // canonicalize zero representation

    while (hex[0] === '0' && hex !== '0') {
      hex = hex.substr(1);
    }

    if (hex === '0') {
      var last = zeroGroups[zeroGroups.length - 1];
      var idx = ip.length;

      if (!last || idx !== last.end + 1) {
        zeroGroups.push({
          start: idx,
          end: idx
        });
      } else {
        last.end = idx;

        if (last.end - last.start > zeroGroups[zeroMaxGroup].end - zeroGroups[zeroMaxGroup].start) {
          zeroMaxGroup = zeroGroups.length - 1;
        }
      }
    }

    ip.push(hex);
  }

  if (zeroGroups.length > 0) {
    var group = zeroGroups[zeroMaxGroup]; // only shorten group of length > 0

    if (group.end - group.start > 0) {
      ip.splice(group.start, group.end - group.start + 1, '');

      if (group.start === 0) {
        ip.unshift('');
      }

      if (group.end === 7) {
        ip.push('');
      }
    }
  }

  return ip.join(':');
};
/**
 * Estimates the number of processes that can be run concurrently. If
 * creating Web Workers, keep in mind that the main JavaScript process needs
 * its own core.
 *
 * @param options the options to use:
 *          update true to force an update (not use the cached value).
 * @param callback(err, max) called once the operation completes.
 */


util.estimateCores = function (options, callback) {
  if (typeof options === 'function') {
    callback = options;
    options = {};
  }

  options = options || {};

  if ('cores' in util && !options.update) {
    return callback(null, util.cores);
  }

  if (typeof navigator !== 'undefined' && 'hardwareConcurrency' in navigator && navigator.hardwareConcurrency > 0) {
    util.cores = navigator.hardwareConcurrency;
    return callback(null, util.cores);
  }

  if (typeof Worker === 'undefined') {
    // workers not available
    util.cores = 1;
    return callback(null, util.cores);
  }

  if (typeof Blob === 'undefined') {
    // can't estimate, default to 2
    util.cores = 2;
    return callback(null, util.cores);
  } // create worker concurrency estimation code as blob


  var blobUrl = URL.createObjectURL(new Blob(['(', function () {
    self.addEventListener('message', function (e) {
      // run worker for 4 ms
      var st = Date.now();
      var et = st + 4;

      while (Date.now() < et);

      self.postMessage({
        st: st,
        et: et
      });
    });
  }.toString(), ')()'], {
    type: 'application/javascript'
  })); // take 5 samples using 16 workers

  sample([], 5, 16);

  function sample(max, samples, numWorkers) {
    if (samples === 0) {
      // get overlap average
      var avg = Math.floor(max.reduce(function (avg, x) {
        return avg + x;
      }, 0) / max.length);
      util.cores = Math.max(1, avg);
      URL.revokeObjectURL(blobUrl);
      return callback(null, util.cores);
    }

    map(numWorkers, function (err, results) {
      max.push(reduce(numWorkers, results));
      sample(max, samples - 1, numWorkers);
    });
  }

  function map(numWorkers, callback) {
    var workers = [];
    var results = [];

    for (var i = 0; i < numWorkers; ++i) {
      var worker = new Worker(blobUrl);
      worker.addEventListener('message', function (e) {
        results.push(e.data);

        if (results.length === numWorkers) {
          for (var i = 0; i < numWorkers; ++i) {
            workers[i].terminate();
          }

          callback(null, results);
        }
      });
      workers.push(worker);
    }

    for (var i = 0; i < numWorkers; ++i) {
      workers[i].postMessage(i);
    }
  }

  function reduce(numWorkers, results) {
    // find overlapping time windows
    var overlaps = [];

    for (var n = 0; n < numWorkers; ++n) {
      var r1 = results[n];
      var overlap = overlaps[n] = [];

      for (var i = 0; i < numWorkers; ++i) {
        if (n === i) {
          continue;
        }

        var r2 = results[i];

        if (r1.st > r2.st && r1.st < r2.et || r2.st > r1.st && r2.st < r1.et) {
          overlap.push(i);
        }
      }
    } // get maximum overlaps ... don't include overlapping worker itself
    // as the main JS process was also being scheduled during the work and
    // would have to be subtracted from the estimate anyway


    return overlaps.reduce(function (max, overlap) {
      return Math.max(max, overlap.length);
    }, 0);
  }
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5), __webpack_require__(91).setImmediate, __webpack_require__(8), __webpack_require__(0).Buffer))

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


var R = typeof Reflect === 'object' ? Reflect : null;
var ReflectApply = R && typeof R.apply === 'function' ? R.apply : function ReflectApply(target, receiver, args) {
  return Function.prototype.apply.call(target, receiver, args);
};
var ReflectOwnKeys;

if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys;
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
};

function EventEmitter() {
  EventEmitter.init.call(this);
}

module.exports = EventEmitter; // Backwards-compat with node 0.10.x

EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined; // By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.

var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function get() {
    return defaultMaxListeners;
  },
  set: function set(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }

    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function () {
  if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
}; // Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.


EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }

  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];

  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);

  var doError = type === 'error';
  var events = this._events;
  if (events !== undefined) doError = doError && events.error === undefined;else if (!doError) return false; // If there is no 'error' event listener then throw.

  if (doError) {
    var er;
    if (args.length > 0) er = args[0];

    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    } // At least give some kind of context to the user


    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];
  if (handler === undefined) return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);

    for (var i = 0; i < len; ++i) ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;
  checkListener(listener);
  events = target._events;

  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type, listener.listener ? listener.listener : listener); // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object

      events = target._events;
    }

    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] = prepend ? [listener, existing] : [existing, listener]; // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    } // Check for listener leak


    m = _getMaxListeners(target);

    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true; // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax

      var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener = function prependListener(type, listener) {
  return _addListener(this, type, listener, true);
};

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0) return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = {
    fired: false,
    wrapFn: undefined,
    target: target,
    type: type,
    listener: listener
  };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
  checkListener(listener);
  this.prependListener(type, _onceWrap(this, type, listener));
  return this;
}; // Emits a 'removeListener' event if and only if the listener was removed.


EventEmitter.prototype.removeListener = function removeListener(type, listener) {
  var list, events, position, i, originalListener;
  checkListener(listener);
  events = this._events;
  if (events === undefined) return this;
  list = events[type];
  if (list === undefined) return this;

  if (list === listener || list.listener === listener) {
    if (--this._eventsCount === 0) this._events = Object.create(null);else {
      delete events[type];
      if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
    }
  } else if (typeof list !== 'function') {
    position = -1;

    for (i = list.length - 1; i >= 0; i--) {
      if (list[i] === listener || list[i].listener === listener) {
        originalListener = list[i].listener;
        position = i;
        break;
      }
    }

    if (position < 0) return this;
    if (position === 0) list.shift();else {
      spliceOne(list, position);
    }
    if (list.length === 1) events[type] = list[0];
    if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);
  }

  return this;
};

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
  var listeners, events, i;
  events = this._events;
  if (events === undefined) return this; // not listening for removeListener, no need to emit

  if (events.removeListener === undefined) {
    if (arguments.length === 0) {
      this._events = Object.create(null);
      this._eventsCount = 0;
    } else if (events[type] !== undefined) {
      if (--this._eventsCount === 0) this._events = Object.create(null);else delete events[type];
    }

    return this;
  } // emit removeListener for all listeners on all events


  if (arguments.length === 0) {
    var keys = Object.keys(events);
    var key;

    for (i = 0; i < keys.length; ++i) {
      key = keys[i];
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }

    this.removeAllListeners('removeListener');
    this._events = Object.create(null);
    this._eventsCount = 0;
    return this;
  }

  listeners = events[type];

  if (typeof listeners === 'function') {
    this.removeListener(type, listeners);
  } else if (listeners !== undefined) {
    // LIFO order
    for (i = listeners.length - 1; i >= 0; i--) {
      this.removeListener(type, listeners[i]);
    }
  }

  return this;
};

function _listeners(target, type, unwrap) {
  var events = target._events;
  if (events === undefined) return [];
  var evlistener = events[type];
  if (evlistener === undefined) return [];
  if (typeof evlistener === 'function') return unwrap ? [evlistener.listener || evlistener] : [evlistener];
  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function (emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;

function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);

  for (var i = 0; i < n; ++i) copy[i] = arr[i];

  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++) list[index] = list[index + 1];

  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);

  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }

  return ret;
}

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.DAGNode = __webpack_require__(505);
exports.DAGLink = __webpack_require__(242);
/*
 * Functions to fulfil IPLD Format interface
 * https://github.com/ipld/interface-ipld-format
 */

exports.resolver = __webpack_require__(511);
exports.util = __webpack_require__(243);
exports.codec = exports.util.codec;
exports.defaultHashAlg = exports.util.defaultHashAlg;

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var objectAssign = __webpack_require__(475); // compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
// original notice:

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */


function compare(a, b) {
  if (a === b) {
    return 0;
  }

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) {
    return -1;
  }

  if (y < x) {
    return 1;
  }

  return 0;
}

function isBuffer(b) {
  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
    return global.Buffer.isBuffer(b);
  }

  return !!(b != null && b._isBuffer);
} // based on node assert, original notice:
// NB: The URL to the CommonJS spec is kept just for tradition.
//     node-assert has evolved a lot since then, both in API and behavior.
// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


var util = __webpack_require__(98);

var hasOwn = Object.prototype.hasOwnProperty;
var pSlice = Array.prototype.slice;

var functionsHaveNames = function () {
  return function foo() {}.name === 'foo';
}();

function pToString(obj) {
  return Object.prototype.toString.call(obj);
}

function isView(arrbuf) {
  if (isBuffer(arrbuf)) {
    return false;
  }

  if (typeof global.ArrayBuffer !== 'function') {
    return false;
  }

  if (typeof ArrayBuffer.isView === 'function') {
    return ArrayBuffer.isView(arrbuf);
  }

  if (!arrbuf) {
    return false;
  }

  if (arrbuf instanceof DataView) {
    return true;
  }

  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
    return true;
  }

  return false;
} // 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.


var assert = module.exports = ok; // 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

var regex = /\s*function\s+([^\(\s]*)\s*/; // based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js

function getName(func) {
  if (!util.isFunction(func)) {
    return;
  }

  if (functionsHaveNames) {
    return func.name;
  }

  var str = func.toString();
  var match = str.match(regex);
  return match && match[1];
}

assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;

  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }

  var stackStartFunction = options.stackStartFunction || fail;

  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  } else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();

    if (err.stack) {
      var out = err.stack; // try to strip useless frames

      var fn_name = getName(stackStartFunction);
      var idx = out.indexOf('\n' + fn_name);

      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }

      this.stack = out;
    }
  }
}; // assert.AssertionError instanceof Error


util.inherits(assert.AssertionError, Error);

function truncate(s, n) {
  if (typeof s === 'string') {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}

function inspect(something) {
  if (functionsHaveNames || !util.isFunction(something)) {
    return util.inspect(something);
  }

  var rawname = getName(something);
  var name = rawname ? ': ' + rawname : '';
  return '[Function' + name + ']';
}

function getMessage(self) {
  return truncate(inspect(self.actual), 128) + ' ' + self.operator + ' ' + truncate(inspect(self.expected), 128);
} // At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.
// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.


function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
} // EXTENSION! allows for well behaved errors defined elsewhere.


assert.fail = fail; // 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', assert.ok);
}

assert.ok = ok; // 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
}; // 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);


assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
}; // 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);


assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
  }
};

function _deepEqual(actual, expected, strict, memos) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;
  } else if (isBuffer(actual) && isBuffer(expected)) {
    return compare(actual, expected) === 0; // 7.2. If the expected value is a Date object, the actual value is
    // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime(); // 7.3 If the expected value is a RegExp object, the actual value is
    // equivalent if it is also a RegExp object with the same source and
    // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source && actual.global === expected.global && actual.multiline === expected.multiline && actual.lastIndex === expected.lastIndex && actual.ignoreCase === expected.ignoreCase; // 7.4. Other pairs that do not both pass typeof value == 'object',
    // equivalence is determined by ==.
  } else if ((actual === null || typeof actual !== 'object') && (expected === null || typeof expected !== 'object')) {
    return strict ? actual === expected : actual == expected; // If both values are instances of typed arrays, wrap their underlying
    // ArrayBuffers in a Buffer each to increase performance
    // This optimization requires the arrays to have the same type as checked by
    // Object.prototype.toString (aka pToString). Never perform binary
    // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
    // bit patterns are not identical.
  } else if (isView(actual) && isView(expected) && pToString(actual) === pToString(expected) && !(actual instanceof Float32Array || actual instanceof Float64Array)) {
    return compare(new Uint8Array(actual.buffer), new Uint8Array(expected.buffer)) === 0; // 7.5 For all other Object pairs, including Array objects, equivalence is
    // determined by having the same number of owned properties (as verified
    // with Object.prototype.hasOwnProperty.call), the same set of keys
    // (although not necessarily the same order), equivalent values for every
    // corresponding key, and an identical 'prototype' property. Note: this
    // accounts for both named and indexed properties on Arrays.
  } else if (isBuffer(actual) !== isBuffer(expected)) {
    return false;
  } else {
    memos = memos || {
      actual: [],
      expected: []
    };
    var actualIndex = memos.actual.indexOf(actual);

    if (actualIndex !== -1) {
      if (actualIndex === memos.expected.indexOf(expected)) {
        return true;
      }
    }

    memos.actual.push(actual);
    memos.expected.push(expected);
    return objEquiv(actual, expected, strict, memos);
  }
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b, strict, actualVisitedObjects) {
  if (a === null || a === undefined || b === null || b === undefined) return false; // if one is a primitive, the other must be same

  if (util.isPrimitive(a) || util.isPrimitive(b)) return a === b;
  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b)) return false;
  var aIsArgs = isArguments(a);
  var bIsArgs = isArguments(b);
  if (aIsArgs && !bIsArgs || !aIsArgs && bIsArgs) return false;

  if (aIsArgs) {
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b, strict);
  }

  var ka = objectKeys(a);
  var kb = objectKeys(b);
  var key, i; // having the same number of owned properties (keys incorporates
  // hasOwnProperty)

  if (ka.length !== kb.length) return false; //the same set of keys (although not necessarily the same order),

  ka.sort();
  kb.sort(); //~~~cheap key test

  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] !== kb[i]) return false;
  } //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test


  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects)) return false;
  }

  return true;
} // 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);


assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

assert.notDeepStrictEqual = notDeepStrictEqual;

function notDeepStrictEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
  }
} // 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);


assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
}; // 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);


assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  }

  try {
    if (actual instanceof expected) {
      return true;
    }
  } catch (e) {// Ignore.  The instanceof check doesn't work for arrow functions.
  }

  if (Error.isPrototypeOf(expected)) {
    return false;
  }

  return expected.call({}, actual) === true;
}

function _tryBlock(block) {
  var error;

  try {
    block();
  } catch (e) {
    error = e;
  }

  return error;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (typeof block !== 'function') {
    throw new TypeError('"block" argument must be a function');
  }

  if (typeof expected === 'string') {
    message = expected;
    expected = null;
  }

  actual = _tryBlock(block);
  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') + (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }

  var userProvidedMessage = typeof message === 'string';
  var isUnwantedException = !shouldThrow && util.isError(actual);
  var isUnexpectedException = !shouldThrow && actual && !expected;

  if (isUnwantedException && userProvidedMessage && expectedException(actual, expected) || isUnexpectedException) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }

  if (shouldThrow && actual && expected && !expectedException(actual, expected) || !shouldThrow && actual) {
    throw actual;
  }
} // 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);


assert.throws = function (block,
/*optional*/
error,
/*optional*/
message) {
  _throws(true, block, error, message);
}; // EXTENSION! This is annoying to write outside this module.


assert.doesNotThrow = function (block,
/*optional*/
error,
/*optional*/
message) {
  _throws(false, block, error, message);
};

assert.ifError = function (err) {
  if (err) throw err;
}; // Expose a strict only variant of assert


function strict(value, message) {
  if (!value) fail(value, true, message, '==', strict);
}

assert.strict = objectAssign(strict, assert, {
  equal: assert.strictEqual,
  deepEqual: assert.deepStrictEqual,
  notEqual: assert.notStrictEqual,
  notDeepEqual: assert.notDeepStrictEqual
});
assert.strict.strict = assert.strict;

var objectKeys = Object.keys || function (obj) {
  var keys = [];

  for (var key in obj) {
    if (hasOwn.call(obj, key)) keys.push(key);
  }

  return keys;
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(8)))

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const Key = __webpack_require__(244);

const MemoryDatastore = __webpack_require__(545);

const utils = __webpack_require__(245);

const Errors = __webpack_require__(246);

exports.Key = Key;
exports.MemoryDatastore = MemoryDatastore;
exports.utils = utils;
exports.Errors = Errors;

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {/**
 * Implementation of the multicodec specification.
 *
 * @module multicodec
 * @example
 * const multicodec = require('multicodec')
 *
 * const prefixedProtobuf = multicodec.addPrefix('protobuf', protobufBuffer)
 * // prefixedProtobuf 0x50...
 *
 */


const varint = __webpack_require__(19);

const intTable = __webpack_require__(389);

const codecNameToCodeVarint = __webpack_require__(390);

const util = __webpack_require__(197);

exports = module.exports;
/**
 * Prefix a buffer with a multicodec-packed.
 *
 * @param {string|number} multicodecStrOrCode
 * @param {Buffer} data
 * @returns {Buffer}
 */

exports.addPrefix = (multicodecStrOrCode, data) => {
  let prefix;

  if (Buffer.isBuffer(multicodecStrOrCode)) {
    prefix = util.varintBufferEncode(multicodecStrOrCode);
  } else {
    if (codecNameToCodeVarint[multicodecStrOrCode]) {
      prefix = codecNameToCodeVarint[multicodecStrOrCode];
    } else {
      throw new Error('multicodec not recognized');
    }
  }

  return Buffer.concat([prefix, data]);
};
/**
 * Decapsulate the multicodec-packed prefix from the data.
 *
 * @param {Buffer} data
 * @returns {Buffer}
 */


exports.rmPrefix = data => {
  varint.decode(data);
  return data.slice(varint.decode.bytes);
};
/**
 * Get the codec of the prefixed data.
 * @param {Buffer} prefixedData
 * @returns {string}
 */


exports.getCodec = prefixedData => {
  const code = varint.decode(prefixedData);
  const codecName = intTable.get(code);

  if (codecName === undefined) {
    throw new Error("Code ".concat(code, " not found"));
  }

  return codecName;
};
/**
 * Get the name of the codec.
 * @param {number} codec
 * @returns {string}
 */


exports.getName = codec => {
  return intTable.get(codec);
};
/**
 * Get the code of the codec
 * @param {string} name
 * @returns {number}
 */


exports.getNumber = name => {
  const code = codecNameToCodeVarint[name];

  if (code === undefined) {
    throw new Error('Codec `' + name + '` not found');
  }

  return util.varintBufferDecode(code)[0];
};
/**
 * Get the code of the prefixed data.
 * @param {Buffer} prefixedData
 * @returns {number}
 */


exports.getCode = prefixedData => {
  return varint.decode(prefixedData);
};
/**
 * Get the code as varint of a codec name.
 * @param {string} codecName
 * @returns {Buffer}
 */


exports.getCodeVarint = codecName => {
  const code = codecNameToCodeVarint[codecName];

  if (code === undefined) {
    throw new Error('Codec `' + codecName + '` not found');
  }

  return code;
};
/**
 * Get the varint of a code.
 * @param {Number} code
 * @returns {Array.<number>}
 */


exports.getVarint = code => {
  return varint.encode(code);
}; // Make the constants top-level constants


const constants = __webpack_require__(391);

Object.assign(exports, constants); // Human friendly names for printing, e.g. in error messages

exports.print = __webpack_require__(392);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {/**
 * Multihash implementation in JavaScript.
 *
 * @module multihash
 */


const bs58 = __webpack_require__(39);

const cs = __webpack_require__(379);

exports.names = cs.names;
exports.codes = cs.codes;
exports.defaultLengths = cs.defaultLengths;

const varint = __webpack_require__(19);
/**
 * Convert the given multihash to a hex encoded string.
 *
 * @param {Buffer} hash
 * @returns {string}
 */


exports.toHexString = function toHexString(hash) {
  if (!Buffer.isBuffer(hash)) {
    throw new Error('must be passed a buffer');
  }

  return hash.toString('hex');
};
/**
 * Convert the given hex encoded string to a multihash.
 *
 * @param {string} hash
 * @returns {Buffer}
 */


exports.fromHexString = function fromHexString(hash) {
  return Buffer.from(hash, 'hex');
};
/**
 * Convert the given multihash to a base58 encoded string.
 *
 * @param {Buffer} hash
 * @returns {string}
 */


exports.toB58String = function toB58String(hash) {
  if (!Buffer.isBuffer(hash)) {
    throw new Error('must be passed a buffer');
  }

  return bs58.encode(hash);
};
/**
 * Convert the given base58 encoded string to a multihash.
 *
 * @param {string|Buffer} hash
 * @returns {Buffer}
 */


exports.fromB58String = function fromB58String(hash) {
  let encoded = hash;

  if (Buffer.isBuffer(hash)) {
    encoded = hash.toString();
  }

  return Buffer.from(bs58.decode(encoded));
};
/**
 * Decode a hash from the given multihash.
 *
 * @param {Buffer} buf
 * @returns {{code: number, name: string, length: number, digest: Buffer}} result
 */


exports.decode = function decode(buf) {
  if (!Buffer.isBuffer(buf)) {
    throw new Error('multihash must be a Buffer');
  }

  if (buf.length < 3) {
    throw new Error('multihash too short. must be > 3 bytes.');
  }

  const code = varint.decode(buf);

  if (!exports.isValidCode(code)) {
    throw new Error("multihash unknown function code: 0x".concat(code.toString(16)));
  }

  buf = buf.slice(varint.decode.bytes);
  const len = varint.decode(buf);

  if (len < 1) {
    throw new Error("multihash invalid length: 0x".concat(len.toString(16)));
  }

  buf = buf.slice(varint.decode.bytes);

  if (buf.length !== len) {
    throw new Error("multihash length inconsistent: 0x".concat(buf.toString('hex')));
  }

  return {
    code: code,
    name: cs.codes[code],
    length: len,
    digest: buf
  };
};
/**
 *  Encode a hash digest along with the specified function code.
 *
 * > **Note:** the length is derived from the length of the digest itself.
 *
 * @param {Buffer} digest
 * @param {string|number} code
 * @param {number} [length]
 * @returns {Buffer}
 */


exports.encode = function encode(digest, code, length) {
  if (!digest || code === undefined) {
    throw new Error('multihash encode requires at least two args: digest, code');
  } // ensure it's a hashfunction code.


  const hashfn = exports.coerceCode(code);

  if (!Buffer.isBuffer(digest)) {
    throw new Error('digest should be a Buffer');
  }

  if (length == null) {
    length = digest.length;
  }

  if (length && digest.length !== length) {
    throw new Error('digest length should be equal to specified length.');
  }

  return Buffer.concat([Buffer.from(varint.encode(hashfn)), Buffer.from(varint.encode(length)), digest]);
};
/**
 * Converts a hash function name into the matching code.
 * If passed a number it will return the number if it's a valid code.
 * @param {string|number} name
 * @returns {number}
 */


exports.coerceCode = function coerceCode(name) {
  let code = name;

  if (typeof name === 'string') {
    if (cs.names[name] === undefined) {
      throw new Error("Unrecognized hash function named: ".concat(name));
    }

    code = cs.names[name];
  }

  if (typeof code !== 'number') {
    throw new Error("Hash function code should be a number. Got: ".concat(code));
  }

  if (cs.codes[code] === undefined && !exports.isAppCode(code)) {
    throw new Error("Unrecognized function code: ".concat(code));
  }

  return code;
};
/**
 * Checks wether a code is part of the app range
 *
 * @param {number} code
 * @returns {boolean}
 */


exports.isAppCode = function appCode(code) {
  return code > 0 && code < 0x10;
};
/**
 * Checks whether a multihash code is valid.
 *
 * @param {number} code
 * @returns {boolean}
 */


exports.isValidCode = function validCode(code) {
  if (exports.isAppCode(code)) {
    return true;
  }

  if (cs.codes[code]) {
    return true;
  }

  return false;
};
/**
 * Check if the given buffer is a valid multihash. Throws an error if it is not valid.
 *
 * @param {Buffer} multihash
 * @returns {undefined}
 * @throws {Error}
 */


function validate(multihash) {
  exports.decode(multihash); // throws if bad.
}

exports.validate = validate;
/**
 * Returns a prefix from a valid multihash. Throws an error if it is not valid.
 *
 * @param {Buffer} multihash
 * @returns {undefined}
 * @throws {Error}
 */

exports.prefix = function prefix(multihash) {
  validate(multihash);
  return multihash.slice(0, 2);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const PeerId = __webpack_require__(9);

const {
  ensureMultiaddr
} = __webpack_require__(228);

const MultiaddrSet = __webpack_require__(485);

const assert = __webpack_require__(13); // Peer represents a peer on the IPFS network


class PeerInfo {
  constructor(peerId) {
    assert(peerId, 'Missing peerId. Use Peer.create() to create one');
    this.id = peerId;
    this.multiaddrs = new MultiaddrSet();
    /**
     * Stores protocols this peers supports
     *
     * @type {Set<string>}
     */

    this.protocols = new Set();
    this._connectedMultiaddr = undefined;
  } // only stores the current multiaddr being used


  connect(ma) {
    ma = ensureMultiaddr(ma);

    if (!this.multiaddrs.has(ma) && ma.toString() !== "/ipfs/".concat(this.id.toB58String())) {
      throw new Error('can\'t be connected to missing multiaddr from set');
    }

    this._connectedMultiaddr = ma;
  }

  disconnect() {
    this._connectedMultiaddr = undefined;
  }

  isConnected() {
    return this._connectedMultiaddr;
  }

}

PeerInfo.create = async peerId => {
  if (peerId == null) {
    peerId = await PeerId.create();
  } else if (!PeerId.isPeerId(peerId)) {
    peerId = await PeerId.createFromJSON(peerId);
  }

  return new PeerInfo(peerId);
};

PeerInfo.isPeerInfo = peerInfo => {
  return Boolean(typeof peerInfo === 'object' && peerInfo.id && peerInfo.multiaddrs);
};

module.exports = PeerInfo;

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const debug = __webpack_require__(1);

const multihashing = __webpack_require__(22);

const mh = __webpack_require__(16);

const {
  Key
} = __webpack_require__(14);

const base32 = __webpack_require__(302);

const distance = __webpack_require__(190);

const pMap = __webpack_require__(170);

const {
  Record
} = __webpack_require__(68);

const PeerId = __webpack_require__(9);

const errcode = __webpack_require__(2);
/**
 * Creates a DHT ID by hashing a given buffer.
 *
 * @param {Buffer} buf
 * @returns {Promise<Buffer>}
 */


exports.convertBuffer = buf => {
  return multihashing.digest(buf, 'sha2-256');
};
/**
 * Creates a DHT ID by hashing a Peer ID
 *
 * @param {PeerId} peer
 * @returns {Promise<Buffer>}
 */


exports.convertPeerId = peer => {
  return multihashing.digest(peer.id, 'sha2-256');
};
/**
 * Convert a buffer to their SHA2-256 hash.
 *
 * @param {Buffer} buf
 * @returns {Key}
 */


exports.bufferToKey = buf => {
  return new Key('/' + exports.encodeBase32(buf), false);
};
/**
 * Generate the key for a public key.
 *
 * @param {PeerId} peer
 * @returns {Buffer}
 */


exports.keyForPublicKey = peer => {
  return Buffer.concat([Buffer.from('/pk/'), peer.id]);
};

exports.isPublicKeyKey = key => {
  return key.slice(0, 4).toString() === '/pk/';
};

exports.fromPublicKeyKey = key => {
  return new PeerId(key.slice(4));
};
/**
 * Get the current time as timestamp.
 *
 * @returns {number}
 */


exports.now = () => {
  return Date.now();
};
/**
 * Encode a given buffer into a base32 string.
 * @param {Buffer} buf
 * @returns {string}
 */


exports.encodeBase32 = buf => {
  const enc = new base32.Encoder();
  return enc.write(buf).finalize();
};
/**
 * Decode a given base32 string into a buffer.
 * @param {string} raw
 * @returns {Buffer}
 */


exports.decodeBase32 = raw => {
  const dec = new base32.Decoder();
  return Buffer.from(dec.write(raw).finalize());
};
/**
 * Sort peers by distance to the given `target`.
 *
 * @param {Array<PeerId>} peers
 * @param {Buffer} target
 * @returns {Array<PeerId>}
 */


exports.sortClosestPeers = async (peers, target) => {
  const distances = await pMap(peers, async peer => {
    const id = await exports.convertPeerId(peer);
    return {
      peer: peer,
      distance: distance(id, target)
    };
  });
  return distances.sort(exports.xorCompare).map(d => d.peer);
};
/**
 * Compare function to sort an array of elements which have a distance property which is the xor distance to a given element.
 *
 * @param {Object} a
 * @param {Object} b
 * @returns {number}
 */


exports.xorCompare = (a, b) => {
  return distance.compare(a.distance, b.distance);
};
/**
 * Computes how many results to collect on each disjoint path, rounding up.
 * This ensures that we look for at least one result per path.
 *
 * @param {number} resultsWanted
 * @param {number} numPaths - total number of paths
 * @returns {number}
 */


exports.pathSize = (resultsWanted, numPaths) => {
  return Math.ceil(resultsWanted / numPaths);
};
/**
 * Create a new put record, encodes and signs it if enabled.
 *
 * @param {Buffer} key
 * @param {Buffer} value
 * @returns {Buffer}
 */


exports.createPutRecord = (key, value) => {
  const timeReceived = new Date();
  const rec = new Record(key, value, timeReceived);
  return rec.serialize();
};
/**
 * Creates a logger for the given subsystem
 *
 * @param {PeerId} [id]
 * @param {string} [subsystem]
 * @returns {debug}
 *
 * @private
 */


exports.logger = (id, subsystem) => {
  const name = ['libp2p', 'dht'];

  if (subsystem) {
    name.push(subsystem);
  }

  if (id) {
    name.push("".concat(id.toB58String().slice(0, 8)));
  } // Add a formatter for converting to a base58 string


  debug.formatters.b = v => {
    return mh.toB58String(v);
  };

  const logger = debug(name.join(':'));
  logger.error = debug(name.concat(['error']).join(':'));
  return logger;
};

exports.TimeoutError = class TimeoutError extends Error {
  get code() {
    return 'ETIMEDOUT';
  }

};
/**
 * Creates an async function that calls the given `asyncFn` and Errors
 * if it does not resolve within `time` ms
 *
 * @param {Function} [asyncFn]
 * @param {Number} [time]
 * @returns {Function}
 *
 * @private
 */

exports.withTimeout = (asyncFn, time) => {
  return async (...args) => {
    // eslint-disable-line require-await
    return Promise.race([asyncFn(...args), new Promise((resolve, reject) => {
      setTimeout(() => {
        reject(errcode(new Error('Async function did not complete before timeout'), 'ETIMEDOUT'));
      }, time);
    })]);
  };
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  encode: __webpack_require__(380),
  decode: __webpack_require__(381),
  encodingLength: __webpack_require__(382)
};

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const codec = __webpack_require__(479);

const protocols = __webpack_require__(140);

const varint = __webpack_require__(19);

const bs58 = __webpack_require__(39);

const CID = __webpack_require__(3);

const withIs = __webpack_require__(21);
/**
 * Creates a [multiaddr](https://github.com/multiformats/multiaddr) from
 * a Buffer, String or another Multiaddr instance
 * public key.
 * @class Multiaddr
 * @param {(String|Buffer|Multiaddr)} addr - If String or Buffer, needs to adhere
 * to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)
 * @example
 * Multiaddr('/ip4/127.0.0.1/tcp/4001')
 * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>
 */


const Multiaddr = withIs.proto(function (addr) {
  if (!(this instanceof Multiaddr)) {
    return new Multiaddr(addr);
  } // default


  if (addr == null) {
    addr = '';
  }

  if (addr instanceof Buffer) {
    /**
     * @type {Buffer} - The raw bytes representing this multiaddress
     */
    this.buffer = codec.fromBuffer(addr);
  } else if (typeof addr === 'string' || addr instanceof String) {
    if (addr.length > 0 && addr.charAt(0) !== '/') {
      throw new Error("multiaddr \"".concat(addr, "\" must start with a \"/\""));
    }

    this.buffer = codec.fromString(addr);
  } else if (addr.buffer && addr.protos && addr.protoCodes) {
    // Multiaddr
    this.buffer = codec.fromBuffer(addr.buffer); // validate + copy buffer
  } else {
    throw new Error('addr must be a string, Buffer, or another Multiaddr');
  }
}, {
  className: 'Multiaddr',
  symbolName: '@multiformats/js-multiaddr/multiaddr'
});
/**
 * Returns Multiaddr as a String
 *
 * @returns {String}
 * @example
 * Multiaddr('/ip4/127.0.0.1/tcp/4001').toString()
 * // '/ip4/127.0.0.1/tcp/4001'
 */

Multiaddr.prototype.toString = function toString() {
  return codec.bufferToString(this.buffer);
};
/**
 * Returns Multiaddr as a JSON encoded object
 *
 * @returns {String}
 * @example
 * JSON.stringify(Multiaddr('/ip4/127.0.0.1/tcp/4001'))
 * // '/ip4/127.0.0.1/tcp/4001'
 */


Multiaddr.prototype.toJSON = Multiaddr.prototype.toString;
/**
 * Returns Multiaddr as a convinient options object to be used with net.createConnection
 *
 * @returns {{family: String, host: String, transport: String, port: Number}}
 * @example
 * Multiaddr('/ip4/127.0.0.1/tcp/4001').toOptions()
 * // { family: 'ipv4', host: '127.0.0.1', transport: 'tcp', port: 4001 }
 */

Multiaddr.prototype.toOptions = function toOptions() {
  const opts = {};
  const parsed = this.toString().split('/');
  opts.family = parsed[1] === 'ip4' ? 'ipv4' : 'ipv6';
  opts.host = parsed[2];
  opts.transport = parsed[3];
  opts.port = parseInt(parsed[4]);
  return opts;
};
/**
 * Returns Multiaddr as a human-readable string
 *
 * @returns {String}
 * @example
 * Multiaddr('/ip4/127.0.0.1/tcp/4001').inspect()
 * // '<Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>'
 */


Multiaddr.prototype.inspect = function inspect() {
  return '<Multiaddr ' + this.buffer.toString('hex') + ' - ' + codec.bufferToString(this.buffer) + '>';
};
/**
 * Returns the protocols the Multiaddr is defined with, as an array of objects, in
 * left-to-right order. Each object contains the protocol code, protocol name,
 * and the size of its address space in bits.
 * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)
 *
 * @returns {Array.<Object>} protocols - All the protocols the address is composed of
 * @returns {Number} protocols[].code
 * @returns {Number} protocols[].size
 * @returns {String} protocols[].name
 * @example
 * Multiaddr('/ip4/127.0.0.1/tcp/4001').protos()
 * // [ { code: 4, size: 32, name: 'ip4' },
 * //   { code: 6, size: 16, name: 'tcp' } ]
 */


Multiaddr.prototype.protos = function protos() {
  return this.protoCodes().map(code => Object.assign({}, protocols(code)));
};
/**
 * Returns the codes of the protocols in left-to-right order.
 * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)
 *
 * @returns {Array.<Number>} protocol codes
 * @example
 * Multiaddr('/ip4/127.0.0.1/tcp/4001').protoCodes()
 * // [ 4, 6 ]
 */


Multiaddr.prototype.protoCodes = function protoCodes() {
  const codes = [];
  const buf = this.buffer;
  let i = 0;

  while (i < buf.length) {
    const code = varint.decode(buf, i);
    const n = varint.decode.bytes;
    const p = protocols(code);
    const size = codec.sizeForAddr(p, buf.slice(i + n));
    i += size + n;
    codes.push(code);
  }

  return codes;
};
/**
 * Returns the names of the protocols in left-to-right order.
 * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)
 *
 * @return {Array.<String>} protocol names
 * @example
 * Multiaddr('/ip4/127.0.0.1/tcp/4001').protoNames()
 * // [ 'ip4', 'tcp' ]
 */


Multiaddr.prototype.protoNames = function protoNames() {
  return this.protos().map(proto => proto.name);
};
/**
 * Returns a tuple of parts
 *
 * @return {Array.<Array>} tuples
 * @return {Number} tuples[].0 code of protocol
 * @return {Buffer} tuples[].1 contents of address
 * @example
 * Multiaddr("/ip4/127.0.0.1/tcp/4001").tuples()
 * // [ [ 4, <Buffer 7f 00 00 01> ], [ 6, <Buffer 0f a1> ] ]
 */


Multiaddr.prototype.tuples = function tuples() {
  return codec.bufferToTuples(this.buffer);
};
/**
 * Returns a tuple of string/number parts
 *
 * @return {Array.<Array>} tuples
 * @return {Number} tuples[].0 code of protocol
 * @return {(String|Number)} tuples[].1 contents of address
 * @example
 * Multiaddr("/ip4/127.0.0.1/tcp/4001").stringTuples()
 * // [ [ 4, '127.0.0.1' ], [ 6, 4001 ] ]
 */


Multiaddr.prototype.stringTuples = function stringTuples() {
  const t = codec.bufferToTuples(this.buffer);
  return codec.tuplesToStringTuples(t);
};
/**
 * Encapsulates a Multiaddr in another Multiaddr
 *
 * @param {Multiaddr} addr - Multiaddr to add into this Multiaddr
 * @return {Multiaddr}
 * @example
 * const mh1 = Multiaddr('/ip4/8.8.8.8/tcp/1080')
 * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>
 *
 * const mh2 = Multiaddr('/ip4/127.0.0.1/tcp/4001')
 * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>
 *
 * const mh3 = mh1.encapsulate(mh2)
 * // <Multiaddr 0408080808060438047f000001060fa1 - /ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001>
 *
 * mh3.toString()
 * // '/ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001'
 */


Multiaddr.prototype.encapsulate = function encapsulate(addr) {
  addr = Multiaddr(addr);
  return Multiaddr(this.toString() + addr.toString());
};
/**
 * Decapsulates a Multiaddr from another Multiaddr
 *
 * @param {Multiaddr} addr - Multiaddr to remove from this Multiaddr
 * @return {Multiaddr}
 * @example
 * const mh1 = Multiaddr('/ip4/8.8.8.8/tcp/1080')
 * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>
 *
 * const mh2 = Multiaddr('/ip4/127.0.0.1/tcp/4001')
 * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>
 *
 * const mh3 = mh1.encapsulate(mh2)
 * // <Multiaddr 0408080808060438047f000001060fa1 - /ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001>
 *
 * mh3.decapsulate(mh2).toString()
 * // '/ip4/8.8.8.8/tcp/1080'
 */


Multiaddr.prototype.decapsulate = function decapsulate(addr) {
  addr = addr.toString();
  const s = this.toString();
  const i = s.lastIndexOf(addr);

  if (i < 0) {
    throw new Error('Address ' + this + ' does not contain subaddress: ' + addr);
  }

  return Multiaddr(s.slice(0, i));
};
/**
 * A more reliable version of `decapsulate` if you are targeting a
 * specific code, such as 421 (the `p2p` protocol code). The last index of the code
 * will be removed from the `Multiaddr`, and a new instance will be returned.
 * If the code is not present, the original `Multiaddr` is returned.
 *
 * @param {Number} code The code of the protocol to decapsulate from this Multiaddr
 * @return {Multiaddr}
 * @example
 * const addr = Multiaddr('/ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC')
 * // <Multiaddr 0400... - /ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC>
 *
 * addr.decapsulateCode(421).toString()
 * // '/ip4/0.0.0.0/tcp/8080'
 *
 * Multiaddr('/ip4/127.0.0.1/tcp/8080').decapsulateCode(421).toString()
 * // '/ip4/127.0.0.1/tcp/8080'
 */


Multiaddr.prototype.decapsulateCode = function decapsulateCode(code) {
  const tuples = this.tuples();

  for (let i = tuples.length - 1; i >= 0; i--) {
    if (tuples[i][0] === code) {
      return Multiaddr(codec.tuplesToBuffer(tuples.slice(0, i)));
    }
  }

  return this;
};
/**
 * Extract the peerId if the multiaddr contains one
 *
 * @return {String|null} peerId - The id of the peer or null if invalid or missing from the ma
 * @example
 * const mh1 = Multiaddr('/ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string')
 * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string>
 *
 * // should return QmValidBase58string or null if the id is missing or invalid
 * const peerId = mh1.getPeerId()
 */


Multiaddr.prototype.getPeerId = function getPeerId() {
  let b58str = null;

  try {
    const tuples = this.stringTuples().filter(tuple => {
      if (tuple[0] === protocols.names.ipfs.code) {
        return true;
      }
    }); // Get the last id

    b58str = tuples.pop()[1]; // Get multihash, unwrap from CID if needed

    b58str = bs58.encode(new CID(b58str).multihash);
  } catch (e) {
    b58str = null;
  }

  return b58str;
};
/**
 * Extract the path if the multiaddr contains one
 *
 * @return {String|null} path - The path of the multiaddr, or null if no path protocol is present
 * @example
 * const mh1 = Multiaddr('/ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock')
 * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock>
 *
 * // should return utf8 string or null if the id is missing or invalid
 * const path = mh1.getPath()
 */


Multiaddr.prototype.getPath = function getPath() {
  let path = null;

  try {
    path = this.stringTuples().filter(tuple => {
      const proto = protocols(tuple[0]);

      if (proto.path) {
        return true;
      }
    })[0][1];
  } catch (e) {
    path = null;
  }

  return path;
};
/**
 * Checks if two Multiaddrs are the same
 *
 * @param {Multiaddr} addr
 * @return {Bool}
 * @example
 * const mh1 = Multiaddr('/ip4/8.8.8.8/tcp/1080')
 * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>
 *
 * const mh2 = Multiaddr('/ip4/127.0.0.1/tcp/4001')
 * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>
 *
 * mh1.equals(mh1)
 * // true
 *
 * mh1.equals(mh2)
 * // false
 */


Multiaddr.prototype.equals = function equals(addr) {
  return this.buffer.equals(addr.buffer);
};
/**
 * Gets a Multiaddrs node-friendly address object. Note that protocol information
 * is left out: in Node (and most network systems) the protocol is unknowable
 * given only the address.
 *
 * Has to be a ThinWaist Address, otherwise throws error
 *
 * @returns {{family: String, address: String, port: Number}}
 * @throws {Error} Throws error if Multiaddr is not a Thin Waist address
 * @example
 * Multiaddr('/ip4/127.0.0.1/tcp/4001').nodeAddress()
 * // {family: 'IPv4', address: '127.0.0.1', port: '4001'}
 */


Multiaddr.prototype.nodeAddress = function nodeAddress() {
  const codes = this.protoCodes();
  const names = this.protoNames();
  const parts = this.toString().split('/').slice(1);

  if (parts.length < 4) {
    throw new Error('multiaddr must have a valid format: "/{ip4, ip6, dns4, dns6}/{address}/{tcp, udp}/{port}".');
  } else if (codes[0] !== 4 && codes[0] !== 41 && codes[0] !== 54 && codes[0] !== 55) {
    throw new Error("no protocol with name: \"'".concat(names[0], "'\". Must have a valid family name: \"{ip4, ip6, dns4, dns6}\"."));
  } else if (parts[2] !== 'tcp' && parts[2] !== 'udp') {
    throw new Error("no protocol with name: \"'".concat(names[1], "'\". Must have a valid transport protocol: \"{tcp, udp}\"."));
  }

  return {
    family: codes[0] === 41 || codes[0] === 55 ? 6 : 4,
    address: parts[1],
    // ip addr
    port: parseInt(parts[3]) // tcp or udp port

  };
};
/**
 * Creates a Multiaddr from a node-friendly address object
 *
 * @param {{family: String, address: String, port: Number}} addr
 * @param {String} transport
 * @returns {Multiaddr} multiaddr
 * @throws {Error} Throws error if addr is not truthy
 * @throws {Error} Throws error if transport is not truthy
 * @example
 * Multiaddr.fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')
 * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>
 */


Multiaddr.fromNodeAddress = function fromNodeAddress(addr, transport) {
  if (!addr) throw new Error('requires node address object');
  if (!transport) throw new Error('requires transport protocol');
  const ip = addr.family === 'IPv6' ? 'ip6' : 'ip4';
  return Multiaddr('/' + [ip, addr.address, transport, addr.port].join('/'));
}; // TODO find a better example, not sure about it's good enough

/**
 * Returns if a Multiaddr is a Thin Waist address or not.
 *
 * Thin Waist is if a Multiaddr adheres to the standard combination of:
 *
 * `{IPv4, IPv6}/{TCP, UDP}`
 *
 * @param {Multiaddr} [addr] - Defaults to using `this` instance
 * @returns {Boolean} isThinWaistAddress
 * @example
 * const mh1 = Multiaddr('/ip4/127.0.0.1/tcp/4001')
 * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>
 * const mh2 = Multiaddr('/ip4/192.168.2.1/tcp/5001')
 * // <Multiaddr 04c0a80201061389 - /ip4/192.168.2.1/tcp/5001>
 * const mh3 = mh1.encapsulate(mh2)
 * // <Multiaddr 047f000001060fa104c0a80201061389 - /ip4/127.0.0.1/tcp/4001/ip4/192.168.2.1/tcp/5001>
 * mh1.isThinWaistAddress()
 * // true
 * mh2.isThinWaistAddress()
 * // true
 * mh3.isThinWaistAddress()
 * // false
 */


Multiaddr.prototype.isThinWaistAddress = function isThinWaistAddress(addr) {
  const protos = (addr || this).protos();

  if (protos.length !== 2) {
    return false;
  }

  if (protos[0].code !== 4 && protos[0].code !== 41) {
    return false;
  }

  if (protos[1].code !== 6 && protos[1].code !== 273) {
    return false;
  }

  return true;
};
/**
 * Object containing table, names and codes of all supported protocols.
 * To get the protocol values from a Multiaddr, you can use
 * [`.protos()`](#multiaddrprotos),
 * [`.protoCodes()`](#multiaddrprotocodes) or
 * [`.protoNames()`](#multiaddrprotonames)
 *
 * @instance
 * @returns {{table: Array, names: Object, codes: Object}}
 *
 */


Multiaddr.protocols = protocols;
/**
 * Returns if something is a Multiaddr that is a name
 *
 * @param {Multiaddr} addr
 * @return {Bool} isName
 */

Multiaddr.isName = function isName(addr) {
  if (!Multiaddr.isMultiaddr(addr)) {
    return false;
  } // if a part of the multiaddr is resolvable, then return true


  return addr.protos().some(proto => proto.resolvable);
};
/**
 * Returns an array of multiaddrs, by resolving the multiaddr that is a name
 *
 * @async
 * @param {Multiaddr} addr
 * @return {Multiaddr[]}
 */


Multiaddr.resolve = function resolve(addr) {
  if (!Multiaddr.isMultiaddr(addr) || !Multiaddr.isName(addr)) {
    return Promise.reject(Error('not a valid name'));
  }
  /*
   * Needs more consideration from spec design:
   *   - what to return
   *   - how to achieve it in the browser?
   */


  return Promise.reject(new Error('not implemented yet'));
};

exports = module.exports = Multiaddr;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function withIs(Class, {
  className,
  symbolName
}) {
  const symbol = Symbol.for(symbolName);
  const ClassIsWrapper = {
    // The code below assigns the class wrapper to an object to trick
    // JavaScript engines to show the name of the extended class when
    // logging an instances.
    // We are assigning an anonymous class (class wrapper) to the object
    // with key `className` to keep the correct name.
    // If this is not supported it falls back to logging `ClassIsWrapper`.
    [className]: class extends Class {
      constructor(...args) {
        super(...args);
        Object.defineProperty(this, symbol, {
          value: true
        });
      }

      get [Symbol.toStringTag]() {
        return className;
      }

    }
  }[className];

  ClassIsWrapper["is".concat(className)] = obj => !!(obj && obj[symbol]);

  return ClassIsWrapper;
}

function withIsProto(Class, {
  className,
  symbolName,
  withoutNew
}) {
  const symbol = Symbol.for(symbolName);
  /* eslint-disable object-shorthand */

  const ClassIsWrapper = {
    [className]: function (...args) {
      if (withoutNew && !(this instanceof ClassIsWrapper)) {
        return new ClassIsWrapper(...args);
      }

      const _this = Class.call(this, ...args) || this;

      if (_this && !_this[symbol]) {
        Object.defineProperty(_this, symbol, {
          value: true
        });
      }

      return _this;
    }
  }[className];
  /* eslint-enable object-shorthand */

  ClassIsWrapper.prototype = Object.create(Class.prototype);
  ClassIsWrapper.prototype.constructor = ClassIsWrapper;
  Object.defineProperty(ClassIsWrapper.prototype, Symbol.toStringTag, {
    get() {
      return className;
    }

  });

  ClassIsWrapper["is".concat(className)] = obj => !!(obj && obj[symbol]);

  return ClassIsWrapper;
}

module.exports = withIs;
module.exports.proto = withIsProto;

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const {
  Buffer
} = __webpack_require__(0);

const errcode = __webpack_require__(2);

const multihash = __webpack_require__(16);

const crypto = __webpack_require__(412);
/**
 * Hash the given `buf` using the algorithm specified by `alg`.
 * @param {Buffer} buf - The value to hash.
 * @param {number|string} alg - The algorithm to use eg 'sha1'
 * @param {number} [length] - Optionally trim the result to this length.
 * @returns {Promise<Buffer>}
 */


async function Multihashing(buf, alg, length) {
  const digest = await Multihashing.digest(buf, alg, length);
  return multihash.encode(digest, alg, length);
}
/**
 * The `buffer` module for easy use in the browser.
 *
 * @type {Buffer}
 */


Multihashing.Buffer = Buffer; // for browser things

/**
 * Expose multihash itself, to avoid silly double requires.
 */

Multihashing.multihash = multihash;
/**
 * @param {Buffer} buf - The value to hash.
 * @param {number|string} alg - The algorithm to use eg 'sha1'
 * @param {number} [length] - Optionally trim the result to this length.
 * @returns {Promise<Buffer>}
 */

Multihashing.digest = async (buf, alg, length) => {
  const hash = Multihashing.createHash(alg);
  const digest = await hash(buf);
  return length ? digest.slice(0, length) : digest;
};
/**
 * Creates a function that hashes with the given algorithm
 *
 * @param {string|number} alg - The algorithm to use eg 'sha1'
 *
 * @returns {function} - The hash function corresponding to `alg`
 */


Multihashing.createHash = function (alg) {
  if (!alg) {
    throw errcode(new Error('hash algorithm must be specified'), 'ERR_HASH_ALGORITHM_NOT_SPECIFIED');
  }

  alg = multihash.coerceCode(alg);

  if (!Multihashing.functions[alg]) {
    throw errcode(new Error("multihash function '".concat(alg, "' not yet supported")), 'ERR_HASH_ALGORITHM_NOT_SUPPORTED');
  }

  return Multihashing.functions[alg];
};
/**
 * Mapping of multihash codes to their hashing functions.
 * @type {Object}
 */


Multihashing.functions = {
  // identity
  0x00: crypto.identity,
  // sha1
  0x11: crypto.sha1,
  // sha2-256
  0x12: crypto.sha2256,
  // sha2-512
  0x13: crypto.sha2512,
  // sha3-512
  0x14: crypto.sha3512,
  // sha3-384
  0x15: crypto.sha3384,
  // sha3-256
  0x16: crypto.sha3256,
  // sha3-224
  0x17: crypto.sha3224,
  // shake-128
  0x18: crypto.shake128,
  // shake-256
  0x19: crypto.shake256,
  // keccak-224
  0x1A: crypto.keccak224,
  // keccak-256
  0x1B: crypto.keccak256,
  // keccak-384
  0x1C: crypto.keccak384,
  // keccak-512
  0x1D: crypto.keccak512,
  // murmur3-128
  0x22: crypto.murmur3128,
  // murmur3-32
  0x23: crypto.murmur332,
  // dbl-sha2-256
  0x56: crypto.dblSha2256
}; // add blake functions

crypto.addBlake(Multihashing.functions);

Multihashing.validate = async (buf, hash) => {
  const newHash = await Multihashing(buf, multihash.decode(hash).name);
  return Buffer.compare(hash, newHash) === 0;
};

module.exports = Multihashing;

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const rawPipe = (...fns) => {
  let res;

  while (fns.length) {
    res = fns.shift()(res);
  }

  return res;
};

const isIterable = obj => obj && (typeof obj[Symbol.asyncIterator] === 'function' || typeof obj[Symbol.iterator] === 'function' || typeof obj.next === 'function' // Probably, right?
);

const isDuplex = obj => obj && typeof obj.sink === 'function' && isIterable(obj.source);

const duplexPipelineFn = duplex => source => {
  duplex.sink(source); // TODO: error on sink side is unhandled rejection - this is the same as pull streams

  return duplex.source;
};

const pipe = (...fns) => {
  // Duplex at start: wrap in function and return duplex source
  if (isDuplex(fns[0])) {
    const duplex = fns[0];

    fns[0] = () => duplex.source; // Iterable at start: wrap in function

  } else if (isIterable(fns[0])) {
    const source = fns[0];

    fns[0] = () => source;
  }

  if (fns.length > 1) {
    // Duplex at end: use duplex sink
    if (isDuplex(fns[fns.length - 1])) {
      fns[fns.length - 1] = fns[fns.length - 1].sink;
    }
  }

  if (fns.length > 2) {
    // Duplex in the middle, consume source with duplex sink and return duplex source
    for (let i = 1; i < fns.length - 1; i++) {
      if (isDuplex(fns[i])) {
        fns[i] = duplexPipelineFn(fns[i]);
      }
    }
  }

  return rawPipe(...fns);
};

module.exports = pipe;
module.exports.pipe = pipe;
module.exports.rawPipe = rawPipe;
module.exports.isIterable = isIterable;
module.exports.isDuplex = isDuplex;

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var schema = __webpack_require__(394);

var compile = __webpack_require__(398);

var flatten = function flatten(values) {
  if (!values) return null;
  var result = {};
  Object.keys(values).forEach(function (k) {
    result[k] = values[k].value;
  });
  return result;
};

module.exports = function (proto, opts) {
  if (!opts) opts = {};
  if (!proto) throw new Error('Pass in a .proto string or a protobuf-schema parsed object');
  var sch = typeof proto === 'object' && !Buffer.isBuffer(proto) ? proto : schema.parse(proto); // to not make toString,toJSON enumarable we make a fire-and-forget prototype

  var Messages = function Messages() {
    var self = this;
    compile(sch, opts.encodings || {}).forEach(function (m) {
      self[m.name] = flatten(m.values) || m;
    });
  };

  Messages.prototype.toString = function () {
    return schema.stringify(sch);
  };

  Messages.prototype.toJSON = function () {
    return sch;
  };

  return new Messages();
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const protons = __webpack_require__(24);

const pb = protons(__webpack_require__(504));
const unixfsData = pb.Data;

const errcode = __webpack_require__(2);

const types = ['raw', 'directory', 'file', 'metadata', 'symlink', 'hamt-sharded-directory'];
const dirTypes = ['directory', 'hamt-sharded-directory'];
const DEFAULT_FILE_MODE = parseInt('0644', 8);
const DEFAULT_DIRECTORY_MODE = parseInt('0755', 8);

function parseArgs(args) {
  if (args.length === 0) {
    return {
      type: 'file'
    };
  }

  if (args.length === 2) {
    // support old-style constructor
    return {
      type: args[0],
      data: args[1]
    };
  }

  if (typeof args[0] === 'string' || args[0] instanceof String) {
    return {
      type: args[0]
    };
  }

  return args[0];
}

function parseMtime(mtime) {
  if (mtime == null) {
    return undefined;
  } // { secs, nsecs }


  if (Object.prototype.hasOwnProperty.call(mtime, 'secs')) {
    mtime = {
      secs: mtime.secs,
      nsecs: mtime.nsecs
    };
  } // UnixFS TimeSpec


  if (Object.prototype.hasOwnProperty.call(mtime, 'Seconds')) {
    mtime = {
      secs: mtime.Seconds,
      nsecs: mtime.FractionalNanoseconds
    };
  } // process.hrtime()


  if (Array.isArray(mtime)) {
    mtime = {
      secs: mtime[0],
      nsecs: mtime[1]
    };
  } // Javascript Date


  if (mtime instanceof Date) {
    const ms = mtime.getTime();
    const secs = Math.floor(ms / 1000);
    mtime = {
      secs: secs,
      nsecs: (ms - secs * 1000) * 1000
    };
  }
  /*
  TODO: https://github.com/ipfs/aegir/issues/487
   // process.hrtime.bigint()
  if (typeof mtime === 'bigint') {
    const secs = mtime / BigInt(1e9)
    const nsecs = mtime - (secs * BigInt(1e9))
     mtime = {
      secs: parseInt(secs),
      nsecs: parseInt(nsecs)
    }
  }
  */


  if (!Object.prototype.hasOwnProperty.call(mtime, 'secs')) {
    return undefined;
  }

  if (mtime.nsecs < 0 || mtime.nsecs > 999999999) {
    throw errcode(new Error('mtime-nsecs must be within the range [0,999999999]'), 'ERR_INVALID_MTIME_NSECS');
  }

  return mtime;
}

function parseMode(mode) {
  if (mode == null) {
    return undefined;
  }

  if (typeof mode === 'string' || mode instanceof String) {
    mode = parseInt(mode, 8);
  }

  return mode & 0xFFF;
}

class Data {
  // decode from protobuf https://github.com/ipfs/specs/blob/master/UNIXFS.md
  static unmarshal(marshaled) {
    const decoded = unixfsData.decode(marshaled);
    return new Data({
      type: types[decoded.Type],
      data: decoded.hasData() ? decoded.Data : undefined,
      blockSizes: decoded.blocksizes,
      mode: decoded.hasMode() ? decoded.mode : undefined,
      mtime: decoded.hasMtime() ? decoded.mtime : undefined
    });
  }

  constructor(...args) {
    const {
      type,
      data,
      blockSizes,
      hashType,
      fanout,
      mtime,
      mode
    } = parseArgs(args);

    if (!types.includes(type)) {
      throw errcode(new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE');
    }

    this.type = type;
    this.data = data;
    this.hashType = hashType;
    this.fanout = fanout;
    this.blockSizes = blockSizes || [];
    this._originalMode = mode;
    const parsedMode = parseMode(mode);

    if (parsedMode !== undefined) {
      this.mode = parsedMode;
    }

    if (this.mode === undefined && type === 'file') {
      this.mode = DEFAULT_FILE_MODE;
    }

    if (this.mode === undefined && this.isDirectory()) {
      this.mode = DEFAULT_DIRECTORY_MODE;
    }

    const parsedMtime = parseMtime(mtime);

    if (parsedMtime) {
      this.mtime = parsedMtime;
    }
  }

  isDirectory() {
    return dirTypes.includes(this.type);
  }

  addBlockSize(size) {
    this.blockSizes.push(size);
  }

  removeBlockSize(index) {
    this.blockSizes.splice(index, 1);
  } // data.length + blockSizes


  fileSize() {
    if (this.isDirectory()) {
      // dirs don't have file size
      return undefined;
    }

    let sum = 0;
    this.blockSizes.forEach(size => {
      sum += size;
    });

    if (this.data) {
      sum += this.data.length;
    }

    return sum;
  } // encode to protobuf


  marshal() {
    let type;

    switch (this.type) {
      case 'raw':
        type = unixfsData.DataType.Raw;
        break;

      case 'directory':
        type = unixfsData.DataType.Directory;
        break;

      case 'file':
        type = unixfsData.DataType.File;
        break;

      case 'metadata':
        type = unixfsData.DataType.Metadata;
        break;

      case 'symlink':
        type = unixfsData.DataType.Symlink;
        break;

      case 'hamt-sharded-directory':
        type = unixfsData.DataType.HAMTShard;
        break;

      default:
        throw errcode(new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE');
    }

    let data = this.data;

    if (!this.data || !this.data.length) {
      data = undefined;
    }

    let blockSizes = this.blockSizes;

    if (!this.blockSizes || !this.blockSizes.length) {
      blockSizes = undefined;
    }

    let mode;

    if (this.mode != null) {
      mode = this._originalMode & 0xFFFFF000 | parseMode(this.mode);

      if (mode === DEFAULT_FILE_MODE && this.type === 'file') {
        mode = undefined;
      }

      if (mode === DEFAULT_DIRECTORY_MODE && this.isDirectory()) {
        mode = undefined;
      }
    }

    let mtime;

    if (this.mtime != null) {
      const parsed = parseMtime(this.mtime);

      if (parsed) {
        mtime = {
          Seconds: parsed.secs,
          FractionalNanoseconds: parsed.nsecs
        };

        if (mtime.FractionalNanoseconds === 0) {
          delete mtime.FractionalNanoseconds;
        }
      }
    }

    return unixfsData.encode({
      Type: type,
      Data: data,
      filesize: this.fileSize(),
      blocksizes: blockSizes,
      hashType: this.hashType,
      fanout: this.fanout,
      mode,
      mtime
    });
  }

}

module.exports = Data;

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.encode = __webpack_require__(728);
exports.decode = __webpack_require__(729);
exports.varintEncode = __webpack_require__(314);
exports.varintDecode = __webpack_require__(315);
exports.int32BEEncode = __webpack_require__(730);
exports.int32BEDecode = __webpack_require__(731);

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const isOptionObject = __webpack_require__(194);

const {
  hasOwnProperty
} = Object.prototype;
const {
  propertyIsEnumerable
} = Object;

const defineProperty = (obj, name, value) => Object.defineProperty(obj, name, {
  value,
  writable: true,
  enumerable: true,
  configurable: true
});

const globalThis = void 0;
const defaultMergeOpts = {
  concatArrays: false,
  ignoreUndefined: false
};

const getEnumerableOwnPropertyKeys = value => {
  const keys = [];

  for (const key in value) {
    if (hasOwnProperty.call(value, key)) {
      keys.push(key);
    }
  }
  /* istanbul ignore else  */


  if (Object.getOwnPropertySymbols) {
    const symbols = Object.getOwnPropertySymbols(value);

    for (const symbol of symbols) {
      if (propertyIsEnumerable.call(value, symbol)) {
        keys.push(symbol);
      }
    }
  }

  return keys;
};

function clone(value) {
  if (Array.isArray(value)) {
    return cloneArray(value);
  }

  if (isOptionObject(value)) {
    return cloneOptionObject(value);
  }

  return value;
}

function cloneArray(array) {
  const result = array.slice(0, 0);
  getEnumerableOwnPropertyKeys(array).forEach(key => {
    defineProperty(result, key, clone(array[key]));
  });
  return result;
}

function cloneOptionObject(obj) {
  const result = Object.getPrototypeOf(obj) === null ? Object.create(null) : {};
  getEnumerableOwnPropertyKeys(obj).forEach(key => {
    defineProperty(result, key, clone(obj[key]));
  });
  return result;
}
/**
 * @param {*} merged already cloned
 * @param {*} source something to merge
 * @param {string[]} keys keys to merge
 * @param {Object} config Config Object
 * @returns {*} cloned Object
 */


const mergeKeys = (merged, source, keys, config) => {
  keys.forEach(key => {
    if (typeof source[key] === 'undefined' && config.ignoreUndefined) {
      return;
    } // Do not recurse into prototype chain of merged


    if (key in merged && merged[key] !== Object.getPrototypeOf(merged)) {
      defineProperty(merged, key, merge(merged[key], source[key], config));
    } else {
      defineProperty(merged, key, clone(source[key]));
    }
  });
  return merged;
};
/**
 * @param {*} merged already cloned
 * @param {*} source something to merge
 * @param {Object} config Config Object
 * @returns {*} cloned Object
 *
 * see [Array.prototype.concat ( ...arguments )](http://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.concat)
 */


const concatArrays = (merged, source, config) => {
  let result = merged.slice(0, 0);
  let resultIndex = 0;
  [merged, source].forEach(array => {
    const indices = []; // `result.concat(array)` with cloning

    for (let k = 0; k < array.length; k++) {
      if (!hasOwnProperty.call(array, k)) {
        continue;
      }

      indices.push(String(k));

      if (array === merged) {
        // Already cloned
        defineProperty(result, resultIndex++, array[k]);
      } else {
        defineProperty(result, resultIndex++, clone(array[k]));
      }
    } // Merge non-index keys


    result = mergeKeys(result, array, getEnumerableOwnPropertyKeys(array).filter(key => !indices.includes(key)), config);
  });
  return result;
};
/**
 * @param {*} merged already cloned
 * @param {*} source something to merge
 * @param {Object} config Config Object
 * @returns {*} cloned Object
 */


function merge(merged, source, config) {
  if (config.concatArrays && Array.isArray(merged) && Array.isArray(source)) {
    return concatArrays(merged, source, config);
  }

  if (!isOptionObject(source) || !isOptionObject(merged)) {
    return clone(source);
  }

  return mergeKeys(merged, source, getEnumerableOwnPropertyKeys(source), config);
}

module.exports = function (...options) {
  const config = merge(clone(defaultMergeOpts), this !== globalThis && this || {}, defaultMergeOpts);
  let merged = {
    _: {}
  };

  for (const option of options) {
    if (option === undefined) {
      continue;
    }

    if (!isOptionObject(option)) {
      throw new TypeError('`' + option + '` is not an Option Object');
    }

    merged = merge(merged, {
      _: option
    }, config);
  }

  return merged._;
};

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const hmac = __webpack_require__(227);

const aes = __webpack_require__(487);

const keys = __webpack_require__(198);

exports.aes = aes;
exports.hmac = hmac;
exports.keys = keys;
exports.randomBytes = __webpack_require__(130);
exports.pbkdf2 = __webpack_require__(500);

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const isIpfs = __webpack_require__(55);

const CID = __webpack_require__(3);

const TimeoutController = __webpack_require__(257);

const anySignal = __webpack_require__(153);

const parseDuration = __webpack_require__(154);

const {
  TimeoutError
} = __webpack_require__(79);

const ERR_BAD_PATH = 'ERR_BAD_PATH';
exports.OFFLINE_ERROR = 'This command must be run in online mode. Try running \'ipfs daemon\' first.';
/**
 * Break an ipfs-path down into it's hash and an array of links.
 *
 * examples:
 *  b58Hash -> { hash: 'b58Hash', links: [] }
 *  b58Hash/mercury/venus -> { hash: 'b58Hash', links: ['mercury', 'venus']}
 *  /ipfs/b58Hash/links/by/name -> { hash: 'b58Hash', links: ['links', 'by', 'name'] }
 *
 * @param  {String} ipfsPath An ipfs-path
 * @return {Object}            { hash: base58 string, links: [string], ?err: Error }
 * @throws on an invalid @param ipfsPath
 */

function parseIpfsPath(ipfsPath) {
  ipfsPath = ipfsPath.replace(/^\/ipfs\//, '');
  const matched = ipfsPath.match(/([^/]+(?:\/[^/]+)*)\/?$/);

  if (!matched) {
    throw new Error('invalid ipfs ref path');
  }

  const [hash, ...links] = matched[1].split('/'); // check that a CID can be constructed with the hash

  if (isIpfs.cid(hash)) {
    return {
      hash,
      links
    };
  } else {
    throw new Error('invalid ipfs ref path');
  }
}
/**
 * Returns a well-formed ipfs Path.
 * The returned path will always be prefixed with /ipfs/ or /ipns/.
 *
 * @param  {String} pathStr An ipfs-path, or ipns-path or a cid
 * @return {String} ipfs-path or ipns-path
 * @throws on an invalid @param ipfsPath
 */


const normalizePath = pathStr => {
  if (isIpfs.cid(pathStr)) {
    return "/ipfs/".concat(new CID(pathStr));
  } else if (isIpfs.path(pathStr)) {
    return pathStr;
  } else {
    throw Object.assign(new Error("invalid path: ".concat(pathStr)), {
      code: ERR_BAD_PATH
    });
  }
}; // TODO: do we need both normalizePath and normalizeCidPath?


const normalizeCidPath = path => {
  if (Buffer.isBuffer(path)) {
    return new CID(path).toString();
  }

  if (CID.isCID(path)) {
    return path.toString();
  }

  if (path.indexOf('/ipfs/') === 0) {
    path = path.substring('/ipfs/'.length);
  }

  if (path.charAt(path.length - 1) === '/') {
    path = path.substring(0, path.length - 1);
  }

  return path;
};
/**
 * Resolve various styles of an ipfs-path to the hash of the target node.
 * Follows links in the path.
 *
 * Accepts formats:
 *  - <base58 string>
 *  - <base58 string>/link/to/venus
 *  - /ipfs/<base58 string>/link/to/pluto
 *  - multihash Buffer
 *  - Arrays of the above
 *
 * @param {Dag} dag The IPFS dag api
 * @param {Array<CID|string>} ipfsPaths A single or collection of ipfs-paths
 * @param {Object} [options] Optional options passed directly to dag.resolve
 * @return {Promise<Array<CID>>}
 */


const resolvePath = async function resolvePath(dag, ipfsPaths, options) {
  options = options || {};

  if (!Array.isArray(ipfsPaths)) {
    ipfsPaths = [ipfsPaths];
  }

  const cids = [];

  for (const path of ipfsPaths) {
    if (isIpfs.cid(path)) {
      cids.push(new CID(path));
      continue;
    }

    const {
      hash,
      links
    } = parseIpfsPath(path);

    if (!links.length) {
      cids.push(new CID(hash));
      continue;
    }

    let cid = new CID(hash);

    try {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;

      var _iteratorError;

      try {
        for (var _iterator = _asyncIterator(dag.resolve(path, options)), _step, _value; _step = await _iterator.next(), _iteratorNormalCompletion = _step.done, _value = await _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
          const {
            value
          } = _value;

          if (CID.isCID(value)) {
            cid = value;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            await _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    } catch (err) {
      // TODO: add error codes to IPLD
      if (err.message.startsWith('Object has no property')) {
        const linkName = err.message.replace('Object has no property \'', '').slice(0, -1);
        err.message = "no link named \"".concat(linkName, "\" under ").concat(cid);
        err.code = 'ERR_NO_LINK';
      }

      throw err;
    }

    cids.push(cid);
  }

  return cids;
};

const mapFile = (file, options) => {
  options = options || {};
  const output = {
    cid: file.cid,
    path: file.path,
    name: file.name,
    depth: file.path.split('/').length,
    size: 0,
    type: 'dir'
  };

  if (file.unixfs) {
    if (file.unixfs.type === 'file') {
      output.size = file.unixfs.fileSize();
      output.type = 'file';

      if (options.includeContent) {
        output.content = file.content();
      }
    }

    output.mode = file.unixfs.mode;
    output.mtime = file.unixfs.mtime;
  }

  return output;
};

function withTimeoutOption(fn, optionsArgIndex) {
  return (...args) => {
    const options = args[optionsArgIndex == null ? args.length - 1 : optionsArgIndex];
    if (!options || !options.timeout) return fn(...args);
    const timeout = typeof options.timeout === 'string' ? parseDuration(options.timeout) : options.timeout;
    const controller = new TimeoutController(timeout);
    options.signal = anySignal([options.signal, controller.signal]);
    const fnRes = fn(...args);
    const timeoutPromise = new Promise((resolve, reject) => {
      controller.signal.addEventListener('abort', () => reject(new TimeoutError()));
    });

    if (fnRes[Symbol.asyncIterator]) {
      return _wrapAsyncGenerator(function* () {
        const it = fnRes[Symbol.asyncIterator]();

        try {
          while (true) {
            const {
              value,
              done
            } = yield _awaitAsyncGenerator(Promise.race([it.next(), timeoutPromise]));
            if (done) break;
            controller.clear();
            yield value;
            controller.reset();
          }
        } catch (err) {
          if (controller.signal.aborted) throw new TimeoutError();
          throw err;
        } finally {
          controller.clear();
          if (it.return) it.return();
        }
      })();
    }

    return (async () => {
      try {
        const res = await Promise.race([fnRes, timeoutPromise]);
        return res;
      } catch (err) {
        if (controller.signal.aborted) throw new TimeoutError();
        throw err;
      } finally {
        controller.clear();
      }
    })();
  };
}

exports.normalizePath = normalizePath;
exports.normalizeCidPath = normalizeCidPath;
exports.parseIpfsPath = parseIpfsPath;
exports.resolvePath = resolvePath;
exports.mapFile = mapFile;
exports.withTimeoutOption = withTimeoutOption;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const symbol = Symbol.for('BufferList');

function BufferList(buf) {
  if (!(this instanceof BufferList)) {
    return new BufferList(buf);
  }

  BufferList._init.call(this, buf);
}

BufferList._init = function _init(buf) {
  Object.defineProperty(this, symbol, {
    value: true
  });
  this._bufs = [];
  this.length = 0;

  if (buf) {
    this.append(buf);
  }
};

BufferList.prototype._new = function _new(buf) {
  return new BufferList(buf);
};

BufferList.prototype._offset = function _offset(offset) {
  if (offset === 0) {
    return [0, 0];
  }

  let tot = 0;

  for (let i = 0; i < this._bufs.length; i++) {
    const _t = tot + this._bufs[i].length;

    if (offset < _t || i === this._bufs.length - 1) {
      return [i, offset - tot];
    }

    tot = _t;
  }
};

BufferList.prototype._reverseOffset = function (blOffset) {
  const bufferId = blOffset[0];
  let offset = blOffset[1];

  for (let i = 0; i < bufferId; i++) {
    offset += this._bufs[i].length;
  }

  return offset;
};

BufferList.prototype.get = function get(index) {
  if (index > this.length || index < 0) {
    return undefined;
  }

  const offset = this._offset(index);

  return this._bufs[offset[0]][offset[1]];
};

BufferList.prototype.slice = function slice(start, end) {
  if (typeof start === 'number' && start < 0) {
    start += this.length;
  }

  if (typeof end === 'number' && end < 0) {
    end += this.length;
  }

  return this.copy(null, 0, start, end);
};

BufferList.prototype.copy = function copy(dst, dstStart, srcStart, srcEnd) {
  if (typeof srcStart !== 'number' || srcStart < 0) {
    srcStart = 0;
  }

  if (typeof srcEnd !== 'number' || srcEnd > this.length) {
    srcEnd = this.length;
  }

  if (srcStart >= this.length) {
    return dst || Buffer.alloc(0);
  }

  if (srcEnd <= 0) {
    return dst || Buffer.alloc(0);
  }

  const copy = !!dst;

  const off = this._offset(srcStart);

  const len = srcEnd - srcStart;
  let bytes = len;
  let bufoff = copy && dstStart || 0;
  let start = off[1]; // copy/slice everything

  if (srcStart === 0 && srcEnd === this.length) {
    if (!copy) {
      // slice, but full concat if multiple buffers
      return this._bufs.length === 1 ? this._bufs[0] : Buffer.concat(this._bufs, this.length);
    } // copy, need to copy individual buffers


    for (let i = 0; i < this._bufs.length; i++) {
      this._bufs[i].copy(dst, bufoff);

      bufoff += this._bufs[i].length;
    }

    return dst;
  } // easy, cheap case where it's a subset of one of the buffers


  if (bytes <= this._bufs[off[0]].length - start) {
    return copy ? this._bufs[off[0]].copy(dst, dstStart, start, start + bytes) : this._bufs[off[0]].slice(start, start + bytes);
  }

  if (!copy) {
    // a slice, we need something to copy in to
    dst = Buffer.allocUnsafe(len);
  }

  for (let i = off[0]; i < this._bufs.length; i++) {
    const l = this._bufs[i].length - start;

    if (bytes > l) {
      this._bufs[i].copy(dst, bufoff, start);
    } else {
      this._bufs[i].copy(dst, bufoff, start, start + bytes);

      break;
    }

    bufoff += l;
    bytes -= l;

    if (start) {
      start = 0;
    }
  }

  return dst;
};

BufferList.prototype.shallowSlice = function shallowSlice(start, end) {
  start = start || 0;
  end = typeof end !== 'number' ? this.length : end;

  if (start < 0) {
    start += this.length;
  }

  if (end < 0) {
    end += this.length;
  }

  if (start === end) {
    return this._new();
  }

  const startOffset = this._offset(start);

  const endOffset = this._offset(end);

  const buffers = this._bufs.slice(startOffset[0], endOffset[0] + 1);

  if (endOffset[1] === 0) {
    buffers.pop();
  } else {
    buffers[buffers.length - 1] = buffers[buffers.length - 1].slice(0, endOffset[1]);
  }

  if (startOffset[1] !== 0) {
    buffers[0] = buffers[0].slice(startOffset[1]);
  }

  return this._new(buffers);
};

BufferList.prototype.toString = function toString(encoding, start, end) {
  return this.slice(start, end).toString(encoding);
};

BufferList.prototype.consume = function consume(bytes) {
  while (this._bufs.length) {
    if (bytes >= this._bufs[0].length) {
      bytes -= this._bufs[0].length;
      this.length -= this._bufs[0].length;

      this._bufs.shift();
    } else {
      this._bufs[0] = this._bufs[0].slice(bytes);
      this.length -= bytes;
      break;
    }
  }

  return this;
};

BufferList.prototype.duplicate = function duplicate() {
  const copy = this._new();

  for (let i = 0; i < this._bufs.length; i++) {
    copy.append(this._bufs[i]);
  }

  return copy;
};

BufferList.prototype.append = function append(buf) {
  if (buf == null) {
    return this;
  }

  if (buf.buffer) {
    // append a view of the underlying ArrayBuffer
    this._appendBuffer(Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength));
  } else if (Array.isArray(buf)) {
    for (let i = 0; i < buf.length; i++) {
      this.append(buf[i]);
    }
  } else if (this._isBufferList(buf)) {
    // unwrap argument into individual BufferLists
    for (let i = 0; i < buf._bufs.length; i++) {
      this.append(buf._bufs[i]);
    }
  } else {
    // coerce number arguments to strings, since Buffer(number) does
    // uninitialized memory allocation
    if (typeof buf === 'number') {
      buf = buf.toString();
    }

    this._appendBuffer(Buffer.from(buf));
  }

  return this;
};

BufferList.prototype._appendBuffer = function appendBuffer(buf) {
  this._bufs.push(buf);

  this.length += buf.length;
};

BufferList.prototype.indexOf = function (search, offset, encoding) {
  if (encoding === undefined && typeof offset === 'string') {
    encoding = offset;
    offset = undefined;
  }

  if (typeof search === 'function' || Array.isArray(search)) {
    throw new TypeError('The "value" argument must be one of type string, Buffer, BufferList, or Uint8Array.');
  } else if (typeof search === 'number') {
    search = Buffer.from([search]);
  } else if (typeof search === 'string') {
    search = Buffer.from(search, encoding);
  } else if (this._isBufferList(search)) {
    search = search.slice();
  } else if (Array.isArray(search.buffer)) {
    search = Buffer.from(search.buffer, search.byteOffset, search.byteLength);
  } else if (!Buffer.isBuffer(search)) {
    search = Buffer.from(search);
  }

  offset = Number(offset || 0);

  if (isNaN(offset)) {
    offset = 0;
  }

  if (offset < 0) {
    offset = this.length + offset;
  }

  if (offset < 0) {
    offset = 0;
  }

  if (search.length === 0) {
    return offset > this.length ? this.length : offset;
  }

  const blOffset = this._offset(offset);

  let blIndex = blOffset[0]; // index of which internal buffer we're working on

  let buffOffset = blOffset[1]; // offset of the internal buffer we're working on
  // scan over each buffer

  for (; blIndex < this._bufs.length; blIndex++) {
    const buff = this._bufs[blIndex];

    while (buffOffset < buff.length) {
      const availableWindow = buff.length - buffOffset;

      if (availableWindow >= search.length) {
        const nativeSearchResult = buff.indexOf(search, buffOffset);

        if (nativeSearchResult !== -1) {
          return this._reverseOffset([blIndex, nativeSearchResult]);
        }

        buffOffset = buff.length - search.length + 1; // end of native search window
      } else {
        const revOffset = this._reverseOffset([blIndex, buffOffset]);

        if (this._match(revOffset, search)) {
          return revOffset;
        }

        buffOffset++;
      }
    }

    buffOffset = 0;
  }

  return -1;
};

BufferList.prototype._match = function (offset, search) {
  if (this.length - offset < search.length) {
    return false;
  }

  for (let searchOffset = 0; searchOffset < search.length; searchOffset++) {
    if (this.get(offset + searchOffset) !== search[searchOffset]) {
      return false;
    }
  }

  return true;
};

(function () {
  const methods = {
    readDoubleBE: 8,
    readDoubleLE: 8,
    readFloatBE: 4,
    readFloatLE: 4,
    readInt32BE: 4,
    readInt32LE: 4,
    readUInt32BE: 4,
    readUInt32LE: 4,
    readInt16BE: 2,
    readInt16LE: 2,
    readUInt16BE: 2,
    readUInt16LE: 2,
    readInt8: 1,
    readUInt8: 1,
    readIntBE: null,
    readIntLE: null,
    readUIntBE: null,
    readUIntLE: null
  };

  for (const m in methods) {
    (function (m) {
      if (methods[m] === null) {
        BufferList.prototype[m] = function (offset, byteLength) {
          return this.slice(offset, offset + byteLength)[m](0, byteLength);
        };
      } else {
        BufferList.prototype[m] = function (offset) {
          return this.slice(offset, offset + methods[m])[m](0);
        };
      }
    })(m);
  }
})(); // Used internally by the class and also as an indicator of this object being
// a `BufferList`. It's not possible to use `instanceof BufferList` in a browser
// environment because there could be multiple different copies of the
// BufferList class and some `BufferList`s might be `BufferList`s.


BufferList.prototype._isBufferList = function _isBufferList(b) {
  return b instanceof BufferList || BufferList.isBufferList(b);
};

BufferList.isBufferList = function isBufferList(b) {
  return b != null && b[symbol];
};

module.exports = BufferList;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const errCode = __webpack_require__(2);

module.exports = (options = {}, defaults) => {
  if (Array.isArray(options)) {
    options = options.filter(arg => typeof arg === 'object').pop() || {};
  }

  const output = {};

  for (const key in defaults) {
    if (options[key] !== null && options[key] !== undefined) {
      output[key] = options[key];
    } else {
      output[key] = defaults[key];
    }
  } // support legacy go arguments


  if (options.count !== undefined) {
    output.length = options.count;
  }

  if (options.p !== undefined) {
    output.parents = options.p;
  }

  if (options.l !== undefined) {
    output.long = options.l;
  }

  if (!output.length && output.length !== 0) {
    output.length = Infinity;
  }

  if (output.offset < 0) {
    throw errCode(new Error('cannot have negative write offset'), 'ERR_INVALID_PARAMS');
  }

  if (output.length < 0) {
    throw errCode(new Error('cannot have negative byte count'), 'ERR_INVALID_PARAMS');
  }

  return output;
};

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function createError(msg, code, props) {
  var err = msg instanceof Error ? msg : new Error(msg);
  var key;

  if (typeof code === 'object') {
    props = code;
  } else if (code != null) {
    err.code = code;
  }

  if (props) {
    for (key in props) {
      err[key] = props[key];
    }
  }

  return err;
}

module.exports = createError;

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

const errCode = __webpack_require__(2);

const CID = __webpack_require__(3);

const resolve = __webpack_require__(563);

const last = __webpack_require__(81);

const toPathComponents = (path = '') => {
  // split on / unless escaped with \
  return (path.trim().match(/([^\\^/]|\\\/)+/g) || []).filter(Boolean);
};

const cidAndRest = path => {
  if (Buffer.isBuffer(path)) {
    return {
      cid: new CID(path),
      toResolve: []
    };
  }

  if (CID.isCID(path)) {
    return {
      cid: path,
      toResolve: []
    };
  }

  if (typeof path === 'string') {
    if (path.indexOf('/ipfs/') === 0) {
      path = path.substring(6);
    }

    const output = toPathComponents(path);
    return {
      cid: new CID(output[0]),
      toResolve: output.slice(1)
    };
  }

  throw errCode(new Error("Unknown path type ".concat(path)), 'ERR_BAD_PATH');
};

const walkPath =
/*#__PURE__*/
function () {
  var _ref = _wrapAsyncGenerator(function* (path, ipld) {
    let {
      cid,
      toResolve
    } = cidAndRest(path);
    let name = cid.toBaseEncodedString();
    let entryPath = name;
    const startingDepth = toResolve.length;

    while (true) {
      const result = yield _awaitAsyncGenerator(resolve(cid, name, entryPath, toResolve, startingDepth, ipld));

      if (!result.entry && !result.next) {
        throw errCode(new Error("Could not resolve ".concat(path)), 'ERR_NOT_FOUND');
      }

      if (result.entry) {
        yield result.entry;
      }

      if (!result.next) {
        return;
      } // resolve further parts


      toResolve = result.next.toResolve;
      cid = result.next.cid;
      name = result.next.name;
      entryPath = result.next.path;
    }
  });

  return function walkPath(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

const exporter = (path, ipld) => {
  return last(walkPath(path, ipld));
};

const recursive =
/*#__PURE__*/
function () {
  var _ref2 = _wrapAsyncGenerator(function* (path, ipld) {
    const node = yield _awaitAsyncGenerator(exporter(path, ipld));
    yield node;

    if (node.unixfs && node.unixfs.type.includes('dir')) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;

      var _iteratorError;

      try {
        for (var _iterator = _asyncIterator(recurse(node)), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
          const child = _value;
          yield child;
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            yield _awaitAsyncGenerator(_iterator.return());
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }

    function recurse(_x5) {
      return _recurse.apply(this, arguments);
    }

    function _recurse() {
      _recurse = _wrapAsyncGenerator(function* (node) {
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;

        var _iteratorError2;

        try {
          for (var _iterator2 = _asyncIterator(node.content()), _step2, _value2; _step2 = yield _awaitAsyncGenerator(_iterator2.next()), _iteratorNormalCompletion2 = _step2.done, _value2 = yield _awaitAsyncGenerator(_step2.value), !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {
            const file = _value2;
            yield file;

            if (file.unixfs.type.includes('dir')) {
              var _iteratorNormalCompletion3 = true;
              var _didIteratorError3 = false;

              var _iteratorError3;

              try {
                for (var _iterator3 = _asyncIterator(recurse(file)), _step3, _value3; _step3 = yield _awaitAsyncGenerator(_iterator3.next()), _iteratorNormalCompletion3 = _step3.done, _value3 = yield _awaitAsyncGenerator(_step3.value), !_iteratorNormalCompletion3; _iteratorNormalCompletion3 = true) {
                  const subFile = _value3;
                  yield subFile;
                }
              } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
                    yield _awaitAsyncGenerator(_iterator3.return());
                  }
                } finally {
                  if (_didIteratorError3) {
                    throw _iteratorError3;
                  }
                }
              }
            }
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
              yield _awaitAsyncGenerator(_iterator2.return());
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      });
      return _recurse.apply(this, arguments);
    }
  });

  return function recursive(_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();

module.exports = exporter;
module.exports.path = walkPath;
module.exports.recursive = recursive;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const Key = __webpack_require__(14).Key;

const FILE_TYPES = {
  file: 0,
  directory: 1,
  'hamt-sharded-directory': 1
};
module.exports = {
  FILE_SEPARATOR: '/',
  MFS_ROOT_KEY: new Key('/local/filesroot'),
  MAX_CHUNK_SIZE: 262144,
  MAX_LINKS: 174,
  FILE_TYPES
};

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function createError(msg, code, props) {
  var err = msg instanceof Error ? msg : new Error(msg);
  var key;

  if (typeof code === 'object') {
    props = code;
  } else if (code != null) {
    err.code = code;
  }

  if (props) {
    for (key in props) {
      err[key] = props[key];
    }
  }

  return err;
}

module.exports = createError;

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_RESULT__;

;

(function (globalObject) {
  'use strict';
  /*
   *      bignumber.js v9.0.0
   *      A JavaScript library for arbitrary-precision arithmetic.
   *      https://github.com/MikeMcl/bignumber.js
   *      Copyright (c) 2019 Michael Mclaughlin <M8ch88l@gmail.com>
   *      MIT Licensed.
   *
   *      BigNumber.prototype methods     |  BigNumber methods
   *                                      |
   *      absoluteValue            abs    |  clone
   *      comparedTo                      |  config               set
   *      decimalPlaces            dp     |      DECIMAL_PLACES
   *      dividedBy                div    |      ROUNDING_MODE
   *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT
   *      exponentiatedBy          pow    |      RANGE
   *      integerValue                    |      CRYPTO
   *      isEqualTo                eq     |      MODULO_MODE
   *      isFinite                        |      POW_PRECISION
   *      isGreaterThan            gt     |      FORMAT
   *      isGreaterThanOrEqualTo   gte    |      ALPHABET
   *      isInteger                       |  isBigNumber
   *      isLessThan               lt     |  maximum              max
   *      isLessThanOrEqualTo      lte    |  minimum              min
   *      isNaN                           |  random
   *      isNegative                      |  sum
   *      isPositive                      |
   *      isZero                          |
   *      minus                           |
   *      modulo                   mod    |
   *      multipliedBy             times  |
   *      negated                         |
   *      plus                            |
   *      precision                sd     |
   *      shiftedBy                       |
   *      squareRoot               sqrt   |
   *      toExponential                   |
   *      toFixed                         |
   *      toFormat                        |
   *      toFraction                      |
   *      toJSON                          |
   *      toNumber                        |
   *      toPrecision                     |
   *      toString                        |
   *      valueOf                         |
   *
   */

  var BigNumber,
      isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,
      mathceil = Math.ceil,
      mathfloor = Math.floor,
      bignumberError = '[BigNumber Error] ',
      tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',
      BASE = 1e14,
      LOG_BASE = 14,
      MAX_SAFE_INTEGER = 0x1fffffffffffff,
      // 2^53 - 1
  // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
  POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],
      SQRT_BASE = 1e7,
      // EDITABLE
  // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
  // the arguments to toExponential, toFixed, toFormat, and toPrecision.
  MAX = 1E9; // 0 to MAX_INT32

  /*
   * Create and return a BigNumber constructor.
   */

  function clone(configObject) {
    var div,
        convertBase,
        parseNumeric,
        P = BigNumber.prototype = {
      constructor: BigNumber,
      toString: null,
      valueOf: null
    },
        ONE = new BigNumber(1),
        //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------
    // The default values below must be integers within the inclusive ranges stated.
    // The values can also be changed at run-time using BigNumber.set.
    // The maximum number of decimal places for operations involving division.
    DECIMAL_PLACES = 20,
        // 0 to MAX
    // The rounding mode used when rounding to the above decimal places, and when using
    // toExponential, toFixed, toFormat and toPrecision, and round (default value).
    // UP         0 Away from zero.
    // DOWN       1 Towards zero.
    // CEIL       2 Towards +Infinity.
    // FLOOR      3 Towards -Infinity.
    // HALF_UP    4 Towards nearest neighbour. If equidistant, up.
    // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
    // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
    // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
    // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
    ROUNDING_MODE = 4,
        // 0 to 8
    // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]
    // The exponent value at and beneath which toString returns exponential notation.
    // Number type: -7
    TO_EXP_NEG = -7,
        // 0 to -MAX
    // The exponent value at and above which toString returns exponential notation.
    // Number type: 21
    TO_EXP_POS = 21,
        // 0 to MAX
    // RANGE : [MIN_EXP, MAX_EXP]
    // The minimum exponent value, beneath which underflow to zero occurs.
    // Number type: -324  (5e-324)
    MIN_EXP = -1e7,
        // -1 to -MAX
    // The maximum exponent value, above which overflow to Infinity occurs.
    // Number type:  308  (1.7976931348623157e+308)
    // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
    MAX_EXP = 1e7,
        // 1 to MAX
    // Whether to use cryptographically-secure random number generation, if available.
    CRYPTO = false,
        // true or false
    // The modulo mode used when calculating the modulus: a mod n.
    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
    // The remainder (r) is calculated as: r = a - n * q.
    //
    // UP        0 The remainder is positive if the dividend is negative, else is negative.
    // DOWN      1 The remainder has the same sign as the dividend.
    //             This modulo mode is commonly known as 'truncated division' and is
    //             equivalent to (a % n) in JavaScript.
    // FLOOR     3 The remainder has the same sign as the divisor (Python %).
    // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
    // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
    //             The remainder is always positive.
    //
    // The truncated division, floored division, Euclidian division and IEEE 754 remainder
    // modes are commonly used for the modulus operation.
    // Although the other rounding modes can also be used, they may not give useful results.
    MODULO_MODE = 1,
        // 0 to 9
    // The maximum number of significant digits of the result of the exponentiatedBy operation.
    // If POW_PRECISION is 0, there will be unlimited significant digits.
    POW_PRECISION = 0,
        // 0 to MAX
    // The format specification used by the BigNumber.prototype.toFormat method.
    FORMAT = {
      prefix: '',
      groupSize: 3,
      secondaryGroupSize: 0,
      groupSeparator: ',',
      decimalSeparator: '.',
      fractionGroupSize: 0,
      fractionGroupSeparator: '\xA0',
      // non-breaking space
      suffix: ''
    },
        // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',
    // '-', '.', whitespace, or repeated character.
    // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'
    ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz'; //------------------------------------------------------------------------------------------
    // CONSTRUCTOR

    /*
     * The BigNumber constructor and exported function.
     * Create and return a new instance of a BigNumber object.
     *
     * v {number|string|BigNumber} A numeric value.
     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.
     */

    function BigNumber(v, b) {
      var alphabet,
          c,
          caseChanged,
          e,
          i,
          isNum,
          len,
          str,
          x = this; // Enable constructor call without `new`.

      if (!(x instanceof BigNumber)) return new BigNumber(v, b);

      if (b == null) {
        if (v && v._isBigNumber === true) {
          x.s = v.s;

          if (!v.c || v.e > MAX_EXP) {
            x.c = x.e = null;
          } else if (v.e < MIN_EXP) {
            x.c = [x.e = 0];
          } else {
            x.e = v.e;
            x.c = v.c.slice();
          }

          return;
        }

        if ((isNum = typeof v == 'number') && v * 0 == 0) {
          // Use `1 / n` to handle minus zero also.
          x.s = 1 / v < 0 ? (v = -v, -1) : 1; // Fast path for integers, where n < 2147483648 (2**31).

          if (v === ~~v) {
            for (e = 0, i = v; i >= 10; i /= 10, e++);

            if (e > MAX_EXP) {
              x.c = x.e = null;
            } else {
              x.e = e;
              x.c = [v];
            }

            return;
          }

          str = String(v);
        } else {
          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);
          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
        } // Decimal point?


        if ((e = str.indexOf('.')) > -1) str = str.replace('.', ''); // Exponential form?

        if ((i = str.search(/e/i)) > 0) {
          // Determine exponent.
          if (e < 0) e = i;
          e += +str.slice(i + 1);
          str = str.substring(0, i);
        } else if (e < 0) {
          // Integer.
          e = str.length;
        }
      } else {
        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
        intCheck(b, 2, ALPHABET.length, 'Base'); // Allow exponential notation to be used with base 10 argument, while
        // also rounding to DECIMAL_PLACES as with other bases.

        if (b == 10) {
          x = new BigNumber(v);
          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
        }

        str = String(v);

        if (isNum = typeof v == 'number') {
          // Avoid potential interpretation of Infinity and NaN as base 44+ values.
          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);
          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1; // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'

          if (BigNumber.DEBUG && str.replace(/^0\.0*|\./, '').length > 15) {
            throw Error(tooManyDigits + v);
          }
        } else {
          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
        }

        alphabet = ALPHABET.slice(0, b);
        e = i = 0; // Check that str is a valid base b number.
        // Don't use RegExp, so alphabet can contain special characters.

        for (len = str.length; i < len; i++) {
          if (alphabet.indexOf(c = str.charAt(i)) < 0) {
            if (c == '.') {
              // If '.' is not the first character and it has not be found before.
              if (i > e) {
                e = len;
                continue;
              }
            } else if (!caseChanged) {
              // Allow e.g. hexadecimal 'FF' as well as 'ff'.
              if (str == str.toUpperCase() && (str = str.toLowerCase()) || str == str.toLowerCase() && (str = str.toUpperCase())) {
                caseChanged = true;
                i = -1;
                e = 0;
                continue;
              }
            }

            return parseNumeric(x, String(v), isNum, b);
          }
        } // Prevent later check for length on converted number.


        isNum = false;
        str = convertBase(str, b, 10, x.s); // Decimal point?

        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');else e = str.length;
      } // Determine leading zeros.


      for (i = 0; str.charCodeAt(i) === 48; i++); // Determine trailing zeros.


      for (len = str.length; str.charCodeAt(--len) === 48;);

      if (str = str.slice(i, ++len)) {
        len -= i; // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'

        if (isNum && BigNumber.DEBUG && len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {
          throw Error(tooManyDigits + x.s * v);
        } // Overflow?


        if ((e = e - i - 1) > MAX_EXP) {
          // Infinity.
          x.c = x.e = null; // Underflow?
        } else if (e < MIN_EXP) {
          // Zero.
          x.c = [x.e = 0];
        } else {
          x.e = e;
          x.c = []; // Transform base
          // e is the base 10 exponent.
          // i is where to slice str to get the first element of the coefficient array.

          i = (e + 1) % LOG_BASE;
          if (e < 0) i += LOG_BASE; // i < 1

          if (i < len) {
            if (i) x.c.push(+str.slice(0, i));

            for (len -= LOG_BASE; i < len;) {
              x.c.push(+str.slice(i, i += LOG_BASE));
            }

            i = LOG_BASE - (str = str.slice(i)).length;
          } else {
            i -= len;
          }

          for (; i--; str += '0');

          x.c.push(+str);
        }
      } else {
        // Zero.
        x.c = [x.e = 0];
      }
    } // CONSTRUCTOR PROPERTIES


    BigNumber.clone = clone;
    BigNumber.ROUND_UP = 0;
    BigNumber.ROUND_DOWN = 1;
    BigNumber.ROUND_CEIL = 2;
    BigNumber.ROUND_FLOOR = 3;
    BigNumber.ROUND_HALF_UP = 4;
    BigNumber.ROUND_HALF_DOWN = 5;
    BigNumber.ROUND_HALF_EVEN = 6;
    BigNumber.ROUND_HALF_CEIL = 7;
    BigNumber.ROUND_HALF_FLOOR = 8;
    BigNumber.EUCLID = 9;
    /*
     * Configure infrequently-changing library-wide settings.
     *
     * Accept an object with the following optional properties (if the value of a property is
     * a number, it must be an integer within the inclusive range stated):
     *
     *   DECIMAL_PLACES   {number}           0 to MAX
     *   ROUNDING_MODE    {number}           0 to 8
     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]
     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]
     *   CRYPTO           {boolean}          true or false
     *   MODULO_MODE      {number}           0 to 9
     *   POW_PRECISION       {number}           0 to MAX
     *   ALPHABET         {string}           A string of two or more unique characters which does
     *                                       not contain '.'.
     *   FORMAT           {object}           An object with some of the following properties:
     *     prefix                 {string}
     *     groupSize              {number}
     *     secondaryGroupSize     {number}
     *     groupSeparator         {string}
     *     decimalSeparator       {string}
     *     fractionGroupSize      {number}
     *     fractionGroupSeparator {string}
     *     suffix                 {string}
     *
     * (The values assigned to the above FORMAT object properties are not checked for validity.)
     *
     * E.g.
     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
     *
     * Ignore properties/parameters set to null or undefined, except for ALPHABET.
     *
     * Return an object with the properties current values.
     */

    BigNumber.config = BigNumber.set = function (obj) {
      var p, v;

      if (obj != null) {
        if (typeof obj == 'object') {
          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'
          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {
            v = obj[p];
            intCheck(v, 0, MAX, p);
            DECIMAL_PLACES = v;
          } // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'


          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {
            v = obj[p];
            intCheck(v, 0, 8, p);
            ROUNDING_MODE = v;
          } // EXPONENTIAL_AT {number|number[]}
          // Integer, -MAX to MAX inclusive or
          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].
          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'


          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {
            v = obj[p];

            if (v && v.pop) {
              intCheck(v[0], -MAX, 0, p);
              intCheck(v[1], 0, MAX, p);
              TO_EXP_NEG = v[0];
              TO_EXP_POS = v[1];
            } else {
              intCheck(v, -MAX, MAX, p);
              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
            }
          } // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'


          if (obj.hasOwnProperty(p = 'RANGE')) {
            v = obj[p];

            if (v && v.pop) {
              intCheck(v[0], -MAX, -1, p);
              intCheck(v[1], 1, MAX, p);
              MIN_EXP = v[0];
              MAX_EXP = v[1];
            } else {
              intCheck(v, -MAX, MAX, p);

              if (v) {
                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
              } else {
                throw Error(bignumberError + p + ' cannot be zero: ' + v);
              }
            }
          } // CRYPTO {boolean} true or false.
          // '[BigNumber Error] CRYPTO not true or false: {v}'
          // '[BigNumber Error] crypto unavailable'


          if (obj.hasOwnProperty(p = 'CRYPTO')) {
            v = obj[p];

            if (v === !!v) {
              if (v) {
                if (typeof crypto != 'undefined' && crypto && (crypto.getRandomValues || crypto.randomBytes)) {
                  CRYPTO = v;
                } else {
                  CRYPTO = !v;
                  throw Error(bignumberError + 'crypto unavailable');
                }
              } else {
                CRYPTO = v;
              }
            } else {
              throw Error(bignumberError + p + ' not true or false: ' + v);
            }
          } // MODULO_MODE {number} Integer, 0 to 9 inclusive.
          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'


          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {
            v = obj[p];
            intCheck(v, 0, 9, p);
            MODULO_MODE = v;
          } // POW_PRECISION {number} Integer, 0 to MAX inclusive.
          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'


          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {
            v = obj[p];
            intCheck(v, 0, MAX, p);
            POW_PRECISION = v;
          } // FORMAT {object}
          // '[BigNumber Error] FORMAT not an object: {v}'


          if (obj.hasOwnProperty(p = 'FORMAT')) {
            v = obj[p];
            if (typeof v == 'object') FORMAT = v;else throw Error(bignumberError + p + ' not an object: ' + v);
          } // ALPHABET {string}
          // '[BigNumber Error] ALPHABET invalid: {v}'


          if (obj.hasOwnProperty(p = 'ALPHABET')) {
            v = obj[p]; // Disallow if only one character,
            // or if it contains '+', '-', '.', whitespace, or a repeated character.

            if (typeof v == 'string' && !/^.$|[+-.\s]|(.).*\1/.test(v)) {
              ALPHABET = v;
            } else {
              throw Error(bignumberError + p + ' invalid: ' + v);
            }
          }
        } else {
          // '[BigNumber Error] Object expected: {v}'
          throw Error(bignumberError + 'Object expected: ' + obj);
        }
      }

      return {
        DECIMAL_PLACES: DECIMAL_PLACES,
        ROUNDING_MODE: ROUNDING_MODE,
        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
        RANGE: [MIN_EXP, MAX_EXP],
        CRYPTO: CRYPTO,
        MODULO_MODE: MODULO_MODE,
        POW_PRECISION: POW_PRECISION,
        FORMAT: FORMAT,
        ALPHABET: ALPHABET
      };
    };
    /*
     * Return true if v is a BigNumber instance, otherwise return false.
     *
     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.
     *
     * v {any}
     *
     * '[BigNumber Error] Invalid BigNumber: {v}'
     */


    BigNumber.isBigNumber = function (v) {
      if (!v || v._isBigNumber !== true) return false;
      if (!BigNumber.DEBUG) return true;
      var i,
          n,
          c = v.c,
          e = v.e,
          s = v.s;

      out: if ({}.toString.call(c) == '[object Array]') {
        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {
          // If the first element is zero, the BigNumber value must be zero.
          if (c[0] === 0) {
            if (e === 0 && c.length === 1) return true;
            break out;
          } // Calculate number of digits that c[0] should have, based on the exponent.


          i = (e + 1) % LOG_BASE;
          if (i < 1) i += LOG_BASE; // Calculate number of digits of c[0].
          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {

          if (String(c[0]).length == i) {
            for (i = 0; i < c.length; i++) {
              n = c[i];
              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;
            } // Last element cannot be zero, unless it is the only element.


            if (n !== 0) return true;
          }
        } // Infinity/NaN

      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {
        return true;
      }

      throw Error(bignumberError + 'Invalid BigNumber: ' + v);
    };
    /*
     * Return a new BigNumber whose value is the maximum of the arguments.
     *
     * arguments {number|string|BigNumber}
     */


    BigNumber.maximum = BigNumber.max = function () {
      return maxOrMin(arguments, P.lt);
    };
    /*
     * Return a new BigNumber whose value is the minimum of the arguments.
     *
     * arguments {number|string|BigNumber}
     */


    BigNumber.minimum = BigNumber.min = function () {
      return maxOrMin(arguments, P.gt);
    };
    /*
     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
     * zeros are produced).
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'
     * '[BigNumber Error] crypto unavailable'
     */


    BigNumber.random = function () {
      var pow2_53 = 0x20000000000000; // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
      // Check if Math.random() produces more than 32 bits of randomness.
      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.

      var random53bitInt = Math.random() * pow2_53 & 0x1fffff ? function () {
        return mathfloor(Math.random() * pow2_53);
      } : function () {
        return (Math.random() * 0x40000000 | 0) * 0x800000 + (Math.random() * 0x800000 | 0);
      };
      return function (dp) {
        var a,
            b,
            e,
            k,
            v,
            i = 0,
            c = [],
            rand = new BigNumber(ONE);
        if (dp == null) dp = DECIMAL_PLACES;else intCheck(dp, 0, MAX);
        k = mathceil(dp / LOG_BASE);

        if (CRYPTO) {
          // Browsers supporting crypto.getRandomValues.
          if (crypto.getRandomValues) {
            a = crypto.getRandomValues(new Uint32Array(k *= 2));

            for (; i < k;) {
              // 53 bits:
              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
              // 11111 11111111 11111111 11111111 11100000 00000000 00000000
              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
              //                                     11111 11111111 11111111
              // 0x20000 is 2^21.
              v = a[i] * 0x20000 + (a[i + 1] >>> 11); // Rejection sampling:
              // 0 <= v < 9007199254740992
              // Probability that v >= 9e15, is
              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251

              if (v >= 9e15) {
                b = crypto.getRandomValues(new Uint32Array(2));
                a[i] = b[0];
                a[i + 1] = b[1];
              } else {
                // 0 <= v <= 8999999999999999
                // 0 <= (v % 1e14) <= 99999999999999
                c.push(v % 1e14);
                i += 2;
              }
            }

            i = k / 2; // Node.js supporting crypto.randomBytes.
          } else if (crypto.randomBytes) {
            // buffer
            a = crypto.randomBytes(k *= 7);

            for (; i < k;) {
              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
              // 0x100000000 is 2^32, 0x1000000 is 2^24
              // 11111 11111111 11111111 11111111 11111111 11111111 11111111
              // 0 <= v < 9007199254740992
              v = (a[i] & 31) * 0x1000000000000 + a[i + 1] * 0x10000000000 + a[i + 2] * 0x100000000 + a[i + 3] * 0x1000000 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];

              if (v >= 9e15) {
                crypto.randomBytes(7).copy(a, i);
              } else {
                // 0 <= (v % 1e14) <= 99999999999999
                c.push(v % 1e14);
                i += 7;
              }
            }

            i = k / 7;
          } else {
            CRYPTO = false;
            throw Error(bignumberError + 'crypto unavailable');
          }
        } // Use Math.random.


        if (!CRYPTO) {
          for (; i < k;) {
            v = random53bitInt();
            if (v < 9e15) c[i++] = v % 1e14;
          }
        }

        k = c[--i];
        dp %= LOG_BASE; // Convert trailing digits to zeros according to dp.

        if (k && dp) {
          v = POWS_TEN[LOG_BASE - dp];
          c[i] = mathfloor(k / v) * v;
        } // Remove trailing elements which are zero.


        for (; c[i] === 0; c.pop(), i--); // Zero?


        if (i < 0) {
          c = [e = 0];
        } else {
          // Remove leading elements which are zero and adjust exponent accordingly.
          for (e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE); // Count the digits of the first element of c to determine leading zeros, and...


          for (i = 1, v = c[0]; v >= 10; v /= 10, i++); // adjust the exponent accordingly.


          if (i < LOG_BASE) e -= LOG_BASE - i;
        }

        rand.e = e;
        rand.c = c;
        return rand;
      };
    }();
    /*
     * Return a BigNumber whose value is the sum of the arguments.
     *
     * arguments {number|string|BigNumber}
     */


    BigNumber.sum = function () {
      var i = 1,
          args = arguments,
          sum = new BigNumber(args[0]);

      for (; i < args.length;) sum = sum.plus(args[i++]);

      return sum;
    }; // PRIVATE FUNCTIONS
    // Called by BigNumber and BigNumber.prototype.toString.


    convertBase = function () {
      var decimal = '0123456789';
      /*
       * Convert string of baseIn to an array of numbers of baseOut.
       * Eg. toBaseOut('255', 10, 16) returns [15, 15].
       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].
       */

      function toBaseOut(str, baseIn, baseOut, alphabet) {
        var j,
            arr = [0],
            arrL,
            i = 0,
            len = str.length;

        for (; i < len;) {
          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);

          arr[0] += alphabet.indexOf(str.charAt(i++));

          for (j = 0; j < arr.length; j++) {
            if (arr[j] > baseOut - 1) {
              if (arr[j + 1] == null) arr[j + 1] = 0;
              arr[j + 1] += arr[j] / baseOut | 0;
              arr[j] %= baseOut;
            }
          }
        }

        return arr.reverse();
      } // Convert a numeric string of baseIn to a numeric string of baseOut.
      // If the caller is toString, we are converting from base 10 to baseOut.
      // If the caller is BigNumber, we are converting from baseIn to base 10.


      return function (str, baseIn, baseOut, sign, callerIsToString) {
        var alphabet,
            d,
            e,
            k,
            r,
            x,
            xc,
            y,
            i = str.indexOf('.'),
            dp = DECIMAL_PLACES,
            rm = ROUNDING_MODE; // Non-integer.

        if (i >= 0) {
          k = POW_PRECISION; // Unlimited precision.

          POW_PRECISION = 0;
          str = str.replace('.', '');
          y = new BigNumber(baseIn);
          x = y.pow(str.length - i);
          POW_PRECISION = k; // Convert str as if an integer, then restore the fraction part by dividing the
          // result by its base raised to a power.

          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'), 10, baseOut, decimal);
          y.e = y.c.length;
        } // Convert the number as integer.


        xc = toBaseOut(str, baseIn, baseOut, callerIsToString ? (alphabet = ALPHABET, decimal) : (alphabet = decimal, ALPHABET)); // xc now represents str as an integer and converted to baseOut. e is the exponent.

        e = k = xc.length; // Remove trailing zeros.

        for (; xc[--k] == 0; xc.pop()); // Zero?


        if (!xc[0]) return alphabet.charAt(0); // Does str represent an integer? If so, no need for the division.

        if (i < 0) {
          --e;
        } else {
          x.c = xc;
          x.e = e; // The sign is needed for correct rounding.

          x.s = sign;
          x = div(x, y, dp, rm, baseOut);
          xc = x.c;
          r = x.r;
          e = x.e;
        } // xc now represents str converted to baseOut.
        // THe index of the rounding digit.


        d = e + dp + 1; // The rounding digit: the digit to the right of the digit that may be rounded up.

        i = xc[d]; // Look at the rounding digits and mode to determine whether to round up.

        k = baseOut / 2;
        r = r || d < 0 || xc[d + 1] != null;
        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7)); // If the index of the rounding digit is not greater than zero, or xc represents
        // zero, then the result of the base conversion is zero or, if rounding up, a value
        // such as 0.00001.

        if (d < 1 || !xc[0]) {
          // 1^-dp or 0
          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);
        } else {
          // Truncate xc to the required number of decimal places.
          xc.length = d; // Round up?

          if (r) {
            // Rounding up may mean the previous digit has to be rounded up and so on.
            for (--baseOut; ++xc[--d] > baseOut;) {
              xc[d] = 0;

              if (!d) {
                ++e;
                xc = [1].concat(xc);
              }
            }
          } // Determine trailing zeros.


          for (k = xc.length; !xc[--k];); // E.g. [4, 11, 15] becomes 4bf.


          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++])); // Add leading zeros, decimal point and trailing zeros as required.


          str = toFixedPoint(str, e, alphabet.charAt(0));
        } // The caller will add the sign.


        return str;
      };
    }(); // Perform division in the specified base. Called by div and convertBase.


    div = function () {
      // Assume non-zero x and k.
      function multiply(x, k, base) {
        var m,
            temp,
            xlo,
            xhi,
            carry = 0,
            i = x.length,
            klo = k % SQRT_BASE,
            khi = k / SQRT_BASE | 0;

        for (x = x.slice(); i--;) {
          xlo = x[i] % SQRT_BASE;
          xhi = x[i] / SQRT_BASE | 0;
          m = khi * xlo + xhi * klo;
          temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;
          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
          x[i] = temp % base;
        }

        if (carry) x = [carry].concat(x);
        return x;
      }

      function compare(a, b, aL, bL) {
        var i, cmp;

        if (aL != bL) {
          cmp = aL > bL ? 1 : -1;
        } else {
          for (i = cmp = 0; i < aL; i++) {
            if (a[i] != b[i]) {
              cmp = a[i] > b[i] ? 1 : -1;
              break;
            }
          }
        }

        return cmp;
      }

      function subtract(a, b, aL, base) {
        var i = 0; // Subtract b from a.

        for (; aL--;) {
          a[aL] -= i;
          i = a[aL] < b[aL] ? 1 : 0;
          a[aL] = i * base + a[aL] - b[aL];
        } // Remove leading zeros.


        for (; !a[0] && a.length > 1; a.splice(0, 1));
      } // x: dividend, y: divisor.


      return function (x, y, dp, rm, base) {
        var cmp,
            e,
            i,
            more,
            n,
            prod,
            prodL,
            q,
            qc,
            rem,
            remL,
            rem0,
            xi,
            xL,
            yc0,
            yL,
            yz,
            s = x.s == y.s ? 1 : -1,
            xc = x.c,
            yc = y.c; // Either NaN, Infinity or 0?

        if (!xc || !xc[0] || !yc || !yc[0]) {
          return new BigNumber( // Return NaN if either NaN, or both Infinity or 0.
          !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN : // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
          xc && xc[0] == 0 || !yc ? s * 0 : s / 0);
        }

        q = new BigNumber(s);
        qc = q.c = [];
        e = x.e - y.e;
        s = dp + e + 1;

        if (!base) {
          base = BASE;
          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
          s = s / LOG_BASE | 0;
        } // Result exponent may be one less then the current value of e.
        // The coefficients of the BigNumbers from convertBase may have trailing zeros.


        for (i = 0; yc[i] == (xc[i] || 0); i++);

        if (yc[i] > (xc[i] || 0)) e--;

        if (s < 0) {
          qc.push(1);
          more = true;
        } else {
          xL = xc.length;
          yL = yc.length;
          i = 0;
          s += 2; // Normalise xc and yc so highest order digit of yc is >= base / 2.

          n = mathfloor(base / (yc[0] + 1)); // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.
          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {

          if (n > 1) {
            yc = multiply(yc, n, base);
            xc = multiply(xc, n, base);
            yL = yc.length;
            xL = xc.length;
          }

          xi = yL;
          rem = xc.slice(0, yL);
          remL = rem.length; // Add zeros to make remainder as long as divisor.

          for (; remL < yL; rem[remL++] = 0);

          yz = yc.slice();
          yz = [0].concat(yz);
          yc0 = yc[0];
          if (yc[1] >= base / 2) yc0++; // Not necessary, but to prevent trial digit n > base, when using base 3.
          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;

          do {
            n = 0; // Compare divisor and remainder.

            cmp = compare(yc, rem, yL, remL); // If divisor < remainder.

            if (cmp < 0) {
              // Calculate trial digit, n.
              rem0 = rem[0];
              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0); // n is how many times the divisor goes into the current remainder.

              n = mathfloor(rem0 / yc0); //  Algorithm:
              //  product = divisor multiplied by trial digit (n).
              //  Compare product and remainder.
              //  If product is greater than remainder:
              //    Subtract divisor from product, decrement trial digit.
              //  Subtract product from remainder.
              //  If product was less than remainder at the last compare:
              //    Compare new remainder and divisor.
              //    If remainder is greater than divisor:
              //      Subtract divisor from remainder, increment trial digit.

              if (n > 1) {
                // n may be > base only when base is 3.
                if (n >= base) n = base - 1; // product = divisor * trial digit.

                prod = multiply(yc, n, base);
                prodL = prod.length;
                remL = rem.length; // Compare product and remainder.
                // If product > remainder then trial digit n too high.
                // n is 1 too high about 5% of the time, and is not known to have
                // ever been more than 1 too high.

                while (compare(prod, rem, prodL, remL) == 1) {
                  n--; // Subtract divisor from product.

                  subtract(prod, yL < prodL ? yz : yc, prodL, base);
                  prodL = prod.length;
                  cmp = 1;
                }
              } else {
                // n is 0 or 1, cmp is -1.
                // If n is 0, there is no need to compare yc and rem again below,
                // so change cmp to 1 to avoid it.
                // If n is 1, leave cmp as -1, so yc and rem are compared again.
                if (n == 0) {
                  // divisor < remainder, so n must be at least 1.
                  cmp = n = 1;
                } // product = divisor


                prod = yc.slice();
                prodL = prod.length;
              }

              if (prodL < remL) prod = [0].concat(prod); // Subtract product from remainder.

              subtract(rem, prod, remL, base);
              remL = rem.length; // If product was < remainder.

              if (cmp == -1) {
                // Compare divisor and new remainder.
                // If divisor < new remainder, subtract divisor from remainder.
                // Trial digit n too low.
                // n is 1 too low about 5% of the time, and very rarely 2 too low.
                while (compare(yc, rem, yL, remL) < 1) {
                  n++; // Subtract divisor from remainder.

                  subtract(rem, yL < remL ? yz : yc, remL, base);
                  remL = rem.length;
                }
              }
            } else if (cmp === 0) {
              n++;
              rem = [0];
            } // else cmp === 1 and n will be 0
            // Add the next digit, n, to the result array.


            qc[i++] = n; // Update the remainder.

            if (rem[0]) {
              rem[remL++] = xc[xi] || 0;
            } else {
              rem = [xc[xi]];
              remL = 1;
            }
          } while ((xi++ < xL || rem[0] != null) && s--);

          more = rem[0] != null; // Leading zero?

          if (!qc[0]) qc.splice(0, 1);
        }

        if (base == BASE) {
          // To calculate q.e, first get the number of digits of qc[0].
          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);

          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more); // Caller is convertBase.
        } else {
          q.e = e;
          q.r = +more;
        }

        return q;
      };
    }();
    /*
     * Return a string representing the value of BigNumber n in fixed-point or exponential
     * notation rounded to the specified decimal places or significant digits.
     *
     * n: a BigNumber.
     * i: the index of the last digit required (i.e. the digit that may be rounded up).
     * rm: the rounding mode.
     * id: 1 (toExponential) or 2 (toPrecision).
     */


    function format(n, i, rm, id) {
      var c0, e, ne, len, str;
      if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);
      if (!n.c) return n.toString();
      c0 = n.c[0];
      ne = n.e;

      if (i == null) {
        str = coeffToString(n.c);
        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS) ? toExponential(str, ne) : toFixedPoint(str, ne, '0');
      } else {
        n = round(new BigNumber(n), i, rm); // n.e may have changed if the value was rounded up.

        e = n.e;
        str = coeffToString(n.c);
        len = str.length; // toPrecision returns exponential notation if the number of significant digits
        // specified is less than the number of digits necessary to represent the integer
        // part of the value in fixed-point notation.
        // Exponential notation.

        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {
          // Append zeros?
          for (; len < i; str += '0', len++);

          str = toExponential(str, e); // Fixed-point notation.
        } else {
          i -= ne;
          str = toFixedPoint(str, e, '0'); // Append zeros?

          if (e + 1 > len) {
            if (--i > 0) for (str += '.'; i--; str += '0');
          } else {
            i += e - len;

            if (i > 0) {
              if (e + 1 == len) str += '.';

              for (; i--; str += '0');
            }
          }
        }
      }

      return n.s < 0 && c0 ? '-' + str : str;
    } // Handle BigNumber.max and BigNumber.min.


    function maxOrMin(args, method) {
      var n,
          i = 1,
          m = new BigNumber(args[0]);

      for (; i < args.length; i++) {
        n = new BigNumber(args[i]); // If any number is NaN, return NaN.

        if (!n.s) {
          m = n;
          break;
        } else if (method.call(m, n)) {
          m = n;
        }
      }

      return m;
    }
    /*
     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
     * Called by minus, plus and times.
     */


    function normalise(n, c, e) {
      var i = 1,
          j = c.length; // Remove trailing zeros.

      for (; !c[--j]; c.pop()); // Calculate the base 10 exponent. First get the number of digits of c[0].


      for (j = c[0]; j >= 10; j /= 10, i++); // Overflow?


      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {
        // Infinity.
        n.c = n.e = null; // Underflow?
      } else if (e < MIN_EXP) {
        // Zero.
        n.c = [n.e = 0];
      } else {
        n.e = e;
        n.c = c;
      }

      return n;
    } // Handle values that fail the validity test in BigNumber.


    parseNumeric = function () {
      var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i,
          dotAfter = /^([^.]+)\.$/,
          dotBefore = /^\.([^.]+)$/,
          isInfinityOrNaN = /^-?(Infinity|NaN)$/,
          whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;
      return function (x, str, isNum, b) {
        var base,
            s = isNum ? str : str.replace(whitespaceOrPlus, ''); // No exception on ±Infinity or NaN.

        if (isInfinityOrNaN.test(s)) {
          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
        } else {
          if (!isNum) {
            // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
            s = s.replace(basePrefix, function (m, p1, p2) {
              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;
              return !b || b == base ? p1 : m;
            });

            if (b) {
              base = b; // E.g. '1.' to '1', '.1' to '0.1'

              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');
            }

            if (str != s) return new BigNumber(s, base);
          } // '[BigNumber Error] Not a number: {n}'
          // '[BigNumber Error] Not a base {b} number: {n}'


          if (BigNumber.DEBUG) {
            throw Error(bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);
          } // NaN


          x.s = null;
        }

        x.c = x.e = null;
      };
    }();
    /*
     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
     * If r is truthy, it is known that there are more digits after the rounding digit.
     */


    function round(x, sd, rm, r) {
      var d,
          i,
          j,
          k,
          n,
          ni,
          rd,
          xc = x.c,
          pows10 = POWS_TEN; // if x is not Infinity or NaN...

      if (xc) {
        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
        // n is a base 1e14 number, the value of the element of array x.c containing rd.
        // ni is the index of n within x.c.
        // d is the number of digits of n.
        // i is the index of rd within n including leading zeros.
        // j is the actual index of rd within n (if < 0, rd is a leading zero).
        out: {
          // Get the number of digits of the first element of xc.
          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);

          i = sd - d; // If the rounding digit is in the first element of xc...

          if (i < 0) {
            i += LOG_BASE;
            j = sd;
            n = xc[ni = 0]; // Get the rounding digit at index j of n.

            rd = n / pows10[d - j - 1] % 10 | 0;
          } else {
            ni = mathceil((i + 1) / LOG_BASE);

            if (ni >= xc.length) {
              if (r) {
                // Needed by sqrt.
                for (; xc.length <= ni; xc.push(0));

                n = rd = 0;
                d = 1;
                i %= LOG_BASE;
                j = i - LOG_BASE + 1;
              } else {
                break out;
              }
            } else {
              n = k = xc[ni]; // Get the number of digits of n.

              for (d = 1; k >= 10; k /= 10, d++); // Get the index of rd within n.


              i %= LOG_BASE; // Get the index of rd within n, adjusted for leading zeros.
              // The number of leading zeros of n is given by LOG_BASE - d.

              j = i - LOG_BASE + d; // Get the rounding digit at index j of n.

              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;
            }
          }

          r = r || sd < 0 || // Are there any non-zero digits after the rounding digit?
          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
          xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);
          r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.
          (i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));

          if (sd < 1 || !xc[0]) {
            xc.length = 0;

            if (r) {
              // Convert sd to decimal places.
              sd -= x.e + 1; // 1, 0.1, 0.01, 0.001, 0.0001 etc.

              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
              x.e = -sd || 0;
            } else {
              // Zero.
              xc[0] = x.e = 0;
            }

            return x;
          } // Remove excess digits.


          if (i == 0) {
            xc.length = ni;
            k = 1;
            ni--;
          } else {
            xc.length = ni + 1;
            k = pows10[LOG_BASE - i]; // E.g. 56700 becomes 56000 if 7 is the rounding digit.
            // j > 0 means i > number of leading zeros of n.

            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
          } // Round up?


          if (r) {
            for (;;) {
              // If the digit to be rounded up is in the first element of xc...
              if (ni == 0) {
                // i will be the length of xc[0] before k is added.
                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);

                j = xc[0] += k;

                for (k = 1; j >= 10; j /= 10, k++); // if i != k the length has increased.


                if (i != k) {
                  x.e++;
                  if (xc[0] == BASE) xc[0] = 1;
                }

                break;
              } else {
                xc[ni] += k;
                if (xc[ni] != BASE) break;
                xc[ni--] = 0;
                k = 1;
              }
            }
          } // Remove trailing zeros.


          for (i = xc.length; xc[--i] === 0; xc.pop());
        } // Overflow? Infinity.


        if (x.e > MAX_EXP) {
          x.c = x.e = null; // Underflow? Zero.
        } else if (x.e < MIN_EXP) {
          x.c = [x.e = 0];
        }
      }

      return x;
    }

    function valueOf(n) {
      var str,
          e = n.e;
      if (e === null) return n.toString();
      str = coeffToString(n.c);
      str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e, '0');
      return n.s < 0 ? '-' + str : str;
    } // PROTOTYPE/INSTANCE METHODS

    /*
     * Return a new BigNumber whose value is the absolute value of this BigNumber.
     */


    P.absoluteValue = P.abs = function () {
      var x = new BigNumber(this);
      if (x.s < 0) x.s = 1;
      return x;
    };
    /*
     * Return
     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
     *   0 if they have the same value,
     *   or null if the value of either is NaN.
     */


    P.comparedTo = function (y, b) {
      return compare(this, new BigNumber(y, b));
    };
    /*
     * If dp is undefined or null or true or false, return the number of decimal places of the
     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
     *
     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this
     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or
     * ROUNDING_MODE if rm is omitted.
     *
     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     */


    P.decimalPlaces = P.dp = function (dp, rm) {
      var c,
          n,
          v,
          x = this;

      if (dp != null) {
        intCheck(dp, 0, MAX);
        if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);
        return round(new BigNumber(x), dp + x.e + 1, rm);
      }

      if (!(c = x.c)) return null;
      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE; // Subtract the number of trailing zeros of the last number.

      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);
      if (n < 0) n = 0;
      return n;
    };
    /*
     *  n / 0 = I
     *  n / N = N
     *  n / I = 0
     *  0 / n = 0
     *  0 / 0 = N
     *  0 / N = N
     *  0 / I = 0
     *  N / n = N
     *  N / 0 = N
     *  N / N = N
     *  N / I = N
     *  I / n = I
     *  I / 0 = I
     *  I / N = N
     *  I / I = N
     *
     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
     */


    P.dividedBy = P.div = function (y, b) {
      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);
    };
    /*
     * Return a new BigNumber whose value is the integer part of dividing the value of this
     * BigNumber by the value of BigNumber(y, b).
     */


    P.dividedToIntegerBy = P.idiv = function (y, b) {
      return div(this, new BigNumber(y, b), 0, 1);
    };
    /*
     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.
     *
     * If m is present, return the result modulo m.
     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.
     *
     * The modular power operation works efficiently when x, n, and m are integers, otherwise it
     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.
     *
     * n {number|string|BigNumber} The exponent. An integer.
     * [m] {number|string|BigNumber} The modulus.
     *
     * '[BigNumber Error] Exponent not an integer: {n}'
     */


    P.exponentiatedBy = P.pow = function (n, m) {
      var half,
          isModExp,
          i,
          k,
          more,
          nIsBig,
          nIsNeg,
          nIsOdd,
          y,
          x = this;
      n = new BigNumber(n); // Allow NaN and ±Infinity, but not other non-integers.

      if (n.c && !n.isInteger()) {
        throw Error(bignumberError + 'Exponent not an integer: ' + valueOf(n));
      }

      if (m != null) m = new BigNumber(m); // Exponent of MAX_SAFE_INTEGER is 15.

      nIsBig = n.e > 14; // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.

      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {
        // The sign of the result of pow when x is negative depends on the evenness of n.
        // If +n overflows to ±Infinity, the evenness of n would be not be known.
        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));
        return m ? y.mod(m) : y;
      }

      nIsNeg = n.s < 0;

      if (m) {
        // x % m returns NaN if abs(m) is zero, or m is NaN.
        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);
        isModExp = !nIsNeg && x.isInteger() && m.isInteger();
        if (isModExp) x = x.mod(m); // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.
        // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.
      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0 // [1, 240000000]
      ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7 // [80000000000000]  [99999750000000]
      : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {
        // If x is negative and n is odd, k = -0, else k = 0.
        k = x.s < 0 && isOdd(n) ? -0 : 0; // If x >= 1, k = ±Infinity.

        if (x.e > -1) k = 1 / k; // If n is negative return ±0, else return ±Infinity.

        return new BigNumber(nIsNeg ? 1 / k : k);
      } else if (POW_PRECISION) {
        // Truncating each coefficient array to a length of k after each multiplication
        // equates to truncating significant digits to POW_PRECISION + [28, 41],
        // i.e. there will be a minimum of 28 guard digits retained.
        k = mathceil(POW_PRECISION / LOG_BASE + 2);
      }

      if (nIsBig) {
        half = new BigNumber(0.5);
        if (nIsNeg) n.s = 1;
        nIsOdd = isOdd(n);
      } else {
        i = Math.abs(+valueOf(n));
        nIsOdd = i % 2;
      }

      y = new BigNumber(ONE); // Performs 54 loop iterations for n of 9007199254740991.

      for (;;) {
        if (nIsOdd) {
          y = y.times(x);
          if (!y.c) break;

          if (k) {
            if (y.c.length > k) y.c.length = k;
          } else if (isModExp) {
            y = y.mod(m); //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));
          }
        }

        if (i) {
          i = mathfloor(i / 2);
          if (i === 0) break;
          nIsOdd = i % 2;
        } else {
          n = n.times(half);
          round(n, n.e + 1, 1);

          if (n.e > 14) {
            nIsOdd = isOdd(n);
          } else {
            i = +valueOf(n);
            if (i === 0) break;
            nIsOdd = i % 2;
          }
        }

        x = x.times(x);

        if (k) {
          if (x.c && x.c.length > k) x.c.length = k;
        } else if (isModExp) {
          x = x.mod(m); //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));
        }
      }

      if (isModExp) return y;
      if (nIsNeg) y = ONE.div(y);
      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
    };
    /*
     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer
     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.
     *
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'
     */


    P.integerValue = function (rm) {
      var n = new BigNumber(this);
      if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);
      return round(n, n.e + 1, rm);
    };
    /*
     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
     * otherwise return false.
     */


    P.isEqualTo = P.eq = function (y, b) {
      return compare(this, new BigNumber(y, b)) === 0;
    };
    /*
     * Return true if the value of this BigNumber is a finite number, otherwise return false.
     */


    P.isFinite = function () {
      return !!this.c;
    };
    /*
     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
     * otherwise return false.
     */


    P.isGreaterThan = P.gt = function (y, b) {
      return compare(this, new BigNumber(y, b)) > 0;
    };
    /*
     * Return true if the value of this BigNumber is greater than or equal to the value of
     * BigNumber(y, b), otherwise return false.
     */


    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {
      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;
    };
    /*
     * Return true if the value of this BigNumber is an integer, otherwise return false.
     */


    P.isInteger = function () {
      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
    };
    /*
     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
     * otherwise return false.
     */


    P.isLessThan = P.lt = function (y, b) {
      return compare(this, new BigNumber(y, b)) < 0;
    };
    /*
     * Return true if the value of this BigNumber is less than or equal to the value of
     * BigNumber(y, b), otherwise return false.
     */


    P.isLessThanOrEqualTo = P.lte = function (y, b) {
      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;
    };
    /*
     * Return true if the value of this BigNumber is NaN, otherwise return false.
     */


    P.isNaN = function () {
      return !this.s;
    };
    /*
     * Return true if the value of this BigNumber is negative, otherwise return false.
     */


    P.isNegative = function () {
      return this.s < 0;
    };
    /*
     * Return true if the value of this BigNumber is positive, otherwise return false.
     */


    P.isPositive = function () {
      return this.s > 0;
    };
    /*
     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.
     */


    P.isZero = function () {
      return !!this.c && this.c[0] == 0;
    };
    /*
     *  n - 0 = n
     *  n - N = N
     *  n - I = -I
     *  0 - n = -n
     *  0 - 0 = 0
     *  0 - N = N
     *  0 - I = -I
     *  N - n = N
     *  N - 0 = N
     *  N - N = N
     *  N - I = N
     *  I - n = I
     *  I - 0 = I
     *  I - N = N
     *  I - I = N
     *
     * Return a new BigNumber whose value is the value of this BigNumber minus the value of
     * BigNumber(y, b).
     */


    P.minus = function (y, b) {
      var i,
          j,
          t,
          xLTy,
          x = this,
          a = x.s;
      y = new BigNumber(y, b);
      b = y.s; // Either NaN?

      if (!a || !b) return new BigNumber(NaN); // Signs differ?

      if (a != b) {
        y.s = -b;
        return x.plus(y);
      }

      var xe = x.e / LOG_BASE,
          ye = y.e / LOG_BASE,
          xc = x.c,
          yc = y.c;

      if (!xe || !ye) {
        // Either Infinity?
        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN); // Either zero?

        if (!xc[0] || !yc[0]) {
          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x : // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
          ROUNDING_MODE == 3 ? -0 : 0);
        }
      }

      xe = bitFloor(xe);
      ye = bitFloor(ye);
      xc = xc.slice(); // Determine which is the bigger number.

      if (a = xe - ye) {
        if (xLTy = a < 0) {
          a = -a;
          t = xc;
        } else {
          ye = xe;
          t = yc;
        }

        t.reverse(); // Prepend zeros to equalise exponents.

        for (b = a; b--; t.push(0));

        t.reverse();
      } else {
        // Exponents equal. Check digit by digit.
        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;

        for (a = b = 0; b < j; b++) {
          if (xc[b] != yc[b]) {
            xLTy = xc[b] < yc[b];
            break;
          }
        }
      } // x < y? Point xc to the array of the bigger number.


      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;
      b = (j = yc.length) - (i = xc.length); // Append zeros to xc if shorter.
      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.

      if (b > 0) for (; b--; xc[i++] = 0);
      b = BASE - 1; // Subtract yc from xc.

      for (; j > a;) {
        if (xc[--j] < yc[j]) {
          for (i = j; i && !xc[--i]; xc[i] = b);

          --xc[i];
          xc[j] += BASE;
        }

        xc[j] -= yc[j];
      } // Remove leading zeros and adjust exponent accordingly.


      for (; xc[0] == 0; xc.splice(0, 1), --ye); // Zero?


      if (!xc[0]) {
        // Following IEEE 754 (2008) 6.3,
        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
        y.s = ROUNDING_MODE == 3 ? -1 : 1;
        y.c = [y.e = 0];
        return y;
      } // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
      // for finite x and y.


      return normalise(y, xc, ye);
    };
    /*
     *   n % 0 =  N
     *   n % N =  N
     *   n % I =  n
     *   0 % n =  0
     *  -0 % n = -0
     *   0 % 0 =  N
     *   0 % N =  N
     *   0 % I =  0
     *   N % n =  N
     *   N % 0 =  N
     *   N % N =  N
     *   N % I =  N
     *   I % n =  N
     *   I % 0 =  N
     *   I % N =  N
     *   I % I =  N
     *
     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
     * BigNumber(y, b). The result depends on the value of MODULO_MODE.
     */


    P.modulo = P.mod = function (y, b) {
      var q,
          s,
          x = this;
      y = new BigNumber(y, b); // Return NaN if x is Infinity or NaN, or y is NaN or zero.

      if (!x.c || !y.s || y.c && !y.c[0]) {
        return new BigNumber(NaN); // Return x if y is Infinity or x is zero.
      } else if (!y.c || x.c && !x.c[0]) {
        return new BigNumber(x);
      }

      if (MODULO_MODE == 9) {
        // Euclidian division: q = sign(y) * floor(x / abs(y))
        // r = x - qy    where  0 <= r < abs(y)
        s = y.s;
        y.s = 1;
        q = div(x, y, 0, 3);
        y.s = s;
        q.s *= s;
      } else {
        q = div(x, y, 0, MODULO_MODE);
      }

      y = x.minus(q.times(y)); // To match JavaScript %, ensure sign of zero is sign of dividend.

      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;
      return y;
    };
    /*
     *  n * 0 = 0
     *  n * N = N
     *  n * I = I
     *  0 * n = 0
     *  0 * 0 = 0
     *  0 * N = N
     *  0 * I = N
     *  N * n = N
     *  N * 0 = N
     *  N * N = N
     *  N * I = N
     *  I * n = I
     *  I * 0 = N
     *  I * N = N
     *  I * I = I
     *
     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value
     * of BigNumber(y, b).
     */


    P.multipliedBy = P.times = function (y, b) {
      var c,
          e,
          i,
          j,
          k,
          m,
          xcL,
          xlo,
          xhi,
          ycL,
          ylo,
          yhi,
          zc,
          base,
          sqrtBase,
          x = this,
          xc = x.c,
          yc = (y = new BigNumber(y, b)).c; // Either NaN, ±Infinity or ±0?

      if (!xc || !yc || !xc[0] || !yc[0]) {
        // Return NaN if either is NaN, or one is 0 and the other is Infinity.
        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
          y.c = y.e = y.s = null;
        } else {
          y.s *= x.s; // Return ±Infinity if either is ±Infinity.

          if (!xc || !yc) {
            y.c = y.e = null; // Return ±0 if either is ±0.
          } else {
            y.c = [0];
            y.e = 0;
          }
        }

        return y;
      }

      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
      y.s *= x.s;
      xcL = xc.length;
      ycL = yc.length; // Ensure xc points to longer array and xcL to its length.

      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i; // Initialise the result array with zeros.

      for (i = xcL + ycL, zc = []; i--; zc.push(0));

      base = BASE;
      sqrtBase = SQRT_BASE;

      for (i = ycL; --i >= 0;) {
        c = 0;
        ylo = yc[i] % sqrtBase;
        yhi = yc[i] / sqrtBase | 0;

        for (k = xcL, j = i + k; j > i;) {
          xlo = xc[--k] % sqrtBase;
          xhi = xc[k] / sqrtBase | 0;
          m = yhi * xlo + xhi * ylo;
          xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;
          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
          zc[j--] = xlo % base;
        }

        zc[j] = c;
      }

      if (c) {
        ++e;
      } else {
        zc.splice(0, 1);
      }

      return normalise(y, zc, e);
    };
    /*
     * Return a new BigNumber whose value is the value of this BigNumber negated,
     * i.e. multiplied by -1.
     */


    P.negated = function () {
      var x = new BigNumber(this);
      x.s = -x.s || null;
      return x;
    };
    /*
     *  n + 0 = n
     *  n + N = N
     *  n + I = I
     *  0 + n = n
     *  0 + 0 = 0
     *  0 + N = N
     *  0 + I = I
     *  N + n = N
     *  N + 0 = N
     *  N + N = N
     *  N + I = N
     *  I + n = I
     *  I + 0 = I
     *  I + N = N
     *  I + I = I
     *
     * Return a new BigNumber whose value is the value of this BigNumber plus the value of
     * BigNumber(y, b).
     */


    P.plus = function (y, b) {
      var t,
          x = this,
          a = x.s;
      y = new BigNumber(y, b);
      b = y.s; // Either NaN?

      if (!a || !b) return new BigNumber(NaN); // Signs differ?

      if (a != b) {
        y.s = -b;
        return x.minus(y);
      }

      var xe = x.e / LOG_BASE,
          ye = y.e / LOG_BASE,
          xc = x.c,
          yc = y.c;

      if (!xe || !ye) {
        // Return ±Infinity if either ±Infinity.
        if (!xc || !yc) return new BigNumber(a / 0); // Either zero?
        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.

        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);
      }

      xe = bitFloor(xe);
      ye = bitFloor(ye);
      xc = xc.slice(); // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.

      if (a = xe - ye) {
        if (a > 0) {
          ye = xe;
          t = yc;
        } else {
          a = -a;
          t = xc;
        }

        t.reverse();

        for (; a--; t.push(0));

        t.reverse();
      }

      a = xc.length;
      b = yc.length; // Point xc to the longer array, and b to the shorter length.

      if (a - b < 0) t = yc, yc = xc, xc = t, b = a; // Only start adding at yc.length - 1 as the further digits of xc can be ignored.

      for (a = 0; b;) {
        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
      }

      if (a) {
        xc = [a].concat(xc);
        ++ye;
      } // No need to check for zero, as +x + +y != 0 && -x + -y != 0
      // ye = MAX_EXP + 1 possible


      return normalise(y, xc, ye);
    };
    /*
     * If sd is undefined or null or true or false, return the number of significant digits of
     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
     * If sd is true include integer-part trailing zeros in the count.
     *
     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this
     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or
     * ROUNDING_MODE if rm is omitted.
     *
     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.
     *                     boolean: whether to count integer-part trailing zeros: true or false.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
     */


    P.precision = P.sd = function (sd, rm) {
      var c,
          n,
          v,
          x = this;

      if (sd != null && sd !== !!sd) {
        intCheck(sd, 1, MAX);
        if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);
        return round(new BigNumber(x), sd, rm);
      }

      if (!(c = x.c)) return null;
      v = c.length - 1;
      n = v * LOG_BASE + 1;

      if (v = c[v]) {
        // Subtract the number of trailing zeros of the last element.
        for (; v % 10 == 0; v /= 10, n--); // Add the number of digits of the first element.


        for (v = c[0]; v >= 10; v /= 10, n++);
      }

      if (sd && x.e + 1 > n) n = x.e + 1;
      return n;
    };
    /*
     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
     *
     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'
     */


    P.shiftedBy = function (k) {
      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
      return this.times('1e' + k);
    };
    /*
     *  sqrt(-n) =  N
     *  sqrt(N) =  N
     *  sqrt(-I) =  N
     *  sqrt(I) =  I
     *  sqrt(0) =  0
     *  sqrt(-0) = -0
     *
     * Return a new BigNumber whose value is the square root of the value of this BigNumber,
     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
     */


    P.squareRoot = P.sqrt = function () {
      var m,
          n,
          r,
          rep,
          t,
          x = this,
          c = x.c,
          s = x.s,
          e = x.e,
          dp = DECIMAL_PLACES + 4,
          half = new BigNumber('0.5'); // Negative/NaN/Infinity/zero?

      if (s !== 1 || !c || !c[0]) {
        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
      } // Initial estimate.


      s = Math.sqrt(+valueOf(x)); // Math.sqrt underflow/overflow?
      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.

      if (s == 0 || s == 1 / 0) {
        n = coeffToString(c);
        if ((n.length + e) % 2 == 0) n += '0';
        s = Math.sqrt(+n);
        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);

        if (s == 1 / 0) {
          n = '1e' + e;
        } else {
          n = s.toExponential();
          n = n.slice(0, n.indexOf('e') + 1) + e;
        }

        r = new BigNumber(n);
      } else {
        r = new BigNumber(s + '');
      } // Check for zero.
      // r could be zero if MIN_EXP is changed after the this value was created.
      // This would cause a division by zero (x/t) and hence Infinity below, which would cause
      // coeffToString to throw.


      if (r.c[0]) {
        e = r.e;
        s = e + dp;
        if (s < 3) s = 0; // Newton-Raphson iteration.

        for (;;) {
          t = r;
          r = half.times(t.plus(div(x, t, dp, 1)));

          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {
            // The exponent of r may here be one less than the final result exponent,
            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits
            // are indexed correctly.
            if (r.e < e) --s;
            n = n.slice(s - 3, s + 1); // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
            // iteration.

            if (n == '9999' || !rep && n == '4999') {
              // On the first iteration only, check to see if rounding up gives the
              // exact result as the nines may infinitely repeat.
              if (!rep) {
                round(t, t.e + DECIMAL_PLACES + 2, 0);

                if (t.times(t).eq(x)) {
                  r = t;
                  break;
                }
              }

              dp += 4;
              s += 4;
              rep = 1;
            } else {
              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
              // result. If not, then there are further digits and m will be truthy.
              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {
                // Truncate to the first rounding digit.
                round(r, r.e + DECIMAL_PLACES + 2, 1);
                m = !r.times(r).eq(x);
              }

              break;
            }
          }
        }
      }

      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
    };
    /*
     * Return a string representing the value of this BigNumber in exponential notation and
     * rounded using ROUNDING_MODE to dp fixed decimal places.
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     */


    P.toExponential = function (dp, rm) {
      if (dp != null) {
        intCheck(dp, 0, MAX);
        dp++;
      }

      return format(this, dp, rm, 1);
    };
    /*
     * Return a string representing the value of this BigNumber in fixed-point notation rounding
     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
     *
     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
     * but e.g. (-0.00001).toFixed(0) is '-0'.
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     */


    P.toFixed = function (dp, rm) {
      if (dp != null) {
        intCheck(dp, 0, MAX);
        dp = dp + this.e + 1;
      }

      return format(this, dp, rm);
    };
    /*
     * Return a string representing the value of this BigNumber in fixed-point notation rounded
     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
     * of the format or FORMAT object (see BigNumber.set).
     *
     * The formatting object may contain some or all of the properties shown below.
     *
     * FORMAT = {
     *   prefix: '',
     *   groupSize: 3,
     *   secondaryGroupSize: 0,
     *   groupSeparator: ',',
     *   decimalSeparator: '.',
     *   fractionGroupSize: 0,
     *   fractionGroupSeparator: '\xA0',      // non-breaking space
     *   suffix: ''
     * };
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     * [format] {object} Formatting options. See FORMAT pbject above.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     * '[BigNumber Error] Argument not an object: {format}'
     */


    P.toFormat = function (dp, rm, format) {
      var str,
          x = this;

      if (format == null) {
        if (dp != null && rm && typeof rm == 'object') {
          format = rm;
          rm = null;
        } else if (dp && typeof dp == 'object') {
          format = dp;
          dp = rm = null;
        } else {
          format = FORMAT;
        }
      } else if (typeof format != 'object') {
        throw Error(bignumberError + 'Argument not an object: ' + format);
      }

      str = x.toFixed(dp, rm);

      if (x.c) {
        var i,
            arr = str.split('.'),
            g1 = +format.groupSize,
            g2 = +format.secondaryGroupSize,
            groupSeparator = format.groupSeparator || '',
            intPart = arr[0],
            fractionPart = arr[1],
            isNeg = x.s < 0,
            intDigits = isNeg ? intPart.slice(1) : intPart,
            len = intDigits.length;
        if (g2) i = g1, g1 = g2, g2 = i, len -= i;

        if (g1 > 0 && len > 0) {
          i = len % g1 || g1;
          intPart = intDigits.substr(0, i);

          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);

          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);
          if (isNeg) intPart = '-' + intPart;
        }

        str = fractionPart ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize) ? fractionPart.replace(new RegExp('\\d{' + g2 + '}\\B', 'g'), '$&' + (format.fractionGroupSeparator || '')) : fractionPart) : intPart;
      }

      return (format.prefix || '') + str + (format.suffix || '');
    };
    /*
     * Return an array of two BigNumbers representing the value of this BigNumber as a simple
     * fraction with an integer numerator and an integer denominator.
     * The denominator will be a positive non-zero value less than or equal to the specified
     * maximum denominator. If a maximum denominator is not specified, the denominator will be
     * the lowest value necessary to represent the number exactly.
     *
     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.
     *
     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'
     */


    P.toFraction = function (md) {
      var d,
          d0,
          d1,
          d2,
          e,
          exp,
          n,
          n0,
          n1,
          q,
          r,
          s,
          x = this,
          xc = x.c;

      if (md != null) {
        n = new BigNumber(md); // Throw if md is less than one or is not an integer, unless it is Infinity.

        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {
          throw Error(bignumberError + 'Argument ' + (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));
        }
      }

      if (!xc) return new BigNumber(x);
      d = new BigNumber(ONE);
      n1 = d0 = new BigNumber(ONE);
      d1 = n0 = new BigNumber(ONE);
      s = coeffToString(xc); // Determine initial denominator.
      // d is a power of 10 and the minimum max denominator that specifies the value exactly.

      e = d.e = s.length - x.e - 1;
      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
      md = !md || n.comparedTo(d) > 0 ? e > 0 ? d : n1 : n;
      exp = MAX_EXP;
      MAX_EXP = 1 / 0;
      n = new BigNumber(s); // n0 = d1 = 0

      n0.c[0] = 0;

      for (;;) {
        q = div(n, d, 0, 1);
        d2 = d0.plus(q.times(d1));
        if (d2.comparedTo(md) == 1) break;
        d0 = d1;
        d1 = d2;
        n1 = n0.plus(q.times(d2 = n1));
        n0 = d2;
        d = n.minus(q.times(d2 = d));
        n = d2;
      }

      d2 = div(md.minus(d0), d1, 0, 1);
      n0 = n0.plus(d2.times(n1));
      d0 = d0.plus(d2.times(d1));
      n0.s = n1.s = x.s;
      e = e * 2; // Determine which fraction is closer to x, n0/d0 or n1/d1

      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];
      MAX_EXP = exp;
      return r;
    };
    /*
     * Return the value of this BigNumber converted to a number primitive.
     */


    P.toNumber = function () {
      return +valueOf(this);
    };
    /*
     * Return a string representing the value of this BigNumber rounded to sd significant digits
     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
     * necessary to represent the integer part of the value in fixed-point notation, then use
     * exponential notation.
     *
     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
     */


    P.toPrecision = function (sd, rm) {
      if (sd != null) intCheck(sd, 1, MAX);
      return format(this, sd, rm, 2);
    };
    /*
     * Return a string representing the value of this BigNumber in base b, or base 10 if b is
     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
     * TO_EXP_NEG, return exponential notation.
     *
     * [b] {number} Integer, 2 to ALPHABET.length inclusive.
     *
     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
     */


    P.toString = function (b) {
      var str,
          n = this,
          s = n.s,
          e = n.e; // Infinity or NaN?

      if (e === null) {
        if (s) {
          str = 'Infinity';
          if (s < 0) str = '-' + str;
        } else {
          str = 'NaN';
        }
      } else {
        if (b == null) {
          str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(coeffToString(n.c), e) : toFixedPoint(coeffToString(n.c), e, '0');
        } else if (b === 10) {
          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);
          str = toFixedPoint(coeffToString(n.c), n.e, '0');
        } else {
          intCheck(b, 2, ALPHABET.length, 'Base');
          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);
        }

        if (s < 0 && n.c[0]) str = '-' + str;
      }

      return str;
    };
    /*
     * Return as toString, but do not accept a base argument, and include the minus sign for
     * negative zero.
     */


    P.valueOf = P.toJSON = function () {
      return valueOf(this);
    };

    P._isBigNumber = true;
    if (configObject != null) BigNumber.set(configObject);
    return BigNumber;
  } // PRIVATE HELPER FUNCTIONS
  // These functions don't need access to variables,
  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.


  function bitFloor(n) {
    var i = n | 0;
    return n > 0 || n === i ? i : i - 1;
  } // Return a coefficient array as a string of base 10 digits.


  function coeffToString(a) {
    var s,
        z,
        i = 1,
        j = a.length,
        r = a[0] + '';

    for (; i < j;) {
      s = a[i++] + '';
      z = LOG_BASE - s.length;

      for (; z--; s = '0' + s);

      r += s;
    } // Determine trailing zeros.


    for (j = r.length; r.charCodeAt(--j) === 48;);

    return r.slice(0, j + 1 || 1);
  } // Compare the value of BigNumbers x and y.


  function compare(x, y) {
    var a,
        b,
        xc = x.c,
        yc = y.c,
        i = x.s,
        j = y.s,
        k = x.e,
        l = y.e; // Either NaN?

    if (!i || !j) return null;
    a = xc && !xc[0];
    b = yc && !yc[0]; // Either zero?

    if (a || b) return a ? b ? 0 : -j : i; // Signs differ?

    if (i != j) return i;
    a = i < 0;
    b = k == l; // Either Infinity?

    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1; // Compare exponents.

    if (!b) return k > l ^ a ? 1 : -1;
    j = (k = xc.length) < (l = yc.length) ? k : l; // Compare digit by digit.

    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1; // Compare lengths.


    return k == l ? 0 : k > l ^ a ? 1 : -1;
  }
  /*
   * Check that n is a primitive number, an integer, and in range, otherwise throw.
   */


  function intCheck(n, min, max, name) {
    if (n < min || n > max || n !== mathfloor(n)) {
      throw Error(bignumberError + (name || 'Argument') + (typeof n == 'number' ? n < min || n > max ? ' out of range: ' : ' not an integer: ' : ' not a primitive number: ') + String(n));
    }
  } // Assumes finite n.


  function isOdd(n) {
    var k = n.c.length - 1;
    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
  }

  function toExponential(str, e) {
    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) + (e < 0 ? 'e' : 'e+') + e;
  }

  function toFixedPoint(str, e, z) {
    var len, zs; // Negative exponent?

    if (e < 0) {
      // Prepend zeros.
      for (zs = z + '.'; ++e; zs += z);

      str = zs + str; // Positive exponent
    } else {
      len = str.length; // Append zeros.

      if (++e > len) {
        for (zs = z, e -= len; --e; zs += z);

        str += zs;
      } else if (e < len) {
        str = str.slice(0, e) + '.' + str.slice(e);
      }
    }

    return str;
  } // EXPORT


  BigNumber = clone();
  BigNumber['default'] = BigNumber.BigNumber = BigNumber; // AMD.

  if (true) {
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
      return BigNumber;
    }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // Node.js and other environments that support module.exports.
  } else {}
})(void 0);

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const {
  FILE_SEPARATOR
} = __webpack_require__(34);

const loadMfsRoot = __webpack_require__(269);

const toPathComponents = __webpack_require__(157);

const exporter = __webpack_require__(33);

const errCode = __webpack_require__(2);

const IPFS_PREFIX = 'ipfs';

const toMfsPath = async (context, path) => {
  const outputArray = Array.isArray(path);
  let paths = Array.isArray(path) ? path : [path];
  const root = await loadMfsRoot(context);
  paths = paths.map(path => {
    path = (path || '').trim();
    path = path.replace(/(\/\/+)/g, '/');

    if (path.endsWith('/') && path.length > 1) {
      path = path.substring(0, path.length - 1);
    }

    if (!path) {
      throw errCode(new Error('paths must not be empty'), 'ERR_NO_PATH');
    }

    if (path.substring(0, 1) !== FILE_SEPARATOR) {
      throw errCode(new Error("paths must start with a leading ".concat(FILE_SEPARATOR)), 'ERR_INVALID_PATH');
    }

    if (path.substring(path.length - FILE_SEPARATOR.length) === FILE_SEPARATOR) {
      path = path.substring(0, path.length - FILE_SEPARATOR.length);
    }

    const pathComponents = toPathComponents(path);

    if (pathComponents[0] === IPFS_PREFIX) {
      // e.g. /ipfs/QMfoo or /ipfs/Qmfoo/sub/path
      let mfsDirectory;

      if (pathComponents.length === 2) {
        mfsDirectory = "".concat(FILE_SEPARATOR).concat(pathComponents.join(FILE_SEPARATOR));
      } else {
        mfsDirectory = "".concat(FILE_SEPARATOR).concat(pathComponents.slice(0, pathComponents.length - 1).join(FILE_SEPARATOR));
      }

      return {
        type: 'ipfs',
        depth: pathComponents.length - 2,
        mfsPath: "".concat(FILE_SEPARATOR).concat(pathComponents.join(FILE_SEPARATOR)),
        mfsDirectory,
        parts: pathComponents,
        path: "".concat(FILE_SEPARATOR).concat(pathComponents.join(FILE_SEPARATOR)),
        name: pathComponents[pathComponents.length - 1]
      };
    }

    const mfsPath = "/".concat(IPFS_PREFIX, "/").concat(root).concat(pathComponents.length ? '/' + pathComponents.join(FILE_SEPARATOR) : '');
    const mfsDirectory = "/".concat(IPFS_PREFIX, "/").concat(root, "/").concat(pathComponents.slice(0, pathComponents.length - 1).join(FILE_SEPARATOR));
    return {
      type: 'mfs',
      depth: pathComponents.length,
      mfsDirectory,
      mfsPath,
      parts: pathComponents,
      path: "".concat(FILE_SEPARATOR).concat(pathComponents.join(FILE_SEPARATOR)),
      name: pathComponents[pathComponents.length - 1]
    };
  });
  await Promise.all(paths.map(async path => {
    const cidPath = path.type === 'mfs' ? path.mfsPath : path.path;

    try {
      const res = await exporter(cidPath, context.ipld);
      path.cid = res.cid;
      path.mfsPath = "/ipfs/".concat(res.path);
      path.unixfs = res.unixfs;
      path.content = res.content;
    } catch (err) {
      if (err.code !== 'ERR_NOT_FOUND') {
        throw err;
      }
    }

    path.exists = Boolean(path.cid);
  }));

  if (outputArray) {
    return paths;
  }

  return paths[0];
};

module.exports = toMfsPath;

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const assert = __webpack_require__(13);

const PeerInfo = __webpack_require__(17);

const PeerId = __webpack_require__(9);

const protons = __webpack_require__(24);

const {
  Record
} = __webpack_require__(68);

const pbm = protons(__webpack_require__(916));
const MESSAGE_TYPE = pbm.Message.MessageType;
const CONNECTION_TYPE = pbm.Message.ConnectionType;
/**
 * Represents a single DHT control message.
 */

class Message {
  /**
   * @param {MessageType} type
   * @param {Buffer} key
   * @param {number} level
   */
  constructor(type, key, level) {
    if (key) {
      assert(Buffer.isBuffer(key));
    }

    this.type = type;
    this.key = key;
    this._clusterLevelRaw = level;
    this.closerPeers = [];
    this.providerPeers = [];
    this.record = null;
  }
  /**
   * @type {number}
   */


  get clusterLevel() {
    const level = this._clusterLevelRaw - 1;

    if (level < 0) {
      return 0;
    }

    return level;
  }

  set clusterLevel(level) {
    this._clusterLevelRaw = level;
  }
  /**
   * Encode into protobuf
   * @returns {Buffer}
   */


  serialize() {
    const obj = {
      key: this.key,
      type: this.type,
      clusterLevelRaw: this._clusterLevelRaw,
      closerPeers: this.closerPeers.map(toPbPeer),
      providerPeers: this.providerPeers.map(toPbPeer)
    };

    if (this.record) {
      if (Buffer.isBuffer(this.record)) {
        obj.record = this.record;
      } else {
        obj.record = this.record.serialize();
      }
    }

    return pbm.Message.encode(obj);
  }
  /**
   * Decode from protobuf
   *
   * @param {Buffer} raw
   * @returns {Message}
   */


  static deserialize(raw) {
    const dec = pbm.Message.decode(raw);
    const msg = new Message(dec.type, dec.key, dec.clusterLevelRaw);
    msg.closerPeers = dec.closerPeers.map(fromPbPeer);
    msg.providerPeers = dec.providerPeers.map(fromPbPeer);

    if (dec.record) {
      msg.record = Record.deserialize(dec.record);
    }

    return msg;
  }

}

Message.TYPES = MESSAGE_TYPE;
Message.CONNECTION_TYPES = CONNECTION_TYPE;

function toPbPeer(peer) {
  const res = {
    id: peer.id.id,
    addrs: peer.multiaddrs.toArray().map(m => m.buffer)
  };

  if (peer.isConnected()) {
    res.connection = CONNECTION_TYPE.CONNECTED;
  } else {
    res.connection = CONNECTION_TYPE.NOT_CONNECTED;
  }

  return res;
}

function fromPbPeer(peer) {
  const info = new PeerInfo(new PeerId(peer.id));
  peer.addrs.forEach(a => info.multiaddrs.add(a));
  return info;
}

module.exports = Message;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var basex = __webpack_require__(378);

var ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';
module.exports = basex(ALPHABET);

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Javascript implementation of Abstract Syntax Notation Number One.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2015 Digital Bazaar, Inc.
 *
 * An API for storing data using the Abstract Syntax Notation Number One
 * format using DER (Distinguished Encoding Rules) encoding. This encoding is
 * commonly used to store data for PKI, i.e. X.509 Certificates, and this
 * implementation exists for that purpose.
 *
 * Abstract Syntax Notation Number One (ASN.1) is used to define the abstract
 * syntax of information without restricting the way the information is encoded
 * for transmission. It provides a standard that allows for open systems
 * communication. ASN.1 defines the syntax of information data and a number of
 * simple data types as well as a notation for describing them and specifying
 * values for them.
 *
 * The RSA algorithm creates public and private keys that are often stored in
 * X.509 or PKCS#X formats -- which use ASN.1 (encoded in DER format). This
 * class provides the most basic functionality required to store and load DSA
 * keys that are encoded according to ASN.1.
 *
 * The most common binary encodings for ASN.1 are BER (Basic Encoding Rules)
 * and DER (Distinguished Encoding Rules). DER is just a subset of BER that
 * has stricter requirements for how data must be encoded.
 *
 * Each ASN.1 structure has a tag (a byte identifying the ASN.1 structure type)
 * and a byte array for the value of this ASN1 structure which may be data or a
 * list of ASN.1 structures.
 *
 * Each ASN.1 structure using BER is (Tag-Length-Value):
 *
 * | byte 0 | bytes X | bytes Y |
 * |--------|---------|----------
 * |  tag   | length  |  value  |
 *
 * ASN.1 allows for tags to be of "High-tag-number form" which allows a tag to
 * be two or more octets, but that is not supported by this class. A tag is
 * only 1 byte. Bits 1-5 give the tag number (ie the data type within a
 * particular 'class'), 6 indicates whether or not the ASN.1 value is
 * constructed from other ASN.1 values, and bits 7 and 8 give the 'class'. If
 * bits 7 and 8 are both zero, the class is UNIVERSAL. If only bit 7 is set,
 * then the class is APPLICATION. If only bit 8 is set, then the class is
 * CONTEXT_SPECIFIC. If both bits 7 and 8 are set, then the class is PRIVATE.
 * The tag numbers for the data types for the class UNIVERSAL are listed below:
 *
 * UNIVERSAL 0 Reserved for use by the encoding rules
 * UNIVERSAL 1 Boolean type
 * UNIVERSAL 2 Integer type
 * UNIVERSAL 3 Bitstring type
 * UNIVERSAL 4 Octetstring type
 * UNIVERSAL 5 Null type
 * UNIVERSAL 6 Object identifier type
 * UNIVERSAL 7 Object descriptor type
 * UNIVERSAL 8 External type and Instance-of type
 * UNIVERSAL 9 Real type
 * UNIVERSAL 10 Enumerated type
 * UNIVERSAL 11 Embedded-pdv type
 * UNIVERSAL 12 UTF8String type
 * UNIVERSAL 13 Relative object identifier type
 * UNIVERSAL 14-15 Reserved for future editions
 * UNIVERSAL 16 Sequence and Sequence-of types
 * UNIVERSAL 17 Set and Set-of types
 * UNIVERSAL 18-22, 25-30 Character string types
 * UNIVERSAL 23-24 Time types
 *
 * The length of an ASN.1 structure is specified after the tag identifier.
 * There is a definite form and an indefinite form. The indefinite form may
 * be used if the encoding is constructed and not all immediately available.
 * The indefinite form is encoded using a length byte with only the 8th bit
 * set. The end of the constructed object is marked using end-of-contents
 * octets (two zero bytes).
 *
 * The definite form looks like this:
 *
 * The length may take up 1 or more bytes, it depends on the length of the
 * value of the ASN.1 structure. DER encoding requires that if the ASN.1
 * structure has a value that has a length greater than 127, more than 1 byte
 * will be used to store its length, otherwise just one byte will be used.
 * This is strict.
 *
 * In the case that the length of the ASN.1 value is less than 127, 1 octet
 * (byte) is used to store the "short form" length. The 8th bit has a value of
 * 0 indicating the length is "short form" and not "long form" and bits 7-1
 * give the length of the data. (The 8th bit is the left-most, most significant
 * bit: also known as big endian or network format).
 *
 * In the case that the length of the ASN.1 value is greater than 127, 2 to
 * 127 octets (bytes) are used to store the "long form" length. The first
 * byte's 8th bit is set to 1 to indicate the length is "long form." Bits 7-1
 * give the number of additional octets. All following octets are in base 256
 * with the most significant digit first (typical big-endian binary unsigned
 * integer storage). So, for instance, if the length of a value was 257, the
 * first byte would be set to:
 *
 * 10000010 = 130 = 0x82.
 *
 * This indicates there are 2 octets (base 256) for the length. The second and
 * third bytes (the octets just mentioned) would store the length in base 256:
 *
 * octet 2: 00000001 = 1 * 256^1 = 256
 * octet 3: 00000001 = 1 * 256^0 = 1
 * total = 257
 *
 * The algorithm for converting a js integer value of 257 to base-256 is:
 *
 * var value = 257;
 * var bytes = [];
 * bytes[0] = (value >>> 8) & 0xFF; // most significant byte first
 * bytes[1] = value & 0xFF;        // least significant byte last
 *
 * On the ASN.1 UNIVERSAL Object Identifier (OID) type:
 *
 * An OID can be written like: "value1.value2.value3...valueN"
 *
 * The DER encoding rules:
 *
 * The first byte has the value 40 * value1 + value2.
 * The following bytes, if any, encode the remaining values. Each value is
 * encoded in base 128, most significant digit first (big endian), with as
 * few digits as possible, and the most significant bit of each byte set
 * to 1 except the last in each value's encoding. For example: Given the
 * OID "1.2.840.113549", its DER encoding is (remember each byte except the
 * last one in each encoding is OR'd with 0x80):
 *
 * byte 1: 40 * 1 + 2 = 42 = 0x2A.
 * bytes 2-3: 128 * 6 + 72 = 840 = 6 72 = 6 72 = 0x0648 = 0x8648
 * bytes 4-6: 16384 * 6 + 128 * 119 + 13 = 6 119 13 = 0x06770D = 0x86F70D
 *
 * The final value is: 0x2A864886F70D.
 * The full OID (including ASN.1 tag and length of 6 bytes) is:
 * 0x06062A864886F70D
 */
var forge = __webpack_require__(7);

__webpack_require__(10);

__webpack_require__(45);
/* ASN.1 API */


var asn1 = module.exports = forge.asn1 = forge.asn1 || {};
/**
 * ASN.1 classes.
 */

asn1.Class = {
  UNIVERSAL: 0x00,
  APPLICATION: 0x40,
  CONTEXT_SPECIFIC: 0x80,
  PRIVATE: 0xC0
};
/**
 * ASN.1 types. Not all types are supported by this implementation, only
 * those necessary to implement a simple PKI are implemented.
 */

asn1.Type = {
  NONE: 0,
  BOOLEAN: 1,
  INTEGER: 2,
  BITSTRING: 3,
  OCTETSTRING: 4,
  NULL: 5,
  OID: 6,
  ODESC: 7,
  EXTERNAL: 8,
  REAL: 9,
  ENUMERATED: 10,
  EMBEDDED: 11,
  UTF8: 12,
  ROID: 13,
  SEQUENCE: 16,
  SET: 17,
  PRINTABLESTRING: 19,
  IA5STRING: 22,
  UTCTIME: 23,
  GENERALIZEDTIME: 24,
  BMPSTRING: 30
};
/**
 * Creates a new asn1 object.
 *
 * @param tagClass the tag class for the object.
 * @param type the data type (tag number) for the object.
 * @param constructed true if the asn1 object is in constructed form.
 * @param value the value for the object, if it is not constructed.
 * @param [options] the options to use:
 *          [bitStringContents] the plain BIT STRING content including padding
 *            byte.
 *
 * @return the asn1 object.
 */

asn1.create = function (tagClass, type, constructed, value, options) {
  /* An asn1 object has a tagClass, a type, a constructed flag, and a
    value. The value's type depends on the constructed flag. If
    constructed, it will contain a list of other asn1 objects. If not,
    it will contain the ASN.1 value as an array of bytes formatted
    according to the ASN.1 data type. */
  // remove undefined values
  if (forge.util.isArray(value)) {
    var tmp = [];

    for (var i = 0; i < value.length; ++i) {
      if (value[i] !== undefined) {
        tmp.push(value[i]);
      }
    }

    value = tmp;
  }

  var obj = {
    tagClass: tagClass,
    type: type,
    constructed: constructed,
    composed: constructed || forge.util.isArray(value),
    value: value
  };

  if (options && 'bitStringContents' in options) {
    // TODO: copy byte buffer if it's a buffer not a string
    obj.bitStringContents = options.bitStringContents; // TODO: add readonly flag to avoid this overhead
    // save copy to detect changes

    obj.original = asn1.copy(obj);
  }

  return obj;
};
/**
 * Copies an asn1 object.
 *
 * @param obj the asn1 object.
 * @param [options] copy options:
 *          [excludeBitStringContents] true to not copy bitStringContents
 *
 * @return the a copy of the asn1 object.
 */


asn1.copy = function (obj, options) {
  var copy;

  if (forge.util.isArray(obj)) {
    copy = [];

    for (var i = 0; i < obj.length; ++i) {
      copy.push(asn1.copy(obj[i], options));
    }

    return copy;
  }

  if (typeof obj === 'string') {
    // TODO: copy byte buffer if it's a buffer not a string
    return obj;
  }

  copy = {
    tagClass: obj.tagClass,
    type: obj.type,
    constructed: obj.constructed,
    composed: obj.composed,
    value: asn1.copy(obj.value, options)
  };

  if (options && !options.excludeBitStringContents) {
    // TODO: copy byte buffer if it's a buffer not a string
    copy.bitStringContents = obj.bitStringContents;
  }

  return copy;
};
/**
 * Compares asn1 objects for equality.
 *
 * Note this function does not run in constant time.
 *
 * @param obj1 the first asn1 object.
 * @param obj2 the second asn1 object.
 * @param [options] compare options:
 *          [includeBitStringContents] true to compare bitStringContents
 *
 * @return true if the asn1 objects are equal.
 */


asn1.equals = function (obj1, obj2, options) {
  if (forge.util.isArray(obj1)) {
    if (!forge.util.isArray(obj2)) {
      return false;
    }

    if (obj1.length !== obj2.length) {
      return false;
    }

    for (var i = 0; i < obj1.length; ++i) {
      if (!asn1.equals(obj1[i], obj2[i])) {
        return false;
      }
    }

    return true;
  }

  if (typeof obj1 !== typeof obj2) {
    return false;
  }

  if (typeof obj1 === 'string') {
    return obj1 === obj2;
  }

  var equal = obj1.tagClass === obj2.tagClass && obj1.type === obj2.type && obj1.constructed === obj2.constructed && obj1.composed === obj2.composed && asn1.equals(obj1.value, obj2.value);

  if (options && options.includeBitStringContents) {
    equal = equal && obj1.bitStringContents === obj2.bitStringContents;
  }

  return equal;
};
/**
 * Gets the length of a BER-encoded ASN.1 value.
 *
 * In case the length is not specified, undefined is returned.
 *
 * @param b the BER-encoded ASN.1 byte buffer, starting with the first
 *          length byte.
 *
 * @return the length of the BER-encoded ASN.1 value or undefined.
 */


asn1.getBerValueLength = function (b) {
  // TODO: move this function and related DER/BER functions to a der.js
  // file; better abstract ASN.1 away from der/ber.
  var b2 = b.getByte();

  if (b2 === 0x80) {
    return undefined;
  } // see if the length is "short form" or "long form" (bit 8 set)


  var length;
  var longForm = b2 & 0x80;

  if (!longForm) {
    // length is just the first byte
    length = b2;
  } else {
    // the number of bytes the length is specified in bits 7 through 1
    // and each length byte is in big-endian base-256
    length = b.getInt((b2 & 0x7F) << 3);
  }

  return length;
};
/**
 * Check if the byte buffer has enough bytes. Throws an Error if not.
 *
 * @param bytes the byte buffer to parse from.
 * @param remaining the bytes remaining in the current parsing state.
 * @param n the number of bytes the buffer must have.
 */


function _checkBufferLength(bytes, remaining, n) {
  if (n > remaining) {
    var error = new Error('Too few bytes to parse DER.');
    error.available = bytes.length();
    error.remaining = remaining;
    error.requested = n;
    throw error;
  }
}
/**
 * Gets the length of a BER-encoded ASN.1 value.
 *
 * In case the length is not specified, undefined is returned.
 *
 * @param bytes the byte buffer to parse from.
 * @param remaining the bytes remaining in the current parsing state.
 *
 * @return the length of the BER-encoded ASN.1 value or undefined.
 */


var _getValueLength = function _getValueLength(bytes, remaining) {
  // TODO: move this function and related DER/BER functions to a der.js
  // file; better abstract ASN.1 away from der/ber.
  // fromDer already checked that this byte exists
  var b2 = bytes.getByte();
  remaining--;

  if (b2 === 0x80) {
    return undefined;
  } // see if the length is "short form" or "long form" (bit 8 set)


  var length;
  var longForm = b2 & 0x80;

  if (!longForm) {
    // length is just the first byte
    length = b2;
  } else {
    // the number of bytes the length is specified in bits 7 through 1
    // and each length byte is in big-endian base-256
    var longFormBytes = b2 & 0x7F;

    _checkBufferLength(bytes, remaining, longFormBytes);

    length = bytes.getInt(longFormBytes << 3);
  } // FIXME: this will only happen for 32 bit getInt with high bit set


  if (length < 0) {
    throw new Error('Negative length: ' + length);
  }

  return length;
};
/**
 * Parses an asn1 object from a byte buffer in DER format.
 *
 * @param bytes the byte buffer to parse from.
 * @param [strict] true to be strict when checking value lengths, false to
 *          allow truncated values (default: true).
 * @param [options] object with options or boolean strict flag
 *          [strict] true to be strict when checking value lengths, false to
 *            allow truncated values (default: true).
 *          [decodeBitStrings] true to attempt to decode the content of
 *            BIT STRINGs (not OCTET STRINGs) using strict mode. Note that
 *            without schema support to understand the data context this can
 *            erroneously decode values that happen to be valid ASN.1. This
 *            flag will be deprecated or removed as soon as schema support is
 *            available. (default: true)
 *
 * @return the parsed asn1 object.
 */


asn1.fromDer = function (bytes, options) {
  if (options === undefined) {
    options = {
      strict: true,
      decodeBitStrings: true
    };
  }

  if (typeof options === 'boolean') {
    options = {
      strict: options,
      decodeBitStrings: true
    };
  }

  if (!('strict' in options)) {
    options.strict = true;
  }

  if (!('decodeBitStrings' in options)) {
    options.decodeBitStrings = true;
  } // wrap in buffer if needed


  if (typeof bytes === 'string') {
    bytes = forge.util.createBuffer(bytes);
  }

  return _fromDer(bytes, bytes.length(), 0, options);
};
/**
 * Internal function to parse an asn1 object from a byte buffer in DER format.
 *
 * @param bytes the byte buffer to parse from.
 * @param remaining the number of bytes remaining for this chunk.
 * @param depth the current parsing depth.
 * @param options object with same options as fromDer().
 *
 * @return the parsed asn1 object.
 */


function _fromDer(bytes, remaining, depth, options) {
  // temporary storage for consumption calculations
  var start; // minimum length for ASN.1 DER structure is 2

  _checkBufferLength(bytes, remaining, 2); // get the first byte


  var b1 = bytes.getByte(); // consumed one byte

  remaining--; // get the tag class

  var tagClass = b1 & 0xC0; // get the type (bits 1-5)

  var type = b1 & 0x1F; // get the variable value length and adjust remaining bytes

  start = bytes.length();

  var length = _getValueLength(bytes, remaining);

  remaining -= start - bytes.length(); // ensure there are enough bytes to get the value

  if (length !== undefined && length > remaining) {
    if (options.strict) {
      var error = new Error('Too few bytes to read ASN.1 value.');
      error.available = bytes.length();
      error.remaining = remaining;
      error.requested = length;
      throw error;
    } // Note: be lenient with truncated values and use remaining state bytes


    length = remaining;
  } // value storage


  var value; // possible BIT STRING contents storage

  var bitStringContents; // constructed flag is bit 6 (32 = 0x20) of the first byte

  var constructed = (b1 & 0x20) === 0x20;

  if (constructed) {
    // parse child asn1 objects from the value
    value = [];

    if (length === undefined) {
      // asn1 object of indefinite length, read until end tag
      for (;;) {
        _checkBufferLength(bytes, remaining, 2);

        if (bytes.bytes(2) === String.fromCharCode(0, 0)) {
          bytes.getBytes(2);
          remaining -= 2;
          break;
        }

        start = bytes.length();
        value.push(_fromDer(bytes, remaining, depth + 1, options));
        remaining -= start - bytes.length();
      }
    } else {
      // parsing asn1 object of definite length
      while (length > 0) {
        start = bytes.length();
        value.push(_fromDer(bytes, length, depth + 1, options));
        remaining -= start - bytes.length();
        length -= start - bytes.length();
      }
    }
  } // if a BIT STRING, save the contents including padding


  if (value === undefined && tagClass === asn1.Class.UNIVERSAL && type === asn1.Type.BITSTRING) {
    bitStringContents = bytes.bytes(length);
  } // determine if a non-constructed value should be decoded as a composed
  // value that contains other ASN.1 objects. BIT STRINGs (and OCTET STRINGs)
  // can be used this way.


  if (value === undefined && options.decodeBitStrings && tagClass === asn1.Class.UNIVERSAL && // FIXME: OCTET STRINGs not yet supported here
  // .. other parts of forge expect to decode OCTET STRINGs manually
  type === asn1.Type.BITSTRING
  /*|| type === asn1.Type.OCTETSTRING*/
  && length > 1) {
    // save read position
    var savedRead = bytes.read;
    var savedRemaining = remaining;
    var unused = 0;

    if (type === asn1.Type.BITSTRING) {
      /* The first octet gives the number of bits by which the length of the
        bit string is less than the next multiple of eight (this is called
        the "number of unused bits").
         The second and following octets give the value of the bit string
        converted to an octet string. */
      _checkBufferLength(bytes, remaining, 1);

      unused = bytes.getByte();
      remaining--;
    } // if all bits are used, maybe the BIT/OCTET STRING holds ASN.1 objs


    if (unused === 0) {
      try {
        // attempt to parse child asn1 object from the value
        // (stored in array to signal composed value)
        start = bytes.length();
        var subOptions = {
          // enforce strict mode to avoid parsing ASN.1 from plain data
          verbose: options.verbose,
          strict: true,
          decodeBitStrings: true
        };

        var composed = _fromDer(bytes, remaining, depth + 1, subOptions);

        var used = start - bytes.length();
        remaining -= used;

        if (type == asn1.Type.BITSTRING) {
          used++;
        } // if the data all decoded and the class indicates UNIVERSAL or
        // CONTEXT_SPECIFIC then assume we've got an encapsulated ASN.1 object


        var tc = composed.tagClass;

        if (used === length && (tc === asn1.Class.UNIVERSAL || tc === asn1.Class.CONTEXT_SPECIFIC)) {
          value = [composed];
        }
      } catch (ex) {}
    }

    if (value === undefined) {
      // restore read position
      bytes.read = savedRead;
      remaining = savedRemaining;
    }
  }

  if (value === undefined) {
    // asn1 not constructed or composed, get raw value
    // TODO: do DER to OID conversion and vice-versa in .toDer?
    if (length === undefined) {
      if (options.strict) {
        throw new Error('Non-constructed ASN.1 object of indefinite length.');
      } // be lenient and use remaining state bytes


      length = remaining;
    }

    if (type === asn1.Type.BMPSTRING) {
      value = '';

      for (; length > 0; length -= 2) {
        _checkBufferLength(bytes, remaining, 2);

        value += String.fromCharCode(bytes.getInt16());
        remaining -= 2;
      }
    } else {
      value = bytes.getBytes(length);
    }
  } // add BIT STRING contents if available


  var asn1Options = bitStringContents === undefined ? null : {
    bitStringContents: bitStringContents
  }; // create and return asn1 object

  return asn1.create(tagClass, type, constructed, value, asn1Options);
}
/**
 * Converts the given asn1 object to a buffer of bytes in DER format.
 *
 * @param asn1 the asn1 object to convert to bytes.
 *
 * @return the buffer of bytes.
 */


asn1.toDer = function (obj) {
  var bytes = forge.util.createBuffer(); // build the first byte

  var b1 = obj.tagClass | obj.type; // for storing the ASN.1 value

  var value = forge.util.createBuffer(); // use BIT STRING contents if available and data not changed

  var useBitStringContents = false;

  if ('bitStringContents' in obj) {
    useBitStringContents = true;

    if (obj.original) {
      useBitStringContents = asn1.equals(obj, obj.original);
    }
  }

  if (useBitStringContents) {
    value.putBytes(obj.bitStringContents);
  } else if (obj.composed) {
    // if composed, use each child asn1 object's DER bytes as value
    // turn on 6th bit (0x20 = 32) to indicate asn1 is constructed
    // from other asn1 objects
    if (obj.constructed) {
      b1 |= 0x20;
    } else {
      // type is a bit string, add unused bits of 0x00
      value.putByte(0x00);
    } // add all of the child DER bytes together


    for (var i = 0; i < obj.value.length; ++i) {
      if (obj.value[i] !== undefined) {
        value.putBuffer(asn1.toDer(obj.value[i]));
      }
    }
  } else {
    // use asn1.value directly
    if (obj.type === asn1.Type.BMPSTRING) {
      for (var i = 0; i < obj.value.length; ++i) {
        value.putInt16(obj.value.charCodeAt(i));
      }
    } else {
      // ensure integer is minimally-encoded
      // TODO: should all leading bytes be stripped vs just one?
      // .. ex '00 00 01' => '01'?
      if (obj.type === asn1.Type.INTEGER && obj.value.length > 1 && ( // leading 0x00 for positive integer
      obj.value.charCodeAt(0) === 0 && (obj.value.charCodeAt(1) & 0x80) === 0 || // leading 0xFF for negative integer
      obj.value.charCodeAt(0) === 0xFF && (obj.value.charCodeAt(1) & 0x80) === 0x80)) {
        value.putBytes(obj.value.substr(1));
      } else {
        value.putBytes(obj.value);
      }
    }
  } // add tag byte


  bytes.putByte(b1); // use "short form" encoding

  if (value.length() <= 127) {
    // one byte describes the length
    // bit 8 = 0 and bits 7-1 = length
    bytes.putByte(value.length() & 0x7F);
  } else {
    // use "long form" encoding
    // 2 to 127 bytes describe the length
    // first byte: bit 8 = 1 and bits 7-1 = # of additional bytes
    // other bytes: length in base 256, big-endian
    var len = value.length();
    var lenBytes = '';

    do {
      lenBytes += String.fromCharCode(len & 0xFF);
      len = len >>> 8;
    } while (len > 0); // set first byte to # bytes used to store the length and turn on
    // bit 8 to indicate long-form length is used


    bytes.putByte(lenBytes.length | 0x80); // concatenate length bytes in reverse since they were generated
    // little endian and we need big endian

    for (var i = lenBytes.length - 1; i >= 0; --i) {
      bytes.putByte(lenBytes.charCodeAt(i));
    }
  } // concatenate value bytes


  bytes.putBuffer(value);
  return bytes;
};
/**
 * Converts an OID dot-separated string to a byte buffer. The byte buffer
 * contains only the DER-encoded value, not any tag or length bytes.
 *
 * @param oid the OID dot-separated string.
 *
 * @return the byte buffer.
 */


asn1.oidToDer = function (oid) {
  // split OID into individual values
  var values = oid.split('.');
  var bytes = forge.util.createBuffer(); // first byte is 40 * value1 + value2

  bytes.putByte(40 * parseInt(values[0], 10) + parseInt(values[1], 10)); // other bytes are each value in base 128 with 8th bit set except for
  // the last byte for each value

  var last, valueBytes, value, b;

  for (var i = 2; i < values.length; ++i) {
    // produce value bytes in reverse because we don't know how many
    // bytes it will take to store the value
    last = true;
    valueBytes = [];
    value = parseInt(values[i], 10);

    do {
      b = value & 0x7F;
      value = value >>> 7; // if value is not last, then turn on 8th bit

      if (!last) {
        b |= 0x80;
      }

      valueBytes.push(b);
      last = false;
    } while (value > 0); // add value bytes in reverse (needs to be in big endian)


    for (var n = valueBytes.length - 1; n >= 0; --n) {
      bytes.putByte(valueBytes[n]);
    }
  }

  return bytes;
};
/**
 * Converts a DER-encoded byte buffer to an OID dot-separated string. The
 * byte buffer should contain only the DER-encoded value, not any tag or
 * length bytes.
 *
 * @param bytes the byte buffer.
 *
 * @return the OID dot-separated string.
 */


asn1.derToOid = function (bytes) {
  var oid; // wrap in buffer if needed

  if (typeof bytes === 'string') {
    bytes = forge.util.createBuffer(bytes);
  } // first byte is 40 * value1 + value2


  var b = bytes.getByte();
  oid = Math.floor(b / 40) + '.' + b % 40; // other bytes are each value in base 128 with 8th bit set except for
  // the last byte for each value

  var value = 0;

  while (bytes.length() > 0) {
    b = bytes.getByte();
    value = value << 7; // not the last byte for the value

    if (b & 0x80) {
      value += b & 0x7F;
    } else {
      // last byte
      oid += '.' + (value + b);
      value = 0;
    }
  }

  return oid;
};
/**
 * Converts a UTCTime value to a date.
 *
 * Note: GeneralizedTime has 4 digits for the year and is used for X.509
 * dates past 2049. Parsing that structure hasn't been implemented yet.
 *
 * @param utc the UTCTime value to convert.
 *
 * @return the date.
 */


asn1.utcTimeToDate = function (utc) {
  /* The following formats can be used:
     YYMMDDhhmmZ
    YYMMDDhhmm+hh'mm'
    YYMMDDhhmm-hh'mm'
    YYMMDDhhmmssZ
    YYMMDDhhmmss+hh'mm'
    YYMMDDhhmmss-hh'mm'
     Where:
     YY is the least significant two digits of the year
    MM is the month (01 to 12)
    DD is the day (01 to 31)
    hh is the hour (00 to 23)
    mm are the minutes (00 to 59)
    ss are the seconds (00 to 59)
    Z indicates that local time is GMT, + indicates that local time is
    later than GMT, and - indicates that local time is earlier than GMT
    hh' is the absolute value of the offset from GMT in hours
    mm' is the absolute value of the offset from GMT in minutes */
  var date = new Date(); // if YY >= 50 use 19xx, if YY < 50 use 20xx

  var year = parseInt(utc.substr(0, 2), 10);
  year = year >= 50 ? 1900 + year : 2000 + year;
  var MM = parseInt(utc.substr(2, 2), 10) - 1; // use 0-11 for month

  var DD = parseInt(utc.substr(4, 2), 10);
  var hh = parseInt(utc.substr(6, 2), 10);
  var mm = parseInt(utc.substr(8, 2), 10);
  var ss = 0; // not just YYMMDDhhmmZ

  if (utc.length > 11) {
    // get character after minutes
    var c = utc.charAt(10);
    var end = 10; // see if seconds are present

    if (c !== '+' && c !== '-') {
      // get seconds
      ss = parseInt(utc.substr(10, 2), 10);
      end += 2;
    }
  } // update date


  date.setUTCFullYear(year, MM, DD);
  date.setUTCHours(hh, mm, ss, 0);

  if (end) {
    // get +/- after end of time
    c = utc.charAt(end);

    if (c === '+' || c === '-') {
      // get hours+minutes offset
      var hhoffset = parseInt(utc.substr(end + 1, 2), 10);
      var mmoffset = parseInt(utc.substr(end + 4, 2), 10); // calculate offset in milliseconds

      var offset = hhoffset * 60 + mmoffset;
      offset *= 60000; // apply offset

      if (c === '+') {
        date.setTime(+date - offset);
      } else {
        date.setTime(+date + offset);
      }
    }
  }

  return date;
};
/**
 * Converts a GeneralizedTime value to a date.
 *
 * @param gentime the GeneralizedTime value to convert.
 *
 * @return the date.
 */


asn1.generalizedTimeToDate = function (gentime) {
  /* The following formats can be used:
     YYYYMMDDHHMMSS
    YYYYMMDDHHMMSS.fff
    YYYYMMDDHHMMSSZ
    YYYYMMDDHHMMSS.fffZ
    YYYYMMDDHHMMSS+hh'mm'
    YYYYMMDDHHMMSS.fff+hh'mm'
    YYYYMMDDHHMMSS-hh'mm'
    YYYYMMDDHHMMSS.fff-hh'mm'
     Where:
     YYYY is the year
    MM is the month (01 to 12)
    DD is the day (01 to 31)
    hh is the hour (00 to 23)
    mm are the minutes (00 to 59)
    ss are the seconds (00 to 59)
    .fff is the second fraction, accurate to three decimal places
    Z indicates that local time is GMT, + indicates that local time is
    later than GMT, and - indicates that local time is earlier than GMT
    hh' is the absolute value of the offset from GMT in hours
    mm' is the absolute value of the offset from GMT in minutes */
  var date = new Date();
  var YYYY = parseInt(gentime.substr(0, 4), 10);
  var MM = parseInt(gentime.substr(4, 2), 10) - 1; // use 0-11 for month

  var DD = parseInt(gentime.substr(6, 2), 10);
  var hh = parseInt(gentime.substr(8, 2), 10);
  var mm = parseInt(gentime.substr(10, 2), 10);
  var ss = parseInt(gentime.substr(12, 2), 10);
  var fff = 0;
  var offset = 0;
  var isUTC = false;

  if (gentime.charAt(gentime.length - 1) === 'Z') {
    isUTC = true;
  }

  var end = gentime.length - 5,
      c = gentime.charAt(end);

  if (c === '+' || c === '-') {
    // get hours+minutes offset
    var hhoffset = parseInt(gentime.substr(end + 1, 2), 10);
    var mmoffset = parseInt(gentime.substr(end + 4, 2), 10); // calculate offset in milliseconds

    offset = hhoffset * 60 + mmoffset;
    offset *= 60000; // apply offset

    if (c === '+') {
      offset *= -1;
    }

    isUTC = true;
  } // check for second fraction


  if (gentime.charAt(14) === '.') {
    fff = parseFloat(gentime.substr(14), 10) * 1000;
  }

  if (isUTC) {
    date.setUTCFullYear(YYYY, MM, DD);
    date.setUTCHours(hh, mm, ss, fff); // apply offset

    date.setTime(+date + offset);
  } else {
    date.setFullYear(YYYY, MM, DD);
    date.setHours(hh, mm, ss, fff);
  }

  return date;
};
/**
 * Converts a date to a UTCTime value.
 *
 * Note: GeneralizedTime has 4 digits for the year and is used for X.509
 * dates past 2049. Converting to a GeneralizedTime hasn't been
 * implemented yet.
 *
 * @param date the date to convert.
 *
 * @return the UTCTime value.
 */


asn1.dateToUtcTime = function (date) {
  // TODO: validate; currently assumes proper format
  if (typeof date === 'string') {
    return date;
  }

  var rval = ''; // create format YYMMDDhhmmssZ

  var format = [];
  format.push(('' + date.getUTCFullYear()).substr(2));
  format.push('' + (date.getUTCMonth() + 1));
  format.push('' + date.getUTCDate());
  format.push('' + date.getUTCHours());
  format.push('' + date.getUTCMinutes());
  format.push('' + date.getUTCSeconds()); // ensure 2 digits are used for each format entry

  for (var i = 0; i < format.length; ++i) {
    if (format[i].length < 2) {
      rval += '0';
    }

    rval += format[i];
  }

  rval += 'Z';
  return rval;
};
/**
 * Converts a date to a GeneralizedTime value.
 *
 * @param date the date to convert.
 *
 * @return the GeneralizedTime value as a string.
 */


asn1.dateToGeneralizedTime = function (date) {
  // TODO: validate; currently assumes proper format
  if (typeof date === 'string') {
    return date;
  }

  var rval = ''; // create format YYYYMMDDHHMMSSZ

  var format = [];
  format.push('' + date.getUTCFullYear());
  format.push('' + (date.getUTCMonth() + 1));
  format.push('' + date.getUTCDate());
  format.push('' + date.getUTCHours());
  format.push('' + date.getUTCMinutes());
  format.push('' + date.getUTCSeconds()); // ensure 2 digits are used for each format entry

  for (var i = 0; i < format.length; ++i) {
    if (format[i].length < 2) {
      rval += '0';
    }

    rval += format[i];
  }

  rval += 'Z';
  return rval;
};
/**
 * Converts a javascript integer to a DER-encoded byte buffer to be used
 * as the value for an INTEGER type.
 *
 * @param x the integer.
 *
 * @return the byte buffer.
 */


asn1.integerToDer = function (x) {
  var rval = forge.util.createBuffer();

  if (x >= -0x80 && x < 0x80) {
    return rval.putSignedInt(x, 8);
  }

  if (x >= -0x8000 && x < 0x8000) {
    return rval.putSignedInt(x, 16);
  }

  if (x >= -0x800000 && x < 0x800000) {
    return rval.putSignedInt(x, 24);
  }

  if (x >= -0x80000000 && x < 0x80000000) {
    return rval.putSignedInt(x, 32);
  }

  var error = new Error('Integer too large; max is 32-bits.');
  error.integer = x;
  throw error;
};
/**
 * Converts a DER-encoded byte buffer to a javascript integer. This is
 * typically used to decode the value of an INTEGER type.
 *
 * @param bytes the byte buffer.
 *
 * @return the integer.
 */


asn1.derToInteger = function (bytes) {
  // wrap in buffer if needed
  if (typeof bytes === 'string') {
    bytes = forge.util.createBuffer(bytes);
  }

  var n = bytes.length() * 8;

  if (n > 32) {
    throw new Error('Integer too large; max is 32-bits.');
  }

  return bytes.getSignedInt(n);
};
/**
 * Validates that the given ASN.1 object is at least a super set of the
 * given ASN.1 structure. Only tag classes and types are checked. An
 * optional map may also be provided to capture ASN.1 values while the
 * structure is checked.
 *
 * To capture an ASN.1 value, set an object in the validator's 'capture'
 * parameter to the key to use in the capture map. To capture the full
 * ASN.1 object, specify 'captureAsn1'. To capture BIT STRING bytes, including
 * the leading unused bits counter byte, specify 'captureBitStringContents'.
 * To capture BIT STRING bytes, without the leading unused bits counter byte,
 * specify 'captureBitStringValue'.
 *
 * Objects in the validator may set a field 'optional' to true to indicate
 * that it isn't necessary to pass validation.
 *
 * @param obj the ASN.1 object to validate.
 * @param v the ASN.1 structure validator.
 * @param capture an optional map to capture values in.
 * @param errors an optional array for storing validation errors.
 *
 * @return true on success, false on failure.
 */


asn1.validate = function (obj, v, capture, errors) {
  var rval = false; // ensure tag class and type are the same if specified

  if ((obj.tagClass === v.tagClass || typeof v.tagClass === 'undefined') && (obj.type === v.type || typeof v.type === 'undefined')) {
    // ensure constructed flag is the same if specified
    if (obj.constructed === v.constructed || typeof v.constructed === 'undefined') {
      rval = true; // handle sub values

      if (v.value && forge.util.isArray(v.value)) {
        var j = 0;

        for (var i = 0; rval && i < v.value.length; ++i) {
          rval = v.value[i].optional || false;

          if (obj.value[j]) {
            rval = asn1.validate(obj.value[j], v.value[i], capture, errors);

            if (rval) {
              ++j;
            } else if (v.value[i].optional) {
              rval = true;
            }
          }

          if (!rval && errors) {
            errors.push('[' + v.name + '] ' + 'Tag class "' + v.tagClass + '", type "' + v.type + '" expected value length "' + v.value.length + '", got "' + obj.value.length + '"');
          }
        }
      }

      if (rval && capture) {
        if (v.capture) {
          capture[v.capture] = obj.value;
        }

        if (v.captureAsn1) {
          capture[v.captureAsn1] = obj;
        }

        if (v.captureBitStringContents && 'bitStringContents' in obj) {
          capture[v.captureBitStringContents] = obj.bitStringContents;
        }

        if (v.captureBitStringValue && 'bitStringContents' in obj) {
          var value;

          if (obj.bitStringContents.length < 2) {
            capture[v.captureBitStringValue] = '';
          } else {
            // FIXME: support unused bits with data shifting
            var unused = obj.bitStringContents.charCodeAt(0);

            if (unused !== 0) {
              throw new Error('captureBitStringValue only supported for zero unused bits');
            }

            capture[v.captureBitStringValue] = obj.bitStringContents.slice(1);
          }
        }
      }
    } else if (errors) {
      errors.push('[' + v.name + '] ' + 'Expected constructed "' + v.constructed + '", got "' + obj.constructed + '"');
    }
  } else if (errors) {
    if (obj.tagClass !== v.tagClass) {
      errors.push('[' + v.name + '] ' + 'Expected tag class "' + v.tagClass + '", got "' + obj.tagClass + '"');
    }

    if (obj.type !== v.type) {
      errors.push('[' + v.name + '] ' + 'Expected type "' + v.type + '", got "' + obj.type + '"');
    }
  }

  return rval;
}; // regex for testing for non-latin characters


var _nonLatinRegex = /[^\\u0000-\\u00ff]/;
/**
 * Pretty prints an ASN.1 object to a string.
 *
 * @param obj the object to write out.
 * @param level the level in the tree.
 * @param indentation the indentation to use.
 *
 * @return the string.
 */

asn1.prettyPrint = function (obj, level, indentation) {
  var rval = ''; // set default level and indentation

  level = level || 0;
  indentation = indentation || 2; // start new line for deep levels

  if (level > 0) {
    rval += '\n';
  } // create indent


  var indent = '';

  for (var i = 0; i < level * indentation; ++i) {
    indent += ' ';
  } // print class:type


  rval += indent + 'Tag: ';

  switch (obj.tagClass) {
    case asn1.Class.UNIVERSAL:
      rval += 'Universal:';
      break;

    case asn1.Class.APPLICATION:
      rval += 'Application:';
      break;

    case asn1.Class.CONTEXT_SPECIFIC:
      rval += 'Context-Specific:';
      break;

    case asn1.Class.PRIVATE:
      rval += 'Private:';
      break;
  }

  if (obj.tagClass === asn1.Class.UNIVERSAL) {
    rval += obj.type; // known types

    switch (obj.type) {
      case asn1.Type.NONE:
        rval += ' (None)';
        break;

      case asn1.Type.BOOLEAN:
        rval += ' (Boolean)';
        break;

      case asn1.Type.INTEGER:
        rval += ' (Integer)';
        break;

      case asn1.Type.BITSTRING:
        rval += ' (Bit string)';
        break;

      case asn1.Type.OCTETSTRING:
        rval += ' (Octet string)';
        break;

      case asn1.Type.NULL:
        rval += ' (Null)';
        break;

      case asn1.Type.OID:
        rval += ' (Object Identifier)';
        break;

      case asn1.Type.ODESC:
        rval += ' (Object Descriptor)';
        break;

      case asn1.Type.EXTERNAL:
        rval += ' (External or Instance of)';
        break;

      case asn1.Type.REAL:
        rval += ' (Real)';
        break;

      case asn1.Type.ENUMERATED:
        rval += ' (Enumerated)';
        break;

      case asn1.Type.EMBEDDED:
        rval += ' (Embedded PDV)';
        break;

      case asn1.Type.UTF8:
        rval += ' (UTF8)';
        break;

      case asn1.Type.ROID:
        rval += ' (Relative Object Identifier)';
        break;

      case asn1.Type.SEQUENCE:
        rval += ' (Sequence)';
        break;

      case asn1.Type.SET:
        rval += ' (Set)';
        break;

      case asn1.Type.PRINTABLESTRING:
        rval += ' (Printable String)';
        break;

      case asn1.Type.IA5String:
        rval += ' (IA5String (ASCII))';
        break;

      case asn1.Type.UTCTIME:
        rval += ' (UTC time)';
        break;

      case asn1.Type.GENERALIZEDTIME:
        rval += ' (Generalized time)';
        break;

      case asn1.Type.BMPSTRING:
        rval += ' (BMP String)';
        break;
    }
  } else {
    rval += obj.type;
  }

  rval += '\n';
  rval += indent + 'Constructed: ' + obj.constructed + '\n';

  if (obj.composed) {
    var subvalues = 0;
    var sub = '';

    for (var i = 0; i < obj.value.length; ++i) {
      if (obj.value[i] !== undefined) {
        subvalues += 1;
        sub += asn1.prettyPrint(obj.value[i], level + 1, indentation);

        if (i + 1 < obj.value.length) {
          sub += ',';
        }
      }
    }

    rval += indent + 'Sub values: ' + subvalues + sub;
  } else {
    rval += indent + 'Value: ';

    if (obj.type === asn1.Type.OID) {
      var oid = asn1.derToOid(obj.value);
      rval += oid;

      if (forge.pki && forge.pki.oids) {
        if (oid in forge.pki.oids) {
          rval += ' (' + forge.pki.oids[oid] + ') ';
        }
      }
    }

    if (obj.type === asn1.Type.INTEGER) {
      try {
        rval += asn1.derToInteger(obj.value);
      } catch (ex) {
        rval += '0x' + forge.util.bytesToHex(obj.value);
      }
    } else if (obj.type === asn1.Type.BITSTRING) {
      // TODO: shift bits as needed to display without padding
      if (obj.value.length > 1) {
        // remove unused bits field
        rval += '0x' + forge.util.bytesToHex(obj.value.slice(1));
      } else {
        rval += '(none)';
      } // show unused bit count


      if (obj.value.length > 0) {
        var unused = obj.value.charCodeAt(0);

        if (unused == 1) {
          rval += ' (1 unused bit shown)';
        } else if (unused > 1) {
          rval += ' (' + unused + ' unused bits shown)';
        }
      }
    } else if (obj.type === asn1.Type.OCTETSTRING) {
      if (!_nonLatinRegex.test(obj.value)) {
        rval += '(' + obj.value + ') ';
      }

      rval += '0x' + forge.util.bytesToHex(obj.value);
    } else if (obj.type === asn1.Type.UTF8) {
      rval += forge.util.decodeUtf8(obj.value);
    } else if (obj.type === asn1.Type.PRINTABLESTRING || obj.type === asn1.Type.IA5String) {
      rval += obj.value;
    } else if (_nonLatinRegex.test(obj.value)) {
      rval += '0x' + forge.util.bytesToHex(obj.value);
    } else if (obj.value.length === 0) {
      rval += '[null]';
    } else {
      rval += obj.value;
    }
  }

  return rval;
};

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

(function (global, factory) {
   true ? factory(exports) : undefined;
})(void 0, function (exports) {
  'use strict';
  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation. All rights reserved.
  Licensed under the Apache License, Version 2.0 (the "License"); you may not use
  this file except in compliance with the License. You may obtain a copy of the
  License at http://www.apache.org/licenses/LICENSE-2.0
    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
  WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
  MERCHANTABLITY OR NON-INFRINGEMENT.
    See the Apache Version 2.0 License for specific language governing permissions
  and limitations under the License.
  ***************************************************************************** */

  function __values(o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator],
        i = 0;
    if (m) return m.call(o);
    return {
      next: function next() {
        if (o && i >= o.length) o = void 0;
        return {
          value: o && o[i++],
          done: !o
        };
      }
    };
  }

  function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
  }

  function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []),
        i,
        q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
      return this;
    }, i;

    function verb(n) {
      if (g[n]) i[n] = function (v) {
        return new Promise(function (a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
    }

    function resume(n, v) {
      try {
        step(g[n](v));
      } catch (e) {
        settle(q[0][3], e);
      }
    }

    function step(r) {
      r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }

    function fulfill(value) {
      resume("next", value);
    }

    function reject(value) {
      resume("throw", value);
    }

    function settle(f, v) {
      if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
  }

  function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) {
      throw e;
    }), verb("return"), i[Symbol.iterator] = function () {
      return this;
    }, i;

    function verb(n, f) {
      i[n] = o[n] ? function (v) {
        return (p = !p) ? {
          value: __await(o[n](v)),
          done: n === "return"
        } : f ? f(v) : v;
      } : f;
    }
  }

  function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator],
        i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
      return this;
    }, i);

    function verb(n) {
      i[n] = o[n] && function (v) {
        return new Promise(function (resolve, reject) {
          v = o[n](v), settle(resolve, reject, v.done, v.value);
        });
      };
    }

    function settle(resolve, reject, d, v) {
      Promise.resolve(v).then(function (v) {
        resolve({
          value: v,
          done: d
        });
      }, reject);
    }
  }

  function _batch(size, iterable) {
    return __asyncGenerator(this, arguments, function* _batch_1() {
      var e_1, _a;

      let dataBatch = [];

      try {
        for (var iterable_1 = __asyncValues(iterable), iterable_1_1; iterable_1_1 = yield __await(iterable_1.next()), !iterable_1_1.done;) {
          const data = iterable_1_1.value;
          dataBatch.push(data);

          if (dataBatch.length === size) {
            yield yield __await(dataBatch);
            dataBatch = [];
          }
        }
      } catch (e_1_1) {
        e_1 = {
          error: e_1_1
        };
      } finally {
        try {
          if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) yield __await(_a.call(iterable_1));
        } finally {
          if (e_1) throw e_1.error;
        }
      }

      if (dataBatch.length > 0) {
        yield yield __await(dataBatch);
      }
    });
  }

  function* _syncBatch(size, iterable) {
    let dataBatch = [];

    for (const data of iterable) {
      dataBatch.push(data);

      if (dataBatch.length === size) {
        yield dataBatch;
        dataBatch = [];
      }
    }

    if (dataBatch.length > 0) {
      yield dataBatch;
    }
  }

  function batch(size, iterable) {
    if (iterable === undefined) {
      return curriedIterable => batch(size, curriedIterable);
    }

    if (iterable[Symbol.asyncIterator]) {
      return _batch(size, iterable);
    }

    return _syncBatch(size, iterable);
  }

  function getIterator(iterable) {
    if (typeof iterable.next === 'function') {
      return iterable;
    }

    if (typeof iterable[Symbol.iterator] === 'function') {
      return iterable[Symbol.iterator]();
    }

    if (typeof iterable[Symbol.asyncIterator] === 'function') {
      return iterable[Symbol.asyncIterator]();
    }

    throw new TypeError('"values" does not to conform to any of the iterator or iterable protocols');
  }

  function defer() {
    let reject;
    let resolve;
    const promise = new Promise((resolveFunc, rejectFunc) => {
      resolve = resolveFunc;
      reject = rejectFunc;
    });
    return {
      promise,
      reject,
      resolve
    };
  } /// <reference lib="esnext.asynciterable" />


  function _buffer(size, iterable) {
    const iterator = getIterator(iterable);
    const resultQueue = [];
    const readQueue = [];
    let reading = false;
    let ended = false;

    function fulfillReadQueue() {
      while (readQueue.length > 0 && resultQueue.length > 0) {
        const readDeferred = readQueue.shift();
        const {
          error,
          value
        } = resultQueue.shift();

        if (error) {
          readDeferred.reject(error);
        } else {
          readDeferred.resolve({
            done: false,
            value
          });
        }
      }

      while (readQueue.length > 0 && ended) {
        const {
          resolve
        } = readQueue.shift();
        resolve({
          done: true,
          value: undefined
        });
      }
    }

    async function fillQueue() {
      if (ended) {
        return;
      }

      if (reading) {
        return;
      }

      if (resultQueue.length >= size) {
        return;
      }

      reading = true;

      try {
        const {
          done,
          value
        } = await iterator.next();

        if (done) {
          ended = true;
        } else {
          resultQueue.push({
            value
          });
        }
      } catch (error) {
        ended = true;
        resultQueue.push({
          error
        });
      }

      fulfillReadQueue();
      reading = false;
      fillQueue();
    }

    async function next() {
      if (resultQueue.length > 0) {
        const {
          error,
          value
        } = resultQueue.shift();

        if (error) {
          throw error;
        }

        fillQueue();
        return {
          done: false,
          value
        };
      }

      if (ended) {
        return {
          done: true,
          value: undefined
        }; // stupid ts
      }

      const deferred = defer();
      readQueue.push(deferred);
      fillQueue();
      return deferred.promise;
    }

    const asyncIterableIterator = {
      next,
      [Symbol.asyncIterator]: () => asyncIterableIterator
    };
    return asyncIterableIterator;
  }

  function* syncBuffer(size, iterable) {
    const valueQueue = [];
    let e;

    try {
      for (const value of iterable) {
        valueQueue.push(value);

        if (valueQueue.length <= size) {
          continue;
        }

        yield valueQueue.shift();
      }
    } catch (error) {
      e = error;
    }

    for (const value of valueQueue) {
      yield value;
    }

    if (e) {
      throw e;
    }
  }

  function buffer(size, iterable) {
    if (iterable === undefined) {
      return curriedIterable => buffer(size, curriedIterable);
    }

    if (iterable[Symbol.asyncIterator]) {
      return _buffer(size, iterable);
    }

    return syncBuffer(size, iterable);
  }

  async function _collect(iterable) {
    var e_1, _a;

    const values = [];

    try {
      for (var iterable_1 = __asyncValues(iterable), iterable_1_1; iterable_1_1 = await iterable_1.next(), !iterable_1_1.done;) {
        const value = iterable_1_1.value;
        values.push(value);
      }
    } catch (e_1_1) {
      e_1 = {
        error: e_1_1
      };
    } finally {
      try {
        if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) await _a.call(iterable_1);
      } finally {
        if (e_1) throw e_1.error;
      }
    }

    return values;
  }

  function collect(iterable) {
    if (iterable[Symbol.asyncIterator]) {
      return _collect(iterable);
    }

    return Array.from(iterable);
  }

  function _concat(iterables) {
    return __asyncGenerator(this, arguments, function* _concat_1() {
      var e_1, _a;

      try {
        for (var iterables_1 = __asyncValues(iterables), iterables_1_1; iterables_1_1 = yield __await(iterables_1.next()), !iterables_1_1.done;) {
          const iterable = iterables_1_1.value;
          yield __await((yield* __asyncDelegator(__asyncValues(iterable))));
        }
      } catch (e_1_1) {
        e_1 = {
          error: e_1_1
        };
      } finally {
        try {
          if (iterables_1_1 && !iterables_1_1.done && (_a = iterables_1.return)) yield __await(_a.call(iterables_1));
        } finally {
          if (e_1) throw e_1.error;
        }
      }
    });
  }

  function* _syncConcat(iterables) {
    for (const iterable of iterables) {
      yield* iterable;
    }
  }

  function concat(...iterables) {
    const hasAnyAsync = iterables.find(itr => itr[Symbol.asyncIterator] !== undefined);

    if (hasAnyAsync) {
      return _concat(iterables);
    } else {
      return _syncConcat(iterables);
    }
  }

  async function _consume(iterable) {
    var e_1, _a;

    try {
      for (var iterable_1 = __asyncValues(iterable), iterable_1_1; iterable_1_1 = await iterable_1.next(), !iterable_1_1.done;) {
        const val = iterable_1_1.value;
      }
    } catch (e_1_1) {
      e_1 = {
        error: e_1_1
      };
    } finally {
      try {
        if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) await _a.call(iterable_1);
      } finally {
        if (e_1) throw e_1.error;
      }
    }
  }

  function consume(iterable) {
    if (iterable[Symbol.asyncIterator]) {
      return _consume(iterable);
    }
  }

  function _filter(filterFunc, iterable) {
    return __asyncGenerator(this, arguments, function* _filter_1() {
      var e_1, _a;

      try {
        for (var iterable_1 = __asyncValues(iterable), iterable_1_1; iterable_1_1 = yield __await(iterable_1.next()), !iterable_1_1.done;) {
          const data = iterable_1_1.value;

          if (yield __await(filterFunc(data))) {
            yield yield __await(data);
          }
        }
      } catch (e_1_1) {
        e_1 = {
          error: e_1_1
        };
      } finally {
        try {
          if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) yield __await(_a.call(iterable_1));
        } finally {
          if (e_1) throw e_1.error;
        }
      }
    });
  }

  function filter(filterFunc, iterable) {
    if (iterable === undefined) {
      return curriedIterable => _filter(filterFunc, curriedIterable);
    }

    return _filter(filterFunc, iterable);
  }

  function flatten(iterable) {
    return __asyncGenerator(this, arguments, function* flatten_1() {
      var e_1, _a;

      try {
        for (var iterable_1 = __asyncValues(iterable), iterable_1_1; iterable_1_1 = yield __await(iterable_1.next()), !iterable_1_1.done;) {
          const maybeItr = iterable_1_1.value;

          if (maybeItr && typeof maybeItr !== 'string' && (maybeItr[Symbol.iterator] || maybeItr[Symbol.asyncIterator])) {
            yield __await((yield* __asyncDelegator(__asyncValues(flatten(maybeItr)))));
          } else {
            yield yield __await(maybeItr);
          }
        }
      } catch (e_1_1) {
        e_1 = {
          error: e_1_1
        };
      } finally {
        try {
          if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) yield __await(_a.call(iterable_1));
        } finally {
          if (e_1) throw e_1.error;
        }
      }
    });
  }

  function _map(func, iterable) {
    return __asyncGenerator(this, arguments, function* _map_1() {
      var e_1, _a;

      try {
        for (var iterable_1 = __asyncValues(iterable), iterable_1_1; iterable_1_1 = yield __await(iterable_1.next()), !iterable_1_1.done;) {
          const val = iterable_1_1.value;
          yield yield __await((yield __await(func(val))));
        }
      } catch (e_1_1) {
        e_1 = {
          error: e_1_1
        };
      } finally {
        try {
          if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) yield __await(_a.call(iterable_1));
        } finally {
          if (e_1) throw e_1.error;
        }
      }
    });
  }

  function map(func, iterable) {
    if (iterable === undefined) {
      return curriedIterable => _map(func, curriedIterable);
    }

    return _map(func, iterable);
  }

  function flatMap(func, iterable) {
    if (iterable === undefined) {
      return curriedIterable => flatMap(func, curriedIterable);
    }

    return filter(i => i !== undefined && i !== null, flatten(map(func, iterable)));
  }

  function _flatTransform(concurrency, func, iterable) {
    const iterator = getIterator(iterable);
    const resultQueue = [];
    const readQueue = [];
    let ended = false;
    let reading = false;
    let inflightCount = 0;
    let lastError = null;

    function fulfillReadQueue() {
      while (readQueue.length > 0 && resultQueue.length > 0) {
        const {
          resolve
        } = readQueue.shift();
        const value = resultQueue.shift();
        resolve({
          done: false,
          value
        });
      }

      while (readQueue.length > 0 && inflightCount === 0 && ended) {
        const {
          resolve,
          reject
        } = readQueue.shift();

        if (lastError) {
          reject(lastError);
          lastError = null;
        } else {
          resolve({
            done: true,
            value: undefined
          });
        }
      }
    }

    async function fillQueue() {
      if (ended) {
        fulfillReadQueue();
        return;
      }

      if (reading) {
        return;
      }

      if (inflightCount + resultQueue.length >= concurrency) {
        return;
      }

      reading = true;
      inflightCount++;

      try {
        const {
          done,
          value
        } = await iterator.next();

        if (done) {
          ended = true;
          inflightCount--;
          fulfillReadQueue();
        } else {
          mapAndQueue(value);
        }
      } catch (error) {
        ended = true;
        inflightCount--;
        lastError = error;
        fulfillReadQueue();
      }

      reading = false;
      fillQueue();
    }

    async function mapAndQueue(itrValue) {
      var e_1, _a;

      try {
        const value = await func(itrValue);

        if (value && value[Symbol.asyncIterator]) {
          try {
            for (var _b = __asyncValues(value), _c; _c = await _b.next(), !_c.done;) {
              const asyncVal = _c.value;
              resultQueue.push(asyncVal);
            }
          } catch (e_1_1) {
            e_1 = {
              error: e_1_1
            };
          } finally {
            try {
              if (_c && !_c.done && (_a = _b.return)) await _a.call(_b);
            } finally {
              if (e_1) throw e_1.error;
            }
          }
        } else {
          resultQueue.push(value);
        }
      } catch (error) {
        ended = true;
        lastError = error;
      }

      inflightCount--;
      fulfillReadQueue();
      fillQueue();
    }

    async function next() {
      if (resultQueue.length === 0) {
        const deferred = defer();
        readQueue.push(deferred);
        fillQueue();
        return deferred.promise;
      }

      const value = resultQueue.shift();
      fillQueue();
      return {
        done: false,
        value
      };
    }

    const asyncIterableIterator = {
      next,
      [Symbol.asyncIterator]: () => asyncIterableIterator
    };
    return asyncIterableIterator;
  }

  function flatTransform(concurrency, func, iterable) {
    if (func === undefined) {
      return (curriedFunc, curriedIterable) => curriedIterable ? flatTransform(concurrency, curriedFunc, curriedIterable) : flatTransform(concurrency, curriedFunc);
    }

    if (iterable === undefined) {
      return curriedIterable => flatTransform(concurrency, func, curriedIterable);
    }

    return filter(i => i !== undefined && i !== null, flatten(_flatTransform(concurrency, func, iterable)));
  }

  async function onceReadable(stream) {
    return new Promise(resolve => {
      stream.once('readable', () => {
        resolve();
      });
    });
  }

  function _fromStream(stream) {
    return __asyncGenerator(this, arguments, function* _fromStream_1() {
      while (true) {
        const data = stream.read();

        if (data !== null) {
          yield yield __await(data);
          continue;
        }

        if (stream._readableState.ended) {
          return yield __await(void 0);
        }

        yield __await(onceReadable(stream));
      }
    });
  }

  function fromStream(stream) {
    if (typeof stream[Symbol.asyncIterator] === 'function') {
      return stream;
    }

    return _fromStream(stream);
  }

  function merge(...iterables) {
    return __asyncGenerator(this, arguments, function* merge_1() {
      const sources = new Set(iterables.map(getIterator));

      while (sources.size > 0) {
        for (const iterator of sources) {
          const nextVal = yield __await(iterator.next());

          if (nextVal.done) {
            sources.delete(iterator);
          } else {
            yield yield __await(nextVal.value);
          }
        }
      }
    });
  }

  function pipeline(firstFn, ...fns) {
    let previousFn = firstFn();

    for (const func of fns) {
      previousFn = func(previousFn);
    }

    return previousFn;
  }

  function _parallelMap(concurrency, func, iterable) {
    return __asyncGenerator(this, arguments, function* _parallelMap_1() {
      let transformError = null;

      const wrapFunc = value => ({
        value: func(value)
      });

      const stopOnError = function stopOnError(source) {
        return __asyncGenerator(this, arguments, function* () {
          var e_1, _a;

          try {
            for (var source_1 = __asyncValues(source), source_1_1; source_1_1 = yield __await(source_1.next()), !source_1_1.done;) {
              const value = source_1_1.value;

              if (transformError) {
                return yield __await(void 0);
              }

              yield yield __await(value);
            }
          } catch (e_1_1) {
            e_1 = {
              error: e_1_1
            };
          } finally {
            try {
              if (source_1_1 && !source_1_1.done && (_a = source_1.return)) yield __await(_a.call(source_1));
            } finally {
              if (e_1) throw e_1.error;
            }
          }
        });
      };

      const output = pipeline(() => iterable, buffer(1), stopOnError, map(wrapFunc), buffer(concurrency));
      const itr = getIterator(output);

      while (true) {
        const {
          value,
          done
        } = yield __await(itr.next());

        if (done) {
          break;
        }

        try {
          const val = yield __await(value.value);

          if (!transformError) {
            yield yield __await(val);
          }
        } catch (error) {
          transformError = error;
        }
      }

      if (transformError) {
        throw transformError;
      }
    });
  }

  function parallelMap(concurrency, func, iterable) {
    if (func === undefined) {
      return (curriedFunc, curriedIterable) => parallelMap(concurrency, curriedFunc, curriedIterable);
    }

    if (iterable === undefined) {
      return curriedIterable => parallelMap(concurrency, func, curriedIterable);
    }

    return _parallelMap(concurrency, func, iterable);
  }

  function parallelFlatMap(concurrency, func, iterable) {
    if (func === undefined) {
      return (curriedFunc, curriedIterable) => curriedIterable ? parallelFlatMap(concurrency, curriedFunc, curriedIterable) : parallelFlatMap(concurrency, curriedFunc);
    }

    if (iterable === undefined) {
      return curriedIterable => parallelFlatMap(concurrency, func, curriedIterable);
    }

    return filter(i => i !== undefined && i !== null, flatten(parallelMap(concurrency, func, iterable)));
  }

  function parallelMerge(...iterables) {
    return __asyncGenerator(this, arguments, function* parallelMerge_1() {
      const inputs = iterables.map(getIterator);
      const concurrentWork = new Set();
      const values = new Map();
      let lastError = null;
      let errCb = null;
      let valueCb = null;

      const notifyError = err => {
        lastError = err;

        if (errCb) {
          errCb(err);
        }
      };

      const notifyDone = value => {
        if (valueCb) {
          valueCb(value);
        }
      };

      const waitForQueue = () => new Promise((resolve, reject) => {
        if (lastError) {
          reject(lastError);
        }

        if (values.size > 0) {
          return resolve();
        }

        valueCb = resolve;
        errCb = reject;
      });

      const queueNext = input => {
        const nextVal = Promise.resolve(input.next()).then(async ({
          done,
          value
        }) => {
          if (!done) {
            values.set(input, value);
          }

          concurrentWork.delete(nextVal);
        });
        concurrentWork.add(nextVal);
        nextVal.then(notifyDone, notifyError);
      };

      for (const input of inputs) {
        queueNext(input);
      }

      while (true) {
        // We technically don't have to check `values.size` as the for loop should have emptied it
        // However I haven't yet found specs verifying that behavior, only tests
        // the guard in waitForQueue() checking for values is in place for the same reason
        if (concurrentWork.size === 0 && values.size === 0) {
          return yield __await(void 0);
        }

        yield __await(waitForQueue());

        for (const [input, value] of values) {
          values.delete(input);
          yield yield __await(value);
          queueNext(input);
        }
      }
    });
  }

  async function _reduce(func, start, iterable) {
    var e_1, _a;

    let value = start;

    try {
      for (var iterable_1 = __asyncValues(iterable), iterable_1_1; iterable_1_1 = await iterable_1.next(), !iterable_1_1.done;) {
        const nextItem = iterable_1_1.value;
        value = await func(value, nextItem);
      }
    } catch (e_1_1) {
      e_1 = {
        error: e_1_1
      };
    } finally {
      try {
        if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) await _a.call(iterable_1);
      } finally {
        if (e_1) throw e_1.error;
      }
    }

    return value;
  }

  function reduce(func, start, iterable) {
    if (start === undefined) {
      return (curriedStart, curriedIterable) => curriedIterable ? reduce(func, curriedStart, curriedIterable) : reduce(func, curriedStart);
    }

    if (iterable === undefined) {
      return curriedIterable => reduce(func, start, curriedIterable);
    }

    return _reduce(func, start, iterable);
  }

  function _take(count, iterable) {
    return __asyncGenerator(this, arguments, function* _take_1() {
      var e_1, _a;

      let taken = 0;

      try {
        for (var iterable_1 = __asyncValues(iterable), iterable_1_1; iterable_1_1 = yield __await(iterable_1.next()), !iterable_1_1.done;) {
          const val = iterable_1_1.value;
          yield yield __await((yield __await(val)));
          taken++;

          if (taken >= count) {
            return yield __await(void 0);
          }
        }
      } catch (e_1_1) {
        e_1 = {
          error: e_1_1
        };
      } finally {
        try {
          if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) yield __await(_a.call(iterable_1));
        } finally {
          if (e_1) throw e_1.error;
        }
      }
    });
  }

  function* _syncTake(count, iterable) {
    let taken = 0;

    for (const val of iterable) {
      yield val;
      taken++;

      if (taken >= count) {
        return;
      }
    }
  }

  function take(count, iterable) {
    if (iterable === undefined) {
      return curriedIterable => take(count, curriedIterable);
    }

    if (iterable[Symbol.asyncIterator]) {
      return _take(count, iterable);
    }

    return _syncTake(count, iterable);
  }

  function _asyncTap(func, iterable) {
    return __asyncGenerator(this, arguments, function* _asyncTap_1() {
      var e_1, _a;

      try {
        for (var iterable_1 = __asyncValues(iterable), iterable_1_1; iterable_1_1 = yield __await(iterable_1.next()), !iterable_1_1.done;) {
          const val = iterable_1_1.value;
          yield __await(func(val));
          yield yield __await(val);
        }
      } catch (e_1_1) {
        e_1 = {
          error: e_1_1
        };
      } finally {
        try {
          if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) yield __await(_a.call(iterable_1));
        } finally {
          if (e_1) throw e_1.error;
        }
      }
    });
  }

  function tap(func, iterable) {
    if (iterable === undefined) {
      return curriedIterable => _asyncTap(func, curriedIterable);
    }

    return _asyncTap(func, iterable);
  }

  function addTime(a, b) {
    let seconds = a[0] + b[0];
    let nanoseconds = a[1] + b[1];

    if (nanoseconds >= 1000000000) {
      const remainder = nanoseconds % 1000000000;
      seconds += (nanoseconds - remainder) / 1000000000;
      nanoseconds = remainder;
    }

    return [seconds, nanoseconds];
  }

  function _asyncTime(config, iterable) {
    return __asyncGenerator(this, arguments, function* _asyncTime_1() {
      const itr = iterable[Symbol.asyncIterator]();
      let total = [0, 0];

      while (true) {
        const start = process.hrtime();
        const {
          value,
          done
        } = yield __await(itr.next());
        const delta = process.hrtime(start);
        total = addTime(total, delta);

        if (config.progress) {
          config.progress(delta, total);
        }

        if (done) {
          if (config.total) {
            config.total(total);
          }

          return yield __await(value);
        }

        yield yield __await(value);
      }
    });
  }

  function* _syncTime(config, iterable) {
    const itr = iterable[Symbol.iterator]();
    let total = [0, 0];

    while (true) {
      const start = process.hrtime();
      const {
        value,
        done
      } = itr.next();
      const delta = process.hrtime(start);
      total = addTime(total, delta);

      if (config.progress) {
        config.progress(delta, total);
      }

      if (done) {
        if (config.total) {
          config.total(total);
        }

        return value;
      }

      yield value;
    }
  }

  function time(config = {}, iterable) {
    if (iterable === undefined) {
      return curriedIterable => time(config, curriedIterable);
    }

    if (iterable[Symbol.asyncIterator] !== undefined) {
      return _asyncTime(config, iterable);
    } else {
      return _syncTime(config, iterable);
    }
  }

  function _transform(concurrency, func, iterable) {
    const iterator = getIterator(iterable);
    const resultQueue = [];
    const readQueue = [];
    let ended = false;
    let reading = false;
    let inflightCount = 0;
    let lastError = null;

    function fulfillReadQueue() {
      while (readQueue.length > 0 && resultQueue.length > 0) {
        const {
          resolve
        } = readQueue.shift();
        const value = resultQueue.shift();
        resolve({
          done: false,
          value
        });
      }

      while (readQueue.length > 0 && inflightCount === 0 && ended) {
        const {
          resolve,
          reject
        } = readQueue.shift();

        if (lastError) {
          reject(lastError);
          lastError = null;
        } else {
          resolve({
            done: true,
            value: undefined
          });
        }
      }
    }

    async function fillQueue() {
      if (ended) {
        fulfillReadQueue();
        return;
      }

      if (reading) {
        return;
      }

      if (inflightCount + resultQueue.length >= concurrency) {
        return;
      }

      reading = true;
      inflightCount++;

      try {
        const {
          done,
          value
        } = await iterator.next();

        if (done) {
          ended = true;
          inflightCount--;
          fulfillReadQueue();
        } else {
          mapAndQueue(value);
        }
      } catch (error) {
        ended = true;
        inflightCount--;
        lastError = error;
        fulfillReadQueue();
      }

      reading = false;
      fillQueue();
    }

    async function mapAndQueue(itrValue) {
      try {
        const value = await func(itrValue);
        resultQueue.push(value);
      } catch (error) {
        ended = true;
        lastError = error;
      }

      inflightCount--;
      fulfillReadQueue();
      fillQueue();
    }

    async function next() {
      if (resultQueue.length === 0) {
        const deferred = defer();
        readQueue.push(deferred);
        fillQueue();
        return deferred.promise;
      }

      const value = resultQueue.shift();
      fillQueue();
      return {
        done: false,
        value
      };
    }

    const asyncIterableIterator = {
      next,
      [Symbol.asyncIterator]: () => asyncIterableIterator
    };
    return asyncIterableIterator;
  }

  function transform(concurrency, func, iterable) {
    if (func === undefined) {
      return (curriedFunc, curriedIterable) => curriedIterable ? transform(concurrency, curriedFunc, curriedIterable) : transform(concurrency, curriedFunc);
    }

    if (iterable === undefined) {
      return curriedIterable => transform(concurrency, func, curriedIterable);
    }

    return _transform(concurrency, func, iterable);
  }

  async function _writeToStream(stream, iterable) {
    var e_1, _a;

    let lastError = null;
    let errCb = null;
    let drainCb = null;

    const notifyError = err => {
      lastError = err;

      if (errCb) {
        errCb(err);
      }
    };

    const notifyDrain = () => {
      if (drainCb) {
        drainCb();
      }
    };

    const cleanup = () => {
      stream.removeListener('error', notifyError);
      stream.removeListener('drain', notifyDrain);
    };

    stream.once('error', notifyError);

    const waitForDrain = () => new Promise((resolve, reject) => {
      if (lastError) {
        return reject(lastError);
      }

      stream.once('drain', notifyDrain);
      drainCb = resolve;
      errCb = reject;
    });

    try {
      for (var iterable_1 = __asyncValues(iterable), iterable_1_1; iterable_1_1 = await iterable_1.next(), !iterable_1_1.done;) {
        const value = iterable_1_1.value;

        if (stream.write(value) === false) {
          await waitForDrain();
        }

        if (lastError) {
          break;
        }
      }
    } catch (e_1_1) {
      e_1 = {
        error: e_1_1
      };
    } finally {
      try {
        if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) await _a.call(iterable_1);
      } finally {
        if (e_1) throw e_1.error;
      }
    }

    cleanup();

    if (lastError) {
      throw lastError;
    }
  }

  function writeToStream(stream, iterable) {
    if (iterable === undefined) {
      return curriedIterable => _writeToStream(stream, curriedIterable);
    }

    return _writeToStream(stream, iterable);
  } /// <reference lib="esnext.asynciterable" />


  if (Symbol.asyncIterator === undefined) {
    Symbol.asyncIterator = Symbol.for('asyncIterator');
  }

  exports.batch = batch;
  exports.buffer = buffer;
  exports.collect = collect;
  exports.concat = concat;
  exports.consume = consume;
  exports.filter = filter;
  exports.flatMap = flatMap;
  exports.flatten = flatten;
  exports.flatTransform = flatTransform;
  exports.fromStream = fromStream;
  exports.getIterator = getIterator;
  exports.map = map;
  exports.merge = merge;
  exports.parallelFlatMap = parallelFlatMap;
  exports.parallelMap = parallelMap;
  exports.parallelMerge = parallelMerge;
  exports.pipeline = pipeline;
  exports.reduce = reduce;
  exports.take = take;
  exports.tap = tap;
  exports.time = time;
  exports.transform = transform;
  exports.writeToStream = writeToStream;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5)))

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* @flow */


const Key = __webpack_require__(297);

const MemoryDatastore = __webpack_require__(667);

const utils = __webpack_require__(298);

const Errors = __webpack_require__(299);

exports.Key = Key;
exports.MemoryDatastore = MemoryDatastore;
exports.utils = utils;
exports.Errors = Errors;
/* ::
// -- Basics

export type Callback<Value> = (err: ?Error, ?Value) => void

// eslint-disable-next-line
export interface Datastore<Value> {
  // eslint-disable-next-line
  put(Key, Value, Callback<void>): void;
  // eslint-disable-next-line
  get(Key, Callback<Value>): void;
  has(Key, Callback<bool>): void;
  delete(Key, Callback<void>): void;
  // eslint-disable-next-line
  query(Query<Value>): QueryResult<Value>;

  // eslint-disable-next-line
  batch(): Batch<Value>;
  close(Callback<void>): void;
  open(Callback<void>): void;
}

// -- Batch
export type Batch<Value> = {
  put(Key, Value): void,
  delete(Key): void,
  commit(Callback<void>): void
}

// -- Query

export type Query<Value> = {
  prefix?: string,
  filters?: Array<Filter<Value>>,
  orders?: Array<Order<Value>>,
  limit?: number,
  offset?: number,
  keysOnly?: bool
}

export type PullEnd = bool | Error
export type PullSource<Val> = (end: ?PullEnd, (end: ?PullEnd, Val) => void) => void

export type QueryResult<Value> = PullSource<QueryEntry<Value>>

export type QueryEntry<Value> = {
  key: Key,
  value?: Value
}

export type Filter<Value> = (QueryEntry<Value>, Callback<bool>) => void

export type Order<Value> = (QueryResult<Value>, Callback<QueryResult<Value>>) => void

*/

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.messages = {
  NOT_STARTED_YET: 'The libp2p node is not started yet',
  DHT_DISABLED: 'DHT is not available'
};
exports.codes = {
  DHT_DISABLED: 'ERR_DHT_DISABLED',
  PUBSUB_NOT_STARTED: 'ERR_PUBSUB_NOT_STARTED',
  DHT_NOT_STARTED: 'ERR_DHT_NOT_STARTED',
  ERR_CONNECTION_ENDED: 'ERR_CONNECTION_ENDED',
  ERR_CONNECTION_FAILED: 'ERR_CONNECTION_FAILED',
  ERR_NODE_NOT_STARTED: 'ERR_NODE_NOT_STARTED',
  ERR_NO_VALID_ADDRESSES: 'ERR_NO_VALID_ADDRESSES',
  ERR_DISCOVERED_SELF: 'ERR_DISCOVERED_SELF',
  ERR_DUPLICATE_TRANSPORT: 'ERR_DUPLICATE_TRANSPORT',
  ERR_ENCRYPTION_FAILED: 'ERR_ENCRYPTION_FAILED',
  ERR_HOP_REQUEST_FAILED: 'ERR_HOP_REQUEST_FAILED',
  ERR_INVALID_KEY: 'ERR_INVALID_KEY',
  ERR_INVALID_MESSAGE: 'ERR_INVALID_MESSAGE',
  ERR_INVALID_PEER: 'ERR_INVALID_PEER',
  ERR_MUXER_UNAVAILABLE: 'ERR_MUXER_UNAVAILABLE',
  ERR_TIMEOUT: 'ERR_TIMEOUT',
  ERR_TRANSPORT_UNAVAILABLE: 'ERR_TRANSPORT_UNAVAILABLE',
  ERR_TRANSPORT_DIAL_FAILED: 'ERR_TRANSPORT_DIAL_FAILED',
  ERR_UNSUPPORTED_PROTOCOL: 'ERR_UNSUPPORTED_PROTOCOL'
};

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const debug = __webpack_require__(1);
/**
 * Creates a logger for the given subsystem
 *
 * @param {PeerId} [id]
 * @param {string} [subsystem]
 * @returns {debug}
 *
 * @private
 */


const logger = (id, subsystem) => {
  const name = ['bitswap'];

  if (subsystem) {
    name.push(subsystem);
  }

  if (id) {
    name.push("".concat(id.toB58String().slice(0, 8)));
  }

  const logger = debug(name.join(':'));
  logger.error = debug(name.concat(['error']).join(':'));
  return logger;
};

const includesWith = (pred, x, list) => {
  let idx = 0;
  const len = list.length;

  while (idx < len) {
    if (pred(x, list[idx])) {
      return true;
    }

    idx += 1;
  }

  return false;
};

const uniqWith = (pred, list) => {
  let idx = 0;
  const len = list.length;
  const result = [];
  let item;

  while (idx < len) {
    item = list[idx];

    if (!includesWith(pred, item, result)) {
      result[result.length] = item;
    }

    idx += 1;
  }

  return result;
};

const groupBy = (pred, list) => {
  return list.reduce((acc, v) => {
    const k = pred(v);

    if (acc[k]) {
      acc[k].push(v);
    } else {
      acc[k] = [v];
    }

    return acc;
  }, {});
};

const pullAllWith = (pred, list, values) => {
  return list.filter(i => {
    return !includesWith(pred, i, values);
  });
};

const sortBy = (fn, list) => {
  return Array.prototype.slice.call(list, 0).sort((a, b) => {
    const aa = fn(a);
    const bb = fn(b);
    return aa < bb ? -1 : aa > bb ? 1 : 0;
  });
};
/**
 * Is equal for Maps of BitswapMessageEntry or Blocks
 * @param {Map} a
 * @param {Map} b
 * @returns {boolean}
 */


const isMapEqual = (a, b) => {
  if (a.size !== b.size) {
    return false;
  }

  for (const [key, valueA] of a) {
    if (!b.has(key)) {
      return false;
    }

    const valueB = b.get(key); // Support BitswapMessageEntry

    if (typeof valueA.equals === 'function' && !valueA.equals(valueB)) {
      return false;
    } // Support Blocks


    if (valueA._data && !valueA._data.equals(valueB._data)) {
      return false;
    }
  }

  return true;
};

module.exports = {
  logger,
  includesWith,
  uniqWith,
  groupBy,
  pullAllWith,
  sortBy,
  isMapEqual
};

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Object IDs for ASN.1.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2013 Digital Bazaar, Inc.
 */
var forge = __webpack_require__(7);

forge.pki = forge.pki || {};
var oids = module.exports = forge.pki.oids = forge.oids = forge.oids || {}; // set id to name mapping and name to id mapping

function _IN(id, name) {
  oids[id] = name;
  oids[name] = id;
} // set id to name mapping only


function _I_(id, name) {
  oids[id] = name;
} // algorithm OIDs


_IN('1.2.840.113549.1.1.1', 'rsaEncryption'); // Note: md2 & md4 not implemented
//_IN('1.2.840.113549.1.1.2', 'md2WithRSAEncryption');
//_IN('1.2.840.113549.1.1.3', 'md4WithRSAEncryption');


_IN('1.2.840.113549.1.1.4', 'md5WithRSAEncryption');

_IN('1.2.840.113549.1.1.5', 'sha1WithRSAEncryption');

_IN('1.2.840.113549.1.1.7', 'RSAES-OAEP');

_IN('1.2.840.113549.1.1.8', 'mgf1');

_IN('1.2.840.113549.1.1.9', 'pSpecified');

_IN('1.2.840.113549.1.1.10', 'RSASSA-PSS');

_IN('1.2.840.113549.1.1.11', 'sha256WithRSAEncryption');

_IN('1.2.840.113549.1.1.12', 'sha384WithRSAEncryption');

_IN('1.2.840.113549.1.1.13', 'sha512WithRSAEncryption'); // Edwards-curve Digital Signature Algorithm (EdDSA) Ed25519


_IN('1.3.101.112', 'EdDSA25519');

_IN('1.2.840.10040.4.3', 'dsa-with-sha1');

_IN('1.3.14.3.2.7', 'desCBC');

_IN('1.3.14.3.2.26', 'sha1');

_IN('2.16.840.1.101.3.4.2.1', 'sha256');

_IN('2.16.840.1.101.3.4.2.2', 'sha384');

_IN('2.16.840.1.101.3.4.2.3', 'sha512');

_IN('1.2.840.113549.2.5', 'md5'); // pkcs#7 content types


_IN('1.2.840.113549.1.7.1', 'data');

_IN('1.2.840.113549.1.7.2', 'signedData');

_IN('1.2.840.113549.1.7.3', 'envelopedData');

_IN('1.2.840.113549.1.7.4', 'signedAndEnvelopedData');

_IN('1.2.840.113549.1.7.5', 'digestedData');

_IN('1.2.840.113549.1.7.6', 'encryptedData'); // pkcs#9 oids


_IN('1.2.840.113549.1.9.1', 'emailAddress');

_IN('1.2.840.113549.1.9.2', 'unstructuredName');

_IN('1.2.840.113549.1.9.3', 'contentType');

_IN('1.2.840.113549.1.9.4', 'messageDigest');

_IN('1.2.840.113549.1.9.5', 'signingTime');

_IN('1.2.840.113549.1.9.6', 'counterSignature');

_IN('1.2.840.113549.1.9.7', 'challengePassword');

_IN('1.2.840.113549.1.9.8', 'unstructuredAddress');

_IN('1.2.840.113549.1.9.14', 'extensionRequest');

_IN('1.2.840.113549.1.9.20', 'friendlyName');

_IN('1.2.840.113549.1.9.21', 'localKeyId');

_IN('1.2.840.113549.1.9.22.1', 'x509Certificate'); // pkcs#12 safe bags


_IN('1.2.840.113549.1.12.10.1.1', 'keyBag');

_IN('1.2.840.113549.1.12.10.1.2', 'pkcs8ShroudedKeyBag');

_IN('1.2.840.113549.1.12.10.1.3', 'certBag');

_IN('1.2.840.113549.1.12.10.1.4', 'crlBag');

_IN('1.2.840.113549.1.12.10.1.5', 'secretBag');

_IN('1.2.840.113549.1.12.10.1.6', 'safeContentsBag'); // password-based-encryption for pkcs#12


_IN('1.2.840.113549.1.5.13', 'pkcs5PBES2');

_IN('1.2.840.113549.1.5.12', 'pkcs5PBKDF2');

_IN('1.2.840.113549.1.12.1.1', 'pbeWithSHAAnd128BitRC4');

_IN('1.2.840.113549.1.12.1.2', 'pbeWithSHAAnd40BitRC4');

_IN('1.2.840.113549.1.12.1.3', 'pbeWithSHAAnd3-KeyTripleDES-CBC');

_IN('1.2.840.113549.1.12.1.4', 'pbeWithSHAAnd2-KeyTripleDES-CBC');

_IN('1.2.840.113549.1.12.1.5', 'pbeWithSHAAnd128BitRC2-CBC');

_IN('1.2.840.113549.1.12.1.6', 'pbewithSHAAnd40BitRC2-CBC'); // hmac OIDs


_IN('1.2.840.113549.2.7', 'hmacWithSHA1');

_IN('1.2.840.113549.2.8', 'hmacWithSHA224');

_IN('1.2.840.113549.2.9', 'hmacWithSHA256');

_IN('1.2.840.113549.2.10', 'hmacWithSHA384');

_IN('1.2.840.113549.2.11', 'hmacWithSHA512'); // symmetric key algorithm oids


_IN('1.2.840.113549.3.7', 'des-EDE3-CBC');

_IN('2.16.840.1.101.3.4.1.2', 'aes128-CBC');

_IN('2.16.840.1.101.3.4.1.22', 'aes192-CBC');

_IN('2.16.840.1.101.3.4.1.42', 'aes256-CBC'); // certificate issuer/subject OIDs


_IN('2.5.4.3', 'commonName');

_IN('2.5.4.5', 'serialName');

_IN('2.5.4.6', 'countryName');

_IN('2.5.4.7', 'localityName');

_IN('2.5.4.8', 'stateOrProvinceName');

_IN('2.5.4.9', 'streetAddress');

_IN('2.5.4.10', 'organizationName');

_IN('2.5.4.11', 'organizationalUnitName');

_IN('2.5.4.13', 'description');

_IN('2.5.4.15', 'businessCategory');

_IN('2.5.4.17', 'postalCode');

_IN('1.3.6.1.4.1.311.60.2.1.2', 'jurisdictionOfIncorporationStateOrProvinceName');

_IN('1.3.6.1.4.1.311.60.2.1.3', 'jurisdictionOfIncorporationCountryName'); // X.509 extension OIDs


_IN('2.16.840.1.113730.1.1', 'nsCertType');

_IN('2.16.840.1.113730.1.13', 'nsComment'); // deprecated in theory; still widely used


_I_('2.5.29.1', 'authorityKeyIdentifier'); // deprecated, use .35


_I_('2.5.29.2', 'keyAttributes'); // obsolete use .37 or .15


_I_('2.5.29.3', 'certificatePolicies'); // deprecated, use .32


_I_('2.5.29.4', 'keyUsageRestriction'); // obsolete use .37 or .15


_I_('2.5.29.5', 'policyMapping'); // deprecated use .33


_I_('2.5.29.6', 'subtreesConstraint'); // obsolete use .30


_I_('2.5.29.7', 'subjectAltName'); // deprecated use .17


_I_('2.5.29.8', 'issuerAltName'); // deprecated use .18


_I_('2.5.29.9', 'subjectDirectoryAttributes');

_I_('2.5.29.10', 'basicConstraints'); // deprecated use .19


_I_('2.5.29.11', 'nameConstraints'); // deprecated use .30


_I_('2.5.29.12', 'policyConstraints'); // deprecated use .36


_I_('2.5.29.13', 'basicConstraints'); // deprecated use .19


_IN('2.5.29.14', 'subjectKeyIdentifier');

_IN('2.5.29.15', 'keyUsage');

_I_('2.5.29.16', 'privateKeyUsagePeriod');

_IN('2.5.29.17', 'subjectAltName');

_IN('2.5.29.18', 'issuerAltName');

_IN('2.5.29.19', 'basicConstraints');

_I_('2.5.29.20', 'cRLNumber');

_I_('2.5.29.21', 'cRLReason');

_I_('2.5.29.22', 'expirationDate');

_I_('2.5.29.23', 'instructionCode');

_I_('2.5.29.24', 'invalidityDate');

_I_('2.5.29.25', 'cRLDistributionPoints'); // deprecated use .31


_I_('2.5.29.26', 'issuingDistributionPoint'); // deprecated use .28


_I_('2.5.29.27', 'deltaCRLIndicator');

_I_('2.5.29.28', 'issuingDistributionPoint');

_I_('2.5.29.29', 'certificateIssuer');

_I_('2.5.29.30', 'nameConstraints');

_IN('2.5.29.31', 'cRLDistributionPoints');

_IN('2.5.29.32', 'certificatePolicies');

_I_('2.5.29.33', 'policyMappings');

_I_('2.5.29.34', 'policyConstraints'); // deprecated use .36


_IN('2.5.29.35', 'authorityKeyIdentifier');

_I_('2.5.29.36', 'policyConstraints');

_IN('2.5.29.37', 'extKeyUsage');

_I_('2.5.29.46', 'freshestCRL');

_I_('2.5.29.54', 'inhibitAnyPolicy'); // extKeyUsage purposes


_IN('1.3.6.1.4.1.11129.2.4.2', 'timestampList');

_IN('1.3.6.1.5.5.7.1.1', 'authorityInfoAccess');

_IN('1.3.6.1.5.5.7.3.1', 'serverAuth');

_IN('1.3.6.1.5.5.7.3.2', 'clientAuth');

_IN('1.3.6.1.5.5.7.3.3', 'codeSigning');

_IN('1.3.6.1.5.5.7.3.4', 'emailProtection');

_IN('1.3.6.1.5.5.7.3.8', 'timeStamping');

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * An API for getting cryptographically-secure random bytes. The bytes are
 * generated using the Fortuna algorithm devised by Bruce Schneier and
 * Niels Ferguson.
 *
 * Getting strong random bytes is not yet easy to do in javascript. The only
 * truish random entropy that can be collected is from the mouse, keyboard, or
 * from timing with respect to page loads, etc. This generator makes a poor
 * attempt at providing random bytes when those sources haven't yet provided
 * enough entropy to initially seed or to reseed the PRNG.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2009-2014 Digital Bazaar, Inc.
 */
var forge = __webpack_require__(7);

__webpack_require__(92);

__webpack_require__(407);

__webpack_require__(408);

__webpack_require__(10);

(function () {
  // forge.random already defined
  if (forge.random && forge.random.getBytes) {
    module.exports = forge.random;
    return;
  }

  (function (jQuery) {
    // the default prng plugin, uses AES-128
    var prng_aes = {};

    var _prng_aes_output = new Array(4);

    var _prng_aes_buffer = forge.util.createBuffer();

    prng_aes.formatKey = function (key) {
      // convert the key into 32-bit integers
      var tmp = forge.util.createBuffer(key);
      key = new Array(4);
      key[0] = tmp.getInt32();
      key[1] = tmp.getInt32();
      key[2] = tmp.getInt32();
      key[3] = tmp.getInt32(); // return the expanded key

      return forge.aes._expandKey(key, false);
    };

    prng_aes.formatSeed = function (seed) {
      // convert seed into 32-bit integers
      var tmp = forge.util.createBuffer(seed);
      seed = new Array(4);
      seed[0] = tmp.getInt32();
      seed[1] = tmp.getInt32();
      seed[2] = tmp.getInt32();
      seed[3] = tmp.getInt32();
      return seed;
    };

    prng_aes.cipher = function (key, seed) {
      forge.aes._updateBlock(key, seed, _prng_aes_output, false);

      _prng_aes_buffer.putInt32(_prng_aes_output[0]);

      _prng_aes_buffer.putInt32(_prng_aes_output[1]);

      _prng_aes_buffer.putInt32(_prng_aes_output[2]);

      _prng_aes_buffer.putInt32(_prng_aes_output[3]);

      return _prng_aes_buffer.getBytes();
    };

    prng_aes.increment = function (seed) {
      // FIXME: do we care about carry or signed issues?
      ++seed[3];
      return seed;
    };

    prng_aes.md = forge.md.sha256;
    /**
     * Creates a new PRNG.
     */

    function spawnPrng() {
      var ctx = forge.prng.create(prng_aes);
      /**
       * Gets random bytes. If a native secure crypto API is unavailable, this
       * method tries to make the bytes more unpredictable by drawing from data that
       * can be collected from the user of the browser, eg: mouse movement.
       *
       * If a callback is given, this method will be called asynchronously.
       *
       * @param count the number of random bytes to get.
       * @param [callback(err, bytes)] called once the operation completes.
       *
       * @return the random bytes in a string.
       */

      ctx.getBytes = function (count, callback) {
        return ctx.generate(count, callback);
      };
      /**
       * Gets random bytes asynchronously. If a native secure crypto API is
       * unavailable, this method tries to make the bytes more unpredictable by
       * drawing from data that can be collected from the user of the browser,
       * eg: mouse movement.
       *
       * @param count the number of random bytes to get.
       *
       * @return the random bytes in a string.
       */


      ctx.getBytesSync = function (count) {
        return ctx.generate(count);
      };

      return ctx;
    } // create default prng context


    var _ctx = spawnPrng(); // add other sources of entropy only if window.crypto.getRandomValues is not
    // available -- otherwise this source will be automatically used by the prng


    var getRandomValues = null;
    var globalScope = forge.util.globalScope;

    var _crypto = globalScope.crypto || globalScope.msCrypto;

    if (_crypto && _crypto.getRandomValues) {
      getRandomValues = function getRandomValues(arr) {
        return _crypto.getRandomValues(arr);
      };
    }

    if (forge.options.usePureJavaScript || !forge.util.isNodejs && !getRandomValues) {
      // if this is a web worker, do not use weak entropy, instead register to
      // receive strong entropy asynchronously from the main thread
      if (typeof window === 'undefined' || window.document === undefined) {} // FIXME:
      // get load time entropy


      _ctx.collectInt(+new Date(), 32); // add some entropy from navigator object


      if (typeof navigator !== 'undefined') {
        var _navBytes = '';

        for (var key in navigator) {
          try {
            if (typeof navigator[key] == 'string') {
              _navBytes += navigator[key];
            }
          } catch (e) {
            /* Some navigator keys might not be accessible, e.g. the geolocation
              attribute throws an exception if touched in Mozilla chrome://
              context.
               Silently ignore this and just don't use this as a source of
              entropy. */
          }
        }

        _ctx.collect(_navBytes);

        _navBytes = null;
      } // add mouse and keyboard collectors if jquery is available


      if (jQuery) {
        // set up mouse entropy capture
        jQuery().mousemove(function (e) {
          // add mouse coords
          _ctx.collectInt(e.clientX, 16);

          _ctx.collectInt(e.clientY, 16);
        }); // set up keyboard entropy capture

        jQuery().keypress(function (e) {
          _ctx.collectInt(e.charCode, 8);
        });
      }
    }
    /* Random API */


    if (!forge.random) {
      forge.random = _ctx;
    } else {
      // extend forge.random with _ctx
      for (var key in _ctx) {
        forge.random[key] = _ctx[key];
      }
    } // expose spawn PRNG


    forge.random.createInstance = spawnPrng;
    module.exports = forge.random;
  })(typeof jQuery !== 'undefined' ? jQuery : null);
})();

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Node.js module for Forge message digests.
 *
 * @author Dave Longley
 *
 * Copyright 2011-2017 Digital Bazaar, Inc.
 */
var forge = __webpack_require__(7);

module.exports = forge.md = forge.md || {};
forge.md.algorithms = forge.md.algorithms || {};

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

/*<replacement>*/

var pna = __webpack_require__(96);
/*</replacement>*/

/*<replacement>*/


var objectKeys = Object.keys || function (obj) {
  var keys = [];

  for (var key in obj) {
    keys.push(key);
  }

  return keys;
};
/*</replacement>*/


module.exports = Duplex;
/*<replacement>*/

var util = Object.create(__webpack_require__(76));
util.inherits = __webpack_require__(4);
/*</replacement>*/

var Readable = __webpack_require__(216);

var Writable = __webpack_require__(139);

util.inherits(Duplex, Readable);
{
  // avoid scope creep, the keys array can then be collected
  var keys = objectKeys(Writable.prototype);

  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);
  Readable.call(this, options);
  Writable.call(this, options);
  if (options && options.readable === false) this.readable = false;
  if (options && options.writable === false) this.writable = false;
  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;
  this.once('end', onend);
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
}); // the no-half-open enforcer

function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return; // no more data can be written.
  // But allow more writes to happen in this tick.

  pna.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function get() {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }

    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();
  pna.nextTick(cb, err);
};

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Buffer = __webpack_require__(6).Buffer;

var Transform = __webpack_require__(215).Transform;

var StringDecoder = __webpack_require__(77).StringDecoder;

var inherits = __webpack_require__(4);

function CipherBase(hashMode) {
  Transform.call(this);
  this.hashMode = typeof hashMode === 'string';

  if (this.hashMode) {
    this[hashMode] = this._finalOrDigest;
  } else {
    this.final = this._finalOrDigest;
  }

  if (this._final) {
    this.__final = this._final;
    this._final = null;
  }

  this._decoder = null;
  this._encoding = null;
}

inherits(CipherBase, Transform);

CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = Buffer.from(data, inputEnc);
  }

  var outData = this._update(data);

  if (this.hashMode) return this;

  if (outputEnc) {
    outData = this._toString(outData, outputEnc);
  }

  return outData;
};

CipherBase.prototype.setAutoPadding = function () {};

CipherBase.prototype.getAuthTag = function () {
  throw new Error('trying to get auth tag in unsupported state');
};

CipherBase.prototype.setAuthTag = function () {
  throw new Error('trying to set auth tag in unsupported state');
};

CipherBase.prototype.setAAD = function () {
  throw new Error('trying to set aad in unsupported state');
};

CipherBase.prototype._transform = function (data, _, next) {
  var err;

  try {
    if (this.hashMode) {
      this._update(data);
    } else {
      this.push(this._update(data));
    }
  } catch (e) {
    err = e;
  } finally {
    next(err);
  }
};

CipherBase.prototype._flush = function (done) {
  var err;

  try {
    this.push(this.__final());
  } catch (e) {
    err = e;
  }

  done(err);
};

CipherBase.prototype._finalOrDigest = function (outputEnc) {
  var outData = this.__final() || Buffer.alloc(0);

  if (outputEnc) {
    outData = this._toString(outData, outputEnc, true);
  }

  return outData;
};

CipherBase.prototype._toString = function (value, enc, fin) {
  if (!this._decoder) {
    this._decoder = new StringDecoder(enc);
    this._encoding = enc;
  }

  if (this._encoding !== enc) throw new Error('can\'t switch encodings');

  var out = this._decoder.write(value);

  if (fin) {
    out += this._decoder.end();
  }

  return out;
};

module.exports = CipherBase;

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

const EventEmitter = __webpack_require__(539);

const p_timeout_1 = __webpack_require__(59);

const priority_queue_1 = __webpack_require__(541);

const empty = () => {};

const timeoutError = new p_timeout_1.TimeoutError();
/**
Promise queue with concurrency control.
*/

class PQueue extends EventEmitter {
  constructor(options) {
    super();
    Object.defineProperty(this, "_carryoverConcurrencyCount", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_isIntervalIgnored", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_intervalCount", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty(this, "_intervalCap", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_interval", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_intervalEnd", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty(this, "_intervalId", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_timeoutId", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_queue", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_queueClass", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_pendingCount", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    }); // The `!` is needed because of https://github.com/microsoft/TypeScript/issues/32194

    Object.defineProperty(this, "_concurrency", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_isPaused", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_resolveEmpty", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: empty
    });
    Object.defineProperty(this, "_resolveIdle", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: empty
    });
    Object.defineProperty(this, "_timeout", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_throwOnTimeout", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    }); // eslint-disable-next-line @typescript-eslint/no-object-literal-type-assertion

    options = Object.assign({
      carryoverConcurrencyCount: false,
      intervalCap: Infinity,
      interval: 0,
      concurrency: Infinity,
      autoStart: true,
      queueClass: priority_queue_1.default
    }, options // TODO: Remove this `as`.
    );

    if (!(typeof options.intervalCap === 'number' && options.intervalCap >= 1)) {
      throw new TypeError("Expected `intervalCap` to be a number from 1 and up, got `".concat(options.intervalCap, "` (").concat(typeof options.intervalCap, ")"));
    }

    if (options.interval === undefined || !(Number.isFinite(options.interval) && options.interval >= 0)) {
      throw new TypeError("Expected `interval` to be a finite number >= 0, got `".concat(options.interval, "` (").concat(typeof options.interval, ")"));
    }

    this._carryoverConcurrencyCount = options.carryoverConcurrencyCount;
    this._isIntervalIgnored = options.intervalCap === Infinity || options.interval === 0;
    this._intervalCap = options.intervalCap;
    this._interval = options.interval;
    this._queue = new options.queueClass();
    this._queueClass = options.queueClass;
    this.concurrency = options.concurrency;
    this._timeout = options.timeout;
    this._throwOnTimeout = options.throwOnTimeout === true;
    this._isPaused = options.autoStart === false;
  }

  get _doesIntervalAllowAnother() {
    return this._isIntervalIgnored || this._intervalCount < this._intervalCap;
  }

  get _doesConcurrentAllowAnother() {
    return this._pendingCount < this._concurrency;
  }

  _next() {
    this._pendingCount--;

    this._tryToStartAnother();
  }

  _resolvePromises() {
    this._resolveEmpty();

    this._resolveEmpty = empty;

    if (this._pendingCount === 0) {
      this._resolveIdle();

      this._resolveIdle = empty;
    }
  }

  _onResumeInterval() {
    this._onInterval();

    this._initializeIntervalIfNeeded();

    this._timeoutId = undefined;
  }

  _isIntervalPaused() {
    const now = Date.now();

    if (this._intervalId === undefined) {
      const delay = this._intervalEnd - now;

      if (delay < 0) {
        // Act as the interval was done
        // We don't need to resume it here because it will be resumed on line 160
        this._intervalCount = this._carryoverConcurrencyCount ? this._pendingCount : 0;
      } else {
        // Act as the interval is pending
        if (this._timeoutId === undefined) {
          this._timeoutId = setTimeout(() => {
            this._onResumeInterval();
          }, delay);
        }

        return true;
      }
    }

    return false;
  }

  _tryToStartAnother() {
    if (this._queue.size === 0) {
      // We can clear the interval ("pause")
      // Because we can redo it later ("resume")
      if (this._intervalId) {
        clearInterval(this._intervalId);
      }

      this._intervalId = undefined;

      this._resolvePromises();

      return false;
    }

    if (!this._isPaused) {
      const canInitializeInterval = !this._isIntervalPaused();

      if (this._doesIntervalAllowAnother && this._doesConcurrentAllowAnother) {
        this.emit('active');

        this._queue.dequeue()();

        if (canInitializeInterval) {
          this._initializeIntervalIfNeeded();
        }

        return true;
      }
    }

    return false;
  }

  _initializeIntervalIfNeeded() {
    if (this._isIntervalIgnored || this._intervalId !== undefined) {
      return;
    }

    this._intervalId = setInterval(() => {
      this._onInterval();
    }, this._interval);
    this._intervalEnd = Date.now() + this._interval;
  }

  _onInterval() {
    if (this._intervalCount === 0 && this._pendingCount === 0 && this._intervalId) {
      clearInterval(this._intervalId);
      this._intervalId = undefined;
    }

    this._intervalCount = this._carryoverConcurrencyCount ? this._pendingCount : 0;

    this._processQueue();
  }
  /**
  Executes all queued functions until it reaches the limit.
  */


  _processQueue() {
    // eslint-disable-next-line no-empty
    while (this._tryToStartAnother()) {}
  }

  get concurrency() {
    return this._concurrency;
  }

  set concurrency(newConcurrency) {
    if (!(typeof newConcurrency === 'number' && newConcurrency >= 1)) {
      throw new TypeError("Expected `concurrency` to be a number from 1 and up, got `".concat(newConcurrency, "` (").concat(typeof newConcurrency, ")"));
    }

    this._concurrency = newConcurrency;

    this._processQueue();
  }
  /**
  Adds a sync or async task to the queue. Always returns a promise.
  */


  async add(fn, options = {}) {
    return new Promise((resolve, reject) => {
      const run = async () => {
        this._pendingCount++;
        this._intervalCount++;

        try {
          const operation = this._timeout === undefined && options.timeout === undefined ? fn() : p_timeout_1.default(Promise.resolve(fn()), options.timeout === undefined ? this._timeout : options.timeout, () => {
            if (options.throwOnTimeout === undefined ? this._throwOnTimeout : options.throwOnTimeout) {
              reject(timeoutError);
            }

            return undefined;
          });
          resolve((await operation));
        } catch (error) {
          reject(error);
        }

        this._next();
      };

      this._queue.enqueue(run, options);

      this._tryToStartAnother();
    });
  }
  /**
  Same as `.add()`, but accepts an array of sync or async functions.
   @returns A promise that resolves when all functions are resolved.
  */


  async addAll(functions, options) {
    return Promise.all(functions.map(async function_ => this.add(function_, options)));
  }
  /**
  Start (or resume) executing enqueued tasks within concurrency limit. No need to call this if queue is not paused (via `options.autoStart = false` or by `.pause()` method.)
  */


  start() {
    if (!this._isPaused) {
      return this;
    }

    this._isPaused = false;

    this._processQueue();

    return this;
  }
  /**
  Put queue execution on hold.
  */


  pause() {
    this._isPaused = true;
  }
  /**
  Clear the queue.
  */


  clear() {
    this._queue = new this._queueClass();
  }
  /**
  Can be called multiple times. Useful if you for example add additional items at a later time.
   @returns A promise that settles when the queue becomes empty.
  */


  async onEmpty() {
    // Instantly resolve if the queue is empty
    if (this._queue.size === 0) {
      return;
    }

    return new Promise(resolve => {
      const existingResolve = this._resolveEmpty;

      this._resolveEmpty = () => {
        existingResolve();
        resolve();
      };
    });
  }
  /**
  The difference with `.onEmpty` is that `.onIdle` guarantees that all work from the queue has finished. `.onEmpty` merely signals that the queue is empty, but it could mean that some promises haven't completed yet.
   @returns A promise that settles when the queue becomes empty, and all promises have completed; `queue.size === 0 && queue.pending === 0`.
  */


  async onIdle() {
    // Instantly resolve if none pending and if nothing else is queued
    if (this._pendingCount === 0 && this._queue.size === 0) {
      return;
    }

    return new Promise(resolve => {
      const existingResolve = this._resolveIdle;

      this._resolveIdle = () => {
        existingResolve();
        resolve();
      };
    });
  }
  /**
  Size of the queue.
  */


  get size() {
    return this._queue.size;
  }
  /**
  Number of pending promises.
  */


  get pending() {
    return this._pendingCount;
  }
  /**
  Whether the queue is currently paused.
  */


  get isPaused() {
    return this._isPaused;
  }
  /**
  Set the timeout for future operations.
  */


  set timeout(milliseconds) {
    this._timeout = milliseconds;
  }

  get timeout() {
    return this._timeout;
  }

}

exports.default = PQueue;

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // MaxRecordAge specifies the maximum time that any node will hold onto a record
// from the time its received. This does not apply to any other forms of validity that
// the record may contain.
// For example, a record may contain an ipns entry with an EOL saying its valid
// until the year 2020 (a great time in the future). For that record to stick around
// it must be rebroadcasted more frequently than once every 'MaxRecordAge'

const second = exports.second = 1000;
const minute = exports.minute = 60 * second;
const hour = exports.hour = 60 * minute;
exports.MAX_RECORD_AGE = 36 * hour;
exports.PROTOCOL_DHT = '/ipfs/kad/1.0.0';
exports.PROVIDERS_KEY_PREFIX = '/providers/';
exports.PROVIDERS_LRU_CACHE_SIZE = 256;
exports.PROVIDERS_VALIDITY = 24 * hour;
exports.PROVIDERS_CLEANUP_INTERVAL = hour;
exports.READ_MESSAGE_TIMEOUT = 10 * second; // The number of records that will be retrieved on a call to getMany()

exports.GET_MANY_RECORD_COUNT = 16; // K is the maximum number of requests to perform before returning failure

exports.K = 20; // Alpha is the concurrency for asynchronous requests

exports.ALPHA = 3;
exports.defaultRandomWalk = {
  enabled: true,
  queriesPerPeriod: 1,
  interval: 5 * minute,
  timeout: 10 * second,
  delay: 10 * second
};

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const CID = __webpack_require__(3);

const errCode = __webpack_require__(2);

const {
  withTimeoutOption
} = __webpack_require__(29);

function normalizeMultihash(multihash, enc) {
  if (typeof multihash === 'string') {
    if (enc === 'base58' || !enc) {
      return multihash;
    }

    return Buffer.from(multihash, enc);
  } else if (Buffer.isBuffer(multihash)) {
    return multihash;
  } else if (CID.isCID(multihash)) {
    return multihash.buffer;
  }

  throw new Error('unsupported multihash');
}

module.exports = ({
  ipld,
  preload
}) => {
  return withTimeoutOption(async function get(multihash, options) {
    // eslint-disable-line require-await
    options = options || {};
    let mh, cid;

    try {
      mh = normalizeMultihash(multihash, options.enc);
    } catch (err) {
      throw errCode(err, 'ERR_INVALID_MULTIHASH');
    }

    try {
      cid = new CID(mh);
    } catch (err) {
      throw errCode(err, 'ERR_INVALID_CID');
    }

    if (options.cidVersion === 1) {
      cid = cid.toV1();
    }

    if (options.preload !== false) {
      preload(cid);
    }

    return ipld.get(cid, {
      signal: options.signal
    });
  });
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {/**
 * Implementation of the [multibase](https://github.com/multiformats/multibase) specification.
 * @module Multibase
 */


const constants = __webpack_require__(383);

exports = module.exports = multibase;
exports.encode = encode;
exports.decode = decode;
exports.isEncoded = isEncoded;
exports.names = Object.freeze(Object.keys(constants.names));
exports.codes = Object.freeze(Object.keys(constants.codes));
const errNotSupported = new Error('Unsupported encoding');
/**
 * Create a new buffer with the multibase varint+code.
 *
 * @param {string|number} nameOrCode - The multibase name or code number.
 * @param {Buffer} buf - The data to be prefixed with multibase.
 * @memberof Multibase
 * @returns {Buffer}
 */

function multibase(nameOrCode, buf) {
  if (!buf) {
    throw new Error('requires an encoded buffer');
  }

  const base = getBase(nameOrCode);
  const codeBuf = Buffer.from(base.code);
  const name = base.name;
  validEncode(name, buf);
  return Buffer.concat([codeBuf, buf]);
}
/**
 * Encode data with the specified base and add the multibase prefix.
 *
 * @param {string|number} nameOrCode - The multibase name or code number.
 * @param {Buffer} buf - The data to be encoded.
 * @returns {Buffer}
 * @memberof Multibase
 */


function encode(nameOrCode, buf) {
  const base = getBase(nameOrCode);
  const name = base.name;
  return multibase(name, Buffer.from(base.encode(buf)));
}
/**
 * Takes a buffer or string encoded with multibase header, decodes it and
 * returns the decoded buffer
 *
 * @param {Buffer|string} bufOrString
 * @returns {Buffer}
 * @memberof Multibase
 *
 */


function decode(bufOrString) {
  if (Buffer.isBuffer(bufOrString)) {
    bufOrString = bufOrString.toString();
  }

  const code = bufOrString.substring(0, 1);
  bufOrString = bufOrString.substring(1, bufOrString.length);

  if (typeof bufOrString === 'string') {
    bufOrString = Buffer.from(bufOrString);
  }

  const base = getBase(code);
  return Buffer.from(base.decode(bufOrString.toString()));
}
/**
 * Is the given data multibase encoded?
 *
 * @param {Buffer|string} bufOrString
 * @returns {boolean}
 * @memberof Multibase
 */


function isEncoded(bufOrString) {
  if (Buffer.isBuffer(bufOrString)) {
    bufOrString = bufOrString.toString();
  } // Ensure bufOrString is a string


  if (Object.prototype.toString.call(bufOrString) !== '[object String]') {
    return false;
  }

  const code = bufOrString.substring(0, 1);

  try {
    const base = getBase(code);
    return base.name;
  } catch (err) {
    return false;
  }
}
/**
 * @param {string} name
 * @param {Buffer} buf
 * @private
 * @returns {undefined}
 */


function validEncode(name, buf) {
  const base = getBase(name);
  base.decode(buf.toString());
}

function getBase(nameOrCode) {
  let base;

  if (constants.names[nameOrCode]) {
    base = constants.names[nameOrCode];
  } else if (constants.codes[nameOrCode]) {
    base = constants.codes[nameOrCode];
  } else {
    throw errNotSupported;
  }

  if (!base.isImplemented()) {
    throw new Error('Base ' + nameOrCode + ' is not implemented yet');
  }

  return base;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Buffer = __webpack_require__(6).Buffer; // prototype class for hash functions


function Hash(blockSize, finalSize) {
  this._block = Buffer.alloc(blockSize);
  this._finalSize = finalSize;
  this._blockSize = blockSize;
  this._len = 0;
}

Hash.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    enc = enc || 'utf8';
    data = Buffer.from(data, enc);
  }

  var block = this._block;
  var blockSize = this._blockSize;
  var length = data.length;
  var accum = this._len;

  for (var offset = 0; offset < length;) {
    var assigned = accum % blockSize;
    var remainder = Math.min(length - offset, blockSize - assigned);

    for (var i = 0; i < remainder; i++) {
      block[assigned + i] = data[offset + i];
    }

    accum += remainder;
    offset += remainder;

    if (accum % blockSize === 0) {
      this._update(block);
    }
  }

  this._len += length;
  return this;
};

Hash.prototype.digest = function (enc) {
  var rem = this._len % this._blockSize;
  this._block[rem] = 0x80; // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize

  this._block.fill(0, rem + 1);

  if (rem >= this._finalSize) {
    this._update(this._block);

    this._block.fill(0);
  }

  var bits = this._len * 8; // uint32

  if (bits <= 0xffffffff) {
    this._block.writeUInt32BE(bits, this._blockSize - 4); // uint64

  } else {
    var lowBits = (bits & 0xffffffff) >>> 0;
    var highBits = (bits - lowBits) / 0x100000000;

    this._block.writeUInt32BE(highBits, this._blockSize - 8);

    this._block.writeUInt32BE(lowBits, this._blockSize - 4);
  }

  this._update(this._block);

  var hash = this._hash();

  return enc ? hash.toString(enc) : hash;
};

Hash.prototype._update = function () {
  throw new Error('_update must be implemented by subclass');
};

module.exports = Hash;

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const base58 = __webpack_require__(39);

const multihash = __webpack_require__(16);

const multibase = __webpack_require__(53);

const Multiaddr = __webpack_require__(20);

const mafmt = __webpack_require__(56);

const CID = __webpack_require__(3);

const urlPattern = /^https?:\/\/[^/]+\/(ip(f|n)s)\/((\w+).*)/;
const pathPattern = /^\/(ip(f|n)s)\/((\w+).*)/;
const defaultProtocolMatch = 1;
const defaultHashMath = 4;
const fqdnPattern = /^https?:\/\/([^/]+)\.(ip(?:f|n)s)\.[^/]+/;
const fqdnHashMatch = 1;
const fqdnProtocolMatch = 2;

function isMultihash(hash) {
  const formatted = convertToString(hash);

  try {
    const buffer = Buffer.from(base58.decode(formatted));
    multihash.decode(buffer);
    return true;
  } catch (e) {
    return false;
  }
}

function isMultibase(hash) {
  try {
    return multibase.isEncoded(hash);
  } catch (e) {
    return false;
  }
}

function isCID(hash) {
  try {
    new CID(hash); // eslint-disable-line no-new

    return true;
  } catch (e) {
    return false;
  }
}

function isMultiaddr(input) {
  if (!input) return false;
  if (Multiaddr.isMultiaddr(input)) return true;

  try {
    new Multiaddr(input); // eslint-disable-line no-new

    return true;
  } catch (e) {
    return false;
  }
}

function isPeerMultiaddr(input) {
  return isMultiaddr(input) && mafmt.IPFS.matches(input);
}

function isIpfs(input, pattern, protocolMatch = defaultProtocolMatch, hashMatch = defaultHashMath) {
  const formatted = convertToString(input);

  if (!formatted) {
    return false;
  }

  const match = formatted.match(pattern);

  if (!match) {
    return false;
  }

  if (match[protocolMatch] !== 'ipfs') {
    return false;
  }

  let hash = match[hashMatch];

  if (hash && pattern === fqdnPattern) {
    // when doing checks for subdomain context
    // ensure hash is case-insensitive
    // (browsers force-lowercase authority compotent anyway)
    hash = hash.toLowerCase();
  }

  return isCID(hash);
}

function isIpns(input, pattern, protocolMatch = defaultProtocolMatch, hashMatch) {
  const formatted = convertToString(input);

  if (!formatted) {
    return false;
  }

  const match = formatted.match(pattern);

  if (!match) {
    return false;
  }

  if (match[protocolMatch] !== 'ipns') {
    return false;
  }

  if (hashMatch && pattern === fqdnPattern) {
    let hash = match[hashMatch]; // when doing checks for subdomain context
    // ensure hash is case-insensitive
    // (browsers force-lowercase authority compotent anyway)

    hash = hash.toLowerCase();
    return isCID(hash);
  }

  return true;
}

function isString(input) {
  return typeof input === 'string';
}

function convertToString(input) {
  if (Buffer.isBuffer(input)) {
    return base58.encode(input);
  }

  if (isString(input)) {
    return input;
  }

  return false;
}

const ipfsSubdomain = url => isIpfs(url, fqdnPattern, fqdnProtocolMatch, fqdnHashMatch);

const ipnsSubdomain = url => isIpns(url, fqdnPattern, fqdnProtocolMatch, fqdnHashMatch);

module.exports = {
  multihash: isMultihash,
  multiaddr: isMultiaddr,
  peerMultiaddr: isPeerMultiaddr,
  cid: isCID,
  base32cid: cid => isMultibase(cid) === 'base32' && isCID(cid),
  ipfsSubdomain: ipfsSubdomain,
  ipnsSubdomain: ipnsSubdomain,
  subdomain: url => ipfsSubdomain(url) || ipnsSubdomain(url),
  subdomainPattern: fqdnPattern,
  ipfsUrl: url => isIpfs(url, urlPattern),
  ipnsUrl: url => isIpns(url, urlPattern),
  url: _url => isIpfs(_url, urlPattern) || isIpns(_url, urlPattern),
  urlPattern: urlPattern,
  ipfsPath: path => isIpfs(path, pathPattern),
  ipnsPath: path => isIpns(path, pathPattern),
  path: _path => isIpfs(_path, pathPattern) || isIpns(_path, pathPattern),
  pathPattern: pathPattern,
  urlOrPath: x => isIpfs(x, urlPattern) || isIpns(x, urlPattern) || isIpfs(x, pathPattern) || isIpns(x, pathPattern),
  cidPath: path => isString(path) && !isCID(path) && isIpfs("/ipfs/".concat(path), pathPattern)
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const multiaddr = __webpack_require__(20);
/*
 * Valid combinations
 */


const DNS4 = base('dns4');
const DNS6 = base('dns6');
const DNS = or(base('dns'), base('dnsaddr'), DNS4, DNS6);
const IP = or(base('ip4'), base('ip6'));
const TCP = or(and(IP, base('tcp')), and(DNS, base('tcp')));
const UDP = and(IP, base('udp'));
const UTP = and(UDP, base('utp'));
const WebSockets = or(and(TCP, base('ws')), and(DNS, base('ws')));
const WebSocketsSecure = or(and(TCP, base('wss')), and(DNS, base('wss')));
const HTTP = or(and(TCP, base('http')), and(IP, base('http')), and(DNS, base('http')));
const HTTPS = or(and(TCP, base('https')), and(IP, base('https')), and(DNS, base('https')));
const WebRTCStar = or(and(WebSockets, base('p2p-webrtc-star'), base('p2p')), and(WebSocketsSecure, base('p2p-webrtc-star'), base('p2p')), and(WebSockets, base('p2p-webrtc-star')), and(WebSocketsSecure, base('p2p-webrtc-star')));
const WebSocketStar = or(and(WebSockets, base('p2p-websocket-star'), base('p2p')), and(WebSocketsSecure, base('p2p-websocket-star'), base('p2p')), and(WebSockets, base('p2p-websocket-star')), and(WebSocketsSecure, base('p2p-websocket-star')));
const WebRTCDirect = or(and(HTTP, base('p2p-webrtc-direct')), and(HTTPS, base('p2p-webrtc-direct')));
const Reliable = or(WebSockets, WebSocketsSecure, HTTP, HTTPS, WebRTCStar, WebRTCDirect, TCP, UTP); // Unlike ws-star, stardust can run over any transport thus removing the requirement for websockets (but don't even think about running a stardust server over webrtc-star ;) )

const Stardust = or(and(Reliable, base('p2p-stardust'), base('p2p')), and(Reliable, base('p2p-stardust')));

const _P2P = or(and(Reliable, base('p2p')), WebRTCStar, base('p2p'));

const _Circuit = or(and(_P2P, base('p2p-circuit'), _P2P), and(_P2P, base('p2p-circuit')), and(base('p2p-circuit'), _P2P), and(Reliable, base('p2p-circuit')), and(base('p2p-circuit'), Reliable), base('p2p-circuit'));

const CircuitRecursive = () => or(and(_Circuit, CircuitRecursive), _Circuit);

const Circuit = CircuitRecursive();
const P2P = or(and(Circuit, _P2P, Circuit), and(_P2P, Circuit), and(Circuit, _P2P), Circuit, _P2P);
exports.DNS = DNS;
exports.DNS4 = DNS4;
exports.DNS6 = DNS6;
exports.IP = IP;
exports.TCP = TCP;
exports.UDP = UDP;
exports.UTP = UTP;
exports.HTTP = HTTP;
exports.HTTPS = HTTPS;
exports.WebSockets = WebSockets;
exports.WebSocketsSecure = WebSocketsSecure;
exports.WebSocketStar = WebSocketStar;
exports.WebRTCStar = WebRTCStar;
exports.WebRTCDirect = WebRTCDirect;
exports.Reliable = Reliable;
exports.Stardust = Stardust;
exports.Circuit = Circuit;
exports.P2P = P2P;
exports.IPFS = P2P;
/*
 * Validation funcs
 */

function makeMatchesFunction(partialMatch) {
  return function matches(a) {
    if (!multiaddr.isMultiaddr(a)) {
      try {
        a = multiaddr(a);
      } catch (err) {
        // catch error
        return false; // also if it's invalid it's propably not matching as well so return false
      }
    }

    const out = partialMatch(a.protoNames());

    if (out === null) {
      return false;
    }

    return out.length === 0;
  };
}

function and() {
  const args = Array.from(arguments);

  function partialMatch(a) {
    if (a.length < args.length) {
      return null;
    }

    args.some(arg => {
      a = typeof arg === 'function' ? arg().partialMatch(a) : arg.partialMatch(a);

      if (a === null) {
        return true;
      }
    });
    return a;
  }

  return {
    toString: function toString() {
      return '{ ' + args.join(' ') + ' }';
    },
    input: args,
    matches: makeMatchesFunction(partialMatch),
    partialMatch: partialMatch
  };
}

function or() {
  const args = Array.from(arguments);

  function partialMatch(a) {
    let out = null;
    args.some(arg => {
      const res = typeof arg === 'function' ? arg().partialMatch(a) : arg.partialMatch(a);

      if (res) {
        out = res;
        return true;
      }
    });
    return out;
  }

  const result = {
    toString: function toString() {
      return '{ ' + args.join(' ') + ' }';
    },
    input: args,
    matches: makeMatchesFunction(partialMatch),
    partialMatch: partialMatch
  };
  return result;
}

function base(n) {
  const name = n;

  function matches(a) {
    if (typeof a === 'string') {
      try {
        a = multiaddr(a);
      } catch (err) {
        // catch error
        return false; // also if it's invalid it's propably not matching as well so return false
      }
    }

    const pnames = a.protoNames();

    if (pnames.length === 1 && pnames[0] === name) {
      return true;
    }

    return false;
  }

  function partialMatch(protos) {
    if (protos.length === 0) {
      return null;
    }

    if (protos[0] === name) {
      return protos.slice(1);
    }

    return null;
  }

  return {
    toString: function toString() {
      return name;
    },
    matches: matches,
    partialMatch: partialMatch
  };
}

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const mh = __webpack_require__(16);

const mc = __webpack_require__(15);

const persist = (node, ipld, options) => {
  if (!options.codec && node.length) {
    options.cidVersion = 1;
    options.codec = 'raw';
  }

  if (!options.codec) {
    options.codec = 'dag-pb';
  }

  if (isNaN(options.hashAlg)) {
    options.hashAlg = mh.names[options.hashAlg];
  }

  if (options.hashAlg !== mh.names['sha2-256']) {
    options.cidVersion = 1;
  }

  if (options.format) {
    options.codec = options.format;
  }

  const format = mc[options.codec.toUpperCase().replace(/-/g, '_')];
  return ipld.put(node, format, options);
};

module.exports = persist;

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const CID = __webpack_require__(3);

const assert = __webpack_require__(13);

const withIs = __webpack_require__(21); // Link represents an IPFS Merkle DAG Link between Nodes.


class DAGLink {
  constructor(name, size, cid) {
    assert(cid, 'A link requires a cid to point to'); // assert(size, 'A link requires a size')
    //  note - links should include size, but this assert is disabled
    //  for now to maintain consistency with go-ipfs pinset

    this._name = name || '';
    this._nameBuf = null;
    this._size = size;
    this._cid = new CID(cid);
  }

  toString() {
    return "DAGLink <".concat(this._cid.toBaseEncodedString(), " - name: \"").concat(this.Name, "\", size: ").concat(this.Tsize, ">");
  }

  toJSON() {
    if (!this._json) {
      this._json = Object.freeze({
        name: this.Name,
        size: this.Tsize,
        cid: this.Hash.toBaseEncodedString()
      });
    }

    return Object.assign({}, this._json);
  }

  get Name() {
    return this._name;
  } // Memoize the Buffer representation of name
  // We need this to sort the links, otherwise
  // we will reallocate new buffers every time


  get nameAsBuffer() {
    if (this._nameBuf !== null) {
      return this._nameBuf;
    }

    this._nameBuf = Buffer.from(this._name);
    return this._nameBuf;
  }

  set Name(name) {
    throw new Error("Can't set property: 'name' is immutable");
  }

  get Tsize() {
    return this._size;
  }

  set Tsize(size) {
    throw new Error("Can't set property: 'size' is immutable");
  }

  get Hash() {
    return this._cid;
  }

  set Hash(cid) {
    throw new Error("Can't set property: 'cid' is immutable");
  }

}

exports = module.exports = withIs(DAGLink, {
  className: 'DAGLink',
  symbolName: '@ipld/js-ipld-dag-pb/daglink'
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const pFinally = __webpack_require__(540);

class TimeoutError extends Error {
  constructor(message) {
    super(message);
    this.name = 'TimeoutError';
  }

}

const pTimeout = (promise, milliseconds, fallback) => new Promise((resolve, reject) => {
  if (typeof milliseconds !== 'number' || milliseconds < 0) {
    throw new TypeError('Expected `milliseconds` to be a positive number');
  }

  if (milliseconds === Infinity) {
    resolve(promise);
    return;
  }

  const timer = setTimeout(() => {
    if (typeof fallback === 'function') {
      try {
        resolve(fallback());
      } catch (error) {
        reject(error);
      }

      return;
    }

    const message = typeof fallback === 'string' ? fallback : "Promise timed out after ".concat(milliseconds, " milliseconds");
    const timeoutError = fallback instanceof Error ? fallback : new TimeoutError(message);

    if (typeof promise.cancel === 'function') {
      promise.cancel();
    }

    reject(timeoutError);
  }, milliseconds); // TODO: Use native `finally` keyword when targeting Node.js 10

  pFinally( // eslint-disable-next-line promise/prefer-await-to-then
  promise.then(resolve, reject), () => {
    clearTimeout(timer);
  });
});

module.exports = pTimeout; // TODO: Remove this for the next major release

module.exports.default = pTimeout;
module.exports.TimeoutError = TimeoutError;

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var rng = __webpack_require__(543);

var bytesToUuid = __webpack_require__(544);

function v4(options, buf, offset) {
  var i = buf && offset || 0;

  if (typeof options == 'string') {
    buf = options === 'binary' ? new Array(16) : null;
    options = null;
  }

  options = options || {};
  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    for (var ii = 0; ii < 16; ++ii) {
      buf[i + ii] = rnds[ii];
    }
  }

  return buf || bytesToUuid(rnds);
}

module.exports = v4;

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*globals self, window */

/*eslint-disable @mysticatea/prettier */

const {
  AbortController,
  AbortSignal
} = typeof self !== "undefined" ? self : typeof window !== "undefined" ? window :
/* otherwise */
undefined;
/*eslint-enable @mysticatea/prettier */

module.exports = AbortController;
module.exports.AbortSignal = AbortSignal;
module.exports.default = AbortController;

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const {
  DAGLink,
  DAGNode
} = __webpack_require__(12);

const CID = __webpack_require__(3);

const log = __webpack_require__(1)('ipfs:mfs:core:utils:add-link');

const UnixFS = __webpack_require__(25);

const DirSharded = __webpack_require__(145);

const {
  updateHamtDirectory,
  recreateHamtLevel,
  createShard,
  toPrefix,
  addLinksToHamtBucket
} = __webpack_require__(270);

const errCode = __webpack_require__(2);

const mc = __webpack_require__(15);

const mh = __webpack_require__(16);

const last = __webpack_require__(81);

const addLink = async (context, options) => {
  if (!options.parentCid && !options.parent) {
    throw errCode(new Error('No parent node or CID passed to addLink'), 'EINVALIDPARENT');
  }

  if (options.parentCid && !CID.isCID(options.parentCid)) {
    throw errCode(new Error('Invalid CID passed to addLink'), 'EINVALIDPARENTCID');
  }

  if (!options.parent) {
    log("Loading parent node ".concat(options.parentCid));
    options.parent = await context.ipld.get(options.parentCid);
  }

  if (!options.cid) {
    throw errCode(new Error('No child cid passed to addLink'), 'EINVALIDCHILDCID');
  }

  if (!options.name) {
    throw errCode(new Error('No child name passed to addLink'), 'EINVALIDCHILDNAME');
  }

  if (!CID.isCID(options.cid)) {
    options.cid = new CID(options.cid);
  }

  if (!options.size && options.size !== 0) {
    throw errCode(new Error('No child size passed to addLink'), 'EINVALIDCHILDSIZE');
  }

  const meta = UnixFS.unmarshal(options.parent.Data);

  if (meta.type === 'hamt-sharded-directory') {
    log('Adding link to sharded directory');
    return addToShardedDirectory(context, options);
  }

  if (options.parent.Links.length >= options.shardSplitThreshold) {
    log('Converting directory to sharded directory');
    return convertToShardedDirectory(context, _objectSpread({}, options, {
      mtime: meta.mtime,
      mode: meta.mode
    }));
  }

  log("Adding ".concat(options.name, " (").concat(options.cid, ") to regular directory"));
  return addToDirectory(context, options);
};

const convertToShardedDirectory = async (context, options) => {
  const result = await createShard(context, options.parent.Links.map(link => ({
    name: link.Name,
    size: link.Tsize,
    cid: link.Hash
  })).concat({
    name: options.name,
    size: options.size,
    cid: options.cid
  }), options);
  log("Converted directory to sharded directory ".concat(result.cid));
  return result;
};

const addToDirectory = async (context, options) => {
  options.parent.rmLink(options.name);
  options.parent.addLink(new DAGLink(options.name, options.size, options.cid));
  const node = UnixFS.unmarshal(options.parent.Data);

  if (node.mtime) {
    // Update mtime if previously set
    node.mtime = new Date();
    options.parent = new DAGNode(node.marshal(), options.parent.Links);
  }

  const hashAlg = mh.names[options.hashAlg]; // Persist the new parent DAGNode

  const cid = await context.ipld.put(options.parent, mc.DAG_PB, {
    cidVersion: options.cidVersion,
    hashAlg,
    onlyHash: !options.flush
  });
  return {
    node: options.parent,
    cid,
    size: options.parent.size
  };
};

const addToShardedDirectory = async (context, options) => {
  const {
    shard,
    path
  } = await addFileToShardedDirectory(context, options);
  const result = await last(shard.flush('', context.ipld));
  const node = await context.ipld.get(result.cid); // we have written out the shard, but only one sub-shard will have been written so replace it in the original shard

  const oldLink = options.parent.Links.find(link => link.Name.substring(0, 2) === path[0].prefix);
  const newLink = node.Links.find(link => link.Name.substring(0, 2) === path[0].prefix);

  if (oldLink) {
    options.parent.rmLink(oldLink.Name);
  }

  options.parent.addLink(newLink);
  return updateHamtDirectory(context, options.parent.Links, path[0].bucket, options);
};

const addFileToShardedDirectory = async (context, options) => {
  const file = {
    name: options.name,
    cid: options.cid,
    size: options.size
  }; // start at the root bucket and descend, loading nodes as we go

  const rootBucket = await recreateHamtLevel(options.parent.Links);
  const node = UnixFS.unmarshal(options.parent.Data);
  const shard = new DirSharded({
    root: true,
    dir: true,
    parent: null,
    parentKey: null,
    path: '',
    dirty: true,
    flat: false,
    mode: node.mode
  }, options);
  shard._bucket = rootBucket;

  if (node.mtime) {
    // update mtime if previously set
    shard.mtime = new Date();
  } // load subshards until the bucket & position no longer changes


  const position = await rootBucket._findNewBucketAndPos(file.name);
  const path = toBucketPath(position);
  path[0].node = options.parent;
  let index = 0;

  while (index < path.length) {
    const segment = path[index];
    index++;
    const node = segment.node;
    const link = node.Links.find(link => link.Name.substring(0, 2) === segment.prefix);

    if (!link) {
      // prefix is new, file will be added to the current bucket
      log("Link ".concat(segment.prefix).concat(file.name, " will be added"));
      index = path.length;
      break;
    }

    if (link.Name === "".concat(segment.prefix).concat(file.name)) {
      // file already existed, file will be added to the current bucket
      log("Link ".concat(segment.prefix).concat(file.name, " will be replaced"));
      index = path.length;
      break;
    }

    if (link.Name.length > 2) {
      // another file had the same prefix, will be replaced with a subshard
      log("Link ".concat(link.Name, " will be replaced with a subshard"));
      index = path.length;
      break;
    } // load sub-shard


    log("Found subshard ".concat(segment.prefix));
    const subShard = await context.ipld.get(link.Hash); // subshard hasn't been loaded, descend to the next level of the HAMT

    if (!path[index]) {
      log("Loaded new subshard ".concat(segment.prefix));
      await recreateHamtLevel(subShard.Links, rootBucket, segment.bucket, parseInt(segment.prefix, 16));
      const position = await rootBucket._findNewBucketAndPos(file.name);
      path.push({
        bucket: position.bucket,
        prefix: toPrefix(position.pos),
        node: subShard
      });
      break;
    }

    const nextSegment = path[index]; // add next level's worth of links to bucket

    await addLinksToHamtBucket(subShard.Links, nextSegment.bucket, rootBucket);
    nextSegment.node = subShard;
  } // finally add the new file into the shard


  await shard._bucket.put(file.name, {
    size: file.size,
    cid: file.cid
  });
  return {
    shard,
    path
  };
};

const toBucketPath = position => {
  let bucket = position.bucket;
  let positionInBucket = position.pos;
  const path = [{
    bucket,
    prefix: toPrefix(positionInBucket)
  }];
  bucket = position.bucket._parent;
  positionInBucket = position.bucket._posAtParent;

  while (bucket) {
    path.push({
      bucket,
      prefix: toPrefix(positionInBucket)
    });
    positionInBucket = bucket._posAtParent;
    bucket = bucket._parent;
  }

  path.reverse();
  return path;
};

module.exports = addLink;

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const log = __webpack_require__(1)('ipfs:mfs:utils:update-tree');

const addLink = __webpack_require__(62);

const defaultOptions = {
  shardSplitThreshold: 1000
}; // loop backwards through the trail, replacing links of all components to update CIDs

const updateTree = async (context, trail, options) => {
  options = Object.assign({}, defaultOptions, options);
  log('Trail', trail);
  trail = trail.slice().reverse();
  let index = 0;
  let child;
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;

  var _iteratorError;

  try {
    for (var _iterator = _asyncIterator(context.ipld.getMany(trail.map(node => node.cid))), _step, _value; _step = await _iterator.next(), _iteratorNormalCompletion = _step.done, _value = await _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
      const node = _value;
      const cid = trail[index].cid;
      const name = trail[index].name;
      index++;

      if (!child) {
        child = {
          cid,
          name,
          size: node.size
        };
        continue;
      }

      const result = await addLink(context, {
        parent: node,
        name: child.name,
        cid: child.cid,
        size: child.size,
        flush: options.flush,
        shardSplitThreshold: options.shardSplitThreshold,
        hashAlg: options.hashAlg,
        cidVersion: options.cidVersion
      }); // new child for next loop

      child = {
        cid: result.cid,
        name,
        size: result.size
      };
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        await _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  log("Final CID ".concat(child.cid));
  return child.cid;
};

module.exports = updateTree;

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const log = __webpack_require__(1)('ipfs:mfs:utils:update-mfs-root');

const {
  MFS_ROOT_KEY
} = __webpack_require__(34);

const updateMfsRoot = async (context, cid) => {
  log("New MFS root will be ".concat(cid));
  await context.repo.datastore.put(MFS_ROOT_KEY, cid.buffer);
  return cid;
};

module.exports = updateMfsRoot;

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = extend;
var hasOwnProperty = Object.prototype.hasOwnProperty;

function extend() {
  var target = {};

  for (var i = 0; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
}

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

var codes = {};

function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }

  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }

  var NodeError =
  /*#__PURE__*/
  function (_Base) {
    _inheritsLoose(NodeError, _Base);

    function NodeError(arg1, arg2, arg3) {
      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
    }

    return NodeError;
  }(Base);

  NodeError.prototype.name = Base.name;
  NodeError.prototype.code = code;
  codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });

    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }

  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}

createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
  return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  // determiner: 'must be' or 'must not be'
  var determiner;

  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }

  var msg;

  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  }

  msg += ". Received type ".concat(typeof actual);
  return msg;
}, TypeError);
createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
  return 'The ' + name + ' method is not implemented';
});
createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
createErrorType('ERR_STREAM_DESTROYED', function (name) {
  return 'Cannot call ' + name + ' after a stream was destroyed';
});
createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
  return 'Unknown encoding: ' + arg;
}, TypeError);
createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
module.exports.codes = codes;

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

/*<replacement>*/

var objectKeys = Object.keys || function (obj) {
  var keys = [];

  for (var key in obj) {
    keys.push(key);
  }

  return keys;
};
/*</replacement>*/


module.exports = Duplex;

var Readable = __webpack_require__(282);

var Writable = __webpack_require__(286);

__webpack_require__(4)(Duplex, Readable);

{
  // Allow the keys array to be GC'ed.
  var keys = objectKeys(Writable.prototype);

  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);
  Readable.call(this, options);
  Writable.call(this, options);
  this.allowHalfOpen = true;

  if (options) {
    if (options.readable === false) this.readable = false;
    if (options.writable === false) this.writable = false;

    if (options.allowHalfOpen === false) {
      this.allowHalfOpen = false;
      this.once('end', onend);
    }
  }
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});
Object.defineProperty(Duplex.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
Object.defineProperty(Duplex.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
}); // the no-half-open enforcer

function onend() {
  // If the writable side ended, then we're ok.
  if (this._writableState.ended) return; // no more data can be written.
  // But allow more writes to happen in this tick.

  process.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }

    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5)))

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  Record: __webpack_require__(703),
  validator: __webpack_require__(706),
  selection: __webpack_require__(710)
};

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const pDefer = () => {
  const deferred = {};
  deferred.promise = new Promise((resolve, reject) => {
    deferred.resolve = resolve;
    deferred.reject = reject;
  });
  return deferred;
};

module.exports = pDefer;

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Expose `Emitter`.
 */
if (true) {
  module.exports = Emitter;
}
/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */


function Emitter(obj) {
  if (obj) return mixin(obj);
}

;
/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }

  return obj;
}
/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */


Emitter.prototype.on = Emitter.prototype.addEventListener = function (event, fn) {
  this._callbacks = this._callbacks || {};
  (this._callbacks['$' + event] = this._callbacks['$' + event] || []).push(fn);
  return this;
};
/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */


Emitter.prototype.once = function (event, fn) {
  function on() {
    this.off(event, on);
    fn.apply(this, arguments);
  }

  on.fn = fn;
  this.on(event, on);
  return this;
};
/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */


Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function (event, fn) {
  this._callbacks = this._callbacks || {}; // all

  if (0 == arguments.length) {
    this._callbacks = {};
    return this;
  } // specific event


  var callbacks = this._callbacks['$' + event];
  if (!callbacks) return this; // remove all handlers

  if (1 == arguments.length) {
    delete this._callbacks['$' + event];
    return this;
  } // remove specific handler


  var cb;

  for (var i = 0; i < callbacks.length; i++) {
    cb = callbacks[i];

    if (cb === fn || cb.fn === fn) {
      callbacks.splice(i, 1);
      break;
    }
  }

  return this;
};
/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */


Emitter.prototype.emit = function (event) {
  this._callbacks = this._callbacks || {};
  var args = [].slice.call(arguments, 1),
      callbacks = this._callbacks['$' + event];

  if (callbacks) {
    callbacks = callbacks.slice(0);

    for (var i = 0, len = callbacks.length; i < len; ++i) {
      callbacks[i].apply(this, args);
    }
  }

  return this;
};
/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */


Emitter.prototype.listeners = function (event) {
  this._callbacks = this._callbacks || {};
  return this._callbacks['$' + event] || [];
};
/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */


Emitter.prototype.hasListeners = function (event) {
  return !!this.listeners(event).length;
};

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Module dependencies.
 */
var keys = __webpack_require__(877);

var hasBinary = __webpack_require__(347);

var sliceBuffer = __webpack_require__(879);

var after = __webpack_require__(880);

var utf8 = __webpack_require__(881);

var base64encoder;

if (typeof ArrayBuffer !== 'undefined') {
  base64encoder = __webpack_require__(882);
}
/**
 * Check if we are running an android browser. That requires us to use
 * ArrayBuffer with polling transports...
 *
 * http://ghinda.net/jpeg-blob-ajax-android/
 */


var isAndroid = typeof navigator !== 'undefined' && /Android/i.test(navigator.userAgent);
/**
 * Check if we are running in PhantomJS.
 * Uploading a Blob with PhantomJS does not work correctly, as reported here:
 * https://github.com/ariya/phantomjs/issues/11395
 * @type boolean
 */

var isPhantomJS = typeof navigator !== 'undefined' && /PhantomJS/i.test(navigator.userAgent);
/**
 * When true, avoids using Blobs to encode payloads.
 * @type boolean
 */

var dontSendBlobs = isAndroid || isPhantomJS;
/**
 * Current protocol version.
 */

exports.protocol = 3;
/**
 * Packet types.
 */

var packets = exports.packets = {
  open: 0 // non-ws
  ,
  close: 1 // non-ws
  ,
  ping: 2,
  pong: 3,
  message: 4,
  upgrade: 5,
  noop: 6
};
var packetslist = keys(packets);
/**
 * Premade error packet.
 */

var err = {
  type: 'error',
  data: 'parser error'
};
/**
 * Create a blob api even for blob builder when vendor prefixes exist
 */

var Blob = __webpack_require__(883);
/**
 * Encodes a packet.
 *
 *     <packet type id> [ <data> ]
 *
 * Example:
 *
 *     5hello world
 *     3
 *     4
 *
 * Binary is encoded in an identical principle
 *
 * @api private
 */


exports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {
  if (typeof supportsBinary === 'function') {
    callback = supportsBinary;
    supportsBinary = false;
  }

  if (typeof utf8encode === 'function') {
    callback = utf8encode;
    utf8encode = null;
  }

  var data = packet.data === undefined ? undefined : packet.data.buffer || packet.data;

  if (typeof ArrayBuffer !== 'undefined' && data instanceof ArrayBuffer) {
    return encodeArrayBuffer(packet, supportsBinary, callback);
  } else if (typeof Blob !== 'undefined' && data instanceof Blob) {
    return encodeBlob(packet, supportsBinary, callback);
  } // might be an object with { base64: true, data: dataAsBase64String }


  if (data && data.base64) {
    return encodeBase64Object(packet, callback);
  } // Sending data as a utf-8 string


  var encoded = packets[packet.type]; // data fragment is optional

  if (undefined !== packet.data) {
    encoded += utf8encode ? utf8.encode(String(packet.data), {
      strict: false
    }) : String(packet.data);
  }

  return callback('' + encoded);
};

function encodeBase64Object(packet, callback) {
  // packet data is an object { base64: true, data: dataAsBase64String }
  var message = 'b' + exports.packets[packet.type] + packet.data.data;
  return callback(message);
}
/**
 * Encode packet helpers for binary types
 */


function encodeArrayBuffer(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  var data = packet.data;
  var contentArray = new Uint8Array(data);
  var resultBuffer = new Uint8Array(1 + data.byteLength);
  resultBuffer[0] = packets[packet.type];

  for (var i = 0; i < contentArray.length; i++) {
    resultBuffer[i + 1] = contentArray[i];
  }

  return callback(resultBuffer.buffer);
}

function encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  var fr = new FileReader();

  fr.onload = function () {
    exports.encodePacket({
      type: packet.type,
      data: fr.result
    }, supportsBinary, true, callback);
  };

  return fr.readAsArrayBuffer(packet.data);
}

function encodeBlob(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  if (dontSendBlobs) {
    return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);
  }

  var length = new Uint8Array(1);
  length[0] = packets[packet.type];
  var blob = new Blob([length.buffer, packet.data]);
  return callback(blob);
}
/**
 * Encodes a packet with binary data in a base64 string
 *
 * @param {Object} packet, has `type` and `data`
 * @return {String} base64 encoded message
 */


exports.encodeBase64Packet = function (packet, callback) {
  var message = 'b' + exports.packets[packet.type];

  if (typeof Blob !== 'undefined' && packet.data instanceof Blob) {
    var fr = new FileReader();

    fr.onload = function () {
      var b64 = fr.result.split(',')[1];
      callback(message + b64);
    };

    return fr.readAsDataURL(packet.data);
  }

  var b64data;

  try {
    b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));
  } catch (e) {
    // iPhone Safari doesn't let you apply with typed arrays
    var typed = new Uint8Array(packet.data);
    var basic = new Array(typed.length);

    for (var i = 0; i < typed.length; i++) {
      basic[i] = typed[i];
    }

    b64data = String.fromCharCode.apply(null, basic);
  }

  message += btoa(b64data);
  return callback(message);
};
/**
 * Decodes a packet. Changes format to Blob if requested.
 *
 * @return {Object} with `type` and `data` (if any)
 * @api private
 */


exports.decodePacket = function (data, binaryType, utf8decode) {
  if (data === undefined) {
    return err;
  } // String data


  if (typeof data === 'string') {
    if (data.charAt(0) === 'b') {
      return exports.decodeBase64Packet(data.substr(1), binaryType);
    }

    if (utf8decode) {
      data = tryDecode(data);

      if (data === false) {
        return err;
      }
    }

    var type = data.charAt(0);

    if (Number(type) != type || !packetslist[type]) {
      return err;
    }

    if (data.length > 1) {
      return {
        type: packetslist[type],
        data: data.substring(1)
      };
    } else {
      return {
        type: packetslist[type]
      };
    }
  }

  var asArray = new Uint8Array(data);
  var type = asArray[0];
  var rest = sliceBuffer(data, 1);

  if (Blob && binaryType === 'blob') {
    rest = new Blob([rest]);
  }

  return {
    type: packetslist[type],
    data: rest
  };
};

function tryDecode(data) {
  try {
    data = utf8.decode(data, {
      strict: false
    });
  } catch (e) {
    return false;
  }

  return data;
}
/**
 * Decodes a packet encoded in a base64 string
 *
 * @param {String} base64 encoded message
 * @return {Object} with `type` and `data` (if any)
 */


exports.decodeBase64Packet = function (msg, binaryType) {
  var type = packetslist[msg.charAt(0)];

  if (!base64encoder) {
    return {
      type: type,
      data: {
        base64: true,
        data: msg.substr(1)
      }
    };
  }

  var data = base64encoder.decode(msg.substr(1));

  if (binaryType === 'blob' && Blob) {
    data = new Blob([data]);
  }

  return {
    type: type,
    data: data
  };
};
/**
 * Encodes multiple messages (payload).
 *
 *     <length>:data
 *
 * Example:
 *
 *     11:hello world2:hi
 *
 * If any contents are binary, they will be encoded as base64 strings. Base64
 * encoded strings are marked with a b before the length specifier
 *
 * @param {Array} packets
 * @api private
 */


exports.encodePayload = function (packets, supportsBinary, callback) {
  if (typeof supportsBinary === 'function') {
    callback = supportsBinary;
    supportsBinary = null;
  }

  var isBinary = hasBinary(packets);

  if (supportsBinary && isBinary) {
    if (Blob && !dontSendBlobs) {
      return exports.encodePayloadAsBlob(packets, callback);
    }

    return exports.encodePayloadAsArrayBuffer(packets, callback);
  }

  if (!packets.length) {
    return callback('0:');
  }

  function setLengthHeader(message) {
    return message.length + ':' + message;
  }

  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, !isBinary ? false : supportsBinary, false, function (message) {
      doneCallback(null, setLengthHeader(message));
    });
  }

  map(packets, encodeOne, function (err, results) {
    return callback(results.join(''));
  });
};
/**
 * Async array map using after
 */


function map(ary, each, done) {
  var result = new Array(ary.length);
  var next = after(ary.length, done);

  var eachWithIndex = function eachWithIndex(i, el, cb) {
    each(el, function (error, msg) {
      result[i] = msg;
      cb(error, result);
    });
  };

  for (var i = 0; i < ary.length; i++) {
    eachWithIndex(i, ary[i], next);
  }
}
/*
 * Decodes data when a payload is maybe expected. Possible binary contents are
 * decoded from their base64 representation
 *
 * @param {String} data, callback method
 * @api public
 */


exports.decodePayload = function (data, binaryType, callback) {
  if (typeof data !== 'string') {
    return exports.decodePayloadAsBinary(data, binaryType, callback);
  }

  if (typeof binaryType === 'function') {
    callback = binaryType;
    binaryType = null;
  }

  var packet;

  if (data === '') {
    // parser error - ignoring payload
    return callback(err, 0, 1);
  }

  var length = '',
      n,
      msg;

  for (var i = 0, l = data.length; i < l; i++) {
    var chr = data.charAt(i);

    if (chr !== ':') {
      length += chr;
      continue;
    }

    if (length === '' || length != (n = Number(length))) {
      // parser error - ignoring payload
      return callback(err, 0, 1);
    }

    msg = data.substr(i + 1, n);

    if (length != msg.length) {
      // parser error - ignoring payload
      return callback(err, 0, 1);
    }

    if (msg.length) {
      packet = exports.decodePacket(msg, binaryType, false);

      if (err.type === packet.type && err.data === packet.data) {
        // parser error in individual packet - ignoring payload
        return callback(err, 0, 1);
      }

      var ret = callback(packet, i + n, l);
      if (false === ret) return;
    } // advance cursor


    i += n;
    length = '';
  }

  if (length !== '') {
    // parser error - ignoring payload
    return callback(err, 0, 1);
  }
};
/**
 * Encodes multiple messages (payload) as binary.
 *
 * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number
 * 255><data>
 *
 * Example:
 * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers
 *
 * @param {Array} packets
 * @return {ArrayBuffer} encoded payload
 * @api private
 */


exports.encodePayloadAsArrayBuffer = function (packets, callback) {
  if (!packets.length) {
    return callback(new ArrayBuffer(0));
  }

  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, true, true, function (data) {
      return doneCallback(null, data);
    });
  }

  map(packets, encodeOne, function (err, encodedPackets) {
    var totalLength = encodedPackets.reduce(function (acc, p) {
      var len;

      if (typeof p === 'string') {
        len = p.length;
      } else {
        len = p.byteLength;
      }

      return acc + len.toString().length + len + 2; // string/binary identifier + separator = 2
    }, 0);
    var resultArray = new Uint8Array(totalLength);
    var bufferIndex = 0;
    encodedPackets.forEach(function (p) {
      var isString = typeof p === 'string';
      var ab = p;

      if (isString) {
        var view = new Uint8Array(p.length);

        for (var i = 0; i < p.length; i++) {
          view[i] = p.charCodeAt(i);
        }

        ab = view.buffer;
      }

      if (isString) {
        // not true binary
        resultArray[bufferIndex++] = 0;
      } else {
        // true binary
        resultArray[bufferIndex++] = 1;
      }

      var lenStr = ab.byteLength.toString();

      for (var i = 0; i < lenStr.length; i++) {
        resultArray[bufferIndex++] = parseInt(lenStr[i]);
      }

      resultArray[bufferIndex++] = 255;
      var view = new Uint8Array(ab);

      for (var i = 0; i < view.length; i++) {
        resultArray[bufferIndex++] = view[i];
      }
    });
    return callback(resultArray.buffer);
  });
};
/**
 * Encode as Blob
 */


exports.encodePayloadAsBlob = function (packets, callback) {
  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, true, true, function (encoded) {
      var binaryIdentifier = new Uint8Array(1);
      binaryIdentifier[0] = 1;

      if (typeof encoded === 'string') {
        var view = new Uint8Array(encoded.length);

        for (var i = 0; i < encoded.length; i++) {
          view[i] = encoded.charCodeAt(i);
        }

        encoded = view.buffer;
        binaryIdentifier[0] = 0;
      }

      var len = encoded instanceof ArrayBuffer ? encoded.byteLength : encoded.size;
      var lenStr = len.toString();
      var lengthAry = new Uint8Array(lenStr.length + 1);

      for (var i = 0; i < lenStr.length; i++) {
        lengthAry[i] = parseInt(lenStr[i]);
      }

      lengthAry[lenStr.length] = 255;

      if (Blob) {
        var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);
        doneCallback(null, blob);
      }
    });
  }

  map(packets, encodeOne, function (err, results) {
    return callback(new Blob(results));
  });
};
/*
 * Decodes data when a payload is maybe expected. Strings are decoded by
 * interpreting each byte as a key code for entries marked to start with 0. See
 * description of encodePayloadAsBinary
 *
 * @param {ArrayBuffer} data, callback method
 * @api public
 */


exports.decodePayloadAsBinary = function (data, binaryType, callback) {
  if (typeof binaryType === 'function') {
    callback = binaryType;
    binaryType = null;
  }

  var bufferTail = data;
  var buffers = [];

  while (bufferTail.byteLength > 0) {
    var tailArray = new Uint8Array(bufferTail);
    var isString = tailArray[0] === 0;
    var msgLength = '';

    for (var i = 1;; i++) {
      if (tailArray[i] === 255) break; // 310 = char length of Number.MAX_VALUE

      if (msgLength.length > 310) {
        return callback(err, 0, 1);
      }

      msgLength += tailArray[i];
    }

    bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);
    msgLength = parseInt(msgLength);
    var msg = sliceBuffer(bufferTail, 0, msgLength);

    if (isString) {
      try {
        msg = String.fromCharCode.apply(null, new Uint8Array(msg));
      } catch (e) {
        // iPhone Safari doesn't let you apply to typed arrays
        var typed = new Uint8Array(msg);
        msg = '';

        for (var i = 0; i < typed.length; i++) {
          msg += String.fromCharCode(typed[i]);
        }
      }
    }

    buffers.push(msg);
    bufferTail = sliceBuffer(bufferTail, msgLength);
  }

  var total = buffers.length;
  buffers.forEach(function (buffer, i) {
    callback(exports.decodePacket(buffer, binaryType, true), i, total);
  });
};

/***/ }),
/* 72 */
/***/ (function(module) {

module.exports = JSON.parse("{\"identity\":0,\"ip4\":4,\"tcp\":6,\"sha1\":17,\"sha2-256\":18,\"sha2-512\":19,\"sha3-512\":20,\"sha3-384\":21,\"sha3-256\":22,\"sha3-224\":23,\"shake-128\":24,\"shake-256\":25,\"keccak-224\":26,\"keccak-256\":27,\"keccak-384\":28,\"keccak-512\":29,\"dccp\":33,\"murmur3-128\":34,\"murmur3-32\":35,\"ip6\":41,\"ip6zone\":42,\"path\":47,\"multicodec\":48,\"multihash\":49,\"multiaddr\":50,\"multibase\":51,\"dns\":53,\"dns4\":54,\"dns6\":55,\"dnsaddr\":56,\"protobuf\":80,\"cbor\":81,\"raw\":85,\"dbl-sha2-256\":86,\"rlp\":96,\"bencode\":99,\"dag-pb\":112,\"dag-cbor\":113,\"libp2p-key\":114,\"git-raw\":120,\"torrent-info\":123,\"torrent-file\":124,\"leofcoin-block\":129,\"leofcoin-tx\":130,\"leofcoin-pr\":131,\"sctp\":132,\"eth-block\":144,\"eth-block-list\":145,\"eth-tx-trie\":146,\"eth-tx\":147,\"eth-tx-receipt-trie\":148,\"eth-tx-receipt\":149,\"eth-state-trie\":150,\"eth-account-snapshot\":151,\"eth-storage-trie\":152,\"bitcoin-block\":176,\"bitcoin-tx\":177,\"zcash-block\":192,\"zcash-tx\":193,\"stellar-block\":208,\"stellar-tx\":209,\"md4\":212,\"md5\":213,\"bmt\":214,\"decred-block\":224,\"decred-tx\":225,\"ipld-ns\":226,\"ipfs-ns\":227,\"swarm-ns\":228,\"ipns-ns\":229,\"zeronet\":230,\"ed25519-pub\":237,\"dash-block\":240,\"dash-tx\":241,\"swarm-manifest\":250,\"swarm-feed\":251,\"udp\":273,\"p2p-webrtc-star\":275,\"p2p-webrtc-direct\":276,\"p2p-stardust\":277,\"p2p-circuit\":290,\"dag-json\":297,\"udt\":301,\"utp\":302,\"unix\":400,\"p2p\":421,\"ipfs\":421,\"https\":443,\"onion\":444,\"onion3\":445,\"garlic64\":446,\"garlic32\":447,\"tls\":448,\"quic\":460,\"ws\":477,\"wss\":478,\"p2p-websocket-star\":479,\"http\":480,\"json\":512,\"messagepack\":513,\"x11\":4352,\"blake2b-8\":45569,\"blake2b-16\":45570,\"blake2b-24\":45571,\"blake2b-32\":45572,\"blake2b-40\":45573,\"blake2b-48\":45574,\"blake2b-56\":45575,\"blake2b-64\":45576,\"blake2b-72\":45577,\"blake2b-80\":45578,\"blake2b-88\":45579,\"blake2b-96\":45580,\"blake2b-104\":45581,\"blake2b-112\":45582,\"blake2b-120\":45583,\"blake2b-128\":45584,\"blake2b-136\":45585,\"blake2b-144\":45586,\"blake2b-152\":45587,\"blake2b-160\":45588,\"blake2b-168\":45589,\"blake2b-176\":45590,\"blake2b-184\":45591,\"blake2b-192\":45592,\"blake2b-200\":45593,\"blake2b-208\":45594,\"blake2b-216\":45595,\"blake2b-224\":45596,\"blake2b-232\":45597,\"blake2b-240\":45598,\"blake2b-248\":45599,\"blake2b-256\":45600,\"blake2b-264\":45601,\"blake2b-272\":45602,\"blake2b-280\":45603,\"blake2b-288\":45604,\"blake2b-296\":45605,\"blake2b-304\":45606,\"blake2b-312\":45607,\"blake2b-320\":45608,\"blake2b-328\":45609,\"blake2b-336\":45610,\"blake2b-344\":45611,\"blake2b-352\":45612,\"blake2b-360\":45613,\"blake2b-368\":45614,\"blake2b-376\":45615,\"blake2b-384\":45616,\"blake2b-392\":45617,\"blake2b-400\":45618,\"blake2b-408\":45619,\"blake2b-416\":45620,\"blake2b-424\":45621,\"blake2b-432\":45622,\"blake2b-440\":45623,\"blake2b-448\":45624,\"blake2b-456\":45625,\"blake2b-464\":45626,\"blake2b-472\":45627,\"blake2b-480\":45628,\"blake2b-488\":45629,\"blake2b-496\":45630,\"blake2b-504\":45631,\"blake2b-512\":45632,\"blake2s-8\":45633,\"blake2s-16\":45634,\"blake2s-24\":45635,\"blake2s-32\":45636,\"blake2s-40\":45637,\"blake2s-48\":45638,\"blake2s-56\":45639,\"blake2s-64\":45640,\"blake2s-72\":45641,\"blake2s-80\":45642,\"blake2s-88\":45643,\"blake2s-96\":45644,\"blake2s-104\":45645,\"blake2s-112\":45646,\"blake2s-120\":45647,\"blake2s-128\":45648,\"blake2s-136\":45649,\"blake2s-144\":45650,\"blake2s-152\":45651,\"blake2s-160\":45652,\"blake2s-168\":45653,\"blake2s-176\":45654,\"blake2s-184\":45655,\"blake2s-192\":45656,\"blake2s-200\":45657,\"blake2s-208\":45658,\"blake2s-216\":45659,\"blake2s-224\":45660,\"blake2s-232\":45661,\"blake2s-240\":45662,\"blake2s-248\":45663,\"blake2s-256\":45664,\"skein256-8\":45825,\"skein256-16\":45826,\"skein256-24\":45827,\"skein256-32\":45828,\"skein256-40\":45829,\"skein256-48\":45830,\"skein256-56\":45831,\"skein256-64\":45832,\"skein256-72\":45833,\"skein256-80\":45834,\"skein256-88\":45835,\"skein256-96\":45836,\"skein256-104\":45837,\"skein256-112\":45838,\"skein256-120\":45839,\"skein256-128\":45840,\"skein256-136\":45841,\"skein256-144\":45842,\"skein256-152\":45843,\"skein256-160\":45844,\"skein256-168\":45845,\"skein256-176\":45846,\"skein256-184\":45847,\"skein256-192\":45848,\"skein256-200\":45849,\"skein256-208\":45850,\"skein256-216\":45851,\"skein256-224\":45852,\"skein256-232\":45853,\"skein256-240\":45854,\"skein256-248\":45855,\"skein256-256\":45856,\"skein512-8\":45857,\"skein512-16\":45858,\"skein512-24\":45859,\"skein512-32\":45860,\"skein512-40\":45861,\"skein512-48\":45862,\"skein512-56\":45863,\"skein512-64\":45864,\"skein512-72\":45865,\"skein512-80\":45866,\"skein512-88\":45867,\"skein512-96\":45868,\"skein512-104\":45869,\"skein512-112\":45870,\"skein512-120\":45871,\"skein512-128\":45872,\"skein512-136\":45873,\"skein512-144\":45874,\"skein512-152\":45875,\"skein512-160\":45876,\"skein512-168\":45877,\"skein512-176\":45878,\"skein512-184\":45879,\"skein512-192\":45880,\"skein512-200\":45881,\"skein512-208\":45882,\"skein512-216\":45883,\"skein512-224\":45884,\"skein512-232\":45885,\"skein512-240\":45886,\"skein512-248\":45887,\"skein512-256\":45888,\"skein512-264\":45889,\"skein512-272\":45890,\"skein512-280\":45891,\"skein512-288\":45892,\"skein512-296\":45893,\"skein512-304\":45894,\"skein512-312\":45895,\"skein512-320\":45896,\"skein512-328\":45897,\"skein512-336\":45898,\"skein512-344\":45899,\"skein512-352\":45900,\"skein512-360\":45901,\"skein512-368\":45902,\"skein512-376\":45903,\"skein512-384\":45904,\"skein512-392\":45905,\"skein512-400\":45906,\"skein512-408\":45907,\"skein512-416\":45908,\"skein512-424\":45909,\"skein512-432\":45910,\"skein512-440\":45911,\"skein512-448\":45912,\"skein512-456\":45913,\"skein512-464\":45914,\"skein512-472\":45915,\"skein512-480\":45916,\"skein512-488\":45917,\"skein512-496\":45918,\"skein512-504\":45919,\"skein512-512\":45920,\"skein1024-8\":45921,\"skein1024-16\":45922,\"skein1024-24\":45923,\"skein1024-32\":45924,\"skein1024-40\":45925,\"skein1024-48\":45926,\"skein1024-56\":45927,\"skein1024-64\":45928,\"skein1024-72\":45929,\"skein1024-80\":45930,\"skein1024-88\":45931,\"skein1024-96\":45932,\"skein1024-104\":45933,\"skein1024-112\":45934,\"skein1024-120\":45935,\"skein1024-128\":45936,\"skein1024-136\":45937,\"skein1024-144\":45938,\"skein1024-152\":45939,\"skein1024-160\":45940,\"skein1024-168\":45941,\"skein1024-176\":45942,\"skein1024-184\":45943,\"skein1024-192\":45944,\"skein1024-200\":45945,\"skein1024-208\":45946,\"skein1024-216\":45947,\"skein1024-224\":45948,\"skein1024-232\":45949,\"skein1024-240\":45950,\"skein1024-248\":45951,\"skein1024-256\":45952,\"skein1024-264\":45953,\"skein1024-272\":45954,\"skein1024-280\":45955,\"skein1024-288\":45956,\"skein1024-296\":45957,\"skein1024-304\":45958,\"skein1024-312\":45959,\"skein1024-320\":45960,\"skein1024-328\":45961,\"skein1024-336\":45962,\"skein1024-344\":45963,\"skein1024-352\":45964,\"skein1024-360\":45965,\"skein1024-368\":45966,\"skein1024-376\":45967,\"skein1024-384\":45968,\"skein1024-392\":45969,\"skein1024-400\":45970,\"skein1024-408\":45971,\"skein1024-416\":45972,\"skein1024-424\":45973,\"skein1024-432\":45974,\"skein1024-440\":45975,\"skein1024-448\":45976,\"skein1024-456\":45977,\"skein1024-464\":45978,\"skein1024-472\":45979,\"skein1024-480\":45980,\"skein1024-488\":45981,\"skein1024-496\":45982,\"skein1024-504\":45983,\"skein1024-512\":45984,\"skein1024-520\":45985,\"skein1024-528\":45986,\"skein1024-536\":45987,\"skein1024-544\":45988,\"skein1024-552\":45989,\"skein1024-560\":45990,\"skein1024-568\":45991,\"skein1024-576\":45992,\"skein1024-584\":45993,\"skein1024-592\":45994,\"skein1024-600\":45995,\"skein1024-608\":45996,\"skein1024-616\":45997,\"skein1024-624\":45998,\"skein1024-632\":45999,\"skein1024-640\":46000,\"skein1024-648\":46001,\"skein1024-656\":46002,\"skein1024-664\":46003,\"skein1024-672\":46004,\"skein1024-680\":46005,\"skein1024-688\":46006,\"skein1024-696\":46007,\"skein1024-704\":46008,\"skein1024-712\":46009,\"skein1024-720\":46010,\"skein1024-728\":46011,\"skein1024-736\":46012,\"skein1024-744\":46013,\"skein1024-752\":46014,\"skein1024-760\":46015,\"skein1024-768\":46016,\"skein1024-776\":46017,\"skein1024-784\":46018,\"skein1024-792\":46019,\"skein1024-800\":46020,\"skein1024-808\":46021,\"skein1024-816\":46022,\"skein1024-824\":46023,\"skein1024-832\":46024,\"skein1024-840\":46025,\"skein1024-848\":46026,\"skein1024-856\":46027,\"skein1024-864\":46028,\"skein1024-872\":46029,\"skein1024-880\":46030,\"skein1024-888\":46031,\"skein1024-896\":46032,\"skein1024-904\":46033,\"skein1024-912\":46034,\"skein1024-920\":46035,\"skein1024-928\":46036,\"skein1024-936\":46037,\"skein1024-944\":46038,\"skein1024-952\":46039,\"skein1024-960\":46040,\"skein1024-968\":46041,\"skein1024-976\":46042,\"skein1024-984\":46043,\"skein1024-992\":46044,\"skein1024-1000\":46045,\"skein1024-1008\":46046,\"skein1024-1016\":46047,\"skein1024-1024\":46048,\"holochain-adr-v0\":8417572,\"holochain-adr-v1\":8483108,\"holochain-key-v0\":9728292,\"holochain-key-v1\":9793828,\"holochain-sig-v0\":10645796,\"holochain-sig-v1\":10711332}");

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Javascript implementation of basic RSA algorithms.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
 *
 * The only algorithm currently supported for PKI is RSA.
 *
 * An RSA key is often stored in ASN.1 DER format. The SubjectPublicKeyInfo
 * ASN.1 structure is composed of an algorithm of type AlgorithmIdentifier
 * and a subjectPublicKey of type bit string.
 *
 * The AlgorithmIdentifier contains an Object Identifier (OID) and parameters
 * for the algorithm, if any. In the case of RSA, there aren't any.
 *
 * SubjectPublicKeyInfo ::= SEQUENCE {
 *   algorithm AlgorithmIdentifier,
 *   subjectPublicKey BIT STRING
 * }
 *
 * AlgorithmIdentifer ::= SEQUENCE {
 *   algorithm OBJECT IDENTIFIER,
 *   parameters ANY DEFINED BY algorithm OPTIONAL
 * }
 *
 * For an RSA public key, the subjectPublicKey is:
 *
 * RSAPublicKey ::= SEQUENCE {
 *   modulus            INTEGER,    -- n
 *   publicExponent     INTEGER     -- e
 * }
 *
 * PrivateKeyInfo ::= SEQUENCE {
 *   version                   Version,
 *   privateKeyAlgorithm       PrivateKeyAlgorithmIdentifier,
 *   privateKey                PrivateKey,
 *   attributes           [0]  IMPLICIT Attributes OPTIONAL
 * }
 *
 * Version ::= INTEGER
 * PrivateKeyAlgorithmIdentifier ::= AlgorithmIdentifier
 * PrivateKey ::= OCTET STRING
 * Attributes ::= SET OF Attribute
 *
 * An RSA private key as the following structure:
 *
 * RSAPrivateKey ::= SEQUENCE {
 *   version Version,
 *   modulus INTEGER, -- n
 *   publicExponent INTEGER, -- e
 *   privateExponent INTEGER, -- d
 *   prime1 INTEGER, -- p
 *   prime2 INTEGER, -- q
 *   exponent1 INTEGER, -- d mod (p-1)
 *   exponent2 INTEGER, -- d mod (q-1)
 *   coefficient INTEGER -- (inverse of q) mod p
 * }
 *
 * Version ::= INTEGER
 *
 * The OID for the RSA key algorithm is: 1.2.840.113549.1.1.1
 */
var forge = __webpack_require__(7);

__webpack_require__(40);

__webpack_require__(125);

__webpack_require__(45);

__webpack_require__(406);

__webpack_require__(409);

__webpack_require__(46);

__webpack_require__(10);

if (typeof BigInteger === 'undefined') {
  var BigInteger = forge.jsbn.BigInteger;
}

var _crypto = forge.util.isNodejs ? __webpack_require__(126) : null; // shortcut for asn.1 API


var asn1 = forge.asn1; // shortcut for util API

var util = forge.util;
/*
 * RSA encryption and decryption, see RFC 2313.
 */

forge.pki = forge.pki || {};
module.exports = forge.pki.rsa = forge.rsa = forge.rsa || {};
var pki = forge.pki; // for finding primes, which are 30k+i for i = 1, 7, 11, 13, 17, 19, 23, 29

var GCD_30_DELTA = [6, 4, 2, 4, 2, 4, 6, 2]; // validator for a PrivateKeyInfo structure

var privateKeyValidator = {
  // PrivateKeyInfo
  name: 'PrivateKeyInfo',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    // Version (INTEGER)
    name: 'PrivateKeyInfo.version',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'privateKeyVersion'
  }, {
    // privateKeyAlgorithm
    name: 'PrivateKeyInfo.privateKeyAlgorithm',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [{
      name: 'AlgorithmIdentifier.algorithm',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.OID,
      constructed: false,
      capture: 'privateKeyOid'
    }]
  }, {
    // PrivateKey
    name: 'PrivateKeyInfo',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.OCTETSTRING,
    constructed: false,
    capture: 'privateKey'
  }]
}; // validator for an RSA private key

var rsaPrivateKeyValidator = {
  // RSAPrivateKey
  name: 'RSAPrivateKey',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    // Version (INTEGER)
    name: 'RSAPrivateKey.version',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'privateKeyVersion'
  }, {
    // modulus (n)
    name: 'RSAPrivateKey.modulus',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'privateKeyModulus'
  }, {
    // publicExponent (e)
    name: 'RSAPrivateKey.publicExponent',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'privateKeyPublicExponent'
  }, {
    // privateExponent (d)
    name: 'RSAPrivateKey.privateExponent',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'privateKeyPrivateExponent'
  }, {
    // prime1 (p)
    name: 'RSAPrivateKey.prime1',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'privateKeyPrime1'
  }, {
    // prime2 (q)
    name: 'RSAPrivateKey.prime2',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'privateKeyPrime2'
  }, {
    // exponent1 (d mod (p-1))
    name: 'RSAPrivateKey.exponent1',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'privateKeyExponent1'
  }, {
    // exponent2 (d mod (q-1))
    name: 'RSAPrivateKey.exponent2',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'privateKeyExponent2'
  }, {
    // coefficient ((inverse of q) mod p)
    name: 'RSAPrivateKey.coefficient',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'privateKeyCoefficient'
  }]
}; // validator for an RSA public key

var rsaPublicKeyValidator = {
  // RSAPublicKey
  name: 'RSAPublicKey',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    // modulus (n)
    name: 'RSAPublicKey.modulus',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'publicKeyModulus'
  }, {
    // publicExponent (e)
    name: 'RSAPublicKey.exponent',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'publicKeyExponent'
  }]
}; // validator for an SubjectPublicKeyInfo structure
// Note: Currently only works with an RSA public key

var publicKeyValidator = forge.pki.rsa.publicKeyValidator = {
  name: 'SubjectPublicKeyInfo',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  captureAsn1: 'subjectPublicKeyInfo',
  value: [{
    name: 'SubjectPublicKeyInfo.AlgorithmIdentifier',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [{
      name: 'AlgorithmIdentifier.algorithm',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.OID,
      constructed: false,
      capture: 'publicKeyOid'
    }]
  }, {
    // subjectPublicKey
    name: 'SubjectPublicKeyInfo.subjectPublicKey',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.BITSTRING,
    constructed: false,
    value: [{
      // RSAPublicKey
      name: 'SubjectPublicKeyInfo.subjectPublicKey.RSAPublicKey',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      optional: true,
      captureAsn1: 'rsaPublicKey'
    }]
  }]
};
/**
 * Wrap digest in DigestInfo object.
 *
 * This function implements EMSA-PKCS1-v1_5-ENCODE as per RFC 3447.
 *
 * DigestInfo ::= SEQUENCE {
 *   digestAlgorithm DigestAlgorithmIdentifier,
 *   digest Digest
 * }
 *
 * DigestAlgorithmIdentifier ::= AlgorithmIdentifier
 * Digest ::= OCTET STRING
 *
 * @param md the message digest object with the hash to sign.
 *
 * @return the encoded message (ready for RSA encrytion)
 */

var emsaPkcs1v15encode = function emsaPkcs1v15encode(md) {
  // get the oid for the algorithm
  var oid;

  if (md.algorithm in pki.oids) {
    oid = pki.oids[md.algorithm];
  } else {
    var error = new Error('Unknown message digest algorithm.');
    error.algorithm = md.algorithm;
    throw error;
  }

  var oidBytes = asn1.oidToDer(oid).getBytes(); // create the digest info

  var digestInfo = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);
  var digestAlgorithm = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);
  digestAlgorithm.value.push(asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, oidBytes));
  digestAlgorithm.value.push(asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, ''));
  var digest = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, md.digest().getBytes());
  digestInfo.value.push(digestAlgorithm);
  digestInfo.value.push(digest); // encode digest info

  return asn1.toDer(digestInfo).getBytes();
};
/**
 * Performs x^c mod n (RSA encryption or decryption operation).
 *
 * @param x the number to raise and mod.
 * @param key the key to use.
 * @param pub true if the key is public, false if private.
 *
 * @return the result of x^c mod n.
 */


var _modPow = function _modPow(x, key, pub) {
  if (pub) {
    return x.modPow(key.e, key.n);
  }

  if (!key.p || !key.q) {
    // allow calculation without CRT params (slow)
    return x.modPow(key.d, key.n);
  } // pre-compute dP, dQ, and qInv if necessary


  if (!key.dP) {
    key.dP = key.d.mod(key.p.subtract(BigInteger.ONE));
  }

  if (!key.dQ) {
    key.dQ = key.d.mod(key.q.subtract(BigInteger.ONE));
  }

  if (!key.qInv) {
    key.qInv = key.q.modInverse(key.p);
  }
  /* Chinese remainder theorem (CRT) states:
     Suppose n1, n2, ..., nk are positive integers which are pairwise
    coprime (n1 and n2 have no common factors other than 1). For any
    integers x1, x2, ..., xk there exists an integer x solving the
    system of simultaneous congruences (where ~= means modularly
    congruent so a ~= b mod n means a mod n = b mod n):
     x ~= x1 mod n1
    x ~= x2 mod n2
    ...
    x ~= xk mod nk
     This system of congruences has a single simultaneous solution x
    between 0 and n - 1. Furthermore, each xk solution and x itself
    is congruent modulo the product n = n1*n2*...*nk.
    So x1 mod n = x2 mod n = xk mod n = x mod n.
     The single simultaneous solution x can be solved with the following
    equation:
     x = sum(xi*ri*si) mod n where ri = n/ni and si = ri^-1 mod ni.
     Where x is less than n, xi = x mod ni.
     For RSA we are only concerned with k = 2. The modulus n = pq, where
    p and q are coprime. The RSA decryption algorithm is:
     y = x^d mod n
     Given the above:
     x1 = x^d mod p
    r1 = n/p = q
    s1 = q^-1 mod p
    x2 = x^d mod q
    r2 = n/q = p
    s2 = p^-1 mod q
     So y = (x1r1s1 + x2r2s2) mod n
         = ((x^d mod p)q(q^-1 mod p) + (x^d mod q)p(p^-1 mod q)) mod n
     According to Fermat's Little Theorem, if the modulus P is prime,
    for any integer A not evenly divisible by P, A^(P-1) ~= 1 mod P.
    Since A is not divisible by P it follows that if:
    N ~= M mod (P - 1), then A^N mod P = A^M mod P. Therefore:
     A^N mod P = A^(M mod (P - 1)) mod P. (The latter takes less effort
    to calculate). In order to calculate x^d mod p more quickly the
    exponent d mod (p - 1) is stored in the RSA private key (the same
    is done for x^d mod q). These values are referred to as dP and dQ
    respectively. Therefore we now have:
     y = ((x^dP mod p)q(q^-1 mod p) + (x^dQ mod q)p(p^-1 mod q)) mod n
     Since we'll be reducing x^dP by modulo p (same for q) we can also
    reduce x by p (and q respectively) before hand. Therefore, let
     xp = ((x mod p)^dP mod p), and
    xq = ((x mod q)^dQ mod q), yielding:
     y = (xp*q*(q^-1 mod p) + xq*p*(p^-1 mod q)) mod n
     This can be further reduced to a simple algorithm that only
    requires 1 inverse (the q inverse is used) to be used and stored.
    The algorithm is called Garner's algorithm. If qInv is the
    inverse of q, we simply calculate:
     y = (qInv*(xp - xq) mod p) * q + xq
     However, there are two further complications. First, we need to
    ensure that xp > xq to prevent signed BigIntegers from being used
    so we add p until this is true (since we will be mod'ing with
    p anyway). Then, there is a known timing attack on algorithms
    using the CRT. To mitigate this risk, "cryptographic blinding"
    should be used. This requires simply generating a random number r
    between 0 and n-1 and its inverse and multiplying x by r^e before
    calculating y and then multiplying y by r^-1 afterwards. Note that
    r must be coprime with n (gcd(r, n) === 1) in order to have an
    inverse.
  */
  // cryptographic blinding


  var r;

  do {
    r = new BigInteger(forge.util.bytesToHex(forge.random.getBytes(key.n.bitLength() / 8)), 16);
  } while (r.compareTo(key.n) >= 0 || !r.gcd(key.n).equals(BigInteger.ONE));

  x = x.multiply(r.modPow(key.e, key.n)).mod(key.n); // calculate xp and xq

  var xp = x.mod(key.p).modPow(key.dP, key.p);
  var xq = x.mod(key.q).modPow(key.dQ, key.q); // xp must be larger than xq to avoid signed bit usage

  while (xp.compareTo(xq) < 0) {
    xp = xp.add(key.p);
  } // do last step


  var y = xp.subtract(xq).multiply(key.qInv).mod(key.p).multiply(key.q).add(xq); // remove effect of random for cryptographic blinding

  y = y.multiply(r.modInverse(key.n)).mod(key.n);
  return y;
};
/**
 * NOTE: THIS METHOD IS DEPRECATED, use 'sign' on a private key object or
 * 'encrypt' on a public key object instead.
 *
 * Performs RSA encryption.
 *
 * The parameter bt controls whether to put padding bytes before the
 * message passed in. Set bt to either true or false to disable padding
 * completely (in order to handle e.g. EMSA-PSS encoding seperately before),
 * signaling whether the encryption operation is a public key operation
 * (i.e. encrypting data) or not, i.e. private key operation (data signing).
 *
 * For PKCS#1 v1.5 padding pass in the block type to use, i.e. either 0x01
 * (for signing) or 0x02 (for encryption). The key operation mode (private
 * or public) is derived from this flag in that case).
 *
 * @param m the message to encrypt as a byte string.
 * @param key the RSA key to use.
 * @param bt for PKCS#1 v1.5 padding, the block type to use
 *   (0x01 for private key, 0x02 for public),
 *   to disable padding: true = public key, false = private key.
 *
 * @return the encrypted bytes as a string.
 */


pki.rsa.encrypt = function (m, key, bt) {
  var pub = bt;
  var eb; // get the length of the modulus in bytes

  var k = Math.ceil(key.n.bitLength() / 8);

  if (bt !== false && bt !== true) {
    // legacy, default to PKCS#1 v1.5 padding
    pub = bt === 0x02;
    eb = _encodePkcs1_v1_5(m, key, bt);
  } else {
    eb = forge.util.createBuffer();
    eb.putBytes(m);
  } // load encryption block as big integer 'x'
  // FIXME: hex conversion inefficient, get BigInteger w/byte strings


  var x = new BigInteger(eb.toHex(), 16); // do RSA encryption

  var y = _modPow(x, key, pub); // convert y into the encrypted data byte string, if y is shorter in
  // bytes than k, then prepend zero bytes to fill up ed
  // FIXME: hex conversion inefficient, get BigInteger w/byte strings


  var yhex = y.toString(16);
  var ed = forge.util.createBuffer();
  var zeros = k - Math.ceil(yhex.length / 2);

  while (zeros > 0) {
    ed.putByte(0x00);
    --zeros;
  }

  ed.putBytes(forge.util.hexToBytes(yhex));
  return ed.getBytes();
};
/**
 * NOTE: THIS METHOD IS DEPRECATED, use 'decrypt' on a private key object or
 * 'verify' on a public key object instead.
 *
 * Performs RSA decryption.
 *
 * The parameter ml controls whether to apply PKCS#1 v1.5 padding
 * or not.  Set ml = false to disable padding removal completely
 * (in order to handle e.g. EMSA-PSS later on) and simply pass back
 * the RSA encryption block.
 *
 * @param ed the encrypted data to decrypt in as a byte string.
 * @param key the RSA key to use.
 * @param pub true for a public key operation, false for private.
 * @param ml the message length, if known, false to disable padding.
 *
 * @return the decrypted message as a byte string.
 */


pki.rsa.decrypt = function (ed, key, pub, ml) {
  // get the length of the modulus in bytes
  var k = Math.ceil(key.n.bitLength() / 8); // error if the length of the encrypted data ED is not k

  if (ed.length !== k) {
    var error = new Error('Encrypted message length is invalid.');
    error.length = ed.length;
    error.expected = k;
    throw error;
  } // convert encrypted data into a big integer
  // FIXME: hex conversion inefficient, get BigInteger w/byte strings


  var y = new BigInteger(forge.util.createBuffer(ed).toHex(), 16); // y must be less than the modulus or it wasn't the result of
  // a previous mod operation (encryption) using that modulus

  if (y.compareTo(key.n) >= 0) {
    throw new Error('Encrypted message is invalid.');
  } // do RSA decryption


  var x = _modPow(y, key, pub); // create the encryption block, if x is shorter in bytes than k, then
  // prepend zero bytes to fill up eb
  // FIXME: hex conversion inefficient, get BigInteger w/byte strings


  var xhex = x.toString(16);
  var eb = forge.util.createBuffer();
  var zeros = k - Math.ceil(xhex.length / 2);

  while (zeros > 0) {
    eb.putByte(0x00);
    --zeros;
  }

  eb.putBytes(forge.util.hexToBytes(xhex));

  if (ml !== false) {
    // legacy, default to PKCS#1 v1.5 padding
    return _decodePkcs1_v1_5(eb.getBytes(), key, pub);
  } // return message


  return eb.getBytes();
};
/**
 * Creates an RSA key-pair generation state object. It is used to allow
 * key-generation to be performed in steps. It also allows for a UI to
 * display progress updates.
 *
 * @param bits the size for the private key in bits, defaults to 2048.
 * @param e the public exponent to use, defaults to 65537 (0x10001).
 * @param [options] the options to use.
 *          prng a custom crypto-secure pseudo-random number generator to use,
 *            that must define "getBytesSync".
 *          algorithm the algorithm to use (default: 'PRIMEINC').
 *
 * @return the state object to use to generate the key-pair.
 */


pki.rsa.createKeyPairGenerationState = function (bits, e, options) {
  // TODO: migrate step-based prime generation code to forge.prime
  // set default bits
  if (typeof bits === 'string') {
    bits = parseInt(bits, 10);
  }

  bits = bits || 2048; // create prng with api that matches BigInteger secure random

  options = options || {};
  var prng = options.prng || forge.random;
  var rng = {
    // x is an array to fill with bytes
    nextBytes: function nextBytes(x) {
      var b = prng.getBytesSync(x.length);

      for (var i = 0; i < x.length; ++i) {
        x[i] = b.charCodeAt(i);
      }
    }
  };
  var algorithm = options.algorithm || 'PRIMEINC'; // create PRIMEINC algorithm state

  var rval;

  if (algorithm === 'PRIMEINC') {
    rval = {
      algorithm: algorithm,
      state: 0,
      bits: bits,
      rng: rng,
      eInt: e || 65537,
      e: new BigInteger(null),
      p: null,
      q: null,
      qBits: bits >> 1,
      pBits: bits - (bits >> 1),
      pqState: 0,
      num: null,
      keys: null
    };
    rval.e.fromInt(rval.eInt);
  } else {
    throw new Error('Invalid key generation algorithm: ' + algorithm);
  }

  return rval;
};
/**
 * Attempts to runs the key-generation algorithm for at most n seconds
 * (approximately) using the given state. When key-generation has completed,
 * the keys will be stored in state.keys.
 *
 * To use this function to update a UI while generating a key or to prevent
 * causing browser lockups/warnings, set "n" to a value other than 0. A
 * simple pattern for generating a key and showing a progress indicator is:
 *
 * var state = pki.rsa.createKeyPairGenerationState(2048);
 * var step = function() {
 *   // step key-generation, run algorithm for 100 ms, repeat
 *   if(!forge.pki.rsa.stepKeyPairGenerationState(state, 100)) {
 *     setTimeout(step, 1);
 *   } else {
 *     // key-generation complete
 *     // TODO: turn off progress indicator here
 *     // TODO: use the generated key-pair in "state.keys"
 *   }
 * };
 * // TODO: turn on progress indicator here
 * setTimeout(step, 0);
 *
 * @param state the state to use.
 * @param n the maximum number of milliseconds to run the algorithm for, 0
 *          to run the algorithm to completion.
 *
 * @return true if the key-generation completed, false if not.
 */


pki.rsa.stepKeyPairGenerationState = function (state, n) {
  // set default algorithm if not set
  if (!('algorithm' in state)) {
    state.algorithm = 'PRIMEINC';
  } // TODO: migrate step-based prime generation code to forge.prime
  // TODO: abstract as PRIMEINC algorithm
  // do key generation (based on Tom Wu's rsa.js, see jsbn.js license)
  // with some minor optimizations and designed to run in steps
  // local state vars


  var THIRTY = new BigInteger(null);
  THIRTY.fromInt(30);
  var deltaIdx = 0;

  var op_or = function op_or(x, y) {
    return x | y;
  }; // keep stepping until time limit is reached or done


  var t1 = +new Date();
  var t2;
  var total = 0;

  while (state.keys === null && (n <= 0 || total < n)) {
    // generate p or q
    if (state.state === 0) {
      /* Note: All primes are of the form:
         30k+i, for i < 30 and gcd(30, i)=1, where there are 8 values for i
         When we generate a random number, we always align it at 30k + 1. Each
        time the number is determined not to be prime we add to get to the
        next 'i', eg: if the number was at 30k + 1 we add 6. */
      var bits = state.p === null ? state.pBits : state.qBits;
      var bits1 = bits - 1; // get a random number

      if (state.pqState === 0) {
        state.num = new BigInteger(bits, state.rng); // force MSB set

        if (!state.num.testBit(bits1)) {
          state.num.bitwiseTo(BigInteger.ONE.shiftLeft(bits1), op_or, state.num);
        } // align number on 30k+1 boundary


        state.num.dAddOffset(31 - state.num.mod(THIRTY).byteValue(), 0);
        deltaIdx = 0;
        ++state.pqState;
      } else if (state.pqState === 1) {
        // try to make the number a prime
        if (state.num.bitLength() > bits) {
          // overflow, try again
          state.pqState = 0; // do primality test
        } else if (state.num.isProbablePrime(_getMillerRabinTests(state.num.bitLength()))) {
          ++state.pqState;
        } else {
          // get next potential prime
          state.num.dAddOffset(GCD_30_DELTA[deltaIdx++ % 8], 0);
        }
      } else if (state.pqState === 2) {
        // ensure number is coprime with e
        state.pqState = state.num.subtract(BigInteger.ONE).gcd(state.e).compareTo(BigInteger.ONE) === 0 ? 3 : 0;
      } else if (state.pqState === 3) {
        // store p or q
        state.pqState = 0;

        if (state.p === null) {
          state.p = state.num;
        } else {
          state.q = state.num;
        } // advance state if both p and q are ready


        if (state.p !== null && state.q !== null) {
          ++state.state;
        }

        state.num = null;
      }
    } else if (state.state === 1) {
      // ensure p is larger than q (swap them if not)
      if (state.p.compareTo(state.q) < 0) {
        state.num = state.p;
        state.p = state.q;
        state.q = state.num;
      }

      ++state.state;
    } else if (state.state === 2) {
      // compute phi: (p - 1)(q - 1) (Euler's totient function)
      state.p1 = state.p.subtract(BigInteger.ONE);
      state.q1 = state.q.subtract(BigInteger.ONE);
      state.phi = state.p1.multiply(state.q1);
      ++state.state;
    } else if (state.state === 3) {
      // ensure e and phi are coprime
      if (state.phi.gcd(state.e).compareTo(BigInteger.ONE) === 0) {
        // phi and e are coprime, advance
        ++state.state;
      } else {
        // phi and e aren't coprime, so generate a new p and q
        state.p = null;
        state.q = null;
        state.state = 0;
      }
    } else if (state.state === 4) {
      // create n, ensure n is has the right number of bits
      state.n = state.p.multiply(state.q); // ensure n is right number of bits

      if (state.n.bitLength() === state.bits) {
        // success, advance
        ++state.state;
      } else {
        // failed, get new q
        state.q = null;
        state.state = 0;
      }
    } else if (state.state === 5) {
      // set keys
      var d = state.e.modInverse(state.phi);
      state.keys = {
        privateKey: pki.rsa.setPrivateKey(state.n, state.e, d, state.p, state.q, d.mod(state.p1), d.mod(state.q1), state.q.modInverse(state.p)),
        publicKey: pki.rsa.setPublicKey(state.n, state.e)
      };
    } // update timing


    t2 = +new Date();
    total += t2 - t1;
    t1 = t2;
  }

  return state.keys !== null;
};
/**
 * Generates an RSA public-private key pair in a single call.
 *
 * To generate a key-pair in steps (to allow for progress updates and to
 * prevent blocking or warnings in slow browsers) then use the key-pair
 * generation state functions.
 *
 * To generate a key-pair asynchronously (either through web-workers, if
 * available, or by breaking up the work on the main thread), pass a
 * callback function.
 *
 * @param [bits] the size for the private key in bits, defaults to 2048.
 * @param [e] the public exponent to use, defaults to 65537.
 * @param [options] options for key-pair generation, if given then 'bits'
 *            and 'e' must *not* be given:
 *          bits the size for the private key in bits, (default: 2048).
 *          e the public exponent to use, (default: 65537 (0x10001)).
 *          workerScript the worker script URL.
 *          workers the number of web workers (if supported) to use,
 *            (default: 2).
 *          workLoad the size of the work load, ie: number of possible prime
 *            numbers for each web worker to check per work assignment,
 *            (default: 100).
 *          prng a custom crypto-secure pseudo-random number generator to use,
 *            that must define "getBytesSync". Disables use of native APIs.
 *          algorithm the algorithm to use (default: 'PRIMEINC').
 * @param [callback(err, keypair)] called once the operation completes.
 *
 * @return an object with privateKey and publicKey properties.
 */


pki.rsa.generateKeyPair = function (bits, e, options, callback) {
  // (bits), (options), (callback)
  if (arguments.length === 1) {
    if (typeof bits === 'object') {
      options = bits;
      bits = undefined;
    } else if (typeof bits === 'function') {
      callback = bits;
      bits = undefined;
    }
  } else if (arguments.length === 2) {
    // (bits, e), (bits, options), (bits, callback), (options, callback)
    if (typeof bits === 'number') {
      if (typeof e === 'function') {
        callback = e;
        e = undefined;
      } else if (typeof e !== 'number') {
        options = e;
        e = undefined;
      }
    } else {
      options = bits;
      callback = e;
      bits = undefined;
      e = undefined;
    }
  } else if (arguments.length === 3) {
    // (bits, e, options), (bits, e, callback), (bits, options, callback)
    if (typeof e === 'number') {
      if (typeof options === 'function') {
        callback = options;
        options = undefined;
      }
    } else {
      callback = options;
      options = e;
      e = undefined;
    }
  }

  options = options || {};

  if (bits === undefined) {
    bits = options.bits || 2048;
  }

  if (e === undefined) {
    e = options.e || 0x10001;
  } // use native code if permitted, available, and parameters are acceptable


  if (!forge.options.usePureJavaScript && !options.prng && bits >= 256 && bits <= 16384 && (e === 0x10001 || e === 3)) {
    if (callback) {
      // try native async
      if (_detectNodeCrypto('generateKeyPair')) {
        return _crypto.generateKeyPair('rsa', {
          modulusLength: bits,
          publicExponent: e,
          publicKeyEncoding: {
            type: 'spki',
            format: 'pem'
          },
          privateKeyEncoding: {
            type: 'pkcs8',
            format: 'pem'
          }
        }, function (err, pub, priv) {
          if (err) {
            return callback(err);
          }

          callback(null, {
            privateKey: pki.privateKeyFromPem(priv),
            publicKey: pki.publicKeyFromPem(pub)
          });
        });
      }

      if (_detectSubtleCrypto('generateKey') && _detectSubtleCrypto('exportKey')) {
        // use standard native generateKey
        return util.globalScope.crypto.subtle.generateKey({
          name: 'RSASSA-PKCS1-v1_5',
          modulusLength: bits,
          publicExponent: _intToUint8Array(e),
          hash: {
            name: 'SHA-256'
          }
        }, true
        /* key can be exported*/
        , ['sign', 'verify']).then(function (pair) {
          return util.globalScope.crypto.subtle.exportKey('pkcs8', pair.privateKey); // avoiding catch(function(err) {...}) to support IE <= 8
        }).then(undefined, function (err) {
          callback(err);
        }).then(function (pkcs8) {
          if (pkcs8) {
            var privateKey = pki.privateKeyFromAsn1(asn1.fromDer(forge.util.createBuffer(pkcs8)));
            callback(null, {
              privateKey: privateKey,
              publicKey: pki.setRsaPublicKey(privateKey.n, privateKey.e)
            });
          }
        });
      }

      if (_detectSubtleMsCrypto('generateKey') && _detectSubtleMsCrypto('exportKey')) {
        var genOp = util.globalScope.msCrypto.subtle.generateKey({
          name: 'RSASSA-PKCS1-v1_5',
          modulusLength: bits,
          publicExponent: _intToUint8Array(e),
          hash: {
            name: 'SHA-256'
          }
        }, true
        /* key can be exported*/
        , ['sign', 'verify']);

        genOp.oncomplete = function (e) {
          var pair = e.target.result;
          var exportOp = util.globalScope.msCrypto.subtle.exportKey('pkcs8', pair.privateKey);

          exportOp.oncomplete = function (e) {
            var pkcs8 = e.target.result;
            var privateKey = pki.privateKeyFromAsn1(asn1.fromDer(forge.util.createBuffer(pkcs8)));
            callback(null, {
              privateKey: privateKey,
              publicKey: pki.setRsaPublicKey(privateKey.n, privateKey.e)
            });
          };

          exportOp.onerror = function (err) {
            callback(err);
          };
        };

        genOp.onerror = function (err) {
          callback(err);
        };

        return;
      }
    } else {
      // try native sync
      if (_detectNodeCrypto('generateKeyPairSync')) {
        var keypair = _crypto.generateKeyPairSync('rsa', {
          modulusLength: bits,
          publicExponent: e,
          publicKeyEncoding: {
            type: 'spki',
            format: 'pem'
          },
          privateKeyEncoding: {
            type: 'pkcs8',
            format: 'pem'
          }
        });

        return {
          privateKey: pki.privateKeyFromPem(keypair.privateKey),
          publicKey: pki.publicKeyFromPem(keypair.publicKey)
        };
      }
    }
  } // use JavaScript implementation


  var state = pki.rsa.createKeyPairGenerationState(bits, e, options);

  if (!callback) {
    pki.rsa.stepKeyPairGenerationState(state, 0);
    return state.keys;
  }

  _generateKeyPair(state, options, callback);
};
/**
 * Sets an RSA public key from BigIntegers modulus and exponent.
 *
 * @param n the modulus.
 * @param e the exponent.
 *
 * @return the public key.
 */


pki.setRsaPublicKey = pki.rsa.setPublicKey = function (n, e) {
  var key = {
    n: n,
    e: e
  };
  /**
   * Encrypts the given data with this public key. Newer applications
   * should use the 'RSA-OAEP' decryption scheme, 'RSAES-PKCS1-V1_5' is for
   * legacy applications.
   *
   * @param data the byte string to encrypt.
   * @param scheme the encryption scheme to use:
   *          'RSAES-PKCS1-V1_5' (default),
   *          'RSA-OAEP',
   *          'RAW', 'NONE', or null to perform raw RSA encryption,
   *          an object with an 'encode' property set to a function
   *          with the signature 'function(data, key)' that returns
   *          a binary-encoded string representing the encoded data.
   * @param schemeOptions any scheme-specific options.
   *
   * @return the encrypted byte string.
   */

  key.encrypt = function (data, scheme, schemeOptions) {
    if (typeof scheme === 'string') {
      scheme = scheme.toUpperCase();
    } else if (scheme === undefined) {
      scheme = 'RSAES-PKCS1-V1_5';
    }

    if (scheme === 'RSAES-PKCS1-V1_5') {
      scheme = {
        encode: function encode(m, key, pub) {
          return _encodePkcs1_v1_5(m, key, 0x02).getBytes();
        }
      };
    } else if (scheme === 'RSA-OAEP' || scheme === 'RSAES-OAEP') {
      scheme = {
        encode: function encode(m, key) {
          return forge.pkcs1.encode_rsa_oaep(key, m, schemeOptions);
        }
      };
    } else if (['RAW', 'NONE', 'NULL', null].indexOf(scheme) !== -1) {
      scheme = {
        encode: function encode(e) {
          return e;
        }
      };
    } else if (typeof scheme === 'string') {
      throw new Error('Unsupported encryption scheme: "' + scheme + '".');
    } // do scheme-based encoding then rsa encryption


    var e = scheme.encode(data, key, true);
    return pki.rsa.encrypt(e, key, true);
  };
  /**
   * Verifies the given signature against the given digest.
   *
   * PKCS#1 supports multiple (currently two) signature schemes:
   * RSASSA-PKCS1-V1_5 and RSASSA-PSS.
   *
   * By default this implementation uses the "old scheme", i.e.
   * RSASSA-PKCS1-V1_5, in which case once RSA-decrypted, the
   * signature is an OCTET STRING that holds a DigestInfo.
   *
   * DigestInfo ::= SEQUENCE {
   *   digestAlgorithm DigestAlgorithmIdentifier,
   *   digest Digest
   * }
   * DigestAlgorithmIdentifier ::= AlgorithmIdentifier
   * Digest ::= OCTET STRING
   *
   * To perform PSS signature verification, provide an instance
   * of Forge PSS object as the scheme parameter.
   *
   * @param digest the message digest hash to compare against the signature,
   *          as a binary-encoded string.
   * @param signature the signature to verify, as a binary-encoded string.
   * @param scheme signature verification scheme to use:
   *          'RSASSA-PKCS1-V1_5' or undefined for RSASSA PKCS#1 v1.5,
   *          a Forge PSS object for RSASSA-PSS,
   *          'NONE' or null for none, DigestInfo will not be expected, but
   *            PKCS#1 v1.5 padding will still be used.
   *
   * @return true if the signature was verified, false if not.
   */


  key.verify = function (digest, signature, scheme) {
    if (typeof scheme === 'string') {
      scheme = scheme.toUpperCase();
    } else if (scheme === undefined) {
      scheme = 'RSASSA-PKCS1-V1_5';
    }

    if (scheme === 'RSASSA-PKCS1-V1_5') {
      scheme = {
        verify: function verify(digest, d) {
          // remove padding
          d = _decodePkcs1_v1_5(d, key, true); // d is ASN.1 BER-encoded DigestInfo

          var obj = asn1.fromDer(d); // compare the given digest to the decrypted one

          return digest === obj.value[1].value;
        }
      };
    } else if (scheme === 'NONE' || scheme === 'NULL' || scheme === null) {
      scheme = {
        verify: function verify(digest, d) {
          // remove padding
          d = _decodePkcs1_v1_5(d, key, true);
          return digest === d;
        }
      };
    } // do rsa decryption w/o any decoding, then verify -- which does decoding


    var d = pki.rsa.decrypt(signature, key, true, false);
    return scheme.verify(digest, d, key.n.bitLength());
  };

  return key;
};
/**
 * Sets an RSA private key from BigIntegers modulus, exponent, primes,
 * prime exponents, and modular multiplicative inverse.
 *
 * @param n the modulus.
 * @param e the public exponent.
 * @param d the private exponent ((inverse of e) mod n).
 * @param p the first prime.
 * @param q the second prime.
 * @param dP exponent1 (d mod (p-1)).
 * @param dQ exponent2 (d mod (q-1)).
 * @param qInv ((inverse of q) mod p)
 *
 * @return the private key.
 */


pki.setRsaPrivateKey = pki.rsa.setPrivateKey = function (n, e, d, p, q, dP, dQ, qInv) {
  var key = {
    n: n,
    e: e,
    d: d,
    p: p,
    q: q,
    dP: dP,
    dQ: dQ,
    qInv: qInv
  };
  /**
   * Decrypts the given data with this private key. The decryption scheme
   * must match the one used to encrypt the data.
   *
   * @param data the byte string to decrypt.
   * @param scheme the decryption scheme to use:
   *          'RSAES-PKCS1-V1_5' (default),
   *          'RSA-OAEP',
   *          'RAW', 'NONE', or null to perform raw RSA decryption.
   * @param schemeOptions any scheme-specific options.
   *
   * @return the decrypted byte string.
   */

  key.decrypt = function (data, scheme, schemeOptions) {
    if (typeof scheme === 'string') {
      scheme = scheme.toUpperCase();
    } else if (scheme === undefined) {
      scheme = 'RSAES-PKCS1-V1_5';
    } // do rsa decryption w/o any decoding


    var d = pki.rsa.decrypt(data, key, false, false);

    if (scheme === 'RSAES-PKCS1-V1_5') {
      scheme = {
        decode: _decodePkcs1_v1_5
      };
    } else if (scheme === 'RSA-OAEP' || scheme === 'RSAES-OAEP') {
      scheme = {
        decode: function decode(d, key) {
          return forge.pkcs1.decode_rsa_oaep(key, d, schemeOptions);
        }
      };
    } else if (['RAW', 'NONE', 'NULL', null].indexOf(scheme) !== -1) {
      scheme = {
        decode: function decode(d) {
          return d;
        }
      };
    } else {
      throw new Error('Unsupported encryption scheme: "' + scheme + '".');
    } // decode according to scheme


    return scheme.decode(d, key, false);
  };
  /**
   * Signs the given digest, producing a signature.
   *
   * PKCS#1 supports multiple (currently two) signature schemes:
   * RSASSA-PKCS1-V1_5 and RSASSA-PSS.
   *
   * By default this implementation uses the "old scheme", i.e.
   * RSASSA-PKCS1-V1_5. In order to generate a PSS signature, provide
   * an instance of Forge PSS object as the scheme parameter.
   *
   * @param md the message digest object with the hash to sign.
   * @param scheme the signature scheme to use:
   *          'RSASSA-PKCS1-V1_5' or undefined for RSASSA PKCS#1 v1.5,
   *          a Forge PSS object for RSASSA-PSS,
   *          'NONE' or null for none, DigestInfo will not be used but
   *            PKCS#1 v1.5 padding will still be used.
   *
   * @return the signature as a byte string.
   */


  key.sign = function (md, scheme) {
    /* Note: The internal implementation of RSA operations is being
      transitioned away from a PKCS#1 v1.5 hard-coded scheme. Some legacy
      code like the use of an encoding block identifier 'bt' will eventually
      be removed. */
    // private key operation
    var bt = false;

    if (typeof scheme === 'string') {
      scheme = scheme.toUpperCase();
    }

    if (scheme === undefined || scheme === 'RSASSA-PKCS1-V1_5') {
      scheme = {
        encode: emsaPkcs1v15encode
      };
      bt = 0x01;
    } else if (scheme === 'NONE' || scheme === 'NULL' || scheme === null) {
      scheme = {
        encode: function encode() {
          return md;
        }
      };
      bt = 0x01;
    } // encode and then encrypt


    var d = scheme.encode(md, key.n.bitLength());
    return pki.rsa.encrypt(d, key, bt);
  };

  return key;
};
/**
 * Wraps an RSAPrivateKey ASN.1 object in an ASN.1 PrivateKeyInfo object.
 *
 * @param rsaKey the ASN.1 RSAPrivateKey.
 *
 * @return the ASN.1 PrivateKeyInfo.
 */


pki.wrapRsaPrivateKey = function (rsaKey) {
  // PrivateKeyInfo
  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// version (0)
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, asn1.integerToDer(0).getBytes()), // privateKeyAlgorithm
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(pki.oids.rsaEncryption).getBytes()), asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')]), // PrivateKey
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, asn1.toDer(rsaKey).getBytes())]);
};
/**
 * Converts a private key from an ASN.1 object.
 *
 * @param obj the ASN.1 representation of a PrivateKeyInfo containing an
 *          RSAPrivateKey or an RSAPrivateKey.
 *
 * @return the private key.
 */


pki.privateKeyFromAsn1 = function (obj) {
  // get PrivateKeyInfo
  var capture = {};
  var errors = [];

  if (asn1.validate(obj, privateKeyValidator, capture, errors)) {
    obj = asn1.fromDer(forge.util.createBuffer(capture.privateKey));
  } // get RSAPrivateKey


  capture = {};
  errors = [];

  if (!asn1.validate(obj, rsaPrivateKeyValidator, capture, errors)) {
    var error = new Error('Cannot read private key. ' + 'ASN.1 object does not contain an RSAPrivateKey.');
    error.errors = errors;
    throw error;
  } // Note: Version is currently ignored.
  // capture.privateKeyVersion
  // FIXME: inefficient, get a BigInteger that uses byte strings


  var n, e, d, p, q, dP, dQ, qInv;
  n = forge.util.createBuffer(capture.privateKeyModulus).toHex();
  e = forge.util.createBuffer(capture.privateKeyPublicExponent).toHex();
  d = forge.util.createBuffer(capture.privateKeyPrivateExponent).toHex();
  p = forge.util.createBuffer(capture.privateKeyPrime1).toHex();
  q = forge.util.createBuffer(capture.privateKeyPrime2).toHex();
  dP = forge.util.createBuffer(capture.privateKeyExponent1).toHex();
  dQ = forge.util.createBuffer(capture.privateKeyExponent2).toHex();
  qInv = forge.util.createBuffer(capture.privateKeyCoefficient).toHex(); // set private key

  return pki.setRsaPrivateKey(new BigInteger(n, 16), new BigInteger(e, 16), new BigInteger(d, 16), new BigInteger(p, 16), new BigInteger(q, 16), new BigInteger(dP, 16), new BigInteger(dQ, 16), new BigInteger(qInv, 16));
};
/**
 * Converts a private key to an ASN.1 RSAPrivateKey.
 *
 * @param key the private key.
 *
 * @return the ASN.1 representation of an RSAPrivateKey.
 */


pki.privateKeyToAsn1 = pki.privateKeyToRSAPrivateKey = function (key) {
  // RSAPrivateKey
  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// version (0 = only 2 primes, 1 multiple primes)
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, asn1.integerToDer(0).getBytes()), // modulus (n)
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, _bnToBytes(key.n)), // publicExponent (e)
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, _bnToBytes(key.e)), // privateExponent (d)
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, _bnToBytes(key.d)), // privateKeyPrime1 (p)
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, _bnToBytes(key.p)), // privateKeyPrime2 (q)
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, _bnToBytes(key.q)), // privateKeyExponent1 (dP)
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, _bnToBytes(key.dP)), // privateKeyExponent2 (dQ)
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, _bnToBytes(key.dQ)), // coefficient (qInv)
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, _bnToBytes(key.qInv))]);
};
/**
 * Converts a public key from an ASN.1 SubjectPublicKeyInfo or RSAPublicKey.
 *
 * @param obj the asn1 representation of a SubjectPublicKeyInfo or RSAPublicKey.
 *
 * @return the public key.
 */


pki.publicKeyFromAsn1 = function (obj) {
  // get SubjectPublicKeyInfo
  var capture = {};
  var errors = [];

  if (asn1.validate(obj, publicKeyValidator, capture, errors)) {
    // get oid
    var oid = asn1.derToOid(capture.publicKeyOid);

    if (oid !== pki.oids.rsaEncryption) {
      var error = new Error('Cannot read public key. Unknown OID.');
      error.oid = oid;
      throw error;
    }

    obj = capture.rsaPublicKey;
  } // get RSA params


  errors = [];

  if (!asn1.validate(obj, rsaPublicKeyValidator, capture, errors)) {
    var error = new Error('Cannot read public key. ' + 'ASN.1 object does not contain an RSAPublicKey.');
    error.errors = errors;
    throw error;
  } // FIXME: inefficient, get a BigInteger that uses byte strings


  var n = forge.util.createBuffer(capture.publicKeyModulus).toHex();
  var e = forge.util.createBuffer(capture.publicKeyExponent).toHex(); // set public key

  return pki.setRsaPublicKey(new BigInteger(n, 16), new BigInteger(e, 16));
};
/**
 * Converts a public key to an ASN.1 SubjectPublicKeyInfo.
 *
 * @param key the public key.
 *
 * @return the asn1 representation of a SubjectPublicKeyInfo.
 */


pki.publicKeyToAsn1 = pki.publicKeyToSubjectPublicKeyInfo = function (key) {
  // SubjectPublicKeyInfo
  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// AlgorithmIdentifier
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// algorithm
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(pki.oids.rsaEncryption).getBytes()), // parameters (null)
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')]), // subjectPublicKey
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false, [pki.publicKeyToRSAPublicKey(key)])]);
};
/**
 * Converts a public key to an ASN.1 RSAPublicKey.
 *
 * @param key the public key.
 *
 * @return the asn1 representation of a RSAPublicKey.
 */


pki.publicKeyToRSAPublicKey = function (key) {
  // RSAPublicKey
  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// modulus (n)
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, _bnToBytes(key.n)), // publicExponent (e)
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, _bnToBytes(key.e))]);
};
/**
 * Encodes a message using PKCS#1 v1.5 padding.
 *
 * @param m the message to encode.
 * @param key the RSA key to use.
 * @param bt the block type to use, i.e. either 0x01 (for signing) or 0x02
 *          (for encryption).
 *
 * @return the padded byte buffer.
 */


function _encodePkcs1_v1_5(m, key, bt) {
  var eb = forge.util.createBuffer(); // get the length of the modulus in bytes

  var k = Math.ceil(key.n.bitLength() / 8);
  /* use PKCS#1 v1.5 padding */

  if (m.length > k - 11) {
    var error = new Error('Message is too long for PKCS#1 v1.5 padding.');
    error.length = m.length;
    error.max = k - 11;
    throw error;
  }
  /* A block type BT, a padding string PS, and the data D shall be
    formatted into an octet string EB, the encryption block:
     EB = 00 || BT || PS || 00 || D
     The block type BT shall be a single octet indicating the structure of
    the encryption block. For this version of the document it shall have
    value 00, 01, or 02. For a private-key operation, the block type
    shall be 00 or 01. For a public-key operation, it shall be 02.
     The padding string PS shall consist of k-3-||D|| octets. For block
    type 00, the octets shall have value 00; for block type 01, they
    shall have value FF; and for block type 02, they shall be
    pseudorandomly generated and nonzero. This makes the length of the
    encryption block EB equal to k. */
  // build the encryption block


  eb.putByte(0x00);
  eb.putByte(bt); // create the padding

  var padNum = k - 3 - m.length;
  var padByte; // private key op

  if (bt === 0x00 || bt === 0x01) {
    padByte = bt === 0x00 ? 0x00 : 0xFF;

    for (var i = 0; i < padNum; ++i) {
      eb.putByte(padByte);
    }
  } else {
    // public key op
    // pad with random non-zero values
    while (padNum > 0) {
      var numZeros = 0;
      var padBytes = forge.random.getBytes(padNum);

      for (var i = 0; i < padNum; ++i) {
        padByte = padBytes.charCodeAt(i);

        if (padByte === 0) {
          ++numZeros;
        } else {
          eb.putByte(padByte);
        }
      }

      padNum = numZeros;
    }
  } // zero followed by message


  eb.putByte(0x00);
  eb.putBytes(m);
  return eb;
}
/**
 * Decodes a message using PKCS#1 v1.5 padding.
 *
 * @param em the message to decode.
 * @param key the RSA key to use.
 * @param pub true if the key is a public key, false if it is private.
 * @param ml the message length, if specified.
 *
 * @return the decoded bytes.
 */


function _decodePkcs1_v1_5(em, key, pub, ml) {
  // get the length of the modulus in bytes
  var k = Math.ceil(key.n.bitLength() / 8);
  /* It is an error if any of the following conditions occurs:
     1. The encryption block EB cannot be parsed unambiguously.
    2. The padding string PS consists of fewer than eight octets
      or is inconsisent with the block type BT.
    3. The decryption process is a public-key operation and the block
      type BT is not 00 or 01, or the decryption process is a
      private-key operation and the block type is not 02.
   */
  // parse the encryption block

  var eb = forge.util.createBuffer(em);
  var first = eb.getByte();
  var bt = eb.getByte();

  if (first !== 0x00 || pub && bt !== 0x00 && bt !== 0x01 || !pub && bt != 0x02 || pub && bt === 0x00 && typeof ml === 'undefined') {
    throw new Error('Encryption block is invalid.');
  }

  var padNum = 0;

  if (bt === 0x00) {
    // check all padding bytes for 0x00
    padNum = k - 3 - ml;

    for (var i = 0; i < padNum; ++i) {
      if (eb.getByte() !== 0x00) {
        throw new Error('Encryption block is invalid.');
      }
    }
  } else if (bt === 0x01) {
    // find the first byte that isn't 0xFF, should be after all padding
    padNum = 0;

    while (eb.length() > 1) {
      if (eb.getByte() !== 0xFF) {
        --eb.read;
        break;
      }

      ++padNum;
    }
  } else if (bt === 0x02) {
    // look for 0x00 byte
    padNum = 0;

    while (eb.length() > 1) {
      if (eb.getByte() === 0x00) {
        --eb.read;
        break;
      }

      ++padNum;
    }
  } // zero must be 0x00 and padNum must be (k - 3 - message length)


  var zero = eb.getByte();

  if (zero !== 0x00 || padNum !== k - 3 - eb.length()) {
    throw new Error('Encryption block is invalid.');
  }

  return eb.getBytes();
}
/**
 * Runs the key-generation algorithm asynchronously, either in the background
 * via Web Workers, or using the main thread and setImmediate.
 *
 * @param state the key-pair generation state.
 * @param [options] options for key-pair generation:
 *          workerScript the worker script URL.
 *          workers the number of web workers (if supported) to use,
 *            (default: 2, -1 to use estimated cores minus one).
 *          workLoad the size of the work load, ie: number of possible prime
 *            numbers for each web worker to check per work assignment,
 *            (default: 100).
 * @param callback(err, keypair) called once the operation completes.
 */


function _generateKeyPair(state, options, callback) {
  if (typeof options === 'function') {
    callback = options;
    options = {};
  }

  options = options || {};
  var opts = {
    algorithm: {
      name: options.algorithm || 'PRIMEINC',
      options: {
        workers: options.workers || 2,
        workLoad: options.workLoad || 100,
        workerScript: options.workerScript
      }
    }
  };

  if ('prng' in options) {
    opts.prng = options.prng;
  }

  generate();

  function generate() {
    // find p and then q (done in series to simplify)
    getPrime(state.pBits, function (err, num) {
      if (err) {
        return callback(err);
      }

      state.p = num;

      if (state.q !== null) {
        return finish(err, state.q);
      }

      getPrime(state.qBits, finish);
    });
  }

  function getPrime(bits, callback) {
    forge.prime.generateProbablePrime(bits, opts, callback);
  }

  function finish(err, num) {
    if (err) {
      return callback(err);
    } // set q


    state.q = num; // ensure p is larger than q (swap them if not)

    if (state.p.compareTo(state.q) < 0) {
      var tmp = state.p;
      state.p = state.q;
      state.q = tmp;
    } // ensure p is coprime with e


    if (state.p.subtract(BigInteger.ONE).gcd(state.e).compareTo(BigInteger.ONE) !== 0) {
      state.p = null;
      generate();
      return;
    } // ensure q is coprime with e


    if (state.q.subtract(BigInteger.ONE).gcd(state.e).compareTo(BigInteger.ONE) !== 0) {
      state.q = null;
      getPrime(state.qBits, finish);
      return;
    } // compute phi: (p - 1)(q - 1) (Euler's totient function)


    state.p1 = state.p.subtract(BigInteger.ONE);
    state.q1 = state.q.subtract(BigInteger.ONE);
    state.phi = state.p1.multiply(state.q1); // ensure e and phi are coprime

    if (state.phi.gcd(state.e).compareTo(BigInteger.ONE) !== 0) {
      // phi and e aren't coprime, so generate a new p and q
      state.p = state.q = null;
      generate();
      return;
    } // create n, ensure n is has the right number of bits


    state.n = state.p.multiply(state.q);

    if (state.n.bitLength() !== state.bits) {
      // failed, get new q
      state.q = null;
      getPrime(state.qBits, finish);
      return;
    } // set keys


    var d = state.e.modInverse(state.phi);
    state.keys = {
      privateKey: pki.rsa.setPrivateKey(state.n, state.e, d, state.p, state.q, d.mod(state.p1), d.mod(state.q1), state.q.modInverse(state.p)),
      publicKey: pki.rsa.setPublicKey(state.n, state.e)
    };
    callback(null, state.keys);
  }
}
/**
 * Converts a positive BigInteger into 2's-complement big-endian bytes.
 *
 * @param b the big integer to convert.
 *
 * @return the bytes.
 */


function _bnToBytes(b) {
  // prepend 0x00 if first byte >= 0x80
  var hex = b.toString(16);

  if (hex[0] >= '8') {
    hex = '00' + hex;
  }

  var bytes = forge.util.hexToBytes(hex); // ensure integer is minimally-encoded

  if (bytes.length > 1 && ( // leading 0x00 for positive integer
  bytes.charCodeAt(0) === 0 && (bytes.charCodeAt(1) & 0x80) === 0 || // leading 0xFF for negative integer
  bytes.charCodeAt(0) === 0xFF && (bytes.charCodeAt(1) & 0x80) === 0x80)) {
    return bytes.substr(1);
  }

  return bytes;
}
/**
 * Returns the required number of Miller-Rabin tests to generate a
 * prime with an error probability of (1/2)^80.
 *
 * See Handbook of Applied Cryptography Chapter 4, Table 4.4.
 *
 * @param bits the bit size.
 *
 * @return the required number of iterations.
 */


function _getMillerRabinTests(bits) {
  if (bits <= 100) return 27;
  if (bits <= 150) return 18;
  if (bits <= 200) return 15;
  if (bits <= 250) return 12;
  if (bits <= 300) return 9;
  if (bits <= 350) return 8;
  if (bits <= 400) return 7;
  if (bits <= 500) return 6;
  if (bits <= 600) return 5;
  if (bits <= 800) return 4;
  if (bits <= 1250) return 3;
  return 2;
}
/**
 * Performs feature detection on the Node crypto interface.
 *
 * @param fn the feature (function) to detect.
 *
 * @return true if detected, false if not.
 */


function _detectNodeCrypto(fn) {
  return forge.util.isNodejs && typeof _crypto[fn] === 'function';
}
/**
 * Performs feature detection on the SubtleCrypto interface.
 *
 * @param fn the feature (function) to detect.
 *
 * @return true if detected, false if not.
 */


function _detectSubtleCrypto(fn) {
  return typeof util.globalScope !== 'undefined' && typeof util.globalScope.crypto === 'object' && typeof util.globalScope.crypto.subtle === 'object' && typeof util.globalScope.crypto.subtle[fn] === 'function';
}
/**
 * Performs feature detection on the deprecated Microsoft Internet Explorer
 * outdated SubtleCrypto interface. This function should only be used after
 * checking for the modern, standard SubtleCrypto interface.
 *
 * @param fn the feature (function) to detect.
 *
 * @return true if detected, false if not.
 */


function _detectSubtleMsCrypto(fn) {
  return typeof util.globalScope !== 'undefined' && typeof util.globalScope.msCrypto === 'object' && typeof util.globalScope.msCrypto.subtle === 'object' && typeof util.globalScope.msCrypto.subtle[fn] === 'function';
}

function _intToUint8Array(x) {
  var bytes = forge.util.hexToBytes(x.toString(16));
  var buffer = new Uint8Array(bytes.length);

  for (var i = 0; i < bytes.length; ++i) {
    buffer[i] = bytes.charCodeAt(i);
  }

  return buffer;
}

function _privateKeyFromJwk(jwk) {
  if (jwk.kty !== 'RSA') {
    throw new Error('Unsupported key algorithm "' + jwk.kty + '"; algorithm must be "RSA".');
  }

  return pki.setRsaPrivateKey(_base64ToBigInt(jwk.n), _base64ToBigInt(jwk.e), _base64ToBigInt(jwk.d), _base64ToBigInt(jwk.p), _base64ToBigInt(jwk.q), _base64ToBigInt(jwk.dp), _base64ToBigInt(jwk.dq), _base64ToBigInt(jwk.qi));
}

function _publicKeyFromJwk(jwk) {
  if (jwk.kty !== 'RSA') {
    throw new Error('Key algorithm must be "RSA".');
  }

  return pki.setRsaPublicKey(_base64ToBigInt(jwk.n), _base64ToBigInt(jwk.e));
}

function _base64ToBigInt(b64) {
  return new BigInteger(forge.util.bytesToHex(forge.util.decode64(b64)), 16);
}

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Password-based encryption functions.
 *
 * @author Dave Longley
 * @author Stefan Siegl <stesie@brokenpipe.de>
 *
 * Copyright (c) 2010-2013 Digital Bazaar, Inc.
 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
 *
 * An EncryptedPrivateKeyInfo:
 *
 * EncryptedPrivateKeyInfo ::= SEQUENCE {
 *   encryptionAlgorithm  EncryptionAlgorithmIdentifier,
 *   encryptedData        EncryptedData }
 *
 * EncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
 *
 * EncryptedData ::= OCTET STRING
 */
var forge = __webpack_require__(7);

__webpack_require__(92);

__webpack_require__(40);

__webpack_require__(127);

__webpack_require__(47);

__webpack_require__(45);

__webpack_require__(128);

__webpack_require__(93);

__webpack_require__(46);

__webpack_require__(410);

__webpack_require__(73);

__webpack_require__(10);

if (typeof BigInteger === 'undefined') {
  var BigInteger = forge.jsbn.BigInteger;
} // shortcut for asn.1 API


var asn1 = forge.asn1;
/* Password-based encryption implementation. */

var pki = forge.pki = forge.pki || {};
module.exports = pki.pbe = forge.pbe = forge.pbe || {};
var oids = pki.oids; // validator for an EncryptedPrivateKeyInfo structure
// Note: Currently only works w/algorithm params

var encryptedPrivateKeyValidator = {
  name: 'EncryptedPrivateKeyInfo',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    name: 'EncryptedPrivateKeyInfo.encryptionAlgorithm',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [{
      name: 'AlgorithmIdentifier.algorithm',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.OID,
      constructed: false,
      capture: 'encryptionOid'
    }, {
      name: 'AlgorithmIdentifier.parameters',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      captureAsn1: 'encryptionParams'
    }]
  }, {
    // encryptedData
    name: 'EncryptedPrivateKeyInfo.encryptedData',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.OCTETSTRING,
    constructed: false,
    capture: 'encryptedData'
  }]
}; // validator for a PBES2Algorithms structure
// Note: Currently only works w/PBKDF2 + AES encryption schemes

var PBES2AlgorithmsValidator = {
  name: 'PBES2Algorithms',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    name: 'PBES2Algorithms.keyDerivationFunc',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [{
      name: 'PBES2Algorithms.keyDerivationFunc.oid',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.OID,
      constructed: false,
      capture: 'kdfOid'
    }, {
      name: 'PBES2Algorithms.params',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      value: [{
        name: 'PBES2Algorithms.params.salt',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.OCTETSTRING,
        constructed: false,
        capture: 'kdfSalt'
      }, {
        name: 'PBES2Algorithms.params.iterationCount',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.INTEGER,
        constructed: false,
        capture: 'kdfIterationCount'
      }, {
        name: 'PBES2Algorithms.params.keyLength',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.INTEGER,
        constructed: false,
        optional: true,
        capture: 'keyLength'
      }, {
        // prf
        name: 'PBES2Algorithms.params.prf',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.SEQUENCE,
        constructed: true,
        optional: true,
        value: [{
          name: 'PBES2Algorithms.params.prf.algorithm',
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.OID,
          constructed: false,
          capture: 'prfOid'
        }]
      }]
    }]
  }, {
    name: 'PBES2Algorithms.encryptionScheme',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [{
      name: 'PBES2Algorithms.encryptionScheme.oid',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.OID,
      constructed: false,
      capture: 'encOid'
    }, {
      name: 'PBES2Algorithms.encryptionScheme.iv',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.OCTETSTRING,
      constructed: false,
      capture: 'encIv'
    }]
  }]
};
var pkcs12PbeParamsValidator = {
  name: 'pkcs-12PbeParams',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    name: 'pkcs-12PbeParams.salt',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.OCTETSTRING,
    constructed: false,
    capture: 'salt'
  }, {
    name: 'pkcs-12PbeParams.iterations',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'iterations'
  }]
};
/**
 * Encrypts a ASN.1 PrivateKeyInfo object, producing an EncryptedPrivateKeyInfo.
 *
 * PBES2Algorithms ALGORITHM-IDENTIFIER ::=
 *   { {PBES2-params IDENTIFIED BY id-PBES2}, ...}
 *
 * id-PBES2 OBJECT IDENTIFIER ::= {pkcs-5 13}
 *
 * PBES2-params ::= SEQUENCE {
 *   keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},
 *   encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
 * }
 *
 * PBES2-KDFs ALGORITHM-IDENTIFIER ::=
 *   { {PBKDF2-params IDENTIFIED BY id-PBKDF2}, ... }
 *
 * PBES2-Encs ALGORITHM-IDENTIFIER ::= { ... }
 *
 * PBKDF2-params ::= SEQUENCE {
 *   salt CHOICE {
 *     specified OCTET STRING,
 *     otherSource AlgorithmIdentifier {{PBKDF2-SaltSources}}
 *   },
 *   iterationCount INTEGER (1..MAX),
 *   keyLength INTEGER (1..MAX) OPTIONAL,
 *   prf AlgorithmIdentifier {{PBKDF2-PRFs}} DEFAULT algid-hmacWithSHA1
 * }
 *
 * @param obj the ASN.1 PrivateKeyInfo object.
 * @param password the password to encrypt with.
 * @param options:
 *          algorithm the encryption algorithm to use
 *            ('aes128', 'aes192', 'aes256', '3des'), defaults to 'aes128'.
 *          count the iteration count to use.
 *          saltSize the salt size to use.
 *          prfAlgorithm the PRF message digest algorithm to use
 *            ('sha1', 'sha224', 'sha256', 'sha384', 'sha512')
 *
 * @return the ASN.1 EncryptedPrivateKeyInfo.
 */

pki.encryptPrivateKeyInfo = function (obj, password, options) {
  // set default options
  options = options || {};
  options.saltSize = options.saltSize || 8;
  options.count = options.count || 2048;
  options.algorithm = options.algorithm || 'aes128';
  options.prfAlgorithm = options.prfAlgorithm || 'sha1'; // generate PBE params

  var salt = forge.random.getBytesSync(options.saltSize);
  var count = options.count;
  var countBytes = asn1.integerToDer(count);
  var dkLen;
  var encryptionAlgorithm;
  var encryptedData;

  if (options.algorithm.indexOf('aes') === 0 || options.algorithm === 'des') {
    // do PBES2
    var ivLen, encOid, cipherFn;

    switch (options.algorithm) {
      case 'aes128':
        dkLen = 16;
        ivLen = 16;
        encOid = oids['aes128-CBC'];
        cipherFn = forge.aes.createEncryptionCipher;
        break;

      case 'aes192':
        dkLen = 24;
        ivLen = 16;
        encOid = oids['aes192-CBC'];
        cipherFn = forge.aes.createEncryptionCipher;
        break;

      case 'aes256':
        dkLen = 32;
        ivLen = 16;
        encOid = oids['aes256-CBC'];
        cipherFn = forge.aes.createEncryptionCipher;
        break;

      case 'des':
        dkLen = 8;
        ivLen = 8;
        encOid = oids['desCBC'];
        cipherFn = forge.des.createEncryptionCipher;
        break;

      default:
        var error = new Error('Cannot encrypt private key. Unknown encryption algorithm.');
        error.algorithm = options.algorithm;
        throw error;
    } // get PRF message digest


    var prfAlgorithm = 'hmacWith' + options.prfAlgorithm.toUpperCase();
    var md = prfAlgorithmToMessageDigest(prfAlgorithm); // encrypt private key using pbe SHA-1 and AES/DES

    var dk = forge.pkcs5.pbkdf2(password, salt, count, dkLen, md);
    var iv = forge.random.getBytesSync(ivLen);
    var cipher = cipherFn(dk);
    cipher.start(iv);
    cipher.update(asn1.toDer(obj));
    cipher.finish();
    encryptedData = cipher.output.getBytes(); // get PBKDF2-params

    var params = createPbkdf2Params(salt, countBytes, dkLen, prfAlgorithm);
    encryptionAlgorithm = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(oids['pkcs5PBES2']).getBytes()), asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// keyDerivationFunc
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(oids['pkcs5PBKDF2']).getBytes()), // PBKDF2-params
    params]), // encryptionScheme
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(encOid).getBytes()), // iv
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, iv)])])]);
  } else if (options.algorithm === '3des') {
    // Do PKCS12 PBE
    dkLen = 24;
    var saltBytes = new forge.util.ByteBuffer(salt);
    var dk = pki.pbe.generatePkcs12Key(password, saltBytes, 1, count, dkLen);
    var iv = pki.pbe.generatePkcs12Key(password, saltBytes, 2, count, dkLen);
    var cipher = forge.des.createEncryptionCipher(dk);
    cipher.start(iv);
    cipher.update(asn1.toDer(obj));
    cipher.finish();
    encryptedData = cipher.output.getBytes();
    encryptionAlgorithm = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(oids['pbeWithSHAAnd3-KeyTripleDES-CBC']).getBytes()), // pkcs-12PbeParams
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// salt
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, salt), // iteration count
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, countBytes.getBytes())])]);
  } else {
    var error = new Error('Cannot encrypt private key. Unknown encryption algorithm.');
    error.algorithm = options.algorithm;
    throw error;
  } // EncryptedPrivateKeyInfo


  var rval = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// encryptionAlgorithm
  encryptionAlgorithm, // encryptedData
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, encryptedData)]);
  return rval;
};
/**
 * Decrypts a ASN.1 PrivateKeyInfo object.
 *
 * @param obj the ASN.1 EncryptedPrivateKeyInfo object.
 * @param password the password to decrypt with.
 *
 * @return the ASN.1 PrivateKeyInfo on success, null on failure.
 */


pki.decryptPrivateKeyInfo = function (obj, password) {
  var rval = null; // get PBE params

  var capture = {};
  var errors = [];

  if (!asn1.validate(obj, encryptedPrivateKeyValidator, capture, errors)) {
    var error = new Error('Cannot read encrypted private key. ' + 'ASN.1 object is not a supported EncryptedPrivateKeyInfo.');
    error.errors = errors;
    throw error;
  } // get cipher


  var oid = asn1.derToOid(capture.encryptionOid);
  var cipher = pki.pbe.getCipher(oid, capture.encryptionParams, password); // get encrypted data

  var encrypted = forge.util.createBuffer(capture.encryptedData);
  cipher.update(encrypted);

  if (cipher.finish()) {
    rval = asn1.fromDer(cipher.output);
  }

  return rval;
};
/**
 * Converts a EncryptedPrivateKeyInfo to PEM format.
 *
 * @param epki the EncryptedPrivateKeyInfo.
 * @param maxline the maximum characters per line, defaults to 64.
 *
 * @return the PEM-formatted encrypted private key.
 */


pki.encryptedPrivateKeyToPem = function (epki, maxline) {
  // convert to DER, then PEM-encode
  var msg = {
    type: 'ENCRYPTED PRIVATE KEY',
    body: asn1.toDer(epki).getBytes()
  };
  return forge.pem.encode(msg, {
    maxline: maxline
  });
};
/**
 * Converts a PEM-encoded EncryptedPrivateKeyInfo to ASN.1 format. Decryption
 * is not performed.
 *
 * @param pem the EncryptedPrivateKeyInfo in PEM-format.
 *
 * @return the ASN.1 EncryptedPrivateKeyInfo.
 */


pki.encryptedPrivateKeyFromPem = function (pem) {
  var msg = forge.pem.decode(pem)[0];

  if (msg.type !== 'ENCRYPTED PRIVATE KEY') {
    var error = new Error('Could not convert encrypted private key from PEM; ' + 'PEM header type is "ENCRYPTED PRIVATE KEY".');
    error.headerType = msg.type;
    throw error;
  }

  if (msg.procType && msg.procType.type === 'ENCRYPTED') {
    throw new Error('Could not convert encrypted private key from PEM; ' + 'PEM is encrypted.');
  } // convert DER to ASN.1 object


  return asn1.fromDer(msg.body);
};
/**
 * Encrypts an RSA private key. By default, the key will be wrapped in
 * a PrivateKeyInfo and encrypted to produce a PKCS#8 EncryptedPrivateKeyInfo.
 * This is the standard, preferred way to encrypt a private key.
 *
 * To produce a non-standard PEM-encrypted private key that uses encapsulated
 * headers to indicate the encryption algorithm (old-style non-PKCS#8 OpenSSL
 * private key encryption), set the 'legacy' option to true. Note: Using this
 * option will cause the iteration count to be forced to 1.
 *
 * Note: The 'des' algorithm is supported, but it is not considered to be
 * secure because it only uses a single 56-bit key. If possible, it is highly
 * recommended that a different algorithm be used.
 *
 * @param rsaKey the RSA key to encrypt.
 * @param password the password to use.
 * @param options:
 *          algorithm: the encryption algorithm to use
 *            ('aes128', 'aes192', 'aes256', '3des', 'des').
 *          count: the iteration count to use.
 *          saltSize: the salt size to use.
 *          legacy: output an old non-PKCS#8 PEM-encrypted+encapsulated
 *            headers (DEK-Info) private key.
 *
 * @return the PEM-encoded ASN.1 EncryptedPrivateKeyInfo.
 */


pki.encryptRsaPrivateKey = function (rsaKey, password, options) {
  // standard PKCS#8
  options = options || {};

  if (!options.legacy) {
    // encrypt PrivateKeyInfo
    var rval = pki.wrapRsaPrivateKey(pki.privateKeyToAsn1(rsaKey));
    rval = pki.encryptPrivateKeyInfo(rval, password, options);
    return pki.encryptedPrivateKeyToPem(rval);
  } // legacy non-PKCS#8


  var algorithm;
  var iv;
  var dkLen;
  var cipherFn;

  switch (options.algorithm) {
    case 'aes128':
      algorithm = 'AES-128-CBC';
      dkLen = 16;
      iv = forge.random.getBytesSync(16);
      cipherFn = forge.aes.createEncryptionCipher;
      break;

    case 'aes192':
      algorithm = 'AES-192-CBC';
      dkLen = 24;
      iv = forge.random.getBytesSync(16);
      cipherFn = forge.aes.createEncryptionCipher;
      break;

    case 'aes256':
      algorithm = 'AES-256-CBC';
      dkLen = 32;
      iv = forge.random.getBytesSync(16);
      cipherFn = forge.aes.createEncryptionCipher;
      break;

    case '3des':
      algorithm = 'DES-EDE3-CBC';
      dkLen = 24;
      iv = forge.random.getBytesSync(8);
      cipherFn = forge.des.createEncryptionCipher;
      break;

    case 'des':
      algorithm = 'DES-CBC';
      dkLen = 8;
      iv = forge.random.getBytesSync(8);
      cipherFn = forge.des.createEncryptionCipher;
      break;

    default:
      var error = new Error('Could not encrypt RSA private key; unsupported ' + 'encryption algorithm "' + options.algorithm + '".');
      error.algorithm = options.algorithm;
      throw error;
  } // encrypt private key using OpenSSL legacy key derivation


  var dk = forge.pbe.opensslDeriveBytes(password, iv.substr(0, 8), dkLen);
  var cipher = cipherFn(dk);
  cipher.start(iv);
  cipher.update(asn1.toDer(pki.privateKeyToAsn1(rsaKey)));
  cipher.finish();
  var msg = {
    type: 'RSA PRIVATE KEY',
    procType: {
      version: '4',
      type: 'ENCRYPTED'
    },
    dekInfo: {
      algorithm: algorithm,
      parameters: forge.util.bytesToHex(iv).toUpperCase()
    },
    body: cipher.output.getBytes()
  };
  return forge.pem.encode(msg);
};
/**
 * Decrypts an RSA private key.
 *
 * @param pem the PEM-formatted EncryptedPrivateKeyInfo to decrypt.
 * @param password the password to use.
 *
 * @return the RSA key on success, null on failure.
 */


pki.decryptRsaPrivateKey = function (pem, password) {
  var rval = null;
  var msg = forge.pem.decode(pem)[0];

  if (msg.type !== 'ENCRYPTED PRIVATE KEY' && msg.type !== 'PRIVATE KEY' && msg.type !== 'RSA PRIVATE KEY') {
    var error = new Error('Could not convert private key from PEM; PEM header type ' + 'is not "ENCRYPTED PRIVATE KEY", "PRIVATE KEY", or "RSA PRIVATE KEY".');
    error.headerType = error;
    throw error;
  }

  if (msg.procType && msg.procType.type === 'ENCRYPTED') {
    var dkLen;
    var cipherFn;

    switch (msg.dekInfo.algorithm) {
      case 'DES-CBC':
        dkLen = 8;
        cipherFn = forge.des.createDecryptionCipher;
        break;

      case 'DES-EDE3-CBC':
        dkLen = 24;
        cipherFn = forge.des.createDecryptionCipher;
        break;

      case 'AES-128-CBC':
        dkLen = 16;
        cipherFn = forge.aes.createDecryptionCipher;
        break;

      case 'AES-192-CBC':
        dkLen = 24;
        cipherFn = forge.aes.createDecryptionCipher;
        break;

      case 'AES-256-CBC':
        dkLen = 32;
        cipherFn = forge.aes.createDecryptionCipher;
        break;

      case 'RC2-40-CBC':
        dkLen = 5;

        cipherFn = function cipherFn(key) {
          return forge.rc2.createDecryptionCipher(key, 40);
        };

        break;

      case 'RC2-64-CBC':
        dkLen = 8;

        cipherFn = function cipherFn(key) {
          return forge.rc2.createDecryptionCipher(key, 64);
        };

        break;

      case 'RC2-128-CBC':
        dkLen = 16;

        cipherFn = function cipherFn(key) {
          return forge.rc2.createDecryptionCipher(key, 128);
        };

        break;

      default:
        var error = new Error('Could not decrypt private key; unsupported ' + 'encryption algorithm "' + msg.dekInfo.algorithm + '".');
        error.algorithm = msg.dekInfo.algorithm;
        throw error;
    } // use OpenSSL legacy key derivation


    var iv = forge.util.hexToBytes(msg.dekInfo.parameters);
    var dk = forge.pbe.opensslDeriveBytes(password, iv.substr(0, 8), dkLen);
    var cipher = cipherFn(dk);
    cipher.start(iv);
    cipher.update(forge.util.createBuffer(msg.body));

    if (cipher.finish()) {
      rval = cipher.output.getBytes();
    } else {
      return rval;
    }
  } else {
    rval = msg.body;
  }

  if (msg.type === 'ENCRYPTED PRIVATE KEY') {
    rval = pki.decryptPrivateKeyInfo(asn1.fromDer(rval), password);
  } else {
    // decryption already performed above
    rval = asn1.fromDer(rval);
  }

  if (rval !== null) {
    rval = pki.privateKeyFromAsn1(rval);
  }

  return rval;
};
/**
 * Derives a PKCS#12 key.
 *
 * @param password the password to derive the key material from, null or
 *          undefined for none.
 * @param salt the salt, as a ByteBuffer, to use.
 * @param id the PKCS#12 ID byte (1 = key material, 2 = IV, 3 = MAC).
 * @param iter the iteration count.
 * @param n the number of bytes to derive from the password.
 * @param md the message digest to use, defaults to SHA-1.
 *
 * @return a ByteBuffer with the bytes derived from the password.
 */


pki.pbe.generatePkcs12Key = function (password, salt, id, iter, n, md) {
  var j, l;

  if (typeof md === 'undefined' || md === null) {
    if (!('sha1' in forge.md)) {
      throw new Error('"sha1" hash algorithm unavailable.');
    }

    md = forge.md.sha1.create();
  }

  var u = md.digestLength;
  var v = md.blockLength;
  var result = new forge.util.ByteBuffer();
  /* Convert password to Unicode byte buffer + trailing 0-byte. */

  var passBuf = new forge.util.ByteBuffer();

  if (password !== null && password !== undefined) {
    for (l = 0; l < password.length; l++) {
      passBuf.putInt16(password.charCodeAt(l));
    }

    passBuf.putInt16(0);
  }
  /* Length of salt and password in BYTES. */


  var p = passBuf.length();
  var s = salt.length();
  /* 1. Construct a string, D (the "diversifier"), by concatenating
        v copies of ID. */

  var D = new forge.util.ByteBuffer();
  D.fillWithByte(id, v);
  /* 2. Concatenate copies of the salt together to create a string S of length
        v * ceil(s / v) bytes (the final copy of the salt may be trunacted
        to create S).
        Note that if the salt is the empty string, then so is S. */

  var Slen = v * Math.ceil(s / v);
  var S = new forge.util.ByteBuffer();

  for (l = 0; l < Slen; l++) {
    S.putByte(salt.at(l % s));
  }
  /* 3. Concatenate copies of the password together to create a string P of
        length v * ceil(p / v) bytes (the final copy of the password may be
        truncated to create P).
        Note that if the password is the empty string, then so is P. */


  var Plen = v * Math.ceil(p / v);
  var P = new forge.util.ByteBuffer();

  for (l = 0; l < Plen; l++) {
    P.putByte(passBuf.at(l % p));
  }
  /* 4. Set I=S||P to be the concatenation of S and P. */


  var I = S;
  I.putBuffer(P);
  /* 5. Set c=ceil(n / u). */

  var c = Math.ceil(n / u);
  /* 6. For i=1, 2, ..., c, do the following: */

  for (var i = 1; i <= c; i++) {
    /* a) Set Ai=H^r(D||I). (l.e. the rth hash of D||I, H(H(H(...H(D||I)))) */
    var buf = new forge.util.ByteBuffer();
    buf.putBytes(D.bytes());
    buf.putBytes(I.bytes());

    for (var round = 0; round < iter; round++) {
      md.start();
      md.update(buf.getBytes());
      buf = md.digest();
    }
    /* b) Concatenate copies of Ai to create a string B of length v bytes (the
          final copy of Ai may be truncated to create B). */


    var B = new forge.util.ByteBuffer();

    for (l = 0; l < v; l++) {
      B.putByte(buf.at(l % u));
    }
    /* c) Treating I as a concatenation I0, I1, ..., Ik-1 of v-byte blocks,
          where k=ceil(s / v) + ceil(p / v), modify I by setting
          Ij=(Ij+B+1) mod 2v for each j.  */


    var k = Math.ceil(s / v) + Math.ceil(p / v);
    var Inew = new forge.util.ByteBuffer();

    for (j = 0; j < k; j++) {
      var chunk = new forge.util.ByteBuffer(I.getBytes(v));
      var x = 0x1ff;

      for (l = B.length() - 1; l >= 0; l--) {
        x = x >> 8;
        x += B.at(l) + chunk.at(l);
        chunk.setAt(l, x & 0xff);
      }

      Inew.putBuffer(chunk);
    }

    I = Inew;
    /* Add Ai to A. */

    result.putBuffer(buf);
  }

  result.truncate(result.length() - n);
  return result;
};
/**
 * Get new Forge cipher object instance.
 *
 * @param oid the OID (in string notation).
 * @param params the ASN.1 params object.
 * @param password the password to decrypt with.
 *
 * @return new cipher object instance.
 */


pki.pbe.getCipher = function (oid, params, password) {
  switch (oid) {
    case pki.oids['pkcs5PBES2']:
      return pki.pbe.getCipherForPBES2(oid, params, password);

    case pki.oids['pbeWithSHAAnd3-KeyTripleDES-CBC']:
    case pki.oids['pbewithSHAAnd40BitRC2-CBC']:
      return pki.pbe.getCipherForPKCS12PBE(oid, params, password);

    default:
      var error = new Error('Cannot read encrypted PBE data block. Unsupported OID.');
      error.oid = oid;
      error.supportedOids = ['pkcs5PBES2', 'pbeWithSHAAnd3-KeyTripleDES-CBC', 'pbewithSHAAnd40BitRC2-CBC'];
      throw error;
  }
};
/**
 * Get new Forge cipher object instance according to PBES2 params block.
 *
 * The returned cipher instance is already started using the IV
 * from PBES2 parameter block.
 *
 * @param oid the PKCS#5 PBKDF2 OID (in string notation).
 * @param params the ASN.1 PBES2-params object.
 * @param password the password to decrypt with.
 *
 * @return new cipher object instance.
 */


pki.pbe.getCipherForPBES2 = function (oid, params, password) {
  // get PBE params
  var capture = {};
  var errors = [];

  if (!asn1.validate(params, PBES2AlgorithmsValidator, capture, errors)) {
    var error = new Error('Cannot read password-based-encryption algorithm ' + 'parameters. ASN.1 object is not a supported EncryptedPrivateKeyInfo.');
    error.errors = errors;
    throw error;
  } // check oids


  oid = asn1.derToOid(capture.kdfOid);

  if (oid !== pki.oids['pkcs5PBKDF2']) {
    var error = new Error('Cannot read encrypted private key. ' + 'Unsupported key derivation function OID.');
    error.oid = oid;
    error.supportedOids = ['pkcs5PBKDF2'];
    throw error;
  }

  oid = asn1.derToOid(capture.encOid);

  if (oid !== pki.oids['aes128-CBC'] && oid !== pki.oids['aes192-CBC'] && oid !== pki.oids['aes256-CBC'] && oid !== pki.oids['des-EDE3-CBC'] && oid !== pki.oids['desCBC']) {
    var error = new Error('Cannot read encrypted private key. ' + 'Unsupported encryption scheme OID.');
    error.oid = oid;
    error.supportedOids = ['aes128-CBC', 'aes192-CBC', 'aes256-CBC', 'des-EDE3-CBC', 'desCBC'];
    throw error;
  } // set PBE params


  var salt = capture.kdfSalt;
  var count = forge.util.createBuffer(capture.kdfIterationCount);
  count = count.getInt(count.length() << 3);
  var dkLen;
  var cipherFn;

  switch (pki.oids[oid]) {
    case 'aes128-CBC':
      dkLen = 16;
      cipherFn = forge.aes.createDecryptionCipher;
      break;

    case 'aes192-CBC':
      dkLen = 24;
      cipherFn = forge.aes.createDecryptionCipher;
      break;

    case 'aes256-CBC':
      dkLen = 32;
      cipherFn = forge.aes.createDecryptionCipher;
      break;

    case 'des-EDE3-CBC':
      dkLen = 24;
      cipherFn = forge.des.createDecryptionCipher;
      break;

    case 'desCBC':
      dkLen = 8;
      cipherFn = forge.des.createDecryptionCipher;
      break;
  } // get PRF message digest


  var md = prfOidToMessageDigest(capture.prfOid); // decrypt private key using pbe with chosen PRF and AES/DES

  var dk = forge.pkcs5.pbkdf2(password, salt, count, dkLen, md);
  var iv = capture.encIv;
  var cipher = cipherFn(dk);
  cipher.start(iv);
  return cipher;
};
/**
 * Get new Forge cipher object instance for PKCS#12 PBE.
 *
 * The returned cipher instance is already started using the key & IV
 * derived from the provided password and PKCS#12 PBE salt.
 *
 * @param oid The PKCS#12 PBE OID (in string notation).
 * @param params The ASN.1 PKCS#12 PBE-params object.
 * @param password The password to decrypt with.
 *
 * @return the new cipher object instance.
 */


pki.pbe.getCipherForPKCS12PBE = function (oid, params, password) {
  // get PBE params
  var capture = {};
  var errors = [];

  if (!asn1.validate(params, pkcs12PbeParamsValidator, capture, errors)) {
    var error = new Error('Cannot read password-based-encryption algorithm ' + 'parameters. ASN.1 object is not a supported EncryptedPrivateKeyInfo.');
    error.errors = errors;
    throw error;
  }

  var salt = forge.util.createBuffer(capture.salt);
  var count = forge.util.createBuffer(capture.iterations);
  count = count.getInt(count.length() << 3);
  var dkLen, dIvLen, cipherFn;

  switch (oid) {
    case pki.oids['pbeWithSHAAnd3-KeyTripleDES-CBC']:
      dkLen = 24;
      dIvLen = 8;
      cipherFn = forge.des.startDecrypting;
      break;

    case pki.oids['pbewithSHAAnd40BitRC2-CBC']:
      dkLen = 5;
      dIvLen = 8;

      cipherFn = function cipherFn(key, iv) {
        var cipher = forge.rc2.createDecryptionCipher(key, 40);
        cipher.start(iv, null);
        return cipher;
      };

      break;

    default:
      var error = new Error('Cannot read PKCS #12 PBE data block. Unsupported OID.');
      error.oid = oid;
      throw error;
  } // get PRF message digest


  var md = prfOidToMessageDigest(capture.prfOid);
  var key = pki.pbe.generatePkcs12Key(password, salt, 1, count, dkLen, md);
  md.start();
  var iv = pki.pbe.generatePkcs12Key(password, salt, 2, count, dIvLen, md);
  return cipherFn(key, iv);
};
/**
 * OpenSSL's legacy key derivation function.
 *
 * See: http://www.openssl.org/docs/crypto/EVP_BytesToKey.html
 *
 * @param password the password to derive the key from.
 * @param salt the salt to use, null for none.
 * @param dkLen the number of bytes needed for the derived key.
 * @param [options] the options to use:
 *          [md] an optional message digest object to use.
 */


pki.pbe.opensslDeriveBytes = function (password, salt, dkLen, md) {
  if (typeof md === 'undefined' || md === null) {
    if (!('md5' in forge.md)) {
      throw new Error('"md5" hash algorithm unavailable.');
    }

    md = forge.md.md5.create();
  }

  if (salt === null) {
    salt = '';
  }

  var digests = [hash(md, password + salt)];

  for (var length = 16, i = 1; length < dkLen; ++i, length += 16) {
    digests.push(hash(md, digests[i - 1] + password + salt));
  }

  return digests.join('').substr(0, dkLen);
};

function hash(md, bytes) {
  return md.start().update(bytes).digest().getBytes();
}

function prfOidToMessageDigest(prfOid) {
  // get PRF algorithm, default to SHA-1
  var prfAlgorithm;

  if (!prfOid) {
    prfAlgorithm = 'hmacWithSHA1';
  } else {
    prfAlgorithm = pki.oids[asn1.derToOid(prfOid)];

    if (!prfAlgorithm) {
      var error = new Error('Unsupported PRF OID.');
      error.oid = prfOid;
      error.supported = ['hmacWithSHA1', 'hmacWithSHA224', 'hmacWithSHA256', 'hmacWithSHA384', 'hmacWithSHA512'];
      throw error;
    }
  }

  return prfAlgorithmToMessageDigest(prfAlgorithm);
}

function prfAlgorithmToMessageDigest(prfAlgorithm) {
  var factory = forge.md;

  switch (prfAlgorithm) {
    case 'hmacWithSHA224':
      factory = forge.md.sha512;

    case 'hmacWithSHA1':
    case 'hmacWithSHA256':
    case 'hmacWithSHA384':
    case 'hmacWithSHA512':
      prfAlgorithm = prfAlgorithm.substr(8).toLowerCase();
      break;

    default:
      var error = new Error('Unsupported PRF algorithm.');
      error.algorithm = prfAlgorithm;
      error.supported = ['hmacWithSHA1', 'hmacWithSHA224', 'hmacWithSHA256', 'hmacWithSHA384', 'hmacWithSHA512'];
      throw error;
  }

  if (!factory || !(prfAlgorithm in factory)) {
    throw new Error('Unknown hash algorithm: ' + prfAlgorithm);
  }

  return factory[prfAlgorithm].create();
}

function createPbkdf2Params(salt, countBytes, dkLen, prfAlgorithm) {
  var params = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// salt
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, salt), // iteration count
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, countBytes.getBytes())]); // when PRF algorithm is not SHA-1 default, add key length and PRF algorithm

  if (prfAlgorithm !== 'hmacWithSHA1') {
    params.value.push( // key length
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, forge.util.hexToBytes(dkLen.toString(16))), // AlgorithmIdentifier
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// algorithm
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(pki.oids[prfAlgorithm]).getBytes()), // parameters (null)
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')]));
  }

  return params;
}

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const inherits = __webpack_require__(4);

const Reporter = __webpack_require__(134).Reporter;

const Buffer = __webpack_require__(132).Buffer;

function DecoderBuffer(base, options) {
  Reporter.call(this, options);

  if (!Buffer.isBuffer(base)) {
    this.error('Input not Buffer');
    return;
  }

  this.base = base;
  this.offset = 0;
  this.length = base.length;
}

inherits(DecoderBuffer, Reporter);
exports.DecoderBuffer = DecoderBuffer;

DecoderBuffer.isDecoderBuffer = function isDecoderBuffer(data) {
  if (data instanceof DecoderBuffer) {
    return true;
  } // Or accept compatible API


  const isCompatible = typeof data === 'object' && Buffer.isBuffer(data.base) && data.constructor.name === 'DecoderBuffer' && typeof data.offset === 'number' && typeof data.length === 'number' && typeof data.save === 'function' && typeof data.restore === 'function' && typeof data.isEmpty === 'function' && typeof data.readUInt8 === 'function' && typeof data.skip === 'function' && typeof data.raw === 'function';
  return isCompatible;
};

DecoderBuffer.prototype.save = function save() {
  return {
    offset: this.offset,
    reporter: Reporter.prototype.save.call(this)
  };
};

DecoderBuffer.prototype.restore = function restore(save) {
  // Return skipped data
  const res = new DecoderBuffer(this.base);
  res.offset = save.offset;
  res.length = this.offset;
  this.offset = save.offset;
  Reporter.prototype.restore.call(this, save.reporter);
  return res;
};

DecoderBuffer.prototype.isEmpty = function isEmpty() {
  return this.offset === this.length;
};

DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
  if (this.offset + 1 <= this.length) return this.base.readUInt8(this.offset++, true);else return this.error(fail || 'DecoderBuffer overrun');
};

DecoderBuffer.prototype.skip = function skip(bytes, fail) {
  if (!(this.offset + bytes <= this.length)) return this.error(fail || 'DecoderBuffer overrun');
  const res = new DecoderBuffer(this.base); // Share reporter state

  res._reporterState = this._reporterState;
  res.offset = this.offset;
  res.length = this.offset + bytes;
  this.offset += bytes;
  return res;
};

DecoderBuffer.prototype.raw = function raw(save) {
  return this.base.slice(save ? save.offset : this.offset, this.length);
};

function EncoderBuffer(value, reporter) {
  if (Array.isArray(value)) {
    this.length = 0;
    this.value = value.map(function (item) {
      if (!EncoderBuffer.isEncoderBuffer(item)) item = new EncoderBuffer(item, reporter);
      this.length += item.length;
      return item;
    }, this);
  } else if (typeof value === 'number') {
    if (!(0 <= value && value <= 0xff)) return reporter.error('non-byte EncoderBuffer value');
    this.value = value;
    this.length = 1;
  } else if (typeof value === 'string') {
    this.value = value;
    this.length = Buffer.byteLength(value);
  } else if (Buffer.isBuffer(value)) {
    this.value = value;
    this.length = value.length;
  } else {
    return reporter.error('Unsupported type: ' + typeof value);
  }
}

exports.EncoderBuffer = EncoderBuffer;

EncoderBuffer.isEncoderBuffer = function isEncoderBuffer(data) {
  if (data instanceof EncoderBuffer) {
    return true;
  } // Or accept compatible API


  const isCompatible = typeof data === 'object' && data.constructor.name === 'EncoderBuffer' && typeof data.length === 'number' && typeof data.join === 'function';
  return isCompatible;
};

EncoderBuffer.prototype.join = function join(out, offset) {
  if (!out) out = Buffer.alloc(this.length);
  if (!offset) offset = 0;
  if (this.length === 0) return out;

  if (Array.isArray(this.value)) {
    this.value.forEach(function (item) {
      item.join(out, offset);
      offset += item.length;
    });
  } else {
    if (typeof this.value === 'number') out[offset] = this.value;else if (typeof this.value === 'string') out.write(this.value, offset);else if (Buffer.isBuffer(this.value)) this.value.copy(out, offset);
    offset += this.length;
  }

  return out;
};

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }

  return objectToString(arg) === '[object Array]';
}

exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}

exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}

exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}

exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}

exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}

exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}

exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}

exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}

exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}

exports.isDate = isDate;

function isError(e) {
  return objectToString(e) === '[object Error]' || e instanceof Error;
}

exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}

exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || // ES6 symbol
  typeof arg === 'undefined';
}

exports.isPrimitive = isPrimitive;
exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

/*<replacement>*/

var Buffer = __webpack_require__(6).Buffer;
/*</replacement>*/


var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;

  switch (encoding && encoding.toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
    case 'raw':
      return true;

    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;

  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';

      case 'latin1':
      case 'binary':
        return 'latin1';

      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;

      default:
        if (retried) return; // undefined

        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
}

; // Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings

function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);

  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
} // StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.


exports.StringDecoder = StringDecoder;

function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;

  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;

    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;

    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;

    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }

  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;

  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }

  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End; // Returns only complete characters in a Buffer

StringDecoder.prototype.text = utf8Text; // Attempts to complete a partial non-UTF-8 character using bytes from a Buffer

StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }

  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
}; // Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.


function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
} // Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.


function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);

  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }

  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);

  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }

  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);

  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }

    return nb;
  }

  return 0;
} // Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.


function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }

  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }

    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
} // Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.


function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;

  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }

  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
} // Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.


function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
} // For UTF-8, a replacement character is added when ending on a partial
// character.


function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
} // UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.


function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);

    if (r) {
      var c = r.charCodeAt(r.length - 1);

      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }

    return r;
  }

  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
} // For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.


function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';

  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }

  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;

  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }

  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
} // Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)


function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

module.exports = function xor(a, b) {
  var length = Math.min(a.length, b.length);
  var buffer = new Buffer(length);

  for (var i = 0; i < length; ++i) {
    buffer[i] = a[i] ^ b[i];
  }

  return buffer;
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


class NotInitializedError extends Error {
  constructor(message = 'not initialized') {
    super(message);
    this.name = 'NotInitializedError';
    this.code = NotInitializedError.code;
  }

}

NotInitializedError.code = 'ERR_NOT_INITIALIZED';
exports.NotInitializedError = NotInitializedError;

class AlreadyInitializingError extends Error {
  constructor(message = 'cannot initialize an initializing node') {
    super(message);
    this.name = 'AlreadyInitializingError';
    this.code = AlreadyInitializedError.code;
  }

}

AlreadyInitializingError.code = 'ERR_ALREADY_INITIALIZING';
exports.AlreadyInitializingError = AlreadyInitializingError;

class AlreadyInitializedError extends Error {
  constructor(message = 'cannot re-initialize an initialized node') {
    super(message);
    this.name = 'AlreadyInitializedError';
    this.code = AlreadyInitializedError.code;
  }

}

AlreadyInitializedError.code = 'ERR_ALREADY_INITIALIZED';
exports.AlreadyInitializedError = AlreadyInitializedError;

class NotStartedError extends Error {
  constructor(message = 'not started') {
    super(message);
    this.name = 'NotStartedError';
    this.code = NotStartedError.code;
  }

}

NotStartedError.code = 'ERR_NOT_STARTED';
exports.NotStartedError = NotStartedError;

class NotEnabledError extends Error {
  constructor(message = 'not enabled') {
    super(message);
    this.name = 'NotEnabledError';
    this.code = NotEnabledError.code;
  }

}

NotEnabledError.code = 'ERR_NOT_ENABLED';
exports.NotEnabledError = NotEnabledError;

class TimeoutError extends Error {
  constructor(message = 'request timed out') {
    super(message);
    this.name = 'TimeoutError';
    this.code = TimeoutError.code;
  }

}

TimeoutError.code = 'ERR_TIMEOUT';
exports.TimeoutError = TimeoutError;

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const CID = __webpack_require__(3);

const withIs = __webpack_require__(21);
/**
 * Represents an immutable block of data that is uniquely referenced with a cid.
 *
 * @constructor
 * @param {Buffer} data - The data to be stored in the block as a buffer.
 * @param {CID} cid - The cid of the data
 *
 * @example
 * const block = new Block(new Buffer('a012d83b20f9371...'))
 */


class Block {
  constructor(data, cid) {
    if (!data || !Buffer.isBuffer(data)) {
      throw new Error('first argument  must be a buffer');
    }

    if (!cid || !CID.isCID(cid)) {
      throw new Error('second argument must be a CID');
    }

    this._data = data;
    this._cid = cid;
  }
  /**
   * The data of this block.
   *
   * @type {Buffer}
   */


  get data() {
    return this._data;
  }

  set data(val) {
    throw new Error('Tried to change an immutable block');
  }
  /**
   * The cid of the data this block represents.
   *
   * @type {CID}
   */


  get cid() {
    return this._cid;
  }

  set cid(val) {
    throw new Error('Tried to change an immutable block');
  }

}

module.exports = withIs(Block, {
  className: 'Block',
  symbolName: '@ipfs/js-ipfs-block/block'
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const last = async iterator => {
  let res;
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;

  var _iteratorError;

  try {
    for (var _iterator = _asyncIterator(iterator), _step, _value; _step = await _iterator.next(), _iteratorNormalCompletion = _step.done, _value = await _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
      const entry = _value;
      res = entry;
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        await _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return res;
};

module.exports = last;

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const exporter = __webpack_require__(33);

const log = __webpack_require__(1)('ipfs:mfs:utils:to-trail');

const toTrail = async (context, path) => {
  log("Creating trail for path ".concat(path));
  const output = [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;

  var _iteratorError;

  try {
    for (var _iterator = _asyncIterator(exporter.path(path, context.ipld)), _step, _value; _step = await _iterator.next(), _iteratorNormalCompletion = _step.done, _value = await _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
      const fsEntry = _value;
      output.push({
        name: fsEntry.name,
        cid: fsEntry.cid,
        size: fsEntry.node.size,
        type: fsEntry.unixfs ? fsEntry.unixfs.type : undefined
      });
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        await _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return output;
};

module.exports = toTrail;

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const _get = __webpack_require__(272);

const assert = __webpack_require__(13);

const path = __webpack_require__(103);

const debug = __webpack_require__(1);

const Big = __webpack_require__(36);

const errcode = __webpack_require__(2);

const migrator = __webpack_require__(613);

const bytes = __webpack_require__(656);

const constants = __webpack_require__(657);

const backends = __webpack_require__(658);

const version = __webpack_require__(659);

const config = __webpack_require__(660);

const spec = __webpack_require__(663);

const apiAddr = __webpack_require__(665);

const blockstore = __webpack_require__(666);

const defaultOptions = __webpack_require__(674);

const defaultDatastore = __webpack_require__(675);

const ERRORS = __webpack_require__(167);

const log = debug('repo');
const noLimit = Number.MAX_SAFE_INTEGER;
const AUTO_MIGRATE_CONFIG_KEY = 'repoAutoMigrate';
const lockers = {
  memory: __webpack_require__(303),
  fs: __webpack_require__(303)
};
/**
 * IpfsRepo implements all required functionality to read and write to an ipfs repo.
 *
 */

class IpfsRepo {
  /**
   * @param {string} repoPath - path where the repo is stored
   * @param {object} options - Configuration
   */
  constructor(repoPath, options) {
    assert.strictEqual(typeof repoPath, 'string', 'missing repoPath');
    this.options = buildOptions(options);
    this.closed = true;
    this.path = repoPath;
    this._locker = this._getLocker();
    this.root = backends.create('root', this.path, this.options);
    this.version = version(this.root);
    this.config = config(this.root);
    this.spec = spec(this.root);
    this.apiAddr = apiAddr(this.root);
  }
  /**
   * Initialize a new repo.
   *
   * @param {Object} config - config to write into `config`.
   * @returns {Promise<void>}
   */


  async init(config) {
    log('initializing at: %s', this.path);
    await this._openRoot();
    await this.config.set(buildConfig(config));
    await this.spec.set(buildDatastoreSpec(config));
    await this.version.set(constants.repoVersion);
  }
  /**
   * Open the repo. If the repo is already open an error will be thrown.
   * If the repo is not initialized it will throw an error.
   *
   * @returns {Promise<void>}
   */


  async open() {
    if (!this.closed) {
      throw errcode(new Error('repo is already open'), ERRORS.ERR_REPO_ALREADY_OPEN);
    }

    log('opening at: %s', this.path); // check if the repo is already initialized

    try {
      await this._openRoot();
      await this._checkInitialized();
      this.lockfile = await this._openLock(this.path);
      log('acquired repo.lock');
      log('creating datastore');
      this.datastore = backends.create('datastore', path.join(this.path, 'datastore'), this.options);
      log('creating blocks');
      const blocksBaseStore = backends.create('blocks', path.join(this.path, 'blocks'), this.options);
      this.blocks = await blockstore(blocksBaseStore, this.options.storageBackendOptions.blocks);
      log('creating keystore');
      this.keys = backends.create('keys', path.join(this.path, 'keys'), this.options);
      const isCompatible = await this.version.check(constants.repoVersion);

      if (!isCompatible) {
        if (await this._isAutoMigrationEnabled()) {
          await this._migrate(constants.repoVersion);
        } else {
          throw new ERRORS.InvalidRepoVersionError('Incompatible repo versions. Automatic migrations disabled. Please migrate the repo manually.');
        }
      }

      this.closed = false;
      log('all opened');
    } catch (err) {
      if (this.lockfile) {
        try {
          await this._closeLock();
          this.lockfile = null;
        } catch (err2) {
          log('error removing lock', err2);
        }
      }

      throw err;
    }
  }
  /**
   * Returns the repo locker to be used. Null will be returned if no locker is requested
   *
   * @private
   * @returns {Locker}
   */


  _getLocker() {
    if (typeof this.options.lock === 'string') {
      assert(lockers[this.options.lock], 'Unknown lock type: ' + this.options.lock);
      return lockers[this.options.lock];
    }

    assert(this.options.lock, 'No lock provided');
    return this.options.lock;
  }
  /**
   * Opens the root backend, catching and ignoring an 'Already open' error
   * @returns {Promise}
   */


  async _openRoot() {
    try {
      await this.root.open();
    } catch (err) {
      if (err.message !== 'Already open') {
        throw err;
      }
    }
  }
  /**
   * Creates a lock on the repo if a locker is specified. The lockfile object will
   * be returned in the callback if one has been created.
   *
   * @param {string} path
   * @returns {Promise<lockfile>}
   */


  async _openLock(path) {
    const lockfile = await this._locker.lock(path);

    if (typeof lockfile.close !== 'function') {
      throw errcode(new Error('Locks must have a close method'), 'ERR_NO_CLOSE_FUNCTION');
    }

    return lockfile;
  }
  /**
   * Closes the lock on the repo
   *
   * @returns {Promise<void>}
   */


  _closeLock() {
    return this.lockfile.close();
  }
  /**
   * Check if the repo is already initialized.
   * @private
   * @returns {Promise}
   */


  async _checkInitialized() {
    log('init check');
    let config;

    try {
      [config] = await Promise.all([this.config.exists(), this.spec.exists(), this.version.exists()]);
    } catch (err) {
      if (err.code === 'ERR_NOT_FOUND') {
        throw errcode(new Error('repo is not initialized yet'), ERRORS.ERR_REPO_NOT_INITIALIZED, {
          path: this.path
        });
      }

      throw err;
    }

    if (!config) {
      throw errcode(new Error('repo is not initialized yet'), ERRORS.ERR_REPO_NOT_INITIALIZED, {
        path: this.path
      });
    }
  }
  /**
   * Close the repo and cleanup.
   *
   * @returns {Promise<void>}
   */


  async close() {
    if (this.closed) {
      throw errcode(new Error('repo is already closed'), ERRORS.ERR_REPO_ALREADY_CLOSED);
    }

    log('closing at: %s', this.path);

    try {
      // Delete api, ignoring irrelevant errors
      await this.apiAddr.delete();
    } catch (err) {
      if (err.code !== ERRORS.ERR_REPO_NOT_INITIALIZED && !err.message.startsWith('ENOENT')) {
        throw err;
      }
    }

    await Promise.all([this.root, this.blocks, this.keys, this.datastore].map(store => store.close()));
    log('unlocking');
    this.closed = true;
    await this._closeLock();
    this.lockfile = null;
  }
  /**
   * Check if a repo exists.
   *
   * @returns {Promise<bool>}
   */


  async exists() {
    // eslint-disable-line require-await
    return this.version.exists();
  }
  /**
   * Get repo status.
   *
   * @returns {Object}
   */


  async stat() {
    const [storageMax, blocks, version, datastore, keys] = await Promise.all([this._storageMaxStat(), this._blockStat(), this.version.get(), getSize(this.datastore), getSize(this.keys)]);
    const size = blocks.size.plus(datastore).plus(keys);
    return {
      repoPath: this.path,
      storageMax,
      version: version,
      numObjects: blocks.count,
      repoSize: size
    };
  }

  async _isAutoMigrationEnabled() {
    if (this.options.autoMigrate !== undefined) {
      return this.options.autoMigrate;
    }

    let autoMigrateConfig;

    try {
      autoMigrateConfig = await this.config.get(AUTO_MIGRATE_CONFIG_KEY);
    } catch (e) {
      if (e.code === ERRORS.NotFoundError.code) {
        autoMigrateConfig = true; // Config's default value is True
      } else {
        throw e;
      }
    }

    return autoMigrateConfig;
  }

  async _migrate(toVersion) {
    const currentRepoVersion = await this.version.get();

    if (currentRepoVersion > toVersion) {
      log('reverting to version ' + toVersion);
      return migrator.revert(this.path, toVersion, {
        ignoreLock: true,
        repoOptions: this.options
      });
    } else {
      log('migrating to version ' + toVersion);
      return migrator.migrate(this.path, toVersion, {
        ignoreLock: true,
        repoOptions: this.options
      });
    }
  }

  async _storageMaxStat() {
    try {
      const max = await this.config.get('Datastore.StorageMax');
      return new Big(bytes(max));
    } catch (err) {
      return new Big(noLimit);
    }
  }

  async _blockStat() {
    let count = new Big(0);
    let size = new Big(0);
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;

    var _iteratorError;

    try {
      for (var _iterator = _asyncIterator(this.blocks.query({})), _step, _value; _step = await _iterator.next(), _iteratorNormalCompletion = _step.done, _value = await _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
        const block = _value;
        count = count.plus(1);
        size = size.plus(block.value.byteLength).plus(block.key._buf.byteLength);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          await _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return {
      count,
      size
    };
  }

}

async function getSize(queryFn) {
  const sum = new Big(0);
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;

  var _iteratorError2;

  try {
    for (var _iterator2 = _asyncIterator(queryFn.query({})), _step2, _value2; _step2 = await _iterator2.next(), _iteratorNormalCompletion2 = _step2.done, _value2 = await _step2.value, !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {
      const block = _value2;
      sum.plus(block.value.byteLength).plus(block.key._buf.byteLength);
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
        await _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return sum;
}

module.exports = IpfsRepo;
module.exports.utils = {
  blockstore: __webpack_require__(301)
};
module.exports.repoVersion = constants.repoVersion;
module.exports.errors = ERRORS;

function buildOptions(_options) {
  const options = Object.assign({}, defaultOptions, _options);
  options.storageBackends = Object.assign({}, defaultOptions.storageBackends, options.storageBackends);
  options.storageBackendOptions = Object.assign({}, defaultOptions.storageBackendOptions, options.storageBackendOptions);
  return options;
} // TODO this should come from js-ipfs instead


function buildConfig(_config) {
  _config.datastore = Object.assign({}, defaultDatastore, _get(_config, 'datastore', {}));
  return _config;
}

function buildDatastoreSpec(_config) {
  const spec = Object.assign({}, defaultDatastore.Spec, _get(_config, 'datastore.Spec', {}));
  return {
    type: spec.type,
    mounts: spec.mounts.map(mounting => ({
      mountpoint: mounting.mountpoint,
      type: mounting.child.type,
      path: mounting.child.path,
      shardFunc: mounting.child.shardFunc
    }))
  };
}

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const base32Encode = __webpack_require__(696);

const NanoDate = __webpack_require__(697);

const {
  Key
} = __webpack_require__(14);

const crypto = __webpack_require__(28);

const PeerId = __webpack_require__(9);

const multihash = __webpack_require__(16);

const errCode = __webpack_require__(2);

const debug = __webpack_require__(1);

const log = debug('jsipns');
log.error = debug('jsipns:error');

const ipnsEntryProto = __webpack_require__(698);

const {
  parseRFC3339
} = __webpack_require__(699);

const ERRORS = __webpack_require__(700);

const ID_MULTIHASH_CODE = multihash.names.id;
const namespace = '/ipns/';
/**
 * IPNS entry
 * @typedef {Object} IpnsEntry
 * @property {string} value - value to be stored in the record
 * @property {Buffer} signature - signature of the record
 * @property {number} validityType - Type of validation being used
 * @property {string} validity - expiration datetime for the record in RFC3339 format
 * @property {number} sequence - number representing the version of the record
 */

/**
 * Creates a new ipns entry and signs it with the given private key.
 * The ipns entry validity should follow the [RFC3339]{@link https://www.ietf.org/rfc/rfc3339.txt} with nanoseconds precision.
 * Note: This function does not embed the public key. If you want to do that, use `EmbedPublicKey`.
 *
 * @param {Object} privateKey private key for signing the record.
 * @param {string} value value to be stored in the record.
 * @param {number} seq number representing the current version of the record.
 * @param {number|string} lifetime lifetime of the record (in milliseconds).
 * @returns {Promise<IpnsEntry>} entry
 */

const create = (privateKey, value, seq, lifetime) => {
  // Validity in ISOString with nanoseconds precision and validity type EOL
  const isoValidity = new NanoDate(Date.now() + Number(lifetime)).toString();
  const validityType = ipnsEntryProto.ValidityType.EOL;
  return _create(privateKey, value, seq, isoValidity, validityType);
};
/**
 * Same as create(), but instead of generating a new Date, it receives the intended expiration time
 * WARNING: nano precision is not standard, make sure the value in seconds is 9 orders of magnitude lesser than the one provided.
 * @param {Object} privateKey private key for signing the record.
 * @param {string} value value to be stored in the record.
 * @param {number} seq number representing the current version of the record.
 * @param {string} expiration expiration datetime for record in the [RFC3339]{@link https://www.ietf.org/rfc/rfc3339.txt} with nanoseconds precision.
 * @returns {Promise<IpnsEntry>} entry
 */


const createWithExpiration = (privateKey, value, seq, expiration) => {
  const validityType = ipnsEntryProto.ValidityType.EOL;
  return _create(privateKey, value, seq, expiration, validityType);
};

const _create = async (privateKey, value, seq, isoValidity, validityType) => {
  const signature = await sign(privateKey, value, validityType, isoValidity);
  const entry = {
    value: value,
    signature: signature,
    validityType: validityType,
    validity: isoValidity,
    sequence: seq
  };
  log("ipns entry for ".concat(value, " created"));
  return entry;
};
/**
 * Validates the given ipns entry against the given public key.
 *
 * @param {Object} publicKey public key for validating the record.
 * @param {IpnsEntry} entry ipns entry record.
 * @returns {Promise}
 */


const _validate = async (publicKey, entry) => {
  const {
    value,
    validityType,
    validity
  } = entry;
  const dataForSignature = ipnsEntryDataForSig(value, validityType, validity); // Validate Signature

  let isValid;

  try {
    isValid = await publicKey.verify(dataForSignature, entry.signature);
  } catch (err) {
    isValid = false;
  }

  if (!isValid) {
    log.error('record signature verification failed');
    throw errCode(new Error('record signature verification failed'), ERRORS.ERR_SIGNATURE_VERIFICATION);
  } // Validate according to the validity type


  if (validityType === ipnsEntryProto.ValidityType.EOL) {
    let validityDate;

    try {
      validityDate = parseRFC3339(validity.toString());
    } catch (e) {
      log.error('unrecognized validity format (not an rfc3339 format)');
      throw errCode(new Error('unrecognized validity format (not an rfc3339 format)'), ERRORS.ERR_UNRECOGNIZED_FORMAT);
    }

    if (validityDate < Date.now()) {
      log.error('record has expired');
      throw errCode(new Error('record has expired'), ERRORS.ERR_IPNS_EXPIRED_RECORD);
    }
  } else if (validityType) {
    log.error('unrecognized validity type');
    throw errCode(new Error('unrecognized validity type'), ERRORS.ERR_UNRECOGNIZED_VALIDITY);
  }

  log("ipns entry for ".concat(value, " is valid"));
};
/**
 * Embed the given public key in the given entry. While not strictly required,
 * some nodes (eg. DHT servers) may reject IPNS entries that don't embed their
 * public keys as they may not be able to validate them efficiently.
 * As a consequence of nodes needing to validade a record upon receipt, they need
 * the public key associated with it. For olde RSA keys, it is easier if we just
 * send this as part of the record itself. For newer ed25519 keys, the public key
 * can be embedded in the peerId.
 *
 * @param {Object} publicKey public key to embed.
 * @param {Object} entry ipns entry record.
 * @return {IpnsEntry} entry with public key embedded
 */


const embedPublicKey = async (publicKey, entry) => {
  if (!publicKey || !publicKey.bytes || !entry) {
    const error = new Error('one or more of the provided parameters are not defined');
    log.error(error);
    throw errCode(error, ERRORS.ERR_UNDEFINED_PARAMETER);
  } // Create a peer id from the public key.


  let peerId;

  try {
    peerId = await PeerId.createFromPubKey(publicKey.bytes);
  } catch (err) {
    throw errCode(err, ERRORS.ERR_PEER_ID_FROM_PUBLIC_KEY);
  } // Try to extract the public key from the ID. If we can, no need to embed it


  let extractedPublicKey;

  try {
    extractedPublicKey = extractPublicKeyFromId(peerId);
  } catch (err) {
    log.error(err);
    throw errCode(err, ERRORS.ERR_PUBLIC_KEY_FROM_ID);
  }

  if (extractedPublicKey) {
    return null;
  } // If we failed to extract the public key from the peer ID, embed it in the record.


  try {
    entry.pubKey = crypto.keys.marshalPublicKey(publicKey);
  } catch (err) {
    log.error(err);
    throw err;
  }

  return entry;
};
/**
 * Extracts a public key matching `pid` from the ipns record.
 *
 * @param {Object} peerId peer identifier object.
 * @param {IpnsEntry} entry ipns entry record.
 * @returns {Object} the public key
 */


const extractPublicKey = (peerId, entry) => {
  if (!entry || !peerId) {
    const error = new Error('one or more of the provided parameters are not defined');
    log.error(error);
    throw errCode(error, ERRORS.ERR_UNDEFINED_PARAMETER);
  }

  if (entry.pubKey) {
    let pubKey;

    try {
      pubKey = crypto.keys.unmarshalPublicKey(entry.pubKey);
    } catch (err) {
      log.error(err);
      throw err;
    }

    return pubKey;
  }

  if (peerId.pubKey) {
    return peerId.pubKey;
  }

  throw Object.assign(new Error('no public key is available'), {
    code: ERRORS.ERR_UNDEFINED_PARAMETER
  });
}; // rawStdEncoding with RFC4648


const rawStdEncoding = key => base32Encode(key, 'RFC4648', {
  padding: false
});
/**
 * Get key for storing the record locally.
 * Format: /ipns/${base32(<HASH>)}
 *
 * @param {Buffer} key peer identifier object.
 * @returns {string}
 */


const getLocalKey = key => new Key("/ipns/".concat(rawStdEncoding(key)));
/**
 * Get key for sharing the record in the routing mechanism.
 * Format: ${base32(/ipns/<HASH>)}, ${base32(/pk/<HASH>)}
 *
 * @param {Buffer} pid peer identifier represented by the multihash of the public key as Buffer.
 * @returns {Object} containing the `nameKey` and the `ipnsKey`.
 */


const getIdKeys = pid => {
  const pkBuffer = Buffer.from('/pk/');
  const ipnsBuffer = Buffer.from('/ipns/');
  return {
    routingPubKey: new Key(Buffer.concat([pkBuffer, pid])),
    // Added on https://github.com/ipfs/js-ipns/pull/8#issue-213857876 (pkKey will be deprecated in a future release)
    pkKey: new Key(rawStdEncoding(Buffer.concat([pkBuffer, pid]))),
    routingKey: new Key(Buffer.concat([ipnsBuffer, pid])),
    // Added on https://github.com/ipfs/js-ipns/pull/6#issue-213631461 (ipnsKey will be deprecated in a future release)
    ipnsKey: new Key(rawStdEncoding(Buffer.concat([ipnsBuffer, pid])))
  };
}; // Sign ipns record data


const sign = (privateKey, value, validityType, validity) => {
  try {
    const dataForSignature = ipnsEntryDataForSig(value, validityType, validity);
    return privateKey.sign(dataForSignature);
  } catch (error) {
    log.error('record signature creation failed');
    throw errCode(new Error('record signature creation failed: ' + error.message), ERRORS.ERR_SIGNATURE_CREATION);
  }
}; // Utility for getting the validity type code name of a validity


const getValidityType = validityType => {
  if (validityType.toString() === '0') {
    return 'EOL';
  }

  const error = new Error("unrecognized validity type ".concat(validityType.toString()));
  log.error(error);
  throw errCode(error, ERRORS.ERR_UNRECOGNIZED_VALIDITY);
}; // Utility for creating the record data for being signed


const ipnsEntryDataForSig = (value, validityType, validity) => {
  const valueBuffer = Buffer.from(value);
  const validityTypeBuffer = Buffer.from(getValidityType(validityType));
  const validityBuffer = Buffer.from(validity);
  return Buffer.concat([valueBuffer, validityBuffer, validityTypeBuffer]);
}; // Utility for extracting the public key from a peer-id


const extractPublicKeyFromId = peerId => {
  const decodedId = multihash.decode(peerId.id);

  if (decodedId.code !== ID_MULTIHASH_CODE) {
    return null;
  }

  return crypto.keys.unmarshalPublicKey(decodedId.digest);
};

const marshal = ipnsEntryProto.encode;
const unmarshal = ipnsEntryProto.decode;
const validator = {
  validate: async (marshalledData, key) => {
    const receivedEntry = unmarshal(marshalledData);
    const bufferId = key.slice('/ipns/'.length);
    const peerId = PeerId.createFromBytes(bufferId); // extract public key

    const pubKey = extractPublicKey(peerId, receivedEntry); // Record validation

    await _validate(pubKey, receivedEntry);
    return true;
  },
  select: (dataA, dataB) => {
    const entryA = unmarshal(dataA);
    const entryB = unmarshal(dataB);
    return entryA.sequence > entryB.sequence ? 0 : 1;
  }
};
module.exports = {
  // create ipns entry record
  create,
  // create ipns entry record specifying the expiration time
  createWithExpiration,
  // validate ipns entry record
  validate: _validate,
  // embed public key in the record
  embedPublicKey,
  // extract public key from the record
  extractPublicKey,
  // get key for storing the entry locally
  getLocalKey,
  // get keys for routing
  getIdKeys,
  // marshal
  marshal,
  // unmarshal
  unmarshal,
  // validator
  validator,
  // namespace
  namespace,
  namespaceLength: namespace.length
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const protobuf = __webpack_require__(24);

module.exports = protobuf("\nmessage CircuitRelay {\n\n  enum Status {\n    SUCCESS                    = 100;\n    HOP_SRC_ADDR_TOO_LONG      = 220;\n    HOP_DST_ADDR_TOO_LONG      = 221;\n    HOP_SRC_MULTIADDR_INVALID  = 250;\n    HOP_DST_MULTIADDR_INVALID  = 251;\n    HOP_NO_CONN_TO_DST         = 260;\n    HOP_CANT_DIAL_DST          = 261;\n    HOP_CANT_OPEN_DST_STREAM   = 262;\n    HOP_CANT_SPEAK_RELAY       = 270;\n    HOP_CANT_RELAY_TO_SELF     = 280;\n    STOP_SRC_ADDR_TOO_LONG     = 320;\n    STOP_DST_ADDR_TOO_LONG     = 321;\n    STOP_SRC_MULTIADDR_INVALID = 350;\n    STOP_DST_MULTIADDR_INVALID = 351;\n    STOP_RELAY_REFUSED         = 390;\n    MALFORMED_MESSAGE          = 400;\n  }\n\n  enum Type { // RPC identifier, either HOP, STOP or STATUS\n    HOP = 1;\n    STOP = 2;\n    STATUS = 3;\n    CAN_HOP = 4;\n  }\n\n  message Peer {\n    required bytes id = 1;    // peer id\n    repeated bytes addrs = 2; // peer's known addresses\n  }\n\n  optional Type type = 1;     // Type of the message\n\n  optional Peer srcPeer = 2;  // srcPeer and dstPeer are used when Type is HOP or STATUS\n  optional Peer dstPeer = 3;\n\n  optional Status code = 4;   // Status code, used when Type is STATUS\n}\n");

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

function _asyncGeneratorDelegate(inner, awaitWrap) { var iter = {}, waiting = false; function pump(key, value) { waiting = true; value = new Promise(function (resolve) { resolve(inner[key](value)); }); return { done: false, value: awaitWrap(value) }; } ; if (typeof Symbol === "function" && Symbol.iterator) { iter[Symbol.iterator] = function () { return this; }; } iter.next = function (value) { if (waiting) { waiting = false; return value; } return pump("next", value); }; if (typeof inner.throw === "function") { iter.throw = function (value) { if (waiting) { waiting = false; throw value; } return pump("throw", value); }; } if (typeof inner.return === "function") { iter.return = function (value) { if (waiting) { waiting = false; return value; } return pump("return", value); }; } return iter; }

const Reader = __webpack_require__(325);

const Writer = __webpack_require__(112);

const defer = __webpack_require__(69); // Convert a duplex stream into a reader and writer and rest stream


module.exports = stream => {
  const writer = Writer(); // Write bytes on demand to the sink

  const reader = Reader(stream.source); // Read bytes on demand from the source
  // Waits for a source to be passed to the rest stream's sink

  const sourcePromise = defer();
  const sinkPromise = stream.sink(_wrapAsyncGenerator(function* () {
    yield* _asyncGeneratorDelegate(_asyncIterator(writer), _awaitAsyncGenerator);
    const source = yield _awaitAsyncGenerator(sourcePromise.promise);
    yield* _asyncGeneratorDelegate(_asyncIterator(source), _awaitAsyncGenerator);
  })());
  const rest = {
    sink: source => {
      sourcePromise.resolve(source);
      return sinkPromise;
    },
    source: reader
  };
  return {
    reader,
    writer,
    stream: rest,
    rest: () => writer.end(),
    write: writer.push,
    read: async () => {
      return (await reader.next()).value;
    }
  };
};

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// If the passed object is an (async) iterable, then get the iterator
// If it's probably an iterator already (i.e. has next function) return it
// else throw
module.exports = function getIterator(obj) {
  if (obj) {
    if (typeof obj[Symbol.iterator] === 'function') {
      return obj[Symbol.iterator]();
    }

    if (typeof obj[Symbol.asyncIterator] === 'function') {
      return obj[Symbol.asyncIterator]();
    }

    if (typeof obj.next === 'function') {
      return obj; // probably an iterator
    }
  }

  throw new Error('argument is not an iterator or iterable');
};

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_RESULT__;

/* global window, exports, define */
!function () {
  'use strict';

  var re = {
    not_string: /[^s]/,
    not_bool: /[^t]/,
    not_type: /[^T]/,
    not_primitive: /[^v]/,
    number: /[diefg]/,
    numeric_arg: /[bcdiefguxX]/,
    json: /[j]/,
    not_json: /[^j]/,
    text: /^[^\x25]+/,
    modulo: /^\x25{2}/,
    placeholder: /^\x25(?:([1-9]\d*)\$|\(([^)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxX])/,
    key: /^([a-z_][a-z_\d]*)/i,
    key_access: /^\.([a-z_][a-z_\d]*)/i,
    index_access: /^\[(\d+)\]/,
    sign: /^[+-]/
  };

  function sprintf(key) {
    // `arguments` is not an array, but should be fine for this call
    return sprintf_format(sprintf_parse(key), arguments);
  }

  function vsprintf(fmt, argv) {
    return sprintf.apply(null, [fmt].concat(argv || []));
  }

  function sprintf_format(parse_tree, argv) {
    var cursor = 1,
        tree_length = parse_tree.length,
        arg,
        output = '',
        i,
        k,
        ph,
        pad,
        pad_character,
        pad_length,
        is_positive,
        sign;

    for (i = 0; i < tree_length; i++) {
      if (typeof parse_tree[i] === 'string') {
        output += parse_tree[i];
      } else if (typeof parse_tree[i] === 'object') {
        ph = parse_tree[i]; // convenience purposes only

        if (ph.keys) {
          // keyword argument
          arg = argv[cursor];

          for (k = 0; k < ph.keys.length; k++) {
            if (arg == undefined) {
              throw new Error(sprintf('[sprintf] Cannot access property "%s" of undefined value "%s"', ph.keys[k], ph.keys[k - 1]));
            }

            arg = arg[ph.keys[k]];
          }
        } else if (ph.param_no) {
          // positional argument (explicit)
          arg = argv[ph.param_no];
        } else {
          // positional argument (implicit)
          arg = argv[cursor++];
        }

        if (re.not_type.test(ph.type) && re.not_primitive.test(ph.type) && arg instanceof Function) {
          arg = arg();
        }

        if (re.numeric_arg.test(ph.type) && typeof arg !== 'number' && isNaN(arg)) {
          throw new TypeError(sprintf('[sprintf] expecting number but found %T', arg));
        }

        if (re.number.test(ph.type)) {
          is_positive = arg >= 0;
        }

        switch (ph.type) {
          case 'b':
            arg = parseInt(arg, 10).toString(2);
            break;

          case 'c':
            arg = String.fromCharCode(parseInt(arg, 10));
            break;

          case 'd':
          case 'i':
            arg = parseInt(arg, 10);
            break;

          case 'j':
            arg = JSON.stringify(arg, null, ph.width ? parseInt(ph.width) : 0);
            break;

          case 'e':
            arg = ph.precision ? parseFloat(arg).toExponential(ph.precision) : parseFloat(arg).toExponential();
            break;

          case 'f':
            arg = ph.precision ? parseFloat(arg).toFixed(ph.precision) : parseFloat(arg);
            break;

          case 'g':
            arg = ph.precision ? String(Number(arg.toPrecision(ph.precision))) : parseFloat(arg);
            break;

          case 'o':
            arg = (parseInt(arg, 10) >>> 0).toString(8);
            break;

          case 's':
            arg = String(arg);
            arg = ph.precision ? arg.substring(0, ph.precision) : arg;
            break;

          case 't':
            arg = String(!!arg);
            arg = ph.precision ? arg.substring(0, ph.precision) : arg;
            break;

          case 'T':
            arg = Object.prototype.toString.call(arg).slice(8, -1).toLowerCase();
            arg = ph.precision ? arg.substring(0, ph.precision) : arg;
            break;

          case 'u':
            arg = parseInt(arg, 10) >>> 0;
            break;

          case 'v':
            arg = arg.valueOf();
            arg = ph.precision ? arg.substring(0, ph.precision) : arg;
            break;

          case 'x':
            arg = (parseInt(arg, 10) >>> 0).toString(16);
            break;

          case 'X':
            arg = (parseInt(arg, 10) >>> 0).toString(16).toUpperCase();
            break;
        }

        if (re.json.test(ph.type)) {
          output += arg;
        } else {
          if (re.number.test(ph.type) && (!is_positive || ph.sign)) {
            sign = is_positive ? '+' : '-';
            arg = arg.toString().replace(re.sign, '');
          } else {
            sign = '';
          }

          pad_character = ph.pad_char ? ph.pad_char === '0' ? '0' : ph.pad_char.charAt(1) : ' ';
          pad_length = ph.width - (sign + arg).length;
          pad = ph.width ? pad_length > 0 ? pad_character.repeat(pad_length) : '' : '';
          output += ph.align ? sign + arg + pad : pad_character === '0' ? sign + pad + arg : pad + sign + arg;
        }
      }
    }

    return output;
  }

  var sprintf_cache = Object.create(null);

  function sprintf_parse(fmt) {
    if (sprintf_cache[fmt]) {
      return sprintf_cache[fmt];
    }

    var _fmt = fmt,
        match,
        parse_tree = [],
        arg_names = 0;

    while (_fmt) {
      if ((match = re.text.exec(_fmt)) !== null) {
        parse_tree.push(match[0]);
      } else if ((match = re.modulo.exec(_fmt)) !== null) {
        parse_tree.push('%');
      } else if ((match = re.placeholder.exec(_fmt)) !== null) {
        if (match[2]) {
          arg_names |= 1;
          var field_list = [],
              replacement_field = match[2],
              field_match = [];

          if ((field_match = re.key.exec(replacement_field)) !== null) {
            field_list.push(field_match[1]);

            while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {
              if ((field_match = re.key_access.exec(replacement_field)) !== null) {
                field_list.push(field_match[1]);
              } else if ((field_match = re.index_access.exec(replacement_field)) !== null) {
                field_list.push(field_match[1]);
              } else {
                throw new SyntaxError('[sprintf] failed to parse named argument key');
              }
            }
          } else {
            throw new SyntaxError('[sprintf] failed to parse named argument key');
          }

          match[2] = field_list;
        } else {
          arg_names |= 2;
        }

        if (arg_names === 3) {
          throw new Error('[sprintf] mixing positional and named placeholders is not (yet) supported');
        }

        parse_tree.push({
          placeholder: match[0],
          param_no: match[1],
          keys: match[2],
          sign: match[3],
          pad_char: match[4],
          align: match[5],
          width: match[6],
          precision: match[7],
          type: match[8]
        });
      } else {
        throw new SyntaxError('[sprintf] unexpected placeholder');
      }

      _fmt = _fmt.substring(match[0].length);
    }

    return sprintf_cache[fmt] = parse_tree;
  }
  /**
   * export to either browser or node.js
   */

  /* eslint-disable quote-props */


  if (true) {
    exports['sprintf'] = sprintf;
    exports['vsprintf'] = vsprintf;
  }

  if (typeof window !== 'undefined') {
    window['sprintf'] = sprintf;
    window['vsprintf'] = vsprintf;

    if (true) {
      !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
        return {
          'sprintf': sprintf,
          'vsprintf': vsprintf
        };
      }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    }
  }
  /* eslint-enable quote-props */

}(); // eslint-disable-line

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const dagPB = __webpack_require__(12);

const DAGNode = dagPB.DAGNode;
const DAGLink = dagPB.DAGLink;

const mh = __webpack_require__(16);

const multicodec = __webpack_require__(15);

function parseBuffer(buf, encoding) {
  switch (encoding) {
    case 'json':
      return parseJSONBuffer(buf);

    case 'protobuf':
      return parseProtoBuffer(buf);

    default:
      throw new Error("unkown encoding: ".concat(encoding));
  }
}

function parseJSONBuffer(buf) {
  let data;
  let links;

  try {
    const parsed = JSON.parse(buf.toString());
    links = (parsed.Links || []).map(link => {
      return new DAGLink(link.Name || link.name, link.Size || link.size, mh.fromB58String(link.Hash || link.hash || link.multihash));
    });
    data = Buffer.from(parsed.Data);
  } catch (err) {
    throw new Error('failed to parse JSON: ' + err);
  }

  return new DAGNode(data, links);
}

function parseProtoBuffer(buf) {
  return dagPB.util.deserialize(buf);
}

module.exports = ({
  ipld,
  gcLock,
  preload
}) => {
  return async function put(obj, options) {
    options = options || {};
    const encoding = options.enc;
    let node;

    if (Buffer.isBuffer(obj)) {
      if (encoding) {
        node = await parseBuffer(obj, encoding);
      } else {
        node = new DAGNode(obj);
      }
    } else if (DAGNode.isDAGNode(obj)) {
      // already a dag node
      node = obj;
    } else if (typeof obj === 'object') {
      node = new DAGNode(obj.Data, obj.Links);
    } else {
      throw new Error('obj not recognized');
    }

    const release = await gcLock.readLock();

    try {
      const cid = await ipld.put(node, multicodec.DAG_PB, {
        cidVersion: 0,
        hashAlg: multicodec.SHA2_256
      });

      if (options.preload !== false) {
        preload(cid);
      }

      return cid;
    } finally {
      release();
    }
  };
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

module.exports = readable => {
  // Node.js stream
  if (readable[Symbol.asyncIterator]) return readable; // Browser ReadableStream

  if (readable.getReader) {
    return _wrapAsyncGenerator(function* () {
      const reader = readable.getReader();

      try {
        while (true) {
          const {
            done,
            value
          } = yield _awaitAsyncGenerator(reader.read());
          if (done) return;
          yield value;
        }
      } finally {
        reader.releaseLock();
      }
    })();
  }

  throw new Error('unknown stream');
};

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var scope = typeof global !== "undefined" && global || typeof self !== "undefined" && self || window;
var apply = Function.prototype.apply; // DOM APIs, for completeness

exports.setTimeout = function () {
  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
};

exports.setInterval = function () {
  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
};

exports.clearTimeout = exports.clearInterval = function (timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}

Timeout.prototype.unref = Timeout.prototype.ref = function () {};

Timeout.prototype.close = function () {
  this._clearFn.call(scope, this._id);
}; // Does not start the time, just sets up the members needed.


exports.enroll = function (item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function (item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function (item) {
  clearTimeout(item._idleTimeoutId);
  var msecs = item._idleTimeout;

  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout) item._onTimeout();
    }, msecs);
  }
}; // setimmediate attaches itself to the global object


__webpack_require__(404); // On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.


exports.setImmediate = typeof self !== "undefined" && self.setImmediate || typeof global !== "undefined" && global.setImmediate || void 0 && (void 0).setImmediate;
exports.clearImmediate = typeof self !== "undefined" && self.clearImmediate || typeof global !== "undefined" && global.clearImmediate || void 0 && (void 0).clearImmediate;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(8)))

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Advanced Encryption Standard (AES) implementation.
 *
 * This implementation is based on the public domain library 'jscrypto' which
 * was written by:
 *
 * Emily Stark (estark@stanford.edu)
 * Mike Hamburg (mhamburg@stanford.edu)
 * Dan Boneh (dabo@cs.stanford.edu)
 *
 * Parts of this code are based on the OpenSSL implementation of AES:
 * http://www.openssl.org
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
 */
var forge = __webpack_require__(7);

__webpack_require__(199);

__webpack_require__(200);

__webpack_require__(10);
/* AES API */


module.exports = forge.aes = forge.aes || {};
/**
 * Deprecated. Instead, use:
 *
 * var cipher = forge.cipher.createCipher('AES-<mode>', key);
 * cipher.start({iv: iv});
 *
 * Creates an AES cipher object to encrypt data using the given symmetric key.
 * The output will be stored in the 'output' member of the returned cipher.
 *
 * The key and iv may be given as a string of bytes, an array of bytes,
 * a byte buffer, or an array of 32-bit words.
 *
 * @param key the symmetric key to use.
 * @param iv the initialization vector to use.
 * @param output the buffer to write to, null to create one.
 * @param mode the cipher mode to use (default: 'CBC').
 *
 * @return the cipher.
 */

forge.aes.startEncrypting = function (key, iv, output, mode) {
  var cipher = _createCipher({
    key: key,
    output: output,
    decrypt: false,
    mode: mode
  });

  cipher.start(iv);
  return cipher;
};
/**
 * Deprecated. Instead, use:
 *
 * var cipher = forge.cipher.createCipher('AES-<mode>', key);
 *
 * Creates an AES cipher object to encrypt data using the given symmetric key.
 *
 * The key may be given as a string of bytes, an array of bytes, a
 * byte buffer, or an array of 32-bit words.
 *
 * @param key the symmetric key to use.
 * @param mode the cipher mode to use (default: 'CBC').
 *
 * @return the cipher.
 */


forge.aes.createEncryptionCipher = function (key, mode) {
  return _createCipher({
    key: key,
    output: null,
    decrypt: false,
    mode: mode
  });
};
/**
 * Deprecated. Instead, use:
 *
 * var decipher = forge.cipher.createDecipher('AES-<mode>', key);
 * decipher.start({iv: iv});
 *
 * Creates an AES cipher object to decrypt data using the given symmetric key.
 * The output will be stored in the 'output' member of the returned cipher.
 *
 * The key and iv may be given as a string of bytes, an array of bytes,
 * a byte buffer, or an array of 32-bit words.
 *
 * @param key the symmetric key to use.
 * @param iv the initialization vector to use.
 * @param output the buffer to write to, null to create one.
 * @param mode the cipher mode to use (default: 'CBC').
 *
 * @return the cipher.
 */


forge.aes.startDecrypting = function (key, iv, output, mode) {
  var cipher = _createCipher({
    key: key,
    output: output,
    decrypt: true,
    mode: mode
  });

  cipher.start(iv);
  return cipher;
};
/**
 * Deprecated. Instead, use:
 *
 * var decipher = forge.cipher.createDecipher('AES-<mode>', key);
 *
 * Creates an AES cipher object to decrypt data using the given symmetric key.
 *
 * The key may be given as a string of bytes, an array of bytes, a
 * byte buffer, or an array of 32-bit words.
 *
 * @param key the symmetric key to use.
 * @param mode the cipher mode to use (default: 'CBC').
 *
 * @return the cipher.
 */


forge.aes.createDecryptionCipher = function (key, mode) {
  return _createCipher({
    key: key,
    output: null,
    decrypt: true,
    mode: mode
  });
};
/**
 * Creates a new AES cipher algorithm object.
 *
 * @param name the name of the algorithm.
 * @param mode the mode factory function.
 *
 * @return the AES algorithm object.
 */


forge.aes.Algorithm = function (name, mode) {
  if (!init) {
    initialize();
  }

  var self = this;
  self.name = name;
  self.mode = new mode({
    blockSize: 16,
    cipher: {
      encrypt: function encrypt(inBlock, outBlock) {
        return _updateBlock(self._w, inBlock, outBlock, false);
      },
      decrypt: function decrypt(inBlock, outBlock) {
        return _updateBlock(self._w, inBlock, outBlock, true);
      }
    }
  });
  self._init = false;
};
/**
 * Initializes this AES algorithm by expanding its key.
 *
 * @param options the options to use.
 *          key the key to use with this algorithm.
 *          decrypt true if the algorithm should be initialized for decryption,
 *            false for encryption.
 */


forge.aes.Algorithm.prototype.initialize = function (options) {
  if (this._init) {
    return;
  }

  var key = options.key;
  var tmp;
  /* Note: The key may be a string of bytes, an array of bytes, a byte
    buffer, or an array of 32-bit integers. If the key is in bytes, then
    it must be 16, 24, or 32 bytes in length. If it is in 32-bit
    integers, it must be 4, 6, or 8 integers long. */

  if (typeof key === 'string' && (key.length === 16 || key.length === 24 || key.length === 32)) {
    // convert key string into byte buffer
    key = forge.util.createBuffer(key);
  } else if (forge.util.isArray(key) && (key.length === 16 || key.length === 24 || key.length === 32)) {
    // convert key integer array into byte buffer
    tmp = key;
    key = forge.util.createBuffer();

    for (var i = 0; i < tmp.length; ++i) {
      key.putByte(tmp[i]);
    }
  } // convert key byte buffer into 32-bit integer array


  if (!forge.util.isArray(key)) {
    tmp = key;
    key = []; // key lengths of 16, 24, 32 bytes allowed

    var len = tmp.length();

    if (len === 16 || len === 24 || len === 32) {
      len = len >>> 2;

      for (var i = 0; i < len; ++i) {
        key.push(tmp.getInt32());
      }
    }
  } // key must be an array of 32-bit integers by now


  if (!forge.util.isArray(key) || !(key.length === 4 || key.length === 6 || key.length === 8)) {
    throw new Error('Invalid key parameter.');
  } // encryption operation is always used for these modes


  var mode = this.mode.name;
  var encryptOp = ['CFB', 'OFB', 'CTR', 'GCM'].indexOf(mode) !== -1; // do key expansion

  this._w = _expandKey(key, options.decrypt && !encryptOp);
  this._init = true;
};
/**
 * Expands a key. Typically only used for testing.
 *
 * @param key the symmetric key to expand, as an array of 32-bit words.
 * @param decrypt true to expand for decryption, false for encryption.
 *
 * @return the expanded key.
 */


forge.aes._expandKey = function (key, decrypt) {
  if (!init) {
    initialize();
  }

  return _expandKey(key, decrypt);
};
/**
 * Updates a single block. Typically only used for testing.
 *
 * @param w the expanded key to use.
 * @param input an array of block-size 32-bit words.
 * @param output an array of block-size 32-bit words.
 * @param decrypt true to decrypt, false to encrypt.
 */


forge.aes._updateBlock = _updateBlock;
/** Register AES algorithms **/

registerAlgorithm('AES-ECB', forge.cipher.modes.ecb);
registerAlgorithm('AES-CBC', forge.cipher.modes.cbc);
registerAlgorithm('AES-CFB', forge.cipher.modes.cfb);
registerAlgorithm('AES-OFB', forge.cipher.modes.ofb);
registerAlgorithm('AES-CTR', forge.cipher.modes.ctr);
registerAlgorithm('AES-GCM', forge.cipher.modes.gcm);

function registerAlgorithm(name, mode) {
  var factory = function factory() {
    return new forge.aes.Algorithm(name, mode);
  };

  forge.cipher.registerAlgorithm(name, factory);
}
/** AES implementation **/


var init = false; // not yet initialized

var Nb = 4; // number of words comprising the state (AES = 4)

var sbox; // non-linear substitution table used in key expansion

var isbox; // inversion of sbox

var rcon; // round constant word array

var mix; // mix-columns table

var imix; // inverse mix-columns table

/**
 * Performs initialization, ie: precomputes tables to optimize for speed.
 *
 * One way to understand how AES works is to imagine that 'addition' and
 * 'multiplication' are interfaces that require certain mathematical
 * properties to hold true (ie: they are associative) but they might have
 * different implementations and produce different kinds of results ...
 * provided that their mathematical properties remain true. AES defines
 * its own methods of addition and multiplication but keeps some important
 * properties the same, ie: associativity and distributivity. The
 * explanation below tries to shed some light on how AES defines addition
 * and multiplication of bytes and 32-bit words in order to perform its
 * encryption and decryption algorithms.
 *
 * The basics:
 *
 * The AES algorithm views bytes as binary representations of polynomials
 * that have either 1 or 0 as the coefficients. It defines the addition
 * or subtraction of two bytes as the XOR operation. It also defines the
 * multiplication of two bytes as a finite field referred to as GF(2^8)
 * (Note: 'GF' means "Galois Field" which is a field that contains a finite
 * number of elements so GF(2^8) has 256 elements).
 *
 * This means that any two bytes can be represented as binary polynomials;
 * when they multiplied together and modularly reduced by an irreducible
 * polynomial of the 8th degree, the results are the field GF(2^8). The
 * specific irreducible polynomial that AES uses in hexadecimal is 0x11b.
 * This multiplication is associative with 0x01 as the identity:
 *
 * (b * 0x01 = GF(b, 0x01) = b).
 *
 * The operation GF(b, 0x02) can be performed at the byte level by left
 * shifting b once and then XOR'ing it (to perform the modular reduction)
 * with 0x11b if b is >= 128. Repeated application of the multiplication
 * of 0x02 can be used to implement the multiplication of any two bytes.
 *
 * For instance, multiplying 0x57 and 0x13, denoted as GF(0x57, 0x13), can
 * be performed by factoring 0x13 into 0x01, 0x02, and 0x10. Then these
 * factors can each be multiplied by 0x57 and then added together. To do
 * the multiplication, values for 0x57 multiplied by each of these 3 factors
 * can be precomputed and stored in a table. To add them, the values from
 * the table are XOR'd together.
 *
 * AES also defines addition and multiplication of words, that is 4-byte
 * numbers represented as polynomials of 3 degrees where the coefficients
 * are the values of the bytes.
 *
 * The word [a0, a1, a2, a3] is a polynomial a3x^3 + a2x^2 + a1x + a0.
 *
 * Addition is performed by XOR'ing like powers of x. Multiplication
 * is performed in two steps, the first is an algebriac expansion as
 * you would do normally (where addition is XOR). But the result is
 * a polynomial larger than 3 degrees and thus it cannot fit in a word. So
 * next the result is modularly reduced by an AES-specific polynomial of
 * degree 4 which will always produce a polynomial of less than 4 degrees
 * such that it will fit in a word. In AES, this polynomial is x^4 + 1.
 *
 * The modular product of two polynomials 'a' and 'b' is thus:
 *
 * d(x) = d3x^3 + d2x^2 + d1x + d0
 * with
 * d0 = GF(a0, b0) ^ GF(a3, b1) ^ GF(a2, b2) ^ GF(a1, b3)
 * d1 = GF(a1, b0) ^ GF(a0, b1) ^ GF(a3, b2) ^ GF(a2, b3)
 * d2 = GF(a2, b0) ^ GF(a1, b1) ^ GF(a0, b2) ^ GF(a3, b3)
 * d3 = GF(a3, b0) ^ GF(a2, b1) ^ GF(a1, b2) ^ GF(a0, b3)
 *
 * As a matrix:
 *
 * [d0] = [a0 a3 a2 a1][b0]
 * [d1]   [a1 a0 a3 a2][b1]
 * [d2]   [a2 a1 a0 a3][b2]
 * [d3]   [a3 a2 a1 a0][b3]
 *
 * Special polynomials defined by AES (0x02 == {02}):
 * a(x)    = {03}x^3 + {01}x^2 + {01}x + {02}
 * a^-1(x) = {0b}x^3 + {0d}x^2 + {09}x + {0e}.
 *
 * These polynomials are used in the MixColumns() and InverseMixColumns()
 * operations, respectively, to cause each element in the state to affect
 * the output (referred to as diffusing).
 *
 * RotWord() uses: a0 = a1 = a2 = {00} and a3 = {01}, which is the
 * polynomial x3.
 *
 * The ShiftRows() method modifies the last 3 rows in the state (where
 * the state is 4 words with 4 bytes per word) by shifting bytes cyclically.
 * The 1st byte in the second row is moved to the end of the row. The 1st
 * and 2nd bytes in the third row are moved to the end of the row. The 1st,
 * 2nd, and 3rd bytes are moved in the fourth row.
 *
 * More details on how AES arithmetic works:
 *
 * In the polynomial representation of binary numbers, XOR performs addition
 * and subtraction and multiplication in GF(2^8) denoted as GF(a, b)
 * corresponds with the multiplication of polynomials modulo an irreducible
 * polynomial of degree 8. In other words, for AES, GF(a, b) will multiply
 * polynomial 'a' with polynomial 'b' and then do a modular reduction by
 * an AES-specific irreducible polynomial of degree 8.
 *
 * A polynomial is irreducible if its only divisors are one and itself. For
 * the AES algorithm, this irreducible polynomial is:
 *
 * m(x) = x^8 + x^4 + x^3 + x + 1,
 *
 * or {01}{1b} in hexadecimal notation, where each coefficient is a bit:
 * 100011011 = 283 = 0x11b.
 *
 * For example, GF(0x57, 0x83) = 0xc1 because
 *
 * 0x57 = 87  = 01010111 = x^6 + x^4 + x^2 + x + 1
 * 0x85 = 131 = 10000101 = x^7 + x + 1
 *
 * (x^6 + x^4 + x^2 + x + 1) * (x^7 + x + 1)
 * =  x^13 + x^11 + x^9 + x^8 + x^7 +
 *    x^7 + x^5 + x^3 + x^2 + x +
 *    x^6 + x^4 + x^2 + x + 1
 * =  x^13 + x^11 + x^9 + x^8 + x^6 + x^5 + x^4 + x^3 + 1 = y
 *    y modulo (x^8 + x^4 + x^3 + x + 1)
 * =  x^7 + x^6 + 1.
 *
 * The modular reduction by m(x) guarantees the result will be a binary
 * polynomial of less than degree 8, so that it can fit in a byte.
 *
 * The operation to multiply a binary polynomial b with x (the polynomial
 * x in binary representation is 00000010) is:
 *
 * b_7x^8 + b_6x^7 + b_5x^6 + b_4x^5 + b_3x^4 + b_2x^3 + b_1x^2 + b_0x^1
 *
 * To get GF(b, x) we must reduce that by m(x). If b_7 is 0 (that is the
 * most significant bit is 0 in b) then the result is already reduced. If
 * it is 1, then we can reduce it by subtracting m(x) via an XOR.
 *
 * It follows that multiplication by x (00000010 or 0x02) can be implemented
 * by performing a left shift followed by a conditional bitwise XOR with
 * 0x1b. This operation on bytes is denoted by xtime(). Multiplication by
 * higher powers of x can be implemented by repeated application of xtime().
 *
 * By adding intermediate results, multiplication by any constant can be
 * implemented. For instance:
 *
 * GF(0x57, 0x13) = 0xfe because:
 *
 * xtime(b) = (b & 128) ? (b << 1 ^ 0x11b) : (b << 1)
 *
 * Note: We XOR with 0x11b instead of 0x1b because in javascript our
 * datatype for b can be larger than 1 byte, so a left shift will not
 * automatically eliminate bits that overflow a byte ... by XOR'ing the
 * overflow bit with 1 (the extra one from 0x11b) we zero it out.
 *
 * GF(0x57, 0x02) = xtime(0x57) = 0xae
 * GF(0x57, 0x04) = xtime(0xae) = 0x47
 * GF(0x57, 0x08) = xtime(0x47) = 0x8e
 * GF(0x57, 0x10) = xtime(0x8e) = 0x07
 *
 * GF(0x57, 0x13) = GF(0x57, (0x01 ^ 0x02 ^ 0x10))
 *
 * And by the distributive property (since XOR is addition and GF() is
 * multiplication):
 *
 * = GF(0x57, 0x01) ^ GF(0x57, 0x02) ^ GF(0x57, 0x10)
 * = 0x57 ^ 0xae ^ 0x07
 * = 0xfe.
 */

function initialize() {
  init = true;
  /* Populate the Rcon table. These are the values given by
    [x^(i-1),{00},{00},{00}] where x^(i-1) are powers of x (and x = 0x02)
    in the field of GF(2^8), where i starts at 1.
     rcon[0] = [0x00, 0x00, 0x00, 0x00]
    rcon[1] = [0x01, 0x00, 0x00, 0x00] 2^(1-1) = 2^0 = 1
    rcon[2] = [0x02, 0x00, 0x00, 0x00] 2^(2-1) = 2^1 = 2
    ...
    rcon[9]  = [0x1B, 0x00, 0x00, 0x00] 2^(9-1)  = 2^8 = 0x1B
    rcon[10] = [0x36, 0x00, 0x00, 0x00] 2^(10-1) = 2^9 = 0x36
     We only store the first byte because it is the only one used.
  */

  rcon = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36]; // compute xtime table which maps i onto GF(i, 0x02)

  var xtime = new Array(256);

  for (var i = 0; i < 128; ++i) {
    xtime[i] = i << 1;
    xtime[i + 128] = i + 128 << 1 ^ 0x11B;
  } // compute all other tables


  sbox = new Array(256);
  isbox = new Array(256);
  mix = new Array(4);
  imix = new Array(4);

  for (var i = 0; i < 4; ++i) {
    mix[i] = new Array(256);
    imix[i] = new Array(256);
  }

  var e = 0,
      ei = 0,
      e2,
      e4,
      e8,
      sx,
      sx2,
      me,
      ime;

  for (var i = 0; i < 256; ++i) {
    /* We need to generate the SubBytes() sbox and isbox tables so that
      we can perform byte substitutions. This requires us to traverse
      all of the elements in GF, find their multiplicative inverses,
      and apply to each the following affine transformation:
       bi' = bi ^ b(i + 4) mod 8 ^ b(i + 5) mod 8 ^ b(i + 6) mod 8 ^
            b(i + 7) mod 8 ^ ci
      for 0 <= i < 8, where bi is the ith bit of the byte, and ci is the
      ith bit of a byte c with the value {63} or {01100011}.
       It is possible to traverse every possible value in a Galois field
      using what is referred to as a 'generator'. There are many
      generators (128 out of 256): 3,5,6,9,11,82 to name a few. To fully
      traverse GF we iterate 255 times, multiplying by our generator
      each time.
       On each iteration we can determine the multiplicative inverse for
      the current element.
       Suppose there is an element in GF 'e'. For a given generator 'g',
      e = g^x. The multiplicative inverse of e is g^(255 - x). It turns
      out that if use the inverse of a generator as another generator
      it will produce all of the corresponding multiplicative inverses
      at the same time. For this reason, we choose 5 as our inverse
      generator because it only requires 2 multiplies and 1 add and its
      inverse, 82, requires relatively few operations as well.
       In order to apply the affine transformation, the multiplicative
      inverse 'ei' of 'e' can be repeatedly XOR'd (4 times) with a
      bit-cycling of 'ei'. To do this 'ei' is first stored in 's' and
      'x'. Then 's' is left shifted and the high bit of 's' is made the
      low bit. The resulting value is stored in 's'. Then 'x' is XOR'd
      with 's' and stored in 'x'. On each subsequent iteration the same
      operation is performed. When 4 iterations are complete, 'x' is
      XOR'd with 'c' (0x63) and the transformed value is stored in 'x'.
      For example:
       s = 01000001
      x = 01000001
       iteration 1: s = 10000010, x ^= s
      iteration 2: s = 00000101, x ^= s
      iteration 3: s = 00001010, x ^= s
      iteration 4: s = 00010100, x ^= s
      x ^= 0x63
       This can be done with a loop where s = (s << 1) | (s >> 7). However,
      it can also be done by using a single 16-bit (in this case 32-bit)
      number 'sx'. Since XOR is an associative operation, we can set 'sx'
      to 'ei' and then XOR it with 'sx' left-shifted 1,2,3, and 4 times.
      The most significant bits will flow into the high 8 bit positions
      and be correctly XOR'd with one another. All that remains will be
      to cycle the high 8 bits by XOR'ing them all with the lower 8 bits
      afterwards.
       At the same time we're populating sbox and isbox we can precompute
      the multiplication we'll need to do to do MixColumns() later.
    */
    // apply affine transformation
    sx = ei ^ ei << 1 ^ ei << 2 ^ ei << 3 ^ ei << 4;
    sx = sx >> 8 ^ sx & 255 ^ 0x63; // update tables

    sbox[e] = sx;
    isbox[sx] = e;
    /* Mixing columns is done using matrix multiplication. The columns
      that are to be mixed are each a single word in the current state.
      The state has Nb columns (4 columns). Therefore each column is a
      4 byte word. So to mix the columns in a single column 'c' where
      its rows are r0, r1, r2, and r3, we use the following matrix
      multiplication:
       [2 3 1 1]*[r0,c]=[r'0,c]
      [1 2 3 1] [r1,c] [r'1,c]
      [1 1 2 3] [r2,c] [r'2,c]
      [3 1 1 2] [r3,c] [r'3,c]
       r0, r1, r2, and r3 are each 1 byte of one of the words in the
      state (a column). To do matrix multiplication for each mixed
      column c' we multiply the corresponding row from the left matrix
      with the corresponding column from the right matrix. In total, we
      get 4 equations:
       r0,c' = 2*r0,c + 3*r1,c + 1*r2,c + 1*r3,c
      r1,c' = 1*r0,c + 2*r1,c + 3*r2,c + 1*r3,c
      r2,c' = 1*r0,c + 1*r1,c + 2*r2,c + 3*r3,c
      r3,c' = 3*r0,c + 1*r1,c + 1*r2,c + 2*r3,c
       As usual, the multiplication is as previously defined and the
      addition is XOR. In order to optimize mixing columns we can store
      the multiplication results in tables. If you think of the whole
      column as a word (it might help to visualize by mentally rotating
      the equations above by counterclockwise 90 degrees) then you can
      see that it would be useful to map the multiplications performed on
      each byte (r0, r1, r2, r3) onto a word as well. For instance, we
      could map 2*r0,1*r0,1*r0,3*r0 onto a word by storing 2*r0 in the
      highest 8 bits and 3*r0 in the lowest 8 bits (with the other two
      respectively in the middle). This means that a table can be
      constructed that uses r0 as an index to the word. We can do the
      same with r1, r2, and r3, creating a total of 4 tables.
       To construct a full c', we can just look up each byte of c in
      their respective tables and XOR the results together.
       Also, to build each table we only have to calculate the word
      for 2,1,1,3 for every byte ... which we can do on each iteration
      of this loop since we will iterate over every byte. After we have
      calculated 2,1,1,3 we can get the results for the other tables
      by cycling the byte at the end to the beginning. For instance
      we can take the result of table 2,1,1,3 and produce table 3,2,1,1
      by moving the right most byte to the left most position just like
      how you can imagine the 3 moved out of 2,1,1,3 and to the front
      to produce 3,2,1,1.
       There is another optimization in that the same multiples of
      the current element we need in order to advance our generator
      to the next iteration can be reused in performing the 2,1,1,3
      calculation. We also calculate the inverse mix column tables,
      with e,9,d,b being the inverse of 2,1,1,3.
       When we're done, and we need to actually mix columns, the first
      byte of each state word should be put through mix[0] (2,1,1,3),
      the second through mix[1] (3,2,1,1) and so forth. Then they should
      be XOR'd together to produce the fully mixed column.
    */
    // calculate mix and imix table values

    sx2 = xtime[sx];
    e2 = xtime[e];
    e4 = xtime[e2];
    e8 = xtime[e4];
    me = sx2 << 24 ^ // 2
    sx << 16 ^ // 1
    sx << 8 ^ ( // 1
    sx ^ sx2); // 3

    ime = (e2 ^ e4 ^ e8) << 24 ^ // E (14)
    (e ^ e8) << 16 ^ // 9
    (e ^ e4 ^ e8) << 8 ^ ( // D (13)
    e ^ e2 ^ e8); // B (11)
    // produce each of the mix tables by rotating the 2,1,1,3 value

    for (var n = 0; n < 4; ++n) {
      mix[n][e] = me;
      imix[n][sx] = ime; // cycle the right most byte to the left most position
      // ie: 2,1,1,3 becomes 3,2,1,1

      me = me << 24 | me >>> 8;
      ime = ime << 24 | ime >>> 8;
    } // get next element and inverse


    if (e === 0) {
      // 1 is the inverse of 1
      e = ei = 1;
    } else {
      // e = 2e + 2*2*2*(10e)) = multiply e by 82 (chosen generator)
      // ei = ei + 2*2*ei = multiply ei by 5 (inverse generator)
      e = e2 ^ xtime[xtime[xtime[e2 ^ e8]]];
      ei ^= xtime[xtime[ei]];
    }
  }
}
/**
 * Generates a key schedule using the AES key expansion algorithm.
 *
 * The AES algorithm takes the Cipher Key, K, and performs a Key Expansion
 * routine to generate a key schedule. The Key Expansion generates a total
 * of Nb*(Nr + 1) words: the algorithm requires an initial set of Nb words,
 * and each of the Nr rounds requires Nb words of key data. The resulting
 * key schedule consists of a linear array of 4-byte words, denoted [wi ],
 * with i in the range 0 <= i < Nb(Nr + 1).
 *
 * KeyExpansion(byte key[4*Nk], word w[Nb*(Nr+1)], Nk)
 * AES-128 (Nb=4, Nk=4, Nr=10)
 * AES-192 (Nb=4, Nk=6, Nr=12)
 * AES-256 (Nb=4, Nk=8, Nr=14)
 * Note: Nr=Nk+6.
 *
 * Nb is the number of columns (32-bit words) comprising the State (or
 * number of bytes in a block). For AES, Nb=4.
 *
 * @param key the key to schedule (as an array of 32-bit words).
 * @param decrypt true to modify the key schedule to decrypt, false not to.
 *
 * @return the generated key schedule.
 */


function _expandKey(key, decrypt) {
  // copy the key's words to initialize the key schedule
  var w = key.slice(0);
  /* RotWord() will rotate a word, moving the first byte to the last
    byte's position (shifting the other bytes left).
     We will be getting the value of Rcon at i / Nk. 'i' will iterate
    from Nk to (Nb * Nr+1). Nk = 4 (4 byte key), Nb = 4 (4 words in
    a block), Nr = Nk + 6 (10). Therefore 'i' will iterate from
    4 to 44 (exclusive). Each time we iterate 4 times, i / Nk will
    increase by 1. We use a counter iNk to keep track of this.
   */
  // go through the rounds expanding the key

  var temp,
      iNk = 1;
  var Nk = w.length;
  var Nr1 = Nk + 6 + 1;
  var end = Nb * Nr1;

  for (var i = Nk; i < end; ++i) {
    temp = w[i - 1];

    if (i % Nk === 0) {
      // temp = SubWord(RotWord(temp)) ^ Rcon[i / Nk]
      temp = sbox[temp >>> 16 & 255] << 24 ^ sbox[temp >>> 8 & 255] << 16 ^ sbox[temp & 255] << 8 ^ sbox[temp >>> 24] ^ rcon[iNk] << 24;
      iNk++;
    } else if (Nk > 6 && i % Nk === 4) {
      // temp = SubWord(temp)
      temp = sbox[temp >>> 24] << 24 ^ sbox[temp >>> 16 & 255] << 16 ^ sbox[temp >>> 8 & 255] << 8 ^ sbox[temp & 255];
    }

    w[i] = w[i - Nk] ^ temp;
  }
  /* When we are updating a cipher block we always use the code path for
     encryption whether we are decrypting or not (to shorten code and
     simplify the generation of look up tables). However, because there
     are differences in the decryption algorithm, other than just swapping
     in different look up tables, we must transform our key schedule to
     account for these changes:
      1. The decryption algorithm gets its key rounds in reverse order.
     2. The decryption algorithm adds the round key before mixing columns
       instead of afterwards.
      We don't need to modify our key schedule to handle the first case,
     we can just traverse the key schedule in reverse order when decrypting.
      The second case requires a little work.
      The tables we built for performing rounds will take an input and then
     perform SubBytes() and MixColumns() or, for the decrypt version,
     InvSubBytes() and InvMixColumns(). But the decrypt algorithm requires
     us to AddRoundKey() before InvMixColumns(). This means we'll need to
     apply some transformations to the round key to inverse-mix its columns
     so they'll be correct for moving AddRoundKey() to after the state has
     had its columns inverse-mixed.
      To inverse-mix the columns of the state when we're decrypting we use a
     lookup table that will apply InvSubBytes() and InvMixColumns() at the
     same time. However, the round key's bytes are not inverse-substituted
     in the decryption algorithm. To get around this problem, we can first
     substitute the bytes in the round key so that when we apply the
     transformation via the InvSubBytes()+InvMixColumns() table, it will
     undo our substitution leaving us with the original value that we
     want -- and then inverse-mix that value.
      This change will correctly alter our key schedule so that we can XOR
     each round key with our already transformed decryption state. This
     allows us to use the same code path as the encryption algorithm.
      We make one more change to the decryption key. Since the decryption
     algorithm runs in reverse from the encryption algorithm, we reverse
     the order of the round keys to avoid having to iterate over the key
     schedule backwards when running the encryption algorithm later in
     decryption mode. In addition to reversing the order of the round keys,
     we also swap each round key's 2nd and 4th rows. See the comments
     section where rounds are performed for more details about why this is
     done. These changes are done inline with the other substitution
     described above.
  */


  if (decrypt) {
    var tmp;
    var m0 = imix[0];
    var m1 = imix[1];
    var m2 = imix[2];
    var m3 = imix[3];
    var wnew = w.slice(0);
    end = w.length;

    for (var i = 0, wi = end - Nb; i < end; i += Nb, wi -= Nb) {
      // do not sub the first or last round key (round keys are Nb
      // words) as no column mixing is performed before they are added,
      // but do change the key order
      if (i === 0 || i === end - Nb) {
        wnew[i] = w[wi];
        wnew[i + 1] = w[wi + 3];
        wnew[i + 2] = w[wi + 2];
        wnew[i + 3] = w[wi + 1];
      } else {
        // substitute each round key byte because the inverse-mix
        // table will inverse-substitute it (effectively cancel the
        // substitution because round key bytes aren't sub'd in
        // decryption mode) and swap indexes 3 and 1
        for (var n = 0; n < Nb; ++n) {
          tmp = w[wi + n];
          wnew[i + (3 & -n)] = m0[sbox[tmp >>> 24]] ^ m1[sbox[tmp >>> 16 & 255]] ^ m2[sbox[tmp >>> 8 & 255]] ^ m3[sbox[tmp & 255]];
        }
      }
    }

    w = wnew;
  }

  return w;
}
/**
 * Updates a single block (16 bytes) using AES. The update will either
 * encrypt or decrypt the block.
 *
 * @param w the key schedule.
 * @param input the input block (an array of 32-bit words).
 * @param output the updated output block.
 * @param decrypt true to decrypt the block, false to encrypt it.
 */


function _updateBlock(w, input, output, decrypt) {
  /*
  Cipher(byte in[4*Nb], byte out[4*Nb], word w[Nb*(Nr+1)])
  begin
    byte state[4,Nb]
    state = in
    AddRoundKey(state, w[0, Nb-1])
    for round = 1 step 1 to Nr-1
      SubBytes(state)
      ShiftRows(state)
      MixColumns(state)
      AddRoundKey(state, w[round*Nb, (round+1)*Nb-1])
    end for
    SubBytes(state)
    ShiftRows(state)
    AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])
    out = state
  end
   InvCipher(byte in[4*Nb], byte out[4*Nb], word w[Nb*(Nr+1)])
  begin
    byte state[4,Nb]
    state = in
    AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])
    for round = Nr-1 step -1 downto 1
      InvShiftRows(state)
      InvSubBytes(state)
      AddRoundKey(state, w[round*Nb, (round+1)*Nb-1])
      InvMixColumns(state)
    end for
    InvShiftRows(state)
    InvSubBytes(state)
    AddRoundKey(state, w[0, Nb-1])
    out = state
  end
  */
  // Encrypt: AddRoundKey(state, w[0, Nb-1])
  // Decrypt: AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])
  var Nr = w.length / 4 - 1;
  var m0, m1, m2, m3, sub;

  if (decrypt) {
    m0 = imix[0];
    m1 = imix[1];
    m2 = imix[2];
    m3 = imix[3];
    sub = isbox;
  } else {
    m0 = mix[0];
    m1 = mix[1];
    m2 = mix[2];
    m3 = mix[3];
    sub = sbox;
  }

  var a, b, c, d, a2, b2, c2;
  a = input[0] ^ w[0];
  b = input[decrypt ? 3 : 1] ^ w[1];
  c = input[2] ^ w[2];
  d = input[decrypt ? 1 : 3] ^ w[3];
  var i = 3;
  /* In order to share code we follow the encryption algorithm when both
    encrypting and decrypting. To account for the changes required in the
    decryption algorithm, we use different lookup tables when decrypting
    and use a modified key schedule to account for the difference in the
    order of transformations applied when performing rounds. We also get
    key rounds in reverse order (relative to encryption). */

  for (var round = 1; round < Nr; ++round) {
    /* As described above, we'll be using table lookups to perform the
      column mixing. Each column is stored as a word in the state (the
      array 'input' has one column as a word at each index). In order to
      mix a column, we perform these transformations on each row in c,
      which is 1 byte in each word. The new column for c0 is c'0:
                m0      m1      m2      m3
      r0,c'0 = 2*r0,c0 + 3*r1,c0 + 1*r2,c0 + 1*r3,c0
      r1,c'0 = 1*r0,c0 + 2*r1,c0 + 3*r2,c0 + 1*r3,c0
      r2,c'0 = 1*r0,c0 + 1*r1,c0 + 2*r2,c0 + 3*r3,c0
      r3,c'0 = 3*r0,c0 + 1*r1,c0 + 1*r2,c0 + 2*r3,c0
       So using mix tables where c0 is a word with r0 being its upper
      8 bits and r3 being its lower 8 bits:
       m0[c0 >> 24] will yield this word: [2*r0,1*r0,1*r0,3*r0]
      ...
      m3[c0 & 255] will yield this word: [1*r3,1*r3,3*r3,2*r3]
       Therefore to mix the columns in each word in the state we
      do the following (& 255 omitted for brevity):
      c'0,r0 = m0[c0 >> 24] ^ m1[c1 >> 16] ^ m2[c2 >> 8] ^ m3[c3]
      c'0,r1 = m0[c0 >> 24] ^ m1[c1 >> 16] ^ m2[c2 >> 8] ^ m3[c3]
      c'0,r2 = m0[c0 >> 24] ^ m1[c1 >> 16] ^ m2[c2 >> 8] ^ m3[c3]
      c'0,r3 = m0[c0 >> 24] ^ m1[c1 >> 16] ^ m2[c2 >> 8] ^ m3[c3]
       However, before mixing, the algorithm requires us to perform
      ShiftRows(). The ShiftRows() transformation cyclically shifts the
      last 3 rows of the state over different offsets. The first row
      (r = 0) is not shifted.
       s'_r,c = s_r,(c + shift(r, Nb) mod Nb
      for 0 < r < 4 and 0 <= c < Nb and
      shift(1, 4) = 1
      shift(2, 4) = 2
      shift(3, 4) = 3.
       This causes the first byte in r = 1 to be moved to the end of
      the row, the first 2 bytes in r = 2 to be moved to the end of
      the row, the first 3 bytes in r = 3 to be moved to the end of
      the row:
       r1: [c0 c1 c2 c3] => [c1 c2 c3 c0]
      r2: [c0 c1 c2 c3]    [c2 c3 c0 c1]
      r3: [c0 c1 c2 c3]    [c3 c0 c1 c2]
       We can make these substitutions inline with our column mixing to
      generate an updated set of equations to produce each word in the
      state (note the columns have changed positions):
       c0 c1 c2 c3 => c0 c1 c2 c3
      c0 c1 c2 c3    c1 c2 c3 c0  (cycled 1 byte)
      c0 c1 c2 c3    c2 c3 c0 c1  (cycled 2 bytes)
      c0 c1 c2 c3    c3 c0 c1 c2  (cycled 3 bytes)
       Therefore:
       c'0 = 2*r0,c0 + 3*r1,c1 + 1*r2,c2 + 1*r3,c3
      c'0 = 1*r0,c0 + 2*r1,c1 + 3*r2,c2 + 1*r3,c3
      c'0 = 1*r0,c0 + 1*r1,c1 + 2*r2,c2 + 3*r3,c3
      c'0 = 3*r0,c0 + 1*r1,c1 + 1*r2,c2 + 2*r3,c3
       c'1 = 2*r0,c1 + 3*r1,c2 + 1*r2,c3 + 1*r3,c0
      c'1 = 1*r0,c1 + 2*r1,c2 + 3*r2,c3 + 1*r3,c0
      c'1 = 1*r0,c1 + 1*r1,c2 + 2*r2,c3 + 3*r3,c0
      c'1 = 3*r0,c1 + 1*r1,c2 + 1*r2,c3 + 2*r3,c0
       ... and so forth for c'2 and c'3. The important distinction is
      that the columns are cycling, with c0 being used with the m0
      map when calculating c0, but c1 being used with the m0 map when
      calculating c1 ... and so forth.
       When performing the inverse we transform the mirror image and
      skip the bottom row, instead of the top one, and move upwards:
       c3 c2 c1 c0 => c0 c3 c2 c1  (cycled 3 bytes) *same as encryption
      c3 c2 c1 c0    c1 c0 c3 c2  (cycled 2 bytes)
      c3 c2 c1 c0    c2 c1 c0 c3  (cycled 1 byte)  *same as encryption
      c3 c2 c1 c0    c3 c2 c1 c0
       If you compare the resulting matrices for ShiftRows()+MixColumns()
      and for InvShiftRows()+InvMixColumns() the 2nd and 4th columns are
      different (in encrypt mode vs. decrypt mode). So in order to use
      the same code to handle both encryption and decryption, we will
      need to do some mapping.
       If in encryption mode we let a=c0, b=c1, c=c2, d=c3, and r<N> be
      a row number in the state, then the resulting matrix in encryption
      mode for applying the above transformations would be:
       r1: a b c d
      r2: b c d a
      r3: c d a b
      r4: d a b c
       If we did the same in decryption mode we would get:
       r1: a d c b
      r2: b a d c
      r3: c b a d
      r4: d c b a
       If instead we swap d and b (set b=c3 and d=c1), then we get:
       r1: a b c d
      r2: d a b c
      r3: c d a b
      r4: b c d a
       Now the 1st and 3rd rows are the same as the encryption matrix. All
      we need to do then to make the mapping exactly the same is to swap
      the 2nd and 4th rows when in decryption mode. To do this without
      having to do it on each iteration, we swapped the 2nd and 4th rows
      in the decryption key schedule. We also have to do the swap above
      when we first pull in the input and when we set the final output. */
    a2 = m0[a >>> 24] ^ m1[b >>> 16 & 255] ^ m2[c >>> 8 & 255] ^ m3[d & 255] ^ w[++i];
    b2 = m0[b >>> 24] ^ m1[c >>> 16 & 255] ^ m2[d >>> 8 & 255] ^ m3[a & 255] ^ w[++i];
    c2 = m0[c >>> 24] ^ m1[d >>> 16 & 255] ^ m2[a >>> 8 & 255] ^ m3[b & 255] ^ w[++i];
    d = m0[d >>> 24] ^ m1[a >>> 16 & 255] ^ m2[b >>> 8 & 255] ^ m3[c & 255] ^ w[++i];
    a = a2;
    b = b2;
    c = c2;
  }
  /*
    Encrypt:
    SubBytes(state)
    ShiftRows(state)
    AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])
     Decrypt:
    InvShiftRows(state)
    InvSubBytes(state)
    AddRoundKey(state, w[0, Nb-1])
   */
  // Note: rows are shifted inline


  output[0] = sub[a >>> 24] << 24 ^ sub[b >>> 16 & 255] << 16 ^ sub[c >>> 8 & 255] << 8 ^ sub[d & 255] ^ w[++i];
  output[decrypt ? 3 : 1] = sub[b >>> 24] << 24 ^ sub[c >>> 16 & 255] << 16 ^ sub[d >>> 8 & 255] << 8 ^ sub[a & 255] ^ w[++i];
  output[2] = sub[c >>> 24] << 24 ^ sub[d >>> 16 & 255] << 16 ^ sub[a >>> 8 & 255] << 8 ^ sub[b & 255] ^ w[++i];
  output[decrypt ? 1 : 3] = sub[d >>> 24] << 24 ^ sub[a >>> 16 & 255] << 16 ^ sub[b >>> 8 & 255] << 8 ^ sub[c & 255] ^ w[++i];
}
/**
 * Deprecated. Instead, use:
 *
 * forge.cipher.createCipher('AES-<mode>', key);
 * forge.cipher.createDecipher('AES-<mode>', key);
 *
 * Creates a deprecated AES cipher object. This object's mode will default to
 * CBC (cipher-block-chaining).
 *
 * The key and iv may be given as a string of bytes, an array of bytes, a
 * byte buffer, or an array of 32-bit words.
 *
 * @param options the options to use.
 *          key the symmetric key to use.
 *          output the buffer to write to.
 *          decrypt true for decryption, false for encryption.
 *          mode the cipher mode to use (default: 'CBC').
 *
 * @return the cipher.
 */


function _createCipher(options) {
  options = options || {};
  var mode = (options.mode || 'CBC').toUpperCase();
  var algorithm = 'AES-' + mode;
  var cipher;

  if (options.decrypt) {
    cipher = forge.cipher.createDecipher(algorithm, options.key);
  } else {
    cipher = forge.cipher.createCipher(algorithm, options.key);
  } // backwards compatible start API


  var start = cipher.start;

  cipher.start = function (iv, options) {
    // backwards compatibility: support second arg as output buffer
    var output = null;

    if (options instanceof forge.util.ByteBuffer) {
      output = options;
      options = {};
    }

    options = options || {};
    options.output = output;
    options.iv = iv;
    start.call(cipher, options);
  };

  return cipher;
}

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Javascript implementation of basic PEM (Privacy Enhanced Mail) algorithms.
 *
 * See: RFC 1421.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2013-2014 Digital Bazaar, Inc.
 *
 * A Forge PEM object has the following fields:
 *
 * type: identifies the type of message (eg: "RSA PRIVATE KEY").
 *
 * procType: identifies the type of processing performed on the message,
 *   it has two subfields: version and type, eg: 4,ENCRYPTED.
 *
 * contentDomain: identifies the type of content in the message, typically
 *   only uses the value: "RFC822".
 *
 * dekInfo: identifies the message encryption algorithm and mode and includes
 *   any parameters for the algorithm, it has two subfields: algorithm and
 *   parameters, eg: DES-CBC,F8143EDE5960C597.
 *
 * headers: contains all other PEM encapsulated headers -- where order is
 *   significant (for pairing data like recipient ID + key info).
 *
 * body: the binary-encoded body.
 */
var forge = __webpack_require__(7);

__webpack_require__(10); // shortcut for pem API


var pem = module.exports = forge.pem = forge.pem || {};
/**
 * Encodes (serializes) the given PEM object.
 *
 * @param msg the PEM message object to encode.
 * @param options the options to use:
 *          maxline the maximum characters per line for the body, (default: 64).
 *
 * @return the PEM-formatted string.
 */

pem.encode = function (msg, options) {
  options = options || {};
  var rval = '-----BEGIN ' + msg.type + '-----\r\n'; // encode special headers

  var header;

  if (msg.procType) {
    header = {
      name: 'Proc-Type',
      values: [String(msg.procType.version), msg.procType.type]
    };
    rval += foldHeader(header);
  }

  if (msg.contentDomain) {
    header = {
      name: 'Content-Domain',
      values: [msg.contentDomain]
    };
    rval += foldHeader(header);
  }

  if (msg.dekInfo) {
    header = {
      name: 'DEK-Info',
      values: [msg.dekInfo.algorithm]
    };

    if (msg.dekInfo.parameters) {
      header.values.push(msg.dekInfo.parameters);
    }

    rval += foldHeader(header);
  }

  if (msg.headers) {
    // encode all other headers
    for (var i = 0; i < msg.headers.length; ++i) {
      rval += foldHeader(msg.headers[i]);
    }
  } // terminate header


  if (msg.procType) {
    rval += '\r\n';
  } // add body


  rval += forge.util.encode64(msg.body, options.maxline || 64) + '\r\n';
  rval += '-----END ' + msg.type + '-----\r\n';
  return rval;
};
/**
 * Decodes (deserializes) all PEM messages found in the given string.
 *
 * @param str the PEM-formatted string to decode.
 *
 * @return the PEM message objects in an array.
 */


pem.decode = function (str) {
  var rval = []; // split string into PEM messages (be lenient w/EOF on BEGIN line)

  var rMessage = /\s*-----BEGIN ([A-Z0-9- ]+)-----\r?\n?([\x21-\x7e\s]+?(?:\r?\n\r?\n))?([:A-Za-z0-9+\/=\s]+?)-----END \1-----/g;
  var rHeader = /([\x21-\x7e]+):\s*([\x21-\x7e\s^:]+)/;
  var rCRLF = /\r?\n/;
  var match;

  while (true) {
    match = rMessage.exec(str);

    if (!match) {
      break;
    }

    var msg = {
      type: match[1],
      procType: null,
      contentDomain: null,
      dekInfo: null,
      headers: [],
      body: forge.util.decode64(match[3])
    };
    rval.push(msg); // no headers

    if (!match[2]) {
      continue;
    } // parse headers


    var lines = match[2].split(rCRLF);
    var li = 0;

    while (match && li < lines.length) {
      // get line, trim any rhs whitespace
      var line = lines[li].replace(/\s+$/, ''); // RFC2822 unfold any following folded lines

      for (var nl = li + 1; nl < lines.length; ++nl) {
        var next = lines[nl];

        if (!/\s/.test(next[0])) {
          break;
        }

        line += next;
        li = nl;
      } // parse header


      match = line.match(rHeader);

      if (match) {
        var header = {
          name: match[1],
          values: []
        };
        var values = match[2].split(',');

        for (var vi = 0; vi < values.length; ++vi) {
          header.values.push(ltrim(values[vi]));
        } // Proc-Type must be the first header


        if (!msg.procType) {
          if (header.name !== 'Proc-Type') {
            throw new Error('Invalid PEM formatted message. The first ' + 'encapsulated header must be "Proc-Type".');
          } else if (header.values.length !== 2) {
            throw new Error('Invalid PEM formatted message. The "Proc-Type" ' + 'header must have two subfields.');
          }

          msg.procType = {
            version: values[0],
            type: values[1]
          };
        } else if (!msg.contentDomain && header.name === 'Content-Domain') {
          // special-case Content-Domain
          msg.contentDomain = values[0] || '';
        } else if (!msg.dekInfo && header.name === 'DEK-Info') {
          // special-case DEK-Info
          if (header.values.length === 0) {
            throw new Error('Invalid PEM formatted message. The "DEK-Info" ' + 'header must have at least one subfield.');
          }

          msg.dekInfo = {
            algorithm: values[0],
            parameters: values[1] || null
          };
        } else {
          msg.headers.push(header);
        }
      }

      ++li;
    }

    if (msg.procType === 'ENCRYPTED' && !msg.dekInfo) {
      throw new Error('Invalid PEM formatted message. The "DEK-Info" ' + 'header must be present if "Proc-Type" is "ENCRYPTED".');
    }
  }

  if (rval.length === 0) {
    throw new Error('Invalid PEM formatted message.');
  }

  return rval;
};

function foldHeader(header) {
  var rval = header.name + ': '; // ensure values with CRLF are folded

  var values = [];

  var insertSpace = function insertSpace(match, $1) {
    return ' ' + $1;
  };

  for (var i = 0; i < header.values.length; ++i) {
    values.push(header.values[i].replace(/^(\S+\r\n)/, insertSpace));
  }

  rval += values.join(',') + '\r\n'; // do folding

  var length = 0;
  var candidate = -1;

  for (var i = 0; i < rval.length; ++i, ++length) {
    if (length > 65 && candidate !== -1) {
      var insert = rval[candidate];

      if (insert === ',') {
        ++candidate;
        rval = rval.substr(0, candidate) + '\r\n ' + rval.substr(candidate);
      } else {
        rval = rval.substr(0, candidate) + '\r\n' + insert + rval.substr(candidate + 1);
      }

      length = i - candidate - 1;
      candidate = -1;
      ++i;
    } else if (rval[i] === ' ' || rval[i] === '\t' || rval[i] === ',') {
      candidate = i;
    }
  }

  return rval;
}

function ltrim(str) {
  return str.replace(/^\s+/, '');
}

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (module) {
  if (!module.webpackPolyfill) {
    module.deprecate = function () {};

    module.paths = []; // module.parent = undefined by default

    if (!module.children) module.children = [];
    Object.defineProperty(module, "loaded", {
      enumerable: true,
      get: function get() {
        return module.l;
      }
    });
    Object.defineProperty(module, "id", {
      enumerable: true,
      get: function get() {
        return module.i;
      }
    });
    module.webpackPolyfill = 1;
  }

  return module;
};

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Javascript implementation of X.509 and related components (such as
 * Certification Signing Requests) of a Public Key Infrastructure.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
 *
 * The ASN.1 representation of an X.509v3 certificate is as follows
 * (see RFC 2459):
 *
 * Certificate ::= SEQUENCE {
 *   tbsCertificate       TBSCertificate,
 *   signatureAlgorithm   AlgorithmIdentifier,
 *   signatureValue       BIT STRING
 * }
 *
 * TBSCertificate ::= SEQUENCE {
 *   version         [0]  EXPLICIT Version DEFAULT v1,
 *   serialNumber         CertificateSerialNumber,
 *   signature            AlgorithmIdentifier,
 *   issuer               Name,
 *   validity             Validity,
 *   subject              Name,
 *   subjectPublicKeyInfo SubjectPublicKeyInfo,
 *   issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL,
 *                        -- If present, version shall be v2 or v3
 *   subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,
 *                        -- If present, version shall be v2 or v3
 *   extensions      [3]  EXPLICIT Extensions OPTIONAL
 *                        -- If present, version shall be v3
 * }
 *
 * Version ::= INTEGER  { v1(0), v2(1), v3(2) }
 *
 * CertificateSerialNumber ::= INTEGER
 *
 * Name ::= CHOICE {
 *   // only one possible choice for now
 *   RDNSequence
 * }
 *
 * RDNSequence ::= SEQUENCE OF RelativeDistinguishedName
 *
 * RelativeDistinguishedName ::= SET OF AttributeTypeAndValue
 *
 * AttributeTypeAndValue ::= SEQUENCE {
 *   type     AttributeType,
 *   value    AttributeValue
 * }
 * AttributeType ::= OBJECT IDENTIFIER
 * AttributeValue ::= ANY DEFINED BY AttributeType
 *
 * Validity ::= SEQUENCE {
 *   notBefore      Time,
 *   notAfter       Time
 * }
 *
 * Time ::= CHOICE {
 *   utcTime        UTCTime,
 *   generalTime    GeneralizedTime
 * }
 *
 * UniqueIdentifier ::= BIT STRING
 *
 * SubjectPublicKeyInfo ::= SEQUENCE {
 *   algorithm            AlgorithmIdentifier,
 *   subjectPublicKey     BIT STRING
 * }
 *
 * Extensions ::= SEQUENCE SIZE (1..MAX) OF Extension
 *
 * Extension ::= SEQUENCE {
 *   extnID      OBJECT IDENTIFIER,
 *   critical    BOOLEAN DEFAULT FALSE,
 *   extnValue   OCTET STRING
 * }
 *
 * The only key algorithm currently supported for PKI is RSA.
 *
 * RSASSA-PSS signatures are described in RFC 3447 and RFC 4055.
 *
 * PKCS#10 v1.7 describes certificate signing requests:
 *
 * CertificationRequestInfo:
 *
 * CertificationRequestInfo ::= SEQUENCE {
 *   version       INTEGER { v1(0) } (v1,...),
 *   subject       Name,
 *   subjectPKInfo SubjectPublicKeyInfo{{ PKInfoAlgorithms }},
 *   attributes    [0] Attributes{{ CRIAttributes }}
 * }
 *
 * Attributes { ATTRIBUTE:IOSet } ::= SET OF Attribute{{ IOSet }}
 *
 * CRIAttributes  ATTRIBUTE  ::= {
 *   ... -- add any locally defined attributes here -- }
 *
 * Attribute { ATTRIBUTE:IOSet } ::= SEQUENCE {
 *   type   ATTRIBUTE.&id({IOSet}),
 *   values SET SIZE(1..MAX) OF ATTRIBUTE.&Type({IOSet}{@type})
 * }
 *
 * CertificationRequest ::= SEQUENCE {
 *   certificationRequestInfo CertificationRequestInfo,
 *   signatureAlgorithm AlgorithmIdentifier{{ SignatureAlgorithms }},
 *   signature          BIT STRING
 * }
 */
var forge = __webpack_require__(7);

__webpack_require__(92);

__webpack_require__(40);

__webpack_require__(127);

__webpack_require__(47);

__webpack_require__(435);

__webpack_require__(45);

__webpack_require__(93);

__webpack_require__(212);

__webpack_require__(73);

__webpack_require__(10); // shortcut for asn.1 API


var asn1 = forge.asn1;
/* Public Key Infrastructure (PKI) implementation. */

var pki = module.exports = forge.pki = forge.pki || {};
var oids = pki.oids; // short name OID mappings

var _shortNames = {};
_shortNames['CN'] = oids['commonName'];
_shortNames['commonName'] = 'CN';
_shortNames['C'] = oids['countryName'];
_shortNames['countryName'] = 'C';
_shortNames['L'] = oids['localityName'];
_shortNames['localityName'] = 'L';
_shortNames['ST'] = oids['stateOrProvinceName'];
_shortNames['stateOrProvinceName'] = 'ST';
_shortNames['O'] = oids['organizationName'];
_shortNames['organizationName'] = 'O';
_shortNames['OU'] = oids['organizationalUnitName'];
_shortNames['organizationalUnitName'] = 'OU';
_shortNames['E'] = oids['emailAddress'];
_shortNames['emailAddress'] = 'E'; // validator for an SubjectPublicKeyInfo structure
// Note: Currently only works with an RSA public key

var publicKeyValidator = forge.pki.rsa.publicKeyValidator; // validator for an X.509v3 certificate

var x509CertificateValidator = {
  name: 'Certificate',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    name: 'Certificate.TBSCertificate',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    captureAsn1: 'tbsCertificate',
    value: [{
      name: 'Certificate.TBSCertificate.version',
      tagClass: asn1.Class.CONTEXT_SPECIFIC,
      type: 0,
      constructed: true,
      optional: true,
      value: [{
        name: 'Certificate.TBSCertificate.version.integer',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.INTEGER,
        constructed: false,
        capture: 'certVersion'
      }]
    }, {
      name: 'Certificate.TBSCertificate.serialNumber',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.INTEGER,
      constructed: false,
      capture: 'certSerialNumber'
    }, {
      name: 'Certificate.TBSCertificate.signature',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      value: [{
        name: 'Certificate.TBSCertificate.signature.algorithm',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.OID,
        constructed: false,
        capture: 'certinfoSignatureOid'
      }, {
        name: 'Certificate.TBSCertificate.signature.parameters',
        tagClass: asn1.Class.UNIVERSAL,
        optional: true,
        captureAsn1: 'certinfoSignatureParams'
      }]
    }, {
      name: 'Certificate.TBSCertificate.issuer',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      captureAsn1: 'certIssuer'
    }, {
      name: 'Certificate.TBSCertificate.validity',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      // Note: UTC and generalized times may both appear so the capture
      // names are based on their detected order, the names used below
      // are only for the common case, which validity time really means
      // "notBefore" and which means "notAfter" will be determined by order
      value: [{
        // notBefore (Time) (UTC time case)
        name: 'Certificate.TBSCertificate.validity.notBefore (utc)',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.UTCTIME,
        constructed: false,
        optional: true,
        capture: 'certValidity1UTCTime'
      }, {
        // notBefore (Time) (generalized time case)
        name: 'Certificate.TBSCertificate.validity.notBefore (generalized)',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.GENERALIZEDTIME,
        constructed: false,
        optional: true,
        capture: 'certValidity2GeneralizedTime'
      }, {
        // notAfter (Time) (only UTC time is supported)
        name: 'Certificate.TBSCertificate.validity.notAfter (utc)',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.UTCTIME,
        constructed: false,
        optional: true,
        capture: 'certValidity3UTCTime'
      }, {
        // notAfter (Time) (only UTC time is supported)
        name: 'Certificate.TBSCertificate.validity.notAfter (generalized)',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.GENERALIZEDTIME,
        constructed: false,
        optional: true,
        capture: 'certValidity4GeneralizedTime'
      }]
    }, {
      // Name (subject) (RDNSequence)
      name: 'Certificate.TBSCertificate.subject',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      captureAsn1: 'certSubject'
    }, // SubjectPublicKeyInfo
    publicKeyValidator, {
      // issuerUniqueID (optional)
      name: 'Certificate.TBSCertificate.issuerUniqueID',
      tagClass: asn1.Class.CONTEXT_SPECIFIC,
      type: 1,
      constructed: true,
      optional: true,
      value: [{
        name: 'Certificate.TBSCertificate.issuerUniqueID.id',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.BITSTRING,
        constructed: false,
        // TODO: support arbitrary bit length ids
        captureBitStringValue: 'certIssuerUniqueId'
      }]
    }, {
      // subjectUniqueID (optional)
      name: 'Certificate.TBSCertificate.subjectUniqueID',
      tagClass: asn1.Class.CONTEXT_SPECIFIC,
      type: 2,
      constructed: true,
      optional: true,
      value: [{
        name: 'Certificate.TBSCertificate.subjectUniqueID.id',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.BITSTRING,
        constructed: false,
        // TODO: support arbitrary bit length ids
        captureBitStringValue: 'certSubjectUniqueId'
      }]
    }, {
      // Extensions (optional)
      name: 'Certificate.TBSCertificate.extensions',
      tagClass: asn1.Class.CONTEXT_SPECIFIC,
      type: 3,
      constructed: true,
      captureAsn1: 'certExtensions',
      optional: true
    }]
  }, {
    // AlgorithmIdentifier (signature algorithm)
    name: 'Certificate.signatureAlgorithm',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [{
      // algorithm
      name: 'Certificate.signatureAlgorithm.algorithm',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.OID,
      constructed: false,
      capture: 'certSignatureOid'
    }, {
      name: 'Certificate.TBSCertificate.signature.parameters',
      tagClass: asn1.Class.UNIVERSAL,
      optional: true,
      captureAsn1: 'certSignatureParams'
    }]
  }, {
    // SignatureValue
    name: 'Certificate.signatureValue',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.BITSTRING,
    constructed: false,
    captureBitStringValue: 'certSignature'
  }]
};
var rsassaPssParameterValidator = {
  name: 'rsapss',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    name: 'rsapss.hashAlgorithm',
    tagClass: asn1.Class.CONTEXT_SPECIFIC,
    type: 0,
    constructed: true,
    value: [{
      name: 'rsapss.hashAlgorithm.AlgorithmIdentifier',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Class.SEQUENCE,
      constructed: true,
      optional: true,
      value: [{
        name: 'rsapss.hashAlgorithm.AlgorithmIdentifier.algorithm',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.OID,
        constructed: false,
        capture: 'hashOid'
        /* parameter block omitted, for SHA1 NULL anyhow. */

      }]
    }]
  }, {
    name: 'rsapss.maskGenAlgorithm',
    tagClass: asn1.Class.CONTEXT_SPECIFIC,
    type: 1,
    constructed: true,
    value: [{
      name: 'rsapss.maskGenAlgorithm.AlgorithmIdentifier',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Class.SEQUENCE,
      constructed: true,
      optional: true,
      value: [{
        name: 'rsapss.maskGenAlgorithm.AlgorithmIdentifier.algorithm',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.OID,
        constructed: false,
        capture: 'maskGenOid'
      }, {
        name: 'rsapss.maskGenAlgorithm.AlgorithmIdentifier.params',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.SEQUENCE,
        constructed: true,
        value: [{
          name: 'rsapss.maskGenAlgorithm.AlgorithmIdentifier.params.algorithm',
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.OID,
          constructed: false,
          capture: 'maskGenHashOid'
          /* parameter block omitted, for SHA1 NULL anyhow. */

        }]
      }]
    }]
  }, {
    name: 'rsapss.saltLength',
    tagClass: asn1.Class.CONTEXT_SPECIFIC,
    type: 2,
    optional: true,
    value: [{
      name: 'rsapss.saltLength.saltLength',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Class.INTEGER,
      constructed: false,
      capture: 'saltLength'
    }]
  }, {
    name: 'rsapss.trailerField',
    tagClass: asn1.Class.CONTEXT_SPECIFIC,
    type: 3,
    optional: true,
    value: [{
      name: 'rsapss.trailer.trailer',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Class.INTEGER,
      constructed: false,
      capture: 'trailer'
    }]
  }]
}; // validator for a CertificationRequestInfo structure

var certificationRequestInfoValidator = {
  name: 'CertificationRequestInfo',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  captureAsn1: 'certificationRequestInfo',
  value: [{
    name: 'CertificationRequestInfo.integer',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'certificationRequestInfoVersion'
  }, {
    // Name (subject) (RDNSequence)
    name: 'CertificationRequestInfo.subject',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    captureAsn1: 'certificationRequestInfoSubject'
  }, // SubjectPublicKeyInfo
  publicKeyValidator, {
    name: 'CertificationRequestInfo.attributes',
    tagClass: asn1.Class.CONTEXT_SPECIFIC,
    type: 0,
    constructed: true,
    optional: true,
    capture: 'certificationRequestInfoAttributes',
    value: [{
      name: 'CertificationRequestInfo.attributes',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      value: [{
        name: 'CertificationRequestInfo.attributes.type',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.OID,
        constructed: false
      }, {
        name: 'CertificationRequestInfo.attributes.value',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.SET,
        constructed: true
      }]
    }]
  }]
}; // validator for a CertificationRequest structure

var certificationRequestValidator = {
  name: 'CertificationRequest',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  captureAsn1: 'csr',
  value: [certificationRequestInfoValidator, {
    // AlgorithmIdentifier (signature algorithm)
    name: 'CertificationRequest.signatureAlgorithm',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [{
      // algorithm
      name: 'CertificationRequest.signatureAlgorithm.algorithm',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.OID,
      constructed: false,
      capture: 'csrSignatureOid'
    }, {
      name: 'CertificationRequest.signatureAlgorithm.parameters',
      tagClass: asn1.Class.UNIVERSAL,
      optional: true,
      captureAsn1: 'csrSignatureParams'
    }]
  }, {
    // signature
    name: 'CertificationRequest.signature',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.BITSTRING,
    constructed: false,
    captureBitStringValue: 'csrSignature'
  }]
};
/**
 * Converts an RDNSequence of ASN.1 DER-encoded RelativeDistinguishedName
 * sets into an array with objects that have type and value properties.
 *
 * @param rdn the RDNSequence to convert.
 * @param md a message digest to append type and value to if provided.
 */

pki.RDNAttributesAsArray = function (rdn, md) {
  var rval = []; // each value in 'rdn' in is a SET of RelativeDistinguishedName

  var set, attr, obj;

  for (var si = 0; si < rdn.value.length; ++si) {
    // get the RelativeDistinguishedName set
    set = rdn.value[si]; // each value in the SET is an AttributeTypeAndValue sequence
    // containing first a type (an OID) and second a value (defined by
    // the OID)

    for (var i = 0; i < set.value.length; ++i) {
      obj = {};
      attr = set.value[i];
      obj.type = asn1.derToOid(attr.value[0].value);
      obj.value = attr.value[1].value;
      obj.valueTagClass = attr.value[1].type; // if the OID is known, get its name and short name

      if (obj.type in oids) {
        obj.name = oids[obj.type];

        if (obj.name in _shortNames) {
          obj.shortName = _shortNames[obj.name];
        }
      }

      if (md) {
        md.update(obj.type);
        md.update(obj.value);
      }

      rval.push(obj);
    }
  }

  return rval;
};
/**
 * Converts ASN.1 CRIAttributes into an array with objects that have type and
 * value properties.
 *
 * @param attributes the CRIAttributes to convert.
 */


pki.CRIAttributesAsArray = function (attributes) {
  var rval = []; // each value in 'attributes' in is a SEQUENCE with an OID and a SET

  for (var si = 0; si < attributes.length; ++si) {
    // get the attribute sequence
    var seq = attributes[si]; // each value in the SEQUENCE containing first a type (an OID) and
    // second a set of values (defined by the OID)

    var type = asn1.derToOid(seq.value[0].value);
    var values = seq.value[1].value;

    for (var vi = 0; vi < values.length; ++vi) {
      var obj = {};
      obj.type = type;
      obj.value = values[vi].value;
      obj.valueTagClass = values[vi].type; // if the OID is known, get its name and short name

      if (obj.type in oids) {
        obj.name = oids[obj.type];

        if (obj.name in _shortNames) {
          obj.shortName = _shortNames[obj.name];
        }
      } // parse extensions


      if (obj.type === oids.extensionRequest) {
        obj.extensions = [];

        for (var ei = 0; ei < obj.value.length; ++ei) {
          obj.extensions.push(pki.certificateExtensionFromAsn1(obj.value[ei]));
        }
      }

      rval.push(obj);
    }
  }

  return rval;
};
/**
 * Gets an issuer or subject attribute from its name, type, or short name.
 *
 * @param obj the issuer or subject object.
 * @param options a short name string or an object with:
 *          shortName the short name for the attribute.
 *          name the name for the attribute.
 *          type the type for the attribute.
 *
 * @return the attribute.
 */


function _getAttribute(obj, options) {
  if (typeof options === 'string') {
    options = {
      shortName: options
    };
  }

  var rval = null;
  var attr;

  for (var i = 0; rval === null && i < obj.attributes.length; ++i) {
    attr = obj.attributes[i];

    if (options.type && options.type === attr.type) {
      rval = attr;
    } else if (options.name && options.name === attr.name) {
      rval = attr;
    } else if (options.shortName && options.shortName === attr.shortName) {
      rval = attr;
    }
  }

  return rval;
}
/**
 * Converts signature parameters from ASN.1 structure.
 *
 * Currently only RSASSA-PSS supported.  The PKCS#1 v1.5 signature scheme had
 * no parameters.
 *
 * RSASSA-PSS-params  ::=  SEQUENCE  {
 *   hashAlgorithm      [0] HashAlgorithm DEFAULT
 *                             sha1Identifier,
 *   maskGenAlgorithm   [1] MaskGenAlgorithm DEFAULT
 *                             mgf1SHA1Identifier,
 *   saltLength         [2] INTEGER DEFAULT 20,
 *   trailerField       [3] INTEGER DEFAULT 1
 * }
 *
 * HashAlgorithm  ::=  AlgorithmIdentifier
 *
 * MaskGenAlgorithm  ::=  AlgorithmIdentifier
 *
 * AlgorithmIdentifer ::= SEQUENCE {
 *   algorithm OBJECT IDENTIFIER,
 *   parameters ANY DEFINED BY algorithm OPTIONAL
 * }
 *
 * @param oid The OID specifying the signature algorithm
 * @param obj The ASN.1 structure holding the parameters
 * @param fillDefaults Whether to use return default values where omitted
 * @return signature parameter object
 */


var _readSignatureParameters = function _readSignatureParameters(oid, obj, fillDefaults) {
  var params = {};

  if (oid !== oids['RSASSA-PSS']) {
    return params;
  }

  if (fillDefaults) {
    params = {
      hash: {
        algorithmOid: oids['sha1']
      },
      mgf: {
        algorithmOid: oids['mgf1'],
        hash: {
          algorithmOid: oids['sha1']
        }
      },
      saltLength: 20
    };
  }

  var capture = {};
  var errors = [];

  if (!asn1.validate(obj, rsassaPssParameterValidator, capture, errors)) {
    var error = new Error('Cannot read RSASSA-PSS parameter block.');
    error.errors = errors;
    throw error;
  }

  if (capture.hashOid !== undefined) {
    params.hash = params.hash || {};
    params.hash.algorithmOid = asn1.derToOid(capture.hashOid);
  }

  if (capture.maskGenOid !== undefined) {
    params.mgf = params.mgf || {};
    params.mgf.algorithmOid = asn1.derToOid(capture.maskGenOid);
    params.mgf.hash = params.mgf.hash || {};
    params.mgf.hash.algorithmOid = asn1.derToOid(capture.maskGenHashOid);
  }

  if (capture.saltLength !== undefined) {
    params.saltLength = capture.saltLength.charCodeAt(0);
  }

  return params;
};
/**
 * Converts an X.509 certificate from PEM format.
 *
 * Note: If the certificate is to be verified then compute hash should
 * be set to true. This will scan the TBSCertificate part of the ASN.1
 * object while it is converted so it doesn't need to be converted back
 * to ASN.1-DER-encoding later.
 *
 * @param pem the PEM-formatted certificate.
 * @param computeHash true to compute the hash for verification.
 * @param strict true to be strict when checking ASN.1 value lengths, false to
 *          allow truncated values (default: true).
 *
 * @return the certificate.
 */


pki.certificateFromPem = function (pem, computeHash, strict) {
  var msg = forge.pem.decode(pem)[0];

  if (msg.type !== 'CERTIFICATE' && msg.type !== 'X509 CERTIFICATE' && msg.type !== 'TRUSTED CERTIFICATE') {
    var error = new Error('Could not convert certificate from PEM; PEM header type ' + 'is not "CERTIFICATE", "X509 CERTIFICATE", or "TRUSTED CERTIFICATE".');
    error.headerType = msg.type;
    throw error;
  }

  if (msg.procType && msg.procType.type === 'ENCRYPTED') {
    throw new Error('Could not convert certificate from PEM; PEM is encrypted.');
  } // convert DER to ASN.1 object


  var obj = asn1.fromDer(msg.body, strict);
  return pki.certificateFromAsn1(obj, computeHash);
};
/**
 * Converts an X.509 certificate to PEM format.
 *
 * @param cert the certificate.
 * @param maxline the maximum characters per line, defaults to 64.
 *
 * @return the PEM-formatted certificate.
 */


pki.certificateToPem = function (cert, maxline) {
  // convert to ASN.1, then DER, then PEM-encode
  var msg = {
    type: 'CERTIFICATE',
    body: asn1.toDer(pki.certificateToAsn1(cert)).getBytes()
  };
  return forge.pem.encode(msg, {
    maxline: maxline
  });
};
/**
 * Converts an RSA public key from PEM format.
 *
 * @param pem the PEM-formatted public key.
 *
 * @return the public key.
 */


pki.publicKeyFromPem = function (pem) {
  var msg = forge.pem.decode(pem)[0];

  if (msg.type !== 'PUBLIC KEY' && msg.type !== 'RSA PUBLIC KEY') {
    var error = new Error('Could not convert public key from PEM; PEM header ' + 'type is not "PUBLIC KEY" or "RSA PUBLIC KEY".');
    error.headerType = msg.type;
    throw error;
  }

  if (msg.procType && msg.procType.type === 'ENCRYPTED') {
    throw new Error('Could not convert public key from PEM; PEM is encrypted.');
  } // convert DER to ASN.1 object


  var obj = asn1.fromDer(msg.body);
  return pki.publicKeyFromAsn1(obj);
};
/**
 * Converts an RSA public key to PEM format (using a SubjectPublicKeyInfo).
 *
 * @param key the public key.
 * @param maxline the maximum characters per line, defaults to 64.
 *
 * @return the PEM-formatted public key.
 */


pki.publicKeyToPem = function (key, maxline) {
  // convert to ASN.1, then DER, then PEM-encode
  var msg = {
    type: 'PUBLIC KEY',
    body: asn1.toDer(pki.publicKeyToAsn1(key)).getBytes()
  };
  return forge.pem.encode(msg, {
    maxline: maxline
  });
};
/**
 * Converts an RSA public key to PEM format (using an RSAPublicKey).
 *
 * @param key the public key.
 * @param maxline the maximum characters per line, defaults to 64.
 *
 * @return the PEM-formatted public key.
 */


pki.publicKeyToRSAPublicKeyPem = function (key, maxline) {
  // convert to ASN.1, then DER, then PEM-encode
  var msg = {
    type: 'RSA PUBLIC KEY',
    body: asn1.toDer(pki.publicKeyToRSAPublicKey(key)).getBytes()
  };
  return forge.pem.encode(msg, {
    maxline: maxline
  });
};
/**
 * Gets a fingerprint for the given public key.
 *
 * @param options the options to use.
 *          [md] the message digest object to use (defaults to forge.md.sha1).
 *          [type] the type of fingerprint, such as 'RSAPublicKey',
 *            'SubjectPublicKeyInfo' (defaults to 'RSAPublicKey').
 *          [encoding] an alternative output encoding, such as 'hex'
 *            (defaults to none, outputs a byte buffer).
 *          [delimiter] the delimiter to use between bytes for 'hex' encoded
 *            output, eg: ':' (defaults to none).
 *
 * @return the fingerprint as a byte buffer or other encoding based on options.
 */


pki.getPublicKeyFingerprint = function (key, options) {
  options = options || {};
  var md = options.md || forge.md.sha1.create();
  var type = options.type || 'RSAPublicKey';
  var bytes;

  switch (type) {
    case 'RSAPublicKey':
      bytes = asn1.toDer(pki.publicKeyToRSAPublicKey(key)).getBytes();
      break;

    case 'SubjectPublicKeyInfo':
      bytes = asn1.toDer(pki.publicKeyToAsn1(key)).getBytes();
      break;

    default:
      throw new Error('Unknown fingerprint type "' + options.type + '".');
  } // hash public key bytes


  md.start();
  md.update(bytes);
  var digest = md.digest();

  if (options.encoding === 'hex') {
    var hex = digest.toHex();

    if (options.delimiter) {
      return hex.match(/.{2}/g).join(options.delimiter);
    }

    return hex;
  } else if (options.encoding === 'binary') {
    return digest.getBytes();
  } else if (options.encoding) {
    throw new Error('Unknown encoding "' + options.encoding + '".');
  }

  return digest;
};
/**
 * Converts a PKCS#10 certification request (CSR) from PEM format.
 *
 * Note: If the certification request is to be verified then compute hash
 * should be set to true. This will scan the CertificationRequestInfo part of
 * the ASN.1 object while it is converted so it doesn't need to be converted
 * back to ASN.1-DER-encoding later.
 *
 * @param pem the PEM-formatted certificate.
 * @param computeHash true to compute the hash for verification.
 * @param strict true to be strict when checking ASN.1 value lengths, false to
 *          allow truncated values (default: true).
 *
 * @return the certification request (CSR).
 */


pki.certificationRequestFromPem = function (pem, computeHash, strict) {
  var msg = forge.pem.decode(pem)[0];

  if (msg.type !== 'CERTIFICATE REQUEST') {
    var error = new Error('Could not convert certification request from PEM; ' + 'PEM header type is not "CERTIFICATE REQUEST".');
    error.headerType = msg.type;
    throw error;
  }

  if (msg.procType && msg.procType.type === 'ENCRYPTED') {
    throw new Error('Could not convert certification request from PEM; ' + 'PEM is encrypted.');
  } // convert DER to ASN.1 object


  var obj = asn1.fromDer(msg.body, strict);
  return pki.certificationRequestFromAsn1(obj, computeHash);
};
/**
 * Converts a PKCS#10 certification request (CSR) to PEM format.
 *
 * @param csr the certification request.
 * @param maxline the maximum characters per line, defaults to 64.
 *
 * @return the PEM-formatted certification request.
 */


pki.certificationRequestToPem = function (csr, maxline) {
  // convert to ASN.1, then DER, then PEM-encode
  var msg = {
    type: 'CERTIFICATE REQUEST',
    body: asn1.toDer(pki.certificationRequestToAsn1(csr)).getBytes()
  };
  return forge.pem.encode(msg, {
    maxline: maxline
  });
};
/**
 * Creates an empty X.509v3 RSA certificate.
 *
 * @return the certificate.
 */


pki.createCertificate = function () {
  var cert = {};
  cert.version = 0x02;
  cert.serialNumber = '00';
  cert.signatureOid = null;
  cert.signature = null;
  cert.siginfo = {};
  cert.siginfo.algorithmOid = null;
  cert.validity = {};
  cert.validity.notBefore = new Date();
  cert.validity.notAfter = new Date();
  cert.issuer = {};

  cert.issuer.getField = function (sn) {
    return _getAttribute(cert.issuer, sn);
  };

  cert.issuer.addField = function (attr) {
    _fillMissingFields([attr]);

    cert.issuer.attributes.push(attr);
  };

  cert.issuer.attributes = [];
  cert.issuer.hash = null;
  cert.subject = {};

  cert.subject.getField = function (sn) {
    return _getAttribute(cert.subject, sn);
  };

  cert.subject.addField = function (attr) {
    _fillMissingFields([attr]);

    cert.subject.attributes.push(attr);
  };

  cert.subject.attributes = [];
  cert.subject.hash = null;
  cert.extensions = [];
  cert.publicKey = null;
  cert.md = null;
  /**
   * Sets the subject of this certificate.
   *
   * @param attrs the array of subject attributes to use.
   * @param uniqueId an optional a unique ID to use.
   */

  cert.setSubject = function (attrs, uniqueId) {
    // set new attributes, clear hash
    _fillMissingFields(attrs);

    cert.subject.attributes = attrs;
    delete cert.subject.uniqueId;

    if (uniqueId) {
      // TODO: support arbitrary bit length ids
      cert.subject.uniqueId = uniqueId;
    }

    cert.subject.hash = null;
  };
  /**
   * Sets the issuer of this certificate.
   *
   * @param attrs the array of issuer attributes to use.
   * @param uniqueId an optional a unique ID to use.
   */


  cert.setIssuer = function (attrs, uniqueId) {
    // set new attributes, clear hash
    _fillMissingFields(attrs);

    cert.issuer.attributes = attrs;
    delete cert.issuer.uniqueId;

    if (uniqueId) {
      // TODO: support arbitrary bit length ids
      cert.issuer.uniqueId = uniqueId;
    }

    cert.issuer.hash = null;
  };
  /**
   * Sets the extensions of this certificate.
   *
   * @param exts the array of extensions to use.
   */


  cert.setExtensions = function (exts) {
    for (var i = 0; i < exts.length; ++i) {
      _fillMissingExtensionFields(exts[i], {
        cert: cert
      });
    } // set new extensions


    cert.extensions = exts;
  };
  /**
   * Gets an extension by its name or id.
   *
   * @param options the name to use or an object with:
   *          name the name to use.
   *          id the id to use.
   *
   * @return the extension or null if not found.
   */


  cert.getExtension = function (options) {
    if (typeof options === 'string') {
      options = {
        name: options
      };
    }

    var rval = null;
    var ext;

    for (var i = 0; rval === null && i < cert.extensions.length; ++i) {
      ext = cert.extensions[i];

      if (options.id && ext.id === options.id) {
        rval = ext;
      } else if (options.name && ext.name === options.name) {
        rval = ext;
      }
    }

    return rval;
  };
  /**
   * Signs this certificate using the given private key.
   *
   * @param key the private key to sign with.
   * @param md the message digest object to use (defaults to forge.md.sha1).
   */


  cert.sign = function (key, md) {
    // TODO: get signature OID from private key
    cert.md = md || forge.md.sha1.create();
    var algorithmOid = oids[cert.md.algorithm + 'WithRSAEncryption'];

    if (!algorithmOid) {
      var error = new Error('Could not compute certificate digest. ' + 'Unknown message digest algorithm OID.');
      error.algorithm = cert.md.algorithm;
      throw error;
    }

    cert.signatureOid = cert.siginfo.algorithmOid = algorithmOid; // get TBSCertificate, convert to DER

    cert.tbsCertificate = pki.getTBSCertificate(cert);
    var bytes = asn1.toDer(cert.tbsCertificate); // digest and sign

    cert.md.update(bytes.getBytes());
    cert.signature = key.sign(cert.md);
  };
  /**
   * Attempts verify the signature on the passed certificate using this
   * certificate's public key.
   *
   * @param child the certificate to verify.
   *
   * @return true if verified, false if not.
   */


  cert.verify = function (child) {
    var rval = false;

    if (!cert.issued(child)) {
      var issuer = child.issuer;
      var subject = cert.subject;
      var error = new Error('The parent certificate did not issue the given child ' + 'certificate; the child certificate\'s issuer does not match the ' + 'parent\'s subject.');
      error.expectedIssuer = issuer.attributes;
      error.actualIssuer = subject.attributes;
      throw error;
    }

    var md = child.md;

    if (md === null) {
      // check signature OID for supported signature types
      if (child.signatureOid in oids) {
        var oid = oids[child.signatureOid];

        switch (oid) {
          case 'sha1WithRSAEncryption':
            md = forge.md.sha1.create();
            break;

          case 'md5WithRSAEncryption':
            md = forge.md.md5.create();
            break;

          case 'sha256WithRSAEncryption':
            md = forge.md.sha256.create();
            break;

          case 'sha384WithRSAEncryption':
            md = forge.md.sha384.create();
            break;

          case 'sha512WithRSAEncryption':
            md = forge.md.sha512.create();
            break;

          case 'RSASSA-PSS':
            md = forge.md.sha256.create();
            break;
        }
      }

      if (md === null) {
        var error = new Error('Could not compute certificate digest. ' + 'Unknown signature OID.');
        error.signatureOid = child.signatureOid;
        throw error;
      } // produce DER formatted TBSCertificate and digest it


      var tbsCertificate = child.tbsCertificate || pki.getTBSCertificate(child);
      var bytes = asn1.toDer(tbsCertificate);
      md.update(bytes.getBytes());
    }

    if (md !== null) {
      var scheme;

      switch (child.signatureOid) {
        case oids.sha1WithRSAEncryption:
          scheme = undefined;
          /* use PKCS#1 v1.5 padding scheme */

          break;

        case oids['RSASSA-PSS']:
          var hash, mgf;
          /* initialize mgf */

          hash = oids[child.signatureParameters.mgf.hash.algorithmOid];

          if (hash === undefined || forge.md[hash] === undefined) {
            var error = new Error('Unsupported MGF hash function.');
            error.oid = child.signatureParameters.mgf.hash.algorithmOid;
            error.name = hash;
            throw error;
          }

          mgf = oids[child.signatureParameters.mgf.algorithmOid];

          if (mgf === undefined || forge.mgf[mgf] === undefined) {
            var error = new Error('Unsupported MGF function.');
            error.oid = child.signatureParameters.mgf.algorithmOid;
            error.name = mgf;
            throw error;
          }

          mgf = forge.mgf[mgf].create(forge.md[hash].create());
          /* initialize hash function */

          hash = oids[child.signatureParameters.hash.algorithmOid];

          if (hash === undefined || forge.md[hash] === undefined) {
            throw {
              message: 'Unsupported RSASSA-PSS hash function.',
              oid: child.signatureParameters.hash.algorithmOid,
              name: hash
            };
          }

          scheme = forge.pss.create(forge.md[hash].create(), mgf, child.signatureParameters.saltLength);
          break;
      } // verify signature on cert using public key


      rval = cert.publicKey.verify(md.digest().getBytes(), child.signature, scheme);
    }

    return rval;
  };
  /**
   * Returns true if this certificate's issuer matches the passed
   * certificate's subject. Note that no signature check is performed.
   *
   * @param parent the certificate to check.
   *
   * @return true if this certificate's issuer matches the passed certificate's
   *         subject.
   */


  cert.isIssuer = function (parent) {
    var rval = false;
    var i = cert.issuer;
    var s = parent.subject; // compare hashes if present

    if (i.hash && s.hash) {
      rval = i.hash === s.hash;
    } else if (i.attributes.length === s.attributes.length) {
      // all attributes are the same so issuer matches subject
      rval = true;
      var iattr, sattr;

      for (var n = 0; rval && n < i.attributes.length; ++n) {
        iattr = i.attributes[n];
        sattr = s.attributes[n];

        if (iattr.type !== sattr.type || iattr.value !== sattr.value) {
          // attribute mismatch
          rval = false;
        }
      }
    }

    return rval;
  };
  /**
   * Returns true if this certificate's subject matches the issuer of the
   * given certificate). Note that not signature check is performed.
   *
   * @param child the certificate to check.
   *
   * @return true if this certificate's subject matches the passed
   *         certificate's issuer.
   */


  cert.issued = function (child) {
    return child.isIssuer(cert);
  };
  /**
   * Generates the subjectKeyIdentifier for this certificate as byte buffer.
   *
   * @return the subjectKeyIdentifier for this certificate as byte buffer.
   */


  cert.generateSubjectKeyIdentifier = function () {
    /* See: 4.2.1.2 section of the the RFC3280, keyIdentifier is either:
       (1) The keyIdentifier is composed of the 160-bit SHA-1 hash of the
        value of the BIT STRING subjectPublicKey (excluding the tag,
        length, and number of unused bits).
       (2) The keyIdentifier is composed of a four bit type field with
        the value 0100 followed by the least significant 60 bits of the
        SHA-1 hash of the value of the BIT STRING subjectPublicKey
        (excluding the tag, length, and number of unused bit string bits).
    */
    // skipping the tag, length, and number of unused bits is the same
    // as just using the RSAPublicKey (for RSA keys, which are the
    // only ones supported)
    return pki.getPublicKeyFingerprint(cert.publicKey, {
      type: 'RSAPublicKey'
    });
  };
  /**
   * Verifies the subjectKeyIdentifier extension value for this certificate
   * against its public key. If no extension is found, false will be
   * returned.
   *
   * @return true if verified, false if not.
   */


  cert.verifySubjectKeyIdentifier = function () {
    var oid = oids['subjectKeyIdentifier'];

    for (var i = 0; i < cert.extensions.length; ++i) {
      var ext = cert.extensions[i];

      if (ext.id === oid) {
        var ski = cert.generateSubjectKeyIdentifier().getBytes();
        return forge.util.hexToBytes(ext.subjectKeyIdentifier) === ski;
      }
    }

    return false;
  };

  return cert;
};
/**
 * Converts an X.509v3 RSA certificate from an ASN.1 object.
 *
 * Note: If the certificate is to be verified then compute hash should
 * be set to true. There is currently no implementation for converting
 * a certificate back to ASN.1 so the TBSCertificate part of the ASN.1
 * object needs to be scanned before the cert object is created.
 *
 * @param obj the asn1 representation of an X.509v3 RSA certificate.
 * @param computeHash true to compute the hash for verification.
 *
 * @return the certificate.
 */


pki.certificateFromAsn1 = function (obj, computeHash) {
  // validate certificate and capture data
  var capture = {};
  var errors = [];

  if (!asn1.validate(obj, x509CertificateValidator, capture, errors)) {
    var error = new Error('Cannot read X.509 certificate. ' + 'ASN.1 object is not an X509v3 Certificate.');
    error.errors = errors;
    throw error;
  } // get oid


  var oid = asn1.derToOid(capture.publicKeyOid);

  if (oid !== pki.oids.rsaEncryption) {
    throw new Error('Cannot read public key. OID is not RSA.');
  } // create certificate


  var cert = pki.createCertificate();
  cert.version = capture.certVersion ? capture.certVersion.charCodeAt(0) : 0;
  var serial = forge.util.createBuffer(capture.certSerialNumber);
  cert.serialNumber = serial.toHex();
  cert.signatureOid = forge.asn1.derToOid(capture.certSignatureOid);
  cert.signatureParameters = _readSignatureParameters(cert.signatureOid, capture.certSignatureParams, true);
  cert.siginfo.algorithmOid = forge.asn1.derToOid(capture.certinfoSignatureOid);
  cert.siginfo.parameters = _readSignatureParameters(cert.siginfo.algorithmOid, capture.certinfoSignatureParams, false);
  cert.signature = capture.certSignature;
  var validity = [];

  if (capture.certValidity1UTCTime !== undefined) {
    validity.push(asn1.utcTimeToDate(capture.certValidity1UTCTime));
  }

  if (capture.certValidity2GeneralizedTime !== undefined) {
    validity.push(asn1.generalizedTimeToDate(capture.certValidity2GeneralizedTime));
  }

  if (capture.certValidity3UTCTime !== undefined) {
    validity.push(asn1.utcTimeToDate(capture.certValidity3UTCTime));
  }

  if (capture.certValidity4GeneralizedTime !== undefined) {
    validity.push(asn1.generalizedTimeToDate(capture.certValidity4GeneralizedTime));
  }

  if (validity.length > 2) {
    throw new Error('Cannot read notBefore/notAfter validity times; more ' + 'than two times were provided in the certificate.');
  }

  if (validity.length < 2) {
    throw new Error('Cannot read notBefore/notAfter validity times; they ' + 'were not provided as either UTCTime or GeneralizedTime.');
  }

  cert.validity.notBefore = validity[0];
  cert.validity.notAfter = validity[1]; // keep TBSCertificate to preserve signature when exporting

  cert.tbsCertificate = capture.tbsCertificate;

  if (computeHash) {
    // check signature OID for supported signature types
    cert.md = null;

    if (cert.signatureOid in oids) {
      var oid = oids[cert.signatureOid];

      switch (oid) {
        case 'sha1WithRSAEncryption':
          cert.md = forge.md.sha1.create();
          break;

        case 'md5WithRSAEncryption':
          cert.md = forge.md.md5.create();
          break;

        case 'sha256WithRSAEncryption':
          cert.md = forge.md.sha256.create();
          break;

        case 'sha384WithRSAEncryption':
          cert.md = forge.md.sha384.create();
          break;

        case 'sha512WithRSAEncryption':
          cert.md = forge.md.sha512.create();
          break;

        case 'RSASSA-PSS':
          cert.md = forge.md.sha256.create();
          break;
      }
    }

    if (cert.md === null) {
      var error = new Error('Could not compute certificate digest. ' + 'Unknown signature OID.');
      error.signatureOid = cert.signatureOid;
      throw error;
    } // produce DER formatted TBSCertificate and digest it


    var bytes = asn1.toDer(cert.tbsCertificate);
    cert.md.update(bytes.getBytes());
  } // handle issuer, build issuer message digest


  var imd = forge.md.sha1.create();

  cert.issuer.getField = function (sn) {
    return _getAttribute(cert.issuer, sn);
  };

  cert.issuer.addField = function (attr) {
    _fillMissingFields([attr]);

    cert.issuer.attributes.push(attr);
  };

  cert.issuer.attributes = pki.RDNAttributesAsArray(capture.certIssuer, imd);

  if (capture.certIssuerUniqueId) {
    cert.issuer.uniqueId = capture.certIssuerUniqueId;
  }

  cert.issuer.hash = imd.digest().toHex(); // handle subject, build subject message digest

  var smd = forge.md.sha1.create();

  cert.subject.getField = function (sn) {
    return _getAttribute(cert.subject, sn);
  };

  cert.subject.addField = function (attr) {
    _fillMissingFields([attr]);

    cert.subject.attributes.push(attr);
  };

  cert.subject.attributes = pki.RDNAttributesAsArray(capture.certSubject, smd);

  if (capture.certSubjectUniqueId) {
    cert.subject.uniqueId = capture.certSubjectUniqueId;
  }

  cert.subject.hash = smd.digest().toHex(); // handle extensions

  if (capture.certExtensions) {
    cert.extensions = pki.certificateExtensionsFromAsn1(capture.certExtensions);
  } else {
    cert.extensions = [];
  } // convert RSA public key from ASN.1


  cert.publicKey = pki.publicKeyFromAsn1(capture.subjectPublicKeyInfo);
  return cert;
};
/**
 * Converts an ASN.1 extensions object (with extension sequences as its
 * values) into an array of extension objects with types and values.
 *
 * Supported extensions:
 *
 * id-ce-keyUsage OBJECT IDENTIFIER ::=  { id-ce 15 }
 * KeyUsage ::= BIT STRING {
 *   digitalSignature        (0),
 *   nonRepudiation          (1),
 *   keyEncipherment         (2),
 *   dataEncipherment        (3),
 *   keyAgreement            (4),
 *   keyCertSign             (5),
 *   cRLSign                 (6),
 *   encipherOnly            (7),
 *   decipherOnly            (8)
 * }
 *
 * id-ce-basicConstraints OBJECT IDENTIFIER ::=  { id-ce 19 }
 * BasicConstraints ::= SEQUENCE {
 *   cA                      BOOLEAN DEFAULT FALSE,
 *   pathLenConstraint       INTEGER (0..MAX) OPTIONAL
 * }
 *
 * subjectAltName EXTENSION ::= {
 *   SYNTAX GeneralNames
 *   IDENTIFIED BY id-ce-subjectAltName
 * }
 *
 * GeneralNames ::= SEQUENCE SIZE (1..MAX) OF GeneralName
 *
 * GeneralName ::= CHOICE {
 *   otherName      [0] INSTANCE OF OTHER-NAME,
 *   rfc822Name     [1] IA5String,
 *   dNSName        [2] IA5String,
 *   x400Address    [3] ORAddress,
 *   directoryName  [4] Name,
 *   ediPartyName   [5] EDIPartyName,
 *   uniformResourceIdentifier [6] IA5String,
 *   IPAddress      [7] OCTET STRING,
 *   registeredID   [8] OBJECT IDENTIFIER
 * }
 *
 * OTHER-NAME ::= TYPE-IDENTIFIER
 *
 * EDIPartyName ::= SEQUENCE {
 *   nameAssigner [0] DirectoryString {ub-name} OPTIONAL,
 *   partyName    [1] DirectoryString {ub-name}
 * }
 *
 * @param exts the extensions ASN.1 with extension sequences to parse.
 *
 * @return the array.
 */


pki.certificateExtensionsFromAsn1 = function (exts) {
  var rval = [];

  for (var i = 0; i < exts.value.length; ++i) {
    // get extension sequence
    var extseq = exts.value[i];

    for (var ei = 0; ei < extseq.value.length; ++ei) {
      rval.push(pki.certificateExtensionFromAsn1(extseq.value[ei]));
    }
  }

  return rval;
};
/**
 * Parses a single certificate extension from ASN.1.
 *
 * @param ext the extension in ASN.1 format.
 *
 * @return the parsed extension as an object.
 */


pki.certificateExtensionFromAsn1 = function (ext) {
  // an extension has:
  // [0] extnID      OBJECT IDENTIFIER
  // [1] critical    BOOLEAN DEFAULT FALSE
  // [2] extnValue   OCTET STRING
  var e = {};
  e.id = asn1.derToOid(ext.value[0].value);
  e.critical = false;

  if (ext.value[1].type === asn1.Type.BOOLEAN) {
    e.critical = ext.value[1].value.charCodeAt(0) !== 0x00;
    e.value = ext.value[2].value;
  } else {
    e.value = ext.value[1].value;
  } // if the oid is known, get its name


  if (e.id in oids) {
    e.name = oids[e.id]; // handle key usage

    if (e.name === 'keyUsage') {
      // get value as BIT STRING
      var ev = asn1.fromDer(e.value);
      var b2 = 0x00;
      var b3 = 0x00;

      if (ev.value.length > 1) {
        // skip first byte, just indicates unused bits which
        // will be padded with 0s anyway
        // get bytes with flag bits
        b2 = ev.value.charCodeAt(1);
        b3 = ev.value.length > 2 ? ev.value.charCodeAt(2) : 0;
      } // set flags


      e.digitalSignature = (b2 & 0x80) === 0x80;
      e.nonRepudiation = (b2 & 0x40) === 0x40;
      e.keyEncipherment = (b2 & 0x20) === 0x20;
      e.dataEncipherment = (b2 & 0x10) === 0x10;
      e.keyAgreement = (b2 & 0x08) === 0x08;
      e.keyCertSign = (b2 & 0x04) === 0x04;
      e.cRLSign = (b2 & 0x02) === 0x02;
      e.encipherOnly = (b2 & 0x01) === 0x01;
      e.decipherOnly = (b3 & 0x80) === 0x80;
    } else if (e.name === 'basicConstraints') {
      // handle basic constraints
      // get value as SEQUENCE
      var ev = asn1.fromDer(e.value); // get cA BOOLEAN flag (defaults to false)

      if (ev.value.length > 0 && ev.value[0].type === asn1.Type.BOOLEAN) {
        e.cA = ev.value[0].value.charCodeAt(0) !== 0x00;
      } else {
        e.cA = false;
      } // get path length constraint


      var value = null;

      if (ev.value.length > 0 && ev.value[0].type === asn1.Type.INTEGER) {
        value = ev.value[0].value;
      } else if (ev.value.length > 1) {
        value = ev.value[1].value;
      }

      if (value !== null) {
        e.pathLenConstraint = asn1.derToInteger(value);
      }
    } else if (e.name === 'extKeyUsage') {
      // handle extKeyUsage
      // value is a SEQUENCE of OIDs
      var ev = asn1.fromDer(e.value);

      for (var vi = 0; vi < ev.value.length; ++vi) {
        var oid = asn1.derToOid(ev.value[vi].value);

        if (oid in oids) {
          e[oids[oid]] = true;
        } else {
          e[oid] = true;
        }
      }
    } else if (e.name === 'nsCertType') {
      // handle nsCertType
      // get value as BIT STRING
      var ev = asn1.fromDer(e.value);
      var b2 = 0x00;

      if (ev.value.length > 1) {
        // skip first byte, just indicates unused bits which
        // will be padded with 0s anyway
        // get bytes with flag bits
        b2 = ev.value.charCodeAt(1);
      } // set flags


      e.client = (b2 & 0x80) === 0x80;
      e.server = (b2 & 0x40) === 0x40;
      e.email = (b2 & 0x20) === 0x20;
      e.objsign = (b2 & 0x10) === 0x10;
      e.reserved = (b2 & 0x08) === 0x08;
      e.sslCA = (b2 & 0x04) === 0x04;
      e.emailCA = (b2 & 0x02) === 0x02;
      e.objCA = (b2 & 0x01) === 0x01;
    } else if (e.name === 'subjectAltName' || e.name === 'issuerAltName') {
      // handle subjectAltName/issuerAltName
      e.altNames = []; // ev is a SYNTAX SEQUENCE

      var gn;
      var ev = asn1.fromDer(e.value);

      for (var n = 0; n < ev.value.length; ++n) {
        // get GeneralName
        gn = ev.value[n];
        var altName = {
          type: gn.type,
          value: gn.value
        };
        e.altNames.push(altName); // Note: Support for types 1,2,6,7,8

        switch (gn.type) {
          // rfc822Name
          case 1: // dNSName

          case 2: // uniformResourceIdentifier (URI)

          case 6:
            break;
          // IPAddress

          case 7:
            // convert to IPv4/IPv6 string representation
            altName.ip = forge.util.bytesToIP(gn.value);
            break;
          // registeredID

          case 8:
            altName.oid = asn1.derToOid(gn.value);
            break;

          default: // unsupported

        }
      }
    } else if (e.name === 'subjectKeyIdentifier') {
      // value is an OCTETSTRING w/the hash of the key-type specific
      // public key structure (eg: RSAPublicKey)
      var ev = asn1.fromDer(e.value);
      e.subjectKeyIdentifier = forge.util.bytesToHex(ev.value);
    }
  }

  return e;
};
/**
 * Converts a PKCS#10 certification request (CSR) from an ASN.1 object.
 *
 * Note: If the certification request is to be verified then compute hash
 * should be set to true. There is currently no implementation for converting
 * a certificate back to ASN.1 so the CertificationRequestInfo part of the
 * ASN.1 object needs to be scanned before the csr object is created.
 *
 * @param obj the asn1 representation of a PKCS#10 certification request (CSR).
 * @param computeHash true to compute the hash for verification.
 *
 * @return the certification request (CSR).
 */


pki.certificationRequestFromAsn1 = function (obj, computeHash) {
  // validate certification request and capture data
  var capture = {};
  var errors = [];

  if (!asn1.validate(obj, certificationRequestValidator, capture, errors)) {
    var error = new Error('Cannot read PKCS#10 certificate request. ' + 'ASN.1 object is not a PKCS#10 CertificationRequest.');
    error.errors = errors;
    throw error;
  } // get oid


  var oid = asn1.derToOid(capture.publicKeyOid);

  if (oid !== pki.oids.rsaEncryption) {
    throw new Error('Cannot read public key. OID is not RSA.');
  } // create certification request


  var csr = pki.createCertificationRequest();
  csr.version = capture.csrVersion ? capture.csrVersion.charCodeAt(0) : 0;
  csr.signatureOid = forge.asn1.derToOid(capture.csrSignatureOid);
  csr.signatureParameters = _readSignatureParameters(csr.signatureOid, capture.csrSignatureParams, true);
  csr.siginfo.algorithmOid = forge.asn1.derToOid(capture.csrSignatureOid);
  csr.siginfo.parameters = _readSignatureParameters(csr.siginfo.algorithmOid, capture.csrSignatureParams, false);
  csr.signature = capture.csrSignature; // keep CertificationRequestInfo to preserve signature when exporting

  csr.certificationRequestInfo = capture.certificationRequestInfo;

  if (computeHash) {
    // check signature OID for supported signature types
    csr.md = null;

    if (csr.signatureOid in oids) {
      var oid = oids[csr.signatureOid];

      switch (oid) {
        case 'sha1WithRSAEncryption':
          csr.md = forge.md.sha1.create();
          break;

        case 'md5WithRSAEncryption':
          csr.md = forge.md.md5.create();
          break;

        case 'sha256WithRSAEncryption':
          csr.md = forge.md.sha256.create();
          break;

        case 'sha384WithRSAEncryption':
          csr.md = forge.md.sha384.create();
          break;

        case 'sha512WithRSAEncryption':
          csr.md = forge.md.sha512.create();
          break;

        case 'RSASSA-PSS':
          csr.md = forge.md.sha256.create();
          break;
      }
    }

    if (csr.md === null) {
      var error = new Error('Could not compute certification request digest. ' + 'Unknown signature OID.');
      error.signatureOid = csr.signatureOid;
      throw error;
    } // produce DER formatted CertificationRequestInfo and digest it


    var bytes = asn1.toDer(csr.certificationRequestInfo);
    csr.md.update(bytes.getBytes());
  } // handle subject, build subject message digest


  var smd = forge.md.sha1.create();

  csr.subject.getField = function (sn) {
    return _getAttribute(csr.subject, sn);
  };

  csr.subject.addField = function (attr) {
    _fillMissingFields([attr]);

    csr.subject.attributes.push(attr);
  };

  csr.subject.attributes = pki.RDNAttributesAsArray(capture.certificationRequestInfoSubject, smd);
  csr.subject.hash = smd.digest().toHex(); // convert RSA public key from ASN.1

  csr.publicKey = pki.publicKeyFromAsn1(capture.subjectPublicKeyInfo); // convert attributes from ASN.1

  csr.getAttribute = function (sn) {
    return _getAttribute(csr, sn);
  };

  csr.addAttribute = function (attr) {
    _fillMissingFields([attr]);

    csr.attributes.push(attr);
  };

  csr.attributes = pki.CRIAttributesAsArray(capture.certificationRequestInfoAttributes || []);
  return csr;
};
/**
 * Creates an empty certification request (a CSR or certificate signing
 * request). Once created, its public key and attributes can be set and then
 * it can be signed.
 *
 * @return the empty certification request.
 */


pki.createCertificationRequest = function () {
  var csr = {};
  csr.version = 0x00;
  csr.signatureOid = null;
  csr.signature = null;
  csr.siginfo = {};
  csr.siginfo.algorithmOid = null;
  csr.subject = {};

  csr.subject.getField = function (sn) {
    return _getAttribute(csr.subject, sn);
  };

  csr.subject.addField = function (attr) {
    _fillMissingFields([attr]);

    csr.subject.attributes.push(attr);
  };

  csr.subject.attributes = [];
  csr.subject.hash = null;
  csr.publicKey = null;
  csr.attributes = [];

  csr.getAttribute = function (sn) {
    return _getAttribute(csr, sn);
  };

  csr.addAttribute = function (attr) {
    _fillMissingFields([attr]);

    csr.attributes.push(attr);
  };

  csr.md = null;
  /**
   * Sets the subject of this certification request.
   *
   * @param attrs the array of subject attributes to use.
   */

  csr.setSubject = function (attrs) {
    // set new attributes
    _fillMissingFields(attrs);

    csr.subject.attributes = attrs;
    csr.subject.hash = null;
  };
  /**
   * Sets the attributes of this certification request.
   *
   * @param attrs the array of attributes to use.
   */


  csr.setAttributes = function (attrs) {
    // set new attributes
    _fillMissingFields(attrs);

    csr.attributes = attrs;
  };
  /**
   * Signs this certification request using the given private key.
   *
   * @param key the private key to sign with.
   * @param md the message digest object to use (defaults to forge.md.sha1).
   */


  csr.sign = function (key, md) {
    // TODO: get signature OID from private key
    csr.md = md || forge.md.sha1.create();
    var algorithmOid = oids[csr.md.algorithm + 'WithRSAEncryption'];

    if (!algorithmOid) {
      var error = new Error('Could not compute certification request digest. ' + 'Unknown message digest algorithm OID.');
      error.algorithm = csr.md.algorithm;
      throw error;
    }

    csr.signatureOid = csr.siginfo.algorithmOid = algorithmOid; // get CertificationRequestInfo, convert to DER

    csr.certificationRequestInfo = pki.getCertificationRequestInfo(csr);
    var bytes = asn1.toDer(csr.certificationRequestInfo); // digest and sign

    csr.md.update(bytes.getBytes());
    csr.signature = key.sign(csr.md);
  };
  /**
   * Attempts verify the signature on the passed certification request using
   * its public key.
   *
   * A CSR that has been exported to a file in PEM format can be verified using
   * OpenSSL using this command:
   *
   * openssl req -in <the-csr-pem-file> -verify -noout -text
   *
   * @return true if verified, false if not.
   */


  csr.verify = function () {
    var rval = false;
    var md = csr.md;

    if (md === null) {
      // check signature OID for supported signature types
      if (csr.signatureOid in oids) {
        // TODO: create DRY `OID to md` function
        var oid = oids[csr.signatureOid];

        switch (oid) {
          case 'sha1WithRSAEncryption':
            md = forge.md.sha1.create();
            break;

          case 'md5WithRSAEncryption':
            md = forge.md.md5.create();
            break;

          case 'sha256WithRSAEncryption':
            md = forge.md.sha256.create();
            break;

          case 'sha384WithRSAEncryption':
            md = forge.md.sha384.create();
            break;

          case 'sha512WithRSAEncryption':
            md = forge.md.sha512.create();
            break;

          case 'RSASSA-PSS':
            md = forge.md.sha256.create();
            break;
        }
      }

      if (md === null) {
        var error = new Error('Could not compute certification request digest. ' + 'Unknown signature OID.');
        error.signatureOid = csr.signatureOid;
        throw error;
      } // produce DER formatted CertificationRequestInfo and digest it


      var cri = csr.certificationRequestInfo || pki.getCertificationRequestInfo(csr);
      var bytes = asn1.toDer(cri);
      md.update(bytes.getBytes());
    }

    if (md !== null) {
      var scheme;

      switch (csr.signatureOid) {
        case oids.sha1WithRSAEncryption:
          /* use PKCS#1 v1.5 padding scheme */
          break;

        case oids['RSASSA-PSS']:
          var hash, mgf;
          /* initialize mgf */

          hash = oids[csr.signatureParameters.mgf.hash.algorithmOid];

          if (hash === undefined || forge.md[hash] === undefined) {
            var error = new Error('Unsupported MGF hash function.');
            error.oid = csr.signatureParameters.mgf.hash.algorithmOid;
            error.name = hash;
            throw error;
          }

          mgf = oids[csr.signatureParameters.mgf.algorithmOid];

          if (mgf === undefined || forge.mgf[mgf] === undefined) {
            var error = new Error('Unsupported MGF function.');
            error.oid = csr.signatureParameters.mgf.algorithmOid;
            error.name = mgf;
            throw error;
          }

          mgf = forge.mgf[mgf].create(forge.md[hash].create());
          /* initialize hash function */

          hash = oids[csr.signatureParameters.hash.algorithmOid];

          if (hash === undefined || forge.md[hash] === undefined) {
            var error = new Error('Unsupported RSASSA-PSS hash function.');
            error.oid = csr.signatureParameters.hash.algorithmOid;
            error.name = hash;
            throw error;
          }

          scheme = forge.pss.create(forge.md[hash].create(), mgf, csr.signatureParameters.saltLength);
          break;
      } // verify signature on csr using its public key


      rval = csr.publicKey.verify(md.digest().getBytes(), csr.signature, scheme);
    }

    return rval;
  };

  return csr;
};
/**
 * Converts an X.509 subject or issuer to an ASN.1 RDNSequence.
 *
 * @param obj the subject or issuer (distinguished name).
 *
 * @return the ASN.1 RDNSequence.
 */


function _dnToAsn1(obj) {
  // create an empty RDNSequence
  var rval = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []); // iterate over attributes

  var attr, set;
  var attrs = obj.attributes;

  for (var i = 0; i < attrs.length; ++i) {
    attr = attrs[i];
    var value = attr.value; // reuse tag class for attribute value if available

    var valueTagClass = asn1.Type.PRINTABLESTRING;

    if ('valueTagClass' in attr) {
      valueTagClass = attr.valueTagClass;

      if (valueTagClass === asn1.Type.UTF8) {
        value = forge.util.encodeUtf8(value);
      } // FIXME: handle more encodings

    } // create a RelativeDistinguishedName set
    // each value in the set is an AttributeTypeAndValue first
    // containing the type (an OID) and second the value


    set = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// AttributeType
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(attr.type).getBytes()), // AttributeValue
    asn1.create(asn1.Class.UNIVERSAL, valueTagClass, false, value)])]);
    rval.value.push(set);
  }

  return rval;
}
/**
 * Gets all printable attributes (typically of an issuer or subject) in a
 * simplified JSON format for display.
 *
 * @param attrs the attributes.
 *
 * @return the JSON for display.
 */


function _getAttributesAsJson(attrs) {
  var rval = {};

  for (var i = 0; i < attrs.length; ++i) {
    var attr = attrs[i];

    if (attr.shortName && (attr.valueTagClass === asn1.Type.UTF8 || attr.valueTagClass === asn1.Type.PRINTABLESTRING || attr.valueTagClass === asn1.Type.IA5STRING)) {
      var value = attr.value;

      if (attr.valueTagClass === asn1.Type.UTF8) {
        value = forge.util.encodeUtf8(attr.value);
      }

      if (!(attr.shortName in rval)) {
        rval[attr.shortName] = value;
      } else if (forge.util.isArray(rval[attr.shortName])) {
        rval[attr.shortName].push(value);
      } else {
        rval[attr.shortName] = [rval[attr.shortName], value];
      }
    }
  }

  return rval;
}
/**
 * Fills in missing fields in attributes.
 *
 * @param attrs the attributes to fill missing fields in.
 */


function _fillMissingFields(attrs) {
  var attr;

  for (var i = 0; i < attrs.length; ++i) {
    attr = attrs[i]; // populate missing name

    if (typeof attr.name === 'undefined') {
      if (attr.type && attr.type in pki.oids) {
        attr.name = pki.oids[attr.type];
      } else if (attr.shortName && attr.shortName in _shortNames) {
        attr.name = pki.oids[_shortNames[attr.shortName]];
      }
    } // populate missing type (OID)


    if (typeof attr.type === 'undefined') {
      if (attr.name && attr.name in pki.oids) {
        attr.type = pki.oids[attr.name];
      } else {
        var error = new Error('Attribute type not specified.');
        error.attribute = attr;
        throw error;
      }
    } // populate missing shortname


    if (typeof attr.shortName === 'undefined') {
      if (attr.name && attr.name in _shortNames) {
        attr.shortName = _shortNames[attr.name];
      }
    } // convert extensions to value


    if (attr.type === oids.extensionRequest) {
      attr.valueConstructed = true;
      attr.valueTagClass = asn1.Type.SEQUENCE;

      if (!attr.value && attr.extensions) {
        attr.value = [];

        for (var ei = 0; ei < attr.extensions.length; ++ei) {
          attr.value.push(pki.certificateExtensionToAsn1(_fillMissingExtensionFields(attr.extensions[ei])));
        }
      }
    }

    if (typeof attr.value === 'undefined') {
      var error = new Error('Attribute value not specified.');
      error.attribute = attr;
      throw error;
    }
  }
}
/**
 * Fills in missing fields in certificate extensions.
 *
 * @param e the extension.
 * @param [options] the options to use.
 *          [cert] the certificate the extensions are for.
 *
 * @return the extension.
 */


function _fillMissingExtensionFields(e, options) {
  options = options || {}; // populate missing name

  if (typeof e.name === 'undefined') {
    if (e.id && e.id in pki.oids) {
      e.name = pki.oids[e.id];
    }
  } // populate missing id


  if (typeof e.id === 'undefined') {
    if (e.name && e.name in pki.oids) {
      e.id = pki.oids[e.name];
    } else {
      var error = new Error('Extension ID not specified.');
      error.extension = e;
      throw error;
    }
  }

  if (typeof e.value !== 'undefined') {
    return e;
  } // handle missing value:
  // value is a BIT STRING


  if (e.name === 'keyUsage') {
    // build flags
    var unused = 0;
    var b2 = 0x00;
    var b3 = 0x00;

    if (e.digitalSignature) {
      b2 |= 0x80;
      unused = 7;
    }

    if (e.nonRepudiation) {
      b2 |= 0x40;
      unused = 6;
    }

    if (e.keyEncipherment) {
      b2 |= 0x20;
      unused = 5;
    }

    if (e.dataEncipherment) {
      b2 |= 0x10;
      unused = 4;
    }

    if (e.keyAgreement) {
      b2 |= 0x08;
      unused = 3;
    }

    if (e.keyCertSign) {
      b2 |= 0x04;
      unused = 2;
    }

    if (e.cRLSign) {
      b2 |= 0x02;
      unused = 1;
    }

    if (e.encipherOnly) {
      b2 |= 0x01;
      unused = 0;
    }

    if (e.decipherOnly) {
      b3 |= 0x80;
      unused = 7;
    } // create bit string


    var value = String.fromCharCode(unused);

    if (b3 !== 0) {
      value += String.fromCharCode(b2) + String.fromCharCode(b3);
    } else if (b2 !== 0) {
      value += String.fromCharCode(b2);
    }

    e.value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false, value);
  } else if (e.name === 'basicConstraints') {
    // basicConstraints is a SEQUENCE
    e.value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []); // cA BOOLEAN flag defaults to false

    if (e.cA) {
      e.value.value.push(asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BOOLEAN, false, String.fromCharCode(0xFF)));
    }

    if ('pathLenConstraint' in e) {
      e.value.value.push(asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, asn1.integerToDer(e.pathLenConstraint).getBytes()));
    }
  } else if (e.name === 'extKeyUsage') {
    // extKeyUsage is a SEQUENCE of OIDs
    e.value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);
    var seq = e.value.value;

    for (var key in e) {
      if (e[key] !== true) {
        continue;
      } // key is name in OID map


      if (key in oids) {
        seq.push(asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(oids[key]).getBytes()));
      } else if (key.indexOf('.') !== -1) {
        // assume key is an OID
        seq.push(asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(key).getBytes()));
      }
    }
  } else if (e.name === 'nsCertType') {
    // nsCertType is a BIT STRING
    // build flags
    var unused = 0;
    var b2 = 0x00;

    if (e.client) {
      b2 |= 0x80;
      unused = 7;
    }

    if (e.server) {
      b2 |= 0x40;
      unused = 6;
    }

    if (e.email) {
      b2 |= 0x20;
      unused = 5;
    }

    if (e.objsign) {
      b2 |= 0x10;
      unused = 4;
    }

    if (e.reserved) {
      b2 |= 0x08;
      unused = 3;
    }

    if (e.sslCA) {
      b2 |= 0x04;
      unused = 2;
    }

    if (e.emailCA) {
      b2 |= 0x02;
      unused = 1;
    }

    if (e.objCA) {
      b2 |= 0x01;
      unused = 0;
    } // create bit string


    var value = String.fromCharCode(unused);

    if (b2 !== 0) {
      value += String.fromCharCode(b2);
    }

    e.value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false, value);
  } else if (e.name === 'subjectAltName' || e.name === 'issuerAltName') {
    // SYNTAX SEQUENCE
    e.value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);
    var altName;

    for (var n = 0; n < e.altNames.length; ++n) {
      altName = e.altNames[n];
      var value = altName.value; // handle IP

      if (altName.type === 7 && altName.ip) {
        value = forge.util.bytesFromIP(altName.ip);

        if (value === null) {
          var error = new Error('Extension "ip" value is not a valid IPv4 or IPv6 address.');
          error.extension = e;
          throw error;
        }
      } else if (altName.type === 8) {
        // handle OID
        if (altName.oid) {
          value = asn1.oidToDer(asn1.oidToDer(altName.oid));
        } else {
          // deprecated ... convert value to OID
          value = asn1.oidToDer(value);
        }
      }

      e.value.value.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, altName.type, false, value));
    }
  } else if (e.name === 'nsComment' && options.cert) {
    // sanity check value is ASCII (req'd) and not too big
    if (!/^[\x00-\x7F]*$/.test(e.comment) || e.comment.length < 1 || e.comment.length > 128) {
      throw new Error('Invalid "nsComment" content.');
    } // IA5STRING opaque comment


    e.value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.IA5STRING, false, e.comment);
  } else if (e.name === 'subjectKeyIdentifier' && options.cert) {
    var ski = options.cert.generateSubjectKeyIdentifier();
    e.subjectKeyIdentifier = ski.toHex(); // OCTETSTRING w/digest

    e.value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, ski.getBytes());
  } else if (e.name === 'authorityKeyIdentifier' && options.cert) {
    // SYNTAX SEQUENCE
    e.value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);
    var seq = e.value.value;

    if (e.keyIdentifier) {
      var keyIdentifier = e.keyIdentifier === true ? options.cert.generateSubjectKeyIdentifier().getBytes() : e.keyIdentifier;
      seq.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, false, keyIdentifier));
    }

    if (e.authorityCertIssuer) {
      var authorityCertIssuer = [asn1.create(asn1.Class.CONTEXT_SPECIFIC, 4, true, [_dnToAsn1(e.authorityCertIssuer === true ? options.cert.issuer : e.authorityCertIssuer)])];
      seq.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, 1, true, authorityCertIssuer));
    }

    if (e.serialNumber) {
      var serialNumber = forge.util.hexToBytes(e.serialNumber === true ? options.cert.serialNumber : e.serialNumber);
      seq.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, 2, false, serialNumber));
    }
  } else if (e.name === 'cRLDistributionPoints') {
    e.value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);
    var seq = e.value.value; // Create sub SEQUENCE of DistributionPointName

    var subSeq = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []); // Create fullName CHOICE

    var fullNameGeneralNames = asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, []);
    var altName;

    for (var n = 0; n < e.altNames.length; ++n) {
      altName = e.altNames[n];
      var value = altName.value; // handle IP

      if (altName.type === 7 && altName.ip) {
        value = forge.util.bytesFromIP(altName.ip);

        if (value === null) {
          var error = new Error('Extension "ip" value is not a valid IPv4 or IPv6 address.');
          error.extension = e;
          throw error;
        }
      } else if (altName.type === 8) {
        // handle OID
        if (altName.oid) {
          value = asn1.oidToDer(asn1.oidToDer(altName.oid));
        } else {
          // deprecated ... convert value to OID
          value = asn1.oidToDer(value);
        }
      }

      fullNameGeneralNames.value.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, altName.type, false, value));
    } // Add to the parent SEQUENCE


    subSeq.value.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [fullNameGeneralNames]));
    seq.push(subSeq);
  } // ensure value has been defined by now


  if (typeof e.value === 'undefined') {
    var error = new Error('Extension value not specified.');
    error.extension = e;
    throw error;
  }

  return e;
}
/**
 * Convert signature parameters object to ASN.1
 *
 * @param {String} oid Signature algorithm OID
 * @param params The signature parametrs object
 * @return ASN.1 object representing signature parameters
 */


function _signatureParametersToAsn1(oid, params) {
  switch (oid) {
    case oids['RSASSA-PSS']:
      var parts = [];

      if (params.hash.algorithmOid !== undefined) {
        parts.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(params.hash.algorithmOid).getBytes()), asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')])]));
      }

      if (params.mgf.algorithmOid !== undefined) {
        parts.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, 1, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(params.mgf.algorithmOid).getBytes()), asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(params.mgf.hash.algorithmOid).getBytes()), asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')])])]));
      }

      if (params.saltLength !== undefined) {
        parts.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, 2, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, asn1.integerToDer(params.saltLength).getBytes())]));
      }

      return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, parts);

    default:
      return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '');
  }
}
/**
 * Converts a certification request's attributes to an ASN.1 set of
 * CRIAttributes.
 *
 * @param csr certification request.
 *
 * @return the ASN.1 set of CRIAttributes.
 */


function _CRIAttributesToAsn1(csr) {
  // create an empty context-specific container
  var rval = asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, []); // no attributes, return empty container

  if (csr.attributes.length === 0) {
    return rval;
  } // each attribute has a sequence with a type and a set of values


  var attrs = csr.attributes;

  for (var i = 0; i < attrs.length; ++i) {
    var attr = attrs[i];
    var value = attr.value; // reuse tag class for attribute value if available

    var valueTagClass = asn1.Type.UTF8;

    if ('valueTagClass' in attr) {
      valueTagClass = attr.valueTagClass;
    }

    if (valueTagClass === asn1.Type.UTF8) {
      value = forge.util.encodeUtf8(value);
    }

    var valueConstructed = false;

    if ('valueConstructed' in attr) {
      valueConstructed = attr.valueConstructed;
    } // FIXME: handle more encodings
    // create a RelativeDistinguishedName set
    // each value in the set is an AttributeTypeAndValue first
    // containing the type (an OID) and second the value


    var seq = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// AttributeType
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(attr.type).getBytes()), asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, [// AttributeValue
    asn1.create(asn1.Class.UNIVERSAL, valueTagClass, valueConstructed, value)])]);
    rval.value.push(seq);
  }

  return rval;
}

var jan_1_1950 = new Date('1950-01-01T00:00:00Z');
var jan_1_2050 = new Date('2050-01-01T00:00:00Z');
/**
 * Converts a Date object to ASN.1
 * Handles the different format before and after 1st January 2050
 *
 * @param date date object.
 *
 * @return the ASN.1 object representing the date.
 */

function _dateToAsn1(date) {
  if (date >= jan_1_1950 && date < jan_1_2050) {
    return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.UTCTIME, false, asn1.dateToUtcTime(date));
  } else {
    return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.GENERALIZEDTIME, false, asn1.dateToGeneralizedTime(date));
  }
}
/**
 * Gets the ASN.1 TBSCertificate part of an X.509v3 certificate.
 *
 * @param cert the certificate.
 *
 * @return the asn1 TBSCertificate.
 */


pki.getTBSCertificate = function (cert) {
  // TBSCertificate
  var notBefore = _dateToAsn1(cert.validity.notBefore);

  var notAfter = _dateToAsn1(cert.validity.notAfter);

  var tbs = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// version
  asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [// integer
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, asn1.integerToDer(cert.version).getBytes())]), // serialNumber
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, forge.util.hexToBytes(cert.serialNumber)), // signature
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// algorithm
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(cert.siginfo.algorithmOid).getBytes()), // parameters
  _signatureParametersToAsn1(cert.siginfo.algorithmOid, cert.siginfo.parameters)]), // issuer
  _dnToAsn1(cert.issuer), // validity
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [notBefore, notAfter]), // subject
  _dnToAsn1(cert.subject), // SubjectPublicKeyInfo
  pki.publicKeyToAsn1(cert.publicKey)]);

  if (cert.issuer.uniqueId) {
    // issuerUniqueID (optional)
    tbs.value.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, 1, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false, // TODO: support arbitrary bit length ids
    String.fromCharCode(0x00) + cert.issuer.uniqueId)]));
  }

  if (cert.subject.uniqueId) {
    // subjectUniqueID (optional)
    tbs.value.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, 2, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false, // TODO: support arbitrary bit length ids
    String.fromCharCode(0x00) + cert.subject.uniqueId)]));
  }

  if (cert.extensions.length > 0) {
    // extensions (optional)
    tbs.value.push(pki.certificateExtensionsToAsn1(cert.extensions));
  }

  return tbs;
};
/**
 * Gets the ASN.1 CertificationRequestInfo part of a
 * PKCS#10 CertificationRequest.
 *
 * @param csr the certification request.
 *
 * @return the asn1 CertificationRequestInfo.
 */


pki.getCertificationRequestInfo = function (csr) {
  // CertificationRequestInfo
  var cri = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// version
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, asn1.integerToDer(csr.version).getBytes()), // subject
  _dnToAsn1(csr.subject), // SubjectPublicKeyInfo
  pki.publicKeyToAsn1(csr.publicKey), // attributes
  _CRIAttributesToAsn1(csr)]);
  return cri;
};
/**
 * Converts a DistinguishedName (subject or issuer) to an ASN.1 object.
 *
 * @param dn the DistinguishedName.
 *
 * @return the asn1 representation of a DistinguishedName.
 */


pki.distinguishedNameToAsn1 = function (dn) {
  return _dnToAsn1(dn);
};
/**
 * Converts an X.509v3 RSA certificate to an ASN.1 object.
 *
 * @param cert the certificate.
 *
 * @return the asn1 representation of an X.509v3 RSA certificate.
 */


pki.certificateToAsn1 = function (cert) {
  // prefer cached TBSCertificate over generating one
  var tbsCertificate = cert.tbsCertificate || pki.getTBSCertificate(cert); // Certificate

  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// TBSCertificate
  tbsCertificate, // AlgorithmIdentifier (signature algorithm)
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// algorithm
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(cert.signatureOid).getBytes()), // parameters
  _signatureParametersToAsn1(cert.signatureOid, cert.signatureParameters)]), // SignatureValue
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false, String.fromCharCode(0x00) + cert.signature)]);
};
/**
 * Converts X.509v3 certificate extensions to ASN.1.
 *
 * @param exts the extensions to convert.
 *
 * @return the extensions in ASN.1 format.
 */


pki.certificateExtensionsToAsn1 = function (exts) {
  // create top-level extension container
  var rval = asn1.create(asn1.Class.CONTEXT_SPECIFIC, 3, true, []); // create extension sequence (stores a sequence for each extension)

  var seq = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);
  rval.value.push(seq);

  for (var i = 0; i < exts.length; ++i) {
    seq.value.push(pki.certificateExtensionToAsn1(exts[i]));
  }

  return rval;
};
/**
 * Converts a single certificate extension to ASN.1.
 *
 * @param ext the extension to convert.
 *
 * @return the extension in ASN.1 format.
 */


pki.certificateExtensionToAsn1 = function (ext) {
  // create a sequence for each extension
  var extseq = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []); // extnID (OID)

  extseq.value.push(asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(ext.id).getBytes())); // critical defaults to false

  if (ext.critical) {
    // critical BOOLEAN DEFAULT FALSE
    extseq.value.push(asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BOOLEAN, false, String.fromCharCode(0xFF)));
  }

  var value = ext.value;

  if (typeof ext.value !== 'string') {
    // value is asn.1
    value = asn1.toDer(value).getBytes();
  } // extnValue (OCTET STRING)


  extseq.value.push(asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, value));
  return extseq;
};
/**
 * Converts a PKCS#10 certification request to an ASN.1 object.
 *
 * @param csr the certification request.
 *
 * @return the asn1 representation of a certification request.
 */


pki.certificationRequestToAsn1 = function (csr) {
  // prefer cached CertificationRequestInfo over generating one
  var cri = csr.certificationRequestInfo || pki.getCertificationRequestInfo(csr); // Certificate

  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// CertificationRequestInfo
  cri, // AlgorithmIdentifier (signature algorithm)
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// algorithm
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(csr.signatureOid).getBytes()), // parameters
  _signatureParametersToAsn1(csr.signatureOid, csr.signatureParameters)]), // signature
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false, String.fromCharCode(0x00) + csr.signature)]);
};
/**
 * Creates a CA store.
 *
 * @param certs an optional array of certificate objects or PEM-formatted
 *          certificate strings to add to the CA store.
 *
 * @return the CA store.
 */


pki.createCaStore = function (certs) {
  // create CA store
  var caStore = {
    // stored certificates
    certs: {}
  };
  /**
   * Gets the certificate that issued the passed certificate or its
   * 'parent'.
   *
   * @param cert the certificate to get the parent for.
   *
   * @return the parent certificate or null if none was found.
   */

  caStore.getIssuer = function (cert) {
    var rval = getBySubject(cert.issuer); // see if there are multiple matches

    /*if(forge.util.isArray(rval)) {
      // TODO: resolve multiple matches by checking
      // authorityKey/subjectKey/issuerUniqueID/other identifiers, etc.
      // FIXME: or alternatively do authority key mapping
      // if possible (X.509v1 certs can't work?)
      throw new Error('Resolving multiple issuer matches not implemented yet.');
    }*/

    return rval;
  };
  /**
   * Adds a trusted certificate to the store.
   *
   * @param cert the certificate to add as a trusted certificate (either a
   *          pki.certificate object or a PEM-formatted certificate).
   */


  caStore.addCertificate = function (cert) {
    // convert from pem if necessary
    if (typeof cert === 'string') {
      cert = forge.pki.certificateFromPem(cert);
    }

    ensureSubjectHasHash(cert.subject);

    if (!caStore.hasCertificate(cert)) {
      // avoid duplicate certificates in store
      if (cert.subject.hash in caStore.certs) {
        // subject hash already exists, append to array
        var tmp = caStore.certs[cert.subject.hash];

        if (!forge.util.isArray(tmp)) {
          tmp = [tmp];
        }

        tmp.push(cert);
        caStore.certs[cert.subject.hash] = tmp;
      } else {
        caStore.certs[cert.subject.hash] = cert;
      }
    }
  };
  /**
   * Checks to see if the given certificate is in the store.
   *
   * @param cert the certificate to check (either a pki.certificate or a
   *          PEM-formatted certificate).
   *
   * @return true if the certificate is in the store, false if not.
   */


  caStore.hasCertificate = function (cert) {
    // convert from pem if necessary
    if (typeof cert === 'string') {
      cert = forge.pki.certificateFromPem(cert);
    }

    var match = getBySubject(cert.subject);

    if (!match) {
      return false;
    }

    if (!forge.util.isArray(match)) {
      match = [match];
    } // compare DER-encoding of certificates


    var der1 = asn1.toDer(pki.certificateToAsn1(cert)).getBytes();

    for (var i = 0; i < match.length; ++i) {
      var der2 = asn1.toDer(pki.certificateToAsn1(match[i])).getBytes();

      if (der1 === der2) {
        return true;
      }
    }

    return false;
  };
  /**
   * Lists all of the certificates kept in the store.
   *
   * @return an array of all of the pki.certificate objects in the store.
   */


  caStore.listAllCertificates = function () {
    var certList = [];

    for (var hash in caStore.certs) {
      if (caStore.certs.hasOwnProperty(hash)) {
        var value = caStore.certs[hash];

        if (!forge.util.isArray(value)) {
          certList.push(value);
        } else {
          for (var i = 0; i < value.length; ++i) {
            certList.push(value[i]);
          }
        }
      }
    }

    return certList;
  };
  /**
   * Removes a certificate from the store.
   *
   * @param cert the certificate to remove (either a pki.certificate or a
   *          PEM-formatted certificate).
   *
   * @return the certificate that was removed or null if the certificate
   *           wasn't in store.
   */


  caStore.removeCertificate = function (cert) {
    var result; // convert from pem if necessary

    if (typeof cert === 'string') {
      cert = forge.pki.certificateFromPem(cert);
    }

    ensureSubjectHasHash(cert.subject);

    if (!caStore.hasCertificate(cert)) {
      return null;
    }

    var match = getBySubject(cert.subject);

    if (!forge.util.isArray(match)) {
      result = caStore.certs[cert.subject.hash];
      delete caStore.certs[cert.subject.hash];
      return result;
    } // compare DER-encoding of certificates


    var der1 = asn1.toDer(pki.certificateToAsn1(cert)).getBytes();

    for (var i = 0; i < match.length; ++i) {
      var der2 = asn1.toDer(pki.certificateToAsn1(match[i])).getBytes();

      if (der1 === der2) {
        result = match[i];
        match.splice(i, 1);
      }
    }

    if (match.length === 0) {
      delete caStore.certs[cert.subject.hash];
    }

    return result;
  };

  function getBySubject(subject) {
    ensureSubjectHasHash(subject);
    return caStore.certs[subject.hash] || null;
  }

  function ensureSubjectHasHash(subject) {
    // produce subject hash if it doesn't exist
    if (!subject.hash) {
      var md = forge.md.sha1.create();
      subject.attributes = pki.RDNAttributesAsArray(_dnToAsn1(subject), md);
      subject.hash = md.digest().toHex();
    }
  } // auto-add passed in certs


  if (certs) {
    // parse PEM-formatted certificates as necessary
    for (var i = 0; i < certs.length; ++i) {
      var cert = certs[i];
      caStore.addCertificate(cert);
    }
  }

  return caStore;
};
/**
 * Certificate verification errors, based on TLS.
 */


pki.certificateError = {
  bad_certificate: 'forge.pki.BadCertificate',
  unsupported_certificate: 'forge.pki.UnsupportedCertificate',
  certificate_revoked: 'forge.pki.CertificateRevoked',
  certificate_expired: 'forge.pki.CertificateExpired',
  certificate_unknown: 'forge.pki.CertificateUnknown',
  unknown_ca: 'forge.pki.UnknownCertificateAuthority'
};
/**
 * Verifies a certificate chain against the given Certificate Authority store
 * with an optional custom verify callback.
 *
 * @param caStore a certificate store to verify against.
 * @param chain the certificate chain to verify, with the root or highest
 *          authority at the end (an array of certificates).
 * @param options a callback to be called for every certificate in the chain or
 *                  an object with:
 *                  verify a callback to be called for every certificate in the
 *                    chain
 *                  validityCheckDate the date against which the certificate
 *                    validity period should be checked. Pass null to not check
 *                    the validity period. By default, the current date is used.
 *
 * The verify callback has the following signature:
 *
 * verified - Set to true if certificate was verified, otherwise the
 *   pki.certificateError for why the certificate failed.
 * depth - The current index in the chain, where 0 is the end point's cert.
 * certs - The certificate chain, *NOTE* an empty chain indicates an anonymous
 *   end point.
 *
 * The function returns true on success and on failure either the appropriate
 * pki.certificateError or an object with 'error' set to the appropriate
 * pki.certificateError and 'message' set to a custom error message.
 *
 * @return true if successful, error thrown if not.
 */

pki.verifyCertificateChain = function (caStore, chain, options) {
  /* From: RFC3280 - Internet X.509 Public Key Infrastructure Certificate
    Section 6: Certification Path Validation
    See inline parentheticals related to this particular implementation.
     The primary goal of path validation is to verify the binding between
    a subject distinguished name or a subject alternative name and subject
    public key, as represented in the end entity certificate, based on the
    public key of the trust anchor. This requires obtaining a sequence of
    certificates that support that binding. That sequence should be provided
    in the passed 'chain'. The trust anchor should be in the given CA
    store. The 'end entity' certificate is the certificate provided by the
    end point (typically a server) and is the first in the chain.
     To meet this goal, the path validation process verifies, among other
    things, that a prospective certification path (a sequence of n
    certificates or a 'chain') satisfies the following conditions:
     (a) for all x in {1, ..., n-1}, the subject of certificate x is
          the issuer of certificate x+1;
     (b) certificate 1 is issued by the trust anchor;
     (c) certificate n is the certificate to be validated; and
     (d) for all x in {1, ..., n}, the certificate was valid at the
          time in question.
     Note that here 'n' is index 0 in the chain and 1 is the last certificate
    in the chain and it must be signed by a certificate in the connection's
    CA store.
     The path validation process also determines the set of certificate
    policies that are valid for this path, based on the certificate policies
    extension, policy mapping extension, policy constraints extension, and
    inhibit any-policy extension.
     Note: Policy mapping extension not supported (Not Required).
     Note: If the certificate has an unsupported critical extension, then it
    must be rejected.
     Note: A certificate is self-issued if the DNs that appear in the subject
    and issuer fields are identical and are not empty.
     The path validation algorithm assumes the following seven inputs are
    provided to the path processing logic. What this specific implementation
    will use is provided parenthetically:
     (a) a prospective certification path of length n (the 'chain')
    (b) the current date/time: ('now').
    (c) user-initial-policy-set: A set of certificate policy identifiers
          naming the policies that are acceptable to the certificate user.
          The user-initial-policy-set contains the special value any-policy
          if the user is not concerned about certificate policy
          (Not implemented. Any policy is accepted).
    (d) trust anchor information, describing a CA that serves as a trust
          anchor for the certification path. The trust anchor information
          includes:
       (1)  the trusted issuer name,
      (2)  the trusted public key algorithm,
      (3)  the trusted public key, and
      (4)  optionally, the trusted public key parameters associated
             with the public key.
       (Trust anchors are provided via certificates in the CA store).
       The trust anchor information may be provided to the path processing
      procedure in the form of a self-signed certificate. The trusted anchor
      information is trusted because it was delivered to the path processing
      procedure by some trustworthy out-of-band procedure. If the trusted
      public key algorithm requires parameters, then the parameters are
      provided along with the trusted public key (No parameters used in this
      implementation).
     (e) initial-policy-mapping-inhibit, which indicates if policy mapping is
          allowed in the certification path.
          (Not implemented, no policy checking)
     (f) initial-explicit-policy, which indicates if the path must be valid
          for at least one of the certificate policies in the user-initial-
          policy-set.
          (Not implemented, no policy checking)
     (g) initial-any-policy-inhibit, which indicates whether the
          anyPolicy OID should be processed if it is included in a
          certificate.
          (Not implemented, so any policy is valid provided that it is
          not marked as critical) */

  /* Basic Path Processing:
     For each certificate in the 'chain', the following is checked:
     1. The certificate validity period includes the current time.
    2. The certificate was signed by its parent (where the parent is either
       the next in the chain or from the CA store). Allow processing to
       continue to the next step if no parent is found but the certificate is
       in the CA store.
    3. TODO: The certificate has not been revoked.
    4. The certificate issuer name matches the parent's subject name.
    5. TODO: If the certificate is self-issued and not the final certificate
       in the chain, skip this step, otherwise verify that the subject name
       is within one of the permitted subtrees of X.500 distinguished names
       and that each of the alternative names in the subjectAltName extension
       (critical or non-critical) is within one of the permitted subtrees for
       that name type.
    6. TODO: If the certificate is self-issued and not the final certificate
       in the chain, skip this step, otherwise verify that the subject name
       is not within one of the excluded subtrees for X.500 distinguished
       names and none of the subjectAltName extension names are excluded for
       that name type.
    7. The other steps in the algorithm for basic path processing involve
       handling the policy extension which is not presently supported in this
       implementation. Instead, if a critical policy extension is found, the
       certificate is rejected as not supported.
    8. If the certificate is not the first or if its the only certificate in
       the chain (having no parent from the CA store or is self-signed) and it
       has a critical key usage extension, verify that the keyCertSign bit is
       set. If the key usage extension exists, verify that the basic
       constraints extension exists. If the basic constraints extension exists,
       verify that the cA flag is set. If pathLenConstraint is set, ensure that
       the number of certificates that precede in the chain (come earlier
       in the chain as implemented below), excluding the very first in the
       chain (typically the end-entity one), isn't greater than the
       pathLenConstraint. This constraint limits the number of intermediate
       CAs that may appear below a CA before only end-entity certificates
       may be issued. */
  // if a verify callback is passed as the third parameter, package it within
  // the options object. This is to support a legacy function signature that
  // expected the verify callback as the third parameter.
  if (typeof options === 'function') {
    options = {
      verify: options
    };
  }

  options = options || {}; // copy cert chain references to another array to protect against changes
  // in verify callback

  chain = chain.slice(0);
  var certs = chain.slice(0);
  var validityCheckDate = options.validityCheckDate; // if no validityCheckDate is specified, default to the current date. Make
  // sure to maintain the value null because it indicates that the validity
  // period should not be checked.

  if (typeof validityCheckDate === 'undefined') {
    validityCheckDate = new Date();
  } // verify each cert in the chain using its parent, where the parent
  // is either the next in the chain or from the CA store


  var first = true;
  var error = null;
  var depth = 0;

  do {
    var cert = chain.shift();
    var parent = null;
    var selfSigned = false;

    if (validityCheckDate) {
      // 1. check valid time
      if (validityCheckDate < cert.validity.notBefore || validityCheckDate > cert.validity.notAfter) {
        error = {
          message: 'Certificate is not valid yet or has expired.',
          error: pki.certificateError.certificate_expired,
          notBefore: cert.validity.notBefore,
          notAfter: cert.validity.notAfter,
          // TODO: we might want to reconsider renaming 'now' to
          // 'validityCheckDate' should this API be changed in the future.
          now: validityCheckDate
        };
      }
    } // 2. verify with parent from chain or CA store


    if (error === null) {
      parent = chain[0] || caStore.getIssuer(cert);

      if (parent === null) {
        // check for self-signed cert
        if (cert.isIssuer(cert)) {
          selfSigned = true;
          parent = cert;
        }
      }

      if (parent) {
        // FIXME: current CA store implementation might have multiple
        // certificates where the issuer can't be determined from the
        // certificate (happens rarely with, eg: old certificates) so normalize
        // by always putting parents into an array
        // TODO: there's may be an extreme degenerate case currently uncovered
        // where an old intermediate certificate seems to have a matching parent
        // but none of the parents actually verify ... but the intermediate
        // is in the CA and it should pass this check; needs investigation
        var parents = parent;

        if (!forge.util.isArray(parents)) {
          parents = [parents];
        } // try to verify with each possible parent (typically only one)


        var verified = false;

        while (!verified && parents.length > 0) {
          parent = parents.shift();

          try {
            verified = parent.verify(cert);
          } catch (ex) {// failure to verify, don't care why, try next one
          }
        }

        if (!verified) {
          error = {
            message: 'Certificate signature is invalid.',
            error: pki.certificateError.bad_certificate
          };
        }
      }

      if (error === null && (!parent || selfSigned) && !caStore.hasCertificate(cert)) {
        // no parent issuer and certificate itself is not trusted
        error = {
          message: 'Certificate is not trusted.',
          error: pki.certificateError.unknown_ca
        };
      }
    } // TODO: 3. check revoked
    // 4. check for matching issuer/subject


    if (error === null && parent && !cert.isIssuer(parent)) {
      // parent is not issuer
      error = {
        message: 'Certificate issuer is invalid.',
        error: pki.certificateError.bad_certificate
      };
    } // 5. TODO: check names with permitted names tree
    // 6. TODO: check names against excluded names tree
    // 7. check for unsupported critical extensions


    if (error === null) {
      // supported extensions
      var se = {
        keyUsage: true,
        basicConstraints: true
      };

      for (var i = 0; error === null && i < cert.extensions.length; ++i) {
        var ext = cert.extensions[i];

        if (ext.critical && !(ext.name in se)) {
          error = {
            message: 'Certificate has an unsupported critical extension.',
            error: pki.certificateError.unsupported_certificate
          };
        }
      }
    } // 8. check for CA if cert is not first or is the only certificate
    // remaining in chain with no parent or is self-signed


    if (error === null && (!first || chain.length === 0 && (!parent || selfSigned))) {
      // first check keyUsage extension and then basic constraints
      var bcExt = cert.getExtension('basicConstraints');
      var keyUsageExt = cert.getExtension('keyUsage');

      if (keyUsageExt !== null) {
        // keyCertSign must be true and there must be a basic
        // constraints extension
        if (!keyUsageExt.keyCertSign || bcExt === null) {
          // bad certificate
          error = {
            message: 'Certificate keyUsage or basicConstraints conflict ' + 'or indicate that the certificate is not a CA. ' + 'If the certificate is the only one in the chain or ' + 'isn\'t the first then the certificate must be a ' + 'valid CA.',
            error: pki.certificateError.bad_certificate
          };
        }
      } // basic constraints cA flag must be set


      if (error === null && bcExt !== null && !bcExt.cA) {
        // bad certificate
        error = {
          message: 'Certificate basicConstraints indicates the certificate ' + 'is not a CA.',
          error: pki.certificateError.bad_certificate
        };
      } // if error is not null and keyUsage is available, then we know it
      // has keyCertSign and there is a basic constraints extension too,
      // which means we can check pathLenConstraint (if it exists)


      if (error === null && keyUsageExt !== null && 'pathLenConstraint' in bcExt) {
        // pathLen is the maximum # of intermediate CA certs that can be
        // found between the current certificate and the end-entity (depth 0)
        // certificate; this number does not include the end-entity (depth 0,
        // last in the chain) even if it happens to be a CA certificate itself
        var pathLen = depth - 1;

        if (pathLen > bcExt.pathLenConstraint) {
          // pathLenConstraint violated, bad certificate
          error = {
            message: 'Certificate basicConstraints pathLenConstraint violated.',
            error: pki.certificateError.bad_certificate
          };
        }
      }
    } // call application callback


    var vfd = error === null ? true : error.error;
    var ret = options.verify ? options.verify(vfd, depth, certs) : vfd;

    if (ret === true) {
      // clear any set error
      error = null;
    } else {
      // if passed basic tests, set default message and alert
      if (vfd === true) {
        error = {
          message: 'The application rejected the certificate.',
          error: pki.certificateError.bad_certificate
        };
      } // check for custom error info


      if (ret || ret === 0) {
        // set custom message and error
        if (typeof ret === 'object' && !forge.util.isArray(ret)) {
          if (ret.message) {
            error.message = ret.message;
          }

          if (ret.error) {
            error.error = ret.error;
          }
        } else if (typeof ret === 'string') {
          // set custom error
          error.error = ret;
        }
      } // throw error


      throw error;
    } // no longer first cert in chain


    first = false;
    ++depth;
  } while (chain.length > 0);

  return true;
};

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

if (typeof process === 'undefined' || !process.version || process.version.indexOf('v0.') === 0 || process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = {
    nextTick: nextTick
  };
} else {
  module.exports = process;
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }

  var len = arguments.length;
  var args, i;

  switch (len) {
    case 0:
    case 1:
      return process.nextTick(fn);

    case 2:
      return process.nextTick(function afterTickOne() {
        fn.call(null, arg1);
      });

    case 3:
      return process.nextTick(function afterTickTwo() {
        fn.call(null, arg1, arg2);
      });

    case 4:
      return process.nextTick(function afterTickThree() {
        fn.call(null, arg1, arg2, arg3);
      });

    default:
      args = new Array(len - 1);
      i = 0;

      while (i < args.length) {
        args[i++] = arguments[i];
      }

      return process.nextTick(function afterTick() {
        fn.apply(null, args);
      });
  }
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5)))

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Buffer = __webpack_require__(6).Buffer;

var optimized = __webpack_require__(468);

function BN() {
  this.negative = 0;
  this.words = null;
  this.length = 0;
}

BN.fromNumber = function (n) {
  var bn = new BN();
  bn.words = [n & 0x03ffffff];
  bn.length = 1;
  return bn;
};

BN.fromBuffer = function (b32) {
  var bn = new BN();
  bn.words = new Array(10);
  bn.words[0] = (b32[28] & 0x03) << 24 | b32[29] << 16 | b32[30] << 8 | b32[31];
  bn.words[1] = (b32[25] & 0x0F) << 22 | b32[26] << 14 | b32[27] << 6 | b32[28] >>> 2;
  bn.words[2] = (b32[22] & 0x3F) << 20 | b32[23] << 12 | b32[24] << 4 | b32[25] >>> 4;
  bn.words[3] = (b32[19] & 0xFF) << 18 | b32[20] << 10 | b32[21] << 2 | b32[22] >>> 6;
  bn.words[4] = (b32[15] & 0x03) << 24 | b32[16] << 16 | b32[17] << 8 | b32[18];
  bn.words[5] = (b32[12] & 0x0F) << 22 | b32[13] << 14 | b32[14] << 6 | b32[15] >>> 2;
  bn.words[6] = (b32[9] & 0x3F) << 20 | b32[10] << 12 | b32[11] << 4 | b32[12] >>> 4;
  bn.words[7] = (b32[6] & 0xFF) << 18 | b32[7] << 10 | b32[8] << 2 | b32[9] >>> 6;
  bn.words[8] = (b32[2] & 0x03) << 24 | b32[3] << 16 | b32[4] << 8 | b32[5];
  bn.words[9] = b32[0] << 14 | b32[1] << 6 | b32[2] >>> 2;
  bn.length = 10;
  return bn.strip();
};

BN.prototype.toBuffer = function () {
  var w = this.words;

  for (var i = this.length; i < 10; ++i) w[i] = 0;

  return Buffer.from([w[9] >>> 14 & 0xFF, w[9] >>> 6 & 0xFF, (w[9] & 0x3F) << 2 | w[8] >>> 24 & 0x03, // 0, 1, 2
  w[8] >>> 16 & 0xFF, w[8] >>> 8 & 0xFF, w[8] & 0xFF, // 3, 4, 5
  w[7] >>> 18 & 0xFF, w[7] >>> 10 & 0xFF, w[7] >>> 2 & 0xFF, // 6, 7, 8
  (w[7] & 0x03) << 6 | w[6] >>> 20 & 0x3F, w[6] >>> 12 & 0xFF, w[6] >>> 4 & 0xFF, // 9, 10, 11
  (w[6] & 0x0F) << 4 | w[5] >>> 22 & 0x0F, w[5] >>> 14 & 0xFF, w[5] >>> 6 & 0xFF, // 12, 13, 14
  (w[5] & 0x3F) << 2 | w[4] >>> 24 & 0x03, w[4] >>> 16 & 0xFF, w[4] >>> 8 & 0xFF, w[4] & 0xFF, // 15, 16, 17, 18
  w[3] >>> 18 & 0xFF, w[3] >>> 10 & 0xFF, w[3] >>> 2 & 0xFF, // 19, 20, 21
  (w[3] & 0x03) << 6 | w[2] >>> 20 & 0x3F, w[2] >>> 12 & 0xFF, w[2] >>> 4 & 0xFF, // 22, 23, 24
  (w[2] & 0x0F) << 4 | w[1] >>> 22 & 0x0F, w[1] >>> 14 & 0xFF, w[1] >>> 6 & 0xFF, // 25, 26, 27
  (w[1] & 0x3F) << 2 | w[0] >>> 24 & 0x03, w[0] >>> 16 & 0xFF, w[0] >>> 8 & 0xFF, w[0] & 0xFF // 28, 29, 30, 31
  ]);
};

BN.prototype.clone = function () {
  var r = new BN();
  r.words = new Array(this.length);

  for (var i = 0; i < this.length; i++) r.words[i] = this.words[i];

  r.length = this.length;
  r.negative = this.negative;
  return r;
};

BN.prototype.strip = function () {
  while (this.length > 1 && (this.words[this.length - 1] | 0) === 0) this.length--;

  return this;
};

BN.prototype.normSign = function () {
  // -0 = 0
  if (this.length === 1 && this.words[0] === 0) this.negative = 0;
  return this;
};

BN.prototype.isEven = function () {
  return (this.words[0] & 1) === 0;
};

BN.prototype.isOdd = function () {
  return (this.words[0] & 1) === 1;
};

BN.prototype.isZero = function () {
  return this.length === 1 && this.words[0] === 0;
};

BN.prototype.ucmp = function (num) {
  if (this.length !== num.length) return this.length > num.length ? 1 : -1;

  for (var i = this.length - 1; i >= 0; --i) {
    if (this.words[i] !== num.words[i]) return this.words[i] > num.words[i] ? 1 : -1;
  }

  return 0;
};

BN.prototype.gtOne = function () {
  return this.length > 1 || this.words[0] > 1;
};

BN.prototype.isOverflow = function () {
  return this.ucmp(BN.n) >= 0;
};

BN.prototype.isHigh = function () {
  return this.ucmp(BN.nh) === 1;
};

BN.prototype.bitLengthGT256 = function () {
  return this.length > 10 || this.length === 10 && this.words[9] > 0x003fffff;
};

BN.prototype.iuaddn = function (num) {
  this.words[0] += num;

  for (var i = 0; this.words[i] > 0x03ffffff && i < this.length; ++i) {
    this.words[i] -= 0x04000000;
    this.words[i + 1] += 1;
  }

  if (i === this.length) {
    this.words[i] = 1;
    this.length += 1;
  }

  return this;
};

BN.prototype.iadd = function (num) {
  // (-this) + num -> -(this - num)
  // this + (-num) -> this - num
  if (this.negative !== num.negative) {
    if (this.negative !== 0) {
      this.negative = 0;
      this.isub(num);
      this.negative ^= 1;
    } else {
      num.negative = 0;
      this.isub(num);
      num.negative = 1;
    }

    return this.normSign();
  } // a.length > b.length


  var a;
  var b;

  if (this.length > num.length) {
    a = this;
    b = num;
  } else {
    a = num;
    b = this;
  }

  for (var i = 0, carry = 0; i < b.length; ++i) {
    var word = a.words[i] + b.words[i] + carry;
    this.words[i] = word & 0x03ffffff;
    carry = word >>> 26;
  }

  for (; carry !== 0 && i < a.length; ++i) {
    word = a.words[i] + carry;
    this.words[i] = word & 0x03ffffff;
    carry = word >>> 26;
  }

  this.length = a.length;

  if (carry !== 0) {
    this.words[this.length++] = carry;
  } else if (a !== this) {
    for (; i < a.length; ++i) {
      this.words[i] = a.words[i];
    }
  }

  return this;
};

BN.prototype.add = function (num) {
  return this.clone().iadd(num);
};

BN.prototype.isub = function (num) {
  // (-this) - num -> -(this + num)
  // this - (-num) -> this + num
  if (this.negative !== num.negative) {
    if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
    } else {
      num.negative = 0;
      this.iadd(num);
      num.negative = 1;
    }

    return this.normSign();
  }

  var cmp = this.ucmp(num);

  if (cmp === 0) {
    this.negative = 0;
    this.words[0] = 0;
    this.length = 1;
    return this;
  } // a > b


  var a;
  var b;

  if (cmp > 0) {
    a = this;
    b = num;
  } else {
    a = num;
    b = this;
  }

  for (var i = 0, carry = 0; i < b.length; ++i) {
    var word = a.words[i] - b.words[i] + carry;
    carry = word >> 26;
    this.words[i] = word & 0x03ffffff;
  }

  for (; carry !== 0 && i < a.length; ++i) {
    word = a.words[i] + carry;
    carry = word >> 26;
    this.words[i] = word & 0x03ffffff;
  }

  if (carry === 0 && i < a.length && a !== this) {
    for (; i < a.length; ++i) this.words[i] = a.words[i];
  }

  this.length = Math.max(this.length, i);
  if (a !== this) this.negative ^= 1;
  return this.strip().normSign();
};

BN.prototype.sub = function (num) {
  return this.clone().isub(num);
};

BN.umulTo = function (num1, num2, out) {
  out.length = num1.length + num2.length - 1;
  var a1 = num1.words[0];
  var b1 = num2.words[0];
  var r1 = a1 * b1;
  var carry = r1 / 0x04000000 | 0;
  out.words[0] = r1 & 0x03ffffff;

  for (var k = 1, maxK = out.length; k < maxK; k++) {
    var ncarry = carry >>> 26;
    var rword = carry & 0x03ffffff;

    for (var j = Math.max(0, k - num1.length + 1), maxJ = Math.min(k, num2.length - 1); j <= maxJ; j++) {
      var i = k - j;
      var a = num1.words[i];
      var b = num2.words[j];
      var r = a * b + rword;
      ncarry += r / 0x04000000 | 0;
      rword = r & 0x03ffffff;
    }

    out.words[k] = rword;
    carry = ncarry;
  }

  if (carry !== 0) out.words[out.length++] = carry;
  return out.strip();
};

BN.umulTo10x10 = Math.imul ? optimized.umulTo10x10 : BN.umulTo;

BN.umulnTo = function (num, k, out) {
  if (k === 0) {
    out.words = [0];
    out.length = 1;
    return out;
  }

  for (var i = 0, carry = 0; i < num.length; ++i) {
    var r = num.words[i] * k + carry;
    out.words[i] = r & 0x03ffffff;
    carry = r / 0x04000000 | 0;
  }

  if (carry > 0) {
    out.words[i] = carry;
    out.length = num.length + 1;
  } else {
    out.length = num.length;
  }

  return out;
};

BN.prototype.umul = function (num) {
  var out = new BN();
  out.words = new Array(this.length + num.length);

  if (this.length === 10 && num.length === 10) {
    return BN.umulTo10x10(this, num, out);
  } else if (this.length === 1) {
    return BN.umulnTo(num, this.words[0], out);
  } else if (num.length === 1) {
    return BN.umulnTo(this, num.words[0], out);
  } else {
    return BN.umulTo(this, num, out);
  }
};

BN.prototype.isplit = function (output) {
  output.length = Math.min(this.length, 9);

  for (var i = 0; i < output.length; ++i) output.words[i] = this.words[i];

  if (this.length <= 9) {
    this.words[0] = 0;
    this.length = 1;
    return this;
  } // Shift by 9 limbs


  var prev = this.words[9];
  output.words[output.length++] = prev & 0x003fffff;

  for (i = 10; i < this.length; ++i) {
    var word = this.words[i];
    this.words[i - 10] = (word & 0x003fffff) << 4 | prev >>> 22;
    prev = word;
  }

  prev >>>= 22;
  this.words[i - 10] = prev;

  if (prev === 0 && this.length > 10) {
    this.length -= 10;
  } else {
    this.length -= 9;
  }

  return this;
};

BN.prototype.fireduce = function () {
  if (this.isOverflow()) this.isub(BN.n);
  return this;
};

BN.prototype.ureduce = function () {
  var num = this.clone().isplit(BN.tmp).umul(BN.nc).iadd(BN.tmp);

  if (num.bitLengthGT256()) {
    num = num.isplit(BN.tmp).umul(BN.nc).iadd(BN.tmp);
    if (num.bitLengthGT256()) num = num.isplit(BN.tmp).umul(BN.nc).iadd(BN.tmp);
  }

  return num.fireduce();
};

BN.prototype.ishrn = function (n) {
  var mask = (1 << n) - 1;
  var m = 26 - n;

  for (var i = this.length - 1, carry = 0; i >= 0; --i) {
    var word = this.words[i];
    this.words[i] = carry << m | word >>> n;
    carry = word & mask;
  }

  if (this.length > 1 && this.words[this.length - 1] === 0) this.length -= 1;
  return this;
};

BN.prototype.uinvm = function () {
  var x = this.clone();
  var y = BN.n.clone(); // A * x + B * y = x

  var A = BN.fromNumber(1);
  var B = BN.fromNumber(0); // C * x + D * y = y

  var C = BN.fromNumber(0);
  var D = BN.fromNumber(1);

  while (x.isEven() && y.isEven()) {
    for (var k = 1, m = 1; (x.words[0] & m) === 0 && (y.words[0] & m) === 0 && k < 26; ++k, m <<= 1);

    x.ishrn(k);
    y.ishrn(k);
  }

  var yp = y.clone();
  var xp = x.clone();

  while (!x.isZero()) {
    for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);

    if (i > 0) {
      x.ishrn(i);

      while (i-- > 0) {
        if (A.isOdd() || B.isOdd()) {
          A.iadd(yp);
          B.isub(xp);
        }

        A.ishrn(1);
        B.ishrn(1);
      }
    }

    for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);

    if (j > 0) {
      y.ishrn(j);

      while (j-- > 0) {
        if (C.isOdd() || D.isOdd()) {
          C.iadd(yp);
          D.isub(xp);
        }

        C.ishrn(1);
        D.ishrn(1);
      }
    }

    if (x.ucmp(y) >= 0) {
      x.isub(y);
      A.isub(C);
      B.isub(D);
    } else {
      y.isub(x);
      C.isub(A);
      D.isub(B);
    }
  }

  if (C.negative === 1) {
    C.negative = 0;
    var result = C.ureduce();
    result.negative ^= 1;
    return result.normSign().iadd(BN.n);
  } else {
    return C.ureduce();
  }
};

BN.prototype.imulK = function () {
  this.words[this.length] = 0;
  this.words[this.length + 1] = 0;
  this.length += 2;

  for (var i = 0, lo = 0; i < this.length; ++i) {
    var w = this.words[i] | 0;
    lo += w * 0x3d1;
    this.words[i] = lo & 0x03ffffff;
    lo = w * 0x40 + (lo / 0x04000000 | 0);
  }

  if (this.words[this.length - 1] === 0) {
    this.length -= 1;
    if (this.words[this.length - 1] === 0) this.length -= 1;
  }

  return this;
};

BN.prototype.redIReduce = function () {
  this.isplit(BN.tmp).imulK().iadd(BN.tmp);
  if (this.bitLengthGT256()) this.isplit(BN.tmp).imulK().iadd(BN.tmp);
  var cmp = this.ucmp(BN.p);

  if (cmp === 0) {
    this.words[0] = 0;
    this.length = 1;
  } else if (cmp > 0) {
    this.isub(BN.p);
  } else {
    this.strip();
  }

  return this;
};

BN.prototype.redNeg = function () {
  if (this.isZero()) return BN.fromNumber(0);
  return BN.p.sub(this);
};

BN.prototype.redAdd = function (num) {
  return this.clone().redIAdd(num);
};

BN.prototype.redIAdd = function (num) {
  this.iadd(num);
  if (this.ucmp(BN.p) >= 0) this.isub(BN.p);
  return this;
};

BN.prototype.redIAdd7 = function () {
  this.iuaddn(7);
  if (this.ucmp(BN.p) >= 0) this.isub(BN.p);
  return this;
};

BN.prototype.redSub = function (num) {
  return this.clone().redISub(num);
};

BN.prototype.redISub = function (num) {
  this.isub(num);
  if (this.negative !== 0) this.iadd(BN.p);
  return this;
};

BN.prototype.redMul = function (num) {
  return this.umul(num).redIReduce();
};

BN.prototype.redSqr = function () {
  return this.umul(this).redIReduce();
};

BN.prototype.redSqrt = function () {
  if (this.isZero()) return this.clone();
  var wv2 = this.redSqr();
  var wv4 = wv2.redSqr();
  var wv12 = wv4.redSqr().redMul(wv4);
  var wv14 = wv12.redMul(wv2);
  var wv15 = wv14.redMul(this);
  var out = wv15;

  for (var i = 0; i < 54; ++i) out = out.redSqr().redSqr().redSqr().redSqr().redMul(wv15);

  out = out.redSqr().redSqr().redSqr().redSqr().redMul(wv14);

  for (i = 0; i < 5; ++i) out = out.redSqr().redSqr().redSqr().redSqr().redMul(wv15);

  out = out.redSqr().redSqr().redSqr().redSqr().redMul(wv12);
  out = out.redSqr().redSqr().redSqr().redSqr().redSqr().redSqr().redMul(wv12);

  if (out.redSqr().ucmp(this) === 0) {
    return out;
  } else {
    return null;
  }
};

BN.prototype.redInvm = function () {
  var a = this.clone();
  var b = BN.p.clone();
  var x1 = BN.fromNumber(1);
  var x2 = BN.fromNumber(0);

  while (a.gtOne() && b.gtOne()) {
    for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);

    if (i > 0) {
      a.ishrn(i);

      while (i-- > 0) {
        if (x1.isOdd()) x1.iadd(BN.p);
        x1.ishrn(1);
      }
    }

    for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);

    if (j > 0) {
      b.ishrn(j);

      while (j-- > 0) {
        if (x2.isOdd()) x2.iadd(BN.p);
        x2.ishrn(1);
      }
    }

    if (a.ucmp(b) >= 0) {
      a.isub(b);
      x1.isub(x2);
    } else {
      b.isub(a);
      x2.isub(x1);
    }
  }

  var res;

  if (a.length === 1 && a.words[0] === 1) {
    res = x1;
  } else {
    res = x2;
  }

  if (res.negative !== 0) res.iadd(BN.p);

  if (res.negative !== 0) {
    res.negative = 0;
    return res.redIReduce().redNeg();
  } else {
    return res.redIReduce();
  }
};

BN.prototype.getNAF = function (w) {
  var naf = [];
  var ws = 1 << w + 1;
  var wsm1 = ws - 1;
  var ws2 = ws >> 1;
  var k = this.clone();

  while (!k.isZero()) {
    for (var i = 0, m = 1; (k.words[0] & m) === 0 && i < 26; ++i, m <<= 1) naf.push(0);

    if (i !== 0) {
      k.ishrn(i);
    } else {
      var mod = k.words[0] & wsm1;

      if (mod >= ws2) {
        naf.push(ws2 - mod);
        k.iuaddn(mod - ws2).ishrn(1);
      } else {
        naf.push(mod);
        k.words[0] -= mod;

        if (!k.isZero()) {
          for (i = w - 1; i > 0; --i) naf.push(0);

          k.ishrn(w);
        }
      }
    }
  }

  return naf;
};

BN.prototype.inspect = function () {
  if (this.isZero()) return '0';
  var buffer = this.toBuffer().toString('hex');

  for (var i = 0; buffer[i] === '0'; ++i);

  return buffer.slice(i);
};

BN.n = BN.fromBuffer(Buffer.from('FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141', 'hex'));
BN.nh = BN.n.clone().ishrn(1);
BN.nc = BN.fromBuffer(Buffer.from('000000000000000000000000000000014551231950B75FC4402DA1732FC9BEBF', 'hex'));
BN.p = BN.fromBuffer(Buffer.from('FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F', 'hex'));
BN.psn = BN.p.sub(BN.n);
BN.tmp = new BN();
BN.tmp.words = new Array(10) // WTF?! it speed-up benchmark on ~20%
;

(function () {
  var x = BN.fromNumber(1);
  x.words[3] = 0;
})();

module.exports = BN;

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors(obj) {
  var keys = Object.keys(obj);
  var descriptors = {};

  for (var i = 0; i < keys.length; i++) {
    descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
  }

  return descriptors;
};

var formatRegExp = /%[sdj%]/g;

exports.format = function (f) {
  if (!isString(f)) {
    var objects = [];

    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }

    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function (x) {
    if (x === '%%') return '%';
    if (i >= len) return x;

    switch (x) {
      case '%s':
        return String(args[i++]);

      case '%d':
        return Number(args[i++]);

      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }

      default:
        return x;
    }
  });

  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }

  return str;
}; // Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.


exports.deprecate = function (fn, msg) {
  if (typeof process !== 'undefined' && process.noDeprecation === true) {
    return fn;
  } // Allow for deprecating things in the process of starting up.


  if (typeof process === 'undefined') {
    return function () {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  var warned = false;

  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }

      warned = true;
    }

    return fn.apply(this, arguments);
  }

  return deprecated;
};

var debugs = {};
var debugEnviron;

exports.debuglog = function (set) {
  if (isUndefined(debugEnviron)) debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();

  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;

      debugs[set] = function () {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function () {};
    }
  }

  return debugs[set];
};
/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */

/* legacy: obj, showHidden, depth, colors*/


function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  }; // legacy...

  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];

  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  } // set default options


  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}

exports.inspect = inspect; // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics

inspect.colors = {
  'bold': [1, 22],
  'italic': [3, 23],
  'underline': [4, 24],
  'inverse': [7, 27],
  'white': [37, 39],
  'grey': [90, 39],
  'black': [30, 39],
  'blue': [34, 39],
  'cyan': [36, 39],
  'green': [32, 39],
  'magenta': [35, 39],
  'red': [31, 39],
  'yellow': [33, 39]
}; // Don't use 'blue' not visible on cmd.exe

inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};

function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str + '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}

function stylizeNoColor(str, styleType) {
  return str;
}

function arrayToHash(array) {
  var hash = {};
  array.forEach(function (val, idx) {
    hash[val] = true;
  });
  return hash;
}

function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special
  value.inspect !== exports.inspect && // Also filter out any prototype objects using the circular check.
  !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);

    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }

    return ret;
  } // Primitive types cannot have properties


  var primitive = formatPrimitive(ctx, value);

  if (primitive) {
    return primitive;
  } // Look up the keys of the object.


  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  } // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx


  if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  } // Some type of object without properties can be shortcutted.


  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }

    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }

    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }

    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '',
      array = false,
      braces = ['{', '}']; // Make Array say that they are Array

  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  } // Make functions say that they are functions


  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  } // Make RegExps say that they are RegExps


  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  } // Make dates with properties first say the date


  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  } // Make error with message first say the error


  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);
  var output;

  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function (key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();
  return reduceToSingleString(output, base, braces);
}

function formatPrimitive(ctx, value) {
  if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');

  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }

  if (isNumber(value)) return ctx.stylize('' + value, 'number');
  if (isBoolean(value)) return ctx.stylize('' + value, 'boolean'); // For some reason typeof null is "object", so special case here.

  if (isNull(value)) return ctx.stylize('null', 'null');
}

function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}

function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];

  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
    } else {
      output.push('');
    }
  }

  keys.forEach(function (key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
    }
  });
  return output;
}

function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || {
    value: value[key]
  };

  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }

  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }

  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }

      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function (line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function (line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }

  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }

    name = JSON.stringify('' + key);

    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}

function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function (prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
} // NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.


function isArray(ar) {
  return Array.isArray(ar);
}

exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}

exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}

exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}

exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}

exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}

exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}

exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}

exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}

exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}

exports.isDate = isDate;

function isError(e) {
  return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
}

exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}

exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || // ES6 symbol
  typeof arg === 'undefined';
}

exports.isPrimitive = isPrimitive;
exports.isBuffer = __webpack_require__(476);

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}

var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']; // 26 Feb 16:19:34

function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()), pad(d.getMinutes()), pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
} // log is just a thin wrapper to console.log that prepends a timestamp


exports.log = function () {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};
/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */


exports.inherits = __webpack_require__(477);

exports._extend = function (origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;
  var keys = Object.keys(add);
  var i = keys.length;

  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }

  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

exports.promisify = function promisify(original) {
  if (typeof original !== 'function') throw new TypeError('The "original" argument must be of type Function');

  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
    var fn = original[kCustomPromisifiedSymbol];

    if (typeof fn !== 'function') {
      throw new TypeError('The "util.promisify.custom" argument must be of type Function');
    }

    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
      value: fn,
      enumerable: false,
      writable: false,
      configurable: true
    });
    return fn;
  }

  function fn() {
    var promiseResolve, promiseReject;
    var promise = new Promise(function (resolve, reject) {
      promiseResolve = resolve;
      promiseReject = reject;
    });
    var args = [];

    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }

    args.push(function (err, value) {
      if (err) {
        promiseReject(err);
      } else {
        promiseResolve(value);
      }
    });

    try {
      original.apply(this, args);
    } catch (err) {
      promiseReject(err);
    }

    return promise;
  }

  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));
  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
    value: fn,
    enumerable: false,
    writable: false,
    configurable: true
  });
  return Object.defineProperties(fn, getOwnPropertyDescriptors(original));
};

exports.promisify.custom = kCustomPromisifiedSymbol;

function callbackifyOnRejected(reason, cb) {
  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
  // Because `null` is a special error value in callbacks which means "no error
  // occurred", we error-wrap so the callback consumer can distinguish between
  // "the promise rejected with null" or "the promise fulfilled with undefined".
  if (!reason) {
    var newReason = new Error('Promise was rejected with a falsy value');
    newReason.reason = reason;
    reason = newReason;
  }

  return cb(reason);
}

function callbackify(original) {
  if (typeof original !== 'function') {
    throw new TypeError('The "original" argument must be of type Function');
  } // We DO NOT return the promise as it gives the user a false sense that
  // the promise is actually somehow related to the callback's execution
  // and that the callback throwing will reject the promise.


  function callbackified() {
    var args = [];

    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }

    var maybeCb = args.pop();

    if (typeof maybeCb !== 'function') {
      throw new TypeError('The last argument must be of type Function');
    }

    var self = this;

    var cb = function cb() {
      return maybeCb.apply(self, arguments);
    }; // In true node style we process the callback on `nextTick` with all the
    // implications (stack, `uncaughtException`, `async_hooks`)


    original.apply(this, args).then(function (ret) {
      process.nextTick(cb, null, ret);
    }, function (rej) {
      process.nextTick(callbackifyOnRejected, rej, cb);
    });
  }

  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
  Object.defineProperties(callbackified, getOwnPropertyDescriptors(original));
  return callbackified;
}

exports.callbackify = callbackify;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5)))

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.endianness = function () {
  return 'LE';
};

exports.hostname = function () {
  if (typeof location !== 'undefined') {
    return location.hostname;
  } else return '';
};

exports.loadavg = function () {
  return [];
};

exports.uptime = function () {
  return 0;
};

exports.freemem = function () {
  return Number.MAX_VALUE;
};

exports.totalmem = function () {
  return Number.MAX_VALUE;
};

exports.cpus = function () {
  return [];
};

exports.type = function () {
  return 'Browser';
};

exports.release = function () {
  if (typeof navigator !== 'undefined') {
    return navigator.appVersion;
  }

  return '';
};

exports.networkInterfaces = exports.getNetworkInterfaces = function () {
  return {};
};

exports.arch = function () {
  return 'javascript';
};

exports.platform = function () {
  return 'browser';
};

exports.tmpdir = exports.tmpDir = function () {
  return '/tmp';
};

exports.EOL = '\n';

exports.homedir = function () {
  return '/';
};

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec
// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/
var Buffer = __webpack_require__(6).Buffer;

function asUInt32Array(buf) {
  if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);
  var len = buf.length / 4 | 0;
  var out = new Array(len);

  for (var i = 0; i < len; i++) {
    out[i] = buf.readUInt32BE(i * 4);
  }

  return out;
}

function scrubVec(v) {
  for (var i = 0; i < v.length; v++) {
    v[i] = 0;
  }
}

function cryptBlock(M, keySchedule, SUB_MIX, SBOX, nRounds) {
  var SUB_MIX0 = SUB_MIX[0];
  var SUB_MIX1 = SUB_MIX[1];
  var SUB_MIX2 = SUB_MIX[2];
  var SUB_MIX3 = SUB_MIX[3];
  var s0 = M[0] ^ keySchedule[0];
  var s1 = M[1] ^ keySchedule[1];
  var s2 = M[2] ^ keySchedule[2];
  var s3 = M[3] ^ keySchedule[3];
  var t0, t1, t2, t3;
  var ksRow = 4;

  for (var round = 1; round < nRounds; round++) {
    t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[s1 >>> 16 & 0xff] ^ SUB_MIX2[s2 >>> 8 & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++];
    t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[s2 >>> 16 & 0xff] ^ SUB_MIX2[s3 >>> 8 & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++];
    t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[s3 >>> 16 & 0xff] ^ SUB_MIX2[s0 >>> 8 & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++];
    t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[s0 >>> 16 & 0xff] ^ SUB_MIX2[s1 >>> 8 & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++];
    s0 = t0;
    s1 = t1;
    s2 = t2;
    s3 = t3;
  }

  t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 0xff] << 16 | SBOX[s2 >>> 8 & 0xff] << 8 | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
  t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 0xff] << 16 | SBOX[s3 >>> 8 & 0xff] << 8 | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
  t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 0xff] << 16 | SBOX[s0 >>> 8 & 0xff] << 8 | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
  t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 0xff] << 16 | SBOX[s1 >>> 8 & 0xff] << 8 | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];
  t0 = t0 >>> 0;
  t1 = t1 >>> 0;
  t2 = t2 >>> 0;
  t3 = t3 >>> 0;
  return [t0, t1, t2, t3];
} // AES constants


var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];

var G = function () {
  // Compute double table
  var d = new Array(256);

  for (var j = 0; j < 256; j++) {
    if (j < 128) {
      d[j] = j << 1;
    } else {
      d[j] = j << 1 ^ 0x11b;
    }
  }

  var SBOX = [];
  var INV_SBOX = [];
  var SUB_MIX = [[], [], [], []];
  var INV_SUB_MIX = [[], [], [], []]; // Walk GF(2^8)

  var x = 0;
  var xi = 0;

  for (var i = 0; i < 256; ++i) {
    // Compute sbox
    var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
    sx = sx >>> 8 ^ sx & 0xff ^ 0x63;
    SBOX[x] = sx;
    INV_SBOX[sx] = x; // Compute multiplication

    var x2 = d[x];
    var x4 = d[x2];
    var x8 = d[x4]; // Compute sub bytes, mix columns tables

    var t = d[sx] * 0x101 ^ sx * 0x1010100;
    SUB_MIX[0][x] = t << 24 | t >>> 8;
    SUB_MIX[1][x] = t << 16 | t >>> 16;
    SUB_MIX[2][x] = t << 8 | t >>> 24;
    SUB_MIX[3][x] = t; // Compute inv sub bytes, inv mix columns tables

    t = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;
    INV_SUB_MIX[0][sx] = t << 24 | t >>> 8;
    INV_SUB_MIX[1][sx] = t << 16 | t >>> 16;
    INV_SUB_MIX[2][sx] = t << 8 | t >>> 24;
    INV_SUB_MIX[3][sx] = t;

    if (x === 0) {
      x = xi = 1;
    } else {
      x = x2 ^ d[d[d[x8 ^ x2]]];
      xi ^= d[d[xi]];
    }
  }

  return {
    SBOX: SBOX,
    INV_SBOX: INV_SBOX,
    SUB_MIX: SUB_MIX,
    INV_SUB_MIX: INV_SUB_MIX
  };
}();

function AES(key) {
  this._key = asUInt32Array(key);

  this._reset();
}

AES.blockSize = 4 * 4;
AES.keySize = 256 / 8;
AES.prototype.blockSize = AES.blockSize;
AES.prototype.keySize = AES.keySize;

AES.prototype._reset = function () {
  var keyWords = this._key;
  var keySize = keyWords.length;
  var nRounds = keySize + 6;
  var ksRows = (nRounds + 1) * 4;
  var keySchedule = [];

  for (var k = 0; k < keySize; k++) {
    keySchedule[k] = keyWords[k];
  }

  for (k = keySize; k < ksRows; k++) {
    var t = keySchedule[k - 1];

    if (k % keySize === 0) {
      t = t << 8 | t >>> 24;
      t = G.SBOX[t >>> 24] << 24 | G.SBOX[t >>> 16 & 0xff] << 16 | G.SBOX[t >>> 8 & 0xff] << 8 | G.SBOX[t & 0xff];
      t ^= RCON[k / keySize | 0] << 24;
    } else if (keySize > 6 && k % keySize === 4) {
      t = G.SBOX[t >>> 24] << 24 | G.SBOX[t >>> 16 & 0xff] << 16 | G.SBOX[t >>> 8 & 0xff] << 8 | G.SBOX[t & 0xff];
    }

    keySchedule[k] = keySchedule[k - keySize] ^ t;
  }

  var invKeySchedule = [];

  for (var ik = 0; ik < ksRows; ik++) {
    var ksR = ksRows - ik;
    var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)];

    if (ik < 4 || ksR <= 4) {
      invKeySchedule[ik] = tt;
    } else {
      invKeySchedule[ik] = G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[tt >>> 16 & 0xff]] ^ G.INV_SUB_MIX[2][G.SBOX[tt >>> 8 & 0xff]] ^ G.INV_SUB_MIX[3][G.SBOX[tt & 0xff]];
    }
  }

  this._nRounds = nRounds;
  this._keySchedule = keySchedule;
  this._invKeySchedule = invKeySchedule;
};

AES.prototype.encryptBlockRaw = function (M) {
  M = asUInt32Array(M);
  return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds);
};

AES.prototype.encryptBlock = function (M) {
  var out = this.encryptBlockRaw(M);
  var buf = Buffer.allocUnsafe(16);
  buf.writeUInt32BE(out[0], 0);
  buf.writeUInt32BE(out[1], 4);
  buf.writeUInt32BE(out[2], 8);
  buf.writeUInt32BE(out[3], 12);
  return buf;
};

AES.prototype.decryptBlock = function (M) {
  M = asUInt32Array(M); // swap

  var m1 = M[1];
  M[1] = M[3];
  M[3] = m1;
  var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds);
  var buf = Buffer.allocUnsafe(16);
  buf.writeUInt32BE(out[0], 0);
  buf.writeUInt32BE(out[3], 4);
  buf.writeUInt32BE(out[2], 8);
  buf.writeUInt32BE(out[1], 12);
  return buf;
};

AES.prototype.scrub = function () {
  scrubVec(this._keySchedule);
  scrubVec(this._invKeySchedule);
  scrubVec(this._key);
};

module.exports.AES = AES;

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.add = __webpack_require__(501);
exports.block = {
  get: __webpack_require__(536),
  put: __webpack_require__(537),
  rm: __webpack_require__(538),
  stat: __webpack_require__(555)
};
exports.bitswap = {
  stat: __webpack_require__(556),
  unwant: __webpack_require__(557),
  wantlist: __webpack_require__(558)
};
exports.bootstrap = {
  add: __webpack_require__(559),
  list: __webpack_require__(560),
  rm: __webpack_require__(561)
};
exports.cat = __webpack_require__(562);
exports.config = __webpack_require__(258);
exports.dag = {
  get: __webpack_require__(572),
  put: __webpack_require__(573),
  resolve: __webpack_require__(574),
  tree: __webpack_require__(575)
};
exports.dns = __webpack_require__(576);
exports.files = __webpack_require__(578);
exports.get = __webpack_require__(609);
exports.id = __webpack_require__(610);
exports.init = __webpack_require__(611);
exports.isOnline = __webpack_require__(714);
exports.key = {
  export: __webpack_require__(715),
  gen: __webpack_require__(716),
  import: __webpack_require__(717),
  info: __webpack_require__(718),
  list: __webpack_require__(719),
  rename: __webpack_require__(720),
  rm: __webpack_require__(721)
};
exports.libp2p = __webpack_require__(722);
exports.ls = __webpack_require__(956);
exports.name = {
  publish: __webpack_require__(957),
  pubsub: {
    cancel: __webpack_require__(959),
    state: __webpack_require__(962),
    subs: __webpack_require__(963)
  },
  resolve: __webpack_require__(964)
};
exports.object = {
  data: __webpack_require__(966),
  get: __webpack_require__(52),
  links: __webpack_require__(967),
  new: __webpack_require__(968),
  patch: {
    addLink: __webpack_require__(969),
    appendData: __webpack_require__(970),
    rmLink: __webpack_require__(971),
    setData: __webpack_require__(972)
  },
  put: __webpack_require__(89),
  stat: __webpack_require__(973)
};
exports.pin = {
  add: __webpack_require__(974),
  ls: __webpack_require__(975),
  rm: __webpack_require__(976)
};
exports.ping = __webpack_require__(977);
exports.pubsub = __webpack_require__(978);
exports.refs = __webpack_require__(979);
exports.refs.local = __webpack_require__(980);
exports.repo = {
  gc: __webpack_require__(981),
  stat: __webpack_require__(982),
  version: __webpack_require__(983)
};
exports.resolve = __webpack_require__(984);
exports.start = __webpack_require__(985);
exports.stats = {
  bw: __webpack_require__(1001)
};
exports.stop = __webpack_require__(1002);
exports.swarm = {
  addrs: __webpack_require__(1003),
  connect: __webpack_require__(1004),
  disconnect: __webpack_require__(1005),
  localAddrs: __webpack_require__(1006),
  peers: __webpack_require__(1007)
};
exports.version = __webpack_require__(1008);

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {/* eslint max-nested-callbacks: ["error", 8] */


const {
  DAGNode,
  DAGLink
} = __webpack_require__(12);

const CID = __webpack_require__(3);

const {
  default: Queue
} = __webpack_require__(50);

const {
  Key
} = __webpack_require__(14);

const errCode = __webpack_require__(2);

const multicodec = __webpack_require__(15);

const dagCborLinks = __webpack_require__(247);

const debug = __webpack_require__(1);

const {
  cidToString
} = __webpack_require__(105);

const createPinSet = __webpack_require__(552);

const {
  Errors
} = __webpack_require__(14);

const ERR_NOT_FOUND = Errors.notFoundError().code; // arbitrary limit to the number of concurrent dag operations

const WALK_DAG_CONCURRENCY_LIMIT = 300;
const IS_PINNED_WITH_TYPE_CONCURRENCY_LIMIT = 300;
const PIN_DS_KEY = new Key('/local/pins');

function invalidPinTypeErr(type) {
  const errMsg = "Invalid type '".concat(type, "', must be one of {direct, indirect, recursive, all}");
  return errCode(new Error(errMsg), 'ERR_INVALID_PIN_TYPE');
}

const PinTypes = {
  direct: 'direct',
  recursive: 'recursive',
  indirect: 'indirect',
  all: 'all'
};

class PinManager {
  constructor(repo, dag) {
    this.repo = repo;
    this.dag = dag;
    this.log = debug('ipfs:pin');
    this.pinset = createPinSet(dag);
    this.directPins = new Set();
    this.recursivePins = new Set();
  }

  async _walkDag({
    cid,
    preload = false,
    onCid = () => {}
  }) {
    if (!CID.isCID(cid)) {
      cid = new CID(cid);
    }

    const walk = cid => {
      return async () => {
        const {
          value: node
        } = await this.dag.get(cid, {
          preload
        });
        onCid(cid);

        if (cid.codec === 'dag-pb') {
          queue.addAll(node.Links.map(link => walk(link.Hash)));
        } else if (cid.codec === 'dag-cbor') {
          for (const [_, childCid] of dagCborLinks(node)) {
            // eslint-disable-line no-unused-vars
            queue.add(walk(childCid));
          }
        }
      };
    };

    const queue = new Queue({
      concurrency: WALK_DAG_CONCURRENCY_LIMIT
    });
    queue.add(walk(cid));
    await queue.onIdle();
  }

  directKeys() {
    return Array.from(this.directPins, key => new CID(key).buffer);
  }

  recursiveKeys() {
    return Array.from(this.recursivePins, key => new CID(key).buffer);
  }

  async getIndirectKeys({
    preload
  }) {
    const indirectKeys = new Set();

    for (const multihash of this.recursiveKeys()) {
      await this._walkDag({
        cid: new CID(multihash),
        preload: preload || false,
        onCid: cid => {
          cid = cid.toString(); // recursive pins pre-empt indirect pins

          if (!this.recursivePins.has(cid)) {
            indirectKeys.add(cid);
          }
        }
      });
    }

    return Array.from(indirectKeys);
  } // Encode and write pin key sets to the datastore:
  // a DAGLink for each of the recursive and direct pinsets
  // a DAGNode holding those as DAGLinks, a kind of root pin


  async flushPins() {
    const [dLink, rLink] = await Promise.all([// create a DAGLink to the node with direct pins
    this.pinset.storeSet(this.directKeys()).then(result => {
      return new DAGLink(PinTypes.direct, result.node.size, result.cid);
    }), // create a DAGLink to the node with recursive pins
    this.pinset.storeSet(this.recursiveKeys()).then(result => {
      return new DAGLink(PinTypes.recursive, result.node.size, result.cid);
    }), // the pin-set nodes link to a special 'empty' node, so make sure it exists
    this.dag.put(new DAGNode(Buffer.alloc(0)), {
      version: 0,
      format: multicodec.DAG_PB,
      hashAlg: multicodec.SHA2_256,
      preload: false
    })]); // create a root node with DAGLinks to the direct and recursive DAGs

    const rootNode = new DAGNode(Buffer.alloc(0), [dLink, rLink]);
    const rootCid = await this.dag.put(rootNode, {
      version: 0,
      format: multicodec.DAG_PB,
      hashAlg: multicodec.SHA2_256,
      preload: false
    }); // save root to datastore under a consistent key

    await this.repo.datastore.put(PIN_DS_KEY, rootCid.buffer);
    this.log("Flushed pins with root: ".concat(rootCid));
  }

  async load() {
    const has = await this.repo.datastore.has(PIN_DS_KEY);

    if (!has) {
      return;
    }

    const mh = await this.repo.datastore.get(PIN_DS_KEY);
    const pinRoot = await this.dag.get(new CID(mh), '', {
      preload: false
    });
    const [rKeys, dKeys] = await Promise.all([this.pinset.loadSet(pinRoot.value, PinTypes.recursive), this.pinset.loadSet(pinRoot.value, PinTypes.direct)]);
    this.directPins = new Set(dKeys.map(k => cidToString(k)));
    this.recursivePins = new Set(rKeys.map(k => cidToString(k)));
    this.log('Loaded pins from the datastore');
  }

  async isPinnedWithType(multihash, type) {
    const key = cidToString(multihash);
    const {
      recursive,
      direct,
      all
    } = PinTypes; // recursive

    if ((type === recursive || type === all) && this.recursivePins.has(key)) {
      return {
        key,
        pinned: true,
        reason: recursive
      };
    }

    if (type === recursive) {
      return {
        key,
        pinned: false
      };
    } // direct


    if ((type === direct || type === all) && this.directPins.has(key)) {
      return {
        key,
        pinned: true,
        reason: direct
      };
    }

    if (type === direct) {
      return {
        key,
        pinned: false
      };
    } // indirect (default)
    // check each recursive key to see if multihash is under it
    // arbitrary limit, enables handling 1000s of pins.


    const queue = new Queue({
      concurrency: IS_PINNED_WITH_TYPE_CONCURRENCY_LIMIT
    });
    let cid;
    queue.addAll(this.recursiveKeys().map(childKey => {
      childKey = new CID(childKey);
      return async () => {
        const has = await this.pinset.hasDescendant(childKey, key);

        if (has) {
          cid = childKey;
          queue.clear();
        }
      };
    }));
    await queue.onIdle();
    return {
      key,
      pinned: Boolean(cid),
      reason: cid
    };
  } // Gets CIDs of blocks used internally by the pinner


  async getInternalBlocks() {
    let mh;

    try {
      mh = await this.repo.datastore.get(PIN_DS_KEY);
    } catch (err) {
      if (err.code === ERR_NOT_FOUND) {
        this.log('No pinned blocks');
        return [];
      }

      throw new Error("Could not get pin sets root from datastore: ".concat(err.message));
    }

    const cid = new CID(mh);
    const obj = await this.dag.get(cid, '', {
      preload: false
    }); // The pinner stores an object that has two links to pin sets:
    // 1. The directly pinned CIDs
    // 2. The recursively pinned CIDs
    // If large enough, these pin sets may have links to buckets to hold
    // the pins

    const cids = await this.pinset.getInternalCids(obj.value);
    return cids.concat(cid);
  }

  async fetchCompleteDag(cid, options) {
    await this._walkDag({
      cid,
      preload: options.preload
    });
  } // Returns an error if the pin type is invalid


  static checkPinType(type) {
    if (typeof type !== 'string' || !Object.keys(PinTypes).includes(type)) {
      return invalidPinTypeErr(type);
    }
  }

}

PinManager.PinTypes = PinTypes;
module.exports = PinManager;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,
// backported and transplited with Babel, with backwards-compat fixes
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;

  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];

    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  } // if the path is allowed to go above the root, restore leading ..s


  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
} // path.resolve([from ...], to)
// posix version


exports.resolve = function () {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = i >= 0 ? arguments[i] : process.cwd(); // Skip empty and invalid entries

    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  } // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)
  // Normalize the path


  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function (p) {
    return !!p;
  }), !resolvedAbsolute).join('/');
  return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';
}; // path.normalize(path)
// posix version


exports.normalize = function (path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/'; // Normalize the path

  path = normalizeArray(filter(path.split('/'), function (p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }

  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
}; // posix version


exports.isAbsolute = function (path) {
  return path.charAt(0) === '/';
}; // posix version


exports.join = function () {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function (p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }

    return p;
  }).join('/'));
}; // path.relative(from, to)
// posix version


exports.relative = function (from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;

    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;

    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));
  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;

  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];

  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));
  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function (path) {
  if (typeof path !== 'string') path = path + '';
  if (path.length === 0) return '.';
  var code = path.charCodeAt(0);
  var hasRoot = code === 47
  /*/*/
  ;
  var end = -1;
  var matchedSlash = true;

  for (var i = path.length - 1; i >= 1; --i) {
    code = path.charCodeAt(i);

    if (code === 47
    /*/*/
    ) {
        if (!matchedSlash) {
          end = i;
          break;
        }
      } else {
      // We saw the first non-path separator
      matchedSlash = false;
    }
  }

  if (end === -1) return hasRoot ? '/' : '.';

  if (hasRoot && end === 1) {
    // return '//';
    // Backwards-compat fix:
    return '/';
  }

  return path.slice(0, end);
};

function basename(path) {
  if (typeof path !== 'string') path = path + '';
  var start = 0;
  var end = -1;
  var matchedSlash = true;
  var i;

  for (i = path.length - 1; i >= 0; --i) {
    if (path.charCodeAt(i) === 47
    /*/*/
    ) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          start = i + 1;
          break;
        }
      } else if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // path component
      matchedSlash = false;
      end = i + 1;
    }
  }

  if (end === -1) return '';
  return path.slice(start, end);
} // Uses a mixed approach for backwards-compatibility, as ext behavior changed
// in new Node.js versions, so only basename() above is backported here


exports.basename = function (path, ext) {
  var f = basename(path);

  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }

  return f;
};

exports.extname = function (path) {
  if (typeof path !== 'string') path = path + '';
  var startDot = -1;
  var startPart = 0;
  var end = -1;
  var matchedSlash = true; // Track the state of characters (if any) we see before our first dot and
  // after any path separator we find

  var preDotState = 0;

  for (var i = path.length - 1; i >= 0; --i) {
    var code = path.charCodeAt(i);

    if (code === 47
    /*/*/
    ) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          startPart = i + 1;
          break;
        }

        continue;
      }

    if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // extension
      matchedSlash = false;
      end = i + 1;
    }

    if (code === 46
    /*.*/
    ) {
        // If this is our first dot, mark it as the start of our extension
        if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;
      } else if (startDot !== -1) {
      // We saw a non-dot and non-path separator before our dot, so we should
      // have a good chance at having a non-empty extension
      preDotState = -1;
    }
  }

  if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
  preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
  preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return '';
  }

  return path.slice(startDot, end);
};

function filter(xs, f) {
  if (xs.filter) return xs.filter(f);
  var res = [];

  for (var i = 0; i < xs.length; i++) {
    if (f(xs[i], i, xs)) res.push(xs[i]);
  }

  return res;
} // String.prototype.substr - negative index don't work in IE8


var substr = 'ab'.substr(-1) === 'b' ? function (str, start, len) {
  return str.substr(start, len);
} : function (str, start, len) {
  if (start < 0) start = str.length + start;
  return str.substr(start, len);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5)))

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const Bignumber = __webpack_require__(36).BigNumber;

exports.MT = {
  POS_INT: 0,
  NEG_INT: 1,
  BYTE_STRING: 2,
  UTF8_STRING: 3,
  ARRAY: 4,
  MAP: 5,
  TAG: 6,
  SIMPLE_FLOAT: 7
};
exports.TAG = {
  DATE_STRING: 0,
  DATE_EPOCH: 1,
  POS_BIGINT: 2,
  NEG_BIGINT: 3,
  DECIMAL_FRAC: 4,
  BIGFLOAT: 5,
  BASE64URL_EXPECTED: 21,
  BASE64_EXPECTED: 22,
  BASE16_EXPECTED: 23,
  CBOR: 24,
  URI: 32,
  BASE64URL: 33,
  BASE64: 34,
  REGEXP: 35,
  MIME: 36
};
exports.NUMBYTES = {
  ZERO: 0,
  ONE: 24,
  TWO: 25,
  FOUR: 26,
  EIGHT: 27,
  INDEFINITE: 31
};
exports.SIMPLE = {
  FALSE: 20,
  TRUE: 21,
  NULL: 22,
  UNDEFINED: 23
};
exports.SYMS = {
  NULL: Symbol('null'),
  UNDEFINED: Symbol('undef'),
  PARENT: Symbol('parent'),
  BREAK: Symbol('break'),
  STREAM: Symbol('stream')
};
exports.SHIFT32 = Math.pow(2, 32);
exports.SHIFT16 = Math.pow(2, 16);
exports.MAX_SAFE_HIGH = 0x1fffff;
exports.NEG_ONE = new Bignumber(-1);
exports.TEN = new Bignumber(10);
exports.TWO = new Bignumber(2);
exports.PARENT = {
  ARRAY: 0,
  OBJECT: 1,
  MAP: 2,
  TAG: 3,
  BYTE_STRING: 4,
  UTF8_STRING: 5
};

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const CID = __webpack_require__(3);
/**
* Stringify a CID encoded in the requested base, upgrading to v1 if necessary.
*
* Setting upgrade to false will disable automatic CID upgrading from v0 to v1
* which is necessary if the multibase is something other than base58btc. Note
* that it will also not apply the encoding (since v0 CIDs can only be encoded
* as base58btc).
*
* @param {CID|Buffer|String} cid The CID to encode
* @param {Object} [options] Optional options
* @param {String} [options.base] Name of multibase codec to encode the CID with
* @param {Boolean} [options.upgrade] Automatically upgrade v0 CIDs to v1 when
* necessary. Default: true.
* @returns {String}
*/


exports.cidToString = (cid, options) => {
  options = options || {};
  options.upgrade = options.upgrade !== false;

  if (!CID.isCID(cid)) {
    cid = new CID(cid);
  }

  if (cid.version === 0 && options.base && options.base !== 'base58btc') {
    if (!options.upgrade) return cid.toString();
    cid = cid.toV1();
  }

  return cid.toBaseEncodedString(options.base);
};

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var randomFromSeed = __webpack_require__(583);

var ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';
var alphabet;
var previousSeed;
var shuffled;

function reset() {
  shuffled = false;
}

function setCharacters(_alphabet_) {
  if (!_alphabet_) {
    if (alphabet !== ORIGINAL) {
      alphabet = ORIGINAL;
      reset();
    }

    return;
  }

  if (_alphabet_ === alphabet) {
    return;
  }

  if (_alphabet_.length !== ORIGINAL.length) {
    throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);
  }

  var unique = _alphabet_.split('').filter(function (item, ind, arr) {
    return ind !== arr.lastIndexOf(item);
  });

  if (unique.length) {
    throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));
  }

  alphabet = _alphabet_;
  reset();
}

function characters(_alphabet_) {
  setCharacters(_alphabet_);
  return alphabet;
}

function setSeed(seed) {
  randomFromSeed.seed(seed);

  if (previousSeed !== seed) {
    reset();
    previousSeed = seed;
  }
}

function shuffle() {
  if (!alphabet) {
    setCharacters(ORIGINAL);
  }

  var sourceArray = alphabet.split('');
  var targetArray = [];
  var r = randomFromSeed.nextValue();
  var characterIndex;

  while (sourceArray.length > 0) {
    r = randomFromSeed.nextValue();
    characterIndex = Math.floor(r * sourceArray.length);
    targetArray.push(sourceArray.splice(characterIndex, 1)[0]);
  }

  return targetArray.join('');
}

function getShuffled() {
  if (shuffled) {
    return shuffled;
  }

  shuffled = shuffle();
  return shuffled;
}
/**
 * lookup shuffled letter
 * @param index
 * @returns {string}
 */


function lookup(index) {
  var alphabetShuffled = getShuffled();
  return alphabetShuffled[index];
}

function get() {
  return alphabet || ORIGINAL;
}

module.exports = {
  get: get,
  characters: characters,
  seed: setSeed,
  lookup: lookup,
  shuffled: getShuffled
};

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const applyDefaultOptions = __webpack_require__(31);

const toMfsPath = __webpack_require__(37);

const exporter = __webpack_require__(33);

const log = __webpack_require__(1)('ipfs:mfs:stat');

const errCode = __webpack_require__(2);

const defaultOptions = {
  withLocal: false
};

module.exports = context => {
  return async function mfsStat(path, options) {
    options = applyDefaultOptions(options, defaultOptions);
    log("Fetching stats for ".concat(path));
    const {
      type,
      cid,
      mfsPath
    } = await toMfsPath(context, path);
    const exportPath = type === 'ipfs' && cid ? cid : mfsPath;
    let file;

    try {
      file = await exporter(exportPath, context.ipld);
    } catch (err) {
      if (err.code === 'ERR_NOT_FOUND') {
        throw errCode(new Error("".concat(path, " does not exist")), 'ERR_NOT_FOUND');
      }

      throw err;
    }

    if (!statters[file.cid.codec]) {
      throw new Error("Cannot stat codec ".concat(file.cid.codec));
    }

    return statters[file.cid.codec](file, options);
  };
};

const statters = {
  raw: file => {
    return {
      cid: file.cid,
      size: file.node.length,
      cumulativeSize: file.node.length,
      blocks: 0,
      type: 'file',
      // for go compatibility
      local: undefined,
      sizeLocal: undefined,
      withLocality: false
    };
  },
  'dag-pb': file => {
    const blocks = file.node.Links.length;
    const size = file.node.size;
    const cumulativeSize = file.node.size;
    const output = {
      cid: file.cid,
      size: size,
      cumulativeSize: cumulativeSize,
      blocks: blocks,
      local: undefined,
      sizeLocal: undefined,
      withLocality: false
    };

    if (file.unixfs) {
      output.size = file.unixfs.fileSize();
      output.type = file.unixfs.type;
      output.mode = file.unixfs.mode;

      if (file.unixfs.isDirectory()) {
        output.size = 0;
        output.cumulativeSize = file.node.size;
      }

      if (output.type === 'file') {
        output.blocks = file.unixfs.blockSizes.length;
      }

      if (file.unixfs.mtime) {
        output.mtime = file.unixfs.mtime;
      }
    }

    return output;
  },
  'dag-cbor': file => {
    return {
      cid: file.cid,
      local: undefined,
      sizeLocal: undefined,
      withLocality: false
    };
  },
  identity: file => {
    return {
      cid: file.cid,
      size: file.node.digest.length,
      cumulativeSize: file.node.digest.length,
      blocks: 0,
      type: 'file',
      // for go compatibility
      local: undefined,
      sizeLocal: undefined,
      withLocality: false
    };
  }
};

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.getCallback = function (options, callback) {
  return typeof options === 'function' ? options : callback;
};

exports.getOptions = function (options) {
  return typeof options === 'object' && options !== null ? options : {};
};

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const utils = __webpack_require__(42).utils;

const map = utils.map;
/**
 * A datastore shim, that wraps around a given datastore, changing
 * the way keys look to the user, for example namespacing
 * keys, reversing them, etc.
 */

class KeyTransformDatastore {
  constructor(child, transform) {
    this.child = child;
    this.transform = transform;
  }

  open() {
    return this.child.open();
  }

  put(key, val) {
    return this.child.put(this.transform.convert(key), val);
  }

  get(key) {
    return this.child.get(this.transform.convert(key));
  }

  has(key) {
    return this.child.has(this.transform.convert(key));
  }

  delete(key) {
    return this.child.delete(this.transform.convert(key));
  }

  batch() {
    const b = this.child.batch();
    return {
      put: (key, value) => {
        b.put(this.transform.convert(key), value);
      },
      delete: key => {
        b.delete(this.transform.convert(key));
      },
      commit: () => {
        return b.commit();
      }
    };
  }

  query(q) {
    return map(this.child.query(q), e => {
      e.key = this.transform.invert(e.key);
      return e;
    });
  }

  close() {
    return this.child.close();
  }

}

module.exports = KeyTransformDatastore;

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const {
  Key,
  Errors,
  utils
} = __webpack_require__(14);

const {
  filter,
  map,
  take,
  sortAll
} = utils;
/**
 * A datastore backed by leveldb.
 */

class LevelDatastore {
  constructor(path, opts) {
    let database;

    if (opts && opts.db) {
      database = opts.db;
      delete opts.db;
    } else {
      database = __webpack_require__(278);
    }

    this.db = this._initDb(database, path, opts);
  }

  _initDb(database, path, opts) {
    return database(path, _objectSpread({}, opts, {
      valueEncoding: 'binary',
      compression: false // same default as go

    }));
  }

  async open() {
    try {
      await this.db.open();
    } catch (err) {
      throw Errors.dbOpenFailedError(err);
    }
  }

  async put(key, value) {
    try {
      await this.db.put(key.toString(), value);
    } catch (err) {
      throw Errors.dbWriteFailedError(err);
    }
  }

  async get(key) {
    let data;

    try {
      data = await this.db.get(key.toString());
    } catch (err) {
      if (err.notFound) throw Errors.notFoundError(err);
      throw Errors.dbWriteFailedError(err);
    }

    return data;
  }

  async has(key) {
    try {
      await this.db.get(key.toString());
    } catch (err) {
      if (err.notFound) return false;
      throw err;
    }

    return true;
  }

  async delete(key) {
    try {
      await this.db.del(key.toString());
    } catch (err) {
      throw Errors.dbDeleteFailedError(err);
    }
  }

  close() {
    return this.db.close();
  }

  batch() {
    const ops = [];
    return {
      put: (key, value) => {
        ops.push({
          type: 'put',
          key: key.toString(),
          value: value
        });
      },
      delete: key => {
        ops.push({
          type: 'del',
          key: key.toString()
        });
      },
      commit: () => {
        return this.db.batch(ops);
      }
    };
  }

  query(q) {
    let values = true;

    if (q.keysOnly != null) {
      values = !q.keysOnly;
    }

    const opts = {
      keys: true,
      values: values,
      keyAsBuffer: true
    }; // Let the db do the prefix matching

    if (q.prefix != null) {
      const prefix = q.prefix.toString(); // Match keys greater than or equal to `prefix` and

      opts.gte = prefix; // less than `prefix` + \xFF (hex escape sequence)

      opts.lt = prefix + '\xFF';
    }

    let it = levelIteratorToIterator(this.db.iterator(opts));
    it = map(it, ({
      key,
      value
    }) => {
      const res = {
        key: new Key(key, false)
      };

      if (values) {
        res.value = Buffer.from(value);
      }

      return res;
    });

    if (Array.isArray(q.filters)) {
      it = q.filters.reduce((it, f) => filter(it, f), it);
    }

    if (Array.isArray(q.orders)) {
      it = q.orders.reduce((it, f) => sortAll(it, f), it);
    }

    if (q.offset != null) {
      let i = 0;
      it = filter(it, () => i++ >= q.offset);
    }

    if (q.limit != null) {
      it = take(it, q.limit);
    }

    return it;
  }

}

function levelIteratorToIterator(li) {
  return {
    next: () => new Promise((resolve, reject) => {
      li.next((err, key, value) => {
        if (err) return reject(err);

        if (key == null) {
          return li.end(err => {
            if (err) return reject(err);
            resolve({
              done: true
            });
          });
        }

        resolve({
          done: false,
          value: {
            key,
            value
          }
        });
      });
    }),
    return: () => new Promise((resolve, reject) => {
      li.end(err => {
        if (err) return reject(err);
        resolve({
          done: true
        });
      });
    }),

    [Symbol.asyncIterator]() {
      return this;
    }

  };
}

module.exports = LevelDatastore;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const assert = __webpack_require__(13);

const debug = __webpack_require__(1);

const EventEmitter = __webpack_require__(11);

const errcode = __webpack_require__(2);

const PeerInfo = __webpack_require__(17);

const MulticodecTopology = __webpack_require__(724);

const message = __webpack_require__(169);

const Peer = __webpack_require__(727);

const utils = __webpack_require__(733);

const {
  signMessage,
  verifySignature
} = __webpack_require__(734);
/**
 * PubsubBaseProtocol handles the peers and connections logic for pubsub routers
 */


class PubsubBaseProtocol extends EventEmitter {
  /**
   * @param {Object} props
   * @param {String} props.debugName log namespace
   * @param {Array<string>|string} props.multicodecs protocol identificers to connect
   * @param {PeerInfo} props.peerInfo peer's peerInfo
   * @param {Object} props.registrar registrar for libp2p protocols
   * @param {function} props.registrar.handle
   * @param {function} props.registrar.register
   * @param {function} props.registrar.unregister
   * @param {boolean} [props.signMessages] if messages should be signed, defaults to true
   * @param {boolean} [props.strictSigning] if message signing should be required, defaults to true
   * @abstract
   */
  constructor({
    debugName,
    multicodecs,
    peerInfo,
    registrar,
    signMessages = true,
    strictSigning = true
  }) {
    assert(debugName && typeof debugName === 'string', 'a debugname `string` is required');
    assert(multicodecs, 'multicodecs are required');
    assert(PeerInfo.isPeerInfo(peerInfo), 'peer info must be an instance of `peer-info`'); // registrar handling

    assert(registrar && typeof registrar === 'object', 'a registrar object is required');
    assert(typeof registrar.handle === 'function', 'a handle function must be provided in registrar');
    assert(typeof registrar.register === 'function', 'a register function must be provided in registrar');
    assert(typeof registrar.unregister === 'function', 'a unregister function must be provided in registrar');
    super();
    this.log = debug(debugName);
    this.log.err = debug("".concat(debugName, ":error"));
    this.multicodecs = utils.ensureArray(multicodecs);
    this.peerInfo = peerInfo;
    this.registrar = registrar;
    this.started = false;
    /**
     * Map of topics to which peers are subscribed to
     *
     * @type {Map<string, Peer>}
     */

    this.topics = new Map();
    /**
     * Map of peers.
     *
     * @type {Map<string, Peer>}
     */

    this.peers = new Map(); // Message signing

    if (signMessages) {
      this.peerId = this.peerInfo.id;
    }
    /**
     * If message signing should be required for incoming messages
     * @type {boolean}
     */


    this.strictSigning = strictSigning;
    this._registrarId = undefined;
    this._onIncomingStream = this._onIncomingStream.bind(this);
    this._onPeerConnected = this._onPeerConnected.bind(this);
    this._onPeerDisconnected = this._onPeerDisconnected.bind(this);
  }
  /**
   * Register the pubsub protocol onto the libp2p node.
   * @returns {Promise<void>}
   */


  async start() {
    if (this.started) {
      return;
    }

    this.log('starting'); // Incoming streams

    this.registrar.handle(this.multicodecs, this._onIncomingStream); // register protocol with topology

    const topology = new MulticodecTopology({
      multicodecs: this.multicodecs,
      handlers: {
        onConnect: this._onPeerConnected,
        onDisconnect: this._onPeerDisconnected
      }
    });
    this._registrarId = await this.registrar.register(topology);
    this.log('started');
    this.started = true;
  }
  /**
   * Unregister the pubsub protocol and the streams with other peers will be closed.
   * @returns {Promise}
   */


  async stop() {
    if (!this.started) {
      return;
    } // unregister protocol and handlers


    await this.registrar.unregister(this._registrarId);
    this.log('stopping');
    this.peers.forEach(peer => peer.close());
    this.peers = new Map();
    this.started = false;
    this.log('stopped');
  }
  /**
   * On an incoming stream event.
   * @private
   * @param {Object} props
   * @param {string} props.protocol
   * @param {DuplexStream} props.strean
   * @param {Connection} props.connection connection
   */


  async _onIncomingStream({
    protocol,
    stream,
    connection
  }) {
    const peerInfo = await PeerInfo.create(connection.remotePeer);
    peerInfo.protocols.add(protocol);
    const idB58Str = peerInfo.id.toB58String();

    const peer = this._addPeer(new Peer(peerInfo));

    peer.attachConnection(stream);

    this._processMessages(idB58Str, stream, peer);
  }
  /**
   * Registrar notifies a connection successfully with pubsub protocol.
   * @private
   * @param {PeerInfo} peerInfo remote peer info
   * @param {Connection} conn connection to the peer
   */


  async _onPeerConnected(peerInfo, conn) {
    const idB58Str = peerInfo.id.toB58String();
    this.log('connected', idB58Str);

    const peer = this._addPeer(new Peer(peerInfo));

    try {
      const {
        stream
      } = await conn.newStream(this.multicodecs);
      peer.attachConnection(stream);

      this._processMessages(idB58Str, stream, peer);
    } catch (err) {
      this.log.err(err);
    }
  }
  /**
   * Registrar notifies a closing connection with pubsub protocol.
   * @private
   * @param {PeerInfo} peerInfo peer info
   * @param {Error} err error for connection end
   */


  _onPeerDisconnected(peerInfo, err) {
    const idB58Str = peerInfo.id.toB58String();
    const peer = this.peers.get(idB58Str);
    this.log('connection ended', idB58Str, err ? err.message : '');

    this._removePeer(peer);
  }
  /**
   * Add a new connected peer to the peers map.
   * @private
   * @param {PeerInfo} peer peer info
   * @returns {PeerInfo}
   */


  _addPeer(peer) {
    const id = peer.info.id.toB58String();
    let existing = this.peers.get(id);

    if (!existing) {
      this.log('new peer', id);
      this.peers.set(id, peer);
      existing = peer;
      peer.once('close', () => this._removePeer(peer));
    }

    ++existing._references;
    return existing;
  }
  /**
   * Remove a peer from the peers map.
   * @private
   * @param {Peer} peer peer state
   * @returns {PeerInfo}
   */


  _removePeer(peer) {
    if (!peer) return;
    const id = peer.info.id.toB58String();
    this.log('remove', id, peer._references); // Only delete when no one else is referencing this peer.

    if (--peer._references === 0) {
      this.log('delete peer', id);
      this.peers.delete(id);
    }

    return peer;
  }
  /**
   * Validates the given message. The signature will be checked for authenticity.
   * @param {rpc.RPC.Message} message
   * @returns {Promise<Boolean>}
   */


  async validate(message) {
    // eslint-disable-line require-await
    // If strict signing is on and we have no signature, abort
    if (this.strictSigning && !message.signature) {
      this.log('Signing required and no signature was present, dropping message:', message);
      return false;
    } // Check the message signature if present


    if (message.signature) {
      return verifySignature(message);
    } else {
      return true;
    }
  }
  /**
   * Normalizes the message and signs it, if signing is enabled
   * @private
   * @param {Message} message
   * @returns {Promise<Message>}
   */


  _buildMessage(message) {
    const msg = utils.normalizeOutRpcMessage(message);

    if (this.peerId) {
      return signMessage(this.peerId, msg);
    } else {
      return message;
    }
  }
  /**
   * Get a list of the peer-ids that are subscribed to one topic.
   * @param {string} topic
   * @returns {Array<string>}
   */


  getSubscribers(topic) {
    if (!this.started) {
      throw errcode(new Error('not started yet'), 'ERR_NOT_STARTED_YET');
    }

    if (!topic || typeof topic !== 'string') {
      throw errcode(new Error('a string topic must be provided'), 'ERR_NOT_VALID_TOPIC');
    }

    return Array.from(this.peers.values()).filter(peer => peer.topics.has(topic)).map(peer => peer.info.id.toB58String());
  }
  /**
   * Overriding the implementation of publish should handle the appropriate algorithms for the publish/subscriber implementation.
   * For example, a Floodsub implementation might simply publish each message to each topic for every peer
   * @abstract
   * @param {Array<string>|string} topics
   * @param {Array<any>|any} messages
   * @returns {Promise}
   *
   */


  publish(topics, messages) {
    throw errcode(new Error('publish must be implemented by the subclass'), 'ERR_NOT_IMPLEMENTED');
  }
  /**
   * Overriding the implementation of subscribe should handle the appropriate algorithms for the publish/subscriber implementation.
   * For example, a Floodsub implementation might simply send a message for every peer showing interest in the topics
   * @abstract
   * @param {Array<string>|string} topics
   * @returns {void}
   */


  subscribe(topics) {
    throw errcode(new Error('subscribe must be implemented by the subclass'), 'ERR_NOT_IMPLEMENTED');
  }
  /**
   * Overriding the implementation of unsubscribe should handle the appropriate algorithms for the publish/subscriber implementation.
   * For example, a Floodsub implementation might simply send a message for every peer revoking interest in the topics
   * @abstract
   * @param {Array<string>|string} topics
   * @returns {void}
   */


  unsubscribe(topics) {
    throw errcode(new Error('unsubscribe must be implemented by the subclass'), 'ERR_NOT_IMPLEMENTED');
  }
  /**
   * Overriding the implementation of getTopics should handle the appropriate algorithms for the publish/subscriber implementation.
   * Get the list of subscriptions the peer is subscribed to.
   * @abstract
   * @returns {Array<string>}
   */


  getTopics() {
    throw errcode(new Error('getTopics must be implemented by the subclass'), 'ERR_NOT_IMPLEMENTED');
  }
  /**
   * Overriding the implementation of _processMessages should keep the connection and is
   * responsible for processing each RPC message received by other peers.
   * @abstract
   * @param {string} idB58Str peer id string in base58
   * @param {Connection} conn connection
   * @param {Peer} peer A Pubsub Peer
   * @returns {void}
   *
   */


  _processMessages(idB58Str, conn, peer) {
    throw errcode(new Error('_processMessages must be implemented by the subclass'), 'ERR_NOT_IMPLEMENTED');
  }

}

module.exports = PubsubBaseProtocol;
module.exports.message = message;
module.exports.utils = utils;

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const FIFO = __webpack_require__(316);

module.exports = options => {
  options = options || {};
  let onEnd;

  if (typeof options === 'function') {
    onEnd = options;
    options = {};
  } else {
    onEnd = options.onEnd;
  }

  let buffer = new FIFO();
  let pushable, onNext, ended;

  const waitNext = () => {
    if (!buffer.isEmpty()) {
      if (options.writev) {
        let next;
        const values = [];

        while (!buffer.isEmpty()) {
          next = buffer.shift();
          if (next.error) throw next.error;
          values.push(next.value);
        }

        return {
          done: next.done,
          value: values
        };
      }

      const next = buffer.shift();
      if (next.error) throw next.error;
      return next;
    }

    if (ended) return {
      done: true
    };
    return new Promise((resolve, reject) => {
      onNext = next => {
        onNext = null;

        if (next.error) {
          reject(next.error);
        } else {
          if (options.writev && !next.done) {
            resolve({
              done: next.done,
              value: [next.value]
            });
          } else {
            resolve(next);
          }
        }

        return pushable;
      };
    });
  };

  const bufferNext = next => {
    if (onNext) return onNext(next);
    buffer.push(next);
    return pushable;
  };

  const bufferError = err => {
    buffer = new FIFO();
    if (onNext) return onNext({
      error: err
    });
    buffer.push({
      error: err
    });
    return pushable;
  };

  const push = value => {
    if (ended) return pushable;
    return bufferNext({
      done: false,
      value
    });
  };

  const end = err => {
    if (ended) return pushable;
    ended = true;
    return err ? bufferError(err) : bufferNext({
      done: true
    });
  };

  const _return = () => {
    buffer = new FIFO();
    end();
    return {
      done: true
    };
  };

  const _throw = err => {
    end(err);
    return {
      done: true
    };
  };

  pushable = {
    [Symbol.asyncIterator]() {
      return this;
    },

    next: waitNext,
    return: _return,
    throw: _throw,
    push,
    end
  };
  if (!onEnd) return pushable;
  const _pushable = pushable;
  pushable = {
    [Symbol.asyncIterator]() {
      return this;
    },

    next() {
      return _pushable.next();
    },

    throw(err) {
      _pushable.throw(err);

      if (onEnd) {
        onEnd(err);
        onEnd = null;
      }

      return {
        done: true
      };
    },

    return() {
      _pushable.return();

      if (onEnd) {
        onEnd();
        onEnd = null;
      }

      return {
        done: true
      };
    },

    push,

    end(err) {
      _pushable.end(err);

      if (onEnd) {
        onEnd(err);
        onEnd = null;
      }

      return pushable;
    }

  };
  return pushable;
};

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;
module.exports = isArray;

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var getNative = __webpack_require__(321);
/* Built-in method references that are verified to be native. */


var nativeCreate = getNative(Object, 'create');
module.exports = nativeCreate;

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var eq = __webpack_require__(782);
/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */


function assocIndexOf(array, key) {
  var length = array.length;

  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }

  return -1;
}

module.exports = assocIndexOf;

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isKeyable = __webpack_require__(788);
/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */


function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
}

module.exports = getMapData;

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const BufferList = __webpack_require__(30);

module.exports =
/*#__PURE__*/
function () {
  var _ref = _wrapAsyncGenerator(function* (source) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;

    var _iteratorError;

    try {
      for (var _iterator = _asyncIterator(source), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
        const b = _value;

        if (Buffer.isBuffer(b)) {
          yield b;
        } else if (BufferList.isBufferList(b)) {
          yield b.slice();
        } else {
          yield Buffer.from(b);
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          yield _awaitAsyncGenerator(_iterator.return());
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();

module.exports.toBuffer = module.exports;

module.exports.toList =
/*#__PURE__*/
function () {
  var _ref2 = _wrapAsyncGenerator(function* (source) {
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;

    var _iteratorError2;

    try {
      for (var _iterator2 = _asyncIterator(source), _step2, _value2; _step2 = yield _awaitAsyncGenerator(_iterator2.next()), _iteratorNormalCompletion2 = _step2.done, _value2 = yield _awaitAsyncGenerator(_step2.value), !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {
        const b = _value2;

        if (Buffer.isBuffer(b)) {
          yield new BufferList().append(b);
        } else if (BufferList.isBufferList(b)) {
          yield b;
        } else {
          yield new BufferList().append(Buffer.from(b));
        }
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          yield _awaitAsyncGenerator(_iterator2.return());
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }
  });

  return function (_x2) {
    return _ref2.apply(this, arguments);
  };
}();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Compiles a querystring
 * Returns string representation of the object
 *
 * @param {Object}
 * @api private
 */
exports.encode = function (obj) {
  var str = '';

  for (var i in obj) {
    if (obj.hasOwnProperty(i)) {
      if (str.length) str += '&';
      str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);
    }
  }

  return str;
};
/**
 * Parses a simple querystring into an object
 *
 * @param {String} qs
 * @api private
 */


exports.decode = function (qs) {
  var qry = {};
  var pairs = qs.split('&');

  for (var i = 0, l = pairs.length; i < l; i++) {
    var pair = pairs[i].split('=');
    qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
  }

  return qry;
};

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (a, b) {
  var fn = function fn() {};

  fn.prototype = b.prototype;
  a.prototype = new fn();
  a.prototype.constructor = a;
};

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const Block = __webpack_require__(80);

const CID = __webpack_require__(3);

const {
  getName
} = __webpack_require__(15);

const vd = __webpack_require__(988);

const multihashing = __webpack_require__(22);

const {
  isMapEqual
} = __webpack_require__(44);

const {
  Message
} = __webpack_require__(989);

const Entry = __webpack_require__(990);

class BitswapMessage {
  constructor(full) {
    this.full = full;
    this.wantlist = new Map();
    this.blocks = new Map();
  }

  get empty() {
    return this.blocks.size === 0 && this.wantlist.size === 0;
  }

  addEntry(cid, priority, cancel) {
    const cidStr = cid.toString('base58btc');
    const entry = this.wantlist.get(cidStr);

    if (entry) {
      entry.priority = priority;
      entry.cancel = Boolean(cancel);
    } else {
      this.wantlist.set(cidStr, new Entry(cid, priority, cancel));
    }
  }

  addBlock(block) {
    const cidStr = block.cid.toString('base58btc');
    this.blocks.set(cidStr, block);
  }

  cancel(cid) {
    const cidStr = cid.toString('base58btc');
    this.wantlist.delete(cidStr);
    this.addEntry(cid, 0, true);
  }
  /*
   * Serializes to Bitswap Message protobuf of
   * version 1.0.0
   */


  serializeToBitswap100() {
    const msg = {
      wantlist: {
        entries: Array.from(this.wantlist.values()).map(entry => {
          return {
            block: entry.cid.buffer,
            // cid
            priority: Number(entry.priority),
            cancel: Boolean(entry.cancel)
          };
        })
      },
      blocks: Array.from(this.blocks.values()).map(block => block.data)
    };

    if (this.full) {
      msg.wantlist.full = true;
    }

    return Message.encode(msg);
  }
  /*
   * Serializes to Bitswap Message protobuf of
   * version 1.1.0
   */


  serializeToBitswap110() {
    const msg = {
      wantlist: {
        entries: Array.from(this.wantlist.values()).map(entry => {
          return {
            block: entry.cid.buffer,
            // cid
            priority: Number(entry.priority),
            cancel: Boolean(entry.cancel)
          };
        })
      },
      payload: []
    };

    if (this.full) {
      msg.wantlist.full = true;
    }

    this.blocks.forEach(block => {
      msg.payload.push({
        prefix: block.cid.prefix,
        data: block.data
      });
    });
    return Message.encode(msg);
  }

  equals(other) {
    if (this.full !== other.full || !isMapEqual(this.wantlist, other.wantlist) || !isMapEqual(this.blocks, other.blocks)) {
      return false;
    }

    return true;
  }

  get [Symbol.toStringTag]() {
    const list = Array.from(this.wantlist.keys());
    const blocks = Array.from(this.blocks.keys());
    return "BitswapMessage <full: ".concat(this.full, ", list: ").concat(list, ", blocks: ").concat(blocks, ">");
  }

}

BitswapMessage.deserialize = async raw => {
  const decoded = Message.decode(raw);
  const isFull = decoded.wantlist && decoded.wantlist.full || false;
  const msg = new BitswapMessage(isFull);

  if (decoded.wantlist) {
    decoded.wantlist.entries.forEach(entry => {
      // note: entry.block is the CID here
      const cid = new CID(entry.block);
      msg.addEntry(cid, entry.priority, entry.cancel);
    });
  } // Bitswap 1.0.0
  // decoded.blocks are just the byte arrays


  if (decoded.blocks.length > 0) {
    await Promise.all(decoded.blocks.map(async b => {
      const hash = await multihashing(b, 'sha2-256');
      const cid = new CID(hash);
      msg.addBlock(new Block(b, cid));
    }));
    return msg;
  } // Bitswap 1.1.0


  if (decoded.payload.length > 0) {
    await Promise.all(decoded.payload.map(async p => {
      if (!p.prefix || !p.data) {
        return;
      }

      const values = vd(p.prefix);
      const cidVersion = values[0];
      const multicodec = values[1];
      const hashAlg = values[2]; // const hashLen = values[3] // We haven't need to use this so far

      const hash = await multihashing(p.data, hashAlg);
      const cid = new CID(cidVersion, getName(multicodec), hash);
      msg.addBlock(new Block(p.data, cid));
    }));
    return msg;
  }

  return msg;
};

BitswapMessage.Entry = Entry;
module.exports = BitswapMessage;

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const {
  sortBy
} = __webpack_require__(44);

const Entry = __webpack_require__(991);

class Wantlist {
  constructor(stats) {
    this.set = new Map();
    this._stats = stats;
  }

  get length() {
    return this.set.size;
  }

  add(cid, priority) {
    const cidStr = cid.toString('base58btc');
    const entry = this.set.get(cidStr);

    if (entry) {
      entry.inc();
      entry.priority = priority;
    } else {
      this.set.set(cidStr, new Entry(cid, priority));

      if (this._stats) {
        this._stats.push(null, 'wantListSize', 1);
      }
    }
  }

  remove(cid) {
    const cidStr = cid.toString('base58btc');
    const entry = this.set.get(cidStr);

    if (!entry) {
      return;
    }

    entry.dec(); // only delete when no refs are held

    if (entry.hasRefs()) {
      return;
    }

    this.set.delete(cidStr);

    if (this._stats) {
      this._stats.push(null, 'wantListSize', -1);
    }
  }

  removeForce(cidStr) {
    if (this.set.has(cidStr)) {
      this.set.delete(cidStr);
    }
  }

  forEach(fn) {
    return this.set.forEach(fn);
  }

  entries() {
    return this.set.entries();
  }

  sortedEntries() {
    return new Map(sortBy(o => o[1].key, Array.from(this.set.entries())));
  }

  contains(cid) {
    const cidStr = cid.toString('base58btc');
    return this.set.get(cidStr);
  }

}

Wantlist.Entry = Entry;
module.exports = Wantlist;

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {};
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _ky.default;
  }
});

var _ky = _interopRequireWildcard(__webpack_require__(376));

Object.keys(_ky).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _ky[key];
    }
  });
});

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.defined = function (val) {
  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val));
};

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = "enum KeyType {\n  RSA = 0;\n  Ed25519 = 1;\n  Secp256k1 = 2;\n}\nmessage PublicKey {\n  required KeyType Type = 1;\n  required bytes Data = 2;\n}\nmessage PrivateKey {\n  required KeyType Type = 1;\n  required bytes Data = 2;\n}";

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Copyright (c) 2005  Tom Wu
// All Rights Reserved.
// See "LICENSE" for details.
// Basic JavaScript BN library - subset useful for RSA encryption.

/*
Licensing (LICENSE)
-------------------

This software is covered under the following copyright:
*/

/*
 * Copyright (c) 2003-2005  Tom Wu
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY
 * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
 *
 * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
 * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
 * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
 * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
 * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * In addition, the following condition applies:
 *
 * All redistributions must retain an intact copy of this copyright notice
 * and disclaimer.
 */

/*
Address all questions regarding this license to:

  Tom Wu
  tjw@cs.Stanford.EDU
*/
var forge = __webpack_require__(7);

module.exports = forge.jsbn = forge.jsbn || {}; // Bits per digit

var dbits; // JavaScript engine analysis

var canary = 0xdeadbeefcafe;
var j_lm = (canary & 0xffffff) == 0xefcafe; // (public) Constructor

function BigInteger(a, b, c) {
  this.data = [];
  if (a != null) if ("number" == typeof a) this.fromNumber(a, b, c);else if (b == null && "string" != typeof a) this.fromString(a, 256);else this.fromString(a, b);
}

forge.jsbn.BigInteger = BigInteger; // return new, unset BigInteger

function nbi() {
  return new BigInteger(null);
} // am: Compute w_j += (x*this_i), propagate carries,
// c is initial carry, returns final carry.
// c < 3*dvalue, x < 2*dvalue, this_i < dvalue
// We need to select the fastest one that works in this environment.
// am1: use a single mult and divide to get the high bits,
// max digit bits should be 26 because
// max internal value = 2*dvalue^2-2*dvalue (< 2^53)


function am1(i, x, w, j, c, n) {
  while (--n >= 0) {
    var v = x * this.data[i++] + w.data[j] + c;
    c = Math.floor(v / 0x4000000);
    w.data[j++] = v & 0x3ffffff;
  }

  return c;
} // am2 avoids a big mult-and-extract completely.
// Max digit bits should be <= 30 because we do bitwise ops
// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)


function am2(i, x, w, j, c, n) {
  var xl = x & 0x7fff,
      xh = x >> 15;

  while (--n >= 0) {
    var l = this.data[i] & 0x7fff;
    var h = this.data[i++] >> 15;
    var m = xh * l + h * xl;
    l = xl * l + ((m & 0x7fff) << 15) + w.data[j] + (c & 0x3fffffff);
    c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);
    w.data[j++] = l & 0x3fffffff;
  }

  return c;
} // Alternately, set max digit bits to 28 since some
// browsers slow down when dealing with 32-bit numbers.


function am3(i, x, w, j, c, n) {
  var xl = x & 0x3fff,
      xh = x >> 14;

  while (--n >= 0) {
    var l = this.data[i] & 0x3fff;
    var h = this.data[i++] >> 14;
    var m = xh * l + h * xl;
    l = xl * l + ((m & 0x3fff) << 14) + w.data[j] + c;
    c = (l >> 28) + (m >> 14) + xh * h;
    w.data[j++] = l & 0xfffffff;
  }

  return c;
} // node.js (no browser)


if (typeof navigator === 'undefined') {
  BigInteger.prototype.am = am3;
  dbits = 28;
} else if (j_lm && navigator.appName == "Microsoft Internet Explorer") {
  BigInteger.prototype.am = am2;
  dbits = 30;
} else if (j_lm && navigator.appName != "Netscape") {
  BigInteger.prototype.am = am1;
  dbits = 26;
} else {
  // Mozilla/Netscape seems to prefer am3
  BigInteger.prototype.am = am3;
  dbits = 28;
}

BigInteger.prototype.DB = dbits;
BigInteger.prototype.DM = (1 << dbits) - 1;
BigInteger.prototype.DV = 1 << dbits;
var BI_FP = 52;
BigInteger.prototype.FV = Math.pow(2, BI_FP);
BigInteger.prototype.F1 = BI_FP - dbits;
BigInteger.prototype.F2 = 2 * dbits - BI_FP; // Digit conversions

var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
var BI_RC = new Array();
var rr, vv;
rr = "0".charCodeAt(0);

for (vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;

rr = "a".charCodeAt(0);

for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

rr = "A".charCodeAt(0);

for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

function int2char(n) {
  return BI_RM.charAt(n);
}

function intAt(s, i) {
  var c = BI_RC[s.charCodeAt(i)];
  return c == null ? -1 : c;
} // (protected) copy this to r


function bnpCopyTo(r) {
  for (var i = this.t - 1; i >= 0; --i) r.data[i] = this.data[i];

  r.t = this.t;
  r.s = this.s;
} // (protected) set from integer value x, -DV <= x < DV


function bnpFromInt(x) {
  this.t = 1;
  this.s = x < 0 ? -1 : 0;
  if (x > 0) this.data[0] = x;else if (x < -1) this.data[0] = x + this.DV;else this.t = 0;
} // return bigint initialized to value


function nbv(i) {
  var r = nbi();
  r.fromInt(i);
  return r;
} // (protected) set from string and radix


function bnpFromString(s, b) {
  var k;
  if (b == 16) k = 4;else if (b == 8) k = 3;else if (b == 256) k = 8; // byte array
  else if (b == 2) k = 1;else if (b == 32) k = 5;else if (b == 4) k = 2;else {
      this.fromRadix(s, b);
      return;
    }
  this.t = 0;
  this.s = 0;
  var i = s.length,
      mi = false,
      sh = 0;

  while (--i >= 0) {
    var x = k == 8 ? s[i] & 0xff : intAt(s, i);

    if (x < 0) {
      if (s.charAt(i) == "-") mi = true;
      continue;
    }

    mi = false;
    if (sh == 0) this.data[this.t++] = x;else if (sh + k > this.DB) {
      this.data[this.t - 1] |= (x & (1 << this.DB - sh) - 1) << sh;
      this.data[this.t++] = x >> this.DB - sh;
    } else this.data[this.t - 1] |= x << sh;
    sh += k;
    if (sh >= this.DB) sh -= this.DB;
  }

  if (k == 8 && (s[0] & 0x80) != 0) {
    this.s = -1;
    if (sh > 0) this.data[this.t - 1] |= (1 << this.DB - sh) - 1 << sh;
  }

  this.clamp();
  if (mi) BigInteger.ZERO.subTo(this, this);
} // (protected) clamp off excess high words


function bnpClamp() {
  var c = this.s & this.DM;

  while (this.t > 0 && this.data[this.t - 1] == c) --this.t;
} // (public) return string representation in given radix


function bnToString(b) {
  if (this.s < 0) return "-" + this.negate().toString(b);
  var k;
  if (b == 16) k = 4;else if (b == 8) k = 3;else if (b == 2) k = 1;else if (b == 32) k = 5;else if (b == 4) k = 2;else return this.toRadix(b);
  var km = (1 << k) - 1,
      d,
      m = false,
      r = "",
      i = this.t;
  var p = this.DB - i * this.DB % k;

  if (i-- > 0) {
    if (p < this.DB && (d = this.data[i] >> p) > 0) {
      m = true;
      r = int2char(d);
    }

    while (i >= 0) {
      if (p < k) {
        d = (this.data[i] & (1 << p) - 1) << k - p;
        d |= this.data[--i] >> (p += this.DB - k);
      } else {
        d = this.data[i] >> (p -= k) & km;

        if (p <= 0) {
          p += this.DB;
          --i;
        }
      }

      if (d > 0) m = true;
      if (m) r += int2char(d);
    }
  }

  return m ? r : "0";
} // (public) -this


function bnNegate() {
  var r = nbi();
  BigInteger.ZERO.subTo(this, r);
  return r;
} // (public) |this|


function bnAbs() {
  return this.s < 0 ? this.negate() : this;
} // (public) return + if this > a, - if this < a, 0 if equal


function bnCompareTo(a) {
  var r = this.s - a.s;
  if (r != 0) return r;
  var i = this.t;
  r = i - a.t;
  if (r != 0) return this.s < 0 ? -r : r;

  while (--i >= 0) if ((r = this.data[i] - a.data[i]) != 0) return r;

  return 0;
} // returns bit length of the integer x


function nbits(x) {
  var r = 1,
      t;

  if ((t = x >>> 16) != 0) {
    x = t;
    r += 16;
  }

  if ((t = x >> 8) != 0) {
    x = t;
    r += 8;
  }

  if ((t = x >> 4) != 0) {
    x = t;
    r += 4;
  }

  if ((t = x >> 2) != 0) {
    x = t;
    r += 2;
  }

  if ((t = x >> 1) != 0) {
    x = t;
    r += 1;
  }

  return r;
} // (public) return the number of bits in "this"


function bnBitLength() {
  if (this.t <= 0) return 0;
  return this.DB * (this.t - 1) + nbits(this.data[this.t - 1] ^ this.s & this.DM);
} // (protected) r = this << n*DB


function bnpDLShiftTo(n, r) {
  var i;

  for (i = this.t - 1; i >= 0; --i) r.data[i + n] = this.data[i];

  for (i = n - 1; i >= 0; --i) r.data[i] = 0;

  r.t = this.t + n;
  r.s = this.s;
} // (protected) r = this >> n*DB


function bnpDRShiftTo(n, r) {
  for (var i = n; i < this.t; ++i) r.data[i - n] = this.data[i];

  r.t = Math.max(this.t - n, 0);
  r.s = this.s;
} // (protected) r = this << n


function bnpLShiftTo(n, r) {
  var bs = n % this.DB;
  var cbs = this.DB - bs;
  var bm = (1 << cbs) - 1;
  var ds = Math.floor(n / this.DB),
      c = this.s << bs & this.DM,
      i;

  for (i = this.t - 1; i >= 0; --i) {
    r.data[i + ds + 1] = this.data[i] >> cbs | c;
    c = (this.data[i] & bm) << bs;
  }

  for (i = ds - 1; i >= 0; --i) r.data[i] = 0;

  r.data[ds] = c;
  r.t = this.t + ds + 1;
  r.s = this.s;
  r.clamp();
} // (protected) r = this >> n


function bnpRShiftTo(n, r) {
  r.s = this.s;
  var ds = Math.floor(n / this.DB);

  if (ds >= this.t) {
    r.t = 0;
    return;
  }

  var bs = n % this.DB;
  var cbs = this.DB - bs;
  var bm = (1 << bs) - 1;
  r.data[0] = this.data[ds] >> bs;

  for (var i = ds + 1; i < this.t; ++i) {
    r.data[i - ds - 1] |= (this.data[i] & bm) << cbs;
    r.data[i - ds] = this.data[i] >> bs;
  }

  if (bs > 0) r.data[this.t - ds - 1] |= (this.s & bm) << cbs;
  r.t = this.t - ds;
  r.clamp();
} // (protected) r = this - a


function bnpSubTo(a, r) {
  var i = 0,
      c = 0,
      m = Math.min(a.t, this.t);

  while (i < m) {
    c += this.data[i] - a.data[i];
    r.data[i++] = c & this.DM;
    c >>= this.DB;
  }

  if (a.t < this.t) {
    c -= a.s;

    while (i < this.t) {
      c += this.data[i];
      r.data[i++] = c & this.DM;
      c >>= this.DB;
    }

    c += this.s;
  } else {
    c += this.s;

    while (i < a.t) {
      c -= a.data[i];
      r.data[i++] = c & this.DM;
      c >>= this.DB;
    }

    c -= a.s;
  }

  r.s = c < 0 ? -1 : 0;
  if (c < -1) r.data[i++] = this.DV + c;else if (c > 0) r.data[i++] = c;
  r.t = i;
  r.clamp();
} // (protected) r = this * a, r != this,a (HAC 14.12)
// "this" should be the larger one if appropriate.


function bnpMultiplyTo(a, r) {
  var x = this.abs(),
      y = a.abs();
  var i = x.t;
  r.t = i + y.t;

  while (--i >= 0) r.data[i] = 0;

  for (i = 0; i < y.t; ++i) r.data[i + x.t] = x.am(0, y.data[i], r, i, 0, x.t);

  r.s = 0;
  r.clamp();
  if (this.s != a.s) BigInteger.ZERO.subTo(r, r);
} // (protected) r = this^2, r != this (HAC 14.16)


function bnpSquareTo(r) {
  var x = this.abs();
  var i = r.t = 2 * x.t;

  while (--i >= 0) r.data[i] = 0;

  for (i = 0; i < x.t - 1; ++i) {
    var c = x.am(i, x.data[i], r, 2 * i, 0, 1);

    if ((r.data[i + x.t] += x.am(i + 1, 2 * x.data[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {
      r.data[i + x.t] -= x.DV;
      r.data[i + x.t + 1] = 1;
    }
  }

  if (r.t > 0) r.data[r.t - 1] += x.am(i, x.data[i], r, 2 * i, 0, 1);
  r.s = 0;
  r.clamp();
} // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
// r != q, this != m.  q or r may be null.


function bnpDivRemTo(m, q, r) {
  var pm = m.abs();
  if (pm.t <= 0) return;
  var pt = this.abs();

  if (pt.t < pm.t) {
    if (q != null) q.fromInt(0);
    if (r != null) this.copyTo(r);
    return;
  }

  if (r == null) r = nbi();
  var y = nbi(),
      ts = this.s,
      ms = m.s;
  var nsh = this.DB - nbits(pm.data[pm.t - 1]); // normalize modulus

  if (nsh > 0) {
    pm.lShiftTo(nsh, y);
    pt.lShiftTo(nsh, r);
  } else {
    pm.copyTo(y);
    pt.copyTo(r);
  }

  var ys = y.t;
  var y0 = y.data[ys - 1];
  if (y0 == 0) return;
  var yt = y0 * (1 << this.F1) + (ys > 1 ? y.data[ys - 2] >> this.F2 : 0);
  var d1 = this.FV / yt,
      d2 = (1 << this.F1) / yt,
      e = 1 << this.F2;
  var i = r.t,
      j = i - ys,
      t = q == null ? nbi() : q;
  y.dlShiftTo(j, t);

  if (r.compareTo(t) >= 0) {
    r.data[r.t++] = 1;
    r.subTo(t, r);
  }

  BigInteger.ONE.dlShiftTo(ys, t);
  t.subTo(y, y); // "negative" y so we can replace sub with am later

  while (y.t < ys) y.data[y.t++] = 0;

  while (--j >= 0) {
    // Estimate quotient digit
    var qd = r.data[--i] == y0 ? this.DM : Math.floor(r.data[i] * d1 + (r.data[i - 1] + e) * d2);

    if ((r.data[i] += y.am(0, qd, r, j, 0, ys)) < qd) {
      // Try it out
      y.dlShiftTo(j, t);
      r.subTo(t, r);

      while (r.data[i] < --qd) r.subTo(t, r);
    }
  }

  if (q != null) {
    r.drShiftTo(ys, q);
    if (ts != ms) BigInteger.ZERO.subTo(q, q);
  }

  r.t = ys;
  r.clamp();
  if (nsh > 0) r.rShiftTo(nsh, r); // Denormalize remainder

  if (ts < 0) BigInteger.ZERO.subTo(r, r);
} // (public) this mod a


function bnMod(a) {
  var r = nbi();
  this.abs().divRemTo(a, null, r);
  if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r);
  return r;
} // Modular reduction using "classic" algorithm


function Classic(m) {
  this.m = m;
}

function cConvert(x) {
  if (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);else return x;
}

function cRevert(x) {
  return x;
}

function cReduce(x) {
  x.divRemTo(this.m, null, x);
}

function cMulTo(x, y, r) {
  x.multiplyTo(y, r);
  this.reduce(r);
}

function cSqrTo(x, r) {
  x.squareTo(r);
  this.reduce(r);
}

Classic.prototype.convert = cConvert;
Classic.prototype.revert = cRevert;
Classic.prototype.reduce = cReduce;
Classic.prototype.mulTo = cMulTo;
Classic.prototype.sqrTo = cSqrTo; // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
// justification:
//         xy == 1 (mod m)
//         xy =  1+km
//   xy(2-xy) = (1+km)(1-km)
// x[y(2-xy)] = 1-k^2m^2
// x[y(2-xy)] == 1 (mod m^2)
// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
// JS multiply "overflows" differently from C/C++, so care is needed here.

function bnpInvDigit() {
  if (this.t < 1) return 0;
  var x = this.data[0];
  if ((x & 1) == 0) return 0;
  var y = x & 3; // y == 1/x mod 2^2

  y = y * (2 - (x & 0xf) * y) & 0xf; // y == 1/x mod 2^4

  y = y * (2 - (x & 0xff) * y) & 0xff; // y == 1/x mod 2^8

  y = y * (2 - ((x & 0xffff) * y & 0xffff)) & 0xffff; // y == 1/x mod 2^16
  // last step - calculate inverse mod DV directly;
  // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints

  y = y * (2 - x * y % this.DV) % this.DV; // y == 1/x mod 2^dbits
  // we really want the negative inverse, and -DV < y < DV

  return y > 0 ? this.DV - y : -y;
} // Montgomery reduction


function Montgomery(m) {
  this.m = m;
  this.mp = m.invDigit();
  this.mpl = this.mp & 0x7fff;
  this.mph = this.mp >> 15;
  this.um = (1 << m.DB - 15) - 1;
  this.mt2 = 2 * m.t;
} // xR mod m


function montConvert(x) {
  var r = nbi();
  x.abs().dlShiftTo(this.m.t, r);
  r.divRemTo(this.m, null, r);
  if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r);
  return r;
} // x/R mod m


function montRevert(x) {
  var r = nbi();
  x.copyTo(r);
  this.reduce(r);
  return r;
} // x = x/R mod m (HAC 14.32)


function montReduce(x) {
  while (x.t <= this.mt2) // pad x so am has enough room later
  x.data[x.t++] = 0;

  for (var i = 0; i < this.m.t; ++i) {
    // faster way of calculating u0 = x.data[i]*mp mod DV
    var j = x.data[i] & 0x7fff;
    var u0 = j * this.mpl + ((j * this.mph + (x.data[i] >> 15) * this.mpl & this.um) << 15) & x.DM; // use am to combine the multiply-shift-add into one call

    j = i + this.m.t;
    x.data[j] += this.m.am(0, u0, x, i, 0, this.m.t); // propagate carry

    while (x.data[j] >= x.DV) {
      x.data[j] -= x.DV;
      x.data[++j]++;
    }
  }

  x.clamp();
  x.drShiftTo(this.m.t, x);
  if (x.compareTo(this.m) >= 0) x.subTo(this.m, x);
} // r = "x^2/R mod m"; x != r


function montSqrTo(x, r) {
  x.squareTo(r);
  this.reduce(r);
} // r = "xy/R mod m"; x,y != r


function montMulTo(x, y, r) {
  x.multiplyTo(y, r);
  this.reduce(r);
}

Montgomery.prototype.convert = montConvert;
Montgomery.prototype.revert = montRevert;
Montgomery.prototype.reduce = montReduce;
Montgomery.prototype.mulTo = montMulTo;
Montgomery.prototype.sqrTo = montSqrTo; // (protected) true iff this is even

function bnpIsEven() {
  return (this.t > 0 ? this.data[0] & 1 : this.s) == 0;
} // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)


function bnpExp(e, z) {
  if (e > 0xffffffff || e < 1) return BigInteger.ONE;
  var r = nbi(),
      r2 = nbi(),
      g = z.convert(this),
      i = nbits(e) - 1;
  g.copyTo(r);

  while (--i >= 0) {
    z.sqrTo(r, r2);
    if ((e & 1 << i) > 0) z.mulTo(r2, g, r);else {
      var t = r;
      r = r2;
      r2 = t;
    }
  }

  return z.revert(r);
} // (public) this^e % m, 0 <= e < 2^32


function bnModPowInt(e, m) {
  var z;
  if (e < 256 || m.isEven()) z = new Classic(m);else z = new Montgomery(m);
  return this.exp(e, z);
} // protected


BigInteger.prototype.copyTo = bnpCopyTo;
BigInteger.prototype.fromInt = bnpFromInt;
BigInteger.prototype.fromString = bnpFromString;
BigInteger.prototype.clamp = bnpClamp;
BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
BigInteger.prototype.drShiftTo = bnpDRShiftTo;
BigInteger.prototype.lShiftTo = bnpLShiftTo;
BigInteger.prototype.rShiftTo = bnpRShiftTo;
BigInteger.prototype.subTo = bnpSubTo;
BigInteger.prototype.multiplyTo = bnpMultiplyTo;
BigInteger.prototype.squareTo = bnpSquareTo;
BigInteger.prototype.divRemTo = bnpDivRemTo;
BigInteger.prototype.invDigit = bnpInvDigit;
BigInteger.prototype.isEven = bnpIsEven;
BigInteger.prototype.exp = bnpExp; // public

BigInteger.prototype.toString = bnToString;
BigInteger.prototype.negate = bnNegate;
BigInteger.prototype.abs = bnAbs;
BigInteger.prototype.compareTo = bnCompareTo;
BigInteger.prototype.bitLength = bnBitLength;
BigInteger.prototype.mod = bnMod;
BigInteger.prototype.modPowInt = bnModPowInt; // "constants"

BigInteger.ZERO = nbv(0);
BigInteger.ONE = nbv(1); // jsbn2 lib
//Copyright (c) 2005-2009  Tom Wu
//All Rights Reserved.
//See "LICENSE" for details (See jsbn.js for LICENSE).
//Extended JavaScript BN functions, required for RSA private ops.
//Version 1.1: new BigInteger("0", 10) returns "proper" zero
//(public)

function bnClone() {
  var r = nbi();
  this.copyTo(r);
  return r;
} //(public) return value as integer


function bnIntValue() {
  if (this.s < 0) {
    if (this.t == 1) return this.data[0] - this.DV;else if (this.t == 0) return -1;
  } else if (this.t == 1) return this.data[0];else if (this.t == 0) return 0; // assumes 16 < DB < 32


  return (this.data[1] & (1 << 32 - this.DB) - 1) << this.DB | this.data[0];
} //(public) return value as byte


function bnByteValue() {
  return this.t == 0 ? this.s : this.data[0] << 24 >> 24;
} //(public) return value as short (assumes DB>=16)


function bnShortValue() {
  return this.t == 0 ? this.s : this.data[0] << 16 >> 16;
} //(protected) return x s.t. r^x < DV


function bnpChunkSize(r) {
  return Math.floor(Math.LN2 * this.DB / Math.log(r));
} //(public) 0 if this == 0, 1 if this > 0


function bnSigNum() {
  if (this.s < 0) return -1;else if (this.t <= 0 || this.t == 1 && this.data[0] <= 0) return 0;else return 1;
} //(protected) convert to radix string


function bnpToRadix(b) {
  if (b == null) b = 10;
  if (this.signum() == 0 || b < 2 || b > 36) return "0";
  var cs = this.chunkSize(b);
  var a = Math.pow(b, cs);
  var d = nbv(a),
      y = nbi(),
      z = nbi(),
      r = "";
  this.divRemTo(d, y, z);

  while (y.signum() > 0) {
    r = (a + z.intValue()).toString(b).substr(1) + r;
    y.divRemTo(d, y, z);
  }

  return z.intValue().toString(b) + r;
} //(protected) convert from radix string


function bnpFromRadix(s, b) {
  this.fromInt(0);
  if (b == null) b = 10;
  var cs = this.chunkSize(b);
  var d = Math.pow(b, cs),
      mi = false,
      j = 0,
      w = 0;

  for (var i = 0; i < s.length; ++i) {
    var x = intAt(s, i);

    if (x < 0) {
      if (s.charAt(i) == "-" && this.signum() == 0) mi = true;
      continue;
    }

    w = b * w + x;

    if (++j >= cs) {
      this.dMultiply(d);
      this.dAddOffset(w, 0);
      j = 0;
      w = 0;
    }
  }

  if (j > 0) {
    this.dMultiply(Math.pow(b, j));
    this.dAddOffset(w, 0);
  }

  if (mi) BigInteger.ZERO.subTo(this, this);
} //(protected) alternate constructor


function bnpFromNumber(a, b, c) {
  if ("number" == typeof b) {
    // new BigInteger(int,int,RNG)
    if (a < 2) this.fromInt(1);else {
      this.fromNumber(a, c);
      if (!this.testBit(a - 1)) // force MSB set
        this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this);
      if (this.isEven()) this.dAddOffset(1, 0); // force odd

      while (!this.isProbablePrime(b)) {
        this.dAddOffset(2, 0);
        if (this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a - 1), this);
      }
    }
  } else {
    // new BigInteger(int,RNG)
    var x = new Array(),
        t = a & 7;
    x.length = (a >> 3) + 1;
    b.nextBytes(x);
    if (t > 0) x[0] &= (1 << t) - 1;else x[0] = 0;
    this.fromString(x, 256);
  }
} //(public) convert to bigendian byte array


function bnToByteArray() {
  var i = this.t,
      r = new Array();
  r[0] = this.s;
  var p = this.DB - i * this.DB % 8,
      d,
      k = 0;

  if (i-- > 0) {
    if (p < this.DB && (d = this.data[i] >> p) != (this.s & this.DM) >> p) r[k++] = d | this.s << this.DB - p;

    while (i >= 0) {
      if (p < 8) {
        d = (this.data[i] & (1 << p) - 1) << 8 - p;
        d |= this.data[--i] >> (p += this.DB - 8);
      } else {
        d = this.data[i] >> (p -= 8) & 0xff;

        if (p <= 0) {
          p += this.DB;
          --i;
        }
      }

      if ((d & 0x80) != 0) d |= -256;
      if (k == 0 && (this.s & 0x80) != (d & 0x80)) ++k;
      if (k > 0 || d != this.s) r[k++] = d;
    }
  }

  return r;
}

function bnEquals(a) {
  return this.compareTo(a) == 0;
}

function bnMin(a) {
  return this.compareTo(a) < 0 ? this : a;
}

function bnMax(a) {
  return this.compareTo(a) > 0 ? this : a;
} //(protected) r = this op a (bitwise)


function bnpBitwiseTo(a, op, r) {
  var i,
      f,
      m = Math.min(a.t, this.t);

  for (i = 0; i < m; ++i) r.data[i] = op(this.data[i], a.data[i]);

  if (a.t < this.t) {
    f = a.s & this.DM;

    for (i = m; i < this.t; ++i) r.data[i] = op(this.data[i], f);

    r.t = this.t;
  } else {
    f = this.s & this.DM;

    for (i = m; i < a.t; ++i) r.data[i] = op(f, a.data[i]);

    r.t = a.t;
  }

  r.s = op(this.s, a.s);
  r.clamp();
} //(public) this & a


function op_and(x, y) {
  return x & y;
}

function bnAnd(a) {
  var r = nbi();
  this.bitwiseTo(a, op_and, r);
  return r;
} //(public) this | a


function op_or(x, y) {
  return x | y;
}

function bnOr(a) {
  var r = nbi();
  this.bitwiseTo(a, op_or, r);
  return r;
} //(public) this ^ a


function op_xor(x, y) {
  return x ^ y;
}

function bnXor(a) {
  var r = nbi();
  this.bitwiseTo(a, op_xor, r);
  return r;
} //(public) this & ~a


function op_andnot(x, y) {
  return x & ~y;
}

function bnAndNot(a) {
  var r = nbi();
  this.bitwiseTo(a, op_andnot, r);
  return r;
} //(public) ~this


function bnNot() {
  var r = nbi();

  for (var i = 0; i < this.t; ++i) r.data[i] = this.DM & ~this.data[i];

  r.t = this.t;
  r.s = ~this.s;
  return r;
} //(public) this << n


function bnShiftLeft(n) {
  var r = nbi();
  if (n < 0) this.rShiftTo(-n, r);else this.lShiftTo(n, r);
  return r;
} //(public) this >> n


function bnShiftRight(n) {
  var r = nbi();
  if (n < 0) this.lShiftTo(-n, r);else this.rShiftTo(n, r);
  return r;
} //return index of lowest 1-bit in x, x < 2^31


function lbit(x) {
  if (x == 0) return -1;
  var r = 0;

  if ((x & 0xffff) == 0) {
    x >>= 16;
    r += 16;
  }

  if ((x & 0xff) == 0) {
    x >>= 8;
    r += 8;
  }

  if ((x & 0xf) == 0) {
    x >>= 4;
    r += 4;
  }

  if ((x & 3) == 0) {
    x >>= 2;
    r += 2;
  }

  if ((x & 1) == 0) ++r;
  return r;
} //(public) returns index of lowest 1-bit (or -1 if none)


function bnGetLowestSetBit() {
  for (var i = 0; i < this.t; ++i) if (this.data[i] != 0) return i * this.DB + lbit(this.data[i]);

  if (this.s < 0) return this.t * this.DB;
  return -1;
} //return number of 1 bits in x


function cbit(x) {
  var r = 0;

  while (x != 0) {
    x &= x - 1;
    ++r;
  }

  return r;
} //(public) return number of set bits


function bnBitCount() {
  var r = 0,
      x = this.s & this.DM;

  for (var i = 0; i < this.t; ++i) r += cbit(this.data[i] ^ x);

  return r;
} //(public) true iff nth bit is set


function bnTestBit(n) {
  var j = Math.floor(n / this.DB);
  if (j >= this.t) return this.s != 0;
  return (this.data[j] & 1 << n % this.DB) != 0;
} //(protected) this op (1<<n)


function bnpChangeBit(n, op) {
  var r = BigInteger.ONE.shiftLeft(n);
  this.bitwiseTo(r, op, r);
  return r;
} //(public) this | (1<<n)


function bnSetBit(n) {
  return this.changeBit(n, op_or);
} //(public) this & ~(1<<n)


function bnClearBit(n) {
  return this.changeBit(n, op_andnot);
} //(public) this ^ (1<<n)


function bnFlipBit(n) {
  return this.changeBit(n, op_xor);
} //(protected) r = this + a


function bnpAddTo(a, r) {
  var i = 0,
      c = 0,
      m = Math.min(a.t, this.t);

  while (i < m) {
    c += this.data[i] + a.data[i];
    r.data[i++] = c & this.DM;
    c >>= this.DB;
  }

  if (a.t < this.t) {
    c += a.s;

    while (i < this.t) {
      c += this.data[i];
      r.data[i++] = c & this.DM;
      c >>= this.DB;
    }

    c += this.s;
  } else {
    c += this.s;

    while (i < a.t) {
      c += a.data[i];
      r.data[i++] = c & this.DM;
      c >>= this.DB;
    }

    c += a.s;
  }

  r.s = c < 0 ? -1 : 0;
  if (c > 0) r.data[i++] = c;else if (c < -1) r.data[i++] = this.DV + c;
  r.t = i;
  r.clamp();
} //(public) this + a


function bnAdd(a) {
  var r = nbi();
  this.addTo(a, r);
  return r;
} //(public) this - a


function bnSubtract(a) {
  var r = nbi();
  this.subTo(a, r);
  return r;
} //(public) this * a


function bnMultiply(a) {
  var r = nbi();
  this.multiplyTo(a, r);
  return r;
} //(public) this / a


function bnDivide(a) {
  var r = nbi();
  this.divRemTo(a, r, null);
  return r;
} //(public) this % a


function bnRemainder(a) {
  var r = nbi();
  this.divRemTo(a, null, r);
  return r;
} //(public) [this/a,this%a]


function bnDivideAndRemainder(a) {
  var q = nbi(),
      r = nbi();
  this.divRemTo(a, q, r);
  return new Array(q, r);
} //(protected) this *= n, this >= 0, 1 < n < DV


function bnpDMultiply(n) {
  this.data[this.t] = this.am(0, n - 1, this, 0, 0, this.t);
  ++this.t;
  this.clamp();
} //(protected) this += n << w words, this >= 0


function bnpDAddOffset(n, w) {
  if (n == 0) return;

  while (this.t <= w) this.data[this.t++] = 0;

  this.data[w] += n;

  while (this.data[w] >= this.DV) {
    this.data[w] -= this.DV;
    if (++w >= this.t) this.data[this.t++] = 0;
    ++this.data[w];
  }
} //A "null" reducer


function NullExp() {}

function nNop(x) {
  return x;
}

function nMulTo(x, y, r) {
  x.multiplyTo(y, r);
}

function nSqrTo(x, r) {
  x.squareTo(r);
}

NullExp.prototype.convert = nNop;
NullExp.prototype.revert = nNop;
NullExp.prototype.mulTo = nMulTo;
NullExp.prototype.sqrTo = nSqrTo; //(public) this^e

function bnPow(e) {
  return this.exp(e, new NullExp());
} //(protected) r = lower n words of "this * a", a.t <= n
//"this" should be the larger one if appropriate.


function bnpMultiplyLowerTo(a, n, r) {
  var i = Math.min(this.t + a.t, n);
  r.s = 0; // assumes a,this >= 0

  r.t = i;

  while (i > 0) r.data[--i] = 0;

  var j;

  for (j = r.t - this.t; i < j; ++i) r.data[i + this.t] = this.am(0, a.data[i], r, i, 0, this.t);

  for (j = Math.min(a.t, n); i < j; ++i) this.am(0, a.data[i], r, i, 0, n - i);

  r.clamp();
} //(protected) r = "this * a" without lower n words, n > 0
//"this" should be the larger one if appropriate.


function bnpMultiplyUpperTo(a, n, r) {
  --n;
  var i = r.t = this.t + a.t - n;
  r.s = 0; // assumes a,this >= 0

  while (--i >= 0) r.data[i] = 0;

  for (i = Math.max(n - this.t, 0); i < a.t; ++i) r.data[this.t + i - n] = this.am(n - i, a.data[i], r, 0, 0, this.t + i - n);

  r.clamp();
  r.drShiftTo(1, r);
} //Barrett modular reduction


function Barrett(m) {
  // setup Barrett
  this.r2 = nbi();
  this.q3 = nbi();
  BigInteger.ONE.dlShiftTo(2 * m.t, this.r2);
  this.mu = this.r2.divide(m);
  this.m = m;
}

function barrettConvert(x) {
  if (x.s < 0 || x.t > 2 * this.m.t) return x.mod(this.m);else if (x.compareTo(this.m) < 0) return x;else {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }
}

function barrettRevert(x) {
  return x;
} //x = x mod m (HAC 14.42)


function barrettReduce(x) {
  x.drShiftTo(this.m.t - 1, this.r2);

  if (x.t > this.m.t + 1) {
    x.t = this.m.t + 1;
    x.clamp();
  }

  this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);
  this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);

  while (x.compareTo(this.r2) < 0) x.dAddOffset(1, this.m.t + 1);

  x.subTo(this.r2, x);

  while (x.compareTo(this.m) >= 0) x.subTo(this.m, x);
} //r = x^2 mod m; x != r


function barrettSqrTo(x, r) {
  x.squareTo(r);
  this.reduce(r);
} //r = x*y mod m; x,y != r


function barrettMulTo(x, y, r) {
  x.multiplyTo(y, r);
  this.reduce(r);
}

Barrett.prototype.convert = barrettConvert;
Barrett.prototype.revert = barrettRevert;
Barrett.prototype.reduce = barrettReduce;
Barrett.prototype.mulTo = barrettMulTo;
Barrett.prototype.sqrTo = barrettSqrTo; //(public) this^e % m (HAC 14.85)

function bnModPow(e, m) {
  var i = e.bitLength(),
      k,
      r = nbv(1),
      z;
  if (i <= 0) return r;else if (i < 18) k = 1;else if (i < 48) k = 3;else if (i < 144) k = 4;else if (i < 768) k = 5;else k = 6;
  if (i < 8) z = new Classic(m);else if (m.isEven()) z = new Barrett(m);else z = new Montgomery(m); // precomputation

  var g = new Array(),
      n = 3,
      k1 = k - 1,
      km = (1 << k) - 1;
  g[1] = z.convert(this);

  if (k > 1) {
    var g2 = nbi();
    z.sqrTo(g[1], g2);

    while (n <= km) {
      g[n] = nbi();
      z.mulTo(g2, g[n - 2], g[n]);
      n += 2;
    }
  }

  var j = e.t - 1,
      w,
      is1 = true,
      r2 = nbi(),
      t;
  i = nbits(e.data[j]) - 1;

  while (j >= 0) {
    if (i >= k1) w = e.data[j] >> i - k1 & km;else {
      w = (e.data[j] & (1 << i + 1) - 1) << k1 - i;
      if (j > 0) w |= e.data[j - 1] >> this.DB + i - k1;
    }
    n = k;

    while ((w & 1) == 0) {
      w >>= 1;
      --n;
    }

    if ((i -= n) < 0) {
      i += this.DB;
      --j;
    }

    if (is1) {
      // ret == 1, don't bother squaring or multiplying it
      g[w].copyTo(r);
      is1 = false;
    } else {
      while (n > 1) {
        z.sqrTo(r, r2);
        z.sqrTo(r2, r);
        n -= 2;
      }

      if (n > 0) z.sqrTo(r, r2);else {
        t = r;
        r = r2;
        r2 = t;
      }
      z.mulTo(r2, g[w], r);
    }

    while (j >= 0 && (e.data[j] & 1 << i) == 0) {
      z.sqrTo(r, r2);
      t = r;
      r = r2;
      r2 = t;

      if (--i < 0) {
        i = this.DB - 1;
        --j;
      }
    }
  }

  return z.revert(r);
} //(public) gcd(this,a) (HAC 14.54)


function bnGCD(a) {
  var x = this.s < 0 ? this.negate() : this.clone();
  var y = a.s < 0 ? a.negate() : a.clone();

  if (x.compareTo(y) < 0) {
    var t = x;
    x = y;
    y = t;
  }

  var i = x.getLowestSetBit(),
      g = y.getLowestSetBit();
  if (g < 0) return x;
  if (i < g) g = i;

  if (g > 0) {
    x.rShiftTo(g, x);
    y.rShiftTo(g, y);
  }

  while (x.signum() > 0) {
    if ((i = x.getLowestSetBit()) > 0) x.rShiftTo(i, x);
    if ((i = y.getLowestSetBit()) > 0) y.rShiftTo(i, y);

    if (x.compareTo(y) >= 0) {
      x.subTo(y, x);
      x.rShiftTo(1, x);
    } else {
      y.subTo(x, y);
      y.rShiftTo(1, y);
    }
  }

  if (g > 0) y.lShiftTo(g, y);
  return y;
} //(protected) this % n, n < 2^26


function bnpModInt(n) {
  if (n <= 0) return 0;
  var d = this.DV % n,
      r = this.s < 0 ? n - 1 : 0;
  if (this.t > 0) if (d == 0) r = this.data[0] % n;else for (var i = this.t - 1; i >= 0; --i) r = (d * r + this.data[i]) % n;
  return r;
} //(public) 1/this % m (HAC 14.61)


function bnModInverse(m) {
  var ac = m.isEven();
  if (this.isEven() && ac || m.signum() == 0) return BigInteger.ZERO;
  var u = m.clone(),
      v = this.clone();
  var a = nbv(1),
      b = nbv(0),
      c = nbv(0),
      d = nbv(1);

  while (u.signum() != 0) {
    while (u.isEven()) {
      u.rShiftTo(1, u);

      if (ac) {
        if (!a.isEven() || !b.isEven()) {
          a.addTo(this, a);
          b.subTo(m, b);
        }

        a.rShiftTo(1, a);
      } else if (!b.isEven()) b.subTo(m, b);

      b.rShiftTo(1, b);
    }

    while (v.isEven()) {
      v.rShiftTo(1, v);

      if (ac) {
        if (!c.isEven() || !d.isEven()) {
          c.addTo(this, c);
          d.subTo(m, d);
        }

        c.rShiftTo(1, c);
      } else if (!d.isEven()) d.subTo(m, d);

      d.rShiftTo(1, d);
    }

    if (u.compareTo(v) >= 0) {
      u.subTo(v, u);
      if (ac) a.subTo(c, a);
      b.subTo(d, b);
    } else {
      v.subTo(u, v);
      if (ac) c.subTo(a, c);
      d.subTo(b, d);
    }
  }

  if (v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;
  if (d.compareTo(m) >= 0) return d.subtract(m);
  if (d.signum() < 0) d.addTo(m, d);else return d;
  if (d.signum() < 0) return d.add(m);else return d;
}

var lowprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509];
var lplim = (1 << 26) / lowprimes[lowprimes.length - 1]; //(public) test primality with certainty >= 1-.5^t

function bnIsProbablePrime(t) {
  var i,
      x = this.abs();

  if (x.t == 1 && x.data[0] <= lowprimes[lowprimes.length - 1]) {
    for (i = 0; i < lowprimes.length; ++i) if (x.data[0] == lowprimes[i]) return true;

    return false;
  }

  if (x.isEven()) return false;
  i = 1;

  while (i < lowprimes.length) {
    var m = lowprimes[i],
        j = i + 1;

    while (j < lowprimes.length && m < lplim) m *= lowprimes[j++];

    m = x.modInt(m);

    while (i < j) if (m % lowprimes[i++] == 0) return false;
  }

  return x.millerRabin(t);
} //(protected) true if probably prime (HAC 4.24, Miller-Rabin)


function bnpMillerRabin(t) {
  var n1 = this.subtract(BigInteger.ONE);
  var k = n1.getLowestSetBit();
  if (k <= 0) return false;
  var r = n1.shiftRight(k);
  var prng = bnGetPrng();
  var a;

  for (var i = 0; i < t; ++i) {
    // select witness 'a' at random from between 1 and n1
    do {
      a = new BigInteger(this.bitLength(), prng);
    } while (a.compareTo(BigInteger.ONE) <= 0 || a.compareTo(n1) >= 0);

    var y = a.modPow(r, this);

    if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {
      var j = 1;

      while (j++ < k && y.compareTo(n1) != 0) {
        y = y.modPowInt(2, this);
        if (y.compareTo(BigInteger.ONE) == 0) return false;
      }

      if (y.compareTo(n1) != 0) return false;
    }
  }

  return true;
} // get pseudo random number generator


function bnGetPrng() {
  // create prng with api that matches BigInteger secure random
  return {
    // x is an array to fill with bytes
    nextBytes: function nextBytes(x) {
      for (var i = 0; i < x.length; ++i) {
        x[i] = Math.floor(Math.random() * 0x0100);
      }
    }
  };
} //protected


BigInteger.prototype.chunkSize = bnpChunkSize;
BigInteger.prototype.toRadix = bnpToRadix;
BigInteger.prototype.fromRadix = bnpFromRadix;
BigInteger.prototype.fromNumber = bnpFromNumber;
BigInteger.prototype.bitwiseTo = bnpBitwiseTo;
BigInteger.prototype.changeBit = bnpChangeBit;
BigInteger.prototype.addTo = bnpAddTo;
BigInteger.prototype.dMultiply = bnpDMultiply;
BigInteger.prototype.dAddOffset = bnpDAddOffset;
BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;
BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;
BigInteger.prototype.modInt = bnpModInt;
BigInteger.prototype.millerRabin = bnpMillerRabin; //public

BigInteger.prototype.clone = bnClone;
BigInteger.prototype.intValue = bnIntValue;
BigInteger.prototype.byteValue = bnByteValue;
BigInteger.prototype.shortValue = bnShortValue;
BigInteger.prototype.signum = bnSigNum;
BigInteger.prototype.toByteArray = bnToByteArray;
BigInteger.prototype.equals = bnEquals;
BigInteger.prototype.min = bnMin;
BigInteger.prototype.max = bnMax;
BigInteger.prototype.and = bnAnd;
BigInteger.prototype.or = bnOr;
BigInteger.prototype.xor = bnXor;
BigInteger.prototype.andNot = bnAndNot;
BigInteger.prototype.not = bnNot;
BigInteger.prototype.shiftLeft = bnShiftLeft;
BigInteger.prototype.shiftRight = bnShiftRight;
BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;
BigInteger.prototype.bitCount = bnBitCount;
BigInteger.prototype.testBit = bnTestBit;
BigInteger.prototype.setBit = bnSetBit;
BigInteger.prototype.clearBit = bnClearBit;
BigInteger.prototype.flipBit = bnFlipBit;
BigInteger.prototype.add = bnAdd;
BigInteger.prototype.subtract = bnSubtract;
BigInteger.prototype.multiply = bnMultiply;
BigInteger.prototype.divide = bnDivide;
BigInteger.prototype.remainder = bnRemainder;
BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;
BigInteger.prototype.modPow = bnModPow;
BigInteger.prototype.modInverse = bnModInverse;
BigInteger.prototype.pow = bnPow;
BigInteger.prototype.gcd = bnGCD;
BigInteger.prototype.isProbablePrime = bnIsProbablePrime; //BigInteger interfaces not implemented in jsbn:
//BigInteger(int signum, byte[] magnitude)
//double doubleValue()
//float floatValue()
//int hashCode()
//long longValue()
//static BigInteger valueOf(long val)

/***/ }),
/* 126 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * DES (Data Encryption Standard) implementation.
 *
 * This implementation supports DES as well as 3DES-EDE in ECB and CBC mode.
 * It is based on the BSD-licensed implementation by Paul Tero:
 *
 * Paul Tero, July 2001
 * http://www.tero.co.uk/des/
 *
 * Optimised for performance with large blocks by
 * Michael Hayworth, November 2001
 * http://www.netdealing.com
 *
 * THIS SOFTWARE IS PROVIDED "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * @author Stefan Siegl
 * @author Dave Longley
 *
 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
 * Copyright (c) 2012-2014 Digital Bazaar, Inc.
 */
var forge = __webpack_require__(7);

__webpack_require__(199);

__webpack_require__(200);

__webpack_require__(10);
/* DES API */


module.exports = forge.des = forge.des || {};
/**
 * Deprecated. Instead, use:
 *
 * var cipher = forge.cipher.createCipher('DES-<mode>', key);
 * cipher.start({iv: iv});
 *
 * Creates an DES cipher object to encrypt data using the given symmetric key.
 * The output will be stored in the 'output' member of the returned cipher.
 *
 * The key and iv may be given as binary-encoded strings of bytes or
 * byte buffers.
 *
 * @param key the symmetric key to use (64 or 192 bits).
 * @param iv the initialization vector to use.
 * @param output the buffer to write to, null to create one.
 * @param mode the cipher mode to use (default: 'CBC' if IV is
 *          given, 'ECB' if null).
 *
 * @return the cipher.
 */

forge.des.startEncrypting = function (key, iv, output, mode) {
  var cipher = _createCipher({
    key: key,
    output: output,
    decrypt: false,
    mode: mode || (iv === null ? 'ECB' : 'CBC')
  });

  cipher.start(iv);
  return cipher;
};
/**
 * Deprecated. Instead, use:
 *
 * var cipher = forge.cipher.createCipher('DES-<mode>', key);
 *
 * Creates an DES cipher object to encrypt data using the given symmetric key.
 *
 * The key may be given as a binary-encoded string of bytes or a byte buffer.
 *
 * @param key the symmetric key to use (64 or 192 bits).
 * @param mode the cipher mode to use (default: 'CBC').
 *
 * @return the cipher.
 */


forge.des.createEncryptionCipher = function (key, mode) {
  return _createCipher({
    key: key,
    output: null,
    decrypt: false,
    mode: mode
  });
};
/**
 * Deprecated. Instead, use:
 *
 * var decipher = forge.cipher.createDecipher('DES-<mode>', key);
 * decipher.start({iv: iv});
 *
 * Creates an DES cipher object to decrypt data using the given symmetric key.
 * The output will be stored in the 'output' member of the returned cipher.
 *
 * The key and iv may be given as binary-encoded strings of bytes or
 * byte buffers.
 *
 * @param key the symmetric key to use (64 or 192 bits).
 * @param iv the initialization vector to use.
 * @param output the buffer to write to, null to create one.
 * @param mode the cipher mode to use (default: 'CBC' if IV is
 *          given, 'ECB' if null).
 *
 * @return the cipher.
 */


forge.des.startDecrypting = function (key, iv, output, mode) {
  var cipher = _createCipher({
    key: key,
    output: output,
    decrypt: true,
    mode: mode || (iv === null ? 'ECB' : 'CBC')
  });

  cipher.start(iv);
  return cipher;
};
/**
 * Deprecated. Instead, use:
 *
 * var decipher = forge.cipher.createDecipher('DES-<mode>', key);
 *
 * Creates an DES cipher object to decrypt data using the given symmetric key.
 *
 * The key may be given as a binary-encoded string of bytes or a byte buffer.
 *
 * @param key the symmetric key to use (64 or 192 bits).
 * @param mode the cipher mode to use (default: 'CBC').
 *
 * @return the cipher.
 */


forge.des.createDecryptionCipher = function (key, mode) {
  return _createCipher({
    key: key,
    output: null,
    decrypt: true,
    mode: mode
  });
};
/**
 * Creates a new DES cipher algorithm object.
 *
 * @param name the name of the algorithm.
 * @param mode the mode factory function.
 *
 * @return the DES algorithm object.
 */


forge.des.Algorithm = function (name, mode) {
  var self = this;
  self.name = name;
  self.mode = new mode({
    blockSize: 8,
    cipher: {
      encrypt: function encrypt(inBlock, outBlock) {
        return _updateBlock(self._keys, inBlock, outBlock, false);
      },
      decrypt: function decrypt(inBlock, outBlock) {
        return _updateBlock(self._keys, inBlock, outBlock, true);
      }
    }
  });
  self._init = false;
};
/**
 * Initializes this DES algorithm by expanding its key.
 *
 * @param options the options to use.
 *          key the key to use with this algorithm.
 *          decrypt true if the algorithm should be initialized for decryption,
 *            false for encryption.
 */


forge.des.Algorithm.prototype.initialize = function (options) {
  if (this._init) {
    return;
  }

  var key = forge.util.createBuffer(options.key);

  if (this.name.indexOf('3DES') === 0) {
    if (key.length() !== 24) {
      throw new Error('Invalid Triple-DES key size: ' + key.length() * 8);
    }
  } // do key expansion to 16 or 48 subkeys (single or triple DES)


  this._keys = _createKeys(key);
  this._init = true;
};
/** Register DES algorithms **/


registerAlgorithm('DES-ECB', forge.cipher.modes.ecb);
registerAlgorithm('DES-CBC', forge.cipher.modes.cbc);
registerAlgorithm('DES-CFB', forge.cipher.modes.cfb);
registerAlgorithm('DES-OFB', forge.cipher.modes.ofb);
registerAlgorithm('DES-CTR', forge.cipher.modes.ctr);
registerAlgorithm('3DES-ECB', forge.cipher.modes.ecb);
registerAlgorithm('3DES-CBC', forge.cipher.modes.cbc);
registerAlgorithm('3DES-CFB', forge.cipher.modes.cfb);
registerAlgorithm('3DES-OFB', forge.cipher.modes.ofb);
registerAlgorithm('3DES-CTR', forge.cipher.modes.ctr);

function registerAlgorithm(name, mode) {
  var factory = function factory() {
    return new forge.des.Algorithm(name, mode);
  };

  forge.cipher.registerAlgorithm(name, factory);
}
/** DES implementation **/


var spfunction1 = [0x1010400, 0, 0x10000, 0x1010404, 0x1010004, 0x10404, 0x4, 0x10000, 0x400, 0x1010400, 0x1010404, 0x400, 0x1000404, 0x1010004, 0x1000000, 0x4, 0x404, 0x1000400, 0x1000400, 0x10400, 0x10400, 0x1010000, 0x1010000, 0x1000404, 0x10004, 0x1000004, 0x1000004, 0x10004, 0, 0x404, 0x10404, 0x1000000, 0x10000, 0x1010404, 0x4, 0x1010000, 0x1010400, 0x1000000, 0x1000000, 0x400, 0x1010004, 0x10000, 0x10400, 0x1000004, 0x400, 0x4, 0x1000404, 0x10404, 0x1010404, 0x10004, 0x1010000, 0x1000404, 0x1000004, 0x404, 0x10404, 0x1010400, 0x404, 0x1000400, 0x1000400, 0, 0x10004, 0x10400, 0, 0x1010004];
var spfunction2 = [-0x7fef7fe0, -0x7fff8000, 0x8000, 0x108020, 0x100000, 0x20, -0x7fefffe0, -0x7fff7fe0, -0x7fffffe0, -0x7fef7fe0, -0x7fef8000, -0x80000000, -0x7fff8000, 0x100000, 0x20, -0x7fefffe0, 0x108000, 0x100020, -0x7fff7fe0, 0, -0x80000000, 0x8000, 0x108020, -0x7ff00000, 0x100020, -0x7fffffe0, 0, 0x108000, 0x8020, -0x7fef8000, -0x7ff00000, 0x8020, 0, 0x108020, -0x7fefffe0, 0x100000, -0x7fff7fe0, -0x7ff00000, -0x7fef8000, 0x8000, -0x7ff00000, -0x7fff8000, 0x20, -0x7fef7fe0, 0x108020, 0x20, 0x8000, -0x80000000, 0x8020, -0x7fef8000, 0x100000, -0x7fffffe0, 0x100020, -0x7fff7fe0, -0x7fffffe0, 0x100020, 0x108000, 0, -0x7fff8000, 0x8020, -0x80000000, -0x7fefffe0, -0x7fef7fe0, 0x108000];
var spfunction3 = [0x208, 0x8020200, 0, 0x8020008, 0x8000200, 0, 0x20208, 0x8000200, 0x20008, 0x8000008, 0x8000008, 0x20000, 0x8020208, 0x20008, 0x8020000, 0x208, 0x8000000, 0x8, 0x8020200, 0x200, 0x20200, 0x8020000, 0x8020008, 0x20208, 0x8000208, 0x20200, 0x20000, 0x8000208, 0x8, 0x8020208, 0x200, 0x8000000, 0x8020200, 0x8000000, 0x20008, 0x208, 0x20000, 0x8020200, 0x8000200, 0, 0x200, 0x20008, 0x8020208, 0x8000200, 0x8000008, 0x200, 0, 0x8020008, 0x8000208, 0x20000, 0x8000000, 0x8020208, 0x8, 0x20208, 0x20200, 0x8000008, 0x8020000, 0x8000208, 0x208, 0x8020000, 0x20208, 0x8, 0x8020008, 0x20200];
var spfunction4 = [0x802001, 0x2081, 0x2081, 0x80, 0x802080, 0x800081, 0x800001, 0x2001, 0, 0x802000, 0x802000, 0x802081, 0x81, 0, 0x800080, 0x800001, 0x1, 0x2000, 0x800000, 0x802001, 0x80, 0x800000, 0x2001, 0x2080, 0x800081, 0x1, 0x2080, 0x800080, 0x2000, 0x802080, 0x802081, 0x81, 0x800080, 0x800001, 0x802000, 0x802081, 0x81, 0, 0, 0x802000, 0x2080, 0x800080, 0x800081, 0x1, 0x802001, 0x2081, 0x2081, 0x80, 0x802081, 0x81, 0x1, 0x2000, 0x800001, 0x2001, 0x802080, 0x800081, 0x2001, 0x2080, 0x800000, 0x802001, 0x80, 0x800000, 0x2000, 0x802080];
var spfunction5 = [0x100, 0x2080100, 0x2080000, 0x42000100, 0x80000, 0x100, 0x40000000, 0x2080000, 0x40080100, 0x80000, 0x2000100, 0x40080100, 0x42000100, 0x42080000, 0x80100, 0x40000000, 0x2000000, 0x40080000, 0x40080000, 0, 0x40000100, 0x42080100, 0x42080100, 0x2000100, 0x42080000, 0x40000100, 0, 0x42000000, 0x2080100, 0x2000000, 0x42000000, 0x80100, 0x80000, 0x42000100, 0x100, 0x2000000, 0x40000000, 0x2080000, 0x42000100, 0x40080100, 0x2000100, 0x40000000, 0x42080000, 0x2080100, 0x40080100, 0x100, 0x2000000, 0x42080000, 0x42080100, 0x80100, 0x42000000, 0x42080100, 0x2080000, 0, 0x40080000, 0x42000000, 0x80100, 0x2000100, 0x40000100, 0x80000, 0, 0x40080000, 0x2080100, 0x40000100];
var spfunction6 = [0x20000010, 0x20400000, 0x4000, 0x20404010, 0x20400000, 0x10, 0x20404010, 0x400000, 0x20004000, 0x404010, 0x400000, 0x20000010, 0x400010, 0x20004000, 0x20000000, 0x4010, 0, 0x400010, 0x20004010, 0x4000, 0x404000, 0x20004010, 0x10, 0x20400010, 0x20400010, 0, 0x404010, 0x20404000, 0x4010, 0x404000, 0x20404000, 0x20000000, 0x20004000, 0x10, 0x20400010, 0x404000, 0x20404010, 0x400000, 0x4010, 0x20000010, 0x400000, 0x20004000, 0x20000000, 0x4010, 0x20000010, 0x20404010, 0x404000, 0x20400000, 0x404010, 0x20404000, 0, 0x20400010, 0x10, 0x4000, 0x20400000, 0x404010, 0x4000, 0x400010, 0x20004010, 0, 0x20404000, 0x20000000, 0x400010, 0x20004010];
var spfunction7 = [0x200000, 0x4200002, 0x4000802, 0, 0x800, 0x4000802, 0x200802, 0x4200800, 0x4200802, 0x200000, 0, 0x4000002, 0x2, 0x4000000, 0x4200002, 0x802, 0x4000800, 0x200802, 0x200002, 0x4000800, 0x4000002, 0x4200000, 0x4200800, 0x200002, 0x4200000, 0x800, 0x802, 0x4200802, 0x200800, 0x2, 0x4000000, 0x200800, 0x4000000, 0x200800, 0x200000, 0x4000802, 0x4000802, 0x4200002, 0x4200002, 0x2, 0x200002, 0x4000000, 0x4000800, 0x200000, 0x4200800, 0x802, 0x200802, 0x4200800, 0x802, 0x4000002, 0x4200802, 0x4200000, 0x200800, 0, 0x2, 0x4200802, 0, 0x200802, 0x4200000, 0x800, 0x4000002, 0x4000800, 0x800, 0x200002];
var spfunction8 = [0x10001040, 0x1000, 0x40000, 0x10041040, 0x10000000, 0x10001040, 0x40, 0x10000000, 0x40040, 0x10040000, 0x10041040, 0x41000, 0x10041000, 0x41040, 0x1000, 0x40, 0x10040000, 0x10000040, 0x10001000, 0x1040, 0x41000, 0x40040, 0x10040040, 0x10041000, 0x1040, 0, 0, 0x10040040, 0x10000040, 0x10001000, 0x41040, 0x40000, 0x41040, 0x40000, 0x10041000, 0x1000, 0x40, 0x10040040, 0x1000, 0x41040, 0x10001000, 0x40, 0x10000040, 0x10040000, 0x10040040, 0x10000000, 0x40000, 0x10001040, 0, 0x10041040, 0x40040, 0x10000040, 0x10040000, 0x10001000, 0x10001040, 0, 0x10041040, 0x41000, 0x41000, 0x1040, 0x1040, 0x40040, 0x10000000, 0x10041000];
/**
 * Create necessary sub keys.
 *
 * @param key the 64-bit or 192-bit key.
 *
 * @return the expanded keys.
 */

function _createKeys(key) {
  var pc2bytes0 = [0, 0x4, 0x20000000, 0x20000004, 0x10000, 0x10004, 0x20010000, 0x20010004, 0x200, 0x204, 0x20000200, 0x20000204, 0x10200, 0x10204, 0x20010200, 0x20010204],
      pc2bytes1 = [0, 0x1, 0x100000, 0x100001, 0x4000000, 0x4000001, 0x4100000, 0x4100001, 0x100, 0x101, 0x100100, 0x100101, 0x4000100, 0x4000101, 0x4100100, 0x4100101],
      pc2bytes2 = [0, 0x8, 0x800, 0x808, 0x1000000, 0x1000008, 0x1000800, 0x1000808, 0, 0x8, 0x800, 0x808, 0x1000000, 0x1000008, 0x1000800, 0x1000808],
      pc2bytes3 = [0, 0x200000, 0x8000000, 0x8200000, 0x2000, 0x202000, 0x8002000, 0x8202000, 0x20000, 0x220000, 0x8020000, 0x8220000, 0x22000, 0x222000, 0x8022000, 0x8222000],
      pc2bytes4 = [0, 0x40000, 0x10, 0x40010, 0, 0x40000, 0x10, 0x40010, 0x1000, 0x41000, 0x1010, 0x41010, 0x1000, 0x41000, 0x1010, 0x41010],
      pc2bytes5 = [0, 0x400, 0x20, 0x420, 0, 0x400, 0x20, 0x420, 0x2000000, 0x2000400, 0x2000020, 0x2000420, 0x2000000, 0x2000400, 0x2000020, 0x2000420],
      pc2bytes6 = [0, 0x10000000, 0x80000, 0x10080000, 0x2, 0x10000002, 0x80002, 0x10080002, 0, 0x10000000, 0x80000, 0x10080000, 0x2, 0x10000002, 0x80002, 0x10080002],
      pc2bytes7 = [0, 0x10000, 0x800, 0x10800, 0x20000000, 0x20010000, 0x20000800, 0x20010800, 0x20000, 0x30000, 0x20800, 0x30800, 0x20020000, 0x20030000, 0x20020800, 0x20030800],
      pc2bytes8 = [0, 0x40000, 0, 0x40000, 0x2, 0x40002, 0x2, 0x40002, 0x2000000, 0x2040000, 0x2000000, 0x2040000, 0x2000002, 0x2040002, 0x2000002, 0x2040002],
      pc2bytes9 = [0, 0x10000000, 0x8, 0x10000008, 0, 0x10000000, 0x8, 0x10000008, 0x400, 0x10000400, 0x408, 0x10000408, 0x400, 0x10000400, 0x408, 0x10000408],
      pc2bytes10 = [0, 0x20, 0, 0x20, 0x100000, 0x100020, 0x100000, 0x100020, 0x2000, 0x2020, 0x2000, 0x2020, 0x102000, 0x102020, 0x102000, 0x102020],
      pc2bytes11 = [0, 0x1000000, 0x200, 0x1000200, 0x200000, 0x1200000, 0x200200, 0x1200200, 0x4000000, 0x5000000, 0x4000200, 0x5000200, 0x4200000, 0x5200000, 0x4200200, 0x5200200],
      pc2bytes12 = [0, 0x1000, 0x8000000, 0x8001000, 0x80000, 0x81000, 0x8080000, 0x8081000, 0x10, 0x1010, 0x8000010, 0x8001010, 0x80010, 0x81010, 0x8080010, 0x8081010],
      pc2bytes13 = [0, 0x4, 0x100, 0x104, 0, 0x4, 0x100, 0x104, 0x1, 0x5, 0x101, 0x105, 0x1, 0x5, 0x101, 0x105]; // how many iterations (1 for des, 3 for triple des)
  // changed by Paul 16/6/2007 to use Triple DES for 9+ byte keys

  var iterations = key.length() > 8 ? 3 : 1; // stores the return keys

  var keys = []; // now define the left shifts which need to be done

  var shifts = [0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0];
  var n = 0,
      tmp;

  for (var j = 0; j < iterations; j++) {
    var left = key.getInt32();
    var right = key.getInt32();
    tmp = (left >>> 4 ^ right) & 0x0f0f0f0f;
    right ^= tmp;
    left ^= tmp << 4;
    tmp = (right >>> -16 ^ left) & 0x0000ffff;
    left ^= tmp;
    right ^= tmp << -16;
    tmp = (left >>> 2 ^ right) & 0x33333333;
    right ^= tmp;
    left ^= tmp << 2;
    tmp = (right >>> -16 ^ left) & 0x0000ffff;
    left ^= tmp;
    right ^= tmp << -16;
    tmp = (left >>> 1 ^ right) & 0x55555555;
    right ^= tmp;
    left ^= tmp << 1;
    tmp = (right >>> 8 ^ left) & 0x00ff00ff;
    left ^= tmp;
    right ^= tmp << 8;
    tmp = (left >>> 1 ^ right) & 0x55555555;
    right ^= tmp;
    left ^= tmp << 1; // right needs to be shifted and OR'd with last four bits of left

    tmp = left << 8 | right >>> 20 & 0x000000f0; // left needs to be put upside down

    left = right << 24 | right << 8 & 0xff0000 | right >>> 8 & 0xff00 | right >>> 24 & 0xf0;
    right = tmp; // now go through and perform these shifts on the left and right keys

    for (var i = 0; i < shifts.length; ++i) {
      //shift the keys either one or two bits to the left
      if (shifts[i]) {
        left = left << 2 | left >>> 26;
        right = right << 2 | right >>> 26;
      } else {
        left = left << 1 | left >>> 27;
        right = right << 1 | right >>> 27;
      }

      left &= -0xf;
      right &= -0xf; // now apply PC-2, in such a way that E is easier when encrypting or
      // decrypting this conversion will look like PC-2 except only the last 6
      // bits of each byte are used rather than 48 consecutive bits and the
      // order of lines will be according to how the S selection functions will
      // be applied: S2, S4, S6, S8, S1, S3, S5, S7

      var lefttmp = pc2bytes0[left >>> 28] | pc2bytes1[left >>> 24 & 0xf] | pc2bytes2[left >>> 20 & 0xf] | pc2bytes3[left >>> 16 & 0xf] | pc2bytes4[left >>> 12 & 0xf] | pc2bytes5[left >>> 8 & 0xf] | pc2bytes6[left >>> 4 & 0xf];
      var righttmp = pc2bytes7[right >>> 28] | pc2bytes8[right >>> 24 & 0xf] | pc2bytes9[right >>> 20 & 0xf] | pc2bytes10[right >>> 16 & 0xf] | pc2bytes11[right >>> 12 & 0xf] | pc2bytes12[right >>> 8 & 0xf] | pc2bytes13[right >>> 4 & 0xf];
      tmp = (righttmp >>> 16 ^ lefttmp) & 0x0000ffff;
      keys[n++] = lefttmp ^ tmp;
      keys[n++] = righttmp ^ tmp << 16;
    }
  }

  return keys;
}
/**
 * Updates a single block (1 byte) using DES. The update will either
 * encrypt or decrypt the block.
 *
 * @param keys the expanded keys.
 * @param input the input block (an array of 32-bit words).
 * @param output the updated output block.
 * @param decrypt true to decrypt the block, false to encrypt it.
 */


function _updateBlock(keys, input, output, decrypt) {
  // set up loops for single or triple DES
  var iterations = keys.length === 32 ? 3 : 9;
  var looping;

  if (iterations === 3) {
    looping = decrypt ? [30, -2, -2] : [0, 32, 2];
  } else {
    looping = decrypt ? [94, 62, -2, 32, 64, 2, 30, -2, -2] : [0, 32, 2, 62, 30, -2, 64, 96, 2];
  }

  var tmp;
  var left = input[0];
  var right = input[1]; // first each 64 bit chunk of the message must be permuted according to IP

  tmp = (left >>> 4 ^ right) & 0x0f0f0f0f;
  right ^= tmp;
  left ^= tmp << 4;
  tmp = (left >>> 16 ^ right) & 0x0000ffff;
  right ^= tmp;
  left ^= tmp << 16;
  tmp = (right >>> 2 ^ left) & 0x33333333;
  left ^= tmp;
  right ^= tmp << 2;
  tmp = (right >>> 8 ^ left) & 0x00ff00ff;
  left ^= tmp;
  right ^= tmp << 8;
  tmp = (left >>> 1 ^ right) & 0x55555555;
  right ^= tmp;
  left ^= tmp << 1; // rotate left 1 bit

  left = left << 1 | left >>> 31;
  right = right << 1 | right >>> 31;

  for (var j = 0; j < iterations; j += 3) {
    var endloop = looping[j + 1];
    var loopinc = looping[j + 2]; // now go through and perform the encryption or decryption

    for (var i = looping[j]; i != endloop; i += loopinc) {
      var right1 = right ^ keys[i];
      var right2 = (right >>> 4 | right << 28) ^ keys[i + 1]; // passing these bytes through the S selection functions

      tmp = left;
      left = right;
      right = tmp ^ (spfunction2[right1 >>> 24 & 0x3f] | spfunction4[right1 >>> 16 & 0x3f] | spfunction6[right1 >>> 8 & 0x3f] | spfunction8[right1 & 0x3f] | spfunction1[right2 >>> 24 & 0x3f] | spfunction3[right2 >>> 16 & 0x3f] | spfunction5[right2 >>> 8 & 0x3f] | spfunction7[right2 & 0x3f]);
    } // unreverse left and right


    tmp = left;
    left = right;
    right = tmp;
  } // rotate right 1 bit


  left = left >>> 1 | left << 31;
  right = right >>> 1 | right << 31; // now perform IP-1, which is IP in the opposite direction

  tmp = (left >>> 1 ^ right) & 0x55555555;
  right ^= tmp;
  left ^= tmp << 1;
  tmp = (right >>> 8 ^ left) & 0x00ff00ff;
  left ^= tmp;
  right ^= tmp << 8;
  tmp = (right >>> 2 ^ left) & 0x33333333;
  left ^= tmp;
  right ^= tmp << 2;
  tmp = (left >>> 16 ^ right) & 0x0000ffff;
  right ^= tmp;
  left ^= tmp << 16;
  tmp = (left >>> 4 ^ right) & 0x0f0f0f0f;
  right ^= tmp;
  left ^= tmp << 4;
  output[0] = left;
  output[1] = right;
}
/**
 * Deprecated. Instead, use:
 *
 * forge.cipher.createCipher('DES-<mode>', key);
 * forge.cipher.createDecipher('DES-<mode>', key);
 *
 * Creates a deprecated DES cipher object. This object's mode will default to
 * CBC (cipher-block-chaining).
 *
 * The key may be given as a binary-encoded string of bytes or a byte buffer.
 *
 * @param options the options to use.
 *          key the symmetric key to use (64 or 192 bits).
 *          output the buffer to write to.
 *          decrypt true for decryption, false for encryption.
 *          mode the cipher mode to use (default: 'CBC').
 *
 * @return the cipher.
 */


function _createCipher(options) {
  options = options || {};
  var mode = (options.mode || 'CBC').toUpperCase();
  var algorithm = 'DES-' + mode;
  var cipher;

  if (options.decrypt) {
    cipher = forge.cipher.createDecipher(algorithm, options.key);
  } else {
    cipher = forge.cipher.createCipher(algorithm, options.key);
  } // backwards compatible start API


  var start = cipher.start;

  cipher.start = function (iv, options) {
    // backwards compatibility: support second arg as output buffer
    var output = null;

    if (options instanceof forge.util.ByteBuffer) {
      output = options;
      options = {};
    }

    options = options || {};
    options.output = output;
    options.iv = iv;
    start.call(cipher, options);
  };

  return cipher;
}

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

/**
 * Password-Based Key-Derivation Function #2 implementation.
 *
 * See RFC 2898 for details.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2013 Digital Bazaar, Inc.
 */
var forge = __webpack_require__(7);

__webpack_require__(202);

__webpack_require__(47);

__webpack_require__(10);

var pkcs5 = forge.pkcs5 = forge.pkcs5 || {};
var crypto;

if (forge.util.isNodejs && !forge.options.usePureJavaScript) {
  crypto = __webpack_require__(126);
}
/**
 * Derives a key from a password.
 *
 * @param p the password as a binary-encoded string of bytes.
 * @param s the salt as a binary-encoded string of bytes.
 * @param c the iteration count, a positive integer.
 * @param dkLen the intended length, in bytes, of the derived key,
 *          (max: 2^32 - 1) * hash length of the PRF.
 * @param [md] the message digest (or algorithm identifier as a string) to use
 *          in the PRF, defaults to SHA-1.
 * @param [callback(err, key)] presence triggers asynchronous version, called
 *          once the operation completes.
 *
 * @return the derived key, as a binary-encoded string of bytes, for the
 *           synchronous version (if no callback is specified).
 */


module.exports = forge.pbkdf2 = pkcs5.pbkdf2 = function (p, s, c, dkLen, md, callback) {
  if (typeof md === 'function') {
    callback = md;
    md = null;
  } // use native implementation if possible and not disabled, note that
  // some node versions only support SHA-1, others allow digest to be changed


  if (forge.util.isNodejs && !forge.options.usePureJavaScript && crypto.pbkdf2 && (md === null || typeof md !== 'object') && (crypto.pbkdf2Sync.length > 4 || !md || md === 'sha1')) {
    if (typeof md !== 'string') {
      // default prf to SHA-1
      md = 'sha1';
    }

    p = Buffer.from(p, 'binary');
    s = Buffer.from(s, 'binary');

    if (!callback) {
      if (crypto.pbkdf2Sync.length === 4) {
        return crypto.pbkdf2Sync(p, s, c, dkLen).toString('binary');
      }

      return crypto.pbkdf2Sync(p, s, c, dkLen, md).toString('binary');
    }

    if (crypto.pbkdf2Sync.length === 4) {
      return crypto.pbkdf2(p, s, c, dkLen, function (err, key) {
        if (err) {
          return callback(err);
        }

        callback(null, key.toString('binary'));
      });
    }

    return crypto.pbkdf2(p, s, c, dkLen, md, function (err, key) {
      if (err) {
        return callback(err);
      }

      callback(null, key.toString('binary'));
    });
  }

  if (typeof md === 'undefined' || md === null) {
    // default prf to SHA-1
    md = 'sha1';
  }

  if (typeof md === 'string') {
    if (!(md in forge.md.algorithms)) {
      throw new Error('Unknown hash algorithm: ' + md);
    }

    md = forge.md[md].create();
  }

  var hLen = md.digestLength;
  /* 1. If dkLen > (2^32 - 1) * hLen, output "derived key too long" and
    stop. */

  if (dkLen > 0xFFFFFFFF * hLen) {
    var err = new Error('Derived key is too long.');

    if (callback) {
      return callback(err);
    }

    throw err;
  }
  /* 2. Let len be the number of hLen-octet blocks in the derived key,
    rounding up, and let r be the number of octets in the last
    block:
     len = CEIL(dkLen / hLen),
    r = dkLen - (len - 1) * hLen. */


  var len = Math.ceil(dkLen / hLen);
  var r = dkLen - (len - 1) * hLen;
  /* 3. For each block of the derived key apply the function F defined
    below to the password P, the salt S, the iteration count c, and
    the block index to compute the block:
     T_1 = F(P, S, c, 1),
    T_2 = F(P, S, c, 2),
    ...
    T_len = F(P, S, c, len),
     where the function F is defined as the exclusive-or sum of the
    first c iterates of the underlying pseudorandom function PRF
    applied to the password P and the concatenation of the salt S
    and the block index i:
     F(P, S, c, i) = u_1 XOR u_2 XOR ... XOR u_c
     where
     u_1 = PRF(P, S || INT(i)),
    u_2 = PRF(P, u_1),
    ...
    u_c = PRF(P, u_{c-1}).
     Here, INT(i) is a four-octet encoding of the integer i, most
    significant octet first. */

  var prf = forge.hmac.create();
  prf.start(md, p);
  var dk = '';
  var xor, u_c, u_c1; // sync version

  if (!callback) {
    for (var i = 1; i <= len; ++i) {
      // PRF(P, S || INT(i)) (first iteration)
      prf.start(null, null);
      prf.update(s);
      prf.update(forge.util.int32ToBytes(i));
      xor = u_c1 = prf.digest().getBytes(); // PRF(P, u_{c-1}) (other iterations)

      for (var j = 2; j <= c; ++j) {
        prf.start(null, null);
        prf.update(u_c1);
        u_c = prf.digest().getBytes(); // F(p, s, c, i)

        xor = forge.util.xorBytes(xor, u_c, hLen);
        u_c1 = u_c;
      }
      /* 4. Concatenate the blocks and extract the first dkLen octets to
        produce a derived key DK:
         DK = T_1 || T_2 ||  ...  || T_len<0..r-1> */


      dk += i < len ? xor : xor.substr(0, r);
    }
    /* 5. Output the derived key DK. */


    return dk;
  } // async version


  var i = 1,
      j;

  function outer() {
    if (i > len) {
      // done
      return callback(null, dk);
    } // PRF(P, S || INT(i)) (first iteration)


    prf.start(null, null);
    prf.update(s);
    prf.update(forge.util.int32ToBytes(i));
    xor = u_c1 = prf.digest().getBytes(); // PRF(P, u_{c-1}) (other iterations)

    j = 2;
    inner();
  }

  function inner() {
    if (j <= c) {
      prf.start(null, null);
      prf.update(u_c1);
      u_c = prf.digest().getBytes(); // F(p, s, c, i)

      xor = forge.util.xorBytes(xor, u_c, hLen);
      u_c1 = u_c;
      ++j;
      return forge.util.setImmediate(inner);
    }
    /* 4. Concatenate the blocks and extract the first dkLen octets to
      produce a derived key DK:
       DK = T_1 || T_2 ||  ...  || T_len<0..r-1> */


    dk += i < len ? xor : xor.substr(0, r);
    ++i;
    outer();
  }

  outer();
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-env browser */
 // Check native crypto exists and is enabled (In insecure context `self.crypto`
// exists but `self.crypto.subtle` does not).

exports.get = (win = self) => {
  const nativeCrypto = win.crypto || win.msCrypto;

  if (!nativeCrypto || !nativeCrypto.subtle) {
    throw Object.assign(new Error('Missing Web Crypto API. ' + 'The most likely cause of this error is that this page is being accessed ' + 'from an insecure context (i.e. not HTTPS). For more information and ' + 'possible resolutions see ' + 'https://github.com/libp2p/js-libp2p-crypto/blob/master/README.md#web-crypto-api'), {
      code: 'ERR_MISSING_WEB_CRYPTO'
    });
  }

  return nativeCrypto;
};

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const randomBytes = __webpack_require__(423);

const errcode = __webpack_require__(35);

module.exports = function (length) {
  if (isNaN(length) || length <= 0) {
    throw errcode(new Error('random bytes length must be a Number bigger than 0'), 'ERR_INVALID_LENGTH');
  }

  return randomBytes(length);
};

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const asn1 = exports;
asn1.bignum = __webpack_require__(205);
asn1.define = __webpack_require__(426).define;
asn1.base = __webpack_require__(430);
asn1.constants = __webpack_require__(431);
asn1.decoders = __webpack_require__(208);
asn1.encoders = __webpack_require__(206);

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/* eslint-disable node/no-deprecated-api */


var buffer = __webpack_require__(0);

var Buffer = buffer.Buffer;
var safer = {};
var key;

for (key in buffer) {
  if (!buffer.hasOwnProperty(key)) continue;
  if (key === 'SlowBuffer' || key === 'Buffer') continue;
  safer[key] = buffer[key];
}

var Safer = safer.Buffer = {};

for (key in Buffer) {
  if (!Buffer.hasOwnProperty(key)) continue;
  if (key === 'allocUnsafe' || key === 'allocUnsafeSlow') continue;
  Safer[key] = Buffer[key];
}

safer.Buffer.prototype = Buffer.prototype;

if (!Safer.from || Safer.from === Uint8Array.from) {
  Safer.from = function (value, encodingOrOffset, length) {
    if (typeof value === 'number') {
      throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof value);
    }

    if (value && typeof value.length === 'undefined') {
      throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + typeof value);
    }

    return Buffer(value, encodingOrOffset, length);
  };
}

if (!Safer.alloc) {
  Safer.alloc = function (size, fill, encoding) {
    if (typeof size !== 'number') {
      throw new TypeError('The "size" argument must be of type number. Received type ' + typeof size);
    }

    if (size < 0 || size >= 2 * (1 << 30)) {
      throw new RangeError('The value "' + size + '" is invalid for option "size"');
    }

    var buf = Buffer(size);

    if (!fill || fill.length === 0) {
      buf.fill(0);
    } else if (typeof encoding === 'string') {
      buf.fill(fill, encoding);
    } else {
      buf.fill(fill);
    }

    return buf;
  };
}

if (!safer.kStringMaxLength) {
  try {
    safer.kStringMaxLength = process.binding('buffer').kStringMaxLength;
  } catch (e) {// we can't determine kStringMaxLength in environments where process.binding
    // is unsupported, so let's not set it
  }
}

if (!safer.constants) {
  safer.constants = {
    MAX_LENGTH: safer.kMaxLength
  };

  if (safer.kStringMaxLength) {
    safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength;
  }
}

module.exports = safer;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5)))

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const Reporter = __webpack_require__(134).Reporter;

const EncoderBuffer = __webpack_require__(75).EncoderBuffer;

const DecoderBuffer = __webpack_require__(75).DecoderBuffer;

const assert = __webpack_require__(427); // Supported tags


const tags = ['seq', 'seqof', 'set', 'setof', 'objid', 'bool', 'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc', 'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str', 'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr']; // Public methods list

const methods = ['key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice', 'any', 'contains'].concat(tags); // Overrided methods list

const overrided = ['_peekTag', '_decodeTag', '_use', '_decodeStr', '_decodeObjid', '_decodeTime', '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList', '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime', '_encodeNull', '_encodeInt', '_encodeBool'];

function Node(enc, parent, name) {
  const state = {};
  this._baseState = state;
  state.name = name;
  state.enc = enc;
  state.parent = parent || null;
  state.children = null; // State

  state.tag = null;
  state.args = null;
  state.reverseArgs = null;
  state.choice = null;
  state.optional = false;
  state.any = false;
  state.obj = false;
  state.use = null;
  state.useDecoder = null;
  state.key = null;
  state['default'] = null;
  state.explicit = null;
  state.implicit = null;
  state.contains = null; // Should create new instance on each method

  if (!state.parent) {
    state.children = [];

    this._wrap();
  }
}

module.exports = Node;
const stateProps = ['enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice', 'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit', 'implicit', 'contains'];

Node.prototype.clone = function clone() {
  const state = this._baseState;
  const cstate = {};
  stateProps.forEach(function (prop) {
    cstate[prop] = state[prop];
  });
  const res = new this.constructor(cstate.parent);
  res._baseState = cstate;
  return res;
};

Node.prototype._wrap = function wrap() {
  const state = this._baseState;
  methods.forEach(function (method) {
    this[method] = function _wrappedMethod() {
      const clone = new this.constructor(this);
      state.children.push(clone);
      return clone[method].apply(clone, arguments);
    };
  }, this);
};

Node.prototype._init = function init(body) {
  const state = this._baseState;
  assert(state.parent === null);
  body.call(this); // Filter children

  state.children = state.children.filter(function (child) {
    return child._baseState.parent === this;
  }, this);
  assert.equal(state.children.length, 1, 'Root node can have only one child');
};

Node.prototype._useArgs = function useArgs(args) {
  const state = this._baseState; // Filter children and args

  const children = args.filter(function (arg) {
    return arg instanceof this.constructor;
  }, this);
  args = args.filter(function (arg) {
    return !(arg instanceof this.constructor);
  }, this);

  if (children.length !== 0) {
    assert(state.children === null);
    state.children = children; // Replace parent to maintain backward link

    children.forEach(function (child) {
      child._baseState.parent = this;
    }, this);
  }

  if (args.length !== 0) {
    assert(state.args === null);
    state.args = args;
    state.reverseArgs = args.map(function (arg) {
      if (typeof arg !== 'object' || arg.constructor !== Object) return arg;
      const res = {};
      Object.keys(arg).forEach(function (key) {
        if (key == (key | 0)) key |= 0;
        const value = arg[key];
        res[value] = key;
      });
      return res;
    });
  }
}; //
// Overrided methods
//


overrided.forEach(function (method) {
  Node.prototype[method] = function _overrided() {
    const state = this._baseState;
    throw new Error(method + ' not implemented for encoding: ' + state.enc);
  };
}); //
// Public methods
//

tags.forEach(function (tag) {
  Node.prototype[tag] = function _tagMethod() {
    const state = this._baseState;
    const args = Array.prototype.slice.call(arguments);
    assert(state.tag === null);
    state.tag = tag;

    this._useArgs(args);

    return this;
  };
});

Node.prototype.use = function use(item) {
  assert(item);
  const state = this._baseState;
  assert(state.use === null);
  state.use = item;
  return this;
};

Node.prototype.optional = function optional() {
  const state = this._baseState;
  state.optional = true;
  return this;
};

Node.prototype.def = function def(val) {
  const state = this._baseState;
  assert(state['default'] === null);
  state['default'] = val;
  state.optional = true;
  return this;
};

Node.prototype.explicit = function explicit(num) {
  const state = this._baseState;
  assert(state.explicit === null && state.implicit === null);
  state.explicit = num;
  return this;
};

Node.prototype.implicit = function implicit(num) {
  const state = this._baseState;
  assert(state.explicit === null && state.implicit === null);
  state.implicit = num;
  return this;
};

Node.prototype.obj = function obj() {
  const state = this._baseState;
  const args = Array.prototype.slice.call(arguments);
  state.obj = true;
  if (args.length !== 0) this._useArgs(args);
  return this;
};

Node.prototype.key = function key(newKey) {
  const state = this._baseState;
  assert(state.key === null);
  state.key = newKey;
  return this;
};

Node.prototype.any = function any() {
  const state = this._baseState;
  state.any = true;
  return this;
};

Node.prototype.choice = function choice(obj) {
  const state = this._baseState;
  assert(state.choice === null);
  state.choice = obj;

  this._useArgs(Object.keys(obj).map(function (key) {
    return obj[key];
  }));

  return this;
};

Node.prototype.contains = function contains(item) {
  const state = this._baseState;
  assert(state.use === null);
  state.contains = item;
  return this;
}; //
// Decoding
//


Node.prototype._decode = function decode(input, options) {
  const state = this._baseState; // Decode root node

  if (state.parent === null) return input.wrapResult(state.children[0]._decode(input, options));
  let result = state['default'];
  let present = true;
  let prevKey = null;
  if (state.key !== null) prevKey = input.enterKey(state.key); // Check if tag is there

  if (state.optional) {
    let tag = null;
    if (state.explicit !== null) tag = state.explicit;else if (state.implicit !== null) tag = state.implicit;else if (state.tag !== null) tag = state.tag;

    if (tag === null && !state.any) {
      // Trial and Error
      const save = input.save();

      try {
        if (state.choice === null) this._decodeGeneric(state.tag, input, options);else this._decodeChoice(input, options);
        present = true;
      } catch (e) {
        present = false;
      }

      input.restore(save);
    } else {
      present = this._peekTag(input, tag, state.any);
      if (input.isError(present)) return present;
    }
  } // Push object on stack


  let prevObj;
  if (state.obj && present) prevObj = input.enterObject();

  if (present) {
    // Unwrap explicit values
    if (state.explicit !== null) {
      const explicit = this._decodeTag(input, state.explicit);

      if (input.isError(explicit)) return explicit;
      input = explicit;
    }

    const start = input.offset; // Unwrap implicit and normal values

    if (state.use === null && state.choice === null) {
      let save;
      if (state.any) save = input.save();

      const body = this._decodeTag(input, state.implicit !== null ? state.implicit : state.tag, state.any);

      if (input.isError(body)) return body;
      if (state.any) result = input.raw(save);else input = body;
    }

    if (options && options.track && state.tag !== null) options.track(input.path(), start, input.length, 'tagged');
    if (options && options.track && state.tag !== null) options.track(input.path(), input.offset, input.length, 'content'); // Select proper method for tag

    if (state.any) {// no-op
    } else if (state.choice === null) {
      result = this._decodeGeneric(state.tag, input, options);
    } else {
      result = this._decodeChoice(input, options);
    }

    if (input.isError(result)) return result; // Decode children

    if (!state.any && state.choice === null && state.children !== null) {
      state.children.forEach(function decodeChildren(child) {
        // NOTE: We are ignoring errors here, to let parser continue with other
        // parts of encoded data
        child._decode(input, options);
      });
    } // Decode contained/encoded by schema, only in bit or octet strings


    if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
      const data = new DecoderBuffer(result);
      result = this._getUse(state.contains, input._reporterState.obj)._decode(data, options);
    }
  } // Pop object


  if (state.obj && present) result = input.leaveObject(prevObj); // Set key

  if (state.key !== null && (result !== null || present === true)) input.leaveKey(prevKey, state.key, result);else if (prevKey !== null) input.exitKey(prevKey);
  return result;
};

Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
  const state = this._baseState;
  if (tag === 'seq' || tag === 'set') return null;
  if (tag === 'seqof' || tag === 'setof') return this._decodeList(input, tag, state.args[0], options);else if (/str$/.test(tag)) return this._decodeStr(input, tag, options);else if (tag === 'objid' && state.args) return this._decodeObjid(input, state.args[0], state.args[1], options);else if (tag === 'objid') return this._decodeObjid(input, null, null, options);else if (tag === 'gentime' || tag === 'utctime') return this._decodeTime(input, tag, options);else if (tag === 'null_') return this._decodeNull(input, options);else if (tag === 'bool') return this._decodeBool(input, options);else if (tag === 'objDesc') return this._decodeStr(input, tag, options);else if (tag === 'int' || tag === 'enum') return this._decodeInt(input, state.args && state.args[0], options);

  if (state.use !== null) {
    return this._getUse(state.use, input._reporterState.obj)._decode(input, options);
  } else {
    return input.error('unknown tag: ' + tag);
  }
};

Node.prototype._getUse = function _getUse(entity, obj) {
  const state = this._baseState; // Create altered use decoder if implicit is set

  state.useDecoder = this._use(entity, obj);
  assert(state.useDecoder._baseState.parent === null);
  state.useDecoder = state.useDecoder._baseState.children[0];

  if (state.implicit !== state.useDecoder._baseState.implicit) {
    state.useDecoder = state.useDecoder.clone();
    state.useDecoder._baseState.implicit = state.implicit;
  }

  return state.useDecoder;
};

Node.prototype._decodeChoice = function decodeChoice(input, options) {
  const state = this._baseState;
  let result = null;
  let match = false;
  Object.keys(state.choice).some(function (key) {
    const save = input.save();
    const node = state.choice[key];

    try {
      const value = node._decode(input, options);

      if (input.isError(value)) return false;
      result = {
        type: key,
        value: value
      };
      match = true;
    } catch (e) {
      input.restore(save);
      return false;
    }

    return true;
  }, this);
  if (!match) return input.error('Choice not matched');
  return result;
}; //
// Encoding
//


Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
  return new EncoderBuffer(data, this.reporter);
};

Node.prototype._encode = function encode(data, reporter, parent) {
  const state = this._baseState;
  if (state['default'] !== null && state['default'] === data) return;

  const result = this._encodeValue(data, reporter, parent);

  if (result === undefined) return;
  if (this._skipDefault(result, reporter, parent)) return;
  return result;
};

Node.prototype._encodeValue = function encode(data, reporter, parent) {
  const state = this._baseState; // Decode root node

  if (state.parent === null) return state.children[0]._encode(data, reporter || new Reporter());
  let result = null; // Set reporter to share it with a child class

  this.reporter = reporter; // Check if data is there

  if (state.optional && data === undefined) {
    if (state['default'] !== null) data = state['default'];else return;
  } // Encode children first


  let content = null;
  let primitive = false;

  if (state.any) {
    // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
  } else if (state.choice) {
    result = this._encodeChoice(data, reporter);
  } else if (state.contains) {
    content = this._getUse(state.contains, parent)._encode(data, reporter);
    primitive = true;
  } else if (state.children) {
    content = state.children.map(function (child) {
      if (child._baseState.tag === 'null_') return child._encode(null, reporter, data);
      if (child._baseState.key === null) return reporter.error('Child should have a key');
      const prevKey = reporter.enterKey(child._baseState.key);
      if (typeof data !== 'object') return reporter.error('Child expected, but input is not object');

      const res = child._encode(data[child._baseState.key], reporter, data);

      reporter.leaveKey(prevKey);
      return res;
    }, this).filter(function (child) {
      return child;
    });
    content = this._createEncoderBuffer(content);
  } else {
    if (state.tag === 'seqof' || state.tag === 'setof') {
      // TODO(indutny): this should be thrown on DSL level
      if (!(state.args && state.args.length === 1)) return reporter.error('Too many args for : ' + state.tag);
      if (!Array.isArray(data)) return reporter.error('seqof/setof, but data is not Array');
      const child = this.clone();
      child._baseState.implicit = null;
      content = this._createEncoderBuffer(data.map(function (item) {
        const state = this._baseState;
        return this._getUse(state.args[0], data)._encode(item, reporter);
      }, child));
    } else if (state.use !== null) {
      result = this._getUse(state.use, parent)._encode(data, reporter);
    } else {
      content = this._encodePrimitive(state.tag, data);
      primitive = true;
    }
  } // Encode data itself


  if (!state.any && state.choice === null) {
    const tag = state.implicit !== null ? state.implicit : state.tag;
    const cls = state.implicit === null ? 'universal' : 'context';

    if (tag === null) {
      if (state.use === null) reporter.error('Tag could be omitted only for .use()');
    } else {
      if (state.use === null) result = this._encodeComposite(tag, primitive, cls, content);
    }
  } // Wrap in explicit


  if (state.explicit !== null) result = this._encodeComposite(state.explicit, false, 'context', result);
  return result;
};

Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
  const state = this._baseState;
  const node = state.choice[data.type];

  if (!node) {
    assert(false, data.type + ' not found in ' + JSON.stringify(Object.keys(state.choice)));
  }

  return node._encode(data.value, reporter);
};

Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
  const state = this._baseState;
  if (/str$/.test(tag)) return this._encodeStr(data, tag);else if (tag === 'objid' && state.args) return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);else if (tag === 'objid') return this._encodeObjid(data, null, null);else if (tag === 'gentime' || tag === 'utctime') return this._encodeTime(data, tag);else if (tag === 'null_') return this._encodeNull();else if (tag === 'int' || tag === 'enum') return this._encodeInt(data, state.args && state.reverseArgs[0]);else if (tag === 'bool') return this._encodeBool(data);else if (tag === 'objDesc') return this._encodeStr(data, tag);else throw new Error('Unsupported tag: ' + tag);
};

Node.prototype._isNumstr = function isNumstr(str) {
  return /^[0-9 ]*$/.test(str);
};

Node.prototype._isPrintstr = function isPrintstr(str) {
  return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(str);
};

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const inherits = __webpack_require__(4);

function Reporter(options) {
  this._reporterState = {
    obj: null,
    path: [],
    options: options || {},
    errors: []
  };
}

exports.Reporter = Reporter;

Reporter.prototype.isError = function isError(obj) {
  return obj instanceof ReporterError;
};

Reporter.prototype.save = function save() {
  const state = this._reporterState;
  return {
    obj: state.obj,
    pathLen: state.path.length
  };
};

Reporter.prototype.restore = function restore(data) {
  const state = this._reporterState;
  state.obj = data.obj;
  state.path = state.path.slice(0, data.pathLen);
};

Reporter.prototype.enterKey = function enterKey(key) {
  return this._reporterState.path.push(key);
};

Reporter.prototype.exitKey = function exitKey(index) {
  const state = this._reporterState;
  state.path = state.path.slice(0, index - 1);
};

Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
  const state = this._reporterState;
  this.exitKey(index);
  if (state.obj !== null) state.obj[key] = value;
};

Reporter.prototype.path = function path() {
  return this._reporterState.path.join('/');
};

Reporter.prototype.enterObject = function enterObject() {
  const state = this._reporterState;
  const prev = state.obj;
  state.obj = {};
  return prev;
};

Reporter.prototype.leaveObject = function leaveObject(prev) {
  const state = this._reporterState;
  const now = state.obj;
  state.obj = prev;
  return now;
};

Reporter.prototype.error = function error(msg) {
  let err;
  const state = this._reporterState;
  const inherited = msg instanceof ReporterError;

  if (inherited) {
    err = msg;
  } else {
    err = new ReporterError(state.path.map(function (elem) {
      return '[' + JSON.stringify(elem) + ']';
    }).join(''), msg.message || msg, msg.stack);
  }

  if (!state.options.partial) throw err;
  if (!inherited) state.errors.push(err);
  return err;
};

Reporter.prototype.wrapResult = function wrapResult(result) {
  const state = this._reporterState;
  if (!state.options.partial) return result;
  return {
    result: this.isError(result) ? null : result,
    errors: state.errors
  };
};

function ReporterError(path, msg) {
  this.path = path;
  this.rethrow(msg);
}

inherits(ReporterError, Error);

ReporterError.prototype.rethrow = function rethrow(msg) {
  this.message = msg + ' at: ' + (this.path || '(shallow)');
  if (Error.captureStackTrace) Error.captureStackTrace(this, ReporterError);

  if (!this.stack) {
    try {
      // IE only adds stack when thrown
      throw new Error(this.message);
    } catch (e) {
      this.stack = e.stack;
    }
  }

  return this;
};

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // Helper

function reverse(map) {
  const res = {};
  Object.keys(map).forEach(function (key) {
    // Convert key to integer if it is stringified
    if ((key | 0) == key) key = key | 0;
    const value = map[key];
    res[value] = key;
  });
  return res;
}

exports.tagClass = {
  0: 'universal',
  1: 'application',
  2: 'context',
  3: 'private'
};
exports.tagClassByName = reverse(exports.tagClass);
exports.tag = {
  0x00: 'end',
  0x01: 'bool',
  0x02: 'int',
  0x03: 'bitstr',
  0x04: 'octstr',
  0x05: 'null_',
  0x06: 'objid',
  0x07: 'objDesc',
  0x08: 'external',
  0x09: 'real',
  0x0a: 'enum',
  0x0b: 'embed',
  0x0c: 'utf8str',
  0x0d: 'relativeOid',
  0x10: 'seq',
  0x11: 'set',
  0x12: 'numstr',
  0x13: 'printstr',
  0x14: 't61str',
  0x15: 'videostr',
  0x16: 'ia5str',
  0x17: 'utctime',
  0x18: 'gentime',
  0x19: 'graphstr',
  0x1a: 'iso646str',
  0x1b: 'genstr',
  0x1c: 'unistr',
  0x1d: 'charstr',
  0x1e: 'bmpstr'
};
exports.tagByName = reverse(exports.tag);

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(4);

var HashBase = __webpack_require__(214);

var Buffer = __webpack_require__(6).Buffer;

var ARRAY16 = new Array(16);

function MD5() {
  HashBase.call(this, 64); // state

  this._a = 0x67452301;
  this._b = 0xefcdab89;
  this._c = 0x98badcfe;
  this._d = 0x10325476;
}

inherits(MD5, HashBase);

MD5.prototype._update = function () {
  var M = ARRAY16;

  for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4);

  var a = this._a;
  var b = this._b;
  var c = this._c;
  var d = this._d;
  a = fnF(a, b, c, d, M[0], 0xd76aa478, 7);
  d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12);
  c = fnF(c, d, a, b, M[2], 0x242070db, 17);
  b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22);
  a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7);
  d = fnF(d, a, b, c, M[5], 0x4787c62a, 12);
  c = fnF(c, d, a, b, M[6], 0xa8304613, 17);
  b = fnF(b, c, d, a, M[7], 0xfd469501, 22);
  a = fnF(a, b, c, d, M[8], 0x698098d8, 7);
  d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12);
  c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17);
  b = fnF(b, c, d, a, M[11], 0x895cd7be, 22);
  a = fnF(a, b, c, d, M[12], 0x6b901122, 7);
  d = fnF(d, a, b, c, M[13], 0xfd987193, 12);
  c = fnF(c, d, a, b, M[14], 0xa679438e, 17);
  b = fnF(b, c, d, a, M[15], 0x49b40821, 22);
  a = fnG(a, b, c, d, M[1], 0xf61e2562, 5);
  d = fnG(d, a, b, c, M[6], 0xc040b340, 9);
  c = fnG(c, d, a, b, M[11], 0x265e5a51, 14);
  b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20);
  a = fnG(a, b, c, d, M[5], 0xd62f105d, 5);
  d = fnG(d, a, b, c, M[10], 0x02441453, 9);
  c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14);
  b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20);
  a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5);
  d = fnG(d, a, b, c, M[14], 0xc33707d6, 9);
  c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14);
  b = fnG(b, c, d, a, M[8], 0x455a14ed, 20);
  a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5);
  d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9);
  c = fnG(c, d, a, b, M[7], 0x676f02d9, 14);
  b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20);
  a = fnH(a, b, c, d, M[5], 0xfffa3942, 4);
  d = fnH(d, a, b, c, M[8], 0x8771f681, 11);
  c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16);
  b = fnH(b, c, d, a, M[14], 0xfde5380c, 23);
  a = fnH(a, b, c, d, M[1], 0xa4beea44, 4);
  d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11);
  c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16);
  b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23);
  a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4);
  d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11);
  c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16);
  b = fnH(b, c, d, a, M[6], 0x04881d05, 23);
  a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4);
  d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11);
  c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16);
  b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23);
  a = fnI(a, b, c, d, M[0], 0xf4292244, 6);
  d = fnI(d, a, b, c, M[7], 0x432aff97, 10);
  c = fnI(c, d, a, b, M[14], 0xab9423a7, 15);
  b = fnI(b, c, d, a, M[5], 0xfc93a039, 21);
  a = fnI(a, b, c, d, M[12], 0x655b59c3, 6);
  d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10);
  c = fnI(c, d, a, b, M[10], 0xffeff47d, 15);
  b = fnI(b, c, d, a, M[1], 0x85845dd1, 21);
  a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6);
  d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10);
  c = fnI(c, d, a, b, M[6], 0xa3014314, 15);
  b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21);
  a = fnI(a, b, c, d, M[4], 0xf7537e82, 6);
  d = fnI(d, a, b, c, M[11], 0xbd3af235, 10);
  c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15);
  b = fnI(b, c, d, a, M[9], 0xeb86d391, 21);
  this._a = this._a + a | 0;
  this._b = this._b + b | 0;
  this._c = this._c + c | 0;
  this._d = this._d + d | 0;
};

MD5.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80;

  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64);

    this._update();

    this._blockOffset = 0;
  }

  this._block.fill(0, this._blockOffset, 56);

  this._block.writeUInt32LE(this._length[0], 56);

  this._block.writeUInt32LE(this._length[1], 60);

  this._update(); // produce result


  var buffer = Buffer.allocUnsafe(16);
  buffer.writeInt32LE(this._a, 0);
  buffer.writeInt32LE(this._b, 4);
  buffer.writeInt32LE(this._c, 8);
  buffer.writeInt32LE(this._d, 12);
  return buffer;
};

function rotl(x, n) {
  return x << n | x >>> 32 - n;
}

function fnF(a, b, c, d, m, k, s) {
  return rotl(a + (b & c | ~b & d) + m + k | 0, s) + b | 0;
}

function fnG(a, b, c, d, m, k, s) {
  return rotl(a + (b & d | c & ~d) + m + k | 0, s) + b | 0;
}

function fnH(a, b, c, d, m, k, s) {
  return rotl(a + (b ^ c ^ d) + m + k | 0, s) + b | 0;
}

function fnI(a, b, c, d, m, k, s) {
  return rotl(a + (c ^ (b | ~d)) + m + k | 0, s) + b | 0;
}

module.exports = MD5;

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports = module.exports = __webpack_require__(216);
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = __webpack_require__(139);
exports.Duplex = __webpack_require__(48);
exports.Transform = __webpack_require__(220);
exports.PassThrough = __webpack_require__(454);

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* eslint-disable node/no-deprecated-api */
var buffer = __webpack_require__(0);

var Buffer = buffer.Buffer; // alternative to using Object.keys for old browsers

function copyProps(src, dst) {
  for (var key in src) {
    dst[key] = src[key];
  }
}

if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer;
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports);
  exports.Buffer = SafeBuffer;
}

function SafeBuffer(arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length);
} // Copy static methods from Buffer


copyProps(Buffer, SafeBuffer);

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number');
  }

  return Buffer(arg, encodingOrOffset, length);
};

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number');
  }

  var buf = Buffer(size);

  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding);
    } else {
      buf.fill(fill);
    }
  } else {
    buf.fill(0);
  }

  return buf;
};

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number');
  }

  return Buffer(size);
};

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number');
  }

  return buffer.SlowBuffer(size);
};

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, setImmediate, global) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

/*<replacement>*/

var pna = __webpack_require__(96);
/*</replacement>*/


module.exports = Writable;
/* <replacement> */

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream


function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;

  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/


var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
/*</replacement>*/

/*<replacement>*/

var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;
/*<replacement>*/

var util = Object.create(__webpack_require__(76));
util.inherits = __webpack_require__(4);
/*</replacement>*/

/*<replacement>*/

var internalUtil = {
  deprecate: __webpack_require__(219)
};
/*</replacement>*/

/*<replacement>*/

var Stream = __webpack_require__(217);
/*</replacement>*/

/*<replacement>*/


var Buffer = __webpack_require__(138).Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/


var destroyImpl = __webpack_require__(218);

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || __webpack_require__(48);
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.

  var isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
  // contains buffers or objects.

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()

  var hwm = options.highWaterMark;
  var writableHwm = options.writableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm; // cast to ints.

  this.highWaterMark = Math.floor(this.highWaterMark); // if _final has been called

  this.finalCalled = false; // drain event flag.

  this.needDrain = false; // at the start of calling end()

  this.ending = false; // when end() has been called, and returned

  this.ended = false; // when 'finish' is emitted

  this.finished = false; // has it been destroyed

  this.destroyed = false; // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.

  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.

  this.length = 0; // a flag to see when we're in the middle of a write.

  this.writing = false; // when true all writes will be buffered until .uncork() call

  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.

  this.sync = true; // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.

  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

  this.onwrite = function (er) {
    onwrite(stream, er);
  }; // the callback that the user supplies to write(chunk,encoding,cb)


  this.writecb = null; // the amount that is being written when _write is called.

  this.writelen = 0;
  this.bufferedRequest = null;
  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted

  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams

  this.prefinished = false; // True if the error was already emitted and should not be thrown again

  this.errorEmitted = false; // count buffered requests

  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two

  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];

  while (current) {
    out.push(current);
    current = current.next;
  }

  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.


var realHasInstance;

if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function value(object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;
      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function realHasInstance(object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || __webpack_require__(48); // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.
  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.

  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this); // legacy.

  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;
    if (typeof options.writev === 'function') this._writev = options.writev;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.


Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end'); // TODO: defer error events consistently everywhere, not just the cb

  stream.emit('error', er);
  pna.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.


function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }

  if (er) {
    stream.emit('error', er);
    pna.nextTick(cb, er);
    valid = false;
  }

  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  if (typeof cb !== 'function') cb = nop;
  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }
  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;
  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;
    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }

  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.

function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);

    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }

  var len = state.objectMode ? 1 : chunk.length;
  state.length += len;
  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };

    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }

    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    pna.nextTick(cb, er); // this can emit finish, and it will always happen
    // after error

    pna.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er); // this can emit finish, but finish must
    // always follow error

    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;
  onwriteStateUpdate(state);
  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.


function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
} // if there's something in the buffer waiting, then process it


function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;
    var count = 0;
    var allBuffers = true;

    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }

    buffer.allBuffers = allBuffers;
    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite

    state.pendingcb++;
    state.lastBufferedRequest = null;

    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }

    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;
      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.

      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

  if (state.corked) {
    state.corked = 1;
    this.uncork();
  } // ignore unnecessary end() calls.


  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}

function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;

    if (err) {
      stream.emit('error', err);
    }

    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}

function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      pna.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);

  if (need) {
    prefinish(stream, state);

    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }

  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);

  if (cb) {
    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);
  }

  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;

  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }

  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function get() {
    if (this._writableState === undefined) {
      return false;
    }

    return this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._writableState.destroyed = value;
  }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;

Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5), __webpack_require__(91).setImmediate, __webpack_require__(8)))

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function Protocols(proto) {
  if (typeof proto === 'number') {
    if (Protocols.codes[proto]) {
      return Protocols.codes[proto];
    }

    throw new Error('no protocol with code: ' + proto);
  } else if (typeof proto === 'string' || proto instanceof String) {
    if (Protocols.names[proto]) {
      return Protocols.names[proto];
    }

    throw new Error('no protocol with name: ' + proto);
  }

  throw new Error('invalid protocol id type: ' + proto);
}

const V = -1;
Protocols.lengthPrefixedVarSize = V;
Protocols.V = V;
Protocols.table = [[4, 32, 'ip4'], [6, 16, 'tcp'], [33, 16, 'dccp'], [41, 128, 'ip6'], [42, V, 'ip6zone'], [53, V, 'dns', 'resolvable'], [54, V, 'dns4', 'resolvable'], [55, V, 'dns6', 'resolvable'], [56, V, 'dnsaddr', 'resolvable'], [132, 16, 'sctp'], [273, 16, 'udp'], [275, 0, 'p2p-webrtc-star'], [276, 0, 'p2p-webrtc-direct'], [277, 0, 'p2p-stardust'], [290, 0, 'p2p-circuit'], [301, 0, 'udt'], [302, 0, 'utp'], [400, V, 'unix', false, 'path'], // `ipfs` is added before `p2p` for legacy support.
// All text representations will default to `p2p`, but `ipfs` will
// still be supported
[421, V, 'ipfs'], // `p2p` is the preferred name for 421, and is now the default
[421, V, 'p2p'], [443, 0, 'https'], [444, 96, 'onion'], [445, 296, 'onion3'], [446, V, 'garlic64'], [460, 0, 'quic'], [477, 0, 'ws'], [478, 0, 'wss'], [479, 0, 'p2p-websocket-star'], [480, 0, 'http']];
Protocols.names = {};
Protocols.codes = {}; // populate tables

Protocols.table.map(row => {
  const proto = p.apply(null, row);
  Protocols.codes[proto.code] = proto;
  Protocols.names[proto.name] = proto;
});
Protocols.object = p;

function p(code, size, name, resolvable, path) {
  return {
    code: code,
    size: size,
    name: name,
    resolvable: Boolean(resolvable),
    path: Boolean(path)
  };
}

module.exports = Protocols;

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const parallelBatch = __webpack_require__(236);

const mergeOptions = __webpack_require__(27).bind({
  ignoreUndefined: true
});

const defaultOptions = {
  chunker: 'fixed',
  strategy: 'balanced',
  // 'flat', 'trickle'
  rawLeaves: false,
  onlyHash: false,
  reduceSingleLeafToSelf: true,
  codec: 'dag-pb',
  hashAlg: 'sha2-256',
  leafType: 'file',
  // 'raw'
  cidVersion: 0,
  progress: () => () => {},
  shardSplitThreshold: 1000,
  fileImportConcurrency: 50,
  blockWriteConcurrency: 10,
  minChunkSize: 262144,
  maxChunkSize: 262144,
  avgChunkSize: 262144,
  window: 16,
  polynomial: 17437180132763653,
  // https://github.com/ipfs/go-ipfs-chunker/blob/d0125832512163708c0804a3cda060e21acddae4/rabin.go#L11
  maxChildrenPerNode: 174,
  layerRepeat: 4,
  wrapWithDirectory: false,
  pin: true,
  recursive: false,
  hidden: false,
  preload: true,
  chunkValidator: null,
  importBuffer: null
};

module.exports =
/*#__PURE__*/
function () {
  var _ref = _wrapAsyncGenerator(function* (source, ipld, options = {}) {
    const opts = mergeOptions(defaultOptions, options);

    if (options.cidVersion > 0 && options.rawLeaves === undefined) {
      // if the cid version is 1 or above, use raw leaves as this is
      // what go does.
      opts.rawLeaves = true;
    }

    if (options.hashAlg !== undefined && options.rawLeaves === undefined) {
      // if a non-default hash alg has been specified, use raw leaves as this is
      // what go does.
      opts.rawLeaves = true;
    } // go-ifps trickle dag defaults to unixfs raw leaves, balanced dag defaults to file leaves


    if (options.strategy === 'trickle') {
      opts.leafType = 'raw';
      opts.reduceSingleLeafToSelf = false;
    }

    if (options.format) {
      opts.codec = options.format;
    }

    let dagBuilder;

    if (typeof options.dagBuilder === 'function') {
      dagBuilder = options.dagBuilder;
    } else {
      dagBuilder = __webpack_require__(502);
    }

    let treeBuilder;

    if (typeof options.treeBuilder === 'function') {
      treeBuilder = options.treeBuilder;
    } else {
      treeBuilder = __webpack_require__(524);
    }

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;

    var _iteratorError;

    try {
      for (var _iterator = _asyncIterator(treeBuilder(parallelBatch(dagBuilder(source, ipld, opts), opts.fileImportConcurrency), ipld, opts)), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
        const entry = _value;
        yield {
          cid: entry.cid,
          path: entry.path,
          unixfs: entry.unixfs,
          size: entry.size
        };
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          yield _awaitAsyncGenerator(_iterator.return());
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  });

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

function batch(_x, _x2) {
  return _batch.apply(this, arguments);
}

function _batch() {
  _batch = _wrapAsyncGenerator(function* (source, size) {
    size = parseInt(size);

    if (isNaN(size) || size < 1) {
      size = 1;
    }

    let things = [];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;

    var _iteratorError;

    try {
      for (var _iterator = _asyncIterator(source), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
        const thing = _value;
        things.push(thing);

        while (things.length >= size) {
          yield things.slice(0, size);
          things = things.slice(size);
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          yield _awaitAsyncGenerator(_iterator.return());
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    while (things.length) {
      yield things.slice(0, size);
      things = things.slice(size);
    }
  });
  return _batch.apply(this, arguments);
}

module.exports = batch;

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const all = async iterator => {
  const arr = [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;

  var _iteratorError;

  try {
    for (var _iterator = _asyncIterator(iterator), _step, _value; _step = await _iterator.next(), _iteratorNormalCompletion = _step.done, _value = await _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
      const entry = _value;
      arr.push(entry);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        await _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return arr;
};

module.exports = all;

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = class Dir {
  constructor(props, options) {
    this.options = options || {};
    Object.assign(this, props);
  }

};

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const {
  DAGLink,
  DAGNode
} = __webpack_require__(12);

const UnixFS = __webpack_require__(25);

const multihashing = __webpack_require__(22);

const Dir = __webpack_require__(144);

const persist = __webpack_require__(57);

const Bucket = __webpack_require__(527);

const mergeOptions = __webpack_require__(27).bind({
  ignoreUndefined: true
});

const hashFn = async function hashFn(value) {
  const hash = await multihashing(Buffer.from(value, 'utf8'), 'murmur3-128'); // Multihashing inserts preamble of 2 bytes. Remove it.
  // Also, murmur3 outputs 128 bit but, accidently, IPFS Go's
  // implementation only uses the first 64, so we must do the same
  // for parity..

  const justHash = hash.slice(2, 10);
  const length = justHash.length;
  const result = Buffer.alloc(length); // TODO: invert buffer because that's how Go impl does it

  for (let i = 0; i < length; i++) {
    result[length - i - 1] = justHash[i];
  }

  return result;
};

hashFn.code = 0x22; // TODO: get this from multihashing-async?

const defaultOptions = {
  hamtHashFn: hashFn,
  hamtBucketBits: 8
};

class DirSharded extends Dir {
  constructor(props, options) {
    options = mergeOptions(defaultOptions, options);
    super(props, options);
    this._bucket = Bucket({
      hashFn: options.hamtHashFn,
      bits: options.hamtBucketBits
    });
  }

  async put(name, value) {
    await this._bucket.put(name, value);
  }

  get(name) {
    return this._bucket.get(name);
  }

  childCount() {
    return this._bucket.leafCount();
  }

  directChildrenCount() {
    return this._bucket.childrenCount();
  }

  onlyChild() {
    return this._bucket.onlyChild();
  }

  eachChildSeries() {
    var _this = this;

    return _wrapAsyncGenerator(function* () {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;

      var _iteratorError;

      try {
        for (var _iterator = _asyncIterator(_this._bucket.eachLeafSeries()), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
          const {
            key,
            value
          } = _value;
          yield {
            key,
            child: value
          };
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            yield _awaitAsyncGenerator(_iterator.return());
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    })();
  }

  flush(path, ipld) {
    var _this2 = this;

    return _wrapAsyncGenerator(function* () {
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;

      var _iteratorError2;

      try {
        for (var _iterator2 = _asyncIterator(flush(path, _this2._bucket, ipld, _this2, _this2.options)), _step2, _value2; _step2 = yield _awaitAsyncGenerator(_iterator2.next()), _iteratorNormalCompletion2 = _step2.done, _value2 = yield _awaitAsyncGenerator(_step2.value), !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {
          const entry = _value2;
          yield entry;
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
            yield _awaitAsyncGenerator(_iterator2.return());
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    })();
  }

}

module.exports = DirSharded;
module.exports.hashFn = hashFn;

function flush(_x, _x2, _x3, _x4, _x5) {
  return _flush.apply(this, arguments);
}

function _flush() {
  _flush = _wrapAsyncGenerator(function* (path, bucket, ipld, shardRoot, options) {
    const children = bucket._children;
    const links = [];

    for (let i = 0; i < children.length; i++) {
      const child = children.get(i);

      if (!child) {
        continue;
      }

      const labelPrefix = i.toString(16).toUpperCase().padStart(2, '0');

      if (Bucket.isBucket(child)) {
        let shard;
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;

        var _iteratorError3;

        try {
          for (var _iterator3 = _asyncIterator((yield _awaitAsyncGenerator(flush('', child, ipld, null, options)))), _step3, _value3; _step3 = yield _awaitAsyncGenerator(_iterator3.next()), _iteratorNormalCompletion3 = _step3.done, _value3 = yield _awaitAsyncGenerator(_step3.value), !_iteratorNormalCompletion3; _iteratorNormalCompletion3 = true) {
            const subShard = _value3;
            shard = subShard;
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
              yield _awaitAsyncGenerator(_iterator3.return());
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }

        links.push(new DAGLink(labelPrefix, shard.size, shard.cid));
      } else if (typeof child.value.flush === 'function') {
        const dir = child.value;
        let flushedDir;
        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;

        var _iteratorError4;

        try {
          for (var _iterator4 = _asyncIterator(dir.flush(dir.path, ipld)), _step4, _value4; _step4 = yield _awaitAsyncGenerator(_iterator4.next()), _iteratorNormalCompletion4 = _step4.done, _value4 = yield _awaitAsyncGenerator(_step4.value), !_iteratorNormalCompletion4; _iteratorNormalCompletion4 = true) {
            const entry = _value4;
            flushedDir = entry;
            yield flushedDir;
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
              yield _awaitAsyncGenerator(_iterator4.return());
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }

        const label = labelPrefix + child.key;
        links.push(new DAGLink(label, flushedDir.size, flushedDir.cid));
      } else {
        const value = child.value;

        if (!value.node) {
          if (value.cid) {
            value.node = yield _awaitAsyncGenerator(ipld.get(value.cid));
          } else {
            continue;
          }
        }

        const label = labelPrefix + child.key;
        const size = value.node.length || value.node.size || value.node.Size;
        links.push(new DAGLink(label, size, value.cid));
      }
    } // go-ipfs uses little endian, that's why we have to
    // reverse the bit field before storing it


    const data = Buffer.from(children.bitField().reverse());
    const dir = new UnixFS({
      type: 'hamt-sharded-directory',
      data,
      fanout: bucket.tableSize(),
      hashType: options.hamtHashFn.code,
      mtime: shardRoot && shardRoot.mtime,
      mode: shardRoot && shardRoot.mode
    });
    const node = new DAGNode(dir.marshal(), links);
    const cid = yield _awaitAsyncGenerator(persist(node, ipld, options));
    yield {
      cid,
      unixfs: dir,
      path,
      size: node.size
    };
  });
  return _flush.apply(this, arguments);
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const SparseArray = __webpack_require__(528);

const wrapHash = __webpack_require__(529);

const defaultOptions = {
  bits: 8
};

class Bucket {
  constructor(options, parent, posAtParent) {
    this._options = Object.assign({}, defaultOptions, options);
    this._popCount = 0;
    this._parent = parent;
    this._posAtParent = posAtParent;

    if (!this._options.hashFn) {
      throw new Error('please define an options.hashFn');
    } // make sure we only wrap options.hashFn once in the whole tree


    if (!this._options.hash) {
      this._options.hash = wrapHash(this._options.hashFn);
    }

    this._children = new SparseArray();
  }

  static isBucket(o) {
    return o instanceof Bucket;
  }

  async put(key, value) {
    const place = await this._findNewBucketAndPos(key);
    await place.bucket._putAt(place, key, value);
  }

  async get(key) {
    const child = await this._findChild(key);

    if (child) {
      return child.value;
    }
  }

  async del(key) {
    const place = await this._findPlace(key);

    const child = place.bucket._at(place.pos);

    if (child && child.key === key) {
      place.bucket._delAt(place.pos);
    }
  }

  leafCount() {
    return this._children.compactArray().reduce((acc, child) => {
      if (child instanceof Bucket) {
        return acc + child.leafCount();
      }

      return acc + 1;
    }, 0);
  }

  childrenCount() {
    return this._children.length;
  }

  onlyChild() {
    return this._children.get(0);
  }

  *eachLeafSeries() {
    const children = this._children.compactArray();

    for (const child of children) {
      if (child instanceof Bucket) {
        for (const c2 of child.eachLeafSeries()) {
          yield c2;
        }
      } else {
        yield child;
      }
    }
  }

  serialize(map, reduce) {
    // serialize to a custom non-sparse representation
    return reduce(this._children.reduce((acc, child, index) => {
      if (child) {
        if (child instanceof Bucket) {
          acc.push(child.serialize(map, reduce));
        } else {
          acc.push(map(child, index));
        }
      }

      return acc;
    }, []));
  }

  asyncTransform(asyncMap, asyncReduce) {
    return asyncTransformBucket(this, asyncMap, asyncReduce);
  }

  toJSON() {
    return this.serialize(mapNode, reduceNodes);
  }

  prettyPrint() {
    return JSON.stringify(this.toJSON(), null, '  ');
  }

  tableSize() {
    return Math.pow(2, this._options.bits);
  }

  async _findChild(key) {
    const result = await this._findPlace(key);

    const child = result.bucket._at(result.pos);

    if (child && child.key === key) {
      return child;
    }
  }

  async _findPlace(key) {
    const hashValue = this._options.hash(key);

    const index = await hashValue.take(this._options.bits);

    const child = this._children.get(index);

    if (child instanceof Bucket) {
      return child._findPlace(hashValue);
    }

    return {
      bucket: this,
      pos: index,
      hash: hashValue
    };
  }

  async _findNewBucketAndPos(key) {
    const place = await this._findPlace(key);

    const child = place.bucket._at(place.pos);

    if (child && child.key !== key) {
      // conflict
      const bucket = new Bucket(this._options, place.bucket, place.pos);

      place.bucket._putObjectAt(place.pos, bucket); // put the previous value


      const newPlace = await bucket._findPlace(child.hash);

      newPlace.bucket._putAt(newPlace, child.key, child.value);

      return bucket._findNewBucketAndPos(place.hash);
    } // no conflict, we found the place


    return place;
  }

  _putAt(place, key, value) {
    this._putObjectAt(place.pos, {
      key: key,
      value: value,
      hash: place.hash
    });
  }

  _putObjectAt(pos, object) {
    if (!this._children.get(pos)) {
      this._popCount++;
    }

    this._children.set(pos, object);
  }

  _delAt(pos) {
    if (this._children.get(pos)) {
      this._popCount--;
    }

    this._children.unset(pos);

    this._level();
  }

  _level() {
    if (this._parent && this._popCount <= 1) {
      if (this._popCount === 1) {
        // remove myself from parent, replacing me with my only child
        const onlyChild = this._children.find(exists);

        if (!(onlyChild instanceof Bucket)) {
          const hash = onlyChild.hash;
          hash.untake(this._options.bits);
          const place = {
            pos: this._posAtParent,
            hash: hash
          };

          this._parent._putAt(place, onlyChild.key, onlyChild.value);
        }
      } else {
        this._parent._delAt(this._posAtParent);
      }
    }
  }

  _at(index) {
    return this._children.get(index);
  }

}

function exists(o) {
  return Boolean(o);
}

function mapNode(node, index) {
  return node.key;
}

function reduceNodes(nodes) {
  return nodes;
}

async function asyncTransformBucket(bucket, asyncMap, asyncReduce) {
  const output = [];

  for (const child of bucket._children.compactArray()) {
    if (child instanceof Bucket) {
      await asyncTransformBucket(child, asyncMap, asyncReduce);
    } else {
      const mappedChildren = await asyncMap(child);
      output.push({
        bitField: bucket._children.bitField(),
        children: mappedChildren
      });
    }

    return asyncReduce(output);
  }
}

module.exports = Bucket;

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const CID = __webpack_require__(3);

const errCode = __webpack_require__(2);

exports.cleanCid = cid => {
  if (CID.isCID(cid)) {
    return cid;
  } // CID constructor knows how to do the cleaning :)


  try {
    return new CID(cid);
  } catch (err) {
    throw errCode(err, 'ERR_INVALID_CID');
  }
};

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const Bignumber = __webpack_require__(36).BigNumber;

const constants = __webpack_require__(104);

const SHIFT32 = constants.SHIFT32;
const SHIFT16 = constants.SHIFT16;
const MAX_SAFE_HIGH = 0x1fffff;

exports.parseHalf = function parseHalf(buf) {
  var exp, mant, sign;
  sign = buf[0] & 0x80 ? -1 : 1;
  exp = (buf[0] & 0x7C) >> 2;
  mant = (buf[0] & 0x03) << 8 | buf[1];

  if (!exp) {
    return sign * 5.9604644775390625e-8 * mant;
  } else if (exp === 0x1f) {
    return sign * (mant ? 0 / 0 : 2e308);
  } else {
    return sign * Math.pow(2, exp - 25) * (1024 + mant);
  }
};

function toHex(n) {
  if (n < 16) {
    return '0' + n.toString(16);
  }

  return n.toString(16);
}

exports.arrayBufferToBignumber = function (buf) {
  const len = buf.byteLength;
  let res = '';

  for (let i = 0; i < len; i++) {
    res += toHex(buf[i]);
  }

  return new Bignumber(res, 16);
}; // convert an Object into a Map


exports.buildMap = obj => {
  const res = new Map();
  const keys = Object.keys(obj);
  const length = keys.length;

  for (let i = 0; i < length; i++) {
    res.set(keys[i], obj[keys[i]]);
  }

  return res;
};

exports.buildInt32 = (f, g) => {
  return f * SHIFT16 + g;
};

exports.buildInt64 = (f1, f2, g1, g2) => {
  const f = exports.buildInt32(f1, f2);
  const g = exports.buildInt32(g1, g2);

  if (f > MAX_SAFE_HIGH) {
    return new Bignumber(f).times(SHIFT32).plus(g);
  } else {
    return f * SHIFT32 + g;
  }
};

exports.writeHalf = function writeHalf(buf, half) {
  // assume 0, -0, NaN, Infinity, and -Infinity have already been caught
  // HACK: everyone settle in.  This isn't going to be pretty.
  // Translate cn-cbor's C code (from Carsten Borman):
  // uint32_t be32;
  // uint16_t be16, u16;
  // union {
  //   float f;
  //   uint32_t u;
  // } u32;
  // u32.f = float_val;
  const u32 = Buffer.allocUnsafe(4);
  u32.writeFloatBE(half, 0);
  const u = u32.readUInt32BE(0); // if ((u32.u & 0x1FFF) == 0) { /* worth trying half */
  // hildjj: If the lower 13 bits are 0, we won't lose anything in the conversion

  if ((u & 0x1FFF) !== 0) {
    return false;
  } //   int s16 = (u32.u >> 16) & 0x8000;
  //   int exp = (u32.u >> 23) & 0xff;
  //   int mant = u32.u & 0x7fffff;


  var s16 = u >> 16 & 0x8000; // top bit is sign

  const exp = u >> 23 & 0xff; // then 5 bits of exponent

  const mant = u & 0x7fffff; //   if (exp == 0 && mant == 0)
  //     ;              /* 0.0, -0.0 */
  // hildjj: zeros already handled.  Assert if you don't believe me.
  //   else if (exp >= 113 && exp <= 142) /* normalized */
  //     s16 += ((exp - 112) << 10) + (mant >> 13);

  if (exp >= 113 && exp <= 142) {
    s16 += (exp - 112 << 10) + (mant >> 13); //   else if (exp >= 103 && exp < 113) { /* denorm, exp16 = 0 */
    //     if (mant & ((1 << (126 - exp)) - 1))
    //       goto float32;         /* loss of precision */
    //     s16 += ((mant + 0x800000) >> (126 - exp));
  } else if (exp >= 103 && exp < 113) {
    if (mant & (1 << 126 - exp) - 1) {
      return false;
    }

    s16 += mant + 0x800000 >> 126 - exp; //   } else if (exp == 255 && mant == 0) { /* Inf */
    //     s16 += 0x7c00;
    // hildjj: Infinity already handled
    //   } else
    //     goto float32;           /* loss of range */
  } else {
    return false;
  } //   ensure_writable(3);
  //   u16 = s16;
  //   be16 = hton16p((const uint8_t*)&u16);


  buf.writeUInt16BE(s16, 0);
  return true;
};

exports.keySorter = function (a, b) {
  var lenA = a[0].byteLength;
  var lenB = b[0].byteLength;

  if (lenA > lenB) {
    return 1;
  }

  if (lenB > lenA) {
    return -1;
  }

  return a[0].compare(b[0]);
}; // Adapted from http://www.2ality.com/2012/03/signedzero.html


exports.isNegativeZero = x => {
  return x === 0 && 1 / x < 0;
};

exports.nextPowerOf2 = n => {
  let count = 0; // First n in the below condition is for
  // the case where n is 0

  if (n && !(n & n - 1)) {
    return n;
  }

  while (n !== 0) {
    n >>= 1;
    count += 1;
  }

  return 1 << count;
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = () => ({
  Addresses: {
    Swarm: [],
    API: '',
    Gateway: '',
    Delegates: []
  },
  Discovery: {
    MDNS: {
      Enabled: false,
      Interval: 10
    },
    webRTCStar: {
      Enabled: true
    }
  },
  Bootstrap: ['/dns4/ams-1.bootstrap.libp2p.io/tcp/443/wss/p2p/QmSoLer265NRgSp2LA3dPaeykiS1J6DifTC88f5uVQKNAd', '/dns4/lon-1.bootstrap.libp2p.io/tcp/443/wss/p2p/QmSoLMeWqB7YGVLJN3pNLQpmmEk35v6wYtsMGLzSr5QBU3', '/dns4/sfo-3.bootstrap.libp2p.io/tcp/443/wss/p2p/QmSoLPppuBtQSGwKDZT2M73ULpjvfd3aZ6ha4oFGL1KrGM', '/dns4/sgp-1.bootstrap.libp2p.io/tcp/443/wss/p2p/QmSoLSafTMBsPKadTEgaXctDQVcqN88CNLHXMkTNwMKPnu', '/dns4/nyc-1.bootstrap.libp2p.io/tcp/443/wss/p2p/QmSoLueR4xBeUbY9WZ9xGUUxunbKWcrNFTDAadQJmocnWm', '/dns4/nyc-2.bootstrap.libp2p.io/tcp/443/wss/p2p/QmSoLV4Bbm51jM9C4gDYZQ9Cy3U6aXMJDAbzgu2fzaDs64', '/dns4/node0.preload.ipfs.io/tcp/443/wss/p2p/QmZMxNdpMkewiVZLMRxaNxUeZpDUb34pWjZ1kZvsd16Zic', '/dns4/node1.preload.ipfs.io/tcp/443/wss/p2p/Qmbut9Ywz9YEDrz8ySBSgWyJk41Uvm2QJPhwDJzJyGFsD6'],
  Pubsub: {
    Enabled: true
  },
  Swarm: {
    ConnMgr: {
      LowWater: 200,
      HighWater: 500
    }
  }
});

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

module.exports = function extractDataFromBlock(block, blockStart, requestedStart, requestedEnd) {
  const blockLength = block.length;
  const blockEnd = blockStart + blockLength;

  if (requestedStart >= blockEnd || requestedEnd < blockStart) {
    // If we are looking for a byte range that is starts after the start of the block,
    // return an empty block.  This can happen when internal nodes contain data
    return Buffer.alloc(0);
  }

  if (requestedEnd >= blockStart && requestedEnd < blockEnd) {
    // If the end byte is in the current block, truncate the block to the end byte
    block = block.slice(0, requestedEnd - blockStart);
  }

  if (requestedStart >= blockStart && requestedStart < blockEnd) {
    // If the start byte is in the current block, skip to the start byte
    block = block.slice(requestedStart - blockStart);
  }

  return block;
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const errCode = __webpack_require__(2);

const validateOffsetAndLength = (size, offset, length) => {
  if (!offset) {
    offset = 0;
  }

  if (offset < 0) {
    throw errCode(new Error('Offset must be greater than or equal to 0'), 'ERR_INVALID_PARAMS');
  }

  if (offset > size) {
    throw errCode(new Error('Offset must be less than the file size'), 'ERR_INVALID_PARAMS');
  }

  if (!length && length !== 0) {
    length = size - offset;
  }

  if (length < 0) {
    throw errCode(new Error('Length must be greater than or equal to 0'), 'ERR_INVALID_PARAMS');
  }

  if (offset + length > size) {
    length = size - offset;
  }

  return {
    offset,
    length
  };
};

module.exports = validateOffsetAndLength;

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var getTime = __webpack_require__(571);

function Retimer(callback, timeout, args) {
  var that = this;
  this._started = getTime();
  this._rescheduled = 0;
  this._scheduled = timeout;
  this._args = args;
  this._timer = setTimeout(timerWrapper, timeout);

  function timerWrapper() {
    if (that._rescheduled > 0) {
      that._scheduled = that._rescheduled - (getTime() - that._started);
      that._timer = setTimeout(timerWrapper, that._scheduled);
      that._rescheduled = 0;
    } else {
      callback.apply(null, that._args);
    }
  }
}

Retimer.prototype.reschedule = function (timeout) {
  var now = getTime();

  if (now + timeout - (this._started + this._scheduled) < 0) {
    return false;
  } else {
    this._started = now;
    this._rescheduled = timeout;
    return true;
  }
};

Retimer.prototype.clear = function () {
  clearTimeout(this._timer);
};

function retimer() {
  if (typeof arguments[0] !== 'function') {
    throw new Error('callback needed');
  }

  if (typeof arguments[1] !== 'number') {
    throw new Error('timeout needed');
  }

  var args;

  if (arguments.length > 0) {
    args = new Array(arguments.length - 2);

    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i + 2];
    }
  }

  return new Retimer(arguments[0], arguments[1], args);
}

module.exports = retimer;

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const AbortController = __webpack_require__(61);
/**
 * Takes an array of AbortSignals and returns a single signal.
 * If any signals are aborted, the returned signal will be aborted.
 * @param {Array<AbortSignal>} signals
 * @returns {AbortSignal}
 */


function anySignal(signals) {
  const controller = new AbortController();

  function onAbort() {
    controller.abort();

    for (const signal of signals) {
      if (!signal || !signal.removeEventListener) continue;
      signal.removeEventListener('abort', onAbort);
    }
  }

  for (const signal of signals) {
    if (!signal || !signal.addEventListener) continue;

    if (signal.aborted) {
      onAbort();
      break;
    }

    signal.addEventListener('abort', onAbort);
  }

  return controller.signal;
}

module.exports = anySignal;
module.exports.anySignal = anySignal;

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var duration = /(-?\d*\.?\d+(?:e[-+]?\d+)?)\s*([a-zμ]*)/ig;
module.exports = parse;
/**
 * conversion ratios
 */

parse.nanosecond = parse.ns = 1 / 1e6;
parse['μs'] = parse.microsecond = 1 / 1e3;
parse.millisecond = parse.ms = 1;
parse.second = parse.sec = parse.s = parse.ms * 1000;
parse.minute = parse.min = parse.m = parse.s * 60;
parse.hour = parse.hr = parse.h = parse.m * 60;
parse.day = parse.d = parse.h * 24;
parse.week = parse.wk = parse.w = parse.d * 7;
parse.b = parse.month = parse.d * (365.25 / 12);
parse.year = parse.yr = parse.y = parse.d * 365.25;
/**
 * convert `str` to ms
 *
 * @param {String} str
 * @return {Number}
 */

function parse(str) {
  var result = 0; // ignore commas

  str = str.replace(/(\d),(\d)/g, '$1$2');
  str.replace(duration, function (_, n, units) {
    units = parse[units] || parse[units.toLowerCase().replace(/s$/, '')] || 1;
    result += parseFloat(n, 10) * units;
  });
  return result;
}

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const CID = __webpack_require__(3);

const errCode = __webpack_require__(2);

exports.parseArgs = (cid, path, options) => {
  options = options || {}; // Allow options in path position

  if (path !== undefined && typeof path !== 'string') {
    options = path;
    path = undefined;
  }

  if (typeof cid === 'string') {
    if (cid.startsWith('/ipfs/')) {
      cid = cid.substring(6);
    }

    const split = cid.split('/');

    try {
      cid = new CID(split[0]);
    } catch (err) {
      throw errCode(err, 'ERR_INVALID_CID');
    }

    split.shift();

    if (split.length > 0) {
      path = split.join('/');
    } else {
      path = path || '/';
    }
  } else if (Buffer.isBuffer(cid)) {
    try {
      cid = new CID(cid);
    } catch (err) {
      throw errCode(err, 'ERR_INVALID_CID');
    }
  }

  return [cid, path, options];
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (max) {
  if (!max) throw Error('hashlru must have a max value, of type number, greater than 0');

  var size = 0,
      cache = Object.create(null),
      _cache = Object.create(null);

  function update(key, value) {
    cache[key] = value;
    size++;

    if (size >= max) {
      size = 0;
      _cache = cache;
      cache = Object.create(null);
    }
  }

  return {
    has: function has(key) {
      return cache[key] !== undefined || _cache[key] !== undefined;
    },
    remove: function remove(key) {
      if (cache[key] !== undefined) cache[key] = undefined;
      if (_cache[key] !== undefined) _cache[key] = undefined;
    },
    get: function get(key) {
      var v = cache[key];
      if (v !== undefined) return v;

      if ((v = _cache[key]) !== undefined) {
        update(key, v);
        return v;
      }
    },
    set: function set(key, value) {
      if (cache[key] !== undefined) cache[key] = value;else update(key, value);
    },
    clear: function clear() {
      cache = Object.create(null);
      _cache = Object.create(null);
    }
  };
};

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const toPathComponents = (path = '') => {
  // split on / unless escaped with \
  return (path.trim().match(/([^\\^/]|\\\/)+/g) || []).filter(Boolean);
};

module.exports = toPathComponents;

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const mkdir = __webpack_require__(159);

const stat = __webpack_require__(107);

const log = __webpack_require__(1)('ipfs:mfs:cp');

const errCode = __webpack_require__(2);

const updateTree = __webpack_require__(63);

const updateMfsRoot = __webpack_require__(64);

const addLink = __webpack_require__(62);

const applyDefaultOptions = __webpack_require__(31);

const toMfsPath = __webpack_require__(37);

const toSourcesAndDestination = __webpack_require__(599);

const toTrail = __webpack_require__(82);

const defaultOptions = {
  parents: false,
  flush: true,
  hashAlg: 'sha2-256',
  cidVersion: 0,
  shardSplitThreshold: 1000
};

module.exports = context => {
  return async function mfsCp(...args) {
    const options = applyDefaultOptions(args, defaultOptions);
    let {
      sources,
      destination
    } = await toSourcesAndDestination(context, args);

    if (!sources.length) {
      throw errCode(new Error('Please supply at least one source'), 'ERR_INVALID_PARAMS');
    }

    options.parents = options.p || options.parents; // make sure all sources exist

    const missing = sources.find(source => !source.exists);

    if (missing) {
      throw errCode(new Error("".concat(missing.path, " does not exist")), 'ERR_INVALID_PARAMS');
    }

    const destinationIsDirectory = isDirectory(destination);

    if (destination.exists) {
      log('Destination exists');

      if (sources.length === 1 && !destinationIsDirectory) {
        throw errCode(new Error('directory already has entry by that name'), 'ERR_ALREADY_EXISTS');
      }
    } else {
      log('Destination does not exist');

      if (sources.length > 1) {
        // copying multiple files to one location, destination will be a directory
        if (!options.parents) {
          throw errCode(new Error('destination did not exist, pass -p to create intermediate directories'), 'ERR_INVALID_PARAMS');
        }

        await mkdir(context)(destination.path, options);
        destination = await toMfsPath(context, destination.path);
      } else if (destination.parts.length > 1) {
        // copying to a folder, create it if necessary
        const parentFolder = "/".concat(destination.parts.slice(0, -1).join('/'));

        try {
          await stat(context)(parentFolder, options);
        } catch (err) {
          if (err.code !== 'ERR_NOT_FOUND') {
            throw err;
          }

          if (!options.parents) {
            throw errCode(new Error('destination did not exist, pass -p to create intermediate directories'), 'ERR_INVALID_PARAMS');
          }

          await mkdir(context)(parentFolder, options);
          destination = await toMfsPath(context, destination.path);
        }
      }
    }

    const destinationPath = isDirectory(destination) ? destination.mfsPath : destination.mfsDirectory;
    const trail = await toTrail(context, destinationPath, options);

    if (sources.length === 1) {
      const source = sources.pop();
      const destinationName = destinationIsDirectory ? source.name : destination.name;
      log("Only one source, copying to destination ".concat(destinationIsDirectory ? 'directory' : 'file', " ").concat(destinationName));
      return copyToFile(context, source, destinationName, trail, options);
    }

    log('Multiple sources, wrapping in a directory');
    return copyToDirectory(context, sources, destination, trail, options);
  };
};

const isDirectory = destination => {
  return destination.unixfs && destination.unixfs.type && destination.unixfs.type.includes('directory');
};

const copyToFile = async (context, source, destination, destinationTrail, options) => {
  let parent = destinationTrail.pop();
  parent = await addSourceToParent(context, source, destination, parent, options); // update the tree with the new containing directory

  destinationTrail.push(parent);
  const newRootCid = await updateTree(context, destinationTrail, options); // Update the MFS record with the new CID for the root of the tree

  await updateMfsRoot(context, newRootCid);
};

const copyToDirectory = async (context, sources, destination, destinationTrail, options) => {
  // copy all the sources to the destination
  for (let i = 0; i < sources.length; i++) {
    const source = sources[i];
    destination = await addSourceToParent(context, source, source.name, destination, options);
  } // update the tree with the new containing directory


  destinationTrail[destinationTrail.length - 1] = destination;
  const newRootCid = await updateTree(context, destinationTrail, options); // Update the MFS record with the new CID for the root of the tree

  await updateMfsRoot(context, newRootCid);
};

const addSourceToParent = async (context, source, childName, parent, options) => {
  const sourceBlock = await context.repo.blocks.get(source.cid);
  const {
    node,
    cid
  } = await addLink(context, {
    parentCid: parent.cid,
    size: sourceBlock.data.length,
    cid: source.cid,
    name: childName,
    hashAlg: options.hashAlg,
    cidVersion: options.cidVersion,
    flush: options.flush
  });
  parent.node = node;
  parent.cid = cid;
  parent.size = node.size;
  return parent;
};

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const errCode = __webpack_require__(2);

const log = __webpack_require__(1)('ipfs:mfs:mkdir');

const exporter = __webpack_require__(33);

const createNode = __webpack_require__(598);

const toPathComponents = __webpack_require__(157);

const updateMfsRoot = __webpack_require__(64);

const updateTree = __webpack_require__(63);

const addLink = __webpack_require__(62);

const withMfsRoot = __webpack_require__(269);

const applyDefaultOptions = __webpack_require__(31);

const {
  FILE_SEPARATOR
} = __webpack_require__(34);

const defaultOptions = {
  parents: false,
  hashAlg: 'sha2-256',
  cidVersion: 0,
  shardSplitThreshold: 1000,
  flush: true,
  mode: null,
  mtime: null
};

module.exports = context => {
  return async function mfsMkdir(path, options) {
    options = applyDefaultOptions(options, defaultOptions);

    if (!path) {
      throw new Error('no path given to Mkdir');
    }

    path = path.trim();

    if (path === FILE_SEPARATOR) {
      if (options.parents) {
        return;
      }

      throw errCode(new Error("cannot create directory '".concat(FILE_SEPARATOR, "': Already exists")), 'ERR_INVALID_PATH');
    }

    if (path.substring(0, 1) !== FILE_SEPARATOR) {
      throw errCode(new Error('paths must start with a leading /'), 'ERR_INVALID_PATH');
    }

    log("Creating ".concat(path));
    const pathComponents = toPathComponents(path);

    if (pathComponents[0] === 'ipfs') {
      throw errCode(new Error("path cannot have the prefix 'ipfs'"), 'ERR_INVALID_PATH');
    }

    const root = await withMfsRoot(context);
    let parent;
    const trail = [];
    const emptyDir = await createNode(context, 'directory', options); // make sure the containing folder exists, creating it if necessary

    for (let i = 0; i <= pathComponents.length; i++) {
      const subPathComponents = pathComponents.slice(0, i);
      const subPath = "/ipfs/".concat(root, "/").concat(subPathComponents.join('/'));

      try {
        parent = await exporter(subPath, context.ipld);
        log("".concat(subPath, " existed"));
        log("".concat(subPath, " had children ").concat(parent.node.Links.map(link => link.Name)));

        if (i === pathComponents.length) {
          if (options.parents) {
            return;
          }

          throw errCode(new Error('file already exists'), 'ERR_ALREADY_EXISTS');
        }

        trail.push({
          name: parent.name,
          cid: parent.cid
        });
      } catch (err) {
        if (err.code === 'ERR_NOT_FOUND') {
          if (i < pathComponents.length && !options.parents) {
            throw errCode(new Error("Intermediate directory path ".concat(subPath, " does not exist, use the -p flag to create it")), 'ERR_NOT_FOUND');
          } // add the intermediate directory


          await addEmptyDir(context, subPathComponents[subPathComponents.length - 1], emptyDir, trail[trail.length - 1], trail, options);
        } else {
          throw err;
        }
      }
    } // add an empty dir to the last path component
    // await addEmptyDir(context, pathComponents[pathComponents.length - 1], emptyDir, parent, trail)
    // update the tree from the leaf to the root


    const newRootCid = await updateTree(context, trail, options); // Update the MFS record with the new CID for the root of the tree

    await updateMfsRoot(context, newRootCid);
  };
};

const addEmptyDir = async (context, childName, emptyDir, parent, trail, options) => {
  log("Adding empty dir called ".concat(childName, " to ").concat(parent.cid));
  const result = await addLink(context, {
    parent: parent.node,
    parentCid: parent.cid,
    size: emptyDir.node.size,
    cid: emptyDir.cid,
    name: childName,
    hashAlg: options.hashAlg,
    cidVersion: options.cidVersion,
    flush: options.flush
  });
  trail[trail.length - 1].cid = result.cid;
  trail.push({
    name: childName,
    cid: emptyDir.cid
  });
};

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const toMfsPath = __webpack_require__(37);

async function toSources(context, args) {
  // Support weird mfs.mv([source, dest], options, callback) signature
  if (Array.isArray(args[0])) {
    args = args[0];
  }

  const sources = args.filter(arg => typeof arg === 'string').map(source => source.trim());
  return {
    sources: await toMfsPath(context, sources)
  };
}

module.exports = toSources;

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const errCode = __webpack_require__(2);

const updateTree = __webpack_require__(63);

const updateMfsRoot = __webpack_require__(64);

const toSources = __webpack_require__(160);

const removeLink = __webpack_require__(600);

const toMfsPath = __webpack_require__(37);

const toTrail = __webpack_require__(82);

const applyDefaultOptions = __webpack_require__(31);

const {
  FILE_SEPARATOR
} = __webpack_require__(34);

const defaultOptions = {
  recursive: false,
  cidVersion: 0,
  hashAlg: 'sha2-256',
  flush: true
};

module.exports = context => {
  return async function mfsRm() {
    const args = Array.from(arguments);
    const {
      sources
    } = await toSources(context, args, defaultOptions);
    const options = applyDefaultOptions(args, defaultOptions);

    if (!sources.length) {
      throw errCode(new Error('Please supply at least one path to remove'), 'ERR_INVALID_PARAMS');
    }

    sources.forEach(source => {
      if (source.path === FILE_SEPARATOR) {
        throw errCode(new Error('Cannot delete root'), 'ERR_INVALID_PARAMS');
      }
    });

    for (const source of sources) {
      await removePath(context, source.path, options);
    }
  };
};

const removePath = async (context, path, options) => {
  const mfsPath = await toMfsPath(context, path);
  const trail = await toTrail(context, mfsPath.mfsPath, options);
  const child = trail.pop();
  const parent = trail[trail.length - 1];

  if (!parent) {
    throw errCode(new Error("".concat(path, " does not exist")), 'ERR_NOT_FOUND');
  }

  if (child.type === 'directory' && !options.recursive) {
    throw errCode(new Error("".concat(path, " is a directory, use -r to remove directories")), 'ERR_WAS_DIR');
  }

  const {
    cid
  } = await removeLink(context, {
    parentCid: parent.cid,
    name: child.name,
    hashAlg: options.hashAlg,
    cidVersion: options.cidVersion,
    flush: options.flush
  });
  parent.cid = cid; // update the tree with the new child

  const newRootCid = await updateTree(context, trail, options); // Update the MFS record with the new CID for the root of the tree

  await updateMfsRoot(context, newRootCid);
};

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // For (old) browser support

var xtend = __webpack_require__(65);

var assign = __webpack_require__(624);

module.exports = function supports() {
  var manifest = xtend.apply(null, arguments);
  return assign(manifest, {
    // Features of abstract-leveldown
    bufferKeys: manifest.bufferKeys || false,
    snapshots: manifest.snapshots || false,
    permanence: manifest.permanence || false,
    seek: manifest.seek || false,
    clear: manifest.clear || false,
    // Features of abstract-leveldown that levelup doesn't have
    status: manifest.status || false,
    // Features of disk-based implementations
    createIfMissing: manifest.createIfMissing || false,
    errorIfExists: manifest.errorIfExists || false,
    // Features of level(up) that abstract-leveldown doesn't have yet
    deferredOpen: manifest.deferredOpen || false,
    openCallback: manifest.openCallback || false,
    promises: manifest.promises || false,
    streams: manifest.streams || false,
    encodings: manifest.encodings || false,
    // Methods that are not part of abstract-leveldown or levelup
    additionalMethods: xtend(manifest.additionalMethods)
  });
};

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports = module.exports = __webpack_require__(282);
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = __webpack_require__(286);
exports.Duplex = __webpack_require__(67);
exports.Transform = __webpack_require__(287);
exports.PassThrough = __webpack_require__(632);
exports.finished = __webpack_require__(164);
exports.pipeline = __webpack_require__(633);

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).


var ERR_STREAM_PREMATURE_CLOSE = __webpack_require__(66).codes.ERR_STREAM_PREMATURE_CLOSE;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    callback.apply(this, args);
  };
}

function noop() {}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function eos(stream, opts, callback) {
  if (typeof opts === 'function') return eos(stream, null, opts);
  if (!opts) opts = {};
  callback = once(callback || noop);
  var readable = opts.readable || opts.readable !== false && stream.readable;
  var writable = opts.writable || opts.writable !== false && stream.writable;

  var onlegacyfinish = function onlegacyfinish() {
    if (!stream.writable) onfinish();
  };

  var writableEnded = stream._writableState && stream._writableState.finished;

  var onfinish = function onfinish() {
    writable = false;
    writableEnded = true;
    if (!readable) callback.call(stream);
  };

  var readableEnded = stream._readableState && stream._readableState.endEmitted;

  var onend = function onend() {
    readable = false;
    readableEnded = true;
    if (!writable) callback.call(stream);
  };

  var onerror = function onerror(err) {
    callback.call(stream, err);
  };

  var onclose = function onclose() {
    var err;

    if (readable && !readableEnded) {
      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }

    if (writable && !writableEnded) {
      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
  };

  var onrequest = function onrequest() {
    stream.req.on('finish', onfinish);
  };

  if (isRequest(stream)) {
    stream.on('complete', onfinish);
    stream.on('abort', onclose);
    if (stream.req) onrequest();else stream.on('request', onrequest);
  } else if (writable && !stream._writableState) {
    // legacy streams
    stream.on('end', onlegacyfinish);
    stream.on('close', onlegacyfinish);
  }

  stream.on('end', onend);
  stream.on('finish', onfinish);
  if (opts.error !== false) stream.on('error', onerror);
  stream.on('close', onclose);
  return function () {
    stream.removeListener('complete', onfinish);
    stream.removeListener('abort', onclose);
    stream.removeListener('request', onrequest);
    if (stream.req) stream.req.removeListener('finish', onfinish);
    stream.removeListener('end', onlegacyfinish);
    stream.removeListener('close', onlegacyfinish);
    stream.removeListener('finish', onfinish);
    stream.removeListener('end', onend);
    stream.removeListener('error', onerror);
    stream.removeListener('close', onclose);
  };
}

module.exports = eos;

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var createError = __webpack_require__(635).create;

var LevelUPError = createError('LevelUPError');
var NotFoundError = createError('NotFoundError', LevelUPError);
NotFoundError.prototype.notFound = true;
NotFoundError.prototype.status = 404;
module.exports = {
  LevelUPError: LevelUPError,
  InitializationError: createError('InitializationError', LevelUPError),
  OpenError: createError('OpenError', LevelUPError),
  ReadError: createError('ReadError', LevelUPError),
  WriteError: createError('WriteError', LevelUPError),
  NotFoundError: NotFoundError,
  EncodingError: createError('EncodingError', LevelUPError)
};

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.AbstractLevelDOWN = __webpack_require__(639);
exports.AbstractIterator = __webpack_require__(289);
exports.AbstractChainedBatch = __webpack_require__(290);

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Error raised when there is lock already in place when repo is being opened.
 */

class LockExistsError extends Error {
  constructor(message) {
    super(message);
    this.name = 'LockExistsError';
    this.code = LockExistsError.code;
  }

}

LockExistsError.code = 'ERR_LOCK_EXISTS';
exports.LockExistsError = LockExistsError;
/**
 * Error raised when requested item is not found.
 */

class NotFoundError extends Error {
  constructor(message) {
    super(message);
    this.name = 'NotFoundError';
    this.code = NotFoundError.code;
  }

}

NotFoundError.code = 'ERR_NOT_FOUND';
exports.NotFoundError = NotFoundError;
/**
 * Error raised when version of the stored repo is not compatible with version of this package.
 */

class InvalidRepoVersionError extends Error {
  constructor(message) {
    super(message);
    this.name = 'InvalidRepoVersionError';
    this.code = InvalidRepoVersionError.code;
  }

}

InvalidRepoVersionError.code = 'ERR_INVALID_REPO_VERSION';
exports.InvalidRepoVersionError = InvalidRepoVersionError;
exports.ERR_REPO_NOT_INITIALIZED = 'ERR_REPO_NOT_INITIALIZED';
exports.ERR_REPO_ALREADY_OPEN = 'ERR_REPO_ALREADY_OPEN';
exports.ERR_REPO_ALREADY_CLOSED = 'ERR_REPO_ALREADY_CLOSED';

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


!function (t, n) {
   true ? module.exports = function (t, n, e, i, o) {
    for (n = n.split ? n.split(".") : n, i = 0; i < n.length; i++) t = t ? t[n[i]] : o;

    return t === o ? e : t;
  } : undefined;
}(void 0);

/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const protons = __webpack_require__(24);

const rpcProto = protons(__webpack_require__(725));
const RPC = rpcProto.RPC;
const topicDescriptorProto = protons(__webpack_require__(726));
exports = module.exports;
exports.rpc = rpcProto;
exports.td = topicDescriptorProto;
exports.RPC = RPC;
exports.Message = RPC.Message;
exports.SubOpts = RPC.SubOpts;

/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const AggregateError = __webpack_require__(317);

module.exports = async (iterable, mapper, {
  concurrency = Infinity,
  stopOnError = true
} = {}) => {
  return new Promise((resolve, reject) => {
    if (typeof mapper !== 'function') {
      throw new TypeError('Mapper function is required');
    }

    if (!(typeof concurrency === 'number' && concurrency >= 1)) {
      throw new TypeError("Expected `concurrency` to be a number from 1 and up, got `".concat(concurrency, "` (").concat(typeof concurrency, ")"));
    }

    const ret = [];
    const errors = [];
    const iterator = iterable[Symbol.iterator]();
    let isRejected = false;
    let isIterableDone = false;
    let resolvingCount = 0;
    let currentIndex = 0;

    const next = () => {
      if (isRejected) {
        return;
      }

      const nextItem = iterator.next();
      const i = currentIndex;
      currentIndex++;

      if (nextItem.done) {
        isIterableDone = true;

        if (resolvingCount === 0) {
          if (!stopOnError && errors.length !== 0) {
            reject(new AggregateError(errors));
          } else {
            resolve(ret);
          }
        }

        return;
      }

      resolvingCount++;

      (async () => {
        try {
          const element = await nextItem.value;
          ret[i] = await mapper(element, i);
          resolvingCount--;
          next();
        } catch (error) {
          if (stopOnError) {
            isRejected = true;
            reject(error);
          } else {
            errors.push(error);
            resolvingCount--;
            next();
          }
        }
      })();
    };

    for (let i = 0; i < concurrency; i++) {
      next();

      if (isIterableDone) {
        break;
      }
    }
  });
};

/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const second = exports.second = 1000;
const minute = exports.minute = 60 * second; // Protocol identifiers

exports.FloodSubID = '/floodsub/1.0.0';
exports.GossipSubID = '/meshsub/1.0.0'; // Overlay parameters

exports.GossipSubD = 6;
exports.GossipSubDlo = 4;
exports.GossipSubDhi = 12; // Gossip parameters

exports.GossipSubHistoryLength = 5;
exports.GossipSubHistoryGossip = 3; // Heartbeat interval

exports.GossipSubHeartbeatInitialDelay = 100 / second;
exports.GossipSubHeartbeatInterval = second; // Fanout ttl

exports.GossipSubFanoutTTL = minute;

/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const pSome = __webpack_require__(747);

const PCancelable = __webpack_require__(319);

const pAny = (iterable, options) => {
  const anyCancelable = pSome(iterable, _objectSpread({}, options, {
    count: 1
  }));
  return PCancelable.fn(async onCancel => {
    onCancel(() => {
      anyCancelable.cancel();
    });
    const [value] = await anyCancelable;
    return value;
  })();
};

module.exports = pAny; // TODO: Remove this for the next major release

module.exports.default = pAny;
module.exports.AggregateError = pSome.AggregateError;

/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  DIAL_TIMEOUT: 30e3,
  // How long in ms a dial attempt is allowed to take
  MAX_PARALLEL_DIALS: 100,
  // Maximum allowed concurrent dials
  MAX_PER_PEER_DIALS: 4,
  // Allowed parallel dials per DialRequest
  METRICS: {
    computeThrottleMaxQueueSize: 1000,
    computeThrottleTimeout: 2000,
    movingAverageIntervals: [60 * 1000, // 1 minute
    5 * 60 * 1000, // 5 minutes
    15 * 60 * 1000 // 15 minutes
    ],
    maxOldPeersRetention: 50
  }
};

/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var baseGetTag = __webpack_require__(320),
    isObjectLike = __webpack_require__(762);
/** `Object#toString` result references. */


var symbolTag = '[object Symbol]';
/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */

function isSymbol(value) {
  return typeof value == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
}

module.exports = isSymbol;

/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var root = __webpack_require__(176);
/** Built-in value references. */


var Symbol = root.Symbol;
module.exports = Symbol;

/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var freeGlobal = __webpack_require__(759);
/** Detect free variable `self`. */


var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
/** Used as a reference to the global object. */

var root = freeGlobal || freeSelf || Function('return this')();
module.exports = root;

/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;

/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  relay: '/libp2p/circuit/relay/0.1.0'
};

/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const lp = __webpack_require__(26);

const handshake = __webpack_require__(86);

const {
  CircuitRelay: CircuitPB
} = __webpack_require__(85);

const debug = __webpack_require__(1);

const log = debug('libp2p:circuit:stream-handler');
log.error = debug('libp2p:circuit:stream-handler:error');

class StreamHandler {
  /**
   * Create a stream handler for connection
   *
   * @param {object} options
   * @param {*} options.stream - A duplex iterable
   * @param {Number} options.maxLength - max bytes length of message
   */
  constructor({
    stream,
    maxLength = 4096
  }) {
    this.stream = stream;
    this.shake = handshake(this.stream);
    this.decoder = lp.decode.fromReader(this.shake.reader, {
      maxDataLength: maxLength
    });
  }
  /**
   * Read and decode message
   * @async
   * @returns {void}
   */


  async read() {
    const msg = await this.decoder.next();

    if (msg.value) {
      const value = CircuitPB.decode(msg.value.slice());
      log('read message type', value.type);
      return value;
    }

    log('read received no value, closing stream'); // End the stream, we didn't get data

    this.close();
  }
  /**
   * Encode and write array of buffers
   *
   * @param {*} msg An unencoded CircuitRelay protobuf message
   */


  write(msg) {
    log('write message type %s', msg.type);
    this.shake.write(lp.encode.single(CircuitPB.encode(msg)));
  }
  /**
   * Return the handshake rest stream and invalidate handler
   *
   * @return {*} A duplex iterable
   */


  rest() {
    this.shake.rest();
    return this.shake.stream;
  }

  end(msg) {
    this.write(msg);
    this.close();
  }
  /**
   * Close the stream
   *
   * @returns {void}
   */


  close() {
    log('closing the stream');
    this.rest().sink([]);
  }

}

module.exports = StreamHandler;

/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

const getIterator = __webpack_require__(87);

const AbortError = __webpack_require__(803); // Wrap an iterator to make it abortable, allow cleanup when aborted via onAbort


module.exports = (iterator, signal, options) => {
  return createMultiAbortable(iterator, [{
    signal,
    options
  }]);
};

function createMultiAbortable(iterator, signals) {
  iterator = getIterator(iterator);

  function abortable() {
    return _abortable.apply(this, arguments);
  }

  function _abortable() {
    _abortable = _wrapAsyncGenerator(function* () {
      let nextAbortHandler;

      const abortHandler = () => {
        if (nextAbortHandler) nextAbortHandler();
      };

      for (const {
        signal
      } of signals) {
        signal.addEventListener('abort', abortHandler);
      }

      while (true) {
        let result;

        try {
          for (const {
            signal,
            options
          } of signals) {
            if (signal.aborted) {
              const {
                abortMessage,
                abortCode
              } = options || {};
              throw new AbortError(abortMessage, abortCode);
            }
          }

          const abort = new Promise((resolve, reject) => {
            nextAbortHandler = () => {
              const {
                options
              } = signals.find(({
                signal
              }) => signal.aborted);
              const {
                abortMessage,
                abortCode
              } = options || {};
              reject(new AbortError(abortMessage, abortCode));
            };
          }); // Race the iterator and the abort signals

          result = yield _awaitAsyncGenerator(Promise.race([abort, iterator.next()]));
          nextAbortHandler = null;
        } catch (err) {
          for (const {
            signal
          } of signals) {
            signal.removeEventListener('abort', abortHandler);
          }

          if (err.type === 'aborted') {
            // Do any custom abort handling for the iterator
            const index = signals.findIndex(({
              signal
            }) => signal.aborted);

            if (index > -1 && signals[index].options && signals[index].options.onAbort) {
              yield _awaitAsyncGenerator(signals[index].options.onAbort(iterator));
            }
          } // End the iterator if it is a generator


          if (typeof iterator.return === 'function') {
            yield _awaitAsyncGenerator(iterator.return());
          }

          throw err;
        }

        if (result.done) break;
        yield result.value;
      }

      for (const {
        signal
      } of signals) {
        signal.removeEventListener('abort', abortHandler);
      }
    });
    return _abortable.apply(this, arguments);
  }

  return abortable();
}

module.exports.multi = createMultiAbortable;
module.exports.AbortError = AbortError;

/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const {
  Buffer
} = __webpack_require__(0);

const BufferList = __webpack_require__(30);

const lp = __webpack_require__(26);

const pipe = __webpack_require__(23);

const errCode = __webpack_require__(2);

const NewLine = Buffer.from('\n');

async function oneChunk(source) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;

  var _iteratorError;

  try {
    for (var _iterator = _asyncIterator(source), _step, _value; _step = await _iterator.next(), _iteratorNormalCompletion = _step.done, _value = await _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
      const chunk = _value;
      return chunk;
    } // We only need one!

  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        await _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
}

exports.encode = buffer => lp.encode.single(new BufferList([buffer, NewLine])); // `write` encodes and writes a single buffer


exports.write = (writer, buffer) => writer.push(exports.encode(buffer)); // `writeAll` behaves like `write`, except it encodes an array of items as a single write


exports.writeAll = (writer, buffers) => {
  writer.push(buffers.reduce((bl, buffer) => bl.append(exports.encode(buffer)), new BufferList()));
};

exports.read = async reader => {
  let byteLength = 1; // Read single byte chunks until the length is known

  const varByteSource = {
    // No return impl - we want the reader to remain readable
    [Symbol.asyncIterator]() {
      return this;
    },

    next: () => reader.next(byteLength)
  }; // Once the length has been parsed, read chunk for that length

  const onLength = l => {
    byteLength = l;
  };

  const buf = await pipe(varByteSource, lp.decode({
    onLength
  }), oneChunk);

  if (buf.get(buf.length - 1) !== NewLine[0]) {
    throw errCode(new Error('missing newline'), 'ERR_INVALID_MULTISTREAM_SELECT_MESSAGE');
  }

  return buf.shallowSlice(0, -1); // Remove newline
};

/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.BITS = 32;
exports.GROUPS = 4;
exports.RE_ADDRESS = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/g;
exports.RE_SUBNET_STRING = /\/\d{1,2}$/;

/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.BITS = 128;
exports.GROUPS = 8;
/**
 * Represents IPv6 address scopes
 * @memberof Address6
 * @static
 */

exports.SCOPES = {
  0: 'Reserved',
  1: 'Interface local',
  2: 'Link local',
  4: 'Admin local',
  5: 'Site local',
  8: 'Organization local',
  14: 'Global',
  15: 'Reserved'
};
/**
 * Represents IPv6 address types
 * @memberof Address6
 * @static
 */

exports.TYPES = {
  'ff01::1/128': 'Multicast (All nodes on this interface)',
  'ff01::2/128': 'Multicast (All routers on this interface)',
  'ff02::1/128': 'Multicast (All nodes on this link)',
  'ff02::2/128': 'Multicast (All routers on this link)',
  'ff05::2/128': 'Multicast (All routers in this site)',
  'ff02::5/128': 'Multicast (OSPFv3 AllSPF routers)',
  'ff02::6/128': 'Multicast (OSPFv3 AllDR routers)',
  'ff02::9/128': 'Multicast (RIP routers)',
  'ff02::a/128': 'Multicast (EIGRP routers)',
  'ff02::d/128': 'Multicast (PIM routers)',
  'ff02::16/128': 'Multicast (MLDv2 reports)',
  'ff01::fb/128': 'Multicast (mDNSv6)',
  'ff02::fb/128': 'Multicast (mDNSv6)',
  'ff05::fb/128': 'Multicast (mDNSv6)',
  'ff02::1:2/128': 'Multicast (All DHCP servers and relay agents on this link)',
  'ff05::1:2/128': 'Multicast (All DHCP servers and relay agents in this site)',
  'ff02::1:3/128': 'Multicast (All DHCP servers on this link)',
  'ff05::1:3/128': 'Multicast (All DHCP servers in this site)',
  '::/128': 'Unspecified',
  '::1/128': 'Loopback',
  'ff00::/8': 'Multicast',
  'fe80::/10': 'Link-local unicast'
};
/**
 * A regular expression that matches bad characters in an IPv6 address
 * @memberof Address6
 * @static
 */

exports.RE_BAD_CHARACTERS = /([^0-9a-f:\/%])/ig;
/**
 * A regular expression that matches an incorrect IPv6 address
 * @memberof Address6
 * @static
 */

exports.RE_BAD_ADDRESS = /([0-9a-f]{5,}|:{3,}|[^:]:$|^:[^:]|\/$)/ig;
/**
 * A regular expression that matches an IPv6 subnet
 * @memberof Address6
 * @static
 */

exports.RE_SUBNET_STRING = /\/\d{1,3}(?=%|$)/;
/**
 * A regular expression that matches an IPv6 zone
 * @memberof Address6
 * @static
 */

exports.RE_ZONE_STRING = /%.*$/;
exports.RE_URL = new RegExp(/^\[{0,1}([0-9a-f:]+)\]{0,1}/);
exports.RE_URL_WITH_PORT = new RegExp(/\[([0-9a-f:]+)\]:([0-9]{1,5})/);

/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // p2p multi-address code

exports.CODE_P2P = 421;
exports.CODE_CIRCUIT = 290; // Time to wait for a connection to close gracefully before destroying it manually

exports.CLOSE_TIMEOUT = 2000;

/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Module dependencies.
 */
var debug = __webpack_require__(869)('socket.io-parser');

var Emitter = __webpack_require__(70);

var binary = __webpack_require__(872);

var isArray = __webpack_require__(342);

var isBuf = __webpack_require__(343);
/**
 * Protocol version.
 *
 * @api public
 */


exports.protocol = 4;
/**
 * Packet types.
 *
 * @api public
 */

exports.types = ['CONNECT', 'DISCONNECT', 'EVENT', 'ACK', 'ERROR', 'BINARY_EVENT', 'BINARY_ACK'];
/**
 * Packet type `connect`.
 *
 * @api public
 */

exports.CONNECT = 0;
/**
 * Packet type `disconnect`.
 *
 * @api public
 */

exports.DISCONNECT = 1;
/**
 * Packet type `event`.
 *
 * @api public
 */

exports.EVENT = 2;
/**
 * Packet type `ack`.
 *
 * @api public
 */

exports.ACK = 3;
/**
 * Packet type `error`.
 *
 * @api public
 */

exports.ERROR = 4;
/**
 * Packet type 'binary event'
 *
 * @api public
 */

exports.BINARY_EVENT = 5;
/**
 * Packet type `binary ack`. For acks with binary arguments.
 *
 * @api public
 */

exports.BINARY_ACK = 6;
/**
 * Encoder constructor.
 *
 * @api public
 */

exports.Encoder = Encoder;
/**
 * Decoder constructor.
 *
 * @api public
 */

exports.Decoder = Decoder;
/**
 * A socket.io Encoder instance
 *
 * @api public
 */

function Encoder() {}

var ERROR_PACKET = exports.ERROR + '"encode error"';
/**
 * Encode a packet as a single string if non-binary, or as a
 * buffer sequence, depending on packet type.
 *
 * @param {Object} obj - packet object
 * @param {Function} callback - function to handle encodings (likely engine.write)
 * @return Calls callback with Array of encodings
 * @api public
 */

Encoder.prototype.encode = function (obj, callback) {
  debug('encoding packet %j', obj);

  if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {
    encodeAsBinary(obj, callback);
  } else {
    var encoding = encodeAsString(obj);
    callback([encoding]);
  }
};
/**
 * Encode packet as string.
 *
 * @param {Object} packet
 * @return {String} encoded
 * @api private
 */


function encodeAsString(obj) {
  // first is type
  var str = '' + obj.type; // attachments if we have them

  if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {
    str += obj.attachments + '-';
  } // if we have a namespace other than `/`
  // we append it followed by a comma `,`


  if (obj.nsp && '/' !== obj.nsp) {
    str += obj.nsp + ',';
  } // immediately followed by the id


  if (null != obj.id) {
    str += obj.id;
  } // json data


  if (null != obj.data) {
    var payload = tryStringify(obj.data);

    if (payload !== false) {
      str += payload;
    } else {
      return ERROR_PACKET;
    }
  }

  debug('encoded %j as %s', obj, str);
  return str;
}

function tryStringify(str) {
  try {
    return JSON.stringify(str);
  } catch (e) {
    return false;
  }
}
/**
 * Encode packet as 'buffer sequence' by removing blobs, and
 * deconstructing packet into object with placeholders and
 * a list of buffers.
 *
 * @param {Object} packet
 * @return {Buffer} encoded
 * @api private
 */


function encodeAsBinary(obj, callback) {
  function writeEncoding(bloblessData) {
    var deconstruction = binary.deconstructPacket(bloblessData);
    var pack = encodeAsString(deconstruction.packet);
    var buffers = deconstruction.buffers;
    buffers.unshift(pack); // add packet info to beginning of data list

    callback(buffers); // write all the buffers
  }

  binary.removeBlobs(obj, writeEncoding);
}
/**
 * A socket.io Decoder instance
 *
 * @return {Object} decoder
 * @api public
 */


function Decoder() {
  this.reconstructor = null;
}
/**
 * Mix in `Emitter` with Decoder.
 */


Emitter(Decoder.prototype);
/**
 * Decodes an encoded packet string into packet JSON.
 *
 * @param {String} obj - encoded packet
 * @return {Object} packet
 * @api public
 */

Decoder.prototype.add = function (obj) {
  var packet;

  if (typeof obj === 'string') {
    packet = decodeString(obj);

    if (exports.BINARY_EVENT === packet.type || exports.BINARY_ACK === packet.type) {
      // binary packet's json
      this.reconstructor = new BinaryReconstructor(packet); // no attachments, labeled binary but no binary data to follow

      if (this.reconstructor.reconPack.attachments === 0) {
        this.emit('decoded', packet);
      }
    } else {
      // non-binary full packet
      this.emit('decoded', packet);
    }
  } else if (isBuf(obj) || obj.base64) {
    // raw binary data
    if (!this.reconstructor) {
      throw new Error('got binary data when not reconstructing a packet');
    } else {
      packet = this.reconstructor.takeBinaryData(obj);

      if (packet) {
        // received final buffer
        this.reconstructor = null;
        this.emit('decoded', packet);
      }
    }
  } else {
    throw new Error('Unknown type: ' + obj);
  }
};
/**
 * Decode a packet String (JSON data)
 *
 * @param {String} str
 * @return {Object} packet
 * @api private
 */


function decodeString(str) {
  var i = 0; // look up type

  var p = {
    type: Number(str.charAt(0))
  };

  if (null == exports.types[p.type]) {
    return error('unknown packet type ' + p.type);
  } // look up attachments if type binary


  if (exports.BINARY_EVENT === p.type || exports.BINARY_ACK === p.type) {
    var buf = '';

    while (str.charAt(++i) !== '-') {
      buf += str.charAt(i);
      if (i == str.length) break;
    }

    if (buf != Number(buf) || str.charAt(i) !== '-') {
      throw new Error('Illegal attachments');
    }

    p.attachments = Number(buf);
  } // look up namespace (if any)


  if ('/' === str.charAt(i + 1)) {
    p.nsp = '';

    while (++i) {
      var c = str.charAt(i);
      if (',' === c) break;
      p.nsp += c;
      if (i === str.length) break;
    }
  } else {
    p.nsp = '/';
  } // look up id


  var next = str.charAt(i + 1);

  if ('' !== next && Number(next) == next) {
    p.id = '';

    while (++i) {
      var c = str.charAt(i);

      if (null == c || Number(c) != c) {
        --i;
        break;
      }

      p.id += str.charAt(i);
      if (i === str.length) break;
    }

    p.id = Number(p.id);
  } // look up json data


  if (str.charAt(++i)) {
    var payload = tryParse(str.substr(i));
    var isPayloadValid = payload !== false && (p.type === exports.ERROR || isArray(payload));

    if (isPayloadValid) {
      p.data = payload;
    } else {
      return error('invalid payload');
    }
  }

  debug('decoded %s as %j', str, p);
  return p;
}

function tryParse(str) {
  try {
    return JSON.parse(str);
  } catch (e) {
    return false;
  }
}
/**
 * Deallocates a parser's resources
 *
 * @api public
 */


Decoder.prototype.destroy = function () {
  if (this.reconstructor) {
    this.reconstructor.finishedReconstruction();
  }
};
/**
 * A manager of a binary event's 'buffer sequence'. Should
 * be constructed whenever a packet of type BINARY_EVENT is
 * decoded.
 *
 * @param {Object} packet
 * @return {BinaryReconstructor} initialized reconstructor
 * @api private
 */


function BinaryReconstructor(packet) {
  this.reconPack = packet;
  this.buffers = [];
}
/**
 * Method to be called when binary data received from connection
 * after a BINARY_EVENT packet.
 *
 * @param {Buffer | ArrayBuffer} binData - the raw binary data received
 * @return {null | Object} returns null if more binary data is expected or
 *   a reconstructed packet object if all buffers have been received.
 * @api private
 */


BinaryReconstructor.prototype.takeBinaryData = function (binData) {
  this.buffers.push(binData);

  if (this.buffers.length === this.reconPack.attachments) {
    // done with buffer list
    var packet = binary.reconstructPacket(this.reconPack, this.buffers);
    this.finishedReconstruction();
    return packet;
  }

  return null;
};
/**
 * Cleans up binary packet reconstruction variables.
 *
 * @api private
 */


BinaryReconstructor.prototype.finishedReconstruction = function () {
  this.reconPack = null;
  this.buffers = [];
};

function error(msg) {
  return {
    type: exports.ERROR,
    data: 'parser error: ' + msg
  };
}

/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// browser shim for xmlhttprequest module
var hasCORS = __webpack_require__(875);

module.exports = function (opts) {
  var xdomain = opts.xdomain; // scheme must be same when usign XDomainRequest
  // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx

  var xscheme = opts.xscheme; // XDomainRequest has a flow of not sending cookie, therefore it should be disabled as a default.
  // https://github.com/Automattic/engine.io-client/pull/217

  var enablesXDR = opts.enablesXDR; // XMLHttpRequest can be disabled on IE

  try {
    if ('undefined' !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {
      return new XMLHttpRequest();
    }
  } catch (e) {} // Use XDomainRequest for IE8 if enablesXDR is true
  // because loading bar keeps flashing when using jsonp-polling
  // https://github.com/yujiosaka/socke.io-ie8-loading-example


  try {
    if ('undefined' !== typeof XDomainRequest && !xscheme && enablesXDR) {
      return new XDomainRequest();
    }
  } catch (e) {}

  if (!xdomain) {
    try {
      return new self[['Active'].concat('Object').join('X')]('Microsoft.XMLHTTP');
    } catch (e) {}
  }
};

/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Module dependencies.
 */
var parser = __webpack_require__(71);

var Emitter = __webpack_require__(70);
/**
 * Module exports.
 */


module.exports = Transport;
/**
 * Transport abstract constructor.
 *
 * @param {Object} options.
 * @api private
 */

function Transport(opts) {
  this.path = opts.path;
  this.hostname = opts.hostname;
  this.port = opts.port;
  this.secure = opts.secure;
  this.query = opts.query;
  this.timestampParam = opts.timestampParam;
  this.timestampRequests = opts.timestampRequests;
  this.readyState = '';
  this.agent = opts.agent || false;
  this.socket = opts.socket;
  this.enablesXDR = opts.enablesXDR;
  this.withCredentials = opts.withCredentials; // SSL options for Node.js client

  this.pfx = opts.pfx;
  this.key = opts.key;
  this.passphrase = opts.passphrase;
  this.cert = opts.cert;
  this.ca = opts.ca;
  this.ciphers = opts.ciphers;
  this.rejectUnauthorized = opts.rejectUnauthorized;
  this.forceNode = opts.forceNode; // results of ReactNative environment detection

  this.isReactNative = opts.isReactNative; // other options for Node.js client

  this.extraHeaders = opts.extraHeaders;
  this.localAddress = opts.localAddress;
}
/**
 * Mix in `Emitter`.
 */


Emitter(Transport.prototype);
/**
 * Emits an error.
 *
 * @param {String} str
 * @return {Transport} for chaining
 * @api public
 */

Transport.prototype.onError = function (msg, desc) {
  var err = new Error(msg);
  err.type = 'TransportError';
  err.description = desc;
  this.emit('error', err);
  return this;
};
/**
 * Opens the transport.
 *
 * @api public
 */


Transport.prototype.open = function () {
  if ('closed' === this.readyState || '' === this.readyState) {
    this.readyState = 'opening';
    this.doOpen();
  }

  return this;
};
/**
 * Closes the transport.
 *
 * @api private
 */


Transport.prototype.close = function () {
  if ('opening' === this.readyState || 'open' === this.readyState) {
    this.doClose();
    this.onClose();
  }

  return this;
};
/**
 * Sends multiple packets.
 *
 * @param {Array} packets
 * @api private
 */


Transport.prototype.send = function (packets) {
  if ('open' === this.readyState) {
    this.write(packets);
  } else {
    throw new Error('Transport not open');
  }
};
/**
 * Called upon open
 *
 * @api private
 */


Transport.prototype.onOpen = function () {
  this.readyState = 'open';
  this.writable = true;
  this.emit('open');
};
/**
 * Called with data.
 *
 * @param {String} data
 * @api private
 */


Transport.prototype.onData = function (data) {
  var packet = parser.decodePacket(data, this.socket.binaryType);
  this.onPacket(packet);
};
/**
 * Called with a decoded packet.
 */


Transport.prototype.onPacket = function (packet) {
  this.emit('packet', packet);
};
/**
 * Called upon close.
 *
 * @api private
 */


Transport.prototype.onClose = function () {
  this.readyState = 'closed';
  this.emit('close');
};

/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const PeerId = __webpack_require__(9);

const crypto = __webpack_require__(28);

const debug = __webpack_require__(1);

const log = debug('libp2p:secio');
log.error = debug('libp2p:secio:error');

const pbm = __webpack_require__(901);

const support = __webpack_require__(902);

const {
  UnexpectedPeerError
} = __webpack_require__(189); // nonceSize is the size of our nonces (in bytes)


const nonceSize = 16;

exports.createProposal = state => {
  state.proposal.out = {
    rand: crypto.randomBytes(nonceSize),
    pubkey: state.key.local.public.bytes,
    exchanges: support.exchanges.join(','),
    ciphers: support.ciphers.join(','),
    hashes: support.hashes.join(',')
  };
  state.proposalEncoded.out = pbm.Propose.encode(state.proposal.out);
  return state.proposalEncoded.out;
};

exports.createExchange = async state => {
  const res = await crypto.keys.generateEphemeralKeyPair(state.protocols.local.curveT);
  state.ephemeralKey.local = res.key;
  state.shared.generate = res.genSharedKey; // Gather corpus to sign.

  const selectionOut = Buffer.concat([state.proposalEncoded.out, state.proposalEncoded.in, state.ephemeralKey.local]);
  const sig = await state.key.local.sign(selectionOut);
  state.exchange.out = {
    epubkey: state.ephemeralKey.local,
    signature: sig
  };
  return pbm.Exchange.encode(state.exchange.out);
};

exports.identify = async (state, msg) => {
  log('1.1 identify');
  state.proposalEncoded.in = msg;
  state.proposal.in = pbm.Propose.decode(msg);
  const pubkey = state.proposal.in.pubkey;
  state.key.remote = crypto.keys.unmarshalPublicKey(pubkey);
  const remoteId = await PeerId.createFromPubKey(pubkey.toString('base64')); // If we know who we are dialing to, double check

  if (state.id.remote) {
    if (state.id.remote.toString() !== remoteId.toString()) {
      throw new UnexpectedPeerError('Dialed to the wrong peer: IDs do not match!');
    }
  } else {
    state.id.remote = remoteId;
  }

  log('1.1 identify - %s - identified remote peer as %s', state.id.local.toB58String(), state.id.remote.toB58String());
};

exports.selectProtocols = async state => {
  log('1.2 selection');
  const local = {
    pubKeyBytes: state.key.local.public.bytes,
    exchanges: support.exchanges,
    hashes: support.hashes,
    ciphers: support.ciphers,
    nonce: state.proposal.out.rand
  };
  const remote = {
    pubKeyBytes: state.proposal.in.pubkey,
    exchanges: state.proposal.in.exchanges.split(','),
    hashes: state.proposal.in.hashes.split(','),
    ciphers: state.proposal.in.ciphers.split(','),
    nonce: state.proposal.in.rand
  };
  const selected = await support.selectBest(local, remote); // we use the same params for both directions (must choose same curve)
  // WARNING: if they dont SelectBest the same way, this won't work...

  state.protocols.remote = {
    order: selected.order,
    curveT: selected.curveT,
    cipherT: selected.cipherT,
    hashT: selected.hashT
  };
  state.protocols.local = {
    order: selected.order,
    curveT: selected.curveT,
    cipherT: selected.cipherT,
    hashT: selected.hashT
  };
};

exports.verify = async (state, msg) => {
  log('2.1. verify');
  state.exchange.in = pbm.Exchange.decode(msg);
  state.ephemeralKey.remote = state.exchange.in.epubkey;
  const selectionIn = Buffer.concat([state.proposalEncoded.in, state.proposalEncoded.out, state.ephemeralKey.remote]);
  const sigOk = await state.key.remote.verify(selectionIn, state.exchange.in.signature);

  if (!sigOk) {
    throw new Error('Bad signature');
  }

  log('2.1. verify - signature verified');
};

exports.generateKeys = async state => {
  log('2.2. keys');
  const secret = await state.shared.generate(state.exchange.in.epubkey);
  state.shared.secret = secret;
  const keys = await crypto.keys.keyStretcher(state.protocols.local.cipherT, state.protocols.local.hashT, state.shared.secret); // use random nonces to decide order.

  if (state.protocols.local.order > 0) {
    state.protocols.local.keys = keys.k1;
    state.protocols.remote.keys = keys.k2;
  } else if (state.protocols.local.order < 0) {
    // swap
    state.protocols.local.keys = keys.k2;
    state.protocols.remote.keys = keys.k1;
  } else {
    // we should've bailed before state. but if not, bail here.
    throw new Error('you are trying to talk to yourself');
  }

  log('2.3. mac + cipher');
  await Promise.all([state.protocols.local, state.protocols.remote].map(data => support.makeMacAndCipher(data)));
};

exports.verifyNonce = (state, n2) => {
  const n1 = state.proposal.out.rand;
  if (n1.equals(n2)) return;
  throw new Error("Failed to read our encrypted nonce: ".concat(n1.toString('hex'), " != ").concat(n2.toString('hex')));
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


class UnexpectedPeerError extends Error {
  constructor(message = 'Unexpected Peer') {
    super(message);
    this.code = UnexpectedPeerError.code;
  }

  static get code() {
    return 'ERR_UNEXPECTED_PEER';
  }

}

class InvalidCryptoExchangeError extends Error {
  constructor(message = 'Invalid crypto exchange') {
    super(message);
    this.code = InvalidCryptoExchangeError.code;
  }

  static get code() {
    return 'ERR_INVALID_CRYPTO_EXCHANGE';
  }

}

class InvalidCryptoTransmissionError extends Error {
  constructor(message = 'Invalid crypto transmission') {
    super(message);
    this.code = InvalidCryptoTransmissionError.code;
  }

  static get code() {
    return 'ERR_INVALID_CRYPTO_TRANSMISSION';
  }

}

module.exports = {
  UnexpectedPeerError,
  InvalidCryptoExchangeError,
  InvalidCryptoTransmissionError
};

/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

module.exports = dist;

function dist(a, b) {
  if (a.length !== b.length) throw new Error('Inputs should have the same length');
  var result = Buffer.allocUnsafe(a.length);

  for (var i = 0; i < a.length; i++) result[i] = a[i] ^ b[i];

  return result;
}

dist.compare = function compare(a, b) {
  if (a.length !== b.length) throw new Error('Inputs should have the same length');

  for (var i = 0; i < a.length; i++) {
    if (a[i] === b[i]) continue;
    return a[i] < b[i] ? -1 : 1;
  }

  return 0;
};

dist.gt = function gt(a, b) {
  return dist.compare(a, b) === 1;
};

dist.lt = function lt(a, b) {
  return dist.compare(a, b) === -1;
};

dist.eq = function eq(a, b) {
  return dist.compare(a, b) === 0;
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const mh = __webpack_require__(16);

const utils = __webpack_require__(18);

const Run = __webpack_require__(925);
/**
 * Divide peers up into disjoint paths (subqueries). Any peer can only be used once over all paths.
 * Within each path, query peers from closest to farthest away.
 */


class Query {
  /**
   * User-supplied function to set up an individual disjoint path. Per-path
   * query state should be held in this function's closure.
   * @typedef {makePath} function
   * @param {number} pathNum - Numeric index from zero to numPaths - 1
   * @returns {queryFunc} - Function to call on each peer in the query
   */

  /**
   * Query function.
   * @typedef {queryFunc} function
   * @param {PeerId} next - Peer to query
   * @param {function(Error, Object)} callback - Query result callback
   */

  /**
   * Create a new query. The makePath function is called once per disjoint path, so that per-path
   * variables can be created in that scope. makePath then returns the actual query function (queryFunc) to
   * use when on that path.
   *
   * @param {DHT} dht - DHT instance
   * @param {Buffer} key
   * @param {makePath} makePath - Called to set up each disjoint path. Must return the query function.
   */
  constructor(dht, key, makePath) {
    this.dht = dht;
    this.key = key;
    this.makePath = makePath;
    this._log = utils.logger(this.dht.peerInfo.id, 'query:' + mh.toB58String(key));
    this.running = false;
    this._onStart = this._onStart.bind(this);
    this._onComplete = this._onComplete.bind(this);
  }
  /**
   * Run this query, start with the given list of peers first.
   *
   * @param {Array<PeerId>} peers
   * @returns {Promise}
   */


  async run(peers) {
    // eslint-disable-line require-await
    if (!this.dht._queryManager.running) {
      this._log.error('Attempt to run query after shutdown');

      return {
        finalSet: new Set(),
        paths: []
      };
    }

    if (peers.length === 0) {
      this._log.error('Running query with no peers');

      return {
        finalSet: new Set(),
        paths: []
      };
    }

    this._run = new Run(this);

    this._log("query running with K=".concat(this.dht.kBucketSize, ", A=").concat(this.dht.concurrency, ", D=").concat(Math.min(this.dht.disjointPaths, peers.length)));

    this._run.once('start', this._onStart);

    this._run.once('complete', this._onComplete);

    return this._run.execute(peers);
  }
  /**
   * Called when the run starts.
   */


  _onStart() {
    this.running = true;
    this._startTime = Date.now();

    this._log('query:start'); // Register this query so we can stop it if the DHT stops


    this.dht._queryManager.queryStarted(this);
  }
  /**
   * Called when the run completes (even if there's an error).
   */


  _onComplete() {
    // Ensure worker queues for all paths are stopped at the end of the query
    this.stop();
  }
  /**
   * Stop the query.
   */


  stop() {
    this._log("query:done in ".concat(Date.now() - this._startTime, "ms"));

    if (this._run) {
      this._log("".concat(this._run.errors.length, " of ").concat(this._run.peersSeen.size, " peers errored (").concat(this._run.errors.length / this._run.peersSeen.size * 100, "% fail rate)"));
    }

    if (!this.running) {
      return;
    }

    this._run.removeListener('start', this._onStart);

    this._run.removeListener('complete', this._onComplete);

    this.running = false;
    this._run && this._run.stop();

    this.dht._queryManager.queryCompleted(this);
  }

}

module.exports = Query;

/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const IpnsPubsubDatastore = __webpack_require__(365);

const errcode = __webpack_require__(2); // Get pubsub from IPNS routing


exports.getPubsubRouting = (ipns, options) => {
  if (!ipns || !(options.EXPERIMENTAL && options.EXPERIMENTAL.ipnsPubsub)) {
    throw errcode(new Error('IPNS pubsub subsystem is not enabled'), 'ERR_IPNS_PUBSUB_NOT_ENABLED');
  } // Only one store and it is pubsub


  if (IpnsPubsubDatastore.isIpnsPubsubDatastore(ipns.routing)) {
    return ipns.routing;
  } // Find in tiered


  const pubsub = (ipns.routing.stores || []).find(s => IpnsPubsubDatastore.isIpnsPubsubDatastore(s));

  if (!pubsub) {
    throw errcode(new Error('IPNS pubsub datastore not found'), 'ERR_PUBSUB_DATASTORE_NOT_FOUND');
  }

  return pubsub;
};

/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const SECOND = 1000;
module.exports = {
  maxProvidersPerRequest: 3,
  providerRequestTimeout: 10 * SECOND,
  hasBlockTimeout: 15 * SECOND,
  provideTimeout: 15 * SECOND,
  kMaxPriority: Math.pow(2, 31) - 1,
  rebroadcastDelay: 10 * SECOND,
  maxListeners: 1000
};

/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = value => {
  if (Object.prototype.toString.call(value) !== '[object Object]') {
    return false;
  }

  const prototype = Object.getPrototypeOf(value);
  return prototype === null || prototype === Object.prototype;
};

/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i = isLE ? nBytes - 1 : 0;
  var d = isLE ? -1 : 1;
  var s = buffer[offset + i];
  i += d;
  e = s & (1 << -nBits) - 1;
  s >>= -nBits;
  nBits += eLen;

  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;

  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : (s ? -1 : 1) * Infinity;
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }

  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
  var i = isLE ? 0 : nBytes - 1;
  var d = isLE ? 1 : -1;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);

    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }

    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }

    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = e << mLen | m;
  eLen += mLen;

  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128;
};

/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const varint = __webpack_require__(19);

module.exports = {
  numberToBuffer,
  bufferToNumber,
  varintBufferEncode,
  varintBufferDecode,
  varintEncode
};

function bufferToNumber(buf) {
  return parseInt(buf.toString('hex'), 16);
}

function numberToBuffer(num) {
  let hexString = num.toString(16);

  if (hexString.length % 2 === 1) {
    hexString = '0' + hexString;
  }

  return Buffer.from(hexString, 'hex');
}

function varintBufferEncode(input) {
  return Buffer.from(varint.encode(bufferToNumber(input)));
}

function varintBufferDecode(input) {
  return numberToBuffer(varint.decode(input));
}

function varintEncode(num) {
  return Buffer.from(varint.encode(num));
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const protobuf = __webpack_require__(24);

const keysPBM = protobuf(__webpack_require__(124));

__webpack_require__(40);

__webpack_require__(73);

__webpack_require__(74);

const forge = __webpack_require__(7);

const errcode = __webpack_require__(35);

exports = module.exports;
const supportedKeys = {
  rsa: __webpack_require__(411),
  ed25519: __webpack_require__(438),
  secp256k1: __webpack_require__(442)(keysPBM, __webpack_require__(130))
};
exports.supportedKeys = supportedKeys;
exports.keysPBM = keysPBM;
const ErrMissingSecp256K1 = {
  message: 'secp256k1 support requires libp2p-crypto-secp256k1 package',
  code: 'ERR_MISSING_PACKAGE'
};

function typeToKey(type) {
  const key = supportedKeys[type.toLowerCase()];

  if (!key) {
    const supported = Object.keys(supportedKeys).join(' / ');
    throw errcode(new Error("invalid or unsupported key type ".concat(type, ". Must be ").concat(supported)), 'ERR_UNSUPPORTED_KEY_TYPE');
  }

  return key;
}

exports.keyStretcher = __webpack_require__(470);
exports.generateEphemeralKeyPair = __webpack_require__(472); // Generates a keypair of the given type and bitsize

exports.generateKeyPair = async (type, bits) => {
  // eslint-disable-line require-await
  return typeToKey(type).generateKeyPair(bits);
}; // Generates a keypair of the given type and bitsize
// seed is a 32 byte uint8array


exports.generateKeyPairFromSeed = async (type, seed, bits) => {
  // eslint-disable-line require-await
  const key = typeToKey(type);

  if (type.toLowerCase() !== 'ed25519') {
    throw errcode(new Error('Seed key derivation is unimplemented for RSA or secp256k1'), 'ERR_UNSUPPORTED_KEY_DERIVATION_TYPE');
  }

  return key.generateKeyPairFromSeed(seed, bits);
}; // Converts a protobuf serialized public key into its
// representative object


exports.unmarshalPublicKey = buf => {
  const decoded = keysPBM.PublicKey.decode(buf);
  const data = decoded.Data;

  switch (decoded.Type) {
    case keysPBM.KeyType.RSA:
      return supportedKeys.rsa.unmarshalRsaPublicKey(data);

    case keysPBM.KeyType.Ed25519:
      return supportedKeys.ed25519.unmarshalEd25519PublicKey(data);

    case keysPBM.KeyType.Secp256k1:
      if (supportedKeys.secp256k1) {
        return supportedKeys.secp256k1.unmarshalSecp256k1PublicKey(data);
      } else {
        throw errcode(new Error(ErrMissingSecp256K1.message), ErrMissingSecp256K1.code);
      }

    default:
      typeToKey(decoded.Type);
    // throws because type is not supported
  }
}; // Converts a public key object into a protobuf serialized public key


exports.marshalPublicKey = (key, type) => {
  type = (type || 'rsa').toLowerCase();
  typeToKey(type); // check type

  return key.bytes;
}; // Converts a protobuf serialized private key into its
// representative object


exports.unmarshalPrivateKey = async buf => {
  // eslint-disable-line require-await
  const decoded = keysPBM.PrivateKey.decode(buf);
  const data = decoded.Data;

  switch (decoded.Type) {
    case keysPBM.KeyType.RSA:
      return supportedKeys.rsa.unmarshalRsaPrivateKey(data);

    case keysPBM.KeyType.Ed25519:
      return supportedKeys.ed25519.unmarshalEd25519PrivateKey(data);

    case keysPBM.KeyType.Secp256k1:
      if (supportedKeys.secp256k1) {
        return supportedKeys.secp256k1.unmarshalSecp256k1PrivateKey(data);
      } else {
        throw errcode(new Error(ErrMissingSecp256K1.message), ErrMissingSecp256K1.code);
      }

    default:
      typeToKey(decoded.Type);
    // throws because type is not supported
  }
}; // Converts a private key object into a protobuf serialized private key


exports.marshalPrivateKey = (key, type) => {
  type = (type || 'rsa').toLowerCase();
  typeToKey(type); // check type

  return key.bytes;
};

exports.import = async (pem, password) => {
  // eslint-disable-line require-await
  const key = forge.pki.decryptRsaPrivateKey(pem, password);

  if (key === null) {
    throw errcode(new Error('Cannot read the key, most likely the password is wrong or not a RSA key'), 'ERR_CANNOT_DECRYPT_PEM');
  }

  let der = forge.asn1.toDer(forge.pki.privateKeyToAsn1(key));
  der = Buffer.from(der.getBytes(), 'binary');
  return supportedKeys.rsa.unmarshalRsaPrivateKey(der);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Cipher base API.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
 */
var forge = __webpack_require__(7);

__webpack_require__(10);

module.exports = forge.cipher = forge.cipher || {}; // registered algorithms

forge.cipher.algorithms = forge.cipher.algorithms || {};
/**
 * Creates a cipher object that can be used to encrypt data using the given
 * algorithm and key. The algorithm may be provided as a string value for a
 * previously registered algorithm or it may be given as a cipher algorithm
 * API object.
 *
 * @param algorithm the algorithm to use, either a string or an algorithm API
 *          object.
 * @param key the key to use, as a binary-encoded string of bytes or a
 *          byte buffer.
 *
 * @return the cipher.
 */

forge.cipher.createCipher = function (algorithm, key) {
  var api = algorithm;

  if (typeof api === 'string') {
    api = forge.cipher.getAlgorithm(api);

    if (api) {
      api = api();
    }
  }

  if (!api) {
    throw new Error('Unsupported algorithm: ' + algorithm);
  } // assume block cipher


  return new forge.cipher.BlockCipher({
    algorithm: api,
    key: key,
    decrypt: false
  });
};
/**
 * Creates a decipher object that can be used to decrypt data using the given
 * algorithm and key. The algorithm may be provided as a string value for a
 * previously registered algorithm or it may be given as a cipher algorithm
 * API object.
 *
 * @param algorithm the algorithm to use, either a string or an algorithm API
 *          object.
 * @param key the key to use, as a binary-encoded string of bytes or a
 *          byte buffer.
 *
 * @return the cipher.
 */


forge.cipher.createDecipher = function (algorithm, key) {
  var api = algorithm;

  if (typeof api === 'string') {
    api = forge.cipher.getAlgorithm(api);

    if (api) {
      api = api();
    }
  }

  if (!api) {
    throw new Error('Unsupported algorithm: ' + algorithm);
  } // assume block cipher


  return new forge.cipher.BlockCipher({
    algorithm: api,
    key: key,
    decrypt: true
  });
};
/**
 * Registers an algorithm by name. If the name was already registered, the
 * algorithm API object will be overwritten.
 *
 * @param name the name of the algorithm.
 * @param algorithm the algorithm API object.
 */


forge.cipher.registerAlgorithm = function (name, algorithm) {
  name = name.toUpperCase();
  forge.cipher.algorithms[name] = algorithm;
};
/**
 * Gets a registered algorithm by name.
 *
 * @param name the name of the algorithm.
 *
 * @return the algorithm, if found, null if not.
 */


forge.cipher.getAlgorithm = function (name) {
  name = name.toUpperCase();

  if (name in forge.cipher.algorithms) {
    return forge.cipher.algorithms[name];
  }

  return null;
};

var BlockCipher = forge.cipher.BlockCipher = function (options) {
  this.algorithm = options.algorithm;
  this.mode = this.algorithm.mode;
  this.blockSize = this.mode.blockSize;
  this._finish = false;
  this._input = null;
  this.output = null;
  this._op = options.decrypt ? this.mode.decrypt : this.mode.encrypt;
  this._decrypt = options.decrypt;
  this.algorithm.initialize(options);
};
/**
 * Starts or restarts the encryption or decryption process, whichever
 * was previously configured.
 *
 * For non-GCM mode, the IV may be a binary-encoded string of bytes, an array
 * of bytes, a byte buffer, or an array of 32-bit integers. If the IV is in
 * bytes, then it must be Nb (16) bytes in length. If the IV is given in as
 * 32-bit integers, then it must be 4 integers long.
 *
 * Note: an IV is not required or used in ECB mode.
 *
 * For GCM-mode, the IV must be given as a binary-encoded string of bytes or
 * a byte buffer. The number of bytes should be 12 (96 bits) as recommended
 * by NIST SP-800-38D but another length may be given.
 *
 * @param options the options to use:
 *          iv the initialization vector to use as a binary-encoded string of
 *            bytes, null to reuse the last ciphered block from a previous
 *            update() (this "residue" method is for legacy support only).
 *          additionalData additional authentication data as a binary-encoded
 *            string of bytes, for 'GCM' mode, (default: none).
 *          tagLength desired length of authentication tag, in bits, for
 *            'GCM' mode (0-128, default: 128).
 *          tag the authentication tag to check if decrypting, as a
 *             binary-encoded string of bytes.
 *          output the output the buffer to write to, null to create one.
 */


BlockCipher.prototype.start = function (options) {
  options = options || {};
  var opts = {};

  for (var key in options) {
    opts[key] = options[key];
  }

  opts.decrypt = this._decrypt;
  this._finish = false;
  this._input = forge.util.createBuffer();
  this.output = options.output || forge.util.createBuffer();
  this.mode.start(opts);
};
/**
 * Updates the next block according to the cipher mode.
 *
 * @param input the buffer to read from.
 */


BlockCipher.prototype.update = function (input) {
  if (input) {
    // input given, so empty it into the input buffer
    this._input.putBuffer(input);
  } // do cipher operation until it needs more input and not finished


  while (!this._op.call(this.mode, this._input, this.output, this._finish) && !this._finish) {} // free consumed memory from input buffer


  this._input.compact();
};
/**
 * Finishes encrypting or decrypting.
 *
 * @param pad a padding function to use in CBC mode, null for default,
 *          signature(blockSize, buffer, decrypt).
 *
 * @return true if successful, false on error.
 */


BlockCipher.prototype.finish = function (pad) {
  // backwards-compatibility w/deprecated padding API
  // Note: will overwrite padding functions even after another start() call
  if (pad && (this.mode.name === 'ECB' || this.mode.name === 'CBC')) {
    this.mode.pad = function (input) {
      return pad(this.blockSize, input, false);
    };

    this.mode.unpad = function (output) {
      return pad(this.blockSize, output, true);
    };
  } // build options for padding and afterFinish functions


  var options = {};
  options.decrypt = this._decrypt; // get # of bytes that won't fill a block

  options.overflow = this._input.length() % this.blockSize;

  if (!this._decrypt && this.mode.pad) {
    if (!this.mode.pad(this._input, options)) {
      return false;
    }
  } // do final update


  this._finish = true;
  this.update();

  if (this._decrypt && this.mode.unpad) {
    if (!this.mode.unpad(this.output, options)) {
      return false;
    }
  }

  if (this.mode.afterFinish) {
    if (!this.mode.afterFinish(this.output, options)) {
      return false;
    }
  }

  return true;
};

/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Supported cipher modes.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
 */
var forge = __webpack_require__(7);

__webpack_require__(10);

forge.cipher = forge.cipher || {}; // supported cipher modes

var modes = module.exports = forge.cipher.modes = forge.cipher.modes || {};
/** Electronic codebook (ECB) (Don't use this; it's not secure) **/

modes.ecb = function (options) {
  options = options || {};
  this.name = 'ECB';
  this.cipher = options.cipher;
  this.blockSize = options.blockSize || 16;
  this._ints = this.blockSize / 4;
  this._inBlock = new Array(this._ints);
  this._outBlock = new Array(this._ints);
};

modes.ecb.prototype.start = function (options) {};

modes.ecb.prototype.encrypt = function (input, output, finish) {
  // not enough input to encrypt
  if (input.length() < this.blockSize && !(finish && input.length() > 0)) {
    return true;
  } // get next block


  for (var i = 0; i < this._ints; ++i) {
    this._inBlock[i] = input.getInt32();
  } // encrypt block


  this.cipher.encrypt(this._inBlock, this._outBlock); // write output

  for (var i = 0; i < this._ints; ++i) {
    output.putInt32(this._outBlock[i]);
  }
};

modes.ecb.prototype.decrypt = function (input, output, finish) {
  // not enough input to decrypt
  if (input.length() < this.blockSize && !(finish && input.length() > 0)) {
    return true;
  } // get next block


  for (var i = 0; i < this._ints; ++i) {
    this._inBlock[i] = input.getInt32();
  } // decrypt block


  this.cipher.decrypt(this._inBlock, this._outBlock); // write output

  for (var i = 0; i < this._ints; ++i) {
    output.putInt32(this._outBlock[i]);
  }
};

modes.ecb.prototype.pad = function (input, options) {
  // add PKCS#7 padding to block (each pad byte is the
  // value of the number of pad bytes)
  var padding = input.length() === this.blockSize ? this.blockSize : this.blockSize - input.length();
  input.fillWithByte(padding, padding);
  return true;
};

modes.ecb.prototype.unpad = function (output, options) {
  // check for error: input data not a multiple of blockSize
  if (options.overflow > 0) {
    return false;
  } // ensure padding byte count is valid


  var len = output.length();
  var count = output.at(len - 1);

  if (count > this.blockSize << 2) {
    return false;
  } // trim off padding bytes


  output.truncate(count);
  return true;
};
/** Cipher-block Chaining (CBC) **/


modes.cbc = function (options) {
  options = options || {};
  this.name = 'CBC';
  this.cipher = options.cipher;
  this.blockSize = options.blockSize || 16;
  this._ints = this.blockSize / 4;
  this._inBlock = new Array(this._ints);
  this._outBlock = new Array(this._ints);
};

modes.cbc.prototype.start = function (options) {
  // Note: legacy support for using IV residue (has security flaws)
  // if IV is null, reuse block from previous processing
  if (options.iv === null) {
    // must have a previous block
    if (!this._prev) {
      throw new Error('Invalid IV parameter.');
    }

    this._iv = this._prev.slice(0);
  } else if (!('iv' in options)) {
    throw new Error('Invalid IV parameter.');
  } else {
    // save IV as "previous" block
    this._iv = transformIV(options.iv, this.blockSize);
    this._prev = this._iv.slice(0);
  }
};

modes.cbc.prototype.encrypt = function (input, output, finish) {
  // not enough input to encrypt
  if (input.length() < this.blockSize && !(finish && input.length() > 0)) {
    return true;
  } // get next block
  // CBC XOR's IV (or previous block) with plaintext


  for (var i = 0; i < this._ints; ++i) {
    this._inBlock[i] = this._prev[i] ^ input.getInt32();
  } // encrypt block


  this.cipher.encrypt(this._inBlock, this._outBlock); // write output, save previous block

  for (var i = 0; i < this._ints; ++i) {
    output.putInt32(this._outBlock[i]);
  }

  this._prev = this._outBlock;
};

modes.cbc.prototype.decrypt = function (input, output, finish) {
  // not enough input to decrypt
  if (input.length() < this.blockSize && !(finish && input.length() > 0)) {
    return true;
  } // get next block


  for (var i = 0; i < this._ints; ++i) {
    this._inBlock[i] = input.getInt32();
  } // decrypt block


  this.cipher.decrypt(this._inBlock, this._outBlock); // write output, save previous ciphered block
  // CBC XOR's IV (or previous block) with ciphertext

  for (var i = 0; i < this._ints; ++i) {
    output.putInt32(this._prev[i] ^ this._outBlock[i]);
  }

  this._prev = this._inBlock.slice(0);
};

modes.cbc.prototype.pad = function (input, options) {
  // add PKCS#7 padding to block (each pad byte is the
  // value of the number of pad bytes)
  var padding = input.length() === this.blockSize ? this.blockSize : this.blockSize - input.length();
  input.fillWithByte(padding, padding);
  return true;
};

modes.cbc.prototype.unpad = function (output, options) {
  // check for error: input data not a multiple of blockSize
  if (options.overflow > 0) {
    return false;
  } // ensure padding byte count is valid


  var len = output.length();
  var count = output.at(len - 1);

  if (count > this.blockSize << 2) {
    return false;
  } // trim off padding bytes


  output.truncate(count);
  return true;
};
/** Cipher feedback (CFB) **/


modes.cfb = function (options) {
  options = options || {};
  this.name = 'CFB';
  this.cipher = options.cipher;
  this.blockSize = options.blockSize || 16;
  this._ints = this.blockSize / 4;
  this._inBlock = null;
  this._outBlock = new Array(this._ints);
  this._partialBlock = new Array(this._ints);
  this._partialOutput = forge.util.createBuffer();
  this._partialBytes = 0;
};

modes.cfb.prototype.start = function (options) {
  if (!('iv' in options)) {
    throw new Error('Invalid IV parameter.');
  } // use IV as first input


  this._iv = transformIV(options.iv, this.blockSize);
  this._inBlock = this._iv.slice(0);
  this._partialBytes = 0;
};

modes.cfb.prototype.encrypt = function (input, output, finish) {
  // not enough input to encrypt
  var inputLength = input.length();

  if (inputLength === 0) {
    return true;
  } // encrypt block


  this.cipher.encrypt(this._inBlock, this._outBlock); // handle full block

  if (this._partialBytes === 0 && inputLength >= this.blockSize) {
    // XOR input with output, write input as output
    for (var i = 0; i < this._ints; ++i) {
      this._inBlock[i] = input.getInt32() ^ this._outBlock[i];
      output.putInt32(this._inBlock[i]);
    }

    return;
  } // handle partial block


  var partialBytes = (this.blockSize - inputLength) % this.blockSize;

  if (partialBytes > 0) {
    partialBytes = this.blockSize - partialBytes;
  } // XOR input with output, write input as partial output


  this._partialOutput.clear();

  for (var i = 0; i < this._ints; ++i) {
    this._partialBlock[i] = input.getInt32() ^ this._outBlock[i];

    this._partialOutput.putInt32(this._partialBlock[i]);
  }

  if (partialBytes > 0) {
    // block still incomplete, restore input buffer
    input.read -= this.blockSize;
  } else {
    // block complete, update input block
    for (var i = 0; i < this._ints; ++i) {
      this._inBlock[i] = this._partialBlock[i];
    }
  } // skip any previous partial bytes


  if (this._partialBytes > 0) {
    this._partialOutput.getBytes(this._partialBytes);
  }

  if (partialBytes > 0 && !finish) {
    output.putBytes(this._partialOutput.getBytes(partialBytes - this._partialBytes));
    this._partialBytes = partialBytes;
    return true;
  }

  output.putBytes(this._partialOutput.getBytes(inputLength - this._partialBytes));
  this._partialBytes = 0;
};

modes.cfb.prototype.decrypt = function (input, output, finish) {
  // not enough input to decrypt
  var inputLength = input.length();

  if (inputLength === 0) {
    return true;
  } // encrypt block (CFB always uses encryption mode)


  this.cipher.encrypt(this._inBlock, this._outBlock); // handle full block

  if (this._partialBytes === 0 && inputLength >= this.blockSize) {
    // XOR input with output, write input as output
    for (var i = 0; i < this._ints; ++i) {
      this._inBlock[i] = input.getInt32();
      output.putInt32(this._inBlock[i] ^ this._outBlock[i]);
    }

    return;
  } // handle partial block


  var partialBytes = (this.blockSize - inputLength) % this.blockSize;

  if (partialBytes > 0) {
    partialBytes = this.blockSize - partialBytes;
  } // XOR input with output, write input as partial output


  this._partialOutput.clear();

  for (var i = 0; i < this._ints; ++i) {
    this._partialBlock[i] = input.getInt32();

    this._partialOutput.putInt32(this._partialBlock[i] ^ this._outBlock[i]);
  }

  if (partialBytes > 0) {
    // block still incomplete, restore input buffer
    input.read -= this.blockSize;
  } else {
    // block complete, update input block
    for (var i = 0; i < this._ints; ++i) {
      this._inBlock[i] = this._partialBlock[i];
    }
  } // skip any previous partial bytes


  if (this._partialBytes > 0) {
    this._partialOutput.getBytes(this._partialBytes);
  }

  if (partialBytes > 0 && !finish) {
    output.putBytes(this._partialOutput.getBytes(partialBytes - this._partialBytes));
    this._partialBytes = partialBytes;
    return true;
  }

  output.putBytes(this._partialOutput.getBytes(inputLength - this._partialBytes));
  this._partialBytes = 0;
};
/** Output feedback (OFB) **/


modes.ofb = function (options) {
  options = options || {};
  this.name = 'OFB';
  this.cipher = options.cipher;
  this.blockSize = options.blockSize || 16;
  this._ints = this.blockSize / 4;
  this._inBlock = null;
  this._outBlock = new Array(this._ints);
  this._partialOutput = forge.util.createBuffer();
  this._partialBytes = 0;
};

modes.ofb.prototype.start = function (options) {
  if (!('iv' in options)) {
    throw new Error('Invalid IV parameter.');
  } // use IV as first input


  this._iv = transformIV(options.iv, this.blockSize);
  this._inBlock = this._iv.slice(0);
  this._partialBytes = 0;
};

modes.ofb.prototype.encrypt = function (input, output, finish) {
  // not enough input to encrypt
  var inputLength = input.length();

  if (input.length() === 0) {
    return true;
  } // encrypt block (OFB always uses encryption mode)


  this.cipher.encrypt(this._inBlock, this._outBlock); // handle full block

  if (this._partialBytes === 0 && inputLength >= this.blockSize) {
    // XOR input with output and update next input
    for (var i = 0; i < this._ints; ++i) {
      output.putInt32(input.getInt32() ^ this._outBlock[i]);
      this._inBlock[i] = this._outBlock[i];
    }

    return;
  } // handle partial block


  var partialBytes = (this.blockSize - inputLength) % this.blockSize;

  if (partialBytes > 0) {
    partialBytes = this.blockSize - partialBytes;
  } // XOR input with output


  this._partialOutput.clear();

  for (var i = 0; i < this._ints; ++i) {
    this._partialOutput.putInt32(input.getInt32() ^ this._outBlock[i]);
  }

  if (partialBytes > 0) {
    // block still incomplete, restore input buffer
    input.read -= this.blockSize;
  } else {
    // block complete, update input block
    for (var i = 0; i < this._ints; ++i) {
      this._inBlock[i] = this._outBlock[i];
    }
  } // skip any previous partial bytes


  if (this._partialBytes > 0) {
    this._partialOutput.getBytes(this._partialBytes);
  }

  if (partialBytes > 0 && !finish) {
    output.putBytes(this._partialOutput.getBytes(partialBytes - this._partialBytes));
    this._partialBytes = partialBytes;
    return true;
  }

  output.putBytes(this._partialOutput.getBytes(inputLength - this._partialBytes));
  this._partialBytes = 0;
};

modes.ofb.prototype.decrypt = modes.ofb.prototype.encrypt;
/** Counter (CTR) **/

modes.ctr = function (options) {
  options = options || {};
  this.name = 'CTR';
  this.cipher = options.cipher;
  this.blockSize = options.blockSize || 16;
  this._ints = this.blockSize / 4;
  this._inBlock = null;
  this._outBlock = new Array(this._ints);
  this._partialOutput = forge.util.createBuffer();
  this._partialBytes = 0;
};

modes.ctr.prototype.start = function (options) {
  if (!('iv' in options)) {
    throw new Error('Invalid IV parameter.');
  } // use IV as first input


  this._iv = transformIV(options.iv, this.blockSize);
  this._inBlock = this._iv.slice(0);
  this._partialBytes = 0;
};

modes.ctr.prototype.encrypt = function (input, output, finish) {
  // not enough input to encrypt
  var inputLength = input.length();

  if (inputLength === 0) {
    return true;
  } // encrypt block (CTR always uses encryption mode)


  this.cipher.encrypt(this._inBlock, this._outBlock); // handle full block

  if (this._partialBytes === 0 && inputLength >= this.blockSize) {
    // XOR input with output
    for (var i = 0; i < this._ints; ++i) {
      output.putInt32(input.getInt32() ^ this._outBlock[i]);
    }
  } else {
    // handle partial block
    var partialBytes = (this.blockSize - inputLength) % this.blockSize;

    if (partialBytes > 0) {
      partialBytes = this.blockSize - partialBytes;
    } // XOR input with output


    this._partialOutput.clear();

    for (var i = 0; i < this._ints; ++i) {
      this._partialOutput.putInt32(input.getInt32() ^ this._outBlock[i]);
    }

    if (partialBytes > 0) {
      // block still incomplete, restore input buffer
      input.read -= this.blockSize;
    } // skip any previous partial bytes


    if (this._partialBytes > 0) {
      this._partialOutput.getBytes(this._partialBytes);
    }

    if (partialBytes > 0 && !finish) {
      output.putBytes(this._partialOutput.getBytes(partialBytes - this._partialBytes));
      this._partialBytes = partialBytes;
      return true;
    }

    output.putBytes(this._partialOutput.getBytes(inputLength - this._partialBytes));
    this._partialBytes = 0;
  } // block complete, increment counter (input block)


  inc32(this._inBlock);
};

modes.ctr.prototype.decrypt = modes.ctr.prototype.encrypt;
/** Galois/Counter Mode (GCM) **/

modes.gcm = function (options) {
  options = options || {};
  this.name = 'GCM';
  this.cipher = options.cipher;
  this.blockSize = options.blockSize || 16;
  this._ints = this.blockSize / 4;
  this._inBlock = new Array(this._ints);
  this._outBlock = new Array(this._ints);
  this._partialOutput = forge.util.createBuffer();
  this._partialBytes = 0; // R is actually this value concatenated with 120 more zero bits, but
  // we only XOR against R so the other zeros have no effect -- we just
  // apply this value to the first integer in a block

  this._R = 0xE1000000;
};

modes.gcm.prototype.start = function (options) {
  if (!('iv' in options)) {
    throw new Error('Invalid IV parameter.');
  } // ensure IV is a byte buffer


  var iv = forge.util.createBuffer(options.iv); // no ciphered data processed yet

  this._cipherLength = 0; // default additional data is none

  var additionalData;

  if ('additionalData' in options) {
    additionalData = forge.util.createBuffer(options.additionalData);
  } else {
    additionalData = forge.util.createBuffer();
  } // default tag length is 128 bits


  if ('tagLength' in options) {
    this._tagLength = options.tagLength;
  } else {
    this._tagLength = 128;
  } // if tag is given, ensure tag matches tag length


  this._tag = null;

  if (options.decrypt) {
    // save tag to check later
    this._tag = forge.util.createBuffer(options.tag).getBytes();

    if (this._tag.length !== this._tagLength / 8) {
      throw new Error('Authentication tag does not match tag length.');
    }
  } // create tmp storage for hash calculation


  this._hashBlock = new Array(this._ints); // no tag generated yet

  this.tag = null; // generate hash subkey
  // (apply block cipher to "zero" block)

  this._hashSubkey = new Array(this._ints);
  this.cipher.encrypt([0, 0, 0, 0], this._hashSubkey); // generate table M
  // use 4-bit tables (32 component decomposition of a 16 byte value)
  // 8-bit tables take more space and are known to have security
  // vulnerabilities (in native implementations)

  this.componentBits = 4;
  this._m = this.generateHashTable(this._hashSubkey, this.componentBits); // Note: support IV length different from 96 bits? (only supporting
  // 96 bits is recommended by NIST SP-800-38D)
  // generate J_0

  var ivLength = iv.length();

  if (ivLength === 12) {
    // 96-bit IV
    this._j0 = [iv.getInt32(), iv.getInt32(), iv.getInt32(), 1];
  } else {
    // IV is NOT 96-bits
    this._j0 = [0, 0, 0, 0];

    while (iv.length() > 0) {
      this._j0 = this.ghash(this._hashSubkey, this._j0, [iv.getInt32(), iv.getInt32(), iv.getInt32(), iv.getInt32()]);
    }

    this._j0 = this.ghash(this._hashSubkey, this._j0, [0, 0].concat(from64To32(ivLength * 8)));
  } // generate ICB (initial counter block)


  this._inBlock = this._j0.slice(0);
  inc32(this._inBlock);
  this._partialBytes = 0; // consume authentication data

  additionalData = forge.util.createBuffer(additionalData); // save additional data length as a BE 64-bit number

  this._aDataLength = from64To32(additionalData.length() * 8); // pad additional data to 128 bit (16 byte) block size

  var overflow = additionalData.length() % this.blockSize;

  if (overflow) {
    additionalData.fillWithByte(0, this.blockSize - overflow);
  }

  this._s = [0, 0, 0, 0];

  while (additionalData.length() > 0) {
    this._s = this.ghash(this._hashSubkey, this._s, [additionalData.getInt32(), additionalData.getInt32(), additionalData.getInt32(), additionalData.getInt32()]);
  }
};

modes.gcm.prototype.encrypt = function (input, output, finish) {
  // not enough input to encrypt
  var inputLength = input.length();

  if (inputLength === 0) {
    return true;
  } // encrypt block


  this.cipher.encrypt(this._inBlock, this._outBlock); // handle full block

  if (this._partialBytes === 0 && inputLength >= this.blockSize) {
    // XOR input with output
    for (var i = 0; i < this._ints; ++i) {
      output.putInt32(this._outBlock[i] ^= input.getInt32());
    }

    this._cipherLength += this.blockSize;
  } else {
    // handle partial block
    var partialBytes = (this.blockSize - inputLength) % this.blockSize;

    if (partialBytes > 0) {
      partialBytes = this.blockSize - partialBytes;
    } // XOR input with output


    this._partialOutput.clear();

    for (var i = 0; i < this._ints; ++i) {
      this._partialOutput.putInt32(input.getInt32() ^ this._outBlock[i]);
    }

    if (partialBytes <= 0 || finish) {
      // handle overflow prior to hashing
      if (finish) {
        // get block overflow
        var overflow = inputLength % this.blockSize;
        this._cipherLength += overflow; // truncate for hash function

        this._partialOutput.truncate(this.blockSize - overflow);
      } else {
        this._cipherLength += this.blockSize;
      } // get output block for hashing


      for (var i = 0; i < this._ints; ++i) {
        this._outBlock[i] = this._partialOutput.getInt32();
      }

      this._partialOutput.read -= this.blockSize;
    } // skip any previous partial bytes


    if (this._partialBytes > 0) {
      this._partialOutput.getBytes(this._partialBytes);
    }

    if (partialBytes > 0 && !finish) {
      // block still incomplete, restore input buffer, get partial output,
      // and return early
      input.read -= this.blockSize;
      output.putBytes(this._partialOutput.getBytes(partialBytes - this._partialBytes));
      this._partialBytes = partialBytes;
      return true;
    }

    output.putBytes(this._partialOutput.getBytes(inputLength - this._partialBytes));
    this._partialBytes = 0;
  } // update hash block S


  this._s = this.ghash(this._hashSubkey, this._s, this._outBlock); // increment counter (input block)

  inc32(this._inBlock);
};

modes.gcm.prototype.decrypt = function (input, output, finish) {
  // not enough input to decrypt
  var inputLength = input.length();

  if (inputLength < this.blockSize && !(finish && inputLength > 0)) {
    return true;
  } // encrypt block (GCM always uses encryption mode)


  this.cipher.encrypt(this._inBlock, this._outBlock); // increment counter (input block)

  inc32(this._inBlock); // update hash block S

  this._hashBlock[0] = input.getInt32();
  this._hashBlock[1] = input.getInt32();
  this._hashBlock[2] = input.getInt32();
  this._hashBlock[3] = input.getInt32();
  this._s = this.ghash(this._hashSubkey, this._s, this._hashBlock); // XOR hash input with output

  for (var i = 0; i < this._ints; ++i) {
    output.putInt32(this._outBlock[i] ^ this._hashBlock[i]);
  } // increment cipher data length


  if (inputLength < this.blockSize) {
    this._cipherLength += inputLength % this.blockSize;
  } else {
    this._cipherLength += this.blockSize;
  }
};

modes.gcm.prototype.afterFinish = function (output, options) {
  var rval = true; // handle overflow

  if (options.decrypt && options.overflow) {
    output.truncate(this.blockSize - options.overflow);
  } // handle authentication tag


  this.tag = forge.util.createBuffer(); // concatenate additional data length with cipher length

  var lengths = this._aDataLength.concat(from64To32(this._cipherLength * 8)); // include lengths in hash


  this._s = this.ghash(this._hashSubkey, this._s, lengths); // do GCTR(J_0, S)

  var tag = [];
  this.cipher.encrypt(this._j0, tag);

  for (var i = 0; i < this._ints; ++i) {
    this.tag.putInt32(this._s[i] ^ tag[i]);
  } // trim tag to length


  this.tag.truncate(this.tag.length() % (this._tagLength / 8)); // check authentication tag

  if (options.decrypt && this.tag.bytes() !== this._tag) {
    rval = false;
  }

  return rval;
};
/**
 * See NIST SP-800-38D 6.3 (Algorithm 1). This function performs Galois
 * field multiplication. The field, GF(2^128), is defined by the polynomial:
 *
 * x^128 + x^7 + x^2 + x + 1
 *
 * Which is represented in little-endian binary form as: 11100001 (0xe1). When
 * the value of a coefficient is 1, a bit is set. The value R, is the
 * concatenation of this value and 120 zero bits, yielding a 128-bit value
 * which matches the block size.
 *
 * This function will multiply two elements (vectors of bytes), X and Y, in
 * the field GF(2^128). The result is initialized to zero. For each bit of
 * X (out of 128), x_i, if x_i is set, then the result is multiplied (XOR'd)
 * by the current value of Y. For each bit, the value of Y will be raised by
 * a power of x (multiplied by the polynomial x). This can be achieved by
 * shifting Y once to the right. If the current value of Y, prior to being
 * multiplied by x, has 0 as its LSB, then it is a 127th degree polynomial.
 * Otherwise, we must divide by R after shifting to find the remainder.
 *
 * @param x the first block to multiply by the second.
 * @param y the second block to multiply by the first.
 *
 * @return the block result of the multiplication.
 */


modes.gcm.prototype.multiply = function (x, y) {
  var z_i = [0, 0, 0, 0];
  var v_i = y.slice(0); // calculate Z_128 (block has 128 bits)

  for (var i = 0; i < 128; ++i) {
    // if x_i is 0, Z_{i+1} = Z_i (unchanged)
    // else Z_{i+1} = Z_i ^ V_i
    // get x_i by finding 32-bit int position, then left shift 1 by remainder
    var x_i = x[i / 32 | 0] & 1 << 31 - i % 32;

    if (x_i) {
      z_i[0] ^= v_i[0];
      z_i[1] ^= v_i[1];
      z_i[2] ^= v_i[2];
      z_i[3] ^= v_i[3];
    } // if LSB(V_i) is 1, V_i = V_i >> 1
    // else V_i = (V_i >> 1) ^ R


    this.pow(v_i, v_i);
  }

  return z_i;
};

modes.gcm.prototype.pow = function (x, out) {
  // if LSB(x) is 1, x = x >>> 1
  // else x = (x >>> 1) ^ R
  var lsb = x[3] & 1; // always do x >>> 1:
  // starting with the rightmost integer, shift each integer to the right
  // one bit, pulling in the bit from the integer to the left as its top
  // most bit (do this for the last 3 integers)

  for (var i = 3; i > 0; --i) {
    out[i] = x[i] >>> 1 | (x[i - 1] & 1) << 31;
  } // shift the first integer normally


  out[0] = x[0] >>> 1; // if lsb was not set, then polynomial had a degree of 127 and doesn't
  // need to divided; otherwise, XOR with R to find the remainder; we only
  // need to XOR the first integer since R technically ends w/120 zero bits

  if (lsb) {
    out[0] ^= this._R;
  }
};

modes.gcm.prototype.tableMultiply = function (x) {
  // assumes 4-bit tables are used
  var z = [0, 0, 0, 0];

  for (var i = 0; i < 32; ++i) {
    var idx = i / 8 | 0;
    var x_i = x[idx] >>> (7 - i % 8) * 4 & 0xF;
    var ah = this._m[i][x_i];
    z[0] ^= ah[0];
    z[1] ^= ah[1];
    z[2] ^= ah[2];
    z[3] ^= ah[3];
  }

  return z;
};
/**
 * A continuing version of the GHASH algorithm that operates on a single
 * block. The hash block, last hash value (Ym) and the new block to hash
 * are given.
 *
 * @param h the hash block.
 * @param y the previous value for Ym, use [0, 0, 0, 0] for a new hash.
 * @param x the block to hash.
 *
 * @return the hashed value (Ym).
 */


modes.gcm.prototype.ghash = function (h, y, x) {
  y[0] ^= x[0];
  y[1] ^= x[1];
  y[2] ^= x[2];
  y[3] ^= x[3];
  return this.tableMultiply(y); //return this.multiply(y, h);
};
/**
 * Precomputes a table for multiplying against the hash subkey. This
 * mechanism provides a substantial speed increase over multiplication
 * performed without a table. The table-based multiplication this table is
 * for solves X * H by multiplying each component of X by H and then
 * composing the results together using XOR.
 *
 * This function can be used to generate tables with different bit sizes
 * for the components, however, this implementation assumes there are
 * 32 components of X (which is a 16 byte vector), therefore each component
 * takes 4-bits (so the table is constructed with bits=4).
 *
 * @param h the hash subkey.
 * @param bits the bit size for a component.
 */


modes.gcm.prototype.generateHashTable = function (h, bits) {
  // TODO: There are further optimizations that would use only the
  // first table M_0 (or some variant) along with a remainder table;
  // this can be explored in the future
  var multiplier = 8 / bits;
  var perInt = 4 * multiplier;
  var size = 16 * multiplier;
  var m = new Array(size);

  for (var i = 0; i < size; ++i) {
    var tmp = [0, 0, 0, 0];
    var idx = i / perInt | 0;
    var shft = (perInt - 1 - i % perInt) * bits;
    tmp[idx] = 1 << bits - 1 << shft;
    m[i] = this.generateSubHashTable(this.multiply(tmp, h), bits);
  }

  return m;
};
/**
 * Generates a table for multiplying against the hash subkey for one
 * particular component (out of all possible component values).
 *
 * @param mid the pre-multiplied value for the middle key of the table.
 * @param bits the bit size for a component.
 */


modes.gcm.prototype.generateSubHashTable = function (mid, bits) {
  // compute the table quickly by minimizing the number of
  // POW operations -- they only need to be performed for powers of 2,
  // all other entries can be composed from those powers using XOR
  var size = 1 << bits;
  var half = size >>> 1;
  var m = new Array(size);
  m[half] = mid.slice(0);
  var i = half >>> 1;

  while (i > 0) {
    // raise m0[2 * i] and store in m0[i]
    this.pow(m[2 * i], m[i] = []);
    i >>= 1;
  }

  i = 2;

  while (i < half) {
    for (var j = 1; j < i; ++j) {
      var m_i = m[i];
      var m_j = m[j];
      m[i + j] = [m_i[0] ^ m_j[0], m_i[1] ^ m_j[1], m_i[2] ^ m_j[2], m_i[3] ^ m_j[3]];
    }

    i *= 2;
  }

  m[0] = [0, 0, 0, 0];
  /* Note: We could avoid storing these by doing composition during multiply
  calculate top half using composition by speed is preferred. */

  for (i = half + 1; i < size; ++i) {
    var c = m[i ^ half];
    m[i] = [mid[0] ^ c[0], mid[1] ^ c[1], mid[2] ^ c[2], mid[3] ^ c[3]];
  }

  return m;
};
/** Utility functions */


function transformIV(iv, blockSize) {
  if (typeof iv === 'string') {
    // convert iv string into byte buffer
    iv = forge.util.createBuffer(iv);
  }

  if (forge.util.isArray(iv) && iv.length > 4) {
    // convert iv byte array into byte buffer
    var tmp = iv;
    iv = forge.util.createBuffer();

    for (var i = 0; i < tmp.length; ++i) {
      iv.putByte(tmp[i]);
    }
  }

  if (iv.length() < blockSize) {
    throw new Error('Invalid IV length; got ' + iv.length() + ' bytes and expected ' + blockSize + ' bytes.');
  }

  if (!forge.util.isArray(iv)) {
    // convert iv byte buffer into 32-bit integer array
    var ints = [];
    var blocks = blockSize / 4;

    for (var i = 0; i < blocks; ++i) {
      ints.push(iv.getInt32());
    }

    iv = ints;
  }

  return iv;
}

function inc32(block) {
  // increment last 32 bits of block only
  block[block.length - 1] = block[block.length - 1] + 1 & 0xFFFFFFFF;
}

function from64To32(num) {
  // convert 64-bit number to two BE Int32s
  return [num / 0x100000000 | 0, num & 0xFFFFFFFF];
}

/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Secure Hash Algorithm with 160-bit digest (SHA-1) implementation.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2015 Digital Bazaar, Inc.
 */
var forge = __webpack_require__(7);

__webpack_require__(47);

__webpack_require__(10);

var sha1 = module.exports = forge.sha1 = forge.sha1 || {};
forge.md.sha1 = forge.md.algorithms.sha1 = sha1;
/**
 * Creates a SHA-1 message digest object.
 *
 * @return a message digest object.
 */

sha1.create = function () {
  // do initialization as necessary
  if (!_initialized) {
    _init();
  } // SHA-1 state contains five 32-bit integers


  var _state = null; // input buffer

  var _input = forge.util.createBuffer(); // used for word storage


  var _w = new Array(80); // message digest object


  var md = {
    algorithm: 'sha1',
    blockLength: 64,
    digestLength: 20,
    // 56-bit length of message so far (does not including padding)
    messageLength: 0,
    // true message length
    fullMessageLength: null,
    // size of message length in bytes
    messageLengthSize: 8
  };
  /**
   * Starts the digest.
   *
   * @return this digest object.
   */

  md.start = function () {
    // up to 56-bit message length for convenience
    md.messageLength = 0; // full message length (set md.messageLength64 for backwards-compatibility)

    md.fullMessageLength = md.messageLength64 = [];
    var int32s = md.messageLengthSize / 4;

    for (var i = 0; i < int32s; ++i) {
      md.fullMessageLength.push(0);
    }

    _input = forge.util.createBuffer();
    _state = {
      h0: 0x67452301,
      h1: 0xEFCDAB89,
      h2: 0x98BADCFE,
      h3: 0x10325476,
      h4: 0xC3D2E1F0
    };
    return md;
  }; // start digest automatically for first time


  md.start();
  /**
   * Updates the digest with the given message input. The given input can
   * treated as raw input (no encoding will be applied) or an encoding of
   * 'utf8' maybe given to encode the input using UTF-8.
   *
   * @param msg the message input to update with.
   * @param encoding the encoding to use (default: 'raw', other: 'utf8').
   *
   * @return this digest object.
   */

  md.update = function (msg, encoding) {
    if (encoding === 'utf8') {
      msg = forge.util.encodeUtf8(msg);
    } // update message length


    var len = msg.length;
    md.messageLength += len;
    len = [len / 0x100000000 >>> 0, len >>> 0];

    for (var i = md.fullMessageLength.length - 1; i >= 0; --i) {
      md.fullMessageLength[i] += len[1];
      len[1] = len[0] + (md.fullMessageLength[i] / 0x100000000 >>> 0);
      md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;
      len[0] = len[1] / 0x100000000 >>> 0;
    } // add bytes to input buffer


    _input.putBytes(msg); // process bytes


    _update(_state, _w, _input); // compact input buffer every 2K or if empty


    if (_input.read > 2048 || _input.length() === 0) {
      _input.compact();
    }

    return md;
  };
  /**
   * Produces the digest.
   *
   * @return a byte buffer containing the digest value.
   */


  md.digest = function () {
    /* Note: Here we copy the remaining bytes in the input buffer and
    add the appropriate SHA-1 padding. Then we do the final update
    on a copy of the state so that if the user wants to get
    intermediate digests they can do so. */

    /* Determine the number of bytes that must be added to the message
    to ensure its length is congruent to 448 mod 512. In other words,
    the data to be digested must be a multiple of 512 bits (or 128 bytes).
    This data includes the message, some padding, and the length of the
    message. Since the length of the message will be encoded as 8 bytes (64
    bits), that means that the last segment of the data must have 56 bytes
    (448 bits) of message and padding. Therefore, the length of the message
    plus the padding must be congruent to 448 mod 512 because
    512 - 128 = 448.
     In order to fill up the message length it must be filled with
    padding that begins with 1 bit followed by all 0 bits. Padding
    must *always* be present, so if the message length is already
    congruent to 448 mod 512, then 512 padding bits must be added. */
    var finalBlock = forge.util.createBuffer();
    finalBlock.putBytes(_input.bytes()); // compute remaining size to be digested (include message length size)

    var remaining = md.fullMessageLength[md.fullMessageLength.length - 1] + md.messageLengthSize; // add padding for overflow blockSize - overflow
    // _padding starts with 1 byte with first bit is set (byte value 128), then
    // there may be up to (blockSize - 1) other pad bytes

    var overflow = remaining & md.blockLength - 1;
    finalBlock.putBytes(_padding.substr(0, md.blockLength - overflow)); // serialize message length in bits in big-endian order; since length
    // is stored in bytes we multiply by 8 and add carry from next int

    var next, carry;
    var bits = md.fullMessageLength[0] * 8;

    for (var i = 0; i < md.fullMessageLength.length - 1; ++i) {
      next = md.fullMessageLength[i + 1] * 8;
      carry = next / 0x100000000 >>> 0;
      bits += carry;
      finalBlock.putInt32(bits >>> 0);
      bits = next >>> 0;
    }

    finalBlock.putInt32(bits);
    var s2 = {
      h0: _state.h0,
      h1: _state.h1,
      h2: _state.h2,
      h3: _state.h3,
      h4: _state.h4
    };

    _update(s2, _w, finalBlock);

    var rval = forge.util.createBuffer();
    rval.putInt32(s2.h0);
    rval.putInt32(s2.h1);
    rval.putInt32(s2.h2);
    rval.putInt32(s2.h3);
    rval.putInt32(s2.h4);
    return rval;
  };

  return md;
}; // sha-1 padding bytes not initialized yet


var _padding = null;
var _initialized = false;
/**
 * Initializes the constant tables.
 */

function _init() {
  // create padding
  _padding = String.fromCharCode(128);
  _padding += forge.util.fillString(String.fromCharCode(0x00), 64); // now initialized

  _initialized = true;
}
/**
 * Updates a SHA-1 state with the given byte buffer.
 *
 * @param s the SHA-1 state to update.
 * @param w the array to use to store words.
 * @param bytes the byte buffer to update with.
 */


function _update(s, w, bytes) {
  // consume 512 bit (64 byte) chunks
  var t, a, b, c, d, e, f, i;
  var len = bytes.length();

  while (len >= 64) {
    // the w array will be populated with sixteen 32-bit big-endian words
    // and then extended into 80 32-bit words according to SHA-1 algorithm
    // and for 32-79 using Max Locktyukhin's optimization
    // initialize hash value for this chunk
    a = s.h0;
    b = s.h1;
    c = s.h2;
    d = s.h3;
    e = s.h4; // round 1

    for (i = 0; i < 16; ++i) {
      t = bytes.getInt32();
      w[i] = t;
      f = d ^ b & (c ^ d);
      t = (a << 5 | a >>> 27) + f + e + 0x5A827999 + t;
      e = d;
      d = c; // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug

      c = (b << 30 | b >>> 2) >>> 0;
      b = a;
      a = t;
    }

    for (; i < 20; ++i) {
      t = w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16];
      t = t << 1 | t >>> 31;
      w[i] = t;
      f = d ^ b & (c ^ d);
      t = (a << 5 | a >>> 27) + f + e + 0x5A827999 + t;
      e = d;
      d = c; // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug

      c = (b << 30 | b >>> 2) >>> 0;
      b = a;
      a = t;
    } // round 2


    for (; i < 32; ++i) {
      t = w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16];
      t = t << 1 | t >>> 31;
      w[i] = t;
      f = b ^ c ^ d;
      t = (a << 5 | a >>> 27) + f + e + 0x6ED9EBA1 + t;
      e = d;
      d = c; // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug

      c = (b << 30 | b >>> 2) >>> 0;
      b = a;
      a = t;
    }

    for (; i < 40; ++i) {
      t = w[i - 6] ^ w[i - 16] ^ w[i - 28] ^ w[i - 32];
      t = t << 2 | t >>> 30;
      w[i] = t;
      f = b ^ c ^ d;
      t = (a << 5 | a >>> 27) + f + e + 0x6ED9EBA1 + t;
      e = d;
      d = c; // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug

      c = (b << 30 | b >>> 2) >>> 0;
      b = a;
      a = t;
    } // round 3


    for (; i < 60; ++i) {
      t = w[i - 6] ^ w[i - 16] ^ w[i - 28] ^ w[i - 32];
      t = t << 2 | t >>> 30;
      w[i] = t;
      f = b & c | d & (b ^ c);
      t = (a << 5 | a >>> 27) + f + e + 0x8F1BBCDC + t;
      e = d;
      d = c; // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug

      c = (b << 30 | b >>> 2) >>> 0;
      b = a;
      a = t;
    } // round 4


    for (; i < 80; ++i) {
      t = w[i - 6] ^ w[i - 16] ^ w[i - 28] ^ w[i - 32];
      t = t << 2 | t >>> 30;
      w[i] = t;
      f = b ^ c ^ d;
      t = (a << 5 | a >>> 27) + f + e + 0xCA62C1D6 + t;
      e = d;
      d = c; // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug

      c = (b << 30 | b >>> 2) >>> 0;
      b = a;
      a = t;
    } // update hash state


    s.h0 = s.h0 + a | 0;
    s.h1 = s.h1 + b | 0;
    s.h2 = s.h2 + c | 0;
    s.h3 = s.h3 + d | 0;
    s.h4 = s.h4 + e | 0;
    len -= 64;
  }
}

/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Hash-based Message Authentication Code implementation. Requires a message
 * digest object that can be obtained, for example, from forge.md.sha1 or
 * forge.md.md5.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2012 Digital Bazaar, Inc. All rights reserved.
 */
var forge = __webpack_require__(7);

__webpack_require__(47);

__webpack_require__(10);
/* HMAC API */


var hmac = module.exports = forge.hmac = forge.hmac || {};
/**
 * Creates an HMAC object that uses the given message digest object.
 *
 * @return an HMAC object.
 */

hmac.create = function () {
  // the hmac key to use
  var _key = null; // the message digest to use

  var _md = null; // the inner padding

  var _ipadding = null; // the outer padding

  var _opadding = null; // hmac context

  var ctx = {};
  /**
   * Starts or restarts the HMAC with the given key and message digest.
   *
   * @param md the message digest to use, null to reuse the previous one,
   *           a string to use builtin 'sha1', 'md5', 'sha256'.
   * @param key the key to use as a string, array of bytes, byte buffer,
   *           or null to reuse the previous key.
   */

  ctx.start = function (md, key) {
    if (md !== null) {
      if (typeof md === 'string') {
        // create builtin message digest
        md = md.toLowerCase();

        if (md in forge.md.algorithms) {
          _md = forge.md.algorithms[md].create();
        } else {
          throw new Error('Unknown hash algorithm "' + md + '"');
        }
      } else {
        // store message digest
        _md = md;
      }
    }

    if (key === null) {
      // reuse previous key
      key = _key;
    } else {
      if (typeof key === 'string') {
        // convert string into byte buffer
        key = forge.util.createBuffer(key);
      } else if (forge.util.isArray(key)) {
        // convert byte array into byte buffer
        var tmp = key;
        key = forge.util.createBuffer();

        for (var i = 0; i < tmp.length; ++i) {
          key.putByte(tmp[i]);
        }
      } // if key is longer than blocksize, hash it


      var keylen = key.length();

      if (keylen > _md.blockLength) {
        _md.start();

        _md.update(key.bytes());

        key = _md.digest();
      } // mix key into inner and outer padding
      // ipadding = [0x36 * blocksize] ^ key
      // opadding = [0x5C * blocksize] ^ key


      _ipadding = forge.util.createBuffer();
      _opadding = forge.util.createBuffer();
      keylen = key.length();

      for (var i = 0; i < keylen; ++i) {
        var tmp = key.at(i);

        _ipadding.putByte(0x36 ^ tmp);

        _opadding.putByte(0x5C ^ tmp);
      } // if key is shorter than blocksize, add additional padding


      if (keylen < _md.blockLength) {
        var tmp = _md.blockLength - keylen;

        for (var i = 0; i < tmp; ++i) {
          _ipadding.putByte(0x36);

          _opadding.putByte(0x5C);
        }
      }

      _key = key;
      _ipadding = _ipadding.bytes();
      _opadding = _opadding.bytes();
    } // digest is done like so: hash(opadding | hash(ipadding | message))
    // prepare to do inner hash
    // hash(ipadding | message)


    _md.start();

    _md.update(_ipadding);
  };
  /**
   * Updates the HMAC with the given message bytes.
   *
   * @param bytes the bytes to update with.
   */


  ctx.update = function (bytes) {
    _md.update(bytes);
  };
  /**
   * Produces the Message Authentication Code (MAC).
   *
   * @return a byte buffer containing the digest value.
   */


  ctx.getMac = function () {
    // digest is done like so: hash(opadding | hash(ipadding | message))
    // here we do the outer hashing
    var inner = _md.digest().bytes();

    _md.start();

    _md.update(_opadding);

    _md.update(inner);

    return _md.digest();
  }; // alias for getMac


  ctx.digest = ctx.getMac;
  return ctx;
};

/***/ }),
/* 203 */
/***/ (function(module, exports) {

/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */
module.exports = __webpack_amd_options__;

/* WEBPACK VAR INJECTION */}.call(this, {}))

/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var ERROR_MSG_INPUT = 'Input must be an string, Buffer or Uint8Array'; // For convenience, let people hash a string, not just a Uint8Array

function normalizeInput(input) {
  var ret;

  if (input instanceof Uint8Array) {
    ret = input;
  } else if (input instanceof Buffer) {
    ret = new Uint8Array(input);
  } else if (typeof input === 'string') {
    ret = new Uint8Array(Buffer.from(input, 'utf8'));
  } else {
    throw new Error(ERROR_MSG_INPUT);
  }

  return ret;
} // Converts a Uint8Array to a hexadecimal string
// For example, toHex([255, 0, 255]) returns "ff00ff"


function toHex(bytes) {
  return Array.prototype.map.call(bytes, function (n) {
    return (n < 16 ? '0' : '') + n.toString(16);
  }).join('');
} // Converts any value in [0...2^32-1] to an 8-character hex string


function uint32ToHex(val) {
  return (0x100000000 + val).toString(16).substring(1);
} // For debugging: prints out hash state in the same format as the RFC
// sample computation exactly, so that you can diff


function debugPrint(label, arr, size) {
  var msg = '\n' + label + ' = ';

  for (var i = 0; i < arr.length; i += 2) {
    if (size === 32) {
      msg += uint32ToHex(arr[i]).toUpperCase();
      msg += ' ';
      msg += uint32ToHex(arr[i + 1]).toUpperCase();
    } else if (size === 64) {
      msg += uint32ToHex(arr[i + 1]).toUpperCase();
      msg += uint32ToHex(arr[i]).toUpperCase();
    } else throw new Error('Invalid size ' + size);

    if (i % 6 === 4) {
      msg += '\n' + new Array(label.length + 4).join(' ');
    } else if (i < arr.length - 2) {
      msg += ' ';
    }
  }

  console.log(msg);
} // For performance testing: generates N bytes of input, hashes M times
// Measures and prints MB/second hash performance each time


function testSpeed(hashFn, N, M) {
  var startMs = new Date().getTime();
  var input = new Uint8Array(N);

  for (var i = 0; i < N; i++) {
    input[i] = i % 256;
  }

  var genMs = new Date().getTime();
  console.log('Generated random input in ' + (genMs - startMs) + 'ms');
  startMs = genMs;

  for (i = 0; i < M; i++) {
    var hashHex = hashFn(input);
    var hashMs = new Date().getTime();
    var ms = hashMs - startMs;
    startMs = hashMs;
    console.log('Hashed in ' + ms + 'ms: ' + hashHex.substring(0, 20) + '...');
    console.log(Math.round(N / (1 << 20) / (ms / 1000) * 100) / 100 + ' MB PER SECOND');
  }
}

module.exports = {
  normalizeInput: normalizeInput,
  toHex: toHex,
  debugPrint: debugPrint,
  testSpeed: testSpeed
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {

(function (module, exports) {
  'use strict'; // Utils

  function assert(val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  } // Could use `inherits` module, but don't want to move from single file
  // architecture yet.


  function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;

    var TempCtor = function TempCtor() {};

    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  } // BN


  function BN(number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0; // Reduction context

    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }

  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;
  var Buffer;

  try {
    Buffer = __webpack_require__(425).Buffer;
  } catch (e) {}

  BN.isBN = function isBN(num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max(left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min(left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init(number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }

    assert(base === (base | 0) && base >= 2 && base <= 36);
    number = number.toString().replace(/\s+/g, '');
    var start = 0;

    if (number[0] === '-') {
      start++;
    }

    if (base === 16) {
      this._parseHex(number, start);
    } else {
      this._parseBase(number, base, start);
    }

    if (number[0] === '-') {
      this.negative = 1;
    }

    this.strip();
    if (endian !== 'le') return;

    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initNumber = function _initNumber(number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }

    if (number < 0x4000000) {
      this.words = [number & 0x3ffffff];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)

      this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff, 1];
      this.length = 3;
    }

    if (endian !== 'le') return; // Reverse the bytes

    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray(number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');

    if (number.length <= 0) {
      this.words = [0];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);

    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;

    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
        this.words[j] |= w << off & 0x3ffffff;
        this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
        off += 24;

        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
        this.words[j] |= w << off & 0x3ffffff;
        this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
        off += 24;

        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }

    return this.strip();
  };

  function parseHex(str, start, end) {
    var r = 0;
    var len = Math.min(str.length, end);

    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;
      r <<= 4; // 'a' - 'f'

      if (c >= 49 && c <= 54) {
        r |= c - 49 + 0xa; // 'A' - 'F'
      } else if (c >= 17 && c <= 22) {
        r |= c - 17 + 0xa; // '0' - '9'
      } else {
        r |= c & 0xf;
      }
    }

    return r;
  }

  BN.prototype._parseHex = function _parseHex(number, start) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);

    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w; // Scan 24-bit chunks and add them to the number

    var off = 0;

    for (i = number.length - 6, j = 0; i >= start; i -= 6) {
      w = parseHex(number, i, i + 6);
      this.words[j] |= w << off & 0x3ffffff; // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb

      this.words[j + 1] |= w >>> 26 - off & 0x3fffff;
      off += 24;

      if (off >= 26) {
        off -= 26;
        j++;
      }
    }

    if (i + 6 !== start) {
      w = parseHex(number, start, i + 6);
      this.words[j] |= w << off & 0x3ffffff;
      this.words[j + 1] |= w >>> 26 - off & 0x3fffff;
    }

    this.strip();
  };

  function parseBase(str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);

    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;
      r *= mul; // 'a'

      if (c >= 49) {
        r += c - 49 + 0xa; // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa; // '0' - '9'
      } else {
        r += c;
      }
    }

    return r;
  }

  BN.prototype._parseBase = function _parseBase(number, base, start) {
    // Initialize as zero
    this.words = [0];
    this.length = 1; // Find length of limb in base

    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }

    limbLen--;
    limbPow = limbPow / base | 0;
    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;
    var word = 0;

    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);
      this.imuln(limbPow);

      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);

      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }
  };

  BN.prototype.copy = function copy(dest) {
    dest.words = new Array(this.length);

    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }

    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone() {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand(size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }

    return this;
  }; // Remove leading `0` from `this`


  BN.prototype.strip = function strip() {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }

    return this._normSign();
  };

  BN.prototype._normSign = function _normSign() {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }

    return this;
  };

  BN.prototype.inspect = function inspect() {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };
  /*
   var zeros = [];
  var groupSizes = [];
  var groupBases = [];
   var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }
   */


  var zeros = ['', '0', '00', '000', '0000', '00000', '000000', '0000000', '00000000', '000000000', '0000000000', '00000000000', '000000000000', '0000000000000', '00000000000000', '000000000000000', '0000000000000000', '00000000000000000', '000000000000000000', '0000000000000000000', '00000000000000000000', '000000000000000000000', '0000000000000000000000', '00000000000000000000000', '000000000000000000000000', '0000000000000000000000000'];
  var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];
  var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];

  BN.prototype.toString = function toString(base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;
    var out;

    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;

      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = ((w << off | carry) & 0xffffff).toString(16);
        carry = w >>> 24 - off & 0xffffff;

        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }

        off += 2;

        if (off >= 26) {
          off -= 26;
          i--;
        }
      }

      if (carry !== 0) {
        out = carry.toString(16) + out;
      }

      while (out.length % padding !== 0) {
        out = '0' + out;
      }

      if (this.negative !== 0) {
        out = '-' + out;
      }

      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base]; // var groupBase = Math.pow(base, groupSize);

      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;

      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }

      if (this.isZero()) {
        out = '0' + out;
      }

      while (out.length % padding !== 0) {
        out = '0' + out;
      }

      if (this.negative !== 0) {
        out = '-' + out;
      }

      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber() {
    var ret = this.words[0];

    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + this.words[1] * 0x4000000;
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }

    return this.negative !== 0 ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON() {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer(endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray(endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');
    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);
    var b, i;
    var q = this.clone();

    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);
        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);
        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits(w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits(w) {
      var t = w;
      var r = 0;

      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }

      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }

      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }

      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }

      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits(w) {
    // Short-cut
    if (w === 0) return 26;
    var t = w;
    var r = 0;

    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }

    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }

    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }

    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }

    if ((t & 0x1) === 0) {
      r++;
    }

    return r;
  }; // Return number of used bits in a BN


  BN.prototype.bitLength = function bitLength() {
    var w = this.words[this.length - 1];

    var hi = this._countBits(w);

    return (this.length - 1) * 26 + hi;
  };

  function toBitArray(num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = bit / 26 | 0;
      var wbit = bit % 26;
      w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
    }

    return w;
  } // Number of trailing zero bits


  BN.prototype.zeroBits = function zeroBits() {
    if (this.isZero()) return 0;
    var r = 0;

    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);

      r += b;
      if (b !== 26) break;
    }

    return r;
  };

  BN.prototype.byteLength = function byteLength() {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos(width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }

    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos(width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }

    return this.clone();
  };

  BN.prototype.isNeg = function isNeg() {
    return this.negative !== 0;
  }; // Return negative clone of `this`


  BN.prototype.neg = function neg() {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg() {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  }; // Or `num` with `this` in-place


  BN.prototype.iuor = function iuor(num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior(num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  }; // Or `num` with `this`


  BN.prototype.or = function or(num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor(num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  }; // And `num` with `this` in-place


  BN.prototype.iuand = function iuand(num) {
    // b = min-length(num, this)
    var b;

    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;
    return this.strip();
  };

  BN.prototype.iand = function iand(num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  }; // And `num` with `this`


  BN.prototype.and = function and(num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand(num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  }; // Xor `num` with `this` in-place


  BN.prototype.iuxor = function iuxor(num) {
    // a.length > b.length
    var a;
    var b;

    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;
    return this.strip();
  };

  BN.prototype.ixor = function ixor(num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  }; // Xor `num` with `this`


  BN.prototype.xor = function xor(num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor(num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  }; // Not ``this`` with ``width`` bitwidth


  BN.prototype.inotn = function inotn(width) {
    assert(typeof width === 'number' && width >= 0);
    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26; // Extend the buffer with leading zeroes

    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    } // Handle complete words


    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    } // Handle the residue


    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
    } // And remove leading zeroes


    return this.strip();
  };

  BN.prototype.notn = function notn(width) {
    return this.clone().inotn(width);
  }; // Set `bit` of `this`


  BN.prototype.setn = function setn(bit, val) {
    assert(typeof bit === 'number' && bit >= 0);
    var off = bit / 26 | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | 1 << wbit;
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  }; // Add `num` to `this` in-place


  BN.prototype.iadd = function iadd(num) {
    var r; // negative + positive

    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign(); // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    } // a.length > b.length


    var a, b;

    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;

    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;

    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++; // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  }; // Add `num` to `this`


  BN.prototype.add = function add(num) {
    var res;

    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);
    return num.clone().iadd(this);
  }; // Subtract `num` from `this` in-place


  BN.prototype.isub = function isub(num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign(); // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    } // At this point both numbers are positive


    var cmp = this.cmp(num); // Optimization - zeroify

    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    } // a > b


    var a, b;

    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;

    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    } // Copy rest of the words


    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  }; // Subtract `num` from `this`


  BN.prototype.sub = function sub(num) {
    return this.clone().isub(num);
  };

  function smallMulTo(self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = self.length + num.length | 0;
    out.length = len;
    len = len - 1 | 0; // Peel one iteration (compiler can't do it, because of code complexity)

    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;
    var lo = r & 0x3ffffff;
    var carry = r / 0x4000000 | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);

      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += r / 0x4000000 | 0;
        rword = r & 0x3ffffff;
      }

      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }

    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  } // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).


  var comb10MulTo = function comb10MulTo(self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;
    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */

    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = mid + Math.imul(ah0, bl0) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */

    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = mid + Math.imul(ah1, bl0) | 0;
    hi = Math.imul(ah1, bh0);
    lo = lo + Math.imul(al0, bl1) | 0;
    mid = mid + Math.imul(al0, bh1) | 0;
    mid = mid + Math.imul(ah0, bl1) | 0;
    hi = hi + Math.imul(ah0, bh1) | 0;
    var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */

    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = mid + Math.imul(ah2, bl0) | 0;
    hi = Math.imul(ah2, bh0);
    lo = lo + Math.imul(al1, bl1) | 0;
    mid = mid + Math.imul(al1, bh1) | 0;
    mid = mid + Math.imul(ah1, bl1) | 0;
    hi = hi + Math.imul(ah1, bh1) | 0;
    lo = lo + Math.imul(al0, bl2) | 0;
    mid = mid + Math.imul(al0, bh2) | 0;
    mid = mid + Math.imul(ah0, bl2) | 0;
    hi = hi + Math.imul(ah0, bh2) | 0;
    var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */

    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = mid + Math.imul(ah3, bl0) | 0;
    hi = Math.imul(ah3, bh0);
    lo = lo + Math.imul(al2, bl1) | 0;
    mid = mid + Math.imul(al2, bh1) | 0;
    mid = mid + Math.imul(ah2, bl1) | 0;
    hi = hi + Math.imul(ah2, bh1) | 0;
    lo = lo + Math.imul(al1, bl2) | 0;
    mid = mid + Math.imul(al1, bh2) | 0;
    mid = mid + Math.imul(ah1, bl2) | 0;
    hi = hi + Math.imul(ah1, bh2) | 0;
    lo = lo + Math.imul(al0, bl3) | 0;
    mid = mid + Math.imul(al0, bh3) | 0;
    mid = mid + Math.imul(ah0, bl3) | 0;
    hi = hi + Math.imul(ah0, bh3) | 0;
    var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */

    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = mid + Math.imul(ah4, bl0) | 0;
    hi = Math.imul(ah4, bh0);
    lo = lo + Math.imul(al3, bl1) | 0;
    mid = mid + Math.imul(al3, bh1) | 0;
    mid = mid + Math.imul(ah3, bl1) | 0;
    hi = hi + Math.imul(ah3, bh1) | 0;
    lo = lo + Math.imul(al2, bl2) | 0;
    mid = mid + Math.imul(al2, bh2) | 0;
    mid = mid + Math.imul(ah2, bl2) | 0;
    hi = hi + Math.imul(ah2, bh2) | 0;
    lo = lo + Math.imul(al1, bl3) | 0;
    mid = mid + Math.imul(al1, bh3) | 0;
    mid = mid + Math.imul(ah1, bl3) | 0;
    hi = hi + Math.imul(ah1, bh3) | 0;
    lo = lo + Math.imul(al0, bl4) | 0;
    mid = mid + Math.imul(al0, bh4) | 0;
    mid = mid + Math.imul(ah0, bl4) | 0;
    hi = hi + Math.imul(ah0, bh4) | 0;
    var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */

    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = mid + Math.imul(ah5, bl0) | 0;
    hi = Math.imul(ah5, bh0);
    lo = lo + Math.imul(al4, bl1) | 0;
    mid = mid + Math.imul(al4, bh1) | 0;
    mid = mid + Math.imul(ah4, bl1) | 0;
    hi = hi + Math.imul(ah4, bh1) | 0;
    lo = lo + Math.imul(al3, bl2) | 0;
    mid = mid + Math.imul(al3, bh2) | 0;
    mid = mid + Math.imul(ah3, bl2) | 0;
    hi = hi + Math.imul(ah3, bh2) | 0;
    lo = lo + Math.imul(al2, bl3) | 0;
    mid = mid + Math.imul(al2, bh3) | 0;
    mid = mid + Math.imul(ah2, bl3) | 0;
    hi = hi + Math.imul(ah2, bh3) | 0;
    lo = lo + Math.imul(al1, bl4) | 0;
    mid = mid + Math.imul(al1, bh4) | 0;
    mid = mid + Math.imul(ah1, bl4) | 0;
    hi = hi + Math.imul(ah1, bh4) | 0;
    lo = lo + Math.imul(al0, bl5) | 0;
    mid = mid + Math.imul(al0, bh5) | 0;
    mid = mid + Math.imul(ah0, bl5) | 0;
    hi = hi + Math.imul(ah0, bh5) | 0;
    var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */

    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = mid + Math.imul(ah6, bl0) | 0;
    hi = Math.imul(ah6, bh0);
    lo = lo + Math.imul(al5, bl1) | 0;
    mid = mid + Math.imul(al5, bh1) | 0;
    mid = mid + Math.imul(ah5, bl1) | 0;
    hi = hi + Math.imul(ah5, bh1) | 0;
    lo = lo + Math.imul(al4, bl2) | 0;
    mid = mid + Math.imul(al4, bh2) | 0;
    mid = mid + Math.imul(ah4, bl2) | 0;
    hi = hi + Math.imul(ah4, bh2) | 0;
    lo = lo + Math.imul(al3, bl3) | 0;
    mid = mid + Math.imul(al3, bh3) | 0;
    mid = mid + Math.imul(ah3, bl3) | 0;
    hi = hi + Math.imul(ah3, bh3) | 0;
    lo = lo + Math.imul(al2, bl4) | 0;
    mid = mid + Math.imul(al2, bh4) | 0;
    mid = mid + Math.imul(ah2, bl4) | 0;
    hi = hi + Math.imul(ah2, bh4) | 0;
    lo = lo + Math.imul(al1, bl5) | 0;
    mid = mid + Math.imul(al1, bh5) | 0;
    mid = mid + Math.imul(ah1, bl5) | 0;
    hi = hi + Math.imul(ah1, bh5) | 0;
    lo = lo + Math.imul(al0, bl6) | 0;
    mid = mid + Math.imul(al0, bh6) | 0;
    mid = mid + Math.imul(ah0, bl6) | 0;
    hi = hi + Math.imul(ah0, bh6) | 0;
    var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */

    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = mid + Math.imul(ah7, bl0) | 0;
    hi = Math.imul(ah7, bh0);
    lo = lo + Math.imul(al6, bl1) | 0;
    mid = mid + Math.imul(al6, bh1) | 0;
    mid = mid + Math.imul(ah6, bl1) | 0;
    hi = hi + Math.imul(ah6, bh1) | 0;
    lo = lo + Math.imul(al5, bl2) | 0;
    mid = mid + Math.imul(al5, bh2) | 0;
    mid = mid + Math.imul(ah5, bl2) | 0;
    hi = hi + Math.imul(ah5, bh2) | 0;
    lo = lo + Math.imul(al4, bl3) | 0;
    mid = mid + Math.imul(al4, bh3) | 0;
    mid = mid + Math.imul(ah4, bl3) | 0;
    hi = hi + Math.imul(ah4, bh3) | 0;
    lo = lo + Math.imul(al3, bl4) | 0;
    mid = mid + Math.imul(al3, bh4) | 0;
    mid = mid + Math.imul(ah3, bl4) | 0;
    hi = hi + Math.imul(ah3, bh4) | 0;
    lo = lo + Math.imul(al2, bl5) | 0;
    mid = mid + Math.imul(al2, bh5) | 0;
    mid = mid + Math.imul(ah2, bl5) | 0;
    hi = hi + Math.imul(ah2, bh5) | 0;
    lo = lo + Math.imul(al1, bl6) | 0;
    mid = mid + Math.imul(al1, bh6) | 0;
    mid = mid + Math.imul(ah1, bl6) | 0;
    hi = hi + Math.imul(ah1, bh6) | 0;
    lo = lo + Math.imul(al0, bl7) | 0;
    mid = mid + Math.imul(al0, bh7) | 0;
    mid = mid + Math.imul(ah0, bl7) | 0;
    hi = hi + Math.imul(ah0, bh7) | 0;
    var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */

    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = mid + Math.imul(ah8, bl0) | 0;
    hi = Math.imul(ah8, bh0);
    lo = lo + Math.imul(al7, bl1) | 0;
    mid = mid + Math.imul(al7, bh1) | 0;
    mid = mid + Math.imul(ah7, bl1) | 0;
    hi = hi + Math.imul(ah7, bh1) | 0;
    lo = lo + Math.imul(al6, bl2) | 0;
    mid = mid + Math.imul(al6, bh2) | 0;
    mid = mid + Math.imul(ah6, bl2) | 0;
    hi = hi + Math.imul(ah6, bh2) | 0;
    lo = lo + Math.imul(al5, bl3) | 0;
    mid = mid + Math.imul(al5, bh3) | 0;
    mid = mid + Math.imul(ah5, bl3) | 0;
    hi = hi + Math.imul(ah5, bh3) | 0;
    lo = lo + Math.imul(al4, bl4) | 0;
    mid = mid + Math.imul(al4, bh4) | 0;
    mid = mid + Math.imul(ah4, bl4) | 0;
    hi = hi + Math.imul(ah4, bh4) | 0;
    lo = lo + Math.imul(al3, bl5) | 0;
    mid = mid + Math.imul(al3, bh5) | 0;
    mid = mid + Math.imul(ah3, bl5) | 0;
    hi = hi + Math.imul(ah3, bh5) | 0;
    lo = lo + Math.imul(al2, bl6) | 0;
    mid = mid + Math.imul(al2, bh6) | 0;
    mid = mid + Math.imul(ah2, bl6) | 0;
    hi = hi + Math.imul(ah2, bh6) | 0;
    lo = lo + Math.imul(al1, bl7) | 0;
    mid = mid + Math.imul(al1, bh7) | 0;
    mid = mid + Math.imul(ah1, bl7) | 0;
    hi = hi + Math.imul(ah1, bh7) | 0;
    lo = lo + Math.imul(al0, bl8) | 0;
    mid = mid + Math.imul(al0, bh8) | 0;
    mid = mid + Math.imul(ah0, bl8) | 0;
    hi = hi + Math.imul(ah0, bh8) | 0;
    var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */

    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = mid + Math.imul(ah9, bl0) | 0;
    hi = Math.imul(ah9, bh0);
    lo = lo + Math.imul(al8, bl1) | 0;
    mid = mid + Math.imul(al8, bh1) | 0;
    mid = mid + Math.imul(ah8, bl1) | 0;
    hi = hi + Math.imul(ah8, bh1) | 0;
    lo = lo + Math.imul(al7, bl2) | 0;
    mid = mid + Math.imul(al7, bh2) | 0;
    mid = mid + Math.imul(ah7, bl2) | 0;
    hi = hi + Math.imul(ah7, bh2) | 0;
    lo = lo + Math.imul(al6, bl3) | 0;
    mid = mid + Math.imul(al6, bh3) | 0;
    mid = mid + Math.imul(ah6, bl3) | 0;
    hi = hi + Math.imul(ah6, bh3) | 0;
    lo = lo + Math.imul(al5, bl4) | 0;
    mid = mid + Math.imul(al5, bh4) | 0;
    mid = mid + Math.imul(ah5, bl4) | 0;
    hi = hi + Math.imul(ah5, bh4) | 0;
    lo = lo + Math.imul(al4, bl5) | 0;
    mid = mid + Math.imul(al4, bh5) | 0;
    mid = mid + Math.imul(ah4, bl5) | 0;
    hi = hi + Math.imul(ah4, bh5) | 0;
    lo = lo + Math.imul(al3, bl6) | 0;
    mid = mid + Math.imul(al3, bh6) | 0;
    mid = mid + Math.imul(ah3, bl6) | 0;
    hi = hi + Math.imul(ah3, bh6) | 0;
    lo = lo + Math.imul(al2, bl7) | 0;
    mid = mid + Math.imul(al2, bh7) | 0;
    mid = mid + Math.imul(ah2, bl7) | 0;
    hi = hi + Math.imul(ah2, bh7) | 0;
    lo = lo + Math.imul(al1, bl8) | 0;
    mid = mid + Math.imul(al1, bh8) | 0;
    mid = mid + Math.imul(ah1, bl8) | 0;
    hi = hi + Math.imul(ah1, bh8) | 0;
    lo = lo + Math.imul(al0, bl9) | 0;
    mid = mid + Math.imul(al0, bh9) | 0;
    mid = mid + Math.imul(ah0, bl9) | 0;
    hi = hi + Math.imul(ah0, bh9) | 0;
    var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */

    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = mid + Math.imul(ah9, bl1) | 0;
    hi = Math.imul(ah9, bh1);
    lo = lo + Math.imul(al8, bl2) | 0;
    mid = mid + Math.imul(al8, bh2) | 0;
    mid = mid + Math.imul(ah8, bl2) | 0;
    hi = hi + Math.imul(ah8, bh2) | 0;
    lo = lo + Math.imul(al7, bl3) | 0;
    mid = mid + Math.imul(al7, bh3) | 0;
    mid = mid + Math.imul(ah7, bl3) | 0;
    hi = hi + Math.imul(ah7, bh3) | 0;
    lo = lo + Math.imul(al6, bl4) | 0;
    mid = mid + Math.imul(al6, bh4) | 0;
    mid = mid + Math.imul(ah6, bl4) | 0;
    hi = hi + Math.imul(ah6, bh4) | 0;
    lo = lo + Math.imul(al5, bl5) | 0;
    mid = mid + Math.imul(al5, bh5) | 0;
    mid = mid + Math.imul(ah5, bl5) | 0;
    hi = hi + Math.imul(ah5, bh5) | 0;
    lo = lo + Math.imul(al4, bl6) | 0;
    mid = mid + Math.imul(al4, bh6) | 0;
    mid = mid + Math.imul(ah4, bl6) | 0;
    hi = hi + Math.imul(ah4, bh6) | 0;
    lo = lo + Math.imul(al3, bl7) | 0;
    mid = mid + Math.imul(al3, bh7) | 0;
    mid = mid + Math.imul(ah3, bl7) | 0;
    hi = hi + Math.imul(ah3, bh7) | 0;
    lo = lo + Math.imul(al2, bl8) | 0;
    mid = mid + Math.imul(al2, bh8) | 0;
    mid = mid + Math.imul(ah2, bl8) | 0;
    hi = hi + Math.imul(ah2, bh8) | 0;
    lo = lo + Math.imul(al1, bl9) | 0;
    mid = mid + Math.imul(al1, bh9) | 0;
    mid = mid + Math.imul(ah1, bl9) | 0;
    hi = hi + Math.imul(ah1, bh9) | 0;
    var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */

    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = mid + Math.imul(ah9, bl2) | 0;
    hi = Math.imul(ah9, bh2);
    lo = lo + Math.imul(al8, bl3) | 0;
    mid = mid + Math.imul(al8, bh3) | 0;
    mid = mid + Math.imul(ah8, bl3) | 0;
    hi = hi + Math.imul(ah8, bh3) | 0;
    lo = lo + Math.imul(al7, bl4) | 0;
    mid = mid + Math.imul(al7, bh4) | 0;
    mid = mid + Math.imul(ah7, bl4) | 0;
    hi = hi + Math.imul(ah7, bh4) | 0;
    lo = lo + Math.imul(al6, bl5) | 0;
    mid = mid + Math.imul(al6, bh5) | 0;
    mid = mid + Math.imul(ah6, bl5) | 0;
    hi = hi + Math.imul(ah6, bh5) | 0;
    lo = lo + Math.imul(al5, bl6) | 0;
    mid = mid + Math.imul(al5, bh6) | 0;
    mid = mid + Math.imul(ah5, bl6) | 0;
    hi = hi + Math.imul(ah5, bh6) | 0;
    lo = lo + Math.imul(al4, bl7) | 0;
    mid = mid + Math.imul(al4, bh7) | 0;
    mid = mid + Math.imul(ah4, bl7) | 0;
    hi = hi + Math.imul(ah4, bh7) | 0;
    lo = lo + Math.imul(al3, bl8) | 0;
    mid = mid + Math.imul(al3, bh8) | 0;
    mid = mid + Math.imul(ah3, bl8) | 0;
    hi = hi + Math.imul(ah3, bh8) | 0;
    lo = lo + Math.imul(al2, bl9) | 0;
    mid = mid + Math.imul(al2, bh9) | 0;
    mid = mid + Math.imul(ah2, bl9) | 0;
    hi = hi + Math.imul(ah2, bh9) | 0;
    var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */

    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = mid + Math.imul(ah9, bl3) | 0;
    hi = Math.imul(ah9, bh3);
    lo = lo + Math.imul(al8, bl4) | 0;
    mid = mid + Math.imul(al8, bh4) | 0;
    mid = mid + Math.imul(ah8, bl4) | 0;
    hi = hi + Math.imul(ah8, bh4) | 0;
    lo = lo + Math.imul(al7, bl5) | 0;
    mid = mid + Math.imul(al7, bh5) | 0;
    mid = mid + Math.imul(ah7, bl5) | 0;
    hi = hi + Math.imul(ah7, bh5) | 0;
    lo = lo + Math.imul(al6, bl6) | 0;
    mid = mid + Math.imul(al6, bh6) | 0;
    mid = mid + Math.imul(ah6, bl6) | 0;
    hi = hi + Math.imul(ah6, bh6) | 0;
    lo = lo + Math.imul(al5, bl7) | 0;
    mid = mid + Math.imul(al5, bh7) | 0;
    mid = mid + Math.imul(ah5, bl7) | 0;
    hi = hi + Math.imul(ah5, bh7) | 0;
    lo = lo + Math.imul(al4, bl8) | 0;
    mid = mid + Math.imul(al4, bh8) | 0;
    mid = mid + Math.imul(ah4, bl8) | 0;
    hi = hi + Math.imul(ah4, bh8) | 0;
    lo = lo + Math.imul(al3, bl9) | 0;
    mid = mid + Math.imul(al3, bh9) | 0;
    mid = mid + Math.imul(ah3, bl9) | 0;
    hi = hi + Math.imul(ah3, bh9) | 0;
    var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */

    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = mid + Math.imul(ah9, bl4) | 0;
    hi = Math.imul(ah9, bh4);
    lo = lo + Math.imul(al8, bl5) | 0;
    mid = mid + Math.imul(al8, bh5) | 0;
    mid = mid + Math.imul(ah8, bl5) | 0;
    hi = hi + Math.imul(ah8, bh5) | 0;
    lo = lo + Math.imul(al7, bl6) | 0;
    mid = mid + Math.imul(al7, bh6) | 0;
    mid = mid + Math.imul(ah7, bl6) | 0;
    hi = hi + Math.imul(ah7, bh6) | 0;
    lo = lo + Math.imul(al6, bl7) | 0;
    mid = mid + Math.imul(al6, bh7) | 0;
    mid = mid + Math.imul(ah6, bl7) | 0;
    hi = hi + Math.imul(ah6, bh7) | 0;
    lo = lo + Math.imul(al5, bl8) | 0;
    mid = mid + Math.imul(al5, bh8) | 0;
    mid = mid + Math.imul(ah5, bl8) | 0;
    hi = hi + Math.imul(ah5, bh8) | 0;
    lo = lo + Math.imul(al4, bl9) | 0;
    mid = mid + Math.imul(al4, bh9) | 0;
    mid = mid + Math.imul(ah4, bl9) | 0;
    hi = hi + Math.imul(ah4, bh9) | 0;
    var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */

    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = mid + Math.imul(ah9, bl5) | 0;
    hi = Math.imul(ah9, bh5);
    lo = lo + Math.imul(al8, bl6) | 0;
    mid = mid + Math.imul(al8, bh6) | 0;
    mid = mid + Math.imul(ah8, bl6) | 0;
    hi = hi + Math.imul(ah8, bh6) | 0;
    lo = lo + Math.imul(al7, bl7) | 0;
    mid = mid + Math.imul(al7, bh7) | 0;
    mid = mid + Math.imul(ah7, bl7) | 0;
    hi = hi + Math.imul(ah7, bh7) | 0;
    lo = lo + Math.imul(al6, bl8) | 0;
    mid = mid + Math.imul(al6, bh8) | 0;
    mid = mid + Math.imul(ah6, bl8) | 0;
    hi = hi + Math.imul(ah6, bh8) | 0;
    lo = lo + Math.imul(al5, bl9) | 0;
    mid = mid + Math.imul(al5, bh9) | 0;
    mid = mid + Math.imul(ah5, bl9) | 0;
    hi = hi + Math.imul(ah5, bh9) | 0;
    var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */

    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = mid + Math.imul(ah9, bl6) | 0;
    hi = Math.imul(ah9, bh6);
    lo = lo + Math.imul(al8, bl7) | 0;
    mid = mid + Math.imul(al8, bh7) | 0;
    mid = mid + Math.imul(ah8, bl7) | 0;
    hi = hi + Math.imul(ah8, bh7) | 0;
    lo = lo + Math.imul(al7, bl8) | 0;
    mid = mid + Math.imul(al7, bh8) | 0;
    mid = mid + Math.imul(ah7, bl8) | 0;
    hi = hi + Math.imul(ah7, bh8) | 0;
    lo = lo + Math.imul(al6, bl9) | 0;
    mid = mid + Math.imul(al6, bh9) | 0;
    mid = mid + Math.imul(ah6, bl9) | 0;
    hi = hi + Math.imul(ah6, bh9) | 0;
    var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */

    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = mid + Math.imul(ah9, bl7) | 0;
    hi = Math.imul(ah9, bh7);
    lo = lo + Math.imul(al8, bl8) | 0;
    mid = mid + Math.imul(al8, bh8) | 0;
    mid = mid + Math.imul(ah8, bl8) | 0;
    hi = hi + Math.imul(ah8, bh8) | 0;
    lo = lo + Math.imul(al7, bl9) | 0;
    mid = mid + Math.imul(al7, bh9) | 0;
    mid = mid + Math.imul(ah7, bl9) | 0;
    hi = hi + Math.imul(ah7, bh9) | 0;
    var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */

    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = mid + Math.imul(ah9, bl8) | 0;
    hi = Math.imul(ah9, bh8);
    lo = lo + Math.imul(al8, bl9) | 0;
    mid = mid + Math.imul(al8, bh9) | 0;
    mid = mid + Math.imul(ah8, bl9) | 0;
    hi = hi + Math.imul(ah8, bh9) | 0;
    var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */

    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = mid + Math.imul(ah9, bl9) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;

    if (c !== 0) {
      o[19] = c;
      out.length++;
    }

    return out;
  }; // Polyfill comb


  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo(self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;
    var carry = 0;
    var hncarry = 0;

    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);

      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        ncarry = ncarry + (r / 0x4000000 | 0) | 0;
        lo = lo + rword | 0;
        rword = lo & 0x3ffffff;
        ncarry = ncarry + (lo >>> 26) | 0;
        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }

      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }

    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo(self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo(num, out) {
    var res;
    var len = this.length + num.length;

    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  }; // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion


  function FFTM(x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT(N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;

    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  }; // Returns binary-reversed representation of `x`


  FFTM.prototype.revBin = function revBin(x, l, N) {
    if (x === 0 || x === N - 1) return x;
    var rb = 0;

    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << l - i - 1;
      x >>= 1;
    }

    return rb;
  }; // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm


  FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;
      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];
          var ro = rtws[p + j + s];
          var io = itws[p + j + s];
          var rx = rtwdf_ * ro - itwdf_ * io;
          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;
          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;
          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;
          /* jshint maxdepth : false */

          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;
            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;

    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];
      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;
      t = iws[i];
      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b(ws, N) {
    var carry = 0;

    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
    var carry = 0;

    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);
      rws[2 * i] = carry & 0x1fff;
      carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff;
      carry = carry >>> 13;
    } // Pad with zeroes


    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub(N) {
    var ph = new Array(N);

    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp(x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);
    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);
    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);
    var rmws = out.words;
    rmws.length = N;
    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);
    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);
    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  }; // Multiply `this` by `num`


  BN.prototype.mul = function mul(num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  }; // Multiply employing FFT


  BN.prototype.mulf = function mulf(num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  }; // In-place Multiplication


  BN.prototype.imul = function imul(num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln(num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000); // Carry

    var carry = 0;

    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += w / 0x4000000 | 0; // NOTE: lo is 27bit maximum

      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln(num) {
    return this.clone().imuln(num);
  }; // `this` * `this`


  BN.prototype.sqr = function sqr() {
    return this.mul(this);
  }; // `this` * `this` in-place


  BN.prototype.isqr = function isqr() {
    return this.imul(this.clone());
  }; // Math.pow(`this`, `num`)


  BN.prototype.pow = function pow(num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1); // Skip leading zeroes

    var res = this;

    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;
        res = res.mul(q);
      }
    }

    return res;
  }; // Shift-left in-place


  BN.prototype.iushln = function iushln(bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = (this.words[i] | 0) - newCarry << r;
        this.words[i] = c | carry;
        carry = newCarry >>> 26 - r;
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln(bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  }; // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits


  BN.prototype.iushrn = function iushrn(bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;

    if (hint) {
      h = (hint - hint % 26) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
    var maskedWords = extended;
    h -= s;
    h = Math.max(0, h); // Extended mode, copy masked part

    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }

      maskedWords.length = s;
    }

    if (s === 0) {// No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;

      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;

    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = carry << 26 - r | word >>> r;
      carry = word & mask;
    } // Push carried bits as a mask


    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn(bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  }; // Shift-left


  BN.prototype.shln = function shln(bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln(bits) {
    return this.clone().iushln(bits);
  }; // Shift-right


  BN.prototype.shrn = function shrn(bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn(bits) {
    return this.clone().iushrn(bits);
  }; // Test if n bit is set


  BN.prototype.testn = function testn(bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r; // Fast case: bit is much higher than all existing words

    if (this.length <= s) return false; // Check bit and return

    var w = this.words[s];
    return !!(w & q);
  }; // Return only lowers bits of number (in-place)


  BN.prototype.imaskn = function imaskn(bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }

    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  }; // Return only lowers bits of number


  BN.prototype.maskn = function maskn(bits) {
    return this.clone().imaskn(bits);
  }; // Add plain number `num` to `this`


  BN.prototype.iaddn = function iaddn(num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num); // Possible sign change

    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    } // Add without checks


    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn(num) {
    this.words[0] += num; // Carry

    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;

      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }

    this.length = Math.max(this.length, i + 1);
    return this;
  }; // Subtract plain number `num` from `this`


  BN.prototype.isubn = function isubn(num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn(num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn(num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs() {
    this.negative = 0;
    return this;
  };

  BN.prototype.abs = function abs() {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;

    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - (right / 0x4000000 | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }

    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip(); // Subtraction overflow

    assert(carry === -1);
    carry = 0;

    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }

    this.negative = 1;
    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv(num, mode) {
    var shift = this.length - num.length;
    var a = this.clone();
    var b = num; // Normalize

    var bhi = b.words[b.length - 1] | 0;

    var bhiBits = this._countBits(bhi);

    shift = 26 - bhiBits;

    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    } // Initialize quotient


    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);

      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);

    if (diff.negative === 0) {
      a = diff;

      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0); // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)

      qj = Math.min(qj / bhi | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);

      while (a.negative !== 0) {
        qj--;
        a.negative = 0;

        a._ishlnsubmul(b, 1, j);

        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }

      if (q) {
        q.words[j] = qj;
      }
    }

    if (q) {
      q.strip();
    }

    a.strip(); // Denormalize

    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  }; // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested


  BN.prototype.divmod = function divmod(num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;

    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();

        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();

        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    } // Both numbers are positive at this point
    // Strip both numbers to approximate shift value


    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    } // Very short reduction


    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  }; // Find `this` / `num`


  BN.prototype.div = function div(num) {
    return this.divmod(num, 'div', false).div;
  }; // Find `this` % `num`


  BN.prototype.mod = function mod(num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod(num) {
    return this.divmod(num, 'mod', true).mod;
  }; // Find Round(`this` / `num`)


  BN.prototype.divRound = function divRound(num) {
    var dm = this.divmod(num); // Fast case - exact division

    if (dm.mod.isZero()) return dm.div;
    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half); // Round down

    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div; // Round up

    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn(num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;
    var acc = 0;

    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  }; // In-place division by number


  BN.prototype.idivn = function idivn(num) {
    assert(num <= 0x3ffffff);
    var carry = 0;

    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = w / num | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn(num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd(p) {
    assert(p.negative === 0);
    assert(!p.isZero());
    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    } // A * x + B * y = x


    var A = new BN(1);
    var B = new BN(0); // C * x + D * y = y

    var C = new BN(0);
    var D = new BN(1);
    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);

      if (i > 0) {
        x.iushrn(i);

        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);

      if (j > 0) {
        y.iushrn(j);

        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  }; // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed


  BN.prototype._invmp = function _invmp(p) {
    assert(p.negative === 0);
    assert(!p.isZero());
    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);
    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);

      if (i > 0) {
        a.iushrn(i);

        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);

      if (j > 0) {
        b.iushrn(j);

        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;

    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd(num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();
    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0; // Remove common factor of two

    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }

      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);

      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  }; // Invert number in the field F(num)


  BN.prototype.invm = function invm(num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven() {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd() {
    return (this.words[0] & 1) === 1;
  }; // And first word and num


  BN.prototype.andln = function andln(num) {
    return this.words[0] & num;
  }; // Increment at the bit position in-line


  BN.prototype.bincn = function bincn(bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r; // Fast case: bit is much higher than all existing words

    if (this.length <= s) {
      this._expand(s + 1);

      this.words[s] |= q;
      return this;
    } // Add bit and propagate, if needed


    var carry = q;

    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.isZero = function isZero() {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn(num) {
    var negative = num < 0;
    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;
    this.strip();
    var res;

    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');
      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }

    if (this.negative !== 0) return -res | 0;
    return res;
  }; // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`


  BN.prototype.cmp = function cmp(num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;
    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  }; // Unsigned comparison


  BN.prototype.ucmp = function ucmp(num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;
    var res = 0;

    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;
      if (a === b) continue;

      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }

      break;
    }

    return res;
  };

  BN.prototype.gtn = function gtn(num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt(num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten(num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte(num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn(num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt(num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten(num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte(num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn(num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq(num) {
    return this.cmp(num) === 0;
  }; //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //


  BN.red = function red(num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed(ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed() {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed(ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed(ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd(num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd(num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub(num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub(num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl(num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul(num) {
    assert(this.red, 'redMul works only with red numbers');

    this.red._verify2(this, num);

    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul(num) {
    assert(this.red, 'redMul works only with red numbers');

    this.red._verify2(this, num);

    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr() {
    assert(this.red, 'redSqr works only with red numbers');

    this.red._verify1(this);

    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr() {
    assert(this.red, 'redISqr works only with red numbers');

    this.red._verify1(this);

    return this.red.isqr(this);
  }; // Square root over p


  BN.prototype.redSqrt = function redSqrt() {
    assert(this.red, 'redSqrt works only with red numbers');

    this.red._verify1(this);

    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm() {
    assert(this.red, 'redInvm works only with red numbers');

    this.red._verify1(this);

    return this.red.invm(this);
  }; // Return negative clone of `this` % `red modulo`


  BN.prototype.redNeg = function redNeg() {
    assert(this.red, 'redNeg works only with red numbers');

    this.red._verify1(this);

    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow(num) {
    assert(this.red && !num.red, 'redPow(normalNum)');

    this.red._verify1(this);

    return this.red.pow(this, num);
  }; // Prime numbers with efficient reduction


  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  }; // Pseudo-Mersenne prime

  function MPrime(name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);
    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp() {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce(num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);

    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      r.strip();
    }

    return r;
  };

  MPrime.prototype.split = function split(input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK(num) {
    return num.imul(this.k);
  };

  function K256() {
    MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }

  inherits(K256, MPrime);

  K256.prototype.split = function split(input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;
    var outLen = Math.min(input.length, 9);

    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }

    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    } // Shift by 9 limbs


    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
      prev = next;
    }

    prev >>>= 22;
    input.words[i - 10] = prev;

    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK(num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2; // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390

    var lo = 0;

    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + (lo / 0x4000000 | 0);
    } // Fast length reduction


    if (num.words[num.length - 1] === 0) {
      num.length--;

      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }

    return num;
  };

  function P224() {
    MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }

  inherits(P224, MPrime);

  function P192() {
    MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }

  inherits(P192, MPrime);

  function P25519() {
    // 2 ^ 255 - 19
    MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }

  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK(num) {
    // K = 0x13
    var carry = 0;

    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;
      num.words[i] = lo;
      carry = hi;
    }

    if (carry !== 0) {
      num.words[num.length++] = carry;
    }

    return num;
  }; // Exported mostly for testing purposes, use plain name instead


  BN._prime = function prime(name) {
    // Cached version of prime
    if (primes[name]) return primes[name];
    var prime;

    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }

    primes[name] = prime;
    return prime;
  }; //
  // Base reduction engine
  //


  function Red(m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);

      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1(a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2(a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red, 'red works only with red numbers');
  };

  Red.prototype.imod = function imod(a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg(a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add(a, b) {
    this._verify2(a, b);

    var res = a.add(b);

    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }

    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd(a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);

    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }

    return res;
  };

  Red.prototype.sub = function sub(a, b) {
    this._verify2(a, b);

    var res = a.sub(b);

    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Red.prototype.isub = function isub(a, b) {
    this._verify2(a, b);

    var res = a.isub(b);

    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }

    return res;
  };

  Red.prototype.shl = function shl(a, num) {
    this._verify1(a);

    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul(a, b) {
    this._verify2(a, b);

    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul(a, b) {
    this._verify2(a, b);

    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr(a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr(a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt(a) {
    if (a.isZero()) return a.clone();
    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1); // Fast case

    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    } // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)


    var q = this.m.subn(1);
    var s = 0;

    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }

    assert(!q.isZero());
    var one = new BN(1).toRed(this);
    var nOne = one.redNeg(); // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.

    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;

    while (t.cmp(one) !== 0) {
      var tmp = t;

      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }

      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));
      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm(a) {
    var inv = a._invmp(this.m);

    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow(a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();
    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;

    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;

    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];

      for (var j = start - 1; j >= 0; j--) {
        var bit = word >> j & 1;

        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }

      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo(num) {
    var r = num.umod(this.m);
    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom(num) {
    var res = num.clone();
    res.red = null;
    return res;
  }; //
  // Montgomery method engine
  //


  BN.mont = function mont(num) {
    return new Mont(num);
  };

  function Mont(m) {
    Red.call(this, m);
    this.shift = this.m.bitLength();

    if (this.shift % 26 !== 0) {
      this.shift += 26 - this.shift % 26;
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);
    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }

  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo(num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom(num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul(a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul(a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm(a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})( false || module, void 0);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(94)(module)))

/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const encoders = exports;
encoders.der = __webpack_require__(207);
encoders.pem = __webpack_require__(428);

/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const inherits = __webpack_require__(4);

const Buffer = __webpack_require__(132).Buffer;

const Node = __webpack_require__(133); // Import DER constants


const der = __webpack_require__(135);

function DEREncoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity; // Construct base tree

  this.tree = new DERNode();

  this.tree._init(entity.body);
}

module.exports = DEREncoder;

DEREncoder.prototype.encode = function encode(data, reporter) {
  return this.tree._encode(data, reporter).join();
}; // Tree methods


function DERNode(parent) {
  Node.call(this, 'der', parent);
}

inherits(DERNode, Node);

DERNode.prototype._encodeComposite = function encodeComposite(tag, primitive, cls, content) {
  const encodedTag = encodeTag(tag, primitive, cls, this.reporter); // Short form

  if (content.length < 0x80) {
    const header = Buffer.alloc(2);
    header[0] = encodedTag;
    header[1] = content.length;
    return this._createEncoderBuffer([header, content]);
  } // Long form
  // Count octets required to store length


  let lenOctets = 1;

  for (let i = content.length; i >= 0x100; i >>= 8) lenOctets++;

  const header = Buffer.alloc(1 + 1 + lenOctets);
  header[0] = encodedTag;
  header[1] = 0x80 | lenOctets;

  for (let i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8) header[i] = j & 0xff;

  return this._createEncoderBuffer([header, content]);
};

DERNode.prototype._encodeStr = function encodeStr(str, tag) {
  if (tag === 'bitstr') {
    return this._createEncoderBuffer([str.unused | 0, str.data]);
  } else if (tag === 'bmpstr') {
    const buf = Buffer.alloc(str.length * 2);

    for (let i = 0; i < str.length; i++) {
      buf.writeUInt16BE(str.charCodeAt(i), i * 2);
    }

    return this._createEncoderBuffer(buf);
  } else if (tag === 'numstr') {
    if (!this._isNumstr(str)) {
      return this.reporter.error('Encoding of string type: numstr supports ' + 'only digits and space');
    }

    return this._createEncoderBuffer(str);
  } else if (tag === 'printstr') {
    if (!this._isPrintstr(str)) {
      return this.reporter.error('Encoding of string type: printstr supports ' + 'only latin upper and lower case letters, ' + 'digits, space, apostrophe, left and rigth ' + 'parenthesis, plus sign, comma, hyphen, ' + 'dot, slash, colon, equal sign, ' + 'question mark');
    }

    return this._createEncoderBuffer(str);
  } else if (/str$/.test(tag)) {
    return this._createEncoderBuffer(str);
  } else if (tag === 'objDesc') {
    return this._createEncoderBuffer(str);
  } else {
    return this.reporter.error('Encoding of string type: ' + tag + ' unsupported');
  }
};

DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
  if (typeof id === 'string') {
    if (!values) return this.reporter.error('string objid given, but no values map found');
    if (!values.hasOwnProperty(id)) return this.reporter.error('objid not found in values map');
    id = values[id].split(/[\s.]+/g);

    for (let i = 0; i < id.length; i++) id[i] |= 0;
  } else if (Array.isArray(id)) {
    id = id.slice();

    for (let i = 0; i < id.length; i++) id[i] |= 0;
  }

  if (!Array.isArray(id)) {
    return this.reporter.error('objid() should be either array or string, ' + 'got: ' + JSON.stringify(id));
  }

  if (!relative) {
    if (id[1] >= 40) return this.reporter.error('Second objid identifier OOB');
    id.splice(0, 2, id[0] * 40 + id[1]);
  } // Count number of octets


  let size = 0;

  for (let i = 0; i < id.length; i++) {
    let ident = id[i];

    for (size++; ident >= 0x80; ident >>= 7) size++;
  }

  const objid = Buffer.alloc(size);
  let offset = objid.length - 1;

  for (let i = id.length - 1; i >= 0; i--) {
    let ident = id[i];
    objid[offset--] = ident & 0x7f;

    while ((ident >>= 7) > 0) objid[offset--] = 0x80 | ident & 0x7f;
  }

  return this._createEncoderBuffer(objid);
};

function two(num) {
  if (num < 10) return '0' + num;else return num;
}

DERNode.prototype._encodeTime = function encodeTime(time, tag) {
  let str;
  const date = new Date(time);

  if (tag === 'gentime') {
    str = [two(date.getUTCFullYear()), two(date.getUTCMonth() + 1), two(date.getUTCDate()), two(date.getUTCHours()), two(date.getUTCMinutes()), two(date.getUTCSeconds()), 'Z'].join('');
  } else if (tag === 'utctime') {
    str = [two(date.getUTCFullYear() % 100), two(date.getUTCMonth() + 1), two(date.getUTCDate()), two(date.getUTCHours()), two(date.getUTCMinutes()), two(date.getUTCSeconds()), 'Z'].join('');
  } else {
    this.reporter.error('Encoding ' + tag + ' time is not supported yet');
  }

  return this._encodeStr(str, 'octstr');
};

DERNode.prototype._encodeNull = function encodeNull() {
  return this._createEncoderBuffer('');
};

DERNode.prototype._encodeInt = function encodeInt(num, values) {
  if (typeof num === 'string') {
    if (!values) return this.reporter.error('String int or enum given, but no values map');

    if (!values.hasOwnProperty(num)) {
      return this.reporter.error('Values map doesn\'t contain: ' + JSON.stringify(num));
    }

    num = values[num];
  } // Bignum, assume big endian


  if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
    const numArray = num.toArray();

    if (!num.sign && numArray[0] & 0x80) {
      numArray.unshift(0);
    }

    num = Buffer.from(numArray);
  }

  if (Buffer.isBuffer(num)) {
    let size = num.length;
    if (num.length === 0) size++;
    const out = Buffer.alloc(size);
    num.copy(out);
    if (num.length === 0) out[0] = 0;
    return this._createEncoderBuffer(out);
  }

  if (num < 0x80) return this._createEncoderBuffer(num);
  if (num < 0x100) return this._createEncoderBuffer([0, num]);
  let size = 1;

  for (let i = num; i >= 0x100; i >>= 8) size++;

  const out = new Array(size);

  for (let i = out.length - 1; i >= 0; i--) {
    out[i] = num & 0xff;
    num >>= 8;
  }

  if (out[0] & 0x80) {
    out.unshift(0);
  }

  return this._createEncoderBuffer(Buffer.from(out));
};

DERNode.prototype._encodeBool = function encodeBool(value) {
  return this._createEncoderBuffer(value ? 0xff : 0);
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function') entity = entity(obj);
  return entity._getEncoder('der').tree;
};

DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
  const state = this._baseState;
  let i;
  if (state['default'] === null) return false;
  const data = dataBuffer.join();
  if (state.defaultBuffer === undefined) state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();
  if (data.length !== state.defaultBuffer.length) return false;

  for (i = 0; i < data.length; i++) if (data[i] !== state.defaultBuffer[i]) return false;

  return true;
}; // Utility methods


function encodeTag(tag, primitive, cls, reporter) {
  let res;
  if (tag === 'seqof') tag = 'seq';else if (tag === 'setof') tag = 'set';
  if (der.tagByName.hasOwnProperty(tag)) res = der.tagByName[tag];else if (typeof tag === 'number' && (tag | 0) === tag) res = tag;else return reporter.error('Unknown tag: ' + tag);
  if (res >= 0x1f) return reporter.error('Multi-octet tag encoding unsupported');
  if (!primitive) res |= 0x20;
  res |= der.tagClassByName[cls || 'universal'] << 6;
  return res;
}

/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const decoders = exports;
decoders.der = __webpack_require__(209);
decoders.pem = __webpack_require__(429);

/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const inherits = __webpack_require__(4);

const bignum = __webpack_require__(205);

const DecoderBuffer = __webpack_require__(75).DecoderBuffer;

const Node = __webpack_require__(133); // Import DER constants


const der = __webpack_require__(135);

function DERDecoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity; // Construct base tree

  this.tree = new DERNode();

  this.tree._init(entity.body);
}

module.exports = DERDecoder;

DERDecoder.prototype.decode = function decode(data, options) {
  if (!DecoderBuffer.isDecoderBuffer(data)) {
    data = new DecoderBuffer(data, options);
  }

  return this.tree._decode(data, options);
}; // Tree methods


function DERNode(parent) {
  Node.call(this, 'der', parent);
}

inherits(DERNode, Node);

DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
  if (buffer.isEmpty()) return false;
  const state = buffer.save();
  const decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
  if (buffer.isError(decodedTag)) return decodedTag;
  buffer.restore(state);
  return decodedTag.tag === tag || decodedTag.tagStr === tag || decodedTag.tagStr + 'of' === tag || any;
};

DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
  const decodedTag = derDecodeTag(buffer, 'Failed to decode tag of "' + tag + '"');
  if (buffer.isError(decodedTag)) return decodedTag;
  let len = derDecodeLen(buffer, decodedTag.primitive, 'Failed to get length of "' + tag + '"'); // Failure

  if (buffer.isError(len)) return len;

  if (!any && decodedTag.tag !== tag && decodedTag.tagStr !== tag && decodedTag.tagStr + 'of' !== tag) {
    return buffer.error('Failed to match tag: "' + tag + '"');
  }

  if (decodedTag.primitive || len !== null) return buffer.skip(len, 'Failed to match body of: "' + tag + '"'); // Indefinite length... find END tag

  const state = buffer.save();

  const res = this._skipUntilEnd(buffer, 'Failed to skip indefinite length body: "' + this.tag + '"');

  if (buffer.isError(res)) return res;
  len = buffer.offset - state.offset;
  buffer.restore(state);
  return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
};

DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
  for (;;) {
    const tag = derDecodeTag(buffer, fail);
    if (buffer.isError(tag)) return tag;
    const len = derDecodeLen(buffer, tag.primitive, fail);
    if (buffer.isError(len)) return len;
    let res;
    if (tag.primitive || len !== null) res = buffer.skip(len);else res = this._skipUntilEnd(buffer, fail); // Failure

    if (buffer.isError(res)) return res;
    if (tag.tagStr === 'end') break;
  }
};

DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder, options) {
  const result = [];

  while (!buffer.isEmpty()) {
    const possibleEnd = this._peekTag(buffer, 'end');

    if (buffer.isError(possibleEnd)) return possibleEnd;
    const res = decoder.decode(buffer, 'der', options);
    if (buffer.isError(res) && possibleEnd) break;
    result.push(res);
  }

  return result;
};

DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
  if (tag === 'bitstr') {
    const unused = buffer.readUInt8();
    if (buffer.isError(unused)) return unused;
    return {
      unused: unused,
      data: buffer.raw()
    };
  } else if (tag === 'bmpstr') {
    const raw = buffer.raw();
    if (raw.length % 2 === 1) return buffer.error('Decoding of string type: bmpstr length mismatch');
    let str = '';

    for (let i = 0; i < raw.length / 2; i++) {
      str += String.fromCharCode(raw.readUInt16BE(i * 2));
    }

    return str;
  } else if (tag === 'numstr') {
    const numstr = buffer.raw().toString('ascii');

    if (!this._isNumstr(numstr)) {
      return buffer.error('Decoding of string type: ' + 'numstr unsupported characters');
    }

    return numstr;
  } else if (tag === 'octstr') {
    return buffer.raw();
  } else if (tag === 'objDesc') {
    return buffer.raw();
  } else if (tag === 'printstr') {
    const printstr = buffer.raw().toString('ascii');

    if (!this._isPrintstr(printstr)) {
      return buffer.error('Decoding of string type: ' + 'printstr unsupported characters');
    }

    return printstr;
  } else if (/str$/.test(tag)) {
    return buffer.raw().toString();
  } else {
    return buffer.error('Decoding of string type: ' + tag + ' unsupported');
  }
};

DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
  let result;
  const identifiers = [];
  let ident = 0;
  let subident = 0;

  while (!buffer.isEmpty()) {
    subident = buffer.readUInt8();
    ident <<= 7;
    ident |= subident & 0x7f;

    if ((subident & 0x80) === 0) {
      identifiers.push(ident);
      ident = 0;
    }
  }

  if (subident & 0x80) identifiers.push(ident);
  const first = identifiers[0] / 40 | 0;
  const second = identifiers[0] % 40;
  if (relative) result = identifiers;else result = [first, second].concat(identifiers.slice(1));

  if (values) {
    let tmp = values[result.join(' ')];
    if (tmp === undefined) tmp = values[result.join('.')];
    if (tmp !== undefined) result = tmp;
  }

  return result;
};

DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
  const str = buffer.raw().toString();
  let year;
  let mon;
  let day;
  let hour;
  let min;
  let sec;

  if (tag === 'gentime') {
    year = str.slice(0, 4) | 0;
    mon = str.slice(4, 6) | 0;
    day = str.slice(6, 8) | 0;
    hour = str.slice(8, 10) | 0;
    min = str.slice(10, 12) | 0;
    sec = str.slice(12, 14) | 0;
  } else if (tag === 'utctime') {
    year = str.slice(0, 2) | 0;
    mon = str.slice(2, 4) | 0;
    day = str.slice(4, 6) | 0;
    hour = str.slice(6, 8) | 0;
    min = str.slice(8, 10) | 0;
    sec = str.slice(10, 12) | 0;
    if (year < 70) year = 2000 + year;else year = 1900 + year;
  } else {
    return buffer.error('Decoding ' + tag + ' time is not supported yet');
  }

  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};

DERNode.prototype._decodeNull = function decodeNull() {
  return null;
};

DERNode.prototype._decodeBool = function decodeBool(buffer) {
  const res = buffer.readUInt8();
  if (buffer.isError(res)) return res;else return res !== 0;
};

DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
  // Bigint, return as it is (assume big endian)
  const raw = buffer.raw();
  let res = new bignum(raw);
  if (values) res = values[res.toString(10)] || res;
  return res;
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function') entity = entity(obj);
  return entity._getDecoder('der').tree;
}; // Utility methods


function derDecodeTag(buf, fail) {
  let tag = buf.readUInt8(fail);
  if (buf.isError(tag)) return tag;
  const cls = der.tagClass[tag >> 6];
  const primitive = (tag & 0x20) === 0; // Multi-octet tag - load

  if ((tag & 0x1f) === 0x1f) {
    let oct = tag;
    tag = 0;

    while ((oct & 0x80) === 0x80) {
      oct = buf.readUInt8(fail);
      if (buf.isError(oct)) return oct;
      tag <<= 7;
      tag |= oct & 0x7f;
    }
  } else {
    tag &= 0x1f;
  }

  const tagStr = der.tag[tag];
  return {
    cls: cls,
    primitive: primitive,
    tag: tag,
    tagStr: tagStr
  };
}

function derDecodeLen(buf, primitive, fail) {
  let len = buf.readUInt8(fail);
  if (buf.isError(len)) return len; // Indefinite form

  if (!primitive && len === 0x80) return null; // Definite form

  if ((len & 0x80) === 0) {
    // Short form
    return len;
  } // Long form


  const num = len & 0x7f;
  if (num > 4) return buf.error('length octect is too long');
  len = 0;

  for (let i = 0; i < num; i++) {
    len <<= 8;
    const j = buf.readUInt8(fail);
    if (buf.isError(j)) return j;
    len |= j;
  }

  return len;
}

/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const BN = __webpack_require__(131).bignum; // Convert a BN.js instance to a base64 encoded string without padding
// Adapted from https://tools.ietf.org/html/draft-ietf-jose-json-web-signature-41#appendix-C


exports.toBase64 = function toBase64(bn, len) {
  // if len is defined then the bytes are leading-0 padded to the length
  const s = bn.toArrayLike(Buffer, 'be', len).toString('base64');
  return s.replace(/(=*)$/, '') // Remove any trailing '='s
  .replace(/\+/g, '-') // 62nd char of encoding
  .replace(/\//g, '_'); // 63rd char of encoding
}; // Convert a base64 encoded string to a BN.js instance


exports.toBn = function toBn(str) {
  return new BN(Buffer.from(str, 'base64'));
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Javascript implementation of ASN.1 validators for PKCS#7 v1.5.
 *
 * @author Dave Longley
 * @author Stefan Siegl
 *
 * Copyright (c) 2012-2015 Digital Bazaar, Inc.
 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
 *
 * The ASN.1 representation of PKCS#7 is as follows
 * (see RFC #2315 for details, http://www.ietf.org/rfc/rfc2315.txt):
 *
 * A PKCS#7 message consists of a ContentInfo on root level, which may
 * contain any number of further ContentInfo nested into it.
 *
 * ContentInfo ::= SEQUENCE {
 *   contentType                ContentType,
 *   content               [0]  EXPLICIT ANY DEFINED BY contentType OPTIONAL
 * }
 *
 * ContentType ::= OBJECT IDENTIFIER
 *
 * EnvelopedData ::= SEQUENCE {
 *   version                    Version,
 *   recipientInfos             RecipientInfos,
 *   encryptedContentInfo       EncryptedContentInfo
 * }
 *
 * EncryptedData ::= SEQUENCE {
 *   version                    Version,
 *   encryptedContentInfo       EncryptedContentInfo
 * }
 *
 * id-signedData OBJECT IDENTIFIER ::= { iso(1) member-body(2)
 *   us(840) rsadsi(113549) pkcs(1) pkcs7(7) 2 }
 *
 * SignedData ::= SEQUENCE {
 *   version           INTEGER,
 *   digestAlgorithms  DigestAlgorithmIdentifiers,
 *   contentInfo       ContentInfo,
 *   certificates      [0] IMPLICIT Certificates OPTIONAL,
 *   crls              [1] IMPLICIT CertificateRevocationLists OPTIONAL,
 *   signerInfos       SignerInfos
 * }
 *
 * SignerInfos ::= SET OF SignerInfo
 *
 * SignerInfo ::= SEQUENCE {
 *   version                    Version,
 *   issuerAndSerialNumber      IssuerAndSerialNumber,
 *   digestAlgorithm            DigestAlgorithmIdentifier,
 *   authenticatedAttributes    [0] IMPLICIT Attributes OPTIONAL,
 *   digestEncryptionAlgorithm  DigestEncryptionAlgorithmIdentifier,
 *   encryptedDigest            EncryptedDigest,
 *   unauthenticatedAttributes  [1] IMPLICIT Attributes OPTIONAL
 * }
 *
 * EncryptedDigest ::= OCTET STRING
 *
 * Attributes ::= SET OF Attribute
 *
 * Attribute ::= SEQUENCE {
 *   attrType    OBJECT IDENTIFIER,
 *   attrValues  SET OF AttributeValue
 * }
 *
 * AttributeValue ::= ANY
 *
 * Version ::= INTEGER
 *
 * RecipientInfos ::= SET OF RecipientInfo
 *
 * EncryptedContentInfo ::= SEQUENCE {
 *   contentType                 ContentType,
 *   contentEncryptionAlgorithm  ContentEncryptionAlgorithmIdentifier,
 *   encryptedContent       [0]  IMPLICIT EncryptedContent OPTIONAL
 * }
 *
 * ContentEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
 *
 * The AlgorithmIdentifier contains an Object Identifier (OID) and parameters
 * for the algorithm, if any. In the case of AES and DES3, there is only one,
 * the IV.
 *
 * AlgorithmIdentifer ::= SEQUENCE {
 *    algorithm OBJECT IDENTIFIER,
 *    parameters ANY DEFINED BY algorithm OPTIONAL
 * }
 *
 * EncryptedContent ::= OCTET STRING
 *
 * RecipientInfo ::= SEQUENCE {
 *   version                     Version,
 *   issuerAndSerialNumber       IssuerAndSerialNumber,
 *   keyEncryptionAlgorithm      KeyEncryptionAlgorithmIdentifier,
 *   encryptedKey                EncryptedKey
 * }
 *
 * IssuerAndSerialNumber ::= SEQUENCE {
 *   issuer                      Name,
 *   serialNumber                CertificateSerialNumber
 * }
 *
 * CertificateSerialNumber ::= INTEGER
 *
 * KeyEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
 *
 * EncryptedKey ::= OCTET STRING
 */
var forge = __webpack_require__(7);

__webpack_require__(40);

__webpack_require__(10); // shortcut for ASN.1 API


var asn1 = forge.asn1; // shortcut for PKCS#7 API

var p7v = module.exports = forge.pkcs7asn1 = forge.pkcs7asn1 || {};
forge.pkcs7 = forge.pkcs7 || {};
forge.pkcs7.asn1 = p7v;
var contentInfoValidator = {
  name: 'ContentInfo',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    name: 'ContentInfo.ContentType',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.OID,
    constructed: false,
    capture: 'contentType'
  }, {
    name: 'ContentInfo.content',
    tagClass: asn1.Class.CONTEXT_SPECIFIC,
    type: 0,
    constructed: true,
    optional: true,
    captureAsn1: 'content'
  }]
};
p7v.contentInfoValidator = contentInfoValidator;
var encryptedContentInfoValidator = {
  name: 'EncryptedContentInfo',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    name: 'EncryptedContentInfo.contentType',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.OID,
    constructed: false,
    capture: 'contentType'
  }, {
    name: 'EncryptedContentInfo.contentEncryptionAlgorithm',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [{
      name: 'EncryptedContentInfo.contentEncryptionAlgorithm.algorithm',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.OID,
      constructed: false,
      capture: 'encAlgorithm'
    }, {
      name: 'EncryptedContentInfo.contentEncryptionAlgorithm.parameter',
      tagClass: asn1.Class.UNIVERSAL,
      captureAsn1: 'encParameter'
    }]
  }, {
    name: 'EncryptedContentInfo.encryptedContent',
    tagClass: asn1.Class.CONTEXT_SPECIFIC,
    type: 0,

    /* The PKCS#7 structure output by OpenSSL somewhat differs from what
     * other implementations do generate.
     *
     * OpenSSL generates a structure like this:
     * SEQUENCE {
     *    ...
     *    [0]
     *       26 DA 67 D2 17 9C 45 3C B1 2A A8 59 2F 29 33 38
     *       C3 C3 DF 86 71 74 7A 19 9F 40 D0 29 BE 85 90 45
     *       ...
     * }
     *
     * Whereas other implementations (and this PKCS#7 module) generate:
     * SEQUENCE {
     *    ...
     *    [0] {
     *       OCTET STRING
     *          26 DA 67 D2 17 9C 45 3C B1 2A A8 59 2F 29 33 38
     *          C3 C3 DF 86 71 74 7A 19 9F 40 D0 29 BE 85 90 45
     *          ...
     *    }
     * }
     *
     * In order to support both, we just capture the context specific
     * field here.  The OCTET STRING bit is removed below.
     */
    capture: 'encryptedContent',
    captureAsn1: 'encryptedContentAsn1'
  }]
};
p7v.envelopedDataValidator = {
  name: 'EnvelopedData',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    name: 'EnvelopedData.Version',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'version'
  }, {
    name: 'EnvelopedData.RecipientInfos',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SET,
    constructed: true,
    captureAsn1: 'recipientInfos'
  }].concat(encryptedContentInfoValidator)
};
p7v.encryptedDataValidator = {
  name: 'EncryptedData',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    name: 'EncryptedData.Version',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'version'
  }].concat(encryptedContentInfoValidator)
};
var signerValidator = {
  name: 'SignerInfo',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    name: 'SignerInfo.version',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false
  }, {
    name: 'SignerInfo.issuerAndSerialNumber',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [{
      name: 'SignerInfo.issuerAndSerialNumber.issuer',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      captureAsn1: 'issuer'
    }, {
      name: 'SignerInfo.issuerAndSerialNumber.serialNumber',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.INTEGER,
      constructed: false,
      capture: 'serial'
    }]
  }, {
    name: 'SignerInfo.digestAlgorithm',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [{
      name: 'SignerInfo.digestAlgorithm.algorithm',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.OID,
      constructed: false,
      capture: 'digestAlgorithm'
    }, {
      name: 'SignerInfo.digestAlgorithm.parameter',
      tagClass: asn1.Class.UNIVERSAL,
      constructed: false,
      captureAsn1: 'digestParameter',
      optional: true
    }]
  }, {
    name: 'SignerInfo.authenticatedAttributes',
    tagClass: asn1.Class.CONTEXT_SPECIFIC,
    type: 0,
    constructed: true,
    optional: true,
    capture: 'authenticatedAttributes'
  }, {
    name: 'SignerInfo.digestEncryptionAlgorithm',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    capture: 'signatureAlgorithm'
  }, {
    name: 'SignerInfo.encryptedDigest',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.OCTETSTRING,
    constructed: false,
    capture: 'signature'
  }, {
    name: 'SignerInfo.unauthenticatedAttributes',
    tagClass: asn1.Class.CONTEXT_SPECIFIC,
    type: 1,
    constructed: true,
    optional: true,
    capture: 'unauthenticatedAttributes'
  }]
};
p7v.signedDataValidator = {
  name: 'SignedData',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    name: 'SignedData.Version',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'version'
  }, {
    name: 'SignedData.DigestAlgorithms',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SET,
    constructed: true,
    captureAsn1: 'digestAlgorithms'
  }, contentInfoValidator, {
    name: 'SignedData.Certificates',
    tagClass: asn1.Class.CONTEXT_SPECIFIC,
    type: 0,
    optional: true,
    captureAsn1: 'certificates'
  }, {
    name: 'SignedData.CertificateRevocationLists',
    tagClass: asn1.Class.CONTEXT_SPECIFIC,
    type: 1,
    optional: true,
    captureAsn1: 'crls'
  }, {
    name: 'SignedData.SignerInfos',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SET,
    capture: 'signerInfos',
    optional: true,
    value: [signerValidator]
  }]
};
p7v.recipientInfoValidator = {
  name: 'RecipientInfo',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    name: 'RecipientInfo.version',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'version'
  }, {
    name: 'RecipientInfo.issuerAndSerial',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [{
      name: 'RecipientInfo.issuerAndSerial.issuer',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      captureAsn1: 'issuer'
    }, {
      name: 'RecipientInfo.issuerAndSerial.serialNumber',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.INTEGER,
      constructed: false,
      capture: 'serial'
    }]
  }, {
    name: 'RecipientInfo.keyEncryptionAlgorithm',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [{
      name: 'RecipientInfo.keyEncryptionAlgorithm.algorithm',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.OID,
      constructed: false,
      capture: 'encAlgorithm'
    }, {
      name: 'RecipientInfo.keyEncryptionAlgorithm.parameter',
      tagClass: asn1.Class.UNIVERSAL,
      constructed: false,
      captureAsn1: 'encParameter'
    }]
  }, {
    name: 'RecipientInfo.encryptedKey',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.OCTETSTRING,
    constructed: false,
    capture: 'encKey'
  }]
};

/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Javascript implementation of PKCS#1 PSS signature padding.
 *
 * @author Stefan Siegl
 *
 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
 */
var forge = __webpack_require__(7);

__webpack_require__(46);

__webpack_require__(10); // shortcut for PSS API


var pss = module.exports = forge.pss = forge.pss || {};
/**
 * Creates a PSS signature scheme object.
 *
 * There are several ways to provide a salt for encoding:
 *
 * 1. Specify the saltLength only and the built-in PRNG will generate it.
 * 2. Specify the saltLength and a custom PRNG with 'getBytesSync' defined that
 *   will be used.
 * 3. Specify the salt itself as a forge.util.ByteBuffer.
 *
 * @param options the options to use:
 *          md the message digest object to use, a forge md instance.
 *          mgf the mask generation function to use, a forge mgf instance.
 *          [saltLength] the length of the salt in octets.
 *          [prng] the pseudo-random number generator to use to produce a salt.
 *          [salt] the salt to use when encoding.
 *
 * @return a signature scheme object.
 */

pss.create = function (options) {
  // backwards compatibility w/legacy args: hash, mgf, sLen
  if (arguments.length === 3) {
    options = {
      md: arguments[0],
      mgf: arguments[1],
      saltLength: arguments[2]
    };
  }

  var hash = options.md;
  var mgf = options.mgf;
  var hLen = hash.digestLength;
  var salt_ = options.salt || null;

  if (typeof salt_ === 'string') {
    // assume binary-encoded string
    salt_ = forge.util.createBuffer(salt_);
  }

  var sLen;

  if ('saltLength' in options) {
    sLen = options.saltLength;
  } else if (salt_ !== null) {
    sLen = salt_.length();
  } else {
    throw new Error('Salt length not specified or specific salt not given.');
  }

  if (salt_ !== null && salt_.length() !== sLen) {
    throw new Error('Given salt length does not match length of given salt.');
  }

  var prng = options.prng || forge.random;
  var pssobj = {};
  /**
   * Encodes a PSS signature.
   *
   * This function implements EMSA-PSS-ENCODE as per RFC 3447, section 9.1.1.
   *
   * @param md the message digest object with the hash to sign.
   * @param modsBits the length of the RSA modulus in bits.
   *
   * @return the encoded message as a binary-encoded string of length
   *           ceil((modBits - 1) / 8).
   */

  pssobj.encode = function (md, modBits) {
    var i;
    var emBits = modBits - 1;
    var emLen = Math.ceil(emBits / 8);
    /* 2. Let mHash = Hash(M), an octet string of length hLen. */

    var mHash = md.digest().getBytes();
    /* 3. If emLen < hLen + sLen + 2, output "encoding error" and stop. */

    if (emLen < hLen + sLen + 2) {
      throw new Error('Message is too long to encrypt.');
    }
    /* 4. Generate a random octet string salt of length sLen; if sLen = 0,
     *    then salt is the empty string. */


    var salt;

    if (salt_ === null) {
      salt = prng.getBytesSync(sLen);
    } else {
      salt = salt_.bytes();
    }
    /* 5. Let M' = (0x)00 00 00 00 00 00 00 00 || mHash || salt; */


    var m_ = new forge.util.ByteBuffer();
    m_.fillWithByte(0, 8);
    m_.putBytes(mHash);
    m_.putBytes(salt);
    /* 6. Let H = Hash(M'), an octet string of length hLen. */

    hash.start();
    hash.update(m_.getBytes());
    var h = hash.digest().getBytes();
    /* 7. Generate an octet string PS consisting of emLen - sLen - hLen - 2
     *    zero octets.  The length of PS may be 0. */

    var ps = new forge.util.ByteBuffer();
    ps.fillWithByte(0, emLen - sLen - hLen - 2);
    /* 8. Let DB = PS || 0x01 || salt; DB is an octet string of length
     *    emLen - hLen - 1. */

    ps.putByte(0x01);
    ps.putBytes(salt);
    var db = ps.getBytes();
    /* 9. Let dbMask = MGF(H, emLen - hLen - 1). */

    var maskLen = emLen - hLen - 1;
    var dbMask = mgf.generate(h, maskLen);
    /* 10. Let maskedDB = DB \xor dbMask. */

    var maskedDB = '';

    for (i = 0; i < maskLen; i++) {
      maskedDB += String.fromCharCode(db.charCodeAt(i) ^ dbMask.charCodeAt(i));
    }
    /* 11. Set the leftmost 8emLen - emBits bits of the leftmost octet in
     *     maskedDB to zero. */


    var mask = 0xFF00 >> 8 * emLen - emBits & 0xFF;
    maskedDB = String.fromCharCode(maskedDB.charCodeAt(0) & ~mask) + maskedDB.substr(1);
    /* 12. Let EM = maskedDB || H || 0xbc.
     * 13. Output EM. */

    return maskedDB + h + String.fromCharCode(0xbc);
  };
  /**
   * Verifies a PSS signature.
   *
   * This function implements EMSA-PSS-VERIFY as per RFC 3447, section 9.1.2.
   *
   * @param mHash the message digest hash, as a binary-encoded string, to
   *         compare against the signature.
   * @param em the encoded message, as a binary-encoded string
   *          (RSA decryption result).
   * @param modsBits the length of the RSA modulus in bits.
   *
   * @return true if the signature was verified, false if not.
   */


  pssobj.verify = function (mHash, em, modBits) {
    var i;
    var emBits = modBits - 1;
    var emLen = Math.ceil(emBits / 8);
    /* c. Convert the message representative m to an encoded message EM
     *    of length emLen = ceil((modBits - 1) / 8) octets, where modBits
     *    is the length in bits of the RSA modulus n */

    em = em.substr(-emLen);
    /* 3. If emLen < hLen + sLen + 2, output "inconsistent" and stop. */

    if (emLen < hLen + sLen + 2) {
      throw new Error('Inconsistent parameters to PSS signature verification.');
    }
    /* 4. If the rightmost octet of EM does not have hexadecimal value
     *    0xbc, output "inconsistent" and stop. */


    if (em.charCodeAt(emLen - 1) !== 0xbc) {
      throw new Error('Encoded message does not end in 0xBC.');
    }
    /* 5. Let maskedDB be the leftmost emLen - hLen - 1 octets of EM, and
     *    let H be the next hLen octets. */


    var maskLen = emLen - hLen - 1;
    var maskedDB = em.substr(0, maskLen);
    var h = em.substr(maskLen, hLen);
    /* 6. If the leftmost 8emLen - emBits bits of the leftmost octet in
     *    maskedDB are not all equal to zero, output "inconsistent" and stop. */

    var mask = 0xFF00 >> 8 * emLen - emBits & 0xFF;

    if ((maskedDB.charCodeAt(0) & mask) !== 0) {
      throw new Error('Bits beyond keysize not zero as expected.');
    }
    /* 7. Let dbMask = MGF(H, emLen - hLen - 1). */


    var dbMask = mgf.generate(h, maskLen);
    /* 8. Let DB = maskedDB \xor dbMask. */

    var db = '';

    for (i = 0; i < maskLen; i++) {
      db += String.fromCharCode(maskedDB.charCodeAt(i) ^ dbMask.charCodeAt(i));
    }
    /* 9. Set the leftmost 8emLen - emBits bits of the leftmost octet
     * in DB to zero. */


    db = String.fromCharCode(db.charCodeAt(0) & ~mask) + db.substr(1);
    /* 10. If the emLen - hLen - sLen - 2 leftmost octets of DB are not zero
     * or if the octet at position emLen - hLen - sLen - 1 (the leftmost
     * position is "position 1") does not have hexadecimal value 0x01,
     * output "inconsistent" and stop. */

    var checkLen = emLen - hLen - sLen - 2;

    for (i = 0; i < checkLen; i++) {
      if (db.charCodeAt(i) !== 0x00) {
        throw new Error('Leftmost octets not zero as expected');
      }
    }

    if (db.charCodeAt(checkLen) !== 0x01) {
      throw new Error('Inconsistent PSS signature, 0x01 marker not found');
    }
    /* 11. Let salt be the last sLen octets of DB. */


    var salt = db.substr(-sLen);
    /* 12.  Let M' = (0x)00 00 00 00 00 00 00 00 || mHash || salt */

    var m_ = new forge.util.ByteBuffer();
    m_.fillWithByte(0, 8);
    m_.putBytes(mHash);
    m_.putBytes(salt);
    /* 13. Let H' = Hash(M'), an octet string of length hLen. */

    hash.start();
    hash.update(m_.getBytes());
    var h_ = hash.digest().getBytes();
    /* 14. If H = H', output "consistent." Otherwise, output "inconsistent." */

    return h === h_;
  };

  return pssobj;
};

/***/ }),
/* 213 */
/***/ (function(module) {

module.exports = JSON.parse("{\"COMPRESSED_TYPE_INVALID\":\"compressed should be a boolean\",\"EC_PRIVATE_KEY_TYPE_INVALID\":\"private key should be a Buffer\",\"EC_PRIVATE_KEY_LENGTH_INVALID\":\"private key length is invalid\",\"EC_PRIVATE_KEY_RANGE_INVALID\":\"private key range is invalid\",\"EC_PRIVATE_KEY_TWEAK_ADD_FAIL\":\"tweak out of range or resulting private key is invalid\",\"EC_PRIVATE_KEY_TWEAK_MUL_FAIL\":\"tweak out of range\",\"EC_PRIVATE_KEY_EXPORT_DER_FAIL\":\"couldn't export to DER format\",\"EC_PRIVATE_KEY_IMPORT_DER_FAIL\":\"couldn't import from DER format\",\"EC_PUBLIC_KEYS_TYPE_INVALID\":\"public keys should be an Array\",\"EC_PUBLIC_KEYS_LENGTH_INVALID\":\"public keys Array should have at least 1 element\",\"EC_PUBLIC_KEY_TYPE_INVALID\":\"public key should be a Buffer\",\"EC_PUBLIC_KEY_LENGTH_INVALID\":\"public key length is invalid\",\"EC_PUBLIC_KEY_PARSE_FAIL\":\"the public key could not be parsed or is invalid\",\"EC_PUBLIC_KEY_CREATE_FAIL\":\"private was invalid, try again\",\"EC_PUBLIC_KEY_TWEAK_ADD_FAIL\":\"tweak out of range or resulting public key is invalid\",\"EC_PUBLIC_KEY_TWEAK_MUL_FAIL\":\"tweak out of range\",\"EC_PUBLIC_KEY_COMBINE_FAIL\":\"the sum of the public keys is not valid\",\"ECDH_FAIL\":\"scalar was invalid (zero or overflow)\",\"ECDSA_SIGNATURE_TYPE_INVALID\":\"signature should be a Buffer\",\"ECDSA_SIGNATURE_LENGTH_INVALID\":\"signature length is invalid\",\"ECDSA_SIGNATURE_PARSE_FAIL\":\"couldn't parse signature\",\"ECDSA_SIGNATURE_PARSE_DER_FAIL\":\"couldn't parse DER signature\",\"ECDSA_SIGNATURE_SERIALIZE_DER_FAIL\":\"couldn't serialize signature to DER format\",\"ECDSA_SIGN_FAIL\":\"nonce generation function failed or private key is invalid\",\"ECDSA_RECOVER_FAIL\":\"couldn't recover public key from signature\",\"MSG32_TYPE_INVALID\":\"message should be a Buffer\",\"MSG32_LENGTH_INVALID\":\"message length is invalid\",\"OPTIONS_TYPE_INVALID\":\"options should be an Object\",\"OPTIONS_DATA_TYPE_INVALID\":\"options.data should be a Buffer\",\"OPTIONS_DATA_LENGTH_INVALID\":\"options.data length is invalid\",\"OPTIONS_NONCEFN_TYPE_INVALID\":\"options.noncefn should be a Function\",\"RECOVERY_ID_TYPE_INVALID\":\"recovery should be a Number\",\"RECOVERY_ID_VALUE_INVALID\":\"recovery should have value between -1 and 4\",\"TWEAK_TYPE_INVALID\":\"tweak should be a Buffer\",\"TWEAK_LENGTH_INVALID\":\"tweak length is invalid\"}");

/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Buffer = __webpack_require__(6).Buffer;

var Transform = __webpack_require__(215).Transform;

var inherits = __webpack_require__(4);

function throwIfNotStringOrBuffer(val, prefix) {
  if (!Buffer.isBuffer(val) && typeof val !== 'string') {
    throw new TypeError(prefix + ' must be a string or a buffer');
  }
}

function HashBase(blockSize) {
  Transform.call(this);
  this._block = Buffer.allocUnsafe(blockSize);
  this._blockSize = blockSize;
  this._blockOffset = 0;
  this._length = [0, 0, 0, 0];
  this._finalized = false;
}

inherits(HashBase, Transform);

HashBase.prototype._transform = function (chunk, encoding, callback) {
  var error = null;

  try {
    this.update(chunk, encoding);
  } catch (err) {
    error = err;
  }

  callback(error);
};

HashBase.prototype._flush = function (callback) {
  var error = null;

  try {
    this.push(this.digest());
  } catch (err) {
    error = err;
  }

  callback(error);
};

HashBase.prototype.update = function (data, encoding) {
  throwIfNotStringOrBuffer(data, 'Data');
  if (this._finalized) throw new Error('Digest already called');
  if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding); // consume data

  var block = this._block;
  var offset = 0;

  while (this._blockOffset + data.length - offset >= this._blockSize) {
    for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++];

    this._update();

    this._blockOffset = 0;
  }

  while (offset < data.length) block[this._blockOffset++] = data[offset++]; // update length


  for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
    this._length[j] += carry;
    carry = this._length[j] / 0x0100000000 | 0;
    if (carry > 0) this._length[j] -= 0x0100000000 * carry;
  }

  return this;
};

HashBase.prototype._update = function () {
  throw new Error('_update is not implemented');
};

HashBase.prototype.digest = function (encoding) {
  if (this._finalized) throw new Error('Digest already called');
  this._finalized = true;

  var digest = this._digest();

  if (encoding !== undefined) digest = digest.toString(encoding); // reset state

  this._block.fill(0);

  this._blockOffset = 0;

  for (var i = 0; i < 4; ++i) this._length[i] = 0;

  return digest;
};

HashBase.prototype._digest = function () {
  throw new Error('_digest is not implemented');
};

module.exports = HashBase;

/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
module.exports = Stream;

var EE = __webpack_require__(11).EventEmitter;

var inherits = __webpack_require__(4);

inherits(Stream, EE);
Stream.Readable = __webpack_require__(137);
Stream.Writable = __webpack_require__(455);
Stream.Duplex = __webpack_require__(456);
Stream.Transform = __webpack_require__(457);
Stream.PassThrough = __webpack_require__(458); // Backwards-compat with node 0.4.x

Stream.Stream = Stream; // old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function (dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain); // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.

  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;

  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;
    dest.end();
  }

  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;
    if (typeof dest.destroy === 'function') dest.destroy();
  } // don't leave dangling pipes when there are errors.


  function onerror(er) {
    cleanup();

    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror); // remove all the event listeners that were added.

  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);
    source.removeListener('end', onend);
    source.removeListener('close', onclose);
    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);
    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);
    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);
  dest.on('close', cleanup);
  dest.emit('pipe', source); // Allow for unix-like usage: A.pipe(B).pipe(C)

  return dest;
};

/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

/*<replacement>*/

var pna = __webpack_require__(96);
/*</replacement>*/


module.exports = Readable;
/*<replacement>*/

var isArray = __webpack_require__(196);
/*</replacement>*/

/*<replacement>*/


var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;
/*<replacement>*/

var EE = __webpack_require__(11).EventEmitter;

var EElistenerCount = function EElistenerCount(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/


var Stream = __webpack_require__(217);
/*</replacement>*/

/*<replacement>*/


var Buffer = __webpack_require__(138).Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/

/*<replacement>*/


var util = Object.create(__webpack_require__(76));
util.inherits = __webpack_require__(4);
/*</replacement>*/

/*<replacement>*/

var debugUtil = __webpack_require__(451);

var debug = void 0;

if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function debug() {};
}
/*</replacement>*/


var BufferList = __webpack_require__(452);

var destroyImpl = __webpack_require__(218);

var StringDecoder;
util.inherits(Readable, Stream);
var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.

  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream) {
  Duplex = Duplex || __webpack_require__(48);
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.

  var isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"

  var hwm = options.highWaterMark;
  var readableHwm = options.readableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm; // cast to ints.

  this.highWaterMark = Math.floor(this.highWaterMark); // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()

  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.

  this.sync = true; // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.

  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false; // has it been destroyed

  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

  this.readingMore = false;
  this.decoder = null;
  this.encoding = null;

  if (options.encoding) {
    if (!StringDecoder) StringDecoder = __webpack_require__(77).StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || __webpack_require__(48);
  if (!(this instanceof Readable)) return new Readable(options);
  this._readableState = new ReadableState(options, this); // legacy

  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function get() {
    if (this._readableState === undefined) {
      return false;
    }

    return this._readableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
  }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;

Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.


Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;

      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }

      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()


Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;

  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);

    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;

        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
    if (state.needReadable) emitReadable(stream);
  }

  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;

  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }

  return er;
} // if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.


function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
}; // backwards compatibility.


Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = __webpack_require__(77).StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
}; // Don't raise the hwm > 8MB


var MAX_HWM = 0x800000;

function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }

  return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.


function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;

  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  } // If we're asking for more than the current hwm, then raise the hwm.


  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n; // Don't have enough

  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }

  return state.length;
} // you can override either this method, or the async _read(n) below.


Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;
  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.

  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  } // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.
  // if we need a readable event, then we need to do some reading.


  var doRead = state.needReadable;
  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  } // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.


  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true; // if the length is currently zero, then we *need* a readable event.

    if (state.length === 0) state.needReadable = true; // call internal read method

    this._read(state.highWaterMark);

    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.

    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);
  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;

  if (state.decoder) {
    var chunk = state.decoder.end();

    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }

  state.ended = true; // emit 'readable' now to make sure it gets picked up.

  emitReadable(stream);
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.


function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;

  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.


function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    pna.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;

  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length) // didn't get any data, stop spinning.
      break;else len = state.length;
  }

  state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.


Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;

    case 1:
      state.pipes = [state.pipes, dest];
      break;

    default:
      state.pipes.push(dest);
      break;
  }

  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);
  dest.on('unpipe', onunpipe);

  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');

    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  } // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.


  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);
  var cleanedUp = false;

  function cleanup() {
    debug('cleanup'); // cleanup event handlers once the pipe is broken

    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);
    cleanedUp = true; // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.

    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  } // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.


  var increasedAwaitDrain = false;
  src.on('data', ondata);

  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);

    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }

      src.pause();
    }
  } // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.


  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  } // Make sure our error handler is attached before userland ones.


  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }

  dest.once('close', onclose);

  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }

  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  } // tell the dest that it's being piped to


  dest.emit('pipe', src); // start the flow if it hasn't been started already.

  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;

    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = {
    hasUnpiped: false
  }; // if we're not piping anywhere, then do nothing.

  if (state.pipesCount === 0) return this; // just one destination.  most common case.

  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;
    if (!dest) dest = state.pipes; // got a match.

    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  } // slow case. multiple pipe destinations.


  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }

    return this;
  } // try to find the right one.


  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;
  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];
  dest.emit('unpipe', this, unpipeInfo);
  return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something


Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;

    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;

      if (!state.reading) {
        pna.nextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};

Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.


Readable.prototype.resume = function () {
  var state = this._readableState;

  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }

  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    pna.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);

  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }

  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);

  while (state.flowing && stream.read() !== null) {}
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.


Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;
  stream.on('end', function () {
    debug('wrapped end');

    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });
  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);

    if (!ret) {
      paused = true;
      stream.pause();
    }
  }); // proxy all the other methods.
  // important when wrapping filters and duplexes.

  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  } // proxy certain important events.


  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  } // when we try to consume some more bytes, simply unpause the
  // underlying stream.


  this._read = function (n) {
    debug('wrapped _read', n);

    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.highWaterMark;
  }
}); // exposed for testing purposes only.

Readable._fromList = fromList; // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.

function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;
  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }
  return ret;
} // Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.


function fromListPartial(n, list, hasStrings) {
  var ret;

  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }

  return ret;
} // Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.


function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;

  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;

    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }

      break;
    }

    ++c;
  }

  list.length -= c;
  return ret;
} // Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.


function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;

  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;

    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }

      break;
    }

    ++c;
  }

  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState; // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.

  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    pna.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }

  return -1;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(8), __webpack_require__(5)))

/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(11).EventEmitter;

/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*<replacement>*/

var pna = __webpack_require__(96);
/*</replacement>*/
// undocumented cb() API, needed for core, not for public API


function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      pna.nextTick(emitErrorNT, this, err);
    }

    return this;
  } // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks


  if (this._readableState) {
    this._readableState.destroyed = true;
  } // if this is a duplex stream mark the writable part as destroyed as well


  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      pna.nextTick(emitErrorNT, _this, err);

      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });

  return this;
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};

/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

/**
 * Module exports.
 */
module.exports = deprecate;
/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate(fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;

  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }

      warned = true;
    }

    return fn.apply(this, arguments);
  }

  return deprecated;
}
/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */


function config(name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }

  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(8)))

/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.


module.exports = Transform;

var Duplex = __webpack_require__(48);
/*<replacement>*/


var util = Object.create(__webpack_require__(76));
util.inherits = __webpack_require__(4);
/*</replacement>*/

util.inherits(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;
  var cb = ts.writecb;

  if (!cb) {
    return this.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;
  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);
  cb(er);
  var rs = this._readableState;
  rs.reading = false;

  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);
  Duplex.call(this, options);
  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  }; // start out asking for a readable event once data is transformed.

  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.

  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;
    if (typeof options.flush === 'function') this._flush = options.flush;
  } // When the writable side finishes, then flush out anything remaining.


  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function') {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.


Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;

  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.


Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;

    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this2 = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);

    _this2.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);
  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data); // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided

  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');
  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');
  return stream.push(null);
}

/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Buffer = __webpack_require__(0).Buffer;

var inherits = __webpack_require__(4);

var HashBase = __webpack_require__(214);

var ARRAY16 = new Array(16);
var zl = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];
var zr = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];
var sl = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];
var sr = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];
var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e];
var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000];

function RIPEMD160() {
  HashBase.call(this, 64); // state

  this._a = 0x67452301;
  this._b = 0xefcdab89;
  this._c = 0x98badcfe;
  this._d = 0x10325476;
  this._e = 0xc3d2e1f0;
}

inherits(RIPEMD160, HashBase);

RIPEMD160.prototype._update = function () {
  var words = ARRAY16;

  for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4);

  var al = this._a | 0;
  var bl = this._b | 0;
  var cl = this._c | 0;
  var dl = this._d | 0;
  var el = this._e | 0;
  var ar = this._a | 0;
  var br = this._b | 0;
  var cr = this._c | 0;
  var dr = this._d | 0;
  var er = this._e | 0; // computation

  for (var i = 0; i < 80; i += 1) {
    var tl;
    var tr;

    if (i < 16) {
      tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i]);
      tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i]);
    } else if (i < 32) {
      tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i]);
      tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i]);
    } else if (i < 48) {
      tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i]);
      tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i]);
    } else if (i < 64) {
      tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i]);
      tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i]);
    } else {
      // if (i<80) {
      tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i]);
      tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i]);
    }

    al = el;
    el = dl;
    dl = rotl(cl, 10);
    cl = bl;
    bl = tl;
    ar = er;
    er = dr;
    dr = rotl(cr, 10);
    cr = br;
    br = tr;
  } // update state


  var t = this._b + cl + dr | 0;
  this._b = this._c + dl + er | 0;
  this._c = this._d + el + ar | 0;
  this._d = this._e + al + br | 0;
  this._e = this._a + bl + cr | 0;
  this._a = t;
};

RIPEMD160.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80;

  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64);

    this._update();

    this._blockOffset = 0;
  }

  this._block.fill(0, this._blockOffset, 56);

  this._block.writeUInt32LE(this._length[0], 56);

  this._block.writeUInt32LE(this._length[1], 60);

  this._update(); // produce result


  var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20);
  buffer.writeInt32LE(this._a, 0);
  buffer.writeInt32LE(this._b, 4);
  buffer.writeInt32LE(this._c, 8);
  buffer.writeInt32LE(this._d, 12);
  buffer.writeInt32LE(this._e, 16);
  return buffer;
};

function rotl(x, n) {
  return x << n | x >>> 32 - n;
}

function fn1(a, b, c, d, e, m, k, s) {
  return rotl(a + (b ^ c ^ d) + m + k | 0, s) + e | 0;
}

function fn2(a, b, c, d, e, m, k, s) {
  return rotl(a + (b & c | ~b & d) + m + k | 0, s) + e | 0;
}

function fn3(a, b, c, d, e, m, k, s) {
  return rotl(a + ((b | ~c) ^ d) + m + k | 0, s) + e | 0;
}

function fn4(a, b, c, d, e, m, k, s) {
  return rotl(a + (b & d | c & ~d) + m + k | 0, s) + e | 0;
}

function fn5(a, b, c, d, e, m, k, s) {
  return rotl(a + (b ^ (c | ~d)) + m + k | 0, s) + e | 0;
}

module.exports = RIPEMD160;

/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _exports = module.exports = function SHA(algorithm) {
  algorithm = algorithm.toLowerCase();
  var Algorithm = _exports[algorithm];
  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)');
  return new Algorithm();
};

_exports.sha = __webpack_require__(459);
_exports.sha1 = __webpack_require__(460);
_exports.sha224 = __webpack_require__(461);
_exports.sha256 = __webpack_require__(223);
_exports.sha384 = __webpack_require__(462);
_exports.sha512 = __webpack_require__(224);

/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */
var inherits = __webpack_require__(4);

var Hash = __webpack_require__(54);

var Buffer = __webpack_require__(6).Buffer;

var K = [0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5, 0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5, 0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3, 0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174, 0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC, 0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA, 0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7, 0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967, 0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13, 0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85, 0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3, 0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070, 0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5, 0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3, 0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208, 0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2];
var W = new Array(64);

function Sha256() {
  this.init();
  this._w = W; // new Array(64)

  Hash.call(this, 64, 56);
}

inherits(Sha256, Hash);

Sha256.prototype.init = function () {
  this._a = 0x6a09e667;
  this._b = 0xbb67ae85;
  this._c = 0x3c6ef372;
  this._d = 0xa54ff53a;
  this._e = 0x510e527f;
  this._f = 0x9b05688c;
  this._g = 0x1f83d9ab;
  this._h = 0x5be0cd19;
  return this;
};

function ch(x, y, z) {
  return z ^ x & (y ^ z);
}

function maj(x, y, z) {
  return x & y | z & (x | y);
}

function sigma0(x) {
  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10);
}

function sigma1(x) {
  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7);
}

function gamma0(x) {
  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ x >>> 3;
}

function gamma1(x) {
  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ x >>> 10;
}

Sha256.prototype._update = function (M) {
  var W = this._w;
  var a = this._a | 0;
  var b = this._b | 0;
  var c = this._c | 0;
  var d = this._d | 0;
  var e = this._e | 0;
  var f = this._f | 0;
  var g = this._g | 0;
  var h = this._h | 0;

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4);

  for (; i < 64; ++i) W[i] = gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16] | 0;

  for (var j = 0; j < 64; ++j) {
    var T1 = h + sigma1(e) + ch(e, f, g) + K[j] + W[j] | 0;
    var T2 = sigma0(a) + maj(a, b, c) | 0;
    h = g;
    g = f;
    f = e;
    e = d + T1 | 0;
    d = c;
    c = b;
    b = a;
    a = T1 + T2 | 0;
  }

  this._a = a + this._a | 0;
  this._b = b + this._b | 0;
  this._c = c + this._c | 0;
  this._d = d + this._d | 0;
  this._e = e + this._e | 0;
  this._f = f + this._f | 0;
  this._g = g + this._g | 0;
  this._h = h + this._h | 0;
};

Sha256.prototype._hash = function () {
  var H = Buffer.allocUnsafe(32);
  H.writeInt32BE(this._a, 0);
  H.writeInt32BE(this._b, 4);
  H.writeInt32BE(this._c, 8);
  H.writeInt32BE(this._d, 12);
  H.writeInt32BE(this._e, 16);
  H.writeInt32BE(this._f, 20);
  H.writeInt32BE(this._g, 24);
  H.writeInt32BE(this._h, 28);
  return H;
};

module.exports = Sha256;

/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(4);

var Hash = __webpack_require__(54);

var Buffer = __webpack_require__(6).Buffer;

var K = [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817];
var W = new Array(160);

function Sha512() {
  this.init();
  this._w = W;
  Hash.call(this, 128, 112);
}

inherits(Sha512, Hash);

Sha512.prototype.init = function () {
  this._ah = 0x6a09e667;
  this._bh = 0xbb67ae85;
  this._ch = 0x3c6ef372;
  this._dh = 0xa54ff53a;
  this._eh = 0x510e527f;
  this._fh = 0x9b05688c;
  this._gh = 0x1f83d9ab;
  this._hh = 0x5be0cd19;
  this._al = 0xf3bcc908;
  this._bl = 0x84caa73b;
  this._cl = 0xfe94f82b;
  this._dl = 0x5f1d36f1;
  this._el = 0xade682d1;
  this._fl = 0x2b3e6c1f;
  this._gl = 0xfb41bd6b;
  this._hl = 0x137e2179;
  return this;
};

function Ch(x, y, z) {
  return z ^ x & (y ^ z);
}

function maj(x, y, z) {
  return x & y | z & (x | y);
}

function sigma0(x, xl) {
  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25);
}

function sigma1(x, xl) {
  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23);
}

function Gamma0(x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ x >>> 7;
}

function Gamma0l(x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25);
}

function Gamma1(x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ x >>> 6;
}

function Gamma1l(x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26);
}

function getCarry(a, b) {
  return a >>> 0 < b >>> 0 ? 1 : 0;
}

Sha512.prototype._update = function (M) {
  var W = this._w;
  var ah = this._ah | 0;
  var bh = this._bh | 0;
  var ch = this._ch | 0;
  var dh = this._dh | 0;
  var eh = this._eh | 0;
  var fh = this._fh | 0;
  var gh = this._gh | 0;
  var hh = this._hh | 0;
  var al = this._al | 0;
  var bl = this._bl | 0;
  var cl = this._cl | 0;
  var dl = this._dl | 0;
  var el = this._el | 0;
  var fl = this._fl | 0;
  var gl = this._gl | 0;
  var hl = this._hl | 0;

  for (var i = 0; i < 32; i += 2) {
    W[i] = M.readInt32BE(i * 4);
    W[i + 1] = M.readInt32BE(i * 4 + 4);
  }

  for (; i < 160; i += 2) {
    var xh = W[i - 15 * 2];
    var xl = W[i - 15 * 2 + 1];
    var gamma0 = Gamma0(xh, xl);
    var gamma0l = Gamma0l(xl, xh);
    xh = W[i - 2 * 2];
    xl = W[i - 2 * 2 + 1];
    var gamma1 = Gamma1(xh, xl);
    var gamma1l = Gamma1l(xl, xh); // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]

    var Wi7h = W[i - 7 * 2];
    var Wi7l = W[i - 7 * 2 + 1];
    var Wi16h = W[i - 16 * 2];
    var Wi16l = W[i - 16 * 2 + 1];
    var Wil = gamma0l + Wi7l | 0;
    var Wih = gamma0 + Wi7h + getCarry(Wil, gamma0l) | 0;
    Wil = Wil + gamma1l | 0;
    Wih = Wih + gamma1 + getCarry(Wil, gamma1l) | 0;
    Wil = Wil + Wi16l | 0;
    Wih = Wih + Wi16h + getCarry(Wil, Wi16l) | 0;
    W[i] = Wih;
    W[i + 1] = Wil;
  }

  for (var j = 0; j < 160; j += 2) {
    Wih = W[j];
    Wil = W[j + 1];
    var majh = maj(ah, bh, ch);
    var majl = maj(al, bl, cl);
    var sigma0h = sigma0(ah, al);
    var sigma0l = sigma0(al, ah);
    var sigma1h = sigma1(eh, el);
    var sigma1l = sigma1(el, eh); // t1 = h + sigma1 + ch + K[j] + W[j]

    var Kih = K[j];
    var Kil = K[j + 1];
    var chh = Ch(eh, fh, gh);
    var chl = Ch(el, fl, gl);
    var t1l = hl + sigma1l | 0;
    var t1h = hh + sigma1h + getCarry(t1l, hl) | 0;
    t1l = t1l + chl | 0;
    t1h = t1h + chh + getCarry(t1l, chl) | 0;
    t1l = t1l + Kil | 0;
    t1h = t1h + Kih + getCarry(t1l, Kil) | 0;
    t1l = t1l + Wil | 0;
    t1h = t1h + Wih + getCarry(t1l, Wil) | 0; // t2 = sigma0 + maj

    var t2l = sigma0l + majl | 0;
    var t2h = sigma0h + majh + getCarry(t2l, sigma0l) | 0;
    hh = gh;
    hl = gl;
    gh = fh;
    gl = fl;
    fh = eh;
    fl = el;
    el = dl + t1l | 0;
    eh = dh + t1h + getCarry(el, dl) | 0;
    dh = ch;
    dl = cl;
    ch = bh;
    cl = bl;
    bh = ah;
    bl = al;
    al = t1l + t2l | 0;
    ah = t1h + t2h + getCarry(al, t1l) | 0;
  }

  this._al = this._al + al | 0;
  this._bl = this._bl + bl | 0;
  this._cl = this._cl + cl | 0;
  this._dl = this._dl + dl | 0;
  this._el = this._el + el | 0;
  this._fl = this._fl + fl | 0;
  this._gl = this._gl + gl | 0;
  this._hl = this._hl + hl | 0;
  this._ah = this._ah + ah + getCarry(this._al, al) | 0;
  this._bh = this._bh + bh + getCarry(this._bl, bl) | 0;
  this._ch = this._ch + ch + getCarry(this._cl, cl) | 0;
  this._dh = this._dh + dh + getCarry(this._dl, dl) | 0;
  this._eh = this._eh + eh + getCarry(this._el, el) | 0;
  this._fh = this._fh + fh + getCarry(this._fl, fl) | 0;
  this._gh = this._gh + gh + getCarry(this._gl, gl) | 0;
  this._hh = this._hh + hh + getCarry(this._hl, hl) | 0;
};

Sha512.prototype._hash = function () {
  var H = Buffer.allocUnsafe(64);

  function writeInt64BE(h, l, offset) {
    H.writeInt32BE(h, offset);
    H.writeInt32BE(l, offset + 4);
  }

  writeInt64BE(this._ah, this._al, 0);
  writeInt64BE(this._bh, this._bl, 8);
  writeInt64BE(this._ch, this._cl, 16);
  writeInt64BE(this._dh, this._dl, 24);
  writeInt64BE(this._eh, this._el, 32);
  writeInt64BE(this._fh, this._fl, 40);
  writeInt64BE(this._gh, this._gl, 48);
  writeInt64BE(this._hh, this._hl, 56);
  return H;
};

module.exports = Sha512;

/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Buffer = __webpack_require__(6).Buffer;

var BN = __webpack_require__(97);

var ECJPoint = __webpack_require__(226);

function ECPoint(x, y) {
  if (x === null && y === null) {
    this.x = this.y = null;
    this.inf = true;
  } else {
    this.x = x;
    this.y = y;
    this.inf = false;
  }
}

ECPoint.fromPublicKey = function (publicKey) {
  var first = publicKey[0];
  var x;
  var y;

  if (publicKey.length === 33 && (first === 0x02 || first === 0x03)) {
    x = BN.fromBuffer(publicKey.slice(1, 33)); // overflow

    if (x.ucmp(BN.p) >= 0) return null; // create from X

    y = x.redSqr().redMul(x).redIAdd7().redSqrt();
    if (y === null) return null;
    if (first === 0x03 !== y.isOdd()) y = y.redNeg();
    return new ECPoint(x, y);
  }

  if (publicKey.length === 65 && (first === 0x04 || first === 0x06 || first === 0x07)) {
    x = BN.fromBuffer(publicKey.slice(1, 33));
    y = BN.fromBuffer(publicKey.slice(33, 65)); // overflow

    if (x.ucmp(BN.p) >= 0 || y.ucmp(BN.p) >= 0) return null; // is odd flag

    if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null; // x*x*x + 7 = y*y

    if (x.redSqr().redMul(x).redIAdd7().ucmp(y.redSqr()) !== 0) return null;
    return new ECPoint(x, y);
  }

  return null;
};

ECPoint.prototype.toPublicKey = function (compressed) {
  var x = this.x;
  var y = this.y;
  var publicKey;

  if (compressed) {
    publicKey = Buffer.alloc(33);
    publicKey[0] = y.isOdd() ? 0x03 : 0x02;
    x.toBuffer().copy(publicKey, 1);
  } else {
    publicKey = Buffer.alloc(65);
    publicKey[0] = 0x04;
    x.toBuffer().copy(publicKey, 1);
    y.toBuffer().copy(publicKey, 33);
  }

  return publicKey;
};

ECPoint.fromECJPoint = function (p) {
  if (p.inf) return new ECPoint(null, null);
  var zinv = p.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = p.x.redMul(zinv2);
  var ay = p.y.redMul(zinv2).redMul(zinv);
  return new ECPoint(ax, ay);
};

ECPoint.prototype.toECJPoint = function () {
  if (this.inf) return new ECJPoint(null, null, null);
  return new ECJPoint(this.x, this.y, ECJPoint.one);
};

ECPoint.prototype.neg = function () {
  if (this.inf) return this;
  return new ECPoint(this.x, this.y.redNeg());
};

ECPoint.prototype.add = function (p) {
  // O + P = P
  if (this.inf) return p; // P + O = P

  if (p.inf) return this;

  if (this.x.ucmp(p.x) === 0) {
    // P + P = 2P
    if (this.y.ucmp(p.y) === 0) return this.dbl(); // P + (-P) = O

    return new ECPoint(null, null);
  } // s = (y - yp) / (x - xp)
  // nx = s^2 - x - xp
  // ny = s * (x - nx) - y


  var s = this.y.redSub(p.y);
  if (!s.isZero()) s = s.redMul(this.x.redSub(p.x).redInvm());
  var nx = s.redSqr().redISub(this.x).redISub(p.x);
  var ny = s.redMul(this.x.redSub(nx)).redISub(this.y);
  return new ECPoint(nx, ny);
};

ECPoint.prototype.dbl = function () {
  if (this.inf) return this; // 2P = O

  var yy = this.y.redAdd(this.y);
  if (yy.isZero()) return new ECPoint(null, null); // s = (3 * x^2) / (2 * y)
  // nx = s^2 - 2*x
  // ny = s * (x - nx) - y

  var x2 = this.x.redSqr();
  var s = x2.redAdd(x2).redIAdd(x2).redMul(yy.redInvm());
  var nx = s.redSqr().redISub(this.x.redAdd(this.x));
  var ny = s.redMul(this.x.redSub(nx)).redISub(this.y);
  return new ECPoint(nx, ny);
};

ECPoint.prototype.mul = function (num) {
  // Algorithm 3.36 Window NAF method for point multiplication
  var nafPoints = this._getNAFPoints(4);

  var points = nafPoints.points; // Get NAF form

  var naf = num.getNAF(nafPoints.wnd); // Add `this`*(N+1) for every w-NAF index

  var acc = new ECJPoint(null, null, null);

  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var k = 0; i >= 0 && naf[i] === 0; i--, ++k);

    if (i >= 0) k += 1;
    acc = acc.dblp(k);
    if (i < 0) break; // J +- P

    var z = naf[i];

    if (z > 0) {
      acc = acc.mixedAdd(points[z - 1 >> 1]);
    } else {
      acc = acc.mixedAdd(points[-z - 1 >> 1].neg());
    }
  }

  return ECPoint.fromECJPoint(acc);
};

ECPoint.prototype._getNAFPoints1 = function () {
  return {
    wnd: 1,
    points: [this]
  };
};

ECPoint.prototype._getNAFPoints = function (wnd) {
  var points = new Array((1 << wnd) - 1);
  points[0] = this;
  var dbl = this.dbl();

  for (var i = 1; i < points.length; ++i) points[i] = points[i - 1].add(dbl);

  return {
    wnd: wnd,
    points: points
  };
};

module.exports = ECPoint;

/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(97);

function ECJPoint(x, y, z) {
  if (x === null && y === null && z === null) {
    this.x = ECJPoint.one;
    this.y = ECJPoint.one;
    this.z = ECJPoint.zero;
  } else {
    this.x = x;
    this.y = y;
    this.z = z;
  }

  this.zOne = this.z === ECJPoint.one;
}

ECJPoint.zero = BN.fromNumber(0);
ECJPoint.one = BN.fromNumber(1);

ECJPoint.prototype.neg = function () {
  if (this.inf) return this;
  return new ECJPoint(this.x, this.y.redNeg(), this.z);
};

ECJPoint.prototype.add = function (p) {
  // O + P = P
  if (this.inf) return p; // P + O = P

  if (p.inf) return this; // http://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#addition-add-1998-cmo-2
  // 12M + 4S + 7A

  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2).redMul(p.z);
  var s2 = p.y.redMul(z2).redMul(this.z);
  var h = u1.redSub(u2);
  var r = s1.redSub(s2);

  if (h.isZero()) {
    if (r.isZero()) return this.dbl();
    return new ECJPoint(null, null, null);
  }

  var h2 = h.redSqr();
  var v = u1.redMul(h2);
  var h3 = h2.redMul(h);
  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);
  return new ECJPoint(nx, ny, nz);
};

ECJPoint.prototype.mixedAdd = function (p) {
  // O + P = P
  if (this.inf) return p.toECJPoint(); // P + O = P

  if (p.inf) return this; // http://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#addition-add-1998-cmo-2
  //   with p.z = 1
  // 8M + 3S + 7A

  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);
  var h = u1.redSub(u2);
  var r = s1.redSub(s2);

  if (h.isZero()) {
    if (r.isZero()) return this.dbl();
    return new ECJPoint(null, null, null);
  }

  var h2 = h.redSqr();
  var v = u1.redMul(h2);
  var h3 = h2.redMul(h);
  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);
  return new ECJPoint(nx, ny, nz);
};

ECJPoint.prototype.dbl = function () {
  if (this.inf) return this;
  var nx;
  var ny;
  var nz; // Z = 1

  if (this.zOne) {
    // http://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#doubling-mdbl-2007-bl
    // 1M + 5S + 6A + 3*2 + 1*3 + 1*8
    // XX = X1^2
    var xx = this.x.redSqr(); // YY = Y1^2

    var yy = this.y.redSqr(); // YYYY = YY^2

    var yyyy = yy.redSqr(); // S = 2 * ((X1 + YY)^2 - XX - YYYY)

    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s); // M = 3 * XX

    var m = xx.redAdd(xx).redIAdd(xx); // T = M ^ 2 - 2*S

    var t = m.redSqr().redISub(s).redISub(s); // 8 * YYYY

    var yyyy8 = yyyy.redIAdd(yyyy).redIAdd(yyyy).redIAdd(yyyy); // X3 = T

    nx = t; // Y3 = M * (S - T) - 8 * YYYY

    ny = m.redMul(s.redISub(t)).redISub(yyyy8); // Z3 = 2*Y1

    nz = this.y.redAdd(this.y);
  } else {
    // http://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#doubling-dbl-2009-l
    // 2M + 5S + 6A + 3*2 + 1*3 + 1*8
    // A = X1^2
    var a = this.x.redSqr(); // B = Y1^2

    var b = this.y.redSqr(); // C = B^2

    var c = b.redSqr(); // D = 2 * ((X1 + B)^2 - A - C)

    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d); // E = 3 * A

    var e = a.redAdd(a).redIAdd(a); // F = E^2

    var f = e.redSqr(); // 8 * C

    var c8 = c.redIAdd(c).redIAdd(c).redIAdd(c); // X3 = F - 2 * D

    nx = f.redISub(d).redISub(d); // Y3 = E * (D - X3) - 8 * C

    ny = e.redMul(d.redISub(nx)).redISub(c8); // Z3 = 2 * Y1 * Z1

    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return new ECJPoint(nx, ny, nz);
};

ECJPoint.prototype.dblp = function (pow) {
  if (pow === 0 || this.inf) return this;
  var point = this;

  for (var i = 0; i < pow; i++) point = point.dbl();

  return point;
};

Object.defineProperty(ECJPoint.prototype, 'inf', {
  enumerable: true,
  get: function get() {
    return this.z.isZero();
  }
});
module.exports = ECJPoint;

/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const webcrypto = __webpack_require__(129);

const lengths = __webpack_require__(471);

const hashTypes = {
  SHA1: 'SHA-1',
  SHA256: 'SHA-256',
  SHA512: 'SHA-512'
};

const sign = async (key, data) => {
  return Buffer.from((await webcrypto.get().subtle.sign({
    name: 'HMAC'
  }, key, data)));
};

exports.create = async function (hashType, secret) {
  const hash = hashTypes[hashType];
  const key = await webcrypto.get().subtle.importKey('raw', secret, {
    name: 'HMAC',
    hash: {
      name: hash
    }
  }, false, ['sign']);
  return {
    async digest(data) {
      // eslint-disable-line require-await
      return sign(key, data);
    },

    length: lengths[hashType]
  };
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const multiaddr = __webpack_require__(20);

function ensureMultiaddr(ma) {
  if (multiaddr.isMultiaddr(ma)) {
    return ma;
  }

  return multiaddr(ma);
}

module.exports = {
  ensureMultiaddr: ensureMultiaddr
};

/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var modeModules = {
  ECB: __webpack_require__(491),
  CBC: __webpack_require__(492),
  CFB: __webpack_require__(493),
  CFB8: __webpack_require__(494),
  CFB1: __webpack_require__(495),
  OFB: __webpack_require__(496),
  CTR: __webpack_require__(230),
  GCM: __webpack_require__(230)
};

var modes = __webpack_require__(232);

for (var key in modes) {
  modes[key].module = modeModules[modes[key].mode];
}

module.exports = modes;

/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var xor = __webpack_require__(78);

var Buffer = __webpack_require__(6).Buffer;

var incr32 = __webpack_require__(231);

function getBlock(self) {
  var out = self._cipher.encryptBlockRaw(self._prev);

  incr32(self._prev);
  return out;
}

var blockSize = 16;

exports.encrypt = function (self, chunk) {
  var chunkNum = Math.ceil(chunk.length / blockSize);
  var start = self._cache.length;
  self._cache = Buffer.concat([self._cache, Buffer.allocUnsafe(chunkNum * blockSize)]);

  for (var i = 0; i < chunkNum; i++) {
    var out = getBlock(self);
    var offset = start + i * blockSize;

    self._cache.writeUInt32BE(out[0], offset + 0);

    self._cache.writeUInt32BE(out[1], offset + 4);

    self._cache.writeUInt32BE(out[2], offset + 8);

    self._cache.writeUInt32BE(out[3], offset + 12);
  }

  var pad = self._cache.slice(0, chunk.length);

  self._cache = self._cache.slice(chunk.length);
  return xor(chunk, pad);
};

/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function incr32(iv) {
  var len = iv.length;
  var item;

  while (len--) {
    item = iv.readUInt8(len);

    if (item === 255) {
      iv.writeUInt8(0, len);
    } else {
      item++;
      iv.writeUInt8(item, len);
      break;
    }
  }
}

module.exports = incr32;

/***/ }),
/* 232 */
/***/ (function(module) {

module.exports = JSON.parse("{\"aes-128-ecb\":{\"cipher\":\"AES\",\"key\":128,\"iv\":0,\"mode\":\"ECB\",\"type\":\"block\"},\"aes-192-ecb\":{\"cipher\":\"AES\",\"key\":192,\"iv\":0,\"mode\":\"ECB\",\"type\":\"block\"},\"aes-256-ecb\":{\"cipher\":\"AES\",\"key\":256,\"iv\":0,\"mode\":\"ECB\",\"type\":\"block\"},\"aes-128-cbc\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes-192-cbc\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes-256-cbc\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes128\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes192\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes256\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes-128-cfb\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CFB\",\"type\":\"stream\"},\"aes-192-cfb\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CFB\",\"type\":\"stream\"},\"aes-256-cfb\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CFB\",\"type\":\"stream\"},\"aes-128-cfb8\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CFB8\",\"type\":\"stream\"},\"aes-192-cfb8\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CFB8\",\"type\":\"stream\"},\"aes-256-cfb8\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CFB8\",\"type\":\"stream\"},\"aes-128-cfb1\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CFB1\",\"type\":\"stream\"},\"aes-192-cfb1\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CFB1\",\"type\":\"stream\"},\"aes-256-cfb1\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CFB1\",\"type\":\"stream\"},\"aes-128-ofb\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"OFB\",\"type\":\"stream\"},\"aes-192-ofb\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"OFB\",\"type\":\"stream\"},\"aes-256-ofb\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"OFB\",\"type\":\"stream\"},\"aes-128-ctr\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CTR\",\"type\":\"stream\"},\"aes-192-ctr\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CTR\",\"type\":\"stream\"},\"aes-256-ctr\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CTR\",\"type\":\"stream\"},\"aes-128-gcm\":{\"cipher\":\"AES\",\"key\":128,\"iv\":12,\"mode\":\"GCM\",\"type\":\"auth\"},\"aes-192-gcm\":{\"cipher\":\"AES\",\"key\":192,\"iv\":12,\"mode\":\"GCM\",\"type\":\"auth\"},\"aes-256-gcm\":{\"cipher\":\"AES\",\"key\":256,\"iv\":12,\"mode\":\"GCM\",\"type\":\"auth\"}}");

/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var aes = __webpack_require__(100);

var Buffer = __webpack_require__(6).Buffer;

var Transform = __webpack_require__(49);

var inherits = __webpack_require__(4);

var GHASH = __webpack_require__(497);

var xor = __webpack_require__(78);

var incr32 = __webpack_require__(231);

function xorTest(a, b) {
  var out = 0;
  if (a.length !== b.length) out++;
  var len = Math.min(a.length, b.length);

  for (var i = 0; i < len; ++i) {
    out += a[i] ^ b[i];
  }

  return out;
}

function calcIv(self, iv, ck) {
  if (iv.length === 12) {
    self._finID = Buffer.concat([iv, Buffer.from([0, 0, 0, 1])]);
    return Buffer.concat([iv, Buffer.from([0, 0, 0, 2])]);
  }

  var ghash = new GHASH(ck);
  var len = iv.length;
  var toPad = len % 16;
  ghash.update(iv);

  if (toPad) {
    toPad = 16 - toPad;
    ghash.update(Buffer.alloc(toPad, 0));
  }

  ghash.update(Buffer.alloc(8, 0));
  var ivBits = len * 8;
  var tail = Buffer.alloc(8);
  tail.writeUIntBE(ivBits, 0, 8);
  ghash.update(tail);
  self._finID = ghash.state;
  var out = Buffer.from(self._finID);
  incr32(out);
  return out;
}

function StreamCipher(mode, key, iv, decrypt) {
  Transform.call(this);
  var h = Buffer.alloc(4, 0);
  this._cipher = new aes.AES(key);

  var ck = this._cipher.encryptBlock(h);

  this._ghash = new GHASH(ck);
  iv = calcIv(this, iv, ck);
  this._prev = Buffer.from(iv);
  this._cache = Buffer.allocUnsafe(0);
  this._secCache = Buffer.allocUnsafe(0);
  this._decrypt = decrypt;
  this._alen = 0;
  this._len = 0;
  this._mode = mode;
  this._authTag = null;
  this._called = false;
}

inherits(StreamCipher, Transform);

StreamCipher.prototype._update = function (chunk) {
  if (!this._called && this._alen) {
    var rump = 16 - this._alen % 16;

    if (rump < 16) {
      rump = Buffer.alloc(rump, 0);

      this._ghash.update(rump);
    }
  }

  this._called = true;

  var out = this._mode.encrypt(this, chunk);

  if (this._decrypt) {
    this._ghash.update(chunk);
  } else {
    this._ghash.update(out);
  }

  this._len += chunk.length;
  return out;
};

StreamCipher.prototype._final = function () {
  if (this._decrypt && !this._authTag) throw new Error('Unsupported state or unable to authenticate data');
  var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID));
  if (this._decrypt && xorTest(tag, this._authTag)) throw new Error('Unsupported state or unable to authenticate data');
  this._authTag = tag;

  this._cipher.scrub();
};

StreamCipher.prototype.getAuthTag = function getAuthTag() {
  if (this._decrypt || !Buffer.isBuffer(this._authTag)) throw new Error('Attempting to get auth tag in unsupported state');
  return this._authTag;
};

StreamCipher.prototype.setAuthTag = function setAuthTag(tag) {
  if (!this._decrypt) throw new Error('Attempting to set auth tag in unsupported state');
  this._authTag = tag;
};

StreamCipher.prototype.setAAD = function setAAD(buf) {
  if (this._called) throw new Error('Attempting to set AAD in unsupported state');

  this._ghash.update(buf);

  this._alen += buf.length;
};

module.exports = StreamCipher;

/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var aes = __webpack_require__(100);

var Buffer = __webpack_require__(6).Buffer;

var Transform = __webpack_require__(49);

var inherits = __webpack_require__(4);

function StreamCipher(mode, key, iv, decrypt) {
  Transform.call(this);
  this._cipher = new aes.AES(key);
  this._prev = Buffer.from(iv);
  this._cache = Buffer.allocUnsafe(0);
  this._secCache = Buffer.allocUnsafe(0);
  this._decrypt = decrypt;
  this._mode = mode;
}

inherits(StreamCipher, Transform);

StreamCipher.prototype._update = function (chunk) {
  return this._mode.encrypt(this, chunk, this._decrypt);
};

StreamCipher.prototype._final = function () {
  this._cipher.scrub();
};

module.exports = StreamCipher;

/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Buffer = __webpack_require__(6).Buffer;

var MD5 = __webpack_require__(136);
/* eslint-disable camelcase */


function EVP_BytesToKey(password, salt, keyBits, ivLen) {
  if (!Buffer.isBuffer(password)) password = Buffer.from(password, 'binary');

  if (salt) {
    if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, 'binary');
    if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length');
  }

  var keyLen = keyBits / 8;
  var key = Buffer.alloc(keyLen);
  var iv = Buffer.alloc(ivLen || 0);
  var tmp = Buffer.alloc(0);

  while (keyLen > 0 || ivLen > 0) {
    var hash = new MD5();
    hash.update(tmp);
    hash.update(password);
    if (salt) hash.update(salt);
    tmp = hash.digest();
    var used = 0;

    if (keyLen > 0) {
      var keyStart = key.length - keyLen;
      used = Math.min(keyLen, tmp.length);
      tmp.copy(key, keyStart, 0, used);
      keyLen -= used;
    }

    if (used < tmp.length && ivLen > 0) {
      var ivStart = iv.length - ivLen;
      var length = Math.min(ivLen, tmp.length - used);
      tmp.copy(iv, ivStart, used, used + length);
      ivLen -= length;
    }
  }

  tmp.fill(0);
  return {
    key: key,
    iv: iv
  };
}

module.exports = EVP_BytesToKey;

/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const batch = __webpack_require__(142);

function parallelBatch(_x, _x2) {
  return _parallelBatch.apply(this, arguments);
}

function _parallelBatch() {
  _parallelBatch = _wrapAsyncGenerator(function* (source, size) {
    size = parseInt(size);

    if (isNaN(size) || size < 1) {
      size = 1;
    }

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;

    var _iteratorError;

    try {
      for (var _iterator = _asyncIterator(batch(source, size)), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
        const things = _value;
        const results = [];
        let nextResultIndex = 0;
        let nextResolve;
        let nextResultPromise = new Promise(resolve => {
          nextResolve = resolve;
        });
        things.forEach((thing, index) => {
          thing().then(result => {
            results[index] = result;
            nextResolve();
          }, err => {
            results[index] = err;
            nextResolve();
          });
        });

        while (true) {
          yield _awaitAsyncGenerator(nextResultPromise); // yield all available results

          for (let i = nextResultIndex; i < things.length; i++) {
            const result = results[i];

            if (result === undefined) {
              break;
            }

            nextResultIndex = i + 1;
            results[i] = undefined;

            if (result instanceof Error) {
              throw result;
            }

            if (result !== undefined) {
              yield result;
            }
          }

          if (nextResultIndex === things.length) {
            break;
          }

          nextResultPromise = new Promise(resolve => {
            nextResolve = resolve;
          });
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          yield _awaitAsyncGenerator(_iterator.return());
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  });
  return _parallelBatch.apply(this, arguments);
}

module.exports = parallelBatch;

/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const withIs = __webpack_require__(21);

const sortLinks = __webpack_require__(238);

const DAGLink = __webpack_require__(58);

const {
  serializeDAGNode
} = __webpack_require__(239);

const toDAGLink = __webpack_require__(507);

const addLink = __webpack_require__(508);

const rmLink = __webpack_require__(510);

class DAGNode {
  constructor(data, links = [], serializedSize = null) {
    if (!data) {
      data = Buffer.alloc(0);
    }

    if (typeof data === 'string') {
      data = Buffer.from(data);
    }

    if (!Buffer.isBuffer(data)) {
      throw new Error('Passed \'data\' is not a buffer or a string!');
    }

    if (serializedSize !== null && typeof serializedSize !== 'number') {
      throw new Error('Passed \'serializedSize\' must be a number!');
    }

    links = links.map(link => {
      return DAGLink.isDAGLink(link) ? link : DAGLink.util.createDagLinkFromB58EncodedHash(link);
    });
    links = sortLinks(links);
    this._data = data;
    this._links = links;
    this._serializedSize = serializedSize;
    this._size = null;
  }

  toJSON() {
    if (!this._json) {
      this._json = Object.freeze({
        data: this.Data,
        links: this._links.map(l => l.toJSON()),
        size: this.size
      });
    }

    return Object.assign({}, this._json);
  }

  toString() {
    return "DAGNode <data: \"".concat(this.Data.toString('base64'), "\", links: ").concat(this.Links.length, ", size: ").concat(this.size, ">");
  }

  _invalidateCached() {
    this._serializedSize = null;
    this._size = null;
  }

  addLink(link) {
    this._invalidateCached();

    return addLink(this, link);
  }

  rmLink(link) {
    this._invalidateCached();

    return rmLink(this, link);
  } // @returns {Promise.<DAGLink>}


  toDAGLink(options) {
    return toDAGLink(this, options);
  }

  serialize() {
    return serializeDAGNode({
      Data: this._data,
      Links: this._links
    });
  }

  get size() {
    if (this._size === null) {
      if (this._serializedSize === null) {
        this._serializedSize = this.serialize().length;
      }

      this._size = this._links.reduce((sum, l) => sum + l.Tsize, this._serializedSize);
    }

    return this._size;
  }

  set size(size) {
    throw new Error("Can't set property: 'size' is immutable");
  } // Getters for backwards compatible path resolving


  get Data() {
    return this._data;
  }

  set Data(_) {
    throw new Error("Can't set property: 'Data' is immutable");
  }

  get Links() {
    return this._links.map(link => {
      return {
        Name: link.Name,
        Tsize: link.Tsize,
        Hash: link.Hash
      };
    });
  }

  set Links(_) {
    throw new Error("Can't set property: 'Links' is immutable");
  }

}

exports = module.exports = withIs(DAGNode, {
  className: 'DAGNode',
  symbolName: '@ipld/js-ipld-dag-pb/dagnode'
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const sort = __webpack_require__(506);

const linkSort = (a, b) => {
  return Buffer.compare(a.nameAsBuffer, b.nameAsBuffer);
};

const sortLinks = links => {
  return sort(links, linkSort);
};

module.exports = sortLinks;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const protons = __webpack_require__(24);

const proto = protons(__webpack_require__(240));

const DAGLink = __webpack_require__(58);

exports = module.exports;

const toProtoBuf = node => {
  const pbn = {};

  if (node.Data && node.Data.length > 0) {
    pbn.Data = node.Data;
  } else {
    // NOTE: this has to be null in order to match go-ipfs serialization
    // `null !== new Buffer(0)`
    pbn.Data = null;
  }

  if (node.Links && node.Links.length > 0) {
    pbn.Links = node.Links.map(link => ({
      Hash: link.Hash.buffer,
      Name: link.Name,
      Tsize: link.Tsize
    }));
  } else {
    pbn.Links = null;
  }

  return pbn;
};
/**
 * Serialize internal representation into a binary PB block.
 *
 * @param {Object} node - Internal representation of a PB block
 * @returns {Buffer} - The encoded binary representation
 */


const serializeDAGNode = node => {
  const data = node.Data;
  const links = node.Links || [];
  const serialized = proto.PBNode.encode(toProtoBuf({
    Data: data,
    Links: links
  }));
  return serialized;
}; // Serialize an object where the `Links` might not be a `DAGLink` instance yet


const serializeDAGNodeLike = (data, links = []) => {
  const node = {
    Data: data
  };
  node.Links = links.map(link => {
    return DAGLink.isDAGLink(link) ? link : DAGLink.util.createDagLinkFromB58EncodedHash(link);
  });
  return serializeDAGNode(node);
};

exports.serializeDAGNode = serializeDAGNode;
exports.serializeDAGNodeLike = serializeDAGNodeLike;

/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = "// An IPFS MerkleDAG Link\nmessage PBLink {\n\n  // multihash of the target object\n  optional bytes Hash = 1;\n\n  // utf string name. should be unique per object\n  optional string Name = 2;\n\n  // cumulative size of target object\n  optional uint64 Tsize = 3;\n}\n\n// An IPFS MerkleDAG Node\nmessage PBNode {\n\n  // refs to other objects\n  repeated PBLink Links = 2;\n\n  // opaque user data\n  optional bytes Data = 1;\n}";

/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const CID = __webpack_require__(3);

const multicodec = __webpack_require__(15);

const multihashing = __webpack_require__(22);

exports = module.exports;
exports.codec = multicodec.DAG_PB;
exports.defaultHashAlg = multicodec.SHA2_256;
/**
 * Calculate the CID of the binary blob.
 *
 * @param {Object} binaryBlob - Encoded IPLD Node
 * @param {Object} [userOptions] - Options to create the CID
 * @param {number} [userOptions.cidVersion=1] - CID version number
 * @param {string} [UserOptions.hashAlg] - Defaults to the defaultHashAlg of the format
 * @returns {Promise.<CID>}
 */

const cid = async (binaryBlob, userOptions) => {
  const defaultOptions = {
    cidVersion: 1,
    hashAlg: exports.defaultHashAlg
  };
  const options = Object.assign(defaultOptions, userOptions);
  const multihash = await multihashing(binaryBlob, options.hashAlg);
  const codecName = multicodec.print[exports.codec];
  const cid = new CID(options.cidVersion, codecName, multihash);
  return cid;
};

exports.cid = cid;

/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports = module.exports = __webpack_require__(58);
exports.util = __webpack_require__(509);

/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const protons = __webpack_require__(24);

const proto = protons(__webpack_require__(240));

const DAGLink = __webpack_require__(58);

const DAGNode = __webpack_require__(237);

const {
  serializeDAGNodeLike
} = __webpack_require__(239);

const genCid = __webpack_require__(241);

exports = module.exports;
exports.codec = genCid.codec;
exports.defaultHashAlg = genCid.defaultHashAlg;
/**
 * Calculate the CID of the binary blob.
 *
 * @param {Object} binaryBlob - Encoded IPLD Node
 * @param {Object} [userOptions] - Options to create the CID
 * @param {number} [userOptions.cidVersion=1] - CID version number
 * @param {string} [UserOptions.hashAlg] - Defaults to the defaultHashAlg of the format
 * @returns {Promise.<CID>}
 */

const cid = (binaryBlob, userOptions) => {
  return genCid.cid(binaryBlob, userOptions);
};
/**
 * Serialize internal representation into a binary PB block.
 *
 * @param {Object} node - Internal representation of a CBOR block
 * @returns {Buffer} - The encoded binary representation
 */


const serialize = node => {
  if (DAGNode.isDAGNode(node)) {
    return node.serialize();
  } else {
    return serializeDAGNodeLike(node.Data, node.Links);
  }
};
/**
 * Deserialize PB block into the internal representation.
 *
 * @param {Buffer} buffer - Binary representation of a PB block
 * @returns {Object} - An object that conforms to the IPLD Data Model
 */


const deserialize = buffer => {
  const pbn = proto.PBNode.decode(buffer);
  const links = pbn.Links.map(link => {
    return new DAGLink(link.Name, link.Tsize, link.Hash);
  });
  const data = pbn.Data == null ? Buffer.alloc(0) : pbn.Data;
  return new DAGNode(data, links, buffer.length);
};

exports.serialize = serialize;
exports.deserialize = deserialize;
exports.cid = cid;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const uuid = __webpack_require__(60);

const withIs = __webpack_require__(21);

const pathSepS = '/';
const pathSepB = Buffer.from(pathSepS);
const pathSep = pathSepB[0];
/**
 * A Key represents the unique identifier of an object.
 * Our Key scheme is inspired by file systems and Google App Engine key model.
 * Keys are meant to be unique across a system. Keys are hierarchical,
 * incorporating more and more specific namespaces. Thus keys can be deemed
 * 'children' or 'ancestors' of other keys:
 * - `new Key('/Comedy')`
 * - `new Key('/Comedy/MontyPython')`
 * Also, every namespace can be parametrized to embed relevant object
 * information. For example, the Key `name` (most specific namespace) could
 * include the object type:
 * - `new Key('/Comedy/MontyPython/Actor:JohnCleese')`
 * - `new Key('/Comedy/MontyPython/Sketch:CheeseShop')`
 * - `new Key('/Comedy/MontyPython/Sketch:CheeseShop/Character:Mousebender')`
 *
 */

class Key {
  constructor(s, clean) {
    if (typeof s === 'string') {
      this._buf = Buffer.from(s);
    } else if (Buffer.isBuffer(s)) {
      this._buf = s;
    }

    if (clean == null) {
      clean = true;
    }

    if (clean) {
      this.clean();
    }

    if (this._buf.length === 0 || this._buf[0] !== pathSep) {
      throw new Error("Invalid key: ".concat(this.toString()));
    }
  }
  /**
   * Convert to the string representation
   *
   * @param {string} [encoding='utf8']
   * @returns {string}
   */


  toString(encoding) {
    return this._buf.toString(encoding || 'utf8');
  }
  /**
   * Return the buffer representation of the key
   *
   * @returns {Buffer}
   */


  toBuffer() {
    return this._buf;
  }
  /**
   * @returns {String}
   */


  get [Symbol.toStringTag]() {
    return "[Key ".concat(this.toString(), "]");
  }
  /**
   * Constructs a key out of a namespace array.
   *
   * @param {Array<string>} list
   * @returns {Key}
   *
   * @example
   * Key.withNamespaces(['one', 'two'])
   * // => Key('/one/two')
   *
   */


  static withNamespaces(list) {
    return new _Key(list.join(pathSepS));
  }
  /**
   * Returns a randomly (uuid) generated key.
   *
   * @returns {Key}
   *
   * @example
   * Key.random()
   * // => Key('/f98719ea086343f7b71f32ea9d9d521d')
   *
   */


  static random() {
    return new _Key(uuid().replace(/-/g, ''));
  }
  /**
   * Cleanup the current key
   *
   * @returns {void}
   */


  clean() {
    if (!this._buf || this._buf.length === 0) {
      this._buf = Buffer.from(pathSepS);
    }

    if (this._buf[0] !== pathSep) {
      this._buf = Buffer.concat([pathSepB, this._buf]);
    } // normalize does not remove trailing slashes


    while (this._buf.length > 1 && this._buf[this._buf.length - 1] === pathSep) {
      this._buf = this._buf.slice(0, -1);
    }
  }
  /**
   * Check if the given key is sorted lower than ourself.
   *
   * @param {Key} key
   * @returns {bool}
   */


  less(key) {
    const list1 = this.list();
    const list2 = key.list();

    for (let i = 0; i < list1.length; i++) {
      if (list2.length < i + 1) {
        return false;
      }

      const c1 = list1[i];
      const c2 = list2[i];

      if (c1 < c2) {
        return true;
      } else if (c1 > c2) {
        return false;
      }
    }

    return list1.length < list2.length;
  }
  /**
   * Returns the key with all parts in reversed order.
   *
   * @returns {Key}
   *
   * @example
   * new Key('/Comedy/MontyPython/Actor:JohnCleese').reverse()
   * // => Key('/Actor:JohnCleese/MontyPython/Comedy')
   */


  reverse() {
    return Key.withNamespaces(this.list().slice().reverse());
  }
  /**
   * Returns the `namespaces` making up this Key.
   *
   * @returns {Array<string>}
   */


  namespaces() {
    return this.list();
  }
  /** Returns the "base" namespace of this key.
   *
   * @returns {string}
   *
   * @example
   * new Key('/Comedy/MontyPython/Actor:JohnCleese').baseNamespace()
   * // => 'Actor:JohnCleese'
   *
   */


  baseNamespace() {
    const ns = this.namespaces();
    return ns[ns.length - 1];
  }
  /**
   * Returns the `list` representation of this key.
   *
   * @returns {Array<string>}
   *
   * @example
   * new Key('/Comedy/MontyPython/Actor:JohnCleese').list()
   * // => ['Comedy', 'MontyPythong', 'Actor:JohnCleese']
   *
   */


  list() {
    return this.toString().split(pathSepS).slice(1);
  }
  /**
   * Returns the "type" of this key (value of last namespace).
   *
   * @returns {string}
   *
   * @example
   * new Key('/Comedy/MontyPython/Actor:JohnCleese').type()
   * // => 'Actor'
   *
   */


  type() {
    return namespaceType(this.baseNamespace());
  }
  /**
   * Returns the "name" of this key (field of last namespace).
   *
   * @returns {string}
   *
   * @example
   * new Key('/Comedy/MontyPython/Actor:JohnCleese').name()
   * // => 'JohnCleese'
   */


  name() {
    return namespaceValue(this.baseNamespace());
  }
  /**
   * Returns an "instance" of this type key (appends value to namespace).
   *
   * @param {string} s
   * @returns {Key}
   *
   * @example
   * new Key('/Comedy/MontyPython/Actor').instance('JohnClesse')
   * // => Key('/Comedy/MontyPython/Actor:JohnCleese')
   */


  instance(s) {
    return new _Key(this.toString() + ':' + s);
  }
  /**
   * Returns the "path" of this key (parent + type).
   *
   * @returns {Key}
   *
   * @example
   * new Key('/Comedy/MontyPython/Actor:JohnCleese').path()
   * // => Key('/Comedy/MontyPython/Actor')
   *
   */


  path() {
    let p = this.parent().toString();

    if (!p.endsWith(pathSepS)) {
      p += pathSepS;
    }

    p += this.type();
    return new _Key(p);
  }
  /**
   * Returns the `parent` Key of this Key.
   *
   * @returns {Key}
   *
   * @example
   * new Key("/Comedy/MontyPython/Actor:JohnCleese").parent()
   * // => Key("/Comedy/MontyPython")
   *
   */


  parent() {
    const list = this.list();

    if (list.length === 1) {
      return new _Key(pathSepS);
    }

    return new _Key(list.slice(0, -1).join(pathSepS));
  }
  /**
   * Returns the `child` Key of this Key.
   *
   * @param {Key} key
   * @returns {Key}
   *
   * @example
   * new Key('/Comedy/MontyPython').child(new Key('Actor:JohnCleese'))
   * // => Key('/Comedy/MontyPython/Actor:JohnCleese')
   *
   */


  child(key) {
    if (this.toString() === pathSepS) {
      return key;
    } else if (key.toString() === pathSepS) {
      return this;
    }

    return new _Key(this.toString() + key.toString(), false);
  }
  /**
   * Returns whether this key is a prefix of `other`
   *
   * @param {Key} other
   * @returns {bool}
   *
   * @example
   * new Key('/Comedy').isAncestorOf('/Comedy/MontyPython')
   * // => true
   *
   */


  isAncestorOf(other) {
    if (other.toString() === this.toString()) {
      return false;
    }

    return other.toString().startsWith(this.toString());
  }
  /**
   * Returns whether this key is a contains another as prefix.
   *
   * @param {Key} other
   * @returns {bool}
   *
   * @example
   * new Key('/Comedy/MontyPython').isDecendantOf('/Comedy')
   * // => true
   *
   */


  isDecendantOf(other) {
    if (other.toString() === this.toString()) {
      return false;
    }

    return this.toString().startsWith(other.toString());
  }
  /**
   * Returns wether this key has only one namespace.
   *
   * @returns {bool}
   *
   */


  isTopLevel() {
    return this.list().length === 1;
  }
  /**
   * Concats one or more Keys into one new Key.
   *
   * @param {Array<Key>} keys
   * @returns {Key}
   */


  concat(...keys) {
    return Key.withNamespaces([...this.namespaces(), ...flatten(keys.map(key => key.namespaces()))]);
  }

}
/**
 * The first component of a namespace. `foo` in `foo:bar`
 *
 * @param {string} ns
 * @returns {string}
 */


function namespaceType(ns) {
  const parts = ns.split(':');

  if (parts.length < 2) {
    return '';
  }

  return parts.slice(0, -1).join(':');
}
/**
 * The last component of a namespace, `baz` in `foo:bar:baz`.
 *
 * @param {string} ns
 * @returns {string}
 */


function namespaceValue(ns) {
  const parts = ns.split(':');
  return parts[parts.length - 1];
}
/**
 * Flatten array of arrays (only one level)
 * @param {Array<Array>} arr
 * @return {*}
 */


function flatten(arr) {
  return [].concat(...arr);
}

const _Key = withIs(Key, {
  className: 'Key',
  symbolName: '@ipfs/interface-datastore/key'
});

module.exports = _Key;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const path = __webpack_require__(103);

const os = __webpack_require__(99);

const uuid = __webpack_require__(60);

exports.filter = (iterable, filterer) => {
  return _wrapAsyncGenerator(function* () {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;

    var _iteratorError;

    try {
      for (var _iterator = _asyncIterator(iterable), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
        const value = _value;
        const keep = yield _awaitAsyncGenerator(filterer(value));
        if (!keep) continue;
        yield value;
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          yield _awaitAsyncGenerator(_iterator.return());
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  })();
}; // Not just sort, because the sorter is given all the values and should return
// them all sorted


exports.sortAll = (iterable, sorter) => {
  return _wrapAsyncGenerator(function* () {
    let values = [];
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;

    var _iteratorError2;

    try {
      for (var _iterator2 = _asyncIterator(iterable), _step2, _value2; _step2 = yield _awaitAsyncGenerator(_iterator2.next()), _iteratorNormalCompletion2 = _step2.done, _value2 = yield _awaitAsyncGenerator(_step2.value), !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {
        const value = _value2;
        values.push(value);
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          yield _awaitAsyncGenerator(_iterator2.return());
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    values = yield _awaitAsyncGenerator(sorter(values));

    for (const value of values) yield value;
  })();
};

exports.take = (iterable, n) => {
  return _wrapAsyncGenerator(function* () {
    if (n <= 0) return;
    let i = 0;
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;

    var _iteratorError3;

    try {
      for (var _iterator3 = _asyncIterator(iterable), _step3, _value3; _step3 = yield _awaitAsyncGenerator(_iterator3.next()), _iteratorNormalCompletion3 = _step3.done, _value3 = yield _awaitAsyncGenerator(_step3.value), !_iteratorNormalCompletion3; _iteratorNormalCompletion3 = true) {
        const value = _value3;
        yield value;
        i++;
        if (i >= n) return;
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
          yield _awaitAsyncGenerator(_iterator3.return());
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }
  })();
};

exports.map = (iterable, mapper) => {
  return _wrapAsyncGenerator(function* () {
    var _iteratorNormalCompletion4 = true;
    var _didIteratorError4 = false;

    var _iteratorError4;

    try {
      for (var _iterator4 = _asyncIterator(iterable), _step4, _value4; _step4 = yield _awaitAsyncGenerator(_iterator4.next()), _iteratorNormalCompletion4 = _step4.done, _value4 = yield _awaitAsyncGenerator(_step4.value), !_iteratorNormalCompletion4; _iteratorNormalCompletion4 = true) {
        const value = _value4;
        yield mapper(value);
      }
    } catch (err) {
      _didIteratorError4 = true;
      _iteratorError4 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
          yield _awaitAsyncGenerator(_iterator4.return());
        }
      } finally {
        if (_didIteratorError4) {
          throw _iteratorError4;
        }
      }
    }
  })();
};

exports.replaceStartWith = function (s, r) {
  const matcher = new RegExp('^' + r);
  return s.replace(matcher, '');
};

exports.tmpdir = () => {
  return path.join(os.tmpdir(), uuid());
};

/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const errcode = __webpack_require__(2);

module.exports.dbOpenFailedError = err => {
  err = err || new Error('Cannot open database');
  return errcode(err, 'ERR_DB_OPEN_FAILED');
};

module.exports.dbDeleteFailedError = err => {
  err = err || new Error('Delete failed');
  return errcode(err, 'ERR_DB_DELETE_FAILED');
};

module.exports.dbWriteFailedError = err => {
  err = err || new Error('Write failed');
  return errcode(err, 'ERR_DB_WRITE_FAILED');
};

module.exports.notFoundError = err => {
  err = err || new Error('Not Found');
  return errcode(err, 'ERR_NOT_FOUND');
};

/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const createCBOR = __webpack_require__(546);

const cbor = createCBOR(1e+6);

const CID = __webpack_require__(3);

const links = (obj, path = []) => {
  if (Buffer.isBuffer(obj)) {
    obj = cbor.deserialize(obj);
  }

  return function* () {
    for (let key of Object.keys(obj)) {
      let _path = path.slice();

      _path.push(key);

      let val = obj[key];

      if (val && typeof val === 'object') {
        if (Array.isArray(val)) {
          for (let i = 0; i < val.length; i++) {
            let __path = _path.slice();

            __path.push(i);

            let o = val[i];

            if (CID.isCID(o)) {
              yield [__path.join('/'), o];
            } else if (typeof o === 'object') {
              yield* links(o, _path);
            }
          }
        } else {
          if (CID.isCID(val)) {
            yield [_path.join('/'), val];
          } else {
            yield* links(val, _path);
          }
        }
      }
    }
  }();
};

module.exports = links;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // exports.Commented = require('./commented')

exports.Diagnose = __webpack_require__(547);
exports.Decoder = __webpack_require__(249);
exports.Encoder = __webpack_require__(550);
exports.Simple = __webpack_require__(250);
exports.Tagged = __webpack_require__(251); // exports.comment = exports.Commented.comment

exports.decodeAll = exports.Decoder.decodeAll;
exports.decodeFirst = exports.Decoder.decodeFirst;
exports.diagnose = exports.Diagnose.diagnose;
exports.encode = exports.Encoder.encode;
exports.decode = exports.Decoder.decode;
exports.leveldb = {
  decode: exports.Decoder.decodeAll,
  encode: exports.Encoder.encode,
  buffer: true,
  name: 'cbor'
};

/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer, global) {

const ieee754 = __webpack_require__(195);

const Bignumber = __webpack_require__(36).BigNumber;

const parser = __webpack_require__(548);

const utils = __webpack_require__(148);

const c = __webpack_require__(104);

const Simple = __webpack_require__(250);

const Tagged = __webpack_require__(251);

const {
  URL
} = __webpack_require__(252);
/**
 * Transform binary cbor data into JavaScript objects.
 */


class Decoder {
  /**
   * @param {Object} [opts={}]
   * @param {number} [opts.size=65536] - Size of the allocated heap.
   */
  constructor(opts) {
    opts = opts || {};

    if (!opts.size || opts.size < 0x10000) {
      opts.size = 0x10000;
    } else {
      // Ensure the size is a power of 2
      opts.size = utils.nextPowerOf2(opts.size);
    } // Heap use to share the input with the parser


    this._heap = new ArrayBuffer(opts.size);
    this._heap8 = new Uint8Array(this._heap);
    this._buffer = Buffer.from(this._heap);

    this._reset(); // Known tags


    this._knownTags = Object.assign({
      0: val => new Date(val),
      1: val => new Date(val * 1000),
      2: val => utils.arrayBufferToBignumber(val),
      3: val => c.NEG_ONE.minus(utils.arrayBufferToBignumber(val)),
      4: v => {
        // const v = new Uint8Array(val)
        return c.TEN.pow(v[0]).times(v[1]);
      },
      5: v => {
        // const v = new Uint8Array(val)
        return c.TWO.pow(v[0]).times(v[1]);
      },
      32: val => new URL(val),
      35: val => new RegExp(val)
    }, opts.tags); // Initialize asm based parser

    this.parser = parser(global, {
      log: console.log.bind(console),
      pushInt: this.pushInt.bind(this),
      pushInt32: this.pushInt32.bind(this),
      pushInt32Neg: this.pushInt32Neg.bind(this),
      pushInt64: this.pushInt64.bind(this),
      pushInt64Neg: this.pushInt64Neg.bind(this),
      pushFloat: this.pushFloat.bind(this),
      pushFloatSingle: this.pushFloatSingle.bind(this),
      pushFloatDouble: this.pushFloatDouble.bind(this),
      pushTrue: this.pushTrue.bind(this),
      pushFalse: this.pushFalse.bind(this),
      pushUndefined: this.pushUndefined.bind(this),
      pushNull: this.pushNull.bind(this),
      pushInfinity: this.pushInfinity.bind(this),
      pushInfinityNeg: this.pushInfinityNeg.bind(this),
      pushNaN: this.pushNaN.bind(this),
      pushNaNNeg: this.pushNaNNeg.bind(this),
      pushArrayStart: this.pushArrayStart.bind(this),
      pushArrayStartFixed: this.pushArrayStartFixed.bind(this),
      pushArrayStartFixed32: this.pushArrayStartFixed32.bind(this),
      pushArrayStartFixed64: this.pushArrayStartFixed64.bind(this),
      pushObjectStart: this.pushObjectStart.bind(this),
      pushObjectStartFixed: this.pushObjectStartFixed.bind(this),
      pushObjectStartFixed32: this.pushObjectStartFixed32.bind(this),
      pushObjectStartFixed64: this.pushObjectStartFixed64.bind(this),
      pushByteString: this.pushByteString.bind(this),
      pushByteStringStart: this.pushByteStringStart.bind(this),
      pushUtf8String: this.pushUtf8String.bind(this),
      pushUtf8StringStart: this.pushUtf8StringStart.bind(this),
      pushSimpleUnassigned: this.pushSimpleUnassigned.bind(this),
      pushTagUnassigned: this.pushTagUnassigned.bind(this),
      pushTagStart: this.pushTagStart.bind(this),
      pushTagStart4: this.pushTagStart4.bind(this),
      pushTagStart8: this.pushTagStart8.bind(this),
      pushBreak: this.pushBreak.bind(this)
    }, this._heap);
  }

  get _depth() {
    return this._parents.length;
  }

  get _currentParent() {
    return this._parents[this._depth - 1];
  }

  get _ref() {
    return this._currentParent.ref;
  } // Finish the current parent


  _closeParent() {
    var p = this._parents.pop();

    if (p.length > 0) {
      throw new Error("Missing ".concat(p.length, " elements"));
    }

    switch (p.type) {
      case c.PARENT.TAG:
        this._push(this.createTag(p.ref[0], p.ref[1]));

        break;

      case c.PARENT.BYTE_STRING:
        this._push(this.createByteString(p.ref, p.length));

        break;

      case c.PARENT.UTF8_STRING:
        this._push(this.createUtf8String(p.ref, p.length));

        break;

      case c.PARENT.MAP:
        if (p.values % 2 > 0) {
          throw new Error('Odd number of elements in the map');
        }

        this._push(this.createMap(p.ref, p.length));

        break;

      case c.PARENT.OBJECT:
        if (p.values % 2 > 0) {
          throw new Error('Odd number of elements in the map');
        }

        this._push(this.createObject(p.ref, p.length));

        break;

      case c.PARENT.ARRAY:
        this._push(this.createArray(p.ref, p.length));

        break;

      default:
        break;
    }

    if (this._currentParent && this._currentParent.type === c.PARENT.TAG) {
      this._dec();
    }
  } // Reduce the expected length of the current parent by one


  _dec() {
    const p = this._currentParent; // The current parent does not know the epxected child length

    if (p.length < 0) {
      return;
    }

    p.length--; // All children were seen, we can close the current parent

    if (p.length === 0) {
      this._closeParent();
    }
  } // Push any value to the current parent


  _push(val, hasChildren) {
    const p = this._currentParent;
    p.values++;

    switch (p.type) {
      case c.PARENT.ARRAY:
      case c.PARENT.BYTE_STRING:
      case c.PARENT.UTF8_STRING:
        if (p.length > -1) {
          this._ref[this._ref.length - p.length] = val;
        } else {
          this._ref.push(val);
        }

        this._dec();

        break;

      case c.PARENT.OBJECT:
        if (p.tmpKey != null) {
          this._ref[p.tmpKey] = val;
          p.tmpKey = null;

          this._dec();
        } else {
          p.tmpKey = val;

          if (typeof p.tmpKey !== 'string') {
            // too bad, convert to a Map
            p.type = c.PARENT.MAP;
            p.ref = utils.buildMap(p.ref);
          }
        }

        break;

      case c.PARENT.MAP:
        if (p.tmpKey != null) {
          this._ref.set(p.tmpKey, val);

          p.tmpKey = null;

          this._dec();
        } else {
          p.tmpKey = val;
        }

        break;

      case c.PARENT.TAG:
        this._ref.push(val);

        if (!hasChildren) {
          this._dec();
        }

        break;

      default:
        throw new Error('Unknown parent type');
    }
  } // Create a new parent in the parents list


  _createParent(obj, type, len) {
    this._parents[this._depth] = {
      type: type,
      length: len,
      ref: obj,
      values: 0,
      tmpKey: null
    };
  } // Reset all state back to the beginning, also used for initiatlization


  _reset() {
    this._res = [];
    this._parents = [{
      type: c.PARENT.ARRAY,
      length: -1,
      ref: this._res,
      values: 0,
      tmpKey: null
    }];
  } // -- Interface to customize deoding behaviour


  createTag(tagNumber, value) {
    const typ = this._knownTags[tagNumber];

    if (!typ) {
      return new Tagged(tagNumber, value);
    }

    return typ(value);
  }

  createMap(obj, len) {
    return obj;
  }

  createObject(obj, len) {
    return obj;
  }

  createArray(arr, len) {
    return arr;
  }

  createByteString(raw, len) {
    return Buffer.concat(raw);
  }

  createByteStringFromHeap(start, end) {
    if (start === end) {
      return Buffer.alloc(0);
    }

    return Buffer.from(this._heap.slice(start, end));
  }

  createInt(val) {
    return val;
  }

  createInt32(f, g) {
    return utils.buildInt32(f, g);
  }

  createInt64(f1, f2, g1, g2) {
    return utils.buildInt64(f1, f2, g1, g2);
  }

  createFloat(val) {
    return val;
  }

  createFloatSingle(a, b, c, d) {
    return ieee754.read([a, b, c, d], 0, false, 23, 4);
  }

  createFloatDouble(a, b, c, d, e, f, g, h) {
    return ieee754.read([a, b, c, d, e, f, g, h], 0, false, 52, 8);
  }

  createInt32Neg(f, g) {
    return -1 - utils.buildInt32(f, g);
  }

  createInt64Neg(f1, f2, g1, g2) {
    const f = utils.buildInt32(f1, f2);
    const g = utils.buildInt32(g1, g2);

    if (f > c.MAX_SAFE_HIGH) {
      return c.NEG_ONE.minus(new Bignumber(f).times(c.SHIFT32).plus(g));
    }

    return -1 - (f * c.SHIFT32 + g);
  }

  createTrue() {
    return true;
  }

  createFalse() {
    return false;
  }

  createNull() {
    return null;
  }

  createUndefined() {
    return void 0;
  }

  createInfinity() {
    return Infinity;
  }

  createInfinityNeg() {
    return -Infinity;
  }

  createNaN() {
    return NaN;
  }

  createNaNNeg() {
    return -NaN;
  }

  createUtf8String(raw, len) {
    return raw.join('');
  }

  createUtf8StringFromHeap(start, end) {
    if (start === end) {
      return '';
    }

    return this._buffer.toString('utf8', start, end);
  }

  createSimpleUnassigned(val) {
    return new Simple(val);
  } // -- Interface for decoder.asm.js


  pushInt(val) {
    this._push(this.createInt(val));
  }

  pushInt32(f, g) {
    this._push(this.createInt32(f, g));
  }

  pushInt64(f1, f2, g1, g2) {
    this._push(this.createInt64(f1, f2, g1, g2));
  }

  pushFloat(val) {
    this._push(this.createFloat(val));
  }

  pushFloatSingle(a, b, c, d) {
    this._push(this.createFloatSingle(a, b, c, d));
  }

  pushFloatDouble(a, b, c, d, e, f, g, h) {
    this._push(this.createFloatDouble(a, b, c, d, e, f, g, h));
  }

  pushInt32Neg(f, g) {
    this._push(this.createInt32Neg(f, g));
  }

  pushInt64Neg(f1, f2, g1, g2) {
    this._push(this.createInt64Neg(f1, f2, g1, g2));
  }

  pushTrue() {
    this._push(this.createTrue());
  }

  pushFalse() {
    this._push(this.createFalse());
  }

  pushNull() {
    this._push(this.createNull());
  }

  pushUndefined() {
    this._push(this.createUndefined());
  }

  pushInfinity() {
    this._push(this.createInfinity());
  }

  pushInfinityNeg() {
    this._push(this.createInfinityNeg());
  }

  pushNaN() {
    this._push(this.createNaN());
  }

  pushNaNNeg() {
    this._push(this.createNaNNeg());
  }

  pushArrayStart() {
    this._createParent([], c.PARENT.ARRAY, -1);
  }

  pushArrayStartFixed(len) {
    this._createArrayStartFixed(len);
  }

  pushArrayStartFixed32(len1, len2) {
    const len = utils.buildInt32(len1, len2);

    this._createArrayStartFixed(len);
  }

  pushArrayStartFixed64(len1, len2, len3, len4) {
    const len = utils.buildInt64(len1, len2, len3, len4);

    this._createArrayStartFixed(len);
  }

  pushObjectStart() {
    this._createObjectStartFixed(-1);
  }

  pushObjectStartFixed(len) {
    this._createObjectStartFixed(len);
  }

  pushObjectStartFixed32(len1, len2) {
    const len = utils.buildInt32(len1, len2);

    this._createObjectStartFixed(len);
  }

  pushObjectStartFixed64(len1, len2, len3, len4) {
    const len = utils.buildInt64(len1, len2, len3, len4);

    this._createObjectStartFixed(len);
  }

  pushByteStringStart() {
    this._parents[this._depth] = {
      type: c.PARENT.BYTE_STRING,
      length: -1,
      ref: [],
      values: 0,
      tmpKey: null
    };
  }

  pushByteString(start, end) {
    this._push(this.createByteStringFromHeap(start, end));
  }

  pushUtf8StringStart() {
    this._parents[this._depth] = {
      type: c.PARENT.UTF8_STRING,
      length: -1,
      ref: [],
      values: 0,
      tmpKey: null
    };
  }

  pushUtf8String(start, end) {
    this._push(this.createUtf8StringFromHeap(start, end));
  }

  pushSimpleUnassigned(val) {
    this._push(this.createSimpleUnassigned(val));
  }

  pushTagStart(tag) {
    this._parents[this._depth] = {
      type: c.PARENT.TAG,
      length: 1,
      ref: [tag]
    };
  }

  pushTagStart4(f, g) {
    this.pushTagStart(utils.buildInt32(f, g));
  }

  pushTagStart8(f1, f2, g1, g2) {
    this.pushTagStart(utils.buildInt64(f1, f2, g1, g2));
  }

  pushTagUnassigned(tagNumber) {
    this._push(this.createTag(tagNumber));
  }

  pushBreak() {
    if (this._currentParent.length > -1) {
      throw new Error('Unexpected break');
    }

    this._closeParent();
  }

  _createObjectStartFixed(len) {
    if (len === 0) {
      this._push(this.createObject({}));

      return;
    }

    this._createParent({}, c.PARENT.OBJECT, len);
  }

  _createArrayStartFixed(len) {
    if (len === 0) {
      this._push(this.createArray([]));

      return;
    }

    this._createParent(new Array(len), c.PARENT.ARRAY, len);
  }

  _decode(input) {
    if (input.byteLength === 0) {
      throw new Error('Input too short');
    }

    this._reset();

    this._heap8.set(input);

    const code = this.parser.parse(input.byteLength);

    if (this._depth > 1) {
      while (this._currentParent.length === 0) {
        this._closeParent();
      }

      if (this._depth > 1) {
        throw new Error('Undeterminated nesting');
      }
    }

    if (code > 0) {
      throw new Error('Failed to parse');
    }

    if (this._res.length === 0) {
      throw new Error('No valid result');
    }
  } // -- Public Interface


  decodeFirst(input) {
    this._decode(input);

    return this._res[0];
  }

  decodeAll(input) {
    this._decode(input);

    return this._res;
  }
  /**
   * Decode the first cbor object.
   *
   * @param {Buffer|string} input
   * @param {string} [enc='hex'] - Encoding used if a string is passed.
   * @returns {*}
   */


  static decode(input, enc) {
    if (typeof input === 'string') {
      input = Buffer.from(input, enc || 'hex');
    }

    const dec = new Decoder({
      size: input.length
    });
    return dec.decodeFirst(input);
  }
  /**
   * Decode all cbor objects.
   *
   * @param {Buffer|string} input
   * @param {string} [enc='hex'] - Encoding used if a string is passed.
   * @returns {Array<*>}
   */


  static decodeAll(input, enc) {
    if (typeof input === 'string') {
      input = Buffer.from(input, enc || 'hex');
    }

    const dec = new Decoder({
      size: input.length
    });
    return dec.decodeAll(input);
  }

}

Decoder.decodeFirst = Decoder.decode;
module.exports = Decoder;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer, __webpack_require__(8)))

/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const constants = __webpack_require__(104);

const MT = constants.MT;
const SIMPLE = constants.SIMPLE;
const SYMS = constants.SYMS;
/**
 * A CBOR Simple Value that does not map onto a known constant.
 */

class Simple {
  /**
   * Creates an instance of Simple.
   *
   * @param {integer} value - the simple value's integer value
   */
  constructor(value) {
    if (typeof value !== 'number') {
      throw new Error('Invalid Simple type: ' + typeof value);
    }

    if (value < 0 || value > 255 || (value | 0) !== value) {
      throw new Error('value must be a small positive integer: ' + value);
    }

    this.value = value;
  }
  /**
   * Debug string for simple value
   *
   * @returns {string} simple(value)
   */


  toString() {
    return 'simple(' + this.value + ')';
  }
  /**
   * Debug string for simple value
   *
   * @returns {string} simple(value)
   */


  inspect() {
    return 'simple(' + this.value + ')';
  }
  /**
   * Push the simple value onto the CBOR stream
   *
   * @param {cbor.Encoder} gen The generator to push onto
   * @returns {number}
   */


  encodeCBOR(gen) {
    return gen._pushInt(this.value, MT.SIMPLE_FLOAT);
  }
  /**
   * Is the given object a Simple?
   *
   * @param {any} obj - object to test
   * @returns {bool} - is it Simple?
   */


  static isSimple(obj) {
    return obj instanceof Simple;
  }
  /**
   * Decode from the CBOR additional information into a JavaScript value.
   * If the CBOR item has no parent, return a "safe" symbol instead of
   * `null` or `undefined`, so that the value can be passed through a
   * stream in object mode.
   *
   * @param {Number} val - the CBOR additional info to convert
   * @param {bool} hasParent - Does the CBOR item have a parent?
   * @returns {(null|undefined|Boolean|Symbol)} - the decoded value
   */


  static decode(val, hasParent) {
    if (hasParent == null) {
      hasParent = true;
    }

    switch (val) {
      case SIMPLE.FALSE:
        return false;

      case SIMPLE.TRUE:
        return true;

      case SIMPLE.NULL:
        if (hasParent) {
          return null;
        } else {
          return SYMS.NULL;
        }

      case SIMPLE.UNDEFINED:
        if (hasParent) {
          return void 0;
        } else {
          return SYMS.UNDEFINED;
        }

      case -1:
        if (!hasParent) {
          throw new Error('Invalid BREAK');
        }

        return SYMS.BREAK;

      default:
        return new Simple(val);
    }
  }

}

module.exports = Simple;

/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * A CBOR tagged item, where the tag does not have semantics specified at the
 * moment, or those semantics threw an error during parsing. Typically this will
 * be an extension point you're not yet expecting.
 */

class Tagged {
  /**
   * Creates an instance of Tagged.
   *
   * @param {Number} tag - the number of the tag
   * @param {any} value - the value inside the tag
   * @param {Error} err - the error that was thrown parsing the tag, or null
   */
  constructor(tag, value, err) {
    this.tag = tag;
    this.value = value;
    this.err = err;

    if (typeof this.tag !== 'number') {
      throw new Error('Invalid tag type (' + typeof this.tag + ')');
    }

    if (this.tag < 0 || (this.tag | 0) !== this.tag) {
      throw new Error('Tag must be a positive integer: ' + this.tag);
    }
  }
  /**
   * Convert to a String
   *
   * @returns {String} string of the form '1(2)'
   */


  toString() {
    return "".concat(this.tag, "(").concat(JSON.stringify(this.value), ")");
  }
  /**
   * Push the simple value onto the CBOR stream
   *
   * @param {cbor.Encoder} gen The generator to push onto
   * @returns {number}
   */


  encodeCBOR(gen) {
    gen._pushTag(this.tag);

    return gen.pushAny(this.value);
  }
  /**
   * If we have a converter for this type, do the conversion.  Some converters
   * are built-in.  Additional ones can be passed in.  If you want to remove
   * a built-in converter, pass a converter in whose value is 'null' instead
   * of a function.
   *
   * @param {Object} converters - keys in the object are a tag number, the value
   *   is a function that takes the decoded CBOR and returns a JavaScript value
   *   of the appropriate type.  Throw an exception in the function on errors.
   * @returns {any} - the converted item
   */


  convert(converters) {
    var er, f;
    f = converters != null ? converters[this.tag] : void 0;

    if (typeof f !== 'function') {
      f = Tagged['_tag' + this.tag];

      if (typeof f !== 'function') {
        return this;
      }
    }

    try {
      return f.call(Tagged, this.value);
    } catch (error) {
      er = error;
      this.err = er;
      return this;
    }
  }

}

module.exports = Tagged;

/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const {
  URLWithLegacySupport,
  format,
  URLSearchParams,
  defaultBase
} = __webpack_require__(253);

const relative = __webpack_require__(549);

module.exports = {
  URL: URLWithLegacySupport,
  URLSearchParams,
  format,
  relative,
  defaultBase
};

/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const defaultBase = self.location ? self.location.protocol + '//' + self.location.host : '';
const URL = self.URL;

class URLWithLegacySupport {
  constructor(url, base = defaultBase) {
    this.super = new URL(url, base);
    this.path = this.pathname + this.search;
    this.auth = this.username && this.password ? this.username + ':' + this.password : null;
    this.query = this.search && this.search.startsWith('?') ? this.search.slice(1) : null;
  }

  get hash() {
    return this.super.hash;
  }

  get host() {
    return this.super.host;
  }

  get hostname() {
    return this.super.hostname;
  }

  get href() {
    return this.super.href;
  }

  get origin() {
    return this.super.origin;
  }

  get password() {
    return this.super.password;
  }

  get pathname() {
    return this.super.pathname;
  }

  get port() {
    return this.super.port;
  }

  get protocol() {
    return this.super.protocol;
  }

  get search() {
    return this.super.search;
  }

  get searchParams() {
    return this.super.searchParams;
  }

  get username() {
    return this.super.username;
  }

  set hash(hash) {
    this.super.hash = hash;
  }

  set host(host) {
    this.super.host = host;
  }

  set hostname(hostname) {
    this.super.hostname = hostname;
  }

  set href(href) {
    this.super.href = href;
  }

  set origin(origin) {
    this.super.origin = origin;
  }

  set password(password) {
    this.super.password = password;
  }

  set pathname(pathname) {
    this.super.pathname = pathname;
  }

  set port(port) {
    this.super.port = port;
  }

  set protocol(protocol) {
    this.super.protocol = protocol;
  }

  set search(search) {
    this.super.search = search;
  }

  set searchParams(searchParams) {
    this.super.searchParams = searchParams;
  }

  set username(username) {
    this.super.username = username;
  }

  createObjectURL(o) {
    return this.super.createObjectURL(o);
  }

  revokeObjectURL(o) {
    this.super.revokeObjectURL(o);
  }

  toJSON() {
    return this.super.toJSON();
  }

  toString() {
    return this.super.toString();
  }

  format() {
    return this.toString();
  }

}

function format(obj) {
  if (typeof obj === 'string') {
    const url = new URL(obj);
    return url.toString();
  }

  if (!(obj instanceof URL)) {
    const userPass = obj.username && obj.password ? "".concat(obj.username, ":").concat(obj.password, "@") : '';
    const auth = obj.auth ? obj.auth + '@' : '';
    const port = obj.port ? ':' + obj.port : '';
    const protocol = obj.protocol ? obj.protocol + '//' : '';
    const host = obj.host || '';
    const hostname = obj.hostname || '';
    const search = obj.search || (obj.query ? '?' + obj.query : '');
    const hash = obj.hash || '';
    const pathname = obj.pathname || '';
    const path = obj.path || pathname + search;
    return "".concat(protocol).concat(userPass || auth).concat(host || hostname + port).concat(path).concat(hash);
  }
}

module.exports = {
  URLWithLegacySupport,
  URLSearchParams: self.URLSearchParams,
  defaultBase,
  format
};

/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Node = __webpack_require__(551);

module.exports = isCircular;
/**
 * checks whether the object is circular
 * @param  {object}  obj - object to check circularity for
 * @return {Boolean} true if obj is circular, false if it is not
 */

function isCircular(obj) {
  if (!(obj instanceof Object)) {
    throw new TypeError('"obj" must be an object (or inherit from it)');
  }

  return _isCircular(obj);
}
/**
 * @private
 * checks whether the object is circular
 * @param  {object}  obj - object to check circularity for
 * @param  {Node}    parentList - linked-list that contains all the object's parents
 * @return {Boolean} true if obj is circular, false if it is not
 */


function _isCircular(obj, parentList) {
  parentList = new Node(obj, parentList); // breadth-first search for circular object

  for (var key in obj) {
    var val = obj[key];

    if (val instanceof Object) {
      if (parentList.contains(val) || _isCircular(val, parentList)) {
        return true;
      }
    }
  }

  return false;
}

/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const isMultiaddr = __webpack_require__(56).IPFS.matches;

exports.isValidMultiaddr = ma => {
  try {
    return isMultiaddr(ma);
  } catch (err) {
    return false;
  }
};

/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const extractDataFromBlock = __webpack_require__(150);

const validateOffsetAndLength = __webpack_require__(151);

const UnixFS = __webpack_require__(25);

const errCode = __webpack_require__(2);

function emitBytes(_x, _x2, _x3, _x4) {
  return _emitBytes.apply(this, arguments);
}

function _emitBytes() {
  _emitBytes = _wrapAsyncGenerator(function* (ipld, node, start, end, streamPosition = 0) {
    // a `raw` node
    if (Buffer.isBuffer(node)) {
      const buf = extractDataFromBlock(node, streamPosition, start, end);

      if (buf.length) {
        yield buf;
      }

      streamPosition += buf.length;
      return streamPosition;
    }

    let file;

    try {
      file = UnixFS.unmarshal(node.Data);
    } catch (err) {
      throw errCode(err, 'ERR_NOT_UNIXFS');
    } // might be a unixfs `raw` node or have data on intermediate nodes


    const nodeHasData = Boolean(file.data && file.data.length);

    if (nodeHasData) {
      const buf = extractDataFromBlock(file.data, streamPosition, start, end);

      if (buf.length) {
        yield buf;
      }

      streamPosition += file.data.length;
    }

    let childStart = streamPosition; // work out which child nodes contain the requested data

    for (let i = 0; i < node.Links.length; i++) {
      const childLink = node.Links[i];
      const childEnd = streamPosition + file.blockSizes[i];

      if (start >= childStart && start < childEnd || // child has offset byte
      end > childStart && end <= childEnd || // child has end byte
      start < childStart && end > childEnd) {
        // child is between offset and end bytes
        const child = yield _awaitAsyncGenerator(ipld.get(childLink.Hash));
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;

        var _iteratorError;

        try {
          for (var _iterator = _asyncIterator(emitBytes(ipld, child, start, end, streamPosition)), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
            const buf = _value;
            streamPosition += buf.length;
            yield buf;
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              yield _awaitAsyncGenerator(_iterator.return());
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }

      streamPosition = childEnd;
      childStart = childEnd + 1;
    }
  });
  return _emitBytes.apply(this, arguments);
}

const fileContent = (cid, node, unixfs, path, resolve, depth, ipld) => {
  return (options = {}) => {
    const fileSize = unixfs.fileSize();
    const {
      offset,
      length
    } = validateOffsetAndLength(fileSize, options.offset, options.length);
    const start = offset;
    const end = offset + length;
    return emitBytes(ipld, node, start, end);
  };
};

module.exports = fileContent;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const AbortController = __webpack_require__(61);

const retimer = __webpack_require__(152);

class TimeoutController extends AbortController {
  /**
   * @constructor
   * @param {number} ms milliseconds
   */
  constructor(ms) {
    super();
    this._ms = ms;
    this._timer = retimer(() => this.abort(), ms);
  }
  /**
   * Aborts the controller and clears the timer
   */


  abort() {
    this._timer.clear();

    return super.abort();
  }
  /**
   * Clears the timer
   */


  clear() {
    this._timer.clear();
  }
  /**
   * Resets the timer
   */


  reset() {
    this._timer.clear();

    this._timer = retimer(() => this.abort(), this._ms);
  }

}

module.exports = TimeoutController;
module.exports.TimeoutController = TimeoutController;

/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const getDefaultConfig = __webpack_require__(149);

const log = __webpack_require__(1)('ipfs:core:config');

module.exports = ({
  repo
}) => {
  return {
    get: repo.config.get,
    set: repo.config.set,
    replace: repo.config.set,
    profiles: {
      apply: applyProfile,
      list: listProfiles
    }
  };

  async function applyProfile(profileName, opts) {
    opts = opts || {};
    const {
      dryRun
    } = opts;
    const profile = profiles[profileName];

    if (!profile) {
      throw new Error("No profile with name '".concat(profileName, "' exists"));
    }

    try {
      const oldCfg = await repo.config.get();
      let newCfg = JSON.parse(JSON.stringify(oldCfg)); // clone

      newCfg = profile.transform(newCfg);

      if (!dryRun) {
        await repo.config.set(newCfg);
      } // Scrub private key from output


      delete oldCfg.Identity.PrivKey;
      delete newCfg.Identity.PrivKey;
      return {
        original: oldCfg,
        updated: newCfg
      };
    } catch (err) {
      log(err);
      throw new Error("Could not apply profile '".concat(profileName, "' to config: ").concat(err.message));
    }
  }
};

async function listProfiles(options) {
  // eslint-disable-line require-await
  return Object.keys(profiles).map(name => ({
    name,
    description: profiles[name].description
  }));
}

const profiles = {
  server: {
    description: 'Recommended for nodes with public IPv4 address (servers, VPSes, etc.), disables host and content discovery in local networks.',
    transform: config => {
      config.Discovery.MDNS.Enabled = false;
      config.Discovery.webRTCStar.Enabled = false;
      return config;
    }
  },
  'local-discovery': {
    description: 'Sets default values to fields affected by `server` profile, enables discovery in local networks.',
    transform: config => {
      config.Discovery.MDNS.Enabled = true;
      config.Discovery.webRTCStar.Enabled = true;
      return config;
    }
  },
  test: {
    description: 'Reduces external interference, useful for running ipfs in test environments. Note that with these settings node won\'t be able to talk to the rest of the network without manual bootstrap.',
    transform: config => {
      const defaultConfig = getDefaultConfig();
      config.Addresses.API = defaultConfig.Addresses.API ? '/ip4/127.0.0.1/tcp/0' : '';
      config.Addresses.Gateway = defaultConfig.Addresses.Gateway ? '/ip4/127.0.0.1/tcp/0' : '';
      config.Addresses.Swarm = defaultConfig.Addresses.Swarm.length ? ['/ip4/127.0.0.1/tcp/0'] : [];
      config.Bootstrap = [];
      config.Discovery.MDNS.Enabled = false;
      config.Discovery.webRTCStar.Enabled = false;
      return config;
    }
  },
  'default-networking': {
    description: 'Restores default network settings. Inverse profile of the `test` profile.',
    transform: config => {
      const defaultConfig = getDefaultConfig();
      config.Addresses.API = defaultConfig.Addresses.API;
      config.Addresses.Gateway = defaultConfig.Addresses.Gateway;
      config.Addresses.Swarm = defaultConfig.Addresses.Swarm;
      config.Bootstrap = defaultConfig.Bootstrap;
      config.Discovery.MDNS.Enabled = defaultConfig.Discovery.MDNS.Enabled;
      config.Discovery.webRTCStar.Enabled = defaultConfig.Discovery.webRTCStar.Enabled;
      return config;
    }
  },
  lowpower: {
    description: 'Reduces daemon overhead on the system. May affect node functionality,performance of content discovery and data fetching may be degraded. Recommended for low power systems.',
    transform: config => {
      config.Swarm = config.Swarm || {};
      config.Swarm.ConnMgr = config.Swarm.ConnMgr || {};
      config.Swarm.ConnMgr.LowWater = 20;
      config.Swarm.ConnMgr.HighWater = 40;
      return config;
    }
  },
  'default-power': {
    description: 'Inverse of "lowpower" profile.',
    transform: config => {
      const defaultConfig = getDefaultConfig();
      config.Swarm = defaultConfig.Swarm;
      return config;
    }
  }
};
module.exports.profiles = profiles;

/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const hashlru = __webpack_require__(156);
/**
 * Time Aware Least Recent Used Cache
 * @see https://arxiv.org/pdf/1801.00390
 * @todo move this to ipfs-utils or it's own package
 *
 * @class TLRU
 */


class TLRU {
  /**
   * Creates an instance of TLRU.
   *
   * @param {number} maxSize
   * @memberof TLRU
   */
  constructor(maxSize) {
    this.lru = hashlru(maxSize);
  }
  /**
   * Get the value from the a key
   *
   * @param {string} key
   * @returns {any}
   * @memberof TLRU
   */


  get(key) {
    const value = this.lru.get(key);

    if (value) {
      if (value.expire && value.expire < Date.now()) {
        this.lru.remove(key);
        return undefined;
      }

      return value.value;
    }

    return undefined;
  }
  /**
   * Set a key value pair
   *
   * @param {string} key
   * @param {any} value
   * @param {number} ttl - in miliseconds
   * @memberof TLRU
   */


  set(key, value, ttl) {
    this.lru.set(key, {
      value,
      expire: Date.now() + ttl
    });
  }
  /**
   * Find if the cache has the key
   *
   * @param {string} key
   * @returns {boolean}
   * @memberof TLRU
   */


  has(key) {
    const value = this.get(key);

    if (value) {
      return true;
    }

    return false;
  }
  /**
   * Remove key
   *
   * @param {string} key
   * @memberof TLRU
   */


  remove(key) {
    this.lru.remove(key);
  }
  /**
   * Clears the cache
   *
   * @memberof TLRU
   */


  clear() {
    this.lru.clear();
  }

}

module.exports = TLRU;

/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const mortice = __webpack_require__(261);

let lock;

module.exports = repoOwner => {
  if (lock) {
    return lock;
  }

  const mutex = mortice({
    // ordinarily the main thread would store the read/write lock but
    // if we are the thread that owns the repo, we can store the lock
    // on this process even if we are a worker thread
    singleProcess: repoOwner
  });
  lock = {
    readLock: func => {
      return async (...args) => {
        const releaseLock = await mutex.readLock();

        try {
          return await func.apply(null, args);
        } finally {
          releaseLock();
        }
      };
    },
    writeLock: func => {
      return async (...args) => {
        const releaseLock = await mutex.writeLock();

        try {
          return await func.apply(null, args);
        } finally {
          releaseLock();
        }
      };
    }
  };
  return lock;
};

/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

const node = __webpack_require__(581);

const browser = __webpack_require__(591);

const {
  default: Queue
} = __webpack_require__(50);

const {
  timeout
} = __webpack_require__(596);

const observe = __webpack_require__(264);

const mutexes = {};
let implementation;

function createReleaseable(queue, options) {
  let res;
  const p = new Promise(resolve => {
    res = resolve;
  });
  queue.add(() => timeout((() => {
    return new Promise(resolve => {
      res(() => {
        resolve();
      });
    });
  })(), options.timeout));
  return p;
}

const createMutex = (name, options) => {
  if (implementation.isWorker) {
    return {
      readLock: implementation.readLock(name, options),
      writeLock: implementation.writeLock(name, options)
    };
  }

  const masterQueue = new Queue({
    concurrency: 1
  });
  let readQueue = null;
  return {
    readLock: () => {
      // If there's already a read queue, just add the task to it
      if (readQueue) {
        return createReleaseable(readQueue, options);
      } // Create a new read queue


      readQueue = new Queue({
        concurrency: options.concurrency,
        autoStart: false
      });
      const localReadQueue = readQueue; // Add the task to the read queue

      const readPromise = createReleaseable(readQueue, options);
      masterQueue.add(() => {
        // Start the task only once the master queue has completed processing
        // any previous tasks
        localReadQueue.start(); // Once all the tasks in the read queue have completed, remove it so
        // that the next read lock will occur after any write locks that were
        // started in the interim

        return localReadQueue.onIdle().then(() => {
          if (readQueue === localReadQueue) {
            readQueue = null;
          }
        });
      });
      return readPromise;
    },
    writeLock: () => {
      // Remove the read queue reference, so that any later read locks will be
      // added to a new queue that starts after this write lock has been
      // released
      readQueue = null;
      return createReleaseable(masterQueue, options);
    }
  };
};

const defaultOptions = {
  concurrency: Infinity,
  timeout: 84600000,
  global: global,
  singleProcess: false
};

module.exports = (name, options) => {
  if (!options) {
    options = {};
  }

  if (typeof name === 'object') {
    options = name;
    name = 'lock';
  }

  if (!name) {
    name = 'lock';
  }

  options = Object.assign({}, defaultOptions, options);

  if (!implementation) {
    implementation = node(options) || browser(options);

    if (!implementation.isWorker) {
      // we are master, set up worker requests
      implementation.on('requestReadLock', (name, fn) => {
        if (!mutexes[name]) {
          return;
        }

        mutexes[name].readLock().then(release => fn().finally(() => release()));
      });
      implementation.on('requestWriteLock', async (name, fn) => {
        if (!mutexes[name]) {
          return;
        }

        mutexes[name].writeLock().then(release => fn().finally(() => release()));
      });
    }
  }

  if (!mutexes[name]) {
    mutexes[name] = createMutex(name, options);
  }

  return mutexes[name];
};

module.exports.Worker = function (script, Impl) {
  Impl = Impl || global.Worker;
  let worker;

  try {
    worker = new Impl(script);
  } catch (error) {
    if (error.message.includes('not a constructor')) {
      worker = Impl(script);
    }
  }

  if (!worker) {
    throw new Error('Could not create Worker from', Impl);
  }

  observe(worker);
  return worker;
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(8)))

/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(582);

/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  WORKER_REQUEST_READ_LOCK: 'lock:worker:request-read',
  WORKER_RELEASE_READ_LOCK: 'lock:worker:release-read',
  MASTER_GRANT_READ_LOCK: 'lock:master:grant-read',
  WORKER_REQUEST_WRITE_LOCK: 'lock:worker:request-write',
  WORKER_RELEASE_WRITE_LOCK: 'lock:worker:release-write',
  MASTER_GRANT_WRITE_LOCK: 'lock:master:grant-write'
};

/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const events = {};

const observable = worker => {
  worker.addEventListener('message', event => {
    observable.dispatchEvent('message', worker, event);
  });

  if (worker.port) {
    worker.port.addEventListener('message', event => {
      observable.dispatchEvent('message', worker, event);
    });
  }
};

observable.addEventListener = (type, fn) => {
  if (!events[type]) {
    events[type] = [];
  }

  events[type].push(fn);
};

observable.removeEventListener = (type, fn) => {
  if (!events[type]) {
    return;
  }

  events[type] = events[type].filter(listener => listener === fn);
};

observable.dispatchEvent = function () {
  const args = Array.prototype.slice.call(arguments);
  const type = args.shift();

  if (!events[type]) {
    return;
  }

  events[type].forEach(fn => fn.apply(null, args));
};

module.exports = observable;

/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var keys = __webpack_require__(593);

var hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';
var toStr = Object.prototype.toString;
var concat = Array.prototype.concat;
var origDefineProperty = Object.defineProperty;

var isFunction = function isFunction(fn) {
  return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
};

var arePropertyDescriptorsSupported = function arePropertyDescriptorsSupported() {
  var obj = {};

  try {
    origDefineProperty(obj, 'x', {
      enumerable: false,
      value: obj
    }); // eslint-disable-next-line no-unused-vars, no-restricted-syntax

    for (var _ in obj) {
      // jscs:ignore disallowUnusedVariables
      return false;
    }

    return obj.x === obj;
  } catch (e) {
    /* this is IE 8. */
    return false;
  }
};

var supportsDescriptors = origDefineProperty && arePropertyDescriptorsSupported();

var defineProperty = function defineProperty(object, name, value, predicate) {
  if (name in object && (!isFunction(predicate) || !predicate())) {
    return;
  }

  if (supportsDescriptors) {
    origDefineProperty(object, name, {
      configurable: true,
      enumerable: false,
      value: value,
      writable: true
    });
  } else {
    object[name] = value;
  }
};

var defineProperties = function defineProperties(object, map) {
  var predicates = arguments.length > 2 ? arguments[2] : {};
  var props = keys(map);

  if (hasSymbols) {
    props = concat.call(props, Object.getOwnPropertySymbols(map));
  }

  for (var i = 0; i < props.length; i += 1) {
    defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
  }
};

defineProperties.supportsDescriptors = !!supportsDescriptors;
module.exports = defineProperties;

/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var toStr = Object.prototype.toString;

module.exports = function isArguments(value) {
  var str = toStr.call(value);
  var isArgs = str === '[object Arguments]';

  if (!isArgs) {
    isArgs = str !== '[object Array]' && value !== null && typeof value === 'object' && typeof value.length === 'number' && value.length >= 0 && toStr.call(value.callee) === '[object Function]';
  }

  return isArgs;
};

/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint no-negated-condition: 0, no-new-func: 0 */


if (typeof self !== 'undefined') {
  module.exports = self;
} else if (typeof window !== 'undefined') {
  module.exports = window;
} else {
  module.exports = Function('return this')();
}

/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var implementation = __webpack_require__(267);

module.exports = function getPolyfill() {
  if (typeof global !== 'object' || !global || global.Math !== Math || global.Array !== Array) {
    return implementation;
  }

  return global;
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(8)))

/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const CID = __webpack_require__(3);

const UnixFs = __webpack_require__(25);

const {
  DAGNode
} = __webpack_require__(12);

const log = __webpack_require__(1)('ipfs:mfs:utils:with-mfs-root');

const mc = __webpack_require__(15);

const mh = __webpack_require__(16);

const {
  MFS_ROOT_KEY
} = __webpack_require__(34);

const loadMfsRoot = async context => {
  // Open the repo if it's been closed
  await context.repo.datastore.open(); // Load the MFS root CID

  let cid;

  try {
    const buf = await context.repo.datastore.get(MFS_ROOT_KEY);
    cid = new CID(buf);
  } catch (err) {
    if (err.code !== 'ERR_NOT_FOUND') {
      throw err;
    }

    log('Creating new MFS root');
    const node = new DAGNode(new UnixFs({
      type: 'directory'
    }).marshal());
    cid = await context.ipld.put(node, mc.DAG_PB, {
      cidVersion: 0,
      hashAlg: mh.names['sha2-256'] // why can't ipld look this up?

    });
    await context.repo.datastore.put(MFS_ROOT_KEY, cid.buffer);
  }

  log("Loaded MFS root /ipfs/".concat(cid));
  return cid;
};

module.exports = loadMfsRoot;

/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const {
  DAGNode
} = __webpack_require__(12);

const Bucket = __webpack_require__(146);

const DirSharded = __webpack_require__(145);

const log = __webpack_require__(1)('ipfs:mfs:core:utils:hamt-utils');

const UnixFS = __webpack_require__(25);

const mc = __webpack_require__(15);

const mh = __webpack_require__(16);

const last = __webpack_require__(81);

const updateHamtDirectory = async (context, links, bucket, options) => {
  // update parent with new bit field
  const data = Buffer.from(bucket._children.bitField().reverse());
  const node = UnixFS.unmarshal(options.parent.Data);
  const dir = new UnixFS({
    type: 'hamt-sharded-directory',
    data,
    fanout: bucket.tableSize(),
    hashType: DirSharded.hashFn.code,
    mode: node.mode,
    mtime: node.mtime
  });
  const hashAlg = mh.names[options.hashAlg];
  const parent = new DAGNode(dir.marshal(), links);
  const cid = await context.ipld.put(parent, mc.DAG_PB, {
    cidVersion: options.cidVersion,
    hashAlg,
    onlyHash: !options.flush
  });
  return {
    node: parent,
    cid,
    size: parent.size
  };
};

const recreateHamtLevel = async (links, rootBucket, parentBucket, positionAtParent) => {
  // recreate this level of the HAMT
  const bucket = new Bucket({
    hashFn: DirSharded.hashFn,
    hash: parentBucket ? parentBucket._options.hash : undefined
  }, parentBucket, positionAtParent);

  if (parentBucket) {
    parentBucket._putObjectAt(positionAtParent, bucket);
  }

  await addLinksToHamtBucket(links, bucket, rootBucket);
  return bucket;
};

const addLinksToHamtBucket = async (links, bucket, rootBucket) => {
  await Promise.all(links.map(link => {
    if (link.Name.length === 2) {
      const pos = parseInt(link.Name, 16);

      bucket._putObjectAt(pos, new Bucket({
        hashFn: DirSharded.hashFn
      }, bucket, pos));

      return Promise.resolve();
    }

    return (rootBucket || bucket).put(link.Name.substring(2), {
      size: link.TSize,
      cid: link.Hash
    });
  }));
};

const toPrefix = position => {
  return position.toString('16').toUpperCase().padStart(2, '0').substring(0, 2);
};

const generatePath = async (context, fileName, rootNode) => {
  // start at the root bucket and descend, loading nodes as we go
  const rootBucket = await recreateHamtLevel(rootNode.Links, null, null, null);
  const position = await rootBucket._findNewBucketAndPos(fileName); // the path to the root bucket

  const path = [{
    bucket: position.bucket,
    prefix: toPrefix(position.pos)
  }];
  let currentBucket = position.bucket;

  while (currentBucket !== rootBucket) {
    path.push({
      bucket: currentBucket,
      prefix: toPrefix(currentBucket._posAtParent)
    });
    currentBucket = currentBucket._parent;
  }

  path.reverse();
  path[0].node = rootNode; // load DAGNode for each path segment

  for (let i = 0; i < path.length; i++) {
    const segment = path[i]; // find prefix in links

    const link = segment.node.Links.filter(link => link.Name.substring(0, 2) === segment.prefix).pop(); // entry was not in shard

    if (!link) {
      // reached bottom of tree, file will be added to the current bucket
      log("Link ".concat(segment.prefix).concat(fileName, " will be added")); // return path

      continue;
    } // found entry


    if (link.Name === "".concat(segment.prefix).concat(fileName)) {
      log("Link ".concat(segment.prefix).concat(fileName, " will be replaced")); // file already existed, file will be added to the current bucket
      // return path

      continue;
    } // found subshard


    log("Found subshard ".concat(segment.prefix));
    const node = await context.ipld.get(link.Hash); // subshard hasn't been loaded, descend to the next level of the HAMT

    if (!path[i + 1]) {
      log("Loaded new subshard ".concat(segment.prefix));
      await recreateHamtLevel(node.Links, rootBucket, segment.bucket, parseInt(segment.prefix, 16));
      const position = await rootBucket._findNewBucketAndPos(fileName); // i--

      path.push({
        bucket: position.bucket,
        prefix: toPrefix(position.pos),
        node: node
      });
      continue;
    }

    const nextSegment = path[i + 1]; // add intermediate links to bucket

    await addLinksToHamtBucket(node.Links, nextSegment.bucket, rootBucket);
    nextSegment.node = node;
  }

  await rootBucket.put(fileName, true);
  path.reverse();
  return {
    rootBucket,
    path
  };
};

const createShard = async (context, contents, options) => {
  const shard = new DirSharded({
    root: true,
    dir: true,
    parent: null,
    parentKey: null,
    path: '',
    dirty: true,
    flat: false,
    mtime: options.mtime,
    mode: options.mode
  }, _objectSpread({}, options, {
    codec: 'dag-pb'
  }));

  for (let i = 0; i < contents.length; i++) {
    await shard._bucket.put(contents[i].name, {
      size: contents[i].size,
      cid: contents[i].cid
    });
  }

  return last(shard.flush('', context.ipld, null));
};

module.exports = {
  generatePath,
  updateHamtDirectory,
  recreateHamtLevel,
  addLinksToHamtBucket,
  toPrefix,
  createShard
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 271 */
/***/ (function(module) {

module.exports = JSON.parse("{\"name\":\"ipfs\",\"version\":\"0.40.0\",\"description\":\"JavaScript implementation of the IPFS specification\",\"keywords\":[\"IPFS\"],\"homepage\":\"https://js.ipfs.io\",\"bugs\":\"https://github.com/ipfs/js-ipfs/issues\",\"license\":\"(Apache-2.0 OR MIT)\",\"leadMaintainer\":\"Alan Shaw <alan@tableflip.io>\",\"files\":[\"src\",\"dist\"],\"main\":\"src/core/index.js\",\"browser\":{\"./src/core/runtime/init-assets-nodejs.js\":\"./src/core/runtime/init-assets-browser.js\",\"./src/core/runtime/config-nodejs.js\":\"./src/core/runtime/config-browser.js\",\"./src/core/runtime/dns-nodejs.js\":\"./src/core/runtime/dns-browser.js\",\"./src/core/runtime/libp2p-nodejs.js\":\"./src/core/runtime/libp2p-browser.js\",\"./src/core/runtime/libp2p-pubsub-routers-nodejs.js\":\"./src/core/runtime/libp2p-pubsub-routers-browser.js\",\"./src/core/runtime/preload-nodejs.js\":\"./src/core/runtime/preload-browser.js\",\"./src/core/runtime/repo-nodejs.js\":\"./src/core/runtime/repo-browser.js\",\"./src/core/runtime/ipld-nodejs.js\":\"./src/core/runtime/ipld-browser.js\",\"./test/utils/create-repo-nodejs.js\":\"./test/utils/create-repo-browser.js\",\"stream\":\"readable-stream\",\"ipfs-utils/src/files/glob-source\":false},\"browser-all-ipld-formats\":{\"./src/core/runtime/ipld-browser.js\":\"./src/core/runtime/ipld-browser-all.js\"},\"bin\":{\"jsipfs\":\"src/cli/bin.js\"},\"repository\":\"github:ipfs/js-ipfs\",\"scripts\":{\"lint\":\"aegir lint\",\"build\":\"aegir build\",\"test\":\"aegir test\",\"test:node\":\"aegir test -t node\",\"test:browser\":\"aegir test -t browser\",\"test:webworker\":\"aegir test -t webworker\",\"test:electron\":\"aegir test -t electron-main  -t electron-renderer\",\"test:electron-main\":\"aegir test -t electron-main\",\"test:electron-renderer\":\"aegir test -t electron-renderer\",\"test:node:core\":\"aegir test -t node -f test/core/**/*.js\",\"test:node:http\":\"aegir test -t node -f test/http-api/index.js\",\"test:node:gateway\":\"aegir test -t node -f test/gateway/index.js\",\"test:node:cli\":\"aegir test -t node -f test/cli/index.js\",\"test:node:interface\":\"aegir test -t node -f test/core/interface.spec.js\",\"test:bootstrapers\":\"IPFS_TEST=bootstrapers aegir test -t browser -f test/bootstrapers.js\",\"test:interop\":\"IPFS_JS_EXEC=$PWD/src/cli/bin.js IPFS_JS_MODULE=$PWD IPFS_REUSEPORT=false ipfs-interop\",\"test:interop:node\":\"IPFS_JS_EXEC=$PWD/src/cli/bin.js IPFS_JS_MODULE=$PWD IPFS_REUSEPORT=false ipfs-interop -- -t node\",\"test:interop:browser\":\"IPFS_JS_EXEC=$PWD/src/cli/bin.js IPFS_JS_MODULE=$PWD IPFS_REUSEPORT=false ipfs-interop -- -t browser\",\"test:interop:electron-main\":\"IPFS_JS_EXEC=$PWD/src/cli/bin.js IPFS_JS_MODULE=$PWD IPFS_REUSEPORT=false ipfs-interop -- -t electron-main -f ./test/node.js\",\"test:interop:electron-renderer\":\"IPFS_JS_EXEC=$PWD/src/cli/bin.js IPFS_JS_MODULE=$PWD IPFS_REUSEPORT=false ipfs-interop -- -t electron-renderer -f ./test/browser.js\",\"test:external\":\"aegir test-external\",\"coverage\":\"nyc --reporter=text --reporter=lcov npm run test:node\",\"benchmark\":\"echo \\\"Error: no benchmarks yet\\\" && exit 1\",\"benchmark:node\":\"echo \\\"Error: no benchmarks yet\\\" && exit 1\",\"benchmark:node:core\":\"echo \\\"Error: no benchmarks yet\\\" && exit 1\",\"benchmark:node:http\":\"echo \\\"Error: no benchmarks yet\\\" && exit 1\",\"benchmark:browser\":\"echo \\\"Error: no benchmarks yet\\\" && exit 1\",\"release\":\"aegir release -t node -t browser --no-docs\",\"release-minor\":\"aegir release --type minor -t node -t browser --no-docs\",\"release-major\":\"aegir release --type major -t node -t browser --no-docs\"},\"dependencies\":{\"@hapi/ammo\":\"^4.0.0\",\"@hapi/boom\":\"^7.4.3\",\"@hapi/hapi\":\"^18.3.2\",\"@hapi/joi\":\"^15.0.0\",\"abort-controller\":\"^3.0.0\",\"any-signal\":\"^1.1.0\",\"array-shuffle\":\"^1.0.1\",\"bignumber.js\":\"^9.0.0\",\"binary-querystring\":\"~0.1.2\",\"bl\":\"^4.0.0\",\"bs58\":\"^4.0.1\",\"byteman\":\"^1.3.5\",\"cid-tool\":\"~0.4.0\",\"cids\":\"^0.7.2\",\"class-is\":\"^1.1.0\",\"dag-cbor-links\":\"^1.3.2\",\"datastore-core\":\"~0.7.0\",\"datastore-level\":\"^0.14.1\",\"datastore-pubsub\":\"^0.3.0\",\"debug\":\"^4.1.0\",\"dlv\":\"^1.1.3\",\"err-code\":\"^2.0.0\",\"file-type\":\"^12.0.1\",\"fnv1a\":\"^1.0.1\",\"get-folder-size\":\"^2.0.0\",\"hapi-pino\":\"^6.1.0\",\"hashlru\":\"^2.3.0\",\"interface-datastore\":\"~0.8.0\",\"ipfs-bitswap\":\"^0.27.0\",\"ipfs-block\":\"~0.8.1\",\"ipfs-block-service\":\"~0.16.0\",\"ipfs-http-client\":\"^42.0.0\",\"ipfs-http-response\":\"^0.5.0\",\"ipfs-mfs\":\"^1.0.0\",\"ipfs-multipart\":\"^0.3.0\",\"ipfs-repo\":\"^0.30.0\",\"ipfs-unixfs\":\"^0.3.0\",\"ipfs-unixfs-exporter\":\"^0.41.0\",\"ipfs-unixfs-importer\":\"^0.44.0\",\"ipfs-utils\":\"^0.7.1\",\"ipld\":\"~0.25.0\",\"ipld-bitcoin\":\"~0.3.0\",\"ipld-dag-cbor\":\"~0.15.0\",\"ipld-dag-pb\":\"~0.18.0\",\"ipld-ethereum\":\"^4.0.0\",\"ipld-git\":\"~0.5.0\",\"ipld-raw\":\"^4.0.0\",\"ipld-zcash\":\"~0.4.0\",\"ipns\":\"^0.7.0\",\"is-domain-name\":\"^1.0.1\",\"is-ipfs\":\"~0.6.1\",\"it-all\":\"^1.0.1\",\"it-concat\":\"^1.0.0\",\"it-glob\":\"0.0.7\",\"it-last\":\"^1.0.1\",\"it-pipe\":\"^1.1.0\",\"it-to-stream\":\"^0.1.1\",\"iterable-ndjson\":\"^1.1.0\",\"jsondiffpatch\":\"~0.3.11\",\"just-safe-set\":\"^2.1.0\",\"ky\":\"^0.15.0\",\"ky-universal\":\"~0.3.0\",\"libp2p\":\"^0.27.1\",\"libp2p-bootstrap\":\"^0.10.2\",\"libp2p-crypto\":\"^0.17.1\",\"libp2p-delegated-content-routing\":\"^0.4.1\",\"libp2p-delegated-peer-routing\":\"^0.4.0\",\"libp2p-floodsub\":\"^0.20.0\",\"libp2p-gossipsub\":\"^0.2.3\",\"libp2p-kad-dht\":\"^0.18.3\",\"libp2p-keychain\":\"^0.6.0\",\"libp2p-mdns\":\"^0.13.0\",\"libp2p-mplex\":\"^0.9.3\",\"libp2p-record\":\"~0.7.0\",\"libp2p-secio\":\"^0.12.1\",\"libp2p-tcp\":\"^0.14.2\",\"libp2p-webrtc-star\":\"^0.17.6\",\"libp2p-websockets\":\"^0.13.0\",\"mafmt\":\"^7.0.0\",\"merge-options\":\"^2.0.0\",\"mortice\":\"^2.0.0\",\"multiaddr\":\"^7.2.1\",\"multiaddr-to-uri\":\"^5.1.0\",\"multibase\":\"~0.6.0\",\"multicodec\":\"^1.0.0\",\"multihashes\":\"~0.4.14\",\"multihashing-async\":\"^0.8.0\",\"p-defer\":\"^3.0.0\",\"p-queue\":\"^6.1.0\",\"parse-duration\":\"^0.1.2\",\"peer-id\":\"^0.13.5\",\"peer-info\":\"^0.17.0\",\"pretty-bytes\":\"^5.3.0\",\"progress\":\"^2.0.1\",\"protons\":\"^1.0.1\",\"semver\":\"^7.1.2\",\"stream-to-it\":\"^0.2.0\",\"streaming-iterables\":\"^4.1.1\",\"tar-stream\":\"^2.0.0\",\"temp\":\"~0.9.0\",\"timeout-abort-controller\":\"^1.1.0\",\"update-notifier\":\"^4.0.0\",\"uri-to-multiaddr\":\"^3.0.2\",\"varint\":\"^5.0.0\",\"yargs\":\"^15.0.1\",\"yargs-promise\":\"^1.1.0\"},\"devDependencies\":{\"aegir\":\"^20.5.1\",\"base64url\":\"^3.0.1\",\"clear-module\":\"^4.0.0\",\"delay\":\"^4.1.0\",\"dir-compare\":\"^1.7.3\",\"execa\":\"^3.0.0\",\"form-data\":\"^3.0.0\",\"go-ipfs-dep\":\"^0.4.23\",\"hat\":\"0.0.3\",\"interface-ipfs-core\":\"^0.131.7\",\"ipfs-interop\":\"github:ipfs/interop#refactor/async-await\",\"ipfsd-ctl\":\"github:ipfs/js-ipfsd-ctl#remove-option-normalisation\",\"ncp\":\"^2.0.0\",\"p-event\":\"^4.1.0\",\"p-map\":\"^3.0.0\",\"qs\":\"^6.5.2\",\"rimraf\":\"^3.0.0\",\"sinon\":\"^7.4.2\",\"stream-to-promise\":\"^2.2.0\",\"temp-write\":\"^4.0.0\"},\"optionalDependencies\":{\"prom-client\":\"^11.5.3\",\"prometheus-gc-stats\":\"~0.6.0\"},\"engines\":{\"node\":\">=10.0.0\",\"npm\":\">=6.0.0\"},\"contributors\":[\"0xflotus <0xflotus@gmail.com>\",\"A_A <21040751+Otto-AA@users.noreply.github.com>\",\"Adam Uhlíř <adam@uhlir.dev>\",\"Alan Shaw <alan.shaw@protocol.ai>\",\"Alan Shaw <alan@tableflip.io>\",\"Alex North <alex@alexnorth.me>\",\"Alex Potsides <alex@achingbrain.net>\",\"Andrew Nesbitt <andrewnez@gmail.com>\",\"Andrew de Andrade <andrew@deandrade.com.br>\",\"André Cruz <andremiguelcruz@msn.com>\",\"Arkadiy Kukarkin <parkan@users.noreply.github.com>\",\"Arpit Agarwal <93arpit@gmail.com>\",\"Arpit Agarwal <atvanguard@users.noreply.github.com>\",\"Bernard Mordan <bernard@tableflip.io>\",\"Brian Vander Schaaf <bvs330@gmail.com>\",\"Bruno Zell <bruno.zzell@gmail.com>\",\"CHEVALAY JOSSELIN <josselin54.chevalay@gmail.com>\",\"Caio Gondim <me@caiogondim.com>\",\"Chance Hudson <jchancehud@gmail.com>\",\"Chirag Shinde <chirag-shinde@users.noreply.github.com>\",\"Christian Couder <chriscool@tuxfamily.org>\",\"Dafeng <dfguo.joe@gmail.com>\",\"Dan Ordille <dordille@gmail.com>\",\"Dan Shields <35669742+NukeManDan@users.noreply.github.com>\",\"Daniel Buchner <danieljb2@gmail.com>\",\"Daniel J. O'Quinn <danieljoquinn@gmail.com>\",\"Daniela Borges Matos de Carvalho <alunassertiva@gmail.com>\",\"David Dias <daviddias.p@gmail.com>\",\"David Gilbertson <gilbertson.david@gmail.com>\",\"David da Silva <dasilvacontin@gmail.com>\",\"Diogo Silva <fsdiogo@gmail.com>\",\"Dmitriy Ryajov <dryajov@gmail.com>\",\"Dominic Della Valle <ddvpublic@Gmail.com>\",\"Dzmitry Bachko <dbachko@gmail.com>\",\"Enrico Marino <enrico.marino@email.com>\",\"Faheel Ahmad <faheel@live.in>\",\"Felix Yan <felixonmars@archlinux.org>\",\"Francisco Baio Dias <xicombd@gmail.com>\",\"Francisco Baio Dias <francisco@typeform.com>\",\"Friedel Ziegelmayer <dignifiedquire@gmail.com>\",\"Gar <gar+gh@danger.computer>\",\"Georgios Rassias <georassias@gmail.com>\",\"Gorka Ludlow <gorka@aquigorka.com>\",\"Grant Herman <grantlouisherman041@gmail.com>\",\"Greenkeeper <support@greenkeeper.io>\",\"Haad <haadcode@users.noreply.github.com>\",\"Haoliang Yu <haoliangyu@users.noreply.github.com>\",\"Harsh Vakharia <harshjv@users.noreply.github.com>\",\"Henrique Dias <hacdias@gmail.com>\",\"Henry Rodrick <moshisushi@gmail.com>\",\"Heo Sangmin <heo@mapiacompany.com>\",\"Hugo Dias <hugomrdias@gmail.com>\",\"Hugo Dias <mail@hugodias.me>\",\"Irakli Gozalishvili <contact@gozala.io>\",\"Jacob Heun <jacobheun@gmail.com>\",\"Jacob Heun <jake@andyet.net>\",\"Jade Meskill <jade.meskill@gmail.com>\",\"Jessica Schilling <jessica@protocol.ai>\",\"Johannes Wikner <johannes.wikner@gmail.com>\",\"Jon Schlinkert <dev@sellside.com>\",\"Jonathan <jkrone@vt.edu>\",\"Jonybang <Jonybange@gmail.com>\",\"João Antunes <j.goncalo.antunes@gmail.com>\",\"João Santos <joaosantos15@users.noreply.github.com>\",\"Kevin Wang <kevin@fossa.io>\",\"Lars Gierth <larsg@systemli.org>\",\"Lukas Drgon <lukas.drgon@gmail.com>\",\"Maciej Krüger <mkg20001@gmail.com>\",\"Marcin Rataj <lidel@lidel.org>\",\"Marcus Bernales <mboperator@gmail.com>\",\"Marius Darila <marius.darila@gmail.com>\",\"Mark Robert Henderson <henderson.mark@gmail.com>\",\"Mat Kelly <machawk1@gmail.com>\",\"Michelle Lee <michelle@protocol.ai>\",\"Mikeal Rogers <mikeal.rogers@gmail.com>\",\"Mithgol <getgit@mithgol.ru>\",\"Molly <momack2@users.noreply.github.com>\",\"Mounish Sai <pvsmounish@gmail.com>\",\"My9Bot <34904312+My9Bot@users.noreply.github.com>\",\"Nick Poulden <nick@poulden.com>\",\"Nitin Patel <31539366+niinpatel@users.noreply.github.com>\",\"Nuno Nogueira <nunofmn@gmail.com>\",\"Oli Evans <oli@tableflip.io>\",\"Oskar Nyberg <oskar@oskarnyberg.com>\",\"Pascal Precht <pascal.precht@googlemail.com>\",\"Pau Ramon Revilla <masylum@gmail.com>\",\"Paulo Rodrigues <me@paulogr.com>\",\"Pedro Teixeira <i@pgte.me>\",\"Portia Burton <plburton@gmail.com>\",\"Prabhakar Poudel <yuvrajzohan@gmail.com>\",\"Qmstream <51881352+Qmstream@users.noreply.github.com>\",\"Raoul Millais <raoul@raoulmillais.com>\",\"RasmusErik Voel Jensen <github@solsort.com>\",\"Richard Littauer <richard.littauer@gmail.com>\",\"Richard Schneider <makaretu@gmail.com>\",\"Rob Brackett <rob@robbrackett.com>\",\"Rod Keys <rod@zokos.com>\",\"Sangwon Hong <qpakzk@gmail.com>\",\"Sid Harder <sideharder@gmail.com>\",\"SidHarder <softwarenavigator@gmail.com>\",\"Stephen Whitmore <stephen.whitmore@gmail.com>\",\"Stephen Whitmore <noffle@users.noreply.github.com>\",\"Steven Allen <steven@stebalien.com>\",\"Terence Pae <terencepae@gmail.com>\",\"Teri Chadbourne <terichadbourne@users.noreply.github.com>\",\"Travis CI <travis@travis-ci.org>\",\"Uroš Jurglič <jurglic@gmail.com>\",\"Vasco Santos <vasco.santos@moxy.studio>\",\"Vasco Santos <vasco.santos@ua.pt>\",\"Vincent Martin <vince@finalatomicbuster.net>\",\"Volker Mische <volker.mische@gmail.com>\",\"Xiao Liang <yxliang01@users.noreply.github.com>\",\"Yahya <ya7yaz@gmail.com>\",\"Yole <yole@ultiledger.io>\",\"bitspill <bitspill+github@bitspill.net>\",\"datafatmunger <jbg@peerparty.org>\",\"dirkmc <dirkmdev@gmail.com>\",\"dirkmc <dirk@mccormick.cx>\",\"greenkeeper[bot] <23040076+greenkeeper[bot]@users.noreply.github.com>\",\"greenkeeper[bot] <greenkeeper[bot]@users.noreply.github.com>\",\"haad <haad@headbanggames.com>\",\"hapsody <hapsody@gmail.com>\",\"jbenet <juan@benet.ai>\",\"jonahweissman <19804455+jonahweissman@users.noreply.github.com>\",\"kevingzhang <kevin.zhang.canada@gmail.com>\",\"kumavis <kumavis@users.noreply.github.com>\",\"nginnever <ginneversource@gmail.com>\",\"npmcdn-to-unpkg-bot <npmcdn-to-unpkg-bot@users.noreply.github.com>\",\"reasv <7143787+reasv@users.noreply.github.com>\",\"robbsolter <35879806+robbsolter@users.noreply.github.com>\",\"seungwon-kang <ksw3894@gmail.com>\",\"swedneck <40505480+swedneck@users.noreply.github.com>\",\"tcme <hi@this-connect.me>\",\"victorbjelkholm <victorbjelkholm@gmail.com>\",\"Łukasz Magiera <magik6k@users.noreply.github.com>\",\"Максим Ильин <negamaxi@gmail.com>\"]}");

/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = get;
/*
  const obj = {a: {aa: {aaa: 2}}, b: 4};

  get(obj, 'a.aa.aaa'); // 2
  get(obj, ['a', 'aa', 'aaa']); // 2

  get(obj, 'b.bb.bbb'); // undefined
  get(obj, ['b', 'bb', 'bbb']); // undefined

  get(obj.a, 'aa.aaa'); // 2
  get(obj.a, ['aa', 'aaa']); // 2

  get(obj.b, 'bb.bbb'); // undefined
  get(obj.b, ['bb', 'bbb']); // undefined

  get(obj.b, 'bb.bbb', 42); // 42
  get(obj.b, ['bb', 'bbb'], 42); // 42

  get(null, 'a'); // undefined
  get(undefined, ['a']); // undefined

  get(null, 'a', 42); // 42
  get(undefined, ['a'], 42); // 42

  const obj = {a: {}};
  const sym = Symbol();
  obj.a[sym] = 4;
  get(obj.a, sym); // 4
*/

function get(obj, propsArg, defaultValue) {
  if (!obj) {
    return defaultValue;
  }

  var props, prop;

  if (Array.isArray(propsArg)) {
    props = propsArg.slice(0);
  }

  if (typeof propsArg == 'string') {
    props = propsArg.split('.');
  }

  if (typeof propsArg == 'symbol') {
    props = [propsArg];
  }

  if (!Array.isArray(props)) {
    throw new Error('props arg must be an array, a string or a symbol');
  }

  while (props.length) {
    prop = props.shift();

    if (!obj) {
      return defaultValue;
    }

    obj = obj[prop];

    if (obj === undefined) {
      return defaultValue;
    }
  }

  return obj;
}

/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Exception raised when trying to revert migration that is not possible
 * to revert.
 */

class NonReversibleMigrationError extends Error {
  constructor(message) {
    super(message);
    this.name = 'NonReversibleMigrationError';
    this.code = 'ERR_NON_REVERSIBLE_MIGRATION';
    this.message = message;
  }

}

NonReversibleMigrationError.code = 'ERR_NON_REVERSIBLE_MIGRATION';
exports.NonReversibleMigrationError = NonReversibleMigrationError;
/**
 * Exception raised when repo is not initialized.
 */

class NotInitializedRepoError extends Error {
  constructor(message) {
    super(message);
    this.name = 'NotInitializedRepoError';
    this.code = 'ERR_NOT_INITIALIZED_REPO';
    this.message = message;
  }

}

NotInitializedRepoError.code = 'ERR_NOT_INITIALIZED_REPO';
exports.NotInitializedRepoError = NotInitializedRepoError;
/**
 * Exception raised when required parameter is not provided.
 */

class RequiredParameterError extends Error {
  constructor(message) {
    super(message);
    this.name = 'RequiredParameterError';
    this.code = 'ERR_REQUIRED_PARAMETER';
    this.message = message;
  }

}

RequiredParameterError.code = 'ERR_REQUIRED_PARAMETER';
exports.RequiredParameterError = RequiredParameterError;
/**
 * Exception raised when value is not valid.
 */

class InvalidValueError extends Error {
  constructor(message) {
    super(message);
    this.name = 'InvalidValueError';
    this.code = 'ERR_INVALID_VALUE';
    this.message = message;
  }

}

InvalidValueError.code = 'ERR_INVALID_VALUE';
exports.InvalidValueError = InvalidValueError;

/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const {
  Key,
  Errors,
  utils
} = __webpack_require__(617);

const {
  filter,
  map,
  take,
  sortAll
} = utils;
/**
 * A datastore backed by leveldb.
 */

class LevelDatastore {
  constructor(path, opts) {
    let database;

    if (opts && opts.db) {
      database = opts.db;
      delete opts.db;
    } else {
      database = __webpack_require__(278);
    }

    this.db = database(path, _objectSpread({}, opts, {
      valueEncoding: 'binary',
      compression: false // same default as go

    }));
  }

  async open() {
    try {
      await this.db.open();
    } catch (err) {
      throw Errors.dbOpenFailedError(err);
    }
  }

  async put(key, value) {
    try {
      await this.db.put(key.toString(), value);
    } catch (err) {
      throw Errors.dbWriteFailedError(err);
    }
  }

  async get(key) {
    let data;

    try {
      data = await this.db.get(key.toString());
    } catch (err) {
      if (err.notFound) throw Errors.notFoundError(err);
      throw Errors.dbWriteFailedError(err);
    }

    return data;
  }

  async has(key) {
    try {
      await this.db.get(key.toString());
    } catch (err) {
      if (err.notFound) return false;
      throw err;
    }

    return true;
  }

  async delete(key) {
    try {
      await this.db.del(key.toString());
    } catch (err) {
      throw Errors.dbDeleteFailedError(err);
    }
  }

  close() {
    return this.db.close();
  }

  batch() {
    const ops = [];
    return {
      put: (key, value) => {
        ops.push({
          type: 'put',
          key: key.toString(),
          value: value
        });
      },
      delete: key => {
        ops.push({
          type: 'del',
          key: key.toString()
        });
      },
      commit: () => {
        return this.db.batch(ops);
      }
    };
  }

  query(q) {
    let values = true;

    if (q.keysOnly != null) {
      values = !q.keysOnly;
    }

    let it = levelIteratorToIterator(this.db.db.iterator({
      keys: true,
      values: values,
      keyAsBuffer: true
    }));
    it = map(it, ({
      key,
      value
    }) => {
      const res = {
        key: new Key(key, false)
      };

      if (values) {
        res.value = Buffer.from(value);
      }

      return res;
    });

    if (q.prefix != null) {
      it = filter(it, e => e.key.toString().startsWith(q.prefix));
    }

    if (Array.isArray(q.filters)) {
      it = q.filters.reduce((it, f) => filter(it, f), it);
    }

    if (Array.isArray(q.orders)) {
      it = q.orders.reduce((it, f) => sortAll(it, f), it);
    }

    if (q.offset != null) {
      let i = 0;
      it = filter(it, () => i++ >= q.offset);
    }

    if (q.limit != null) {
      it = take(it, q.limit);
    }

    return it;
  }

}

function levelIteratorToIterator(li) {
  return {
    next: () => new Promise((resolve, reject) => {
      li.next((err, key, value) => {
        if (err) return reject(err);
        if (key == null) return resolve({
          done: true
        });
        resolve({
          done: false,
          value: {
            key,
            value
          }
        });
      });
    }),
    return: () => new Promise((resolve, reject) => {
      li.end(err => {
        if (err) return reject(err);
        resolve({
          done: true
        });
      });
    }),

    [Symbol.asyncIterator]() {
      return this;
    }

  };
}

module.exports = LevelDatastore;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {/* @flow */


const uuid = __webpack_require__(60);

const withIs = __webpack_require__(21);

const pathSepS = '/';
const pathSepB = Buffer.from(pathSepS);
const pathSep = pathSepB[0];
/**
 * A Key represents the unique identifier of an object.
 * Our Key scheme is inspired by file systems and Google App Engine key model.
 * Keys are meant to be unique across a system. Keys are hierarchical,
 * incorporating more and more specific namespaces. Thus keys can be deemed
 * 'children' or 'ancestors' of other keys:
 * - `new Key('/Comedy')`
 * - `new Key('/Comedy/MontyPython')`
 * Also, every namespace can be parametrized to embed relevant object
 * information. For example, the Key `name` (most specific namespace) could
 * include the object type:
 * - `new Key('/Comedy/MontyPython/Actor:JohnCleese')`
 * - `new Key('/Comedy/MontyPython/Sketch:CheeseShop')`
 * - `new Key('/Comedy/MontyPython/Sketch:CheeseShop/Character:Mousebender')`
 *
 */

class Key {
  /* :: _buf: Buffer */
  constructor(s
  /* : string|Buffer */
  , clean
  /* : ?bool */
  ) {
    if (typeof s === 'string') {
      this._buf = Buffer.from(s);
    } else if (Buffer.isBuffer(s)) {
      this._buf = s;
    }

    if (clean == null) {
      clean = true;
    }

    if (clean) {
      this.clean();
    }

    if (this._buf.length === 0 || this._buf[0] !== pathSep) {
      throw new Error("Invalid key: ".concat(this.toString()));
    }
  }
  /**
   * Convert to the string representation
   *
   * @param {string} [encoding='utf8']
   * @returns {string}
   */


  toString(encoding
  /* : ?buffer$Encoding */
  )
  /* : string */
  {
    return this._buf.toString(encoding || 'utf8');
  }
  /**
   * Return the buffer representation of the key
   *
   * @returns {Buffer}
   */


  toBuffer()
  /* : Buffer */
  {
    return this._buf;
  } // waiting on https://github.com/facebook/flow/issues/2286
  // $FlowFixMe


  get [Symbol.toStringTag]()
  /* : string */
  {
    return "[Key ".concat(this.toString(), "]");
  }
  /**
   * Constructs a key out of a namespace array.
   *
   * @param {Array<string>} list
   * @returns {Key}
   *
   * @example
   * Key.withNamespaces(['one', 'two'])
   * // => Key('/one/two')
   *
   */


  static withNamespaces(list
  /* : Array<string> */
  )
  /* : Key */
  {
    return new _Key(list.join(pathSepS));
  }
  /**
   * Returns a randomly (uuid) generated key.
   *
   * @returns {Key}
   *
   * @example
   * Key.random()
   * // => Key('/f98719ea086343f7b71f32ea9d9d521d')
   *
   */


  static random()
  /* : Key */
  {
    return new _Key(uuid().replace(/-/g, ''));
  }
  /**
   * Cleanup the current key
   *
   * @returns {void}
   */


  clean() {
    if (!this._buf || this._buf.length === 0) {
      this._buf = Buffer.from(pathSepS);
    }

    if (this._buf[0] !== pathSep) {
      this._buf = Buffer.concat([pathSepB, this._buf]);
    } // normalize does not remove trailing slashes


    while (this._buf.length > 1 && this._buf[this._buf.length - 1] === pathSep) {
      this._buf = this._buf.slice(0, -1);
    }
  }
  /**
   * Check if the given key is sorted lower than ourself.
   *
   * @param {Key} key
   * @returns {bool}
   */


  less(key
  /* : Key */
  )
  /* : bool */
  {
    const list1 = this.list();
    const list2 = key.list();

    for (let i = 0; i < list1.length; i++) {
      if (list2.length < i + 1) {
        return false;
      }

      const c1 = list1[i];
      const c2 = list2[i];

      if (c1 < c2) {
        return true;
      } else if (c1 > c2) {
        return false;
      }
    }

    return list1.length < list2.length;
  }
  /**
   * Returns the key with all parts in reversed order.
   *
   * @returns {Key}
   *
   * @example
   * new Key('/Comedy/MontyPython/Actor:JohnCleese').reverse()
   * // => Key('/Actor:JohnCleese/MontyPython/Comedy')
   */


  reverse()
  /* : Key */
  {
    return Key.withNamespaces(this.list().slice().reverse());
  }
  /**
   * Returns the `namespaces` making up this Key.
   *
   * @returns {Array<string>}
   */


  namespaces()
  /* : Array<string> */
  {
    return this.list();
  }
  /** Returns the "base" namespace of this key.
   *
   * @returns {string}
   *
   * @example
   * new Key('/Comedy/MontyPython/Actor:JohnCleese').baseNamespace()
   * // => 'Actor:JohnCleese'
   *
   */


  baseNamespace()
  /* : string */
  {
    const ns = this.namespaces();
    return ns[ns.length - 1];
  }
  /**
   * Returns the `list` representation of this key.
   *
   * @returns {Array<string>}
   *
   * @example
   * new Key('/Comedy/MontyPython/Actor:JohnCleese').list()
   * // => ['Comedy', 'MontyPythong', 'Actor:JohnCleese']
   *
   */


  list()
  /* : Array<string> */
  {
    return this.toString().split(pathSepS).slice(1);
  }
  /**
   * Returns the "type" of this key (value of last namespace).
   *
   * @returns {string}
   *
   * @example
   * new Key('/Comedy/MontyPython/Actor:JohnCleese').type()
   * // => 'Actor'
   *
   */


  type()
  /* : string */
  {
    return namespaceType(this.baseNamespace());
  }
  /**
   * Returns the "name" of this key (field of last namespace).
   *
   * @returns {string}
   *
   * @example
   * new Key('/Comedy/MontyPython/Actor:JohnCleese').name()
   * // => 'JohnCleese'
   */


  name()
  /* : string */
  {
    return namespaceValue(this.baseNamespace());
  }
  /**
   * Returns an "instance" of this type key (appends value to namespace).
   *
   * @param {string} s
   * @returns {Key}
   *
   * @example
   * new Key('/Comedy/MontyPython/Actor').instance('JohnClesse')
   * // => Key('/Comedy/MontyPython/Actor:JohnCleese')
   */


  instance(s
  /* : string */
  )
  /* : Key */
  {
    return new _Key(this.toString() + ':' + s);
  }
  /**
   * Returns the "path" of this key (parent + type).
   *
   * @returns {Key}
   *
   * @example
   * new Key('/Comedy/MontyPython/Actor:JohnCleese').path()
   * // => Key('/Comedy/MontyPython/Actor')
   *
   */


  path()
  /* : Key */
  {
    let p = this.parent().toString();

    if (!p.endsWith(pathSepS)) {
      p += pathSepS;
    }

    p += this.type();
    return new _Key(p);
  }
  /**
   * Returns the `parent` Key of this Key.
   *
   * @returns {Key}
   *
   * @example
   * new Key("/Comedy/MontyPython/Actor:JohnCleese").parent()
   * // => Key("/Comedy/MontyPython")
   *
   */


  parent()
  /* : Key */
  {
    const list = this.list();

    if (list.length === 1) {
      return new _Key(pathSepS);
    }

    return new _Key(list.slice(0, -1).join(pathSepS));
  }
  /**
   * Returns the `child` Key of this Key.
   *
   * @param {Key} key
   * @returns {Key}
   *
   * @example
   * new Key('/Comedy/MontyPython').child(new Key('Actor:JohnCleese'))
   * // => Key('/Comedy/MontyPython/Actor:JohnCleese')
   *
   */


  child(key
  /* : Key */
  )
  /* : Key */
  {
    if (this.toString() === pathSepS) {
      return key;
    } else if (key.toString() === pathSepS) {
      return this;
    }

    return new _Key(this.toString() + key.toString(), false);
  }
  /**
   * Returns whether this key is a prefix of `other`
   *
   * @param {Key} other
   * @returns {bool}
   *
   * @example
   * new Key('/Comedy').isAncestorOf('/Comedy/MontyPython')
   * // => true
   *
   */


  isAncestorOf(other
  /* : Key */
  )
  /* : bool */
  {
    if (other.toString() === this.toString()) {
      return false;
    }

    return other.toString().startsWith(this.toString());
  }
  /**
   * Returns whether this key is a contains another as prefix.
   *
   * @param {Key} other
   * @returns {bool}
   *
   * @example
   * new Key('/Comedy/MontyPython').isDecendantOf('/Comedy')
   * // => true
   *
   */


  isDecendantOf(other
  /* : Key */
  )
  /* : bool */
  {
    if (other.toString() === this.toString()) {
      return false;
    }

    return this.toString().startsWith(other.toString());
  }
  /**
   * Returns wether this key has only one namespace.
   *
   * @returns {bool}
   *
   */


  isTopLevel()
  /* : bool */
  {
    return this.list().length === 1;
  }

}
/**
 * The first component of a namespace. `foo` in `foo:bar`
 *
 * @param {string} ns
 * @returns {string}
 */


function namespaceType(ns
/* : string */
)
/* : string */
{
  const parts = ns.split(':');

  if (parts.length < 2) {
    return '';
  }

  return parts.slice(0, -1).join(':');
}
/**
 * The last component of a namespace, `baz` in `foo:bar:baz`.
 *
 * @param {string} ns
 * @returns {string}
 */


function namespaceValue(ns
/* : string */
)
/* : string */
{
  const parts = ns.split(':');
  return parts[parts.length - 1];
}

const _Key = withIs(Key, {
  className: 'Key',
  symbolName: '@ipfs/interface-datastore/key'
});

module.exports = _Key;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const path = __webpack_require__(103);

const os = __webpack_require__(99);

const uuid = __webpack_require__(60);

exports.filter = (iterable, filterer) => {
  return _wrapAsyncGenerator(function* () {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;

    var _iteratorError;

    try {
      for (var _iterator = _asyncIterator(iterable), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
        const value = _value;
        const keep = yield _awaitAsyncGenerator(filterer(value));
        if (!keep) continue;
        yield value;
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          yield _awaitAsyncGenerator(_iterator.return());
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  })();
}; // Not just sort, because the sorter is given all the values and should return
// them all sorted


exports.sortAll = (iterable, sorter) => {
  return _wrapAsyncGenerator(function* () {
    let values = [];
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;

    var _iteratorError2;

    try {
      for (var _iterator2 = _asyncIterator(iterable), _step2, _value2; _step2 = yield _awaitAsyncGenerator(_iterator2.next()), _iteratorNormalCompletion2 = _step2.done, _value2 = yield _awaitAsyncGenerator(_step2.value), !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {
        const value = _value2;
        values.push(value);
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          yield _awaitAsyncGenerator(_iterator2.return());
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    values = yield _awaitAsyncGenerator(sorter(values));

    for (const value of values) yield value;
  })();
};

exports.take = (iterable, n) => {
  return _wrapAsyncGenerator(function* () {
    if (n <= 0) return;
    let i = 0;
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;

    var _iteratorError3;

    try {
      for (var _iterator3 = _asyncIterator(iterable), _step3, _value3; _step3 = yield _awaitAsyncGenerator(_iterator3.next()), _iteratorNormalCompletion3 = _step3.done, _value3 = yield _awaitAsyncGenerator(_step3.value), !_iteratorNormalCompletion3; _iteratorNormalCompletion3 = true) {
        const value = _value3;
        yield value;
        i++;
        if (i >= n) return;
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
          yield _awaitAsyncGenerator(_iterator3.return());
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }
  })();
};

exports.map = (iterable, mapper) => {
  return _wrapAsyncGenerator(function* () {
    var _iteratorNormalCompletion4 = true;
    var _didIteratorError4 = false;

    var _iteratorError4;

    try {
      for (var _iterator4 = _asyncIterator(iterable), _step4, _value4; _step4 = yield _awaitAsyncGenerator(_iterator4.next()), _iteratorNormalCompletion4 = _step4.done, _value4 = yield _awaitAsyncGenerator(_step4.value), !_iteratorNormalCompletion4; _iteratorNormalCompletion4 = true) {
        const value = _value4;
        yield mapper(value);
      }
    } catch (err) {
      _didIteratorError4 = true;
      _iteratorError4 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
          yield _awaitAsyncGenerator(_iterator4.return());
        }
      } finally {
        if (_didIteratorError4) {
          throw _iteratorError4;
        }
      }
    }
  })();
};

exports.replaceStartWith = function (s, r) {
  const matcher = new RegExp('^' + r);
  return s.replace(matcher, '');
};

exports.tmpdir = () => {
  return path.join(os.tmpdir(), uuid());
};

/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const errcode = __webpack_require__(619);

module.exports.dbOpenFailedError = err => {
  err = err || new Error('Cannot open database');
  return errcode(err, 'ERR_DB_OPEN_FAILED');
};

module.exports.dbDeleteFailedError = err => {
  err = err || new Error('Delete failed');
  return errcode(err, 'ERR_DB_DELETE_FAILED');
};

module.exports.dbWriteFailedError = err => {
  err = err || new Error('Write failed');
  return errcode(err, 'ERR_DB_WRITE_FAILED');
};

module.exports.notFoundError = err => {
  err = err || new Error('Not Found');
  return errcode(err, 'ERR_NOT_FOUND');
};

/***/ }),
/* 278 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(620)(__webpack_require__(642));

/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.AbstractLevelDOWN = __webpack_require__(623);
exports.AbstractIterator = __webpack_require__(280);
exports.AbstractChainedBatch = __webpack_require__(281);

/***/ }),
/* 280 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

function AbstractIterator(db) {
  if (typeof db !== 'object' || db === null) {
    throw new TypeError('First argument must be an abstract-leveldown compliant store');
  }

  this.db = db;
  this._ended = false;
  this._nexting = false;
}

AbstractIterator.prototype.next = function (callback) {
  var self = this;

  if (typeof callback !== 'function') {
    throw new Error('next() requires a callback argument');
  }

  if (self._ended) {
    process.nextTick(callback, new Error('cannot call next() after end()'));
    return self;
  }

  if (self._nexting) {
    process.nextTick(callback, new Error('cannot call next() before previous next() has completed'));
    return self;
  }

  self._nexting = true;

  self._next(function () {
    self._nexting = false;
    callback.apply(null, arguments);
  });

  return self;
};

AbstractIterator.prototype._next = function (callback) {
  process.nextTick(callback);
};

AbstractIterator.prototype.seek = function (target) {
  if (this._ended) {
    throw new Error('cannot call seek() after end()');
  }

  if (this._nexting) {
    throw new Error('cannot call seek() before next() has completed');
  }

  target = this.db._serializeKey(target);

  this._seek(target);
};

AbstractIterator.prototype._seek = function (target) {};

AbstractIterator.prototype.end = function (callback) {
  if (typeof callback !== 'function') {
    throw new Error('end() requires a callback argument');
  }

  if (this._ended) {
    return process.nextTick(callback, new Error('end() already called on iterator'));
  }

  this._ended = true;

  this._end(callback);
};

AbstractIterator.prototype._end = function (callback) {
  process.nextTick(callback);
};

module.exports = AbstractIterator;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5)))

/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function AbstractChainedBatch(db) {
  if (typeof db !== 'object' || db === null) {
    throw new TypeError('First argument must be an abstract-leveldown compliant store');
  }

  this.db = db;
  this._operations = [];
  this._written = false;
}

AbstractChainedBatch.prototype._checkWritten = function () {
  if (this._written) {
    throw new Error('write() already called on this batch');
  }
};

AbstractChainedBatch.prototype.put = function (key, value) {
  this._checkWritten();

  var err = this.db._checkKey(key) || this.db._checkValue(value);

  if (err) throw err;
  key = this.db._serializeKey(key);
  value = this.db._serializeValue(value);

  this._put(key, value);

  return this;
};

AbstractChainedBatch.prototype._put = function (key, value) {
  this._operations.push({
    type: 'put',
    key: key,
    value: value
  });
};

AbstractChainedBatch.prototype.del = function (key) {
  this._checkWritten();

  var err = this.db._checkKey(key);

  if (err) throw err;
  key = this.db._serializeKey(key);

  this._del(key);

  return this;
};

AbstractChainedBatch.prototype._del = function (key) {
  this._operations.push({
    type: 'del',
    key: key
  });
};

AbstractChainedBatch.prototype.clear = function () {
  this._checkWritten();

  this._clear();

  return this;
};

AbstractChainedBatch.prototype._clear = function () {
  this._operations = [];
};

AbstractChainedBatch.prototype.write = function (options, callback) {
  this._checkWritten();

  if (typeof options === 'function') {
    callback = options;
  }

  if (typeof callback !== 'function') {
    throw new Error('write() requires a callback argument');
  }

  if (typeof options !== 'object' || options === null) {
    options = {};
  }

  this._written = true;

  this._write(options, callback);
};

AbstractChainedBatch.prototype._write = function (options, callback) {
  this.db._batch(this._operations, options, callback);
};

module.exports = AbstractChainedBatch;

/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


module.exports = Readable;
/*<replacement>*/

var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;
/*<replacement>*/

var EE = __webpack_require__(11).EventEmitter;

var EElistenerCount = function EElistenerCount(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/


var Stream = __webpack_require__(283);
/*</replacement>*/


var Buffer = __webpack_require__(0).Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*<replacement>*/


var debugUtil = __webpack_require__(627);

var debug;

if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function debug() {};
}
/*</replacement>*/


var BufferList = __webpack_require__(628);

var destroyImpl = __webpack_require__(284);

var _require = __webpack_require__(285),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = __webpack_require__(66).codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.


var StringDecoder;
var createReadableStreamAsyncIterator;
var from;

__webpack_require__(4)(Readable, Stream);

var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.

  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream, isDuplex) {
  Duplex = Duplex || __webpack_require__(67);
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"

  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()

  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.

  this.sync = true; // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.

  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;
  this.paused = true; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')

  this.autoDestroy = !!options.autoDestroy; // has it been destroyed

  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

  this.readingMore = false;
  this.decoder = null;
  this.encoding = null;

  if (options.encoding) {
    if (!StringDecoder) StringDecoder = __webpack_require__(77).StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || __webpack_require__(67);
  if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
  // the ReadableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  this._readableState = new ReadableState(options, this, isDuplex); // legacy

  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined) {
      return false;
    }

    return this._readableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
  }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;

Readable.prototype._destroy = function (err, cb) {
  cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.


Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;

      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }

      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()


Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  debug('readableAddChunk', chunk);
  var state = stream._readableState;

  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);

    if (er) {
      errorOrDestroy(stream, er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
      } else if (state.destroyed) {
        return false;
      } else {
        state.reading = false;

        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
      maybeReadMore(stream, state);
    }
  } // We can push more data if we are below the highWaterMark.
  // Also, if we have no data yet, we can stand some more bytes.
  // This is to work around cases where hwm=0, such as the repl.


  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    state.awaitDrain = 0;
    stream.emit('data', chunk);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
    if (state.needReadable) emitReadable(stream);
  }

  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;

  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
  }

  return er;
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
}; // backwards compatibility.


Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = __webpack_require__(77).StringDecoder;
  var decoder = new StringDecoder(enc);
  this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8

  this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:

  var p = this._readableState.buffer.head;
  var content = '';

  while (p !== null) {
    content += decoder.write(p.data);
    p = p.next;
  }

  this._readableState.buffer.clear();

  if (content !== '') this._readableState.buffer.push(content);
  this._readableState.length = content.length;
  return this;
}; // Don't raise the hwm > 1GB


var MAX_HWM = 0x40000000;

function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }

  return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.


function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;

  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  } // If we're asking for more than the current hwm, then raise the hwm.


  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n; // Don't have enough

  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }

  return state.length;
} // you can override either this method, or the async _read(n) below.


Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;
  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.

  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  } // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.
  // if we need a readable event, then we need to do some reading.


  var doRead = state.needReadable;
  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  } // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.


  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true; // if the length is currently zero, then we *need* a readable event.

    if (state.length === 0) state.needReadable = true; // call internal read method

    this._read(state.highWaterMark);

    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.

    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = state.length <= state.highWaterMark;
    n = 0;
  } else {
    state.length -= n;
    state.awaitDrain = 0;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);
  return ret;
};

function onEofChunk(stream, state) {
  debug('onEofChunk');
  if (state.ended) return;

  if (state.decoder) {
    var chunk = state.decoder.end();

    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }

  state.ended = true;

  if (state.sync) {
    // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
  } else {
    // emit 'readable' now to make sure it gets picked up.
    state.needReadable = false;

    if (!state.emittedReadable) {
      state.emittedReadable = true;
      emitReadable_(stream);
    }
  }
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.


function emitReadable(stream) {
  var state = stream._readableState;
  debug('emitReadable', state.needReadable, state.emittedReadable);
  state.needReadable = false;

  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    process.nextTick(emitReadable_, stream);
  }
}

function emitReadable_(stream) {
  var state = stream._readableState;
  debug('emitReadable_', state.destroyed, state.length, state.ended);

  if (!state.destroyed && (state.length || state.ended)) {
    stream.emit('readable');
    state.emittedReadable = false;
  } // The stream needs another readable event if
  // 1. It is not flowing, as the flow mechanism will take
  //    care of it.
  // 2. It is not ended.
  // 3. It is below the highWaterMark, so we can schedule
  //    another readable later.


  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
  flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.


function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  // Attempt to read more data if we should.
  //
  // The conditions for reading more data are (one of):
  // - Not enough data buffered (state.length < state.highWaterMark). The loop
  //   is responsible for filling the buffer with enough data if such data
  //   is available. If highWaterMark is 0 and we are not in the flowing mode
  //   we should _not_ attempt to buffer any extra data. We'll get more data
  //   when the stream consumer calls read() instead.
  // - No data in the buffer, and the stream is in flowing mode. In this mode
  //   the loop below is responsible for ensuring read() is called. Failing to
  //   call read here would abort the flow and there's no other mechanism for
  //   continuing the flow if the stream consumer has just subscribed to the
  //   'data' event.
  //
  // In addition to the above conditions to keep reading data, the following
  // conditions prevent the data from being read:
  // - The stream has ended (state.ended).
  // - There is already a pending 'read' operation (state.reading). This is a
  //   case where the the stream has called the implementation defined _read()
  //   method, but they are processing the call asynchronously and have _not_
  //   called push() with new data. In this case we skip performing more
  //   read()s. The execution ends in this method again after the _read() ends
  //   up calling push() with more data.
  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
    var len = state.length;
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length) // didn't get any data, stop spinning.
      break;
  }

  state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.


Readable.prototype._read = function (n) {
  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;

    case 1:
      state.pipes = [state.pipes, dest];
      break;

    default:
      state.pipes.push(dest);
      break;
  }

  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
  dest.on('unpipe', onunpipe);

  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');

    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  } // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.


  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);
  var cleanedUp = false;

  function cleanup() {
    debug('cleanup'); // cleanup event handlers once the pipe is broken

    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);
    cleanedUp = true; // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.

    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  src.on('data', ondata);

  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    debug('dest.write', ret);

    if (ret === false) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', state.awaitDrain);
        state.awaitDrain++;
      }

      src.pause();
    }
  } // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.


  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
  } // Make sure our error handler is attached before userland ones.


  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }

  dest.once('close', onclose);

  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }

  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  } // tell the dest that it's being piped to


  dest.emit('pipe', src); // start the flow if it hasn't been started already.

  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function pipeOnDrainFunctionResult() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;

    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = {
    hasUnpiped: false
  }; // if we're not piping anywhere, then do nothing.

  if (state.pipesCount === 0) return this; // just one destination.  most common case.

  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;
    if (!dest) dest = state.pipes; // got a match.

    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  } // slow case. multiple pipe destinations.


  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, {
        hasUnpiped: false
      });
    }

    return this;
  } // try to find the right one.


  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;
  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];
  dest.emit('unpipe', this, unpipeInfo);
  return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something


Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);
  var state = this._readableState;

  if (ev === 'data') {
    // update readableListening so that resume() may be a no-op
    // a few lines down. This is needed to support once('readable').
    state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused

    if (state.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.flowing = false;
      state.emittedReadable = false;
      debug('on readable', state.length, state.reading);

      if (state.length) {
        emitReadable(this);
      } else if (!state.reading) {
        process.nextTick(nReadingNextTick, this);
      }
    }
  }

  return res;
};

Readable.prototype.addListener = Readable.prototype.on;

Readable.prototype.removeListener = function (ev, fn) {
  var res = Stream.prototype.removeListener.call(this, ev, fn);

  if (ev === 'readable') {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

Readable.prototype.removeAllListeners = function (ev) {
  var res = Stream.prototype.removeAllListeners.apply(this, arguments);

  if (ev === 'readable' || ev === undefined) {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

function updateReadableListening(self) {
  var state = self._readableState;
  state.readableListening = self.listenerCount('readable') > 0;

  if (state.resumeScheduled && !state.paused) {
    // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true; // crude way to check if we should resume
  } else if (self.listenerCount('data') > 0) {
    self.resume();
  }
}

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.


Readable.prototype.resume = function () {
  var state = this._readableState;

  if (!state.flowing) {
    debug('resume'); // we flow only if there is no one listening
    // for readable, but we still have to call
    // resume()

    state.flowing = !state.readableListening;
    resume(this, state);
  }

  state.paused = false;
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  debug('resume', state.reading);

  if (!state.reading) {
    stream.read(0);
  }

  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);

  if (this._readableState.flowing !== false) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }

  this._readableState.paused = true;
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);

  while (state.flowing && stream.read() !== null) {
    ;
  }
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.


Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;
  stream.on('end', function () {
    debug('wrapped end');

    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });
  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);

    if (!ret) {
      paused = true;
      stream.pause();
    }
  }); // proxy all the other methods.
  // important when wrapping filters and duplexes.

  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  } // proxy certain important events.


  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  } // when we try to consume some more bytes, simply unpause the
  // underlying stream.


  this._read = function (n) {
    debug('wrapped _read', n);

    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

if (typeof Symbol === 'function') {
  Readable.prototype[Symbol.asyncIterator] = function () {
    if (createReadableStreamAsyncIterator === undefined) {
      createReadableStreamAsyncIterator = __webpack_require__(630);
    }

    return createReadableStreamAsyncIterator(this);
  };
}

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.highWaterMark;
  }
});
Object.defineProperty(Readable.prototype, 'readableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState && this._readableState.buffer;
  }
});
Object.defineProperty(Readable.prototype, 'readableFlowing', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.flowing;
  },
  set: function set(state) {
    if (this._readableState) {
      this._readableState.flowing = state;
    }
  }
}); // exposed for testing purposes only.

Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, 'readableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.length;
  }
}); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.

function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;
  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = state.buffer.consume(n, state.decoder);
  }
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;
  debug('endReadable', state.endEmitted);

  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.

  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');

    if (state.autoDestroy) {
      // In case of duplex streams we need a way to detect
      // if the writable side is ready for autoDestroy as well
      var wState = stream._writableState;

      if (!wState || wState.autoDestroy && wState.finished) {
        stream.destroy();
      }
    }
  }
}

if (typeof Symbol === 'function') {
  Readable.from = function (iterable, opts) {
    if (from === undefined) {
      from = __webpack_require__(631);
    }

    return from(Readable, iterable, opts);
  };
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }

  return -1;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(8), __webpack_require__(5)))

/***/ }),
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(11).EventEmitter;

/***/ }),
/* 284 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) { // undocumented cb() API, needed for core, not for public API

function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err) {
      if (!this._writableState) {
        process.nextTick(emitErrorNT, this, err);
      } else if (!this._writableState.errorEmitted) {
        this._writableState.errorEmitted = true;
        process.nextTick(emitErrorNT, this, err);
      }
    }

    return this;
  } // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks


  if (this._readableState) {
    this._readableState.destroyed = true;
  } // if this is a duplex stream mark the writable part as destroyed as well


  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      if (!_this._writableState) {
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else if (!_this._writableState.errorEmitted) {
        _this._writableState.errorEmitted = true;
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else {
        process.nextTick(emitCloseNT, _this);
      }
    } else if (cb) {
      process.nextTick(emitCloseNT, _this);
      cb(err);
    } else {
      process.nextTick(emitCloseNT, _this);
    }
  });

  return this;
}

function emitErrorAndCloseNT(self, err) {
  emitErrorNT(self, err);
  emitCloseNT(self);
}

function emitCloseNT(self) {
  if (self._writableState && !self._writableState.emitClose) return;
  if (self._readableState && !self._readableState.emitClose) return;
  self.emit('close');
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finalCalled = false;
    this._writableState.prefinished = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

function errorOrDestroy(stream, err) {
  // We have tests that rely on errors being emitted
  // in the same tick, so changing this is semver major.
  // For now when you opt-in to autoDestroy we allow
  // the error to be emitted nextTick. In a future
  // semver major update we should change the default to this.
  var rState = stream._readableState;
  var wState = stream._writableState;
  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy,
  errorOrDestroy: errorOrDestroy
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5)))

/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var ERR_INVALID_OPT_VALUE = __webpack_require__(66).codes.ERR_INVALID_OPT_VALUE;

function highWaterMarkFrom(options, isDuplex, duplexKey) {
  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}

function getHighWaterMark(state, options, duplexKey, isDuplex) {
  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);

  if (hwm != null) {
    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
      var name = isDuplex ? duplexKey : 'highWaterMark';
      throw new ERR_INVALID_OPT_VALUE(name, hwm);
    }

    return Math.floor(hwm);
  } // Default value


  return state.objectMode ? 16 : 16 * 1024;
}

module.exports = {
  getHighWaterMark: getHighWaterMark
};

/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.


module.exports = Writable;
/* <replacement> */

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream


function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;

  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/


var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;
/*<replacement>*/

var internalUtil = {
  deprecate: __webpack_require__(219)
};
/*</replacement>*/

/*<replacement>*/

var Stream = __webpack_require__(283);
/*</replacement>*/


var Buffer = __webpack_require__(0).Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

var destroyImpl = __webpack_require__(284);

var _require = __webpack_require__(285),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = __webpack_require__(66).codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
    ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
    ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
    ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;

var errorOrDestroy = destroyImpl.errorOrDestroy;

__webpack_require__(4)(Writable, Stream);

function nop() {}

function WritableState(options, stream, isDuplex) {
  Duplex = Duplex || __webpack_require__(67);
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream,
  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
  // contains buffers or objects.

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()

  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called

  this.finalCalled = false; // drain event flag.

  this.needDrain = false; // at the start of calling end()

  this.ending = false; // when end() has been called, and returned

  this.ended = false; // when 'finish' is emitted

  this.finished = false; // has it been destroyed

  this.destroyed = false; // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.

  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.

  this.length = 0; // a flag to see when we're in the middle of a write.

  this.writing = false; // when true all writes will be buffered until .uncork() call

  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.

  this.sync = true; // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.

  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

  this.onwrite = function (er) {
    onwrite(stream, er);
  }; // the callback that the user supplies to write(chunk,encoding,cb)


  this.writecb = null; // the amount that is being written when _write is called.

  this.writelen = 0;
  this.bufferedRequest = null;
  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted

  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams

  this.prefinished = false; // True if the error was already emitted and should not be thrown again

  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')

  this.autoDestroy = !!options.autoDestroy; // count buffered requests

  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two

  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];

  while (current) {
    out.push(current);
    current = current.next;
  }

  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function writableStateBufferGetter() {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.


var realHasInstance;

if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function value(object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;
      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function realHasInstance(object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || __webpack_require__(67); // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.
  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  // Checking for a Stream.Duplex instance is faster here instead of inside
  // the WritableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
  this._writableState = new WritableState(options, this, isDuplex); // legacy.

  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;
    if (typeof options.writev === 'function') this._writev = options.writev;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.


Writable.prototype.pipe = function () {
  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};

function writeAfterEnd(stream, cb) {
  var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb

  errorOrDestroy(stream, er);
  process.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.


function validChunk(stream, state, chunk, cb) {
  var er;

  if (chunk === null) {
    er = new ERR_STREAM_NULL_VALUES();
  } else if (typeof chunk !== 'string' && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
  }

  if (er) {
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
    return false;
  }

  return true;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  if (typeof cb !== 'function') cb = nop;
  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }
  return ret;
};

Writable.prototype.cork = function () {
  this._writableState.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;
    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

Object.defineProperty(Writable.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }

  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.

function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);

    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }

  var len = state.objectMode ? 1 : chunk.length;
  state.length += len;
  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };

    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }

    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    process.nextTick(cb, er); // this can emit finish, and it will always happen
    // after error

    process.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er); // this can emit finish, but finish must
    // always follow error

    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;
  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
  onwriteStateUpdate(state);
  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state) || stream.destroyed;

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      process.nextTick(afterWrite, stream, state, finished, cb);
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.


function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
} // if there's something in the buffer waiting, then process it


function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;
    var count = 0;
    var allBuffers = true;

    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }

    buffer.allBuffers = allBuffers;
    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite

    state.pendingcb++;
    state.lastBufferedRequest = null;

    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }

    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;
      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.

      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

  if (state.corked) {
    state.corked = 1;
    this.uncork();
  } // ignore unnecessary end() calls.


  if (!state.ending) endWritable(this, state, cb);
  return this;
};

Object.defineProperty(Writable.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
});

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}

function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;

    if (err) {
      errorOrDestroy(stream, err);
    }

    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}

function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function' && !state.destroyed) {
      state.pendingcb++;
      state.finalCalled = true;
      process.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);

  if (need) {
    prefinish(stream, state);

    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');

      if (state.autoDestroy) {
        // In case of duplex streams we need a way to detect
        // if the readable side is ready for autoDestroy as well
        var rState = stream._readableState;

        if (!rState || rState.autoDestroy && rState.endEmitted) {
          stream.destroy();
        }
      }
    }
  }

  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);

  if (cb) {
    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
  }

  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;

  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  } // reuse the free corkReq.


  state.corkedRequestsFree.next = corkReq;
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._writableState === undefined) {
      return false;
    }

    return this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._writableState.destroyed = value;
  }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;

Writable.prototype._destroy = function (err, cb) {
  cb(err);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(8), __webpack_require__(5)))

/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.


module.exports = Transform;

var _require$codes = __webpack_require__(66).codes,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
    ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

var Duplex = __webpack_require__(67);

__webpack_require__(4)(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;
  var cb = ts.writecb;

  if (cb === null) {
    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
  }

  ts.writechunk = null;
  ts.writecb = null;
  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);
  cb(er);
  var rs = this._readableState;
  rs.reading = false;

  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);
  Duplex.call(this, options);
  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  }; // start out asking for a readable event once data is transformed.

  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.

  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;
    if (typeof options.flush === 'function') this._flush = options.flush;
  } // When the writable side finishes, then flush out anything remaining.


  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.


Transform.prototype._transform = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;

  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.


Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && !ts.transforming) {
    ts.transforming = true;

    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);
  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided

  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
  return stream.push(null);
}

/***/ }),
/* 288 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function promisify() {
  var callback;
  var promise = new Promise(function (resolve, reject) {
    callback = function callback(err, value) {
      if (err) reject(err);else resolve(value);
    };
  });
  callback.promise = promise;
  return callback;
}

module.exports = promisify;

/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

function AbstractIterator(db) {
  if (typeof db !== 'object' || db === null) {
    throw new TypeError('First argument must be an abstract-leveldown compliant store');
  }

  this.db = db;
  this._ended = false;
  this._nexting = false;
}

AbstractIterator.prototype.next = function (callback) {
  var self = this;

  if (typeof callback !== 'function') {
    throw new Error('next() requires a callback argument');
  }

  if (self._ended) {
    process.nextTick(callback, new Error('cannot call next() after end()'));
    return self;
  }

  if (self._nexting) {
    process.nextTick(callback, new Error('cannot call next() before previous next() has completed'));
    return self;
  }

  self._nexting = true;

  self._next(function () {
    self._nexting = false;
    callback.apply(null, arguments);
  });

  return self;
};

AbstractIterator.prototype._next = function (callback) {
  process.nextTick(callback);
};

AbstractIterator.prototype.seek = function (target) {
  if (this._ended) {
    throw new Error('cannot call seek() after end()');
  }

  if (this._nexting) {
    throw new Error('cannot call seek() before next() has completed');
  }

  target = this.db._serializeKey(target);

  this._seek(target);
};

AbstractIterator.prototype._seek = function (target) {};

AbstractIterator.prototype.end = function (callback) {
  if (typeof callback !== 'function') {
    throw new Error('end() requires a callback argument');
  }

  if (this._ended) {
    return process.nextTick(callback, new Error('end() already called on iterator'));
  }

  this._ended = true;

  this._end(callback);
};

AbstractIterator.prototype._end = function (callback) {
  process.nextTick(callback);
};

module.exports = AbstractIterator;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5)))

/***/ }),
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function AbstractChainedBatch(db) {
  if (typeof db !== 'object' || db === null) {
    throw new TypeError('First argument must be an abstract-leveldown compliant store');
  }

  this.db = db;
  this._operations = [];
  this._written = false;
}

AbstractChainedBatch.prototype._checkWritten = function () {
  if (this._written) {
    throw new Error('write() already called on this batch');
  }
};

AbstractChainedBatch.prototype.put = function (key, value) {
  this._checkWritten();

  var err = this.db._checkKey(key) || this.db._checkValue(value);

  if (err) throw err;
  key = this.db._serializeKey(key);
  value = this.db._serializeValue(value);

  this._put(key, value);

  return this;
};

AbstractChainedBatch.prototype._put = function (key, value) {
  this._operations.push({
    type: 'put',
    key: key,
    value: value
  });
};

AbstractChainedBatch.prototype.del = function (key) {
  this._checkWritten();

  var err = this.db._checkKey(key);

  if (err) throw err;
  key = this.db._serializeKey(key);

  this._del(key);

  return this;
};

AbstractChainedBatch.prototype._del = function (key) {
  this._operations.push({
    type: 'del',
    key: key
  });
};

AbstractChainedBatch.prototype.clear = function () {
  this._checkWritten();

  this._clear();

  return this;
};

AbstractChainedBatch.prototype._clear = function () {
  this._operations = [];
};

AbstractChainedBatch.prototype.write = function (options, callback) {
  this._checkWritten();

  if (typeof options === 'function') {
    callback = options;
  }

  if (typeof callback !== 'function') {
    throw new Error('write() requires a callback argument');
  }

  if (typeof options !== 'object' || options === null) {
    options = {};
  }

  this._written = true;

  this._write(options, callback);
};

AbstractChainedBatch.prototype._write = function (options, callback) {
  this.db._batch(this._operations, options, callback);
};

module.exports = AbstractChainedBatch;

/***/ }),
/* 291 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.AbstractLevelDOWN = __webpack_require__(643);
exports.AbstractIterator = __webpack_require__(292);
exports.AbstractChainedBatch = __webpack_require__(293);

/***/ }),
/* 292 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

function AbstractIterator(db) {
  if (typeof db !== 'object' || db === null) {
    throw new TypeError('First argument must be an abstract-leveldown compliant store');
  }

  this.db = db;
  this._ended = false;
  this._nexting = false;
}

AbstractIterator.prototype.next = function (callback) {
  var self = this;

  if (typeof callback !== 'function') {
    throw new Error('next() requires a callback argument');
  }

  if (self._ended) {
    process.nextTick(callback, new Error('cannot call next() after end()'));
    return self;
  }

  if (self._nexting) {
    process.nextTick(callback, new Error('cannot call next() before previous next() has completed'));
    return self;
  }

  self._nexting = true;

  self._next(function () {
    self._nexting = false;
    callback.apply(null, arguments);
  });

  return self;
};

AbstractIterator.prototype._next = function (callback) {
  process.nextTick(callback);
};

AbstractIterator.prototype.seek = function (target) {
  if (this._ended) {
    throw new Error('cannot call seek() after end()');
  }

  if (this._nexting) {
    throw new Error('cannot call seek() before next() has completed');
  }

  target = this.db._serializeKey(target);

  this._seek(target);
};

AbstractIterator.prototype._seek = function (target) {};

AbstractIterator.prototype.end = function (callback) {
  if (typeof callback !== 'function') {
    throw new Error('end() requires a callback argument');
  }

  if (this._ended) {
    return process.nextTick(callback, new Error('end() already called on iterator'));
  }

  this._ended = true;

  this._end(callback);
};

AbstractIterator.prototype._end = function (callback) {
  process.nextTick(callback);
};

module.exports = AbstractIterator;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5)))

/***/ }),
/* 293 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function AbstractChainedBatch(db) {
  if (typeof db !== 'object' || db === null) {
    throw new TypeError('First argument must be an abstract-leveldown compliant store');
  }

  this.db = db;
  this._operations = [];
  this._written = false;
}

AbstractChainedBatch.prototype._checkWritten = function () {
  if (this._written) {
    throw new Error('write() already called on this batch');
  }
};

AbstractChainedBatch.prototype.put = function (key, value) {
  this._checkWritten();

  var err = this.db._checkKey(key) || this.db._checkValue(value);

  if (err) throw err;
  key = this.db._serializeKey(key);
  value = this.db._serializeValue(value);

  this._put(key, value);

  return this;
};

AbstractChainedBatch.prototype._put = function (key, value) {
  this._operations.push({
    type: 'put',
    key: key,
    value: value
  });
};

AbstractChainedBatch.prototype.del = function (key) {
  this._checkWritten();

  var err = this.db._checkKey(key);

  if (err) throw err;
  key = this.db._serializeKey(key);

  this._del(key);

  return this;
};

AbstractChainedBatch.prototype._del = function (key) {
  this._operations.push({
    type: 'del',
    key: key
  });
};

AbstractChainedBatch.prototype.clear = function () {
  this._checkWritten();

  this._clear();

  return this;
};

AbstractChainedBatch.prototype._clear = function () {
  this._operations = [];
};

AbstractChainedBatch.prototype.write = function (options, callback) {
  this._checkWritten();

  if (typeof options === 'function') {
    callback = options;
  }

  if (typeof callback !== 'function') {
    throw new Error('write() requires a callback argument');
  }

  if (typeof options !== 'object' || options === null) {
    options = {};
  }

  this._written = true;

  this._write(options, callback);
};

AbstractChainedBatch.prototype._write = function (options, callback) {
  this.db._batch(this._operations, options, callback);
};

module.exports = AbstractChainedBatch;

/***/ }),
/* 294 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var toBuffer = __webpack_require__(646);

module.exports = function (value) {
  if (value instanceof Uint8Array) return toBuffer(value);else if (value instanceof ArrayBuffer) return Buffer.from(value);else return Buffer.from(String(value));
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(648);

/***/ }),
/* 296 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const KeytransformDatastore = __webpack_require__(109);

const ShardingDatastore = __webpack_require__(669);

const MountDatastore = __webpack_require__(671);

const TieredDatastore = __webpack_require__(672);

const NamespaceDatastore = __webpack_require__(673);

const shard = __webpack_require__(300);

exports.KeytransformDatastore = KeytransformDatastore;
exports.ShardingDatastore = ShardingDatastore;
exports.MountDatastore = MountDatastore;
exports.TieredDatastore = TieredDatastore;
exports.NamespaceDatastore = NamespaceDatastore;
exports.shard = shard;

/***/ }),
/* 297 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {/* @flow */


const uuid = __webpack_require__(60);

const withIs = __webpack_require__(21);

const pathSepS = '/';
const pathSepB = Buffer.from(pathSepS);
const pathSep = pathSepB[0];
/**
 * A Key represents the unique identifier of an object.
 * Our Key scheme is inspired by file systems and Google App Engine key model.
 * Keys are meant to be unique across a system. Keys are hierarchical,
 * incorporating more and more specific namespaces. Thus keys can be deemed
 * 'children' or 'ancestors' of other keys:
 * - `new Key('/Comedy')`
 * - `new Key('/Comedy/MontyPython')`
 * Also, every namespace can be parametrized to embed relevant object
 * information. For example, the Key `name` (most specific namespace) could
 * include the object type:
 * - `new Key('/Comedy/MontyPython/Actor:JohnCleese')`
 * - `new Key('/Comedy/MontyPython/Sketch:CheeseShop')`
 * - `new Key('/Comedy/MontyPython/Sketch:CheeseShop/Character:Mousebender')`
 *
 */

class Key {
  /* :: _buf: Buffer */
  constructor(s
  /* : string|Buffer */
  , clean
  /* : ?bool */
  ) {
    if (typeof s === 'string') {
      this._buf = Buffer.from(s);
    } else if (Buffer.isBuffer(s)) {
      this._buf = s;
    }

    if (clean == null) {
      clean = true;
    }

    if (clean) {
      this.clean();
    }

    if (this._buf.length === 0 || this._buf[0] !== pathSep) {
      throw new Error("Invalid key: ".concat(this.toString()));
    }
  }
  /**
   * Convert to the string representation
   *
   * @param {string} [encoding='utf8']
   * @returns {string}
   */


  toString(encoding
  /* : ?buffer$Encoding */
  )
  /* : string */
  {
    return this._buf.toString(encoding || 'utf8');
  }
  /**
   * Return the buffer representation of the key
   *
   * @returns {Buffer}
   */


  toBuffer()
  /* : Buffer */
  {
    return this._buf;
  } // waiting on https://github.com/facebook/flow/issues/2286
  // $FlowFixMe


  get [Symbol.toStringTag]()
  /* : string */
  {
    return "[Key ".concat(this.toString(), "]");
  }
  /**
   * Constructs a key out of a namespace array.
   *
   * @param {Array<string>} list
   * @returns {Key}
   *
   * @example
   * Key.withNamespaces(['one', 'two'])
   * // => Key('/one/two')
   *
   */


  static withNamespaces(list
  /* : Array<string> */
  )
  /* : Key */
  {
    return new _Key(list.join(pathSepS));
  }
  /**
   * Returns a randomly (uuid) generated key.
   *
   * @returns {Key}
   *
   * @example
   * Key.random()
   * // => Key('/f98719ea086343f7b71f32ea9d9d521d')
   *
   */


  static random()
  /* : Key */
  {
    return new _Key(uuid().replace(/-/g, ''));
  }
  /**
   * Cleanup the current key
   *
   * @returns {void}
   */


  clean() {
    if (!this._buf || this._buf.length === 0) {
      this._buf = Buffer.from(pathSepS);
    }

    if (this._buf[0] !== pathSep) {
      this._buf = Buffer.concat([pathSepB, this._buf]);
    } // normalize does not remove trailing slashes


    while (this._buf.length > 1 && this._buf[this._buf.length - 1] === pathSep) {
      this._buf = this._buf.slice(0, -1);
    }
  }
  /**
   * Check if the given key is sorted lower than ourself.
   *
   * @param {Key} key
   * @returns {bool}
   */


  less(key
  /* : Key */
  )
  /* : bool */
  {
    const list1 = this.list();
    const list2 = key.list();

    for (let i = 0; i < list1.length; i++) {
      if (list2.length < i + 1) {
        return false;
      }

      const c1 = list1[i];
      const c2 = list2[i];

      if (c1 < c2) {
        return true;
      } else if (c1 > c2) {
        return false;
      }
    }

    return list1.length < list2.length;
  }
  /**
   * Returns the key with all parts in reversed order.
   *
   * @returns {Key}
   *
   * @example
   * new Key('/Comedy/MontyPython/Actor:JohnCleese').reverse()
   * // => Key('/Actor:JohnCleese/MontyPython/Comedy')
   */


  reverse()
  /* : Key */
  {
    return Key.withNamespaces(this.list().slice().reverse());
  }
  /**
   * Returns the `namespaces` making up this Key.
   *
   * @returns {Array<string>}
   */


  namespaces()
  /* : Array<string> */
  {
    return this.list();
  }
  /** Returns the "base" namespace of this key.
   *
   * @returns {string}
   *
   * @example
   * new Key('/Comedy/MontyPython/Actor:JohnCleese').baseNamespace()
   * // => 'Actor:JohnCleese'
   *
   */


  baseNamespace()
  /* : string */
  {
    const ns = this.namespaces();
    return ns[ns.length - 1];
  }
  /**
   * Returns the `list` representation of this key.
   *
   * @returns {Array<string>}
   *
   * @example
   * new Key('/Comedy/MontyPython/Actor:JohnCleese').list()
   * // => ['Comedy', 'MontyPythong', 'Actor:JohnCleese']
   *
   */


  list()
  /* : Array<string> */
  {
    return this.toString().split(pathSepS).slice(1);
  }
  /**
   * Returns the "type" of this key (value of last namespace).
   *
   * @returns {string}
   *
   * @example
   * new Key('/Comedy/MontyPython/Actor:JohnCleese').type()
   * // => 'Actor'
   *
   */


  type()
  /* : string */
  {
    return namespaceType(this.baseNamespace());
  }
  /**
   * Returns the "name" of this key (field of last namespace).
   *
   * @returns {string}
   *
   * @example
   * new Key('/Comedy/MontyPython/Actor:JohnCleese').name()
   * // => 'JohnCleese'
   */


  name()
  /* : string */
  {
    return namespaceValue(this.baseNamespace());
  }
  /**
   * Returns an "instance" of this type key (appends value to namespace).
   *
   * @param {string} s
   * @returns {Key}
   *
   * @example
   * new Key('/Comedy/MontyPython/Actor').instance('JohnClesse')
   * // => Key('/Comedy/MontyPython/Actor:JohnCleese')
   */


  instance(s
  /* : string */
  )
  /* : Key */
  {
    return new _Key(this.toString() + ':' + s);
  }
  /**
   * Returns the "path" of this key (parent + type).
   *
   * @returns {Key}
   *
   * @example
   * new Key('/Comedy/MontyPython/Actor:JohnCleese').path()
   * // => Key('/Comedy/MontyPython/Actor')
   *
   */


  path()
  /* : Key */
  {
    let p = this.parent().toString();

    if (!p.endsWith(pathSepS)) {
      p += pathSepS;
    }

    p += this.type();
    return new _Key(p);
  }
  /**
   * Returns the `parent` Key of this Key.
   *
   * @returns {Key}
   *
   * @example
   * new Key("/Comedy/MontyPython/Actor:JohnCleese").parent()
   * // => Key("/Comedy/MontyPython")
   *
   */


  parent()
  /* : Key */
  {
    const list = this.list();

    if (list.length === 1) {
      return new _Key(pathSepS);
    }

    return new _Key(list.slice(0, -1).join(pathSepS));
  }
  /**
   * Returns the `child` Key of this Key.
   *
   * @param {Key} key
   * @returns {Key}
   *
   * @example
   * new Key('/Comedy/MontyPython').child(new Key('Actor:JohnCleese'))
   * // => Key('/Comedy/MontyPython/Actor:JohnCleese')
   *
   */


  child(key
  /* : Key */
  )
  /* : Key */
  {
    if (this.toString() === pathSepS) {
      return key;
    } else if (key.toString() === pathSepS) {
      return this;
    }

    return new _Key(this.toString() + key.toString(), false);
  }
  /**
   * Returns whether this key is a prefix of `other`
   *
   * @param {Key} other
   * @returns {bool}
   *
   * @example
   * new Key('/Comedy').isAncestorOf('/Comedy/MontyPython')
   * // => true
   *
   */


  isAncestorOf(other
  /* : Key */
  )
  /* : bool */
  {
    if (other.toString() === this.toString()) {
      return false;
    }

    return other.toString().startsWith(this.toString());
  }
  /**
   * Returns whether this key is a contains another as prefix.
   *
   * @param {Key} other
   * @returns {bool}
   *
   * @example
   * new Key('/Comedy/MontyPython').isDecendantOf('/Comedy')
   * // => true
   *
   */


  isDecendantOf(other
  /* : Key */
  )
  /* : bool */
  {
    if (other.toString() === this.toString()) {
      return false;
    }

    return this.toString().startsWith(other.toString());
  }
  /**
   * Returns wether this key has only one namespace.
   *
   * @returns {bool}
   *
   */


  isTopLevel()
  /* : bool */
  {
    return this.list().length === 1;
  }

}
/**
 * The first component of a namespace. `foo` in `foo:bar`
 *
 * @param {string} ns
 * @returns {string}
 */


function namespaceType(ns
/* : string */
)
/* : string */
{
  const parts = ns.split(':');

  if (parts.length < 2) {
    return '';
  }

  return parts.slice(0, -1).join(':');
}
/**
 * The last component of a namespace, `baz` in `foo:bar:baz`.
 *
 * @param {string} ns
 * @returns {string}
 */


function namespaceValue(ns
/* : string */
)
/* : string */
{
  const parts = ns.split(':');
  return parts[parts.length - 1];
}

const _Key = withIs(Key, {
  className: 'Key',
  symbolName: '@ipfs/interface-datastore/key'
});

module.exports = _Key;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 298 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const path = __webpack_require__(103);

const os = __webpack_require__(99);

const uuid = __webpack_require__(60);

exports.filter = (iterable, filterer) => {
  return _wrapAsyncGenerator(function* () {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;

    var _iteratorError;

    try {
      for (var _iterator = _asyncIterator(iterable), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
        const value = _value;
        const keep = yield _awaitAsyncGenerator(filterer(value));
        if (!keep) continue;
        yield value;
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          yield _awaitAsyncGenerator(_iterator.return());
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  })();
}; // Not just sort, because the sorter is given all the values and should return
// them all sorted


exports.sortAll = (iterable, sorter) => {
  return _wrapAsyncGenerator(function* () {
    let values = [];
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;

    var _iteratorError2;

    try {
      for (var _iterator2 = _asyncIterator(iterable), _step2, _value2; _step2 = yield _awaitAsyncGenerator(_iterator2.next()), _iteratorNormalCompletion2 = _step2.done, _value2 = yield _awaitAsyncGenerator(_step2.value), !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {
        const value = _value2;
        values.push(value);
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          yield _awaitAsyncGenerator(_iterator2.return());
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    values = yield _awaitAsyncGenerator(sorter(values));

    for (const value of values) yield value;
  })();
};

exports.take = (iterable, n) => {
  return _wrapAsyncGenerator(function* () {
    if (n <= 0) return;
    let i = 0;
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;

    var _iteratorError3;

    try {
      for (var _iterator3 = _asyncIterator(iterable), _step3, _value3; _step3 = yield _awaitAsyncGenerator(_iterator3.next()), _iteratorNormalCompletion3 = _step3.done, _value3 = yield _awaitAsyncGenerator(_step3.value), !_iteratorNormalCompletion3; _iteratorNormalCompletion3 = true) {
        const value = _value3;
        yield value;
        i++;
        if (i >= n) return;
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
          yield _awaitAsyncGenerator(_iterator3.return());
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }
  })();
};

exports.map = (iterable, mapper) => {
  return _wrapAsyncGenerator(function* () {
    var _iteratorNormalCompletion4 = true;
    var _didIteratorError4 = false;

    var _iteratorError4;

    try {
      for (var _iterator4 = _asyncIterator(iterable), _step4, _value4; _step4 = yield _awaitAsyncGenerator(_iterator4.next()), _iteratorNormalCompletion4 = _step4.done, _value4 = yield _awaitAsyncGenerator(_step4.value), !_iteratorNormalCompletion4; _iteratorNormalCompletion4 = true) {
        const value = _value4;
        yield mapper(value);
      }
    } catch (err) {
      _didIteratorError4 = true;
      _iteratorError4 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
          yield _awaitAsyncGenerator(_iterator4.return());
        }
      } finally {
        if (_didIteratorError4) {
          throw _iteratorError4;
        }
      }
    }
  })();
};

exports.replaceStartWith = function (s, r) {
  const matcher = new RegExp('^' + r);
  return s.replace(matcher, '');
};

exports.tmpdir = () => {
  return path.join(os.tmpdir(), uuid());
};

/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const errcode = __webpack_require__(668);

module.exports.dbOpenFailedError = err => {
  err = err || new Error('Cannot open database');
  return errcode(err, 'ERR_DB_OPEN_FAILED');
};

module.exports.dbDeleteFailedError = err => {
  err = err || new Error('Delete failed');
  return errcode(err, 'ERR_DB_DELETE_FAILED');
};

module.exports.dbWriteFailedError = err => {
  err = err || new Error('Write failed');
  return errcode(err, 'ERR_DB_WRITE_FAILED');
};

module.exports.notFoundError = err => {
  err = err || new Error('Not Found');
  return errcode(err, 'ERR_NOT_FOUND');
};

/***/ }),
/* 300 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* @flow */


const Key = __webpack_require__(42).Key;

const readme = __webpack_require__(670); // eslint-disable-next-line

/*:: import type {Datastore, Callback} from 'interface-datastore'

export interface ShardV1 {
  name: string;
  param: number;
  fun(string): string;
  toString(): string;
}
*/


const PREFIX = exports.PREFIX = '/repo/flatfs/shard/';
const SHARDING_FN = exports.SHARDING_FN = 'SHARDING';
exports.README_FN = '_README';

class Shard {
  /* :: name: string */

  /* :: param: number */

  /* :: _padding: string */
  constructor(param
  /* : number */
  ) {
    this.param = param;
  }

  fun(str
  /* : string */
  )
  /* : string */
  {
    throw new Error('implement me');
  }

  toString()
  /* : string */
  {
    return "".concat(PREFIX, "v1/").concat(this.name, "/").concat(this.param);
  }

}

class Prefix extends Shard {
  constructor(prefixLen
  /* : number */
  ) {
    super(prefixLen);
    this._padding = ''.padStart(prefixLen, '_');
    this.name = 'prefix';
  }

  fun(noslash
  /* : string */
  )
  /* : string */
  {
    return (noslash + this._padding).slice(0, this.param);
  }

}

class Suffix extends Shard {
  constructor(suffixLen
  /* : number */
  ) {
    super(suffixLen);
    this._padding = ''.padStart(suffixLen, '_');
    this.name = 'suffix';
  }

  fun(noslash
  /* : string */
  )
  /* : string */
  {
    const s = this._padding + noslash;
    return s.slice(s.length - this.param);
  }

}

class NextToLast extends Shard {
  constructor(suffixLen
  /* : number */
  ) {
    super(suffixLen);
    this._padding = ''.padStart(suffixLen + 1, '_');
    this.name = 'next-to-last';
  }

  fun(noslash
  /* : string */
  )
  /* : string */
  {
    const s = this._padding + noslash;
    const offset = s.length - this.param - 1;
    return s.slice(offset, offset + this.param);
  }

}
/**
 * Convert a given string to the matching sharding function.
 *
 * @param {string} str
 * @returns {ShardV1}
 */


function parseShardFun(str
/* : string */
) {
  str = str.trim();

  if (str.length === 0) {
    throw new Error('empty shard string');
  }

  if (!str.startsWith(PREFIX)) {
    throw new Error("invalid or no path prefix: ".concat(str));
  }

  const parts = str.slice(PREFIX.length).split('/');
  const version = parts[0];

  if (version !== 'v1') {
    throw new Error("expect 'v1' version, got '".concat(version, "'"));
  }

  const name = parts[1];

  if (!parts[2]) {
    throw new Error('missing param');
  }

  const param = parseInt(parts[2], 10);

  switch (name) {
    case 'prefix':
      return new Prefix(param);

    case 'suffix':
      return new Suffix(param);

    case 'next-to-last':
      return new NextToLast(param);

    default:
      throw new Error("unkown sharding function: ".concat(name));
  }
}

exports.readShardFun = async (path
/* : string */
, store) =>
/* : Promise<ShardV1> */
{
  const key = new Key(path).child(new Key(SHARDING_FN));
  const get = typeof store.getRaw === 'function' ? store.getRaw.bind(store) : store.get.bind(store);
  const res = await get(key);
  return parseShardFun((res || '').toString().trim());
};

exports.readme = readme;
exports.parseShardFun = parseShardFun;
exports.Prefix = Prefix;
exports.Suffix = Suffix;
exports.NextToLast = NextToLast;

/***/ }),
/* 301 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const base32 = __webpack_require__(302);

const {
  Key
} = __webpack_require__(14);

const CID = __webpack_require__(3);
/**
 * Transform a cid to the appropriate datastore key.
 *
 * @param {CID} cid
 * @returns {Key}
 */


exports.cidToKey = cid => {
  const enc = new base32.Encoder();
  return new Key('/' + enc.write(cid.buffer).finalize(), false);
};
/**
 * Transform a datastore Key instance to a CID
 *
 * @param {Key} key
 * @returns {CID}
 */


exports.keyToCid = key => {
  // Block key is of the form /<base32 encoded string>
  const decoder = new base32.Decoder();
  const buff = decoder.write(key.toString().slice(1)).finalize();
  return new CID(Buffer.from(buff));
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 302 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Generate a character map.
 * @param {string} alphabet e.g. "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"
 * @param {object} mappings map overrides from key to value
 * @method
 */

var charmap = function charmap(alphabet, mappings) {
  mappings || (mappings = {});
  alphabet.split("").forEach(function (c, i) {
    if (!(c in mappings)) mappings[c] = i;
  });
  return mappings;
};
/**
 * The RFC 4648 base 32 alphabet and character map.
 * @see {@link https://tools.ietf.org/html/rfc4648}
 */


var rfc4648 = {
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",
  charmap: {
    0: 14,
    1: 8
  }
};
rfc4648.charmap = charmap(rfc4648.alphabet, rfc4648.charmap);
/**
 * The Crockford base 32 alphabet and character map.
 * @see {@link http://www.crockford.com/wrmg/base32.html}
 */

var crockford = {
  alphabet: "0123456789ABCDEFGHJKMNPQRSTVWXYZ",
  charmap: {
    O: 0,
    I: 1,
    L: 1
  }
};
crockford.charmap = charmap(crockford.alphabet, crockford.charmap);
/**
 * base32hex
 * @see {@link https://en.wikipedia.org/wiki/Base32#base32hex}
 */

var base32hex = {
  alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV",
  charmap: {}
};
base32hex.charmap = charmap(base32hex.alphabet, base32hex.charmap);
/**
 * Create a new `Decoder` with the given options.
 *
 * @param {object} [options]
 *   @param {string} [type] Supported Base-32 variants are "rfc4648" and
 *     "crockford".
 *   @param {object} [charmap] Override the character map used in decoding.
 * @constructor
 */

function Decoder(options) {
  this.buf = [];
  this.shift = 8;
  this.carry = 0;

  if (options) {
    switch (options.type) {
      case "rfc4648":
        this.charmap = exports.rfc4648.charmap;
        break;

      case "crockford":
        this.charmap = exports.crockford.charmap;
        break;

      case "base32hex":
        this.charmap = exports.base32hex.charmap;
        break;

      default:
        throw new Error("invalid type");
    }

    if (options.charmap) this.charmap = options.charmap;
  }
}
/**
 * The default character map coresponds to RFC4648.
 */


Decoder.prototype.charmap = rfc4648.charmap;
/**
 * Decode a string, continuing from the previous state.
 *
 * @param {string} str
 * @return {Decoder} this
 */

Decoder.prototype.write = function (str) {
  var charmap = this.charmap;
  var buf = this.buf;
  var shift = this.shift;
  var carry = this.carry; // decode string

  str.toUpperCase().split("").forEach(function (char) {
    // ignore padding
    if (char == "=") return; // lookup symbol

    var symbol = charmap[char] & 0xff; // 1: 00000 000
    // 2:          00 00000 0
    // 3:                    0000 0000
    // 4:                             0 00000 00
    // 5:                                       000 00000
    // 6:                                                00000 000
    // 7:                                                         00 00000 0

    shift -= 5;

    if (shift > 0) {
      carry |= symbol << shift;
    } else if (shift < 0) {
      buf.push(carry | symbol >> -shift);
      shift += 8;
      carry = symbol << shift & 0xff;
    } else {
      buf.push(carry | symbol);
      shift = 8;
      carry = 0;
    }
  }); // save state

  this.shift = shift;
  this.carry = carry; // for chaining

  return this;
};
/**
 * Finish decoding.
 *
 * @param {string} [str] The final string to decode.
 * @return {Array} Decoded byte array.
 */


Decoder.prototype.finalize = function (str) {
  if (str) {
    this.write(str);
  }

  if (this.shift !== 8 && this.carry !== 0) {
    this.buf.push(this.carry);
    this.shift = 8;
    this.carry = 0;
  }

  return this.buf;
};
/**
 * Create a new `Encoder` with the given options.
 *
 * @param {object} [options]
 *   @param {string} [type] Supported Base-32 variants are "rfc4648" and
 *     "crockford".
 *   @param {object} [alphabet] Override the alphabet used in encoding.
 * @constructor
 */


function Encoder(options) {
  this.buf = "";
  this.shift = 3;
  this.carry = 0;

  if (options) {
    switch (options.type) {
      case "rfc4648":
        this.alphabet = exports.rfc4648.alphabet;
        break;

      case "crockford":
        this.alphabet = exports.crockford.alphabet;
        break;

      case "base32hex":
        this.alphabet = exports.base32hex.alphabet;
        break;

      default:
        throw new Error("invalid type");
    }

    if (options.alphabet) this.alphabet = options.alphabet;else if (options.lc) this.alphabet = this.alphabet.toLowerCase();
  }
}
/**
 * The default alphabet coresponds to RFC4648.
 */


Encoder.prototype.alphabet = rfc4648.alphabet;
/**
 * Encode a byte array, continuing from the previous state.
 *
 * @param {byte[]} buf The byte array to encode.
 * @return {Encoder} this
 */

Encoder.prototype.write = function (buf) {
  var shift = this.shift;
  var carry = this.carry;
  var symbol;
  var byte;
  var i; // encode each byte in buf

  for (i = 0; i < buf.length; i++) {
    byte = buf[i]; // 1: 00000 000
    // 2:          00 00000 0
    // 3:                    0000 0000
    // 4:                             0 00000 00
    // 5:                                       000 00000
    // 6:                                                00000 000
    // 7:                                                         00 00000 0

    symbol = carry | byte >> shift;
    this.buf += this.alphabet[symbol & 0x1f];

    if (shift > 5) {
      shift -= 5;
      symbol = byte >> shift;
      this.buf += this.alphabet[symbol & 0x1f];
    }

    shift = 5 - shift;
    carry = byte << shift;
    shift = 8 - shift;
  } // save state


  this.shift = shift;
  this.carry = carry; // for chaining

  return this;
};
/**
 * Finish encoding.
 *
 * @param {byte[]} [buf] The final byte array to encode.
 * @return {string} The encoded byte array.
 */


Encoder.prototype.finalize = function (buf) {
  if (buf) {
    this.write(buf);
  }

  if (this.shift !== 3) {
    this.buf += this.alphabet[this.carry & 0x1f];
    this.shift = 3;
    this.carry = 0;
  }

  return this.buf;
};
/**
 * Convenience encoder.
 *
 * @param {byte[]} buf The byte array to encode.
 * @param {object} [options] Options to pass to the encoder.
 * @return {string} The encoded string.
 */


exports.encode = function (buf, options) {
  return new Encoder(options).finalize(buf);
};
/**
 * Convenience decoder.
 *
 * @param {string} str The string to decode.
 * @param {object} [options] Options to pass to the decoder.
 * @return {byte[]} The decoded byte array.
 */


exports.decode = function (str, options) {
  return new Decoder(options).finalize(str);
}; // Exports.


exports.Decoder = Decoder;
exports.Encoder = Encoder;
exports.charmap = charmap;
exports.crockford = crockford;
exports.rfc4648 = rfc4648;
exports.base32hex = base32hex;

/***/ }),
/* 303 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const errors = __webpack_require__(167);

const debug = __webpack_require__(1);

const log = debug('repo:lock');
const lockFile = 'repo.lock';
const LOCKS = {};
/**
 * Lock the repo in the given dir.
 *
 * @param {string} dir
 * @returns {Promise<Object>}
 */

exports.lock = async dir => {
  // eslint-disable-line require-await
  const file = dir + '/' + lockFile;
  log('locking %s', file);

  if (LOCKS[file] === true) {
    throw new errors.LockExistsError("Lock already being held for file: ".concat(file));
  }

  LOCKS[file] = true;
  const closer = {
    async close() {
      // eslint-disable-line require-await
      if (LOCKS[file]) {
        delete LOCKS[file];
      }
    }

  };
  return closer;
};
/**
 * Check if the repo in the given directory is locked.
 *
 * @param {string} dir
 * @returns {bool}
 */


exports.locked = async dir => {
  // eslint-disable-line require-await
  const file = dir + '/' + lockFile;
  log("checking lock: ".concat(file));
  return Boolean(LOCKS[file]);
};

/***/ }),
/* 304 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.util = __webpack_require__(305);
exports.resolver = __webpack_require__(688);
exports.codec = exports.util.codec;
exports.defaultHashAlg = exports.util.defaultHashAlg;

/***/ }),
/* 305 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const cbor = __webpack_require__(248);

const multicodec = __webpack_require__(15);

const multihashing = __webpack_require__(22);

const CID = __webpack_require__(3);

const isCircular = __webpack_require__(254); // https://github.com/ipfs/go-ipfs/issues/3570#issuecomment-273931692


const CID_CBOR_TAG = 42;

function tagCID(cid) {
  if (typeof cid === 'string') {
    cid = new CID(cid).buffer;
  } else if (CID.isCID(cid)) {
    cid = cid.buffer;
  }

  return new cbor.Tagged(CID_CBOR_TAG, Buffer.concat([Buffer.from('00', 'hex'), // thanks jdag
  cid]));
}

function replaceCIDbyTAG(dagNode) {
  let circular;

  try {
    circular = isCircular(dagNode);
  } catch (e) {
    circular = false;
  }

  if (circular) {
    throw new Error('The object passed has circular references');
  }

  function transform(obj) {
    if (!obj || Buffer.isBuffer(obj) || typeof obj === 'string') {
      return obj;
    }

    if (Array.isArray(obj)) {
      return obj.map(transform);
    }

    if (CID.isCID(obj)) {
      return tagCID(obj);
    }

    const keys = Object.keys(obj);

    if (keys.length > 0) {
      // Recursive transform
      const out = {};
      keys.forEach(key => {
        if (typeof obj[key] === 'object') {
          out[key] = transform(obj[key]);
        } else {
          out[key] = obj[key];
        }
      });
      return out;
    } else {
      return obj;
    }
  }

  return transform(dagNode);
}

exports = module.exports;
exports.codec = multicodec.DAG_CBOR;
exports.defaultHashAlg = multicodec.SHA2_256;
const defaultTags = {
  [CID_CBOR_TAG]: val => {
    // remove that 0
    val = val.slice(1);
    return new CID(val);
  }
};
const defaultSize = 64 * 1024; // current decoder heap size, 64 Kb

let currentSize = defaultSize;
const defaultMaxSize = 64 * 1024 * 1024; // max heap size when auto-growing, 64 Mb

let maxSize = defaultMaxSize;
let decoder = null;
/**
 * Configure the underlying CBOR decoder.
 *
 * @param {Object} [options] - The options the decoder takes. The decoder will reset to the defaul values if no options are given.
 * @param {number} [options.size=65536] - The current heap size used in CBOR parsing, this may grow automatically as larger blocks are encountered up to `maxSize`
 * @param {number} [options.maxSize=67108864] - The maximum size the CBOR parsing heap is allowed to grow to before `dagCBOR.util.deserialize()` returns an error
 * @param {Object} [options.tags] - An object whose keys are CBOR tag numbers and values are transform functions that accept a `value` and return a decoded representation of that `value`
 */

exports.configureDecoder = options => {
  let tags = defaultTags;

  if (options) {
    if (typeof options.size === 'number') {
      currentSize = options.size;
    }

    if (typeof options.maxSize === 'number') {
      maxSize = options.maxSize;
    }

    if (options.tags) {
      tags = Object.assign({}, defaultTags, options && options.tags);
    }
  } else {
    // no options, reset to defaults
    currentSize = defaultSize;
    maxSize = defaultMaxSize;
  }

  const decoderOptions = {
    tags: tags,
    size: currentSize
  };
  decoder = new cbor.Decoder(decoderOptions); // borc edits opts.size in-place so we can capture _actual_ size

  currentSize = decoderOptions.size;
};

exports.configureDecoder(); // Setup default cbor.Decoder

/**
 * Serialize internal representation into a binary CBOR block.
 *
 * @param {Object} node - Internal representation of a CBOR block
 * @returns {Buffer} - The encoded binary representation
 */

exports.serialize = node => {
  const nodeTagged = replaceCIDbyTAG(node);
  const serialized = cbor.encode(nodeTagged);
  return serialized;
};
/**
 * Deserialize CBOR block into the internal representation.
 *
 * @param {Buffer} data - Binary representation of a CBOR block
 * @returns {Object} - An object that conforms to the IPLD Data Model
 */


exports.deserialize = data => {
  if (data.length > currentSize && data.length <= maxSize) {
    exports.configureDecoder({
      size: data.length
    });
  }

  if (data.length > currentSize) {
    throw new Error('Data is too large to deserialize with current decoder');
  }

  const deserialized = decoder.decodeFirst(data);
  return deserialized;
};
/**
 * Calculate the CID of the binary blob.
 *
 * @param {Object} binaryBlob - Encoded IPLD Node
 * @param {Object} [userOptions] - Options to create the CID
 * @param {number} [userOptions.cidVersion=1] - CID version number
 * @param {string} [UserOptions.hashAlg] - Defaults to the defaultHashAlg of the format
 * @returns {Promise.<CID>}
 */


exports.cid = async (binaryBlob, userOptions) => {
  const defaultOptions = {
    cidVersion: 1,
    hashAlg: exports.defaultHashAlg
  };
  const options = Object.assign(defaultOptions, userOptions);
  const multihash = await multihashing(binaryBlob, options.hashAlg);
  const codecName = multicodec.print[exports.codec];
  const cid = new CID(options.cidVersion, codecName, multihash);
  return cid;
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 306 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const CID = __webpack_require__(3);

const multihashing = __webpack_require__(22);

const multicodec = __webpack_require__(15); // binary resolver


module.exports = {
  codec: multicodec.RAW,
  defaultHashAlg: multicodec.SHA2_256,
  resolver: {
    /**
     * Resolves a path within a Raw block.
     *
     * Always returns the raw data as value without any remainderPath.
     *
     * @param {Buffer} binaryBlob - Binary representation of a PB block
     * @param {string} [path='/'] - Path that should be resolved (that value is ignored)
     * @returns {Object} result - Result of the path it it was resolved successfully
     * @returns {*} result.value - The raw data
     * @returns {string} result.remainderPath - An empty string
     */
    resolve: (binaryBlob, path) => {
      return {
        value: binaryBlob,
        remainderPath: ''
      };
    },

    /**
     * Return all available paths of a block.
     *
     * @generator
     * @param {Buffer} binaryBlob - The raw data
     * @returns {Object} - Finished generator with `done: true`
     */
    tree: binaryBlob => {
      return {
        done: true
      };
    }
  },
  util: {
    deserialize: data => {
      return data;
    },
    serialize: data => {
      return data;
    },

    /**
     * Calculate the CID of the binary blob.
     *
     * @param {Object} binaryBlob - Encoded IPLD Node
     * @param {Object} [userOptions] - Options to create the CID
     * @param {number} [userOptions.cidVersion=1] - CID version number
     * @param {string} [UserOptions.hashAlg] - Defaults to the defaultHashAlg of the format
     * @returns {Promise.<CID>}
     */
    cid: async (binaryBlob, userOptions) => {
      const defaultOptions = {
        cidVersion: 1,
        hashAlg: module.exports.defaultHashAlg
      };
      const options = Object.assign(defaultOptions, userOptions);
      const multihash = await multihashing(binaryBlob, options.hashAlg);
      const codecName = multicodec.print[module.exports.codec];
      const cid = new CID(options.cidVersion, codecName, multihash);
      return cid;
    }
  }
};

/***/ }),
/* 307 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const Multiaddr = __webpack_require__(20);

const reduceValue = (_, v) => v;

const tcpUri = (str, port, parts, opts) => {
  // return tcp when explicitly requested
  if (opts && opts.assumeHttp === false) return "tcp://".concat(str, ":").concat(port); // check if tcp is the last protocol in multiaddr

  let protocol = 'tcp';
  let explicitPort = ":".concat(port);
  const last = parts[parts.length - 1];

  if (last.protocol === 'tcp') {
    // assume http and produce clean urls
    protocol = port === '443' ? 'https' : 'http';
    explicitPort = port === '443' || port === '80' ? '' : explicitPort;
  }

  return "".concat(protocol, "://").concat(str).concat(explicitPort);
};

const Reducers = {
  ip4: reduceValue,
  ip6: (str, content, i, parts) => parts.length === 1 && parts[0].protocol === 'ip6' ? content : "[".concat(content, "]"),
  tcp: (str, content, i, parts, opts) => parts.some(p => ['http', 'https', 'ws', 'wss'].includes(p.protocol)) ? "".concat(str, ":").concat(content) : tcpUri(str, content, parts, opts),
  udp: (str, content) => "udp://".concat(str, ":").concat(content),
  dnsaddr: reduceValue,
  dns4: reduceValue,
  dns6: reduceValue,
  ipfs: (str, content) => "".concat(str, "/ipfs/").concat(content),
  p2p: (str, content) => "".concat(str, "/p2p/").concat(content),
  http: str => "http://".concat(str),
  https: str => "https://".concat(str),
  ws: str => "ws://".concat(str),
  wss: str => "wss://".concat(str),
  'p2p-websocket-star': str => "".concat(str, "/p2p-websocket-star"),
  'p2p-webrtc-star': str => "".concat(str, "/p2p-webrtc-star"),
  'p2p-webrtc-direct': str => "".concat(str, "/p2p-webrtc-direct")
};

module.exports = (multiaddr, opts) => {
  const ma = Multiaddr(multiaddr);
  const parts = multiaddr.toString().split('/').slice(1);
  return ma.tuples().map(tuple => ({
    protocol: parts.shift(),
    content: tuple[1] ? parts.shift() : null
  })).reduce((str, part, i, parts) => {
    const reduce = Reducers[part.protocol];
    if (!reduce) throw new Error("Unsupported protocol ".concat(part.protocol));
    return reduce(str, part.content, i, parts, opts);
  }, '');
};

/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const {
  createFromPrivKey
} = __webpack_require__(9);

const errcode = __webpack_require__(2);

const debug = __webpack_require__(1);

const log = debug('ipfs:ipns');
log.error = debug('ipfs:ipns:error');

const IpnsPublisher = __webpack_require__(695);

const IpnsRepublisher = __webpack_require__(701);

const IpnsResolver = __webpack_require__(702);

const {
  normalizePath
} = __webpack_require__(29);

const TLRU = __webpack_require__(259);

const defaultRecordTtl = 60 * 1000;

class IPNS {
  constructor(routing, datastore, peerInfo, keychain, options) {
    this.publisher = new IpnsPublisher(routing, datastore);
    this.republisher = new IpnsRepublisher(this.publisher, datastore, peerInfo, keychain, options);
    this.resolver = new IpnsResolver(routing);
    this.cache = new TLRU(1000);
    this.routing = routing;
  } // Publish


  async publish(privKey, value, lifetime = IpnsPublisher.defaultRecordLifetime) {
    try {
      value = normalizePath(value);
      const peerId = await createFromPrivKey(privKey.bytes);
      await this.publisher.publishWithEOL(privKey, value, lifetime);
      log("IPNS value ".concat(value, " was published correctly")); // // Add to cache

      const id = peerId.toB58String();
      const ttEol = parseFloat(lifetime);
      const ttl = ttEol < defaultRecordTtl ? ttEol : defaultRecordTtl;
      this.cache.set(id, value, ttl);
      log("IPNS value ".concat(value, " was cached correctly"));
      return {
        name: id,
        value: value
      };
    } catch (err) {
      log.error(err);
      throw err;
    }
  } // Resolve


  async resolve(name, options) {
    if (typeof name !== 'string') {
      throw errcode(new Error('name received is not valid'), 'ERR_INVALID_NAME');
    }

    options = options || {}; // If recursive, we should not try to get the cached value

    if (!options.nocache && !options.recursive) {
      // Try to get the record from cache
      const id = name.split('/')[2];
      const result = this.cache.get(id);

      if (result) {
        return result;
      }
    }

    try {
      const result = await this.resolver.resolve(name, options);
      log("IPNS record from ".concat(name, " was resolved correctly"));
      return result;
    } catch (err) {
      log.error(err);
      throw err;
    }
  } // Initialize keyspace
  // sets the ipns record for the given key to point to an empty directory


  async initializeKeyspace(privKey, value) {
    // eslint-disable-line require-await
    return this.publish(privKey, value, IpnsPublisher.defaultRecordLifetime);
  }

}

module.exports = IPNS;

/***/ }),
/* 309 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const {
  Key
} = __webpack_require__(14);

const {
  Record
} = __webpack_require__(68);

const {
  encodeBase32
} = __webpack_require__(311);

const errcode = __webpack_require__(2);

const debug = __webpack_require__(1);

const log = debug('ipfs:ipns:offline-datastore');
log.error = debug('ipfs:ipns:offline-datastore:error'); // Offline datastore aims to mimic the same encoding as routing when storing records
// to the local datastore

class OfflineDatastore {
  constructor(repo) {
    this._repo = repo;
  }
  /**
   * Put a value to the local datastore indexed by the received key properly encoded.
   * @param {Buffer} key identifier of the value.
   * @param {Buffer} value value to be stored.
   * @param {function(Error)} callback
   * @returns {void}
   */


  async put(key, value) {
    // eslint-disable-line require-await
    if (!Buffer.isBuffer(key)) {
      throw errcode(new Error('Offline datastore key must be a buffer'), 'ERR_INVALID_KEY');
    }

    if (!Buffer.isBuffer(value)) {
      throw errcode(new Error('Offline datastore value must be a buffer'), 'ERR_INVALID_VALUE');
    }

    let routingKey;

    try {
      routingKey = this._routingKey(key);
    } catch (err) {
      log.error(err);
      throw errcode(new Error('Not possible to generate the routing key'), 'ERR_GENERATING_ROUTING_KEY');
    } // Marshal to libp2p record as the DHT does


    const record = new Record(key, value);
    return this._repo.datastore.put(routingKey, record.serialize());
  }
  /**
   * Get a value from the local datastore indexed by the received key properly encoded.
   * @param {Buffer} key identifier of the value to be obtained.
   * @param {function(Error, Buffer)} callback
   * @returns {void}
   */


  async get(key) {
    if (!Buffer.isBuffer(key)) {
      throw errcode(new Error('Offline datastore key must be a buffer'), 'ERR_INVALID_KEY');
    }

    let routingKey;

    try {
      routingKey = this._routingKey(key);
    } catch (err) {
      log.error(err);
      throw errcode(new Error('Not possible to generate the routing key'), 'ERR_GENERATING_ROUTING_KEY');
    }

    const res = await this._repo.datastore.get(routingKey); // Unmarshal libp2p record as the DHT does

    let record;

    try {
      record = Record.deserialize(res);
    } catch (err) {
      log.error(err);
      throw err;
    }

    return record.value;
  } // encode key properly - base32(/ipns/{cid})


  _routingKey(key) {
    return new Key('/' + encodeBase32(key), false);
  }

}

exports = module.exports = OfflineDatastore;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 310 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var bufferIndexOf = __webpack_require__(707);

module.exports = function (buf, splitBuf, includeDelim) {
  var search = -1,
      lines = [],
      move = includeDelim ? splitBuf.length : 0;

  while ((search = bufferIndexOf(buf, splitBuf)) > -1) {
    lines.push(buf.slice(0, search + move));
    buf = buf.slice(search + splitBuf.length, buf.length);
  }

  lines.push(buf);
  return lines;
};

/***/ }),
/* 311 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const multibase = __webpack_require__(53);

const ipns = __webpack_require__(84);

module.exports = {
  encodeBase32: buf => {
    const m = multibase.encode('base32', buf).slice(1); // slice off multibase codec

    return m.toString().toUpperCase(); // should be uppercase for interop with go
  },
  validator: {
    func: (key, record, cb) => ipns.validator.validate(record, key, cb)
  },
  selector: (k, records) => ipns.validator.select(records[0], records[1])
};

/***/ }),
/* 312 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const assert = __webpack_require__(13);

const {
  utils
} = __webpack_require__(111);

const PeerInfo = __webpack_require__(17);

const BasicPubsub = __webpack_require__(735);

const {
  MessageCache
} = __webpack_require__(743);

const {
  rpc
} = __webpack_require__(318);

const constants = __webpack_require__(171);

const Heartbeat = __webpack_require__(744);

class GossipSub extends BasicPubsub {
  /**
   * @param {PeerInfo} peerInfo instance of the peer's PeerInfo
   * @param {Object} registrar
   * @param {function} registrar.handle
   * @param {function} registrar.register
   * @param {function} registrar.unregister
   * @param {Object} [options]
   * @param {bool} [options.emitSelf] if publish should emit to self, if subscribed, defaults to false
   * @param {bool} [options.gossipIncoming] if incoming messages on a subscribed topic should be automatically gossiped, defaults to true
   * @param {bool} [options.fallbackToFloodsub] if dial should fallback to floodsub, defaults to true
   * @constructor
   */
  constructor(peerInfo, registrar, options = {}) {
    assert(PeerInfo.isPeerInfo(peerInfo), 'peer info must be an instance of `peer-info`');
    super({
      debugName: 'libp2p:gossipsub',
      multicodec: constants.GossipSubID,
      peerInfo,
      registrar,
      options
    });
    /**
     * Map of topic meshes
     *
     * @type {Map<string, Set<Peer>>}
     */

    this.mesh = new Map();
    /**
     * Map of topics to set of peers. These mesh peers are the ones to which we are publishing without a topic membership
     *
     * @type {Map<string, Set<Peer>>}
     */

    this.fanout = new Map();
    /**
     * Map of last publish time for fanout topics
     *
     * @type {Map<string, Number>}
     */

    this.lastpub = new Map();
    /**
     * Map of pending messages to gossip
     *
     * @type {Map<Peer, Array<rpc.RPC.ControlIHave object>> }
     */

    this.gossip = new Map();
    /**
     * Map of control messages
     *
     * @type {Map<Peer, rpc.RPC.ControlMessage object>}
     */

    this.control = new Map();
    /**
     * A message cache that contains the messages for last few hearbeat ticks
     *
     */

    this.messageCache = new MessageCache(constants.GossipSubHistoryGossip, constants.GossipSubHistoryLength);
    /**
     * A heartbeat timer that maintains the mesh
     */

    this.heartbeat = new Heartbeat(this);
  }
  /**
   * Removes a peer from the router
   * @override
   * @param {Peer} peer
   * @returns {PeerInfo}
   */


  _removePeer(peer) {
    super._removePeer(peer); // Remove this peer from the mesh
    // eslint-disable-next-line no-unused-vars


    for (const [_, peers] of this.mesh.entries()) {
      peers.delete(peer);
    } // Remove this peer from the fanout
    // eslint-disable-next-line no-unused-vars


    for (const [_, peers] of this.fanout.entries()) {
      peers.delete(peer);
    } // Remove from gossip mapping


    this.gossip.delete(peer); // Remove from control mapping

    this.control.delete(peer);
    return peer;
  }
  /**
   * Handles an rpc control message from a peer
   * @param {Peer} peer
   * @param {rpc.RPC} rpc
   * @returns {void}
   */


  _handleRpcControl(peer, rpc) {
    const controlMsg = rpc.control;

    if (!controlMsg) {
      return;
    }

    const iWant = this._handleIHave(peer, controlMsg.ihave);

    const iHave = this._handleIWant(peer, controlMsg.iwant);

    const prune = this._handleGraft(peer, controlMsg.graft);

    this._handlePrune(peer, controlMsg.prune);

    if (!iWant || !iHave || !prune) {
      return;
    }

    const outRpc = this._rpcWithControl(iHave, null, iWant, null, prune);

    this._sendRpc(rpc.from, outRpc);
  }
  /**
   * Process incoming message,
   * emitting locally and forwarding on to relevant floodsub and gossipsub peers
   * @param {rpc.RPC.Message} msg
   */


  _processRpcMessage(msg) {
    super._processRpcMessage(msg);

    const topics = msg.topicIDs; // If options.gossipIncoming is false, do NOT emit incoming messages to peers

    if (!this._options.gossipIncoming) {
      return;
    } // Emit to floodsub peers


    this.peers.forEach(peer => {
      if (peer.info.protocols.has(constants.FloodSubID) && peer.info.id.toB58String() !== msg.from && utils.anyMatch(peer.topics, topics) && peer.isWritable) {
        peer.sendMessages(utils.normalizeOutRpcMessages([msg]));
        this.log('publish msg on topics - floodsub', topics, peer.info.id.toB58String());
      }
    }); // Emit to peers in the mesh

    topics.forEach(topic => {
      if (!this.mesh.has(topic)) {
        return;
      }

      this.mesh.get(topic).forEach(peer => {
        if (!peer.isWritable || peer.info.id.toB58String() === msg.from) {
          return;
        }

        peer.sendMessages(utils.normalizeOutRpcMessages([msg]));
        this.log('publish msg on topic - meshsub', topic, peer.info.id.toB58String());
      });
    });
  }
  /**
   * Handles IHAVE messages
   * @param {Peer} peer
   * @param {Array<rpc.RPC.ControlIHave>} ihave
   * @returns {rpc.RPC.ControlIWant}
   */


  _handleIHave(peer, ihave) {
    const iwant = new Set();
    ihave.forEach(({
      topicID,
      messageIDs
    }) => {
      if (!this.mesh.has(topicID)) {
        return;
      }

      messageIDs.forEach(msgID => {
        if (this.seenCache.has(msgID)) {
          return;
        }

        iwant.add(msgID);
      });
    });

    if (!iwant.size) {
      return;
    }

    this.log('IHAVE: Asking for %d messages from %s', iwant.size, peer.info.id.toB58String());
    return {
      messageIDs: Array.from(iwant)
    };
  }
  /**
   * Handles IWANT messages
   * Returns messages to send back to peer
   * @param {Peer} peer
   * @param {Array<rpc.RPC.ControlIWant>} iwant
   * @returns {Array<rpc.RPC.Message>}
   */


  _handleIWant(peer, iwant) {
    // @type {Map<string, rpc.RPC.Message>}
    const ihave = new Map();
    iwant.forEach(({
      messageIDs
    }) => {
      messageIDs.forEach(msgID => {
        const msg = this.messageCache.get(msgID);

        if (msg) {
          ihave.set(msgID, msg);
        }
      });
    });

    if (!ihave.size) {
      return;
    }

    this.log('IWANT: Sending %d messages to %s', ihave.size, peer.info.id.toB58String());
    return Array.from(ihave.values());
  }
  /**
   * Handles Graft messages
   * @param {Peer} peer
   * @param {Array<rpc.RPC.ControlGraft>} graft
   * @return {Array<rpc.RPC.ControlPrune>}
   */


  _handleGraft(peer, graft) {
    const prune = [];
    graft.forEach(({
      topicID
    }) => {
      const peers = this.mesh.get(topicID);

      if (!peers) {
        prune.push(topicID);
      } else {
        this.log('GRAFT: Add mesh link from %s in %s', peer.info.id.toB58String(), topicID);
        peers.add(peer);
        peer.topics.add(topicID);
        this.mesh.set(topicID, peers);
      }
    });

    if (!prune.length) {
      return;
    }

    const buildCtrlPruneMsg = topic => {
      return {
        topicID: topic
      };
    };

    return prune.map(buildCtrlPruneMsg);
  }
  /**
   * Handles Prune messages
   * @param {Peer} peer
   * @param {Array<rpc.RPC.ControlPrune>} prune
   * @returns {void}
   */


  _handlePrune(peer, prune) {
    prune.forEach(({
      topicID
    }) => {
      const peers = this.mesh.get(topicID);

      if (peers) {
        this.log('PRUNE: Remove mesh link to %s in %s', peer.info.id.toB58String(), topicID);
        peers.delete(peer);
        peer.topics.delete(topicID);
      }
    });
  }
  /**
   * Mounts the gossipsub protocol onto the libp2p node and sends our
   * our subscriptions to every peer connected
   * @override
   * @returns {Promise}
   */


  async start() {
    await super.start();
    this.heartbeat.start();
  }
  /**
   * Unmounts the gossipsub protocol and shuts down every connection
   * @override
   * @returns {Promise}
   */


  async stop() {
    await super.stop();
    this.heartbeat.stop();
    this.mesh = new Map();
    this.fanout = new Map();
    this.lastpub = new Map();
    this.gossip = new Map();
    this.control = new Map();
  }
  /**
   * Join topics
   * @param {Array<string>|string} topics
   * @returns {void}
   */


  join(topics) {
    assert(this.started, 'GossipSub has not started');
    topics = utils.ensureArray(topics);
    this.log('JOIN %s', topics);
    topics.forEach(topic => {
      // Send GRAFT to mesh peers
      const fanoutPeers = this.fanout.get(topic);

      if (fanoutPeers) {
        this.mesh.set(topic, fanoutPeers);
        this.fanout.delete(topic);
        this.lastpub.delete(topic);
      } else {
        const peers = this._getPeers(topic, constants.GossipSubD);

        this.mesh.set(topic, peers);
      }

      this.mesh.get(topic).forEach(peer => {
        this.log('JOIN: Add mesh link to %s in %s', peer.info.id.toB58String(), topic);

        this._sendGraft(peer, topic);
      });
    });
  }
  /**
   * Leave topics
   * @param {Array<string>|string} topics
   * @returns {void}
   */


  leave(topics) {
    topics = utils.ensureArray(topics);
    this.log('LEAVE %s', topics);
    topics.forEach(topic => {
      // Send PRUNE to mesh peers
      const meshPeers = this.mesh.get(topic);

      if (meshPeers) {
        meshPeers.forEach(peer => {
          this.log('LEAVE: Remove mesh link to %s in %s', peer.info.id.toB58String(), topic);

          this._sendPrune(peer, topic);
        });
        this.mesh.delete(topic);
      }
    });
  }

  _publish(messages) {
    messages.forEach(msgObj => {
      this.messageCache.put(msgObj); // @type Set<string>

      const tosend = new Set();
      msgObj.topicIDs.forEach(topic => {
        const peersInTopic = this.topics.get(topic);

        if (!peersInTopic) {
          return;
        } // floodsub peers


        peersInTopic.forEach(peer => {
          if (peer.info.protocols.has(constants.FloodSubID)) {
            tosend.add(peer);
          }
        }); // Gossipsub peers handling

        let meshPeers = this.mesh.get(topic);

        if (!meshPeers) {
          // We are not in the mesh for topic, use fanout peers
          meshPeers = this.fanout.get(topic);

          if (!meshPeers) {
            // If we are not in the fanout, then pick any peers in topic
            const peers = this._getPeers(topic, constants.GossipSubD);

            if (peers.size > 0) {
              meshPeers = peers;
              this.fanout.set(topic, peers);
            } else {
              meshPeers = [];
            }
          } // Store the latest publishing time


          this.lastpub.set(topic, this._now());
        }

        meshPeers.forEach(peer => {
          tosend.add(peer);
        });
      }); // Publish messages to peers

      tosend.forEach(peer => {
        if (peer.info.id.toB58String() === msgObj.from) {
          return;
        }

        this._sendRpc(peer, {
          msgs: [msgObj]
        });
      });
    });
  }
  /**
   * Sends a GRAFT message to a peer
   * @param {Peer} peer
   * @param {String} topic
   * @returns {void}
   */


  _sendGraft(peer, topic) {
    const graft = [{
      topicID: topic
    }];

    const out = this._rpcWithControl(null, null, null, graft, null);

    this._sendRpc(peer, out);
  }
  /**
   * Sends a PRUNE message to a peer
   * @param {Peer} peer
   * @param {String} topic
   * @returns {void}
   */


  _sendPrune(peer, topic) {
    const prune = [{
      topicID: topic
    }];

    const out = this._rpcWithControl(null, null, null, null, prune);

    this._sendRpc(peer, out);
  }

  _sendRpc(peer, outRpc) {
    if (!peer || !peer.isWritable) {
      return;
    } // piggyback control message retries


    const ctrl = this.control.get(peer);

    if (ctrl) {
      this._piggybackControl(peer, outRpc, ctrl);

      this.control.delete(peer);
    } // piggyback gossip


    const ihave = this.gossip.get(peer);

    if (ihave) {
      this._piggybackGossip(peer, outRpc, ihave);

      this.gossip.delete(peer);
    }

    peer.write(rpc.RPC.encode(outRpc));
  }

  _piggybackControl(peer, outRpc, ctrl) {
    const tograft = (ctrl.graft || []).filter(({
      topicID
    }) => (this.mesh.get(topicID) || new Set()).has(peer));
    const toprune = (ctrl.prune || []).filter(({
      topicID
    }) => !(this.mesh.get(topicID) || new Set()).has(peer));

    if (!tograft.length && !toprune.length) {
      return;
    }

    outRpc.control = outRpc.control || {};
    outRpc.control.graft = (outRpc.control.graft || []).concat(tograft);
    outRpc.control.prune = (outRpc.control.prune || []).concat(toprune);
  }

  _piggybackGossip(peer, outRpc, ihave) {
    outRpc.control = outRpc.control || {};
    outRpc.control.ihave = ihave;
  }
  /**
   * Send graft and prune messages
   * @param {Map<Peer, Array<String>>} tograft
   * @param {Map<Peer, Array<String>>} toprune
   */


  _sendGraftPrune(tograft, toprune) {
    for (const [p, topics] of tograft) {
      const graft = topics.map(topicID => ({
        topicID
      }));
      let prune = null; // If a peer also has prunes, process them now

      const pruneMsg = toprune.get(p);

      if (pruneMsg) {
        prune = pruneMsg.map(topicID => ({
          topicID
        }));
        toprune.delete(p);
      }

      const outRpc = this._rpcWithControl(null, null, null, graft, prune);

      this._sendRpc(p, outRpc);
    }

    for (const [p, topics] of toprune) {
      const prune = topics.map(topicID => ({
        topicID
      }));

      const outRpc = this._rpcWithControl(null, null, null, null, prune);

      this._sendRpc(p, outRpc);
    }
  }
  /**
   * Emits gossip to peers in a particular topic
   * @param {String} topic
   * @param {Set<Peer>} peers - peers to exclude
   * @returns {void}
   */


  _emitGossip(topic, peers) {
    const messageIDs = this.messageCache.getGossipIDs(topic);

    if (!messageIDs.length) {
      return;
    }

    const gossipSubPeers = this._getPeers(topic, constants.GossipSubD);

    gossipSubPeers.forEach(peer => {
      // skip mesh peers
      if (!peers.has(peer)) {
        this._pushGossip(peer, {
          topicID: topic,
          messageIDs: messageIDs
        });
      }
    });
  }
  /**
   * Flush gossip and control messages
   */


  _flush() {
    // send gossip first, which will also piggyback control
    for (const [peer, ihave] of this.gossip.entries()) {
      this.gossip.delete(peer);

      const out = this._rpcWithControl(null, ihave, null, null, null);

      this._sendRpc(peer, out);
    } // send the remaining control messages


    for (const [peer, control] of this.control.entries()) {
      this.control.delete(peer);

      const out = this._rpcWithControl(null, null, null, control.graft, control.prune);

      this._sendRpc(peer, out);
    }
  }
  /**
   * Adds new IHAVE messages to pending gossip
   * @param {Peer} peer
   * @param {Array<rpc.RPC.ControlIHave>} controlIHaveMsgs
   * @returns {void}
   */


  _pushGossip(peer, controlIHaveMsgs) {
    this.log('Add gossip to %s', peer.info.id.toB58String());
    const gossip = this.gossip.get(peer) || [];
    this.gossip.set(peer, gossip.concat(controlIHaveMsgs));
  }
  /**
   * Returns the current time in milliseconds
   * @returns {number}
   */


  _now() {
    return Date.now();
  }

}

module.exports = GossipSub;
module.exports.multicodec = constants.GossipSubID;

/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const withIs = __webpack_require__(21);

const noop = () => {};

class Topology {
  /**
   * @param {Object} props
   * @param {number} props.min minimum needed connections (default: 0)
   * @param {number} props.max maximum needed connections (default: Infinity)
   * @param {Object} [props.handlers]
   * @param {function} [props.handlers.onConnect] protocol "onConnect" handler
   * @param {function} [props.handlers.onDisconnect] protocol "onDisconnect" handler
   * @constructor
   */
  constructor({
    min = 0,
    max = Infinity,
    handlers = {}
  }) {
    this.min = min;
    this.max = max; // Handlers

    this._onConnect = handlers.onConnect || noop;
    this._onDisconnect = handlers.onDisconnect || noop;
    this.peers = new Map();
  }

  set registrar(registrar) {
    this._registrar = registrar;
  }
  /**
   * Notify about peer disconnected event.
   * @param {PeerInfo} peerInfo
   * @returns {void}
   */


  disconnect(peerInfo) {
    this._onDisconnect(peerInfo);
  }

}

module.exports = withIs(Topology, {
  className: 'Topology',
  symbolName: '@libp2p/js-interfaces/topology'
});

/***/ }),
/* 314 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const Varint = __webpack_require__(19);

const {
  Buffer
} = __webpack_require__(0); // Encode the passed length `value` to the `target` buffer at the given `offset`


const varintEncode = (value, target, offset) => {
  const ret = Varint.encode(value, target, offset);
  varintEncode.bytes = Varint.encode.bytes; // If no target, create Buffer from returned array

  return target || Buffer.from(ret);
};

module.exports = varintEncode;

/***/ }),
/* 315 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const Varint = __webpack_require__(19);

const toBufferProxy = bl => new Proxy({}, {
  get: (_, prop) => prop[0] === 'l' ? bl[prop] : bl.get(parseInt(prop))
});

const varintDecode = data => {
  const len = Varint.decode(Buffer.isBuffer(data) ? data : toBufferProxy(data));
  varintDecode.bytes = Varint.decode.bytes;
  return len;
};

module.exports = varintDecode;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 316 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const FixedFIFO = __webpack_require__(732);

module.exports = class FastFIFO {
  constructor(hwm) {
    this.hwm = hwm || 16;
    this.head = new FixedFIFO(this.hwm);
    this.tail = this.head;
  }

  push(val) {
    if (!this.head.push(val)) {
      const prev = this.head;
      this.head = prev.next = new FixedFIFO(2 * this.head.buffer.length);
      this.head.push(val);
    }
  }

  shift() {
    const val = this.tail.shift();

    if (val === undefined && this.tail.next) {
      const next = this.tail.next;
      this.tail.next = null;
      this.tail = next;
      return this.tail.shift();
    }

    return val;
  }

  isEmpty() {
    return this.head.isEmpty();
  }

};

/***/ }),
/* 317 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const indentString = __webpack_require__(738);

const cleanStack = __webpack_require__(739);

const cleanInternalStack = stack => stack.replace(/\s+at .*aggregate-error\/index.js:\d+:\d+\)?/g, '');

class AggregateError extends Error {
  constructor(errors) {
    if (!Array.isArray(errors)) {
      throw new TypeError("Expected input to be an Array, got ".concat(typeof errors));
    }

    errors = [...errors].map(error => {
      if (error instanceof Error) {
        return error;
      }

      if (error !== null && typeof error === 'object') {
        // Handle plain error objects with message property and/or possibly other metadata
        return Object.assign(new Error(error.message), error);
      }

      return new Error(error);
    });
    let message = errors.map(error => {
      // The `stack` property is not standardized, so we can't assume it exists
      return typeof error.stack === 'string' ? cleanInternalStack(cleanStack(error.stack)) : String(error);
    }).join('\n');
    message = '\n' + indentString(message, 4);
    super(message);
    this.name = 'AggregateError';
    Object.defineProperty(this, '_errors', {
      value: errors
    });
  }

  *[Symbol.iterator]() {
    for (const error of this._errors) {
      yield error;
    }
  }

}

module.exports = AggregateError;

/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const protons = __webpack_require__(24);

const rpcProto = protons(__webpack_require__(741));
const topicDescriptorProto = protons(__webpack_require__(742));
exports = module.exports;
exports.rpc = rpcProto;
exports.td = topicDescriptorProto;

/***/ }),
/* 319 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


class CancelError extends Error {
  constructor(reason) {
    super(reason || 'Promise was canceled');
    this.name = 'CancelError';
  }

  get isCanceled() {
    return true;
  }

}

class PCancelable {
  static fn(userFn) {
    return (...arguments_) => {
      return new PCancelable((resolve, reject, onCancel) => {
        arguments_.push(onCancel); // eslint-disable-next-line promise/prefer-await-to-then

        userFn(...arguments_).then(resolve, reject);
      });
    };
  }

  constructor(executor) {
    this._cancelHandlers = [];
    this._isPending = true;
    this._isCanceled = false;
    this._rejectOnCancel = true;
    this._promise = new Promise((resolve, reject) => {
      this._reject = reject;

      const onResolve = value => {
        this._isPending = false;
        resolve(value);
      };

      const onReject = error => {
        this._isPending = false;
        reject(error);
      };

      const onCancel = handler => {
        if (!this._isPending) {
          throw new Error('The `onCancel` handler was attached after the promise settled.');
        }

        this._cancelHandlers.push(handler);
      };

      Object.defineProperties(onCancel, {
        shouldReject: {
          get: () => this._rejectOnCancel,
          set: boolean => {
            this._rejectOnCancel = boolean;
          }
        }
      });
      return executor(onResolve, onReject, onCancel);
    });
  }

  then(onFulfilled, onRejected) {
    // eslint-disable-next-line promise/prefer-await-to-then
    return this._promise.then(onFulfilled, onRejected);
  }

  catch(onRejected) {
    return this._promise.catch(onRejected);
  }

  finally(onFinally) {
    return this._promise.finally(onFinally);
  }

  cancel(reason) {
    if (!this._isPending || this._isCanceled) {
      return;
    }

    if (this._cancelHandlers.length > 0) {
      try {
        for (const handler of this._cancelHandlers) {
          handler();
        }
      } catch (error) {
        this._reject(error);
      }
    }

    this._isCanceled = true;

    if (this._rejectOnCancel) {
      this._reject(new CancelError(reason));
    }
  }

  get isCanceled() {
    return this._isCanceled;
  }

}

Object.setPrototypeOf(PCancelable.prototype, Promise.prototype);
module.exports = PCancelable;
module.exports.CancelError = CancelError;

/***/ }),
/* 320 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Symbol = __webpack_require__(175),
    getRawTag = __webpack_require__(760),
    objectToString = __webpack_require__(761);
/** `Object#toString` result references. */


var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';
/** Built-in value references. */

var symToStringTag = Symbol ? Symbol.toStringTag : undefined;
/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */

function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }

  return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
}

module.exports = baseGetTag;

/***/ }),
/* 321 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var baseIsNative = __webpack_require__(770),
    getValue = __webpack_require__(774);
/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */


function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

module.exports = getNative;

/***/ }),
/* 322 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var baseGetTag = __webpack_require__(320),
    isObject = __webpack_require__(177);
/** `Object#toString` result references. */


var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';
/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */

function isFunction(value) {
  if (!isObject(value)) {
    return false;
  } // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.


  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

module.exports = isFunction;

/***/ }),
/* 323 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */
exports = module.exports = __webpack_require__(797);
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome && 'undefined' != typeof chrome.storage ? chrome.storage.local : localstorage();
/**
 * Colors.
 */

exports.colors = ['lightseagreen', 'forestgreen', 'goldenrod', 'dodgerblue', 'darkorchid', 'crimson'];
/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
    return true;
  } // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632


  return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // is firebug? http://stackoverflow.com/a/398120/376773
  typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || // is firefox >= v31?
  // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // double check webkit in userAgent just in case we are in a worker
  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
}
/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */


exports.formatters.j = function (v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};
/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */


function formatArgs(args) {
  var useColors = this.useColors;
  args[0] = (useColors ? '%c' : '') + this.namespace + (useColors ? ' %c' : ' ') + args[0] + (useColors ? '%c ' : ' ') + '+' + exports.humanize(this.diff);
  if (!useColors) return;
  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit'); // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into

  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function (match) {
    if ('%%' === match) return;
    index++;

    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });
  args.splice(lastC, 0, c);
}
/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */


function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console && console.log && Function.prototype.apply.call(console.log, console, arguments);
}
/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */


function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch (e) {}
}
/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */


function load() {
  var r;

  try {
    r = exports.storage.debug;
  } catch (e) {} // If debug isn't set in LS, and we're in Electron, try to load $DEBUG


  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}
/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */


exports.enable(load());
/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
  try {
    return window.localStorage;
  } catch (e) {}
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5)))

/***/ }),
/* 324 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const multiaddr = __webpack_require__(20);

const {
  CircuitRelay
} = __webpack_require__(85);
/**
 * Write a response
 *
 * @param {StreamHandler} streamHandler
 * @param {CircuitRelay.Status} status
 */


function writeResponse(streamHandler, status) {
  streamHandler.write({
    type: CircuitRelay.Type.STATUS,
    code: status
  });
}
/**
 * Validate incomming HOP/STOP message
 *
 * @param {*} msg A CircuitRelay unencoded protobuf message
 * @param {StreamHandler} streamHandler
 */


function validateAddrs(msg, streamHandler) {
  try {
    msg.dstPeer.addrs.forEach(addr => {
      return multiaddr(addr);
    });
  } catch (err) {
    writeResponse(streamHandler, msg.type === CircuitRelay.Type.HOP ? CircuitRelay.Status.HOP_DST_MULTIADDR_INVALID : CircuitRelay.Status.STOP_DST_MULTIADDR_INVALID);
    throw err;
  }

  try {
    msg.srcPeer.addrs.forEach(addr => {
      return multiaddr(addr);
    });
  } catch (err) {
    writeResponse(streamHandler, msg.type === CircuitRelay.Type.HOP ? CircuitRelay.Status.HOP_SRC_MULTIADDR_INVALID : CircuitRelay.Status.STOP_SRC_MULTIADDR_INVALID);
    throw err;
  }
}

module.exports = {
  validateAddrs
};

/***/ }),
/* 325 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const BufferList = __webpack_require__(30);

module.exports = source => {
  const reader = _wrapAsyncGenerator(function* () {
    let bytes = yield; // Allows us to receive 8 when reader.next(8) is called

    let bl = new BufferList();
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;

    var _iteratorError;

    try {
      for (var _iterator = _asyncIterator(source), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
        const chunk = _value;

        if (!bytes) {
          bytes = yield bl.append(chunk);
          bl = new BufferList();
          continue;
        }

        bl.append(chunk);

        while (bl.length >= bytes) {
          const data = bl.shallowSlice(0, bytes);
          bl.consume(bytes);
          bytes = yield data; // If we no longer want a specific byte length, we yield the rest now

          if (!bytes) {
            if (bl.length) {
              bytes = yield bl;
              bl = new BufferList();
            }

            break; // bytes is null and/or no more buffer to yield
          }
        }
      } // Consumer wants more bytes but the source has ended and our buffer
      // is not big enough to satisfy.

    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          yield _awaitAsyncGenerator(_iterator.return());
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    if (bytes) {
      throw Object.assign(new Error("stream ended before ".concat(bytes, " bytes became available")), {
        code: 'ERR_UNDER_READ',
        buffer: bl
      });
    }
  })();

  reader.next();
  return reader;
};

/***/ }),
/* 326 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const {
  CircuitRelay: CircuitPB
} = __webpack_require__(85);

const multicodec = __webpack_require__(178);

const StreamHandler = __webpack_require__(179);

const {
  validateAddrs
} = __webpack_require__(324);

const debug = __webpack_require__(1);

const log = debug('libp2p:circuit:stop');
log.error = debug('libp2p:circuit:stop:error');
/**
 * Handles incoming STOP requests
 *
 * @private
 * @param {*} options
 * @param {Connection} options.connection
 * @param {*} options.request The CircuitRelay protobuf request (unencoded)
 * @param {StreamHandler} options.streamHandler
 * @returns {Promise<*>} Resolves a duplex iterable
 */

module.exports.handleStop = function handleStop({
  connection,
  request,
  streamHandler
}) {
  // Validate the STOP request has the required input
  try {
    validateAddrs(request, streamHandler);
  } catch (err) {
    return log.error('invalid stop request via peer %s', connection.remotePeer.toB58String(), err);
  } // The request is valid


  log('stop request is valid');
  streamHandler.write({
    type: CircuitPB.Type.STATUS,
    code: CircuitPB.Status.SUCCESS
  });
  return streamHandler.rest();
};
/**
 * Creates a STOP request
 * @private
 * @param {*} options
 * @param {Connection} options.connection
 * @param {*} options.request The CircuitRelay protobuf request (unencoded)
 * @returns {Promise<*>} Resolves a duplex iterable
 */


module.exports.stop = async function stop({
  connection,
  request
}) {
  const {
    stream
  } = await connection.newStream([multicodec.relay]);
  log('starting stop request to %s', connection.remotePeer.toB58String());
  const streamHandler = new StreamHandler({
    stream
  });
  streamHandler.write(request);
  const response = await streamHandler.read();

  if (response.code === CircuitPB.Status.SUCCESS) {
    log('stop request to %s was successful', connection.remotePeer.toB58String());
    return streamHandler.rest();
  }

  log('stop request failed with code %d', response.code);
  streamHandler.close();
};

/***/ }),
/* 327 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const exp = Math.exp;

exports = module.exports = function MovingAverage(timespan) {
  if (typeof timespan !== 'number') {
    throw new Error('must provide a timespan to the moving average constructor');
  }

  if (timespan <= 0) {
    throw new Error('must provide a timespan > 0 to the moving average constructor');
  }

  let ma; // moving average

  let v = 0; // variance

  let d = 0; // deviation

  let f = 0; // forecast

  let previousTime;
  let ret = {};

  function alpha(t, pt) {
    return 1 - exp(-(t - pt) / timespan);
  }

  ret.push = function push(time, value) {
    if (previousTime) {
      // calculate moving average
      const a = alpha(time, previousTime);
      const diff = value - ma;
      const incr = a * diff;
      ma = a * value + (1 - a) * ma; // calculate variance & deviation

      v = (1 - a) * (v + diff * incr);
      d = Math.sqrt(v); // calculate forecast

      f = ma + a * diff;
    } else {
      ma = value;
    }

    previousTime = time;
  }; // Exponential Moving Average


  ret.movingAverage = function movingAverage() {
    return ma;
  }; // Variance


  ret.variance = function variance() {
    return v;
  };

  ret.deviation = function deviation() {
    return d;
  };

  ret.forecast = function forecast() {
    return f;
  };

  return ret;
};

/***/ }),
/* 328 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.PROTOCOL_ID = '/multistream/1.0.0';

/***/ }),
/* 329 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.Connection = __webpack_require__(820);

/***/ }),
/* 330 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // p2p multi-address code

exports.CODE_P2P = 421;
exports.CODE_CIRCUIT = 290; // Time to wait for a connection to close gracefully before destroying it manually

exports.CLOSE_TIMEOUT = 2000;

/***/ }),
/* 331 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const multiaddr = __webpack_require__(20);

const {
  Address4,
  Address6
} = __webpack_require__(853);

module.exports = (ip, port) => {
  if (typeof ip !== 'string') {
    throw new Error('invalid ip');
  }

  port = parseInt(port);

  if (isNaN(port)) {
    throw new Error('invalid port');
  }

  if (new Address4(ip).isValid()) {
    return multiaddr("/ip4/".concat(ip, "/tcp/").concat(port));
  }

  const ip6 = new Address6(ip);

  if (ip6.isValid()) {
    return ip6.is4() ? multiaddr("/ip4/".concat(ip6.to4().correctForm(), "/tcp/").concat(port)) : multiaddr("/ip6/".concat(ip, "/tcp/").concat(port));
  }

  throw new Error('invalid ip');
};

/***/ }),
/* 332 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BigInteger = __webpack_require__(333).BigInteger;

var common = __webpack_require__(334);

var sprintf = __webpack_require__(88).sprintf;

var padStart = __webpack_require__(335);

var repeat = __webpack_require__(336);

var constants = __webpack_require__(182);
/**
 * Represents an IPv4 address
 * @class Address4
 * @param {string} address - An IPv4 address string
 */


function Address4(address) {
  this.valid = false;
  this.address = address;
  this.groups = constants.GROUPS;
  this.v4 = true;
  this.subnet = '/32';
  this.subnetMask = 32;
  var subnet = constants.RE_SUBNET_STRING.exec(address);

  if (subnet) {
    this.parsedSubnet = subnet[0].replace('/', '');
    this.subnetMask = parseInt(this.parsedSubnet, 10);
    this.subnet = '/' + this.subnetMask;

    if (this.subnetMask < 0 || this.subnetMask > constants.BITS) {
      this.valid = false;
      this.error = 'Invalid subnet mask.';
      return;
    }

    address = address.replace(constants.RE_SUBNET_STRING, '');
  }

  this.addressMinusSuffix = address;
  this.parsedAddress = this.parse(address);
}
/*
 * Parses a v4 address
 */


Address4.prototype.parse = function (address) {
  var groups = address.split('.');

  if (address.match(constants.RE_ADDRESS)) {
    this.valid = true;
  } else {
    this.error = 'Invalid IPv4 address.';
  }

  return groups;
};
/**
 * Return true if the address is valid
 * @memberof Address4
 * @instance
 * @returns {Boolean}
 */


Address4.prototype.isValid = function () {
  return this.valid;
};
/**
 * Returns the correct form of an address
 * @memberof Address4
 * @instance
 * @returns {String}
 */


Address4.prototype.correctForm = function () {
  return this.parsedAddress.map(function (part) {
    return parseInt(part, 10);
  }).join('.');
};
/**
 * Returns true if the address is correct, false otherwise
 * @memberof Address4
 * @instance
 * @returns {Boolean}
 */


Address4.prototype.isCorrect = common.isCorrect(constants.BITS);
/**
 * Converts a hex string to an IPv4 address object
 * @memberof Address4
 * @static
 * @param {string} hex - a hex string to convert
 * @returns {Address4}
 */

Address4.fromHex = function (hex) {
  var padded = padStart(hex.replace(/:/g, ''), 8, '0');
  var groups = [];
  var i;

  for (i = 0; i < 8; i += 2) {
    var h = padded.slice(i, i + 2);
    groups.push(parseInt(h, 16));
  }

  return new Address4(groups.join('.'));
};
/**
 * Converts an integer into a IPv4 address object
 * @memberof Address4
 * @static
 * @param {integer} integer - a number to convert
 * @returns {Address4}
 */


Address4.fromInteger = function (integer) {
  return Address4.fromHex(integer.toString(16));
};
/**
 * Converts an IPv4 address object to a hex string
 * @memberof Address4
 * @instance
 * @returns {String}
 */


Address4.prototype.toHex = function () {
  return this.parsedAddress.map(function (part) {
    return sprintf('%02x', parseInt(part, 10));
  }).join(':');
};
/**
 * Converts an IPv4 address object to an array of bytes
 * @memberof Address4
 * @instance
 * @returns {Array}
 */


Address4.prototype.toArray = function () {
  return this.parsedAddress.map(function (part) {
    return parseInt(part, 10);
  });
};
/**
 * Converts an IPv4 address object to an IPv6 address group
 * @memberof Address4
 * @instance
 * @returns {String}
 */


Address4.prototype.toGroup6 = function () {
  var output = [];
  var i;

  for (i = 0; i < constants.GROUPS; i += 2) {
    var hex = sprintf('%02x%02x', parseInt(this.parsedAddress[i], 10), parseInt(this.parsedAddress[i + 1], 10));
    output.push(sprintf('%x', parseInt(hex, 16)));
  }

  return output.join(':');
};
/**
 * Returns the address as a BigInteger
 * @memberof Address4
 * @instance
 * @returns {BigInteger}
 */


Address4.prototype.bigInteger = function () {
  if (!this.valid) {
    return null;
  }

  return new BigInteger(this.parsedAddress.map(function (n) {
    return sprintf('%02x', parseInt(n, 10));
  }).join(''), 16);
};
/**
 * Helper function getting start address.
 * @memberof Address4
 * @instance
 * @returns {BigInteger}
 */


Address4.prototype._startAddress = function () {
  return new BigInteger(this.mask() + repeat('0', constants.BITS - this.subnetMask), 2);
};
/**
 * The first address in the range given by this address' subnet.
 * Often referred to as the Network Address.
 * @memberof Address4
 * @instance
 * @returns {Address4}
 */


Address4.prototype.startAddress = function () {
  return Address4.fromBigInteger(this._startAddress());
};
/**
 * The first host address in the range given by this address's subnet ie
 * the first address after the Network Address
 * @memberof Address4
 * @instance
 * @returns {Address4}
 */


Address4.prototype.startAddressExclusive = function () {
  var adjust = new BigInteger('1');
  return Address4.fromBigInteger(this._startAddress().add(adjust));
};
/**
 * Helper function getting end address.
 * @memberof Address4
 * @instance
 * @returns {BigInteger}
 */


Address4.prototype._endAddress = function () {
  return new BigInteger(this.mask() + repeat('1', constants.BITS - this.subnetMask), 2);
};
/**
 * The last address in the range given by this address' subnet
 * Often referred to as the Broadcast
 * @memberof Address4
 * @instance
 * @returns {Address4}
 */


Address4.prototype.endAddress = function () {
  return Address4.fromBigInteger(this._endAddress());
};
/**
 * The last host address in the range given by this address's subnet ie
 * the last address prior to the Broadcast Address
 * @memberof Address4
 * @instance
 * @returns {Address4}
 */


Address4.prototype.endAddressExclusive = function () {
  var adjust = new BigInteger('1');
  return Address4.fromBigInteger(this._endAddress().subtract(adjust));
};
/**
 * Converts a BigInteger to a v4 address object
 * @memberof Address4
 * @static
 * @param {BigInteger} bigInteger - a BigInteger to convert
 * @returns {Address4}
 */


Address4.fromBigInteger = function (bigInteger) {
  return Address4.fromInteger(parseInt(bigInteger.toString(), 10));
};
/**
 * Returns the first n bits of the address, defaulting to the
 * subnet mask
 * @memberof Address4
 * @instance
 * @returns {String}
 */


Address4.prototype.mask = function (optionalMask) {
  if (optionalMask === undefined) {
    optionalMask = this.subnetMask;
  }

  return this.getBitsBase2(0, optionalMask);
};
/**
 * Returns the bits in the given range as a base-2 string
 * @memberof Address4
 * @instance
 * @returns {string}
 */


Address4.prototype.getBitsBase2 = function (start, end) {
  return this.binaryZeroPad().slice(start, end);
};
/**
 * Returns true if the given address is in the subnet of the current address
 * @memberof Address4
 * @instance
 * @returns {boolean}
 */


Address4.prototype.isInSubnet = common.isInSubnet;
/**
 * Returns true if the given address is a multicast address
 * @memberof Address4
 * @instance
 * @returns {boolean}
 */

Address4.prototype.isMulticast = function () {
  return this.isInSubnet(new Address4('224.0.0.0/4'));
};
/**
 * Returns a zero-padded base-2 string representation of the address
 * @memberof Address4
 * @instance
 * @returns {string}
 */


Address4.prototype.binaryZeroPad = function () {
  return padStart(this.bigInteger().toString(2), constants.BITS, '0');
};

module.exports = Address4;

/***/ }),
/* 333 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


(function () {
  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // See "LICENSE" for details.
  // Basic JavaScript BN library - subset useful for RSA encryption.
  // Bits per digit
  var dbits; // JavaScript engine analysis

  var canary = 0xdeadbeefcafe;
  var j_lm = (canary & 0xffffff) == 0xefcafe; // (public) Constructor

  function BigInteger(a, b, c) {
    if (a != null) if ("number" == typeof a) this.fromNumber(a, b, c);else if (b == null && "string" != typeof a) this.fromString(a, 256);else this.fromString(a, b);
  } // return new, unset BigInteger


  function nbi() {
    return new BigInteger(null);
  } // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.
  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)


  function am1(i, x, w, j, c, n) {
    while (--n >= 0) {
      var v = x * this[i++] + w[j] + c;
      c = Math.floor(v / 0x4000000);
      w[j++] = v & 0x3ffffff;
    }

    return c;
  } // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)


  function am2(i, x, w, j, c, n) {
    var xl = x & 0x7fff,
        xh = x >> 15;

    while (--n >= 0) {
      var l = this[i] & 0x7fff;
      var h = this[i++] >> 15;
      var m = xh * l + h * xl;
      l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff);
      c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);
      w[j++] = l & 0x3fffffff;
    }

    return c;
  } // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.


  function am3(i, x, w, j, c, n) {
    var xl = x & 0x3fff,
        xh = x >> 14;

    while (--n >= 0) {
      var l = this[i] & 0x3fff;
      var h = this[i++] >> 14;
      var m = xh * l + h * xl;
      l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;
      c = (l >> 28) + (m >> 14) + xh * h;
      w[j++] = l & 0xfffffff;
    }

    return c;
  }

  var inBrowser = typeof navigator !== "undefined";

  if (inBrowser && j_lm && navigator.appName == "Microsoft Internet Explorer") {
    BigInteger.prototype.am = am2;
    dbits = 30;
  } else if (inBrowser && j_lm && navigator.appName != "Netscape") {
    BigInteger.prototype.am = am1;
    dbits = 26;
  } else {
    // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = (1 << dbits) - 1;
  BigInteger.prototype.DV = 1 << dbits;
  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2, BI_FP);
  BigInteger.prototype.F1 = BI_FP - dbits;
  BigInteger.prototype.F2 = 2 * dbits - BI_FP; // Digit conversions

  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr, vv;
  rr = "0".charCodeAt(0);

  for (vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;

  rr = "a".charCodeAt(0);

  for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  rr = "A".charCodeAt(0);

  for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) {
    return BI_RM.charAt(n);
  }

  function intAt(s, i) {
    var c = BI_RC[s.charCodeAt(i)];
    return c == null ? -1 : c;
  } // (protected) copy this to r


  function bnpCopyTo(r) {
    for (var i = this.t - 1; i >= 0; --i) r[i] = this[i];

    r.t = this.t;
    r.s = this.s;
  } // (protected) set from integer value x, -DV <= x < DV


  function bnpFromInt(x) {
    this.t = 1;
    this.s = x < 0 ? -1 : 0;
    if (x > 0) this[0] = x;else if (x < -1) this[0] = x + this.DV;else this.t = 0;
  } // return bigint initialized to value


  function nbv(i) {
    var r = nbi();
    r.fromInt(i);
    return r;
  } // (protected) set from string and radix


  function bnpFromString(s, b) {
    var k;
    if (b == 16) k = 4;else if (b == 8) k = 3;else if (b == 256) k = 8; // byte array
    else if (b == 2) k = 1;else if (b == 32) k = 5;else if (b == 4) k = 2;else {
        this.fromRadix(s, b);
        return;
      }
    this.t = 0;
    this.s = 0;
    var i = s.length,
        mi = false,
        sh = 0;

    while (--i >= 0) {
      var x = k == 8 ? s[i] & 0xff : intAt(s, i);

      if (x < 0) {
        if (s.charAt(i) == "-") mi = true;
        continue;
      }

      mi = false;
      if (sh == 0) this[this.t++] = x;else if (sh + k > this.DB) {
        this[this.t - 1] |= (x & (1 << this.DB - sh) - 1) << sh;
        this[this.t++] = x >> this.DB - sh;
      } else this[this.t - 1] |= x << sh;
      sh += k;
      if (sh >= this.DB) sh -= this.DB;
    }

    if (k == 8 && (s[0] & 0x80) != 0) {
      this.s = -1;
      if (sh > 0) this[this.t - 1] |= (1 << this.DB - sh) - 1 << sh;
    }

    this.clamp();
    if (mi) BigInteger.ZERO.subTo(this, this);
  } // (protected) clamp off excess high words


  function bnpClamp() {
    var c = this.s & this.DM;

    while (this.t > 0 && this[this.t - 1] == c) --this.t;
  } // (public) return string representation in given radix


  function bnToString(b) {
    if (this.s < 0) return "-" + this.negate().toString(b);
    var k;
    if (b == 16) k = 4;else if (b == 8) k = 3;else if (b == 2) k = 1;else if (b == 32) k = 5;else if (b == 4) k = 2;else return this.toRadix(b);
    var km = (1 << k) - 1,
        d,
        m = false,
        r = "",
        i = this.t;
    var p = this.DB - i * this.DB % k;

    if (i-- > 0) {
      if (p < this.DB && (d = this[i] >> p) > 0) {
        m = true;
        r = int2char(d);
      }

      while (i >= 0) {
        if (p < k) {
          d = (this[i] & (1 << p) - 1) << k - p;
          d |= this[--i] >> (p += this.DB - k);
        } else {
          d = this[i] >> (p -= k) & km;

          if (p <= 0) {
            p += this.DB;
            --i;
          }
        }

        if (d > 0) m = true;
        if (m) r += int2char(d);
      }
    }

    return m ? r : "0";
  } // (public) -this


  function bnNegate() {
    var r = nbi();
    BigInteger.ZERO.subTo(this, r);
    return r;
  } // (public) |this|


  function bnAbs() {
    return this.s < 0 ? this.negate() : this;
  } // (public) return + if this > a, - if this < a, 0 if equal


  function bnCompareTo(a) {
    var r = this.s - a.s;
    if (r != 0) return r;
    var i = this.t;
    r = i - a.t;
    if (r != 0) return this.s < 0 ? -r : r;

    while (--i >= 0) if ((r = this[i] - a[i]) != 0) return r;

    return 0;
  } // returns bit length of the integer x


  function nbits(x) {
    var r = 1,
        t;

    if ((t = x >>> 16) != 0) {
      x = t;
      r += 16;
    }

    if ((t = x >> 8) != 0) {
      x = t;
      r += 8;
    }

    if ((t = x >> 4) != 0) {
      x = t;
      r += 4;
    }

    if ((t = x >> 2) != 0) {
      x = t;
      r += 2;
    }

    if ((t = x >> 1) != 0) {
      x = t;
      r += 1;
    }

    return r;
  } // (public) return the number of bits in "this"


  function bnBitLength() {
    if (this.t <= 0) return 0;
    return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ this.s & this.DM);
  } // (protected) r = this << n*DB


  function bnpDLShiftTo(n, r) {
    var i;

    for (i = this.t - 1; i >= 0; --i) r[i + n] = this[i];

    for (i = n - 1; i >= 0; --i) r[i] = 0;

    r.t = this.t + n;
    r.s = this.s;
  } // (protected) r = this >> n*DB


  function bnpDRShiftTo(n, r) {
    for (var i = n; i < this.t; ++i) r[i - n] = this[i];

    r.t = Math.max(this.t - n, 0);
    r.s = this.s;
  } // (protected) r = this << n


  function bnpLShiftTo(n, r) {
    var bs = n % this.DB;
    var cbs = this.DB - bs;
    var bm = (1 << cbs) - 1;
    var ds = Math.floor(n / this.DB),
        c = this.s << bs & this.DM,
        i;

    for (i = this.t - 1; i >= 0; --i) {
      r[i + ds + 1] = this[i] >> cbs | c;
      c = (this[i] & bm) << bs;
    }

    for (i = ds - 1; i >= 0; --i) r[i] = 0;

    r[ds] = c;
    r.t = this.t + ds + 1;
    r.s = this.s;
    r.clamp();
  } // (protected) r = this >> n


  function bnpRShiftTo(n, r) {
    r.s = this.s;
    var ds = Math.floor(n / this.DB);

    if (ds >= this.t) {
      r.t = 0;
      return;
    }

    var bs = n % this.DB;
    var cbs = this.DB - bs;
    var bm = (1 << bs) - 1;
    r[0] = this[ds] >> bs;

    for (var i = ds + 1; i < this.t; ++i) {
      r[i - ds - 1] |= (this[i] & bm) << cbs;
      r[i - ds] = this[i] >> bs;
    }

    if (bs > 0) r[this.t - ds - 1] |= (this.s & bm) << cbs;
    r.t = this.t - ds;
    r.clamp();
  } // (protected) r = this - a


  function bnpSubTo(a, r) {
    var i = 0,
        c = 0,
        m = Math.min(a.t, this.t);

    while (i < m) {
      c += this[i] - a[i];
      r[i++] = c & this.DM;
      c >>= this.DB;
    }

    if (a.t < this.t) {
      c -= a.s;

      while (i < this.t) {
        c += this[i];
        r[i++] = c & this.DM;
        c >>= this.DB;
      }

      c += this.s;
    } else {
      c += this.s;

      while (i < a.t) {
        c -= a[i];
        r[i++] = c & this.DM;
        c >>= this.DB;
      }

      c -= a.s;
    }

    r.s = c < 0 ? -1 : 0;
    if (c < -1) r[i++] = this.DV + c;else if (c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  } // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.


  function bnpMultiplyTo(a, r) {
    var x = this.abs(),
        y = a.abs();
    var i = x.t;
    r.t = i + y.t;

    while (--i >= 0) r[i] = 0;

    for (i = 0; i < y.t; ++i) r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);

    r.s = 0;
    r.clamp();
    if (this.s != a.s) BigInteger.ZERO.subTo(r, r);
  } // (protected) r = this^2, r != this (HAC 14.16)


  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2 * x.t;

    while (--i >= 0) r[i] = 0;

    for (i = 0; i < x.t - 1; ++i) {
      var c = x.am(i, x[i], r, 2 * i, 0, 1);

      if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {
        r[i + x.t] -= x.DV;
        r[i + x.t + 1] = 1;
      }
    }

    if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);
    r.s = 0;
    r.clamp();
  } // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.


  function bnpDivRemTo(m, q, r) {
    var pm = m.abs();
    if (pm.t <= 0) return;
    var pt = this.abs();

    if (pt.t < pm.t) {
      if (q != null) q.fromInt(0);
      if (r != null) this.copyTo(r);
      return;
    }

    if (r == null) r = nbi();
    var y = nbi(),
        ts = this.s,
        ms = m.s;
    var nsh = this.DB - nbits(pm[pm.t - 1]); // normalize modulus

    if (nsh > 0) {
      pm.lShiftTo(nsh, y);
      pt.lShiftTo(nsh, r);
    } else {
      pm.copyTo(y);
      pt.copyTo(r);
    }

    var ys = y.t;
    var y0 = y[ys - 1];
    if (y0 == 0) return;
    var yt = y0 * (1 << this.F1) + (ys > 1 ? y[ys - 2] >> this.F2 : 0);
    var d1 = this.FV / yt,
        d2 = (1 << this.F1) / yt,
        e = 1 << this.F2;
    var i = r.t,
        j = i - ys,
        t = q == null ? nbi() : q;
    y.dlShiftTo(j, t);

    if (r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t, r);
    }

    BigInteger.ONE.dlShiftTo(ys, t);
    t.subTo(y, y); // "negative" y so we can replace sub with am later

    while (y.t < ys) y[y.t++] = 0;

    while (--j >= 0) {
      // Estimate quotient digit
      var qd = r[--i] == y0 ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);

      if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {
        // Try it out
        y.dlShiftTo(j, t);
        r.subTo(t, r);

        while (r[i] < --qd) r.subTo(t, r);
      }
    }

    if (q != null) {
      r.drShiftTo(ys, q);
      if (ts != ms) BigInteger.ZERO.subTo(q, q);
    }

    r.t = ys;
    r.clamp();
    if (nsh > 0) r.rShiftTo(nsh, r); // Denormalize remainder

    if (ts < 0) BigInteger.ZERO.subTo(r, r);
  } // (public) this mod a


  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a, null, r);
    if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r);
    return r;
  } // Modular reduction using "classic" algorithm


  function Classic(m) {
    this.m = m;
  }

  function cConvert(x) {
    if (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);else return x;
  }

  function cRevert(x) {
    return x;
  }

  function cReduce(x) {
    x.divRemTo(this.m, null, x);
  }

  function cMulTo(x, y, r) {
    x.multiplyTo(y, r);
    this.reduce(r);
  }

  function cSqrTo(x, r) {
    x.squareTo(r);
    this.reduce(r);
  }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo; // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.

  function bnpInvDigit() {
    if (this.t < 1) return 0;
    var x = this[0];
    if ((x & 1) == 0) return 0;
    var y = x & 3; // y == 1/x mod 2^2

    y = y * (2 - (x & 0xf) * y) & 0xf; // y == 1/x mod 2^4

    y = y * (2 - (x & 0xff) * y) & 0xff; // y == 1/x mod 2^8

    y = y * (2 - ((x & 0xffff) * y & 0xffff)) & 0xffff; // y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints

    y = y * (2 - x * y % this.DV) % this.DV; // y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV

    return y > 0 ? this.DV - y : -y;
  } // Montgomery reduction


  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp & 0x7fff;
    this.mph = this.mp >> 15;
    this.um = (1 << m.DB - 15) - 1;
    this.mt2 = 2 * m.t;
  } // xR mod m


  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t, r);
    r.divRemTo(this.m, null, r);
    if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r);
    return r;
  } // x/R mod m


  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  } // x = x/R mod m (HAC 14.32)


  function montReduce(x) {
    while (x.t <= this.mt2) // pad x so am has enough room later
    x[x.t++] = 0;

    for (var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i] & 0x7fff;
      var u0 = j * this.mpl + ((j * this.mph + (x[i] >> 15) * this.mpl & this.um) << 15) & x.DM; // use am to combine the multiply-shift-add into one call

      j = i + this.m.t;
      x[j] += this.m.am(0, u0, x, i, 0, this.m.t); // propagate carry

      while (x[j] >= x.DV) {
        x[j] -= x.DV;
        x[++j]++;
      }
    }

    x.clamp();
    x.drShiftTo(this.m.t, x);
    if (x.compareTo(this.m) >= 0) x.subTo(this.m, x);
  } // r = "x^2/R mod m"; x != r


  function montSqrTo(x, r) {
    x.squareTo(r);
    this.reduce(r);
  } // r = "xy/R mod m"; x,y != r


  function montMulTo(x, y, r) {
    x.multiplyTo(y, r);
    this.reduce(r);
  }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo; // (protected) true iff this is even

  function bnpIsEven() {
    return (this.t > 0 ? this[0] & 1 : this.s) == 0;
  } // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)


  function bnpExp(e, z) {
    if (e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(),
        r2 = nbi(),
        g = z.convert(this),
        i = nbits(e) - 1;
    g.copyTo(r);

    while (--i >= 0) {
      z.sqrTo(r, r2);
      if ((e & 1 << i) > 0) z.mulTo(r2, g, r);else {
        var t = r;
        r = r2;
        r2 = t;
      }
    }

    return z.revert(r);
  } // (public) this^e % m, 0 <= e < 2^32


  function bnModPowInt(e, m) {
    var z;
    if (e < 256 || m.isEven()) z = new Classic(m);else z = new Montgomery(m);
    return this.exp(e, z);
  } // protected


  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp; // public

  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt; // "constants"

  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1); // Copyright (c) 2005-2009  Tom Wu
  // All Rights Reserved.
  // See "LICENSE" for details.
  // Extended JavaScript BN functions, required for RSA private ops.
  // Version 1.1: new BigInteger("0", 10) returns "proper" zero
  // Version 1.2: square() API, isProbablePrime fix
  // (public)

  function bnClone() {
    var r = nbi();
    this.copyTo(r);
    return r;
  } // (public) return value as integer


  function bnIntValue() {
    if (this.s < 0) {
      if (this.t == 1) return this[0] - this.DV;else if (this.t == 0) return -1;
    } else if (this.t == 1) return this[0];else if (this.t == 0) return 0; // assumes 16 < DB < 32


    return (this[1] & (1 << 32 - this.DB) - 1) << this.DB | this[0];
  } // (public) return value as byte


  function bnByteValue() {
    return this.t == 0 ? this.s : this[0] << 24 >> 24;
  } // (public) return value as short (assumes DB>=16)


  function bnShortValue() {
    return this.t == 0 ? this.s : this[0] << 16 >> 16;
  } // (protected) return x s.t. r^x < DV


  function bnpChunkSize(r) {
    return Math.floor(Math.LN2 * this.DB / Math.log(r));
  } // (public) 0 if this == 0, 1 if this > 0


  function bnSigNum() {
    if (this.s < 0) return -1;else if (this.t <= 0 || this.t == 1 && this[0] <= 0) return 0;else return 1;
  } // (protected) convert to radix string


  function bnpToRadix(b) {
    if (b == null) b = 10;
    if (this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b, cs);
    var d = nbv(a),
        y = nbi(),
        z = nbi(),
        r = "";
    this.divRemTo(d, y, z);

    while (y.signum() > 0) {
      r = (a + z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d, y, z);
    }

    return z.intValue().toString(b) + r;
  } // (protected) convert from radix string


  function bnpFromRadix(s, b) {
    this.fromInt(0);
    if (b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b, cs),
        mi = false,
        j = 0,
        w = 0;

    for (var i = 0; i < s.length; ++i) {
      var x = intAt(s, i);

      if (x < 0) {
        if (s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }

      w = b * w + x;

      if (++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w, 0);
        j = 0;
        w = 0;
      }
    }

    if (j > 0) {
      this.dMultiply(Math.pow(b, j));
      this.dAddOffset(w, 0);
    }

    if (mi) BigInteger.ZERO.subTo(this, this);
  } // (protected) alternate constructor


  function bnpFromNumber(a, b, c) {
    if ("number" == typeof b) {
      // new BigInteger(int,int,RNG)
      if (a < 2) this.fromInt(1);else {
        this.fromNumber(a, c);
        if (!this.testBit(a - 1)) // force MSB set
          this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this);
        if (this.isEven()) this.dAddOffset(1, 0); // force odd

        while (!this.isProbablePrime(b)) {
          this.dAddOffset(2, 0);
          if (this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a - 1), this);
        }
      }
    } else {
      // new BigInteger(int,RNG)
      var x = new Array(),
          t = a & 7;
      x.length = (a >> 3) + 1;
      b.nextBytes(x);
      if (t > 0) x[0] &= (1 << t) - 1;else x[0] = 0;
      this.fromString(x, 256);
    }
  } // (public) convert to bigendian byte array


  function bnToByteArray() {
    var i = this.t,
        r = new Array();
    r[0] = this.s;
    var p = this.DB - i * this.DB % 8,
        d,
        k = 0;

    if (i-- > 0) {
      if (p < this.DB && (d = this[i] >> p) != (this.s & this.DM) >> p) r[k++] = d | this.s << this.DB - p;

      while (i >= 0) {
        if (p < 8) {
          d = (this[i] & (1 << p) - 1) << 8 - p;
          d |= this[--i] >> (p += this.DB - 8);
        } else {
          d = this[i] >> (p -= 8) & 0xff;

          if (p <= 0) {
            p += this.DB;
            --i;
          }
        }

        if ((d & 0x80) != 0) d |= -256;
        if (k == 0 && (this.s & 0x80) != (d & 0x80)) ++k;
        if (k > 0 || d != this.s) r[k++] = d;
      }
    }

    return r;
  }

  function bnEquals(a) {
    return this.compareTo(a) == 0;
  }

  function bnMin(a) {
    return this.compareTo(a) < 0 ? this : a;
  }

  function bnMax(a) {
    return this.compareTo(a) > 0 ? this : a;
  } // (protected) r = this op a (bitwise)


  function bnpBitwiseTo(a, op, r) {
    var i,
        f,
        m = Math.min(a.t, this.t);

    for (i = 0; i < m; ++i) r[i] = op(this[i], a[i]);

    if (a.t < this.t) {
      f = a.s & this.DM;

      for (i = m; i < this.t; ++i) r[i] = op(this[i], f);

      r.t = this.t;
    } else {
      f = this.s & this.DM;

      for (i = m; i < a.t; ++i) r[i] = op(f, a[i]);

      r.t = a.t;
    }

    r.s = op(this.s, a.s);
    r.clamp();
  } // (public) this & a


  function op_and(x, y) {
    return x & y;
  }

  function bnAnd(a) {
    var r = nbi();
    this.bitwiseTo(a, op_and, r);
    return r;
  } // (public) this | a


  function op_or(x, y) {
    return x | y;
  }

  function bnOr(a) {
    var r = nbi();
    this.bitwiseTo(a, op_or, r);
    return r;
  } // (public) this ^ a


  function op_xor(x, y) {
    return x ^ y;
  }

  function bnXor(a) {
    var r = nbi();
    this.bitwiseTo(a, op_xor, r);
    return r;
  } // (public) this & ~a


  function op_andnot(x, y) {
    return x & ~y;
  }

  function bnAndNot(a) {
    var r = nbi();
    this.bitwiseTo(a, op_andnot, r);
    return r;
  } // (public) ~this


  function bnNot() {
    var r = nbi();

    for (var i = 0; i < this.t; ++i) r[i] = this.DM & ~this[i];

    r.t = this.t;
    r.s = ~this.s;
    return r;
  } // (public) this << n


  function bnShiftLeft(n) {
    var r = nbi();
    if (n < 0) this.rShiftTo(-n, r);else this.lShiftTo(n, r);
    return r;
  } // (public) this >> n


  function bnShiftRight(n) {
    var r = nbi();
    if (n < 0) this.lShiftTo(-n, r);else this.rShiftTo(n, r);
    return r;
  } // return index of lowest 1-bit in x, x < 2^31


  function lbit(x) {
    if (x == 0) return -1;
    var r = 0;

    if ((x & 0xffff) == 0) {
      x >>= 16;
      r += 16;
    }

    if ((x & 0xff) == 0) {
      x >>= 8;
      r += 8;
    }

    if ((x & 0xf) == 0) {
      x >>= 4;
      r += 4;
    }

    if ((x & 3) == 0) {
      x >>= 2;
      r += 2;
    }

    if ((x & 1) == 0) ++r;
    return r;
  } // (public) returns index of lowest 1-bit (or -1 if none)


  function bnGetLowestSetBit() {
    for (var i = 0; i < this.t; ++i) if (this[i] != 0) return i * this.DB + lbit(this[i]);

    if (this.s < 0) return this.t * this.DB;
    return -1;
  } // return number of 1 bits in x


  function cbit(x) {
    var r = 0;

    while (x != 0) {
      x &= x - 1;
      ++r;
    }

    return r;
  } // (public) return number of set bits


  function bnBitCount() {
    var r = 0,
        x = this.s & this.DM;

    for (var i = 0; i < this.t; ++i) r += cbit(this[i] ^ x);

    return r;
  } // (public) true iff nth bit is set


  function bnTestBit(n) {
    var j = Math.floor(n / this.DB);
    if (j >= this.t) return this.s != 0;
    return (this[j] & 1 << n % this.DB) != 0;
  } // (protected) this op (1<<n)


  function bnpChangeBit(n, op) {
    var r = BigInteger.ONE.shiftLeft(n);
    this.bitwiseTo(r, op, r);
    return r;
  } // (public) this | (1<<n)


  function bnSetBit(n) {
    return this.changeBit(n, op_or);
  } // (public) this & ~(1<<n)


  function bnClearBit(n) {
    return this.changeBit(n, op_andnot);
  } // (public) this ^ (1<<n)


  function bnFlipBit(n) {
    return this.changeBit(n, op_xor);
  } // (protected) r = this + a


  function bnpAddTo(a, r) {
    var i = 0,
        c = 0,
        m = Math.min(a.t, this.t);

    while (i < m) {
      c += this[i] + a[i];
      r[i++] = c & this.DM;
      c >>= this.DB;
    }

    if (a.t < this.t) {
      c += a.s;

      while (i < this.t) {
        c += this[i];
        r[i++] = c & this.DM;
        c >>= this.DB;
      }

      c += this.s;
    } else {
      c += this.s;

      while (i < a.t) {
        c += a[i];
        r[i++] = c & this.DM;
        c >>= this.DB;
      }

      c += a.s;
    }

    r.s = c < 0 ? -1 : 0;
    if (c > 0) r[i++] = c;else if (c < -1) r[i++] = this.DV + c;
    r.t = i;
    r.clamp();
  } // (public) this + a


  function bnAdd(a) {
    var r = nbi();
    this.addTo(a, r);
    return r;
  } // (public) this - a


  function bnSubtract(a) {
    var r = nbi();
    this.subTo(a, r);
    return r;
  } // (public) this * a


  function bnMultiply(a) {
    var r = nbi();
    this.multiplyTo(a, r);
    return r;
  } // (public) this^2


  function bnSquare() {
    var r = nbi();
    this.squareTo(r);
    return r;
  } // (public) this / a


  function bnDivide(a) {
    var r = nbi();
    this.divRemTo(a, r, null);
    return r;
  } // (public) this % a


  function bnRemainder(a) {
    var r = nbi();
    this.divRemTo(a, null, r);
    return r;
  } // (public) [this/a,this%a]


  function bnDivideAndRemainder(a) {
    var q = nbi(),
        r = nbi();
    this.divRemTo(a, q, r);
    return new Array(q, r);
  } // (protected) this *= n, this >= 0, 1 < n < DV


  function bnpDMultiply(n) {
    this[this.t] = this.am(0, n - 1, this, 0, 0, this.t);
    ++this.t;
    this.clamp();
  } // (protected) this += n << w words, this >= 0


  function bnpDAddOffset(n, w) {
    if (n == 0) return;

    while (this.t <= w) this[this.t++] = 0;

    this[w] += n;

    while (this[w] >= this.DV) {
      this[w] -= this.DV;
      if (++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  } // A "null" reducer


  function NullExp() {}

  function nNop(x) {
    return x;
  }

  function nMulTo(x, y, r) {
    x.multiplyTo(y, r);
  }

  function nSqrTo(x, r) {
    x.squareTo(r);
  }

  NullExp.prototype.convert = nNop;
  NullExp.prototype.revert = nNop;
  NullExp.prototype.mulTo = nMulTo;
  NullExp.prototype.sqrTo = nSqrTo; // (public) this^e

  function bnPow(e) {
    return this.exp(e, new NullExp());
  } // (protected) r = lower n words of "this * a", a.t <= n
  // "this" should be the larger one if appropriate.


  function bnpMultiplyLowerTo(a, n, r) {
    var i = Math.min(this.t + a.t, n);
    r.s = 0; // assumes a,this >= 0

    r.t = i;

    while (i > 0) r[--i] = 0;

    var j;

    for (j = r.t - this.t; i < j; ++i) r[i + this.t] = this.am(0, a[i], r, i, 0, this.t);

    for (j = Math.min(a.t, n); i < j; ++i) this.am(0, a[i], r, i, 0, n - i);

    r.clamp();
  } // (protected) r = "this * a" without lower n words, n > 0
  // "this" should be the larger one if appropriate.


  function bnpMultiplyUpperTo(a, n, r) {
    --n;
    var i = r.t = this.t + a.t - n;
    r.s = 0; // assumes a,this >= 0

    while (--i >= 0) r[i] = 0;

    for (i = Math.max(n - this.t, 0); i < a.t; ++i) r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n);

    r.clamp();
    r.drShiftTo(1, r);
  } // Barrett modular reduction


  function Barrett(m) {
    // setup Barrett
    this.r2 = nbi();
    this.q3 = nbi();
    BigInteger.ONE.dlShiftTo(2 * m.t, this.r2);
    this.mu = this.r2.divide(m);
    this.m = m;
  }

  function barrettConvert(x) {
    if (x.s < 0 || x.t > 2 * this.m.t) return x.mod(this.m);else if (x.compareTo(this.m) < 0) return x;else {
      var r = nbi();
      x.copyTo(r);
      this.reduce(r);
      return r;
    }
  }

  function barrettRevert(x) {
    return x;
  } // x = x mod m (HAC 14.42)


  function barrettReduce(x) {
    x.drShiftTo(this.m.t - 1, this.r2);

    if (x.t > this.m.t + 1) {
      x.t = this.m.t + 1;
      x.clamp();
    }

    this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);
    this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);

    while (x.compareTo(this.r2) < 0) x.dAddOffset(1, this.m.t + 1);

    x.subTo(this.r2, x);

    while (x.compareTo(this.m) >= 0) x.subTo(this.m, x);
  } // r = x^2 mod m; x != r


  function barrettSqrTo(x, r) {
    x.squareTo(r);
    this.reduce(r);
  } // r = x*y mod m; x,y != r


  function barrettMulTo(x, y, r) {
    x.multiplyTo(y, r);
    this.reduce(r);
  }

  Barrett.prototype.convert = barrettConvert;
  Barrett.prototype.revert = barrettRevert;
  Barrett.prototype.reduce = barrettReduce;
  Barrett.prototype.mulTo = barrettMulTo;
  Barrett.prototype.sqrTo = barrettSqrTo; // (public) this^e % m (HAC 14.85)

  function bnModPow(e, m) {
    var i = e.bitLength(),
        k,
        r = nbv(1),
        z;
    if (i <= 0) return r;else if (i < 18) k = 1;else if (i < 48) k = 3;else if (i < 144) k = 4;else if (i < 768) k = 5;else k = 6;
    if (i < 8) z = new Classic(m);else if (m.isEven()) z = new Barrett(m);else z = new Montgomery(m); // precomputation

    var g = new Array(),
        n = 3,
        k1 = k - 1,
        km = (1 << k) - 1;
    g[1] = z.convert(this);

    if (k > 1) {
      var g2 = nbi();
      z.sqrTo(g[1], g2);

      while (n <= km) {
        g[n] = nbi();
        z.mulTo(g2, g[n - 2], g[n]);
        n += 2;
      }
    }

    var j = e.t - 1,
        w,
        is1 = true,
        r2 = nbi(),
        t;
    i = nbits(e[j]) - 1;

    while (j >= 0) {
      if (i >= k1) w = e[j] >> i - k1 & km;else {
        w = (e[j] & (1 << i + 1) - 1) << k1 - i;
        if (j > 0) w |= e[j - 1] >> this.DB + i - k1;
      }
      n = k;

      while ((w & 1) == 0) {
        w >>= 1;
        --n;
      }

      if ((i -= n) < 0) {
        i += this.DB;
        --j;
      }

      if (is1) {
        // ret == 1, don't bother squaring or multiplying it
        g[w].copyTo(r);
        is1 = false;
      } else {
        while (n > 1) {
          z.sqrTo(r, r2);
          z.sqrTo(r2, r);
          n -= 2;
        }

        if (n > 0) z.sqrTo(r, r2);else {
          t = r;
          r = r2;
          r2 = t;
        }
        z.mulTo(r2, g[w], r);
      }

      while (j >= 0 && (e[j] & 1 << i) == 0) {
        z.sqrTo(r, r2);
        t = r;
        r = r2;
        r2 = t;

        if (--i < 0) {
          i = this.DB - 1;
          --j;
        }
      }
    }

    return z.revert(r);
  } // (public) gcd(this,a) (HAC 14.54)


  function bnGCD(a) {
    var x = this.s < 0 ? this.negate() : this.clone();
    var y = a.s < 0 ? a.negate() : a.clone();

    if (x.compareTo(y) < 0) {
      var t = x;
      x = y;
      y = t;
    }

    var i = x.getLowestSetBit(),
        g = y.getLowestSetBit();
    if (g < 0) return x;
    if (i < g) g = i;

    if (g > 0) {
      x.rShiftTo(g, x);
      y.rShiftTo(g, y);
    }

    while (x.signum() > 0) {
      if ((i = x.getLowestSetBit()) > 0) x.rShiftTo(i, x);
      if ((i = y.getLowestSetBit()) > 0) y.rShiftTo(i, y);

      if (x.compareTo(y) >= 0) {
        x.subTo(y, x);
        x.rShiftTo(1, x);
      } else {
        y.subTo(x, y);
        y.rShiftTo(1, y);
      }
    }

    if (g > 0) y.lShiftTo(g, y);
    return y;
  } // (protected) this % n, n < 2^26


  function bnpModInt(n) {
    if (n <= 0) return 0;
    var d = this.DV % n,
        r = this.s < 0 ? n - 1 : 0;
    if (this.t > 0) if (d == 0) r = this[0] % n;else for (var i = this.t - 1; i >= 0; --i) r = (d * r + this[i]) % n;
    return r;
  } // (public) 1/this % m (HAC 14.61)


  function bnModInverse(m) {
    var ac = m.isEven();
    if (this.isEven() && ac || m.signum() == 0) return BigInteger.ZERO;
    var u = m.clone(),
        v = this.clone();
    var a = nbv(1),
        b = nbv(0),
        c = nbv(0),
        d = nbv(1);

    while (u.signum() != 0) {
      while (u.isEven()) {
        u.rShiftTo(1, u);

        if (ac) {
          if (!a.isEven() || !b.isEven()) {
            a.addTo(this, a);
            b.subTo(m, b);
          }

          a.rShiftTo(1, a);
        } else if (!b.isEven()) b.subTo(m, b);

        b.rShiftTo(1, b);
      }

      while (v.isEven()) {
        v.rShiftTo(1, v);

        if (ac) {
          if (!c.isEven() || !d.isEven()) {
            c.addTo(this, c);
            d.subTo(m, d);
          }

          c.rShiftTo(1, c);
        } else if (!d.isEven()) d.subTo(m, d);

        d.rShiftTo(1, d);
      }

      if (u.compareTo(v) >= 0) {
        u.subTo(v, u);
        if (ac) a.subTo(c, a);
        b.subTo(d, b);
      } else {
        v.subTo(u, v);
        if (ac) c.subTo(a, c);
        d.subTo(b, d);
      }
    }

    if (v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;
    if (d.compareTo(m) >= 0) return d.subtract(m);
    if (d.signum() < 0) d.addTo(m, d);else return d;
    if (d.signum() < 0) return d.add(m);else return d;
  }

  var lowprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];
  var lplim = (1 << 26) / lowprimes[lowprimes.length - 1]; // (public) test primality with certainty >= 1-.5^t

  function bnIsProbablePrime(t) {
    var i,
        x = this.abs();

    if (x.t == 1 && x[0] <= lowprimes[lowprimes.length - 1]) {
      for (i = 0; i < lowprimes.length; ++i) if (x[0] == lowprimes[i]) return true;

      return false;
    }

    if (x.isEven()) return false;
    i = 1;

    while (i < lowprimes.length) {
      var m = lowprimes[i],
          j = i + 1;

      while (j < lowprimes.length && m < lplim) m *= lowprimes[j++];

      m = x.modInt(m);

      while (i < j) if (m % lowprimes[i++] == 0) return false;
    }

    return x.millerRabin(t);
  } // (protected) true if probably prime (HAC 4.24, Miller-Rabin)


  function bnpMillerRabin(t) {
    var n1 = this.subtract(BigInteger.ONE);
    var k = n1.getLowestSetBit();
    if (k <= 0) return false;
    var r = n1.shiftRight(k);
    t = t + 1 >> 1;
    if (t > lowprimes.length) t = lowprimes.length;
    var a = nbi();

    for (var i = 0; i < t; ++i) {
      //Pick bases at random, instead of starting at 2
      a.fromInt(lowprimes[Math.floor(Math.random() * lowprimes.length)]);
      var y = a.modPow(r, this);

      if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {
        var j = 1;

        while (j++ < k && y.compareTo(n1) != 0) {
          y = y.modPowInt(2, this);
          if (y.compareTo(BigInteger.ONE) == 0) return false;
        }

        if (y.compareTo(n1) != 0) return false;
      }
    }

    return true;
  } // protected


  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.fromNumber = bnpFromNumber;
  BigInteger.prototype.bitwiseTo = bnpBitwiseTo;
  BigInteger.prototype.changeBit = bnpChangeBit;
  BigInteger.prototype.addTo = bnpAddTo;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;
  BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;
  BigInteger.prototype.modInt = bnpModInt;
  BigInteger.prototype.millerRabin = bnpMillerRabin; // public

  BigInteger.prototype.clone = bnClone;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.byteValue = bnByteValue;
  BigInteger.prototype.shortValue = bnShortValue;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.toByteArray = bnToByteArray;
  BigInteger.prototype.equals = bnEquals;
  BigInteger.prototype.min = bnMin;
  BigInteger.prototype.max = bnMax;
  BigInteger.prototype.and = bnAnd;
  BigInteger.prototype.or = bnOr;
  BigInteger.prototype.xor = bnXor;
  BigInteger.prototype.andNot = bnAndNot;
  BigInteger.prototype.not = bnNot;
  BigInteger.prototype.shiftLeft = bnShiftLeft;
  BigInteger.prototype.shiftRight = bnShiftRight;
  BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;
  BigInteger.prototype.bitCount = bnBitCount;
  BigInteger.prototype.testBit = bnTestBit;
  BigInteger.prototype.setBit = bnSetBit;
  BigInteger.prototype.clearBit = bnClearBit;
  BigInteger.prototype.flipBit = bnFlipBit;
  BigInteger.prototype.add = bnAdd;
  BigInteger.prototype.subtract = bnSubtract;
  BigInteger.prototype.multiply = bnMultiply;
  BigInteger.prototype.divide = bnDivide;
  BigInteger.prototype.remainder = bnRemainder;
  BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;
  BigInteger.prototype.modPow = bnModPow;
  BigInteger.prototype.modInverse = bnModInverse;
  BigInteger.prototype.pow = bnPow;
  BigInteger.prototype.gcd = bnGCD;
  BigInteger.prototype.isProbablePrime = bnIsProbablePrime; // JSBN-specific extension

  BigInteger.prototype.square = bnSquare; // Expose the Barrett function

  BigInteger.prototype.Barrett = Barrett; // BigInteger interfaces not implemented in jsbn:
  // BigInteger(int signum, byte[] magnitude)
  // double doubleValue()
  // float floatValue()
  // int hashCode()
  // long longValue()
  // static BigInteger valueOf(long val)
  // Random number generator - requires a PRNG backend, e.g. prng4.js
  // For best results, put code like
  // <body onClick='rng_seed_time();' onKeyPress='rng_seed_time();'>
  // in your main HTML document.

  var rng_state;
  var rng_pool;
  var rng_pptr; // Mix in a 32-bit integer into the pool

  function rng_seed_int(x) {
    rng_pool[rng_pptr++] ^= x & 255;
    rng_pool[rng_pptr++] ^= x >> 8 & 255;
    rng_pool[rng_pptr++] ^= x >> 16 & 255;
    rng_pool[rng_pptr++] ^= x >> 24 & 255;
    if (rng_pptr >= rng_psize) rng_pptr -= rng_psize;
  } // Mix in the current time (w/milliseconds) into the pool


  function rng_seed_time() {
    rng_seed_int(new Date().getTime());
  } // Initialize the pool with junk if needed.


  if (rng_pool == null) {
    rng_pool = new Array();
    rng_pptr = 0;
    var t;

    if (typeof window !== "undefined" && window.crypto) {
      if (window.crypto.getRandomValues) {
        // Use webcrypto if available
        var ua = new Uint8Array(32);
        window.crypto.getRandomValues(ua);

        for (t = 0; t < 32; ++t) rng_pool[rng_pptr++] = ua[t];
      } else if (navigator.appName == "Netscape" && navigator.appVersion < "5") {
        // Extract entropy (256 bits) from NS4 RNG if available
        var z = window.crypto.random(32);

        for (t = 0; t < z.length; ++t) rng_pool[rng_pptr++] = z.charCodeAt(t) & 255;
      }
    }

    while (rng_pptr < rng_psize) {
      // extract some randomness from Math.random()
      t = Math.floor(65536 * Math.random());
      rng_pool[rng_pptr++] = t >>> 8;
      rng_pool[rng_pptr++] = t & 255;
    }

    rng_pptr = 0;
    rng_seed_time(); //rng_seed_int(window.screenX);
    //rng_seed_int(window.screenY);
  }

  function rng_get_byte() {
    if (rng_state == null) {
      rng_seed_time();
      rng_state = prng_newstate();
      rng_state.init(rng_pool);

      for (rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr) rng_pool[rng_pptr] = 0;

      rng_pptr = 0; //rng_pool = null;
    } // TODO: allow reseeding after first request


    return rng_state.next();
  }

  function rng_get_bytes(ba) {
    var i;

    for (i = 0; i < ba.length; ++i) ba[i] = rng_get_byte();
  }

  function SecureRandom() {}

  SecureRandom.prototype.nextBytes = rng_get_bytes; // prng4.js - uses Arcfour as a PRNG

  function Arcfour() {
    this.i = 0;
    this.j = 0;
    this.S = new Array();
  } // Initialize arcfour context from key, an array of ints, each from [0..255]


  function ARC4init(key) {
    var i, j, t;

    for (i = 0; i < 256; ++i) this.S[i] = i;

    j = 0;

    for (i = 0; i < 256; ++i) {
      j = j + this.S[i] + key[i % key.length] & 255;
      t = this.S[i];
      this.S[i] = this.S[j];
      this.S[j] = t;
    }

    this.i = 0;
    this.j = 0;
  }

  function ARC4next() {
    var t;
    this.i = this.i + 1 & 255;
    this.j = this.j + this.S[this.i] & 255;
    t = this.S[this.i];
    this.S[this.i] = this.S[this.j];
    this.S[this.j] = t;
    return this.S[t + this.S[this.i] & 255];
  }

  Arcfour.prototype.init = ARC4init;
  Arcfour.prototype.next = ARC4next; // Plug in your RNG constructor here

  function prng_newstate() {
    return new Arcfour();
  } // Pool size must be a multiple of 4 and greater than 32.
  // An array of bytes the size of the pool will be passed to init()


  var rng_psize = 256;

  if (true) {
    exports = module.exports = {
      default: BigInteger,
      BigInteger: BigInteger,
      SecureRandom: SecureRandom
    };
  } else {}
}).call(void 0);

/***/ }),
/* 334 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // A wrapper function that returns false if the address is not valid; used to
// avoid boilerplate checks for `if (!this.valid) { return false; }`

var falseIfInvalid = exports.falseIfInvalid = function (fn) {
  return function () {
    if (!this.valid) {
      return false;
    }

    return fn.apply(this, arguments);
  };
};

exports.isInSubnet = falseIfInvalid(function (address) {
  if (this.subnetMask < address.subnetMask) {
    return false;
  }

  if (this.mask(address.subnetMask) === address.mask()) {
    return true;
  }

  return false;
});

exports.isCorrect = function (defaultBits) {
  return falseIfInvalid(function () {
    if (this.addressMinusSuffix !== this.correctForm()) {
      return false;
    }

    if (this.subnetMask === defaultBits && !this.parsedSubnet) {
      return true;
    }

    return this.parsedSubnet === String(this.subnetMask);
  });
};

/***/ }),
/* 335 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0,
    MAX_SAFE_INTEGER = 9007199254740991,
    MAX_INTEGER = 1.7976931348623157e+308,
    NAN = 0 / 0;
/** `Object#toString` result references. */

var symbolTag = '[object Symbol]';
/** Used to match leading and trailing whitespace. */

var reTrim = /^\s+|\s+$/g;
/** Used to detect bad signed hexadecimal string values. */

var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
/** Used to detect binary string values. */

var reIsBinary = /^0b[01]+$/i;
/** Used to detect octal string values. */

var reIsOctal = /^0o[0-7]+$/i;
/** Used to compose unicode character classes. */

var rsAstralRange = '\\ud800-\\udfff',
    rsComboMarksRange = '\\u0300-\\u036f\\ufe20-\\ufe23',
    rsComboSymbolsRange = '\\u20d0-\\u20f0',
    rsVarRange = '\\ufe0e\\ufe0f';
/** Used to compose unicode capture groups. */

var rsAstral = '[' + rsAstralRange + ']',
    rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',
    rsFitz = '\\ud83c[\\udffb-\\udfff]',
    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
    rsNonAstral = '[^' + rsAstralRange + ']',
    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
    rsZWJ = '\\u200d';
/** Used to compose unicode regexes. */

var reOptMod = rsModifier + '?',
    rsOptVar = '[' + rsVarRange + ']?',
    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
    rsSeq = rsOptVar + reOptMod + rsOptJoin,
    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';
/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */

var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');
/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */

var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');
/** Built-in method references without a dependency on `root`. */

var freeParseInt = parseInt;
/** Detect free variable `global` from Node.js. */

var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
/** Detect free variable `self`. */

var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
/** Used as a reference to the global object. */

var root = freeGlobal || freeSelf || Function('return this')();
/**
 * Gets the size of an ASCII `string`.
 *
 * @private
 * @param {string} string The string inspect.
 * @returns {number} Returns the string size.
 */

var asciiSize = baseProperty('length');
/**
 * Converts an ASCII `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */

function asciiToArray(string) {
  return string.split('');
}
/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */


function baseProperty(key) {
  return function (object) {
    return object == null ? undefined : object[key];
  };
}
/**
 * Checks if `string` contains Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
 */


function hasUnicode(string) {
  return reHasUnicode.test(string);
}
/**
 * Gets the number of symbols in `string`.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {number} Returns the string size.
 */


function stringSize(string) {
  return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
}
/**
 * Converts `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */


function stringToArray(string) {
  return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
}
/**
 * Gets the size of a Unicode `string`.
 *
 * @private
 * @param {string} string The string inspect.
 * @returns {number} Returns the string size.
 */


function unicodeSize(string) {
  var result = reUnicode.lastIndex = 0;

  while (reUnicode.test(string)) {
    result++;
  }

  return result;
}
/**
 * Converts a Unicode `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */


function unicodeToArray(string) {
  return string.match(reUnicode) || [];
}
/** Used for built-in method references. */


var objectProto = Object.prototype;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */

var objectToString = objectProto.toString;
/** Built-in value references. */

var Symbol = root.Symbol;
/* Built-in method references for those with the same name as other `lodash` methods. */

var nativeCeil = Math.ceil,
    nativeFloor = Math.floor;
/** Used to convert symbols to primitives and strings. */

var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;
/**
 * The base implementation of `_.repeat` which doesn't coerce arguments.
 *
 * @private
 * @param {string} string The string to repeat.
 * @param {number} n The number of times to repeat the string.
 * @returns {string} Returns the repeated string.
 */

function baseRepeat(string, n) {
  var result = '';

  if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
    return result;
  } // Leverage the exponentiation by squaring algorithm for a faster repeat.
  // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.


  do {
    if (n % 2) {
      result += string;
    }

    n = nativeFloor(n / 2);

    if (n) {
      string += string;
    }
  } while (n);

  return result;
}
/**
 * The base implementation of `_.slice` without an iteratee call guard.
 *
 * @private
 * @param {Array} array The array to slice.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the slice of `array`.
 */


function baseSlice(array, start, end) {
  var index = -1,
      length = array.length;

  if (start < 0) {
    start = -start > length ? 0 : length + start;
  }

  end = end > length ? length : end;

  if (end < 0) {
    end += length;
  }

  length = start > end ? 0 : end - start >>> 0;
  start >>>= 0;
  var result = Array(length);

  while (++index < length) {
    result[index] = array[index + start];
  }

  return result;
}
/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */


function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }

  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }

  var result = value + '';
  return result == '0' && 1 / value == -INFINITY ? '-0' : result;
}
/**
 * Casts `array` to a slice if it's needed.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {number} start The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the cast slice.
 */


function castSlice(array, start, end) {
  var length = array.length;
  end = end === undefined ? length : end;
  return !start && end >= length ? array : baseSlice(array, start, end);
}
/**
 * Creates the padding for `string` based on `length`. The `chars` string
 * is truncated if the number of characters exceeds `length`.
 *
 * @private
 * @param {number} length The padding length.
 * @param {string} [chars=' '] The string used as padding.
 * @returns {string} Returns the padding for `string`.
 */


function createPadding(length, chars) {
  chars = chars === undefined ? ' ' : baseToString(chars);
  var charsLength = chars.length;

  if (charsLength < 2) {
    return charsLength ? baseRepeat(chars, length) : chars;
  }

  var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
  return hasUnicode(chars) ? castSlice(stringToArray(result), 0, length).join('') : result.slice(0, length);
}
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */


function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */


function isObjectLike(value) {
  return !!value && typeof value == 'object';
}
/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */


function isSymbol(value) {
  return typeof value == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;
}
/**
 * Converts `value` to a finite number.
 *
 * @static
 * @memberOf _
 * @since 4.12.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted number.
 * @example
 *
 * _.toFinite(3.2);
 * // => 3.2
 *
 * _.toFinite(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toFinite(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toFinite('3.2');
 * // => 3.2
 */


function toFinite(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }

  value = toNumber(value);

  if (value === INFINITY || value === -INFINITY) {
    var sign = value < 0 ? -1 : 1;
    return sign * MAX_INTEGER;
  }

  return value === value ? value : 0;
}
/**
 * Converts `value` to an integer.
 *
 * **Note:** This method is loosely based on
 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toInteger(3.2);
 * // => 3
 *
 * _.toInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toInteger(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toInteger('3.2');
 * // => 3
 */


function toInteger(value) {
  var result = toFinite(value),
      remainder = result % 1;
  return result === result ? remainder ? result - remainder : result : 0;
}
/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */


function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }

  if (isSymbol(value)) {
    return NAN;
  }

  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? other + '' : other;
  }

  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }

  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
}
/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */


function toString(value) {
  return value == null ? '' : baseToString(value);
}
/**
 * Pads `string` on the left side if it's shorter than `length`. Padding
 * characters are truncated if they exceed `length`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to pad.
 * @param {number} [length=0] The padding length.
 * @param {string} [chars=' '] The string used as padding.
 * @returns {string} Returns the padded string.
 * @example
 *
 * _.padStart('abc', 6);
 * // => '   abc'
 *
 * _.padStart('abc', 6, '_-');
 * // => '_-_abc'
 *
 * _.padStart('abc', 3);
 * // => 'abc'
 */


function padStart(string, length, chars) {
  string = toString(string);
  length = toInteger(length);
  var strLength = length ? stringSize(string) : 0;
  return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
}

module.exports = padStart;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(8)))

/***/ }),
/* 336 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0,
    MAX_SAFE_INTEGER = 9007199254740991,
    MAX_INTEGER = 1.7976931348623157e+308,
    NAN = 0 / 0;
/** `Object#toString` result references. */

var funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    symbolTag = '[object Symbol]';
/** Used to match leading and trailing whitespace. */

var reTrim = /^\s+|\s+$/g;
/** Used to detect bad signed hexadecimal string values. */

var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
/** Used to detect binary string values. */

var reIsBinary = /^0b[01]+$/i;
/** Used to detect octal string values. */

var reIsOctal = /^0o[0-7]+$/i;
/** Used to detect unsigned integer values. */

var reIsUint = /^(?:0|[1-9]\d*)$/;
/** Built-in method references without a dependency on `root`. */

var freeParseInt = parseInt;
/** Detect free variable `global` from Node.js. */

var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
/** Detect free variable `self`. */

var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
/** Used as a reference to the global object. */

var root = freeGlobal || freeSelf || Function('return this')();
/** Used for built-in method references. */

var objectProto = Object.prototype;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */

var objectToString = objectProto.toString;
/** Built-in value references. */

var Symbol = root.Symbol;
/* Built-in method references for those with the same name as other `lodash` methods. */

var nativeFloor = Math.floor;
/** Used to convert symbols to primitives and strings. */

var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;
/**
 * The base implementation of `_.repeat` which doesn't coerce arguments.
 *
 * @private
 * @param {string} string The string to repeat.
 * @param {number} n The number of times to repeat the string.
 * @returns {string} Returns the repeated string.
 */

function baseRepeat(string, n) {
  var result = '';

  if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
    return result;
  } // Leverage the exponentiation by squaring algorithm for a faster repeat.
  // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.


  do {
    if (n % 2) {
      result += string;
    }

    n = nativeFloor(n / 2);

    if (n) {
      string += string;
    }
  } while (n);

  return result;
}
/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */


function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }

  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }

  var result = value + '';
  return result == '0' && 1 / value == -INFINITY ? '-0' : result;
}
/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */


function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
}
/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */


function isIterateeCall(value, index, object) {
  if (!isObject(object)) {
    return false;
  }

  var type = typeof index;

  if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {
    return eq(object[index], value);
  }

  return false;
}
/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */


function eq(value, other) {
  return value === other || value !== value && other !== other;
}
/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */


function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}
/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */


function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}
/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */


function isLength(value) {
  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */


function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */


function isObjectLike(value) {
  return !!value && typeof value == 'object';
}
/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */


function isSymbol(value) {
  return typeof value == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;
}
/**
 * Converts `value` to a finite number.
 *
 * @static
 * @memberOf _
 * @since 4.12.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted number.
 * @example
 *
 * _.toFinite(3.2);
 * // => 3.2
 *
 * _.toFinite(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toFinite(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toFinite('3.2');
 * // => 3.2
 */


function toFinite(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }

  value = toNumber(value);

  if (value === INFINITY || value === -INFINITY) {
    var sign = value < 0 ? -1 : 1;
    return sign * MAX_INTEGER;
  }

  return value === value ? value : 0;
}
/**
 * Converts `value` to an integer.
 *
 * **Note:** This method is loosely based on
 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toInteger(3.2);
 * // => 3
 *
 * _.toInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toInteger(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toInteger('3.2');
 * // => 3
 */


function toInteger(value) {
  var result = toFinite(value),
      remainder = result % 1;
  return result === result ? remainder ? result - remainder : result : 0;
}
/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */


function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }

  if (isSymbol(value)) {
    return NAN;
  }

  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? other + '' : other;
  }

  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }

  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
}
/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */


function toString(value) {
  return value == null ? '' : baseToString(value);
}
/**
 * Repeats the given string `n` times.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to repeat.
 * @param {number} [n=1] The number of times to repeat the string.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {string} Returns the repeated string.
 * @example
 *
 * _.repeat('*', 3);
 * // => '***'
 *
 * _.repeat('abc', 2);
 * // => 'abcabc'
 *
 * _.repeat('abc', 0);
 * // => ''
 */


function repeat(string, n, guard) {
  if (guard ? isIterateeCall(string, n, guard) : n === undefined) {
    n = 1;
  } else {
    n = toInteger(n);
  }

  return baseRepeat(toString(string), n);
}

module.exports = repeat;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(8)))

/***/ }),
/* 337 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var sprintf = __webpack_require__(88).sprintf;
/**
 * @returns {String} the string with all zeroes contained in a <span>
 */


var spanAllZeroes = exports.spanAllZeroes = function (s) {
  return s.replace(/(0+)/g, '<span class="zero">$1</span>');
};
/**
 * @returns {String} the string with each character contained in a <span>
 */


exports.spanAll = function (s, optionalOffset) {
  if (optionalOffset === undefined) {
    optionalOffset = 0;
  }

  var letters = s.split('');
  return letters.map(function (n, i) {
    return sprintf('<span class="digit value-%s position-%d">%s</span>', n, i + optionalOffset, spanAllZeroes(n)); // XXX Use #base-2 .value-0 instead?
  }).join('');
};

function spanLeadingZeroesSimple(group) {
  return group.replace(/^(0+)/, '<span class="zero">$1</span>');
}
/**
 * @returns {String} the string with leading zeroes contained in a <span>
 */


exports.spanLeadingZeroes = function (address) {
  var groups = address.split(':');
  return groups.map(function (g) {
    return spanLeadingZeroesSimple(g);
  }).join(':');
};
/**
 * Groups an address
 * @returns {String} a grouped address
 */


exports.simpleGroup = function (addressString, offset) {
  var groups = addressString.split(':');

  if (!offset) {
    offset = 0;
  }

  return groups.map(function (g, i) {
    if (/group-v4/.test(g)) {
      return g;
    }

    return sprintf('<span class="hover-group group-%d">%s</span>', i + offset, spanLeadingZeroesSimple(g));
  }).join(':');
};

/***/ }),
/* 338 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

const getIterator = __webpack_require__(87);

const AbortError = __webpack_require__(862); // Wrap an iterator to make it abortable, allow cleanup when aborted via onAbort


const toAbortableSource = (source, signal, options) => toMultiAbortableSource(source, Array.isArray(signal) ? signal : [{
  signal,
  options
}]);

const toMultiAbortableSource = (source, signals) => {
  source = getIterator(source);
  signals = signals.map(({
    signal,
    options
  }) => ({
    signal,
    options: options || {}
  }));

  function abortable() {
    return _abortable.apply(this, arguments);
  }

  function _abortable() {
    _abortable = _wrapAsyncGenerator(function* () {
      let nextAbortHandler;

      const abortHandler = () => {
        if (nextAbortHandler) nextAbortHandler();
      };

      for (const {
        signal
      } of signals) {
        signal.addEventListener('abort', abortHandler);
      }

      while (true) {
        let result;

        try {
          for (const {
            signal,
            options
          } of signals) {
            if (signal.aborted) {
              const {
                abortMessage,
                abortCode
              } = options;
              throw new AbortError(abortMessage, abortCode);
            }
          }

          const abort = new Promise((resolve, reject) => {
            nextAbortHandler = () => {
              const {
                options
              } = signals.find(({
                signal
              }) => signal.aborted);
              const {
                abortMessage,
                abortCode
              } = options;
              reject(new AbortError(abortMessage, abortCode));
            };
          }); // Race the iterator and the abort signals

          result = yield _awaitAsyncGenerator(Promise.race([abort, source.next()]));
          nextAbortHandler = null;
        } catch (err) {
          for (const {
            signal
          } of signals) {
            signal.removeEventListener('abort', abortHandler);
          } // Might not have been aborted by a known signal


          const aborter = signals.find(({
            signal
          }) => signal.aborted);
          const isKnownAborter = err.type === 'aborted' && aborter;

          if (isKnownAborter && aborter.options.onAbort) {
            // Do any custom abort handling for the iterator
            yield _awaitAsyncGenerator(aborter.options.onAbort(source));
          } // End the iterator if it is a generator


          if (typeof source.return === 'function') {
            yield _awaitAsyncGenerator(source.return());
          }

          if (isKnownAborter && aborter.options.returnOnAbort) {
            return;
          }

          throw err;
        }

        if (result.done) break;
        yield result.value;
      }

      for (const {
        signal
      } of signals) {
        signal.removeEventListener('abort', abortHandler);
      }
    });
    return _abortable.apply(this, arguments);
  }

  return abortable();
};

const toAbortableSink = (sink, signal, options) => toMultiAbortableSink(sink, Array.isArray(signal) ? signal : [{
  signal,
  options
}]);

const toMultiAbortableSink = (sink, signals) => source => sink(toMultiAbortableSource(source, signals));

const toAbortableDuplex = (duplex, signal, options) => toMultiAbortableDuplex(duplex, Array.isArray(signal) ? signal : [{
  signal,
  options
}]);

const toMultiAbortableDuplex = (duplex, signals) => ({
  sink: toMultiAbortableSink(duplex.sink, signals),
  source: toMultiAbortableSource(duplex.source, signals)
});

module.exports = toAbortableSource;
module.exports.AbortError = AbortError;
module.exports.source = toAbortableSource;
module.exports.sink = toAbortableSink;
module.exports.transform = toAbortableSink;
module.exports.duplex = toAbortableDuplex;

/***/ }),
/* 339 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var debug = __webpack_require__(1)('simple-peer');

var getBrowserRTC = __webpack_require__(863);

var randombytes = __webpack_require__(340);

var stream = __webpack_require__(163);

var queueMicrotask = __webpack_require__(864); // TODO: remove when Node 10 is not supported


var MAX_BUFFERED_AMOUNT = 64 * 1024;
var ICECOMPLETE_TIMEOUT = 5 * 1000;
var CHANNEL_CLOSING_TIMEOUT = 5 * 1000; // HACK: Filter trickle lines when trickle is disabled #354

function filterTrickle(sdp) {
  return sdp.replace(/a=ice-options:trickle\s\n/g, '');
}

function makeError(message, code) {
  var err = new Error(message);
  err.code = code;
  return err;
}

function warn(message) {
  console.warn(message);
}
/**
 * WebRTC peer connection. Same API as node core `net.Socket`, plus a few extra methods.
 * Duplex stream.
 * @param {Object} opts
 */


class Peer extends stream.Duplex {
  constructor(opts) {
    opts = Object.assign({
      allowHalfOpen: false
    }, opts);
    super(opts);
    this._id = randombytes(4).toString('hex').slice(0, 7);

    this._debug('new peer %o', opts);

    this.channelName = opts.initiator ? opts.channelName || randombytes(20).toString('hex') : null;
    this.initiator = opts.initiator || false;
    this.channelConfig = opts.channelConfig || Peer.channelConfig;
    this.config = Object.assign({}, Peer.config, opts.config);
    this.offerOptions = opts.offerOptions || {};
    this.answerOptions = opts.answerOptions || {};

    this.sdpTransform = opts.sdpTransform || (sdp => sdp);

    this.streams = opts.streams || (opts.stream ? [opts.stream] : []); // support old "stream" option

    this.trickle = opts.trickle !== undefined ? opts.trickle : true;
    this.allowHalfTrickle = opts.allowHalfTrickle !== undefined ? opts.allowHalfTrickle : false;
    this.iceCompleteTimeout = opts.iceCompleteTimeout || ICECOMPLETE_TIMEOUT;
    this.destroyed = false;
    this._connected = false;
    this.remoteAddress = undefined;
    this.remoteFamily = undefined;
    this.remotePort = undefined;
    this.localAddress = undefined;
    this.localFamily = undefined;
    this.localPort = undefined;
    this._wrtc = opts.wrtc && typeof opts.wrtc === 'object' ? opts.wrtc : getBrowserRTC();

    if (!this._wrtc) {
      if (typeof window === 'undefined') {
        throw makeError('No WebRTC support: Specify `opts.wrtc` option in this environment', 'ERR_WEBRTC_SUPPORT');
      } else {
        throw makeError('No WebRTC support: Not a supported browser', 'ERR_WEBRTC_SUPPORT');
      }
    }

    this._pcReady = false;
    this._channelReady = false;
    this._iceComplete = false; // ice candidate trickle done (got null candidate)

    this._iceCompleteTimer = null; // send an offer/answer anyway after some timeout

    this._channel = null;
    this._pendingCandidates = [];
    this._isNegotiating = !this.initiator; // is this peer waiting for negotiation to complete?

    this._batchedNegotiation = false; // batch synchronous negotiations

    this._queuedNegotiation = false; // is there a queued negotiation request?

    this._sendersAwaitingStable = [];
    this._senderMap = new Map();
    this._firstStable = true;
    this._closingInterval = null;
    this._remoteTracks = [];
    this._remoteStreams = [];
    this._chunk = null;
    this._cb = null;
    this._interval = null;

    try {
      this._pc = new this._wrtc.RTCPeerConnection(this.config);
    } catch (err) {
      queueMicrotask(() => this.destroy(makeError(err, 'ERR_PC_CONSTRUCTOR')));
      return;
    } // We prefer feature detection whenever possible, but sometimes that's not
    // possible for certain implementations.


    this._isReactNativeWebrtc = typeof this._pc._peerConnectionId === 'number';

    this._pc.oniceconnectionstatechange = () => {
      this._onIceStateChange();
    };

    this._pc.onicegatheringstatechange = () => {
      this._onIceStateChange();
    };

    this._pc.onconnectionstatechange = () => {
      this._onConnectionStateChange();
    };

    this._pc.onsignalingstatechange = () => {
      this._onSignalingStateChange();
    };

    this._pc.onicecandidate = event => {
      this._onIceCandidate(event);
    }; // Other spec events, unused by this implementation:
    // - onconnectionstatechange
    // - onicecandidateerror
    // - onfingerprintfailure
    // - onnegotiationneeded


    if (this.initiator) {
      this._setupData({
        channel: this._pc.createDataChannel(this.channelName, this.channelConfig)
      });
    } else {
      this._pc.ondatachannel = event => {
        this._setupData(event);
      };
    }

    if (this.streams) {
      this.streams.forEach(stream => {
        this.addStream(stream);
      });
    }

    this._pc.ontrack = event => {
      this._onTrack(event);
    };

    if (this.initiator) {
      this._needsNegotiation();
    }

    this._onFinishBound = () => {
      this._onFinish();
    };

    this.once('finish', this._onFinishBound);
  }

  get bufferSize() {
    return this._channel && this._channel.bufferedAmount || 0;
  } // HACK: it's possible channel.readyState is "closing" before peer.destroy() fires
  // https://bugs.chromium.org/p/chromium/issues/detail?id=882743


  get connected() {
    return this._connected && this._channel.readyState === 'open';
  }

  address() {
    return {
      port: this.localPort,
      family: this.localFamily,
      address: this.localAddress
    };
  }

  signal(data) {
    if (this.destroyed) throw makeError('cannot signal after peer is destroyed', 'ERR_SIGNALING');

    if (typeof data === 'string') {
      try {
        data = JSON.parse(data);
      } catch (err) {
        data = {};
      }
    }

    this._debug('signal()');

    if (data.renegotiate && this.initiator) {
      this._debug('got request to renegotiate');

      this._needsNegotiation();
    }

    if (data.transceiverRequest && this.initiator) {
      this._debug('got request for transceiver');

      this.addTransceiver(data.transceiverRequest.kind, data.transceiverRequest.init);
    }

    if (data.candidate) {
      if (this._pc.remoteDescription && this._pc.remoteDescription.type) {
        this._addIceCandidate(data.candidate);
      } else {
        this._pendingCandidates.push(data.candidate);
      }
    }

    if (data.sdp) {
      this._pc.setRemoteDescription(new this._wrtc.RTCSessionDescription(data)).then(() => {
        if (this.destroyed) return;

        this._pendingCandidates.forEach(candidate => {
          this._addIceCandidate(candidate);
        });

        this._pendingCandidates = [];
        if (this._pc.remoteDescription.type === 'offer') this._createAnswer();
      }).catch(err => {
        this.destroy(makeError(err, 'ERR_SET_REMOTE_DESCRIPTION'));
      });
    }

    if (!data.sdp && !data.candidate && !data.renegotiate && !data.transceiverRequest) {
      this.destroy(makeError('signal() called with invalid signal data', 'ERR_SIGNALING'));
    }
  }

  _addIceCandidate(candidate) {
    var iceCandidateObj = new this._wrtc.RTCIceCandidate(candidate);

    this._pc.addIceCandidate(iceCandidateObj).catch(err => {
      if (!iceCandidateObj.address || iceCandidateObj.address.endsWith('.local')) {
        warn('Ignoring unsupported ICE candidate.');
      } else {
        this.destroy(makeError(err, 'ERR_ADD_ICE_CANDIDATE'));
      }
    });
  }
  /**
   * Send text/binary data to the remote peer.
   * @param {ArrayBufferView|ArrayBuffer|Buffer|string|Blob} chunk
   */


  send(chunk) {
    this._channel.send(chunk);
  }
  /**
   * Add a Transceiver to the connection.
   * @param {String} kind
   * @param {Object} init
   */


  addTransceiver(kind, init) {
    this._debug('addTransceiver()');

    if (this.initiator) {
      try {
        this._pc.addTransceiver(kind, init);

        this._needsNegotiation();
      } catch (err) {
        this.destroy(makeError(err, 'ERR_ADD_TRANSCEIVER'));
      }
    } else {
      this.emit('signal', {
        // request initiator to renegotiate
        transceiverRequest: {
          kind,
          init
        }
      });
    }
  }
  /**
   * Add a MediaStream to the connection.
   * @param {MediaStream} stream
   */


  addStream(stream) {
    this._debug('addStream()');

    stream.getTracks().forEach(track => {
      this.addTrack(track, stream);
    });
  }
  /**
   * Add a MediaStreamTrack to the connection.
   * @param {MediaStreamTrack} track
   * @param {MediaStream} stream
   */


  addTrack(track, stream) {
    this._debug('addTrack()');

    var submap = this._senderMap.get(track) || new Map(); // nested Maps map [track, stream] to sender

    var sender = submap.get(stream);

    if (!sender) {
      sender = this._pc.addTrack(track, stream);
      submap.set(stream, sender);

      this._senderMap.set(track, submap);

      this._needsNegotiation();
    } else if (sender.removed) {
      throw makeError('Track has been removed. You should enable/disable tracks that you want to re-add.', 'ERR_SENDER_REMOVED');
    } else {
      throw makeError('Track has already been added to that stream.', 'ERR_SENDER_ALREADY_ADDED');
    }
  }
  /**
   * Replace a MediaStreamTrack by another in the connection.
   * @param {MediaStreamTrack} oldTrack
   * @param {MediaStreamTrack} newTrack
   * @param {MediaStream} stream
   */


  replaceTrack(oldTrack, newTrack, stream) {
    this._debug('replaceTrack()');

    var submap = this._senderMap.get(oldTrack);

    var sender = submap ? submap.get(stream) : null;

    if (!sender) {
      throw makeError('Cannot replace track that was never added.', 'ERR_TRACK_NOT_ADDED');
    }

    if (newTrack) this._senderMap.set(newTrack, submap);

    if (sender.replaceTrack != null) {
      sender.replaceTrack(newTrack);
    } else {
      this.destroy(makeError('replaceTrack is not supported in this browser', 'ERR_UNSUPPORTED_REPLACETRACK'));
    }
  }
  /**
   * Remove a MediaStreamTrack from the connection.
   * @param {MediaStreamTrack} track
   * @param {MediaStream} stream
   */


  removeTrack(track, stream) {
    this._debug('removeSender()');

    var submap = this._senderMap.get(track);

    var sender = submap ? submap.get(stream) : null;

    if (!sender) {
      throw makeError('Cannot remove track that was never added.', 'ERR_TRACK_NOT_ADDED');
    }

    try {
      sender.removed = true;

      this._pc.removeTrack(sender);
    } catch (err) {
      if (err.name === 'NS_ERROR_UNEXPECTED') {
        this._sendersAwaitingStable.push(sender); // HACK: Firefox must wait until (signalingState === stable) https://bugzilla.mozilla.org/show_bug.cgi?id=1133874

      } else {
        this.destroy(makeError(err, 'ERR_REMOVE_TRACK'));
      }
    }

    this._needsNegotiation();
  }
  /**
   * Remove a MediaStream from the connection.
   * @param {MediaStream} stream
   */


  removeStream(stream) {
    this._debug('removeSenders()');

    stream.getTracks().forEach(track => {
      this.removeTrack(track, stream);
    });
  }

  _needsNegotiation() {
    this._debug('_needsNegotiation');

    if (this._batchedNegotiation) return; // batch synchronous renegotiations

    this._batchedNegotiation = true;
    queueMicrotask(() => {
      this._batchedNegotiation = false;

      this._debug('starting batched negotiation');

      this.negotiate();
    });
  }

  negotiate() {
    if (this.initiator) {
      if (this._isNegotiating) {
        this._queuedNegotiation = true;

        this._debug('already negotiating, queueing');
      } else {
        this._debug('start negotiation');

        setTimeout(() => {
          // HACK: Chrome crashes if we immediately call createOffer
          this._createOffer();
        }, 0);
      }
    } else {
      if (!this._isNegotiating) {
        this._debug('requesting negotiation from initiator');

        this.emit('signal', {
          // request initiator to renegotiate
          renegotiate: true
        });
      }
    }

    this._isNegotiating = true;
  } // TODO: Delete this method once readable-stream is updated to contain a default
  // implementation of destroy() that automatically calls _destroy()
  // See: https://github.com/nodejs/readable-stream/issues/283


  destroy(err) {
    this._destroy(err, () => {});
  }

  _destroy(err, cb) {
    if (this.destroyed) return;

    this._debug('destroy (error: %s)', err && (err.message || err));

    this.readable = this.writable = false;
    if (!this._readableState.ended) this.push(null);
    if (!this._writableState.finished) this.end();
    this.destroyed = true;
    this._connected = false;
    this._pcReady = false;
    this._channelReady = false;
    this._remoteTracks = null;
    this._remoteStreams = null;
    this._senderMap = null;
    clearInterval(this._closingInterval);
    this._closingInterval = null;
    clearInterval(this._interval);
    this._interval = null;
    this._chunk = null;
    this._cb = null;
    if (this._onFinishBound) this.removeListener('finish', this._onFinishBound);
    this._onFinishBound = null;

    if (this._channel) {
      try {
        this._channel.close();
      } catch (err) {}

      this._channel.onmessage = null;
      this._channel.onopen = null;
      this._channel.onclose = null;
      this._channel.onerror = null;
    }

    if (this._pc) {
      try {
        this._pc.close();
      } catch (err) {}

      this._pc.oniceconnectionstatechange = null;
      this._pc.onicegatheringstatechange = null;
      this._pc.onsignalingstatechange = null;
      this._pc.onicecandidate = null;
      this._pc.ontrack = null;
      this._pc.ondatachannel = null;
    }

    this._pc = null;
    this._channel = null;
    if (err) this.emit('error', err);
    this.emit('close');
    cb();
  }

  _setupData(event) {
    if (!event.channel) {
      // In some situations `pc.createDataChannel()` returns `undefined` (in wrtc),
      // which is invalid behavior. Handle it gracefully.
      // See: https://github.com/feross/simple-peer/issues/163
      return this.destroy(makeError('Data channel event is missing `channel` property', 'ERR_DATA_CHANNEL'));
    }

    this._channel = event.channel;
    this._channel.binaryType = 'arraybuffer';

    if (typeof this._channel.bufferedAmountLowThreshold === 'number') {
      this._channel.bufferedAmountLowThreshold = MAX_BUFFERED_AMOUNT;
    }

    this.channelName = this._channel.label;

    this._channel.onmessage = event => {
      this._onChannelMessage(event);
    };

    this._channel.onbufferedamountlow = () => {
      this._onChannelBufferedAmountLow();
    };

    this._channel.onopen = () => {
      this._onChannelOpen();
    };

    this._channel.onclose = () => {
      this._onChannelClose();
    };

    this._channel.onerror = err => {
      this.destroy(makeError(err, 'ERR_DATA_CHANNEL'));
    }; // HACK: Chrome will sometimes get stuck in readyState "closing", let's check for this condition
    // https://bugs.chromium.org/p/chromium/issues/detail?id=882743


    var isClosing = false;
    this._closingInterval = setInterval(() => {
      // No "onclosing" event
      if (this._channel && this._channel.readyState === 'closing') {
        if (isClosing) this._onChannelClose(); // closing timed out: equivalent to onclose firing

        isClosing = true;
      } else {
        isClosing = false;
      }
    }, CHANNEL_CLOSING_TIMEOUT);
  }

  _read() {}

  _write(chunk, encoding, cb) {
    if (this.destroyed) return cb(makeError('cannot write after peer is destroyed', 'ERR_DATA_CHANNEL'));

    if (this._connected) {
      try {
        this.send(chunk);
      } catch (err) {
        return this.destroy(makeError(err, 'ERR_DATA_CHANNEL'));
      }

      if (this._channel.bufferedAmount > MAX_BUFFERED_AMOUNT) {
        this._debug('start backpressure: bufferedAmount %d', this._channel.bufferedAmount);

        this._cb = cb;
      } else {
        cb(null);
      }
    } else {
      this._debug('write before connect');

      this._chunk = chunk;
      this._cb = cb;
    }
  } // When stream finishes writing, close socket. Half open connections are not
  // supported.


  _onFinish() {
    if (this.destroyed) return; // Wait a bit before destroying so the socket flushes.
    // TODO: is there a more reliable way to accomplish this?

    const destroySoon = () => {
      setTimeout(() => this.destroy(), 1000);
    };

    if (this._connected) {
      destroySoon();
    } else {
      this.once('connect', destroySoon);
    }
  }

  _startIceCompleteTimeout() {
    if (this.destroyed) return;
    if (this._iceCompleteTimer) return;

    this._debug('started iceComplete timeout');

    this._iceCompleteTimer = setTimeout(() => {
      if (!this._iceComplete) {
        this._iceComplete = true;

        this._debug('iceComplete timeout completed');

        this.emit('iceTimeout');
        this.emit('_iceComplete');
      }
    }, this.iceCompleteTimeout);
  }

  _createOffer() {
    if (this.destroyed) return;

    this._pc.createOffer(this.offerOptions).then(offer => {
      if (this.destroyed) return;
      if (!this.trickle && !this.allowHalfTrickle) offer.sdp = filterTrickle(offer.sdp);
      offer.sdp = this.sdpTransform(offer.sdp);

      const sendOffer = () => {
        if (this.destroyed) return;
        var signal = this._pc.localDescription || offer;

        this._debug('signal');

        this.emit('signal', {
          type: signal.type,
          sdp: signal.sdp
        });
      };

      const onSuccess = () => {
        this._debug('createOffer success');

        if (this.destroyed) return;
        if (this.trickle || this._iceComplete) sendOffer();else this.once('_iceComplete', sendOffer); // wait for candidates
      };

      const onError = err => {
        this.destroy(makeError(err, 'ERR_SET_LOCAL_DESCRIPTION'));
      };

      this._pc.setLocalDescription(offer).then(onSuccess).catch(onError);
    }).catch(err => {
      this.destroy(makeError(err, 'ERR_CREATE_OFFER'));
    });
  }

  _requestMissingTransceivers() {
    if (this._pc.getTransceivers) {
      this._pc.getTransceivers().forEach(transceiver => {
        if (!transceiver.mid && transceiver.sender.track && !transceiver.requested) {
          transceiver.requested = true; // HACK: Safari returns negotiated transceivers with a null mid

          this.addTransceiver(transceiver.sender.track.kind);
        }
      });
    }
  }

  _createAnswer() {
    if (this.destroyed) return;

    this._pc.createAnswer(this.answerOptions).then(answer => {
      if (this.destroyed) return;
      if (!this.trickle && !this.allowHalfTrickle) answer.sdp = filterTrickle(answer.sdp);
      answer.sdp = this.sdpTransform(answer.sdp);

      const sendAnswer = () => {
        if (this.destroyed) return;
        var signal = this._pc.localDescription || answer;

        this._debug('signal');

        this.emit('signal', {
          type: signal.type,
          sdp: signal.sdp
        });
        if (!this.initiator) this._requestMissingTransceivers();
      };

      const onSuccess = () => {
        if (this.destroyed) return;
        if (this.trickle || this._iceComplete) sendAnswer();else this.once('_iceComplete', sendAnswer);
      };

      const onError = err => {
        this.destroy(makeError(err, 'ERR_SET_LOCAL_DESCRIPTION'));
      };

      this._pc.setLocalDescription(answer).then(onSuccess).catch(onError);
    }).catch(err => {
      this.destroy(makeError(err, 'ERR_CREATE_ANSWER'));
    });
  }

  _onConnectionStateChange() {
    if (this.destroyed) return;

    if (this._pc.connectionState === 'failed') {
      this.destroy(makeError('Connection failed.', 'ERR_CONNECTION_FAILURE'));
    }
  }

  _onIceStateChange() {
    if (this.destroyed) return;
    var iceConnectionState = this._pc.iceConnectionState;
    var iceGatheringState = this._pc.iceGatheringState;

    this._debug('iceStateChange (connection: %s) (gathering: %s)', iceConnectionState, iceGatheringState);

    this.emit('iceStateChange', iceConnectionState, iceGatheringState);

    if (iceConnectionState === 'connected' || iceConnectionState === 'completed') {
      this._pcReady = true;

      this._maybeReady();
    }

    if (iceConnectionState === 'failed') {
      this.destroy(makeError('Ice connection failed.', 'ERR_ICE_CONNECTION_FAILURE'));
    }

    if (iceConnectionState === 'closed') {
      this.destroy(makeError('Ice connection closed.', 'ERR_ICE_CONNECTION_CLOSED'));
    }
  }

  getStats(cb) {
    // statreports can come with a value array instead of properties
    const flattenValues = report => {
      if (Object.prototype.toString.call(report.values) === '[object Array]') {
        report.values.forEach(value => {
          Object.assign(report, value);
        });
      }

      return report;
    }; // Promise-based getStats() (standard)


    if (this._pc.getStats.length === 0 || this._isReactNativeWebrtc) {
      this._pc.getStats().then(res => {
        var reports = [];
        res.forEach(report => {
          reports.push(flattenValues(report));
        });
        cb(null, reports);
      }, err => cb(err)); // Single-parameter callback-based getStats() (non-standard)

    } else if (this._pc.getStats.length > 0) {
      this._pc.getStats(res => {
        // If we destroy connection in `connect` callback this code might happen to run when actual connection is already closed
        if (this.destroyed) return;
        var reports = [];
        res.result().forEach(result => {
          var report = {};
          result.names().forEach(name => {
            report[name] = result.stat(name);
          });
          report.id = result.id;
          report.type = result.type;
          report.timestamp = result.timestamp;
          reports.push(flattenValues(report));
        });
        cb(null, reports);
      }, err => cb(err)); // Unknown browser, skip getStats() since it's anyone's guess which style of
      // getStats() they implement.

    } else {
      cb(null, []);
    }
  }

  _maybeReady() {
    this._debug('maybeReady pc %s channel %s', this._pcReady, this._channelReady);

    if (this._connected || this._connecting || !this._pcReady || !this._channelReady) return;
    this._connecting = true; // HACK: We can't rely on order here, for details see https://github.com/js-platform/node-webrtc/issues/339

    const findCandidatePair = () => {
      if (this.destroyed) return;
      this.getStats((err, items) => {
        if (this.destroyed) return; // Treat getStats error as non-fatal. It's not essential.

        if (err) items = [];
        var remoteCandidates = {};
        var localCandidates = {};
        var candidatePairs = {};
        var foundSelectedCandidatePair = false;
        items.forEach(item => {
          // TODO: Once all browsers support the hyphenated stats report types, remove
          // the non-hypenated ones
          if (item.type === 'remotecandidate' || item.type === 'remote-candidate') {
            remoteCandidates[item.id] = item;
          }

          if (item.type === 'localcandidate' || item.type === 'local-candidate') {
            localCandidates[item.id] = item;
          }

          if (item.type === 'candidatepair' || item.type === 'candidate-pair') {
            candidatePairs[item.id] = item;
          }
        });

        const setSelectedCandidatePair = selectedCandidatePair => {
          foundSelectedCandidatePair = true;
          var local = localCandidates[selectedCandidatePair.localCandidateId];

          if (local && (local.ip || local.address)) {
            // Spec
            this.localAddress = local.ip || local.address;
            this.localPort = Number(local.port);
          } else if (local && local.ipAddress) {
            // Firefox
            this.localAddress = local.ipAddress;
            this.localPort = Number(local.portNumber);
          } else if (typeof selectedCandidatePair.googLocalAddress === 'string') {
            // TODO: remove this once Chrome 58 is released
            local = selectedCandidatePair.googLocalAddress.split(':');
            this.localAddress = local[0];
            this.localPort = Number(local[1]);
          }

          if (this.localAddress) {
            this.localFamily = this.localAddress.includes(':') ? 'IPv6' : 'IPv4';
          }

          var remote = remoteCandidates[selectedCandidatePair.remoteCandidateId];

          if (remote && (remote.ip || remote.address)) {
            // Spec
            this.remoteAddress = remote.ip || remote.address;
            this.remotePort = Number(remote.port);
          } else if (remote && remote.ipAddress) {
            // Firefox
            this.remoteAddress = remote.ipAddress;
            this.remotePort = Number(remote.portNumber);
          } else if (typeof selectedCandidatePair.googRemoteAddress === 'string') {
            // TODO: remove this once Chrome 58 is released
            remote = selectedCandidatePair.googRemoteAddress.split(':');
            this.remoteAddress = remote[0];
            this.remotePort = Number(remote[1]);
          }

          if (this.remoteAddress) {
            this.remoteFamily = this.remoteAddress.includes(':') ? 'IPv6' : 'IPv4';
          }

          this._debug('connect local: %s:%s remote: %s:%s', this.localAddress, this.localPort, this.remoteAddress, this.remotePort);
        };

        items.forEach(item => {
          // Spec-compliant
          if (item.type === 'transport' && item.selectedCandidatePairId) {
            setSelectedCandidatePair(candidatePairs[item.selectedCandidatePairId]);
          } // Old implementations


          if (item.type === 'googCandidatePair' && item.googActiveConnection === 'true' || (item.type === 'candidatepair' || item.type === 'candidate-pair') && item.selected) {
            setSelectedCandidatePair(item);
          }
        }); // Ignore candidate pair selection in browsers like Safari 11 that do not have any local or remote candidates
        // But wait until at least 1 candidate pair is available

        if (!foundSelectedCandidatePair && (!Object.keys(candidatePairs).length || Object.keys(localCandidates).length)) {
          setTimeout(findCandidatePair, 100);
          return;
        } else {
          this._connecting = false;
          this._connected = true;
        }

        if (this._chunk) {
          try {
            this.send(this._chunk);
          } catch (err) {
            return this.destroy(makeError(err, 'ERR_DATA_CHANNEL'));
          }

          this._chunk = null;

          this._debug('sent chunk from "write before connect"');

          var cb = this._cb;
          this._cb = null;
          cb(null);
        } // If `bufferedAmountLowThreshold` and 'onbufferedamountlow' are unsupported,
        // fallback to using setInterval to implement backpressure.


        if (typeof this._channel.bufferedAmountLowThreshold !== 'number') {
          this._interval = setInterval(() => this._onInterval(), 150);
          if (this._interval.unref) this._interval.unref();
        }

        this._debug('connect');

        this.emit('connect');
      });
    };

    findCandidatePair();
  }

  _onInterval() {
    if (!this._cb || !this._channel || this._channel.bufferedAmount > MAX_BUFFERED_AMOUNT) {
      return;
    }

    this._onChannelBufferedAmountLow();
  }

  _onSignalingStateChange() {
    if (this.destroyed) return;

    if (this._pc.signalingState === 'stable' && !this._firstStable) {
      this._isNegotiating = false; // HACK: Firefox doesn't yet support removing tracks when signalingState !== 'stable'

      this._debug('flushing sender queue', this._sendersAwaitingStable);

      this._sendersAwaitingStable.forEach(sender => {
        this._pc.removeTrack(sender);

        this._queuedNegotiation = true;
      });

      this._sendersAwaitingStable = [];

      if (this._queuedNegotiation) {
        this._debug('flushing negotiation queue');

        this._queuedNegotiation = false;

        this._needsNegotiation(); // negotiate again

      }

      this._debug('negotiate');

      this.emit('negotiate');
    }

    this._firstStable = false;

    this._debug('signalingStateChange %s', this._pc.signalingState);

    this.emit('signalingStateChange', this._pc.signalingState);
  }

  _onIceCandidate(event) {
    if (this.destroyed) return;

    if (event.candidate && this.trickle) {
      this.emit('signal', {
        candidate: {
          candidate: event.candidate.candidate,
          sdpMLineIndex: event.candidate.sdpMLineIndex,
          sdpMid: event.candidate.sdpMid
        }
      });
    } else if (!event.candidate && !this._iceComplete) {
      this._iceComplete = true;
      this.emit('_iceComplete');
    } // as soon as we've received one valid candidate start timeout


    if (event.candidate) {
      this._startIceCompleteTimeout();
    }
  }

  _onChannelMessage(event) {
    if (this.destroyed) return;
    var data = event.data;
    if (data instanceof ArrayBuffer) data = Buffer.from(data);
    this.push(data);
  }

  _onChannelBufferedAmountLow() {
    if (this.destroyed || !this._cb) return;

    this._debug('ending backpressure: bufferedAmount %d', this._channel.bufferedAmount);

    var cb = this._cb;
    this._cb = null;
    cb(null);
  }

  _onChannelOpen() {
    if (this._connected || this.destroyed) return;

    this._debug('on channel open');

    this._channelReady = true;

    this._maybeReady();
  }

  _onChannelClose() {
    if (this.destroyed) return;

    this._debug('on channel close');

    this.destroy();
  }

  _onTrack(event) {
    if (this.destroyed) return;
    event.streams.forEach(eventStream => {
      this._debug('on track');

      this.emit('track', event.track, eventStream);

      this._remoteTracks.push({
        track: event.track,
        stream: eventStream
      });

      if (this._remoteStreams.some(remoteStream => {
        return remoteStream.id === eventStream.id;
      })) return; // Only fire one 'stream' event, even though there may be multiple tracks per stream

      this._remoteStreams.push(eventStream);

      queueMicrotask(() => {
        this.emit('stream', eventStream); // ensure all tracks have been added
      });
    });
  }

  _debug() {
    var args = [].slice.call(arguments);
    args[0] = '[' + this._id + '] ' + args[0];
    debug.apply(null, args);
  }

}

Peer.WEBRTC_SUPPORT = !!getBrowserRTC();
/**
 * Expose peer and data channel config for overriding all Peer
 * instances. Otherwise, just set opts.config or opts.channelConfig
 * when constructing a Peer.
 */

Peer.config = {
  iceServers: [{
    urls: 'stun:stun.l.google.com:19302'
  }, {
    urls: 'stun:global.stun.twilio.com:3478?transport=udp'
  }],
  sdpSemantics: 'unified-plan'
};
Peer.channelConfig = {};
module.exports = Peer;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 340 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) { // limit of Crypto.getRandomValues()
// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues

var MAX_BYTES = 65536; // Node supports requesting up to this number of bytes
// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48

var MAX_UINT32 = 4294967295;

function oldBrowser() {
  throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11');
}

var Buffer = __webpack_require__(6).Buffer;

var crypto = global.crypto || global.msCrypto;

if (crypto && crypto.getRandomValues) {
  module.exports = randomBytes;
} else {
  module.exports = oldBrowser;
}

function randomBytes(size, cb) {
  // phantomjs needs to throw
  if (size > MAX_UINT32) throw new RangeError('requested too many random bytes');
  var bytes = Buffer.allocUnsafe(size);

  if (size > 0) {
    // getRandomValues fails on IE if size == 0
    if (size > MAX_BYTES) {
      // this is the max bytes crypto.getRandomValues
      // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
      for (var generated = 0; generated < size; generated += MAX_BYTES) {
        // buffer.slice automatically checks if the end is past the end of
        // the buffer so we don't have to here
        crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES));
      }
    } else {
      crypto.getRandomValues(bytes);
    }
  }

  if (typeof cb === 'function') {
    return process.nextTick(function () {
      cb(null, bytes);
    });
  }

  return bytes;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(8), __webpack_require__(5)))

/***/ }),
/* 341 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Parses an URI
 *
 * @author Steven Levithan <stevenlevithan.com> (MIT license)
 * @api private
 */
var re = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;
var parts = ['source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'];

module.exports = function parseuri(str) {
  var src = str,
      b = str.indexOf('['),
      e = str.indexOf(']');

  if (b != -1 && e != -1) {
    str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);
  }

  var m = re.exec(str || ''),
      uri = {},
      i = 14;

  while (i--) {
    uri[parts[i]] = m[i] || '';
  }

  if (b != -1 && e != -1) {
    uri.source = src;
    uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');
    uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');
    uri.ipv6uri = true;
  }

  return uri;
};

/***/ }),
/* 342 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

/***/ }),
/* 343 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

module.exports = isBuf;
var withNativeBuffer = typeof Buffer === 'function' && typeof Buffer.isBuffer === 'function';
var withNativeArrayBuffer = typeof ArrayBuffer === 'function';

var isView = function isView(obj) {
  return typeof ArrayBuffer.isView === 'function' ? ArrayBuffer.isView(obj) : obj.buffer instanceof ArrayBuffer;
};
/**
 * Returns true if obj is a buffer or an arraybuffer.
 *
 * @api private
 */


function isBuf(obj) {
  return withNativeBuffer && Buffer.isBuffer(obj) || withNativeArrayBuffer && (obj instanceof ArrayBuffer || isView(obj));
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 344 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Module dependencies.
 */
var eio = __webpack_require__(873);

var Socket = __webpack_require__(350);

var Emitter = __webpack_require__(70);

var parser = __webpack_require__(185);

var on = __webpack_require__(351);

var bind = __webpack_require__(352);

var debug = __webpack_require__(1)('socket.io-client:manager');

var indexOf = __webpack_require__(349);

var Backoff = __webpack_require__(888);
/**
 * IE6+ hasOwnProperty
 */


var has = Object.prototype.hasOwnProperty;
/**
 * Module exports
 */

module.exports = Manager;
/**
 * `Manager` constructor.
 *
 * @param {String} engine instance or engine uri/opts
 * @param {Object} options
 * @api public
 */

function Manager(uri, opts) {
  if (!(this instanceof Manager)) return new Manager(uri, opts);

  if (uri && 'object' === typeof uri) {
    opts = uri;
    uri = undefined;
  }

  opts = opts || {};
  opts.path = opts.path || '/socket.io';
  this.nsps = {};
  this.subs = [];
  this.opts = opts;
  this.reconnection(opts.reconnection !== false);
  this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
  this.reconnectionDelay(opts.reconnectionDelay || 1000);
  this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);
  this.randomizationFactor(opts.randomizationFactor || 0.5);
  this.backoff = new Backoff({
    min: this.reconnectionDelay(),
    max: this.reconnectionDelayMax(),
    jitter: this.randomizationFactor()
  });
  this.timeout(null == opts.timeout ? 20000 : opts.timeout);
  this.readyState = 'closed';
  this.uri = uri;
  this.connecting = [];
  this.lastPing = null;
  this.encoding = false;
  this.packetBuffer = [];

  var _parser = opts.parser || parser;

  this.encoder = new _parser.Encoder();
  this.decoder = new _parser.Decoder();
  this.autoConnect = opts.autoConnect !== false;
  if (this.autoConnect) this.open();
}
/**
 * Propagate given event to sockets and emit on `this`
 *
 * @api private
 */


Manager.prototype.emitAll = function () {
  this.emit.apply(this, arguments);

  for (var nsp in this.nsps) {
    if (has.call(this.nsps, nsp)) {
      this.nsps[nsp].emit.apply(this.nsps[nsp], arguments);
    }
  }
};
/**
 * Update `socket.id` of all sockets
 *
 * @api private
 */


Manager.prototype.updateSocketIds = function () {
  for (var nsp in this.nsps) {
    if (has.call(this.nsps, nsp)) {
      this.nsps[nsp].id = this.generateId(nsp);
    }
  }
};
/**
 * generate `socket.id` for the given `nsp`
 *
 * @param {String} nsp
 * @return {String}
 * @api private
 */


Manager.prototype.generateId = function (nsp) {
  return (nsp === '/' ? '' : nsp + '#') + this.engine.id;
};
/**
 * Mix in `Emitter`.
 */


Emitter(Manager.prototype);
/**
 * Sets the `reconnection` config.
 *
 * @param {Boolean} true/false if it should automatically reconnect
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnection = function (v) {
  if (!arguments.length) return this._reconnection;
  this._reconnection = !!v;
  return this;
};
/**
 * Sets the reconnection attempts config.
 *
 * @param {Number} max reconnection attempts before giving up
 * @return {Manager} self or value
 * @api public
 */


Manager.prototype.reconnectionAttempts = function (v) {
  if (!arguments.length) return this._reconnectionAttempts;
  this._reconnectionAttempts = v;
  return this;
};
/**
 * Sets the delay between reconnections.
 *
 * @param {Number} delay
 * @return {Manager} self or value
 * @api public
 */


Manager.prototype.reconnectionDelay = function (v) {
  if (!arguments.length) return this._reconnectionDelay;
  this._reconnectionDelay = v;
  this.backoff && this.backoff.setMin(v);
  return this;
};

Manager.prototype.randomizationFactor = function (v) {
  if (!arguments.length) return this._randomizationFactor;
  this._randomizationFactor = v;
  this.backoff && this.backoff.setJitter(v);
  return this;
};
/**
 * Sets the maximum delay between reconnections.
 *
 * @param {Number} delay
 * @return {Manager} self or value
 * @api public
 */


Manager.prototype.reconnectionDelayMax = function (v) {
  if (!arguments.length) return this._reconnectionDelayMax;
  this._reconnectionDelayMax = v;
  this.backoff && this.backoff.setMax(v);
  return this;
};
/**
 * Sets the connection timeout. `false` to disable
 *
 * @return {Manager} self or value
 * @api public
 */


Manager.prototype.timeout = function (v) {
  if (!arguments.length) return this._timeout;
  this._timeout = v;
  return this;
};
/**
 * Starts trying to reconnect if reconnection is enabled and we have not
 * started reconnecting yet
 *
 * @api private
 */


Manager.prototype.maybeReconnectOnOpen = function () {
  // Only try to reconnect if it's the first time we're connecting
  if (!this.reconnecting && this._reconnection && this.backoff.attempts === 0) {
    // keeps reconnection from firing twice for the same reconnection loop
    this.reconnect();
  }
};
/**
 * Sets the current transport `socket`.
 *
 * @param {Function} optional, callback
 * @return {Manager} self
 * @api public
 */


Manager.prototype.open = Manager.prototype.connect = function (fn, opts) {
  debug('readyState %s', this.readyState);
  if (~this.readyState.indexOf('open')) return this;
  debug('opening %s', this.uri);
  this.engine = eio(this.uri, this.opts);
  var socket = this.engine;
  var self = this;
  this.readyState = 'opening';
  this.skipReconnect = false; // emit `open`

  var openSub = on(socket, 'open', function () {
    self.onopen();
    fn && fn();
  }); // emit `connect_error`

  var errorSub = on(socket, 'error', function (data) {
    debug('connect_error');
    self.cleanup();
    self.readyState = 'closed';
    self.emitAll('connect_error', data);

    if (fn) {
      var err = new Error('Connection error');
      err.data = data;
      fn(err);
    } else {
      // Only do this if there is no fn to handle the error
      self.maybeReconnectOnOpen();
    }
  }); // emit `connect_timeout`

  if (false !== this._timeout) {
    var timeout = this._timeout;
    debug('connect attempt will timeout after %d', timeout); // set timer

    var timer = setTimeout(function () {
      debug('connect attempt timed out after %d', timeout);
      openSub.destroy();
      socket.close();
      socket.emit('error', 'timeout');
      self.emitAll('connect_timeout', timeout);
    }, timeout);
    this.subs.push({
      destroy: function destroy() {
        clearTimeout(timer);
      }
    });
  }

  this.subs.push(openSub);
  this.subs.push(errorSub);
  return this;
};
/**
 * Called upon transport open.
 *
 * @api private
 */


Manager.prototype.onopen = function () {
  debug('open'); // clear old subs

  this.cleanup(); // mark as open

  this.readyState = 'open';
  this.emit('open'); // add new subs

  var socket = this.engine;
  this.subs.push(on(socket, 'data', bind(this, 'ondata')));
  this.subs.push(on(socket, 'ping', bind(this, 'onping')));
  this.subs.push(on(socket, 'pong', bind(this, 'onpong')));
  this.subs.push(on(socket, 'error', bind(this, 'onerror')));
  this.subs.push(on(socket, 'close', bind(this, 'onclose')));
  this.subs.push(on(this.decoder, 'decoded', bind(this, 'ondecoded')));
};
/**
 * Called upon a ping.
 *
 * @api private
 */


Manager.prototype.onping = function () {
  this.lastPing = new Date();
  this.emitAll('ping');
};
/**
 * Called upon a packet.
 *
 * @api private
 */


Manager.prototype.onpong = function () {
  this.emitAll('pong', new Date() - this.lastPing);
};
/**
 * Called with data.
 *
 * @api private
 */


Manager.prototype.ondata = function (data) {
  this.decoder.add(data);
};
/**
 * Called when parser fully decodes a packet.
 *
 * @api private
 */


Manager.prototype.ondecoded = function (packet) {
  this.emit('packet', packet);
};
/**
 * Called upon socket error.
 *
 * @api private
 */


Manager.prototype.onerror = function (err) {
  debug('error', err);
  this.emitAll('error', err);
};
/**
 * Creates a new socket for the given `nsp`.
 *
 * @return {Socket}
 * @api public
 */


Manager.prototype.socket = function (nsp, opts) {
  var socket = this.nsps[nsp];

  if (!socket) {
    socket = new Socket(this, nsp, opts);
    this.nsps[nsp] = socket;
    var self = this;
    socket.on('connecting', onConnecting);
    socket.on('connect', function () {
      socket.id = self.generateId(nsp);
    });

    if (this.autoConnect) {
      // manually call here since connecting event is fired before listening
      onConnecting();
    }
  }

  function onConnecting() {
    if (!~indexOf(self.connecting, socket)) {
      self.connecting.push(socket);
    }
  }

  return socket;
};
/**
 * Called upon a socket close.
 *
 * @param {Socket} socket
 */


Manager.prototype.destroy = function (socket) {
  var index = indexOf(this.connecting, socket);
  if (~index) this.connecting.splice(index, 1);
  if (this.connecting.length) return;
  this.close();
};
/**
 * Writes a packet.
 *
 * @param {Object} packet
 * @api private
 */


Manager.prototype.packet = function (packet) {
  debug('writing packet %j', packet);
  var self = this;
  if (packet.query && packet.type === 0) packet.nsp += '?' + packet.query;

  if (!self.encoding) {
    // encode, then write to engine with result
    self.encoding = true;
    this.encoder.encode(packet, function (encodedPackets) {
      for (var i = 0; i < encodedPackets.length; i++) {
        self.engine.write(encodedPackets[i], packet.options);
      }

      self.encoding = false;
      self.processPacketQueue();
    });
  } else {
    // add packet to the queue
    self.packetBuffer.push(packet);
  }
};
/**
 * If packet buffer is non-empty, begins encoding the
 * next packet in line.
 *
 * @api private
 */


Manager.prototype.processPacketQueue = function () {
  if (this.packetBuffer.length > 0 && !this.encoding) {
    var pack = this.packetBuffer.shift();
    this.packet(pack);
  }
};
/**
 * Clean up transport subscriptions and packet buffer.
 *
 * @api private
 */


Manager.prototype.cleanup = function () {
  debug('cleanup');
  var subsLength = this.subs.length;

  for (var i = 0; i < subsLength; i++) {
    var sub = this.subs.shift();
    sub.destroy();
  }

  this.packetBuffer = [];
  this.encoding = false;
  this.lastPing = null;
  this.decoder.destroy();
};
/**
 * Close the current socket.
 *
 * @api private
 */


Manager.prototype.close = Manager.prototype.disconnect = function () {
  debug('disconnect');
  this.skipReconnect = true;
  this.reconnecting = false;

  if ('opening' === this.readyState) {
    // `onclose` will not fire because
    // an open event never happened
    this.cleanup();
  }

  this.backoff.reset();
  this.readyState = 'closed';
  if (this.engine) this.engine.close();
};
/**
 * Called upon engine close.
 *
 * @api private
 */


Manager.prototype.onclose = function (reason) {
  debug('onclose');
  this.cleanup();
  this.backoff.reset();
  this.readyState = 'closed';
  this.emit('close', reason);

  if (this._reconnection && !this.skipReconnect) {
    this.reconnect();
  }
};
/**
 * Attempt a reconnection.
 *
 * @api private
 */


Manager.prototype.reconnect = function () {
  if (this.reconnecting || this.skipReconnect) return this;
  var self = this;

  if (this.backoff.attempts >= this._reconnectionAttempts) {
    debug('reconnect failed');
    this.backoff.reset();
    this.emitAll('reconnect_failed');
    this.reconnecting = false;
  } else {
    var delay = this.backoff.duration();
    debug('will wait %dms before reconnect attempt', delay);
    this.reconnecting = true;
    var timer = setTimeout(function () {
      if (self.skipReconnect) return;
      debug('attempting reconnect');
      self.emitAll('reconnect_attempt', self.backoff.attempts);
      self.emitAll('reconnecting', self.backoff.attempts); // check again for the case socket closed in above events

      if (self.skipReconnect) return;
      self.open(function (err) {
        if (err) {
          debug('reconnect attempt error');
          self.reconnecting = false;
          self.reconnect();
          self.emitAll('reconnect_error', err.data);
        } else {
          debug('reconnect success');
          self.onreconnect();
        }
      });
    }, delay);
    this.subs.push({
      destroy: function destroy() {
        clearTimeout(timer);
      }
    });
  }
};
/**
 * Called upon successful reconnect.
 *
 * @api private
 */


Manager.prototype.onreconnect = function () {
  var attempt = this.backoff.attempts;
  this.reconnecting = false;
  this.backoff.reset();
  this.updateSocketIds();
  this.emitAll('reconnect', attempt);
};

/***/ }),
/* 345 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Module dependencies
 */
var XMLHttpRequest = __webpack_require__(186);

var XHR = __webpack_require__(876);

var JSONP = __webpack_require__(884);

var websocket = __webpack_require__(885);
/**
 * Export transports.
 */


exports.polling = polling;
exports.websocket = websocket;
/**
 * Polling transport polymorphic constructor.
 * Decides on xhr vs jsonp based on feature detection.
 *
 * @api private
 */

function polling(opts) {
  var xhr;
  var xd = false;
  var xs = false;
  var jsonp = false !== opts.jsonp;

  if (typeof location !== 'undefined') {
    var isSSL = 'https:' === location.protocol;
    var port = location.port; // some user agents have empty `location.port`

    if (!port) {
      port = isSSL ? 443 : 80;
    }

    xd = opts.hostname !== location.hostname || port !== opts.port;
    xs = opts.secure !== isSSL;
  }

  opts.xdomain = xd;
  opts.xscheme = xs;
  xhr = new XMLHttpRequest(opts);

  if ('open' in xhr && !opts.forceJSONP) {
    return new XHR(opts);
  } else {
    if (!jsonp) throw new Error('JSONP disabled');
    return new JSONP(opts);
  }
}

/***/ }),
/* 346 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Module dependencies.
 */
var Transport = __webpack_require__(187);

var parseqs = __webpack_require__(118);

var parser = __webpack_require__(71);

var inherit = __webpack_require__(119);

var yeast = __webpack_require__(348);

var debug = __webpack_require__(1)('engine.io-client:polling');
/**
 * Module exports.
 */


module.exports = Polling;
/**
 * Is XHR2 supported?
 */

var hasXHR2 = function () {
  var XMLHttpRequest = __webpack_require__(186);

  var xhr = new XMLHttpRequest({
    xdomain: false
  });
  return null != xhr.responseType;
}();
/**
 * Polling interface.
 *
 * @param {Object} opts
 * @api private
 */


function Polling(opts) {
  var forceBase64 = opts && opts.forceBase64;

  if (!hasXHR2 || forceBase64) {
    this.supportsBinary = false;
  }

  Transport.call(this, opts);
}
/**
 * Inherits from Transport.
 */


inherit(Polling, Transport);
/**
 * Transport name.
 */

Polling.prototype.name = 'polling';
/**
 * Opens the socket (triggers polling). We write a PING message to determine
 * when the transport is open.
 *
 * @api private
 */

Polling.prototype.doOpen = function () {
  this.poll();
};
/**
 * Pauses polling.
 *
 * @param {Function} callback upon buffers are flushed and transport is paused
 * @api private
 */


Polling.prototype.pause = function (onPause) {
  var self = this;
  this.readyState = 'pausing';

  function pause() {
    debug('paused');
    self.readyState = 'paused';
    onPause();
  }

  if (this.polling || !this.writable) {
    var total = 0;

    if (this.polling) {
      debug('we are currently polling - waiting to pause');
      total++;
      this.once('pollComplete', function () {
        debug('pre-pause polling complete');
        --total || pause();
      });
    }

    if (!this.writable) {
      debug('we are currently writing - waiting to pause');
      total++;
      this.once('drain', function () {
        debug('pre-pause writing complete');
        --total || pause();
      });
    }
  } else {
    pause();
  }
};
/**
 * Starts polling cycle.
 *
 * @api public
 */


Polling.prototype.poll = function () {
  debug('polling');
  this.polling = true;
  this.doPoll();
  this.emit('poll');
};
/**
 * Overloads onData to detect payloads.
 *
 * @api private
 */


Polling.prototype.onData = function (data) {
  var self = this;
  debug('polling got data %s', data);

  var callback = function callback(packet, index, total) {
    // if its the first message we consider the transport open
    if ('opening' === self.readyState) {
      self.onOpen();
    } // if its a close packet, we close the ongoing requests


    if ('close' === packet.type) {
      self.onClose();
      return false;
    } // otherwise bypass onData and handle the message


    self.onPacket(packet);
  }; // decode payload


  parser.decodePayload(data, this.socket.binaryType, callback); // if an event did not trigger closing

  if ('closed' !== this.readyState) {
    // if we got data we're not polling
    this.polling = false;
    this.emit('pollComplete');

    if ('open' === this.readyState) {
      this.poll();
    } else {
      debug('ignoring poll - transport state "%s"', this.readyState);
    }
  }
};
/**
 * For polling, send a close packet.
 *
 * @api private
 */


Polling.prototype.doClose = function () {
  var self = this;

  function close() {
    debug('writing close packet');
    self.write([{
      type: 'close'
    }]);
  }

  if ('open' === this.readyState) {
    debug('transport open - closing');
    close();
  } else {
    // in case we're trying to close while
    // handshaking is in progress (GH-164)
    debug('transport not open - deferring close');
    this.once('open', close);
  }
};
/**
 * Writes a packets payload.
 *
 * @param {Array} data packets
 * @param {Function} drain callback
 * @api private
 */


Polling.prototype.write = function (packets) {
  var self = this;
  this.writable = false;

  var callbackfn = function callbackfn() {
    self.writable = true;
    self.emit('drain');
  };

  parser.encodePayload(packets, this.supportsBinary, function (data) {
    self.doWrite(data, callbackfn);
  });
};
/**
 * Generates uri for connection.
 *
 * @api private
 */


Polling.prototype.uri = function () {
  var query = this.query || {};
  var schema = this.secure ? 'https' : 'http';
  var port = ''; // cache busting is forced

  if (false !== this.timestampRequests) {
    query[this.timestampParam] = yeast();
  }

  if (!this.supportsBinary && !query.sid) {
    query.b64 = 1;
  }

  query = parseqs.encode(query); // avoid port if default for schema

  if (this.port && ('https' === schema && Number(this.port) !== 443 || 'http' === schema && Number(this.port) !== 80)) {
    port = ':' + this.port;
  } // prepend ? to query


  if (query.length) {
    query = '?' + query;
  }

  var ipv6 = this.hostname.indexOf(':') !== -1;
  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
};

/***/ }),
/* 347 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

/* global Blob File */

/*
 * Module requirements.
 */
var isArray = __webpack_require__(878);

var toString = Object.prototype.toString;
var withNativeBlob = typeof Blob === 'function' || typeof Blob !== 'undefined' && toString.call(Blob) === '[object BlobConstructor]';
var withNativeFile = typeof File === 'function' || typeof File !== 'undefined' && toString.call(File) === '[object FileConstructor]';
/**
 * Module exports.
 */

module.exports = hasBinary;
/**
 * Checks for binary data.
 *
 * Supports Buffer, ArrayBuffer, Blob and File.
 *
 * @param {Object} anything
 * @api public
 */

function hasBinary(obj) {
  if (!obj || typeof obj !== 'object') {
    return false;
  }

  if (isArray(obj)) {
    for (var i = 0, l = obj.length; i < l; i++) {
      if (hasBinary(obj[i])) {
        return true;
      }
    }

    return false;
  }

  if (typeof Buffer === 'function' && Buffer.isBuffer && Buffer.isBuffer(obj) || typeof ArrayBuffer === 'function' && obj instanceof ArrayBuffer || withNativeBlob && obj instanceof Blob || withNativeFile && obj instanceof File) {
    return true;
  } // see: https://github.com/Automattic/has-binary/pull/4


  if (obj.toJSON && typeof obj.toJSON === 'function' && arguments.length === 1) {
    return hasBinary(obj.toJSON(), true);
  }

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {
      return true;
    }
  }

  return false;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 348 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split(''),
    length = 64,
    map = {},
    seed = 0,
    i = 0,
    prev;
/**
 * Return a string representing the specified number.
 *
 * @param {Number} num The number to convert.
 * @returns {String} The string representation of the number.
 * @api public
 */

function encode(num) {
  var encoded = '';

  do {
    encoded = alphabet[num % length] + encoded;
    num = Math.floor(num / length);
  } while (num > 0);

  return encoded;
}
/**
 * Return the integer value specified by the given string.
 *
 * @param {String} str The string to convert.
 * @returns {Number} The integer value represented by the string.
 * @api public
 */


function decode(str) {
  var decoded = 0;

  for (i = 0; i < str.length; i++) {
    decoded = decoded * length + map[str.charAt(i)];
  }

  return decoded;
}
/**
 * Yeast: A tiny growing id generator.
 *
 * @returns {String} A unique id.
 * @api public
 */


function yeast() {
  var now = encode(+new Date());
  if (now !== prev) return seed = 0, prev = now;
  return now + '.' + encode(seed++);
} //
// Map each character to its index.
//


for (; i < length; i++) map[alphabet[i]] = i; //
// Expose the `yeast`, `encode` and `decode` functions.
//


yeast.encode = encode;
yeast.decode = decode;
module.exports = yeast;

/***/ }),
/* 349 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var indexOf = [].indexOf;

module.exports = function (arr, obj) {
  if (indexOf) return arr.indexOf(obj);

  for (var i = 0; i < arr.length; ++i) {
    if (arr[i] === obj) return i;
  }

  return -1;
};

/***/ }),
/* 350 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Module dependencies.
 */
var parser = __webpack_require__(185);

var Emitter = __webpack_require__(70);

var toArray = __webpack_require__(887);

var on = __webpack_require__(351);

var bind = __webpack_require__(352);

var debug = __webpack_require__(1)('socket.io-client:socket');

var parseqs = __webpack_require__(118);

var hasBin = __webpack_require__(347);
/**
 * Module exports.
 */


module.exports = exports = Socket;
/**
 * Internal events (blacklisted).
 * These events can't be emitted by the user.
 *
 * @api private
 */

var events = {
  connect: 1,
  connect_error: 1,
  connect_timeout: 1,
  connecting: 1,
  disconnect: 1,
  error: 1,
  reconnect: 1,
  reconnect_attempt: 1,
  reconnect_failed: 1,
  reconnect_error: 1,
  reconnecting: 1,
  ping: 1,
  pong: 1
};
/**
 * Shortcut to `Emitter#emit`.
 */

var emit = Emitter.prototype.emit;
/**
 * `Socket` constructor.
 *
 * @api public
 */

function Socket(io, nsp, opts) {
  this.io = io;
  this.nsp = nsp;
  this.json = this; // compat

  this.ids = 0;
  this.acks = {};
  this.receiveBuffer = [];
  this.sendBuffer = [];
  this.connected = false;
  this.disconnected = true;
  this.flags = {};

  if (opts && opts.query) {
    this.query = opts.query;
  }

  if (this.io.autoConnect) this.open();
}
/**
 * Mix in `Emitter`.
 */


Emitter(Socket.prototype);
/**
 * Subscribe to open, close and packet events
 *
 * @api private
 */

Socket.prototype.subEvents = function () {
  if (this.subs) return;
  var io = this.io;
  this.subs = [on(io, 'open', bind(this, 'onopen')), on(io, 'packet', bind(this, 'onpacket')), on(io, 'close', bind(this, 'onclose'))];
};
/**
 * "Opens" the socket.
 *
 * @api public
 */


Socket.prototype.open = Socket.prototype.connect = function () {
  if (this.connected) return this;
  this.subEvents();
  this.io.open(); // ensure open

  if ('open' === this.io.readyState) this.onopen();
  this.emit('connecting');
  return this;
};
/**
 * Sends a `message` event.
 *
 * @return {Socket} self
 * @api public
 */


Socket.prototype.send = function () {
  var args = toArray(arguments);
  args.unshift('message');
  this.emit.apply(this, args);
  return this;
};
/**
 * Override `emit`.
 * If the event is in `events`, it's emitted normally.
 *
 * @param {String} event name
 * @return {Socket} self
 * @api public
 */


Socket.prototype.emit = function (ev) {
  if (events.hasOwnProperty(ev)) {
    emit.apply(this, arguments);
    return this;
  }

  var args = toArray(arguments);
  var packet = {
    type: (this.flags.binary !== undefined ? this.flags.binary : hasBin(args)) ? parser.BINARY_EVENT : parser.EVENT,
    data: args
  };
  packet.options = {};
  packet.options.compress = !this.flags || false !== this.flags.compress; // event ack callback

  if ('function' === typeof args[args.length - 1]) {
    debug('emitting packet with ack id %d', this.ids);
    this.acks[this.ids] = args.pop();
    packet.id = this.ids++;
  }

  if (this.connected) {
    this.packet(packet);
  } else {
    this.sendBuffer.push(packet);
  }

  this.flags = {};
  return this;
};
/**
 * Sends a packet.
 *
 * @param {Object} packet
 * @api private
 */


Socket.prototype.packet = function (packet) {
  packet.nsp = this.nsp;
  this.io.packet(packet);
};
/**
 * Called upon engine `open`.
 *
 * @api private
 */


Socket.prototype.onopen = function () {
  debug('transport is open - connecting'); // write connect packet if necessary

  if ('/' !== this.nsp) {
    if (this.query) {
      var query = typeof this.query === 'object' ? parseqs.encode(this.query) : this.query;
      debug('sending connect packet with query %s', query);
      this.packet({
        type: parser.CONNECT,
        query: query
      });
    } else {
      this.packet({
        type: parser.CONNECT
      });
    }
  }
};
/**
 * Called upon engine `close`.
 *
 * @param {String} reason
 * @api private
 */


Socket.prototype.onclose = function (reason) {
  debug('close (%s)', reason);
  this.connected = false;
  this.disconnected = true;
  delete this.id;
  this.emit('disconnect', reason);
};
/**
 * Called with socket packet.
 *
 * @param {Object} packet
 * @api private
 */


Socket.prototype.onpacket = function (packet) {
  var sameNamespace = packet.nsp === this.nsp;
  var rootNamespaceError = packet.type === parser.ERROR && packet.nsp === '/';
  if (!sameNamespace && !rootNamespaceError) return;

  switch (packet.type) {
    case parser.CONNECT:
      this.onconnect();
      break;

    case parser.EVENT:
      this.onevent(packet);
      break;

    case parser.BINARY_EVENT:
      this.onevent(packet);
      break;

    case parser.ACK:
      this.onack(packet);
      break;

    case parser.BINARY_ACK:
      this.onack(packet);
      break;

    case parser.DISCONNECT:
      this.ondisconnect();
      break;

    case parser.ERROR:
      this.emit('error', packet.data);
      break;
  }
};
/**
 * Called upon a server event.
 *
 * @param {Object} packet
 * @api private
 */


Socket.prototype.onevent = function (packet) {
  var args = packet.data || [];
  debug('emitting event %j', args);

  if (null != packet.id) {
    debug('attaching ack callback to event');
    args.push(this.ack(packet.id));
  }

  if (this.connected) {
    emit.apply(this, args);
  } else {
    this.receiveBuffer.push(args);
  }
};
/**
 * Produces an ack callback to emit with an event.
 *
 * @api private
 */


Socket.prototype.ack = function (id) {
  var self = this;
  var sent = false;
  return function () {
    // prevent double callbacks
    if (sent) return;
    sent = true;
    var args = toArray(arguments);
    debug('sending ack %j', args);
    self.packet({
      type: hasBin(args) ? parser.BINARY_ACK : parser.ACK,
      id: id,
      data: args
    });
  };
};
/**
 * Called upon a server acknowlegement.
 *
 * @param {Object} packet
 * @api private
 */


Socket.prototype.onack = function (packet) {
  var ack = this.acks[packet.id];

  if ('function' === typeof ack) {
    debug('calling ack %s with %j', packet.id, packet.data);
    ack.apply(this, packet.data);
    delete this.acks[packet.id];
  } else {
    debug('bad ack %s', packet.id);
  }
};
/**
 * Called upon server connect.
 *
 * @api private
 */


Socket.prototype.onconnect = function () {
  this.connected = true;
  this.disconnected = false;
  this.emit('connect');
  this.emitBuffered();
};
/**
 * Emit buffered events (received and emitted).
 *
 * @api private
 */


Socket.prototype.emitBuffered = function () {
  var i;

  for (i = 0; i < this.receiveBuffer.length; i++) {
    emit.apply(this, this.receiveBuffer[i]);
  }

  this.receiveBuffer = [];

  for (i = 0; i < this.sendBuffer.length; i++) {
    this.packet(this.sendBuffer[i]);
  }

  this.sendBuffer = [];
};
/**
 * Called upon server disconnect.
 *
 * @api private
 */


Socket.prototype.ondisconnect = function () {
  debug('server disconnect (%s)', this.nsp);
  this.destroy();
  this.onclose('io server disconnect');
};
/**
 * Called upon forced client/server side disconnections,
 * this method ensures the manager stops tracking us and
 * that reconnections don't get triggered for this.
 *
 * @api private.
 */


Socket.prototype.destroy = function () {
  if (this.subs) {
    // clean subscriptions to avoid reconnections
    for (var i = 0; i < this.subs.length; i++) {
      this.subs[i].destroy();
    }

    this.subs = null;
  }

  this.io.destroy(this);
};
/**
 * Disconnects the socket manually.
 *
 * @return {Socket} self
 * @api public
 */


Socket.prototype.close = Socket.prototype.disconnect = function () {
  if (this.connected) {
    debug('performing disconnect (%s)', this.nsp);
    this.packet({
      type: parser.DISCONNECT
    });
  } // remove socket from pool


  this.destroy();

  if (this.connected) {
    // fire events
    this.onclose('io client disconnect');
  }

  return this;
};
/**
 * Sets the compress flag.
 *
 * @param {Boolean} if `true`, compresses the sending data
 * @return {Socket} self
 * @api public
 */


Socket.prototype.compress = function (compress) {
  this.flags.compress = compress;
  return this;
};
/**
 * Sets the binary flag
 *
 * @param {Boolean} whether the emitted data contains binary
 * @return {Socket} self
 * @api public
 */


Socket.prototype.binary = function (binary) {
  this.flags.binary = binary;
  return this;
};

/***/ }),
/* 351 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Module exports.
 */
module.exports = on;
/**
 * Helper for subscriptions.
 *
 * @param {Object|EventEmitter} obj with `Emitter` mixin or `EventEmitter`
 * @param {String} event name
 * @param {Function} callback
 * @api public
 */

function on(obj, ev, fn) {
  obj.on(ev, fn);
  return {
    destroy: function destroy() {
      obj.removeListener(ev, fn);
    }
  };
}

/***/ }),
/* 352 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Slice reference.
 */
var slice = [].slice;
/**
 * Bind `obj` to `fn`.
 *
 * @param {Object} obj
 * @param {Function|String} fn or string
 * @return {Function}
 * @api public
 */

module.exports = function (obj, fn) {
  if ('string' == typeof fn) fn = obj[fn];
  if ('function' != typeof fn) throw new Error('bind() requires a function');
  var args = slice.call(arguments, 2);
  return function () {
    return fn.apply(obj, args.concat(slice.call(arguments)));
  };
};

/***/ }),
/* 353 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const abortable = __webpack_require__(338);

const toIterable = __webpack_require__(889);

const {
  CLOSE_TIMEOUT
} = __webpack_require__(184);

const toMultiaddr = __webpack_require__(331);

const debug = __webpack_require__(1);

const log = debug('libp2p:webrtc-star:socket');
log.error = debug('libp2p:webrtc-star:socket:error'); // Convert a socket into a MultiaddrConnection
// https://github.com/libp2p/interface-transport#multiaddrconnection

module.exports = (socket, options = {}) => {
  const {
    sink,
    source
  } = toIterable.duplex(socket);
  const maConn = {
    async sink(source) {
      if (options.signal) {
        source = abortable(source, options.signal);
      }

      try {
        await sink(_wrapAsyncGenerator(function* () {
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;

          var _iteratorError;

          try {
            for (var _iterator = _asyncIterator(source), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
              const chunk = _value;
              // Convert BufferList to Buffer
              yield Buffer.isBuffer(chunk) ? chunk : chunk.slice();
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return != null) {
                yield _awaitAsyncGenerator(_iterator.return());
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        })());
      } catch (err) {
        // If aborted we can safely ignore
        if (err.type !== 'aborted') {
          // If the source errored the socket will already have been destroyed by
          // toIterable.duplex(). If the socket errored it will already be
          // destroyed. There's nothing to do here except log the error & return.
          log.error(err);
        }
      }
    },

    source: options.signal ? abortable(source, options.signal) : source,
    conn: socket,
    localAddr: socket.localAddress && socket.localPort ? toMultiaddr(socket.localAddress, socket.localPort) : undefined,
    // If the remote address was passed, use it - it may have the peer ID encapsulated
    remoteAddr: options.remoteAddr || (socket.remoteAddress && socket.remotePort ? toMultiaddr(socket.remoteAddress, socket.remotePort) : undefined),
    timeline: {
      open: Date.now()
    },

    close() {
      if (socket.destroyed) return;
      return new Promise((resolve, reject) => {
        const start = Date.now(); // Attempt to end the socket. If it takes longer to close than the
        // timeout, destroy it manually.

        const timeout = setTimeout(() => {
          if (maConn.remoteAddr) {
            const {
              host,
              port
            } = maConn.remoteAddr.toOptions();
            log('timeout closing socket to %s:%s after %dms, destroying it manually', host, port, Date.now() - start);
          }

          if (!socket.destroyed) {
            socket.destroy();
          }
        }, CLOSE_TIMEOUT);
        socket.once('close', () => {
          resolve();
        });
        socket.end(err => {
          clearTimeout(timeout);
          maConn.timeline.close = Date.now();
          if (err) return reject(err);
        });
      });
    }

  };
  socket.once('close', () => {
    // In instances where `close` was not explicitly called,
    // such as an iterable stream ending, ensure we have set the close
    // timeline
    if (!maConn.timeline.close) {
      maConn.timeline.close = Date.now();
    }
  });
  return maConn;
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 354 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const getIterator = __webpack_require__(87);

const defer = __webpack_require__(69);

module.exports = writable => async source => {
  source = getIterator(source);
  const errPromise = defer();
  const closePromise = defer();
  const endingPromise = defer();
  const finishPromise = defer();
  let drainPromise;

  const errorHandler = err => errPromise.reject(err);

  const closeHandler = () => closePromise.resolve({
    closed: true
  });

  const finishHandler = () => finishPromise.resolve({
    finished: true
  });

  const drainHandler = () => {
    if (drainPromise) drainPromise.resolve({
      drained: true
    });
  }; // There's no event to determine the start of a call to .end()


  const _end = writable.end.bind(writable);

  writable.end = (...args) => {
    endingPromise.resolve({
      ending: true
    });
    return _end(...args);
  };

  writable.on('error', errorHandler).on('close', closeHandler).on('finish', finishHandler).on('drain', drainHandler);

  const getNext = async () => {
    try {
      return source.next();
    } catch (err) {
      writable.destroy(err);
      return errPromise.promise;
    }
  };

  try {
    while (true) {
      // Race the iterator and the error, close and finish listener
      const result = await Promise.race([errPromise.promise, closePromise.promise, endingPromise.promise, finishPromise.promise, getNext()]);

      if (result.closed || result.finished) {
        break;
      } // .end() was called, waiting on flush (finish event)


      if (result.ending) {
        await Promise.race([errPromise.promise, // TODO: do we need to wait on close? If slow end and destroy is
        // called then what is emitted? close or finish?
        closePromise.promise, finishPromise.promise]);
        break;
      } // If destroyed, race err & close to determine reason & then throw/break


      if (writable.destroyed) {
        await Promise.race([errPromise.promise, closePromise.promise]);
        break;
      }

      if (result.done) {
        writable.end();
        await Promise.race([errPromise.promise, // TODO: do we need to wait on close? If slow end and destroy is
        // called then what is emitted? close or finish?
        closePromise.promise, finishPromise.promise]);
        break;
      }

      if (!writable.write(result.value)) {
        drainPromise = defer();
        await Promise.race([errPromise.promise, closePromise.promise, finishPromise.promise, drainPromise.promise]);
      }
    }
  } finally {
    writable.removeListener('error', errorHandler).removeListener('close', closeHandler).removeListener('finish', finishHandler).removeListener('drain', drainHandler); // End the iterator if it is a generator

    if (typeof source.return === 'function') {
      await source.return();
    }
  }
};

/***/ }),
/* 355 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const toSink = __webpack_require__(354);

const toSource = __webpack_require__(90);

module.exports = duplex => ({
  sink: toSink(duplex),
  source: toSource(duplex)
});

/***/ }),
/* 356 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const multiaddr = __webpack_require__(20);

function cleanUrlSIO(ma) {
  const maStrSplit = ma.toString().split('/');
  const tcpProto = ma.protos()[1].name;
  const wsProto = ma.protos()[2].name;
  const tcpPort = ma.stringTuples()[1][1];

  if (tcpProto !== 'tcp' || wsProto !== 'ws' && wsProto !== 'wss') {
    throw new Error('invalid multiaddr: ' + ma.toString());
  }

  if (!multiaddr.isName(ma)) {
    return 'http://' + maStrSplit[2] + ':' + maStrSplit[4];
  }

  if (wsProto === 'ws') {
    return 'http://' + maStrSplit[2] + (tcpPort === 80 ? '' : ':' + tcpPort);
  }

  if (wsProto === 'wss') {
    return 'https://' + maStrSplit[2] + (tcpPort === 443 ? '' : ':' + tcpPort);
  }
}

function cleanMultiaddr(maStr) {
  const legacy = '/libp2p-webrtc-star';

  if (maStr.indexOf(legacy) !== -1) {
    maStr = maStr.substring(legacy.length, maStr.length);
    let ma = multiaddr(maStr);
    const tuppleIPFS = ma.stringTuples().filter(tupple => {
      return tupple[0] === 421; // ipfs code
    })[0];
    ma = ma.decapsulate('p2p');
    ma = ma.encapsulate('/p2p-webrtc-star');
    ma = ma.encapsulate("/p2p/".concat(tuppleIPFS[1]));
    maStr = ma.toString();
  }

  return maStr;
}

exports = module.exports;
exports.cleanUrlSIO = cleanUrlSIO;
exports.cleanMultiaddr = cleanMultiaddr;

/***/ }),
/* 357 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

const getIterator = __webpack_require__(87);

const AbortError = __webpack_require__(893); // Wrap an iterator to make it abortable, allow cleanup when aborted via onAbort


const toAbortableSource = (source, signal, options) => toMultiAbortableSource(source, Array.isArray(signal) ? signal : [{
  signal,
  options
}]);

const toMultiAbortableSource = (source, signals) => {
  source = getIterator(source);
  signals = signals.map(({
    signal,
    options
  }) => ({
    signal,
    options: options || {}
  }));

  function abortable() {
    return _abortable.apply(this, arguments);
  }

  function _abortable() {
    _abortable = _wrapAsyncGenerator(function* () {
      let nextAbortHandler;

      const abortHandler = () => {
        if (nextAbortHandler) nextAbortHandler();
      };

      for (const {
        signal
      } of signals) {
        signal.addEventListener('abort', abortHandler);
      }

      while (true) {
        let result;

        try {
          for (const {
            signal,
            options
          } of signals) {
            if (signal.aborted) {
              const {
                abortMessage,
                abortCode
              } = options;
              throw new AbortError(abortMessage, abortCode);
            }
          }

          const abort = new Promise((resolve, reject) => {
            nextAbortHandler = () => {
              const {
                options
              } = signals.find(({
                signal
              }) => signal.aborted);
              const {
                abortMessage,
                abortCode
              } = options;
              reject(new AbortError(abortMessage, abortCode));
            };
          }); // Race the iterator and the abort signals

          result = yield _awaitAsyncGenerator(Promise.race([abort, source.next()]));
          nextAbortHandler = null;
        } catch (err) {
          for (const {
            signal
          } of signals) {
            signal.removeEventListener('abort', abortHandler);
          } // Might not have been aborted by a known signal


          const aborter = signals.find(({
            signal
          }) => signal.aborted);
          const isKnownAborter = err.type === 'aborted' && aborter;

          if (isKnownAborter && aborter.options.onAbort) {
            // Do any custom abort handling for the iterator
            yield _awaitAsyncGenerator(aborter.options.onAbort(source));
          } // End the iterator if it is a generator


          if (typeof source.return === 'function') {
            yield _awaitAsyncGenerator(source.return());
          }

          if (isKnownAborter && aborter.options.returnOnAbort) {
            return;
          }

          throw err;
        }

        if (result.done) break;
        yield result.value;
      }

      for (const {
        signal
      } of signals) {
        signal.removeEventListener('abort', abortHandler);
      }
    });
    return _abortable.apply(this, arguments);
  }

  return abortable();
};

const toAbortableSink = (sink, signal, options) => toMultiAbortableSink(sink, Array.isArray(signal) ? signal : [{
  signal,
  options
}]);

const toMultiAbortableSink = (sink, signals) => source => sink(toMultiAbortableSource(source, signals));

const toAbortableDuplex = (duplex, signal, options) => toMultiAbortableDuplex(duplex, Array.isArray(signal) ? signal : [{
  signal,
  options
}]);

const toMultiAbortableDuplex = (duplex, signals) => ({
  sink: toMultiAbortableSink(duplex.sink, signals),
  source: toMultiAbortableSource(duplex.source, signals)
});

module.exports = toAbortableSource;
module.exports.AbortError = AbortError;
module.exports.source = toAbortableSource;
module.exports.sink = toAbortableSink;
module.exports.transform = toAbortableSink;
module.exports.duplex = toAbortableDuplex;

/***/ }),
/* 358 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const DuplexStream = __webpack_require__(163).Duplex;

const util = __webpack_require__(98);

const BufferList = __webpack_require__(30);

function BufferListStream(callback) {
  if (!(this instanceof BufferListStream)) {
    return new BufferListStream(callback);
  }

  if (typeof callback === 'function') {
    this._callback = callback;

    const piper = function piper(err) {
      if (this._callback) {
        this._callback(err);

        this._callback = null;
      }
    }.bind(this);

    this.on('pipe', function onPipe(src) {
      src.on('error', piper);
    });
    this.on('unpipe', function onUnpipe(src) {
      src.removeListener('error', piper);
    });
    callback = null;
  }

  BufferList._init.call(this, callback);

  DuplexStream.call(this);
}

util.inherits(BufferListStream, DuplexStream);
Object.assign(BufferListStream.prototype, BufferList.prototype);

BufferListStream.prototype._new = function _new(callback) {
  return new BufferListStream(callback);
};

BufferListStream.prototype._write = function _write(buf, encoding, callback) {
  this._appendBuffer(buf);

  if (typeof callback === 'function') {
    callback();
  }
};

BufferListStream.prototype._read = function _read(size) {
  if (!this.length) {
    return this.push(null);
  }

  size = Math.min(size, this.length);
  this.push(this.slice(0, size));
  this.consume(size);
};

BufferListStream.prototype.end = function end(chunk) {
  DuplexStream.prototype.end.call(this, chunk);

  if (this._callback) {
    this._callback(null, this.slice());

    this._callback = null;
  }
};

BufferListStream.prototype._destroy = function _destroy(err, cb) {
  this._bufs.length = 0;
  this.length = 0;
  cb(err);
};

BufferListStream.prototype._isBufferList = function _isBufferList(b) {
  return b instanceof BufferListStream || b instanceof BufferList || BufferListStream.isBufferList(b);
};

BufferListStream.isBufferList = BufferList.isBufferList;
module.exports = BufferListStream;
module.exports.BufferListStream = BufferListStream;
module.exports.BufferList = BufferList;

/***/ }),
/* 359 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const MAX_MSG_SIZE = 1 << 20; // 1MB

/**
 * Creates an iterable transform that restricts message sizes to
 * the given maximum size.
 * @param {number} [max] The maximum message size. Defaults to 1MB
 * @returns {*} An iterable transform.
 */

module.exports = max => {
  max = max || MAX_MSG_SIZE;

  const checkSize = msg => {
    if (msg.data && msg.data.length > max) {
      throw Object.assign(new Error('message size too large!'), {
        code: 'ERR_MSG_TOO_BIG'
      });
    }
  };

  return source => {
    return function () {
      var _restrictSize = _wrapAsyncGenerator(function* () {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;

        var _iteratorError;

        try {
          for (var _iterator = _asyncIterator(source), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
            const msg = _value;

            if (Array.isArray(msg)) {
              msg.forEach(checkSize);
            } else {
              checkSize(msg);
            }

            yield msg;
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              yield _awaitAsyncGenerator(_iterator.return());
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      });

      function restrictSize() {
        return _restrictSize.apply(this, arguments);
      }

      return restrictSize;
    }()();
  };
};

module.exports.MAX_MSG_SIZE = MAX_MSG_SIZE;

/***/ }),
/* 360 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const MessageTypes = Object.freeze({
  NEW_STREAM: 0,
  MESSAGE_RECEIVER: 1,
  MESSAGE_INITIATOR: 2,
  CLOSE_RECEIVER: 3,
  CLOSE_INITIATOR: 4,
  RESET_RECEIVER: 5,
  RESET_INITIATOR: 6
});
exports.MessageTypes = MessageTypes;
exports.InitiatorMessageTypes = Object.freeze({
  NEW_STREAM: MessageTypes.NEW_STREAM,
  MESSAGE: MessageTypes.MESSAGE_INITIATOR,
  CLOSE: MessageTypes.CLOSE_INITIATOR,
  RESET: MessageTypes.RESET_INITIATOR
});
exports.ReceiverMessageTypes = Object.freeze({
  MESSAGE: MessageTypes.MESSAGE_RECEIVER,
  CLOSE: MessageTypes.CLOSE_RECEIVER,
  RESET: MessageTypes.RESET_RECEIVER
});
exports.MessageTypeNames = Object.freeze(Object.entries(MessageTypes).reduce((obj, e) => {
  obj[e[1]] = e[0];
  return obj;
}, {}));

/***/ }),
/* 361 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const Shake = __webpack_require__(86);

const lp = __webpack_require__(26);

module.exports = (duplex, opts = {}) => {
  const shake = Shake(duplex);
  const lpReader = lp.decode.fromReader(shake.reader, {
    lengthDecoder: opts.lengthDecoder
  });
  let isDone = false;
  const W = {
    read: async bytes => {
      // just read
      const {
        value,
        done
      } = await shake.reader.next(bytes);

      if (done && value.length < bytes) {
        throw new Error('Couldn\'t read enough bytes');
      }

      isDone = done;

      if (!value) {
        throw new Error('Value is null');
      }

      return value;
    },
    readLP: async () => {
      // read, decode
      const {
        value,
        done
      } = await lpReader.next();
      isDone = done;

      if (!value) {
        throw new Error('Value is null');
      }

      return value;
    },
    readPB: async proto => {
      // readLP, decode
      const {
        value,
        done
      } = await W.readLP();
      isDone = done;

      if (!value) {
        throw new Error('Value is null');
      }

      return proto.decode(value);
    },
    write: data => {
      // just write
      shake.writer.push(data);
    },
    writeLP: data => {
      // encode, write
      W.write(lp.encode.single(data, {
        lengthEncoder: opts.lengthEncoder
      }));
    },
    writePB: (data, proto) => {
      // encode, writeLP
      W.writeLP(proto.encode(data));
    },
    pb: proto => {
      return {
        read: () => W.readPB(proto),
        write: d => W.writePB(d, proto)
      };
    },
    unwrap: () => {
      // returns vanilla duplex again, terminates all reads/writes from this object
      shake.rest();
      return shake.stream;
    }
  };
  return W;
};

/***/ }),
/* 362 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(setImmediate, process) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hasNextTick = exports.hasSetImmediate = undefined;
exports.fallback = fallback;
exports.wrap = wrap;

var _slice = __webpack_require__(363);

var _slice2 = _interopRequireDefault(_slice);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

var hasSetImmediate = exports.hasSetImmediate = typeof setImmediate === 'function' && setImmediate;
var hasNextTick = exports.hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';

function fallback(fn) {
  setTimeout(fn, 0);
}

function wrap(defer) {
  return function (fn
  /*, ...args*/
  ) {
    var args = (0, _slice2.default)(arguments, 1);
    defer(function () {
      fn.apply(null, args);
    });
  };
}

var _defer;

if (hasSetImmediate) {
  _defer = setImmediate;
} else if (hasNextTick) {
  _defer = process.nextTick;
} else {
  _defer = fallback;
}

exports.default = wrap(_defer);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(91).setImmediate, __webpack_require__(5)))

/***/ }),
/* 363 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = slice;

function slice(arrayLike, start) {
  start = start | 0;
  var newLen = Math.max(arrayLike.length - start, 0);
  var newArr = Array(newLen);

  for (var idx = 0; idx < newLen; idx++) {
    newArr[idx] = arrayLike[start + idx];
  }

  return newArr;
}

module.exports = exports["default"];

/***/ }),
/* 364 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isAsync = undefined;

var _asyncify = __webpack_require__(941);

var _asyncify2 = _interopRequireDefault(_asyncify);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

var supportsSymbol = typeof Symbol === 'function';

function isAsync(fn) {
  return supportsSymbol && fn[Symbol.toStringTag] === 'AsyncFunction';
}

function wrapAsync(asyncFn) {
  return isAsync(asyncFn) ? (0, _asyncify2.default)(asyncFn) : asyncFn;
}

exports.default = wrapAsync;
exports.isAsync = isAsync;

/***/ }),
/* 365 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const ipns = __webpack_require__(84);

const {
  fromB58String,
  toB58String
} = __webpack_require__(16);

const PubsubDatastore = __webpack_require__(960);

const withIs = __webpack_require__(21);

const errcode = __webpack_require__(2);

const debug = __webpack_require__(1);

const log = debug('ipfs:ipns:pubsub');
log.error = debug('ipfs:ipns:pubsub:error'); // Pubsub datastore aims to manage the pubsub subscriptions for IPNS

class IpnsPubsubDatastore {
  constructor(pubsub, localDatastore, peerId) {
    this._pubsub = pubsub;
    this._subscriptions = {}; // Bind _handleSubscriptionKey function, which is called by PubsubDatastore.

    this._handleSubscriptionKey = this._handleSubscriptionKey.bind(this);
    this._pubsubDs = new PubsubDatastore(pubsub, localDatastore, peerId, ipns.validator, this._handleSubscriptionKey);
  }
  /**
   * Put a value to the pubsub datastore indexed by the received key properly encoded.
   * @param {Buffer} key identifier of the value.
   * @param {Buffer} value value to be stored.
   * @param {function(Error)} callback
   * @returns {void}
   */


  async put(key, value) {
    // eslint-disable-line require-await
    return this._pubsubDs.put(key, value);
  }
  /**
   * Get a value from the pubsub datastore indexed by the received key properly encoded.
   * Also, the identifier topic is subscribed to and the pubsub datastore records will be
   * updated once new publishes occur.
   * @param {Buffer} key identifier of the value to be obtained.
   * @param {function(Error, Buffer)} callback
   * @returns {void}
   */


  async get(key) {
    let res;
    let err;

    try {
      res = await this._pubsubDs.get(key);
    } catch (e) {
      err = e;
    } // Add topic subscribed


    const ns = key.slice(0, ipns.namespaceLength);

    if (ns.toString() === ipns.namespace) {
      const stringifiedTopic = toB58String(key);
      const id = toB58String(key.slice(ipns.namespaceLength));
      this._subscriptions[stringifiedTopic] = id;
      log("subscribed to pubsub topic ".concat(stringifiedTopic, ", id ").concat(id));
    } // If no data was obtained, after storing the subscription, return the error.


    if (err) {
      throw err;
    }

    return res;
  } // Modify subscription key to have a proper encoding


  _handleSubscriptionKey(key) {
    if (Buffer.isBuffer(key)) {
      key = toB58String(key);
    }

    const subscriber = this._subscriptions[key];

    if (!subscriber) {
      throw errcode(new Error("key ".concat(key, " does not correspond to a subscription")), 'ERR_INVALID_KEY');
    }

    let keys;

    try {
      keys = ipns.getIdKeys(fromB58String(subscriber));
    } catch (err) {
      log.error(err);
      throw err;
    }

    return keys.routingKey.toBuffer();
  }
  /**
   * Get pubsub subscriptions related to ipns.
   * @param {function(Error, Object)} callback
   * @returns {Array<Object>}
   */


  getSubscriptions() {
    const subscriptions = Object.values(this._subscriptions).filter(Boolean);
    return subscriptions.map(sub => "".concat(ipns.namespace).concat(sub));
  }
  /**
   * Cancel pubsub subscriptions related to ipns.
   * @param {String} name ipns path to cancel the pubsub subscription.
   * @param {function(Error, Object)} callback
   * @returns {void}
   */


  async cancel(name) {
    // eslint-disable-line require-await
    if (typeof name !== 'string') {
      throw errcode(new Error('invalid subscription name'), 'ERR_INVALID_SUBSCRIPTION_NAME');
    } // Trim /ipns/ prefix from the name


    if (name.startsWith(ipns.namespace)) {
      name = name.substring(ipns.namespaceLength);
    }

    const stringifiedTopic = Object.keys(this._subscriptions).find(key => this._subscriptions[key] === name); // Not found topic

    if (!stringifiedTopic) {
      return {
        canceled: false
      };
    } // Unsubscribe topic


    const bufTopic = Buffer.from(stringifiedTopic);

    this._pubsubDs.unsubscribe(bufTopic);

    this._subscriptions[stringifiedTopic] = undefined;
    log("unsubscribed pubsub ".concat(stringifiedTopic, ": ").concat(name));
    return {
      canceled: true
    };
  }

}

exports = module.exports = withIs(IpnsPubsubDatastore, {
  className: 'IpnsPubsubDatastore',
  symbolName: '@js-ipfs/ipns/IpnsPubsubDatastore'
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 366 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = debounce;

function debounce(fn, wait, callFirst) {
  var timeout;
  return function () {
    if (!wait) {
      return fn.apply(this, arguments);
    }

    var context = this;
    var args = arguments;
    var callNow = callFirst && !timeout;
    clearTimeout(timeout);
    timeout = setTimeout(function () {
      timeout = null;

      if (!callNow) {
        return fn.apply(context, args);
      }
    }, wait);

    if (callNow) {
      return fn.apply(this, arguments);
    }
  };
}

/***/ }),
/* 367 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(368);


/***/ }),
/* 368 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const IPFS = __webpack_require__(369);

module.exports = IPFS;

/***/ }),
/* 369 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const log = __webpack_require__(1)('ipfs');

const mergeOptions = __webpack_require__(27);

const {
  isTest
} = __webpack_require__(372);

const globSource = __webpack_require__(374);

const urlSource = __webpack_require__(375);

const {
  Buffer
} = __webpack_require__(0);

const PeerId = __webpack_require__(9);

const PeerInfo = __webpack_require__(17);

const crypto = __webpack_require__(28);

const isIPFS = __webpack_require__(55);

const multiaddr = __webpack_require__(20);

const multihash = __webpack_require__(16);

const multibase = __webpack_require__(53);

const multicodec = __webpack_require__(15);

const multihashing = __webpack_require__(22);

const CID = __webpack_require__(3);

const {
  NotInitializedError
} = __webpack_require__(79);

const Components = __webpack_require__(101);

const ApiManager = __webpack_require__(1009);

const getDefaultOptions = () => ({
  init: true,
  start: true,
  EXPERIMENTAL: {},
  preload: {
    enabled: !isTest,
    // preload by default, unless in test env
    addresses: ['/dns4/node0.preload.ipfs.io/https', '/dns4/node1.preload.ipfs.io/https']
  }
});

async function create(options) {
  options = mergeOptions(getDefaultOptions(), options); // eslint-disable-next-line no-console

  const print = options.silent ? log : console.log;
  const apiManager = new ApiManager();
  const {
    api
  } = apiManager.update({
    init: Components.init({
      apiManager,
      print,
      options
    }),
    dns: Components.dns(),
    isOnline: Components.isOnline({})
  }, async () => {
    throw new NotInitializedError();
  }); // eslint-disable-line require-await

  if (!options.init) {
    return api;
  }

  await api.init();

  if (!options.start) {
    return api;
  }

  return api.start();
}

module.exports = {
  create,
  crypto,
  isIPFS,
  Buffer,
  CID,
  multiaddr,
  multibase,
  multihash,
  multihashing,
  multicodec,
  PeerId,
  PeerInfo,
  globSource,
  urlSource
};

/***/ }),
/* 370 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */
function setup(env) {
  createDebug.debug = createDebug;
  createDebug.default = createDebug;
  createDebug.coerce = coerce;
  createDebug.disable = disable;
  createDebug.enable = enable;
  createDebug.enabled = enabled;
  createDebug.humanize = __webpack_require__(371);
  Object.keys(env).forEach(key => {
    createDebug[key] = env[key];
  });
  /**
  * Active `debug` instances.
  */

  createDebug.instances = [];
  /**
  * The currently active debug mode names, and names to skip.
  */

  createDebug.names = [];
  createDebug.skips = [];
  /**
  * Map of special "%n" handling functions, for the debug "format" argument.
  *
  * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
  */

  createDebug.formatters = {};
  /**
  * Selects a color for a debug namespace
  * @param {String} namespace The namespace string for the for the debug instance to be colored
  * @return {Number|String} An ANSI color code for the given namespace
  * @api private
  */

  function selectColor(namespace) {
    let hash = 0;

    for (let i = 0; i < namespace.length; i++) {
      hash = (hash << 5) - hash + namespace.charCodeAt(i);
      hash |= 0; // Convert to 32bit integer
    }

    return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
  }

  createDebug.selectColor = selectColor;
  /**
  * Create a debugger with the given `namespace`.
  *
  * @param {String} namespace
  * @return {Function}
  * @api public
  */

  function createDebug(namespace) {
    let prevTime;

    function debug(...args) {
      // Disabled?
      if (!debug.enabled) {
        return;
      }

      const self = debug; // Set `diff` timestamp

      const curr = Number(new Date());
      const ms = curr - (prevTime || curr);
      self.diff = ms;
      self.prev = prevTime;
      self.curr = curr;
      prevTime = curr;
      args[0] = createDebug.coerce(args[0]);

      if (typeof args[0] !== 'string') {
        // Anything else let's inspect with %O
        args.unshift('%O');
      } // Apply any `formatters` transformations


      let index = 0;
      args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
        // If we encounter an escaped % then don't increase the array index
        if (match === '%%') {
          return match;
        }

        index++;
        const formatter = createDebug.formatters[format];

        if (typeof formatter === 'function') {
          const val = args[index];
          match = formatter.call(self, val); // Now we need to remove `args[index]` since it's inlined in the `format`

          args.splice(index, 1);
          index--;
        }

        return match;
      }); // Apply env-specific formatting (colors, etc.)

      createDebug.formatArgs.call(self, args);
      const logFn = self.log || createDebug.log;
      logFn.apply(self, args);
    }

    debug.namespace = namespace;
    debug.enabled = createDebug.enabled(namespace);
    debug.useColors = createDebug.useColors();
    debug.color = selectColor(namespace);
    debug.destroy = destroy;
    debug.extend = extend; // Debug.formatArgs = formatArgs;
    // debug.rawLog = rawLog;
    // env-specific initialization logic for debug instances

    if (typeof createDebug.init === 'function') {
      createDebug.init(debug);
    }

    createDebug.instances.push(debug);
    return debug;
  }

  function destroy() {
    const index = createDebug.instances.indexOf(this);

    if (index !== -1) {
      createDebug.instances.splice(index, 1);
      return true;
    }

    return false;
  }

  function extend(namespace, delimiter) {
    const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
    newDebug.log = this.log;
    return newDebug;
  }
  /**
  * Enables a debug mode by namespaces. This can include modes
  * separated by a colon and wildcards.
  *
  * @param {String} namespaces
  * @api public
  */


  function enable(namespaces) {
    createDebug.save(namespaces);
    createDebug.names = [];
    createDebug.skips = [];
    let i;
    const split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
    const len = split.length;

    for (i = 0; i < len; i++) {
      if (!split[i]) {
        // ignore empty strings
        continue;
      }

      namespaces = split[i].replace(/\*/g, '.*?');

      if (namespaces[0] === '-') {
        createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
      } else {
        createDebug.names.push(new RegExp('^' + namespaces + '$'));
      }
    }

    for (i = 0; i < createDebug.instances.length; i++) {
      const instance = createDebug.instances[i];
      instance.enabled = createDebug.enabled(instance.namespace);
    }
  }
  /**
  * Disable debug output.
  *
  * @return {String} namespaces
  * @api public
  */


  function disable() {
    const namespaces = [...createDebug.names.map(toNamespace), ...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)].join(',');
    createDebug.enable('');
    return namespaces;
  }
  /**
  * Returns true if the given mode name is enabled, false otherwise.
  *
  * @param {String} name
  * @return {Boolean}
  * @api public
  */


  function enabled(name) {
    if (name[name.length - 1] === '*') {
      return true;
    }

    let i;
    let len;

    for (i = 0, len = createDebug.skips.length; i < len; i++) {
      if (createDebug.skips[i].test(name)) {
        return false;
      }
    }

    for (i = 0, len = createDebug.names.length; i < len; i++) {
      if (createDebug.names[i].test(name)) {
        return true;
      }
    }

    return false;
  }
  /**
  * Convert regexp to namespace
  *
  * @param {RegExp} regxep
  * @return {String} namespace
  * @api private
  */


  function toNamespace(regexp) {
    return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, '*');
  }
  /**
  * Coerce `val`.
  *
  * @param {Mixed} val
  * @return {Mixed}
  * @api private
  */


  function coerce(val) {
    if (val instanceof Error) {
      return val.stack || val.message;
    }

    return val;
  }

  createDebug.enable(createDebug.load());
  return createDebug;
}

module.exports = setup;

/***/ }),
/* 371 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Helpers.
 */
var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var w = d * 7;
var y = d * 365.25;
/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function (val, options) {
  options = options || {};
  var type = typeof val;

  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isFinite(val)) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }

  throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
};
/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */


function parse(str) {
  str = String(str);

  if (str.length > 100) {
    return;
  }

  var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);

  if (!match) {
    return;
  }

  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();

  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;

    case 'weeks':
    case 'week':
    case 'w':
      return n * w;

    case 'days':
    case 'day':
    case 'd':
      return n * d;

    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;

    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;

    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;

    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;

    default:
      return undefined;
  }
}
/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */


function fmtShort(ms) {
  var msAbs = Math.abs(ms);

  if (msAbs >= d) {
    return Math.round(ms / d) + 'd';
  }

  if (msAbs >= h) {
    return Math.round(ms / h) + 'h';
  }

  if (msAbs >= m) {
    return Math.round(ms / m) + 'm';
  }

  if (msAbs >= s) {
    return Math.round(ms / s) + 's';
  }

  return ms + 'ms';
}
/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */


function fmtLong(ms) {
  var msAbs = Math.abs(ms);

  if (msAbs >= d) {
    return plural(ms, msAbs, d, 'day');
  }

  if (msAbs >= h) {
    return plural(ms, msAbs, h, 'hour');
  }

  if (msAbs >= m) {
    return plural(ms, msAbs, m, 'minute');
  }

  if (msAbs >= s) {
    return plural(ms, msAbs, s, 'second');
  }

  return ms + ' ms';
}
/**
 * Pluralization helper.
 */


function plural(ms, msAbs, n, name) {
  var isPlural = msAbs >= n * 1.5;
  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
}

/***/ }),
/* 372 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

const isElectron = __webpack_require__(373);

const IS_ENV_WITH_DOM = typeof window === 'object' && typeof document === 'object' && document.nodeType === 9;
const IS_ELECTRON = isElectron();
const IS_BROWSER = IS_ENV_WITH_DOM && !IS_ELECTRON;
const IS_ELECTRON_MAIN = IS_ELECTRON && !IS_ENV_WITH_DOM;
const IS_ELECTRON_RENDERER = IS_ELECTRON && IS_ENV_WITH_DOM;
const IS_NODE =  true && typeof process !== 'undefined' && typeof process.release !== 'undefined' && process.release.name === 'node' && !IS_ELECTRON; // eslint-disable-next-line no-undef

const IS_WEBWORKER = typeof importScripts === 'function' && typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope;
const IS_TEST = typeof process !== 'undefined' && typeof process.env !== 'undefined' && "production" === 'test';
module.exports = {
  isTest: IS_TEST,
  isElectron: IS_ELECTRON,
  isElectronMain: IS_ELECTRON_MAIN,
  isElectronRenderer: IS_ELECTRON_RENDERER,
  isNode: IS_NODE,

  /**
   * Detects browser main thread  **NOT** web worker or service worker
   */
  isBrowser: IS_BROWSER,
  isWebWorker: IS_WEBWORKER,
  isEnvWithDom: IS_ENV_WITH_DOM
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5)))

/***/ }),
/* 373 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

// https://github.com/electron/electron/issues/2288
function isElectron() {
  // Renderer process
  if (typeof window !== 'undefined' && typeof window.process === 'object' && window.process.type === 'renderer') {
    return true;
  } // Main process


  if (typeof process !== 'undefined' && typeof process.versions === 'object' && !!process.versions.electron) {
    return true;
  } // Detect the user agent when the `nodeIntegration` option is set to true


  if (typeof navigator === 'object' && typeof navigator.userAgent === 'string' && navigator.userAgent.indexOf('Electron') >= 0) {
    return true;
  }

  return false;
}

module.exports = isElectron;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5)))

/***/ }),
/* 374 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 375 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

const {
  default: ky
} = __webpack_require__(122);

const toIterable = __webpack_require__(90);

module.exports =
/*#__PURE__*/
function () {
  var _urlSource = _wrapAsyncGenerator(function* (url, options) {
    options = options || {};
    const {
      body
    } = yield _awaitAsyncGenerator(ky.get(url));
    yield {
      path: decodeURIComponent(new URL(url).pathname.split('/').pop() || ''),
      content: toIterable(body)
    };
  });

  function urlSource(_x, _x2) {
    return _urlSource.apply(this, arguments);
  }

  return urlSource;
}();

/***/ }),
/* 376 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TimeoutError = exports.HTTPError = exports.default = void 0;

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/*! MIT License © Sindre Sorhus */
const globals = {};
{
  const getGlobal = property => {
    let parent;
    /* istanbul ignore next */

    if (typeof self !== 'undefined' && self && property in self) {
      parent = self;
    }
    /* istanbul ignore next */


    if (typeof window !== 'undefined' && window && property in window) {
      parent = window;
    }

    if (typeof global !== 'undefined' && global && property in global) {
      parent = global;
    }
    /* istanbul ignore next */


    if (typeof globalThis !== 'undefined' && globalThis) {
      parent = globalThis;
    }

    if (typeof parent === 'undefined') {
      return;
    }

    const globalProperty = parent[property];

    if (typeof globalProperty === 'function') {
      return globalProperty.bind(parent);
    }

    return globalProperty;
  };

  const globalProperties = ['document', 'Headers', 'Request', 'Response', 'ReadableStream', 'fetch', 'AbortController', 'FormData'];
  const props = {};

  for (const property of globalProperties) {
    props[property] = {
      get() {
        return getGlobal(property);
      }

    };
  }

  Object.defineProperties(globals, props);
}

const isObject = value => value !== null && typeof value === 'object';

const supportsAbortController = typeof globals.AbortController === 'function';
const supportsStreams = typeof globals.ReadableStream === 'function';
const supportsFormData = typeof globals.FormData === 'function';

const deepMerge = (...sources) => {
  let returnValue = {};

  for (const source of sources) {
    if (Array.isArray(source)) {
      if (!Array.isArray(returnValue)) {
        returnValue = [];
      }

      returnValue = [...returnValue, ...source];
    } else if (isObject(source)) {
      for (let [key, value] of Object.entries(source)) {
        if (isObject(value) && Reflect.has(returnValue, key)) {
          value = deepMerge(returnValue[key], value);
        }

        returnValue = _objectSpread({}, returnValue, {
          [key]: value
        });
      }
    }
  }

  return returnValue;
};

const requestMethods = ['get', 'post', 'put', 'patch', 'head', 'delete'];
const responseTypes = {
  json: 'application/json',
  text: 'text/*',
  formData: 'multipart/form-data',
  arrayBuffer: '*/*',
  blob: '*/*'
};
const retryMethods = new Set(['get', 'put', 'head', 'delete', 'options', 'trace']);
const retryStatusCodes = new Set([408, 413, 429, 500, 502, 503, 504]);
const retryAfterStatusCodes = new Set([413, 429, 503]);

class HTTPError extends Error {
  constructor(response) {
    super(response.statusText);
    this.name = 'HTTPError';
    this.response = response;
  }

}

exports.HTTPError = HTTPError;

class TimeoutError extends Error {
  constructor() {
    super('Request timed out');
    this.name = 'TimeoutError';
  }

}

exports.TimeoutError = TimeoutError;

const safeTimeout = (resolve, reject, ms) => {
  if (ms > 2147483647) {
    // The maximum value of a 32bit int (see #117)
    reject(new RangeError('The `timeout` option cannot be greater than 2147483647'));
  }

  return setTimeout(resolve, ms);
};

const delay = ms => new Promise((resolve, reject) => safeTimeout(resolve, reject, ms)); // `Promise.race()` workaround (#91)


const timeout = (promise, ms, abortController) => new Promise((resolve, reject) => {
  const timeoutID = safeTimeout(() => {
    if (supportsAbortController) {
      abortController.abort();
    }

    reject(new TimeoutError());
  }, reject, ms);
  /* eslint-disable promise/prefer-await-to-then */

  promise.then(resolve).catch(reject).then(() => {
    clearTimeout(timeoutID);
  });
  /* eslint-enable promise/prefer-await-to-then */
});

const normalizeRequestMethod = input => requestMethods.includes(input) ? input.toUpperCase() : input;

const defaultRetryOptions = {
  limit: 2,
  methods: retryMethods,
  statusCodes: retryStatusCodes,
  afterStatusCodes: retryAfterStatusCodes
};

const normalizeRetryOptions = retry => {
  if (typeof retry === 'number') {
    return _objectSpread({}, defaultRetryOptions, {
      limit: retry
    });
  }

  if (retry.methods && !Array.isArray(retry.methods)) {
    throw new Error('retry.methods must be an array');
  }

  if (retry.statusCodes && !Array.isArray(retry.statusCodes)) {
    throw new Error('retry.statusCodes must be an array');
  }

  return _objectSpread({}, defaultRetryOptions, {}, retry, {
    methods: retry.methods ? new Set(retry.methods) : defaultRetryOptions.methods,
    statusCodes: retry.statusCodes ? new Set(retry.statusCodes) : defaultRetryOptions.statusCodes,
    afterStatusCodes: retryAfterStatusCodes
  });
};

class Ky {
  constructor(input, _ref) {
    let {
      timeout = 10000,
      hooks,
      throwHttpErrors = true,
      searchParams,
      json,
      retry = {}
    } = _ref,
        otherOptions = _objectWithoutProperties(_ref, ["timeout", "hooks", "throwHttpErrors", "searchParams", "json", "retry"]);

    this._retryCount = 0;
    this._options = _objectSpread({
      method: 'get',
      credentials: 'same-origin',
      // TODO: This can be removed when the spec change is implemented in all browsers. Context: https://www.chromestatus.com/feature/4539473312350208
      retry: normalizeRetryOptions(retry)
    }, otherOptions);

    if (input instanceof globals.Request) {
      this._input = input; // `ky` options have precedence over `Request` options

      this._options = _objectSpread({}, this._options, {
        method: otherOptions.method || input.method,
        headers: otherOptions.headers || input.headers,
        body: otherOptions.body || input.body,
        credentials: otherOptions.credentials || input.credentials
      });
    } else if (!(input instanceof URL) && typeof input !== 'string') {
      throw new TypeError('`input` must be a string, URL, or Request');
    } else {
      this._input = String(input || '');
      this._options.prefixUrl = String(this._options.prefixUrl || '');

      if (this._options.prefixUrl && this._input.startsWith('/')) {
        throw new Error('`input` must not begin with a slash when using `prefixUrl`');
      }

      if (this._options.prefixUrl && !this._options.prefixUrl.endsWith('/')) {
        this._options.prefixUrl += '/';
      }

      this._input = this._options.prefixUrl + this._input;

      if (searchParams) {
        const url = new URL(this._input, globals.document && globals.document.baseURI);

        if (typeof searchParams === 'string' || URLSearchParams && searchParams instanceof URLSearchParams) {
          url.search = searchParams;
        } else if (Object.values(searchParams).every(param => typeof param === 'number' || typeof param === 'string')) {
          url.search = new URLSearchParams(searchParams).toString();
        } else {
          throw new Error('The `searchParams` option must be either a string, `URLSearchParams` instance or an object with string and number values');
        }

        this._input = url.toString();
      }
    }

    if (supportsAbortController) {
      this.abortController = new globals.AbortController();

      if (this._options.signal) {
        this._options.signal.addEventListener('abort', () => {
          this.abortController.abort();
        });
      }

      this._options.signal = this.abortController.signal;
    }

    this._options.method = normalizeRequestMethod(this._options.method);
    this._timeout = timeout;
    this._hooks = deepMerge({
      beforeRequest: [],
      beforeRetry: [],
      afterResponse: []
    }, hooks);
    this._throwHttpErrors = throwHttpErrors;
    const headers = new globals.Headers(this._options.headers || {});

    if ((supportsFormData && this._options.body instanceof globals.FormData || this._options.body instanceof URLSearchParams) && headers.has('content-type')) {
      throw new Error("The `content-type` header cannot be used with a ".concat(this._options.body.constructor.name, " body. It will be set automatically."));
    }

    if (json) {
      if (this._options.body) {
        throw new Error('The `json` option cannot be used with the `body` option');
      }

      headers.set('content-type', 'application/json');
      this._options.body = JSON.stringify(json);
    }

    this._options.headers = headers;

    const fn = async () => {
      await delay(1);
      let response = await this._fetch();

      for (const hook of this._hooks.afterResponse) {
        // eslint-disable-next-line no-await-in-loop
        const modifiedResponse = await hook(this._input, this._options, response.clone());

        if (modifiedResponse instanceof globals.Response) {
          response = modifiedResponse;
        }
      }

      if (!response.ok && this._throwHttpErrors) {
        throw new HTTPError(response);
      } // If `onDownloadProgress` is passed, it uses the stream API internally

      /* istanbul ignore next */


      if (this._options.onDownloadProgress) {
        if (typeof this._options.onDownloadProgress !== 'function') {
          throw new TypeError('The `onDownloadProgress` option must be a function');
        }

        if (!supportsStreams) {
          throw new Error('Streams are not supported in your environment. `ReadableStream` is missing.');
        }

        return this._stream(response.clone(), this._options.onDownloadProgress);
      }

      return response;
    };

    const isRetriableMethod = this._options.retry.methods.has(this._options.method.toLowerCase());

    const result = isRetriableMethod ? this._retry(fn) : fn();

    for (const [type, mimeType] of Object.entries(responseTypes)) {
      result[type] = async () => {
        headers.set('accept', mimeType);
        return (await result).clone()[type]();
      };
    }

    return result;
  }

  _calculateRetryDelay(error) {
    this._retryCount++;

    if (this._retryCount < this._options.retry.limit && !(error instanceof TimeoutError)) {
      if (error instanceof HTTPError) {
        if (!this._options.retry.statusCodes.has(error.response.status)) {
          return 0;
        }

        const retryAfter = error.response.headers.get('Retry-After');

        if (retryAfter && this._options.retry.afterStatusCodes.has(error.response.status)) {
          let after = Number(retryAfter);

          if (Number.isNaN(after)) {
            after = Date.parse(retryAfter) - Date.now();
          } else {
            after *= 1000;
          }

          if (typeof this._options.retry.maxRetryAfter !== 'undefined' && after > this._options.retry.maxRetryAfter) {
            return 0;
          }

          return after;
        }

        if (error.response.status === 413) {
          return 0;
        }
      }

      const BACKOFF_FACTOR = 0.3;
      return BACKOFF_FACTOR * 2 ** (this._retryCount - 1) * 1000;
    }

    return 0;
  }

  async _retry(fn) {
    try {
      return await fn();
    } catch (error) {
      const ms = this._calculateRetryDelay(error);

      if (ms !== 0 && this._retryCount > 0) {
        await delay(ms);

        for (const hook of this._hooks.beforeRetry) {
          // eslint-disable-next-line no-await-in-loop
          await hook(this._input, this._options, error, this._retryCount);
        }

        return this._retry(fn);
      }

      if (this._throwHttpErrors) {
        throw error;
      }
    }
  }

  async _fetch() {
    for (const hook of this._hooks.beforeRequest) {
      // eslint-disable-next-line no-await-in-loop
      const result = await hook(this._input, this._options);

      if (result instanceof Response) {
        return result;
      }
    }

    if (this._timeout === false) {
      return globals.fetch(this._input, this._options);
    }

    return timeout(globals.fetch(this._input, this._options), this._timeout, this.abortController);
  }
  /* istanbul ignore next */


  _stream(response, onDownloadProgress) {
    const totalBytes = Number(response.headers.get('content-length')) || 0;
    let transferredBytes = 0;
    return new globals.Response(new globals.ReadableStream({
      start(controller) {
        const reader = response.body.getReader();

        if (onDownloadProgress) {
          onDownloadProgress({
            percent: 0,
            transferredBytes: 0,
            totalBytes
          }, new Uint8Array());
        }

        async function read() {
          const {
            done,
            value
          } = await reader.read();

          if (done) {
            controller.close();
            return;
          }

          if (onDownloadProgress) {
            transferredBytes += value.byteLength;
            const percent = totalBytes === 0 ? 0 : transferredBytes / totalBytes;
            onDownloadProgress({
              percent,
              transferredBytes,
              totalBytes
            }, value);
          }

          controller.enqueue(value);
          read();
        }

        read();
      }

    }));
  }

}

const validateAndMerge = (...sources) => {
  for (const source of sources) {
    if ((!isObject(source) || Array.isArray(source)) && typeof source !== 'undefined') {
      throw new TypeError('The `options` argument must be an object');
    }
  }

  return deepMerge({}, ...sources);
};

const createInstance = defaults => {
  const ky = (input, options) => new Ky(input, validateAndMerge(defaults, options));

  for (const method of requestMethods) {
    ky[method] = (input, options) => new Ky(input, validateAndMerge(defaults, options, {
      method
    }));
  }

  ky.create = newDefaults => createInstance(validateAndMerge(newDefaults));

  ky.extend = newDefaults => createInstance(validateAndMerge(defaults, newDefaults));

  return ky;
};

var _default = createInstance();

exports.default = _default;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(8)))

/***/ }),
/* 377 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i];
  revLookup[code.charCodeAt(i)] = i;
} // Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications


revLookup['-'.charCodeAt(0)] = 62;
revLookup['_'.charCodeAt(0)] = 63;

function getLens(b64) {
  var len = b64.length;

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4');
  } // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42


  var validLen = b64.indexOf('=');
  if (validLen === -1) validLen = len;
  var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
  return [validLen, placeHoldersLen];
} // base64 is 4/3 + up to two characters of the original data


function byteLength(b64) {
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}

function _byteLength(b64, validLen, placeHoldersLen) {
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}

function toByteArray(b64) {
  var tmp;
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
  var curByte = 0; // if there are placeholders, only get up to the last complete 4 chars

  var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
  var i;

  for (i = 0; i < len; i += 4) {
    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
    arr[curByte++] = tmp >> 16 & 0xFF;
    arr[curByte++] = tmp >> 8 & 0xFF;
    arr[curByte++] = tmp & 0xFF;
  }

  if (placeHoldersLen === 2) {
    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
    arr[curByte++] = tmp & 0xFF;
  }

  if (placeHoldersLen === 1) {
    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
    arr[curByte++] = tmp >> 8 & 0xFF;
    arr[curByte++] = tmp & 0xFF;
  }

  return arr;
}

function tripletToBase64(num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}

function encodeChunk(uint8, start, end) {
  var tmp;
  var output = [];

  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
    output.push(tripletToBase64(tmp));
  }

  return output.join('');
}

function fromByteArray(uint8) {
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes

  var parts = [];
  var maxChunkLength = 16383; // must be multiple of 3
  // go through the array every three bytes, we'll deal with trailing stuff later

  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
  } // pad the end with zeros, but make sure to not forget the extra bytes


  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');
  }

  return parts.join('');
}

/***/ }),
/* 378 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // base-x encoding / decoding
// Copyright (c) 2018 base-x contributors
// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)
// Distributed under the MIT software license, see the accompanying
// file LICENSE or http://www.opensource.org/licenses/mit-license.php.
// @ts-ignore

var _Buffer = __webpack_require__(6).Buffer;

function base(ALPHABET) {
  if (ALPHABET.length >= 255) {
    throw new TypeError('Alphabet too long');
  }

  var BASE_MAP = new Uint8Array(256);
  BASE_MAP.fill(255);

  for (var i = 0; i < ALPHABET.length; i++) {
    var x = ALPHABET.charAt(i);
    var xc = x.charCodeAt(0);

    if (BASE_MAP[xc] !== 255) {
      throw new TypeError(x + ' is ambiguous');
    }

    BASE_MAP[xc] = i;
  }

  var BASE = ALPHABET.length;
  var LEADER = ALPHABET.charAt(0);
  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up

  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up

  function encode(source) {
    if (!_Buffer.isBuffer(source)) {
      throw new TypeError('Expected Buffer');
    }

    if (source.length === 0) {
      return '';
    } // Skip & count leading zeroes.


    var zeroes = 0;
    var length = 0;
    var pbegin = 0;
    var pend = source.length;

    while (pbegin !== pend && source[pbegin] === 0) {
      pbegin++;
      zeroes++;
    } // Allocate enough space in big-endian base58 representation.


    var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
    var b58 = new Uint8Array(size); // Process the bytes.

    while (pbegin !== pend) {
      var carry = source[pbegin]; // Apply "b58 = b58 * 256 + ch".

      var i = 0;

      for (var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++) {
        carry += 256 * b58[it1] >>> 0;
        b58[it1] = carry % BASE >>> 0;
        carry = carry / BASE >>> 0;
      }

      if (carry !== 0) {
        throw new Error('Non-zero carry');
      }

      length = i;
      pbegin++;
    } // Skip leading zeroes in base58 result.


    var it2 = size - length;

    while (it2 !== size && b58[it2] === 0) {
      it2++;
    } // Translate the result into a string.


    var str = LEADER.repeat(zeroes);

    for (; it2 < size; ++it2) {
      str += ALPHABET.charAt(b58[it2]);
    }

    return str;
  }

  function decodeUnsafe(source) {
    if (typeof source !== 'string') {
      throw new TypeError('Expected String');
    }

    if (source.length === 0) {
      return _Buffer.alloc(0);
    }

    var psz = 0; // Skip leading spaces.

    if (source[psz] === ' ') {
      return;
    } // Skip and count leading '1's.


    var zeroes = 0;
    var length = 0;

    while (source[psz] === LEADER) {
      zeroes++;
      psz++;
    } // Allocate enough space in big-endian base256 representation.


    var size = (source.length - psz) * FACTOR + 1 >>> 0; // log(58) / log(256), rounded up.

    var b256 = new Uint8Array(size); // Process the characters.

    while (source[psz]) {
      // Decode character
      var carry = BASE_MAP[source.charCodeAt(psz)]; // Invalid character

      if (carry === 255) {
        return;
      }

      var i = 0;

      for (var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++) {
        carry += BASE * b256[it3] >>> 0;
        b256[it3] = carry % 256 >>> 0;
        carry = carry / 256 >>> 0;
      }

      if (carry !== 0) {
        throw new Error('Non-zero carry');
      }

      length = i;
      psz++;
    } // Skip trailing spaces.


    if (source[psz] === ' ') {
      return;
    } // Skip leading zeroes in b256.


    var it4 = size - length;

    while (it4 !== size && b256[it4] === 0) {
      it4++;
    }

    var vch = _Buffer.allocUnsafe(zeroes + (size - it4));

    vch.fill(0x00, 0, zeroes);
    var j = zeroes;

    while (it4 !== size) {
      vch[j++] = b256[it4++];
    }

    return vch;
  }

  function decode(string) {
    var buffer = decodeUnsafe(string);

    if (buffer) {
      return buffer;
    }

    throw new Error('Non-base' + BASE + ' character');
  }

  return {
    encode: encode,
    decodeUnsafe: decodeUnsafe,
    decode: decode
  };
}

module.exports = base;

/***/ }),
/* 379 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint quote-props: off */

/* eslint key-spacing: off */


exports.names = Object.freeze({
  'identity': 0x0,
  'sha1': 0x11,
  'sha2-256': 0x12,
  'sha2-512': 0x13,
  'dbl-sha2-256': 0x56,
  'sha3-224': 0x17,
  'sha3-256': 0x16,
  'sha3-384': 0x15,
  'sha3-512': 0x14,
  'shake-128': 0x18,
  'shake-256': 0x19,
  'keccak-224': 0x1A,
  'keccak-256': 0x1B,
  'keccak-384': 0x1C,
  'keccak-512': 0x1D,
  'murmur3-128': 0x22,
  'murmur3-32': 0x23,
  'blake2b-8': 0xb201,
  'blake2b-16': 0xb202,
  'blake2b-24': 0xb203,
  'blake2b-32': 0xb204,
  'blake2b-40': 0xb205,
  'blake2b-48': 0xb206,
  'blake2b-56': 0xb207,
  'blake2b-64': 0xb208,
  'blake2b-72': 0xb209,
  'blake2b-80': 0xb20a,
  'blake2b-88': 0xb20b,
  'blake2b-96': 0xb20c,
  'blake2b-104': 0xb20d,
  'blake2b-112': 0xb20e,
  'blake2b-120': 0xb20f,
  'blake2b-128': 0xb210,
  'blake2b-136': 0xb211,
  'blake2b-144': 0xb212,
  'blake2b-152': 0xb213,
  'blake2b-160': 0xb214,
  'blake2b-168': 0xb215,
  'blake2b-176': 0xb216,
  'blake2b-184': 0xb217,
  'blake2b-192': 0xb218,
  'blake2b-200': 0xb219,
  'blake2b-208': 0xb21a,
  'blake2b-216': 0xb21b,
  'blake2b-224': 0xb21c,
  'blake2b-232': 0xb21d,
  'blake2b-240': 0xb21e,
  'blake2b-248': 0xb21f,
  'blake2b-256': 0xb220,
  'blake2b-264': 0xb221,
  'blake2b-272': 0xb222,
  'blake2b-280': 0xb223,
  'blake2b-288': 0xb224,
  'blake2b-296': 0xb225,
  'blake2b-304': 0xb226,
  'blake2b-312': 0xb227,
  'blake2b-320': 0xb228,
  'blake2b-328': 0xb229,
  'blake2b-336': 0xb22a,
  'blake2b-344': 0xb22b,
  'blake2b-352': 0xb22c,
  'blake2b-360': 0xb22d,
  'blake2b-368': 0xb22e,
  'blake2b-376': 0xb22f,
  'blake2b-384': 0xb230,
  'blake2b-392': 0xb231,
  'blake2b-400': 0xb232,
  'blake2b-408': 0xb233,
  'blake2b-416': 0xb234,
  'blake2b-424': 0xb235,
  'blake2b-432': 0xb236,
  'blake2b-440': 0xb237,
  'blake2b-448': 0xb238,
  'blake2b-456': 0xb239,
  'blake2b-464': 0xb23a,
  'blake2b-472': 0xb23b,
  'blake2b-480': 0xb23c,
  'blake2b-488': 0xb23d,
  'blake2b-496': 0xb23e,
  'blake2b-504': 0xb23f,
  'blake2b-512': 0xb240,
  'blake2s-8': 0xb241,
  'blake2s-16': 0xb242,
  'blake2s-24': 0xb243,
  'blake2s-32': 0xb244,
  'blake2s-40': 0xb245,
  'blake2s-48': 0xb246,
  'blake2s-56': 0xb247,
  'blake2s-64': 0xb248,
  'blake2s-72': 0xb249,
  'blake2s-80': 0xb24a,
  'blake2s-88': 0xb24b,
  'blake2s-96': 0xb24c,
  'blake2s-104': 0xb24d,
  'blake2s-112': 0xb24e,
  'blake2s-120': 0xb24f,
  'blake2s-128': 0xb250,
  'blake2s-136': 0xb251,
  'blake2s-144': 0xb252,
  'blake2s-152': 0xb253,
  'blake2s-160': 0xb254,
  'blake2s-168': 0xb255,
  'blake2s-176': 0xb256,
  'blake2s-184': 0xb257,
  'blake2s-192': 0xb258,
  'blake2s-200': 0xb259,
  'blake2s-208': 0xb25a,
  'blake2s-216': 0xb25b,
  'blake2s-224': 0xb25c,
  'blake2s-232': 0xb25d,
  'blake2s-240': 0xb25e,
  'blake2s-248': 0xb25f,
  'blake2s-256': 0xb260,
  'Skein256-8': 0xb301,
  'Skein256-16': 0xb302,
  'Skein256-24': 0xb303,
  'Skein256-32': 0xb304,
  'Skein256-40': 0xb305,
  'Skein256-48': 0xb306,
  'Skein256-56': 0xb307,
  'Skein256-64': 0xb308,
  'Skein256-72': 0xb309,
  'Skein256-80': 0xb30a,
  'Skein256-88': 0xb30b,
  'Skein256-96': 0xb30c,
  'Skein256-104': 0xb30d,
  'Skein256-112': 0xb30e,
  'Skein256-120': 0xb30f,
  'Skein256-128': 0xb310,
  'Skein256-136': 0xb311,
  'Skein256-144': 0xb312,
  'Skein256-152': 0xb313,
  'Skein256-160': 0xb314,
  'Skein256-168': 0xb315,
  'Skein256-176': 0xb316,
  'Skein256-184': 0xb317,
  'Skein256-192': 0xb318,
  'Skein256-200': 0xb319,
  'Skein256-208': 0xb31a,
  'Skein256-216': 0xb31b,
  'Skein256-224': 0xb31c,
  'Skein256-232': 0xb31d,
  'Skein256-240': 0xb31e,
  'Skein256-248': 0xb31f,
  'Skein256-256': 0xb320,
  'Skein512-8': 0xb321,
  'Skein512-16': 0xb322,
  'Skein512-24': 0xb323,
  'Skein512-32': 0xb324,
  'Skein512-40': 0xb325,
  'Skein512-48': 0xb326,
  'Skein512-56': 0xb327,
  'Skein512-64': 0xb328,
  'Skein512-72': 0xb329,
  'Skein512-80': 0xb32a,
  'Skein512-88': 0xb32b,
  'Skein512-96': 0xb32c,
  'Skein512-104': 0xb32d,
  'Skein512-112': 0xb32e,
  'Skein512-120': 0xb32f,
  'Skein512-128': 0xb330,
  'Skein512-136': 0xb331,
  'Skein512-144': 0xb332,
  'Skein512-152': 0xb333,
  'Skein512-160': 0xb334,
  'Skein512-168': 0xb335,
  'Skein512-176': 0xb336,
  'Skein512-184': 0xb337,
  'Skein512-192': 0xb338,
  'Skein512-200': 0xb339,
  'Skein512-208': 0xb33a,
  'Skein512-216': 0xb33b,
  'Skein512-224': 0xb33c,
  'Skein512-232': 0xb33d,
  'Skein512-240': 0xb33e,
  'Skein512-248': 0xb33f,
  'Skein512-256': 0xb340,
  'Skein512-264': 0xb341,
  'Skein512-272': 0xb342,
  'Skein512-280': 0xb343,
  'Skein512-288': 0xb344,
  'Skein512-296': 0xb345,
  'Skein512-304': 0xb346,
  'Skein512-312': 0xb347,
  'Skein512-320': 0xb348,
  'Skein512-328': 0xb349,
  'Skein512-336': 0xb34a,
  'Skein512-344': 0xb34b,
  'Skein512-352': 0xb34c,
  'Skein512-360': 0xb34d,
  'Skein512-368': 0xb34e,
  'Skein512-376': 0xb34f,
  'Skein512-384': 0xb350,
  'Skein512-392': 0xb351,
  'Skein512-400': 0xb352,
  'Skein512-408': 0xb353,
  'Skein512-416': 0xb354,
  'Skein512-424': 0xb355,
  'Skein512-432': 0xb356,
  'Skein512-440': 0xb357,
  'Skein512-448': 0xb358,
  'Skein512-456': 0xb359,
  'Skein512-464': 0xb35a,
  'Skein512-472': 0xb35b,
  'Skein512-480': 0xb35c,
  'Skein512-488': 0xb35d,
  'Skein512-496': 0xb35e,
  'Skein512-504': 0xb35f,
  'Skein512-512': 0xb360,
  'Skein1024-8': 0xb361,
  'Skein1024-16': 0xb362,
  'Skein1024-24': 0xb363,
  'Skein1024-32': 0xb364,
  'Skein1024-40': 0xb365,
  'Skein1024-48': 0xb366,
  'Skein1024-56': 0xb367,
  'Skein1024-64': 0xb368,
  'Skein1024-72': 0xb369,
  'Skein1024-80': 0xb36a,
  'Skein1024-88': 0xb36b,
  'Skein1024-96': 0xb36c,
  'Skein1024-104': 0xb36d,
  'Skein1024-112': 0xb36e,
  'Skein1024-120': 0xb36f,
  'Skein1024-128': 0xb370,
  'Skein1024-136': 0xb371,
  'Skein1024-144': 0xb372,
  'Skein1024-152': 0xb373,
  'Skein1024-160': 0xb374,
  'Skein1024-168': 0xb375,
  'Skein1024-176': 0xb376,
  'Skein1024-184': 0xb377,
  'Skein1024-192': 0xb378,
  'Skein1024-200': 0xb379,
  'Skein1024-208': 0xb37a,
  'Skein1024-216': 0xb37b,
  'Skein1024-224': 0xb37c,
  'Skein1024-232': 0xb37d,
  'Skein1024-240': 0xb37e,
  'Skein1024-248': 0xb37f,
  'Skein1024-256': 0xb380,
  'Skein1024-264': 0xb381,
  'Skein1024-272': 0xb382,
  'Skein1024-280': 0xb383,
  'Skein1024-288': 0xb384,
  'Skein1024-296': 0xb385,
  'Skein1024-304': 0xb386,
  'Skein1024-312': 0xb387,
  'Skein1024-320': 0xb388,
  'Skein1024-328': 0xb389,
  'Skein1024-336': 0xb38a,
  'Skein1024-344': 0xb38b,
  'Skein1024-352': 0xb38c,
  'Skein1024-360': 0xb38d,
  'Skein1024-368': 0xb38e,
  'Skein1024-376': 0xb38f,
  'Skein1024-384': 0xb390,
  'Skein1024-392': 0xb391,
  'Skein1024-400': 0xb392,
  'Skein1024-408': 0xb393,
  'Skein1024-416': 0xb394,
  'Skein1024-424': 0xb395,
  'Skein1024-432': 0xb396,
  'Skein1024-440': 0xb397,
  'Skein1024-448': 0xb398,
  'Skein1024-456': 0xb399,
  'Skein1024-464': 0xb39a,
  'Skein1024-472': 0xb39b,
  'Skein1024-480': 0xb39c,
  'Skein1024-488': 0xb39d,
  'Skein1024-496': 0xb39e,
  'Skein1024-504': 0xb39f,
  'Skein1024-512': 0xb3a0,
  'Skein1024-520': 0xb3a1,
  'Skein1024-528': 0xb3a2,
  'Skein1024-536': 0xb3a3,
  'Skein1024-544': 0xb3a4,
  'Skein1024-552': 0xb3a5,
  'Skein1024-560': 0xb3a6,
  'Skein1024-568': 0xb3a7,
  'Skein1024-576': 0xb3a8,
  'Skein1024-584': 0xb3a9,
  'Skein1024-592': 0xb3aa,
  'Skein1024-600': 0xb3ab,
  'Skein1024-608': 0xb3ac,
  'Skein1024-616': 0xb3ad,
  'Skein1024-624': 0xb3ae,
  'Skein1024-632': 0xb3af,
  'Skein1024-640': 0xb3b0,
  'Skein1024-648': 0xb3b1,
  'Skein1024-656': 0xb3b2,
  'Skein1024-664': 0xb3b3,
  'Skein1024-672': 0xb3b4,
  'Skein1024-680': 0xb3b5,
  'Skein1024-688': 0xb3b6,
  'Skein1024-696': 0xb3b7,
  'Skein1024-704': 0xb3b8,
  'Skein1024-712': 0xb3b9,
  'Skein1024-720': 0xb3ba,
  'Skein1024-728': 0xb3bb,
  'Skein1024-736': 0xb3bc,
  'Skein1024-744': 0xb3bd,
  'Skein1024-752': 0xb3be,
  'Skein1024-760': 0xb3bf,
  'Skein1024-768': 0xb3c0,
  'Skein1024-776': 0xb3c1,
  'Skein1024-784': 0xb3c2,
  'Skein1024-792': 0xb3c3,
  'Skein1024-800': 0xb3c4,
  'Skein1024-808': 0xb3c5,
  'Skein1024-816': 0xb3c6,
  'Skein1024-824': 0xb3c7,
  'Skein1024-832': 0xb3c8,
  'Skein1024-840': 0xb3c9,
  'Skein1024-848': 0xb3ca,
  'Skein1024-856': 0xb3cb,
  'Skein1024-864': 0xb3cc,
  'Skein1024-872': 0xb3cd,
  'Skein1024-880': 0xb3ce,
  'Skein1024-888': 0xb3cf,
  'Skein1024-896': 0xb3d0,
  'Skein1024-904': 0xb3d1,
  'Skein1024-912': 0xb3d2,
  'Skein1024-920': 0xb3d3,
  'Skein1024-928': 0xb3d4,
  'Skein1024-936': 0xb3d5,
  'Skein1024-944': 0xb3d6,
  'Skein1024-952': 0xb3d7,
  'Skein1024-960': 0xb3d8,
  'Skein1024-968': 0xb3d9,
  'Skein1024-976': 0xb3da,
  'Skein1024-984': 0xb3db,
  'Skein1024-992': 0xb3dc,
  'Skein1024-1000': 0xb3dd,
  'Skein1024-1008': 0xb3de,
  'Skein1024-1016': 0xb3df,
  'Skein1024-1024': 0xb3e0
});
exports.codes = Object.freeze({
  0x0: 'identity',
  // sha family
  0x11: 'sha1',
  0x12: 'sha2-256',
  0x13: 'sha2-512',
  0x56: 'dbl-sha2-256',
  0x17: 'sha3-224',
  0x16: 'sha3-256',
  0x15: 'sha3-384',
  0x14: 'sha3-512',
  0x18: 'shake-128',
  0x19: 'shake-256',
  0x1A: 'keccak-224',
  0x1B: 'keccak-256',
  0x1C: 'keccak-384',
  0x1D: 'keccak-512',
  0x22: 'murmur3-128',
  0x23: 'murmur3-32',
  // blake2
  0xb201: 'blake2b-8',
  0xb202: 'blake2b-16',
  0xb203: 'blake2b-24',
  0xb204: 'blake2b-32',
  0xb205: 'blake2b-40',
  0xb206: 'blake2b-48',
  0xb207: 'blake2b-56',
  0xb208: 'blake2b-64',
  0xb209: 'blake2b-72',
  0xb20a: 'blake2b-80',
  0xb20b: 'blake2b-88',
  0xb20c: 'blake2b-96',
  0xb20d: 'blake2b-104',
  0xb20e: 'blake2b-112',
  0xb20f: 'blake2b-120',
  0xb210: 'blake2b-128',
  0xb211: 'blake2b-136',
  0xb212: 'blake2b-144',
  0xb213: 'blake2b-152',
  0xb214: 'blake2b-160',
  0xb215: 'blake2b-168',
  0xb216: 'blake2b-176',
  0xb217: 'blake2b-184',
  0xb218: 'blake2b-192',
  0xb219: 'blake2b-200',
  0xb21a: 'blake2b-208',
  0xb21b: 'blake2b-216',
  0xb21c: 'blake2b-224',
  0xb21d: 'blake2b-232',
  0xb21e: 'blake2b-240',
  0xb21f: 'blake2b-248',
  0xb220: 'blake2b-256',
  0xb221: 'blake2b-264',
  0xb222: 'blake2b-272',
  0xb223: 'blake2b-280',
  0xb224: 'blake2b-288',
  0xb225: 'blake2b-296',
  0xb226: 'blake2b-304',
  0xb227: 'blake2b-312',
  0xb228: 'blake2b-320',
  0xb229: 'blake2b-328',
  0xb22a: 'blake2b-336',
  0xb22b: 'blake2b-344',
  0xb22c: 'blake2b-352',
  0xb22d: 'blake2b-360',
  0xb22e: 'blake2b-368',
  0xb22f: 'blake2b-376',
  0xb230: 'blake2b-384',
  0xb231: 'blake2b-392',
  0xb232: 'blake2b-400',
  0xb233: 'blake2b-408',
  0xb234: 'blake2b-416',
  0xb235: 'blake2b-424',
  0xb236: 'blake2b-432',
  0xb237: 'blake2b-440',
  0xb238: 'blake2b-448',
  0xb239: 'blake2b-456',
  0xb23a: 'blake2b-464',
  0xb23b: 'blake2b-472',
  0xb23c: 'blake2b-480',
  0xb23d: 'blake2b-488',
  0xb23e: 'blake2b-496',
  0xb23f: 'blake2b-504',
  0xb240: 'blake2b-512',
  0xb241: 'blake2s-8',
  0xb242: 'blake2s-16',
  0xb243: 'blake2s-24',
  0xb244: 'blake2s-32',
  0xb245: 'blake2s-40',
  0xb246: 'blake2s-48',
  0xb247: 'blake2s-56',
  0xb248: 'blake2s-64',
  0xb249: 'blake2s-72',
  0xb24a: 'blake2s-80',
  0xb24b: 'blake2s-88',
  0xb24c: 'blake2s-96',
  0xb24d: 'blake2s-104',
  0xb24e: 'blake2s-112',
  0xb24f: 'blake2s-120',
  0xb250: 'blake2s-128',
  0xb251: 'blake2s-136',
  0xb252: 'blake2s-144',
  0xb253: 'blake2s-152',
  0xb254: 'blake2s-160',
  0xb255: 'blake2s-168',
  0xb256: 'blake2s-176',
  0xb257: 'blake2s-184',
  0xb258: 'blake2s-192',
  0xb259: 'blake2s-200',
  0xb25a: 'blake2s-208',
  0xb25b: 'blake2s-216',
  0xb25c: 'blake2s-224',
  0xb25d: 'blake2s-232',
  0xb25e: 'blake2s-240',
  0xb25f: 'blake2s-248',
  0xb260: 'blake2s-256',
  // skein
  0xb301: 'Skein256-8',
  0xb302: 'Skein256-16',
  0xb303: 'Skein256-24',
  0xb304: 'Skein256-32',
  0xb305: 'Skein256-40',
  0xb306: 'Skein256-48',
  0xb307: 'Skein256-56',
  0xb308: 'Skein256-64',
  0xb309: 'Skein256-72',
  0xb30a: 'Skein256-80',
  0xb30b: 'Skein256-88',
  0xb30c: 'Skein256-96',
  0xb30d: 'Skein256-104',
  0xb30e: 'Skein256-112',
  0xb30f: 'Skein256-120',
  0xb310: 'Skein256-128',
  0xb311: 'Skein256-136',
  0xb312: 'Skein256-144',
  0xb313: 'Skein256-152',
  0xb314: 'Skein256-160',
  0xb315: 'Skein256-168',
  0xb316: 'Skein256-176',
  0xb317: 'Skein256-184',
  0xb318: 'Skein256-192',
  0xb319: 'Skein256-200',
  0xb31a: 'Skein256-208',
  0xb31b: 'Skein256-216',
  0xb31c: 'Skein256-224',
  0xb31d: 'Skein256-232',
  0xb31e: 'Skein256-240',
  0xb31f: 'Skein256-248',
  0xb320: 'Skein256-256',
  0xb321: 'Skein512-8',
  0xb322: 'Skein512-16',
  0xb323: 'Skein512-24',
  0xb324: 'Skein512-32',
  0xb325: 'Skein512-40',
  0xb326: 'Skein512-48',
  0xb327: 'Skein512-56',
  0xb328: 'Skein512-64',
  0xb329: 'Skein512-72',
  0xb32a: 'Skein512-80',
  0xb32b: 'Skein512-88',
  0xb32c: 'Skein512-96',
  0xb32d: 'Skein512-104',
  0xb32e: 'Skein512-112',
  0xb32f: 'Skein512-120',
  0xb330: 'Skein512-128',
  0xb331: 'Skein512-136',
  0xb332: 'Skein512-144',
  0xb333: 'Skein512-152',
  0xb334: 'Skein512-160',
  0xb335: 'Skein512-168',
  0xb336: 'Skein512-176',
  0xb337: 'Skein512-184',
  0xb338: 'Skein512-192',
  0xb339: 'Skein512-200',
  0xb33a: 'Skein512-208',
  0xb33b: 'Skein512-216',
  0xb33c: 'Skein512-224',
  0xb33d: 'Skein512-232',
  0xb33e: 'Skein512-240',
  0xb33f: 'Skein512-248',
  0xb340: 'Skein512-256',
  0xb341: 'Skein512-264',
  0xb342: 'Skein512-272',
  0xb343: 'Skein512-280',
  0xb344: 'Skein512-288',
  0xb345: 'Skein512-296',
  0xb346: 'Skein512-304',
  0xb347: 'Skein512-312',
  0xb348: 'Skein512-320',
  0xb349: 'Skein512-328',
  0xb34a: 'Skein512-336',
  0xb34b: 'Skein512-344',
  0xb34c: 'Skein512-352',
  0xb34d: 'Skein512-360',
  0xb34e: 'Skein512-368',
  0xb34f: 'Skein512-376',
  0xb350: 'Skein512-384',
  0xb351: 'Skein512-392',
  0xb352: 'Skein512-400',
  0xb353: 'Skein512-408',
  0xb354: 'Skein512-416',
  0xb355: 'Skein512-424',
  0xb356: 'Skein512-432',
  0xb357: 'Skein512-440',
  0xb358: 'Skein512-448',
  0xb359: 'Skein512-456',
  0xb35a: 'Skein512-464',
  0xb35b: 'Skein512-472',
  0xb35c: 'Skein512-480',
  0xb35d: 'Skein512-488',
  0xb35e: 'Skein512-496',
  0xb35f: 'Skein512-504',
  0xb360: 'Skein512-512',
  0xb361: 'Skein1024-8',
  0xb362: 'Skein1024-16',
  0xb363: 'Skein1024-24',
  0xb364: 'Skein1024-32',
  0xb365: 'Skein1024-40',
  0xb366: 'Skein1024-48',
  0xb367: 'Skein1024-56',
  0xb368: 'Skein1024-64',
  0xb369: 'Skein1024-72',
  0xb36a: 'Skein1024-80',
  0xb36b: 'Skein1024-88',
  0xb36c: 'Skein1024-96',
  0xb36d: 'Skein1024-104',
  0xb36e: 'Skein1024-112',
  0xb36f: 'Skein1024-120',
  0xb370: 'Skein1024-128',
  0xb371: 'Skein1024-136',
  0xb372: 'Skein1024-144',
  0xb373: 'Skein1024-152',
  0xb374: 'Skein1024-160',
  0xb375: 'Skein1024-168',
  0xb376: 'Skein1024-176',
  0xb377: 'Skein1024-184',
  0xb378: 'Skein1024-192',
  0xb379: 'Skein1024-200',
  0xb37a: 'Skein1024-208',
  0xb37b: 'Skein1024-216',
  0xb37c: 'Skein1024-224',
  0xb37d: 'Skein1024-232',
  0xb37e: 'Skein1024-240',
  0xb37f: 'Skein1024-248',
  0xb380: 'Skein1024-256',
  0xb381: 'Skein1024-264',
  0xb382: 'Skein1024-272',
  0xb383: 'Skein1024-280',
  0xb384: 'Skein1024-288',
  0xb385: 'Skein1024-296',
  0xb386: 'Skein1024-304',
  0xb387: 'Skein1024-312',
  0xb388: 'Skein1024-320',
  0xb389: 'Skein1024-328',
  0xb38a: 'Skein1024-336',
  0xb38b: 'Skein1024-344',
  0xb38c: 'Skein1024-352',
  0xb38d: 'Skein1024-360',
  0xb38e: 'Skein1024-368',
  0xb38f: 'Skein1024-376',
  0xb390: 'Skein1024-384',
  0xb391: 'Skein1024-392',
  0xb392: 'Skein1024-400',
  0xb393: 'Skein1024-408',
  0xb394: 'Skein1024-416',
  0xb395: 'Skein1024-424',
  0xb396: 'Skein1024-432',
  0xb397: 'Skein1024-440',
  0xb398: 'Skein1024-448',
  0xb399: 'Skein1024-456',
  0xb39a: 'Skein1024-464',
  0xb39b: 'Skein1024-472',
  0xb39c: 'Skein1024-480',
  0xb39d: 'Skein1024-488',
  0xb39e: 'Skein1024-496',
  0xb39f: 'Skein1024-504',
  0xb3a0: 'Skein1024-512',
  0xb3a1: 'Skein1024-520',
  0xb3a2: 'Skein1024-528',
  0xb3a3: 'Skein1024-536',
  0xb3a4: 'Skein1024-544',
  0xb3a5: 'Skein1024-552',
  0xb3a6: 'Skein1024-560',
  0xb3a7: 'Skein1024-568',
  0xb3a8: 'Skein1024-576',
  0xb3a9: 'Skein1024-584',
  0xb3aa: 'Skein1024-592',
  0xb3ab: 'Skein1024-600',
  0xb3ac: 'Skein1024-608',
  0xb3ad: 'Skein1024-616',
  0xb3ae: 'Skein1024-624',
  0xb3af: 'Skein1024-632',
  0xb3b0: 'Skein1024-640',
  0xb3b1: 'Skein1024-648',
  0xb3b2: 'Skein1024-656',
  0xb3b3: 'Skein1024-664',
  0xb3b4: 'Skein1024-672',
  0xb3b5: 'Skein1024-680',
  0xb3b6: 'Skein1024-688',
  0xb3b7: 'Skein1024-696',
  0xb3b8: 'Skein1024-704',
  0xb3b9: 'Skein1024-712',
  0xb3ba: 'Skein1024-720',
  0xb3bb: 'Skein1024-728',
  0xb3bc: 'Skein1024-736',
  0xb3bd: 'Skein1024-744',
  0xb3be: 'Skein1024-752',
  0xb3bf: 'Skein1024-760',
  0xb3c0: 'Skein1024-768',
  0xb3c1: 'Skein1024-776',
  0xb3c2: 'Skein1024-784',
  0xb3c3: 'Skein1024-792',
  0xb3c4: 'Skein1024-800',
  0xb3c5: 'Skein1024-808',
  0xb3c6: 'Skein1024-816',
  0xb3c7: 'Skein1024-824',
  0xb3c8: 'Skein1024-832',
  0xb3c9: 'Skein1024-840',
  0xb3ca: 'Skein1024-848',
  0xb3cb: 'Skein1024-856',
  0xb3cc: 'Skein1024-864',
  0xb3cd: 'Skein1024-872',
  0xb3ce: 'Skein1024-880',
  0xb3cf: 'Skein1024-888',
  0xb3d0: 'Skein1024-896',
  0xb3d1: 'Skein1024-904',
  0xb3d2: 'Skein1024-912',
  0xb3d3: 'Skein1024-920',
  0xb3d4: 'Skein1024-928',
  0xb3d5: 'Skein1024-936',
  0xb3d6: 'Skein1024-944',
  0xb3d7: 'Skein1024-952',
  0xb3d8: 'Skein1024-960',
  0xb3d9: 'Skein1024-968',
  0xb3da: 'Skein1024-976',
  0xb3db: 'Skein1024-984',
  0xb3dc: 'Skein1024-992',
  0xb3dd: 'Skein1024-1000',
  0xb3de: 'Skein1024-1008',
  0xb3df: 'Skein1024-1016',
  0xb3e0: 'Skein1024-1024'
});
exports.defaultLengths = Object.freeze({
  0x11: 20,
  0x12: 32,
  0x13: 64,
  0x56: 32,
  0x17: 28,
  0x16: 32,
  0x15: 48,
  0x14: 64,
  0x18: 32,
  0x19: 64,
  0x1A: 28,
  0x1B: 32,
  0x1C: 48,
  0x1D: 64,
  0x22: 32,
  0xb201: 0x01,
  0xb202: 0x02,
  0xb203: 0x03,
  0xb204: 0x04,
  0xb205: 0x05,
  0xb206: 0x06,
  0xb207: 0x07,
  0xb208: 0x08,
  0xb209: 0x09,
  0xb20a: 0x0a,
  0xb20b: 0x0b,
  0xb20c: 0x0c,
  0xb20d: 0x0d,
  0xb20e: 0x0e,
  0xb20f: 0x0f,
  0xb210: 0x10,
  0xb211: 0x11,
  0xb212: 0x12,
  0xb213: 0x13,
  0xb214: 0x14,
  0xb215: 0x15,
  0xb216: 0x16,
  0xb217: 0x17,
  0xb218: 0x18,
  0xb219: 0x19,
  0xb21a: 0x1a,
  0xb21b: 0x1b,
  0xb21c: 0x1c,
  0xb21d: 0x1d,
  0xb21e: 0x1e,
  0xb21f: 0x1f,
  0xb220: 0x20,
  0xb221: 0x21,
  0xb222: 0x22,
  0xb223: 0x23,
  0xb224: 0x24,
  0xb225: 0x25,
  0xb226: 0x26,
  0xb227: 0x27,
  0xb228: 0x28,
  0xb229: 0x29,
  0xb22a: 0x2a,
  0xb22b: 0x2b,
  0xb22c: 0x2c,
  0xb22d: 0x2d,
  0xb22e: 0x2e,
  0xb22f: 0x2f,
  0xb230: 0x30,
  0xb231: 0x31,
  0xb232: 0x32,
  0xb233: 0x33,
  0xb234: 0x34,
  0xb235: 0x35,
  0xb236: 0x36,
  0xb237: 0x37,
  0xb238: 0x38,
  0xb239: 0x39,
  0xb23a: 0x3a,
  0xb23b: 0x3b,
  0xb23c: 0x3c,
  0xb23d: 0x3d,
  0xb23e: 0x3e,
  0xb23f: 0x3f,
  0xb240: 0x40,
  0xb241: 0x01,
  0xb242: 0x02,
  0xb243: 0x03,
  0xb244: 0x04,
  0xb245: 0x05,
  0xb246: 0x06,
  0xb247: 0x07,
  0xb248: 0x08,
  0xb249: 0x09,
  0xb24a: 0x0a,
  0xb24b: 0x0b,
  0xb24c: 0x0c,
  0xb24d: 0x0d,
  0xb24e: 0x0e,
  0xb24f: 0x0f,
  0xb250: 0x10,
  0xb251: 0x11,
  0xb252: 0x12,
  0xb253: 0x13,
  0xb254: 0x14,
  0xb255: 0x15,
  0xb256: 0x16,
  0xb257: 0x17,
  0xb258: 0x18,
  0xb259: 0x19,
  0xb25a: 0x1a,
  0xb25b: 0x1b,
  0xb25c: 0x1c,
  0xb25d: 0x1d,
  0xb25e: 0x1e,
  0xb25f: 0x1f,
  0xb260: 0x20,
  0xb301: 0x01,
  0xb302: 0x02,
  0xb303: 0x03,
  0xb304: 0x04,
  0xb305: 0x05,
  0xb306: 0x06,
  0xb307: 0x07,
  0xb308: 0x08,
  0xb309: 0x09,
  0xb30a: 0x0a,
  0xb30b: 0x0b,
  0xb30c: 0x0c,
  0xb30d: 0x0d,
  0xb30e: 0x0e,
  0xb30f: 0x0f,
  0xb310: 0x10,
  0xb311: 0x11,
  0xb312: 0x12,
  0xb313: 0x13,
  0xb314: 0x14,
  0xb315: 0x15,
  0xb316: 0x16,
  0xb317: 0x17,
  0xb318: 0x18,
  0xb319: 0x19,
  0xb31a: 0x1a,
  0xb31b: 0x1b,
  0xb31c: 0x1c,
  0xb31d: 0x1d,
  0xb31e: 0x1e,
  0xb31f: 0x1f,
  0xb320: 0x20,
  0xb321: 0x01,
  0xb322: 0x02,
  0xb323: 0x03,
  0xb324: 0x04,
  0xb325: 0x05,
  0xb326: 0x06,
  0xb327: 0x07,
  0xb328: 0x08,
  0xb329: 0x09,
  0xb32a: 0x0a,
  0xb32b: 0x0b,
  0xb32c: 0x0c,
  0xb32d: 0x0d,
  0xb32e: 0x0e,
  0xb32f: 0x0f,
  0xb330: 0x10,
  0xb331: 0x11,
  0xb332: 0x12,
  0xb333: 0x13,
  0xb334: 0x14,
  0xb335: 0x15,
  0xb336: 0x16,
  0xb337: 0x17,
  0xb338: 0x18,
  0xb339: 0x19,
  0xb33a: 0x1a,
  0xb33b: 0x1b,
  0xb33c: 0x1c,
  0xb33d: 0x1d,
  0xb33e: 0x1e,
  0xb33f: 0x1f,
  0xb340: 0x20,
  0xb341: 0x21,
  0xb342: 0x22,
  0xb343: 0x23,
  0xb344: 0x24,
  0xb345: 0x25,
  0xb346: 0x26,
  0xb347: 0x27,
  0xb348: 0x28,
  0xb349: 0x29,
  0xb34a: 0x2a,
  0xb34b: 0x2b,
  0xb34c: 0x2c,
  0xb34d: 0x2d,
  0xb34e: 0x2e,
  0xb34f: 0x2f,
  0xb350: 0x30,
  0xb351: 0x31,
  0xb352: 0x32,
  0xb353: 0x33,
  0xb354: 0x34,
  0xb355: 0x35,
  0xb356: 0x36,
  0xb357: 0x37,
  0xb358: 0x38,
  0xb359: 0x39,
  0xb35a: 0x3a,
  0xb35b: 0x3b,
  0xb35c: 0x3c,
  0xb35d: 0x3d,
  0xb35e: 0x3e,
  0xb35f: 0x3f,
  0xb360: 0x40,
  0xb361: 0x01,
  0xb362: 0x02,
  0xb363: 0x03,
  0xb364: 0x04,
  0xb365: 0x05,
  0xb366: 0x06,
  0xb367: 0x07,
  0xb368: 0x08,
  0xb369: 0x09,
  0xb36a: 0x0a,
  0xb36b: 0x0b,
  0xb36c: 0x0c,
  0xb36d: 0x0d,
  0xb36e: 0x0e,
  0xb36f: 0x0f,
  0xb370: 0x10,
  0xb371: 0x11,
  0xb372: 0x12,
  0xb373: 0x13,
  0xb374: 0x14,
  0xb375: 0x15,
  0xb376: 0x16,
  0xb377: 0x17,
  0xb378: 0x18,
  0xb379: 0x19,
  0xb37a: 0x1a,
  0xb37b: 0x1b,
  0xb37c: 0x1c,
  0xb37d: 0x1d,
  0xb37e: 0x1e,
  0xb37f: 0x1f,
  0xb380: 0x20,
  0xb381: 0x21,
  0xb382: 0x22,
  0xb383: 0x23,
  0xb384: 0x24,
  0xb385: 0x25,
  0xb386: 0x26,
  0xb387: 0x27,
  0xb388: 0x28,
  0xb389: 0x29,
  0xb38a: 0x2a,
  0xb38b: 0x2b,
  0xb38c: 0x2c,
  0xb38d: 0x2d,
  0xb38e: 0x2e,
  0xb38f: 0x2f,
  0xb390: 0x30,
  0xb391: 0x31,
  0xb392: 0x32,
  0xb393: 0x33,
  0xb394: 0x34,
  0xb395: 0x35,
  0xb396: 0x36,
  0xb397: 0x37,
  0xb398: 0x38,
  0xb399: 0x39,
  0xb39a: 0x3a,
  0xb39b: 0x3b,
  0xb39c: 0x3c,
  0xb39d: 0x3d,
  0xb39e: 0x3e,
  0xb39f: 0x3f,
  0xb3a0: 0x40,
  0xb3a1: 0x41,
  0xb3a2: 0x42,
  0xb3a3: 0x43,
  0xb3a4: 0x44,
  0xb3a5: 0x45,
  0xb3a6: 0x46,
  0xb3a7: 0x47,
  0xb3a8: 0x48,
  0xb3a9: 0x49,
  0xb3aa: 0x4a,
  0xb3ab: 0x4b,
  0xb3ac: 0x4c,
  0xb3ad: 0x4d,
  0xb3ae: 0x4e,
  0xb3af: 0x4f,
  0xb3b0: 0x50,
  0xb3b1: 0x51,
  0xb3b2: 0x52,
  0xb3b3: 0x53,
  0xb3b4: 0x54,
  0xb3b5: 0x55,
  0xb3b6: 0x56,
  0xb3b7: 0x57,
  0xb3b8: 0x58,
  0xb3b9: 0x59,
  0xb3ba: 0x5a,
  0xb3bb: 0x5b,
  0xb3bc: 0x5c,
  0xb3bd: 0x5d,
  0xb3be: 0x5e,
  0xb3bf: 0x5f,
  0xb3c0: 0x60,
  0xb3c1: 0x61,
  0xb3c2: 0x62,
  0xb3c3: 0x63,
  0xb3c4: 0x64,
  0xb3c5: 0x65,
  0xb3c6: 0x66,
  0xb3c7: 0x67,
  0xb3c8: 0x68,
  0xb3c9: 0x69,
  0xb3ca: 0x6a,
  0xb3cb: 0x6b,
  0xb3cc: 0x6c,
  0xb3cd: 0x6d,
  0xb3ce: 0x6e,
  0xb3cf: 0x6f,
  0xb3d0: 0x70,
  0xb3d1: 0x71,
  0xb3d2: 0x72,
  0xb3d3: 0x73,
  0xb3d4: 0x74,
  0xb3d5: 0x75,
  0xb3d6: 0x76,
  0xb3d7: 0x77,
  0xb3d8: 0x78,
  0xb3d9: 0x79,
  0xb3da: 0x7a,
  0xb3db: 0x7b,
  0xb3dc: 0x7c,
  0xb3dd: 0x7d,
  0xb3de: 0x7e,
  0xb3df: 0x7f,
  0xb3e0: 0x80
});

/***/ }),
/* 380 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = encode;
var MSB = 0x80,
    REST = 0x7F,
    MSBALL = ~REST,
    INT = Math.pow(2, 31);

function encode(num, out, offset) {
  out = out || [];
  offset = offset || 0;
  var oldOffset = offset;

  while (num >= INT) {
    out[offset++] = num & 0xFF | MSB;
    num /= 128;
  }

  while (num & MSBALL) {
    out[offset++] = num & 0xFF | MSB;
    num >>>= 7;
  }

  out[offset] = num | 0;
  encode.bytes = offset - oldOffset + 1;
  return out;
}

/***/ }),
/* 381 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = read;
var MSB = 0x80,
    REST = 0x7F;

function read(buf, offset) {
  var res = 0,
      offset = offset || 0,
      shift = 0,
      counter = offset,
      b,
      l = buf.length;

  do {
    if (counter >= l) {
      read.bytes = 0;
      throw new RangeError('Could not decode varint');
    }

    b = buf[counter++];
    res += shift < 28 ? (b & REST) << shift : (b & REST) * Math.pow(2, shift);
    shift += 7;
  } while (b >= MSB);

  read.bytes = counter - offset;
  return res;
}

/***/ }),
/* 382 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var N1 = Math.pow(2, 7);
var N2 = Math.pow(2, 14);
var N3 = Math.pow(2, 21);
var N4 = Math.pow(2, 28);
var N5 = Math.pow(2, 35);
var N6 = Math.pow(2, 42);
var N7 = Math.pow(2, 49);
var N8 = Math.pow(2, 56);
var N9 = Math.pow(2, 63);

module.exports = function (value) {
  return value < N1 ? 1 : value < N2 ? 2 : value < N3 ? 3 : value < N4 ? 4 : value < N5 ? 5 : value < N6 ? 6 : value < N7 ? 7 : value < N8 ? 8 : value < N9 ? 9 : 10;
};

/***/ }),
/* 383 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const Base = __webpack_require__(384);

const baseX = __webpack_require__(385);

const base16 = __webpack_require__(386);

const base32 = __webpack_require__(387);

const base64 = __webpack_require__(388); // name, code, implementation, alphabet


const constants = [['base1', '1', '', '1'], ['base2', '0', baseX, '01'], ['base8', '7', baseX, '01234567'], ['base10', '9', baseX, '0123456789'], ['base16', 'f', base16, '0123456789abcdef'], ['base32', 'b', base32, 'abcdefghijklmnopqrstuvwxyz234567'], ['base32pad', 'c', base32, 'abcdefghijklmnopqrstuvwxyz234567='], ['base32hex', 'v', base32, '0123456789abcdefghijklmnopqrstuv'], ['base32hexpad', 't', base32, '0123456789abcdefghijklmnopqrstuv='], ['base32z', 'h', base32, 'ybndrfg8ejkmcpqxot1uwisza345h769'], ['base58flickr', 'Z', baseX, '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'], ['base58btc', 'z', baseX, '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'], ['base64', 'm', base64, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'], ['base64pad', 'M', base64, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='], ['base64url', 'u', base64, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'], ['base64urlpad', 'U', base64, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=']];
const names = constants.reduce((prev, tupple) => {
  prev[tupple[0]] = new Base(tupple[0], tupple[1], tupple[2], tupple[3]);
  return prev;
}, {});
const codes = constants.reduce((prev, tupple) => {
  prev[tupple[1]] = names[tupple[0]];
  return prev;
}, {});
module.exports = {
  names: names,
  codes: codes
};

/***/ }),
/* 384 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


class Base {
  constructor(name, code, implementation, alphabet) {
    this.name = name;
    this.code = code;
    this.alphabet = alphabet;

    if (implementation && alphabet) {
      this.engine = implementation(alphabet);
    }
  }

  encode(stringOrBuffer) {
    return this.engine.encode(stringOrBuffer);
  }

  decode(stringOrBuffer) {
    return this.engine.decode(stringOrBuffer);
  }

  isImplemented() {
    return this.engine;
  }

}

module.exports = Base;

/***/ }),
/* 385 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// base-x encoding
// Forked from https://github.com/cryptocoinjs/bs58
// Originally written by Mike Hearn for BitcoinJ
// Copyright (c) 2011 Google Inc
// Ported to JavaScript by Stefan Thomas
// Merged Buffer refactorings from base58-native by Stephen Pair
// Copyright (c) 2013 BitPay Inc
var Buffer = __webpack_require__(6).Buffer;

module.exports = function base(ALPHABET) {
  var ALPHABET_MAP = {};
  var BASE = ALPHABET.length;
  var LEADER = ALPHABET.charAt(0); // pre-compute lookup table

  for (var z = 0; z < ALPHABET.length; z++) {
    var x = ALPHABET.charAt(z);
    if (ALPHABET_MAP[x] !== undefined) throw new TypeError(x + ' is ambiguous');
    ALPHABET_MAP[x] = z;
  }

  function encode(source) {
    if (source.length === 0) return '';
    var digits = [0];

    for (var i = 0; i < source.length; ++i) {
      for (var j = 0, carry = source[i]; j < digits.length; ++j) {
        carry += digits[j] << 8;
        digits[j] = carry % BASE;
        carry = carry / BASE | 0;
      }

      while (carry > 0) {
        digits.push(carry % BASE);
        carry = carry / BASE | 0;
      }
    }

    var string = ''; // deal with leading zeros

    for (var k = 0; source[k] === 0 && k < source.length - 1; ++k) string += LEADER; // convert digits to a string


    for (var q = digits.length - 1; q >= 0; --q) string += ALPHABET[digits[q]];

    return string;
  }

  function decodeUnsafe(string) {
    if (typeof string !== 'string') throw new TypeError('Expected String');
    if (string.length === 0) return Buffer.allocUnsafe(0);
    var bytes = [0];

    for (var i = 0; i < string.length; i++) {
      var value = ALPHABET_MAP[string[i]];
      if (value === undefined) return;

      for (var j = 0, carry = value; j < bytes.length; ++j) {
        carry += bytes[j] * BASE;
        bytes[j] = carry & 0xff;
        carry >>= 8;
      }

      while (carry > 0) {
        bytes.push(carry & 0xff);
        carry >>= 8;
      }
    } // deal with leading zeros


    for (var k = 0; string[k] === LEADER && k < string.length - 1; ++k) {
      bytes.push(0);
    }

    return Buffer.from(bytes.reverse());
  }

  function decode(string) {
    var buffer = decodeUnsafe(string);
    if (buffer) return buffer;
    throw new Error('Non-base' + BASE + ' character');
  }

  return {
    encode: encode,
    decodeUnsafe: decodeUnsafe,
    decode: decode
  };
};

/***/ }),
/* 386 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

module.exports = function base16(alphabet) {
  return {
    encode(input) {
      if (typeof input === 'string') {
        return Buffer.from(input).toString('hex');
      }

      return input.toString('hex');
    },

    decode(input) {
      for (let char of input) {
        if (alphabet.indexOf(char) < 0) {
          throw new Error('invalid base16 character');
        }
      }

      return Buffer.from(input, 'hex');
    }

  };
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 387 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

function decode(input, alphabet) {
  input = input.replace(new RegExp('=', 'g'), '');
  let length = input.length;
  let bits = 0;
  let value = 0;
  let index = 0;
  let output = new Uint8Array(length * 5 / 8 | 0);

  for (let i = 0; i < length; i++) {
    value = value << 5 | alphabet.indexOf(input[i]);
    bits += 5;

    if (bits >= 8) {
      output[index++] = value >>> bits - 8 & 255;
      bits -= 8;
    }
  }

  return output.buffer;
}

function encode(buffer, alphabet) {
  let length = buffer.byteLength;
  let view = new Uint8Array(buffer);
  let padding = alphabet.indexOf('=') === alphabet.length - 1;

  if (padding) {
    alphabet = alphabet.substring(0, alphabet.length - 2);
  }

  let bits = 0;
  let value = 0;
  let output = '';

  for (let i = 0; i < length; i++) {
    value = value << 8 | view[i];
    bits += 8;

    while (bits >= 5) {
      output += alphabet[value >>> bits - 5 & 31];
      bits -= 5;
    }
  }

  if (bits > 0) {
    output += alphabet[value << 5 - bits & 31];
  }

  if (padding) {
    while (output.length % 8 !== 0) {
      output += '=';
    }
  }

  return output;
}

module.exports = function base32(alphabet) {
  return {
    encode(input) {
      if (typeof input === 'string') {
        return encode(Buffer.from(input), alphabet);
      }

      return encode(input, alphabet);
    },

    decode(input) {
      for (let char of input) {
        if (alphabet.indexOf(char) < 0) {
          throw new Error('invalid base32 character');
        }
      }

      return decode(input, alphabet);
    }

  };
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 388 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

module.exports = function base64(alphabet) {
  // The alphabet is only used to know:
  //   1. If padding is enabled (must contain '=')
  //   2. If the output must be url-safe (must contain '-' and '_')
  //   3. If the input of the output function is valid
  // The alphabets from RFC 4648 are always used.
  const padding = alphabet.indexOf('=') > -1;
  const url = alphabet.indexOf('-') > -1 && alphabet.indexOf('_') > -1;
  return {
    encode(input) {
      let output = '';

      if (typeof input === 'string') {
        output = Buffer.from(input).toString('base64');
      } else {
        output = input.toString('base64');
      }

      if (url) {
        output = output.replace(/\+/g, '-').replace(/\//g, '_');
      }

      const pad = output.indexOf('=');

      if (pad > 0 && !padding) {
        output = output.substring(0, pad);
      }

      return output;
    },

    decode(input) {
      for (let char of input) {
        if (alphabet.indexOf(char) < 0) {
          throw new Error('invalid base64 character');
        }
      }

      return Buffer.from(input, 'base64');
    }

  };
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 389 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const baseTable = __webpack_require__(72); // map for hexString -> codecName


const nameTable = new Map();

for (const encodingName in baseTable) {
  const code = baseTable[encodingName];
  nameTable.set(code, encodingName);
}

module.exports = Object.freeze(nameTable);

/***/ }),
/* 390 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const baseTable = __webpack_require__(72);

const varintEncode = __webpack_require__(197).varintEncode; // map for codecName -> codeVarintBuffer


const varintTable = {};

for (const encodingName in baseTable) {
  const code = baseTable[encodingName];
  varintTable[encodingName] = varintEncode(code);
}

module.exports = Object.freeze(varintTable);

/***/ }),
/* 391 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const table = __webpack_require__(72); // map for codecConstant -> code


const constants = {};

for (const [name, code] of Object.entries(table)) {
  constants[name.toUpperCase().replace(/-/g, '_')] = code;
}

module.exports = Object.freeze(constants);

/***/ }),
/* 392 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const table = __webpack_require__(72); // map for code -> print friendly name


const tableByCode = {};

for (const [name, code] of Object.entries(table)) {
  if (tableByCode[code] === undefined) tableByCode[code] = name;
}

module.exports = Object.freeze(tableByCode);

/***/ }),
/* 393 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const mh = __webpack_require__(16);

var CIDUtil = {
  /**
   * Test if the given input is a valid CID object.
   * Returns an error message if it is not.
   * Returns undefined if it is a valid CID.
   *
   * @param {any} other
   * @returns {string}
   */
  checkCIDComponents: function checkCIDComponents(other) {
    if (other == null) {
      return 'null values are not valid CIDs';
    }

    if (!(other.version === 0 || other.version === 1)) {
      return 'Invalid version, must be a number equal to 1 or 0';
    }

    if (typeof other.codec !== 'string') {
      return 'codec must be string';
    }

    if (other.version === 0) {
      if (other.codec !== 'dag-pb') {
        return "codec must be 'dag-pb' for CIDv0";
      }

      if (other.multibaseName !== 'base58btc') {
        return "multibaseName must be 'base58btc' for CIDv0";
      }
    }

    if (!Buffer.isBuffer(other.multihash)) {
      return 'multihash must be a Buffer';
    }

    try {
      mh.validate(other.multihash);
    } catch (err) {
      let errorMsg = err.message;

      if (!errorMsg) {
        // Just in case mh.validate() throws an error with empty error message
        errorMsg = 'Multihash validation failed';
      }

      return errorMsg;
    }
  }
};
module.exports = CIDUtil;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 394 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var parse = __webpack_require__(395);

var stringify = __webpack_require__(397);

module.exports = parse;
module.exports.parse = parse;
module.exports.stringify = stringify;

/***/ }),
/* 395 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var tokenize = __webpack_require__(396);

var MAX_RANGE = 0x1FFFFFFF; // "Only repeated fields of primitive numeric types (types which use the varint, 32-bit, or 64-bit wire types) can be declared "packed"."
// https://developers.google.com/protocol-buffers/docs/encoding#optional

var PACKABLE_TYPES = [// varint wire types
'int32', 'int64', 'uint32', 'uint64', 'sint32', 'sint64', 'bool', // + ENUMS
// 64-bit wire types
'fixed64', 'sfixed64', 'double', // 32-bit wire types
'fixed32', 'sfixed32', 'float'];

var onfieldoptions = function onfieldoptions(tokens) {
  var opts = {};

  while (tokens.length) {
    switch (tokens[0]) {
      case '[':
      case ',':
        tokens.shift();
        var name = tokens.shift();

        if (name === '(') {
          // handling [(A) = B]
          name = tokens.shift();
          tokens.shift(); // remove the end of bracket
        }

        if (tokens[0] !== '=') throw new Error('Unexpected token in field options: ' + tokens[0]);
        tokens.shift();
        if (tokens[0] === ']') throw new Error('Unexpected ] in field option');
        opts[name] = tokens.shift();
        break;

      case ']':
        tokens.shift();
        return opts;

      default:
        throw new Error('Unexpected token in field options: ' + tokens[0]);
    }
  }

  throw new Error('No closing tag for field options');
};

var onfield = function onfield(tokens) {
  var field = {
    name: null,
    type: null,
    tag: -1,
    map: null,
    oneof: null,
    required: false,
    repeated: false,
    options: {}
  };

  while (tokens.length) {
    switch (tokens[0]) {
      case '=':
        tokens.shift();
        field.tag = Number(tokens.shift());
        break;

      case 'map':
        field.type = 'map';
        field.map = {
          from: null,
          to: null
        };
        tokens.shift();
        if (tokens[0] !== '<') throw new Error('Unexpected token in map type: ' + tokens[0]);
        tokens.shift();
        field.map.from = tokens.shift();
        if (tokens[0] !== ',') throw new Error('Unexpected token in map type: ' + tokens[0]);
        tokens.shift();
        field.map.to = tokens.shift();
        if (tokens[0] !== '>') throw new Error('Unexpected token in map type: ' + tokens[0]);
        tokens.shift();
        field.name = tokens.shift();
        break;

      case 'repeated':
      case 'required':
      case 'optional':
        var t = tokens.shift();
        field.required = t === 'required';
        field.repeated = t === 'repeated';
        field.type = tokens.shift();
        field.name = tokens.shift();
        break;

      case '[':
        field.options = onfieldoptions(tokens);
        break;

      case ';':
        if (field.name === null) throw new Error('Missing field name');
        if (field.type === null) throw new Error('Missing type in message field: ' + field.name);
        if (field.tag === -1) throw new Error('Missing tag number in message field: ' + field.name);
        tokens.shift();
        return field;

      default:
        throw new Error('Unexpected token in message field: ' + tokens[0]);
    }
  }

  throw new Error('No ; found for message field');
};

var onmessagebody = function onmessagebody(tokens) {
  var body = {
    enums: [],
    options: {},
    messages: [],
    fields: [],
    extends: [],
    extensions: null
  };

  while (tokens.length) {
    switch (tokens[0]) {
      case 'map':
      case 'repeated':
      case 'optional':
      case 'required':
        body.fields.push(onfield(tokens));
        break;

      case 'enum':
        body.enums.push(onenum(tokens));
        break;

      case 'message':
        body.messages.push(onmessage(tokens));
        break;

      case 'extensions':
        body.extensions = onextensions(tokens);
        break;

      case 'oneof':
        tokens.shift();
        var name = tokens.shift();
        if (tokens[0] !== '{') throw new Error('Unexpected token in oneof: ' + tokens[0]);
        tokens.shift();

        while (tokens[0] !== '}') {
          tokens.unshift('optional');
          var field = onfield(tokens);
          field.oneof = name;
          body.fields.push(field);
        }

        tokens.shift();
        break;

      case 'extend':
        body.extends.push(onextend(tokens));
        break;

      case ';':
        tokens.shift();
        break;

      case 'reserved':
        tokens.shift();

        while (tokens[0] !== ';') {
          tokens.shift();
        }

        break;

      case 'option':
        var opt = onoption(tokens);
        if (body.options[opt.name] !== undefined) throw new Error('Duplicate option ' + opt.name);
        body.options[opt.name] = opt.value;
        break;

      default:
        // proto3 does not require the use of optional/required, assumed as optional
        // "singular: a well-formed message can have zero or one of this field (but not more than one)."
        // https://developers.google.com/protocol-buffers/docs/proto3#specifying-field-rules
        tokens.unshift('optional');
        body.fields.push(onfield(tokens));
    }
  }

  return body;
};

var onextend = function onextend(tokens) {
  var out = {
    name: tokens[1],
    message: onmessage(tokens)
  };
  return out;
};

var onextensions = function onextensions(tokens) {
  tokens.shift();
  var from = Number(tokens.shift());
  if (isNaN(from)) throw new Error('Invalid from in extensions definition');
  if (tokens.shift() !== 'to') throw new Error("Expected keyword 'to' in extensions definition");
  var to = tokens.shift();
  if (to === 'max') to = MAX_RANGE;
  to = Number(to);
  if (isNaN(to)) throw new Error('Invalid to in extensions definition');
  if (tokens.shift() !== ';') throw new Error('Missing ; in extensions definition');
  return {
    from: from,
    to: to
  };
};

var onmessage = function onmessage(tokens) {
  tokens.shift();
  var lvl = 1;
  var body = [];
  var msg = {
    name: tokens.shift(),
    options: {},
    enums: [],
    extends: [],
    messages: [],
    fields: []
  };
  if (tokens[0] !== '{') throw new Error('Expected { but found ' + tokens[0]);
  tokens.shift();

  while (tokens.length) {
    if (tokens[0] === '{') lvl++;else if (tokens[0] === '}') lvl--;

    if (!lvl) {
      tokens.shift();
      body = onmessagebody(body);
      msg.enums = body.enums;
      msg.messages = body.messages;
      msg.fields = body.fields;
      msg.extends = body.extends;
      msg.extensions = body.extensions;
      msg.options = body.options;
      return msg;
    }

    body.push(tokens.shift());
  }

  if (lvl) throw new Error('No closing tag for message');
};

var onpackagename = function onpackagename(tokens) {
  tokens.shift();
  var name = tokens.shift();
  if (tokens[0] !== ';') throw new Error('Expected ; but found ' + tokens[0]);
  tokens.shift();
  return name;
};

var onsyntaxversion = function onsyntaxversion(tokens) {
  tokens.shift();
  if (tokens[0] !== '=') throw new Error('Expected = but found ' + tokens[0]);
  tokens.shift();
  var version = tokens.shift();

  switch (version) {
    case '"proto2"':
      version = 2;
      break;

    case '"proto3"':
      version = 3;
      break;

    default:
      throw new Error('Expected protobuf syntax version but found ' + version);
  }

  if (tokens[0] !== ';') throw new Error('Expected ; but found ' + tokens[0]);
  tokens.shift();
  return version;
};

var onenumvalue = function onenumvalue(tokens) {
  if (tokens.length < 4) throw new Error('Invalid enum value: ' + tokens.slice(0, 3).join(' '));
  if (tokens[1] !== '=') throw new Error('Expected = but found ' + tokens[1]);
  if (tokens[3] !== ';' && tokens[3] !== '[') throw new Error('Expected ; or [ but found ' + tokens[1]);
  var name = tokens.shift();
  tokens.shift();
  var val = {
    value: null,
    options: {}
  };
  val.value = Number(tokens.shift());

  if (tokens[0] === '[') {
    val.options = onfieldoptions(tokens);
  }

  tokens.shift(); // expecting the semicolon here

  return {
    name: name,
    val: val
  };
};

var onenum = function onenum(tokens) {
  tokens.shift();
  var options = {};
  var e = {
    name: tokens.shift(),
    values: {},
    options: {}
  };
  if (tokens[0] !== '{') throw new Error('Expected { but found ' + tokens[0]);
  tokens.shift();

  while (tokens.length) {
    if (tokens[0] === '}') {
      tokens.shift(); // there goes optional semicolon after the enclosing "}"

      if (tokens[0] === ';') tokens.shift();
      return e;
    }

    if (tokens[0] === 'option') {
      options = onoption(tokens);
      e.options[options.name] = options.value;
      continue;
    }

    var val = onenumvalue(tokens);
    e.values[val.name] = val.val;
  }

  throw new Error('No closing tag for enum');
};

var onoption = function onoption(tokens) {
  var name = null;
  var value = null;

  var parse = function parse(value) {
    if (value === 'true') return true;
    if (value === 'false') return false;
    return value.replace(/^"+|"+$/gm, '');
  };

  while (tokens.length) {
    if (tokens[0] === ';') {
      tokens.shift();
      return {
        name: name,
        value: value
      };
    }

    switch (tokens[0]) {
      case 'option':
        tokens.shift();
        var hasBracket = tokens[0] === '(';
        if (hasBracket) tokens.shift();
        name = tokens.shift();

        if (hasBracket) {
          if (tokens[0] !== ')') throw new Error('Expected ) but found ' + tokens[0]);
          tokens.shift();
        }

        if (tokens[0][0] === '.') {
          name += tokens.shift();
        }

        break;

      case '=':
        tokens.shift();
        if (name === null) throw new Error('Expected key for option with value: ' + tokens[0]);
        value = parse(tokens.shift());

        if (name === 'optimize_for' && !/^(SPEED|CODE_SIZE|LITE_RUNTIME)$/.test(value)) {
          throw new Error('Unexpected value for option optimize_for: ' + value);
        } else if (value === '{') {
          // option foo = {bar: baz}
          value = onoptionMap(tokens);
        }

        break;

      default:
        throw new Error('Unexpected token in option: ' + tokens[0]);
    }
  }
};

var onoptionMap = function onoptionMap(tokens) {
  var parse = function parse(value) {
    if (value === 'true') return true;
    if (value === 'false') return false;
    return value.replace(/^"+|"+$/gm, '');
  };

  var map = {};

  while (tokens.length) {
    if (tokens[0] === '}') {
      tokens.shift();
      return map;
    }

    var hasBracket = tokens[0] === '(';
    if (hasBracket) tokens.shift();
    var key = tokens.shift();

    if (hasBracket) {
      if (tokens[0] !== ')') throw new Error('Expected ) but found ' + tokens[0]);
      tokens.shift();
    }

    var value = null;

    switch (tokens[0]) {
      case ':':
        if (map[key] !== undefined) throw new Error('Duplicate option map key ' + key);
        tokens.shift();
        value = parse(tokens.shift());

        if (value === '{') {
          // option foo = {bar: baz}
          value = onoptionMap(tokens);
        }

        map[key] = value;

        if (tokens[0] === ';') {
          tokens.shift();
        }

        break;

      case '{':
        tokens.shift();
        value = onoptionMap(tokens);
        if (map[key] === undefined) map[key] = [];
        if (!Array.isArray(map[key])) throw new Error('Duplicate option map key ' + key);
        map[key].push(value);
        break;

      default:
        throw new Error('Unexpected token in option map: ' + tokens[0]);
    }
  }

  throw new Error('No closing tag for option map');
};

var onimport = function onimport(tokens) {
  tokens.shift();
  var file = tokens.shift().replace(/^"+|"+$/gm, '');
  if (tokens[0] !== ';') throw new Error('Unexpected token: ' + tokens[0] + '. Expected ";"');
  tokens.shift();
  return file;
};

var onservice = function onservice(tokens) {
  tokens.shift();
  var service = {
    name: tokens.shift(),
    methods: [],
    options: {}
  };
  if (tokens[0] !== '{') throw new Error('Expected { but found ' + tokens[0]);
  tokens.shift();

  while (tokens.length) {
    if (tokens[0] === '}') {
      tokens.shift(); // there goes optional semicolon after the enclosing "}"

      if (tokens[0] === ';') tokens.shift();
      return service;
    }

    switch (tokens[0]) {
      case 'option':
        var opt = onoption(tokens);
        if (service.options[opt.name] !== undefined) throw new Error('Duplicate option ' + opt.name);
        service.options[opt.name] = opt.value;
        break;

      case 'rpc':
        service.methods.push(onrpc(tokens));
        break;

      default:
        throw new Error('Unexpected token in service: ' + tokens[0]);
    }
  }

  throw new Error('No closing tag for service');
};

var onrpc = function onrpc(tokens) {
  tokens.shift();
  var rpc = {
    name: tokens.shift(),
    input_type: null,
    output_type: null,
    client_streaming: false,
    server_streaming: false,
    options: {}
  };
  if (tokens[0] !== '(') throw new Error('Expected ( but found ' + tokens[0]);
  tokens.shift();

  if (tokens[0] === 'stream') {
    tokens.shift();
    rpc.client_streaming = true;
  }

  rpc.input_type = tokens.shift();
  if (tokens[0] !== ')') throw new Error('Expected ) but found ' + tokens[0]);
  tokens.shift();
  if (tokens[0] !== 'returns') throw new Error('Expected returns but found ' + tokens[0]);
  tokens.shift();
  if (tokens[0] !== '(') throw new Error('Expected ( but found ' + tokens[0]);
  tokens.shift();

  if (tokens[0] === 'stream') {
    tokens.shift();
    rpc.server_streaming = true;
  }

  rpc.output_type = tokens.shift();
  if (tokens[0] !== ')') throw new Error('Expected ) but found ' + tokens[0]);
  tokens.shift();

  if (tokens[0] === ';') {
    tokens.shift();
    return rpc;
  }

  if (tokens[0] !== '{') throw new Error('Expected { but found ' + tokens[0]);
  tokens.shift();

  while (tokens.length) {
    if (tokens[0] === '}') {
      tokens.shift(); // there goes optional semicolon after the enclosing "}"

      if (tokens[0] === ';') tokens.shift();
      return rpc;
    }

    if (tokens[0] === 'option') {
      var opt = onoption(tokens);
      if (rpc.options[opt.name] !== undefined) throw new Error('Duplicate option ' + opt.name);
      rpc.options[opt.name] = opt.value;
    } else {
      throw new Error('Unexpected token in rpc options: ' + tokens[0]);
    }
  }

  throw new Error('No closing tag for rpc');
};

var parse = function parse(buf) {
  var tokens = tokenize(buf.toString()); // check for isolated strings in tokens by looking for opening quote

  for (var i = 0; i < tokens.length; i++) {
    if (/^("|')([^'"]*)$/.test(tokens[i])) {
      var j;

      if (tokens[i].length === 1) {
        j = i + 1;
      } else {
        j = i;
      } // look ahead for the closing quote and collapse all
      // in-between tokens into a single token


      for (j; j < tokens.length; j++) {
        if (/^[^'"\\]*(?:\\.[^'"\\]*)*("|')$/.test(tokens[j])) {
          tokens = tokens.slice(0, i).concat(tokens.slice(i, j + 1).join('')).concat(tokens.slice(j + 1));
          break;
        }
      }
    }
  }

  var schema = {
    syntax: 3,
    package: null,
    imports: [],
    enums: [],
    messages: [],
    options: {},
    extends: []
  };
  var firstline = true;

  while (tokens.length) {
    switch (tokens[0]) {
      case 'package':
        schema.package = onpackagename(tokens);
        break;

      case 'syntax':
        if (!firstline) throw new Error('Protobuf syntax version should be first thing in file');
        schema.syntax = onsyntaxversion(tokens);
        break;

      case 'message':
        schema.messages.push(onmessage(tokens));
        break;

      case 'enum':
        schema.enums.push(onenum(tokens));
        break;

      case 'option':
        var opt = onoption(tokens);
        if (schema.options[opt.name]) throw new Error('Duplicate option ' + opt.name);
        schema.options[opt.name] = opt.value;
        break;

      case 'import':
        schema.imports.push(onimport(tokens));
        break;

      case 'extend':
        schema.extends.push(onextend(tokens));
        break;

      case 'service':
        if (!schema.services) schema.services = [];
        schema.services.push(onservice(tokens));
        break;

      default:
        throw new Error('Unexpected token: ' + tokens[0]);
    }

    firstline = false;
  } // now iterate over messages and propagate extends


  schema.extends.forEach(function (ext) {
    schema.messages.forEach(function (msg) {
      if (msg.name === ext.name) {
        ext.message.fields.forEach(function (field) {
          if (!msg.extensions || field.tag < msg.extensions.from || field.tag > msg.extensions.to) {
            throw new Error(msg.name + ' does not declare ' + field.tag + ' as an extension number');
          }

          msg.fields.push(field);
        });
      }
    });
  });
  schema.messages.forEach(function (msg) {
    msg.fields.forEach(function (field) {
      var fieldSplit;
      var messageName;
      var nestedEnumName;
      var message;

      function enumNameIsFieldType(en) {
        return en.name === field.type;
      }

      function enumNameIsNestedEnumName(en) {
        return en.name === nestedEnumName;
      }

      if (field.options && field.options.packed === 'true') {
        if (PACKABLE_TYPES.indexOf(field.type) === -1) {
          // let's see if it's an enum
          if (field.type.indexOf('.') === -1) {
            if (msg.enums && msg.enums.some(enumNameIsFieldType)) {
              return;
            }
          } else {
            fieldSplit = field.type.split('.');

            if (fieldSplit.length > 2) {
              throw new Error('what is this?');
            }

            messageName = fieldSplit[0];
            nestedEnumName = fieldSplit[1];
            schema.messages.some(function (msg) {
              if (msg.name === messageName) {
                message = msg;
                return msg;
              }
            });

            if (message && message.enums && message.enums.some(enumNameIsNestedEnumName)) {
              return;
            }
          }

          throw new Error('Fields of type ' + field.type + ' cannot be declared [packed=true]. ' + 'Only repeated fields of primitive numeric types (types which use ' + 'the varint, 32-bit, or 64-bit wire types) can be declared "packed". ' + 'See https://developers.google.com/protocol-buffers/docs/encoding#optional');
        }
      }
    });
  });
  return schema;
};

module.exports = parse;

/***/ }),
/* 396 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (sch) {
  var noComments = function noComments(line) {
    var i = line.indexOf('//');
    return i > -1 ? line.slice(0, i) : line;
  };

  var noMultilineComments = function noMultilineComments() {
    var inside = false;
    return function (token) {
      if (token === '/*') {
        inside = true;
        return false;
      }

      if (token === '*/') {
        inside = false;
        return false;
      }

      return !inside;
    };
  };

  var trim = function trim(line) {
    return line.trim();
  };

  return sch.replace(/([;,{}()=:[\]<>]|\/\*|\*\/)/g, ' $1 ').split(/\n/).map(trim).filter(Boolean).map(noComments).map(trim).filter(Boolean).join('\n').split(/\s+|\n+/gm).filter(noMultilineComments());
};

/***/ }),
/* 397 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var onfield = function onfield(f, result) {
  var prefix = f.repeated ? 'repeated' : f.required ? 'required' : 'optional';
  if (f.type === 'map') prefix = 'map<' + f.map.from + ',' + f.map.to + '>';
  if (f.oneof) prefix = '';
  var opts = Object.keys(f.options || {}).map(function (key) {
    return key + ' = ' + f.options[key];
  }).join(',');
  if (opts) opts = ' [' + opts + ']';
  result.push((prefix ? prefix + ' ' : '') + (f.map === 'map' ? '' : f.type + ' ') + f.name + ' = ' + f.tag + opts + ';');
  return result;
};

var onmessage = function onmessage(m, result) {
  result.push('message ' + m.name + ' {');
  if (!m.options) m.options = {};
  onoption(m.options, result);
  if (!m.enums) m.enums = [];
  m.enums.forEach(function (e) {
    result.push(onenum(e, []));
  });
  if (!m.messages) m.messages = [];
  m.messages.forEach(function (m) {
    result.push(onmessage(m, []));
  });
  var oneofs = {};
  if (!m.fields) m.fields = [];
  m.fields.forEach(function (f) {
    if (f.oneof) {
      if (!oneofs[f.oneof]) oneofs[f.oneof] = [];
      oneofs[f.oneof].push(onfield(f, []));
    } else {
      result.push(onfield(f, []));
    }
  });
  Object.keys(oneofs).forEach(function (n) {
    oneofs[n].unshift('oneof ' + n + ' {');
    oneofs[n].push('}');
    result.push(oneofs[n]);
  });
  result.push('}', '');
  return result;
};

var onenum = function onenum(e, result) {
  result.push('enum ' + e.name + ' {');
  if (!e.options) e.options = {};
  var options = onoption(e.options, []);

  if (options.length > 1) {
    result.push(options.slice(0, -1));
  }

  Object.keys(e.values).map(function (v) {
    var val = onenumvalue(e.values[v]);
    result.push([v + ' = ' + val + ';']);
  });
  result.push('}', '');
  return result;
};

var onenumvalue = function onenumvalue(v, result) {
  var opts = Object.keys(v.options || {}).map(function (key) {
    return key + ' = ' + v.options[key];
  }).join(',');
  if (opts) opts = ' [' + opts + ']';
  var val = v.value + opts;
  return val;
};

var onoption = function onoption(o, result) {
  var keys = Object.keys(o);
  keys.forEach(function (option) {
    var v = o[option];
    if (~option.indexOf('.')) option = '(' + option + ')';
    var type = typeof v;

    if (type === 'object') {
      v = onoptionMap(v, []);
      if (v.length) result.push('option ' + option + ' = {', v, '};');
    } else {
      if (type === 'string' && option !== 'optimize_for') v = '"' + v + '"';
      result.push('option ' + option + ' = ' + v + ';');
    }
  });

  if (keys.length > 0) {
    result.push('');
  }

  return result;
};

var onoptionMap = function onoptionMap(o, result) {
  var keys = Object.keys(o);
  keys.forEach(function (k) {
    var v = o[k];
    var type = typeof v;

    if (type === 'object') {
      if (Array.isArray(v)) {
        v.forEach(function (v) {
          v = onoptionMap(v, []);
          if (v.length) result.push(k + ' {', v, '}');
        });
      } else {
        v = onoptionMap(v, []);
        if (v.length) result.push(k + ' {', v, '}');
      }
    } else {
      if (type === 'string') v = '"' + v + '"';
      result.push(k + ': ' + v);
    }
  });
  return result;
};

var onservices = function onservices(s, result) {
  result.push('service ' + s.name + ' {');
  if (!s.options) s.options = {};
  onoption(s.options, result);
  if (!s.methods) s.methods = [];
  s.methods.forEach(function (m) {
    result.push(onrpc(m, []));
  });
  result.push('}', '');
  return result;
};

var onrpc = function onrpc(rpc, result) {
  var def = 'rpc ' + rpc.name + '(';
  if (rpc.client_streaming) def += 'stream ';
  def += rpc.input_type + ') returns (';
  if (rpc.server_streaming) def += 'stream ';
  def += rpc.output_type + ')';
  if (!rpc.options) rpc.options = {};
  var options = onoption(rpc.options, []);

  if (options.length > 1) {
    result.push(def + ' {', options.slice(0, -1), '}');
  } else {
    result.push(def + ';');
  }

  return result;
};

var indent = function indent(lvl) {
  return function (line) {
    if (Array.isArray(line)) return line.map(indent(lvl + '  ')).join('\n');
    return lvl + line;
  };
};

module.exports = function (schema) {
  var result = [];
  result.push('syntax = "proto' + schema.syntax + '";', '');
  if (schema.package) result.push('package ' + schema.package + ';', '');
  if (!schema.options) schema.options = {};
  onoption(schema.options, result);
  if (!schema.enums) schema.enums = [];
  schema.enums.forEach(function (e) {
    onenum(e, result);
  });
  if (!schema.messages) schema.messages = [];
  schema.messages.forEach(function (m) {
    onmessage(m, result);
  });

  if (schema.services) {
    schema.services.forEach(function (s) {
      onservices(s, result);
    });
  }

  return result.map(indent('')).join('\n');
};

/***/ }),
/* 398 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var encodings = __webpack_require__(399);

var compileDecode = __webpack_require__(401);

var compileEncode = __webpack_require__(402);

var compileEncodingLength = __webpack_require__(403);

var varint = __webpack_require__(19);

var flatten = function flatten(values) {
  if (!values) return null;
  var result = {};
  Object.keys(values).forEach(function (k) {
    result[k] = values[k].value;
  });
  return result;
};

module.exports = function (schema, extraEncodings) {
  var messages = {};
  var enums = {};
  var cache = {};

  var visit = function visit(schema, prefix) {
    if (schema.enums) {
      schema.enums.forEach(function (e) {
        e.id = prefix + (prefix ? '.' : '') + e.name;
        enums[e.id] = e;
        visit(e, e.id);
      });
    }

    if (schema.messages) {
      schema.messages.forEach(function (m) {
        m.id = prefix + (prefix ? '.' : '') + m.name;
        messages[m.id] = m;
        m.fields.forEach(function (f) {
          if (!f.map) return;
          var name = 'Map_' + f.map.from + '_' + f.map.to;
          var map = {
            name: name,
            enums: [],
            messages: [],
            fields: [{
              name: 'key',
              type: f.map.from,
              tag: 1,
              repeated: false,
              required: true
            }, {
              name: 'value',
              type: f.map.to,
              tag: 2,
              repeated: false,
              required: false
            }],
            extensions: null,
            id: prefix + (prefix ? '.' : '') + name
          };

          if (!messages[map.id]) {
            messages[map.id] = map;
            schema.messages.push(map);
          }

          f.type = name;
          f.repeated = true;
        });
        visit(m, m.id);
      });
    }
  };

  visit(schema, '');

  var compileEnum = function compileEnum(e) {
    var values = Object.keys(e.values || []).map(function (k) {
      return parseInt(e.values[k].value, 10);
    });

    var encode = function encode(val, buf, offset) {
      if (!values.length || values.indexOf(val) === -1) {
        throw new Error('Invalid enum value: ' + val);
      }

      varint.encode(val, buf, offset);
      encode.bytes = varint.encode.bytes;
      return buf;
    };

    var decode = function decode(buf, offset) {
      var val = varint.decode(buf, offset);

      if (!values.length || values.indexOf(val) === -1) {
        throw new Error('Invalid enum value: ' + val);
      }

      decode.bytes = varint.decode.bytes;
      return val;
    };

    return encodings.make(0, encode, decode, varint.encodingLength);
  };

  var compileMessage = function compileMessage(m, exports) {
    m.messages.forEach(function (nested) {
      exports[nested.name] = resolve(nested.name, m.id);
    });
    m.enums.forEach(function (val) {
      exports[val.name] = flatten(val.values);
    });
    exports.type = 2;
    exports.message = true;
    exports.name = m.name;
    var oneofs = {};
    m.fields.forEach(function (f) {
      if (!f.oneof) return;
      if (!oneofs[f.oneof]) oneofs[f.oneof] = [];
      oneofs[f.oneof].push(f.name);
    });
    var enc = m.fields.map(function (f) {
      return resolve(f.type, m.id);
    });
    var encodingLength = compileEncodingLength(m, enc, oneofs);
    var encode = compileEncode(m, resolve, enc, oneofs, encodingLength);
    var decode = compileDecode(m, resolve, enc); // end of compilation - return all the things

    encode.bytes = decode.bytes = 0;
    exports.buffer = true;
    exports.encode = encode;
    exports.decode = decode;
    exports.encodingLength = encodingLength;
    return exports;
  };

  var resolve = function resolve(name, from, compile) {
    if (extraEncodings && extraEncodings[name]) return extraEncodings[name];
    if (encodings[name]) return encodings[name];
    var m = (from ? from + '.' + name : name).split('.').map(function (part, i, list) {
      return list.slice(0, i).concat(name).join('.');
    }).reverse().reduce(function (result, id) {
      return result || messages[id] || enums[id];
    }, null);
    if (compile === false) return m;
    if (!m) throw new Error('Could not resolve ' + name);
    if (m.values) return compileEnum(m);
    var res = cache[m.id] || compileMessage(m, cache[m.id] = {});
    return res;
  };

  return (schema.enums || []).concat((schema.messages || []).map(function (message) {
    return resolve(message.id);
  }));
};

/***/ }),
/* 399 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var varint = __webpack_require__(19);

var svarint = __webpack_require__(400);

var Buffer = __webpack_require__(6).Buffer;

var encoder = function encoder(type, encode, decode, encodingLength) {
  encode.bytes = decode.bytes = 0;
  return {
    type: type,
    encode: encode,
    decode: decode,
    encodingLength: encodingLength
  };
};

exports.make = encoder;

exports.bytes = function (tag) {
  var bufferLength = function bufferLength(val) {
    return Buffer.isBuffer(val) ? val.length : Buffer.byteLength(val);
  };

  var encodingLength = function encodingLength(val) {
    var len = bufferLength(val);
    return varint.encodingLength(len) + len;
  };

  var encode = function encode(val, buffer, offset) {
    var oldOffset = offset;
    var len = bufferLength(val);
    varint.encode(len, buffer, offset);
    offset += varint.encode.bytes;
    if (Buffer.isBuffer(val)) val.copy(buffer, offset);else buffer.write(val, offset, len);
    offset += len;
    encode.bytes = offset - oldOffset;
    return buffer;
  };

  var decode = function decode(buffer, offset) {
    var oldOffset = offset;
    var len = varint.decode(buffer, offset);
    offset += varint.decode.bytes;
    var val = buffer.slice(offset, offset + len);
    offset += val.length;
    decode.bytes = offset - oldOffset;
    return val;
  };

  return encoder(2, encode, decode, encodingLength);
}();

exports.string = function () {
  var encodingLength = function encodingLength(val) {
    var len = Buffer.byteLength(val);
    return varint.encodingLength(len) + len;
  };

  var encode = function encode(val, buffer, offset) {
    var oldOffset = offset;
    var len = Buffer.byteLength(val);
    varint.encode(len, buffer, offset, 'utf-8');
    offset += varint.encode.bytes;
    buffer.write(val, offset, len);
    offset += len;
    encode.bytes = offset - oldOffset;
    return buffer;
  };

  var decode = function decode(buffer, offset) {
    var oldOffset = offset;
    var len = varint.decode(buffer, offset);
    offset += varint.decode.bytes;
    var val = buffer.toString('utf-8', offset, offset + len);
    offset += len;
    decode.bytes = offset - oldOffset;
    return val;
  };

  return encoder(2, encode, decode, encodingLength);
}();

exports.bool = function () {
  var encodingLength = function encodingLength(val) {
    return 1;
  };

  var encode = function encode(val, buffer, offset) {
    buffer[offset] = val ? 1 : 0;
    encode.bytes = 1;
    return buffer;
  };

  var decode = function decode(buffer, offset) {
    var bool = buffer[offset] > 0;
    decode.bytes = 1;
    return bool;
  };

  return encoder(0, encode, decode, encodingLength);
}();

exports.int32 = function () {
  var decode = function decode(buffer, offset) {
    var val = varint.decode(buffer, offset);
    decode.bytes = varint.decode.bytes;
    return val > 2147483647 ? val - 4294967296 : val;
  };

  var encode = function encode(val, buffer, offset) {
    varint.encode(val < 0 ? val + 4294967296 : val, buffer, offset);
    encode.bytes = varint.encode.bytes;
    return buffer;
  };

  var encodingLength = function encodingLength(val) {
    return varint.encodingLength(val < 0 ? val + 4294967296 : val);
  };

  return encoder(0, encode, decode, encodingLength);
}();

exports.int64 = function () {
  var decode = function decode(buffer, offset) {
    var val = varint.decode(buffer, offset);

    if (val >= Math.pow(2, 63)) {
      var limit = 9;

      while (buffer[offset + limit - 1] === 0xff) limit--;

      limit = limit || 9;
      var subset = Buffer.allocUnsafe(limit);
      buffer.copy(subset, 0, offset, offset + limit);
      subset[limit - 1] = subset[limit - 1] & 0x7f;
      val = -1 * varint.decode(subset, 0);
      decode.bytes = 10;
    } else {
      decode.bytes = varint.decode.bytes;
    }

    return val;
  };

  var encode = function encode(val, buffer, offset) {
    if (val < 0) {
      var last = offset + 9;
      varint.encode(val * -1, buffer, offset);
      offset += varint.encode.bytes - 1;
      buffer[offset] = buffer[offset] | 0x80;

      while (offset < last - 1) {
        offset++;
        buffer[offset] = 0xff;
      }

      buffer[last] = 0x01;
      encode.bytes = 10;
    } else {
      varint.encode(val, buffer, offset);
      encode.bytes = varint.encode.bytes;
    }

    return buffer;
  };

  var encodingLength = function encodingLength(val) {
    return val < 0 ? 10 : varint.encodingLength(val);
  };

  return encoder(0, encode, decode, encodingLength);
}();

exports.sint32 = exports.sint64 = function () {
  return encoder(0, svarint.encode, svarint.decode, svarint.encodingLength);
}();

exports.uint32 = exports.uint64 = exports.enum = exports.varint = function () {
  return encoder(0, varint.encode, varint.decode, varint.encodingLength);
}(); // we cannot represent these in javascript so we just use buffers


exports.fixed64 = exports.sfixed64 = function () {
  var encodingLength = function encodingLength(val) {
    return 8;
  };

  var encode = function encode(val, buffer, offset) {
    val.copy(buffer, offset);
    encode.bytes = 8;
    return buffer;
  };

  var decode = function decode(buffer, offset) {
    var val = buffer.slice(offset, offset + 8);
    decode.bytes = 8;
    return val;
  };

  return encoder(1, encode, decode, encodingLength);
}();

exports.double = function () {
  var encodingLength = function encodingLength(val) {
    return 8;
  };

  var encode = function encode(val, buffer, offset) {
    buffer.writeDoubleLE(val, offset);
    encode.bytes = 8;
    return buffer;
  };

  var decode = function decode(buffer, offset) {
    var val = buffer.readDoubleLE(offset);
    decode.bytes = 8;
    return val;
  };

  return encoder(1, encode, decode, encodingLength);
}();

exports.fixed32 = function () {
  var encodingLength = function encodingLength(val) {
    return 4;
  };

  var encode = function encode(val, buffer, offset) {
    buffer.writeUInt32LE(val, offset);
    encode.bytes = 4;
    return buffer;
  };

  var decode = function decode(buffer, offset) {
    var val = buffer.readUInt32LE(offset);
    decode.bytes = 4;
    return val;
  };

  return encoder(5, encode, decode, encodingLength);
}();

exports.sfixed32 = function () {
  var encodingLength = function encodingLength(val) {
    return 4;
  };

  var encode = function encode(val, buffer, offset) {
    buffer.writeInt32LE(val, offset);
    encode.bytes = 4;
    return buffer;
  };

  var decode = function decode(buffer, offset) {
    var val = buffer.readInt32LE(offset);
    decode.bytes = 4;
    return val;
  };

  return encoder(5, encode, decode, encodingLength);
}();

exports.float = function () {
  var encodingLength = function encodingLength(val) {
    return 4;
  };

  var encode = function encode(val, buffer, offset) {
    buffer.writeFloatLE(val, offset);
    encode.bytes = 4;
    return buffer;
  };

  var decode = function decode(buffer, offset) {
    var val = buffer.readFloatLE(offset);
    decode.bytes = 4;
    return val;
  };

  return encoder(5, encode, decode, encodingLength);
}();

/***/ }),
/* 400 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var varint = __webpack_require__(19);

exports.encode = function encode(v, b, o) {
  v = v >= 0 ? v * 2 : v * -2 - 1;
  var r = varint.encode(v, b, o);
  encode.bytes = varint.encode.bytes;
  return r;
};

exports.decode = function decode(b, o) {
  var v = varint.decode(b, o);
  decode.bytes = varint.decode.bytes;
  return v & 1 ? (v + 1) / -2 : v / 2;
};

exports.encodingLength = function (v) {
  return varint.encodingLength(v >= 0 ? v * 2 : v * -2 - 1);
};

/***/ }),
/* 401 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint max-depth: 1 */


var varint = __webpack_require__(19);

var defined = __webpack_require__(123).defined;

function toSentenceCase(string) {
  return "".concat(string.substring(0, 1).toUpperCase()).concat(string.substring(1));
}

function addPropertyAccessors(obj, name, _value, defaultValue) {
  if (Object.prototype.hasOwnProperty.call(obj, name)) {
    // have already added this property
    return;
  }

  const sentenceCaseName = toSentenceCase(name);
  Object.defineProperties(obj, {
    [name]: {
      enumerable: true,
      configurable: true,
      set: val => {
        _value = val;
      },
      get: () => {
        if (_value === undefined) {
          return defaultValue;
        }

        return _value;
      }
    },
    ["has".concat(sentenceCaseName)]: {
      configurable: true,
      value: () => {
        return _value !== undefined;
      }
    },
    ["set".concat(sentenceCaseName)]: {
      configurable: true,
      value: val => {
        _value = val;
      }
    },
    ["get".concat(sentenceCaseName)]: {
      configurable: true,
      value: () => {
        return _value;
      }
    },
    ["clear".concat(sentenceCaseName)]: {
      configurable: true,
      value: () => {
        _value = undefined;
        obj[name] = undefined;
      }
    }
  });
}

function compileDecode(m, resolve, enc) {
  var requiredFields = [];
  var fields = {};
  var oneofFields = [];
  var vals = [];

  for (var i = 0; i < enc.length; i++) {
    var field = m.fields[i];
    fields[field.tag] = i;
    var def = field.options && field.options.default;
    var resolved = resolve(field.type, m.id, false);
    vals[i] = [def, resolved && resolved.values];
    m.fields[i].packed = field.repeated && field.options && field.options.packed && field.options.packed !== 'false';

    if (field.required) {
      requiredFields.push(field.name);
    }

    if (field.oneof) {
      oneofFields.push(field.name);
    }
  }

  function decodeField(e, field, obj, buf, offset, i) {
    var name = field.name;

    if (field.oneof) {
      // clear already defined oneof fields
      var props = Object.keys(obj);

      for (var j = 0; j < props.length; j++) {
        if (oneofFields.indexOf(props[j]) > -1) {
          const sentenceCase = toSentenceCase(props[j]);
          delete obj["has".concat(sentenceCase)];
          delete obj["get".concat(sentenceCase)];
          delete obj["set".concat(sentenceCase)];
          delete obj["clear".concat(sentenceCase)];
          delete obj[props[j]];
        }
      }
    }

    let value;

    if (e.message) {
      var len = varint.decode(buf, offset);
      offset += varint.decode.bytes;
      var decoded = e.decode(buf, offset, offset + len);

      if (field.map) {
        value = obj[name] || {};
        value[decoded.key] = decoded.value;
      } else if (field.repeated) {
        value = obj[name] || [];
        value.push(decoded);
      } else {
        value = decoded;
      }
    } else {
      if (field.repeated) {
        value = obj[name] || [];
        value.push(e.decode(buf, offset));
      } else {
        value = e.decode(buf, offset);
      }
    }

    addPropertyAccessors(obj, name, value);
    offset += e.decode.bytes;
    return offset;
  }

  return function decode(buf, offset, end) {
    if (offset == null) {
      offset = 0;
    }

    if (end == null) {
      end = buf.length;
    }

    if (!(end <= buf.length && offset <= buf.length)) {
      throw new Error('Decoded message is not valid');
    }

    var oldOffset = offset;
    var obj = {};
    var field;

    while (true) {
      if (end <= offset) {
        // finished
        // check required methods
        var name = '';
        var j = 0;

        for (j = 0; j < requiredFields.length; j++) {
          name = requiredFields[j];

          if (!defined(obj[name])) {
            throw new Error('Decoded message is not valid, missing required field: ' + name);
          }
        } // fill out missing defaults


        var val;
        var def;

        for (j = 0; j < enc.length; j++) {
          field = m.fields[j];
          def = vals[j][0];
          val = vals[j][1];
          name = field.name;
          let defaultVal;

          if (Object.prototype.hasOwnProperty.call(obj, name)) {
            continue;
          }

          var done = false;

          if (field.oneof) {
            var props = Object.keys(obj);

            for (var k = 0; k < props.length; k++) {
              if (oneofFields.indexOf(props[k]) > -1) {
                done = true;
                break;
              }
            }
          }

          if (done) {
            continue;
          }

          if (val) {
            // is enum
            if (field.repeated) {
              def = [];
            } else {
              def = def && val[def] ? val[def].value : val[Object.keys(val)[0]].value;
              def = parseInt(def || 0, 10);
            }
          } else {
            defaultVal = defaultValue(field);
            def = coerceValue(field, def);
          }

          addPropertyAccessors(obj, name, def, defaultVal);
        }

        decode.bytes = offset - oldOffset;
        return obj;
      }

      var prefix = varint.decode(buf, offset);
      offset += varint.decode.bytes;
      var tag = prefix >> 3;
      var i = fields[tag];

      if (i == null) {
        offset = skip(prefix & 7, buf, offset);
        continue;
      }

      var e = enc[i];
      field = m.fields[i];

      if (field.packed) {
        var packedEnd = varint.decode(buf, offset);
        offset += varint.decode.bytes;
        packedEnd += offset;

        while (offset < packedEnd) {
          offset = decodeField(e, field, obj, buf, offset, i);
        }
      } else {
        offset = decodeField(e, field, obj, buf, offset, i);
      }
    }
  };
}

var skip = function skip(type, buffer, offset) {
  switch (type) {
    case 0:
      varint.decode(buffer, offset);
      return offset + varint.decode.bytes;

    case 1:
      return offset + 8;

    case 2:
      var len = varint.decode(buffer, offset);
      return offset + varint.decode.bytes + len;

    case 3:
    case 4:
      throw new Error('Groups are not supported');

    case 5:
      return offset + 4;

    default:
      throw new Error('Unknown wire type: ' + type);
  }
};

var defaultValue = function defaultValue(f) {
  if (f.map) return {};
  if (f.repeated) return [];

  switch (f.type) {
    case 'string':
      return '';

    case 'bool':
      return false;

    case 'float':
    case 'double':
    case 'sfixed32':
    case 'fixed32':
    case 'varint':
    case 'enum':
    case 'uint64':
    case 'uint32':
    case 'int64':
    case 'int32':
    case 'sint64':
    case 'sint32':
      return 0;

    default:
      return null;
  }
};

var coerceValue = function coerceValue(f, def) {
  if (def === undefined) {
    return def;
  }

  switch (f.type) {
    case 'bool':
      return def === 'true';

    case 'float':
    case 'double':
    case 'sfixed32':
    case 'fixed32':
    case 'varint':
    case 'enum':
    case 'uint64':
    case 'uint32':
    case 'int64':
    case 'int32':
    case 'sint64':
    case 'sint32':
      return parseInt(def, 10);

    default:
      return def;
  }
};

module.exports = compileDecode;

/***/ }),
/* 402 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var defined = __webpack_require__(123).defined;

var varint = __webpack_require__(19);

function compileEncode(m, resolve, enc, oneofs, encodingLength) {
  var oneofsKeys = Object.keys(oneofs);
  var encLength = enc.length;
  var ints = {};

  for (var i = 0; i < encLength; i++) {
    ints[i] = {
      p: varint.encode(m.fields[i].tag << 3 | 2),
      h: varint.encode(m.fields[i].tag << 3 | enc[i].type)
    };
    var field = m.fields[i];
    m.fields[i].packed = field.repeated && field.options && field.options.packed && field.options.packed !== 'false';
  }

  function encodeField(buf, offset, h, e, packed, innerVal) {
    var j = 0;

    if (!packed) {
      for (j = 0; j < h.length; j++) {
        buf[offset++] = h[j];
      }
    }

    if (e.message) {
      varint.encode(e.encodingLength(innerVal), buf, offset);
      offset += varint.encode.bytes;
    }

    e.encode(innerVal, buf, offset);
    return offset + e.encode.bytes;
  }

  return function encode(obj, buf, offset) {
    if (offset == null) {
      offset = 0;
    }

    if (buf == null) {
      buf = Buffer.allocUnsafe(encodingLength(obj));
    }

    var oldOffset = offset;
    var objKeys = Object.keys(obj);
    var i = 0; // oneof checks

    var match = false;

    for (i = 0; i < oneofsKeys.length; i++) {
      var name = oneofsKeys[i];
      var prop = oneofs[i];

      if (objKeys.indexOf(prop) > -1) {
        if (match) {
          throw new Error('only one of the properties defined in oneof ' + name + ' can be set');
        }

        match = true;
      }
    }

    for (i = 0; i < encLength; i++) {
      var e = enc[i];
      var field = m.fields[i]; // was f

      var val = obj[field.name];
      var j = 0;

      if (!defined(val)) {
        if (field.required) {
          throw new Error(field.name + ' is required');
        }

        continue;
      }

      var p = ints[i].p;
      var h = ints[i].h;
      var packed = field.packed;

      if (field.map) {
        var tmp = Object.keys(val);

        for (j = 0; j < tmp.length; j++) {
          tmp[j] = {
            key: tmp[j],
            value: val[tmp[j]]
          };
        }

        val = tmp;
      }

      if (packed) {
        var packedLen = 0;

        for (j = 0; j < val.length; j++) {
          if (!Object.prototype.hasOwnProperty.call(val, j)) {
            continue;
          }

          packedLen += e.encodingLength(val[j]);
        }

        if (packedLen) {
          for (j = 0; j < h.length; j++) {
            buf[offset++] = p[j];
          }

          varint.encode(packedLen, buf, offset);
          offset += varint.encode.bytes;
        }
      }

      if (field.repeated) {
        var innerVal;

        for (j = 0; j < val.length; j++) {
          innerVal = val[j];

          if (!defined(innerVal)) {
            continue;
          }

          offset = encodeField(buf, offset, h, e, packed, innerVal);
        }
      } else {
        offset = encodeField(buf, offset, h, e, packed, val);
      }
    }

    encode.bytes = offset - oldOffset;
    return buf;
  };
}

module.exports = compileEncode;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 403 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var defined = __webpack_require__(123).defined;

var varint = __webpack_require__(19);

function compileEncodingLength(m, enc, oneofs) {
  var oneofsKeys = Object.keys(oneofs);
  var encLength = enc.length;
  var hls = new Array(encLength);

  for (var i = 0; i < m.fields.length; i++) {
    hls[i] = varint.encodingLength(m.fields[i].tag << 3 | enc[i].type);
    var field = m.fields[i];
    m.fields[i].packed = field.repeated && field.options && field.options.packed && field.options.packed !== 'false';
  }

  return function encodingLength(obj) {
    var length = 0;
    var i = 0;
    var j = 0;

    for (i = 0; i < oneofsKeys.length; i++) {
      var name = oneofsKeys[i];
      var props = oneofs[name];
      var match = false;

      for (j = 0; j < props.length; j++) {
        if (defined(obj[props[j]])) {
          if (match) {
            throw new Error('only one of the properties defined in oneof ' + name + ' can be set');
          }

          match = true;
        }
      }
    }

    for (i = 0; i < encLength; i++) {
      var e = enc[i];
      var field = m.fields[i];
      var val = obj[field.name];
      var hl = hls[i];
      var len;

      if (!defined(val)) {
        if (field.required) {
          throw new Error(field.name + ' is required');
        }

        continue;
      }

      if (field.map) {
        var tmp = Object.keys(val);

        for (j = 0; j < tmp.length; j++) {
          tmp[j] = {
            key: tmp[j],
            value: val[tmp[j]]
          };
        }

        val = tmp;
      }

      if (field.packed) {
        var packedLen = 0;

        for (j = 0; j < val.length; j++) {
          if (!defined(val[j])) {
            continue;
          }

          len = e.encodingLength(val[j]);
          packedLen += len;

          if (e.message) {
            packedLen += varint.encodingLength(len);
          }
        }

        if (packedLen) {
          length += hl + packedLen + varint.encodingLength(packedLen);
        }
      } else if (field.repeated) {
        for (j = 0; j < val.length; j++) {
          if (!defined(val[j])) {
            continue;
          }

          len = e.encodingLength(val[j]);
          length += hl + len + (e.message ? varint.encodingLength(len) : 0);
        }
      } else {
        len = e.encodingLength(val);
        length += hl + len + (e.message ? varint.encodingLength(len) : 0);
      }
    }

    return length;
  };
}

module.exports = compileEncodingLength;

/***/ }),
/* 404 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {

(function (global, undefined) {
  "use strict";

  if (global.setImmediate) {
    return;
  }

  var nextHandle = 1; // Spec says greater than zero

  var tasksByHandle = {};
  var currentlyRunningATask = false;
  var doc = global.document;
  var registerImmediate;

  function setImmediate(callback) {
    // Callback can either be a function or a string
    if (typeof callback !== "function") {
      callback = new Function("" + callback);
    } // Copy function arguments


    var args = new Array(arguments.length - 1);

    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i + 1];
    } // Store and register the task


    var task = {
      callback: callback,
      args: args
    };
    tasksByHandle[nextHandle] = task;
    registerImmediate(nextHandle);
    return nextHandle++;
  }

  function clearImmediate(handle) {
    delete tasksByHandle[handle];
  }

  function run(task) {
    var callback = task.callback;
    var args = task.args;

    switch (args.length) {
      case 0:
        callback();
        break;

      case 1:
        callback(args[0]);
        break;

      case 2:
        callback(args[0], args[1]);
        break;

      case 3:
        callback(args[0], args[1], args[2]);
        break;

      default:
        callback.apply(undefined, args);
        break;
    }
  }

  function runIfPresent(handle) {
    // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
    // So if we're currently running a task, we'll need to delay this invocation.
    if (currentlyRunningATask) {
      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
      // "too much recursion" error.
      setTimeout(runIfPresent, 0, handle);
    } else {
      var task = tasksByHandle[handle];

      if (task) {
        currentlyRunningATask = true;

        try {
          run(task);
        } finally {
          clearImmediate(handle);
          currentlyRunningATask = false;
        }
      }
    }
  }

  function installNextTickImplementation() {
    registerImmediate = function registerImmediate(handle) {
      process.nextTick(function () {
        runIfPresent(handle);
      });
    };
  }

  function canUsePostMessage() {
    // The test against `importScripts` prevents this implementation from being installed inside a web worker,
    // where `global.postMessage` means something completely different and can't be used for this purpose.
    if (global.postMessage && !global.importScripts) {
      var postMessageIsAsynchronous = true;
      var oldOnMessage = global.onmessage;

      global.onmessage = function () {
        postMessageIsAsynchronous = false;
      };

      global.postMessage("", "*");
      global.onmessage = oldOnMessage;
      return postMessageIsAsynchronous;
    }
  }

  function installPostMessageImplementation() {
    // Installs an event handler on `global` for the `message` event: see
    // * https://developer.mozilla.org/en/DOM/window.postMessage
    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages
    var messagePrefix = "setImmediate$" + Math.random() + "$";

    var onGlobalMessage = function onGlobalMessage(event) {
      if (event.source === global && typeof event.data === "string" && event.data.indexOf(messagePrefix) === 0) {
        runIfPresent(+event.data.slice(messagePrefix.length));
      }
    };

    if (global.addEventListener) {
      global.addEventListener("message", onGlobalMessage, false);
    } else {
      global.attachEvent("onmessage", onGlobalMessage);
    }

    registerImmediate = function registerImmediate(handle) {
      global.postMessage(messagePrefix + handle, "*");
    };
  }

  function installMessageChannelImplementation() {
    var channel = new MessageChannel();

    channel.port1.onmessage = function (event) {
      var handle = event.data;
      runIfPresent(handle);
    };

    registerImmediate = function registerImmediate(handle) {
      channel.port2.postMessage(handle);
    };
  }

  function installReadyStateChangeImplementation() {
    var html = doc.documentElement;

    registerImmediate = function registerImmediate(handle) {
      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
      var script = doc.createElement("script");

      script.onreadystatechange = function () {
        runIfPresent(handle);
        script.onreadystatechange = null;
        html.removeChild(script);
        script = null;
      };

      html.appendChild(script);
    };
  }

  function installSetTimeoutImplementation() {
    registerImmediate = function registerImmediate(handle) {
      setTimeout(runIfPresent, 0, handle);
    };
  } // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.


  var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
  attachTo = attachTo && attachTo.setTimeout ? attachTo : global; // Don't get fooled by e.g. browserify environments.

  if ({}.toString.call(global.process) === "[object process]") {
    // For Node.js before 0.9
    installNextTickImplementation();
  } else if (canUsePostMessage()) {
    // For non-IE10 modern browsers
    installPostMessageImplementation();
  } else if (global.MessageChannel) {
    // For web workers, where supported
    installMessageChannelImplementation();
  } else if (doc && "onreadystatechange" in doc.createElement("script")) {
    // For IE 6–8
    installReadyStateChangeImplementation();
  } else {
    // For older browsers
    installSetTimeoutImplementation();
  }

  attachTo.setImmediate = setImmediate;
  attachTo.clearImmediate = clearImmediate;
})(typeof self === "undefined" ? typeof global === "undefined" ? void 0 : global : self);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(8), __webpack_require__(5)))

/***/ }),
/* 405 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

/**
 * Base-N/Base-X encoding/decoding functions.
 *
 * Original implementation from base-x:
 * https://github.com/cryptocoinjs/base-x
 *
 * Which is MIT licensed:
 *
 * The MIT License (MIT)
 *
 * Copyright base-x contributors (c) 2016
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
var api = {};
module.exports = api; // baseN alphabet indexes

var _reverseAlphabets = {};
/**
 * BaseN-encodes a Uint8Array using the given alphabet.
 *
 * @param input the Uint8Array to encode.
 * @param maxline the maximum number of encoded characters per line to use,
 *          defaults to none.
 *
 * @return the baseN-encoded output string.
 */

api.encode = function (input, alphabet, maxline) {
  if (typeof alphabet !== 'string') {
    throw new TypeError('"alphabet" must be a string.');
  }

  if (maxline !== undefined && typeof maxline !== 'number') {
    throw new TypeError('"maxline" must be a number.');
  }

  var output = '';

  if (!(input instanceof Uint8Array)) {
    // assume forge byte buffer
    output = _encodeWithByteBuffer(input, alphabet);
  } else {
    var i = 0;
    var base = alphabet.length;
    var first = alphabet.charAt(0);
    var digits = [0];

    for (i = 0; i < input.length; ++i) {
      for (var j = 0, carry = input[i]; j < digits.length; ++j) {
        carry += digits[j] << 8;
        digits[j] = carry % base;
        carry = carry / base | 0;
      }

      while (carry > 0) {
        digits.push(carry % base);
        carry = carry / base | 0;
      }
    } // deal with leading zeros


    for (i = 0; input[i] === 0 && i < input.length - 1; ++i) {
      output += first;
    } // convert digits to a string


    for (i = digits.length - 1; i >= 0; --i) {
      output += alphabet[digits[i]];
    }
  }

  if (maxline) {
    var regex = new RegExp('.{1,' + maxline + '}', 'g');
    output = output.match(regex).join('\r\n');
  }

  return output;
};
/**
 * Decodes a baseN-encoded (using the given alphabet) string to a
 * Uint8Array.
 *
 * @param input the baseN-encoded input string.
 *
 * @return the Uint8Array.
 */


api.decode = function (input, alphabet) {
  if (typeof input !== 'string') {
    throw new TypeError('"input" must be a string.');
  }

  if (typeof alphabet !== 'string') {
    throw new TypeError('"alphabet" must be a string.');
  }

  var table = _reverseAlphabets[alphabet];

  if (!table) {
    // compute reverse alphabet
    table = _reverseAlphabets[alphabet] = [];

    for (var i = 0; i < alphabet.length; ++i) {
      table[alphabet.charCodeAt(i)] = i;
    }
  } // remove whitespace characters


  input = input.replace(/\s/g, '');
  var base = alphabet.length;
  var first = alphabet.charAt(0);
  var bytes = [0];

  for (var i = 0; i < input.length; i++) {
    var value = table[input.charCodeAt(i)];

    if (value === undefined) {
      return;
    }

    for (var j = 0, carry = value; j < bytes.length; ++j) {
      carry += bytes[j] * base;
      bytes[j] = carry & 0xff;
      carry >>= 8;
    }

    while (carry > 0) {
      bytes.push(carry & 0xff);
      carry >>= 8;
    }
  } // deal with leading zeros


  for (var k = 0; input[k] === first && k < input.length - 1; ++k) {
    bytes.push(0);
  }

  if (typeof Buffer !== 'undefined') {
    return Buffer.from(bytes.reverse());
  }

  return new Uint8Array(bytes.reverse());
};

function _encodeWithByteBuffer(input, alphabet) {
  var i = 0;
  var base = alphabet.length;
  var first = alphabet.charAt(0);
  var digits = [0];

  for (i = 0; i < input.length(); ++i) {
    for (var j = 0, carry = input.at(i); j < digits.length; ++j) {
      carry += digits[j] << 8;
      digits[j] = carry % base;
      carry = carry / base | 0;
    }

    while (carry > 0) {
      digits.push(carry % base);
      carry = carry / base | 0;
    }
  }

  var output = ''; // deal with leading zeros

  for (i = 0; input.at(i) === 0 && i < input.length() - 1; ++i) {
    output += first;
  } // convert digits to a string


  for (i = digits.length - 1; i >= 0; --i) {
    output += alphabet[digits[i]];
  }

  return output;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 406 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Partial implementation of PKCS#1 v2.2: RSA-OEAP
 *
 * Modified but based on the following MIT and BSD licensed code:
 *
 * https://github.com/kjur/jsjws/blob/master/rsa.js:
 *
 * The 'jsjws'(JSON Web Signature JavaScript Library) License
 *
 * Copyright (c) 2012 Kenji Urushima
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * http://webrsa.cvs.sourceforge.net/viewvc/webrsa/Client/RSAES-OAEP.js?content-type=text%2Fplain:
 *
 * RSAES-OAEP.js
 * $Id: RSAES-OAEP.js,v 1.1.1.1 2003/03/19 15:37:20 ellispritchard Exp $
 * JavaScript Implementation of PKCS #1 v2.1 RSA CRYPTOGRAPHY STANDARD (RSA Laboratories, June 14, 2002)
 * Copyright (C) Ellis Pritchard, Guardian Unlimited 2003.
 * Contact: ellis@nukinetics.com
 * Distributed under the BSD License.
 *
 * Official documentation: http://www.rsa.com/rsalabs/node.asp?id=2125
 *
 * @author Evan Jones (http://evanjones.ca/)
 * @author Dave Longley
 *
 * Copyright (c) 2013-2014 Digital Bazaar, Inc.
 */
var forge = __webpack_require__(7);

__webpack_require__(10);

__webpack_require__(46);

__webpack_require__(201); // shortcut for PKCS#1 API


var pkcs1 = module.exports = forge.pkcs1 = forge.pkcs1 || {};
/**
 * Encode the given RSAES-OAEP message (M) using key, with optional label (L)
 * and seed.
 *
 * This method does not perform RSA encryption, it only encodes the message
 * using RSAES-OAEP.
 *
 * @param key the RSA key to use.
 * @param message the message to encode.
 * @param options the options to use:
 *          label an optional label to use.
 *          seed the seed to use.
 *          md the message digest object to use, undefined for SHA-1.
 *          mgf1 optional mgf1 parameters:
 *            md the message digest object to use for MGF1.
 *
 * @return the encoded message bytes.
 */

pkcs1.encode_rsa_oaep = function (key, message, options) {
  // parse arguments
  var label;
  var seed;
  var md;
  var mgf1Md; // legacy args (label, seed, md)

  if (typeof options === 'string') {
    label = options;
    seed = arguments[3] || undefined;
    md = arguments[4] || undefined;
  } else if (options) {
    label = options.label || undefined;
    seed = options.seed || undefined;
    md = options.md || undefined;

    if (options.mgf1 && options.mgf1.md) {
      mgf1Md = options.mgf1.md;
    }
  } // default OAEP to SHA-1 message digest


  if (!md) {
    md = forge.md.sha1.create();
  } else {
    md.start();
  } // default MGF-1 to same as OAEP


  if (!mgf1Md) {
    mgf1Md = md;
  } // compute length in bytes and check output


  var keyLength = Math.ceil(key.n.bitLength() / 8);
  var maxLength = keyLength - 2 * md.digestLength - 2;

  if (message.length > maxLength) {
    var error = new Error('RSAES-OAEP input message length is too long.');
    error.length = message.length;
    error.maxLength = maxLength;
    throw error;
  }

  if (!label) {
    label = '';
  }

  md.update(label, 'raw');
  var lHash = md.digest();
  var PS = '';
  var PS_length = maxLength - message.length;

  for (var i = 0; i < PS_length; i++) {
    PS += '\x00';
  }

  var DB = lHash.getBytes() + PS + '\x01' + message;

  if (!seed) {
    seed = forge.random.getBytes(md.digestLength);
  } else if (seed.length !== md.digestLength) {
    var error = new Error('Invalid RSAES-OAEP seed. The seed length must ' + 'match the digest length.');
    error.seedLength = seed.length;
    error.digestLength = md.digestLength;
    throw error;
  }

  var dbMask = rsa_mgf1(seed, keyLength - md.digestLength - 1, mgf1Md);
  var maskedDB = forge.util.xorBytes(DB, dbMask, DB.length);
  var seedMask = rsa_mgf1(maskedDB, md.digestLength, mgf1Md);
  var maskedSeed = forge.util.xorBytes(seed, seedMask, seed.length); // return encoded message

  return '\x00' + maskedSeed + maskedDB;
};
/**
 * Decode the given RSAES-OAEP encoded message (EM) using key, with optional
 * label (L).
 *
 * This method does not perform RSA decryption, it only decodes the message
 * using RSAES-OAEP.
 *
 * @param key the RSA key to use.
 * @param em the encoded message to decode.
 * @param options the options to use:
 *          label an optional label to use.
 *          md the message digest object to use for OAEP, undefined for SHA-1.
 *          mgf1 optional mgf1 parameters:
 *            md the message digest object to use for MGF1.
 *
 * @return the decoded message bytes.
 */


pkcs1.decode_rsa_oaep = function (key, em, options) {
  // parse args
  var label;
  var md;
  var mgf1Md; // legacy args

  if (typeof options === 'string') {
    label = options;
    md = arguments[3] || undefined;
  } else if (options) {
    label = options.label || undefined;
    md = options.md || undefined;

    if (options.mgf1 && options.mgf1.md) {
      mgf1Md = options.mgf1.md;
    }
  } // compute length in bytes


  var keyLength = Math.ceil(key.n.bitLength() / 8);

  if (em.length !== keyLength) {
    var error = new Error('RSAES-OAEP encoded message length is invalid.');
    error.length = em.length;
    error.expectedLength = keyLength;
    throw error;
  } // default OAEP to SHA-1 message digest


  if (md === undefined) {
    md = forge.md.sha1.create();
  } else {
    md.start();
  } // default MGF-1 to same as OAEP


  if (!mgf1Md) {
    mgf1Md = md;
  }

  if (keyLength < 2 * md.digestLength + 2) {
    throw new Error('RSAES-OAEP key is too short for the hash function.');
  }

  if (!label) {
    label = '';
  }

  md.update(label, 'raw');
  var lHash = md.digest().getBytes(); // split the message into its parts

  var y = em.charAt(0);
  var maskedSeed = em.substring(1, md.digestLength + 1);
  var maskedDB = em.substring(1 + md.digestLength);
  var seedMask = rsa_mgf1(maskedDB, md.digestLength, mgf1Md);
  var seed = forge.util.xorBytes(maskedSeed, seedMask, maskedSeed.length);
  var dbMask = rsa_mgf1(seed, keyLength - md.digestLength - 1, mgf1Md);
  var db = forge.util.xorBytes(maskedDB, dbMask, maskedDB.length);
  var lHashPrime = db.substring(0, md.digestLength); // constant time check that all values match what is expected

  var error = y !== '\x00'; // constant time check lHash vs lHashPrime

  for (var i = 0; i < md.digestLength; ++i) {
    error |= lHash.charAt(i) !== lHashPrime.charAt(i);
  } // "constant time" find the 0x1 byte separating the padding (zeros) from the
  // message
  // TODO: It must be possible to do this in a better/smarter way?


  var in_ps = 1;
  var index = md.digestLength;

  for (var j = md.digestLength; j < db.length; j++) {
    var code = db.charCodeAt(j);
    var is_0 = code & 0x1 ^ 0x1; // non-zero if not 0 or 1 in the ps section

    var error_mask = in_ps ? 0xfffe : 0x0000;
    error |= code & error_mask; // latch in_ps to zero after we find 0x1

    in_ps = in_ps & is_0;
    index += in_ps;
  }

  if (error || db.charCodeAt(index) !== 0x1) {
    throw new Error('Invalid RSAES-OAEP padding.');
  }

  return db.substring(index + 1);
};

function rsa_mgf1(seed, maskLength, hash) {
  // default to SHA-1 message digest
  if (!hash) {
    hash = forge.md.sha1.create();
  }

  var t = '';
  var count = Math.ceil(maskLength / hash.digestLength);

  for (var i = 0; i < count; ++i) {
    var c = String.fromCharCode(i >> 24 & 0xFF, i >> 16 & 0xFF, i >> 8 & 0xFF, i & 0xFF);
    hash.start();
    hash.update(seed + c);
    t += hash.digest().getBytes();
  }

  return t.substring(0, maskLength);
}

/***/ }),
/* 407 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Secure Hash Algorithm with 256-bit digest (SHA-256) implementation.
 *
 * See FIPS 180-2 for details.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2015 Digital Bazaar, Inc.
 */
var forge = __webpack_require__(7);

__webpack_require__(47);

__webpack_require__(10);

var sha256 = module.exports = forge.sha256 = forge.sha256 || {};
forge.md.sha256 = forge.md.algorithms.sha256 = sha256;
/**
 * Creates a SHA-256 message digest object.
 *
 * @return a message digest object.
 */

sha256.create = function () {
  // do initialization as necessary
  if (!_initialized) {
    _init();
  } // SHA-256 state contains eight 32-bit integers


  var _state = null; // input buffer

  var _input = forge.util.createBuffer(); // used for word storage


  var _w = new Array(64); // message digest object


  var md = {
    algorithm: 'sha256',
    blockLength: 64,
    digestLength: 32,
    // 56-bit length of message so far (does not including padding)
    messageLength: 0,
    // true message length
    fullMessageLength: null,
    // size of message length in bytes
    messageLengthSize: 8
  };
  /**
   * Starts the digest.
   *
   * @return this digest object.
   */

  md.start = function () {
    // up to 56-bit message length for convenience
    md.messageLength = 0; // full message length (set md.messageLength64 for backwards-compatibility)

    md.fullMessageLength = md.messageLength64 = [];
    var int32s = md.messageLengthSize / 4;

    for (var i = 0; i < int32s; ++i) {
      md.fullMessageLength.push(0);
    }

    _input = forge.util.createBuffer();
    _state = {
      h0: 0x6A09E667,
      h1: 0xBB67AE85,
      h2: 0x3C6EF372,
      h3: 0xA54FF53A,
      h4: 0x510E527F,
      h5: 0x9B05688C,
      h6: 0x1F83D9AB,
      h7: 0x5BE0CD19
    };
    return md;
  }; // start digest automatically for first time


  md.start();
  /**
   * Updates the digest with the given message input. The given input can
   * treated as raw input (no encoding will be applied) or an encoding of
   * 'utf8' maybe given to encode the input using UTF-8.
   *
   * @param msg the message input to update with.
   * @param encoding the encoding to use (default: 'raw', other: 'utf8').
   *
   * @return this digest object.
   */

  md.update = function (msg, encoding) {
    if (encoding === 'utf8') {
      msg = forge.util.encodeUtf8(msg);
    } // update message length


    var len = msg.length;
    md.messageLength += len;
    len = [len / 0x100000000 >>> 0, len >>> 0];

    for (var i = md.fullMessageLength.length - 1; i >= 0; --i) {
      md.fullMessageLength[i] += len[1];
      len[1] = len[0] + (md.fullMessageLength[i] / 0x100000000 >>> 0);
      md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;
      len[0] = len[1] / 0x100000000 >>> 0;
    } // add bytes to input buffer


    _input.putBytes(msg); // process bytes


    _update(_state, _w, _input); // compact input buffer every 2K or if empty


    if (_input.read > 2048 || _input.length() === 0) {
      _input.compact();
    }

    return md;
  };
  /**
   * Produces the digest.
   *
   * @return a byte buffer containing the digest value.
   */


  md.digest = function () {
    /* Note: Here we copy the remaining bytes in the input buffer and
    add the appropriate SHA-256 padding. Then we do the final update
    on a copy of the state so that if the user wants to get
    intermediate digests they can do so. */

    /* Determine the number of bytes that must be added to the message
    to ensure its length is congruent to 448 mod 512. In other words,
    the data to be digested must be a multiple of 512 bits (or 128 bytes).
    This data includes the message, some padding, and the length of the
    message. Since the length of the message will be encoded as 8 bytes (64
    bits), that means that the last segment of the data must have 56 bytes
    (448 bits) of message and padding. Therefore, the length of the message
    plus the padding must be congruent to 448 mod 512 because
    512 - 128 = 448.
     In order to fill up the message length it must be filled with
    padding that begins with 1 bit followed by all 0 bits. Padding
    must *always* be present, so if the message length is already
    congruent to 448 mod 512, then 512 padding bits must be added. */
    var finalBlock = forge.util.createBuffer();
    finalBlock.putBytes(_input.bytes()); // compute remaining size to be digested (include message length size)

    var remaining = md.fullMessageLength[md.fullMessageLength.length - 1] + md.messageLengthSize; // add padding for overflow blockSize - overflow
    // _padding starts with 1 byte with first bit is set (byte value 128), then
    // there may be up to (blockSize - 1) other pad bytes

    var overflow = remaining & md.blockLength - 1;
    finalBlock.putBytes(_padding.substr(0, md.blockLength - overflow)); // serialize message length in bits in big-endian order; since length
    // is stored in bytes we multiply by 8 and add carry from next int

    var next, carry;
    var bits = md.fullMessageLength[0] * 8;

    for (var i = 0; i < md.fullMessageLength.length - 1; ++i) {
      next = md.fullMessageLength[i + 1] * 8;
      carry = next / 0x100000000 >>> 0;
      bits += carry;
      finalBlock.putInt32(bits >>> 0);
      bits = next >>> 0;
    }

    finalBlock.putInt32(bits);
    var s2 = {
      h0: _state.h0,
      h1: _state.h1,
      h2: _state.h2,
      h3: _state.h3,
      h4: _state.h4,
      h5: _state.h5,
      h6: _state.h6,
      h7: _state.h7
    };

    _update(s2, _w, finalBlock);

    var rval = forge.util.createBuffer();
    rval.putInt32(s2.h0);
    rval.putInt32(s2.h1);
    rval.putInt32(s2.h2);
    rval.putInt32(s2.h3);
    rval.putInt32(s2.h4);
    rval.putInt32(s2.h5);
    rval.putInt32(s2.h6);
    rval.putInt32(s2.h7);
    return rval;
  };

  return md;
}; // sha-256 padding bytes not initialized yet


var _padding = null;
var _initialized = false; // table of constants

var _k = null;
/**
 * Initializes the constant tables.
 */

function _init() {
  // create padding
  _padding = String.fromCharCode(128);
  _padding += forge.util.fillString(String.fromCharCode(0x00), 64); // create K table for SHA-256

  _k = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2]; // now initialized

  _initialized = true;
}
/**
 * Updates a SHA-256 state with the given byte buffer.
 *
 * @param s the SHA-256 state to update.
 * @param w the array to use to store words.
 * @param bytes the byte buffer to update with.
 */


function _update(s, w, bytes) {
  // consume 512 bit (64 byte) chunks
  var t1, t2, s0, s1, ch, maj, i, a, b, c, d, e, f, g, h;
  var len = bytes.length();

  while (len >= 64) {
    // the w array will be populated with sixteen 32-bit big-endian words
    // and then extended into 64 32-bit words according to SHA-256
    for (i = 0; i < 16; ++i) {
      w[i] = bytes.getInt32();
    }

    for (; i < 64; ++i) {
      // XOR word 2 words ago rot right 17, rot right 19, shft right 10
      t1 = w[i - 2];
      t1 = (t1 >>> 17 | t1 << 15) ^ (t1 >>> 19 | t1 << 13) ^ t1 >>> 10; // XOR word 15 words ago rot right 7, rot right 18, shft right 3

      t2 = w[i - 15];
      t2 = (t2 >>> 7 | t2 << 25) ^ (t2 >>> 18 | t2 << 14) ^ t2 >>> 3; // sum(t1, word 7 ago, t2, word 16 ago) modulo 2^32

      w[i] = t1 + w[i - 7] + t2 + w[i - 16] | 0;
    } // initialize hash value for this chunk


    a = s.h0;
    b = s.h1;
    c = s.h2;
    d = s.h3;
    e = s.h4;
    f = s.h5;
    g = s.h6;
    h = s.h7; // round function

    for (i = 0; i < 64; ++i) {
      // Sum1(e)
      s1 = (e >>> 6 | e << 26) ^ (e >>> 11 | e << 21) ^ (e >>> 25 | e << 7); // Ch(e, f, g) (optimized the same way as SHA-1)

      ch = g ^ e & (f ^ g); // Sum0(a)

      s0 = (a >>> 2 | a << 30) ^ (a >>> 13 | a << 19) ^ (a >>> 22 | a << 10); // Maj(a, b, c) (optimized the same way as SHA-1)

      maj = a & b | c & (a ^ b); // main algorithm

      t1 = h + s1 + ch + _k[i] + w[i];
      t2 = s0 + maj;
      h = g;
      g = f;
      f = e; // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
      // can't truncate with `| 0`

      e = d + t1 >>> 0;
      d = c;
      c = b;
      b = a; // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
      // can't truncate with `| 0`

      a = t1 + t2 >>> 0;
    } // update hash state


    s.h0 = s.h0 + a | 0;
    s.h1 = s.h1 + b | 0;
    s.h2 = s.h2 + c | 0;
    s.h3 = s.h3 + d | 0;
    s.h4 = s.h4 + e | 0;
    s.h5 = s.h5 + f | 0;
    s.h6 = s.h6 + g | 0;
    s.h7 = s.h7 + h | 0;
    len -= 64;
  }
}

/***/ }),
/* 408 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

/**
 * A javascript implementation of a cryptographically-secure
 * Pseudo Random Number Generator (PRNG). The Fortuna algorithm is followed
 * here though the use of SHA-256 is not enforced; when generating an
 * a PRNG context, the hashing algorithm and block cipher used for
 * the generator are specified via a plugin.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
 */
var forge = __webpack_require__(7);

__webpack_require__(10);

var _crypto = null;

if (forge.util.isNodejs && !forge.options.usePureJavaScript && !process.versions['node-webkit']) {
  _crypto = __webpack_require__(126);
}
/* PRNG API */


var prng = module.exports = forge.prng = forge.prng || {};
/**
 * Creates a new PRNG context.
 *
 * A PRNG plugin must be passed in that will provide:
 *
 * 1. A function that initializes the key and seed of a PRNG context. It
 *   will be given a 16 byte key and a 16 byte seed. Any key expansion
 *   or transformation of the seed from a byte string into an array of
 *   integers (or similar) should be performed.
 * 2. The cryptographic function used by the generator. It takes a key and
 *   a seed.
 * 3. A seed increment function. It takes the seed and returns seed + 1.
 * 4. An api to create a message digest.
 *
 * For an example, see random.js.
 *
 * @param plugin the PRNG plugin to use.
 */

prng.create = function (plugin) {
  var ctx = {
    plugin: plugin,
    key: null,
    seed: null,
    time: null,
    // number of reseeds so far
    reseeds: 0,
    // amount of data generated so far
    generated: 0,
    // no initial key bytes
    keyBytes: ''
  }; // create 32 entropy pools (each is a message digest)

  var md = plugin.md;
  var pools = new Array(32);

  for (var i = 0; i < 32; ++i) {
    pools[i] = md.create();
  }

  ctx.pools = pools; // entropy pools are written to cyclically, starting at index 0

  ctx.pool = 0;
  /**
   * Generates random bytes. The bytes may be generated synchronously or
   * asynchronously. Web workers must use the asynchronous interface or
   * else the behavior is undefined.
   *
   * @param count the number of random bytes to generate.
   * @param [callback(err, bytes)] called once the operation completes.
   *
   * @return count random bytes as a string.
   */

  ctx.generate = function (count, callback) {
    // do synchronously
    if (!callback) {
      return ctx.generateSync(count);
    } // simple generator using counter-based CBC


    var cipher = ctx.plugin.cipher;
    var increment = ctx.plugin.increment;
    var formatKey = ctx.plugin.formatKey;
    var formatSeed = ctx.plugin.formatSeed;
    var b = forge.util.createBuffer(); // paranoid deviation from Fortuna:
    // reset key for every request to protect previously
    // generated random bytes should the key be discovered;
    // there is no 100ms based reseeding because of this
    // forced reseed for every `generate` call

    ctx.key = null;
    generate();

    function generate(err) {
      if (err) {
        return callback(err);
      } // sufficient bytes generated


      if (b.length() >= count) {
        return callback(null, b.getBytes(count));
      } // if amount of data generated is greater than 1 MiB, trigger reseed


      if (ctx.generated > 0xfffff) {
        ctx.key = null;
      }

      if (ctx.key === null) {
        // prevent stack overflow
        return forge.util.nextTick(function () {
          _reseed(generate);
        });
      } // generate the random bytes


      var bytes = cipher(ctx.key, ctx.seed);
      ctx.generated += bytes.length;
      b.putBytes(bytes); // generate bytes for a new key and seed

      ctx.key = formatKey(cipher(ctx.key, increment(ctx.seed)));
      ctx.seed = formatSeed(cipher(ctx.key, ctx.seed));
      forge.util.setImmediate(generate);
    }
  };
  /**
   * Generates random bytes synchronously.
   *
   * @param count the number of random bytes to generate.
   *
   * @return count random bytes as a string.
   */


  ctx.generateSync = function (count) {
    // simple generator using counter-based CBC
    var cipher = ctx.plugin.cipher;
    var increment = ctx.plugin.increment;
    var formatKey = ctx.plugin.formatKey;
    var formatSeed = ctx.plugin.formatSeed; // paranoid deviation from Fortuna:
    // reset key for every request to protect previously
    // generated random bytes should the key be discovered;
    // there is no 100ms based reseeding because of this
    // forced reseed for every `generateSync` call

    ctx.key = null;
    var b = forge.util.createBuffer();

    while (b.length() < count) {
      // if amount of data generated is greater than 1 MiB, trigger reseed
      if (ctx.generated > 0xfffff) {
        ctx.key = null;
      }

      if (ctx.key === null) {
        _reseedSync();
      } // generate the random bytes


      var bytes = cipher(ctx.key, ctx.seed);
      ctx.generated += bytes.length;
      b.putBytes(bytes); // generate bytes for a new key and seed

      ctx.key = formatKey(cipher(ctx.key, increment(ctx.seed)));
      ctx.seed = formatSeed(cipher(ctx.key, ctx.seed));
    }

    return b.getBytes(count);
  };
  /**
   * Private function that asynchronously reseeds a generator.
   *
   * @param callback(err) called once the operation completes.
   */


  function _reseed(callback) {
    if (ctx.pools[0].messageLength >= 32) {
      _seed();

      return callback();
    } // not enough seed data...


    var needed = 32 - ctx.pools[0].messageLength << 5;
    ctx.seedFile(needed, function (err, bytes) {
      if (err) {
        return callback(err);
      }

      ctx.collect(bytes);

      _seed();

      callback();
    });
  }
  /**
   * Private function that synchronously reseeds a generator.
   */


  function _reseedSync() {
    if (ctx.pools[0].messageLength >= 32) {
      return _seed();
    } // not enough seed data...


    var needed = 32 - ctx.pools[0].messageLength << 5;
    ctx.collect(ctx.seedFileSync(needed));

    _seed();
  }
  /**
   * Private function that seeds a generator once enough bytes are available.
   */


  function _seed() {
    // update reseed count
    ctx.reseeds = ctx.reseeds === 0xffffffff ? 0 : ctx.reseeds + 1; // goal is to update `key` via:
    // key = hash(key + s)
    //   where 's' is all collected entropy from selected pools, then...
    // create a plugin-based message digest

    var md = ctx.plugin.md.create(); // consume current key bytes

    md.update(ctx.keyBytes); // digest the entropy of pools whose index k meet the
    // condition 'n mod 2^k == 0' where n is the number of reseeds

    var _2powK = 1;

    for (var k = 0; k < 32; ++k) {
      if (ctx.reseeds % _2powK === 0) {
        md.update(ctx.pools[k].digest().getBytes());
        ctx.pools[k].start();
      }

      _2powK = _2powK << 1;
    } // get digest for key bytes


    ctx.keyBytes = md.digest().getBytes(); // paranoid deviation from Fortuna:
    // update `seed` via `seed = hash(key)`
    // instead of initializing to zero once and only
    // ever incrementing it

    md.start();
    md.update(ctx.keyBytes);
    var seedBytes = md.digest().getBytes(); // update state

    ctx.key = ctx.plugin.formatKey(ctx.keyBytes);
    ctx.seed = ctx.plugin.formatSeed(seedBytes);
    ctx.generated = 0;
  }
  /**
   * The built-in default seedFile. This seedFile is used when entropy
   * is needed immediately.
   *
   * @param needed the number of bytes that are needed.
   *
   * @return the random bytes.
   */


  function defaultSeedFile(needed) {
    // use window.crypto.getRandomValues strong source of entropy if available
    var getRandomValues = null;
    var globalScope = forge.util.globalScope;

    var _crypto = globalScope.crypto || globalScope.msCrypto;

    if (_crypto && _crypto.getRandomValues) {
      getRandomValues = function getRandomValues(arr) {
        return _crypto.getRandomValues(arr);
      };
    }

    var b = forge.util.createBuffer();

    if (getRandomValues) {
      while (b.length() < needed) {
        // max byte length is 65536 before QuotaExceededError is thrown
        // http://www.w3.org/TR/WebCryptoAPI/#RandomSource-method-getRandomValues
        var count = Math.max(1, Math.min(needed - b.length(), 65536) / 4);
        var entropy = new Uint32Array(Math.floor(count));

        try {
          getRandomValues(entropy);

          for (var i = 0; i < entropy.length; ++i) {
            b.putInt32(entropy[i]);
          }
        } catch (e) {
          /* only ignore QuotaExceededError */
          if (!(typeof QuotaExceededError !== 'undefined' && e instanceof QuotaExceededError)) {
            throw e;
          }
        }
      }
    } // be sad and add some weak random data


    if (b.length() < needed) {
      /* Draws from Park-Miller "minimal standard" 31 bit PRNG,
      implemented with David G. Carta's optimization: with 32 bit math
      and without division (Public Domain). */
      var hi, lo, next;
      var seed = Math.floor(Math.random() * 0x010000);

      while (b.length() < needed) {
        lo = 16807 * (seed & 0xFFFF);
        hi = 16807 * (seed >> 16);
        lo += (hi & 0x7FFF) << 16;
        lo += hi >> 15;
        lo = (lo & 0x7FFFFFFF) + (lo >> 31);
        seed = lo & 0xFFFFFFFF; // consume lower 3 bytes of seed

        for (var i = 0; i < 3; ++i) {
          // throw in more pseudo random
          next = seed >>> (i << 3);
          next ^= Math.floor(Math.random() * 0x0100);
          b.putByte(String.fromCharCode(next & 0xFF));
        }
      }
    }

    return b.getBytes(needed);
  } // initialize seed file APIs


  if (_crypto) {
    // use nodejs async API
    ctx.seedFile = function (needed, callback) {
      _crypto.randomBytes(needed, function (err, bytes) {
        if (err) {
          return callback(err);
        }

        callback(null, bytes.toString());
      });
    }; // use nodejs sync API


    ctx.seedFileSync = function (needed) {
      return _crypto.randomBytes(needed).toString();
    };
  } else {
    ctx.seedFile = function (needed, callback) {
      try {
        callback(null, defaultSeedFile(needed));
      } catch (e) {
        callback(e);
      }
    };

    ctx.seedFileSync = defaultSeedFile;
  }
  /**
   * Adds entropy to a prng ctx's accumulator.
   *
   * @param bytes the bytes of entropy as a string.
   */


  ctx.collect = function (bytes) {
    // iterate over pools distributing entropy cyclically
    var count = bytes.length;

    for (var i = 0; i < count; ++i) {
      ctx.pools[ctx.pool].update(bytes.substr(i, 1));
      ctx.pool = ctx.pool === 31 ? 0 : ctx.pool + 1;
    }
  };
  /**
   * Collects an integer of n bits.
   *
   * @param i the integer entropy.
   * @param n the number of bits in the integer.
   */


  ctx.collectInt = function (i, n) {
    var bytes = '';

    for (var x = 0; x < n; x += 8) {
      bytes += String.fromCharCode(i >> x & 0xFF);
    }

    ctx.collect(bytes);
  };
  /**
   * Registers a Web Worker to receive immediate entropy from the main thread.
   * This method is required until Web Workers can access the native crypto
   * API. This method should be called twice for each created worker, once in
   * the main thread, and once in the worker itself.
   *
   * @param worker the worker to register.
   */


  ctx.registerWorker = function (worker) {
    // worker receives random bytes
    if (worker === self) {
      ctx.seedFile = function (needed, callback) {
        function listener(e) {
          var data = e.data;

          if (data.forge && data.forge.prng) {
            self.removeEventListener('message', listener);
            callback(data.forge.prng.err, data.forge.prng.bytes);
          }
        }

        self.addEventListener('message', listener);
        self.postMessage({
          forge: {
            prng: {
              needed: needed
            }
          }
        });
      };
    } else {
      // main thread sends random bytes upon request
      var listener = function listener(e) {
        var data = e.data;

        if (data.forge && data.forge.prng) {
          ctx.seedFile(data.forge.prng.needed, function (err, bytes) {
            worker.postMessage({
              forge: {
                prng: {
                  err: err,
                  bytes: bytes
                }
              }
            });
          });
        }
      }; // TODO: do we need to remove the event listener when the worker dies?


      worker.addEventListener('message', listener);
    }
  };

  return ctx;
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5)))

/***/ }),
/* 409 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Prime number generation API.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2014 Digital Bazaar, Inc.
 */
var forge = __webpack_require__(7);

__webpack_require__(10);

__webpack_require__(125);

__webpack_require__(46);

(function () {
  // forge.prime already defined
  if (forge.prime) {
    module.exports = forge.prime;
    return;
  }
  /* PRIME API */


  var prime = module.exports = forge.prime = forge.prime || {};
  var BigInteger = forge.jsbn.BigInteger; // primes are 30k+i for i = 1, 7, 11, 13, 17, 19, 23, 29

  var GCD_30_DELTA = [6, 4, 2, 4, 2, 4, 6, 2];
  var THIRTY = new BigInteger(null);
  THIRTY.fromInt(30);

  var op_or = function op_or(x, y) {
    return x | y;
  };
  /**
   * Generates a random probable prime with the given number of bits.
   *
   * Alternative algorithms can be specified by name as a string or as an
   * object with custom options like so:
   *
   * {
   *   name: 'PRIMEINC',
   *   options: {
   *     maxBlockTime: <the maximum amount of time to block the main
   *       thread before allowing I/O other JS to run>,
   *     millerRabinTests: <the number of miller-rabin tests to run>,
   *     workerScript: <the worker script URL>,
   *     workers: <the number of web workers (if supported) to use,
   *       -1 to use estimated cores minus one>.
   *     workLoad: the size of the work load, ie: number of possible prime
   *       numbers for each web worker to check per work assignment,
   *       (default: 100).
   *   }
   * }
   *
   * @param bits the number of bits for the prime number.
   * @param options the options to use.
   *          [algorithm] the algorithm to use (default: 'PRIMEINC').
   *          [prng] a custom crypto-secure pseudo-random number generator to use,
   *            that must define "getBytesSync".
   *
   * @return callback(err, num) called once the operation completes.
   */


  prime.generateProbablePrime = function (bits, options, callback) {
    if (typeof options === 'function') {
      callback = options;
      options = {};
    }

    options = options || {}; // default to PRIMEINC algorithm

    var algorithm = options.algorithm || 'PRIMEINC';

    if (typeof algorithm === 'string') {
      algorithm = {
        name: algorithm
      };
    }

    algorithm.options = algorithm.options || {}; // create prng with api that matches BigInteger secure random

    var prng = options.prng || forge.random;
    var rng = {
      // x is an array to fill with bytes
      nextBytes: function nextBytes(x) {
        var b = prng.getBytesSync(x.length);

        for (var i = 0; i < x.length; ++i) {
          x[i] = b.charCodeAt(i);
        }
      }
    };

    if (algorithm.name === 'PRIMEINC') {
      return primeincFindPrime(bits, rng, algorithm.options, callback);
    }

    throw new Error('Invalid prime generation algorithm: ' + algorithm.name);
  };

  function primeincFindPrime(bits, rng, options, callback) {
    if ('workers' in options) {
      return primeincFindPrimeWithWorkers(bits, rng, options, callback);
    }

    return primeincFindPrimeWithoutWorkers(bits, rng, options, callback);
  }

  function primeincFindPrimeWithoutWorkers(bits, rng, options, callback) {
    // initialize random number
    var num = generateRandom(bits, rng);
    /* Note: All primes are of the form 30k+i for i < 30 and gcd(30, i)=1. The
    number we are given is always aligned at 30k + 1. Each time the number is
    determined not to be prime we add to get to the next 'i', eg: if the number
    was at 30k + 1 we add 6. */

    var deltaIdx = 0; // get required number of MR tests

    var mrTests = getMillerRabinTests(num.bitLength());

    if ('millerRabinTests' in options) {
      mrTests = options.millerRabinTests;
    } // find prime nearest to 'num' for maxBlockTime ms
    // 10 ms gives 5ms of leeway for other calculations before dropping
    // below 60fps (1000/60 == 16.67), but in reality, the number will
    // likely be higher due to an 'atomic' big int modPow


    var maxBlockTime = 10;

    if ('maxBlockTime' in options) {
      maxBlockTime = options.maxBlockTime;
    }

    _primeinc(num, bits, rng, deltaIdx, mrTests, maxBlockTime, callback);
  }

  function _primeinc(num, bits, rng, deltaIdx, mrTests, maxBlockTime, callback) {
    var start = +new Date();

    do {
      // overflow, regenerate random number
      if (num.bitLength() > bits) {
        num = generateRandom(bits, rng);
      } // do primality test


      if (num.isProbablePrime(mrTests)) {
        return callback(null, num);
      } // get next potential prime


      num.dAddOffset(GCD_30_DELTA[deltaIdx++ % 8], 0);
    } while (maxBlockTime < 0 || +new Date() - start < maxBlockTime); // keep trying later


    forge.util.setImmediate(function () {
      _primeinc(num, bits, rng, deltaIdx, mrTests, maxBlockTime, callback);
    });
  } // NOTE: This algorithm is indeterminate in nature because workers
  // run in parallel looking at different segments of numbers. Even if this
  // algorithm is run twice with the same input from a predictable RNG, it
  // may produce different outputs.


  function primeincFindPrimeWithWorkers(bits, rng, options, callback) {
    // web workers unavailable
    if (typeof Worker === 'undefined') {
      return primeincFindPrimeWithoutWorkers(bits, rng, options, callback);
    } // initialize random number


    var num = generateRandom(bits, rng); // use web workers to generate keys

    var numWorkers = options.workers;
    var workLoad = options.workLoad || 100;
    var range = workLoad * 30 / 8;
    var workerScript = options.workerScript || 'forge/prime.worker.js';

    if (numWorkers === -1) {
      return forge.util.estimateCores(function (err, cores) {
        if (err) {
          // default to 2
          cores = 2;
        }

        numWorkers = cores - 1;
        generate();
      });
    }

    generate();

    function generate() {
      // require at least 1 worker
      numWorkers = Math.max(1, numWorkers); // TODO: consider optimizing by starting workers outside getPrime() ...
      // note that in order to clean up they will have to be made internally
      // asynchronous which may actually be slower
      // start workers immediately

      var workers = [];

      for (var i = 0; i < numWorkers; ++i) {
        // FIXME: fix path or use blob URLs
        workers[i] = new Worker(workerScript);
      }

      var running = numWorkers; // listen for requests from workers and assign ranges to find prime

      for (var i = 0; i < numWorkers; ++i) {
        workers[i].addEventListener('message', workerMessage);
      }
      /* Note: The distribution of random numbers is unknown. Therefore, each
      web worker is continuously allocated a range of numbers to check for a
      random number until one is found.
       Every 30 numbers will be checked just 8 times, because prime numbers
      have the form:
       30k+i, for i < 30 and gcd(30, i)=1 (there are 8 values of i for this)
       Therefore, if we want a web worker to run N checks before asking for
      a new range of numbers, each range must contain N*30/8 numbers.
       For 100 checks (workLoad), this is a range of 375. */


      var found = false;

      function workerMessage(e) {
        // ignore message, prime already found
        if (found) {
          return;
        }

        --running;
        var data = e.data;

        if (data.found) {
          // terminate all workers
          for (var i = 0; i < workers.length; ++i) {
            workers[i].terminate();
          }

          found = true;
          return callback(null, new BigInteger(data.prime, 16));
        } // overflow, regenerate random number


        if (num.bitLength() > bits) {
          num = generateRandom(bits, rng);
        } // assign new range to check


        var hex = num.toString(16); // start prime search

        e.target.postMessage({
          hex: hex,
          workLoad: workLoad
        });
        num.dAddOffset(range, 0);
      }
    }
  }
  /**
   * Generates a random number using the given number of bits and RNG.
   *
   * @param bits the number of bits for the number.
   * @param rng the random number generator to use.
   *
   * @return the random number.
   */


  function generateRandom(bits, rng) {
    var num = new BigInteger(bits, rng); // force MSB set

    var bits1 = bits - 1;

    if (!num.testBit(bits1)) {
      num.bitwiseTo(BigInteger.ONE.shiftLeft(bits1), op_or, num);
    } // align number on 30k+1 boundary


    num.dAddOffset(31 - num.mod(THIRTY).byteValue(), 0);
    return num;
  }
  /**
   * Returns the required number of Miller-Rabin tests to generate a
   * prime with an error probability of (1/2)^80.
   *
   * See Handbook of Applied Cryptography Chapter 4, Table 4.4.
   *
   * @param bits the bit size.
   *
   * @return the required number of iterations.
   */


  function getMillerRabinTests(bits) {
    if (bits <= 100) return 27;
    if (bits <= 150) return 18;
    if (bits <= 200) return 15;
    if (bits <= 250) return 12;
    if (bits <= 300) return 9;
    if (bits <= 350) return 8;
    if (bits <= 400) return 7;
    if (bits <= 500) return 6;
    if (bits <= 600) return 5;
    if (bits <= 800) return 4;
    if (bits <= 1250) return 3;
    return 2;
  }
})();

/***/ }),
/* 410 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * RC2 implementation.
 *
 * @author Stefan Siegl
 *
 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
 *
 * Information on the RC2 cipher is available from RFC #2268,
 * http://www.ietf.org/rfc/rfc2268.txt
 */
var forge = __webpack_require__(7);

__webpack_require__(10);

var piTable = [0xd9, 0x78, 0xf9, 0xc4, 0x19, 0xdd, 0xb5, 0xed, 0x28, 0xe9, 0xfd, 0x79, 0x4a, 0xa0, 0xd8, 0x9d, 0xc6, 0x7e, 0x37, 0x83, 0x2b, 0x76, 0x53, 0x8e, 0x62, 0x4c, 0x64, 0x88, 0x44, 0x8b, 0xfb, 0xa2, 0x17, 0x9a, 0x59, 0xf5, 0x87, 0xb3, 0x4f, 0x13, 0x61, 0x45, 0x6d, 0x8d, 0x09, 0x81, 0x7d, 0x32, 0xbd, 0x8f, 0x40, 0xeb, 0x86, 0xb7, 0x7b, 0x0b, 0xf0, 0x95, 0x21, 0x22, 0x5c, 0x6b, 0x4e, 0x82, 0x54, 0xd6, 0x65, 0x93, 0xce, 0x60, 0xb2, 0x1c, 0x73, 0x56, 0xc0, 0x14, 0xa7, 0x8c, 0xf1, 0xdc, 0x12, 0x75, 0xca, 0x1f, 0x3b, 0xbe, 0xe4, 0xd1, 0x42, 0x3d, 0xd4, 0x30, 0xa3, 0x3c, 0xb6, 0x26, 0x6f, 0xbf, 0x0e, 0xda, 0x46, 0x69, 0x07, 0x57, 0x27, 0xf2, 0x1d, 0x9b, 0xbc, 0x94, 0x43, 0x03, 0xf8, 0x11, 0xc7, 0xf6, 0x90, 0xef, 0x3e, 0xe7, 0x06, 0xc3, 0xd5, 0x2f, 0xc8, 0x66, 0x1e, 0xd7, 0x08, 0xe8, 0xea, 0xde, 0x80, 0x52, 0xee, 0xf7, 0x84, 0xaa, 0x72, 0xac, 0x35, 0x4d, 0x6a, 0x2a, 0x96, 0x1a, 0xd2, 0x71, 0x5a, 0x15, 0x49, 0x74, 0x4b, 0x9f, 0xd0, 0x5e, 0x04, 0x18, 0xa4, 0xec, 0xc2, 0xe0, 0x41, 0x6e, 0x0f, 0x51, 0xcb, 0xcc, 0x24, 0x91, 0xaf, 0x50, 0xa1, 0xf4, 0x70, 0x39, 0x99, 0x7c, 0x3a, 0x85, 0x23, 0xb8, 0xb4, 0x7a, 0xfc, 0x02, 0x36, 0x5b, 0x25, 0x55, 0x97, 0x31, 0x2d, 0x5d, 0xfa, 0x98, 0xe3, 0x8a, 0x92, 0xae, 0x05, 0xdf, 0x29, 0x10, 0x67, 0x6c, 0xba, 0xc9, 0xd3, 0x00, 0xe6, 0xcf, 0xe1, 0x9e, 0xa8, 0x2c, 0x63, 0x16, 0x01, 0x3f, 0x58, 0xe2, 0x89, 0xa9, 0x0d, 0x38, 0x34, 0x1b, 0xab, 0x33, 0xff, 0xb0, 0xbb, 0x48, 0x0c, 0x5f, 0xb9, 0xb1, 0xcd, 0x2e, 0xc5, 0xf3, 0xdb, 0x47, 0xe5, 0xa5, 0x9c, 0x77, 0x0a, 0xa6, 0x20, 0x68, 0xfe, 0x7f, 0xc1, 0xad];
var s = [1, 2, 3, 5];
/**
 * Rotate a word left by given number of bits.
 *
 * Bits that are shifted out on the left are put back in on the right
 * hand side.
 *
 * @param word The word to shift left.
 * @param bits The number of bits to shift by.
 * @return The rotated word.
 */

var rol = function rol(word, bits) {
  return word << bits & 0xffff | (word & 0xffff) >> 16 - bits;
};
/**
 * Rotate a word right by given number of bits.
 *
 * Bits that are shifted out on the right are put back in on the left
 * hand side.
 *
 * @param word The word to shift right.
 * @param bits The number of bits to shift by.
 * @return The rotated word.
 */


var ror = function ror(word, bits) {
  return (word & 0xffff) >> bits | word << 16 - bits & 0xffff;
};
/* RC2 API */


module.exports = forge.rc2 = forge.rc2 || {};
/**
 * Perform RC2 key expansion as per RFC #2268, section 2.
 *
 * @param key variable-length user key (between 1 and 128 bytes)
 * @param effKeyBits number of effective key bits (default: 128)
 * @return the expanded RC2 key (ByteBuffer of 128 bytes)
 */

forge.rc2.expandKey = function (key, effKeyBits) {
  if (typeof key === 'string') {
    key = forge.util.createBuffer(key);
  }

  effKeyBits = effKeyBits || 128;
  /* introduce variables that match the names used in RFC #2268 */

  var L = key;
  var T = key.length();
  var T1 = effKeyBits;
  var T8 = Math.ceil(T1 / 8);
  var TM = 0xff >> (T1 & 0x07);
  var i;

  for (i = T; i < 128; i++) {
    L.putByte(piTable[L.at(i - 1) + L.at(i - T) & 0xff]);
  }

  L.setAt(128 - T8, piTable[L.at(128 - T8) & TM]);

  for (i = 127 - T8; i >= 0; i--) {
    L.setAt(i, piTable[L.at(i + 1) ^ L.at(i + T8)]);
  }

  return L;
};
/**
 * Creates a RC2 cipher object.
 *
 * @param key the symmetric key to use (as base for key generation).
 * @param bits the number of effective key bits.
 * @param encrypt false for decryption, true for encryption.
 *
 * @return the cipher.
 */


var createCipher = function createCipher(key, bits, encrypt) {
  var _finish = false,
      _input = null,
      _output = null,
      _iv = null;
  var mixRound, mashRound;
  var i,
      j,
      K = [];
  /* Expand key and fill into K[] Array */

  key = forge.rc2.expandKey(key, bits);

  for (i = 0; i < 64; i++) {
    K.push(key.getInt16Le());
  }

  if (encrypt) {
    /**
     * Perform one mixing round "in place".
     *
     * @param R Array of four words to perform mixing on.
     */
    mixRound = function mixRound(R) {
      for (i = 0; i < 4; i++) {
        R[i] += K[j] + (R[(i + 3) % 4] & R[(i + 2) % 4]) + (~R[(i + 3) % 4] & R[(i + 1) % 4]);
        R[i] = rol(R[i], s[i]);
        j++;
      }
    };
    /**
     * Perform one mashing round "in place".
     *
     * @param R Array of four words to perform mashing on.
     */


    mashRound = function mashRound(R) {
      for (i = 0; i < 4; i++) {
        R[i] += K[R[(i + 3) % 4] & 63];
      }
    };
  } else {
    /**
     * Perform one r-mixing round "in place".
     *
     * @param R Array of four words to perform mixing on.
     */
    mixRound = function mixRound(R) {
      for (i = 3; i >= 0; i--) {
        R[i] = ror(R[i], s[i]);
        R[i] -= K[j] + (R[(i + 3) % 4] & R[(i + 2) % 4]) + (~R[(i + 3) % 4] & R[(i + 1) % 4]);
        j--;
      }
    };
    /**
     * Perform one r-mashing round "in place".
     *
     * @param R Array of four words to perform mashing on.
     */


    mashRound = function mashRound(R) {
      for (i = 3; i >= 0; i--) {
        R[i] -= K[R[(i + 3) % 4] & 63];
      }
    };
  }
  /**
   * Run the specified cipher execution plan.
   *
   * This function takes four words from the input buffer, applies the IV on
   * it (if requested) and runs the provided execution plan.
   *
   * The plan must be put together in form of a array of arrays.  Where the
   * outer one is simply a list of steps to perform and the inner one needs
   * to have two elements: the first one telling how many rounds to perform,
   * the second one telling what to do (i.e. the function to call).
   *
   * @param {Array} plan The plan to execute.
   */


  var runPlan = function runPlan(plan) {
    var R = [];
    /* Get data from input buffer and fill the four words into R */

    for (i = 0; i < 4; i++) {
      var val = _input.getInt16Le();

      if (_iv !== null) {
        if (encrypt) {
          /* We're encrypting, apply the IV first. */
          val ^= _iv.getInt16Le();
        } else {
          /* We're decryption, keep cipher text for next block. */
          _iv.putInt16Le(val);
        }
      }

      R.push(val & 0xffff);
    }
    /* Reset global "j" variable as per spec. */


    j = encrypt ? 0 : 63;
    /* Run execution plan. */

    for (var ptr = 0; ptr < plan.length; ptr++) {
      for (var ctr = 0; ctr < plan[ptr][0]; ctr++) {
        plan[ptr][1](R);
      }
    }
    /* Write back result to output buffer. */


    for (i = 0; i < 4; i++) {
      if (_iv !== null) {
        if (encrypt) {
          /* We're encrypting in CBC-mode, feed back encrypted bytes into
             IV buffer to carry it forward to next block. */
          _iv.putInt16Le(R[i]);
        } else {
          R[i] ^= _iv.getInt16Le();
        }
      }

      _output.putInt16Le(R[i]);
    }
  };
  /* Create cipher object */


  var cipher = null;
  cipher = {
    /**
     * Starts or restarts the encryption or decryption process, whichever
     * was previously configured.
     *
     * To use the cipher in CBC mode, iv may be given either as a string
     * of bytes, or as a byte buffer.  For ECB mode, give null as iv.
     *
     * @param iv the initialization vector to use, null for ECB mode.
     * @param output the output the buffer to write to, null to create one.
     */
    start: function start(iv, output) {
      if (iv) {
        /* CBC mode */
        if (typeof iv === 'string') {
          iv = forge.util.createBuffer(iv);
        }
      }

      _finish = false;
      _input = forge.util.createBuffer();
      _output = output || new forge.util.createBuffer();
      _iv = iv;
      cipher.output = _output;
    },

    /**
     * Updates the next block.
     *
     * @param input the buffer to read from.
     */
    update: function update(input) {
      if (!_finish) {
        // not finishing, so fill the input buffer with more input
        _input.putBuffer(input);
      }

      while (_input.length() >= 8) {
        runPlan([[5, mixRound], [1, mashRound], [6, mixRound], [1, mashRound], [5, mixRound]]);
      }
    },

    /**
     * Finishes encrypting or decrypting.
     *
     * @param pad a padding function to use, null for PKCS#7 padding,
     *           signature(blockSize, buffer, decrypt).
     *
     * @return true if successful, false on error.
     */
    finish: function finish(pad) {
      var rval = true;

      if (encrypt) {
        if (pad) {
          rval = pad(8, _input, !encrypt);
        } else {
          // add PKCS#7 padding to block (each pad byte is the
          // value of the number of pad bytes)
          var padding = _input.length() === 8 ? 8 : 8 - _input.length();

          _input.fillWithByte(padding, padding);
        }
      }

      if (rval) {
        // do final update
        _finish = true;
        cipher.update();
      }

      if (!encrypt) {
        // check for error: input data not a multiple of block size
        rval = _input.length() === 0;

        if (rval) {
          if (pad) {
            rval = pad(8, _output, !encrypt);
          } else {
            // ensure padding byte count is valid
            var len = _output.length();

            var count = _output.at(len - 1);

            if (count > len) {
              rval = false;
            } else {
              // trim off padding bytes
              _output.truncate(count);
            }
          }
        }
      }

      return rval;
    }
  };
  return cipher;
};
/**
 * Creates an RC2 cipher object to encrypt data in ECB or CBC mode using the
 * given symmetric key. The output will be stored in the 'output' member
 * of the returned cipher.
 *
 * The key and iv may be given as a string of bytes or a byte buffer.
 * The cipher is initialized to use 128 effective key bits.
 *
 * @param key the symmetric key to use.
 * @param iv the initialization vector to use.
 * @param output the buffer to write to, null to create one.
 *
 * @return the cipher.
 */


forge.rc2.startEncrypting = function (key, iv, output) {
  var cipher = forge.rc2.createEncryptionCipher(key, 128);
  cipher.start(iv, output);
  return cipher;
};
/**
 * Creates an RC2 cipher object to encrypt data in ECB or CBC mode using the
 * given symmetric key.
 *
 * The key may be given as a string of bytes or a byte buffer.
 *
 * To start encrypting call start() on the cipher with an iv and optional
 * output buffer.
 *
 * @param key the symmetric key to use.
 *
 * @return the cipher.
 */


forge.rc2.createEncryptionCipher = function (key, bits) {
  return createCipher(key, bits, true);
};
/**
 * Creates an RC2 cipher object to decrypt data in ECB or CBC mode using the
 * given symmetric key. The output will be stored in the 'output' member
 * of the returned cipher.
 *
 * The key and iv may be given as a string of bytes or a byte buffer.
 * The cipher is initialized to use 128 effective key bits.
 *
 * @param key the symmetric key to use.
 * @param iv the initialization vector to use.
 * @param output the buffer to write to, null to create one.
 *
 * @return the cipher.
 */


forge.rc2.startDecrypting = function (key, iv, output) {
  var cipher = forge.rc2.createDecryptionCipher(key, 128);
  cipher.start(iv, output);
  return cipher;
};
/**
 * Creates an RC2 cipher object to decrypt data in ECB or CBC mode using the
 * given symmetric key.
 *
 * The key may be given as a string of bytes or a byte buffer.
 *
 * To start decrypting call start() on the cipher with an iv and optional
 * output buffer.
 *
 * @param key the symmetric key to use.
 *
 * @return the cipher.
 */


forge.rc2.createDecryptionCipher = function (key, bits) {
  return createCipher(key, bits, false);
};

/***/ }),
/* 411 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const multihashing = __webpack_require__(22);

const protobuf = __webpack_require__(24);

const bs58 = __webpack_require__(39);

const errcode = __webpack_require__(35);

const crypto = __webpack_require__(422);

const pbm = protobuf(__webpack_require__(124));

__webpack_require__(437);

__webpack_require__(74);

const forge = __webpack_require__(7);

class RsaPublicKey {
  constructor(key) {
    this._key = key;
  }

  async verify(data, sig) {
    // eslint-disable-line require-await
    return crypto.hashAndVerify(this._key, sig, data);
  }

  marshal() {
    return crypto.utils.jwkToPkix(this._key);
  }

  get bytes() {
    return pbm.PublicKey.encode({
      Type: pbm.KeyType.RSA,
      Data: this.marshal()
    });
  }

  encrypt(bytes) {
    return crypto.encrypt(this._key, bytes);
  }

  equals(key) {
    return this.bytes.equals(key.bytes);
  }

  async hash() {
    // eslint-disable-line require-await
    return multihashing(this.bytes, 'sha2-256');
  }

}

class RsaPrivateKey {
  // key       - Object of the jwk format
  // publicKey - Buffer of the spki format
  constructor(key, publicKey) {
    this._key = key;
    this._publicKey = publicKey;
  }

  genSecret() {
    return crypto.getRandomValues(16);
  }

  async sign(message) {
    // eslint-disable-line require-await
    return crypto.hashAndSign(this._key, message);
  }

  get public() {
    if (!this._publicKey) {
      throw errcode(new Error('public key not provided'), 'ERR_PUBKEY_NOT_PROVIDED');
    }

    return new RsaPublicKey(this._publicKey);
  }

  decrypt(bytes) {
    return crypto.decrypt(this._key, bytes);
  }

  marshal() {
    return crypto.utils.jwkToPkcs1(this._key);
  }

  get bytes() {
    return pbm.PrivateKey.encode({
      Type: pbm.KeyType.RSA,
      Data: this.marshal()
    });
  }

  equals(key) {
    return this.bytes.equals(key.bytes);
  }

  async hash() {
    // eslint-disable-line require-await
    return multihashing(this.bytes, 'sha2-256');
  }
  /**
   * Gets the ID of the key.
   *
   * The key id is the base58 encoding of the SHA-256 multihash of its public key.
   * The public key is a protobuf encoding containing a type and the DER encoding
   * of the PKCS SubjectPublicKeyInfo.
   *
   * @returns {Promise<String>}
   */


  async id() {
    const hash = await this.public.hash();
    return bs58.encode(hash);
  }
  /**
   * Exports the key into a password protected PEM format
   *
   * @param {string} password - The password to read the encrypted PEM
   * @param {string} [format] - Defaults to 'pkcs-8'.
   */


  async export(password, format = 'pkcs-8') {
    // eslint-disable-line require-await
    let pem = null;
    const buffer = new forge.util.ByteBuffer(this.marshal());
    const asn1 = forge.asn1.fromDer(buffer);
    const privateKey = forge.pki.privateKeyFromAsn1(asn1);

    if (format === 'pkcs-8') {
      const options = {
        algorithm: 'aes256',
        count: 10000,
        saltSize: 128 / 8,
        prfAlgorithm: 'sha512'
      };
      pem = forge.pki.encryptRsaPrivateKey(privateKey, password, options);
    } else {
      throw errcode(new Error("Unknown export format '".concat(format, "'. Must be pkcs-8")), 'ERR_INVALID_EXPORT_FORMAT');
    }

    return pem;
  }

}

async function unmarshalRsaPrivateKey(bytes) {
  const jwk = crypto.utils.pkcs1ToJwk(bytes);
  const keys = await crypto.unmarshalPrivateKey(jwk);
  return new RsaPrivateKey(keys.privateKey, keys.publicKey);
}

function unmarshalRsaPublicKey(bytes) {
  const jwk = crypto.utils.pkixToJwk(bytes);
  return new RsaPublicKey(jwk);
}

async function fromJwk(jwk) {
  const keys = await crypto.unmarshalPrivateKey(jwk);
  return new RsaPrivateKey(keys.privateKey, keys.publicKey);
}

async function generateKeyPair(bits) {
  const keys = await crypto.generateKey(bits);
  return new RsaPrivateKey(keys.privateKey, keys.publicKey);
}

module.exports = {
  RsaPublicKey,
  RsaPrivateKey,
  unmarshalRsaPublicKey,
  unmarshalRsaPrivateKey,
  generateKeyPair,
  fromJwk
};

/***/ }),
/* 412 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const {
  Buffer
} = __webpack_require__(0);

const sha3 = __webpack_require__(413);

const mur = __webpack_require__(414);

const sha = __webpack_require__(416);

const {
  fromNumberTo32BitBuf
} = __webpack_require__(417); // Note that although this function doesn't do any asynchronous work, we mark
// the function as async because it must return a Promise to match the API
// for other functions that do perform asynchronous work (see sha.browser.js)
// eslint-disable-next-line


const hash = algorithm => async data => {
  switch (algorithm) {
    case 'sha3-224':
      return Buffer.from(sha3.sha3_224.arrayBuffer(data));

    case 'sha3-256':
      return Buffer.from(sha3.sha3_256.arrayBuffer(data));

    case 'sha3-384':
      return Buffer.from(sha3.sha3_384.arrayBuffer(data));

    case 'sha3-512':
      return Buffer.from(sha3.sha3_512.arrayBuffer(data));

    case 'shake-128':
      return Buffer.from(sha3.shake128.create(128).update(data).arrayBuffer());

    case 'shake-256':
      return Buffer.from(sha3.shake256.create(256).update(data).arrayBuffer());

    case 'keccak-224':
      return Buffer.from(sha3.keccak224.arrayBuffer(data));

    case 'keccak-256':
      return Buffer.from(sha3.keccak256.arrayBuffer(data));

    case 'keccak-384':
      return Buffer.from(sha3.keccak384.arrayBuffer(data));

    case 'keccak-512':
      return Buffer.from(sha3.keccak512.arrayBuffer(data));

    case 'murmur3-128':
      return Buffer.from(mur.x64.hash128(data), 'hex');

    case 'murmur3-32':
      return fromNumberTo32BitBuf(mur.x86.hash32(data));

    default:
      throw new TypeError("".concat(algorithm, " is not a supported algorithm"));
  }
};

const identity = data => Buffer.from(data);

module.exports = {
  identity,
  sha1: sha('sha1'),
  sha2256: sha('sha2-256'),
  sha2512: sha('sha2-512'),
  dblSha2256: sha('dbl-sha2-256'),
  sha3224: hash('sha3-224'),
  sha3256: hash('sha3-256'),
  sha3384: hash('sha3-384'),
  sha3512: hash('sha3-512'),
  shake128: hash('shake-128'),
  shake256: hash('shake-256'),
  keccak224: hash('keccak-224'),
  keccak256: hash('keccak-256'),
  keccak384: hash('keccak-384'),
  keccak512: hash('keccak-512'),
  murmur3128: hash('murmur3-128'),
  murmur332: hash('murmur3-32'),
  addBlake: __webpack_require__(418)
};

/***/ }),
/* 413 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, global) {var __WEBPACK_AMD_DEFINE_RESULT__;

/**
 * [js-sha3]{@link https://github.com/emn178/js-sha3}
 *
 * @version 0.8.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2015-2018
 * @license MIT
 */

/*jslint bitwise: true */
(function () {
  'use strict';

  var INPUT_ERROR = 'input is invalid type';
  var FINALIZE_ERROR = 'finalize already called';
  var WINDOW = typeof window === 'object';
  var root = WINDOW ? window : {};

  if (root.JS_SHA3_NO_WINDOW) {
    WINDOW = false;
  }

  var WEB_WORKER = !WINDOW && typeof self === 'object';
  var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;

  if (NODE_JS) {
    root = global;
  } else if (WEB_WORKER) {
    root = self;
  }

  var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && typeof module === 'object' && module.exports;
  var AMD =  true && __webpack_require__(203);
  var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';
  var HEX_CHARS = '0123456789abcdef'.split('');
  var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
  var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
  var KECCAK_PADDING = [1, 256, 65536, 16777216];
  var PADDING = [6, 1536, 393216, 100663296];
  var SHIFT = [0, 8, 16, 24];
  var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
  var BITS = [224, 256, 384, 512];
  var SHAKE_BITS = [128, 256];
  var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array', 'digest'];
  var CSHAKE_BYTEPAD = {
    '128': 168,
    '256': 136
  };

  if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
    Array.isArray = function (obj) {
      return Object.prototype.toString.call(obj) === '[object Array]';
    };
  }

  if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
    ArrayBuffer.isView = function (obj) {
      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;
    };
  }

  var createOutputMethod = function createOutputMethod(bits, padding, outputType) {
    return function (message) {
      return new Keccak(bits, padding, bits).update(message)[outputType]();
    };
  };

  var createShakeOutputMethod = function createShakeOutputMethod(bits, padding, outputType) {
    return function (message, outputBits) {
      return new Keccak(bits, padding, outputBits).update(message)[outputType]();
    };
  };

  var createCshakeOutputMethod = function createCshakeOutputMethod(bits, padding, outputType) {
    return function (message, outputBits, n, s) {
      return methods['cshake' + bits].update(message, outputBits, n, s)[outputType]();
    };
  };

  var createKmacOutputMethod = function createKmacOutputMethod(bits, padding, outputType) {
    return function (key, message, outputBits, s) {
      return methods['kmac' + bits].update(key, message, outputBits, s)[outputType]();
    };
  };

  var createOutputMethods = function createOutputMethods(method, createMethod, bits, padding) {
    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
      var type = OUTPUT_TYPES[i];
      method[type] = createMethod(bits, padding, type);
    }

    return method;
  };

  var createMethod = function createMethod(bits, padding) {
    var method = createOutputMethod(bits, padding, 'hex');

    method.create = function () {
      return new Keccak(bits, padding, bits);
    };

    method.update = function (message) {
      return method.create().update(message);
    };

    return createOutputMethods(method, createOutputMethod, bits, padding);
  };

  var createShakeMethod = function createShakeMethod(bits, padding) {
    var method = createShakeOutputMethod(bits, padding, 'hex');

    method.create = function (outputBits) {
      return new Keccak(bits, padding, outputBits);
    };

    method.update = function (message, outputBits) {
      return method.create(outputBits).update(message);
    };

    return createOutputMethods(method, createShakeOutputMethod, bits, padding);
  };

  var createCshakeMethod = function createCshakeMethod(bits, padding) {
    var w = CSHAKE_BYTEPAD[bits];
    var method = createCshakeOutputMethod(bits, padding, 'hex');

    method.create = function (outputBits, n, s) {
      if (!n && !s) {
        return methods['shake' + bits].create(outputBits);
      } else {
        return new Keccak(bits, padding, outputBits).bytepad([n, s], w);
      }
    };

    method.update = function (message, outputBits, n, s) {
      return method.create(outputBits, n, s).update(message);
    };

    return createOutputMethods(method, createCshakeOutputMethod, bits, padding);
  };

  var createKmacMethod = function createKmacMethod(bits, padding) {
    var w = CSHAKE_BYTEPAD[bits];
    var method = createKmacOutputMethod(bits, padding, 'hex');

    method.create = function (key, outputBits, s) {
      return new Kmac(bits, padding, outputBits).bytepad(['KMAC', s], w).bytepad([key], w);
    };

    method.update = function (key, message, outputBits, s) {
      return method.create(key, outputBits, s).update(message);
    };

    return createOutputMethods(method, createKmacOutputMethod, bits, padding);
  };

  var algorithms = [{
    name: 'keccak',
    padding: KECCAK_PADDING,
    bits: BITS,
    createMethod: createMethod
  }, {
    name: 'sha3',
    padding: PADDING,
    bits: BITS,
    createMethod: createMethod
  }, {
    name: 'shake',
    padding: SHAKE_PADDING,
    bits: SHAKE_BITS,
    createMethod: createShakeMethod
  }, {
    name: 'cshake',
    padding: CSHAKE_PADDING,
    bits: SHAKE_BITS,
    createMethod: createCshakeMethod
  }, {
    name: 'kmac',
    padding: CSHAKE_PADDING,
    bits: SHAKE_BITS,
    createMethod: createKmacMethod
  }];
  var methods = {},
      methodNames = [];

  for (var i = 0; i < algorithms.length; ++i) {
    var algorithm = algorithms[i];
    var bits = algorithm.bits;

    for (var j = 0; j < bits.length; ++j) {
      var methodName = algorithm.name + '_' + bits[j];
      methodNames.push(methodName);
      methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);

      if (algorithm.name !== 'sha3') {
        var newMethodName = algorithm.name + bits[j];
        methodNames.push(newMethodName);
        methods[newMethodName] = methods[methodName];
      }
    }
  }

  function Keccak(bits, padding, outputBits) {
    this.blocks = [];
    this.s = [];
    this.padding = padding;
    this.outputBits = outputBits;
    this.reset = true;
    this.finalized = false;
    this.block = 0;
    this.start = 0;
    this.blockCount = 1600 - (bits << 1) >> 5;
    this.byteCount = this.blockCount << 2;
    this.outputBlocks = outputBits >> 5;
    this.extraBytes = (outputBits & 31) >> 3;

    for (var i = 0; i < 50; ++i) {
      this.s[i] = 0;
    }
  }

  Keccak.prototype.update = function (message) {
    if (this.finalized) {
      throw new Error(FINALIZE_ERROR);
    }

    var notString,
        type = typeof message;

    if (type !== 'string') {
      if (type === 'object') {
        if (message === null) {
          throw new Error(INPUT_ERROR);
        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
          message = new Uint8Array(message);
        } else if (!Array.isArray(message)) {
          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
            throw new Error(INPUT_ERROR);
          }
        }
      } else {
        throw new Error(INPUT_ERROR);
      }

      notString = true;
    }

    var blocks = this.blocks,
        byteCount = this.byteCount,
        length = message.length,
        blockCount = this.blockCount,
        index = 0,
        s = this.s,
        i,
        code;

    while (index < length) {
      if (this.reset) {
        this.reset = false;
        blocks[0] = this.block;

        for (i = 1; i < blockCount + 1; ++i) {
          blocks[i] = 0;
        }
      }

      if (notString) {
        for (i = this.start; index < length && i < byteCount; ++index) {
          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
        }
      } else {
        for (i = this.start; index < length && i < byteCount; ++index) {
          code = message.charCodeAt(index);

          if (code < 0x80) {
            blocks[i >> 2] |= code << SHIFT[i++ & 3];
          } else if (code < 0x800) {
            blocks[i >> 2] |= (0xc0 | code >> 6) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
          } else if (code < 0xd800 || code >= 0xe000) {
            blocks[i >> 2] |= (0xe0 | code >> 12) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
          } else {
            code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);
            blocks[i >> 2] |= (0xf0 | code >> 18) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code >> 12 & 0x3f) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
          }
        }
      }

      this.lastByteIndex = i;

      if (i >= byteCount) {
        this.start = i - byteCount;
        this.block = blocks[blockCount];

        for (i = 0; i < blockCount; ++i) {
          s[i] ^= blocks[i];
        }

        f(s);
        this.reset = true;
      } else {
        this.start = i;
      }
    }

    return this;
  };

  Keccak.prototype.encode = function (x, right) {
    var o = x & 255,
        n = 1;
    var bytes = [o];
    x = x >> 8;
    o = x & 255;

    while (o > 0) {
      bytes.unshift(o);
      x = x >> 8;
      o = x & 255;
      ++n;
    }

    if (right) {
      bytes.push(n);
    } else {
      bytes.unshift(n);
    }

    this.update(bytes);
    return bytes.length;
  };

  Keccak.prototype.encodeString = function (str) {
    var notString,
        type = typeof str;

    if (type !== 'string') {
      if (type === 'object') {
        if (str === null) {
          throw new Error(INPUT_ERROR);
        } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
          str = new Uint8Array(str);
        } else if (!Array.isArray(str)) {
          if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
            throw new Error(INPUT_ERROR);
          }
        }
      } else {
        throw new Error(INPUT_ERROR);
      }

      notString = true;
    }

    var bytes = 0,
        length = str.length;

    if (notString) {
      bytes = length;
    } else {
      for (var i = 0; i < str.length; ++i) {
        var code = str.charCodeAt(i);

        if (code < 0x80) {
          bytes += 1;
        } else if (code < 0x800) {
          bytes += 2;
        } else if (code < 0xd800 || code >= 0xe000) {
          bytes += 3;
        } else {
          code = 0x10000 + ((code & 0x3ff) << 10 | str.charCodeAt(++i) & 0x3ff);
          bytes += 4;
        }
      }
    }

    bytes += this.encode(bytes * 8);
    this.update(str);
    return bytes;
  };

  Keccak.prototype.bytepad = function (strs, w) {
    var bytes = this.encode(w);

    for (var i = 0; i < strs.length; ++i) {
      bytes += this.encodeString(strs[i]);
    }

    var paddingBytes = w - bytes % w;
    var zeros = [];
    zeros.length = paddingBytes;
    this.update(zeros);
    return this;
  };

  Keccak.prototype.finalize = function () {
    if (this.finalized) {
      return;
    }

    this.finalized = true;
    var blocks = this.blocks,
        i = this.lastByteIndex,
        blockCount = this.blockCount,
        s = this.s;
    blocks[i >> 2] |= this.padding[i & 3];

    if (this.lastByteIndex === this.byteCount) {
      blocks[0] = blocks[blockCount];

      for (i = 1; i < blockCount + 1; ++i) {
        blocks[i] = 0;
      }
    }

    blocks[blockCount - 1] |= 0x80000000;

    for (i = 0; i < blockCount; ++i) {
      s[i] ^= blocks[i];
    }

    f(s);
  };

  Keccak.prototype.toString = Keccak.prototype.hex = function () {
    this.finalize();
    var blockCount = this.blockCount,
        s = this.s,
        outputBlocks = this.outputBlocks,
        extraBytes = this.extraBytes,
        i = 0,
        j = 0;
    var hex = '',
        block;

    while (j < outputBlocks) {
      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
        block = s[i];
        hex += HEX_CHARS[block >> 4 & 0x0F] + HEX_CHARS[block & 0x0F] + HEX_CHARS[block >> 12 & 0x0F] + HEX_CHARS[block >> 8 & 0x0F] + HEX_CHARS[block >> 20 & 0x0F] + HEX_CHARS[block >> 16 & 0x0F] + HEX_CHARS[block >> 28 & 0x0F] + HEX_CHARS[block >> 24 & 0x0F];
      }

      if (j % blockCount === 0) {
        f(s);
        i = 0;
      }
    }

    if (extraBytes) {
      block = s[i];
      hex += HEX_CHARS[block >> 4 & 0x0F] + HEX_CHARS[block & 0x0F];

      if (extraBytes > 1) {
        hex += HEX_CHARS[block >> 12 & 0x0F] + HEX_CHARS[block >> 8 & 0x0F];
      }

      if (extraBytes > 2) {
        hex += HEX_CHARS[block >> 20 & 0x0F] + HEX_CHARS[block >> 16 & 0x0F];
      }
    }

    return hex;
  };

  Keccak.prototype.arrayBuffer = function () {
    this.finalize();
    var blockCount = this.blockCount,
        s = this.s,
        outputBlocks = this.outputBlocks,
        extraBytes = this.extraBytes,
        i = 0,
        j = 0;
    var bytes = this.outputBits >> 3;
    var buffer;

    if (extraBytes) {
      buffer = new ArrayBuffer(outputBlocks + 1 << 2);
    } else {
      buffer = new ArrayBuffer(bytes);
    }

    var array = new Uint32Array(buffer);

    while (j < outputBlocks) {
      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
        array[j] = s[i];
      }

      if (j % blockCount === 0) {
        f(s);
      }
    }

    if (extraBytes) {
      array[i] = s[i];
      buffer = buffer.slice(0, bytes);
    }

    return buffer;
  };

  Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;

  Keccak.prototype.digest = Keccak.prototype.array = function () {
    this.finalize();
    var blockCount = this.blockCount,
        s = this.s,
        outputBlocks = this.outputBlocks,
        extraBytes = this.extraBytes,
        i = 0,
        j = 0;
    var array = [],
        offset,
        block;

    while (j < outputBlocks) {
      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
        offset = j << 2;
        block = s[i];
        array[offset] = block & 0xFF;
        array[offset + 1] = block >> 8 & 0xFF;
        array[offset + 2] = block >> 16 & 0xFF;
        array[offset + 3] = block >> 24 & 0xFF;
      }

      if (j % blockCount === 0) {
        f(s);
      }
    }

    if (extraBytes) {
      offset = j << 2;
      block = s[i];
      array[offset] = block & 0xFF;

      if (extraBytes > 1) {
        array[offset + 1] = block >> 8 & 0xFF;
      }

      if (extraBytes > 2) {
        array[offset + 2] = block >> 16 & 0xFF;
      }
    }

    return array;
  };

  function Kmac(bits, padding, outputBits) {
    Keccak.call(this, bits, padding, outputBits);
  }

  Kmac.prototype = new Keccak();

  Kmac.prototype.finalize = function () {
    this.encode(this.outputBits, true);
    return Keccak.prototype.finalize.call(this);
  };

  var f = function f(s) {
    var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;

    for (n = 0; n < 48; n += 2) {
      c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
      c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
      c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
      c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
      c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
      c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
      c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
      c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
      c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
      c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];
      h = c8 ^ (c2 << 1 | c3 >>> 31);
      l = c9 ^ (c3 << 1 | c2 >>> 31);
      s[0] ^= h;
      s[1] ^= l;
      s[10] ^= h;
      s[11] ^= l;
      s[20] ^= h;
      s[21] ^= l;
      s[30] ^= h;
      s[31] ^= l;
      s[40] ^= h;
      s[41] ^= l;
      h = c0 ^ (c4 << 1 | c5 >>> 31);
      l = c1 ^ (c5 << 1 | c4 >>> 31);
      s[2] ^= h;
      s[3] ^= l;
      s[12] ^= h;
      s[13] ^= l;
      s[22] ^= h;
      s[23] ^= l;
      s[32] ^= h;
      s[33] ^= l;
      s[42] ^= h;
      s[43] ^= l;
      h = c2 ^ (c6 << 1 | c7 >>> 31);
      l = c3 ^ (c7 << 1 | c6 >>> 31);
      s[4] ^= h;
      s[5] ^= l;
      s[14] ^= h;
      s[15] ^= l;
      s[24] ^= h;
      s[25] ^= l;
      s[34] ^= h;
      s[35] ^= l;
      s[44] ^= h;
      s[45] ^= l;
      h = c4 ^ (c8 << 1 | c9 >>> 31);
      l = c5 ^ (c9 << 1 | c8 >>> 31);
      s[6] ^= h;
      s[7] ^= l;
      s[16] ^= h;
      s[17] ^= l;
      s[26] ^= h;
      s[27] ^= l;
      s[36] ^= h;
      s[37] ^= l;
      s[46] ^= h;
      s[47] ^= l;
      h = c6 ^ (c0 << 1 | c1 >>> 31);
      l = c7 ^ (c1 << 1 | c0 >>> 31);
      s[8] ^= h;
      s[9] ^= l;
      s[18] ^= h;
      s[19] ^= l;
      s[28] ^= h;
      s[29] ^= l;
      s[38] ^= h;
      s[39] ^= l;
      s[48] ^= h;
      s[49] ^= l;
      b0 = s[0];
      b1 = s[1];
      b32 = s[11] << 4 | s[10] >>> 28;
      b33 = s[10] << 4 | s[11] >>> 28;
      b14 = s[20] << 3 | s[21] >>> 29;
      b15 = s[21] << 3 | s[20] >>> 29;
      b46 = s[31] << 9 | s[30] >>> 23;
      b47 = s[30] << 9 | s[31] >>> 23;
      b28 = s[40] << 18 | s[41] >>> 14;
      b29 = s[41] << 18 | s[40] >>> 14;
      b20 = s[2] << 1 | s[3] >>> 31;
      b21 = s[3] << 1 | s[2] >>> 31;
      b2 = s[13] << 12 | s[12] >>> 20;
      b3 = s[12] << 12 | s[13] >>> 20;
      b34 = s[22] << 10 | s[23] >>> 22;
      b35 = s[23] << 10 | s[22] >>> 22;
      b16 = s[33] << 13 | s[32] >>> 19;
      b17 = s[32] << 13 | s[33] >>> 19;
      b48 = s[42] << 2 | s[43] >>> 30;
      b49 = s[43] << 2 | s[42] >>> 30;
      b40 = s[5] << 30 | s[4] >>> 2;
      b41 = s[4] << 30 | s[5] >>> 2;
      b22 = s[14] << 6 | s[15] >>> 26;
      b23 = s[15] << 6 | s[14] >>> 26;
      b4 = s[25] << 11 | s[24] >>> 21;
      b5 = s[24] << 11 | s[25] >>> 21;
      b36 = s[34] << 15 | s[35] >>> 17;
      b37 = s[35] << 15 | s[34] >>> 17;
      b18 = s[45] << 29 | s[44] >>> 3;
      b19 = s[44] << 29 | s[45] >>> 3;
      b10 = s[6] << 28 | s[7] >>> 4;
      b11 = s[7] << 28 | s[6] >>> 4;
      b42 = s[17] << 23 | s[16] >>> 9;
      b43 = s[16] << 23 | s[17] >>> 9;
      b24 = s[26] << 25 | s[27] >>> 7;
      b25 = s[27] << 25 | s[26] >>> 7;
      b6 = s[36] << 21 | s[37] >>> 11;
      b7 = s[37] << 21 | s[36] >>> 11;
      b38 = s[47] << 24 | s[46] >>> 8;
      b39 = s[46] << 24 | s[47] >>> 8;
      b30 = s[8] << 27 | s[9] >>> 5;
      b31 = s[9] << 27 | s[8] >>> 5;
      b12 = s[18] << 20 | s[19] >>> 12;
      b13 = s[19] << 20 | s[18] >>> 12;
      b44 = s[29] << 7 | s[28] >>> 25;
      b45 = s[28] << 7 | s[29] >>> 25;
      b26 = s[38] << 8 | s[39] >>> 24;
      b27 = s[39] << 8 | s[38] >>> 24;
      b8 = s[48] << 14 | s[49] >>> 18;
      b9 = s[49] << 14 | s[48] >>> 18;
      s[0] = b0 ^ ~b2 & b4;
      s[1] = b1 ^ ~b3 & b5;
      s[10] = b10 ^ ~b12 & b14;
      s[11] = b11 ^ ~b13 & b15;
      s[20] = b20 ^ ~b22 & b24;
      s[21] = b21 ^ ~b23 & b25;
      s[30] = b30 ^ ~b32 & b34;
      s[31] = b31 ^ ~b33 & b35;
      s[40] = b40 ^ ~b42 & b44;
      s[41] = b41 ^ ~b43 & b45;
      s[2] = b2 ^ ~b4 & b6;
      s[3] = b3 ^ ~b5 & b7;
      s[12] = b12 ^ ~b14 & b16;
      s[13] = b13 ^ ~b15 & b17;
      s[22] = b22 ^ ~b24 & b26;
      s[23] = b23 ^ ~b25 & b27;
      s[32] = b32 ^ ~b34 & b36;
      s[33] = b33 ^ ~b35 & b37;
      s[42] = b42 ^ ~b44 & b46;
      s[43] = b43 ^ ~b45 & b47;
      s[4] = b4 ^ ~b6 & b8;
      s[5] = b5 ^ ~b7 & b9;
      s[14] = b14 ^ ~b16 & b18;
      s[15] = b15 ^ ~b17 & b19;
      s[24] = b24 ^ ~b26 & b28;
      s[25] = b25 ^ ~b27 & b29;
      s[34] = b34 ^ ~b36 & b38;
      s[35] = b35 ^ ~b37 & b39;
      s[44] = b44 ^ ~b46 & b48;
      s[45] = b45 ^ ~b47 & b49;
      s[6] = b6 ^ ~b8 & b0;
      s[7] = b7 ^ ~b9 & b1;
      s[16] = b16 ^ ~b18 & b10;
      s[17] = b17 ^ ~b19 & b11;
      s[26] = b26 ^ ~b28 & b20;
      s[27] = b27 ^ ~b29 & b21;
      s[36] = b36 ^ ~b38 & b30;
      s[37] = b37 ^ ~b39 & b31;
      s[46] = b46 ^ ~b48 & b40;
      s[47] = b47 ^ ~b49 & b41;
      s[8] = b8 ^ ~b0 & b2;
      s[9] = b9 ^ ~b1 & b3;
      s[18] = b18 ^ ~b10 & b12;
      s[19] = b19 ^ ~b11 & b13;
      s[28] = b28 ^ ~b20 & b22;
      s[29] = b29 ^ ~b21 & b23;
      s[38] = b38 ^ ~b30 & b32;
      s[39] = b39 ^ ~b31 & b33;
      s[48] = b48 ^ ~b40 & b42;
      s[49] = b49 ^ ~b41 & b43;
      s[0] ^= RC[n];
      s[1] ^= RC[n + 1];
    }
  };

  if (COMMON_JS) {
    module.exports = methods;
  } else {
    for (i = 0; i < methodNames.length; ++i) {
      root[methodNames[i]] = methods[methodNames[i]];
    }

    if (AMD) {
      !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
        return methods;
      }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    }
  }
})();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5), __webpack_require__(8)))

/***/ }),
/* 414 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(415);

/***/ }),
/* 415 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* jshint -W086: true */
// +----------------------------------------------------------------------+
// | murmurHash3js.js v3.0.1 // https://github.com/pid/murmurHash3js
// | A javascript implementation of MurmurHash3's x86 hashing algorithms. |
// |----------------------------------------------------------------------|
// | Copyright (c) 2012-2015 Karan Lyons                                       |
// | https://github.com/karanlyons/murmurHash3.js/blob/c1778f75792abef7bdd74bc85d2d4e1a3d25cfe9/murmurHash3.js |
// | Freely distributable under the MIT license.                          |
// +----------------------------------------------------------------------+
;

(function (root, undefined) {
  'use strict'; // Create a local object that'll be exported or referenced globally.

  var library = {
    'version': '3.0.0',
    'x86': {},
    'x64': {},
    'inputValidation': true
  }; // PRIVATE FUNCTIONS
  // -----------------

  function _validBytes(bytes) {
    // check the input is an array or a typed array
    if (!Array.isArray(bytes) && !ArrayBuffer.isView(bytes)) {
      return false;
    } // check all bytes are actually bytes


    for (var i = 0; i < bytes.length; i++) {
      if (!Number.isInteger(bytes[i]) || bytes[i] < 0 || bytes[i] > 255) {
        return false;
      }
    }

    return true;
  }

  function _x86Multiply(m, n) {
    //
    // Given two 32bit ints, returns the two multiplied together as a
    // 32bit int.
    //
    return (m & 0xffff) * n + (((m >>> 16) * n & 0xffff) << 16);
  }

  function _x86Rotl(m, n) {
    //
    // Given a 32bit int and an int representing a number of bit positions,
    // returns the 32bit int rotated left by that number of positions.
    //
    return m << n | m >>> 32 - n;
  }

  function _x86Fmix(h) {
    //
    // Given a block, returns murmurHash3's final x86 mix of that block.
    //
    h ^= h >>> 16;
    h = _x86Multiply(h, 0x85ebca6b);
    h ^= h >>> 13;
    h = _x86Multiply(h, 0xc2b2ae35);
    h ^= h >>> 16;
    return h;
  }

  function _x64Add(m, n) {
    //
    // Given two 64bit ints (as an array of two 32bit ints) returns the two
    // added together as a 64bit int (as an array of two 32bit ints).
    //
    m = [m[0] >>> 16, m[0] & 0xffff, m[1] >>> 16, m[1] & 0xffff];
    n = [n[0] >>> 16, n[0] & 0xffff, n[1] >>> 16, n[1] & 0xffff];
    var o = [0, 0, 0, 0];
    o[3] += m[3] + n[3];
    o[2] += o[3] >>> 16;
    o[3] &= 0xffff;
    o[2] += m[2] + n[2];
    o[1] += o[2] >>> 16;
    o[2] &= 0xffff;
    o[1] += m[1] + n[1];
    o[0] += o[1] >>> 16;
    o[1] &= 0xffff;
    o[0] += m[0] + n[0];
    o[0] &= 0xffff;
    return [o[0] << 16 | o[1], o[2] << 16 | o[3]];
  }

  function _x64Multiply(m, n) {
    //
    // Given two 64bit ints (as an array of two 32bit ints) returns the two
    // multiplied together as a 64bit int (as an array of two 32bit ints).
    //
    m = [m[0] >>> 16, m[0] & 0xffff, m[1] >>> 16, m[1] & 0xffff];
    n = [n[0] >>> 16, n[0] & 0xffff, n[1] >>> 16, n[1] & 0xffff];
    var o = [0, 0, 0, 0];
    o[3] += m[3] * n[3];
    o[2] += o[3] >>> 16;
    o[3] &= 0xffff;
    o[2] += m[2] * n[3];
    o[1] += o[2] >>> 16;
    o[2] &= 0xffff;
    o[2] += m[3] * n[2];
    o[1] += o[2] >>> 16;
    o[2] &= 0xffff;
    o[1] += m[1] * n[3];
    o[0] += o[1] >>> 16;
    o[1] &= 0xffff;
    o[1] += m[2] * n[2];
    o[0] += o[1] >>> 16;
    o[1] &= 0xffff;
    o[1] += m[3] * n[1];
    o[0] += o[1] >>> 16;
    o[1] &= 0xffff;
    o[0] += m[0] * n[3] + m[1] * n[2] + m[2] * n[1] + m[3] * n[0];
    o[0] &= 0xffff;
    return [o[0] << 16 | o[1], o[2] << 16 | o[3]];
  }

  function _x64Rotl(m, n) {
    //
    // Given a 64bit int (as an array of two 32bit ints) and an int
    // representing a number of bit positions, returns the 64bit int (as an
    // array of two 32bit ints) rotated left by that number of positions.
    //
    n %= 64;

    if (n === 32) {
      return [m[1], m[0]];
    } else if (n < 32) {
      return [m[0] << n | m[1] >>> 32 - n, m[1] << n | m[0] >>> 32 - n];
    } else {
      n -= 32;
      return [m[1] << n | m[0] >>> 32 - n, m[0] << n | m[1] >>> 32 - n];
    }
  }

  function _x64LeftShift(m, n) {
    //
    // Given a 64bit int (as an array of two 32bit ints) and an int
    // representing a number of bit positions, returns the 64bit int (as an
    // array of two 32bit ints) shifted left by that number of positions.
    //
    n %= 64;

    if (n === 0) {
      return m;
    } else if (n < 32) {
      return [m[0] << n | m[1] >>> 32 - n, m[1] << n];
    } else {
      return [m[1] << n - 32, 0];
    }
  }

  function _x64Xor(m, n) {
    //
    // Given two 64bit ints (as an array of two 32bit ints) returns the two
    // xored together as a 64bit int (as an array of two 32bit ints).
    //
    return [m[0] ^ n[0], m[1] ^ n[1]];
  }

  function _x64Fmix(h) {
    //
    // Given a block, returns murmurHash3's final x64 mix of that block.
    // (`[0, h[0] >>> 1]` is a 33 bit unsigned right shift. This is the
    // only place where we need to right shift 64bit ints.)
    //
    h = _x64Xor(h, [0, h[0] >>> 1]);
    h = _x64Multiply(h, [0xff51afd7, 0xed558ccd]);
    h = _x64Xor(h, [0, h[0] >>> 1]);
    h = _x64Multiply(h, [0xc4ceb9fe, 0x1a85ec53]);
    h = _x64Xor(h, [0, h[0] >>> 1]);
    return h;
  } // PUBLIC FUNCTIONS
  // ----------------


  library.x86.hash32 = function (bytes, seed) {
    //
    // Given a string and an optional seed as an int, returns a 32 bit hash
    // using the x86 flavor of MurmurHash3, as an unsigned int.
    //
    if (library.inputValidation && !_validBytes(bytes)) {
      return undefined;
    }

    seed = seed || 0;
    var remainder = bytes.length % 4;
    var blocks = bytes.length - remainder;
    var h1 = seed;
    var k1 = 0;
    var c1 = 0xcc9e2d51;
    var c2 = 0x1b873593;

    for (var i = 0; i < blocks; i = i + 4) {
      k1 = bytes[i] | bytes[i + 1] << 8 | bytes[i + 2] << 16 | bytes[i + 3] << 24;
      k1 = _x86Multiply(k1, c1);
      k1 = _x86Rotl(k1, 15);
      k1 = _x86Multiply(k1, c2);
      h1 ^= k1;
      h1 = _x86Rotl(h1, 13);
      h1 = _x86Multiply(h1, 5) + 0xe6546b64;
    }

    k1 = 0;

    switch (remainder) {
      case 3:
        k1 ^= bytes[i + 2] << 16;

      case 2:
        k1 ^= bytes[i + 1] << 8;

      case 1:
        k1 ^= bytes[i];
        k1 = _x86Multiply(k1, c1);
        k1 = _x86Rotl(k1, 15);
        k1 = _x86Multiply(k1, c2);
        h1 ^= k1;
    }

    h1 ^= bytes.length;
    h1 = _x86Fmix(h1);
    return h1 >>> 0;
  };

  library.x86.hash128 = function (bytes, seed) {
    //
    // Given a string and an optional seed as an int, returns a 128 bit
    // hash using the x86 flavor of MurmurHash3, as an unsigned hex.
    //
    if (library.inputValidation && !_validBytes(bytes)) {
      return undefined;
    }

    seed = seed || 0;
    var remainder = bytes.length % 16;
    var blocks = bytes.length - remainder;
    var h1 = seed;
    var h2 = seed;
    var h3 = seed;
    var h4 = seed;
    var k1 = 0;
    var k2 = 0;
    var k3 = 0;
    var k4 = 0;
    var c1 = 0x239b961b;
    var c2 = 0xab0e9789;
    var c3 = 0x38b34ae5;
    var c4 = 0xa1e38b93;

    for (var i = 0; i < blocks; i = i + 16) {
      k1 = bytes[i] | bytes[i + 1] << 8 | bytes[i + 2] << 16 | bytes[i + 3] << 24;
      k2 = bytes[i + 4] | bytes[i + 5] << 8 | bytes[i + 6] << 16 | bytes[i + 7] << 24;
      k3 = bytes[i + 8] | bytes[i + 9] << 8 | bytes[i + 10] << 16 | bytes[i + 11] << 24;
      k4 = bytes[i + 12] | bytes[i + 13] << 8 | bytes[i + 14] << 16 | bytes[i + 15] << 24;
      k1 = _x86Multiply(k1, c1);
      k1 = _x86Rotl(k1, 15);
      k1 = _x86Multiply(k1, c2);
      h1 ^= k1;
      h1 = _x86Rotl(h1, 19);
      h1 += h2;
      h1 = _x86Multiply(h1, 5) + 0x561ccd1b;
      k2 = _x86Multiply(k2, c2);
      k2 = _x86Rotl(k2, 16);
      k2 = _x86Multiply(k2, c3);
      h2 ^= k2;
      h2 = _x86Rotl(h2, 17);
      h2 += h3;
      h2 = _x86Multiply(h2, 5) + 0x0bcaa747;
      k3 = _x86Multiply(k3, c3);
      k3 = _x86Rotl(k3, 17);
      k3 = _x86Multiply(k3, c4);
      h3 ^= k3;
      h3 = _x86Rotl(h3, 15);
      h3 += h4;
      h3 = _x86Multiply(h3, 5) + 0x96cd1c35;
      k4 = _x86Multiply(k4, c4);
      k4 = _x86Rotl(k4, 18);
      k4 = _x86Multiply(k4, c1);
      h4 ^= k4;
      h4 = _x86Rotl(h4, 13);
      h4 += h1;
      h4 = _x86Multiply(h4, 5) + 0x32ac3b17;
    }

    k1 = 0;
    k2 = 0;
    k3 = 0;
    k4 = 0;

    switch (remainder) {
      case 15:
        k4 ^= bytes[i + 14] << 16;

      case 14:
        k4 ^= bytes[i + 13] << 8;

      case 13:
        k4 ^= bytes[i + 12];
        k4 = _x86Multiply(k4, c4);
        k4 = _x86Rotl(k4, 18);
        k4 = _x86Multiply(k4, c1);
        h4 ^= k4;

      case 12:
        k3 ^= bytes[i + 11] << 24;

      case 11:
        k3 ^= bytes[i + 10] << 16;

      case 10:
        k3 ^= bytes[i + 9] << 8;

      case 9:
        k3 ^= bytes[i + 8];
        k3 = _x86Multiply(k3, c3);
        k3 = _x86Rotl(k3, 17);
        k3 = _x86Multiply(k3, c4);
        h3 ^= k3;

      case 8:
        k2 ^= bytes[i + 7] << 24;

      case 7:
        k2 ^= bytes[i + 6] << 16;

      case 6:
        k2 ^= bytes[i + 5] << 8;

      case 5:
        k2 ^= bytes[i + 4];
        k2 = _x86Multiply(k2, c2);
        k2 = _x86Rotl(k2, 16);
        k2 = _x86Multiply(k2, c3);
        h2 ^= k2;

      case 4:
        k1 ^= bytes[i + 3] << 24;

      case 3:
        k1 ^= bytes[i + 2] << 16;

      case 2:
        k1 ^= bytes[i + 1] << 8;

      case 1:
        k1 ^= bytes[i];
        k1 = _x86Multiply(k1, c1);
        k1 = _x86Rotl(k1, 15);
        k1 = _x86Multiply(k1, c2);
        h1 ^= k1;
    }

    h1 ^= bytes.length;
    h2 ^= bytes.length;
    h3 ^= bytes.length;
    h4 ^= bytes.length;
    h1 += h2;
    h1 += h3;
    h1 += h4;
    h2 += h1;
    h3 += h1;
    h4 += h1;
    h1 = _x86Fmix(h1);
    h2 = _x86Fmix(h2);
    h3 = _x86Fmix(h3);
    h4 = _x86Fmix(h4);
    h1 += h2;
    h1 += h3;
    h1 += h4;
    h2 += h1;
    h3 += h1;
    h4 += h1;
    return ("00000000" + (h1 >>> 0).toString(16)).slice(-8) + ("00000000" + (h2 >>> 0).toString(16)).slice(-8) + ("00000000" + (h3 >>> 0).toString(16)).slice(-8) + ("00000000" + (h4 >>> 0).toString(16)).slice(-8);
  };

  library.x64.hash128 = function (bytes, seed) {
    //
    // Given a string and an optional seed as an int, returns a 128 bit
    // hash using the x64 flavor of MurmurHash3, as an unsigned hex.
    //
    if (library.inputValidation && !_validBytes(bytes)) {
      return undefined;
    }

    seed = seed || 0;
    var remainder = bytes.length % 16;
    var blocks = bytes.length - remainder;
    var h1 = [0, seed];
    var h2 = [0, seed];
    var k1 = [0, 0];
    var k2 = [0, 0];
    var c1 = [0x87c37b91, 0x114253d5];
    var c2 = [0x4cf5ad43, 0x2745937f];

    for (var i = 0; i < blocks; i = i + 16) {
      k1 = [bytes[i + 4] | bytes[i + 5] << 8 | bytes[i + 6] << 16 | bytes[i + 7] << 24, bytes[i] | bytes[i + 1] << 8 | bytes[i + 2] << 16 | bytes[i + 3] << 24];
      k2 = [bytes[i + 12] | bytes[i + 13] << 8 | bytes[i + 14] << 16 | bytes[i + 15] << 24, bytes[i + 8] | bytes[i + 9] << 8 | bytes[i + 10] << 16 | bytes[i + 11] << 24];
      k1 = _x64Multiply(k1, c1);
      k1 = _x64Rotl(k1, 31);
      k1 = _x64Multiply(k1, c2);
      h1 = _x64Xor(h1, k1);
      h1 = _x64Rotl(h1, 27);
      h1 = _x64Add(h1, h2);
      h1 = _x64Add(_x64Multiply(h1, [0, 5]), [0, 0x52dce729]);
      k2 = _x64Multiply(k2, c2);
      k2 = _x64Rotl(k2, 33);
      k2 = _x64Multiply(k2, c1);
      h2 = _x64Xor(h2, k2);
      h2 = _x64Rotl(h2, 31);
      h2 = _x64Add(h2, h1);
      h2 = _x64Add(_x64Multiply(h2, [0, 5]), [0, 0x38495ab5]);
    }

    k1 = [0, 0];
    k2 = [0, 0];

    switch (remainder) {
      case 15:
        k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i + 14]], 48));

      case 14:
        k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i + 13]], 40));

      case 13:
        k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i + 12]], 32));

      case 12:
        k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i + 11]], 24));

      case 11:
        k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i + 10]], 16));

      case 10:
        k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i + 9]], 8));

      case 9:
        k2 = _x64Xor(k2, [0, bytes[i + 8]]);
        k2 = _x64Multiply(k2, c2);
        k2 = _x64Rotl(k2, 33);
        k2 = _x64Multiply(k2, c1);
        h2 = _x64Xor(h2, k2);

      case 8:
        k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 7]], 56));

      case 7:
        k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 6]], 48));

      case 6:
        k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 5]], 40));

      case 5:
        k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 4]], 32));

      case 4:
        k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 3]], 24));

      case 3:
        k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 2]], 16));

      case 2:
        k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 1]], 8));

      case 1:
        k1 = _x64Xor(k1, [0, bytes[i]]);
        k1 = _x64Multiply(k1, c1);
        k1 = _x64Rotl(k1, 31);
        k1 = _x64Multiply(k1, c2);
        h1 = _x64Xor(h1, k1);
    }

    h1 = _x64Xor(h1, [0, bytes.length]);
    h2 = _x64Xor(h2, [0, bytes.length]);
    h1 = _x64Add(h1, h2);
    h2 = _x64Add(h2, h1);
    h1 = _x64Fmix(h1);
    h2 = _x64Fmix(h2);
    h1 = _x64Add(h1, h2);
    h2 = _x64Add(h2, h1);
    return ("00000000" + (h1[0] >>> 0).toString(16)).slice(-8) + ("00000000" + (h1[1] >>> 0).toString(16)).slice(-8) + ("00000000" + (h2[0] >>> 0).toString(16)).slice(-8) + ("00000000" + (h2[1] >>> 0).toString(16)).slice(-8);
  }; // INITIALIZATION
  // --------------
  // Export murmurHash3 for CommonJS, either as an AMD module or just as part
  // of the global object.


  if (true) {
    if ( true && module.exports) {
      exports = module.exports = library;
    }

    exports.murmurHash3 = library;
  } else {}
})(void 0);

/***/ }),
/* 416 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const {
  Buffer
} = __webpack_require__(0);

const crypto = self.crypto || self.msCrypto;

module.exports = algorithm => {
  if (typeof self === 'undefined' || !self.crypto && !self.msCrypto) {
    throw new Error('Please use a browser with webcrypto support and ensure the code has been delivered securely via HTTPS/TLS and run within a Secure Context');
  }

  return async data => {
    switch (algorithm) {
      case 'sha1':
        return Buffer.from((await crypto.subtle.digest({
          name: 'SHA-1'
        }, data)));

      case 'sha2-256':
        return Buffer.from((await crypto.subtle.digest({
          name: 'SHA-256'
        }, data)));

      case 'sha2-512':
        return Buffer.from((await crypto.subtle.digest({
          name: 'SHA-512'
        }, data)));

      case 'dbl-sha2-256':
        {
          const d = await crypto.subtle.digest({
            name: 'SHA-256'
          }, data);
          return Buffer.from((await crypto.subtle.digest({
            name: 'SHA-256'
          }, d)));
        }

      default:
        throw new Error("".concat(algorithm, " is not a supported algorithm"));
    }
  };
};

/***/ }),
/* 417 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const {
  Buffer
} = __webpack_require__(0);

const fromNumberTo32BitBuf = number => {
  const bytes = new Array(4);

  for (let i = 0; i < 4; i++) {
    bytes[i] = number & 0xff;
    number = number >> 8;
  }

  return Buffer.from(bytes);
};

module.exports = {
  fromNumberTo32BitBuf
};

/***/ }),
/* 418 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const {
  Buffer
} = __webpack_require__(0);

const blake = __webpack_require__(419);

const minB = 0xb201;
const minS = 0xb241;
const blake2b = {
  init: blake.blake2bInit,
  update: blake.blake2bUpdate,
  digest: blake.blake2bFinal
};
const blake2s = {
  init: blake.blake2sInit,
  update: blake.blake2sUpdate,
  digest: blake.blake2sFinal
}; // Note that although this function doesn't do any asynchronous work, we mark
// the function as async because it must return a Promise to match the API
// for other functions that do perform asynchronous work (see sha.browser.js)
// eslint-disable-next-line

const makeB2Hash = (size, hf) => async data => {
  const ctx = hf.init(size, null);
  hf.update(ctx, data);
  return Buffer.from(hf.digest(ctx));
};

module.exports = table => {
  for (let i = 0; i < 64; i++) {
    table[minB + i] = makeB2Hash(i + 1, blake2b);
  }

  for (let i = 0; i < 32; i++) {
    table[minS + i] = makeB2Hash(i + 1, blake2s);
  }
};

/***/ }),
/* 419 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var b2b = __webpack_require__(420);

var b2s = __webpack_require__(421);

module.exports = {
  blake2b: b2b.blake2b,
  blake2bHex: b2b.blake2bHex,
  blake2bInit: b2b.blake2bInit,
  blake2bUpdate: b2b.blake2bUpdate,
  blake2bFinal: b2b.blake2bFinal,
  blake2s: b2s.blake2s,
  blake2sHex: b2s.blake2sHex,
  blake2sInit: b2s.blake2sInit,
  blake2sUpdate: b2s.blake2sUpdate,
  blake2sFinal: b2s.blake2sFinal
};

/***/ }),
/* 420 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Blake2B in pure Javascript
// Adapted from the reference implementation in RFC7693
// Ported to Javascript by DC - https://github.com/dcposch
var util = __webpack_require__(204); // 64-bit unsigned addition
// Sets v[a,a+1] += v[b,b+1]
// v should be a Uint32Array


function ADD64AA(v, a, b) {
  var o0 = v[a] + v[b];
  var o1 = v[a + 1] + v[b + 1];

  if (o0 >= 0x100000000) {
    o1++;
  }

  v[a] = o0;
  v[a + 1] = o1;
} // 64-bit unsigned addition
// Sets v[a,a+1] += b
// b0 is the low 32 bits of b, b1 represents the high 32 bits


function ADD64AC(v, a, b0, b1) {
  var o0 = v[a] + b0;

  if (b0 < 0) {
    o0 += 0x100000000;
  }

  var o1 = v[a + 1] + b1;

  if (o0 >= 0x100000000) {
    o1++;
  }

  v[a] = o0;
  v[a + 1] = o1;
} // Little-endian byte access


function B2B_GET32(arr, i) {
  return arr[i] ^ arr[i + 1] << 8 ^ arr[i + 2] << 16 ^ arr[i + 3] << 24;
} // G Mixing function
// The ROTRs are inlined for speed


function B2B_G(a, b, c, d, ix, iy) {
  var x0 = m[ix];
  var x1 = m[ix + 1];
  var y0 = m[iy];
  var y1 = m[iy + 1];
  ADD64AA(v, a, b); // v[a,a+1] += v[b,b+1] ... in JS we must store a uint64 as two uint32s

  ADD64AC(v, a, x0, x1); // v[a, a+1] += x ... x0 is the low 32 bits of x, x1 is the high 32 bits
  // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated to the right by 32 bits

  var xor0 = v[d] ^ v[a];
  var xor1 = v[d + 1] ^ v[a + 1];
  v[d] = xor1;
  v[d + 1] = xor0;
  ADD64AA(v, c, d); // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 24 bits

  xor0 = v[b] ^ v[c];
  xor1 = v[b + 1] ^ v[c + 1];
  v[b] = xor0 >>> 24 ^ xor1 << 8;
  v[b + 1] = xor1 >>> 24 ^ xor0 << 8;
  ADD64AA(v, a, b);
  ADD64AC(v, a, y0, y1); // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated right by 16 bits

  xor0 = v[d] ^ v[a];
  xor1 = v[d + 1] ^ v[a + 1];
  v[d] = xor0 >>> 16 ^ xor1 << 16;
  v[d + 1] = xor1 >>> 16 ^ xor0 << 16;
  ADD64AA(v, c, d); // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 63 bits

  xor0 = v[b] ^ v[c];
  xor1 = v[b + 1] ^ v[c + 1];
  v[b] = xor1 >>> 31 ^ xor0 << 1;
  v[b + 1] = xor0 >>> 31 ^ xor1 << 1;
} // Initialization Vector


var BLAKE2B_IV32 = new Uint32Array([0xF3BCC908, 0x6A09E667, 0x84CAA73B, 0xBB67AE85, 0xFE94F82B, 0x3C6EF372, 0x5F1D36F1, 0xA54FF53A, 0xADE682D1, 0x510E527F, 0x2B3E6C1F, 0x9B05688C, 0xFB41BD6B, 0x1F83D9AB, 0x137E2179, 0x5BE0CD19]);
var SIGMA8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3, 11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4, 7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8, 9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13, 2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9, 12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11, 13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10, 6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5, 10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3]; // These are offsets into a uint64 buffer.
// Multiply them all by 2 to make them offsets into a uint32 buffer,
// because this is Javascript and we don't have uint64s

var SIGMA82 = new Uint8Array(SIGMA8.map(function (x) {
  return x * 2;
})); // Compression function. 'last' flag indicates last block.
// Note we're representing 16 uint64s as 32 uint32s

var v = new Uint32Array(32);
var m = new Uint32Array(32);

function blake2bCompress(ctx, last) {
  var i = 0; // init work variables

  for (i = 0; i < 16; i++) {
    v[i] = ctx.h[i];
    v[i + 16] = BLAKE2B_IV32[i];
  } // low 64 bits of offset


  v[24] = v[24] ^ ctx.t;
  v[25] = v[25] ^ ctx.t / 0x100000000; // high 64 bits not supported, offset may not be higher than 2**53-1
  // last block flag set ?

  if (last) {
    v[28] = ~v[28];
    v[29] = ~v[29];
  } // get little-endian words


  for (i = 0; i < 32; i++) {
    m[i] = B2B_GET32(ctx.b, 4 * i);
  } // twelve rounds of mixing
  // uncomment the DebugPrint calls to log the computation
  // and match the RFC sample documentation
  // util.debugPrint('          m[16]', m, 64)


  for (i = 0; i < 12; i++) {
    // util.debugPrint('   (i=' + (i < 10 ? ' ' : '') + i + ') v[16]', v, 64)
    B2B_G(0, 8, 16, 24, SIGMA82[i * 16 + 0], SIGMA82[i * 16 + 1]);
    B2B_G(2, 10, 18, 26, SIGMA82[i * 16 + 2], SIGMA82[i * 16 + 3]);
    B2B_G(4, 12, 20, 28, SIGMA82[i * 16 + 4], SIGMA82[i * 16 + 5]);
    B2B_G(6, 14, 22, 30, SIGMA82[i * 16 + 6], SIGMA82[i * 16 + 7]);
    B2B_G(0, 10, 20, 30, SIGMA82[i * 16 + 8], SIGMA82[i * 16 + 9]);
    B2B_G(2, 12, 22, 24, SIGMA82[i * 16 + 10], SIGMA82[i * 16 + 11]);
    B2B_G(4, 14, 16, 26, SIGMA82[i * 16 + 12], SIGMA82[i * 16 + 13]);
    B2B_G(6, 8, 18, 28, SIGMA82[i * 16 + 14], SIGMA82[i * 16 + 15]);
  } // util.debugPrint('   (i=12) v[16]', v, 64)


  for (i = 0; i < 16; i++) {
    ctx.h[i] = ctx.h[i] ^ v[i] ^ v[i + 16];
  } // util.debugPrint('h[8]', ctx.h, 64)

} // Creates a BLAKE2b hashing context
// Requires an output length between 1 and 64 bytes
// Takes an optional Uint8Array key


function blake2bInit(outlen, key) {
  if (outlen === 0 || outlen > 64) {
    throw new Error('Illegal output length, expected 0 < length <= 64');
  }

  if (key && key.length > 64) {
    throw new Error('Illegal key, expected Uint8Array with 0 < length <= 64');
  } // state, 'param block'


  var ctx = {
    b: new Uint8Array(128),
    h: new Uint32Array(16),
    t: 0,
    // input count
    c: 0,
    // pointer within buffer
    outlen: outlen // output length in bytes

  }; // initialize hash state

  for (var i = 0; i < 16; i++) {
    ctx.h[i] = BLAKE2B_IV32[i];
  }

  var keylen = key ? key.length : 0;
  ctx.h[0] ^= 0x01010000 ^ keylen << 8 ^ outlen; // key the hash, if applicable

  if (key) {
    blake2bUpdate(ctx, key); // at the end

    ctx.c = 128;
  }

  return ctx;
} // Updates a BLAKE2b streaming hash
// Requires hash context and Uint8Array (byte array)


function blake2bUpdate(ctx, input) {
  for (var i = 0; i < input.length; i++) {
    if (ctx.c === 128) {
      // buffer full ?
      ctx.t += ctx.c; // add counters

      blake2bCompress(ctx, false); // compress (not last)

      ctx.c = 0; // counter to zero
    }

    ctx.b[ctx.c++] = input[i];
  }
} // Completes a BLAKE2b streaming hash
// Returns a Uint8Array containing the message digest


function blake2bFinal(ctx) {
  ctx.t += ctx.c; // mark last block offset

  while (ctx.c < 128) {
    // fill up with zeros
    ctx.b[ctx.c++] = 0;
  }

  blake2bCompress(ctx, true); // final block flag = 1
  // little endian convert and store

  var out = new Uint8Array(ctx.outlen);

  for (var i = 0; i < ctx.outlen; i++) {
    out[i] = ctx.h[i >> 2] >> 8 * (i & 3);
  }

  return out;
} // Computes the BLAKE2B hash of a string or byte array, and returns a Uint8Array
//
// Returns a n-byte Uint8Array
//
// Parameters:
// - input - the input bytes, as a string, Buffer or Uint8Array
// - key - optional key Uint8Array, up to 64 bytes
// - outlen - optional output length in bytes, default 64


function blake2b(input, key, outlen) {
  // preprocess inputs
  outlen = outlen || 64;
  input = util.normalizeInput(input); // do the math

  var ctx = blake2bInit(outlen, key);
  blake2bUpdate(ctx, input);
  return blake2bFinal(ctx);
} // Computes the BLAKE2B hash of a string or byte array
//
// Returns an n-byte hash in hex, all lowercase
//
// Parameters:
// - input - the input bytes, as a string, Buffer, or Uint8Array
// - key - optional key Uint8Array, up to 64 bytes
// - outlen - optional output length in bytes, default 64


function blake2bHex(input, key, outlen) {
  var output = blake2b(input, key, outlen);
  return util.toHex(output);
}

module.exports = {
  blake2b: blake2b,
  blake2bHex: blake2bHex,
  blake2bInit: blake2bInit,
  blake2bUpdate: blake2bUpdate,
  blake2bFinal: blake2bFinal
};

/***/ }),
/* 421 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// BLAKE2s hash function in pure Javascript
// Adapted from the reference implementation in RFC7693
// Ported to Javascript by DC - https://github.com/dcposch
var util = __webpack_require__(204); // Little-endian byte access.
// Expects a Uint8Array and an index
// Returns the little-endian uint32 at v[i..i+3]


function B2S_GET32(v, i) {
  return v[i] ^ v[i + 1] << 8 ^ v[i + 2] << 16 ^ v[i + 3] << 24;
} // Mixing function G.


function B2S_G(a, b, c, d, x, y) {
  v[a] = v[a] + v[b] + x;
  v[d] = ROTR32(v[d] ^ v[a], 16);
  v[c] = v[c] + v[d];
  v[b] = ROTR32(v[b] ^ v[c], 12);
  v[a] = v[a] + v[b] + y;
  v[d] = ROTR32(v[d] ^ v[a], 8);
  v[c] = v[c] + v[d];
  v[b] = ROTR32(v[b] ^ v[c], 7);
} // 32-bit right rotation
// x should be a uint32
// y must be between 1 and 31, inclusive


function ROTR32(x, y) {
  return x >>> y ^ x << 32 - y;
} // Initialization Vector.


var BLAKE2S_IV = new Uint32Array([0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A, 0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19]);
var SIGMA = new Uint8Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3, 11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4, 7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8, 9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13, 2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9, 12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11, 13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10, 6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5, 10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0]); // Compression function. "last" flag indicates last block

var v = new Uint32Array(16);
var m = new Uint32Array(16);

function blake2sCompress(ctx, last) {
  var i = 0;

  for (i = 0; i < 8; i++) {
    // init work variables
    v[i] = ctx.h[i];
    v[i + 8] = BLAKE2S_IV[i];
  }

  v[12] ^= ctx.t; // low 32 bits of offset

  v[13] ^= ctx.t / 0x100000000; // high 32 bits

  if (last) {
    // last block flag set ?
    v[14] = ~v[14];
  }

  for (i = 0; i < 16; i++) {
    // get little-endian words
    m[i] = B2S_GET32(ctx.b, 4 * i);
  } // ten rounds of mixing
  // uncomment the DebugPrint calls to log the computation
  // and match the RFC sample documentation
  // util.debugPrint('          m[16]', m, 32)


  for (i = 0; i < 10; i++) {
    // util.debugPrint('   (i=' + i + ')  v[16]', v, 32)
    B2S_G(0, 4, 8, 12, m[SIGMA[i * 16 + 0]], m[SIGMA[i * 16 + 1]]);
    B2S_G(1, 5, 9, 13, m[SIGMA[i * 16 + 2]], m[SIGMA[i * 16 + 3]]);
    B2S_G(2, 6, 10, 14, m[SIGMA[i * 16 + 4]], m[SIGMA[i * 16 + 5]]);
    B2S_G(3, 7, 11, 15, m[SIGMA[i * 16 + 6]], m[SIGMA[i * 16 + 7]]);
    B2S_G(0, 5, 10, 15, m[SIGMA[i * 16 + 8]], m[SIGMA[i * 16 + 9]]);
    B2S_G(1, 6, 11, 12, m[SIGMA[i * 16 + 10]], m[SIGMA[i * 16 + 11]]);
    B2S_G(2, 7, 8, 13, m[SIGMA[i * 16 + 12]], m[SIGMA[i * 16 + 13]]);
    B2S_G(3, 4, 9, 14, m[SIGMA[i * 16 + 14]], m[SIGMA[i * 16 + 15]]);
  } // util.debugPrint('   (i=10) v[16]', v, 32)


  for (i = 0; i < 8; i++) {
    ctx.h[i] ^= v[i] ^ v[i + 8];
  } // util.debugPrint('h[8]', ctx.h, 32)

} // Creates a BLAKE2s hashing context
// Requires an output length between 1 and 32 bytes
// Takes an optional Uint8Array key


function blake2sInit(outlen, key) {
  if (!(outlen > 0 && outlen <= 32)) {
    throw new Error('Incorrect output length, should be in [1, 32]');
  }

  var keylen = key ? key.length : 0;

  if (key && !(keylen > 0 && keylen <= 32)) {
    throw new Error('Incorrect key length, should be in [1, 32]');
  }

  var ctx = {
    h: new Uint32Array(BLAKE2S_IV),
    // hash state
    b: new Uint32Array(64),
    // input block
    c: 0,
    // pointer within block
    t: 0,
    // input count
    outlen: outlen // output length in bytes

  };
  ctx.h[0] ^= 0x01010000 ^ keylen << 8 ^ outlen;

  if (keylen > 0) {
    blake2sUpdate(ctx, key);
    ctx.c = 64; // at the end
  }

  return ctx;
} // Updates a BLAKE2s streaming hash
// Requires hash context and Uint8Array (byte array)


function blake2sUpdate(ctx, input) {
  for (var i = 0; i < input.length; i++) {
    if (ctx.c === 64) {
      // buffer full ?
      ctx.t += ctx.c; // add counters

      blake2sCompress(ctx, false); // compress (not last)

      ctx.c = 0; // counter to zero
    }

    ctx.b[ctx.c++] = input[i];
  }
} // Completes a BLAKE2s streaming hash
// Returns a Uint8Array containing the message digest


function blake2sFinal(ctx) {
  ctx.t += ctx.c; // mark last block offset

  while (ctx.c < 64) {
    // fill up with zeros
    ctx.b[ctx.c++] = 0;
  }

  blake2sCompress(ctx, true); // final block flag = 1
  // little endian convert and store

  var out = new Uint8Array(ctx.outlen);

  for (var i = 0; i < ctx.outlen; i++) {
    out[i] = ctx.h[i >> 2] >> 8 * (i & 3) & 0xFF;
  }

  return out;
} // Computes the BLAKE2S hash of a string or byte array, and returns a Uint8Array
//
// Returns a n-byte Uint8Array
//
// Parameters:
// - input - the input bytes, as a string, Buffer, or Uint8Array
// - key - optional key Uint8Array, up to 32 bytes
// - outlen - optional output length in bytes, default 64


function blake2s(input, key, outlen) {
  // preprocess inputs
  outlen = outlen || 32;
  input = util.normalizeInput(input); // do the math

  var ctx = blake2sInit(outlen, key);
  blake2sUpdate(ctx, input);
  return blake2sFinal(ctx);
} // Computes the BLAKE2S hash of a string or byte array
//
// Returns an n-byte hash in hex, all lowercase
//
// Parameters:
// - input - the input bytes, as a string, Buffer, or Uint8Array
// - key - optional key Uint8Array, up to 32 bytes
// - outlen - optional output length in bytes, default 64


function blake2sHex(input, key, outlen) {
  var output = blake2s(input, key, outlen);
  return util.toHex(output);
}

module.exports = {
  blake2s: blake2s,
  blake2sHex: blake2sHex,
  blake2sInit: blake2sInit,
  blake2sUpdate: blake2sUpdate,
  blake2sFinal: blake2sFinal
};

/***/ }),
/* 422 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const webcrypto = __webpack_require__(129);

const randomBytes = __webpack_require__(130);

exports.utils = __webpack_require__(424);

exports.generateKey = async function (bits) {
  const pair = await webcrypto.get().subtle.generateKey({
    name: 'RSASSA-PKCS1-v1_5',
    modulusLength: bits,
    publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
    hash: {
      name: 'SHA-256'
    }
  }, true, ['sign', 'verify']);
  const keys = await exportKey(pair);
  return {
    privateKey: keys[0],
    publicKey: keys[1]
  };
}; // Takes a jwk key


exports.unmarshalPrivateKey = async function (key) {
  const privateKey = await webcrypto.get().subtle.importKey('jwk', key, {
    name: 'RSASSA-PKCS1-v1_5',
    hash: {
      name: 'SHA-256'
    }
  }, true, ['sign']);
  const pair = [privateKey, await derivePublicFromPrivate(key)];
  const keys = await exportKey({
    privateKey: pair[0],
    publicKey: pair[1]
  });
  return {
    privateKey: keys[0],
    publicKey: keys[1]
  };
};

exports.getRandomValues = randomBytes;

exports.hashAndSign = async function (key, msg) {
  const privateKey = await webcrypto.get().subtle.importKey('jwk', key, {
    name: 'RSASSA-PKCS1-v1_5',
    hash: {
      name: 'SHA-256'
    }
  }, false, ['sign']);
  const sig = await webcrypto.get().subtle.sign({
    name: 'RSASSA-PKCS1-v1_5'
  }, privateKey, Uint8Array.from(msg));
  return Buffer.from(sig);
};

exports.hashAndVerify = async function (key, sig, msg) {
  const publicKey = await webcrypto.get().subtle.importKey('jwk', key, {
    name: 'RSASSA-PKCS1-v1_5',
    hash: {
      name: 'SHA-256'
    }
  }, false, ['verify']);
  return webcrypto.get().subtle.verify({
    name: 'RSASSA-PKCS1-v1_5'
  }, publicKey, sig, msg);
};

function exportKey(pair) {
  return Promise.all([webcrypto.get().subtle.exportKey('jwk', pair.privateKey), webcrypto.get().subtle.exportKey('jwk', pair.publicKey)]);
}

function derivePublicFromPrivate(jwKey) {
  return webcrypto.get().subtle.importKey('jwk', {
    kty: jwKey.kty,
    n: jwKey.n,
    e: jwKey.e
  }, {
    name: 'RSASSA-PKCS1-v1_5',
    hash: {
      name: 'SHA-256'
    }
  }, true, ['verify']);
}
/*

RSA encryption/decryption for the browser with webcrypto workarround
"bloody dark magic. webcrypto's why."

Explanation:
  - Convert JWK to nodeForge
  - Convert msg buffer to nodeForge buffer: ByteBuffer is a "binary-string backed buffer", so let's make our buffer a binary string
  - Convert resulting nodeForge buffer to buffer: it returns a binary string, turn that into a uint8array(buffer)

*/


const {
  jwk2pub,
  jwk2priv
} = __webpack_require__(432);

function convertKey(key, pub, msg, handle) {
  const fkey = pub ? jwk2pub(key) : jwk2priv(key);
  const fmsg = Buffer.from(msg).toString('binary');
  const fomsg = handle(fmsg, fkey);
  return Buffer.from(fomsg, 'binary');
}

exports.encrypt = function (key, msg) {
  return convertKey(key, true, msg, (msg, key) => key.encrypt(msg));
};

exports.decrypt = function (key, msg) {
  return convertKey(key, false, msg, (msg, key) => key.decrypt(msg));
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 423 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const crypto = self.crypto || self.msCrypto;

const {
  Buffer
} = __webpack_require__(0); // limit of Crypto.getRandomValues()
// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues


const MAX_BYTES = 65536;

function oldBrowser() {
  throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11');
}

if (crypto && crypto.getRandomValues) {
  module.exports = randomBytes;
} else {
  module.exports = oldBrowser;
}

function randomBytes(size) {
  const bytes = new Uint8Array(size);
  let generated = 0;

  if (size > 0) {
    // getRandomValues fails on IE if size == 0
    if (size > MAX_BYTES) {
      while (generated < size) {
        if (generated + MAX_BYTES > size) {
          crypto.getRandomValues(bytes.subarray(generated, generated + (size - generated)));
          generated += size - generated;
        } else {
          crypto.getRandomValues(bytes.subarray(generated, generated + MAX_BYTES));
          generated += MAX_BYTES;
        }
      }
    } else {
      crypto.getRandomValues(bytes);
    }
  }

  return Buffer.from(bytes);
}

/***/ }),
/* 424 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const asn1 = __webpack_require__(131);

const util = __webpack_require__(210);

const toBase64 = util.toBase64;
const toBn = util.toBn;
const RSAPrivateKey = asn1.define('RSAPrivateKey', function () {
  this.seq().obj(this.key('version').int(), this.key('modulus').int(), this.key('publicExponent').int(), this.key('privateExponent').int(), this.key('prime1').int(), this.key('prime2').int(), this.key('exponent1').int(), this.key('exponent2').int(), this.key('coefficient').int());
});
const AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {
  this.seq().obj(this.key('algorithm').objid({
    '1.2.840.113549.1.1.1': 'rsa'
  }), this.key('none').optional().null_(), this.key('curve').optional().objid(), this.key('params').optional().seq().obj(this.key('p').int(), this.key('q').int(), this.key('g').int()));
});
const PublicKey = asn1.define('RSAPublicKey', function () {
  this.seq().obj(this.key('algorithm').use(AlgorithmIdentifier), this.key('subjectPublicKey').bitstr());
});
const RSAPublicKey = asn1.define('RSAPublicKey', function () {
  this.seq().obj(this.key('modulus').int(), this.key('publicExponent').int());
}); // Convert a PKCS#1 in ASN1 DER format to a JWK key

exports.pkcs1ToJwk = function (bytes) {
  const asn1 = RSAPrivateKey.decode(bytes, 'der');
  return {
    kty: 'RSA',
    n: toBase64(asn1.modulus),
    e: toBase64(asn1.publicExponent),
    d: toBase64(asn1.privateExponent),
    p: toBase64(asn1.prime1),
    q: toBase64(asn1.prime2),
    dp: toBase64(asn1.exponent1),
    dq: toBase64(asn1.exponent2),
    qi: toBase64(asn1.coefficient),
    alg: 'RS256',
    kid: '2011-04-29'
  };
}; // Convert a JWK key into PKCS#1 in ASN1 DER format


exports.jwkToPkcs1 = function (jwk) {
  return RSAPrivateKey.encode({
    version: 0,
    modulus: toBn(jwk.n),
    publicExponent: toBn(jwk.e),
    privateExponent: toBn(jwk.d),
    prime1: toBn(jwk.p),
    prime2: toBn(jwk.q),
    exponent1: toBn(jwk.dp),
    exponent2: toBn(jwk.dq),
    coefficient: toBn(jwk.qi)
  }, 'der');
}; // Convert a PKCIX in ASN1 DER format to a JWK key


exports.pkixToJwk = function (bytes) {
  const ndata = PublicKey.decode(bytes, 'der');
  const asn1 = RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der');
  return {
    kty: 'RSA',
    n: toBase64(asn1.modulus),
    e: toBase64(asn1.publicExponent),
    alg: 'RS256',
    kid: '2011-04-29'
  };
}; // Convert a JWK key to PKCIX in ASN1 DER format


exports.jwkToPkix = function (jwk) {
  return PublicKey.encode({
    algorithm: {
      algorithm: 'rsa',
      none: null
    },
    subjectPublicKey: {
      data: RSAPublicKey.encode({
        modulus: toBn(jwk.n),
        publicExponent: toBn(jwk.e)
      }, 'der')
    }
  }, 'der');
};

/***/ }),
/* 425 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 426 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const encoders = __webpack_require__(206);

const decoders = __webpack_require__(208);

const inherits = __webpack_require__(4);

const api = exports;

api.define = function define(name, body) {
  return new Entity(name, body);
};

function Entity(name, body) {
  this.name = name;
  this.body = body;
  this.decoders = {};
  this.encoders = {};
}

Entity.prototype._createNamed = function createNamed(Base) {
  const name = this.name;

  function Generated(entity) {
    this._initNamed(entity, name);
  }

  inherits(Generated, Base);

  Generated.prototype._initNamed = function _initNamed(entity, name) {
    Base.call(this, entity, name);
  };

  return new Generated(this);
};

Entity.prototype._getDecoder = function _getDecoder(enc) {
  enc = enc || 'der'; // Lazily create decoder

  if (!this.decoders.hasOwnProperty(enc)) this.decoders[enc] = this._createNamed(decoders[enc]);
  return this.decoders[enc];
};

Entity.prototype.decode = function decode(data, enc, options) {
  return this._getDecoder(enc).decode(data, options);
};

Entity.prototype._getEncoder = function _getEncoder(enc) {
  enc = enc || 'der'; // Lazily create encoder

  if (!this.encoders.hasOwnProperty(enc)) this.encoders[enc] = this._createNamed(encoders[enc]);
  return this.encoders[enc];
};

Entity.prototype.encode = function encode(data, enc,
/* internal */
reporter) {
  return this._getEncoder(enc).encode(data, reporter);
};

/***/ }),
/* 427 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = assert;

function assert(val, msg) {
  if (!val) throw new Error(msg || 'Assertion failed');
}

assert.equal = function assertEqual(l, r, msg) {
  if (l != r) throw new Error(msg || 'Assertion failed: ' + l + ' != ' + r);
};

/***/ }),
/* 428 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const inherits = __webpack_require__(4);

const DEREncoder = __webpack_require__(207);

function PEMEncoder(entity) {
  DEREncoder.call(this, entity);
  this.enc = 'pem';
}

inherits(PEMEncoder, DEREncoder);
module.exports = PEMEncoder;

PEMEncoder.prototype.encode = function encode(data, options) {
  const buf = DEREncoder.prototype.encode.call(this, data);
  const p = buf.toString('base64');
  const out = ['-----BEGIN ' + options.label + '-----'];

  for (let i = 0; i < p.length; i += 64) out.push(p.slice(i, i + 64));

  out.push('-----END ' + options.label + '-----');
  return out.join('\n');
};

/***/ }),
/* 429 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const inherits = __webpack_require__(4);

const Buffer = __webpack_require__(132).Buffer;

const DERDecoder = __webpack_require__(209);

function PEMDecoder(entity) {
  DERDecoder.call(this, entity);
  this.enc = 'pem';
}

inherits(PEMDecoder, DERDecoder);
module.exports = PEMDecoder;

PEMDecoder.prototype.decode = function decode(data, options) {
  const lines = data.toString().split(/[\r\n]+/g);
  const label = options.label.toUpperCase();
  const re = /^-----(BEGIN|END) ([^-]+)-----$/;
  let start = -1;
  let end = -1;

  for (let i = 0; i < lines.length; i++) {
    const match = lines[i].match(re);
    if (match === null) continue;
    if (match[2] !== label) continue;

    if (start === -1) {
      if (match[1] !== 'BEGIN') break;
      start = i;
    } else {
      if (match[1] !== 'END') break;
      end = i;
      break;
    }
  }

  if (start === -1 || end === -1) throw new Error('PEM section not found for: ' + label);
  const base64 = lines.slice(start + 1, end).join(''); // Remove excessive symbols

  base64.replace(/[^a-z0-9+/=]+/gi, '');
  const input = Buffer.from(base64, 'base64');
  return DERDecoder.prototype.decode.call(this, input, options);
};

/***/ }),
/* 430 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const base = exports;
base.Reporter = __webpack_require__(134).Reporter;
base.DecoderBuffer = __webpack_require__(75).DecoderBuffer;
base.EncoderBuffer = __webpack_require__(75).EncoderBuffer;
base.Node = __webpack_require__(133);

/***/ }),
/* 431 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const constants = exports; // Helper

constants._reverse = function reverse(map) {
  const res = {};
  Object.keys(map).forEach(function (key) {
    // Convert key to integer if it is stringified
    if ((key | 0) == key) key = key | 0;
    const value = map[key];
    res[value] = key;
  });
  return res;
};

constants.der = __webpack_require__(135);

/***/ }),
/* 432 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const forge = {
  util: __webpack_require__(10),
  pki: __webpack_require__(433),
  jsbn: __webpack_require__(125)
};

function base64urlToBigInteger(str) {
  var bytes = forge.util.decode64((str + '==='.slice((str.length + 3) % 4)).replace(/-/g, '+').replace(/_/g, '/'));
  return new forge.jsbn.BigInteger(forge.util.bytesToHex(bytes), 16);
}

function convert(key, types) {
  return types.map(t => base64urlToBigInteger(key[t]));
}

function jwk2priv(key) {
  return forge.pki.setRsaPrivateKey(...convert(key, ['n', 'e', 'd', 'p', 'q', 'dp', 'dq', 'qi']));
}

function jwk2privPem(key) {
  return forge.pki.privateKeyToPem(jwk2priv(key));
}

function jwk2pub(key) {
  return forge.pki.setRsaPublicKey(...convert(key, ['n', 'e']));
}

function jwk2pubPem(key) {
  return forge.pki.publicKeyToPem(jwk2pub(key));
}

module.exports = {
  jwk2pub,
  jwk2pubPem,
  jwk2priv,
  jwk2privPem
};

/***/ }),
/* 433 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Javascript implementation of a basic Public Key Infrastructure, including
 * support for RSA public and private keys.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2013 Digital Bazaar, Inc.
 */
var forge = __webpack_require__(7);

__webpack_require__(40);

__webpack_require__(45);

__webpack_require__(74);

__webpack_require__(93);

__webpack_require__(128);

__webpack_require__(434);

__webpack_require__(212);

__webpack_require__(73);

__webpack_require__(10);

__webpack_require__(95); // shortcut for asn.1 API


var asn1 = forge.asn1;
/* Public Key Infrastructure (PKI) implementation. */

var pki = module.exports = forge.pki = forge.pki || {};
/**
 * NOTE: THIS METHOD IS DEPRECATED. Use pem.decode() instead.
 *
 * Converts PEM-formatted data to DER.
 *
 * @param pem the PEM-formatted data.
 *
 * @return the DER-formatted data.
 */

pki.pemToDer = function (pem) {
  var msg = forge.pem.decode(pem)[0];

  if (msg.procType && msg.procType.type === 'ENCRYPTED') {
    throw new Error('Could not convert PEM to DER; PEM is encrypted.');
  }

  return forge.util.createBuffer(msg.body);
};
/**
 * Converts an RSA private key from PEM format.
 *
 * @param pem the PEM-formatted private key.
 *
 * @return the private key.
 */


pki.privateKeyFromPem = function (pem) {
  var msg = forge.pem.decode(pem)[0];

  if (msg.type !== 'PRIVATE KEY' && msg.type !== 'RSA PRIVATE KEY') {
    var error = new Error('Could not convert private key from PEM; PEM ' + 'header type is not "PRIVATE KEY" or "RSA PRIVATE KEY".');
    error.headerType = msg.type;
    throw error;
  }

  if (msg.procType && msg.procType.type === 'ENCRYPTED') {
    throw new Error('Could not convert private key from PEM; PEM is encrypted.');
  } // convert DER to ASN.1 object


  var obj = asn1.fromDer(msg.body);
  return pki.privateKeyFromAsn1(obj);
};
/**
 * Converts an RSA private key to PEM format.
 *
 * @param key the private key.
 * @param maxline the maximum characters per line, defaults to 64.
 *
 * @return the PEM-formatted private key.
 */


pki.privateKeyToPem = function (key, maxline) {
  // convert to ASN.1, then DER, then PEM-encode
  var msg = {
    type: 'RSA PRIVATE KEY',
    body: asn1.toDer(pki.privateKeyToAsn1(key)).getBytes()
  };
  return forge.pem.encode(msg, {
    maxline: maxline
  });
};
/**
 * Converts a PrivateKeyInfo to PEM format.
 *
 * @param pki the PrivateKeyInfo.
 * @param maxline the maximum characters per line, defaults to 64.
 *
 * @return the PEM-formatted private key.
 */


pki.privateKeyInfoToPem = function (pki, maxline) {
  // convert to DER, then PEM-encode
  var msg = {
    type: 'PRIVATE KEY',
    body: asn1.toDer(pki).getBytes()
  };
  return forge.pem.encode(msg, {
    maxline: maxline
  });
};

/***/ }),
/* 434 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Javascript implementation of PKCS#12.
 *
 * @author Dave Longley
 * @author Stefan Siegl <stesie@brokenpipe.de>
 *
 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
 *
 * The ASN.1 representation of PKCS#12 is as follows
 * (see ftp://ftp.rsasecurity.com/pub/pkcs/pkcs-12/pkcs-12-tc1.pdf for details)
 *
 * PFX ::= SEQUENCE {
 *   version  INTEGER {v3(3)}(v3,...),
 *   authSafe ContentInfo,
 *   macData  MacData OPTIONAL
 * }
 *
 * MacData ::= SEQUENCE {
 *   mac DigestInfo,
 *   macSalt OCTET STRING,
 *   iterations INTEGER DEFAULT 1
 * }
 * Note: The iterations default is for historical reasons and its use is
 * deprecated. A higher value, like 1024, is recommended.
 *
 * DigestInfo is defined in PKCS#7 as follows:
 *
 * DigestInfo ::= SEQUENCE {
 *   digestAlgorithm DigestAlgorithmIdentifier,
 *   digest Digest
 * }
 *
 * DigestAlgorithmIdentifier ::= AlgorithmIdentifier
 *
 * The AlgorithmIdentifier contains an Object Identifier (OID) and parameters
 * for the algorithm, if any. In the case of SHA1 there is none.
 *
 * AlgorithmIdentifer ::= SEQUENCE {
 *    algorithm OBJECT IDENTIFIER,
 *    parameters ANY DEFINED BY algorithm OPTIONAL
 * }
 *
 * Digest ::= OCTET STRING
 *
 *
 * ContentInfo ::= SEQUENCE {
 *   contentType ContentType,
 *   content     [0] EXPLICIT ANY DEFINED BY contentType OPTIONAL
 * }
 *
 * ContentType ::= OBJECT IDENTIFIER
 *
 * AuthenticatedSafe ::= SEQUENCE OF ContentInfo
 * -- Data if unencrypted
 * -- EncryptedData if password-encrypted
 * -- EnvelopedData if public key-encrypted
 *
 *
 * SafeContents ::= SEQUENCE OF SafeBag
 *
 * SafeBag ::= SEQUENCE {
 *   bagId     BAG-TYPE.&id ({PKCS12BagSet})
 *   bagValue  [0] EXPLICIT BAG-TYPE.&Type({PKCS12BagSet}{@bagId}),
 *   bagAttributes SET OF PKCS12Attribute OPTIONAL
 * }
 *
 * PKCS12Attribute ::= SEQUENCE {
 *   attrId ATTRIBUTE.&id ({PKCS12AttrSet}),
 *   attrValues SET OF ATTRIBUTE.&Type ({PKCS12AttrSet}{@attrId})
 * } -- This type is compatible with the X.500 type 'Attribute'
 *
 * PKCS12AttrSet ATTRIBUTE ::= {
 *   friendlyName | -- from PKCS #9
 *   localKeyId, -- from PKCS #9
 *   ... -- Other attributes are allowed
 * }
 *
 * CertBag ::= SEQUENCE {
 *   certId    BAG-TYPE.&id   ({CertTypes}),
 *   certValue [0] EXPLICIT BAG-TYPE.&Type ({CertTypes}{@certId})
 * }
 *
 * x509Certificate BAG-TYPE ::= {OCTET STRING IDENTIFIED BY {certTypes 1}}
 *   -- DER-encoded X.509 certificate stored in OCTET STRING
 *
 * sdsiCertificate BAG-TYPE ::= {IA5String IDENTIFIED BY {certTypes 2}}
 * -- Base64-encoded SDSI certificate stored in IA5String
 *
 * CertTypes BAG-TYPE ::= {
 *   x509Certificate |
 *   sdsiCertificate,
 *   ... -- For future extensions
 * }
 */
var forge = __webpack_require__(7);

__webpack_require__(40);

__webpack_require__(202);

__webpack_require__(45);

__webpack_require__(211);

__webpack_require__(74);

__webpack_require__(46);

__webpack_require__(73);

__webpack_require__(201);

__webpack_require__(10);

__webpack_require__(95); // shortcut for asn.1 & PKI API


var asn1 = forge.asn1;
var pki = forge.pki; // shortcut for PKCS#12 API

var p12 = module.exports = forge.pkcs12 = forge.pkcs12 || {};
var contentInfoValidator = {
  name: 'ContentInfo',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  // a ContentInfo
  constructed: true,
  value: [{
    name: 'ContentInfo.contentType',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.OID,
    constructed: false,
    capture: 'contentType'
  }, {
    name: 'ContentInfo.content',
    tagClass: asn1.Class.CONTEXT_SPECIFIC,
    constructed: true,
    captureAsn1: 'content'
  }]
};
var pfxValidator = {
  name: 'PFX',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    name: 'PFX.version',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'version'
  }, contentInfoValidator, {
    name: 'PFX.macData',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    optional: true,
    captureAsn1: 'mac',
    value: [{
      name: 'PFX.macData.mac',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      // DigestInfo
      constructed: true,
      value: [{
        name: 'PFX.macData.mac.digestAlgorithm',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.SEQUENCE,
        // DigestAlgorithmIdentifier
        constructed: true,
        value: [{
          name: 'PFX.macData.mac.digestAlgorithm.algorithm',
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.OID,
          constructed: false,
          capture: 'macAlgorithm'
        }, {
          name: 'PFX.macData.mac.digestAlgorithm.parameters',
          tagClass: asn1.Class.UNIVERSAL,
          captureAsn1: 'macAlgorithmParameters'
        }]
      }, {
        name: 'PFX.macData.mac.digest',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.OCTETSTRING,
        constructed: false,
        capture: 'macDigest'
      }]
    }, {
      name: 'PFX.macData.macSalt',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.OCTETSTRING,
      constructed: false,
      capture: 'macSalt'
    }, {
      name: 'PFX.macData.iterations',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.INTEGER,
      constructed: false,
      optional: true,
      capture: 'macIterations'
    }]
  }]
};
var safeBagValidator = {
  name: 'SafeBag',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    name: 'SafeBag.bagId',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.OID,
    constructed: false,
    capture: 'bagId'
  }, {
    name: 'SafeBag.bagValue',
    tagClass: asn1.Class.CONTEXT_SPECIFIC,
    constructed: true,
    captureAsn1: 'bagValue'
  }, {
    name: 'SafeBag.bagAttributes',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SET,
    constructed: true,
    optional: true,
    capture: 'bagAttributes'
  }]
};
var attributeValidator = {
  name: 'Attribute',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    name: 'Attribute.attrId',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.OID,
    constructed: false,
    capture: 'oid'
  }, {
    name: 'Attribute.attrValues',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SET,
    constructed: true,
    capture: 'values'
  }]
};
var certBagValidator = {
  name: 'CertBag',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    name: 'CertBag.certId',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.OID,
    constructed: false,
    capture: 'certId'
  }, {
    name: 'CertBag.certValue',
    tagClass: asn1.Class.CONTEXT_SPECIFIC,
    constructed: true,

    /* So far we only support X.509 certificates (which are wrapped in
       an OCTET STRING, hence hard code that here). */
    value: [{
      name: 'CertBag.certValue[0]',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Class.OCTETSTRING,
      constructed: false,
      capture: 'cert'
    }]
  }]
};
/**
 * Search SafeContents structure for bags with matching attributes.
 *
 * The search can optionally be narrowed by a certain bag type.
 *
 * @param safeContents the SafeContents structure to search in.
 * @param attrName the name of the attribute to compare against.
 * @param attrValue the attribute value to search for.
 * @param [bagType] bag type to narrow search by.
 *
 * @return an array of matching bags.
 */

function _getBagsByAttribute(safeContents, attrName, attrValue, bagType) {
  var result = [];

  for (var i = 0; i < safeContents.length; i++) {
    for (var j = 0; j < safeContents[i].safeBags.length; j++) {
      var bag = safeContents[i].safeBags[j];

      if (bagType !== undefined && bag.type !== bagType) {
        continue;
      } // only filter by bag type, no attribute specified


      if (attrName === null) {
        result.push(bag);
        continue;
      }

      if (bag.attributes[attrName] !== undefined && bag.attributes[attrName].indexOf(attrValue) >= 0) {
        result.push(bag);
      }
    }
  }

  return result;
}
/**
 * Converts a PKCS#12 PFX in ASN.1 notation into a PFX object.
 *
 * @param obj The PKCS#12 PFX in ASN.1 notation.
 * @param strict true to use strict DER decoding, false not to (default: true).
 * @param {String} password Password to decrypt with (optional).
 *
 * @return PKCS#12 PFX object.
 */


p12.pkcs12FromAsn1 = function (obj, strict, password) {
  // handle args
  if (typeof strict === 'string') {
    password = strict;
    strict = true;
  } else if (strict === undefined) {
    strict = true;
  } // validate PFX and capture data


  var capture = {};
  var errors = [];

  if (!asn1.validate(obj, pfxValidator, capture, errors)) {
    var error = new Error('Cannot read PKCS#12 PFX. ' + 'ASN.1 object is not an PKCS#12 PFX.');
    error.errors = error;
    throw error;
  }

  var pfx = {
    version: capture.version.charCodeAt(0),
    safeContents: [],

    /**
     * Gets bags with matching attributes.
     *
     * @param filter the attributes to filter by:
     *          [localKeyId] the localKeyId to search for.
     *          [localKeyIdHex] the localKeyId in hex to search for.
     *          [friendlyName] the friendly name to search for.
     *          [bagType] bag type to narrow each attribute search by.
     *
     * @return a map of attribute type to an array of matching bags or, if no
     *           attribute was given but a bag type, the map key will be the
     *           bag type.
     */
    getBags: function getBags(filter) {
      var rval = {};
      var localKeyId;

      if ('localKeyId' in filter) {
        localKeyId = filter.localKeyId;
      } else if ('localKeyIdHex' in filter) {
        localKeyId = forge.util.hexToBytes(filter.localKeyIdHex);
      } // filter on bagType only


      if (localKeyId === undefined && !('friendlyName' in filter) && 'bagType' in filter) {
        rval[filter.bagType] = _getBagsByAttribute(pfx.safeContents, null, null, filter.bagType);
      }

      if (localKeyId !== undefined) {
        rval.localKeyId = _getBagsByAttribute(pfx.safeContents, 'localKeyId', localKeyId, filter.bagType);
      }

      if ('friendlyName' in filter) {
        rval.friendlyName = _getBagsByAttribute(pfx.safeContents, 'friendlyName', filter.friendlyName, filter.bagType);
      }

      return rval;
    },

    /**
     * DEPRECATED: use getBags() instead.
     *
     * Get bags with matching friendlyName attribute.
     *
     * @param friendlyName the friendly name to search for.
     * @param [bagType] bag type to narrow search by.
     *
     * @return an array of bags with matching friendlyName attribute.
     */
    getBagsByFriendlyName: function getBagsByFriendlyName(friendlyName, bagType) {
      return _getBagsByAttribute(pfx.safeContents, 'friendlyName', friendlyName, bagType);
    },

    /**
     * DEPRECATED: use getBags() instead.
     *
     * Get bags with matching localKeyId attribute.
     *
     * @param localKeyId the localKeyId to search for.
     * @param [bagType] bag type to narrow search by.
     *
     * @return an array of bags with matching localKeyId attribute.
     */
    getBagsByLocalKeyId: function getBagsByLocalKeyId(localKeyId, bagType) {
      return _getBagsByAttribute(pfx.safeContents, 'localKeyId', localKeyId, bagType);
    }
  };

  if (capture.version.charCodeAt(0) !== 3) {
    var error = new Error('PKCS#12 PFX of version other than 3 not supported.');
    error.version = capture.version.charCodeAt(0);
    throw error;
  }

  if (asn1.derToOid(capture.contentType) !== pki.oids.data) {
    var error = new Error('Only PKCS#12 PFX in password integrity mode supported.');
    error.oid = asn1.derToOid(capture.contentType);
    throw error;
  }

  var data = capture.content.value[0];

  if (data.tagClass !== asn1.Class.UNIVERSAL || data.type !== asn1.Type.OCTETSTRING) {
    throw new Error('PKCS#12 authSafe content data is not an OCTET STRING.');
  }

  data = _decodePkcs7Data(data); // check for MAC

  if (capture.mac) {
    var md = null;
    var macKeyBytes = 0;
    var macAlgorithm = asn1.derToOid(capture.macAlgorithm);

    switch (macAlgorithm) {
      case pki.oids.sha1:
        md = forge.md.sha1.create();
        macKeyBytes = 20;
        break;

      case pki.oids.sha256:
        md = forge.md.sha256.create();
        macKeyBytes = 32;
        break;

      case pki.oids.sha384:
        md = forge.md.sha384.create();
        macKeyBytes = 48;
        break;

      case pki.oids.sha512:
        md = forge.md.sha512.create();
        macKeyBytes = 64;
        break;

      case pki.oids.md5:
        md = forge.md.md5.create();
        macKeyBytes = 16;
        break;
    }

    if (md === null) {
      throw new Error('PKCS#12 uses unsupported MAC algorithm: ' + macAlgorithm);
    } // verify MAC (iterations default to 1)


    var macSalt = new forge.util.ByteBuffer(capture.macSalt);
    var macIterations = 'macIterations' in capture ? parseInt(forge.util.bytesToHex(capture.macIterations), 16) : 1;
    var macKey = p12.generateKey(password, macSalt, 3, macIterations, macKeyBytes, md);
    var mac = forge.hmac.create();
    mac.start(md, macKey);
    mac.update(data.value);
    var macValue = mac.getMac();

    if (macValue.getBytes() !== capture.macDigest) {
      throw new Error('PKCS#12 MAC could not be verified. Invalid password?');
    }
  }

  _decodeAuthenticatedSafe(pfx, data.value, strict, password);

  return pfx;
};
/**
 * Decodes PKCS#7 Data. PKCS#7 (RFC 2315) defines "Data" as an OCTET STRING,
 * but it is sometimes an OCTET STRING that is composed/constructed of chunks,
 * each its own OCTET STRING. This is BER-encoding vs. DER-encoding. This
 * function transforms this corner-case into the usual simple,
 * non-composed/constructed OCTET STRING.
 *
 * This function may be moved to ASN.1 at some point to better deal with
 * more BER-encoding issues, should they arise.
 *
 * @param data the ASN.1 Data object to transform.
 */


function _decodePkcs7Data(data) {
  // handle special case of "chunked" data content: an octet string composed
  // of other octet strings
  if (data.composed || data.constructed) {
    var value = forge.util.createBuffer();

    for (var i = 0; i < data.value.length; ++i) {
      value.putBytes(data.value[i].value);
    }

    data.composed = data.constructed = false;
    data.value = value.getBytes();
  }

  return data;
}
/**
 * Decode PKCS#12 AuthenticatedSafe (BER encoded) into PFX object.
 *
 * The AuthenticatedSafe is a BER-encoded SEQUENCE OF ContentInfo.
 *
 * @param pfx The PKCS#12 PFX object to fill.
 * @param {String} authSafe BER-encoded AuthenticatedSafe.
 * @param strict true to use strict DER decoding, false not to.
 * @param {String} password Password to decrypt with (optional).
 */


function _decodeAuthenticatedSafe(pfx, authSafe, strict, password) {
  authSafe = asn1.fromDer(authSafe, strict);
  /* actually it's BER encoded */

  if (authSafe.tagClass !== asn1.Class.UNIVERSAL || authSafe.type !== asn1.Type.SEQUENCE || authSafe.constructed !== true) {
    throw new Error('PKCS#12 AuthenticatedSafe expected to be a ' + 'SEQUENCE OF ContentInfo');
  }

  for (var i = 0; i < authSafe.value.length; i++) {
    var contentInfo = authSafe.value[i]; // validate contentInfo and capture data

    var capture = {};
    var errors = [];

    if (!asn1.validate(contentInfo, contentInfoValidator, capture, errors)) {
      var error = new Error('Cannot read ContentInfo.');
      error.errors = errors;
      throw error;
    }

    var obj = {
      encrypted: false
    };
    var safeContents = null;
    var data = capture.content.value[0];

    switch (asn1.derToOid(capture.contentType)) {
      case pki.oids.data:
        if (data.tagClass !== asn1.Class.UNIVERSAL || data.type !== asn1.Type.OCTETSTRING) {
          throw new Error('PKCS#12 SafeContents Data is not an OCTET STRING.');
        }

        safeContents = _decodePkcs7Data(data).value;
        break;

      case pki.oids.encryptedData:
        safeContents = _decryptSafeContents(data, password);
        obj.encrypted = true;
        break;

      default:
        var error = new Error('Unsupported PKCS#12 contentType.');
        error.contentType = asn1.derToOid(capture.contentType);
        throw error;
    }

    obj.safeBags = _decodeSafeContents(safeContents, strict, password);
    pfx.safeContents.push(obj);
  }
}
/**
 * Decrypt PKCS#7 EncryptedData structure.
 *
 * @param data ASN.1 encoded EncryptedContentInfo object.
 * @param password The user-provided password.
 *
 * @return The decrypted SafeContents (ASN.1 object).
 */


function _decryptSafeContents(data, password) {
  var capture = {};
  var errors = [];

  if (!asn1.validate(data, forge.pkcs7.asn1.encryptedDataValidator, capture, errors)) {
    var error = new Error('Cannot read EncryptedContentInfo.');
    error.errors = errors;
    throw error;
  }

  var oid = asn1.derToOid(capture.contentType);

  if (oid !== pki.oids.data) {
    var error = new Error('PKCS#12 EncryptedContentInfo ContentType is not Data.');
    error.oid = oid;
    throw error;
  } // get cipher


  oid = asn1.derToOid(capture.encAlgorithm);
  var cipher = pki.pbe.getCipher(oid, capture.encParameter, password); // get encrypted data

  var encryptedContentAsn1 = _decodePkcs7Data(capture.encryptedContentAsn1);

  var encrypted = forge.util.createBuffer(encryptedContentAsn1.value);
  cipher.update(encrypted);

  if (!cipher.finish()) {
    throw new Error('Failed to decrypt PKCS#12 SafeContents.');
  }

  return cipher.output.getBytes();
}
/**
 * Decode PKCS#12 SafeContents (BER-encoded) into array of Bag objects.
 *
 * The safeContents is a BER-encoded SEQUENCE OF SafeBag.
 *
 * @param {String} safeContents BER-encoded safeContents.
 * @param strict true to use strict DER decoding, false not to.
 * @param {String} password Password to decrypt with (optional).
 *
 * @return {Array} Array of Bag objects.
 */


function _decodeSafeContents(safeContents, strict, password) {
  // if strict and no safe contents, return empty safes
  if (!strict && safeContents.length === 0) {
    return [];
  } // actually it's BER-encoded


  safeContents = asn1.fromDer(safeContents, strict);

  if (safeContents.tagClass !== asn1.Class.UNIVERSAL || safeContents.type !== asn1.Type.SEQUENCE || safeContents.constructed !== true) {
    throw new Error('PKCS#12 SafeContents expected to be a SEQUENCE OF SafeBag.');
  }

  var res = [];

  for (var i = 0; i < safeContents.value.length; i++) {
    var safeBag = safeContents.value[i]; // validate SafeBag and capture data

    var capture = {};
    var errors = [];

    if (!asn1.validate(safeBag, safeBagValidator, capture, errors)) {
      var error = new Error('Cannot read SafeBag.');
      error.errors = errors;
      throw error;
    }
    /* Create bag object and push to result array. */


    var bag = {
      type: asn1.derToOid(capture.bagId),
      attributes: _decodeBagAttributes(capture.bagAttributes)
    };
    res.push(bag);
    var validator, decoder;
    var bagAsn1 = capture.bagValue.value[0];

    switch (bag.type) {
      case pki.oids.pkcs8ShroudedKeyBag:
        /* bagAsn1 has a EncryptedPrivateKeyInfo, which we need to decrypt.
           Afterwards we can handle it like a keyBag,
           which is a PrivateKeyInfo. */
        bagAsn1 = pki.decryptPrivateKeyInfo(bagAsn1, password);

        if (bagAsn1 === null) {
          throw new Error('Unable to decrypt PKCS#8 ShroudedKeyBag, wrong password?');
        }

      /* fall through */

      case pki.oids.keyBag:
        /* A PKCS#12 keyBag is a simple PrivateKeyInfo as understood by our
           PKI module, hence we don't have to do validation/capturing here,
           just pass what we already got. */
        try {
          bag.key = pki.privateKeyFromAsn1(bagAsn1);
        } catch (e) {
          // ignore unknown key type, pass asn1 value
          bag.key = null;
          bag.asn1 = bagAsn1;
        }

        continue;

      /* Nothing more to do. */

      case pki.oids.certBag:
        /* A PKCS#12 certBag can wrap both X.509 and sdsi certificates.
           Therefore put the SafeBag content through another validator to
           capture the fields.  Afterwards check & store the results. */
        validator = certBagValidator;

        decoder = function decoder() {
          if (asn1.derToOid(capture.certId) !== pki.oids.x509Certificate) {
            var error = new Error('Unsupported certificate type, only X.509 supported.');
            error.oid = asn1.derToOid(capture.certId);
            throw error;
          } // true=produce cert hash


          var certAsn1 = asn1.fromDer(capture.cert, strict);

          try {
            bag.cert = pki.certificateFromAsn1(certAsn1, true);
          } catch (e) {
            // ignore unknown cert type, pass asn1 value
            bag.cert = null;
            bag.asn1 = certAsn1;
          }
        };

        break;

      default:
        var error = new Error('Unsupported PKCS#12 SafeBag type.');
        error.oid = bag.type;
        throw error;
    }
    /* Validate SafeBag value (i.e. CertBag, etc.) and capture data if needed. */


    if (validator !== undefined && !asn1.validate(bagAsn1, validator, capture, errors)) {
      var error = new Error('Cannot read PKCS#12 ' + validator.name);
      error.errors = errors;
      throw error;
    }
    /* Call decoder function from above to store the results. */


    decoder();
  }

  return res;
}
/**
 * Decode PKCS#12 SET OF PKCS12Attribute into JavaScript object.
 *
 * @param attributes SET OF PKCS12Attribute (ASN.1 object).
 *
 * @return the decoded attributes.
 */


function _decodeBagAttributes(attributes) {
  var decodedAttrs = {};

  if (attributes !== undefined) {
    for (var i = 0; i < attributes.length; ++i) {
      var capture = {};
      var errors = [];

      if (!asn1.validate(attributes[i], attributeValidator, capture, errors)) {
        var error = new Error('Cannot read PKCS#12 BagAttribute.');
        error.errors = errors;
        throw error;
      }

      var oid = asn1.derToOid(capture.oid);

      if (pki.oids[oid] === undefined) {
        // unsupported attribute type, ignore.
        continue;
      }

      decodedAttrs[pki.oids[oid]] = [];

      for (var j = 0; j < capture.values.length; ++j) {
        decodedAttrs[pki.oids[oid]].push(capture.values[j].value);
      }
    }
  }

  return decodedAttrs;
}
/**
 * Wraps a private key and certificate in a PKCS#12 PFX wrapper. If a
 * password is provided then the private key will be encrypted.
 *
 * An entire certificate chain may also be included. To do this, pass
 * an array for the "cert" parameter where the first certificate is
 * the one that is paired with the private key and each subsequent one
 * verifies the previous one. The certificates may be in PEM format or
 * have been already parsed by Forge.
 *
 * @todo implement password-based-encryption for the whole package
 *
 * @param key the private key.
 * @param cert the certificate (may be an array of certificates in order
 *          to specify a certificate chain).
 * @param password the password to use, null for none.
 * @param options:
 *          algorithm the encryption algorithm to use
 *            ('aes128', 'aes192', 'aes256', '3des'), defaults to 'aes128'.
 *          count the iteration count to use.
 *          saltSize the salt size to use.
 *          useMac true to include a MAC, false not to, defaults to true.
 *          localKeyId the local key ID to use, in hex.
 *          friendlyName the friendly name to use.
 *          generateLocalKeyId true to generate a random local key ID,
 *            false not to, defaults to true.
 *
 * @return the PKCS#12 PFX ASN.1 object.
 */


p12.toPkcs12Asn1 = function (key, cert, password, options) {
  // set default options
  options = options || {};
  options.saltSize = options.saltSize || 8;
  options.count = options.count || 2048;
  options.algorithm = options.algorithm || options.encAlgorithm || 'aes128';

  if (!('useMac' in options)) {
    options.useMac = true;
  }

  if (!('localKeyId' in options)) {
    options.localKeyId = null;
  }

  if (!('generateLocalKeyId' in options)) {
    options.generateLocalKeyId = true;
  }

  var localKeyId = options.localKeyId;
  var bagAttrs;

  if (localKeyId !== null) {
    localKeyId = forge.util.hexToBytes(localKeyId);
  } else if (options.generateLocalKeyId) {
    // use SHA-1 of paired cert, if available
    if (cert) {
      var pairedCert = forge.util.isArray(cert) ? cert[0] : cert;

      if (typeof pairedCert === 'string') {
        pairedCert = pki.certificateFromPem(pairedCert);
      }

      var sha1 = forge.md.sha1.create();
      sha1.update(asn1.toDer(pki.certificateToAsn1(pairedCert)).getBytes());
      localKeyId = sha1.digest().getBytes();
    } else {
      // FIXME: consider using SHA-1 of public key (which can be generated
      // from private key components), see: cert.generateSubjectKeyIdentifier
      // generate random bytes
      localKeyId = forge.random.getBytes(20);
    }
  }

  var attrs = [];

  if (localKeyId !== null) {
    attrs.push( // localKeyID
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// attrId
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(pki.oids.localKeyId).getBytes()), // attrValues
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, localKeyId)])]));
  }

  if ('friendlyName' in options) {
    attrs.push( // friendlyName
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// attrId
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(pki.oids.friendlyName).getBytes()), // attrValues
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BMPSTRING, false, options.friendlyName)])]));
  }

  if (attrs.length > 0) {
    bagAttrs = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, attrs);
  } // collect contents for AuthenticatedSafe


  var contents = []; // create safe bag(s) for certificate chain

  var chain = [];

  if (cert !== null) {
    if (forge.util.isArray(cert)) {
      chain = cert;
    } else {
      chain = [cert];
    }
  }

  var certSafeBags = [];

  for (var i = 0; i < chain.length; ++i) {
    // convert cert from PEM as necessary
    cert = chain[i];

    if (typeof cert === 'string') {
      cert = pki.certificateFromPem(cert);
    } // SafeBag


    var certBagAttrs = i === 0 ? bagAttrs : undefined;
    var certAsn1 = pki.certificateToAsn1(cert);
    var certSafeBag = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// bagId
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(pki.oids.certBag).getBytes()), // bagValue
    asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [// CertBag
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// certId
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(pki.oids.x509Certificate).getBytes()), // certValue (x509Certificate)
    asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, asn1.toDer(certAsn1).getBytes())])])]), // bagAttributes (OPTIONAL)
    certBagAttrs]);
    certSafeBags.push(certSafeBag);
  }

  if (certSafeBags.length > 0) {
    // SafeContents
    var certSafeContents = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, certSafeBags); // ContentInfo

    var certCI = // PKCS#7 ContentInfo
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// contentType
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, // OID for the content type is 'data'
    asn1.oidToDer(pki.oids.data).getBytes()), // content
    asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, asn1.toDer(certSafeContents).getBytes())])]);
    contents.push(certCI);
  } // create safe contents for private key


  var keyBag = null;

  if (key !== null) {
    // SafeBag
    var pkAsn1 = pki.wrapRsaPrivateKey(pki.privateKeyToAsn1(key));

    if (password === null) {
      // no encryption
      keyBag = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// bagId
      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(pki.oids.keyBag).getBytes()), // bagValue
      asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [// PrivateKeyInfo
      pkAsn1]), // bagAttributes (OPTIONAL)
      bagAttrs]);
    } else {
      // encrypted PrivateKeyInfo
      keyBag = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// bagId
      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(pki.oids.pkcs8ShroudedKeyBag).getBytes()), // bagValue
      asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [// EncryptedPrivateKeyInfo
      pki.encryptPrivateKeyInfo(pkAsn1, password, options)]), // bagAttributes (OPTIONAL)
      bagAttrs]);
    } // SafeContents


    var keySafeContents = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [keyBag]); // ContentInfo

    var keyCI = // PKCS#7 ContentInfo
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// contentType
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, // OID for the content type is 'data'
    asn1.oidToDer(pki.oids.data).getBytes()), // content
    asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, asn1.toDer(keySafeContents).getBytes())])]);
    contents.push(keyCI);
  } // create AuthenticatedSafe by stringing together the contents


  var safe = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, contents);
  var macData;

  if (options.useMac) {
    // MacData
    var sha1 = forge.md.sha1.create();
    var macSalt = new forge.util.ByteBuffer(forge.random.getBytes(options.saltSize));
    var count = options.count; // 160-bit key

    var key = p12.generateKey(password, macSalt, 3, count, 20);
    var mac = forge.hmac.create();
    mac.start(sha1, key);
    mac.update(asn1.toDer(safe).getBytes());
    var macValue = mac.getMac();
    macData = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// mac DigestInfo
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// digestAlgorithm
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// algorithm = SHA-1
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(pki.oids.sha1).getBytes()), // parameters = Null
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')]), // digest
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, macValue.getBytes())]), // macSalt OCTET STRING
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, macSalt.getBytes()), // iterations INTEGER (XXX: Only support count < 65536)
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, asn1.integerToDer(count).getBytes())]);
  } // PFX


  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// version (3)
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, asn1.integerToDer(3).getBytes()), // PKCS#7 ContentInfo
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// contentType
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, // OID for the content type is 'data'
  asn1.oidToDer(pki.oids.data).getBytes()), // content
  asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, asn1.toDer(safe).getBytes())])]), macData]);
};
/**
 * Derives a PKCS#12 key.
 *
 * @param password the password to derive the key material from, null or
 *          undefined for none.
 * @param salt the salt, as a ByteBuffer, to use.
 * @param id the PKCS#12 ID byte (1 = key material, 2 = IV, 3 = MAC).
 * @param iter the iteration count.
 * @param n the number of bytes to derive from the password.
 * @param md the message digest to use, defaults to SHA-1.
 *
 * @return a ByteBuffer with the bytes derived from the password.
 */


p12.generateKey = forge.pbe.generatePkcs12Key;

/***/ }),
/* 435 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Node.js module for Forge mask generation functions.
 *
 * @author Stefan Siegl
 *
 * Copyright 2012 Stefan Siegl <stesie@brokenpipe.de>
 */
var forge = __webpack_require__(7);

__webpack_require__(436);

module.exports = forge.mgf = forge.mgf || {};
forge.mgf.mgf1 = forge.mgf1;

/***/ }),
/* 436 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Javascript implementation of mask generation function MGF1.
 *
 * @author Stefan Siegl
 * @author Dave Longley
 *
 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
 * Copyright (c) 2014 Digital Bazaar, Inc.
 */
var forge = __webpack_require__(7);

__webpack_require__(10);

forge.mgf = forge.mgf || {};
var mgf1 = module.exports = forge.mgf.mgf1 = forge.mgf1 = forge.mgf1 || {};
/**
 * Creates a MGF1 mask generation function object.
 *
 * @param md the message digest API to use (eg: forge.md.sha1.create()).
 *
 * @return a mask generation function object.
 */

mgf1.create = function (md) {
  var mgf = {
    /**
     * Generate mask of specified length.
     *
     * @param {String} seed The seed for mask generation.
     * @param maskLen Number of bytes to generate.
     * @return {String} The generated mask.
     */
    generate: function generate(seed, maskLen) {
      /* 2. Let T be the empty octet string. */
      var t = new forge.util.ByteBuffer();
      /* 3. For counter from 0 to ceil(maskLen / hLen), do the following: */

      var len = Math.ceil(maskLen / md.digestLength);

      for (var i = 0; i < len; i++) {
        /* a. Convert counter to an octet string C of length 4 octets */
        var c = new forge.util.ByteBuffer();
        c.putInt32(i);
        /* b. Concatenate the hash of the seed mgfSeed and C to the octet
         * string T: */

        md.start();
        md.update(seed + c.getBytes());
        t.putBuffer(md.digest());
      }
      /* Output the leading maskLen octets of T as the octet string mask. */


      t.truncate(t.length() - maskLen);
      return t.getBytes();
    }
  };
  return mgf;
};

/***/ }),
/* 437 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Secure Hash Algorithm with a 1024-bit block size implementation.
 *
 * This includes: SHA-512, SHA-384, SHA-512/224, and SHA-512/256. For
 * SHA-256 (block size 512 bits), see sha256.js.
 *
 * See FIPS 180-4 for details.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2014-2015 Digital Bazaar, Inc.
 */
var forge = __webpack_require__(7);

__webpack_require__(47);

__webpack_require__(10);

var sha512 = module.exports = forge.sha512 = forge.sha512 || {}; // SHA-512

forge.md.sha512 = forge.md.algorithms.sha512 = sha512; // SHA-384

var sha384 = forge.sha384 = forge.sha512.sha384 = forge.sha512.sha384 || {};

sha384.create = function () {
  return sha512.create('SHA-384');
};

forge.md.sha384 = forge.md.algorithms.sha384 = sha384; // SHA-512/256

forge.sha512.sha256 = forge.sha512.sha256 || {
  create: function create() {
    return sha512.create('SHA-512/256');
  }
};
forge.md['sha512/256'] = forge.md.algorithms['sha512/256'] = forge.sha512.sha256; // SHA-512/224

forge.sha512.sha224 = forge.sha512.sha224 || {
  create: function create() {
    return sha512.create('SHA-512/224');
  }
};
forge.md['sha512/224'] = forge.md.algorithms['sha512/224'] = forge.sha512.sha224;
/**
 * Creates a SHA-2 message digest object.
 *
 * @param algorithm the algorithm to use (SHA-512, SHA-384, SHA-512/224,
 *          SHA-512/256).
 *
 * @return a message digest object.
 */

sha512.create = function (algorithm) {
  // do initialization as necessary
  if (!_initialized) {
    _init();
  }

  if (typeof algorithm === 'undefined') {
    algorithm = 'SHA-512';
  }

  if (!(algorithm in _states)) {
    throw new Error('Invalid SHA-512 algorithm: ' + algorithm);
  } // SHA-512 state contains eight 64-bit integers (each as two 32-bit ints)


  var _state = _states[algorithm];
  var _h = null; // input buffer

  var _input = forge.util.createBuffer(); // used for 64-bit word storage


  var _w = new Array(80);

  for (var wi = 0; wi < 80; ++wi) {
    _w[wi] = new Array(2);
  } // determine digest length by algorithm name (default)


  var digestLength = 64;

  switch (algorithm) {
    case 'SHA-384':
      digestLength = 48;
      break;

    case 'SHA-512/256':
      digestLength = 32;
      break;

    case 'SHA-512/224':
      digestLength = 28;
      break;
  } // message digest object


  var md = {
    // SHA-512 => sha512
    algorithm: algorithm.replace('-', '').toLowerCase(),
    blockLength: 128,
    digestLength: digestLength,
    // 56-bit length of message so far (does not including padding)
    messageLength: 0,
    // true message length
    fullMessageLength: null,
    // size of message length in bytes
    messageLengthSize: 16
  };
  /**
   * Starts the digest.
   *
   * @return this digest object.
   */

  md.start = function () {
    // up to 56-bit message length for convenience
    md.messageLength = 0; // full message length (set md.messageLength128 for backwards-compatibility)

    md.fullMessageLength = md.messageLength128 = [];
    var int32s = md.messageLengthSize / 4;

    for (var i = 0; i < int32s; ++i) {
      md.fullMessageLength.push(0);
    }

    _input = forge.util.createBuffer();
    _h = new Array(_state.length);

    for (var i = 0; i < _state.length; ++i) {
      _h[i] = _state[i].slice(0);
    }

    return md;
  }; // start digest automatically for first time


  md.start();
  /**
   * Updates the digest with the given message input. The given input can
   * treated as raw input (no encoding will be applied) or an encoding of
   * 'utf8' maybe given to encode the input using UTF-8.
   *
   * @param msg the message input to update with.
   * @param encoding the encoding to use (default: 'raw', other: 'utf8').
   *
   * @return this digest object.
   */

  md.update = function (msg, encoding) {
    if (encoding === 'utf8') {
      msg = forge.util.encodeUtf8(msg);
    } // update message length


    var len = msg.length;
    md.messageLength += len;
    len = [len / 0x100000000 >>> 0, len >>> 0];

    for (var i = md.fullMessageLength.length - 1; i >= 0; --i) {
      md.fullMessageLength[i] += len[1];
      len[1] = len[0] + (md.fullMessageLength[i] / 0x100000000 >>> 0);
      md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;
      len[0] = len[1] / 0x100000000 >>> 0;
    } // add bytes to input buffer


    _input.putBytes(msg); // process bytes


    _update(_h, _w, _input); // compact input buffer every 2K or if empty


    if (_input.read > 2048 || _input.length() === 0) {
      _input.compact();
    }

    return md;
  };
  /**
   * Produces the digest.
   *
   * @return a byte buffer containing the digest value.
   */


  md.digest = function () {
    /* Note: Here we copy the remaining bytes in the input buffer and
    add the appropriate SHA-512 padding. Then we do the final update
    on a copy of the state so that if the user wants to get
    intermediate digests they can do so. */

    /* Determine the number of bytes that must be added to the message
    to ensure its length is congruent to 896 mod 1024. In other words,
    the data to be digested must be a multiple of 1024 bits (or 128 bytes).
    This data includes the message, some padding, and the length of the
    message. Since the length of the message will be encoded as 16 bytes (128
    bits), that means that the last segment of the data must have 112 bytes
    (896 bits) of message and padding. Therefore, the length of the message
    plus the padding must be congruent to 896 mod 1024 because
    1024 - 128 = 896.
     In order to fill up the message length it must be filled with
    padding that begins with 1 bit followed by all 0 bits. Padding
    must *always* be present, so if the message length is already
    congruent to 896 mod 1024, then 1024 padding bits must be added. */
    var finalBlock = forge.util.createBuffer();
    finalBlock.putBytes(_input.bytes()); // compute remaining size to be digested (include message length size)

    var remaining = md.fullMessageLength[md.fullMessageLength.length - 1] + md.messageLengthSize; // add padding for overflow blockSize - overflow
    // _padding starts with 1 byte with first bit is set (byte value 128), then
    // there may be up to (blockSize - 1) other pad bytes

    var overflow = remaining & md.blockLength - 1;
    finalBlock.putBytes(_padding.substr(0, md.blockLength - overflow)); // serialize message length in bits in big-endian order; since length
    // is stored in bytes we multiply by 8 and add carry from next int

    var next, carry;
    var bits = md.fullMessageLength[0] * 8;

    for (var i = 0; i < md.fullMessageLength.length - 1; ++i) {
      next = md.fullMessageLength[i + 1] * 8;
      carry = next / 0x100000000 >>> 0;
      bits += carry;
      finalBlock.putInt32(bits >>> 0);
      bits = next >>> 0;
    }

    finalBlock.putInt32(bits);
    var h = new Array(_h.length);

    for (var i = 0; i < _h.length; ++i) {
      h[i] = _h[i].slice(0);
    }

    _update(h, _w, finalBlock);

    var rval = forge.util.createBuffer();
    var hlen;

    if (algorithm === 'SHA-512') {
      hlen = h.length;
    } else if (algorithm === 'SHA-384') {
      hlen = h.length - 2;
    } else {
      hlen = h.length - 4;
    }

    for (var i = 0; i < hlen; ++i) {
      rval.putInt32(h[i][0]);

      if (i !== hlen - 1 || algorithm !== 'SHA-512/224') {
        rval.putInt32(h[i][1]);
      }
    }

    return rval;
  };

  return md;
}; // sha-512 padding bytes not initialized yet


var _padding = null;
var _initialized = false; // table of constants

var _k = null; // initial hash states

var _states = null;
/**
 * Initializes the constant tables.
 */

function _init() {
  // create padding
  _padding = String.fromCharCode(128);
  _padding += forge.util.fillString(String.fromCharCode(0x00), 128); // create K table for SHA-512

  _k = [[0x428a2f98, 0xd728ae22], [0x71374491, 0x23ef65cd], [0xb5c0fbcf, 0xec4d3b2f], [0xe9b5dba5, 0x8189dbbc], [0x3956c25b, 0xf348b538], [0x59f111f1, 0xb605d019], [0x923f82a4, 0xaf194f9b], [0xab1c5ed5, 0xda6d8118], [0xd807aa98, 0xa3030242], [0x12835b01, 0x45706fbe], [0x243185be, 0x4ee4b28c], [0x550c7dc3, 0xd5ffb4e2], [0x72be5d74, 0xf27b896f], [0x80deb1fe, 0x3b1696b1], [0x9bdc06a7, 0x25c71235], [0xc19bf174, 0xcf692694], [0xe49b69c1, 0x9ef14ad2], [0xefbe4786, 0x384f25e3], [0x0fc19dc6, 0x8b8cd5b5], [0x240ca1cc, 0x77ac9c65], [0x2de92c6f, 0x592b0275], [0x4a7484aa, 0x6ea6e483], [0x5cb0a9dc, 0xbd41fbd4], [0x76f988da, 0x831153b5], [0x983e5152, 0xee66dfab], [0xa831c66d, 0x2db43210], [0xb00327c8, 0x98fb213f], [0xbf597fc7, 0xbeef0ee4], [0xc6e00bf3, 0x3da88fc2], [0xd5a79147, 0x930aa725], [0x06ca6351, 0xe003826f], [0x14292967, 0x0a0e6e70], [0x27b70a85, 0x46d22ffc], [0x2e1b2138, 0x5c26c926], [0x4d2c6dfc, 0x5ac42aed], [0x53380d13, 0x9d95b3df], [0x650a7354, 0x8baf63de], [0x766a0abb, 0x3c77b2a8], [0x81c2c92e, 0x47edaee6], [0x92722c85, 0x1482353b], [0xa2bfe8a1, 0x4cf10364], [0xa81a664b, 0xbc423001], [0xc24b8b70, 0xd0f89791], [0xc76c51a3, 0x0654be30], [0xd192e819, 0xd6ef5218], [0xd6990624, 0x5565a910], [0xf40e3585, 0x5771202a], [0x106aa070, 0x32bbd1b8], [0x19a4c116, 0xb8d2d0c8], [0x1e376c08, 0x5141ab53], [0x2748774c, 0xdf8eeb99], [0x34b0bcb5, 0xe19b48a8], [0x391c0cb3, 0xc5c95a63], [0x4ed8aa4a, 0xe3418acb], [0x5b9cca4f, 0x7763e373], [0x682e6ff3, 0xd6b2b8a3], [0x748f82ee, 0x5defb2fc], [0x78a5636f, 0x43172f60], [0x84c87814, 0xa1f0ab72], [0x8cc70208, 0x1a6439ec], [0x90befffa, 0x23631e28], [0xa4506ceb, 0xde82bde9], [0xbef9a3f7, 0xb2c67915], [0xc67178f2, 0xe372532b], [0xca273ece, 0xea26619c], [0xd186b8c7, 0x21c0c207], [0xeada7dd6, 0xcde0eb1e], [0xf57d4f7f, 0xee6ed178], [0x06f067aa, 0x72176fba], [0x0a637dc5, 0xa2c898a6], [0x113f9804, 0xbef90dae], [0x1b710b35, 0x131c471b], [0x28db77f5, 0x23047d84], [0x32caab7b, 0x40c72493], [0x3c9ebe0a, 0x15c9bebc], [0x431d67c4, 0x9c100d4c], [0x4cc5d4be, 0xcb3e42b6], [0x597f299c, 0xfc657e2a], [0x5fcb6fab, 0x3ad6faec], [0x6c44198c, 0x4a475817]]; // initial hash states

  _states = {};
  _states['SHA-512'] = [[0x6a09e667, 0xf3bcc908], [0xbb67ae85, 0x84caa73b], [0x3c6ef372, 0xfe94f82b], [0xa54ff53a, 0x5f1d36f1], [0x510e527f, 0xade682d1], [0x9b05688c, 0x2b3e6c1f], [0x1f83d9ab, 0xfb41bd6b], [0x5be0cd19, 0x137e2179]];
  _states['SHA-384'] = [[0xcbbb9d5d, 0xc1059ed8], [0x629a292a, 0x367cd507], [0x9159015a, 0x3070dd17], [0x152fecd8, 0xf70e5939], [0x67332667, 0xffc00b31], [0x8eb44a87, 0x68581511], [0xdb0c2e0d, 0x64f98fa7], [0x47b5481d, 0xbefa4fa4]];
  _states['SHA-512/256'] = [[0x22312194, 0xFC2BF72C], [0x9F555FA3, 0xC84C64C2], [0x2393B86B, 0x6F53B151], [0x96387719, 0x5940EABD], [0x96283EE2, 0xA88EFFE3], [0xBE5E1E25, 0x53863992], [0x2B0199FC, 0x2C85B8AA], [0x0EB72DDC, 0x81C52CA2]];
  _states['SHA-512/224'] = [[0x8C3D37C8, 0x19544DA2], [0x73E19966, 0x89DCD4D6], [0x1DFAB7AE, 0x32FF9C82], [0x679DD514, 0x582F9FCF], [0x0F6D2B69, 0x7BD44DA8], [0x77E36F73, 0x04C48942], [0x3F9D85A8, 0x6A1D36C8], [0x1112E6AD, 0x91D692A1]]; // now initialized

  _initialized = true;
}
/**
 * Updates a SHA-512 state with the given byte buffer.
 *
 * @param s the SHA-512 state to update.
 * @param w the array to use to store words.
 * @param bytes the byte buffer to update with.
 */


function _update(s, w, bytes) {
  // consume 512 bit (128 byte) chunks
  var t1_hi, t1_lo;
  var t2_hi, t2_lo;
  var s0_hi, s0_lo;
  var s1_hi, s1_lo;
  var ch_hi, ch_lo;
  var maj_hi, maj_lo;
  var a_hi, a_lo;
  var b_hi, b_lo;
  var c_hi, c_lo;
  var d_hi, d_lo;
  var e_hi, e_lo;
  var f_hi, f_lo;
  var g_hi, g_lo;
  var h_hi, h_lo;
  var i, hi, lo, w2, w7, w15, w16;
  var len = bytes.length();

  while (len >= 128) {
    // the w array will be populated with sixteen 64-bit big-endian words
    // and then extended into 64 64-bit words according to SHA-512
    for (i = 0; i < 16; ++i) {
      w[i][0] = bytes.getInt32() >>> 0;
      w[i][1] = bytes.getInt32() >>> 0;
    }

    for (; i < 80; ++i) {
      // for word 2 words ago: ROTR 19(x) ^ ROTR 61(x) ^ SHR 6(x)
      w2 = w[i - 2];
      hi = w2[0];
      lo = w2[1]; // high bits

      t1_hi = ((hi >>> 19 | lo << 13) ^ ( // ROTR 19
      lo >>> 29 | hi << 3) ^ // ROTR 61/(swap + ROTR 29)
      hi >>> 6) >>> 0; // SHR 6
      // low bits

      t1_lo = ((hi << 13 | lo >>> 19) ^ ( // ROTR 19
      lo << 3 | hi >>> 29) ^ ( // ROTR 61/(swap + ROTR 29)
      hi << 26 | lo >>> 6)) >>> 0; // SHR 6
      // for word 15 words ago: ROTR 1(x) ^ ROTR 8(x) ^ SHR 7(x)

      w15 = w[i - 15];
      hi = w15[0];
      lo = w15[1]; // high bits

      t2_hi = ((hi >>> 1 | lo << 31) ^ ( // ROTR 1
      hi >>> 8 | lo << 24) ^ // ROTR 8
      hi >>> 7) >>> 0; // SHR 7
      // low bits

      t2_lo = ((hi << 31 | lo >>> 1) ^ ( // ROTR 1
      hi << 24 | lo >>> 8) ^ ( // ROTR 8
      hi << 25 | lo >>> 7)) >>> 0; // SHR 7
      // sum(t1, word 7 ago, t2, word 16 ago) modulo 2^64 (carry lo overflow)

      w7 = w[i - 7];
      w16 = w[i - 16];
      lo = t1_lo + w7[1] + t2_lo + w16[1];
      w[i][0] = t1_hi + w7[0] + t2_hi + w16[0] + (lo / 0x100000000 >>> 0) >>> 0;
      w[i][1] = lo >>> 0;
    } // initialize hash value for this chunk


    a_hi = s[0][0];
    a_lo = s[0][1];
    b_hi = s[1][0];
    b_lo = s[1][1];
    c_hi = s[2][0];
    c_lo = s[2][1];
    d_hi = s[3][0];
    d_lo = s[3][1];
    e_hi = s[4][0];
    e_lo = s[4][1];
    f_hi = s[5][0];
    f_lo = s[5][1];
    g_hi = s[6][0];
    g_lo = s[6][1];
    h_hi = s[7][0];
    h_lo = s[7][1]; // round function

    for (i = 0; i < 80; ++i) {
      // Sum1(e) = ROTR 14(e) ^ ROTR 18(e) ^ ROTR 41(e)
      s1_hi = ((e_hi >>> 14 | e_lo << 18) ^ ( // ROTR 14
      e_hi >>> 18 | e_lo << 14) ^ ( // ROTR 18
      e_lo >>> 9 | e_hi << 23)) >>> 0; // ROTR 41/(swap + ROTR 9)

      s1_lo = ((e_hi << 18 | e_lo >>> 14) ^ ( // ROTR 14
      e_hi << 14 | e_lo >>> 18) ^ ( // ROTR 18
      e_lo << 23 | e_hi >>> 9)) >>> 0; // ROTR 41/(swap + ROTR 9)
      // Ch(e, f, g) (optimized the same way as SHA-1)

      ch_hi = (g_hi ^ e_hi & (f_hi ^ g_hi)) >>> 0;
      ch_lo = (g_lo ^ e_lo & (f_lo ^ g_lo)) >>> 0; // Sum0(a) = ROTR 28(a) ^ ROTR 34(a) ^ ROTR 39(a)

      s0_hi = ((a_hi >>> 28 | a_lo << 4) ^ ( // ROTR 28
      a_lo >>> 2 | a_hi << 30) ^ ( // ROTR 34/(swap + ROTR 2)
      a_lo >>> 7 | a_hi << 25)) >>> 0; // ROTR 39/(swap + ROTR 7)

      s0_lo = ((a_hi << 4 | a_lo >>> 28) ^ ( // ROTR 28
      a_lo << 30 | a_hi >>> 2) ^ ( // ROTR 34/(swap + ROTR 2)
      a_lo << 25 | a_hi >>> 7)) >>> 0; // ROTR 39/(swap + ROTR 7)
      // Maj(a, b, c) (optimized the same way as SHA-1)

      maj_hi = (a_hi & b_hi | c_hi & (a_hi ^ b_hi)) >>> 0;
      maj_lo = (a_lo & b_lo | c_lo & (a_lo ^ b_lo)) >>> 0; // main algorithm
      // t1 = (h + s1 + ch + _k[i] + _w[i]) modulo 2^64 (carry lo overflow)

      lo = h_lo + s1_lo + ch_lo + _k[i][1] + w[i][1];
      t1_hi = h_hi + s1_hi + ch_hi + _k[i][0] + w[i][0] + (lo / 0x100000000 >>> 0) >>> 0;
      t1_lo = lo >>> 0; // t2 = s0 + maj modulo 2^64 (carry lo overflow)

      lo = s0_lo + maj_lo;
      t2_hi = s0_hi + maj_hi + (lo / 0x100000000 >>> 0) >>> 0;
      t2_lo = lo >>> 0;
      h_hi = g_hi;
      h_lo = g_lo;
      g_hi = f_hi;
      g_lo = f_lo;
      f_hi = e_hi;
      f_lo = e_lo; // e = (d + t1) modulo 2^64 (carry lo overflow)

      lo = d_lo + t1_lo;
      e_hi = d_hi + t1_hi + (lo / 0x100000000 >>> 0) >>> 0;
      e_lo = lo >>> 0;
      d_hi = c_hi;
      d_lo = c_lo;
      c_hi = b_hi;
      c_lo = b_lo;
      b_hi = a_hi;
      b_lo = a_lo; // a = (t1 + t2) modulo 2^64 (carry lo overflow)

      lo = t1_lo + t2_lo;
      a_hi = t1_hi + t2_hi + (lo / 0x100000000 >>> 0) >>> 0;
      a_lo = lo >>> 0;
    } // update hash state (additional modulo 2^64)


    lo = s[0][1] + a_lo;
    s[0][0] = s[0][0] + a_hi + (lo / 0x100000000 >>> 0) >>> 0;
    s[0][1] = lo >>> 0;
    lo = s[1][1] + b_lo;
    s[1][0] = s[1][0] + b_hi + (lo / 0x100000000 >>> 0) >>> 0;
    s[1][1] = lo >>> 0;
    lo = s[2][1] + c_lo;
    s[2][0] = s[2][0] + c_hi + (lo / 0x100000000 >>> 0) >>> 0;
    s[2][1] = lo >>> 0;
    lo = s[3][1] + d_lo;
    s[3][0] = s[3][0] + d_hi + (lo / 0x100000000 >>> 0) >>> 0;
    s[3][1] = lo >>> 0;
    lo = s[4][1] + e_lo;
    s[4][0] = s[4][0] + e_hi + (lo / 0x100000000 >>> 0) >>> 0;
    s[4][1] = lo >>> 0;
    lo = s[5][1] + f_lo;
    s[5][0] = s[5][0] + f_hi + (lo / 0x100000000 >>> 0) >>> 0;
    s[5][1] = lo >>> 0;
    lo = s[6][1] + g_lo;
    s[6][0] = s[6][0] + g_hi + (lo / 0x100000000 >>> 0) >>> 0;
    s[6][1] = lo >>> 0;
    lo = s[7][1] + h_lo;
    s[7][0] = s[7][0] + h_hi + (lo / 0x100000000 >>> 0) >>> 0;
    s[7][1] = lo >>> 0;
    len -= 128;
  }
}

/***/ }),
/* 438 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const multihashing = __webpack_require__(22);

const protobuf = __webpack_require__(24);

const bs58 = __webpack_require__(39);

const errcode = __webpack_require__(35);

const crypto = __webpack_require__(439);

const pbm = protobuf(__webpack_require__(124));

class Ed25519PublicKey {
  constructor(key) {
    this._key = ensureKey(key, crypto.publicKeyLength);
  }

  async verify(data, sig) {
    // eslint-disable-line require-await
    return crypto.hashAndVerify(this._key, sig, data);
  }

  marshal() {
    return Buffer.from(this._key);
  }

  get bytes() {
    return pbm.PublicKey.encode({
      Type: pbm.KeyType.Ed25519,
      Data: this.marshal()
    });
  }

  equals(key) {
    return this.bytes.equals(key.bytes);
  }

  async hash() {
    // eslint-disable-line require-await
    return multihashing(this.bytes, 'sha2-256');
  }

}

class Ed25519PrivateKey {
  // key       - 64 byte Uint8Array or Buffer containing private key
  // publicKey - 32 byte Uint8Array or Buffer containing public key
  constructor(key, publicKey) {
    this._key = ensureKey(key, crypto.privateKeyLength);
    this._publicKey = ensureKey(publicKey, crypto.publicKeyLength);
  }

  async sign(message) {
    // eslint-disable-line require-await
    return crypto.hashAndSign(this._key, message);
  }

  get public() {
    return new Ed25519PublicKey(this._publicKey);
  }

  marshal() {
    return Buffer.concat([Buffer.from(this._key), Buffer.from(this._publicKey)]);
  }

  get bytes() {
    return pbm.PrivateKey.encode({
      Type: pbm.KeyType.Ed25519,
      Data: this.marshal()
    });
  }

  equals(key) {
    return this.bytes.equals(key.bytes);
  }

  async hash() {
    // eslint-disable-line require-await
    return multihashing(this.bytes, 'sha2-256');
  }
  /**
   * Gets the ID of the key.
   *
   * The key id is the base58 encoding of the SHA-256 multihash of its public key.
   * The public key is a protobuf encoding containing a type and the DER encoding
   * of the PKCS SubjectPublicKeyInfo.
   *
   * @returns {Promise<String>}
   */


  async id() {
    const hash = await this.public.hash();
    return bs58.encode(hash);
  }

}

function unmarshalEd25519PrivateKey(bytes) {
  bytes = ensureKey(bytes, crypto.privateKeyLength + crypto.publicKeyLength);
  const privateKeyBytes = bytes.slice(0, crypto.privateKeyLength);
  const publicKeyBytes = bytes.slice(crypto.privateKeyLength, bytes.length);
  return new Ed25519PrivateKey(privateKeyBytes, publicKeyBytes);
}

function unmarshalEd25519PublicKey(bytes) {
  bytes = ensureKey(bytes, crypto.publicKeyLength);
  return new Ed25519PublicKey(bytes);
}

async function generateKeyPair() {
  const {
    secretKey,
    publicKey
  } = await crypto.generateKey();
  return new Ed25519PrivateKey(secretKey, publicKey);
}

async function generateKeyPairFromSeed(seed) {
  const {
    secretKey,
    publicKey
  } = await crypto.generateKeyFromSeed(seed);
  return new Ed25519PrivateKey(secretKey, publicKey);
}

function ensureKey(key, length) {
  if (Buffer.isBuffer(key)) {
    key = new Uint8Array(key);
  }

  if (!(key instanceof Uint8Array) || key.length !== length) {
    throw errcode(new Error('Key must be a Uint8Array or Buffer of length ' + length), 'ERR_INVALID_KEY_TYPE');
  }

  return key;
}

module.exports = {
  Ed25519PublicKey,
  Ed25519PrivateKey,
  unmarshalEd25519PrivateKey,
  unmarshalEd25519PublicKey,
  generateKeyPair,
  generateKeyPairFromSeed
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 439 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const nacl = __webpack_require__(440);

exports.publicKeyLength = nacl.sign.publicKeyLength;
exports.privateKeyLength = nacl.sign.secretKeyLength;

exports.generateKey = async function () {
  // eslint-disable-line require-await
  return nacl.sign.keyPair();
}; // seed should be a 32 byte uint8array


exports.generateKeyFromSeed = async function (seed) {
  // eslint-disable-line require-await
  return nacl.sign.keyPair.fromSeed(seed);
};

exports.hashAndSign = async function (key, msg) {
  // eslint-disable-line require-await
  return Buffer.from(nacl.sign.detached(msg, key));
};

exports.hashAndVerify = async function (key, sig, msg) {
  // eslint-disable-line require-await
  return nacl.sign.detached.verify(msg, sig, key);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 440 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


(function (nacl) {
  'use strict'; // Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.
  // Public domain.
  //
  // Implementation derived from TweetNaCl version 20140427.
  // See for details: http://tweetnacl.cr.yp.to/

  var gf = function gf(init) {
    var i,
        r = new Float64Array(16);
    if (init) for (i = 0; i < init.length; i++) r[i] = init[i];
    return r;
  }; //  Pluggable, initialized in high-level API below.


  var randombytes = function randombytes()
  /* x, n */
  {
    throw new Error('no PRNG');
  };

  var _0 = new Uint8Array(16);

  var _9 = new Uint8Array(32);

  _9[0] = 9;

  var gf0 = gf(),
      gf1 = gf([1]),
      _121665 = gf([0xdb41, 1]),
      D = gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]),
      D2 = gf([0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0, 0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406]),
      X = gf([0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c, 0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169]),
      Y = gf([0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666]),
      I = gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);

  function ts64(x, i, h, l) {
    x[i] = h >> 24 & 0xff;
    x[i + 1] = h >> 16 & 0xff;
    x[i + 2] = h >> 8 & 0xff;
    x[i + 3] = h & 0xff;
    x[i + 4] = l >> 24 & 0xff;
    x[i + 5] = l >> 16 & 0xff;
    x[i + 6] = l >> 8 & 0xff;
    x[i + 7] = l & 0xff;
  }

  function vn(x, xi, y, yi, n) {
    var i,
        d = 0;

    for (i = 0; i < n; i++) d |= x[xi + i] ^ y[yi + i];

    return (1 & d - 1 >>> 8) - 1;
  }

  function crypto_verify_16(x, xi, y, yi) {
    return vn(x, xi, y, yi, 16);
  }

  function crypto_verify_32(x, xi, y, yi) {
    return vn(x, xi, y, yi, 32);
  }

  function core_salsa20(o, p, k, c) {
    var j0 = c[0] & 0xff | (c[1] & 0xff) << 8 | (c[2] & 0xff) << 16 | (c[3] & 0xff) << 24,
        j1 = k[0] & 0xff | (k[1] & 0xff) << 8 | (k[2] & 0xff) << 16 | (k[3] & 0xff) << 24,
        j2 = k[4] & 0xff | (k[5] & 0xff) << 8 | (k[6] & 0xff) << 16 | (k[7] & 0xff) << 24,
        j3 = k[8] & 0xff | (k[9] & 0xff) << 8 | (k[10] & 0xff) << 16 | (k[11] & 0xff) << 24,
        j4 = k[12] & 0xff | (k[13] & 0xff) << 8 | (k[14] & 0xff) << 16 | (k[15] & 0xff) << 24,
        j5 = c[4] & 0xff | (c[5] & 0xff) << 8 | (c[6] & 0xff) << 16 | (c[7] & 0xff) << 24,
        j6 = p[0] & 0xff | (p[1] & 0xff) << 8 | (p[2] & 0xff) << 16 | (p[3] & 0xff) << 24,
        j7 = p[4] & 0xff | (p[5] & 0xff) << 8 | (p[6] & 0xff) << 16 | (p[7] & 0xff) << 24,
        j8 = p[8] & 0xff | (p[9] & 0xff) << 8 | (p[10] & 0xff) << 16 | (p[11] & 0xff) << 24,
        j9 = p[12] & 0xff | (p[13] & 0xff) << 8 | (p[14] & 0xff) << 16 | (p[15] & 0xff) << 24,
        j10 = c[8] & 0xff | (c[9] & 0xff) << 8 | (c[10] & 0xff) << 16 | (c[11] & 0xff) << 24,
        j11 = k[16] & 0xff | (k[17] & 0xff) << 8 | (k[18] & 0xff) << 16 | (k[19] & 0xff) << 24,
        j12 = k[20] & 0xff | (k[21] & 0xff) << 8 | (k[22] & 0xff) << 16 | (k[23] & 0xff) << 24,
        j13 = k[24] & 0xff | (k[25] & 0xff) << 8 | (k[26] & 0xff) << 16 | (k[27] & 0xff) << 24,
        j14 = k[28] & 0xff | (k[29] & 0xff) << 8 | (k[30] & 0xff) << 16 | (k[31] & 0xff) << 24,
        j15 = c[12] & 0xff | (c[13] & 0xff) << 8 | (c[14] & 0xff) << 16 | (c[15] & 0xff) << 24;
    var x0 = j0,
        x1 = j1,
        x2 = j2,
        x3 = j3,
        x4 = j4,
        x5 = j5,
        x6 = j6,
        x7 = j7,
        x8 = j8,
        x9 = j9,
        x10 = j10,
        x11 = j11,
        x12 = j12,
        x13 = j13,
        x14 = j14,
        x15 = j15,
        u;

    for (var i = 0; i < 20; i += 2) {
      u = x0 + x12 | 0;
      x4 ^= u << 7 | u >>> 32 - 7;
      u = x4 + x0 | 0;
      x8 ^= u << 9 | u >>> 32 - 9;
      u = x8 + x4 | 0;
      x12 ^= u << 13 | u >>> 32 - 13;
      u = x12 + x8 | 0;
      x0 ^= u << 18 | u >>> 32 - 18;
      u = x5 + x1 | 0;
      x9 ^= u << 7 | u >>> 32 - 7;
      u = x9 + x5 | 0;
      x13 ^= u << 9 | u >>> 32 - 9;
      u = x13 + x9 | 0;
      x1 ^= u << 13 | u >>> 32 - 13;
      u = x1 + x13 | 0;
      x5 ^= u << 18 | u >>> 32 - 18;
      u = x10 + x6 | 0;
      x14 ^= u << 7 | u >>> 32 - 7;
      u = x14 + x10 | 0;
      x2 ^= u << 9 | u >>> 32 - 9;
      u = x2 + x14 | 0;
      x6 ^= u << 13 | u >>> 32 - 13;
      u = x6 + x2 | 0;
      x10 ^= u << 18 | u >>> 32 - 18;
      u = x15 + x11 | 0;
      x3 ^= u << 7 | u >>> 32 - 7;
      u = x3 + x15 | 0;
      x7 ^= u << 9 | u >>> 32 - 9;
      u = x7 + x3 | 0;
      x11 ^= u << 13 | u >>> 32 - 13;
      u = x11 + x7 | 0;
      x15 ^= u << 18 | u >>> 32 - 18;
      u = x0 + x3 | 0;
      x1 ^= u << 7 | u >>> 32 - 7;
      u = x1 + x0 | 0;
      x2 ^= u << 9 | u >>> 32 - 9;
      u = x2 + x1 | 0;
      x3 ^= u << 13 | u >>> 32 - 13;
      u = x3 + x2 | 0;
      x0 ^= u << 18 | u >>> 32 - 18;
      u = x5 + x4 | 0;
      x6 ^= u << 7 | u >>> 32 - 7;
      u = x6 + x5 | 0;
      x7 ^= u << 9 | u >>> 32 - 9;
      u = x7 + x6 | 0;
      x4 ^= u << 13 | u >>> 32 - 13;
      u = x4 + x7 | 0;
      x5 ^= u << 18 | u >>> 32 - 18;
      u = x10 + x9 | 0;
      x11 ^= u << 7 | u >>> 32 - 7;
      u = x11 + x10 | 0;
      x8 ^= u << 9 | u >>> 32 - 9;
      u = x8 + x11 | 0;
      x9 ^= u << 13 | u >>> 32 - 13;
      u = x9 + x8 | 0;
      x10 ^= u << 18 | u >>> 32 - 18;
      u = x15 + x14 | 0;
      x12 ^= u << 7 | u >>> 32 - 7;
      u = x12 + x15 | 0;
      x13 ^= u << 9 | u >>> 32 - 9;
      u = x13 + x12 | 0;
      x14 ^= u << 13 | u >>> 32 - 13;
      u = x14 + x13 | 0;
      x15 ^= u << 18 | u >>> 32 - 18;
    }

    x0 = x0 + j0 | 0;
    x1 = x1 + j1 | 0;
    x2 = x2 + j2 | 0;
    x3 = x3 + j3 | 0;
    x4 = x4 + j4 | 0;
    x5 = x5 + j5 | 0;
    x6 = x6 + j6 | 0;
    x7 = x7 + j7 | 0;
    x8 = x8 + j8 | 0;
    x9 = x9 + j9 | 0;
    x10 = x10 + j10 | 0;
    x11 = x11 + j11 | 0;
    x12 = x12 + j12 | 0;
    x13 = x13 + j13 | 0;
    x14 = x14 + j14 | 0;
    x15 = x15 + j15 | 0;
    o[0] = x0 >>> 0 & 0xff;
    o[1] = x0 >>> 8 & 0xff;
    o[2] = x0 >>> 16 & 0xff;
    o[3] = x0 >>> 24 & 0xff;
    o[4] = x1 >>> 0 & 0xff;
    o[5] = x1 >>> 8 & 0xff;
    o[6] = x1 >>> 16 & 0xff;
    o[7] = x1 >>> 24 & 0xff;
    o[8] = x2 >>> 0 & 0xff;
    o[9] = x2 >>> 8 & 0xff;
    o[10] = x2 >>> 16 & 0xff;
    o[11] = x2 >>> 24 & 0xff;
    o[12] = x3 >>> 0 & 0xff;
    o[13] = x3 >>> 8 & 0xff;
    o[14] = x3 >>> 16 & 0xff;
    o[15] = x3 >>> 24 & 0xff;
    o[16] = x4 >>> 0 & 0xff;
    o[17] = x4 >>> 8 & 0xff;
    o[18] = x4 >>> 16 & 0xff;
    o[19] = x4 >>> 24 & 0xff;
    o[20] = x5 >>> 0 & 0xff;
    o[21] = x5 >>> 8 & 0xff;
    o[22] = x5 >>> 16 & 0xff;
    o[23] = x5 >>> 24 & 0xff;
    o[24] = x6 >>> 0 & 0xff;
    o[25] = x6 >>> 8 & 0xff;
    o[26] = x6 >>> 16 & 0xff;
    o[27] = x6 >>> 24 & 0xff;
    o[28] = x7 >>> 0 & 0xff;
    o[29] = x7 >>> 8 & 0xff;
    o[30] = x7 >>> 16 & 0xff;
    o[31] = x7 >>> 24 & 0xff;
    o[32] = x8 >>> 0 & 0xff;
    o[33] = x8 >>> 8 & 0xff;
    o[34] = x8 >>> 16 & 0xff;
    o[35] = x8 >>> 24 & 0xff;
    o[36] = x9 >>> 0 & 0xff;
    o[37] = x9 >>> 8 & 0xff;
    o[38] = x9 >>> 16 & 0xff;
    o[39] = x9 >>> 24 & 0xff;
    o[40] = x10 >>> 0 & 0xff;
    o[41] = x10 >>> 8 & 0xff;
    o[42] = x10 >>> 16 & 0xff;
    o[43] = x10 >>> 24 & 0xff;
    o[44] = x11 >>> 0 & 0xff;
    o[45] = x11 >>> 8 & 0xff;
    o[46] = x11 >>> 16 & 0xff;
    o[47] = x11 >>> 24 & 0xff;
    o[48] = x12 >>> 0 & 0xff;
    o[49] = x12 >>> 8 & 0xff;
    o[50] = x12 >>> 16 & 0xff;
    o[51] = x12 >>> 24 & 0xff;
    o[52] = x13 >>> 0 & 0xff;
    o[53] = x13 >>> 8 & 0xff;
    o[54] = x13 >>> 16 & 0xff;
    o[55] = x13 >>> 24 & 0xff;
    o[56] = x14 >>> 0 & 0xff;
    o[57] = x14 >>> 8 & 0xff;
    o[58] = x14 >>> 16 & 0xff;
    o[59] = x14 >>> 24 & 0xff;
    o[60] = x15 >>> 0 & 0xff;
    o[61] = x15 >>> 8 & 0xff;
    o[62] = x15 >>> 16 & 0xff;
    o[63] = x15 >>> 24 & 0xff;
  }

  function core_hsalsa20(o, p, k, c) {
    var j0 = c[0] & 0xff | (c[1] & 0xff) << 8 | (c[2] & 0xff) << 16 | (c[3] & 0xff) << 24,
        j1 = k[0] & 0xff | (k[1] & 0xff) << 8 | (k[2] & 0xff) << 16 | (k[3] & 0xff) << 24,
        j2 = k[4] & 0xff | (k[5] & 0xff) << 8 | (k[6] & 0xff) << 16 | (k[7] & 0xff) << 24,
        j3 = k[8] & 0xff | (k[9] & 0xff) << 8 | (k[10] & 0xff) << 16 | (k[11] & 0xff) << 24,
        j4 = k[12] & 0xff | (k[13] & 0xff) << 8 | (k[14] & 0xff) << 16 | (k[15] & 0xff) << 24,
        j5 = c[4] & 0xff | (c[5] & 0xff) << 8 | (c[6] & 0xff) << 16 | (c[7] & 0xff) << 24,
        j6 = p[0] & 0xff | (p[1] & 0xff) << 8 | (p[2] & 0xff) << 16 | (p[3] & 0xff) << 24,
        j7 = p[4] & 0xff | (p[5] & 0xff) << 8 | (p[6] & 0xff) << 16 | (p[7] & 0xff) << 24,
        j8 = p[8] & 0xff | (p[9] & 0xff) << 8 | (p[10] & 0xff) << 16 | (p[11] & 0xff) << 24,
        j9 = p[12] & 0xff | (p[13] & 0xff) << 8 | (p[14] & 0xff) << 16 | (p[15] & 0xff) << 24,
        j10 = c[8] & 0xff | (c[9] & 0xff) << 8 | (c[10] & 0xff) << 16 | (c[11] & 0xff) << 24,
        j11 = k[16] & 0xff | (k[17] & 0xff) << 8 | (k[18] & 0xff) << 16 | (k[19] & 0xff) << 24,
        j12 = k[20] & 0xff | (k[21] & 0xff) << 8 | (k[22] & 0xff) << 16 | (k[23] & 0xff) << 24,
        j13 = k[24] & 0xff | (k[25] & 0xff) << 8 | (k[26] & 0xff) << 16 | (k[27] & 0xff) << 24,
        j14 = k[28] & 0xff | (k[29] & 0xff) << 8 | (k[30] & 0xff) << 16 | (k[31] & 0xff) << 24,
        j15 = c[12] & 0xff | (c[13] & 0xff) << 8 | (c[14] & 0xff) << 16 | (c[15] & 0xff) << 24;
    var x0 = j0,
        x1 = j1,
        x2 = j2,
        x3 = j3,
        x4 = j4,
        x5 = j5,
        x6 = j6,
        x7 = j7,
        x8 = j8,
        x9 = j9,
        x10 = j10,
        x11 = j11,
        x12 = j12,
        x13 = j13,
        x14 = j14,
        x15 = j15,
        u;

    for (var i = 0; i < 20; i += 2) {
      u = x0 + x12 | 0;
      x4 ^= u << 7 | u >>> 32 - 7;
      u = x4 + x0 | 0;
      x8 ^= u << 9 | u >>> 32 - 9;
      u = x8 + x4 | 0;
      x12 ^= u << 13 | u >>> 32 - 13;
      u = x12 + x8 | 0;
      x0 ^= u << 18 | u >>> 32 - 18;
      u = x5 + x1 | 0;
      x9 ^= u << 7 | u >>> 32 - 7;
      u = x9 + x5 | 0;
      x13 ^= u << 9 | u >>> 32 - 9;
      u = x13 + x9 | 0;
      x1 ^= u << 13 | u >>> 32 - 13;
      u = x1 + x13 | 0;
      x5 ^= u << 18 | u >>> 32 - 18;
      u = x10 + x6 | 0;
      x14 ^= u << 7 | u >>> 32 - 7;
      u = x14 + x10 | 0;
      x2 ^= u << 9 | u >>> 32 - 9;
      u = x2 + x14 | 0;
      x6 ^= u << 13 | u >>> 32 - 13;
      u = x6 + x2 | 0;
      x10 ^= u << 18 | u >>> 32 - 18;
      u = x15 + x11 | 0;
      x3 ^= u << 7 | u >>> 32 - 7;
      u = x3 + x15 | 0;
      x7 ^= u << 9 | u >>> 32 - 9;
      u = x7 + x3 | 0;
      x11 ^= u << 13 | u >>> 32 - 13;
      u = x11 + x7 | 0;
      x15 ^= u << 18 | u >>> 32 - 18;
      u = x0 + x3 | 0;
      x1 ^= u << 7 | u >>> 32 - 7;
      u = x1 + x0 | 0;
      x2 ^= u << 9 | u >>> 32 - 9;
      u = x2 + x1 | 0;
      x3 ^= u << 13 | u >>> 32 - 13;
      u = x3 + x2 | 0;
      x0 ^= u << 18 | u >>> 32 - 18;
      u = x5 + x4 | 0;
      x6 ^= u << 7 | u >>> 32 - 7;
      u = x6 + x5 | 0;
      x7 ^= u << 9 | u >>> 32 - 9;
      u = x7 + x6 | 0;
      x4 ^= u << 13 | u >>> 32 - 13;
      u = x4 + x7 | 0;
      x5 ^= u << 18 | u >>> 32 - 18;
      u = x10 + x9 | 0;
      x11 ^= u << 7 | u >>> 32 - 7;
      u = x11 + x10 | 0;
      x8 ^= u << 9 | u >>> 32 - 9;
      u = x8 + x11 | 0;
      x9 ^= u << 13 | u >>> 32 - 13;
      u = x9 + x8 | 0;
      x10 ^= u << 18 | u >>> 32 - 18;
      u = x15 + x14 | 0;
      x12 ^= u << 7 | u >>> 32 - 7;
      u = x12 + x15 | 0;
      x13 ^= u << 9 | u >>> 32 - 9;
      u = x13 + x12 | 0;
      x14 ^= u << 13 | u >>> 32 - 13;
      u = x14 + x13 | 0;
      x15 ^= u << 18 | u >>> 32 - 18;
    }

    o[0] = x0 >>> 0 & 0xff;
    o[1] = x0 >>> 8 & 0xff;
    o[2] = x0 >>> 16 & 0xff;
    o[3] = x0 >>> 24 & 0xff;
    o[4] = x5 >>> 0 & 0xff;
    o[5] = x5 >>> 8 & 0xff;
    o[6] = x5 >>> 16 & 0xff;
    o[7] = x5 >>> 24 & 0xff;
    o[8] = x10 >>> 0 & 0xff;
    o[9] = x10 >>> 8 & 0xff;
    o[10] = x10 >>> 16 & 0xff;
    o[11] = x10 >>> 24 & 0xff;
    o[12] = x15 >>> 0 & 0xff;
    o[13] = x15 >>> 8 & 0xff;
    o[14] = x15 >>> 16 & 0xff;
    o[15] = x15 >>> 24 & 0xff;
    o[16] = x6 >>> 0 & 0xff;
    o[17] = x6 >>> 8 & 0xff;
    o[18] = x6 >>> 16 & 0xff;
    o[19] = x6 >>> 24 & 0xff;
    o[20] = x7 >>> 0 & 0xff;
    o[21] = x7 >>> 8 & 0xff;
    o[22] = x7 >>> 16 & 0xff;
    o[23] = x7 >>> 24 & 0xff;
    o[24] = x8 >>> 0 & 0xff;
    o[25] = x8 >>> 8 & 0xff;
    o[26] = x8 >>> 16 & 0xff;
    o[27] = x8 >>> 24 & 0xff;
    o[28] = x9 >>> 0 & 0xff;
    o[29] = x9 >>> 8 & 0xff;
    o[30] = x9 >>> 16 & 0xff;
    o[31] = x9 >>> 24 & 0xff;
  }

  function crypto_core_salsa20(out, inp, k, c) {
    core_salsa20(out, inp, k, c);
  }

  function crypto_core_hsalsa20(out, inp, k, c) {
    core_hsalsa20(out, inp, k, c);
  }

  var sigma = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]); // "expand 32-byte k"

  function crypto_stream_salsa20_xor(c, cpos, m, mpos, b, n, k) {
    var z = new Uint8Array(16),
        x = new Uint8Array(64);
    var u, i;

    for (i = 0; i < 16; i++) z[i] = 0;

    for (i = 0; i < 8; i++) z[i] = n[i];

    while (b >= 64) {
      crypto_core_salsa20(x, z, k, sigma);

      for (i = 0; i < 64; i++) c[cpos + i] = m[mpos + i] ^ x[i];

      u = 1;

      for (i = 8; i < 16; i++) {
        u = u + (z[i] & 0xff) | 0;
        z[i] = u & 0xff;
        u >>>= 8;
      }

      b -= 64;
      cpos += 64;
      mpos += 64;
    }

    if (b > 0) {
      crypto_core_salsa20(x, z, k, sigma);

      for (i = 0; i < b; i++) c[cpos + i] = m[mpos + i] ^ x[i];
    }

    return 0;
  }

  function crypto_stream_salsa20(c, cpos, b, n, k) {
    var z = new Uint8Array(16),
        x = new Uint8Array(64);
    var u, i;

    for (i = 0; i < 16; i++) z[i] = 0;

    for (i = 0; i < 8; i++) z[i] = n[i];

    while (b >= 64) {
      crypto_core_salsa20(x, z, k, sigma);

      for (i = 0; i < 64; i++) c[cpos + i] = x[i];

      u = 1;

      for (i = 8; i < 16; i++) {
        u = u + (z[i] & 0xff) | 0;
        z[i] = u & 0xff;
        u >>>= 8;
      }

      b -= 64;
      cpos += 64;
    }

    if (b > 0) {
      crypto_core_salsa20(x, z, k, sigma);

      for (i = 0; i < b; i++) c[cpos + i] = x[i];
    }

    return 0;
  }

  function crypto_stream(c, cpos, d, n, k) {
    var s = new Uint8Array(32);
    crypto_core_hsalsa20(s, n, k, sigma);
    var sn = new Uint8Array(8);

    for (var i = 0; i < 8; i++) sn[i] = n[i + 16];

    return crypto_stream_salsa20(c, cpos, d, sn, s);
  }

  function crypto_stream_xor(c, cpos, m, mpos, d, n, k) {
    var s = new Uint8Array(32);
    crypto_core_hsalsa20(s, n, k, sigma);
    var sn = new Uint8Array(8);

    for (var i = 0; i < 8; i++) sn[i] = n[i + 16];

    return crypto_stream_salsa20_xor(c, cpos, m, mpos, d, sn, s);
  }
  /*
  * Port of Andrew Moon's Poly1305-donna-16. Public domain.
  * https://github.com/floodyberry/poly1305-donna
  */


  var poly1305 = function poly1305(key) {
    this.buffer = new Uint8Array(16);
    this.r = new Uint16Array(10);
    this.h = new Uint16Array(10);
    this.pad = new Uint16Array(8);
    this.leftover = 0;
    this.fin = 0;
    var t0, t1, t2, t3, t4, t5, t6, t7;
    t0 = key[0] & 0xff | (key[1] & 0xff) << 8;
    this.r[0] = t0 & 0x1fff;
    t1 = key[2] & 0xff | (key[3] & 0xff) << 8;
    this.r[1] = (t0 >>> 13 | t1 << 3) & 0x1fff;
    t2 = key[4] & 0xff | (key[5] & 0xff) << 8;
    this.r[2] = (t1 >>> 10 | t2 << 6) & 0x1f03;
    t3 = key[6] & 0xff | (key[7] & 0xff) << 8;
    this.r[3] = (t2 >>> 7 | t3 << 9) & 0x1fff;
    t4 = key[8] & 0xff | (key[9] & 0xff) << 8;
    this.r[4] = (t3 >>> 4 | t4 << 12) & 0x00ff;
    this.r[5] = t4 >>> 1 & 0x1ffe;
    t5 = key[10] & 0xff | (key[11] & 0xff) << 8;
    this.r[6] = (t4 >>> 14 | t5 << 2) & 0x1fff;
    t6 = key[12] & 0xff | (key[13] & 0xff) << 8;
    this.r[7] = (t5 >>> 11 | t6 << 5) & 0x1f81;
    t7 = key[14] & 0xff | (key[15] & 0xff) << 8;
    this.r[8] = (t6 >>> 8 | t7 << 8) & 0x1fff;
    this.r[9] = t7 >>> 5 & 0x007f;
    this.pad[0] = key[16] & 0xff | (key[17] & 0xff) << 8;
    this.pad[1] = key[18] & 0xff | (key[19] & 0xff) << 8;
    this.pad[2] = key[20] & 0xff | (key[21] & 0xff) << 8;
    this.pad[3] = key[22] & 0xff | (key[23] & 0xff) << 8;
    this.pad[4] = key[24] & 0xff | (key[25] & 0xff) << 8;
    this.pad[5] = key[26] & 0xff | (key[27] & 0xff) << 8;
    this.pad[6] = key[28] & 0xff | (key[29] & 0xff) << 8;
    this.pad[7] = key[30] & 0xff | (key[31] & 0xff) << 8;
  };

  poly1305.prototype.blocks = function (m, mpos, bytes) {
    var hibit = this.fin ? 0 : 1 << 11;
    var t0, t1, t2, t3, t4, t5, t6, t7, c;
    var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;
    var h0 = this.h[0],
        h1 = this.h[1],
        h2 = this.h[2],
        h3 = this.h[3],
        h4 = this.h[4],
        h5 = this.h[5],
        h6 = this.h[6],
        h7 = this.h[7],
        h8 = this.h[8],
        h9 = this.h[9];
    var r0 = this.r[0],
        r1 = this.r[1],
        r2 = this.r[2],
        r3 = this.r[3],
        r4 = this.r[4],
        r5 = this.r[5],
        r6 = this.r[6],
        r7 = this.r[7],
        r8 = this.r[8],
        r9 = this.r[9];

    while (bytes >= 16) {
      t0 = m[mpos + 0] & 0xff | (m[mpos + 1] & 0xff) << 8;
      h0 += t0 & 0x1fff;
      t1 = m[mpos + 2] & 0xff | (m[mpos + 3] & 0xff) << 8;
      h1 += (t0 >>> 13 | t1 << 3) & 0x1fff;
      t2 = m[mpos + 4] & 0xff | (m[mpos + 5] & 0xff) << 8;
      h2 += (t1 >>> 10 | t2 << 6) & 0x1fff;
      t3 = m[mpos + 6] & 0xff | (m[mpos + 7] & 0xff) << 8;
      h3 += (t2 >>> 7 | t3 << 9) & 0x1fff;
      t4 = m[mpos + 8] & 0xff | (m[mpos + 9] & 0xff) << 8;
      h4 += (t3 >>> 4 | t4 << 12) & 0x1fff;
      h5 += t4 >>> 1 & 0x1fff;
      t5 = m[mpos + 10] & 0xff | (m[mpos + 11] & 0xff) << 8;
      h6 += (t4 >>> 14 | t5 << 2) & 0x1fff;
      t6 = m[mpos + 12] & 0xff | (m[mpos + 13] & 0xff) << 8;
      h7 += (t5 >>> 11 | t6 << 5) & 0x1fff;
      t7 = m[mpos + 14] & 0xff | (m[mpos + 15] & 0xff) << 8;
      h8 += (t6 >>> 8 | t7 << 8) & 0x1fff;
      h9 += t7 >>> 5 | hibit;
      c = 0;
      d0 = c;
      d0 += h0 * r0;
      d0 += h1 * (5 * r9);
      d0 += h2 * (5 * r8);
      d0 += h3 * (5 * r7);
      d0 += h4 * (5 * r6);
      c = d0 >>> 13;
      d0 &= 0x1fff;
      d0 += h5 * (5 * r5);
      d0 += h6 * (5 * r4);
      d0 += h7 * (5 * r3);
      d0 += h8 * (5 * r2);
      d0 += h9 * (5 * r1);
      c += d0 >>> 13;
      d0 &= 0x1fff;
      d1 = c;
      d1 += h0 * r1;
      d1 += h1 * r0;
      d1 += h2 * (5 * r9);
      d1 += h3 * (5 * r8);
      d1 += h4 * (5 * r7);
      c = d1 >>> 13;
      d1 &= 0x1fff;
      d1 += h5 * (5 * r6);
      d1 += h6 * (5 * r5);
      d1 += h7 * (5 * r4);
      d1 += h8 * (5 * r3);
      d1 += h9 * (5 * r2);
      c += d1 >>> 13;
      d1 &= 0x1fff;
      d2 = c;
      d2 += h0 * r2;
      d2 += h1 * r1;
      d2 += h2 * r0;
      d2 += h3 * (5 * r9);
      d2 += h4 * (5 * r8);
      c = d2 >>> 13;
      d2 &= 0x1fff;
      d2 += h5 * (5 * r7);
      d2 += h6 * (5 * r6);
      d2 += h7 * (5 * r5);
      d2 += h8 * (5 * r4);
      d2 += h9 * (5 * r3);
      c += d2 >>> 13;
      d2 &= 0x1fff;
      d3 = c;
      d3 += h0 * r3;
      d3 += h1 * r2;
      d3 += h2 * r1;
      d3 += h3 * r0;
      d3 += h4 * (5 * r9);
      c = d3 >>> 13;
      d3 &= 0x1fff;
      d3 += h5 * (5 * r8);
      d3 += h6 * (5 * r7);
      d3 += h7 * (5 * r6);
      d3 += h8 * (5 * r5);
      d3 += h9 * (5 * r4);
      c += d3 >>> 13;
      d3 &= 0x1fff;
      d4 = c;
      d4 += h0 * r4;
      d4 += h1 * r3;
      d4 += h2 * r2;
      d4 += h3 * r1;
      d4 += h4 * r0;
      c = d4 >>> 13;
      d4 &= 0x1fff;
      d4 += h5 * (5 * r9);
      d4 += h6 * (5 * r8);
      d4 += h7 * (5 * r7);
      d4 += h8 * (5 * r6);
      d4 += h9 * (5 * r5);
      c += d4 >>> 13;
      d4 &= 0x1fff;
      d5 = c;
      d5 += h0 * r5;
      d5 += h1 * r4;
      d5 += h2 * r3;
      d5 += h3 * r2;
      d5 += h4 * r1;
      c = d5 >>> 13;
      d5 &= 0x1fff;
      d5 += h5 * r0;
      d5 += h6 * (5 * r9);
      d5 += h7 * (5 * r8);
      d5 += h8 * (5 * r7);
      d5 += h9 * (5 * r6);
      c += d5 >>> 13;
      d5 &= 0x1fff;
      d6 = c;
      d6 += h0 * r6;
      d6 += h1 * r5;
      d6 += h2 * r4;
      d6 += h3 * r3;
      d6 += h4 * r2;
      c = d6 >>> 13;
      d6 &= 0x1fff;
      d6 += h5 * r1;
      d6 += h6 * r0;
      d6 += h7 * (5 * r9);
      d6 += h8 * (5 * r8);
      d6 += h9 * (5 * r7);
      c += d6 >>> 13;
      d6 &= 0x1fff;
      d7 = c;
      d7 += h0 * r7;
      d7 += h1 * r6;
      d7 += h2 * r5;
      d7 += h3 * r4;
      d7 += h4 * r3;
      c = d7 >>> 13;
      d7 &= 0x1fff;
      d7 += h5 * r2;
      d7 += h6 * r1;
      d7 += h7 * r0;
      d7 += h8 * (5 * r9);
      d7 += h9 * (5 * r8);
      c += d7 >>> 13;
      d7 &= 0x1fff;
      d8 = c;
      d8 += h0 * r8;
      d8 += h1 * r7;
      d8 += h2 * r6;
      d8 += h3 * r5;
      d8 += h4 * r4;
      c = d8 >>> 13;
      d8 &= 0x1fff;
      d8 += h5 * r3;
      d8 += h6 * r2;
      d8 += h7 * r1;
      d8 += h8 * r0;
      d8 += h9 * (5 * r9);
      c += d8 >>> 13;
      d8 &= 0x1fff;
      d9 = c;
      d9 += h0 * r9;
      d9 += h1 * r8;
      d9 += h2 * r7;
      d9 += h3 * r6;
      d9 += h4 * r5;
      c = d9 >>> 13;
      d9 &= 0x1fff;
      d9 += h5 * r4;
      d9 += h6 * r3;
      d9 += h7 * r2;
      d9 += h8 * r1;
      d9 += h9 * r0;
      c += d9 >>> 13;
      d9 &= 0x1fff;
      c = (c << 2) + c | 0;
      c = c + d0 | 0;
      d0 = c & 0x1fff;
      c = c >>> 13;
      d1 += c;
      h0 = d0;
      h1 = d1;
      h2 = d2;
      h3 = d3;
      h4 = d4;
      h5 = d5;
      h6 = d6;
      h7 = d7;
      h8 = d8;
      h9 = d9;
      mpos += 16;
      bytes -= 16;
    }

    this.h[0] = h0;
    this.h[1] = h1;
    this.h[2] = h2;
    this.h[3] = h3;
    this.h[4] = h4;
    this.h[5] = h5;
    this.h[6] = h6;
    this.h[7] = h7;
    this.h[8] = h8;
    this.h[9] = h9;
  };

  poly1305.prototype.finish = function (mac, macpos) {
    var g = new Uint16Array(10);
    var c, mask, f, i;

    if (this.leftover) {
      i = this.leftover;
      this.buffer[i++] = 1;

      for (; i < 16; i++) this.buffer[i] = 0;

      this.fin = 1;
      this.blocks(this.buffer, 0, 16);
    }

    c = this.h[1] >>> 13;
    this.h[1] &= 0x1fff;

    for (i = 2; i < 10; i++) {
      this.h[i] += c;
      c = this.h[i] >>> 13;
      this.h[i] &= 0x1fff;
    }

    this.h[0] += c * 5;
    c = this.h[0] >>> 13;
    this.h[0] &= 0x1fff;
    this.h[1] += c;
    c = this.h[1] >>> 13;
    this.h[1] &= 0x1fff;
    this.h[2] += c;
    g[0] = this.h[0] + 5;
    c = g[0] >>> 13;
    g[0] &= 0x1fff;

    for (i = 1; i < 10; i++) {
      g[i] = this.h[i] + c;
      c = g[i] >>> 13;
      g[i] &= 0x1fff;
    }

    g[9] -= 1 << 13;
    mask = (c ^ 1) - 1;

    for (i = 0; i < 10; i++) g[i] &= mask;

    mask = ~mask;

    for (i = 0; i < 10; i++) this.h[i] = this.h[i] & mask | g[i];

    this.h[0] = (this.h[0] | this.h[1] << 13) & 0xffff;
    this.h[1] = (this.h[1] >>> 3 | this.h[2] << 10) & 0xffff;
    this.h[2] = (this.h[2] >>> 6 | this.h[3] << 7) & 0xffff;
    this.h[3] = (this.h[3] >>> 9 | this.h[4] << 4) & 0xffff;
    this.h[4] = (this.h[4] >>> 12 | this.h[5] << 1 | this.h[6] << 14) & 0xffff;
    this.h[5] = (this.h[6] >>> 2 | this.h[7] << 11) & 0xffff;
    this.h[6] = (this.h[7] >>> 5 | this.h[8] << 8) & 0xffff;
    this.h[7] = (this.h[8] >>> 8 | this.h[9] << 5) & 0xffff;
    f = this.h[0] + this.pad[0];
    this.h[0] = f & 0xffff;

    for (i = 1; i < 8; i++) {
      f = (this.h[i] + this.pad[i] | 0) + (f >>> 16) | 0;
      this.h[i] = f & 0xffff;
    }

    mac[macpos + 0] = this.h[0] >>> 0 & 0xff;
    mac[macpos + 1] = this.h[0] >>> 8 & 0xff;
    mac[macpos + 2] = this.h[1] >>> 0 & 0xff;
    mac[macpos + 3] = this.h[1] >>> 8 & 0xff;
    mac[macpos + 4] = this.h[2] >>> 0 & 0xff;
    mac[macpos + 5] = this.h[2] >>> 8 & 0xff;
    mac[macpos + 6] = this.h[3] >>> 0 & 0xff;
    mac[macpos + 7] = this.h[3] >>> 8 & 0xff;
    mac[macpos + 8] = this.h[4] >>> 0 & 0xff;
    mac[macpos + 9] = this.h[4] >>> 8 & 0xff;
    mac[macpos + 10] = this.h[5] >>> 0 & 0xff;
    mac[macpos + 11] = this.h[5] >>> 8 & 0xff;
    mac[macpos + 12] = this.h[6] >>> 0 & 0xff;
    mac[macpos + 13] = this.h[6] >>> 8 & 0xff;
    mac[macpos + 14] = this.h[7] >>> 0 & 0xff;
    mac[macpos + 15] = this.h[7] >>> 8 & 0xff;
  };

  poly1305.prototype.update = function (m, mpos, bytes) {
    var i, want;

    if (this.leftover) {
      want = 16 - this.leftover;
      if (want > bytes) want = bytes;

      for (i = 0; i < want; i++) this.buffer[this.leftover + i] = m[mpos + i];

      bytes -= want;
      mpos += want;
      this.leftover += want;
      if (this.leftover < 16) return;
      this.blocks(this.buffer, 0, 16);
      this.leftover = 0;
    }

    if (bytes >= 16) {
      want = bytes - bytes % 16;
      this.blocks(m, mpos, want);
      mpos += want;
      bytes -= want;
    }

    if (bytes) {
      for (i = 0; i < bytes; i++) this.buffer[this.leftover + i] = m[mpos + i];

      this.leftover += bytes;
    }
  };

  function crypto_onetimeauth(out, outpos, m, mpos, n, k) {
    var s = new poly1305(k);
    s.update(m, mpos, n);
    s.finish(out, outpos);
    return 0;
  }

  function crypto_onetimeauth_verify(h, hpos, m, mpos, n, k) {
    var x = new Uint8Array(16);
    crypto_onetimeauth(x, 0, m, mpos, n, k);
    return crypto_verify_16(h, hpos, x, 0);
  }

  function crypto_secretbox(c, m, d, n, k) {
    var i;
    if (d < 32) return -1;
    crypto_stream_xor(c, 0, m, 0, d, n, k);
    crypto_onetimeauth(c, 16, c, 32, d - 32, c);

    for (i = 0; i < 16; i++) c[i] = 0;

    return 0;
  }

  function crypto_secretbox_open(m, c, d, n, k) {
    var i;
    var x = new Uint8Array(32);
    if (d < 32) return -1;
    crypto_stream(x, 0, 32, n, k);
    if (crypto_onetimeauth_verify(c, 16, c, 32, d - 32, x) !== 0) return -1;
    crypto_stream_xor(m, 0, c, 0, d, n, k);

    for (i = 0; i < 32; i++) m[i] = 0;

    return 0;
  }

  function set25519(r, a) {
    var i;

    for (i = 0; i < 16; i++) r[i] = a[i] | 0;
  }

  function car25519(o) {
    var i,
        v,
        c = 1;

    for (i = 0; i < 16; i++) {
      v = o[i] + c + 65535;
      c = Math.floor(v / 65536);
      o[i] = v - c * 65536;
    }

    o[0] += c - 1 + 37 * (c - 1);
  }

  function sel25519(p, q, b) {
    var t,
        c = ~(b - 1);

    for (var i = 0; i < 16; i++) {
      t = c & (p[i] ^ q[i]);
      p[i] ^= t;
      q[i] ^= t;
    }
  }

  function pack25519(o, n) {
    var i, j, b;
    var m = gf(),
        t = gf();

    for (i = 0; i < 16; i++) t[i] = n[i];

    car25519(t);
    car25519(t);
    car25519(t);

    for (j = 0; j < 2; j++) {
      m[0] = t[0] - 0xffed;

      for (i = 1; i < 15; i++) {
        m[i] = t[i] - 0xffff - (m[i - 1] >> 16 & 1);
        m[i - 1] &= 0xffff;
      }

      m[15] = t[15] - 0x7fff - (m[14] >> 16 & 1);
      b = m[15] >> 16 & 1;
      m[14] &= 0xffff;
      sel25519(t, m, 1 - b);
    }

    for (i = 0; i < 16; i++) {
      o[2 * i] = t[i] & 0xff;
      o[2 * i + 1] = t[i] >> 8;
    }
  }

  function neq25519(a, b) {
    var c = new Uint8Array(32),
        d = new Uint8Array(32);
    pack25519(c, a);
    pack25519(d, b);
    return crypto_verify_32(c, 0, d, 0);
  }

  function par25519(a) {
    var d = new Uint8Array(32);
    pack25519(d, a);
    return d[0] & 1;
  }

  function unpack25519(o, n) {
    var i;

    for (i = 0; i < 16; i++) o[i] = n[2 * i] + (n[2 * i + 1] << 8);

    o[15] &= 0x7fff;
  }

  function A(o, a, b) {
    for (var i = 0; i < 16; i++) o[i] = a[i] + b[i];
  }

  function Z(o, a, b) {
    for (var i = 0; i < 16; i++) o[i] = a[i] - b[i];
  }

  function M(o, a, b) {
    var v,
        c,
        t0 = 0,
        t1 = 0,
        t2 = 0,
        t3 = 0,
        t4 = 0,
        t5 = 0,
        t6 = 0,
        t7 = 0,
        t8 = 0,
        t9 = 0,
        t10 = 0,
        t11 = 0,
        t12 = 0,
        t13 = 0,
        t14 = 0,
        t15 = 0,
        t16 = 0,
        t17 = 0,
        t18 = 0,
        t19 = 0,
        t20 = 0,
        t21 = 0,
        t22 = 0,
        t23 = 0,
        t24 = 0,
        t25 = 0,
        t26 = 0,
        t27 = 0,
        t28 = 0,
        t29 = 0,
        t30 = 0,
        b0 = b[0],
        b1 = b[1],
        b2 = b[2],
        b3 = b[3],
        b4 = b[4],
        b5 = b[5],
        b6 = b[6],
        b7 = b[7],
        b8 = b[8],
        b9 = b[9],
        b10 = b[10],
        b11 = b[11],
        b12 = b[12],
        b13 = b[13],
        b14 = b[14],
        b15 = b[15];
    v = a[0];
    t0 += v * b0;
    t1 += v * b1;
    t2 += v * b2;
    t3 += v * b3;
    t4 += v * b4;
    t5 += v * b5;
    t6 += v * b6;
    t7 += v * b7;
    t8 += v * b8;
    t9 += v * b9;
    t10 += v * b10;
    t11 += v * b11;
    t12 += v * b12;
    t13 += v * b13;
    t14 += v * b14;
    t15 += v * b15;
    v = a[1];
    t1 += v * b0;
    t2 += v * b1;
    t3 += v * b2;
    t4 += v * b3;
    t5 += v * b4;
    t6 += v * b5;
    t7 += v * b6;
    t8 += v * b7;
    t9 += v * b8;
    t10 += v * b9;
    t11 += v * b10;
    t12 += v * b11;
    t13 += v * b12;
    t14 += v * b13;
    t15 += v * b14;
    t16 += v * b15;
    v = a[2];
    t2 += v * b0;
    t3 += v * b1;
    t4 += v * b2;
    t5 += v * b3;
    t6 += v * b4;
    t7 += v * b5;
    t8 += v * b6;
    t9 += v * b7;
    t10 += v * b8;
    t11 += v * b9;
    t12 += v * b10;
    t13 += v * b11;
    t14 += v * b12;
    t15 += v * b13;
    t16 += v * b14;
    t17 += v * b15;
    v = a[3];
    t3 += v * b0;
    t4 += v * b1;
    t5 += v * b2;
    t6 += v * b3;
    t7 += v * b4;
    t8 += v * b5;
    t9 += v * b6;
    t10 += v * b7;
    t11 += v * b8;
    t12 += v * b9;
    t13 += v * b10;
    t14 += v * b11;
    t15 += v * b12;
    t16 += v * b13;
    t17 += v * b14;
    t18 += v * b15;
    v = a[4];
    t4 += v * b0;
    t5 += v * b1;
    t6 += v * b2;
    t7 += v * b3;
    t8 += v * b4;
    t9 += v * b5;
    t10 += v * b6;
    t11 += v * b7;
    t12 += v * b8;
    t13 += v * b9;
    t14 += v * b10;
    t15 += v * b11;
    t16 += v * b12;
    t17 += v * b13;
    t18 += v * b14;
    t19 += v * b15;
    v = a[5];
    t5 += v * b0;
    t6 += v * b1;
    t7 += v * b2;
    t8 += v * b3;
    t9 += v * b4;
    t10 += v * b5;
    t11 += v * b6;
    t12 += v * b7;
    t13 += v * b8;
    t14 += v * b9;
    t15 += v * b10;
    t16 += v * b11;
    t17 += v * b12;
    t18 += v * b13;
    t19 += v * b14;
    t20 += v * b15;
    v = a[6];
    t6 += v * b0;
    t7 += v * b1;
    t8 += v * b2;
    t9 += v * b3;
    t10 += v * b4;
    t11 += v * b5;
    t12 += v * b6;
    t13 += v * b7;
    t14 += v * b8;
    t15 += v * b9;
    t16 += v * b10;
    t17 += v * b11;
    t18 += v * b12;
    t19 += v * b13;
    t20 += v * b14;
    t21 += v * b15;
    v = a[7];
    t7 += v * b0;
    t8 += v * b1;
    t9 += v * b2;
    t10 += v * b3;
    t11 += v * b4;
    t12 += v * b5;
    t13 += v * b6;
    t14 += v * b7;
    t15 += v * b8;
    t16 += v * b9;
    t17 += v * b10;
    t18 += v * b11;
    t19 += v * b12;
    t20 += v * b13;
    t21 += v * b14;
    t22 += v * b15;
    v = a[8];
    t8 += v * b0;
    t9 += v * b1;
    t10 += v * b2;
    t11 += v * b3;
    t12 += v * b4;
    t13 += v * b5;
    t14 += v * b6;
    t15 += v * b7;
    t16 += v * b8;
    t17 += v * b9;
    t18 += v * b10;
    t19 += v * b11;
    t20 += v * b12;
    t21 += v * b13;
    t22 += v * b14;
    t23 += v * b15;
    v = a[9];
    t9 += v * b0;
    t10 += v * b1;
    t11 += v * b2;
    t12 += v * b3;
    t13 += v * b4;
    t14 += v * b5;
    t15 += v * b6;
    t16 += v * b7;
    t17 += v * b8;
    t18 += v * b9;
    t19 += v * b10;
    t20 += v * b11;
    t21 += v * b12;
    t22 += v * b13;
    t23 += v * b14;
    t24 += v * b15;
    v = a[10];
    t10 += v * b0;
    t11 += v * b1;
    t12 += v * b2;
    t13 += v * b3;
    t14 += v * b4;
    t15 += v * b5;
    t16 += v * b6;
    t17 += v * b7;
    t18 += v * b8;
    t19 += v * b9;
    t20 += v * b10;
    t21 += v * b11;
    t22 += v * b12;
    t23 += v * b13;
    t24 += v * b14;
    t25 += v * b15;
    v = a[11];
    t11 += v * b0;
    t12 += v * b1;
    t13 += v * b2;
    t14 += v * b3;
    t15 += v * b4;
    t16 += v * b5;
    t17 += v * b6;
    t18 += v * b7;
    t19 += v * b8;
    t20 += v * b9;
    t21 += v * b10;
    t22 += v * b11;
    t23 += v * b12;
    t24 += v * b13;
    t25 += v * b14;
    t26 += v * b15;
    v = a[12];
    t12 += v * b0;
    t13 += v * b1;
    t14 += v * b2;
    t15 += v * b3;
    t16 += v * b4;
    t17 += v * b5;
    t18 += v * b6;
    t19 += v * b7;
    t20 += v * b8;
    t21 += v * b9;
    t22 += v * b10;
    t23 += v * b11;
    t24 += v * b12;
    t25 += v * b13;
    t26 += v * b14;
    t27 += v * b15;
    v = a[13];
    t13 += v * b0;
    t14 += v * b1;
    t15 += v * b2;
    t16 += v * b3;
    t17 += v * b4;
    t18 += v * b5;
    t19 += v * b6;
    t20 += v * b7;
    t21 += v * b8;
    t22 += v * b9;
    t23 += v * b10;
    t24 += v * b11;
    t25 += v * b12;
    t26 += v * b13;
    t27 += v * b14;
    t28 += v * b15;
    v = a[14];
    t14 += v * b0;
    t15 += v * b1;
    t16 += v * b2;
    t17 += v * b3;
    t18 += v * b4;
    t19 += v * b5;
    t20 += v * b6;
    t21 += v * b7;
    t22 += v * b8;
    t23 += v * b9;
    t24 += v * b10;
    t25 += v * b11;
    t26 += v * b12;
    t27 += v * b13;
    t28 += v * b14;
    t29 += v * b15;
    v = a[15];
    t15 += v * b0;
    t16 += v * b1;
    t17 += v * b2;
    t18 += v * b3;
    t19 += v * b4;
    t20 += v * b5;
    t21 += v * b6;
    t22 += v * b7;
    t23 += v * b8;
    t24 += v * b9;
    t25 += v * b10;
    t26 += v * b11;
    t27 += v * b12;
    t28 += v * b13;
    t29 += v * b14;
    t30 += v * b15;
    t0 += 38 * t16;
    t1 += 38 * t17;
    t2 += 38 * t18;
    t3 += 38 * t19;
    t4 += 38 * t20;
    t5 += 38 * t21;
    t6 += 38 * t22;
    t7 += 38 * t23;
    t8 += 38 * t24;
    t9 += 38 * t25;
    t10 += 38 * t26;
    t11 += 38 * t27;
    t12 += 38 * t28;
    t13 += 38 * t29;
    t14 += 38 * t30; // t15 left as is
    // first car

    c = 1;
    v = t0 + c + 65535;
    c = Math.floor(v / 65536);
    t0 = v - c * 65536;
    v = t1 + c + 65535;
    c = Math.floor(v / 65536);
    t1 = v - c * 65536;
    v = t2 + c + 65535;
    c = Math.floor(v / 65536);
    t2 = v - c * 65536;
    v = t3 + c + 65535;
    c = Math.floor(v / 65536);
    t3 = v - c * 65536;
    v = t4 + c + 65535;
    c = Math.floor(v / 65536);
    t4 = v - c * 65536;
    v = t5 + c + 65535;
    c = Math.floor(v / 65536);
    t5 = v - c * 65536;
    v = t6 + c + 65535;
    c = Math.floor(v / 65536);
    t6 = v - c * 65536;
    v = t7 + c + 65535;
    c = Math.floor(v / 65536);
    t7 = v - c * 65536;
    v = t8 + c + 65535;
    c = Math.floor(v / 65536);
    t8 = v - c * 65536;
    v = t9 + c + 65535;
    c = Math.floor(v / 65536);
    t9 = v - c * 65536;
    v = t10 + c + 65535;
    c = Math.floor(v / 65536);
    t10 = v - c * 65536;
    v = t11 + c + 65535;
    c = Math.floor(v / 65536);
    t11 = v - c * 65536;
    v = t12 + c + 65535;
    c = Math.floor(v / 65536);
    t12 = v - c * 65536;
    v = t13 + c + 65535;
    c = Math.floor(v / 65536);
    t13 = v - c * 65536;
    v = t14 + c + 65535;
    c = Math.floor(v / 65536);
    t14 = v - c * 65536;
    v = t15 + c + 65535;
    c = Math.floor(v / 65536);
    t15 = v - c * 65536;
    t0 += c - 1 + 37 * (c - 1); // second car

    c = 1;
    v = t0 + c + 65535;
    c = Math.floor(v / 65536);
    t0 = v - c * 65536;
    v = t1 + c + 65535;
    c = Math.floor(v / 65536);
    t1 = v - c * 65536;
    v = t2 + c + 65535;
    c = Math.floor(v / 65536);
    t2 = v - c * 65536;
    v = t3 + c + 65535;
    c = Math.floor(v / 65536);
    t3 = v - c * 65536;
    v = t4 + c + 65535;
    c = Math.floor(v / 65536);
    t4 = v - c * 65536;
    v = t5 + c + 65535;
    c = Math.floor(v / 65536);
    t5 = v - c * 65536;
    v = t6 + c + 65535;
    c = Math.floor(v / 65536);
    t6 = v - c * 65536;
    v = t7 + c + 65535;
    c = Math.floor(v / 65536);
    t7 = v - c * 65536;
    v = t8 + c + 65535;
    c = Math.floor(v / 65536);
    t8 = v - c * 65536;
    v = t9 + c + 65535;
    c = Math.floor(v / 65536);
    t9 = v - c * 65536;
    v = t10 + c + 65535;
    c = Math.floor(v / 65536);
    t10 = v - c * 65536;
    v = t11 + c + 65535;
    c = Math.floor(v / 65536);
    t11 = v - c * 65536;
    v = t12 + c + 65535;
    c = Math.floor(v / 65536);
    t12 = v - c * 65536;
    v = t13 + c + 65535;
    c = Math.floor(v / 65536);
    t13 = v - c * 65536;
    v = t14 + c + 65535;
    c = Math.floor(v / 65536);
    t14 = v - c * 65536;
    v = t15 + c + 65535;
    c = Math.floor(v / 65536);
    t15 = v - c * 65536;
    t0 += c - 1 + 37 * (c - 1);
    o[0] = t0;
    o[1] = t1;
    o[2] = t2;
    o[3] = t3;
    o[4] = t4;
    o[5] = t5;
    o[6] = t6;
    o[7] = t7;
    o[8] = t8;
    o[9] = t9;
    o[10] = t10;
    o[11] = t11;
    o[12] = t12;
    o[13] = t13;
    o[14] = t14;
    o[15] = t15;
  }

  function S(o, a) {
    M(o, a, a);
  }

  function inv25519(o, i) {
    var c = gf();
    var a;

    for (a = 0; a < 16; a++) c[a] = i[a];

    for (a = 253; a >= 0; a--) {
      S(c, c);
      if (a !== 2 && a !== 4) M(c, c, i);
    }

    for (a = 0; a < 16; a++) o[a] = c[a];
  }

  function pow2523(o, i) {
    var c = gf();
    var a;

    for (a = 0; a < 16; a++) c[a] = i[a];

    for (a = 250; a >= 0; a--) {
      S(c, c);
      if (a !== 1) M(c, c, i);
    }

    for (a = 0; a < 16; a++) o[a] = c[a];
  }

  function crypto_scalarmult(q, n, p) {
    var z = new Uint8Array(32);
    var x = new Float64Array(80),
        r,
        i;
    var a = gf(),
        b = gf(),
        c = gf(),
        d = gf(),
        e = gf(),
        f = gf();

    for (i = 0; i < 31; i++) z[i] = n[i];

    z[31] = n[31] & 127 | 64;
    z[0] &= 248;
    unpack25519(x, p);

    for (i = 0; i < 16; i++) {
      b[i] = x[i];
      d[i] = a[i] = c[i] = 0;
    }

    a[0] = d[0] = 1;

    for (i = 254; i >= 0; --i) {
      r = z[i >>> 3] >>> (i & 7) & 1;
      sel25519(a, b, r);
      sel25519(c, d, r);
      A(e, a, c);
      Z(a, a, c);
      A(c, b, d);
      Z(b, b, d);
      S(d, e);
      S(f, a);
      M(a, c, a);
      M(c, b, e);
      A(e, a, c);
      Z(a, a, c);
      S(b, a);
      Z(c, d, f);
      M(a, c, _121665);
      A(a, a, d);
      M(c, c, a);
      M(a, d, f);
      M(d, b, x);
      S(b, e);
      sel25519(a, b, r);
      sel25519(c, d, r);
    }

    for (i = 0; i < 16; i++) {
      x[i + 16] = a[i];
      x[i + 32] = c[i];
      x[i + 48] = b[i];
      x[i + 64] = d[i];
    }

    var x32 = x.subarray(32);
    var x16 = x.subarray(16);
    inv25519(x32, x32);
    M(x16, x16, x32);
    pack25519(q, x16);
    return 0;
  }

  function crypto_scalarmult_base(q, n) {
    return crypto_scalarmult(q, n, _9);
  }

  function crypto_box_keypair(y, x) {
    randombytes(x, 32);
    return crypto_scalarmult_base(y, x);
  }

  function crypto_box_beforenm(k, y, x) {
    var s = new Uint8Array(32);
    crypto_scalarmult(s, x, y);
    return crypto_core_hsalsa20(k, _0, s, sigma);
  }

  var crypto_box_afternm = crypto_secretbox;
  var crypto_box_open_afternm = crypto_secretbox_open;

  function crypto_box(c, m, d, n, y, x) {
    var k = new Uint8Array(32);
    crypto_box_beforenm(k, y, x);
    return crypto_box_afternm(c, m, d, n, k);
  }

  function crypto_box_open(m, c, d, n, y, x) {
    var k = new Uint8Array(32);
    crypto_box_beforenm(k, y, x);
    return crypto_box_open_afternm(m, c, d, n, k);
  }

  var K = [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817];

  function crypto_hashblocks_hl(hh, hl, m, n) {
    var wh = new Int32Array(16),
        wl = new Int32Array(16),
        bh0,
        bh1,
        bh2,
        bh3,
        bh4,
        bh5,
        bh6,
        bh7,
        bl0,
        bl1,
        bl2,
        bl3,
        bl4,
        bl5,
        bl6,
        bl7,
        th,
        tl,
        i,
        j,
        h,
        l,
        a,
        b,
        c,
        d;
    var ah0 = hh[0],
        ah1 = hh[1],
        ah2 = hh[2],
        ah3 = hh[3],
        ah4 = hh[4],
        ah5 = hh[5],
        ah6 = hh[6],
        ah7 = hh[7],
        al0 = hl[0],
        al1 = hl[1],
        al2 = hl[2],
        al3 = hl[3],
        al4 = hl[4],
        al5 = hl[5],
        al6 = hl[6],
        al7 = hl[7];
    var pos = 0;

    while (n >= 128) {
      for (i = 0; i < 16; i++) {
        j = 8 * i + pos;
        wh[i] = m[j + 0] << 24 | m[j + 1] << 16 | m[j + 2] << 8 | m[j + 3];
        wl[i] = m[j + 4] << 24 | m[j + 5] << 16 | m[j + 6] << 8 | m[j + 7];
      }

      for (i = 0; i < 80; i++) {
        bh0 = ah0;
        bh1 = ah1;
        bh2 = ah2;
        bh3 = ah3;
        bh4 = ah4;
        bh5 = ah5;
        bh6 = ah6;
        bh7 = ah7;
        bl0 = al0;
        bl1 = al1;
        bl2 = al2;
        bl3 = al3;
        bl4 = al4;
        bl5 = al5;
        bl6 = al6;
        bl7 = al7; // add

        h = ah7;
        l = al7;
        a = l & 0xffff;
        b = l >>> 16;
        c = h & 0xffff;
        d = h >>> 16; // Sigma1

        h = (ah4 >>> 14 | al4 << 32 - 14) ^ (ah4 >>> 18 | al4 << 32 - 18) ^ (al4 >>> 41 - 32 | ah4 << 32 - (41 - 32));
        l = (al4 >>> 14 | ah4 << 32 - 14) ^ (al4 >>> 18 | ah4 << 32 - 18) ^ (ah4 >>> 41 - 32 | al4 << 32 - (41 - 32));
        a += l & 0xffff;
        b += l >>> 16;
        c += h & 0xffff;
        d += h >>> 16; // Ch

        h = ah4 & ah5 ^ ~ah4 & ah6;
        l = al4 & al5 ^ ~al4 & al6;
        a += l & 0xffff;
        b += l >>> 16;
        c += h & 0xffff;
        d += h >>> 16; // K

        h = K[i * 2];
        l = K[i * 2 + 1];
        a += l & 0xffff;
        b += l >>> 16;
        c += h & 0xffff;
        d += h >>> 16; // w

        h = wh[i % 16];
        l = wl[i % 16];
        a += l & 0xffff;
        b += l >>> 16;
        c += h & 0xffff;
        d += h >>> 16;
        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;
        th = c & 0xffff | d << 16;
        tl = a & 0xffff | b << 16; // add

        h = th;
        l = tl;
        a = l & 0xffff;
        b = l >>> 16;
        c = h & 0xffff;
        d = h >>> 16; // Sigma0

        h = (ah0 >>> 28 | al0 << 32 - 28) ^ (al0 >>> 34 - 32 | ah0 << 32 - (34 - 32)) ^ (al0 >>> 39 - 32 | ah0 << 32 - (39 - 32));
        l = (al0 >>> 28 | ah0 << 32 - 28) ^ (ah0 >>> 34 - 32 | al0 << 32 - (34 - 32)) ^ (ah0 >>> 39 - 32 | al0 << 32 - (39 - 32));
        a += l & 0xffff;
        b += l >>> 16;
        c += h & 0xffff;
        d += h >>> 16; // Maj

        h = ah0 & ah1 ^ ah0 & ah2 ^ ah1 & ah2;
        l = al0 & al1 ^ al0 & al2 ^ al1 & al2;
        a += l & 0xffff;
        b += l >>> 16;
        c += h & 0xffff;
        d += h >>> 16;
        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;
        bh7 = c & 0xffff | d << 16;
        bl7 = a & 0xffff | b << 16; // add

        h = bh3;
        l = bl3;
        a = l & 0xffff;
        b = l >>> 16;
        c = h & 0xffff;
        d = h >>> 16;
        h = th;
        l = tl;
        a += l & 0xffff;
        b += l >>> 16;
        c += h & 0xffff;
        d += h >>> 16;
        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;
        bh3 = c & 0xffff | d << 16;
        bl3 = a & 0xffff | b << 16;
        ah1 = bh0;
        ah2 = bh1;
        ah3 = bh2;
        ah4 = bh3;
        ah5 = bh4;
        ah6 = bh5;
        ah7 = bh6;
        ah0 = bh7;
        al1 = bl0;
        al2 = bl1;
        al3 = bl2;
        al4 = bl3;
        al5 = bl4;
        al6 = bl5;
        al7 = bl6;
        al0 = bl7;

        if (i % 16 === 15) {
          for (j = 0; j < 16; j++) {
            // add
            h = wh[j];
            l = wl[j];
            a = l & 0xffff;
            b = l >>> 16;
            c = h & 0xffff;
            d = h >>> 16;
            h = wh[(j + 9) % 16];
            l = wl[(j + 9) % 16];
            a += l & 0xffff;
            b += l >>> 16;
            c += h & 0xffff;
            d += h >>> 16; // sigma0

            th = wh[(j + 1) % 16];
            tl = wl[(j + 1) % 16];
            h = (th >>> 1 | tl << 32 - 1) ^ (th >>> 8 | tl << 32 - 8) ^ th >>> 7;
            l = (tl >>> 1 | th << 32 - 1) ^ (tl >>> 8 | th << 32 - 8) ^ (tl >>> 7 | th << 32 - 7);
            a += l & 0xffff;
            b += l >>> 16;
            c += h & 0xffff;
            d += h >>> 16; // sigma1

            th = wh[(j + 14) % 16];
            tl = wl[(j + 14) % 16];
            h = (th >>> 19 | tl << 32 - 19) ^ (tl >>> 61 - 32 | th << 32 - (61 - 32)) ^ th >>> 6;
            l = (tl >>> 19 | th << 32 - 19) ^ (th >>> 61 - 32 | tl << 32 - (61 - 32)) ^ (tl >>> 6 | th << 32 - 6);
            a += l & 0xffff;
            b += l >>> 16;
            c += h & 0xffff;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            wh[j] = c & 0xffff | d << 16;
            wl[j] = a & 0xffff | b << 16;
          }
        }
      } // add


      h = ah0;
      l = al0;
      a = l & 0xffff;
      b = l >>> 16;
      c = h & 0xffff;
      d = h >>> 16;
      h = hh[0];
      l = hl[0];
      a += l & 0xffff;
      b += l >>> 16;
      c += h & 0xffff;
      d += h >>> 16;
      b += a >>> 16;
      c += b >>> 16;
      d += c >>> 16;
      hh[0] = ah0 = c & 0xffff | d << 16;
      hl[0] = al0 = a & 0xffff | b << 16;
      h = ah1;
      l = al1;
      a = l & 0xffff;
      b = l >>> 16;
      c = h & 0xffff;
      d = h >>> 16;
      h = hh[1];
      l = hl[1];
      a += l & 0xffff;
      b += l >>> 16;
      c += h & 0xffff;
      d += h >>> 16;
      b += a >>> 16;
      c += b >>> 16;
      d += c >>> 16;
      hh[1] = ah1 = c & 0xffff | d << 16;
      hl[1] = al1 = a & 0xffff | b << 16;
      h = ah2;
      l = al2;
      a = l & 0xffff;
      b = l >>> 16;
      c = h & 0xffff;
      d = h >>> 16;
      h = hh[2];
      l = hl[2];
      a += l & 0xffff;
      b += l >>> 16;
      c += h & 0xffff;
      d += h >>> 16;
      b += a >>> 16;
      c += b >>> 16;
      d += c >>> 16;
      hh[2] = ah2 = c & 0xffff | d << 16;
      hl[2] = al2 = a & 0xffff | b << 16;
      h = ah3;
      l = al3;
      a = l & 0xffff;
      b = l >>> 16;
      c = h & 0xffff;
      d = h >>> 16;
      h = hh[3];
      l = hl[3];
      a += l & 0xffff;
      b += l >>> 16;
      c += h & 0xffff;
      d += h >>> 16;
      b += a >>> 16;
      c += b >>> 16;
      d += c >>> 16;
      hh[3] = ah3 = c & 0xffff | d << 16;
      hl[3] = al3 = a & 0xffff | b << 16;
      h = ah4;
      l = al4;
      a = l & 0xffff;
      b = l >>> 16;
      c = h & 0xffff;
      d = h >>> 16;
      h = hh[4];
      l = hl[4];
      a += l & 0xffff;
      b += l >>> 16;
      c += h & 0xffff;
      d += h >>> 16;
      b += a >>> 16;
      c += b >>> 16;
      d += c >>> 16;
      hh[4] = ah4 = c & 0xffff | d << 16;
      hl[4] = al4 = a & 0xffff | b << 16;
      h = ah5;
      l = al5;
      a = l & 0xffff;
      b = l >>> 16;
      c = h & 0xffff;
      d = h >>> 16;
      h = hh[5];
      l = hl[5];
      a += l & 0xffff;
      b += l >>> 16;
      c += h & 0xffff;
      d += h >>> 16;
      b += a >>> 16;
      c += b >>> 16;
      d += c >>> 16;
      hh[5] = ah5 = c & 0xffff | d << 16;
      hl[5] = al5 = a & 0xffff | b << 16;
      h = ah6;
      l = al6;
      a = l & 0xffff;
      b = l >>> 16;
      c = h & 0xffff;
      d = h >>> 16;
      h = hh[6];
      l = hl[6];
      a += l & 0xffff;
      b += l >>> 16;
      c += h & 0xffff;
      d += h >>> 16;
      b += a >>> 16;
      c += b >>> 16;
      d += c >>> 16;
      hh[6] = ah6 = c & 0xffff | d << 16;
      hl[6] = al6 = a & 0xffff | b << 16;
      h = ah7;
      l = al7;
      a = l & 0xffff;
      b = l >>> 16;
      c = h & 0xffff;
      d = h >>> 16;
      h = hh[7];
      l = hl[7];
      a += l & 0xffff;
      b += l >>> 16;
      c += h & 0xffff;
      d += h >>> 16;
      b += a >>> 16;
      c += b >>> 16;
      d += c >>> 16;
      hh[7] = ah7 = c & 0xffff | d << 16;
      hl[7] = al7 = a & 0xffff | b << 16;
      pos += 128;
      n -= 128;
    }

    return n;
  }

  function crypto_hash(out, m, n) {
    var hh = new Int32Array(8),
        hl = new Int32Array(8),
        x = new Uint8Array(256),
        i,
        b = n;
    hh[0] = 0x6a09e667;
    hh[1] = 0xbb67ae85;
    hh[2] = 0x3c6ef372;
    hh[3] = 0xa54ff53a;
    hh[4] = 0x510e527f;
    hh[5] = 0x9b05688c;
    hh[6] = 0x1f83d9ab;
    hh[7] = 0x5be0cd19;
    hl[0] = 0xf3bcc908;
    hl[1] = 0x84caa73b;
    hl[2] = 0xfe94f82b;
    hl[3] = 0x5f1d36f1;
    hl[4] = 0xade682d1;
    hl[5] = 0x2b3e6c1f;
    hl[6] = 0xfb41bd6b;
    hl[7] = 0x137e2179;
    crypto_hashblocks_hl(hh, hl, m, n);
    n %= 128;

    for (i = 0; i < n; i++) x[i] = m[b - n + i];

    x[n] = 128;
    n = 256 - 128 * (n < 112 ? 1 : 0);
    x[n - 9] = 0;
    ts64(x, n - 8, b / 0x20000000 | 0, b << 3);
    crypto_hashblocks_hl(hh, hl, x, n);

    for (i = 0; i < 8; i++) ts64(out, 8 * i, hh[i], hl[i]);

    return 0;
  }

  function add(p, q) {
    var a = gf(),
        b = gf(),
        c = gf(),
        d = gf(),
        e = gf(),
        f = gf(),
        g = gf(),
        h = gf(),
        t = gf();
    Z(a, p[1], p[0]);
    Z(t, q[1], q[0]);
    M(a, a, t);
    A(b, p[0], p[1]);
    A(t, q[0], q[1]);
    M(b, b, t);
    M(c, p[3], q[3]);
    M(c, c, D2);
    M(d, p[2], q[2]);
    A(d, d, d);
    Z(e, b, a);
    Z(f, d, c);
    A(g, d, c);
    A(h, b, a);
    M(p[0], e, f);
    M(p[1], h, g);
    M(p[2], g, f);
    M(p[3], e, h);
  }

  function cswap(p, q, b) {
    var i;

    for (i = 0; i < 4; i++) {
      sel25519(p[i], q[i], b);
    }
  }

  function pack(r, p) {
    var tx = gf(),
        ty = gf(),
        zi = gf();
    inv25519(zi, p[2]);
    M(tx, p[0], zi);
    M(ty, p[1], zi);
    pack25519(r, ty);
    r[31] ^= par25519(tx) << 7;
  }

  function scalarmult(p, q, s) {
    var b, i;
    set25519(p[0], gf0);
    set25519(p[1], gf1);
    set25519(p[2], gf1);
    set25519(p[3], gf0);

    for (i = 255; i >= 0; --i) {
      b = s[i / 8 | 0] >> (i & 7) & 1;
      cswap(p, q, b);
      add(q, p);
      add(p, p);
      cswap(p, q, b);
    }
  }

  function scalarbase(p, s) {
    var q = [gf(), gf(), gf(), gf()];
    set25519(q[0], X);
    set25519(q[1], Y);
    set25519(q[2], gf1);
    M(q[3], X, Y);
    scalarmult(p, q, s);
  }

  function crypto_sign_keypair(pk, sk, seeded) {
    var d = new Uint8Array(64);
    var p = [gf(), gf(), gf(), gf()];
    var i;
    if (!seeded) randombytes(sk, 32);
    crypto_hash(d, sk, 32);
    d[0] &= 248;
    d[31] &= 127;
    d[31] |= 64;
    scalarbase(p, d);
    pack(pk, p);

    for (i = 0; i < 32; i++) sk[i + 32] = pk[i];

    return 0;
  }

  var L = new Float64Array([0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10]);

  function modL(r, x) {
    var carry, i, j, k;

    for (i = 63; i >= 32; --i) {
      carry = 0;

      for (j = i - 32, k = i - 12; j < k; ++j) {
        x[j] += carry - 16 * x[i] * L[j - (i - 32)];
        carry = x[j] + 128 >> 8;
        x[j] -= carry * 256;
      }

      x[j] += carry;
      x[i] = 0;
    }

    carry = 0;

    for (j = 0; j < 32; j++) {
      x[j] += carry - (x[31] >> 4) * L[j];
      carry = x[j] >> 8;
      x[j] &= 255;
    }

    for (j = 0; j < 32; j++) x[j] -= carry * L[j];

    for (i = 0; i < 32; i++) {
      x[i + 1] += x[i] >> 8;
      r[i] = x[i] & 255;
    }
  }

  function reduce(r) {
    var x = new Float64Array(64),
        i;

    for (i = 0; i < 64; i++) x[i] = r[i];

    for (i = 0; i < 64; i++) r[i] = 0;

    modL(r, x);
  } // Note: difference from C - smlen returned, not passed as argument.


  function crypto_sign(sm, m, n, sk) {
    var d = new Uint8Array(64),
        h = new Uint8Array(64),
        r = new Uint8Array(64);
    var i,
        j,
        x = new Float64Array(64);
    var p = [gf(), gf(), gf(), gf()];
    crypto_hash(d, sk, 32);
    d[0] &= 248;
    d[31] &= 127;
    d[31] |= 64;
    var smlen = n + 64;

    for (i = 0; i < n; i++) sm[64 + i] = m[i];

    for (i = 0; i < 32; i++) sm[32 + i] = d[32 + i];

    crypto_hash(r, sm.subarray(32), n + 32);
    reduce(r);
    scalarbase(p, r);
    pack(sm, p);

    for (i = 32; i < 64; i++) sm[i] = sk[i];

    crypto_hash(h, sm, n + 64);
    reduce(h);

    for (i = 0; i < 64; i++) x[i] = 0;

    for (i = 0; i < 32; i++) x[i] = r[i];

    for (i = 0; i < 32; i++) {
      for (j = 0; j < 32; j++) {
        x[i + j] += h[i] * d[j];
      }
    }

    modL(sm.subarray(32), x);
    return smlen;
  }

  function unpackneg(r, p) {
    var t = gf(),
        chk = gf(),
        num = gf(),
        den = gf(),
        den2 = gf(),
        den4 = gf(),
        den6 = gf();
    set25519(r[2], gf1);
    unpack25519(r[1], p);
    S(num, r[1]);
    M(den, num, D);
    Z(num, num, r[2]);
    A(den, r[2], den);
    S(den2, den);
    S(den4, den2);
    M(den6, den4, den2);
    M(t, den6, num);
    M(t, t, den);
    pow2523(t, t);
    M(t, t, num);
    M(t, t, den);
    M(t, t, den);
    M(r[0], t, den);
    S(chk, r[0]);
    M(chk, chk, den);
    if (neq25519(chk, num)) M(r[0], r[0], I);
    S(chk, r[0]);
    M(chk, chk, den);
    if (neq25519(chk, num)) return -1;
    if (par25519(r[0]) === p[31] >> 7) Z(r[0], gf0, r[0]);
    M(r[3], r[0], r[1]);
    return 0;
  }

  function crypto_sign_open(m, sm, n, pk) {
    var i;
    var t = new Uint8Array(32),
        h = new Uint8Array(64);
    var p = [gf(), gf(), gf(), gf()],
        q = [gf(), gf(), gf(), gf()];
    if (n < 64) return -1;
    if (unpackneg(q, pk)) return -1;

    for (i = 0; i < n; i++) m[i] = sm[i];

    for (i = 0; i < 32; i++) m[i + 32] = pk[i];

    crypto_hash(h, m, n);
    reduce(h);
    scalarmult(p, q, h);
    scalarbase(q, sm.subarray(32));
    add(p, q);
    pack(t, p);
    n -= 64;

    if (crypto_verify_32(sm, 0, t, 0)) {
      for (i = 0; i < n; i++) m[i] = 0;

      return -1;
    }

    for (i = 0; i < n; i++) m[i] = sm[i + 64];

    return n;
  }

  var crypto_secretbox_KEYBYTES = 32,
      crypto_secretbox_NONCEBYTES = 24,
      crypto_secretbox_ZEROBYTES = 32,
      crypto_secretbox_BOXZEROBYTES = 16,
      crypto_scalarmult_BYTES = 32,
      crypto_scalarmult_SCALARBYTES = 32,
      crypto_box_PUBLICKEYBYTES = 32,
      crypto_box_SECRETKEYBYTES = 32,
      crypto_box_BEFORENMBYTES = 32,
      crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES,
      crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES,
      crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES,
      crypto_sign_BYTES = 64,
      crypto_sign_PUBLICKEYBYTES = 32,
      crypto_sign_SECRETKEYBYTES = 64,
      crypto_sign_SEEDBYTES = 32,
      crypto_hash_BYTES = 64;
  nacl.lowlevel = {
    crypto_core_hsalsa20: crypto_core_hsalsa20,
    crypto_stream_xor: crypto_stream_xor,
    crypto_stream: crypto_stream,
    crypto_stream_salsa20_xor: crypto_stream_salsa20_xor,
    crypto_stream_salsa20: crypto_stream_salsa20,
    crypto_onetimeauth: crypto_onetimeauth,
    crypto_onetimeauth_verify: crypto_onetimeauth_verify,
    crypto_verify_16: crypto_verify_16,
    crypto_verify_32: crypto_verify_32,
    crypto_secretbox: crypto_secretbox,
    crypto_secretbox_open: crypto_secretbox_open,
    crypto_scalarmult: crypto_scalarmult,
    crypto_scalarmult_base: crypto_scalarmult_base,
    crypto_box_beforenm: crypto_box_beforenm,
    crypto_box_afternm: crypto_box_afternm,
    crypto_box: crypto_box,
    crypto_box_open: crypto_box_open,
    crypto_box_keypair: crypto_box_keypair,
    crypto_hash: crypto_hash,
    crypto_sign: crypto_sign,
    crypto_sign_keypair: crypto_sign_keypair,
    crypto_sign_open: crypto_sign_open,
    crypto_secretbox_KEYBYTES: crypto_secretbox_KEYBYTES,
    crypto_secretbox_NONCEBYTES: crypto_secretbox_NONCEBYTES,
    crypto_secretbox_ZEROBYTES: crypto_secretbox_ZEROBYTES,
    crypto_secretbox_BOXZEROBYTES: crypto_secretbox_BOXZEROBYTES,
    crypto_scalarmult_BYTES: crypto_scalarmult_BYTES,
    crypto_scalarmult_SCALARBYTES: crypto_scalarmult_SCALARBYTES,
    crypto_box_PUBLICKEYBYTES: crypto_box_PUBLICKEYBYTES,
    crypto_box_SECRETKEYBYTES: crypto_box_SECRETKEYBYTES,
    crypto_box_BEFORENMBYTES: crypto_box_BEFORENMBYTES,
    crypto_box_NONCEBYTES: crypto_box_NONCEBYTES,
    crypto_box_ZEROBYTES: crypto_box_ZEROBYTES,
    crypto_box_BOXZEROBYTES: crypto_box_BOXZEROBYTES,
    crypto_sign_BYTES: crypto_sign_BYTES,
    crypto_sign_PUBLICKEYBYTES: crypto_sign_PUBLICKEYBYTES,
    crypto_sign_SECRETKEYBYTES: crypto_sign_SECRETKEYBYTES,
    crypto_sign_SEEDBYTES: crypto_sign_SEEDBYTES,
    crypto_hash_BYTES: crypto_hash_BYTES,
    gf: gf,
    D: D,
    L: L,
    pack25519: pack25519,
    unpack25519: unpack25519,
    M: M,
    A: A,
    S: S,
    Z: Z,
    pow2523: pow2523,
    add: add,
    set25519: set25519,
    modL: modL,
    scalarmult: scalarmult,
    scalarbase: scalarbase
  };
  /* High-level API */

  function checkLengths(k, n) {
    if (k.length !== crypto_secretbox_KEYBYTES) throw new Error('bad key size');
    if (n.length !== crypto_secretbox_NONCEBYTES) throw new Error('bad nonce size');
  }

  function checkBoxLengths(pk, sk) {
    if (pk.length !== crypto_box_PUBLICKEYBYTES) throw new Error('bad public key size');
    if (sk.length !== crypto_box_SECRETKEYBYTES) throw new Error('bad secret key size');
  }

  function checkArrayTypes() {
    for (var i = 0; i < arguments.length; i++) {
      if (!(arguments[i] instanceof Uint8Array)) throw new TypeError('unexpected type, use Uint8Array');
    }
  }

  function cleanup(arr) {
    for (var i = 0; i < arr.length; i++) arr[i] = 0;
  }

  nacl.randomBytes = function (n) {
    var b = new Uint8Array(n);
    randombytes(b, n);
    return b;
  };

  nacl.secretbox = function (msg, nonce, key) {
    checkArrayTypes(msg, nonce, key);
    checkLengths(key, nonce);
    var m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);
    var c = new Uint8Array(m.length);

    for (var i = 0; i < msg.length; i++) m[i + crypto_secretbox_ZEROBYTES] = msg[i];

    crypto_secretbox(c, m, m.length, nonce, key);
    return c.subarray(crypto_secretbox_BOXZEROBYTES);
  };

  nacl.secretbox.open = function (box, nonce, key) {
    checkArrayTypes(box, nonce, key);
    checkLengths(key, nonce);
    var c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);
    var m = new Uint8Array(c.length);

    for (var i = 0; i < box.length; i++) c[i + crypto_secretbox_BOXZEROBYTES] = box[i];

    if (c.length < 32) return null;
    if (crypto_secretbox_open(m, c, c.length, nonce, key) !== 0) return null;
    return m.subarray(crypto_secretbox_ZEROBYTES);
  };

  nacl.secretbox.keyLength = crypto_secretbox_KEYBYTES;
  nacl.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;
  nacl.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;

  nacl.scalarMult = function (n, p) {
    checkArrayTypes(n, p);
    if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
    if (p.length !== crypto_scalarmult_BYTES) throw new Error('bad p size');
    var q = new Uint8Array(crypto_scalarmult_BYTES);
    crypto_scalarmult(q, n, p);
    return q;
  };

  nacl.scalarMult.base = function (n) {
    checkArrayTypes(n);
    if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
    var q = new Uint8Array(crypto_scalarmult_BYTES);
    crypto_scalarmult_base(q, n);
    return q;
  };

  nacl.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;
  nacl.scalarMult.groupElementLength = crypto_scalarmult_BYTES;

  nacl.box = function (msg, nonce, publicKey, secretKey) {
    var k = nacl.box.before(publicKey, secretKey);
    return nacl.secretbox(msg, nonce, k);
  };

  nacl.box.before = function (publicKey, secretKey) {
    checkArrayTypes(publicKey, secretKey);
    checkBoxLengths(publicKey, secretKey);
    var k = new Uint8Array(crypto_box_BEFORENMBYTES);
    crypto_box_beforenm(k, publicKey, secretKey);
    return k;
  };

  nacl.box.after = nacl.secretbox;

  nacl.box.open = function (msg, nonce, publicKey, secretKey) {
    var k = nacl.box.before(publicKey, secretKey);
    return nacl.secretbox.open(msg, nonce, k);
  };

  nacl.box.open.after = nacl.secretbox.open;

  nacl.box.keyPair = function () {
    var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
    var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);
    crypto_box_keypair(pk, sk);
    return {
      publicKey: pk,
      secretKey: sk
    };
  };

  nacl.box.keyPair.fromSecretKey = function (secretKey) {
    checkArrayTypes(secretKey);
    if (secretKey.length !== crypto_box_SECRETKEYBYTES) throw new Error('bad secret key size');
    var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
    crypto_scalarmult_base(pk, secretKey);
    return {
      publicKey: pk,
      secretKey: new Uint8Array(secretKey)
    };
  };

  nacl.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;
  nacl.box.secretKeyLength = crypto_box_SECRETKEYBYTES;
  nacl.box.sharedKeyLength = crypto_box_BEFORENMBYTES;
  nacl.box.nonceLength = crypto_box_NONCEBYTES;
  nacl.box.overheadLength = nacl.secretbox.overheadLength;

  nacl.sign = function (msg, secretKey) {
    checkArrayTypes(msg, secretKey);
    if (secretKey.length !== crypto_sign_SECRETKEYBYTES) throw new Error('bad secret key size');
    var signedMsg = new Uint8Array(crypto_sign_BYTES + msg.length);
    crypto_sign(signedMsg, msg, msg.length, secretKey);
    return signedMsg;
  };

  nacl.sign.open = function (signedMsg, publicKey) {
    checkArrayTypes(signedMsg, publicKey);
    if (publicKey.length !== crypto_sign_PUBLICKEYBYTES) throw new Error('bad public key size');
    var tmp = new Uint8Array(signedMsg.length);
    var mlen = crypto_sign_open(tmp, signedMsg, signedMsg.length, publicKey);
    if (mlen < 0) return null;
    var m = new Uint8Array(mlen);

    for (var i = 0; i < m.length; i++) m[i] = tmp[i];

    return m;
  };

  nacl.sign.detached = function (msg, secretKey) {
    var signedMsg = nacl.sign(msg, secretKey);
    var sig = new Uint8Array(crypto_sign_BYTES);

    for (var i = 0; i < sig.length; i++) sig[i] = signedMsg[i];

    return sig;
  };

  nacl.sign.detached.verify = function (msg, sig, publicKey) {
    checkArrayTypes(msg, sig, publicKey);
    if (sig.length !== crypto_sign_BYTES) throw new Error('bad signature size');
    if (publicKey.length !== crypto_sign_PUBLICKEYBYTES) throw new Error('bad public key size');
    var sm = new Uint8Array(crypto_sign_BYTES + msg.length);
    var m = new Uint8Array(crypto_sign_BYTES + msg.length);
    var i;

    for (i = 0; i < crypto_sign_BYTES; i++) sm[i] = sig[i];

    for (i = 0; i < msg.length; i++) sm[i + crypto_sign_BYTES] = msg[i];

    return crypto_sign_open(m, sm, sm.length, publicKey) >= 0;
  };

  nacl.sign.keyPair = function () {
    var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
    var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
    crypto_sign_keypair(pk, sk);
    return {
      publicKey: pk,
      secretKey: sk
    };
  };

  nacl.sign.keyPair.fromSecretKey = function (secretKey) {
    checkArrayTypes(secretKey);
    if (secretKey.length !== crypto_sign_SECRETKEYBYTES) throw new Error('bad secret key size');
    var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);

    for (var i = 0; i < pk.length; i++) pk[i] = secretKey[32 + i];

    return {
      publicKey: pk,
      secretKey: new Uint8Array(secretKey)
    };
  };

  nacl.sign.keyPair.fromSeed = function (seed) {
    checkArrayTypes(seed);
    if (seed.length !== crypto_sign_SEEDBYTES) throw new Error('bad seed size');
    var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
    var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);

    for (var i = 0; i < 32; i++) sk[i] = seed[i];

    crypto_sign_keypair(pk, sk, true);
    return {
      publicKey: pk,
      secretKey: sk
    };
  };

  nacl.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;
  nacl.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;
  nacl.sign.seedLength = crypto_sign_SEEDBYTES;
  nacl.sign.signatureLength = crypto_sign_BYTES;

  nacl.hash = function (msg) {
    checkArrayTypes(msg);
    var h = new Uint8Array(crypto_hash_BYTES);
    crypto_hash(h, msg, msg.length);
    return h;
  };

  nacl.hash.hashLength = crypto_hash_BYTES;

  nacl.verify = function (x, y) {
    checkArrayTypes(x, y); // Zero length arguments are considered not equal.

    if (x.length === 0 || y.length === 0) return false;
    if (x.length !== y.length) return false;
    return vn(x, 0, y, 0, x.length) === 0 ? true : false;
  };

  nacl.setPRNG = function (fn) {
    randombytes = fn;
  };

  (function () {
    // Initialize PRNG if environment provides CSPRNG.
    // If not, methods calling randombytes will throw.
    var crypto = typeof self !== 'undefined' ? self.crypto || self.msCrypto : null;

    if (crypto && crypto.getRandomValues) {
      // Browsers.
      var QUOTA = 65536;
      nacl.setPRNG(function (x, n) {
        var i,
            v = new Uint8Array(n);

        for (i = 0; i < n; i += QUOTA) {
          crypto.getRandomValues(v.subarray(i, i + Math.min(n - i, QUOTA)));
        }

        for (i = 0; i < n; i++) x[i] = v[i];

        cleanup(v);
      });
    } else if (true) {
      // Node.js.
      crypto = __webpack_require__(441);

      if (crypto && crypto.randomBytes) {
        nacl.setPRNG(function (x, n) {
          var i,
              v = crypto.randomBytes(n);

          for (i = 0; i < n; i++) x[i] = v[i];

          cleanup(v);
        });
      }
    }
  })();
})( true && module.exports ? module.exports : self.nacl = self.nacl || {});

/***/ }),
/* 441 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 442 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const bs58 = __webpack_require__(39);

const multihashing = __webpack_require__(22);

module.exports = (keysProtobuf, randomBytes, crypto) => {
  crypto = crypto || __webpack_require__(443)(randomBytes);

  class Secp256k1PublicKey {
    constructor(key) {
      crypto.validatePublicKey(key);
      this._key = key;
    }

    verify(data, sig) {
      return crypto.hashAndVerify(this._key, sig, data);
    }

    marshal() {
      return crypto.compressPublicKey(this._key);
    }

    get bytes() {
      return keysProtobuf.PublicKey.encode({
        Type: keysProtobuf.KeyType.Secp256k1,
        Data: this.marshal()
      });
    }

    equals(key) {
      return this.bytes.equals(key.bytes);
    }

    hash() {
      return multihashing(this.bytes, 'sha2-256');
    }

  }

  class Secp256k1PrivateKey {
    constructor(key, publicKey) {
      this._key = key;
      this._publicKey = publicKey || crypto.computePublicKey(key);
      crypto.validatePrivateKey(this._key);
      crypto.validatePublicKey(this._publicKey);
    }

    sign(message) {
      return crypto.hashAndSign(this._key, message);
    }

    get public() {
      return new Secp256k1PublicKey(this._publicKey);
    }

    marshal() {
      return this._key;
    }

    get bytes() {
      return keysProtobuf.PrivateKey.encode({
        Type: keysProtobuf.KeyType.Secp256k1,
        Data: this.marshal()
      });
    }

    equals(key) {
      return this.bytes.equals(key.bytes);
    }

    hash() {
      return multihashing(this.bytes, 'sha2-256');
    }
    /**
     * Gets the ID of the key.
     *
     * The key id is the base58 encoding of the SHA-256 multihash of its public key.
     * The public key is a protobuf encoding containing a type and the DER encoding
     * of the PKCS SubjectPublicKeyInfo.
     *
     * @param {function(Error, id)} callback
     * @returns {undefined}
     */


    async id() {
      const hash = await this.public.hash();
      return bs58.encode(hash);
    }

  }

  function unmarshalSecp256k1PrivateKey(bytes) {
    return new Secp256k1PrivateKey(bytes);
  }

  function unmarshalSecp256k1PublicKey(bytes) {
    return new Secp256k1PublicKey(bytes);
  }

  async function generateKeyPair() {
    const privateKeyBytes = await crypto.generateKey();
    return new Secp256k1PrivateKey(privateKeyBytes);
  }

  return {
    Secp256k1PublicKey,
    Secp256k1PrivateKey,
    unmarshalSecp256k1PrivateKey,
    unmarshalSecp256k1PublicKey,
    generateKeyPair
  };
};

/***/ }),
/* 443 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const secp256k1 = __webpack_require__(444);

const multihashing = __webpack_require__(22);

const HASH_ALGORITHM = 'sha2-256';

module.exports = randomBytes => {
  const privateKeyLength = 32;

  function generateKey() {
    let privateKey;

    do {
      privateKey = randomBytes(32);
    } while (!secp256k1.privateKeyVerify(privateKey));

    return privateKey;
  }

  async function hashAndSign(key, msg) {
    const digest = await multihashing.digest(msg, HASH_ALGORITHM);
    const sig = secp256k1.sign(digest, key);
    return secp256k1.signatureExport(sig.signature);
  }

  async function hashAndVerify(key, sig, msg) {
    const digest = await multihashing.digest(msg, HASH_ALGORITHM);
    sig = secp256k1.signatureImport(sig);
    return secp256k1.verify(digest, sig, key);
  }

  function compressPublicKey(key) {
    if (!secp256k1.publicKeyVerify(key)) {
      throw new Error('Invalid public key');
    }

    return secp256k1.publicKeyConvert(key, true);
  }

  function decompressPublicKey(key) {
    return secp256k1.publicKeyConvert(key, false);
  }

  function validatePrivateKey(key) {
    if (!secp256k1.privateKeyVerify(key)) {
      throw new Error('Invalid private key');
    }
  }

  function validatePublicKey(key) {
    if (!secp256k1.publicKeyVerify(key)) {
      throw new Error('Invalid public key');
    }
  }

  function computePublicKey(privateKey) {
    validatePrivateKey(privateKey);
    return secp256k1.publicKeyCreate(privateKey);
  }

  return {
    generateKey,
    privateKeyLength,
    hashAndSign,
    hashAndVerify,
    compressPublicKey,
    decompressPublicKey,
    validatePrivateKey,
    validatePublicKey,
    computePublicKey
  };
};

/***/ }),
/* 444 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(445)(__webpack_require__(449));

/***/ }),
/* 445 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(446);

var der = __webpack_require__(447);

var messages = __webpack_require__(213);

function initCompressedValue(value, defaultValue) {
  if (value === undefined) return defaultValue;
  assert.isBoolean(value, messages.COMPRESSED_TYPE_INVALID);
  return value;
}

module.exports = function (secp256k1) {
  return {
    privateKeyVerify: function privateKeyVerify(privateKey) {
      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);
      return privateKey.length === 32 && secp256k1.privateKeyVerify(privateKey);
    },
    privateKeyExport: function privateKeyExport(privateKey, compressed) {
      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);
      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID);
      compressed = initCompressedValue(compressed, true);
      var publicKey = secp256k1.privateKeyExport(privateKey, compressed);
      return der.privateKeyExport(privateKey, publicKey, compressed);
    },
    privateKeyImport: function privateKeyImport(privateKey) {
      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);
      privateKey = der.privateKeyImport(privateKey);
      if (privateKey && privateKey.length === 32 && secp256k1.privateKeyVerify(privateKey)) return privateKey;
      throw new Error(messages.EC_PRIVATE_KEY_IMPORT_DER_FAIL);
    },
    privateKeyNegate: function privateKeyNegate(privateKey) {
      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);
      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID);
      return secp256k1.privateKeyNegate(privateKey);
    },
    privateKeyModInverse: function privateKeyModInverse(privateKey) {
      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);
      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID);
      return secp256k1.privateKeyModInverse(privateKey);
    },
    privateKeyTweakAdd: function privateKeyTweakAdd(privateKey, tweak) {
      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);
      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID);
      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID);
      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID);
      return secp256k1.privateKeyTweakAdd(privateKey, tweak);
    },
    privateKeyTweakMul: function privateKeyTweakMul(privateKey, tweak) {
      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);
      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID);
      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID);
      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID);
      return secp256k1.privateKeyTweakMul(privateKey, tweak);
    },
    publicKeyCreate: function publicKeyCreate(privateKey, compressed) {
      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);
      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID);
      compressed = initCompressedValue(compressed, true);
      return secp256k1.publicKeyCreate(privateKey, compressed);
    },
    publicKeyConvert: function publicKeyConvert(publicKey, compressed) {
      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID);
      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID);
      compressed = initCompressedValue(compressed, true);
      return secp256k1.publicKeyConvert(publicKey, compressed);
    },
    publicKeyVerify: function publicKeyVerify(publicKey) {
      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID);
      return secp256k1.publicKeyVerify(publicKey);
    },
    publicKeyTweakAdd: function publicKeyTweakAdd(publicKey, tweak, compressed) {
      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID);
      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID);
      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID);
      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID);
      compressed = initCompressedValue(compressed, true);
      return secp256k1.publicKeyTweakAdd(publicKey, tweak, compressed);
    },
    publicKeyTweakMul: function publicKeyTweakMul(publicKey, tweak, compressed) {
      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID);
      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID);
      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID);
      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID);
      compressed = initCompressedValue(compressed, true);
      return secp256k1.publicKeyTweakMul(publicKey, tweak, compressed);
    },
    publicKeyCombine: function publicKeyCombine(publicKeys, compressed) {
      assert.isArray(publicKeys, messages.EC_PUBLIC_KEYS_TYPE_INVALID);
      assert.isLengthGTZero(publicKeys, messages.EC_PUBLIC_KEYS_LENGTH_INVALID);

      for (var i = 0; i < publicKeys.length; ++i) {
        assert.isBuffer(publicKeys[i], messages.EC_PUBLIC_KEY_TYPE_INVALID);
        assert.isBufferLength2(publicKeys[i], 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID);
      }

      compressed = initCompressedValue(compressed, true);
      return secp256k1.publicKeyCombine(publicKeys, compressed);
    },
    signatureNormalize: function signatureNormalize(signature) {
      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID);
      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID);
      return secp256k1.signatureNormalize(signature);
    },
    signatureExport: function signatureExport(signature) {
      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID);
      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID);
      var sigObj = secp256k1.signatureExport(signature);
      return der.signatureExport(sigObj);
    },
    signatureImport: function signatureImport(sig) {
      assert.isBuffer(sig, messages.ECDSA_SIGNATURE_TYPE_INVALID);
      assert.isLengthGTZero(sig, messages.ECDSA_SIGNATURE_LENGTH_INVALID);
      var sigObj = der.signatureImport(sig);
      if (sigObj) return secp256k1.signatureImport(sigObj);
      throw new Error(messages.ECDSA_SIGNATURE_PARSE_DER_FAIL);
    },
    signatureImportLax: function signatureImportLax(sig) {
      assert.isBuffer(sig, messages.ECDSA_SIGNATURE_TYPE_INVALID);
      assert.isLengthGTZero(sig, messages.ECDSA_SIGNATURE_LENGTH_INVALID);
      var sigObj = der.signatureImportLax(sig);
      if (sigObj) return secp256k1.signatureImport(sigObj);
      throw new Error(messages.ECDSA_SIGNATURE_PARSE_DER_FAIL);
    },
    sign: function sign(message, privateKey, options) {
      assert.isBuffer(message, messages.MSG32_TYPE_INVALID);
      assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID);
      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);
      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID);
      var data = null;
      var noncefn = null;

      if (options !== undefined) {
        assert.isObject(options, messages.OPTIONS_TYPE_INVALID);

        if (options.data !== undefined) {
          assert.isBuffer(options.data, messages.OPTIONS_DATA_TYPE_INVALID);
          assert.isBufferLength(options.data, 32, messages.OPTIONS_DATA_LENGTH_INVALID);
          data = options.data;
        }

        if (options.noncefn !== undefined) {
          assert.isFunction(options.noncefn, messages.OPTIONS_NONCEFN_TYPE_INVALID);
          noncefn = options.noncefn;
        }
      }

      return secp256k1.sign(message, privateKey, noncefn, data);
    },
    verify: function verify(message, signature, publicKey) {
      assert.isBuffer(message, messages.MSG32_TYPE_INVALID);
      assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID);
      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID);
      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID);
      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID);
      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID);
      return secp256k1.verify(message, signature, publicKey);
    },
    recover: function recover(message, signature, recovery, compressed) {
      assert.isBuffer(message, messages.MSG32_TYPE_INVALID);
      assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID);
      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID);
      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID);
      assert.isNumber(recovery, messages.RECOVERY_ID_TYPE_INVALID);
      assert.isNumberInInterval(recovery, -1, 4, messages.RECOVERY_ID_VALUE_INVALID);
      compressed = initCompressedValue(compressed, true);
      return secp256k1.recover(message, signature, recovery, compressed);
    },
    ecdh: function ecdh(publicKey, privateKey) {
      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID);
      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID);
      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);
      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID);
      return secp256k1.ecdh(publicKey, privateKey);
    },
    ecdhUnsafe: function ecdhUnsafe(publicKey, privateKey, compressed) {
      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID);
      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID);
      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);
      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID);
      compressed = initCompressedValue(compressed, true);
      return secp256k1.ecdhUnsafe(publicKey, privateKey, compressed);
    }
  };
};

/***/ }),
/* 446 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var toString = Object.prototype.toString; // TypeError

exports.isArray = function (value, message) {
  if (!Array.isArray(value)) throw TypeError(message);
};

exports.isBoolean = function (value, message) {
  if (toString.call(value) !== '[object Boolean]') throw TypeError(message);
};

exports.isBuffer = function (value, message) {
  if (!Buffer.isBuffer(value)) throw TypeError(message);
};

exports.isFunction = function (value, message) {
  if (toString.call(value) !== '[object Function]') throw TypeError(message);
};

exports.isNumber = function (value, message) {
  if (toString.call(value) !== '[object Number]') throw TypeError(message);
};

exports.isObject = function (value, message) {
  if (toString.call(value) !== '[object Object]') throw TypeError(message);
}; // RangeError


exports.isBufferLength = function (buffer, length, message) {
  if (buffer.length !== length) throw RangeError(message);
};

exports.isBufferLength2 = function (buffer, length1, length2, message) {
  if (buffer.length !== length1 && buffer.length !== length2) throw RangeError(message);
};

exports.isLengthGTZero = function (value, message) {
  if (value.length === 0) throw RangeError(message);
};

exports.isNumberInInterval = function (number, x, y, message) {
  if (number <= x || number >= y) throw RangeError(message);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 447 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Buffer = __webpack_require__(6).Buffer;

var bip66 = __webpack_require__(448);

var EC_PRIVKEY_EXPORT_DER_COMPRESSED = Buffer.from([// begin
0x30, 0x81, 0xd3, 0x02, 0x01, 0x01, 0x04, 0x20, // private key
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // middle
0xa0, 0x81, 0x85, 0x30, 0x81, 0x82, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xcE, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfE, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04, 0x21, 0x02, 0x79, 0xbE, 0x66, 0x7E, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xcE, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xcE, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfE, 0xba, 0xaE, 0xdc, 0xE6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5E, 0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x24, 0x03, 0x22, 0x00, // public key
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);
var EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED = Buffer.from([// begin
0x30, 0x82, 0x01, 0x13, 0x02, 0x01, 0x01, 0x04, 0x20, // private key
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // middle
0xa0, 0x81, 0xa5, 0x30, 0x81, 0xa2, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xcE, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfE, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04, 0x41, 0x04, 0x79, 0xbE, 0x66, 0x7E, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xcE, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xcE, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x48, 0x3a, 0xda, 0x77, 0x26, 0xa3, 0xc4, 0x65, 0x5d, 0xa4, 0xfb, 0xfc, 0x0E, 0x11, 0x08, 0xa8, 0xfd, 0x17, 0xb4, 0x48, 0xa6, 0x85, 0x54, 0x19, 0x9c, 0x47, 0xd0, 0x8f, 0xfb, 0x10, 0xd4, 0xb8, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfE, 0xba, 0xaE, 0xdc, 0xE6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5E, 0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x44, 0x03, 0x42, 0x00, // public key
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);

exports.privateKeyExport = function (privateKey, publicKey, compressed) {
  var result = Buffer.from(compressed ? EC_PRIVKEY_EXPORT_DER_COMPRESSED : EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED);
  privateKey.copy(result, compressed ? 8 : 9);
  publicKey.copy(result, compressed ? 181 : 214);
  return result;
};

exports.privateKeyImport = function (privateKey) {
  var length = privateKey.length; // sequence header

  var index = 0;
  if (length < index + 1 || privateKey[index] !== 0x30) return;
  index += 1; // sequence length constructor

  if (length < index + 1 || !(privateKey[index] & 0x80)) return;
  var lenb = privateKey[index] & 0x7f;
  index += 1;
  if (lenb < 1 || lenb > 2) return;
  if (length < index + lenb) return; // sequence length

  var len = privateKey[index + lenb - 1] | (lenb > 1 ? privateKey[index + lenb - 2] << 8 : 0);
  index += lenb;
  if (length < index + len) return; // sequence element 0: version number (=1)

  if (length < index + 3 || privateKey[index] !== 0x02 || privateKey[index + 1] !== 0x01 || privateKey[index + 2] !== 0x01) {
    return;
  }

  index += 3; // sequence element 1: octet string, up to 32 bytes

  if (length < index + 2 || privateKey[index] !== 0x04 || privateKey[index + 1] > 0x20 || length < index + 2 + privateKey[index + 1]) {
    return;
  }

  return privateKey.slice(index + 2, index + 2 + privateKey[index + 1]);
};

exports.signatureExport = function (sigObj) {
  var r = Buffer.concat([Buffer.from([0]), sigObj.r]);

  for (var lenR = 33, posR = 0; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR);

  var s = Buffer.concat([Buffer.from([0]), sigObj.s]);

  for (var lenS = 33, posS = 0; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS);

  return bip66.encode(r.slice(posR), s.slice(posS));
};

exports.signatureImport = function (sig) {
  var r = Buffer.alloc(32, 0);
  var s = Buffer.alloc(32, 0);

  try {
    var sigObj = bip66.decode(sig);
    if (sigObj.r.length === 33 && sigObj.r[0] === 0x00) sigObj.r = sigObj.r.slice(1);
    if (sigObj.r.length > 32) throw new Error('R length is too long');
    if (sigObj.s.length === 33 && sigObj.s[0] === 0x00) sigObj.s = sigObj.s.slice(1);
    if (sigObj.s.length > 32) throw new Error('S length is too long');
  } catch (err) {
    return;
  }

  sigObj.r.copy(r, 32 - sigObj.r.length);
  sigObj.s.copy(s, 32 - sigObj.s.length);
  return {
    r: r,
    s: s
  };
};

exports.signatureImportLax = function (sig) {
  var r = Buffer.alloc(32, 0);
  var s = Buffer.alloc(32, 0);
  var length = sig.length;
  var index = 0; // sequence tag byte

  if (sig[index++] !== 0x30) return; // sequence length byte

  var lenbyte = sig[index++];

  if (lenbyte & 0x80) {
    index += lenbyte - 0x80;
    if (index > length) return;
  } // sequence tag byte for r


  if (sig[index++] !== 0x02) return; // length for r

  var rlen = sig[index++];

  if (rlen & 0x80) {
    lenbyte = rlen - 0x80;
    if (index + lenbyte > length) return;

    for (; lenbyte > 0 && sig[index] === 0x00; index += 1, lenbyte -= 1);

    for (rlen = 0; lenbyte > 0; index += 1, lenbyte -= 1) rlen = (rlen << 8) + sig[index];
  }

  if (rlen > length - index) return;
  var rindex = index;
  index += rlen; // sequence tag byte for s

  if (sig[index++] !== 0x02) return; // length for s

  var slen = sig[index++];

  if (slen & 0x80) {
    lenbyte = slen - 0x80;
    if (index + lenbyte > length) return;

    for (; lenbyte > 0 && sig[index] === 0x00; index += 1, lenbyte -= 1);

    for (slen = 0; lenbyte > 0; index += 1, lenbyte -= 1) slen = (slen << 8) + sig[index];
  }

  if (slen > length - index) return;
  var sindex = index;
  index += slen; // ignore leading zeros in r

  for (; rlen > 0 && sig[rindex] === 0x00; rlen -= 1, rindex += 1); // copy r value


  if (rlen > 32) return;
  var rvalue = sig.slice(rindex, rindex + rlen);
  rvalue.copy(r, 32 - rvalue.length); // ignore leading zeros in s

  for (; slen > 0 && sig[sindex] === 0x00; slen -= 1, sindex += 1); // copy s value


  if (slen > 32) return;
  var svalue = sig.slice(sindex, sindex + slen);
  svalue.copy(s, 32 - svalue.length);
  return {
    r: r,
    s: s
  };
};

/***/ }),
/* 448 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Reference https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki
// Format: 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]
// NOTE: SIGHASH byte ignored AND restricted, truncate before use
var Buffer = __webpack_require__(6).Buffer;

function check(buffer) {
  if (buffer.length < 8) return false;
  if (buffer.length > 72) return false;
  if (buffer[0] !== 0x30) return false;
  if (buffer[1] !== buffer.length - 2) return false;
  if (buffer[2] !== 0x02) return false;
  var lenR = buffer[3];
  if (lenR === 0) return false;
  if (5 + lenR >= buffer.length) return false;
  if (buffer[4 + lenR] !== 0x02) return false;
  var lenS = buffer[5 + lenR];
  if (lenS === 0) return false;
  if (6 + lenR + lenS !== buffer.length) return false;
  if (buffer[4] & 0x80) return false;
  if (lenR > 1 && buffer[4] === 0x00 && !(buffer[5] & 0x80)) return false;
  if (buffer[lenR + 6] & 0x80) return false;
  if (lenS > 1 && buffer[lenR + 6] === 0x00 && !(buffer[lenR + 7] & 0x80)) return false;
  return true;
}

function decode(buffer) {
  if (buffer.length < 8) throw new Error('DER sequence length is too short');
  if (buffer.length > 72) throw new Error('DER sequence length is too long');
  if (buffer[0] !== 0x30) throw new Error('Expected DER sequence');
  if (buffer[1] !== buffer.length - 2) throw new Error('DER sequence length is invalid');
  if (buffer[2] !== 0x02) throw new Error('Expected DER integer');
  var lenR = buffer[3];
  if (lenR === 0) throw new Error('R length is zero');
  if (5 + lenR >= buffer.length) throw new Error('R length is too long');
  if (buffer[4 + lenR] !== 0x02) throw new Error('Expected DER integer (2)');
  var lenS = buffer[5 + lenR];
  if (lenS === 0) throw new Error('S length is zero');
  if (6 + lenR + lenS !== buffer.length) throw new Error('S length is invalid');
  if (buffer[4] & 0x80) throw new Error('R value is negative');
  if (lenR > 1 && buffer[4] === 0x00 && !(buffer[5] & 0x80)) throw new Error('R value excessively padded');
  if (buffer[lenR + 6] & 0x80) throw new Error('S value is negative');
  if (lenS > 1 && buffer[lenR + 6] === 0x00 && !(buffer[lenR + 7] & 0x80)) throw new Error('S value excessively padded'); // non-BIP66 - extract R, S values

  return {
    r: buffer.slice(4, 4 + lenR),
    s: buffer.slice(6 + lenR)
  };
}
/*
 * Expects r and s to be positive DER integers.
 *
 * The DER format uses the most significant bit as a sign bit (& 0x80).
 * If the significant bit is set AND the integer is positive, a 0x00 is prepended.
 *
 * Examples:
 *
 *      0 =>     0x00
 *      1 =>     0x01
 *     -1 =>     0xff
 *    127 =>     0x7f
 *   -127 =>     0x81
 *    128 =>   0x0080
 *   -128 =>     0x80
 *    255 =>   0x00ff
 *   -255 =>   0xff01
 *  16300 =>   0x3fac
 * -16300 =>   0xc054
 *  62300 => 0x00f35c
 * -62300 => 0xff0ca4
*/


function encode(r, s) {
  var lenR = r.length;
  var lenS = s.length;
  if (lenR === 0) throw new Error('R length is zero');
  if (lenS === 0) throw new Error('S length is zero');
  if (lenR > 33) throw new Error('R length is too long');
  if (lenS > 33) throw new Error('S length is too long');
  if (r[0] & 0x80) throw new Error('R value is negative');
  if (s[0] & 0x80) throw new Error('S value is negative');
  if (lenR > 1 && r[0] === 0x00 && !(r[1] & 0x80)) throw new Error('R value excessively padded');
  if (lenS > 1 && s[0] === 0x00 && !(s[1] & 0x80)) throw new Error('S value excessively padded');
  var signature = Buffer.allocUnsafe(6 + lenR + lenS); // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]

  signature[0] = 0x30;
  signature[1] = signature.length - 2;
  signature[2] = 0x02;
  signature[3] = r.length;
  r.copy(signature, 4);
  signature[4 + lenR] = 0x02;
  signature[5 + lenR] = s.length;
  s.copy(signature, 6 + lenR);
  return signature;
}

module.exports = {
  check: check,
  decode: decode,
  encode: encode
};

/***/ }),
/* 449 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Buffer = __webpack_require__(6).Buffer;

var createHash = __webpack_require__(450);

var HmacDRBG = __webpack_require__(463);

var messages = __webpack_require__(213);

var BN = __webpack_require__(97);

var ECPoint = __webpack_require__(225);

var g = __webpack_require__(469);

exports.privateKeyVerify = function (privateKey) {
  var bn = BN.fromBuffer(privateKey);
  return !(bn.isOverflow() || bn.isZero());
};

exports.privateKeyExport = function (privateKey, compressed) {
  var d = BN.fromBuffer(privateKey);
  if (d.isOverflow() || d.isZero()) throw new Error(messages.EC_PRIVATE_KEY_EXPORT_DER_FAIL);
  return g.mul(d).toPublicKey(compressed);
};

exports.privateKeyNegate = function (privateKey) {
  var bn = BN.fromBuffer(privateKey);
  if (bn.isZero()) return Buffer.alloc(32);
  if (bn.ucmp(BN.n) > 0) bn.isub(BN.n);
  return BN.n.sub(bn).toBuffer();
};

exports.privateKeyModInverse = function (privateKey) {
  var bn = BN.fromBuffer(privateKey);
  if (bn.isOverflow() || bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_RANGE_INVALID);
  return bn.uinvm().toBuffer();
};

exports.privateKeyTweakAdd = function (privateKey, tweak) {
  var bn = BN.fromBuffer(tweak);
  if (bn.isOverflow()) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_ADD_FAIL);
  bn.iadd(BN.fromBuffer(privateKey));
  if (bn.isOverflow()) bn.isub(BN.n);
  if (bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_ADD_FAIL);
  return bn.toBuffer();
};

exports.privateKeyTweakMul = function (privateKey, tweak) {
  var bn = BN.fromBuffer(tweak);
  if (bn.isOverflow() || bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_MUL_FAIL);
  var d = BN.fromBuffer(privateKey);
  return bn.umul(d).ureduce().toBuffer();
};

exports.publicKeyCreate = function (privateKey, compressed) {
  var d = BN.fromBuffer(privateKey);
  if (d.isOverflow() || d.isZero()) throw new Error(messages.EC_PUBLIC_KEY_CREATE_FAIL);
  return g.mul(d).toPublicKey(compressed);
};

exports.publicKeyConvert = function (publicKey, compressed) {
  var point = ECPoint.fromPublicKey(publicKey);
  if (point === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL);
  return point.toPublicKey(compressed);
};

exports.publicKeyVerify = function (publicKey) {
  return ECPoint.fromPublicKey(publicKey) !== null;
};

exports.publicKeyTweakAdd = function (publicKey, tweak, compressed) {
  var point = ECPoint.fromPublicKey(publicKey);
  if (point === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL);
  tweak = BN.fromBuffer(tweak);
  if (tweak.isOverflow()) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_ADD_FAIL);
  var result = g.mul(tweak).add(point);
  if (result.inf) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_ADD_FAIL);
  return result.toPublicKey(compressed);
};

exports.publicKeyTweakMul = function (publicKey, tweak, compressed) {
  var point = ECPoint.fromPublicKey(publicKey);
  if (point === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL);
  tweak = BN.fromBuffer(tweak);
  if (tweak.isOverflow() || tweak.isZero()) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_MUL_FAIL);
  return point.mul(tweak).toPublicKey(compressed);
};

exports.publicKeyCombine = function (publicKeys, compressed) {
  var points = new Array(publicKeys.length);

  for (var i = 0; i < publicKeys.length; ++i) {
    points[i] = ECPoint.fromPublicKey(publicKeys[i]);
    if (points[i] === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL);
  }

  var point = points[0];

  for (var j = 1; j < points.length; ++j) point = point.add(points[j]);

  if (point.inf) throw new Error(messages.EC_PUBLIC_KEY_COMBINE_FAIL);
  return point.toPublicKey(compressed);
};

exports.signatureNormalize = function (signature) {
  var r = BN.fromBuffer(signature.slice(0, 32));
  var s = BN.fromBuffer(signature.slice(32, 64));
  if (r.isOverflow() || s.isOverflow()) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL);
  var result = Buffer.from(signature);
  if (s.isHigh()) BN.n.sub(s).toBuffer().copy(result, 32);
  return result;
};

exports.signatureExport = function (signature) {
  var r = signature.slice(0, 32);
  var s = signature.slice(32, 64);
  if (BN.fromBuffer(r).isOverflow() || BN.fromBuffer(s).isOverflow()) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL);
  return {
    r: r,
    s: s
  };
};

exports.signatureImport = function (sigObj) {
  var r = BN.fromBuffer(sigObj.r);
  if (r.isOverflow()) r = BN.fromNumber(0);
  var s = BN.fromBuffer(sigObj.s);
  if (s.isOverflow()) s = BN.fromNumber(0);
  return Buffer.concat([r.toBuffer(), s.toBuffer()]);
};

exports.sign = function (message, privateKey, noncefn, data) {
  var d = BN.fromBuffer(privateKey);
  if (d.isOverflow() || d.isZero()) throw new Error(messages.ECDSA_SIGN_FAIL);

  if (noncefn === null) {
    var drbg = new HmacDRBG('sha256', privateKey, message, data);

    noncefn = function noncefn() {
      return drbg.generate(32);
    };
  }

  var bnMessage = BN.fromBuffer(message);

  for (var count = 0;; ++count) {
    var nonce = noncefn(message, privateKey, null, data, count);
    if (!Buffer.isBuffer(nonce) || nonce.length !== 32) throw new Error(messages.ECDSA_SIGN_FAIL);
    var k = BN.fromBuffer(nonce);
    if (k.isOverflow() || k.isZero()) continue;
    var kp = g.mul(k);
    var r = kp.x.fireduce();
    if (r.isZero()) continue;
    var s = k.uinvm().umul(r.umul(d).ureduce().iadd(bnMessage).fireduce()).ureduce();
    if (s.isZero()) continue;
    var recovery = (kp.x.ucmp(r) !== 0 ? 2 : 0) | (kp.y.isOdd() ? 1 : 0);

    if (s.isHigh()) {
      s = BN.n.sub(s);
      recovery ^= 1;
    }

    return {
      signature: Buffer.concat([r.toBuffer(), s.toBuffer()]),
      recovery: recovery
    };
  }
};

exports.verify = function (message, signature, publicKey) {
  var sigr = BN.fromBuffer(signature.slice(0, 32));
  var sigs = BN.fromBuffer(signature.slice(32, 64));
  if (sigr.isOverflow() || sigs.isOverflow()) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL);
  if (sigs.isHigh() || sigr.isZero() || sigs.isZero()) return false;
  var pub = ECPoint.fromPublicKey(publicKey);
  if (pub === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL);
  var sinv = sigs.uinvm();
  var u1 = sinv.umul(BN.fromBuffer(message)).ureduce();
  var u2 = sinv.umul(sigr).ureduce();
  var point = g.mulAdd(u1, pub, u2);
  if (point.inf) return false; // return ECPoint.fromECJPoint(point).x.fireduce().ucmp(sigr) === 0
  // Inversion-free

  var z2 = point.z.redSqr();
  if (sigr.redMul(z2).ucmp(point.x) === 0) return true;
  if (sigr.ucmp(BN.psn) >= 0) return false;
  return sigr.iadd(BN.psn).redMul(z2).ucmp(point.x) === 0;
};

exports.recover = function (message, signature, recovery, compressed) {
  var sigr = BN.fromBuffer(signature.slice(0, 32));
  var sigs = BN.fromBuffer(signature.slice(32, 64));
  if (sigr.isOverflow() || sigs.isOverflow()) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL);

  do {
    if (sigr.isZero() || sigs.isZero()) break;
    var kpx = sigr;

    if (recovery >> 1) {
      if (kpx.ucmp(BN.psn) >= 0) break;
      kpx = sigr.add(BN.n);
    }

    var kpPublicKey = Buffer.concat([Buffer.from([0x02 + (recovery & 0x01)]), kpx.toBuffer()]);
    var kp = ECPoint.fromPublicKey(kpPublicKey);
    if (kp === null) break;
    var rInv = sigr.uinvm();
    var s1 = BN.n.sub(BN.fromBuffer(message)).umul(rInv).ureduce();
    var s2 = sigs.umul(rInv).ureduce();
    var point = ECPoint.fromECJPoint(g.mulAdd(s1, kp, s2));
    return point.toPublicKey(compressed);
  } while (false);

  throw new Error(messages.ECDSA_RECOVER_FAIL);
};

exports.ecdh = function (publicKey, privateKey) {
  var shared = exports.ecdhUnsafe(publicKey, privateKey, true);
  return createHash('sha256').update(shared).digest();
};

exports.ecdhUnsafe = function (publicKey, privateKey, compressed) {
  var point = ECPoint.fromPublicKey(publicKey);
  if (point === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL);
  var scalar = BN.fromBuffer(privateKey);
  if (scalar.isOverflow() || scalar.isZero()) throw new Error(messages.ECDH_FAIL);
  return point.mul(scalar).toPublicKey(compressed);
};

/***/ }),
/* 450 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(4);

var MD5 = __webpack_require__(136);

var RIPEMD160 = __webpack_require__(221);

var sha = __webpack_require__(222);

var Base = __webpack_require__(49);

function Hash(hash) {
  Base.call(this, 'digest');
  this._hash = hash;
}

inherits(Hash, Base);

Hash.prototype._update = function (data) {
  this._hash.update(data);
};

Hash.prototype._final = function () {
  return this._hash.digest();
};

module.exports = function createHash(alg) {
  alg = alg.toLowerCase();
  if (alg === 'md5') return new MD5();
  if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160();
  return new Hash(sha(alg));
};

/***/ }),
/* 451 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 452 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var Buffer = __webpack_require__(138).Buffer;

var util = __webpack_require__(453);

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = {
      data: v,
      next: null
    };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = {
      data: v,
      next: this.head
    };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;

    while (p = p.next) {
      ret += s + p.data;
    }

    return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;

    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }

    return ret;
  };

  return BufferList;
}();

if (util && util.inspect && util.inspect.custom) {
  module.exports.prototype[util.inspect.custom] = function () {
    var obj = util.inspect({
      length: this.length
    });
    return this.constructor.name + ' ' + obj;
  };
}

/***/ }),
/* 453 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 454 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.


module.exports = PassThrough;

var Transform = __webpack_require__(220);
/*<replacement>*/


var util = Object.create(__webpack_require__(76));
util.inherits = __webpack_require__(4);
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);
  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};

/***/ }),
/* 455 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(139);

/***/ }),
/* 456 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(48);

/***/ }),
/* 457 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(137).Transform;

/***/ }),
/* 458 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(137).PassThrough;

/***/ }),
/* 459 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */
var inherits = __webpack_require__(4);

var Hash = __webpack_require__(54);

var Buffer = __webpack_require__(6).Buffer;

var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0];
var W = new Array(80);

function Sha() {
  this.init();
  this._w = W;
  Hash.call(this, 64, 56);
}

inherits(Sha, Hash);

Sha.prototype.init = function () {
  this._a = 0x67452301;
  this._b = 0xefcdab89;
  this._c = 0x98badcfe;
  this._d = 0x10325476;
  this._e = 0xc3d2e1f0;
  return this;
};

function rotl5(num) {
  return num << 5 | num >>> 27;
}

function rotl30(num) {
  return num << 30 | num >>> 2;
}

function ft(s, b, c, d) {
  if (s === 0) return b & c | ~b & d;
  if (s === 2) return b & c | b & d | c & d;
  return b ^ c ^ d;
}

Sha.prototype._update = function (M) {
  var W = this._w;
  var a = this._a | 0;
  var b = this._b | 0;
  var c = this._c | 0;
  var d = this._d | 0;
  var e = this._e | 0;

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4);

  for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20);
    var t = rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s] | 0;
    e = d;
    d = c;
    c = rotl30(b);
    b = a;
    a = t;
  }

  this._a = a + this._a | 0;
  this._b = b + this._b | 0;
  this._c = c + this._c | 0;
  this._d = d + this._d | 0;
  this._e = e + this._e | 0;
};

Sha.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20);
  H.writeInt32BE(this._a | 0, 0);
  H.writeInt32BE(this._b | 0, 4);
  H.writeInt32BE(this._c | 0, 8);
  H.writeInt32BE(this._d | 0, 12);
  H.writeInt32BE(this._e | 0, 16);
  return H;
};

module.exports = Sha;

/***/ }),
/* 460 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */
var inherits = __webpack_require__(4);

var Hash = __webpack_require__(54);

var Buffer = __webpack_require__(6).Buffer;

var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0];
var W = new Array(80);

function Sha1() {
  this.init();
  this._w = W;
  Hash.call(this, 64, 56);
}

inherits(Sha1, Hash);

Sha1.prototype.init = function () {
  this._a = 0x67452301;
  this._b = 0xefcdab89;
  this._c = 0x98badcfe;
  this._d = 0x10325476;
  this._e = 0xc3d2e1f0;
  return this;
};

function rotl1(num) {
  return num << 1 | num >>> 31;
}

function rotl5(num) {
  return num << 5 | num >>> 27;
}

function rotl30(num) {
  return num << 30 | num >>> 2;
}

function ft(s, b, c, d) {
  if (s === 0) return b & c | ~b & d;
  if (s === 2) return b & c | b & d | c & d;
  return b ^ c ^ d;
}

Sha1.prototype._update = function (M) {
  var W = this._w;
  var a = this._a | 0;
  var b = this._b | 0;
  var c = this._c | 0;
  var d = this._d | 0;
  var e = this._e | 0;

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4);

  for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]);

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20);
    var t = rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s] | 0;
    e = d;
    d = c;
    c = rotl30(b);
    b = a;
    a = t;
  }

  this._a = a + this._a | 0;
  this._b = b + this._b | 0;
  this._c = c + this._c | 0;
  this._d = d + this._d | 0;
  this._e = e + this._e | 0;
};

Sha1.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20);
  H.writeInt32BE(this._a | 0, 0);
  H.writeInt32BE(this._b | 0, 4);
  H.writeInt32BE(this._c | 0, 8);
  H.writeInt32BE(this._d | 0, 12);
  H.writeInt32BE(this._e | 0, 16);
  return H;
};

module.exports = Sha1;

/***/ }),
/* 461 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */
var inherits = __webpack_require__(4);

var Sha256 = __webpack_require__(223);

var Hash = __webpack_require__(54);

var Buffer = __webpack_require__(6).Buffer;

var W = new Array(64);

function Sha224() {
  this.init();
  this._w = W; // new Array(64)

  Hash.call(this, 64, 56);
}

inherits(Sha224, Sha256);

Sha224.prototype.init = function () {
  this._a = 0xc1059ed8;
  this._b = 0x367cd507;
  this._c = 0x3070dd17;
  this._d = 0xf70e5939;
  this._e = 0xffc00b31;
  this._f = 0x68581511;
  this._g = 0x64f98fa7;
  this._h = 0xbefa4fa4;
  return this;
};

Sha224.prototype._hash = function () {
  var H = Buffer.allocUnsafe(28);
  H.writeInt32BE(this._a, 0);
  H.writeInt32BE(this._b, 4);
  H.writeInt32BE(this._c, 8);
  H.writeInt32BE(this._d, 12);
  H.writeInt32BE(this._e, 16);
  H.writeInt32BE(this._f, 20);
  H.writeInt32BE(this._g, 24);
  return H;
};

module.exports = Sha224;

/***/ }),
/* 462 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(4);

var SHA512 = __webpack_require__(224);

var Hash = __webpack_require__(54);

var Buffer = __webpack_require__(6).Buffer;

var W = new Array(160);

function Sha384() {
  this.init();
  this._w = W;
  Hash.call(this, 128, 112);
}

inherits(Sha384, SHA512);

Sha384.prototype.init = function () {
  this._ah = 0xcbbb9d5d;
  this._bh = 0x629a292a;
  this._ch = 0x9159015a;
  this._dh = 0x152fecd8;
  this._eh = 0x67332667;
  this._fh = 0x8eb44a87;
  this._gh = 0xdb0c2e0d;
  this._hh = 0x47b5481d;
  this._al = 0xc1059ed8;
  this._bl = 0x367cd507;
  this._cl = 0x3070dd17;
  this._dl = 0xf70e5939;
  this._el = 0xffc00b31;
  this._fl = 0x68581511;
  this._gl = 0x64f98fa7;
  this._hl = 0xbefa4fa4;
  return this;
};

Sha384.prototype._hash = function () {
  var H = Buffer.allocUnsafe(48);

  function writeInt64BE(h, l, offset) {
    H.writeInt32BE(h, offset);
    H.writeInt32BE(l, offset + 4);
  }

  writeInt64BE(this._ah, this._al, 0);
  writeInt64BE(this._bh, this._bl, 8);
  writeInt64BE(this._ch, this._cl, 16);
  writeInt64BE(this._dh, this._dl, 24);
  writeInt64BE(this._eh, this._el, 32);
  writeInt64BE(this._fh, this._fl, 40);
  return H;
};

module.exports = Sha384;

/***/ }),
/* 463 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var createHmac = __webpack_require__(464);

var hashInfo = __webpack_require__(467);

var ebuf = new Buffer(0);
var b0x00 = new Buffer([0x00]);
var b0x01 = new Buffer([0x01]);

function HmacDRBG(algo, entropy, nonce, pers) {
  var info = hashInfo[algo];
  if (info === undefined) throw new Error('hash ' + algo + ' is not supported');
  this._algo = algo;
  this._securityStrength = info.securityStrength / 8;
  this._outlen = info.outlen / 8;
  this._reseedInterval = 0x1000000000000; // 2**48

  this._init(entropy, nonce, pers);
}

HmacDRBG.prototype._update = function (seed) {
  var kmac = createHmac(this._algo, this._K).update(this._V).update(b0x00);
  if (seed) kmac.update(seed);
  this._K = kmac.digest();
  this._V = createHmac(this._algo, this._K).update(this._V).digest();
  if (!seed) return;
  this._K = createHmac(this._algo, this._K).update(this._V).update(b0x01).update(seed).digest();
  this._V = createHmac(this._algo, this._K).update(this._V).digest();
};

HmacDRBG.prototype._init = function (entropy, nonce, pers) {
  if (entropy.length < this._securityStrength) throw new Error('Not enough entropy');
  this._K = new Buffer(this._outlen);
  this._V = new Buffer(this._outlen);

  for (var i = 0; i < this._K.length; ++i) {
    this._K[i] = 0x00;
    this._V[i] = 0x01;
  }

  this._update(Buffer.concat([entropy, nonce, pers || ebuf]));

  this._reseed = 1;
};

HmacDRBG.prototype.reseed = function (entropy, add) {
  if (entropy.length < this._securityStrength) throw new Error('Not enough entropy');

  this._update(Buffer.concat([entropy, add || ebuf]));

  this._reseed = 1;
};

HmacDRBG.prototype.generate = function (len, add) {
  if (this._reseed > this._reseedInterval) throw new Error('Reseed is required');
  if (add && add.length === 0) add = undefined;
  if (add) this._update(add);
  var temp = new Buffer(0);

  while (temp.length < len) {
    this._V = createHmac(this._algo, this._K).update(this._V).digest();
    temp = Buffer.concat([temp, this._V]);
  }

  this._update(add);

  this._reseed += 1;
  return temp.slice(0, len);
};

module.exports = HmacDRBG;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 464 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(4);

var Legacy = __webpack_require__(465);

var Base = __webpack_require__(49);

var Buffer = __webpack_require__(6).Buffer;

var md5 = __webpack_require__(466);

var RIPEMD160 = __webpack_require__(221);

var sha = __webpack_require__(222);

var ZEROS = Buffer.alloc(128);

function Hmac(alg, key) {
  Base.call(this, 'digest');

  if (typeof key === 'string') {
    key = Buffer.from(key);
  }

  var blocksize = alg === 'sha512' || alg === 'sha384' ? 128 : 64;
  this._alg = alg;
  this._key = key;

  if (key.length > blocksize) {
    var hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg);
    key = hash.update(key).digest();
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize);
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize);
  var opad = this._opad = Buffer.allocUnsafe(blocksize);

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36;
    opad[i] = key[i] ^ 0x5C;
  }

  this._hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg);

  this._hash.update(ipad);
}

inherits(Hmac, Base);

Hmac.prototype._update = function (data) {
  this._hash.update(data);
};

Hmac.prototype._final = function () {
  var h = this._hash.digest();

  var hash = this._alg === 'rmd160' ? new RIPEMD160() : sha(this._alg);
  return hash.update(this._opad).update(h).digest();
};

module.exports = function createHmac(alg, key) {
  alg = alg.toLowerCase();

  if (alg === 'rmd160' || alg === 'ripemd160') {
    return new Hmac('rmd160', key);
  }

  if (alg === 'md5') {
    return new Legacy(md5, key);
  }

  return new Hmac(alg, key);
};

/***/ }),
/* 465 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(4);

var Buffer = __webpack_require__(6).Buffer;

var Base = __webpack_require__(49);

var ZEROS = Buffer.alloc(128);
var blocksize = 64;

function Hmac(alg, key) {
  Base.call(this, 'digest');

  if (typeof key === 'string') {
    key = Buffer.from(key);
  }

  this._alg = alg;
  this._key = key;

  if (key.length > blocksize) {
    key = alg(key);
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize);
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize);
  var opad = this._opad = Buffer.allocUnsafe(blocksize);

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36;
    opad[i] = key[i] ^ 0x5C;
  }

  this._hash = [ipad];
}

inherits(Hmac, Base);

Hmac.prototype._update = function (data) {
  this._hash.push(data);
};

Hmac.prototype._final = function () {
  var h = this._alg(Buffer.concat(this._hash));

  return this._alg(Buffer.concat([this._opad, h]));
};

module.exports = Hmac;

/***/ }),
/* 466 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var MD5 = __webpack_require__(136);

module.exports = function (buffer) {
  return new MD5().update(buffer).digest();
};

/***/ }),
/* 467 */
/***/ (function(module) {

module.exports = JSON.parse("{\"sha1\":{\"securityStrength\":128,\"outlen\":160,\"seedlen\":440},\"sha224\":{\"securityStrength\":192,\"outlen\":224,\"seedlen\":440},\"sha256\":{\"securityStrength\":256,\"outlen\":256,\"seedlen\":440},\"sha384\":{\"securityStrength\":256,\"outlen\":384,\"seedlen\":888},\"sha512\":{\"securityStrength\":256,\"outlen\":512,\"seedlen\":888}}");

/***/ }),
/* 468 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.umulTo10x10 = function (num1, num2, out) {
  var a = num1.words;
  var b = num2.words;
  var o = out.words;
  var c = 0;
  var lo;
  var mid;
  var hi;
  var a0 = a[0] | 0;
  var al0 = a0 & 0x1fff;
  var ah0 = a0 >>> 13;
  var a1 = a[1] | 0;
  var al1 = a1 & 0x1fff;
  var ah1 = a1 >>> 13;
  var a2 = a[2] | 0;
  var al2 = a2 & 0x1fff;
  var ah2 = a2 >>> 13;
  var a3 = a[3] | 0;
  var al3 = a3 & 0x1fff;
  var ah3 = a3 >>> 13;
  var a4 = a[4] | 0;
  var al4 = a4 & 0x1fff;
  var ah4 = a4 >>> 13;
  var a5 = a[5] | 0;
  var al5 = a5 & 0x1fff;
  var ah5 = a5 >>> 13;
  var a6 = a[6] | 0;
  var al6 = a6 & 0x1fff;
  var ah6 = a6 >>> 13;
  var a7 = a[7] | 0;
  var al7 = a7 & 0x1fff;
  var ah7 = a7 >>> 13;
  var a8 = a[8] | 0;
  var al8 = a8 & 0x1fff;
  var ah8 = a8 >>> 13;
  var a9 = a[9] | 0;
  var al9 = a9 & 0x1fff;
  var ah9 = a9 >>> 13;
  var b0 = b[0] | 0;
  var bl0 = b0 & 0x1fff;
  var bh0 = b0 >>> 13;
  var b1 = b[1] | 0;
  var bl1 = b1 & 0x1fff;
  var bh1 = b1 >>> 13;
  var b2 = b[2] | 0;
  var bl2 = b2 & 0x1fff;
  var bh2 = b2 >>> 13;
  var b3 = b[3] | 0;
  var bl3 = b3 & 0x1fff;
  var bh3 = b3 >>> 13;
  var b4 = b[4] | 0;
  var bl4 = b4 & 0x1fff;
  var bh4 = b4 >>> 13;
  var b5 = b[5] | 0;
  var bl5 = b5 & 0x1fff;
  var bh5 = b5 >>> 13;
  var b6 = b[6] | 0;
  var bl6 = b6 & 0x1fff;
  var bh6 = b6 >>> 13;
  var b7 = b[7] | 0;
  var bl7 = b7 & 0x1fff;
  var bh7 = b7 >>> 13;
  var b8 = b[8] | 0;
  var bl8 = b8 & 0x1fff;
  var bh8 = b8 >>> 13;
  var b9 = b[9] | 0;
  var bl9 = b9 & 0x1fff;
  var bh9 = b9 >>> 13;
  out.length = 19;
  /* k = 0 */

  lo = Math.imul(al0, bl0);
  mid = Math.imul(al0, bh0);
  mid += Math.imul(ah0, bl0);
  hi = Math.imul(ah0, bh0);
  var w0 = c + lo + ((mid & 0x1fff) << 13);
  c = hi + (mid >>> 13) + (w0 >>> 26);
  w0 &= 0x3ffffff;
  /* k = 1 */

  lo = Math.imul(al1, bl0);
  mid = Math.imul(al1, bh0);
  mid += Math.imul(ah1, bl0);
  hi = Math.imul(ah1, bh0);
  lo += Math.imul(al0, bl1);
  mid += Math.imul(al0, bh1);
  mid += Math.imul(ah0, bl1);
  hi += Math.imul(ah0, bh1);
  var w1 = c + lo + ((mid & 0x1fff) << 13);
  c = hi + (mid >>> 13) + (w1 >>> 26);
  w1 &= 0x3ffffff;
  /* k = 2 */

  lo = Math.imul(al2, bl0);
  mid = Math.imul(al2, bh0);
  mid += Math.imul(ah2, bl0);
  hi = Math.imul(ah2, bh0);
  lo += Math.imul(al1, bl1);
  mid += Math.imul(al1, bh1);
  mid += Math.imul(ah1, bl1);
  hi += Math.imul(ah1, bh1);
  lo += Math.imul(al0, bl2);
  mid += Math.imul(al0, bh2);
  mid += Math.imul(ah0, bl2);
  hi += Math.imul(ah0, bh2);
  var w2 = c + lo + ((mid & 0x1fff) << 13);
  c = hi + (mid >>> 13) + (w2 >>> 26);
  w2 &= 0x3ffffff;
  /* k = 3 */

  lo = Math.imul(al3, bl0);
  mid = Math.imul(al3, bh0);
  mid += Math.imul(ah3, bl0);
  hi = Math.imul(ah3, bh0);
  lo += Math.imul(al2, bl1);
  mid += Math.imul(al2, bh1);
  mid += Math.imul(ah2, bl1);
  hi += Math.imul(ah2, bh1);
  lo += Math.imul(al1, bl2);
  mid += Math.imul(al1, bh2);
  mid += Math.imul(ah1, bl2);
  hi += Math.imul(ah1, bh2);
  lo += Math.imul(al0, bl3);
  mid += Math.imul(al0, bh3);
  mid += Math.imul(ah0, bl3);
  hi += Math.imul(ah0, bh3);
  var w3 = c + lo + ((mid & 0x1fff) << 13);
  c = hi + (mid >>> 13) + (w3 >>> 26);
  w3 &= 0x3ffffff;
  /* k = 4 */

  lo = Math.imul(al4, bl0);
  mid = Math.imul(al4, bh0);
  mid += Math.imul(ah4, bl0);
  hi = Math.imul(ah4, bh0);
  lo += Math.imul(al3, bl1);
  mid += Math.imul(al3, bh1);
  mid += Math.imul(ah3, bl1);
  hi += Math.imul(ah3, bh1);
  lo += Math.imul(al2, bl2);
  mid += Math.imul(al2, bh2);
  mid += Math.imul(ah2, bl2);
  hi += Math.imul(ah2, bh2);
  lo += Math.imul(al1, bl3);
  mid += Math.imul(al1, bh3);
  mid += Math.imul(ah1, bl3);
  hi += Math.imul(ah1, bh3);
  lo += Math.imul(al0, bl4);
  mid += Math.imul(al0, bh4);
  mid += Math.imul(ah0, bl4);
  hi += Math.imul(ah0, bh4);
  var w4 = c + lo + ((mid & 0x1fff) << 13);
  c = hi + (mid >>> 13) + (w4 >>> 26);
  w4 &= 0x3ffffff;
  /* k = 5 */

  lo = Math.imul(al5, bl0);
  mid = Math.imul(al5, bh0);
  mid += Math.imul(ah5, bl0);
  hi = Math.imul(ah5, bh0);
  lo += Math.imul(al4, bl1);
  mid += Math.imul(al4, bh1);
  mid += Math.imul(ah4, bl1);
  hi += Math.imul(ah4, bh1);
  lo += Math.imul(al3, bl2);
  mid += Math.imul(al3, bh2);
  mid += Math.imul(ah3, bl2);
  hi += Math.imul(ah3, bh2);
  lo += Math.imul(al2, bl3);
  mid += Math.imul(al2, bh3);
  mid += Math.imul(ah2, bl3);
  hi += Math.imul(ah2, bh3);
  lo += Math.imul(al1, bl4);
  mid += Math.imul(al1, bh4);
  mid += Math.imul(ah1, bl4);
  hi += Math.imul(ah1, bh4);
  lo += Math.imul(al0, bl5);
  mid += Math.imul(al0, bh5);
  mid += Math.imul(ah0, bl5);
  hi += Math.imul(ah0, bh5);
  var w5 = c + lo + ((mid & 0x1fff) << 13);
  c = hi + (mid >>> 13) + (w5 >>> 26);
  w5 &= 0x3ffffff;
  /* k = 6 */

  lo = Math.imul(al6, bl0);
  mid = Math.imul(al6, bh0);
  mid += Math.imul(ah6, bl0);
  hi = Math.imul(ah6, bh0);
  lo += Math.imul(al5, bl1);
  mid += Math.imul(al5, bh1);
  mid += Math.imul(ah5, bl1);
  hi += Math.imul(ah5, bh1);
  lo += Math.imul(al4, bl2);
  mid += Math.imul(al4, bh2);
  mid += Math.imul(ah4, bl2);
  hi += Math.imul(ah4, bh2);
  lo += Math.imul(al3, bl3);
  mid += Math.imul(al3, bh3);
  mid += Math.imul(ah3, bl3);
  hi += Math.imul(ah3, bh3);
  lo += Math.imul(al2, bl4);
  mid += Math.imul(al2, bh4);
  mid += Math.imul(ah2, bl4);
  hi += Math.imul(ah2, bh4);
  lo += Math.imul(al1, bl5);
  mid += Math.imul(al1, bh5);
  mid += Math.imul(ah1, bl5);
  hi += Math.imul(ah1, bh5);
  lo += Math.imul(al0, bl6);
  mid += Math.imul(al0, bh6);
  mid += Math.imul(ah0, bl6);
  hi += Math.imul(ah0, bh6);
  var w6 = c + lo + ((mid & 0x1fff) << 13);
  c = hi + (mid >>> 13) + (w6 >>> 26);
  w6 &= 0x3ffffff;
  /* k = 7 */

  lo = Math.imul(al7, bl0);
  mid = Math.imul(al7, bh0);
  mid += Math.imul(ah7, bl0);
  hi = Math.imul(ah7, bh0);
  lo += Math.imul(al6, bl1);
  mid += Math.imul(al6, bh1);
  mid += Math.imul(ah6, bl1);
  hi += Math.imul(ah6, bh1);
  lo += Math.imul(al5, bl2);
  mid += Math.imul(al5, bh2);
  mid += Math.imul(ah5, bl2);
  hi += Math.imul(ah5, bh2);
  lo += Math.imul(al4, bl3);
  mid += Math.imul(al4, bh3);
  mid += Math.imul(ah4, bl3);
  hi += Math.imul(ah4, bh3);
  lo += Math.imul(al3, bl4);
  mid += Math.imul(al3, bh4);
  mid += Math.imul(ah3, bl4);
  hi += Math.imul(ah3, bh4);
  lo += Math.imul(al2, bl5);
  mid += Math.imul(al2, bh5);
  mid += Math.imul(ah2, bl5);
  hi += Math.imul(ah2, bh5);
  lo += Math.imul(al1, bl6);
  mid += Math.imul(al1, bh6);
  mid += Math.imul(ah1, bl6);
  hi += Math.imul(ah1, bh6);
  lo += Math.imul(al0, bl7);
  mid += Math.imul(al0, bh7);
  mid += Math.imul(ah0, bl7);
  hi += Math.imul(ah0, bh7);
  var w7 = c + lo + ((mid & 0x1fff) << 13);
  c = hi + (mid >>> 13) + (w7 >>> 26);
  w7 &= 0x3ffffff;
  /* k = 8 */

  lo = Math.imul(al8, bl0);
  mid = Math.imul(al8, bh0);
  mid += Math.imul(ah8, bl0);
  hi = Math.imul(ah8, bh0);
  lo += Math.imul(al7, bl1);
  mid += Math.imul(al7, bh1);
  mid += Math.imul(ah7, bl1);
  hi += Math.imul(ah7, bh1);
  lo += Math.imul(al6, bl2);
  mid += Math.imul(al6, bh2);
  mid += Math.imul(ah6, bl2);
  hi += Math.imul(ah6, bh2);
  lo += Math.imul(al5, bl3);
  mid += Math.imul(al5, bh3);
  mid += Math.imul(ah5, bl3);
  hi += Math.imul(ah5, bh3);
  lo += Math.imul(al4, bl4);
  mid += Math.imul(al4, bh4);
  mid += Math.imul(ah4, bl4);
  hi += Math.imul(ah4, bh4);
  lo += Math.imul(al3, bl5);
  mid += Math.imul(al3, bh5);
  mid += Math.imul(ah3, bl5);
  hi += Math.imul(ah3, bh5);
  lo += Math.imul(al2, bl6);
  mid += Math.imul(al2, bh6);
  mid += Math.imul(ah2, bl6);
  hi += Math.imul(ah2, bh6);
  lo += Math.imul(al1, bl7);
  mid += Math.imul(al1, bh7);
  mid += Math.imul(ah1, bl7);
  hi += Math.imul(ah1, bh7);
  lo += Math.imul(al0, bl8);
  mid += Math.imul(al0, bh8);
  mid += Math.imul(ah0, bl8);
  hi += Math.imul(ah0, bh8);
  var w8 = c + lo + ((mid & 0x1fff) << 13);
  c = hi + (mid >>> 13) + (w8 >>> 26);
  w8 &= 0x3ffffff;
  /* k = 9 */

  lo = Math.imul(al9, bl0);
  mid = Math.imul(al9, bh0);
  mid += Math.imul(ah9, bl0);
  hi = Math.imul(ah9, bh0);
  lo += Math.imul(al8, bl1);
  mid += Math.imul(al8, bh1);
  mid += Math.imul(ah8, bl1);
  hi += Math.imul(ah8, bh1);
  lo += Math.imul(al7, bl2);
  mid += Math.imul(al7, bh2);
  mid += Math.imul(ah7, bl2);
  hi += Math.imul(ah7, bh2);
  lo += Math.imul(al6, bl3);
  mid += Math.imul(al6, bh3);
  mid += Math.imul(ah6, bl3);
  hi += Math.imul(ah6, bh3);
  lo += Math.imul(al5, bl4);
  mid += Math.imul(al5, bh4);
  mid += Math.imul(ah5, bl4);
  hi += Math.imul(ah5, bh4);
  lo += Math.imul(al4, bl5);
  mid += Math.imul(al4, bh5);
  mid += Math.imul(ah4, bl5);
  hi += Math.imul(ah4, bh5);
  lo += Math.imul(al3, bl6);
  mid += Math.imul(al3, bh6);
  mid += Math.imul(ah3, bl6);
  hi += Math.imul(ah3, bh6);
  lo += Math.imul(al2, bl7);
  mid += Math.imul(al2, bh7);
  mid += Math.imul(ah2, bl7);
  hi += Math.imul(ah2, bh7);
  lo += Math.imul(al1, bl8);
  mid += Math.imul(al1, bh8);
  mid += Math.imul(ah1, bl8);
  hi += Math.imul(ah1, bh8);
  lo += Math.imul(al0, bl9);
  mid += Math.imul(al0, bh9);
  mid += Math.imul(ah0, bl9);
  hi += Math.imul(ah0, bh9);
  var w9 = c + lo + ((mid & 0x1fff) << 13);
  c = hi + (mid >>> 13) + (w9 >>> 26);
  w9 &= 0x3ffffff;
  /* k = 10 */

  lo = Math.imul(al9, bl1);
  mid = Math.imul(al9, bh1);
  mid += Math.imul(ah9, bl1);
  hi = Math.imul(ah9, bh1);
  lo += Math.imul(al8, bl2);
  mid += Math.imul(al8, bh2);
  mid += Math.imul(ah8, bl2);
  hi += Math.imul(ah8, bh2);
  lo += Math.imul(al7, bl3);
  mid += Math.imul(al7, bh3);
  mid += Math.imul(ah7, bl3);
  hi += Math.imul(ah7, bh3);
  lo += Math.imul(al6, bl4);
  mid += Math.imul(al6, bh4);
  mid += Math.imul(ah6, bl4);
  hi += Math.imul(ah6, bh4);
  lo += Math.imul(al5, bl5);
  mid += Math.imul(al5, bh5);
  mid += Math.imul(ah5, bl5);
  hi += Math.imul(ah5, bh5);
  lo += Math.imul(al4, bl6);
  mid += Math.imul(al4, bh6);
  mid += Math.imul(ah4, bl6);
  hi += Math.imul(ah4, bh6);
  lo += Math.imul(al3, bl7);
  mid += Math.imul(al3, bh7);
  mid += Math.imul(ah3, bl7);
  hi += Math.imul(ah3, bh7);
  lo += Math.imul(al2, bl8);
  mid += Math.imul(al2, bh8);
  mid += Math.imul(ah2, bl8);
  hi += Math.imul(ah2, bh8);
  lo += Math.imul(al1, bl9);
  mid += Math.imul(al1, bh9);
  mid += Math.imul(ah1, bl9);
  hi += Math.imul(ah1, bh9);
  var w10 = c + lo + ((mid & 0x1fff) << 13);
  c = hi + (mid >>> 13) + (w10 >>> 26);
  w10 &= 0x3ffffff;
  /* k = 11 */

  lo = Math.imul(al9, bl2);
  mid = Math.imul(al9, bh2);
  mid += Math.imul(ah9, bl2);
  hi = Math.imul(ah9, bh2);
  lo += Math.imul(al8, bl3);
  mid += Math.imul(al8, bh3);
  mid += Math.imul(ah8, bl3);
  hi += Math.imul(ah8, bh3);
  lo += Math.imul(al7, bl4);
  mid += Math.imul(al7, bh4);
  mid += Math.imul(ah7, bl4);
  hi += Math.imul(ah7, bh4);
  lo += Math.imul(al6, bl5);
  mid += Math.imul(al6, bh5);
  mid += Math.imul(ah6, bl5);
  hi += Math.imul(ah6, bh5);
  lo += Math.imul(al5, bl6);
  mid += Math.imul(al5, bh6);
  mid += Math.imul(ah5, bl6);
  hi += Math.imul(ah5, bh6);
  lo += Math.imul(al4, bl7);
  mid += Math.imul(al4, bh7);
  mid += Math.imul(ah4, bl7);
  hi += Math.imul(ah4, bh7);
  lo += Math.imul(al3, bl8);
  mid += Math.imul(al3, bh8);
  mid += Math.imul(ah3, bl8);
  hi += Math.imul(ah3, bh8);
  lo += Math.imul(al2, bl9);
  mid += Math.imul(al2, bh9);
  mid += Math.imul(ah2, bl9);
  hi += Math.imul(ah2, bh9);
  var w11 = c + lo + ((mid & 0x1fff) << 13);
  c = hi + (mid >>> 13) + (w11 >>> 26);
  w11 &= 0x3ffffff;
  /* k = 12 */

  lo = Math.imul(al9, bl3);
  mid = Math.imul(al9, bh3);
  mid += Math.imul(ah9, bl3);
  hi = Math.imul(ah9, bh3);
  lo += Math.imul(al8, bl4);
  mid += Math.imul(al8, bh4);
  mid += Math.imul(ah8, bl4);
  hi += Math.imul(ah8, bh4);
  lo += Math.imul(al7, bl5);
  mid += Math.imul(al7, bh5);
  mid += Math.imul(ah7, bl5);
  hi += Math.imul(ah7, bh5);
  lo += Math.imul(al6, bl6);
  mid += Math.imul(al6, bh6);
  mid += Math.imul(ah6, bl6);
  hi += Math.imul(ah6, bh6);
  lo += Math.imul(al5, bl7);
  mid += Math.imul(al5, bh7);
  mid += Math.imul(ah5, bl7);
  hi += Math.imul(ah5, bh7);
  lo += Math.imul(al4, bl8);
  mid += Math.imul(al4, bh8);
  mid += Math.imul(ah4, bl8);
  hi += Math.imul(ah4, bh8);
  lo += Math.imul(al3, bl9);
  mid += Math.imul(al3, bh9);
  mid += Math.imul(ah3, bl9);
  hi += Math.imul(ah3, bh9);
  var w12 = c + lo + ((mid & 0x1fff) << 13);
  c = hi + (mid >>> 13) + (w12 >>> 26);
  w12 &= 0x3ffffff;
  /* k = 13 */

  lo = Math.imul(al9, bl4);
  mid = Math.imul(al9, bh4);
  mid += Math.imul(ah9, bl4);
  hi = Math.imul(ah9, bh4);
  lo += Math.imul(al8, bl5);
  mid += Math.imul(al8, bh5);
  mid += Math.imul(ah8, bl5);
  hi += Math.imul(ah8, bh5);
  lo += Math.imul(al7, bl6);
  mid += Math.imul(al7, bh6);
  mid += Math.imul(ah7, bl6);
  hi += Math.imul(ah7, bh6);
  lo += Math.imul(al6, bl7);
  mid += Math.imul(al6, bh7);
  mid += Math.imul(ah6, bl7);
  hi += Math.imul(ah6, bh7);
  lo += Math.imul(al5, bl8);
  mid += Math.imul(al5, bh8);
  mid += Math.imul(ah5, bl8);
  hi += Math.imul(ah5, bh8);
  lo += Math.imul(al4, bl9);
  mid += Math.imul(al4, bh9);
  mid += Math.imul(ah4, bl9);
  hi += Math.imul(ah4, bh9);
  var w13 = c + lo + ((mid & 0x1fff) << 13);
  c = hi + (mid >>> 13) + (w13 >>> 26);
  w13 &= 0x3ffffff;
  /* k = 14 */

  lo = Math.imul(al9, bl5);
  mid = Math.imul(al9, bh5);
  mid += Math.imul(ah9, bl5);
  hi = Math.imul(ah9, bh5);
  lo += Math.imul(al8, bl6);
  mid += Math.imul(al8, bh6);
  mid += Math.imul(ah8, bl6);
  hi += Math.imul(ah8, bh6);
  lo += Math.imul(al7, bl7);
  mid += Math.imul(al7, bh7);
  mid += Math.imul(ah7, bl7);
  hi += Math.imul(ah7, bh7);
  lo += Math.imul(al6, bl8);
  mid += Math.imul(al6, bh8);
  mid += Math.imul(ah6, bl8);
  hi += Math.imul(ah6, bh8);
  lo += Math.imul(al5, bl9);
  mid += Math.imul(al5, bh9);
  mid += Math.imul(ah5, bl9);
  hi += Math.imul(ah5, bh9);
  var w14 = c + lo + ((mid & 0x1fff) << 13);
  c = hi + (mid >>> 13) + (w14 >>> 26);
  w14 &= 0x3ffffff;
  /* k = 15 */

  lo = Math.imul(al9, bl6);
  mid = Math.imul(al9, bh6);
  mid += Math.imul(ah9, bl6);
  hi = Math.imul(ah9, bh6);
  lo += Math.imul(al8, bl7);
  mid += Math.imul(al8, bh7);
  mid += Math.imul(ah8, bl7);
  hi += Math.imul(ah8, bh7);
  lo += Math.imul(al7, bl8);
  mid += Math.imul(al7, bh8);
  mid += Math.imul(ah7, bl8);
  hi += Math.imul(ah7, bh8);
  lo += Math.imul(al6, bl9);
  mid += Math.imul(al6, bh9);
  mid += Math.imul(ah6, bl9);
  hi += Math.imul(ah6, bh9);
  var w15 = c + lo + ((mid & 0x1fff) << 13);
  c = hi + (mid >>> 13) + (w15 >>> 26);
  w15 &= 0x3ffffff;
  /* k = 16 */

  lo = Math.imul(al9, bl7);
  mid = Math.imul(al9, bh7);
  mid += Math.imul(ah9, bl7);
  hi = Math.imul(ah9, bh7);
  lo += Math.imul(al8, bl8);
  mid += Math.imul(al8, bh8);
  mid += Math.imul(ah8, bl8);
  hi += Math.imul(ah8, bh8);
  lo += Math.imul(al7, bl9);
  mid += Math.imul(al7, bh9);
  mid += Math.imul(ah7, bl9);
  hi += Math.imul(ah7, bh9);
  var w16 = c + lo + ((mid & 0x1fff) << 13);
  c = hi + (mid >>> 13) + (w16 >>> 26);
  w16 &= 0x3ffffff;
  /* k = 17 */

  lo = Math.imul(al9, bl8);
  mid = Math.imul(al9, bh8);
  mid += Math.imul(ah9, bl8);
  hi = Math.imul(ah9, bh8);
  lo += Math.imul(al8, bl9);
  mid += Math.imul(al8, bh9);
  mid += Math.imul(ah8, bl9);
  hi += Math.imul(ah8, bh9);
  var w17 = c + lo + ((mid & 0x1fff) << 13);
  c = hi + (mid >>> 13) + (w17 >>> 26);
  w17 &= 0x3ffffff;
  /* k = 18 */

  lo = Math.imul(al9, bl9);
  mid = Math.imul(al9, bh9);
  mid += Math.imul(ah9, bl9);
  hi = Math.imul(ah9, bh9);
  var w18 = c + lo + ((mid & 0x1fff) << 13);
  c = hi + (mid >>> 13) + (w18 >>> 26);
  w18 &= 0x3ffffff;
  o[0] = w0;
  o[1] = w1;
  o[2] = w2;
  o[3] = w3;
  o[4] = w4;
  o[5] = w5;
  o[6] = w6;
  o[7] = w7;
  o[8] = w8;
  o[9] = w9;
  o[10] = w10;
  o[11] = w11;
  o[12] = w12;
  o[13] = w13;
  o[14] = w14;
  o[15] = w15;
  o[16] = w16;
  o[17] = w17;
  o[18] = w18;

  if (c !== 0) {
    o[19] = c;
    out.length++;
  }

  return out;
};

/***/ }),
/* 469 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Buffer = __webpack_require__(6).Buffer;

var BN = __webpack_require__(97);

var ECPoint = __webpack_require__(225);

var ECJPoint = __webpack_require__(226);

function ECPointG() {
  this.x = BN.fromBuffer(Buffer.from('79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798', 'hex'));
  this.y = BN.fromBuffer(Buffer.from('483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8', 'hex'));
  this.inf = false;

  this._precompute();
}

ECPointG.prototype._precompute = function () {
  var ecpoint = new ECPoint(this.x, this.y);
  var dstep = 4;
  var points = new Array(1 + Math.ceil(257 / dstep));
  var acc = points[0] = ecpoint;

  for (var i = 1; i < points.length; ++i) {
    for (var j = 0; j < dstep; j++) acc = acc.dbl();

    points[i] = acc;
  }

  this.precomputed = {
    naf: ecpoint._getNAFPoints(7),
    doubles: {
      step: dstep,
      points: points,
      negpoints: points.map(function (p) {
        return p.neg();
      })
    }
  };
};

ECPointG.prototype.mul = function (num) {
  // Algorithm 3.42 Fixed-base NAF windowing method for point multiplication
  var step = this.precomputed.doubles.step;
  var points = this.precomputed.doubles.points;
  var negpoints = this.precomputed.doubles.negpoints;
  var naf = num.getNAF(1);
  var I = ((1 << step + 1) - (step % 2 === 0 ? 2 : 1)) / 3; // Translate into more windowed form

  var repr = [];

  for (var j = 0; j < naf.length; j += step) {
    var nafW = 0;

    for (var k = j + step - 1; k >= j; k--) nafW = (nafW << 1) + naf[k];

    repr.push(nafW);
  }

  var a = new ECJPoint(null, null, null);
  var b = new ECJPoint(null, null, null);

  for (var i = I; i > 0; i--) {
    for (var jj = 0; jj < repr.length; jj++) {
      if (repr[jj] === i) {
        b = b.mixedAdd(points[jj]);
      } else if (repr[jj] === -i) {
        b = b.mixedAdd(negpoints[jj]);
      }
    }

    a = a.add(b);
  }

  return ECPoint.fromECJPoint(a);
};

ECPointG.prototype.mulAdd = function (k1, p2, k2) {
  var nafPointsP1 = this.precomputed.naf;

  var nafPointsP2 = p2._getNAFPoints1();

  var wnd = [nafPointsP1.points, nafPointsP2.points];
  var naf = [k1.getNAF(nafPointsP1.wnd), k2.getNAF(nafPointsP2.wnd)];
  var acc = new ECJPoint(null, null, null);
  var tmp = [null, null];

  for (var i = Math.max(naf[0].length, naf[1].length); i >= 0; i--) {
    var k = 0;

    for (; i >= 0; ++k, --i) {
      tmp[0] = naf[0][i] | 0;
      tmp[1] = naf[1][i] | 0;
      if (tmp[0] !== 0 || tmp[1] !== 0) break;
    }

    if (i >= 0) k += 1;
    acc = acc.dblp(k);
    if (i < 0) break;

    for (var jj = 0; jj < 2; jj++) {
      var z = tmp[jj];
      var p;

      if (z === 0) {
        continue;
      } else if (z > 0) {
        p = wnd[jj][z >> 1];
      } else if (z < 0) {
        p = wnd[jj][-z >> 1].neg();
      } // hack: ECPoint detection


      if (p.z === undefined) {
        acc = acc.mixedAdd(p);
      } else {
        acc = acc.add(p);
      }
    }
  }

  return acc;
};

module.exports = new ECPointG();

/***/ }),
/* 470 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const errcode = __webpack_require__(35);

const hmac = __webpack_require__(227);

const cipherMap = {
  'AES-128': {
    ivSize: 16,
    keySize: 16
  },
  'AES-256': {
    ivSize: 16,
    keySize: 32
  },
  Blowfish: {
    ivSize: 8,
    cipherKeySize: 32
  }
}; // Generates a set of keys for each party by stretching the shared key.
// (myIV, theirIV, myCipherKey, theirCipherKey, myMACKey, theirMACKey)

module.exports = async (cipherType, hash, secret) => {
  const cipher = cipherMap[cipherType];

  if (!cipher) {
    const allowed = Object.keys(cipherMap).join(' / ');
    throw errcode(new Error("unknown cipher type '".concat(cipherType, "'. Must be ").concat(allowed)), 'ERR_INVALID_CIPHER_TYPE');
  }

  if (!hash) {
    throw errcode(new Error('missing hash type'), 'ERR_MISSING_HASH_TYPE');
  }

  const cipherKeySize = cipher.keySize;
  const ivSize = cipher.ivSize;
  const hmacKeySize = 20;
  const seed = Buffer.from('key expansion');
  const resultLength = 2 * (ivSize + cipherKeySize + hmacKeySize);
  const m = await hmac.create(hash, secret);
  let a = await m.digest(seed);
  const result = [];
  let j = 0;

  while (j < resultLength) {
    const b = await m.digest(Buffer.concat([a, seed]));
    let todo = b.length;

    if (j + todo > resultLength) {
      todo = resultLength - j;
    }

    result.push(b);
    j += todo;
    a = await m.digest(a);
  }

  const half = resultLength / 2;
  const resultBuffer = Buffer.concat(result);
  const r1 = resultBuffer.slice(0, half);
  const r2 = resultBuffer.slice(half, resultLength);

  const createKey = res => ({
    iv: res.slice(0, ivSize),
    cipherKey: res.slice(ivSize, ivSize + cipherKeySize),
    macKey: res.slice(ivSize + cipherKeySize)
  });

  return {
    k1: createKey(r1),
    k2: createKey(r2)
  };
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 471 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  SHA1: 20,
  SHA256: 32,
  SHA512: 64
};

/***/ }),
/* 472 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const ecdh = __webpack_require__(473); // Generates an ephemeral public key and returns a function that will compute
// the shared secret key.
//
// Focuses only on ECDH now, but can be made more general in the future.


module.exports = async curve => ecdh.generateEphmeralKeyPair(curve); // eslint-disable-line require-await

/***/ }),
/* 473 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const errcode = __webpack_require__(35);

const webcrypto = __webpack_require__(129);

const BN = __webpack_require__(131).bignum;

const {
  toBase64,
  toBn
} = __webpack_require__(210);

const validateCurveType = __webpack_require__(474);

const bits = {
  'P-256': 256,
  'P-384': 384,
  'P-521': 521
};

exports.generateEphmeralKeyPair = async function (curve) {
  validateCurveType(Object.keys(bits), curve);
  const pair = await webcrypto.get().subtle.generateKey({
    name: 'ECDH',
    namedCurve: curve
  }, true, ['deriveBits']); // forcePrivate is used for testing only

  const genSharedKey = async (theirPub, forcePrivate) => {
    let privateKey;

    if (forcePrivate) {
      privateKey = await webcrypto.get().subtle.importKey('jwk', unmarshalPrivateKey(curve, forcePrivate), {
        name: 'ECDH',
        namedCurve: curve
      }, false, ['deriveBits']);
    } else {
      privateKey = pair.privateKey;
    }

    const keys = [await webcrypto.get().subtle.importKey('jwk', unmarshalPublicKey(curve, theirPub), {
      name: 'ECDH',
      namedCurve: curve
    }, false, []), privateKey];
    return Buffer.from((await webcrypto.get().subtle.deriveBits({
      name: 'ECDH',
      namedCurve: curve,
      public: keys[0]
    }, keys[1], bits[curve])));
  };

  const publicKey = await webcrypto.get().subtle.exportKey('jwk', pair.publicKey);
  return {
    key: marshalPublicKey(publicKey),
    genSharedKey
  };
};

const curveLengths = {
  'P-256': 32,
  'P-384': 48,
  'P-521': 66
}; // Marshal converts a jwk encodec ECDH public key into the
// form specified in section 4.3.6 of ANSI X9.62. (This is the format
// go-ipfs uses)

function marshalPublicKey(jwk) {
  const byteLen = curveLengths[jwk.crv];
  return Buffer.concat([Buffer.from([4]), // uncompressed point
  toBn(jwk.x).toArrayLike(Buffer, 'be', byteLen), toBn(jwk.y).toArrayLike(Buffer, 'be', byteLen)], 1 + byteLen * 2);
} // Unmarshal converts a point, serialized by Marshal, into an jwk encoded key


function unmarshalPublicKey(curve, key) {
  const byteLen = curveLengths[curve];

  if (!key.slice(0, 1).equals(Buffer.from([4]))) {
    throw errcode(new Error('Cannot unmarshal public key - invalid key format'), 'ERR_INVALID_KEY_FORMAT');
  }

  const x = new BN(key.slice(1, byteLen + 1));
  const y = new BN(key.slice(1 + byteLen));
  return {
    kty: 'EC',
    crv: curve,
    x: toBase64(x, byteLen),
    y: toBase64(y, byteLen),
    ext: true
  };
}

function unmarshalPrivateKey(curve, key) {
  const result = unmarshalPublicKey(curve, key.public);
  result.d = toBase64(new BN(key.private));
  return result;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 474 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const errcode = __webpack_require__(35);

module.exports = function (curveTypes, type) {
  if (!curveTypes.includes(type)) {
    const names = curveTypes.join(' / ');
    throw errcode(new Error("Unknown curve: ".concat(type, ". Must be ").concat(names)), 'ERR_INVALID_CURVE');
  }
};

/***/ }),
/* 475 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

/* eslint-disable no-unused-vars */

var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
  if (val === null || val === undefined) {
    throw new TypeError('Object.assign cannot be called with null or undefined');
  }

  return Object(val);
}

function shouldUseNative() {
  try {
    if (!Object.assign) {
      return false;
    } // Detect buggy property enumeration order in older V8 versions.
    // https://bugs.chromium.org/p/v8/issues/detail?id=4118


    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers

    test1[5] = 'de';

    if (Object.getOwnPropertyNames(test1)[0] === '5') {
      return false;
    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


    var test2 = {};

    for (var i = 0; i < 10; i++) {
      test2['_' + String.fromCharCode(i)] = i;
    }

    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
      return test2[n];
    });

    if (order2.join('') !== '0123456789') {
      return false;
    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


    var test3 = {};
    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
      test3[letter] = letter;
    });

    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
      return false;
    }

    return true;
  } catch (err) {
    // We don't expect any of the above to throw, but better to be safe.
    return false;
  }
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
  var from;
  var to = toObject(target);
  var symbols;

  for (var s = 1; s < arguments.length; s++) {
    from = Object(arguments[s]);

    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }

    if (getOwnPropertySymbols) {
      symbols = getOwnPropertySymbols(from);

      for (var i = 0; i < symbols.length; i++) {
        if (propIsEnumerable.call(from, symbols[i])) {
          to[symbols[i]] = from[symbols[i]];
        }
      }
    }
  }

  return to;
};

/***/ }),
/* 476 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object' && typeof arg.copy === 'function' && typeof arg.fill === 'function' && typeof arg.readUInt8 === 'function';
};

/***/ }),
/* 477 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;

    var TempCtor = function TempCtor() {};

    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  };
}

/***/ }),
/* 478 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const protons = __webpack_require__(24);

module.exports = protons("\n\nmessage PeerIdProto {\n  required bytes id = 1;\n  bytes pubKey = 2;\n  bytes privKey = 3;\n}\n\n");

/***/ }),
/* 479 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const convert = __webpack_require__(480);

const protocols = __webpack_require__(140);

const varint = __webpack_require__(19); // export codec


module.exports = {
  stringToStringTuples: stringToStringTuples,
  stringTuplesToString: stringTuplesToString,
  tuplesToStringTuples: tuplesToStringTuples,
  stringTuplesToTuples: stringTuplesToTuples,
  bufferToTuples: bufferToTuples,
  tuplesToBuffer: tuplesToBuffer,
  bufferToString: bufferToString,
  stringToBuffer: stringToBuffer,
  fromString: fromString,
  fromBuffer: fromBuffer,
  validateBuffer: validateBuffer,
  isValidBuffer: isValidBuffer,
  cleanPath: cleanPath,
  ParseError: ParseError,
  protoFromTuple: protoFromTuple,
  sizeForAddr: sizeForAddr
}; // string -> [[str name, str addr]... ]

function stringToStringTuples(str) {
  const tuples = [];
  const parts = str.split('/').slice(1); // skip first empty elem

  if (parts.length === 1 && parts[0] === '') {
    return [];
  }

  for (let p = 0; p < parts.length; p++) {
    const part = parts[p];
    const proto = protocols(part);

    if (proto.size === 0) {
      tuples.push([part]);
      continue;
    }

    p++; // advance addr part

    if (p >= parts.length) {
      throw ParseError('invalid address: ' + str);
    } // if it's a path proto, take the rest


    if (proto.path) {
      tuples.push([part, // TODO: should we need to check each path part to see if it's a proto?
      // This would allow for other protocols to be added after a unix path,
      // however it would have issues if the path had a protocol name in the path
      cleanPath(parts.slice(p).join('/'))]);
      break;
    }

    tuples.push([part, parts[p]]);
  }

  return tuples;
} // [[str name, str addr]... ] -> string


function stringTuplesToString(tuples) {
  const parts = [];
  tuples.map(tup => {
    const proto = protoFromTuple(tup);
    parts.push(proto.name);

    if (tup.length > 1) {
      parts.push(tup[1]);
    }
  });
  return cleanPath(parts.join('/'));
} // [[str name, str addr]... ] -> [[int code, Buffer]... ]


function stringTuplesToTuples(tuples) {
  return tuples.map(tup => {
    if (!Array.isArray(tup)) {
      tup = [tup];
    }

    const proto = protoFromTuple(tup);

    if (tup.length > 1) {
      return [proto.code, convert.toBuffer(proto.code, tup[1])];
    }

    return [proto.code];
  });
} // [[int code, Buffer]... ] -> [[str name, str addr]... ]


function tuplesToStringTuples(tuples) {
  return tuples.map(tup => {
    const proto = protoFromTuple(tup);

    if (tup.length > 1) {
      return [proto.code, convert.toString(proto.code, tup[1])];
    }

    return [proto.code];
  });
} // [[int code, Buffer ]... ] -> Buffer


function tuplesToBuffer(tuples) {
  return fromBuffer(Buffer.concat(tuples.map(tup => {
    const proto = protoFromTuple(tup);
    let buf = Buffer.from(varint.encode(proto.code));

    if (tup.length > 1) {
      buf = Buffer.concat([buf, tup[1]]); // add address buffer
    }

    return buf;
  })));
}

function sizeForAddr(p, addr) {
  if (p.size > 0) {
    return p.size / 8;
  } else if (p.size === 0) {
    return 0;
  } else {
    const size = varint.decode(addr);
    return size + varint.decode.bytes;
  }
} // Buffer -> [[int code, Buffer ]... ]


function bufferToTuples(buf) {
  const tuples = [];
  let i = 0;

  while (i < buf.length) {
    const code = varint.decode(buf, i);
    const n = varint.decode.bytes;
    const p = protocols(code);
    const size = sizeForAddr(p, buf.slice(i + n));

    if (size === 0) {
      tuples.push([code]);
      i += n;
      continue;
    }

    const addr = buf.slice(i + n, i + n + size);
    i += size + n;

    if (i > buf.length) {
      // did not end _exactly_ at buffer.length
      throw ParseError('Invalid address buffer: ' + buf.toString('hex'));
    } // ok, tuple seems good.


    tuples.push([code, addr]);
  }

  return tuples;
} // Buffer -> String


function bufferToString(buf) {
  const a = bufferToTuples(buf);
  const b = tuplesToStringTuples(a);
  return stringTuplesToString(b);
} // String -> Buffer


function stringToBuffer(str) {
  str = cleanPath(str);
  const a = stringToStringTuples(str);
  const b = stringTuplesToTuples(a);
  return tuplesToBuffer(b);
} // String -> Buffer


function fromString(str) {
  return stringToBuffer(str);
} // Buffer -> Buffer


function fromBuffer(buf) {
  const err = validateBuffer(buf);
  if (err) throw err;
  return Buffer.from(buf); // copy
}

function validateBuffer(buf) {
  try {
    bufferToTuples(buf); // try to parse. will throw if breaks
  } catch (err) {
    return err;
  }
}

function isValidBuffer(buf) {
  return validateBuffer(buf) === undefined;
}

function cleanPath(str) {
  return '/' + str.trim().split('/').filter(a => a).join('/');
}

function ParseError(str) {
  return new Error('Error parsing address: ' + str);
}

function protoFromTuple(tup) {
  const proto = protocols(tup[0]);
  return proto;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 480 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const ip = __webpack_require__(481);

const isIp = __webpack_require__(482);

const protocols = __webpack_require__(140);

const bs58 = __webpack_require__(39);

const CID = __webpack_require__(3);

const base32 = __webpack_require__(484);

const varint = __webpack_require__(19);

module.exports = Convert; // converts (serializes) addresses

function Convert(proto, a) {
  if (a instanceof Buffer) {
    return Convert.toString(proto, a);
  } else {
    return Convert.toBuffer(proto, a);
  }
}

Convert.toString = function convertToString(proto, buf) {
  proto = protocols(proto);

  switch (proto.code) {
    case 4: // ipv4

    case 41:
      // ipv6
      return buf2ip(buf);

    case 6: // tcp

    case 273: // udp

    case 33: // dccp

    case 132:
      // sctp
      return buf2port(buf);

    case 53: // dns

    case 54: // dns4

    case 55: // dns6

    case 56: // dnsaddr

    case 400:
      // unix
      return buf2str(buf);

    case 421:
      // ipfs
      return buf2mh(buf);

    case 444:
      // onion
      return buf2onion(buf);

    case 445:
      // onion3
      return buf2onion(buf);

    default:
      return buf.toString('hex');
    // no clue. convert to hex
  }
};

Convert.toBuffer = function convertToBuffer(proto, str) {
  proto = protocols(proto);

  switch (proto.code) {
    case 4:
      // ipv4
      return ip2buf(str);

    case 41:
      // ipv6
      return ip2buf(str);

    case 6: // tcp

    case 273: // udp

    case 33: // dccp

    case 132:
      // sctp
      return port2buf(parseInt(str, 10));

    case 53: // dns

    case 54: // dns4

    case 55: // dns6

    case 56: // dnsaddr

    case 400:
      // unix
      return str2buf(str);

    case 421:
      // ipfs
      return mh2buf(str);

    case 444:
      // onion
      return onion2buf(str);

    case 445:
      // onion3
      return onion32buf(str);

    default:
      return Buffer.from(str, 'hex');
    // no clue. convert from hex
  }
};

function ip2buf(ipString) {
  if (!isIp(ipString)) {
    throw new Error('invalid ip address');
  }

  return ip.toBuffer(ipString);
}

function buf2ip(ipBuff) {
  const ipString = ip.toString(ipBuff);

  if (!isIp(ipString)) {
    throw new Error('invalid ip address');
  }

  return ipString;
}

function port2buf(port) {
  const buf = Buffer.alloc(2);
  buf.writeUInt16BE(port, 0);
  return buf;
}

function buf2port(buf) {
  return buf.readUInt16BE(0);
}

function str2buf(str) {
  const buf = Buffer.from(str);
  const size = Buffer.from(varint.encode(buf.length));
  return Buffer.concat([size, buf]);
}

function buf2str(buf) {
  const size = varint.decode(buf);
  buf = buf.slice(varint.decode.bytes);

  if (buf.length !== size) {
    throw new Error('inconsistent lengths');
  }

  return buf.toString();
}

function mh2buf(hash) {
  // the address is a varint prefixed multihash string representation
  const mh = new CID(hash).multihash;
  const size = Buffer.from(varint.encode(mh.length));
  return Buffer.concat([size, mh]);
}

function buf2mh(buf) {
  const size = varint.decode(buf);
  const address = buf.slice(varint.decode.bytes);

  if (address.length !== size) {
    throw new Error('inconsistent lengths');
  }

  return bs58.encode(address);
}

function onion2buf(str) {
  const addr = str.split(':');

  if (addr.length !== 2) {
    throw new Error('failed to parse onion addr: ' + addr + ' does not contain a port number');
  }

  if (addr[0].length !== 16) {
    throw new Error('failed to parse onion addr: ' + addr[0] + ' not a Tor onion address.');
  }

  const buf = Buffer.from(base32.decode.asBytes(addr[0].toUpperCase())); // onion port number

  const port = parseInt(addr[1], 10);

  if (port < 1 || port > 65536) {
    throw new Error('Port number is not in range(1, 65536)');
  }

  const portBuf = port2buf(port);
  return Buffer.concat([buf, portBuf]);
}

function onion32buf(str) {
  const addr = str.split(':');

  if (addr.length !== 2) {
    throw new Error('failed to parse onion addr: ' + addr + ' does not contain a port number');
  }

  if (addr[0].length !== 56) {
    throw new Error('failed to parse onion addr: ' + addr[0] + ' not a Tor onion3 address.');
  }

  const buf = Buffer.from(base32.decode.asBytes(addr[0].toUpperCase())); // onion port number

  const port = parseInt(addr[1], 10);

  if (port < 1 || port > 65536) {
    throw new Error('Port number is not in range(1, 65536)');
  }

  const portBuf = port2buf(port);
  return Buffer.concat([buf, portBuf]);
}

function buf2onion(buf) {
  const addrBytes = buf.slice(0, buf.length - 2);
  const portBytes = buf.slice(buf.length - 2);
  const addr = base32.encode(addrBytes).toString('ascii').toLowerCase();
  const port = buf2port(portBytes);
  return addr + ':' + port;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 481 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var ip = exports;

var Buffer = __webpack_require__(0).Buffer;

var os = __webpack_require__(99);

ip.toBuffer = function (ip, buff, offset) {
  offset = ~~offset;
  var result;

  if (this.isV4Format(ip)) {
    result = buff || new Buffer(offset + 4);
    ip.split(/\./g).map(function (byte) {
      result[offset++] = parseInt(byte, 10) & 0xff;
    });
  } else if (this.isV6Format(ip)) {
    var sections = ip.split(':', 8);
    var i;

    for (i = 0; i < sections.length; i++) {
      var isv4 = this.isV4Format(sections[i]);
      var v4Buffer;

      if (isv4) {
        v4Buffer = this.toBuffer(sections[i]);
        sections[i] = v4Buffer.slice(0, 2).toString('hex');
      }

      if (v4Buffer && ++i < 8) {
        sections.splice(i, 0, v4Buffer.slice(2, 4).toString('hex'));
      }
    }

    if (sections[0] === '') {
      while (sections.length < 8) sections.unshift('0');
    } else if (sections[sections.length - 1] === '') {
      while (sections.length < 8) sections.push('0');
    } else if (sections.length < 8) {
      for (i = 0; i < sections.length && sections[i] !== ''; i++);

      var argv = [i, 1];

      for (i = 9 - sections.length; i > 0; i--) {
        argv.push('0');
      }

      sections.splice.apply(sections, argv);
    }

    result = buff || new Buffer(offset + 16);

    for (i = 0; i < sections.length; i++) {
      var word = parseInt(sections[i], 16);
      result[offset++] = word >> 8 & 0xff;
      result[offset++] = word & 0xff;
    }
  }

  if (!result) {
    throw Error('Invalid ip address: ' + ip);
  }

  return result;
};

ip.toString = function (buff, offset, length) {
  offset = ~~offset;
  length = length || buff.length - offset;
  var result = [];

  if (length === 4) {
    // IPv4
    for (var i = 0; i < length; i++) {
      result.push(buff[offset + i]);
    }

    result = result.join('.');
  } else if (length === 16) {
    // IPv6
    for (var i = 0; i < length; i += 2) {
      result.push(buff.readUInt16BE(offset + i).toString(16));
    }

    result = result.join(':');
    result = result.replace(/(^|:)0(:0)*:0(:|$)/, '$1::$3');
    result = result.replace(/:{3,4}/, '::');
  }

  return result;
};

var ipv4Regex = /^(\d{1,3}\.){3,3}\d{1,3}$/;
var ipv6Regex = /^(::)?(((\d{1,3}\.){3}(\d{1,3}){1})?([0-9a-f]){0,4}:{0,2}){1,8}(::)?$/i;

ip.isV4Format = function (ip) {
  return ipv4Regex.test(ip);
};

ip.isV6Format = function (ip) {
  return ipv6Regex.test(ip);
};

function _normalizeFamily(family) {
  return family ? family.toLowerCase() : 'ipv4';
}

ip.fromPrefixLen = function (prefixlen, family) {
  if (prefixlen > 32) {
    family = 'ipv6';
  } else {
    family = _normalizeFamily(family);
  }

  var len = 4;

  if (family === 'ipv6') {
    len = 16;
  }

  var buff = new Buffer(len);

  for (var i = 0, n = buff.length; i < n; ++i) {
    var bits = 8;

    if (prefixlen < 8) {
      bits = prefixlen;
    }

    prefixlen -= bits;
    buff[i] = ~(0xff >> bits) & 0xff;
  }

  return ip.toString(buff);
};

ip.mask = function (addr, mask) {
  addr = ip.toBuffer(addr);
  mask = ip.toBuffer(mask);
  var result = new Buffer(Math.max(addr.length, mask.length));
  var i = 0; // Same protocol - do bitwise and

  if (addr.length === mask.length) {
    for (i = 0; i < addr.length; i++) {
      result[i] = addr[i] & mask[i];
    }
  } else if (mask.length === 4) {
    // IPv6 address and IPv4 mask
    // (Mask low bits)
    for (i = 0; i < mask.length; i++) {
      result[i] = addr[addr.length - 4 + i] & mask[i];
    }
  } else {
    // IPv6 mask and IPv4 addr
    for (var i = 0; i < result.length - 6; i++) {
      result[i] = 0;
    } // ::ffff:ipv4


    result[10] = 0xff;
    result[11] = 0xff;

    for (i = 0; i < addr.length; i++) {
      result[i + 12] = addr[i] & mask[i + 12];
    }

    i = i + 12;
  }

  for (; i < result.length; i++) result[i] = 0;

  return ip.toString(result);
};

ip.cidr = function (cidrString) {
  var cidrParts = cidrString.split('/');
  var addr = cidrParts[0];
  if (cidrParts.length !== 2) throw new Error('invalid CIDR subnet: ' + addr);
  var mask = ip.fromPrefixLen(parseInt(cidrParts[1], 10));
  return ip.mask(addr, mask);
};

ip.subnet = function (addr, mask) {
  var networkAddress = ip.toLong(ip.mask(addr, mask)); // Calculate the mask's length.

  var maskBuffer = ip.toBuffer(mask);
  var maskLength = 0;

  for (var i = 0; i < maskBuffer.length; i++) {
    if (maskBuffer[i] === 0xff) {
      maskLength += 8;
    } else {
      var octet = maskBuffer[i] & 0xff;

      while (octet) {
        octet = octet << 1 & 0xff;
        maskLength++;
      }
    }
  }

  var numberOfAddresses = Math.pow(2, 32 - maskLength);
  return {
    networkAddress: ip.fromLong(networkAddress),
    firstAddress: numberOfAddresses <= 2 ? ip.fromLong(networkAddress) : ip.fromLong(networkAddress + 1),
    lastAddress: numberOfAddresses <= 2 ? ip.fromLong(networkAddress + numberOfAddresses - 1) : ip.fromLong(networkAddress + numberOfAddresses - 2),
    broadcastAddress: ip.fromLong(networkAddress + numberOfAddresses - 1),
    subnetMask: mask,
    subnetMaskLength: maskLength,
    numHosts: numberOfAddresses <= 2 ? numberOfAddresses : numberOfAddresses - 2,
    length: numberOfAddresses,
    contains: function contains(other) {
      return networkAddress === ip.toLong(ip.mask(other, mask));
    }
  };
};

ip.cidrSubnet = function (cidrString) {
  var cidrParts = cidrString.split('/');
  var addr = cidrParts[0];
  if (cidrParts.length !== 2) throw new Error('invalid CIDR subnet: ' + addr);
  var mask = ip.fromPrefixLen(parseInt(cidrParts[1], 10));
  return ip.subnet(addr, mask);
};

ip.not = function (addr) {
  var buff = ip.toBuffer(addr);

  for (var i = 0; i < buff.length; i++) {
    buff[i] = 0xff ^ buff[i];
  }

  return ip.toString(buff);
};

ip.or = function (a, b) {
  a = ip.toBuffer(a);
  b = ip.toBuffer(b); // same protocol

  if (a.length === b.length) {
    for (var i = 0; i < a.length; ++i) {
      a[i] |= b[i];
    }

    return ip.toString(a); // mixed protocols
  } else {
    var buff = a;
    var other = b;

    if (b.length > a.length) {
      buff = b;
      other = a;
    }

    var offset = buff.length - other.length;

    for (var i = offset; i < buff.length; ++i) {
      buff[i] |= other[i - offset];
    }

    return ip.toString(buff);
  }
};

ip.isEqual = function (a, b) {
  a = ip.toBuffer(a);
  b = ip.toBuffer(b); // Same protocol

  if (a.length === b.length) {
    for (var i = 0; i < a.length; i++) {
      if (a[i] !== b[i]) return false;
    }

    return true;
  } // Swap


  if (b.length === 4) {
    var t = b;
    b = a;
    a = t;
  } // a - IPv4, b - IPv6


  for (var i = 0; i < 10; i++) {
    if (b[i] !== 0) return false;
  }

  var word = b.readUInt16BE(10);
  if (word !== 0 && word !== 0xffff) return false;

  for (var i = 0; i < 4; i++) {
    if (a[i] !== b[i + 12]) return false;
  }

  return true;
};

ip.isPrivate = function (addr) {
  return /^(::f{4}:)?10\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})$/i.test(addr) || /^(::f{4}:)?192\.168\.([0-9]{1,3})\.([0-9]{1,3})$/i.test(addr) || /^(::f{4}:)?172\.(1[6-9]|2\d|30|31)\.([0-9]{1,3})\.([0-9]{1,3})$/i.test(addr) || /^(::f{4}:)?127\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})$/i.test(addr) || /^(::f{4}:)?169\.254\.([0-9]{1,3})\.([0-9]{1,3})$/i.test(addr) || /^f[cd][0-9a-f]{2}:/i.test(addr) || /^fe80:/i.test(addr) || /^::1$/.test(addr) || /^::$/.test(addr);
};

ip.isPublic = function (addr) {
  return !ip.isPrivate(addr);
};

ip.isLoopback = function (addr) {
  return /^(::f{4}:)?127\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})/.test(addr) || /^fe80::1$/.test(addr) || /^::1$/.test(addr) || /^::$/.test(addr);
};

ip.loopback = function (family) {
  //
  // Default to `ipv4`
  //
  family = _normalizeFamily(family);

  if (family !== 'ipv4' && family !== 'ipv6') {
    throw new Error('family must be ipv4 or ipv6');
  }

  return family === 'ipv4' ? '127.0.0.1' : 'fe80::1';
}; //
// ### function address (name, family)
// #### @name {string|'public'|'private'} **Optional** Name or security
//      of the network interface.
// #### @family {ipv4|ipv6} **Optional** IP family of the address (defaults
//      to ipv4).
//
// Returns the address for the network interface on the current system with
// the specified `name`:
//   * String: First `family` address of the interface.
//             If not found see `undefined`.
//   * 'public': the first public ip address of family.
//   * 'private': the first private ip address of family.
//   * undefined: First address with `ipv4` or loopback address `127.0.0.1`.
//


ip.address = function (name, family) {
  var interfaces = os.networkInterfaces();
  var all; //
  // Default to `ipv4`
  //

  family = _normalizeFamily(family); //
  // If a specific network interface has been named,
  // return the address.
  //

  if (name && name !== 'private' && name !== 'public') {
    var res = interfaces[name].filter(function (details) {
      var itemFamily = details.family.toLowerCase();
      return itemFamily === family;
    });
    if (res.length === 0) return undefined;
    return res[0].address;
  }

  var all = Object.keys(interfaces).map(function (nic) {
    //
    // Note: name will only be `public` or `private`
    // when this is called.
    //
    var addresses = interfaces[nic].filter(function (details) {
      details.family = details.family.toLowerCase();

      if (details.family !== family || ip.isLoopback(details.address)) {
        return false;
      } else if (!name) {
        return true;
      }

      return name === 'public' ? ip.isPrivate(details.address) : ip.isPublic(details.address);
    });
    return addresses.length ? addresses[0].address : undefined;
  }).filter(Boolean);
  return !all.length ? ip.loopback(family) : all[0];
};

ip.toLong = function (ip) {
  var ipl = 0;
  ip.split('.').forEach(function (octet) {
    ipl <<= 8;
    ipl += parseInt(octet);
  });
  return ipl >>> 0;
};

ip.fromLong = function (ipl) {
  return (ipl >>> 24) + '.' + (ipl >> 16 & 255) + '.' + (ipl >> 8 & 255) + '.' + (ipl & 255);
};

/***/ }),
/* 482 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const ipRegex = __webpack_require__(483);

const isIp = string => ipRegex({
  exact: true
}).test(string);

isIp.v4 = string => ipRegex.v4({
  exact: true
}).test(string);

isIp.v6 = string => ipRegex.v6({
  exact: true
}).test(string);

isIp.version = string => isIp(string) ? isIp.v4(string) ? 4 : 6 : undefined;

module.exports = isIp;

/***/ }),
/* 483 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const word = '[a-fA-F\\d:]';

const b = options => options && options.includeBoundaries ? "(?:(?<=\\s|^)(?=".concat(word, ")|(?<=").concat(word, ")(?=\\s|$))") : '';

const v4 = '(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}';
const v6seg = '[a-fA-F\\d]{1,4}';
const v6 = "\n(\n(?:".concat(v6seg, ":){7}(?:").concat(v6seg, "|:)|                                // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8\n(?:").concat(v6seg, ":){6}(?:").concat(v4, "|:").concat(v6seg, "|:)|                         // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4\n(?:").concat(v6seg, ":){5}(?::").concat(v4, "|(:").concat(v6seg, "){1,2}|:)|                 // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4\n(?:").concat(v6seg, ":){4}(?:(:").concat(v6seg, "){0,1}:").concat(v4, "|(:").concat(v6seg, "){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4\n(?:").concat(v6seg, ":){3}(?:(:").concat(v6seg, "){0,2}:").concat(v4, "|(:").concat(v6seg, "){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4\n(?:").concat(v6seg, ":){2}(?:(:").concat(v6seg, "){0,3}:").concat(v4, "|(:").concat(v6seg, "){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4\n(?:").concat(v6seg, ":){1}(?:(:").concat(v6seg, "){0,4}:").concat(v4, "|(:").concat(v6seg, "){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4\n(?::((?::").concat(v6seg, "){0,5}:").concat(v4, "|(?::").concat(v6seg, "){1,7}|:))           // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4\n)(%[0-9a-zA-Z]{1,})?                                           // %eth0            %1\n").replace(/\s*\/\/.*$/gm, '').replace(/\n/g, '').trim();

const ip = options => options && options.exact ? new RegExp("(?:^".concat(v4, "$)|(?:^").concat(v6, "$)")) : new RegExp("(?:".concat(b(options)).concat(v4).concat(b(options), ")|(?:").concat(b(options)).concat(v6).concat(b(options), ")"), 'g');

ip.v4 = options => options && options.exact ? new RegExp("^".concat(v4, "$")) : new RegExp("".concat(b(options)).concat(v4).concat(b(options)), 'g');

ip.v6 = options => options && options.exact ? new RegExp("^".concat(v6, "$")) : new RegExp("".concat(b(options)).concat(v6).concat(b(options)), 'g');

module.exports = ip;

/***/ }),
/* 484 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, global) {var __WEBPACK_AMD_DEFINE_RESULT__;

/*
 * [hi-base32]{@link https://github.com/emn178/hi-base32}
 *
 * @version 0.5.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2015-2018
 * @license MIT
 */

/*jslint bitwise: true */
(function () {
  'use strict';

  var root = typeof window === 'object' ? window : {};
  var NODE_JS = !root.HI_BASE32_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;

  if (NODE_JS) {
    root = global;
  }

  var COMMON_JS = !root.HI_BASE32_NO_COMMON_JS && typeof module === 'object' && module.exports;
  var AMD =  true && __webpack_require__(203);
  var BASE32_ENCODE_CHAR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'.split('');
  var BASE32_DECODE_CHAR = {
    'A': 0,
    'B': 1,
    'C': 2,
    'D': 3,
    'E': 4,
    'F': 5,
    'G': 6,
    'H': 7,
    'I': 8,
    'J': 9,
    'K': 10,
    'L': 11,
    'M': 12,
    'N': 13,
    'O': 14,
    'P': 15,
    'Q': 16,
    'R': 17,
    'S': 18,
    'T': 19,
    'U': 20,
    'V': 21,
    'W': 22,
    'X': 23,
    'Y': 24,
    'Z': 25,
    '2': 26,
    '3': 27,
    '4': 28,
    '5': 29,
    '6': 30,
    '7': 31
  };
  var blocks = [0, 0, 0, 0, 0, 0, 0, 0];

  var throwInvalidUtf8 = function throwInvalidUtf8(position, partial) {
    if (partial.length > 10) {
      partial = '...' + partial.substr(-10);
    }

    var err = new Error('Decoded data is not valid UTF-8.' + ' Maybe try base32.decode.asBytes()?' + ' Partial data after reading ' + position + ' bytes: ' + partial + ' <-');
    err.position = position;
    throw err;
  };

  var toUtf8String = function toUtf8String(bytes) {
    var str = '',
        length = bytes.length,
        i = 0,
        followingChars = 0,
        b,
        c;

    while (i < length) {
      b = bytes[i++];

      if (b <= 0x7F) {
        str += String.fromCharCode(b);
        continue;
      } else if (b > 0xBF && b <= 0xDF) {
        c = b & 0x1F;
        followingChars = 1;
      } else if (b <= 0xEF) {
        c = b & 0x0F;
        followingChars = 2;
      } else if (b <= 0xF7) {
        c = b & 0x07;
        followingChars = 3;
      } else {
        throwInvalidUtf8(i, str);
      }

      for (var j = 0; j < followingChars; ++j) {
        b = bytes[i++];

        if (b < 0x80 || b > 0xBF) {
          throwInvalidUtf8(i, str);
        }

        c <<= 6;
        c += b & 0x3F;
      }

      if (c >= 0xD800 && c <= 0xDFFF) {
        throwInvalidUtf8(i, str);
      }

      if (c > 0x10FFFF) {
        throwInvalidUtf8(i, str);
      }

      if (c <= 0xFFFF) {
        str += String.fromCharCode(c);
      } else {
        c -= 0x10000;
        str += String.fromCharCode((c >> 10) + 0xD800);
        str += String.fromCharCode((c & 0x3FF) + 0xDC00);
      }
    }

    return str;
  };

  var decodeAsBytes = function decodeAsBytes(base32Str) {
    if (!/^[A-Z2-7=]+$/.test(base32Str)) {
      throw new Error('Invalid base32 characters');
    }

    base32Str = base32Str.replace(/=/g, '');
    var v1,
        v2,
        v3,
        v4,
        v5,
        v6,
        v7,
        v8,
        bytes = [],
        index = 0,
        length = base32Str.length; // 4 char to 3 bytes

    for (var i = 0, count = length >> 3 << 3; i < count;) {
      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
      v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
      v6 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
      v7 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
      v8 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
      bytes[index++] = (v1 << 3 | v2 >>> 2) & 255;
      bytes[index++] = (v2 << 6 | v3 << 1 | v4 >>> 4) & 255;
      bytes[index++] = (v4 << 4 | v5 >>> 1) & 255;
      bytes[index++] = (v5 << 7 | v6 << 2 | v7 >>> 3) & 255;
      bytes[index++] = (v7 << 5 | v8) & 255;
    } // remain bytes


    var remain = length - count;

    if (remain === 2) {
      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
      bytes[index++] = (v1 << 3 | v2 >>> 2) & 255;
    } else if (remain === 4) {
      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
      bytes[index++] = (v1 << 3 | v2 >>> 2) & 255;
      bytes[index++] = (v2 << 6 | v3 << 1 | v4 >>> 4) & 255;
    } else if (remain === 5) {
      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
      v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
      bytes[index++] = (v1 << 3 | v2 >>> 2) & 255;
      bytes[index++] = (v2 << 6 | v3 << 1 | v4 >>> 4) & 255;
      bytes[index++] = (v4 << 4 | v5 >>> 1) & 255;
    } else if (remain === 7) {
      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
      v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
      v6 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
      v7 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
      bytes[index++] = (v1 << 3 | v2 >>> 2) & 255;
      bytes[index++] = (v2 << 6 | v3 << 1 | v4 >>> 4) & 255;
      bytes[index++] = (v4 << 4 | v5 >>> 1) & 255;
      bytes[index++] = (v5 << 7 | v6 << 2 | v7 >>> 3) & 255;
    }

    return bytes;
  };

  var encodeAscii = function encodeAscii(str) {
    var v1,
        v2,
        v3,
        v4,
        v5,
        base32Str = '',
        length = str.length;

    for (var i = 0, count = parseInt(length / 5) * 5; i < count;) {
      v1 = str.charCodeAt(i++);
      v2 = str.charCodeAt(i++);
      v3 = str.charCodeAt(i++);
      v4 = str.charCodeAt(i++);
      v5 = str.charCodeAt(i++);
      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] + BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] + BASE32_ENCODE_CHAR[v4 >>> 2 & 31] + BASE32_ENCODE_CHAR[(v4 << 3 | v5 >>> 5) & 31] + BASE32_ENCODE_CHAR[v5 & 31];
    } // remain char


    var remain = length - count;

    if (remain === 1) {
      v1 = str.charCodeAt(i);
      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[v1 << 2 & 31] + '======';
    } else if (remain === 2) {
      v1 = str.charCodeAt(i++);
      v2 = str.charCodeAt(i);
      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[v2 << 4 & 31] + '====';
    } else if (remain === 3) {
      v1 = str.charCodeAt(i++);
      v2 = str.charCodeAt(i++);
      v3 = str.charCodeAt(i);
      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] + BASE32_ENCODE_CHAR[v3 << 1 & 31] + '===';
    } else if (remain === 4) {
      v1 = str.charCodeAt(i++);
      v2 = str.charCodeAt(i++);
      v3 = str.charCodeAt(i++);
      v4 = str.charCodeAt(i);
      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] + BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] + BASE32_ENCODE_CHAR[v4 >>> 2 & 31] + BASE32_ENCODE_CHAR[v4 << 3 & 31] + '=';
    }

    return base32Str;
  };

  var encodeUtf8 = function encodeUtf8(str) {
    var v1,
        v2,
        v3,
        v4,
        v5,
        code,
        end = false,
        base32Str = '',
        index = 0,
        i,
        start = 0,
        bytes = 0,
        length = str.length;

    do {
      blocks[0] = blocks[5];
      blocks[1] = blocks[6];
      blocks[2] = blocks[7];

      for (i = start; index < length && i < 5; ++index) {
        code = str.charCodeAt(index);

        if (code < 0x80) {
          blocks[i++] = code;
        } else if (code < 0x800) {
          blocks[i++] = 0xc0 | code >> 6;
          blocks[i++] = 0x80 | code & 0x3f;
        } else if (code < 0xd800 || code >= 0xe000) {
          blocks[i++] = 0xe0 | code >> 12;
          blocks[i++] = 0x80 | code >> 6 & 0x3f;
          blocks[i++] = 0x80 | code & 0x3f;
        } else {
          code = 0x10000 + ((code & 0x3ff) << 10 | str.charCodeAt(++index) & 0x3ff);
          blocks[i++] = 0xf0 | code >> 18;
          blocks[i++] = 0x80 | code >> 12 & 0x3f;
          blocks[i++] = 0x80 | code >> 6 & 0x3f;
          blocks[i++] = 0x80 | code & 0x3f;
        }
      }

      bytes += i - start;
      start = i - 5;

      if (index === length) {
        ++index;
      }

      if (index > length && i < 6) {
        end = true;
      }

      v1 = blocks[0];

      if (i > 4) {
        v2 = blocks[1];
        v3 = blocks[2];
        v4 = blocks[3];
        v5 = blocks[4];
        base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] + BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] + BASE32_ENCODE_CHAR[v4 >>> 2 & 31] + BASE32_ENCODE_CHAR[(v4 << 3 | v5 >>> 5) & 31] + BASE32_ENCODE_CHAR[v5 & 31];
      } else if (i === 1) {
        base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[v1 << 2 & 31] + '======';
      } else if (i === 2) {
        v2 = blocks[1];
        base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[v2 << 4 & 31] + '====';
      } else if (i === 3) {
        v2 = blocks[1];
        v3 = blocks[2];
        base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] + BASE32_ENCODE_CHAR[v3 << 1 & 31] + '===';
      } else {
        v2 = blocks[1];
        v3 = blocks[2];
        v4 = blocks[3];
        base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] + BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] + BASE32_ENCODE_CHAR[v4 >>> 2 & 31] + BASE32_ENCODE_CHAR[v4 << 3 & 31] + '=';
      }
    } while (!end);

    return base32Str;
  };

  var encodeBytes = function encodeBytes(bytes) {
    var v1,
        v2,
        v3,
        v4,
        v5,
        base32Str = '',
        length = bytes.length;

    for (var i = 0, count = parseInt(length / 5) * 5; i < count;) {
      v1 = bytes[i++];
      v2 = bytes[i++];
      v3 = bytes[i++];
      v4 = bytes[i++];
      v5 = bytes[i++];
      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] + BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] + BASE32_ENCODE_CHAR[v4 >>> 2 & 31] + BASE32_ENCODE_CHAR[(v4 << 3 | v5 >>> 5) & 31] + BASE32_ENCODE_CHAR[v5 & 31];
    } // remain char


    var remain = length - count;

    if (remain === 1) {
      v1 = bytes[i];
      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[v1 << 2 & 31] + '======';
    } else if (remain === 2) {
      v1 = bytes[i++];
      v2 = bytes[i];
      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[v2 << 4 & 31] + '====';
    } else if (remain === 3) {
      v1 = bytes[i++];
      v2 = bytes[i++];
      v3 = bytes[i];
      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] + BASE32_ENCODE_CHAR[v3 << 1 & 31] + '===';
    } else if (remain === 4) {
      v1 = bytes[i++];
      v2 = bytes[i++];
      v3 = bytes[i++];
      v4 = bytes[i];
      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] + BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] + BASE32_ENCODE_CHAR[v4 >>> 2 & 31] + BASE32_ENCODE_CHAR[v4 << 3 & 31] + '=';
    }

    return base32Str;
  };

  var encode = function encode(input, asciiOnly) {
    var notString = typeof input !== 'string';

    if (notString && input.constructor === ArrayBuffer) {
      input = new Uint8Array(input);
    }

    if (notString) {
      return encodeBytes(input);
    } else if (asciiOnly) {
      return encodeAscii(input);
    } else {
      return encodeUtf8(input);
    }
  };

  var decode = function decode(base32Str, asciiOnly) {
    if (!asciiOnly) {
      return toUtf8String(decodeAsBytes(base32Str));
    }

    if (!/^[A-Z2-7=]+$/.test(base32Str)) {
      throw new Error('Invalid base32 characters');
    }

    var v1,
        v2,
        v3,
        v4,
        v5,
        v6,
        v7,
        v8,
        str = '',
        length = base32Str.indexOf('=');

    if (length === -1) {
      length = base32Str.length;
    } // 8 char to 5 bytes


    for (var i = 0, count = length >> 3 << 3; i < count;) {
      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
      v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
      v6 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
      v7 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
      v8 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
      str += String.fromCharCode((v1 << 3 | v2 >>> 2) & 255) + String.fromCharCode((v2 << 6 | v3 << 1 | v4 >>> 4) & 255) + String.fromCharCode((v4 << 4 | v5 >>> 1) & 255) + String.fromCharCode((v5 << 7 | v6 << 2 | v7 >>> 3) & 255) + String.fromCharCode((v7 << 5 | v8) & 255);
    } // remain bytes


    var remain = length - count;

    if (remain === 2) {
      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
      str += String.fromCharCode((v1 << 3 | v2 >>> 2) & 255);
    } else if (remain === 4) {
      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
      str += String.fromCharCode((v1 << 3 | v2 >>> 2) & 255) + String.fromCharCode((v2 << 6 | v3 << 1 | v4 >>> 4) & 255);
    } else if (remain === 5) {
      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
      v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
      str += String.fromCharCode((v1 << 3 | v2 >>> 2) & 255) + String.fromCharCode((v2 << 6 | v3 << 1 | v4 >>> 4) & 255) + String.fromCharCode((v4 << 4 | v5 >>> 1) & 255);
    } else if (remain === 7) {
      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
      v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
      v6 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
      v7 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
      str += String.fromCharCode((v1 << 3 | v2 >>> 2) & 255) + String.fromCharCode((v2 << 6 | v3 << 1 | v4 >>> 4) & 255) + String.fromCharCode((v4 << 4 | v5 >>> 1) & 255) + String.fromCharCode((v5 << 7 | v6 << 2 | v7 >>> 3) & 255);
    }

    return str;
  };

  var exports = {
    encode: encode,
    decode: decode
  };
  decode.asBytes = decodeAsBytes;

  if (COMMON_JS) {
    module.exports = exports;
  } else {
    root.base32 = exports;

    if (AMD) {
      !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
        return exports;
      }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    }
  }
})();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5), __webpack_require__(8)))

/***/ }),
/* 485 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const {
  ensureMultiaddr
} = __webpack_require__(228);

const uniqBy = __webpack_require__(486); // Because JavaScript doesn't let you overload the compare in Set()..


class MultiaddrSet {
  constructor(multiaddrs) {
    this._multiaddrs = multiaddrs || [];
    this._observedMultiaddrs = [];
  }

  add(ma) {
    ma = ensureMultiaddr(ma);

    if (!this.has(ma)) {
      this._multiaddrs.push(ma);
    }
  } // addSafe - prevent multiaddr explosion™
  // Multiaddr explosion is when you dial to a bunch of nodes and every node
  // gives you a different observed address and you start storing them all to
  // share with other peers. This seems like a good idea until you realize that
  // most of those addresses are unique to the subnet that peer is in and so,
  // they are completely worthless for all the other peers. This method is
  // exclusively used by identify.


  addSafe(ma) {
    ma = ensureMultiaddr(ma);

    const check = this._observedMultiaddrs.some((m, i) => {
      if (m.equals(ma)) {
        this.add(ma);

        this._observedMultiaddrs.splice(i, 1);

        return true;
      }
    });

    if (!check) {
      this._observedMultiaddrs.push(ma);
    }
  }

  toArray() {
    return this._multiaddrs.slice();
  }

  get size() {
    return this._multiaddrs.length;
  }

  forEach(fn) {
    return this._multiaddrs.forEach(fn);
  }

  filterBy(maFmt) {
    if (typeof maFmt !== 'object' || typeof maFmt.matches !== 'function' || typeof maFmt.partialMatch !== 'function' || typeof maFmt.toString !== 'function') return [];
    return this._multiaddrs.filter(ma => maFmt.matches(ma));
  }

  has(ma) {
    ma = ensureMultiaddr(ma);
    return this._multiaddrs.some(m => m.equals(ma));
  }

  delete(ma) {
    ma = ensureMultiaddr(ma);

    this._multiaddrs.some((m, i) => {
      if (m.equals(ma)) {
        this._multiaddrs.splice(i, 1);

        return true;
      }
    });
  } // replaces selected existing multiaddrs with new ones


  replace(existing, fresh) {
    if (!Array.isArray(existing)) {
      existing = [existing];
    }

    if (!Array.isArray(fresh)) {
      fresh = [fresh];
    }

    existing.forEach(m => this.delete(m));
    fresh.forEach(m => this.add(m));
  }

  clear() {
    this._multiaddrs = [];
  } // this only really helps make ip6 and ip4 multiaddrs distinct if they are
  // different
  // TODO this is not an ideal solution, probably this code should just be
  // in libp2p-tcp


  distinct() {
    return uniqBy(this._multiaddrs, ma => {
      return [ma.toOptions().port, ma.toOptions().transport].join();
    });
  }

}

module.exports = MultiaddrSet;

/***/ }),
/* 486 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = uniqueBy;

function uniqueBy(arr, getValue) {
  var unique = [];
  var found = {};

  if (typeof getValue !== 'function') {
    var key = getValue;

    getValue = function defaultGetValue(obj) {
      return obj[key];
    };
  }

  arr.forEach(function addUniques(obj) {
    var value = getValue(obj);

    if (!found[value]) {
      found[value] = true;
      unique.push(obj);
    }
  });
  return unique;
}

/***/ }),
/* 487 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const ciphers = __webpack_require__(488);

const cipherMode = __webpack_require__(499);

exports.create = async function (key, iv) {
  // eslint-disable-line require-await
  const mode = cipherMode(key);
  const cipher = ciphers.createCipheriv(mode, key, iv);
  const decipher = ciphers.createDecipheriv(mode, key, iv);
  const res = {
    async encrypt(data) {
      // eslint-disable-line require-await
      return cipher.update(data);
    },

    async decrypt(data) {
      // eslint-disable-line require-await
      return decipher.update(data);
    }

  };
  return res;
};

/***/ }),
/* 488 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const crypto = __webpack_require__(489);

module.exports = {
  createCipheriv: crypto.createCipheriv,
  createDecipheriv: crypto.createDecipheriv
};

/***/ }),
/* 489 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var ciphers = __webpack_require__(490);

var deciphers = __webpack_require__(498);

var modes = __webpack_require__(232);

function getCiphers() {
  return Object.keys(modes);
}

exports.createCipher = exports.Cipher = ciphers.createCipher;
exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv;
exports.createDecipher = exports.Decipher = deciphers.createDecipher;
exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv;
exports.listCiphers = exports.getCiphers = getCiphers;

/***/ }),
/* 490 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var MODES = __webpack_require__(229);

var AuthCipher = __webpack_require__(233);

var Buffer = __webpack_require__(6).Buffer;

var StreamCipher = __webpack_require__(234);

var Transform = __webpack_require__(49);

var aes = __webpack_require__(100);

var ebtk = __webpack_require__(235);

var inherits = __webpack_require__(4);

function Cipher(mode, key, iv) {
  Transform.call(this);
  this._cache = new Splitter();
  this._cipher = new aes.AES(key);
  this._prev = Buffer.from(iv);
  this._mode = mode;
  this._autopadding = true;
}

inherits(Cipher, Transform);

Cipher.prototype._update = function (data) {
  this._cache.add(data);

  var chunk;
  var thing;
  var out = [];

  while (chunk = this._cache.get()) {
    thing = this._mode.encrypt(this, chunk);
    out.push(thing);
  }

  return Buffer.concat(out);
};

var PADDING = Buffer.alloc(16, 0x10);

Cipher.prototype._final = function () {
  var chunk = this._cache.flush();

  if (this._autopadding) {
    chunk = this._mode.encrypt(this, chunk);

    this._cipher.scrub();

    return chunk;
  }

  if (!chunk.equals(PADDING)) {
    this._cipher.scrub();

    throw new Error('data not multiple of block length');
  }
};

Cipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo;
  return this;
};

function Splitter() {
  this.cache = Buffer.allocUnsafe(0);
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data]);
};

Splitter.prototype.get = function () {
  if (this.cache.length > 15) {
    var out = this.cache.slice(0, 16);
    this.cache = this.cache.slice(16);
    return out;
  }

  return null;
};

Splitter.prototype.flush = function () {
  var len = 16 - this.cache.length;
  var padBuff = Buffer.allocUnsafe(len);
  var i = -1;

  while (++i < len) {
    padBuff.writeUInt8(len, i);
  }

  return Buffer.concat([this.cache, padBuff]);
};

function createCipheriv(suite, password, iv) {
  var config = MODES[suite.toLowerCase()];
  if (!config) throw new TypeError('invalid suite type');
  if (typeof password === 'string') password = Buffer.from(password);
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length);
  if (typeof iv === 'string') iv = Buffer.from(iv);
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length);

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv);
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv);
  }

  return new Cipher(config.module, password, iv);
}

function createCipher(suite, password) {
  var config = MODES[suite.toLowerCase()];
  if (!config) throw new TypeError('invalid suite type');
  var keys = ebtk(password, false, config.key, config.iv);
  return createCipheriv(suite, keys.key, keys.iv);
}

exports.createCipheriv = createCipheriv;
exports.createCipher = createCipher;

/***/ }),
/* 491 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.encrypt = function (self, block) {
  return self._cipher.encryptBlock(block);
};

exports.decrypt = function (self, block) {
  return self._cipher.decryptBlock(block);
};

/***/ }),
/* 492 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var xor = __webpack_require__(78);

exports.encrypt = function (self, block) {
  var data = xor(block, self._prev);
  self._prev = self._cipher.encryptBlock(data);
  return self._prev;
};

exports.decrypt = function (self, block) {
  var pad = self._prev;
  self._prev = block;

  var out = self._cipher.decryptBlock(block);

  return xor(out, pad);
};

/***/ }),
/* 493 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Buffer = __webpack_require__(6).Buffer;

var xor = __webpack_require__(78);

function encryptStart(self, data, decrypt) {
  var len = data.length;
  var out = xor(data, self._cache);
  self._cache = self._cache.slice(len);
  self._prev = Buffer.concat([self._prev, decrypt ? data : out]);
  return out;
}

exports.encrypt = function (self, data, decrypt) {
  var out = Buffer.allocUnsafe(0);
  var len;

  while (data.length) {
    if (self._cache.length === 0) {
      self._cache = self._cipher.encryptBlock(self._prev);
      self._prev = Buffer.allocUnsafe(0);
    }

    if (self._cache.length <= data.length) {
      len = self._cache.length;
      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)]);
      data = data.slice(len);
    } else {
      out = Buffer.concat([out, encryptStart(self, data, decrypt)]);
      break;
    }
  }

  return out;
};

/***/ }),
/* 494 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Buffer = __webpack_require__(6).Buffer;

function encryptByte(self, byteParam, decrypt) {
  var pad = self._cipher.encryptBlock(self._prev);

  var out = pad[0] ^ byteParam;
  self._prev = Buffer.concat([self._prev.slice(1), Buffer.from([decrypt ? byteParam : out])]);
  return out;
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length;
  var out = Buffer.allocUnsafe(len);
  var i = -1;

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt);
  }

  return out;
};

/***/ }),
/* 495 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Buffer = __webpack_require__(6).Buffer;

function encryptByte(self, byteParam, decrypt) {
  var pad;
  var i = -1;
  var len = 8;
  var out = 0;
  var bit, value;

  while (++i < len) {
    pad = self._cipher.encryptBlock(self._prev);
    bit = byteParam & 1 << 7 - i ? 0x80 : 0;
    value = pad[0] ^ bit;
    out += (value & 0x80) >> i % 8;
    self._prev = shiftIn(self._prev, decrypt ? bit : value);
  }

  return out;
}

function shiftIn(buffer, value) {
  var len = buffer.length;
  var i = -1;
  var out = Buffer.allocUnsafe(buffer.length);
  buffer = Buffer.concat([buffer, Buffer.from([value])]);

  while (++i < len) {
    out[i] = buffer[i] << 1 | buffer[i + 1] >> 7;
  }

  return out;
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length;
  var out = Buffer.allocUnsafe(len);
  var i = -1;

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt);
  }

  return out;
};

/***/ }),
/* 496 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var xor = __webpack_require__(78);

function getBlock(self) {
  self._prev = self._cipher.encryptBlock(self._prev);
  return self._prev;
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)]);
  }

  var pad = self._cache.slice(0, chunk.length);

  self._cache = self._cache.slice(chunk.length);
  return xor(chunk, pad);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 497 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Buffer = __webpack_require__(6).Buffer;

var ZEROES = Buffer.alloc(16, 0);

function toArray(buf) {
  return [buf.readUInt32BE(0), buf.readUInt32BE(4), buf.readUInt32BE(8), buf.readUInt32BE(12)];
}

function fromArray(out) {
  var buf = Buffer.allocUnsafe(16);
  buf.writeUInt32BE(out[0] >>> 0, 0);
  buf.writeUInt32BE(out[1] >>> 0, 4);
  buf.writeUInt32BE(out[2] >>> 0, 8);
  buf.writeUInt32BE(out[3] >>> 0, 12);
  return buf;
}

function GHASH(key) {
  this.h = key;
  this.state = Buffer.alloc(16, 0);
  this.cache = Buffer.allocUnsafe(0);
} // from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua


GHASH.prototype.ghash = function (block) {
  var i = -1;

  while (++i < block.length) {
    this.state[i] ^= block[i];
  }

  this._multiply();
};

GHASH.prototype._multiply = function () {
  var Vi = toArray(this.h);
  var Zi = [0, 0, 0, 0];
  var j, xi, lsbVi;
  var i = -1;

  while (++i < 128) {
    xi = (this.state[~~(i / 8)] & 1 << 7 - i % 8) !== 0;

    if (xi) {
      // Z_i+1 = Z_i ^ V_i
      Zi[0] ^= Vi[0];
      Zi[1] ^= Vi[1];
      Zi[2] ^= Vi[2];
      Zi[3] ^= Vi[3];
    } // Store the value of LSB(V_i)


    lsbVi = (Vi[3] & 1) !== 0; // V_i+1 = V_i >> 1

    for (j = 3; j > 0; j--) {
      Vi[j] = Vi[j] >>> 1 | (Vi[j - 1] & 1) << 31;
    }

    Vi[0] = Vi[0] >>> 1; // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R

    if (lsbVi) {
      Vi[0] = Vi[0] ^ 0xe1 << 24;
    }
  }

  this.state = fromArray(Zi);
};

GHASH.prototype.update = function (buf) {
  this.cache = Buffer.concat([this.cache, buf]);
  var chunk;

  while (this.cache.length >= 16) {
    chunk = this.cache.slice(0, 16);
    this.cache = this.cache.slice(16);
    this.ghash(chunk);
  }
};

GHASH.prototype.final = function (abl, bl) {
  if (this.cache.length) {
    this.ghash(Buffer.concat([this.cache, ZEROES], 16));
  }

  this.ghash(fromArray([0, abl, 0, bl]));
  return this.state;
};

module.exports = GHASH;

/***/ }),
/* 498 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var AuthCipher = __webpack_require__(233);

var Buffer = __webpack_require__(6).Buffer;

var MODES = __webpack_require__(229);

var StreamCipher = __webpack_require__(234);

var Transform = __webpack_require__(49);

var aes = __webpack_require__(100);

var ebtk = __webpack_require__(235);

var inherits = __webpack_require__(4);

function Decipher(mode, key, iv) {
  Transform.call(this);
  this._cache = new Splitter();
  this._last = void 0;
  this._cipher = new aes.AES(key);
  this._prev = Buffer.from(iv);
  this._mode = mode;
  this._autopadding = true;
}

inherits(Decipher, Transform);

Decipher.prototype._update = function (data) {
  this._cache.add(data);

  var chunk;
  var thing;
  var out = [];

  while (chunk = this._cache.get(this._autopadding)) {
    thing = this._mode.decrypt(this, chunk);
    out.push(thing);
  }

  return Buffer.concat(out);
};

Decipher.prototype._final = function () {
  var chunk = this._cache.flush();

  if (this._autopadding) {
    return unpad(this._mode.decrypt(this, chunk));
  } else if (chunk) {
    throw new Error('data not multiple of block length');
  }
};

Decipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo;
  return this;
};

function Splitter() {
  this.cache = Buffer.allocUnsafe(0);
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data]);
};

Splitter.prototype.get = function (autoPadding) {
  var out;

  if (autoPadding) {
    if (this.cache.length > 16) {
      out = this.cache.slice(0, 16);
      this.cache = this.cache.slice(16);
      return out;
    }
  } else {
    if (this.cache.length >= 16) {
      out = this.cache.slice(0, 16);
      this.cache = this.cache.slice(16);
      return out;
    }
  }

  return null;
};

Splitter.prototype.flush = function () {
  if (this.cache.length) return this.cache;
};

function unpad(last) {
  var padded = last[15];

  if (padded < 1 || padded > 16) {
    throw new Error('unable to decrypt data');
  }

  var i = -1;

  while (++i < padded) {
    if (last[i + (16 - padded)] !== padded) {
      throw new Error('unable to decrypt data');
    }
  }

  if (padded === 16) return;
  return last.slice(0, 16 - padded);
}

function createDecipheriv(suite, password, iv) {
  var config = MODES[suite.toLowerCase()];
  if (!config) throw new TypeError('invalid suite type');
  if (typeof iv === 'string') iv = Buffer.from(iv);
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length);
  if (typeof password === 'string') password = Buffer.from(password);
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length);

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv, true);
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv, true);
  }

  return new Decipher(config.module, password, iv);
}

function createDecipher(suite, password) {
  var config = MODES[suite.toLowerCase()];
  if (!config) throw new TypeError('invalid suite type');
  var keys = ebtk(password, false, config.key, config.iv);
  return createDecipheriv(suite, keys.key, keys.iv);
}

exports.createDecipher = createDecipher;
exports.createDecipheriv = createDecipheriv;

/***/ }),
/* 499 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const errcode = __webpack_require__(35);

const CIPHER_MODES = {
  16: 'aes-128-ctr',
  32: 'aes-256-ctr'
};

module.exports = function (key) {
  const mode = CIPHER_MODES[key.length];

  if (!mode) {
    const modes = Object.entries(CIPHER_MODES).map(([k, v]) => "".concat(k, " (").concat(v, ")")).join(' / ');
    throw errcode(new Error("Invalid key length ".concat(key.length, " bytes. Must be ").concat(modes)), 'ERR_INVALID_KEY_LENGTH');
  }

  return mode;
};

/***/ }),
/* 500 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const forgePbkdf2 = __webpack_require__(128);

const forgeUtil = __webpack_require__(10);

const errcode = __webpack_require__(35);
/**
 * Maps an IPFS hash name to its node-forge equivalent.
 *
 * See https://github.com/multiformats/multihash/blob/master/hashtable.csv
 *
 * @private
 */


const hashName = {
  sha1: 'sha1',
  'sha2-256': 'sha256',
  'sha2-512': 'sha512'
};
/**
 * Computes the Password-Based Key Derivation Function 2.
 *
 * @param {string} password
 * @param {string} salt
 * @param {number} iterations
 * @param {number} keySize (in bytes)
 * @param {string} hash - The hash name ('sha1', 'sha2-512, ...)
 * @returns {string} - A new password
 */

function pbkdf2(password, salt, iterations, keySize, hash) {
  const hasher = hashName[hash];

  if (!hasher) {
    const types = Object.keys(hashName).join(' / ');
    throw errcode(new Error("Hash '".concat(hash, "' is unknown or not supported. Must be ").concat(types)), 'ERR_UNSUPPORTED_HASH_TYPE');
  }

  const dek = forgePbkdf2(password, salt, iterations, keySize, hasher);
  return forgeUtil.encode64(dek);
}

module.exports = pbkdf2;

/***/ }),
/* 501 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

function _asyncGeneratorDelegate(inner, awaitWrap) { var iter = {}, waiting = false; function pump(key, value) { waiting = true; value = new Promise(function (resolve) { resolve(inner[key](value)); }); return { done: false, value: awaitWrap(value) }; } ; if (typeof Symbol === "function" && Symbol.iterator) { iter[Symbol.iterator] = function () { return this; }; } iter.next = function (value) { if (waiting) { waiting = false; return value; } return pump("next", value); }; if (typeof inner.throw === "function") { iter.throw = function (value) { if (waiting) { waiting = false; throw value; } return pump("throw", value); }; } if (typeof inner.return === "function") { iter.return = function (value) { if (waiting) { waiting = false; return value; } return pump("return", value); }; } return iter; }

const importer = __webpack_require__(141);

const normaliseAddInput = __webpack_require__(533);

const {
  parseChunkerString
} = __webpack_require__(535);

const pipe = __webpack_require__(23);

module.exports = ({
  ipld,
  gcLock,
  preload,
  pin,
  options: constructorOptions
}) => {
  const isShardingEnabled = constructorOptions.EXPERIMENTAL && constructorOptions.EXPERIMENTAL.sharding;
  return (
    /*#__PURE__*/
    function () {
      var _add = _wrapAsyncGenerator(function* (source, options) {
        options = options || {};

        const opts = _objectSpread({
          shardSplitThreshold: isShardingEnabled ? 1000 : Infinity
        }, options, {
          strategy: 'balanced'
        }, parseChunkerString(options.chunker)); // CID v0 is for multihashes encoded with sha2-256


        if (opts.hashAlg && opts.cidVersion !== 1) {
          opts.cidVersion = 1;
        }

        if (opts.trickle) {
          opts.strategy = 'trickle';
        }

        delete opts.trickle;

        if (opts.progress) {
          let total = 0;
          const prog = opts.progress;

          opts.progress = bytes => {
            total += bytes;
            prog(total);
          };
        }

        const iterator = pipe(normaliseAddInput(source), source => importer(source, ipld, opts), transformFile(opts), preloadFile(preload, opts), pinFile(pin, opts));
        const releaseLock = yield _awaitAsyncGenerator(gcLock.readLock());

        try {
          yield* _asyncGeneratorDelegate(_asyncIterator(iterator), _awaitAsyncGenerator);
        } finally {
          releaseLock();
        }
      });

      function add(_x, _x2) {
        return _add.apply(this, arguments);
      }

      return add;
    }()
  );
};

function transformFile(opts) {
  return (
    /*#__PURE__*/
    function () {
      var _ref = _wrapAsyncGenerator(function* (source) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;

        var _iteratorError;

        try {
          for (var _iterator = _asyncIterator(source), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
            const file = _value;
            let cid = file.cid;

            if (opts.cidVersion === 1) {
              cid = cid.toV1();
            }

            let path = file.path ? file.path : cid.toString();

            if (opts.wrapWithDirectory && !file.path) {
              path = '';
            }

            yield {
              path,
              cid,
              size: file.size,
              mode: file.unixfs && file.unixfs.mode,
              mtime: file.unixfs && file.unixfs.mtime
            };
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              yield _awaitAsyncGenerator(_iterator.return());
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      });

      return function (_x3) {
        return _ref.apply(this, arguments);
      };
    }()
  );
}

function preloadFile(preload, opts) {
  return (
    /*#__PURE__*/
    function () {
      var _ref2 = _wrapAsyncGenerator(function* (source) {
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;

        var _iteratorError2;

        try {
          for (var _iterator2 = _asyncIterator(source), _step2, _value2; _step2 = yield _awaitAsyncGenerator(_iterator2.next()), _iteratorNormalCompletion2 = _step2.done, _value2 = yield _awaitAsyncGenerator(_step2.value), !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {
            const file = _value2;
            const isRootFile = !file.path || opts.wrapWithDirectory ? file.path === '' : !file.path.includes('/');
            const shouldPreload = isRootFile && !opts.onlyHash && opts.preload !== false;

            if (shouldPreload) {
              preload(file.cid);
            }

            yield file;
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
              yield _awaitAsyncGenerator(_iterator2.return());
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      });

      return function (_x4) {
        return _ref2.apply(this, arguments);
      };
    }()
  );
}

function pinFile(pin, opts) {
  return (
    /*#__PURE__*/
    function () {
      var _ref3 = _wrapAsyncGenerator(function* (source) {
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;

        var _iteratorError3;

        try {
          for (var _iterator3 = _asyncIterator(source), _step3, _value3; _step3 = yield _awaitAsyncGenerator(_iterator3.next()), _iteratorNormalCompletion3 = _step3.done, _value3 = yield _awaitAsyncGenerator(_step3.value), !_iteratorNormalCompletion3; _iteratorNormalCompletion3 = true) {
            const file = _value3;
            // Pin a file if it is the root dir of a recursive add or the single file
            // of a direct add.
            const isRootDir = !file.path.includes('/');
            const shouldPin = (opts.pin == null ? true : opts.pin) && isRootDir && !opts.onlyHash;

            if (shouldPin) {
              // Note: addAsyncIterator() has already taken a GC lock, so tell
              // pin.add() not to take a (second) GC lock
              yield _awaitAsyncGenerator(pin.add(file.cid, {
                preload: false,
                lock: false
              }));
            }

            yield file;
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
              yield _awaitAsyncGenerator(_iterator3.return());
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }
      });

      return function (_x5) {
        return _ref3.apply(this, arguments);
      };
    }()
  );
}

/***/ }),
/* 502 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const dirBuilder = __webpack_require__(503);

const fileBuilder = __webpack_require__(512);

function dagBuilder(_x, _x2, _x3) {
  return _dagBuilder.apply(this, arguments);
}

function _dagBuilder() {
  _dagBuilder = _wrapAsyncGenerator(function* (source, ipld, options) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;

    var _iteratorError;

    try {
      for (var _iterator = _asyncIterator(source), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
        const entry = _value;

        if (entry.path) {
          if (entry.path.substring(0, 2) === './') {
            options.wrapWithDirectory = true;
          }

          entry.path = entry.path.split('/').filter(path => path && path !== '.').join('/');
        }

        if (entry.content) {
          let source = entry.content; // wrap in iterator if it is array-like or not an iterator

          if (!source[Symbol.asyncIterator] && !source[Symbol.iterator] || source.length !== undefined) {
            source = {
              [Symbol.iterator]: function* () {
                yield entry.content;
              }
            };
          }

          let chunker;

          if (typeof options.chunker === 'function') {
            chunker = options.chunker;
          } else if (options.chunker === 'rabin') {
            chunker = __webpack_require__(517);
          } else {
            chunker = __webpack_require__(522);
          }

          let chunkValidator;

          if (typeof options.chunkValidator === 'function') {
            chunkValidator = options.chunkValidator;
          } else {
            chunkValidator = __webpack_require__(523);
          } // item is a file


          yield () => fileBuilder(entry, chunker(chunkValidator(source, options), options), ipld, options);
        } else {
          // item is a directory
          yield () => dirBuilder(entry, ipld, options);
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          yield _awaitAsyncGenerator(_iterator.return());
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  });
  return _dagBuilder.apply(this, arguments);
}

module.exports = dagBuilder;

/***/ }),
/* 503 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const UnixFS = __webpack_require__(25);

const persist = __webpack_require__(57);

const {
  DAGNode
} = __webpack_require__(12);

const dirBuilder = async (item, ipld, options) => {
  const unixfs = new UnixFS({
    type: 'directory',
    mtime: item.mtime,
    mode: item.mode
  });
  const node = new DAGNode(unixfs.marshal(), []);
  const cid = await persist(node, ipld, options);
  const path = item.path;
  return {
    cid,
    path,
    unixfs,
    size: node.size
  };
};

module.exports = dirBuilder;

/***/ }),
/* 504 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = "\nsyntax = \"proto2\";\n\nmessage Data {\n  enum DataType {\n    Raw = 0;\n    Directory = 1;\n    File = 2;\n    Metadata = 3;\n    Symlink = 4;\n    HAMTShard = 5;\n  }\n\n  required DataType Type = 1;\n  optional bytes Data = 2;\n  optional uint64 filesize = 3;\n  repeated uint64 blocksizes = 4;\n  optional uint64 hashType = 5;\n  optional uint64 fanout = 6;\n  optional uint32 mode = 7;\n  optional UnixTime mtime = 8;\n}\n\nmessage UnixTime {\n  required int64 Seconds = 1;\n  optional fixed32 FractionalNanoseconds = 2;\n}\n\nmessage Metadata {\n  optional string MimeType = 1;\n}\n";

/***/ }),
/* 505 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports = module.exports = __webpack_require__(237);

/***/ }),
/* 506 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


//! stable.js 0.1.8, https://github.com/Two-Screen/stable
//! © 2018 Angry Bytes and contributors. MIT licensed.
(function (global, factory) {
   true ? module.exports = factory() : undefined;
})(void 0, function () {
  'use strict'; // A stable array sort, because `Array#sort()` is not guaranteed stable.
  // This is an implementation of merge sort, without recursion.

  var stable = function stable(arr, comp) {
    return exec(arr.slice(), comp);
  };

  stable.inplace = function (arr, comp) {
    var result = exec(arr, comp); // This simply copies back if the result isn't in the original array,
    // which happens on an odd number of passes.

    if (result !== arr) {
      pass(result, null, arr.length, arr);
    }

    return arr;
  }; // Execute the sort using the input array and a second buffer as work space.
  // Returns one of those two, containing the final result.


  function exec(arr, comp) {
    if (typeof comp !== 'function') {
      comp = function comp(a, b) {
        return String(a).localeCompare(b);
      };
    } // Short-circuit when there's nothing to sort.


    var len = arr.length;

    if (len <= 1) {
      return arr;
    } // Rather than dividing input, simply iterate chunks of 1, 2, 4, 8, etc.
    // Chunks are the size of the left or right hand in merge sort.
    // Stop when the left-hand covers all of the array.


    var buffer = new Array(len);

    for (var chk = 1; chk < len; chk *= 2) {
      pass(arr, comp, chk, buffer);
      var tmp = arr;
      arr = buffer;
      buffer = tmp;
    }

    return arr;
  } // Run a single pass with the given chunk size.


  var pass = function pass(arr, comp, chk, result) {
    var len = arr.length;
    var i = 0; // Step size / double chunk size.

    var dbl = chk * 2; // Bounds of the left and right chunks.

    var l, r, e; // Iterators over the left and right chunk.

    var li, ri; // Iterate over pairs of chunks.

    for (l = 0; l < len; l += dbl) {
      r = l + chk;
      e = r + chk;
      if (r > len) r = len;
      if (e > len) e = len; // Iterate both chunks in parallel.

      li = l;
      ri = r;

      while (true) {
        // Compare the chunks.
        if (li < r && ri < e) {
          // This works for a regular `sort()` compatible comparator,
          // but also for a simple comparator like: `a > b`
          if (comp(arr[li], arr[ri]) <= 0) {
            result[i++] = arr[li++];
          } else {
            result[i++] = arr[ri++];
          }
        } // Nothing to compare, just flush what's left.
        else if (li < r) {
            result[i++] = arr[li++];
          } else if (ri < e) {
            result[i++] = arr[ri++];
          } // Both iterators are at the chunk ends.
          else {
              break;
            }
      }
    }
  };

  return stable;
});

/***/ }),
/* 507 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const DAGLink = __webpack_require__(58);

const genCid = __webpack_require__(241);
/*
 * toDAGLink converts a DAGNode to a DAGLink
 */


const toDAGLink = async (node, options = {}) => {
  const nodeCid = await genCid.cid(node.serialize(), options);
  return new DAGLink(options.name || '', node.size, nodeCid);
};

module.exports = toDAGLink;

/***/ }),
/* 508 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const sortLinks = __webpack_require__(238);

const DAGLink = __webpack_require__(242);

const asDAGLink = link => {
  if (DAGLink.isDAGLink(link)) {
    // It's a DAGLink instance
    // no need to do anything
    return link;
  } // DAGNode.isDagNode() would be more appropriate here, but it can't be used
  // as it would lead to circular dependencies as `addLink` is called from
  // within the DAGNode object.


  if (!('cid' in link || 'hash' in link || 'Hash' in link || 'multihash' in link)) {
    throw new Error('Link must be a DAGLink or DAGLink-like. Convert the DAGNode into a DAGLink via `node.toDAGLink()`.');
  } // It's a Object with name, multihash/hash/cid and size


  return new DAGLink(link.Name || link.name, link.Tsize || link.size, link.Hash || link.multihash || link.hash || link.cid);
};

const addLink = (node, link) => {
  const dagLink = asDAGLink(link);

  node._links.push(dagLink);

  node._links = sortLinks(node._links);
};

module.exports = addLink;

/***/ }),
/* 509 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const DAGLink = __webpack_require__(58);

function createDagLinkFromB58EncodedHash(link) {
  return new DAGLink(link.Name || link.name || '', link.Tsize || link.Size || link.size || 0, link.Hash || link.hash || link.multihash || link.cid);
}

exports = module.exports;
exports.createDagLinkFromB58EncodedHash = createDagLinkFromB58EncodedHash;

/***/ }),
/* 510 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const CID = __webpack_require__(3);

const rmLink = (dagNode, nameOrCid) => {
  // It's a name
  if (typeof nameOrCid === 'string') {
    dagNode._links = dagNode._links.filter(link => link.Name !== nameOrCid);
  } else if (Buffer.isBuffer(nameOrCid) || CID.isCID(nameOrCid)) {
    dagNode._links = dagNode._links.filter(link => !link.Hash.equals(nameOrCid));
  } else {
    throw new Error('second arg needs to be a name or CID');
  }
};

module.exports = rmLink;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 511 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const CID = __webpack_require__(3);

const util = __webpack_require__(243);
/**
 * Resolves a path within a PB block.
 *
 * Returns the value or a link and the partial mising path. This way the
 * IPLD Resolver can fetch the link and continue to resolve.
 *
 * @param {Buffer} binaryBlob - Binary representation of a PB block
 * @param {string} [path='/'] - Path that should be resolved
 * @returns {Object} result - Result of the path it it was resolved successfully
 * @returns {*} result.value - Value the path resolves to
 * @returns {string} result.remainderPath - If the path resolves half-way to a
 *   link, then the `remainderPath` is the part after the link that can be used
 *   for further resolving
 */


exports.resolve = (binaryBlob, path) => {
  let node = util.deserialize(binaryBlob);
  const parts = path.split('/').filter(Boolean);

  while (parts.length) {
    const key = parts.shift();

    if (node[key] === undefined) {
      // There might be a matching named link
      for (const link of node.Links) {
        if (link.Name === key) {
          return {
            value: link.Hash,
            remainderPath: parts.join('/')
          };
        }
      } // There wasn't even a matching named link


      throw new Error("Object has no property '".concat(key, "'"));
    }

    node = node[key];

    if (CID.isCID(node)) {
      return {
        value: node,
        remainderPath: parts.join('/')
      };
    }
  }

  return {
    value: node,
    remainderPath: ''
  };
};
/**
 * Return all available paths of a block.
 *
 * @generator
 * @param {Buffer} binaryBlob - Binary representation of a PB block
 * @yields {string} - A single path
 */


exports.tree = function* (binaryBlob) {
  const node = util.deserialize(binaryBlob); // There is always a `Data` and `Links` property

  yield 'Data';
  yield 'Links';

  for (let ii = 0; ii < node.Links.length; ii++) {
    yield "Links/".concat(ii);
    yield "Links/".concat(ii, "/Name");
    yield "Links/".concat(ii, "/Tsize");
    yield "Links/".concat(ii, "/Hash");
  }
};

/***/ }),
/* 512 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const errCode = __webpack_require__(2);

const UnixFS = __webpack_require__(25);

const persist = __webpack_require__(57);

const {
  DAGNode,
  DAGLink
} = __webpack_require__(12);

const all = __webpack_require__(143);

const parallelBatch = __webpack_require__(236);

const dagBuilders = {
  flat: __webpack_require__(513),
  balanced: __webpack_require__(514),
  trickle: __webpack_require__(515)
};

function buildFileBatch(_x, _x2, _x3, _x4) {
  return _buildFileBatch.apply(this, arguments);
}

function _buildFileBatch() {
  _buildFileBatch = _wrapAsyncGenerator(function* (file, source, ipld, options) {
    let count = -1;
    let previous;
    let bufferImporter;

    if (typeof options.bufferImporter === 'function') {
      bufferImporter = options.bufferImporter;
    } else {
      bufferImporter = __webpack_require__(516);
    }

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;

    var _iteratorError;

    try {
      for (var _iterator = _asyncIterator(parallelBatch(bufferImporter(file, source, ipld, options), options.blockWriteConcurrency)), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
        const entry = _value;
        count++;

        if (count === 0) {
          previous = entry;
          continue;
        } else if (count === 1) {
          yield previous;
          previous = null;
        }

        yield entry;
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          yield _awaitAsyncGenerator(_iterator.return());
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    if (previous) {
      previous.single = true;
      yield previous;
    }
  });
  return _buildFileBatch.apply(this, arguments);
}

const reduce = (file, ipld, options) => {
  return async function (leaves) {
    if (leaves.length === 1 && leaves[0].single && options.reduceSingleLeafToSelf) {
      const leaf = leaves[0];
      return {
        cid: leaf.cid,
        path: file.path,
        unixfs: leaf.unixfs,
        size: leaf.size
      };
    } // create a parent node and add all the leaves


    const f = new UnixFS({
      type: 'file',
      mtime: file.mtime,
      mode: file.mode
    });
    const links = leaves.filter(leaf => {
      if (leaf.cid.codec === 'raw' && leaf.size) {
        return true;
      }

      if (!leaf.unixfs.data && leaf.unixfs.fileSize()) {
        return true;
      }

      return Boolean(leaf.unixfs.data.length);
    }).map(leaf => {
      if (leaf.cid.codec === 'raw') {
        // node is a leaf buffer
        f.addBlockSize(leaf.size);
        return new DAGLink(leaf.name, leaf.size, leaf.cid);
      }

      if (!leaf.unixfs.data) {
        // node is an intermediate node
        f.addBlockSize(leaf.unixfs.fileSize());
      } else {
        // node is a unixfs 'file' leaf node
        f.addBlockSize(leaf.unixfs.data.length);
      }

      return new DAGLink(leaf.name, leaf.size, leaf.cid);
    });
    const node = new DAGNode(f.marshal(), links);
    const cid = await persist(node, ipld, options);
    return {
      cid,
      path: file.path,
      unixfs: f,
      size: node.size
    };
  };
};

const fileBuilder = async (file, source, ipld, options) => {
  const dagBuilder = dagBuilders[options.strategy];

  if (!dagBuilder) {
    throw errCode(new Error("Unknown importer build strategy name: ".concat(options.strategy)), 'ERR_BAD_STRATEGY');
  }

  const roots = await all(dagBuilder(buildFileBatch(file, source, ipld, options), reduce(file, ipld, options), options));

  if (roots.length > 1) {
    throw errCode(new Error('expected a maximum of 1 roots and got ' + roots.length), 'ETOOMANYROOTS');
  }

  return roots[0];
};

module.exports = fileBuilder;

/***/ }),
/* 513 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

const all = __webpack_require__(143);

module.exports =
/*#__PURE__*/
function () {
  var _ref = _wrapAsyncGenerator(function* (source, reduce) {
    yield reduce((yield _awaitAsyncGenerator(all(source))));
  });

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

/***/ }),
/* 514 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

const batch = __webpack_require__(142);

function balanced(_x, _x2, _x3) {
  return _balanced.apply(this, arguments);
}

function _balanced() {
  _balanced = _wrapAsyncGenerator(function* (source, reduce, options) {
    yield reduceToParents(source, reduce, options);
  });
  return _balanced.apply(this, arguments);
}

async function reduceToParents(source, reduce, options) {
  const roots = [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;

  var _iteratorError;

  try {
    for (var _iterator = _asyncIterator(batch(source, options.maxChildrenPerNode)), _step, _value; _step = await _iterator.next(), _iteratorNormalCompletion = _step.done, _value = await _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
      const chunked = _value;
      roots.push((await reduce(chunked)));
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        await _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  if (roots.length > 1) {
    return reduceToParents(roots, reduce, options);
  }

  return roots[0];
}

module.exports = balanced;

/***/ }),
/* 515 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const batch = __webpack_require__(142);

module.exports = function* trickleReduceToRoot(source, reduce, options) {
  yield trickleStream(source, reduce, options);
};

async function trickleStream(source, reduce, options) {
  let root;
  let iteration = 0;
  let maxDepth = 1;
  let subTree = root = new Root(options.layerRepeat);
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;

  var _iteratorError;

  try {
    for (var _iterator = _asyncIterator(batch(source, options.maxChildrenPerNode)), _step, _value; _step = await _iterator.next(), _iteratorNormalCompletion = _step.done, _value = await _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
      const layer = _value;

      if (subTree.isFull()) {
        if (subTree !== root) {
          root.addChild((await subTree.reduce(reduce)));
        }

        if (iteration && iteration % options.layerRepeat === 0) {
          maxDepth++;
        }

        subTree = new SubTree(maxDepth, options.layerRepeat, iteration);
        iteration++;
      }

      subTree.append(layer);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        await _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  if (subTree && subTree !== root) {
    root.addChild((await subTree.reduce(reduce)));
  }

  return root.reduce(reduce);
}

class SubTree {
  constructor(maxDepth, layerRepeat, iteration) {
    this.maxDepth = maxDepth;
    this.layerRepeat = layerRepeat;
    this.currentDepth = 1;
    this.iteration = iteration;
    this.root = this.node = this.parent = {
      children: [],
      depth: this.currentDepth,
      maxDepth,
      maxChildren: (this.maxDepth - this.currentDepth) * this.layerRepeat
    };
  }

  isFull() {
    if (!this.root.data) {
      return false;
    }

    if (this.currentDepth < this.maxDepth && this.node.maxChildren) {
      // can descend
      this._addNextNodeToParent(this.node);

      return false;
    } // try to find new node from node.parent


    const distantRelative = this._findParent(this.node, this.currentDepth);

    if (distantRelative) {
      this._addNextNodeToParent(distantRelative);

      return false;
    }

    return true;
  }

  _addNextNodeToParent(parent) {
    this.parent = parent; // find site for new node

    const nextNode = {
      children: [],
      depth: parent.depth + 1,
      parent,
      maxDepth: this.maxDepth,
      maxChildren: Math.floor(parent.children.length / this.layerRepeat) * this.layerRepeat
    };
    parent.children.push(nextNode);
    this.currentDepth = nextNode.depth;
    this.node = nextNode;
  }

  append(layer) {
    this.node.data = layer;
  }

  reduce(reduce) {
    return this._reduce(this.root, reduce);
  }

  async _reduce(node, reduce) {
    let children = [];

    if (node.children.length) {
      children = await Promise.all(node.children.filter(child => child.data).map(child => this._reduce(child, reduce)));
    }

    return reduce(node.data.concat(children));
  }

  _findParent(node, depth) {
    const parent = node.parent;

    if (!parent || parent.depth === 0) {
      return;
    }

    if (parent.children.length === parent.maxChildren || !parent.maxChildren) {
      // this layer is full, may be able to traverse to a different branch
      return this._findParent(parent, depth);
    }

    return parent;
  }

}

class Root extends SubTree {
  constructor(layerRepeat) {
    super(0, layerRepeat);
    this.root.depth = 0;
    this.currentDepth = 1;
  }

  addChild(child) {
    this.root.children.push(child);
  }

  reduce(reduce) {
    return reduce(this.root.data.concat(this.root.children));
  }

}

/***/ }),
/* 516 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const UnixFS = __webpack_require__(25);

const persist = __webpack_require__(57);

const {
  DAGNode
} = __webpack_require__(12);

function bufferImporter(_x, _x2, _x3, _x4) {
  return _bufferImporter.apply(this, arguments);
}

function _bufferImporter() {
  _bufferImporter = _wrapAsyncGenerator(function* (file, source, ipld, options) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;

    var _iteratorError;

    try {
      for (var _iterator = _asyncIterator(source), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
        const buffer = _value;
        yield async () => {
          options.progress(buffer.length);
          let node;
          let unixfs;
          let size;

          const opts = _objectSpread({}, options);

          if (options.rawLeaves) {
            node = buffer;
            size = buffer.length;
            opts.codec = 'raw';
            opts.cidVersion = 1;
          } else {
            unixfs = new UnixFS({
              type: options.leafType,
              data: buffer,
              mtime: file.mtime,
              mode: file.mode
            });
            node = new DAGNode(unixfs.marshal());
            size = node.size;
          }

          const cid = await persist(node, ipld, opts);
          return {
            cid: cid,
            unixfs,
            size
          };
        };
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          yield _awaitAsyncGenerator(_iterator.return());
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  });
  return _bufferImporter.apply(this, arguments);
}

module.exports = bufferImporter;

/***/ }),
/* 517 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const BufferList = __webpack_require__(30);

const {
  create
} = __webpack_require__(518);

const errcode = __webpack_require__(2);

module.exports =
/*#__PURE__*/
function () {
  var _rabinChunker = _wrapAsyncGenerator(function* (source, options) {
    const rabin = jsRabin();
    let min, max, avg;

    if (options.minChunkSize && options.maxChunkSize && options.avgChunkSize) {
      avg = options.avgChunkSize;
      min = options.minChunkSize;
      max = options.maxChunkSize;
    } else if (!options.avgChunkSize) {
      throw errcode(new Error('please specify an average chunk size'), 'ERR_INVALID_AVG_CHUNK_SIZE');
    } else {
      avg = options.avgChunkSize;
      min = avg / 3;
      max = avg + avg / 2;
    } // validate min/max/avg in the same way as go


    if (min < 16) {
      throw errcode(new Error('rabin min must be greater than 16'), 'ERR_INVALID_MIN_CHUNK_SIZE');
    }

    if (max < min) {
      max = min;
    }

    if (avg < min) {
      avg = min;
    }

    const sizepow = Math.floor(Math.log2(avg));
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;

    var _iteratorError;

    try {
      for (var _iterator = _asyncIterator(rabin(source, {
        min: min,
        max: max,
        bits: sizepow,
        window: options.window,
        polynomial: options.polynomial
      })), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
        const chunk = _value;
        yield chunk;
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          yield _awaitAsyncGenerator(_iterator.return());
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  });

  function rabinChunker(_x, _x2) {
    return _rabinChunker.apply(this, arguments);
  }

  return rabinChunker;
}();

const jsRabin = () => {
  return (
    /*#__PURE__*/
    function () {
      var _ref = _wrapAsyncGenerator(function* (source, options) {
        const r = yield _awaitAsyncGenerator(create(options.bits, options.min, options.max, options.window));
        const buffers = new BufferList();
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;

        var _iteratorError2;

        try {
          for (var _iterator2 = _asyncIterator(source), _step2, _value2; _step2 = yield _awaitAsyncGenerator(_iterator2.next()), _iteratorNormalCompletion2 = _step2.done, _value2 = yield _awaitAsyncGenerator(_step2.value), !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {
            const chunk = _value2;
            buffers.append(chunk);
            const sizes = r.fingerprint(chunk);

            for (let i = 0; i < sizes.length; i++) {
              var size = sizes[i];
              var buf = buffers.slice(0, size);
              buffers.consume(size);
              yield buf;
            }
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
              yield _awaitAsyncGenerator(_iterator2.return());
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        if (buffers.length) {
          yield buffers.slice(0);
        }
      });

      return function (_x3, _x4) {
        return _ref.apply(this, arguments);
      };
    }()
  );
};

/***/ }),
/* 518 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const Rabin = __webpack_require__(519);

const getRabin = __webpack_require__(520);

const create = async (bits, min, max, windowSize) => {
  const compiled = await getRabin();
  return new Rabin(bits, min, max, windowSize, compiled);
};

module.exports = {
  Rabin,
  create
};

/***/ }),
/* 519 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Rabin fingerprinting
 *
 * @class Rabin
 */
class Rabin {
  /**
   * Creates an instance of Rabin.
   * @param {number} [bits=12]
   * @param {number} [min=8 * 1024]
   * @param {number} [max=32 * 1024]
   * @param { import("./../dist/rabin").default } asModule
   * @memberof Rabin
   */
  constructor(bits = 12, min = 8 * 1024, max = 32 * 1024, windowSize = 64, asModule) {
    this.bits = bits;
    this.min = min;
    this.max = max;
    this.asModule = asModule;
    this.rabin = new asModule.Rabin(bits, min, max, windowSize);
  }
  /**
   * Fingerprints the buffer
   *
   * @param {Uint8Array} buf
   * @returns {Array<number>}
   * @memberof Rabin
   */


  fingerprint(buf) {
    const lengths = new Int32Array(Math.ceil(buf.length / this.min));
    const lengthsPtr = this.asModule.newArray(lengths);
    const pointer = this.asModule.newArray(buf); // run finderprint

    this.rabin.fingerprint(pointer, lengthsPtr);
    const processed = this.asModule.getArray(Int32Array, lengthsPtr); //free memory

    this.asModule.freeArray(lengthsPtr);
    this.asModule.freeArray(pointer); // TODO: remove this. @see https://github.com/ipfs/js-ipfs/issues/2118#issuecomment-497722625
    // clean extra 0s in the array

    const cleanArr = [];

    for (let i = 0; i < processed.length; i++) {
      if (processed[i] === 0) break;
      cleanArr[i] = processed[i];
    }

    return cleanArr;
  }

}

module.exports = Rabin;

/***/ }),
/* 520 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const {
  instantiateStreaming
} = __webpack_require__(521);

loadWebAssembly.supported = typeof WebAssembly !== 'undefined';

function loadWebAssembly(imp = {}) {
  if (!loadWebAssembly.supported) return null;
  var wasm = new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 90, 16, 96, 0, 0, 96, 2, 127, 127, 1, 127, 96, 4, 127, 127, 127, 127, 0, 96, 1, 127, 1, 127, 96, 3, 127, 127, 127, 0, 96, 1, 126, 1, 127, 96, 2, 126, 126, 1, 126, 96, 5, 127, 127, 127, 127, 127, 1, 127, 96, 3, 127, 127, 126, 0, 96, 2, 127, 127, 1, 126, 96, 3, 127, 127, 127, 1, 127, 96, 1, 127, 0, 96, 2, 127, 127, 0, 96, 1, 127, 1, 126, 96, 2, 127, 126, 0, 96, 0, 1, 127, 2, 13, 1, 3, 101, 110, 118, 5, 97, 98, 111, 114, 116, 0, 2, 3, 57, 56, 3, 3, 12, 3, 3, 15, 5, 6, 1, 8, 4, 1, 9, 11, 7, 4, 10, 10, 11, 0, 0, 0, 3, 12, 3, 12, 3, 12, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 4, 4, 1, 112, 0, 1, 5, 3, 1, 0, 1, 6, 26, 5, 127, 1, 65, 0, 11, 127, 1, 65, 0, 11, 127, 1, 65, 0, 11, 127, 1, 65, 0, 11, 127, 1, 65, 0, 11, 7, 253, 6, 44, 6, 109, 101, 109, 111, 114, 121, 2, 0, 5, 116, 97, 98, 108, 101, 1, 0, 6, 100, 101, 103, 114, 101, 101, 0, 7, 3, 109, 111, 100, 0, 8, 16, 82, 97, 98, 105, 110, 35, 103, 101, 116, 58, 119, 105, 110, 100, 111, 119, 0, 23, 16, 82, 97, 98, 105, 110, 35, 115, 101, 116, 58, 119, 105, 110, 100, 111, 119, 0, 24, 21, 82, 97, 98, 105, 110, 35, 103, 101, 116, 58, 119, 105, 110, 100, 111, 119, 95, 115, 105, 122, 101, 0, 25, 21, 82, 97, 98, 105, 110, 35, 115, 101, 116, 58, 119, 105, 110, 100, 111, 119, 95, 115, 105, 122, 101, 0, 26, 14, 82, 97, 98, 105, 110, 35, 103, 101, 116, 58, 119, 112, 111, 115, 0, 27, 14, 82, 97, 98, 105, 110, 35, 115, 101, 116, 58, 119, 112, 111, 115, 0, 28, 15, 82, 97, 98, 105, 110, 35, 103, 101, 116, 58, 99, 111, 117, 110, 116, 0, 29, 15, 82, 97, 98, 105, 110, 35, 115, 101, 116, 58, 99, 111, 117, 110, 116, 0, 30, 13, 82, 97, 98, 105, 110, 35, 103, 101, 116, 58, 112, 111, 115, 0, 31, 13, 82, 97, 98, 105, 110, 35, 115, 101, 116, 58, 112, 111, 115, 0, 32, 15, 82, 97, 98, 105, 110, 35, 103, 101, 116, 58, 115, 116, 97, 114, 116, 0, 33, 15, 82, 97, 98, 105, 110, 35, 115, 101, 116, 58, 115, 116, 97, 114, 116, 0, 34, 16, 82, 97, 98, 105, 110, 35, 103, 101, 116, 58, 100, 105, 103, 101, 115, 116, 0, 35, 16, 82, 97, 98, 105, 110, 35, 115, 101, 116, 58, 100, 105, 103, 101, 115, 116, 0, 36, 21, 82, 97, 98, 105, 110, 35, 103, 101, 116, 58, 99, 104, 117, 110, 107, 95, 115, 116, 97, 114, 116, 0, 37, 21, 82, 97, 98, 105, 110, 35, 115, 101, 116, 58, 99, 104, 117, 110, 107, 95, 115, 116, 97, 114, 116, 0, 38, 22, 82, 97, 98, 105, 110, 35, 103, 101, 116, 58, 99, 104, 117, 110, 107, 95, 108, 101, 110, 103, 116, 104, 0, 39, 22, 82, 97, 98, 105, 110, 35, 115, 101, 116, 58, 99, 104, 117, 110, 107, 95, 108, 101, 110, 103, 116, 104, 0, 40, 31, 82, 97, 98, 105, 110, 35, 103, 101, 116, 58, 99, 104, 117, 110, 107, 95, 99, 117, 116, 95, 102, 105, 110, 103, 101, 114, 112, 114, 105, 110, 116, 0, 41, 31, 82, 97, 98, 105, 110, 35, 115, 101, 116, 58, 99, 104, 117, 110, 107, 95, 99, 117, 116, 95, 102, 105, 110, 103, 101, 114, 112, 114, 105, 110, 116, 0, 42, 20, 82, 97, 98, 105, 110, 35, 103, 101, 116, 58, 112, 111, 108, 121, 110, 111, 109, 105, 97, 108, 0, 43, 20, 82, 97, 98, 105, 110, 35, 115, 101, 116, 58, 112, 111, 108, 121, 110, 111, 109, 105, 97, 108, 0, 44, 27, 82, 97, 98, 105, 110, 35, 103, 101, 116, 58, 112, 111, 108, 121, 110, 111, 109, 105, 97, 108, 95, 100, 101, 103, 114, 101, 101, 0, 45, 27, 82, 97, 98, 105, 110, 35, 115, 101, 116, 58, 112, 111, 108, 121, 110, 111, 109, 105, 97, 108, 95, 100, 101, 103, 114, 101, 101, 0, 46, 26, 82, 97, 98, 105, 110, 35, 103, 101, 116, 58, 112, 111, 108, 121, 110, 111, 109, 105, 97, 108, 95, 115, 104, 105, 102, 116, 0, 47, 26, 82, 97, 98, 105, 110, 35, 115, 101, 116, 58, 112, 111, 108, 121, 110, 111, 109, 105, 97, 108, 95, 115, 104, 105, 102, 116, 0, 48, 22, 82, 97, 98, 105, 110, 35, 103, 101, 116, 58, 97, 118, 101, 114, 97, 103, 101, 95, 98, 105, 116, 115, 0, 49, 22, 82, 97, 98, 105, 110, 35, 115, 101, 116, 58, 97, 118, 101, 114, 97, 103, 101, 95, 98, 105, 116, 115, 0, 50, 17, 82, 97, 98, 105, 110, 35, 103, 101, 116, 58, 109, 105, 110, 115, 105, 122, 101, 0, 51, 17, 82, 97, 98, 105, 110, 35, 115, 101, 116, 58, 109, 105, 110, 115, 105, 122, 101, 0, 52, 17, 82, 97, 98, 105, 110, 35, 103, 101, 116, 58, 109, 97, 120, 115, 105, 122, 101, 0, 53, 17, 82, 97, 98, 105, 110, 35, 115, 101, 116, 58, 109, 97, 120, 115, 105, 122, 101, 0, 54, 14, 82, 97, 98, 105, 110, 35, 103, 101, 116, 58, 109, 97, 115, 107, 0, 55, 14, 82, 97, 98, 105, 110, 35, 115, 101, 116, 58, 109, 97, 115, 107, 0, 56, 17, 82, 97, 98, 105, 110, 35, 99, 111, 110, 115, 116, 114, 117, 99, 116, 111, 114, 0, 15, 17, 82, 97, 98, 105, 110, 35, 102, 105, 110, 103, 101, 114, 112, 114, 105, 110, 116, 0, 16, 14, 109, 101, 109, 111, 114, 121, 46, 99, 111, 109, 112, 97, 114, 101, 0, 18, 15, 109, 101, 109, 111, 114, 121, 46, 97, 108, 108, 111, 99, 97, 116, 101, 0, 4, 11, 109, 101, 109, 111, 114, 121, 46, 102, 114, 101, 101, 0, 19, 12, 109, 101, 109, 111, 114, 121, 46, 114, 101, 115, 101, 116, 0, 20, 8, 1, 21, 9, 7, 1, 0, 65, 0, 11, 1, 22, 10, 188, 30, 56, 104, 1, 3, 127, 32, 0, 65, 128, 128, 128, 128, 4, 75, 4, 64, 0, 11, 35, 1, 34, 1, 32, 0, 65, 1, 32, 0, 65, 1, 75, 27, 106, 65, 7, 106, 65, 120, 113, 34, 0, 63, 0, 34, 2, 65, 16, 116, 75, 4, 64, 32, 2, 32, 0, 32, 1, 107, 65, 255, 255, 3, 106, 65, 128, 128, 124, 113, 65, 16, 118, 34, 3, 32, 2, 32, 3, 74, 27, 64, 0, 65, 0, 72, 4, 64, 32, 3, 64, 0, 65, 0, 72, 4, 64, 0, 11, 11, 11, 32, 0, 36, 1, 32, 1, 11, 51, 1, 1, 127, 32, 0, 65, 248, 255, 255, 255, 3, 75, 4, 64, 65, 0, 65, 200, 0, 65, 26, 65, 2, 16, 0, 0, 11, 65, 1, 65, 32, 32, 0, 65, 7, 106, 103, 107, 116, 16, 1, 34, 1, 32, 0, 54, 2, 0, 32, 1, 11, 145, 3, 1, 1, 127, 32, 1, 69, 4, 64, 15, 11, 32, 0, 65, 0, 58, 0, 0, 32, 0, 32, 1, 106, 65, 1, 107, 65, 0, 58, 0, 0, 32, 1, 65, 2, 77, 4, 64, 15, 11, 32, 0, 65, 1, 106, 65, 0, 58, 0, 0, 32, 0, 65, 2, 106, 65, 0, 58, 0, 0, 32, 0, 32, 1, 106, 34, 2, 65, 2, 107, 65, 0, 58, 0, 0, 32, 2, 65, 3, 107, 65, 0, 58, 0, 0, 32, 1, 65, 6, 77, 4, 64, 15, 11, 32, 0, 65, 3, 106, 65, 0, 58, 0, 0, 32, 0, 32, 1, 106, 65, 4, 107, 65, 0, 58, 0, 0, 32, 1, 65, 8, 77, 4, 64, 15, 11, 65, 0, 32, 0, 107, 65, 3, 113, 34, 2, 32, 0, 106, 34, 0, 65, 0, 54, 2, 0, 32, 1, 32, 2, 107, 65, 124, 113, 34, 1, 32, 0, 106, 65, 4, 107, 65, 0, 54, 2, 0, 32, 1, 65, 8, 77, 4, 64, 15, 11, 32, 0, 65, 4, 106, 65, 0, 54, 2, 0, 32, 0, 65, 8, 106, 65, 0, 54, 2, 0, 32, 0, 32, 1, 106, 34, 2, 65, 12, 107, 65, 0, 54, 2, 0, 32, 2, 65, 8, 107, 65, 0, 54, 2, 0, 32, 1, 65, 24, 77, 4, 64, 15, 11, 32, 0, 65, 12, 106, 65, 0, 54, 2, 0, 32, 0, 65, 16, 106, 65, 0, 54, 2, 0, 32, 0, 65, 20, 106, 65, 0, 54, 2, 0, 32, 0, 65, 24, 106, 65, 0, 54, 2, 0, 32, 0, 32, 1, 106, 34, 2, 65, 28, 107, 65, 0, 54, 2, 0, 32, 2, 65, 24, 107, 65, 0, 54, 2, 0, 32, 2, 65, 20, 107, 65, 0, 54, 2, 0, 32, 2, 65, 16, 107, 65, 0, 54, 2, 0, 32, 0, 65, 4, 113, 65, 24, 106, 34, 2, 32, 0, 106, 33, 0, 32, 1, 32, 2, 107, 33, 1, 3, 64, 32, 1, 65, 32, 79, 4, 64, 32, 0, 66, 0, 55, 3, 0, 32, 0, 65, 8, 106, 66, 0, 55, 3, 0, 32, 0, 65, 16, 106, 66, 0, 55, 3, 0, 32, 0, 65, 24, 106, 66, 0, 55, 3, 0, 32, 1, 65, 32, 107, 33, 1, 32, 0, 65, 32, 106, 33, 0, 12, 1, 11, 11, 11, 6, 0, 32, 0, 16, 1, 11, 76, 1, 1, 127, 65, 128, 16, 16, 2, 34, 1, 65, 8, 106, 65, 128, 16, 16, 3, 32, 0, 69, 4, 64, 65, 12, 16, 1, 33, 0, 11, 32, 0, 65, 0, 54, 2, 0, 32, 0, 65, 0, 54, 2, 4, 32, 0, 65, 0, 54, 2, 8, 32, 0, 32, 1, 54, 2, 0, 32, 0, 65, 0, 54, 2, 4, 32, 0, 65, 128, 16, 54, 2, 8, 32, 0, 11, 8, 0, 65, 12, 16, 1, 16, 5, 11, 70, 2, 1, 127, 1, 126, 66, 128, 128, 128, 128, 128, 128, 128, 128, 128, 127, 33, 2, 3, 64, 2, 64, 32, 1, 65, 192, 0, 78, 13, 0, 32, 0, 32, 2, 131, 66, 0, 86, 4, 64, 65, 63, 32, 1, 107, 15, 5, 32, 2, 66, 1, 136, 33, 2, 32, 1, 65, 1, 106, 33, 1, 12, 2, 11, 0, 11, 11, 65, 127, 11, 175, 2, 2, 1, 127, 2, 126, 3, 64, 2, 127, 66, 128, 128, 128, 128, 128, 128, 128, 128, 128, 127, 33, 3, 65, 0, 33, 2, 3, 64, 2, 64, 32, 2, 65, 192, 0, 78, 13, 0, 65, 63, 32, 2, 107, 32, 0, 32, 3, 131, 66, 0, 86, 13, 2, 26, 32, 3, 66, 1, 136, 33, 3, 32, 2, 65, 1, 106, 33, 2, 12, 1, 11, 11, 65, 127, 11, 2, 127, 32, 1, 33, 4, 66, 128, 128, 128, 128, 128, 128, 128, 128, 128, 127, 33, 3, 65, 0, 33, 2, 3, 64, 2, 64, 32, 2, 65, 192, 0, 78, 13, 0, 65, 63, 32, 2, 107, 32, 3, 32, 4, 131, 66, 0, 86, 13, 2, 26, 32, 3, 66, 1, 136, 33, 3, 32, 2, 65, 1, 106, 33, 2, 12, 1, 11, 11, 65, 127, 11, 78, 4, 64, 32, 1, 2, 127, 66, 128, 128, 128, 128, 128, 128, 128, 128, 128, 127, 33, 3, 65, 0, 33, 2, 3, 64, 2, 64, 32, 2, 65, 192, 0, 78, 13, 0, 65, 63, 32, 2, 107, 32, 0, 32, 3, 131, 66, 0, 86, 13, 2, 26, 32, 3, 66, 1, 136, 33, 3, 32, 2, 65, 1, 106, 33, 2, 12, 1, 11, 11, 65, 127, 11, 2, 127, 66, 128, 128, 128, 128, 128, 128, 128, 128, 128, 127, 33, 3, 65, 0, 33, 2, 3, 64, 2, 64, 32, 2, 65, 192, 0, 78, 13, 0, 65, 63, 32, 2, 107, 32, 1, 32, 3, 131, 66, 0, 86, 13, 2, 26, 32, 3, 66, 1, 136, 33, 3, 32, 2, 65, 1, 106, 33, 2, 12, 1, 11, 11, 65, 127, 11, 107, 172, 134, 32, 0, 133, 33, 0, 12, 1, 11, 11, 32, 0, 11, 96, 1, 1, 127, 32, 1, 65, 248, 255, 255, 255, 3, 75, 4, 64, 65, 0, 65, 8, 65, 23, 65, 34, 16, 0, 0, 11, 32, 1, 16, 2, 34, 2, 65, 8, 106, 32, 1, 16, 3, 32, 0, 69, 4, 64, 65, 12, 16, 1, 33, 0, 11, 32, 0, 65, 0, 54, 2, 0, 32, 0, 65, 0, 54, 2, 4, 32, 0, 65, 0, 54, 2, 8, 32, 0, 32, 2, 54, 2, 0, 32, 0, 65, 0, 54, 2, 4, 32, 0, 32, 1, 54, 2, 8, 32, 0, 11, 49, 0, 32, 1, 32, 0, 40, 2, 8, 65, 3, 118, 79, 4, 64, 65, 0, 65, 8, 65, 50, 65, 63, 16, 0, 0, 11, 32, 0, 40, 2, 4, 32, 0, 40, 2, 0, 32, 1, 65, 3, 116, 106, 106, 32, 2, 55, 3, 8, 11, 43, 0, 32, 1, 32, 0, 40, 2, 8, 79, 4, 64, 65, 0, 65, 8, 65, 50, 65, 63, 16, 0, 0, 11, 32, 0, 40, 2, 4, 32, 1, 32, 0, 40, 2, 0, 106, 106, 32, 2, 58, 0, 8, 11, 41, 0, 32, 1, 32, 0, 40, 2, 8, 79, 4, 64, 65, 0, 65, 8, 65, 39, 65, 63, 16, 0, 0, 11, 32, 0, 40, 2, 4, 32, 1, 32, 0, 40, 2, 0, 106, 106, 45, 0, 8, 11, 47, 0, 32, 1, 32, 0, 40, 2, 8, 65, 3, 118, 79, 4, 64, 65, 0, 65, 8, 65, 39, 65, 63, 16, 0, 0, 11, 32, 0, 40, 2, 4, 32, 0, 40, 2, 0, 32, 1, 65, 3, 116, 106, 106, 41, 3, 8, 11, 166, 10, 2, 3, 127, 5, 126, 35, 2, 69, 4, 64, 3, 64, 32, 2, 65, 128, 2, 72, 4, 64, 32, 2, 65, 255, 1, 113, 173, 33, 4, 32, 0, 41, 3, 72, 33, 6, 3, 64, 2, 127, 32, 4, 33, 5, 66, 128, 128, 128, 128, 128, 128, 128, 128, 128, 127, 33, 4, 65, 0, 33, 1, 3, 64, 32, 1, 65, 192, 0, 72, 4, 64, 65, 63, 32, 1, 107, 32, 4, 32, 5, 131, 66, 0, 86, 13, 2, 26, 32, 4, 66, 1, 136, 33, 4, 32, 1, 65, 1, 106, 33, 1, 12, 1, 11, 11, 65, 127, 11, 2, 127, 32, 6, 33, 7, 66, 128, 128, 128, 128, 128, 128, 128, 128, 128, 127, 33, 4, 65, 0, 33, 1, 3, 64, 32, 1, 65, 192, 0, 72, 4, 64, 65, 63, 32, 1, 107, 32, 4, 32, 7, 131, 66, 0, 86, 13, 2, 26, 32, 4, 66, 1, 136, 33, 4, 32, 1, 65, 1, 106, 33, 1, 12, 1, 11, 11, 65, 127, 11, 78, 4, 64, 32, 6, 2, 127, 66, 128, 128, 128, 128, 128, 128, 128, 128, 128, 127, 33, 4, 65, 0, 33, 1, 3, 64, 32, 1, 65, 192, 0, 72, 4, 64, 65, 63, 32, 1, 107, 32, 4, 32, 5, 131, 66, 0, 86, 13, 2, 26, 32, 4, 66, 1, 136, 33, 4, 32, 1, 65, 1, 106, 33, 1, 12, 1, 11, 11, 65, 127, 11, 2, 127, 66, 128, 128, 128, 128, 128, 128, 128, 128, 128, 127, 33, 4, 65, 0, 33, 1, 3, 64, 32, 1, 65, 192, 0, 72, 4, 64, 65, 63, 32, 1, 107, 32, 4, 32, 6, 131, 66, 0, 86, 13, 2, 26, 32, 4, 66, 1, 136, 33, 4, 32, 1, 65, 1, 106, 33, 1, 12, 1, 11, 11, 65, 127, 11, 107, 172, 134, 32, 5, 133, 33, 4, 12, 1, 11, 11, 65, 0, 33, 1, 3, 64, 32, 1, 32, 0, 40, 2, 4, 65, 1, 107, 72, 4, 64, 32, 5, 66, 8, 134, 33, 4, 32, 0, 41, 3, 72, 33, 6, 3, 64, 2, 127, 32, 4, 33, 5, 66, 128, 128, 128, 128, 128, 128, 128, 128, 128, 127, 33, 4, 65, 0, 33, 3, 3, 64, 32, 3, 65, 192, 0, 72, 4, 64, 65, 63, 32, 3, 107, 32, 4, 32, 5, 131, 66, 0, 86, 13, 2, 26, 32, 4, 66, 1, 136, 33, 4, 32, 3, 65, 1, 106, 33, 3, 12, 1, 11, 11, 65, 127, 11, 2, 127, 32, 6, 33, 7, 66, 128, 128, 128, 128, 128, 128, 128, 128, 128, 127, 33, 4, 65, 0, 33, 3, 3, 64, 32, 3, 65, 192, 0, 72, 4, 64, 65, 63, 32, 3, 107, 32, 4, 32, 7, 131, 66, 0, 86, 13, 2, 26, 32, 4, 66, 1, 136, 33, 4, 32, 3, 65, 1, 106, 33, 3, 12, 1, 11, 11, 65, 127, 11, 78, 4, 64, 32, 6, 2, 127, 66, 128, 128, 128, 128, 128, 128, 128, 128, 128, 127, 33, 4, 65, 0, 33, 3, 3, 64, 32, 3, 65, 192, 0, 72, 4, 64, 65, 63, 32, 3, 107, 32, 4, 32, 5, 131, 66, 0, 86, 13, 2, 26, 32, 4, 66, 1, 136, 33, 4, 32, 3, 65, 1, 106, 33, 3, 12, 1, 11, 11, 65, 127, 11, 2, 127, 66, 128, 128, 128, 128, 128, 128, 128, 128, 128, 127, 33, 4, 65, 0, 33, 3, 3, 64, 32, 3, 65, 192, 0, 72, 4, 64, 65, 63, 32, 3, 107, 32, 4, 32, 6, 131, 66, 0, 86, 13, 2, 26, 32, 4, 66, 1, 136, 33, 4, 32, 3, 65, 1, 106, 33, 3, 12, 1, 11, 11, 65, 127, 11, 107, 172, 134, 32, 5, 133, 33, 4, 12, 1, 11, 11, 32, 1, 65, 1, 106, 33, 1, 12, 1, 11, 11, 35, 4, 32, 2, 32, 5, 16, 10, 32, 2, 65, 1, 106, 33, 2, 12, 1, 11, 11, 2, 127, 32, 0, 41, 3, 72, 33, 4, 66, 128, 128, 128, 128, 128, 128, 128, 128, 128, 127, 33, 5, 65, 0, 33, 2, 3, 64, 32, 2, 65, 192, 0, 72, 4, 64, 65, 63, 32, 2, 107, 32, 4, 32, 5, 131, 66, 0, 86, 13, 2, 26, 32, 5, 66, 1, 136, 33, 5, 32, 2, 65, 1, 106, 33, 2, 12, 1, 11, 11, 65, 127, 11, 172, 33, 8, 65, 0, 33, 2, 3, 64, 32, 2, 65, 128, 2, 72, 4, 64, 35, 3, 33, 3, 32, 2, 172, 32, 8, 134, 33, 5, 32, 0, 41, 3, 72, 33, 6, 3, 64, 2, 127, 66, 128, 128, 128, 128, 128, 128, 128, 128, 128, 127, 33, 4, 65, 0, 33, 1, 3, 64, 32, 1, 65, 192, 0, 72, 4, 64, 65, 63, 32, 1, 107, 32, 4, 32, 5, 131, 66, 0, 86, 13, 2, 26, 32, 4, 66, 1, 136, 33, 4, 32, 1, 65, 1, 106, 33, 1, 12, 1, 11, 11, 65, 127, 11, 2, 127, 32, 6, 33, 7, 66, 128, 128, 128, 128, 128, 128, 128, 128, 128, 127, 33, 4, 65, 0, 33, 1, 3, 64, 32, 1, 65, 192, 0, 72, 4, 64, 65, 63, 32, 1, 107, 32, 4, 32, 7, 131, 66, 0, 86, 13, 2, 26, 32, 4, 66, 1, 136, 33, 4, 32, 1, 65, 1, 106, 33, 1, 12, 1, 11, 11, 65, 127, 11, 78, 4, 64, 32, 6, 2, 127, 66, 128, 128, 128, 128, 128, 128, 128, 128, 128, 127, 33, 4, 65, 0, 33, 1, 3, 64, 32, 1, 65, 192, 0, 72, 4, 64, 65, 63, 32, 1, 107, 32, 4, 32, 5, 131, 66, 0, 86, 13, 2, 26, 32, 4, 66, 1, 136, 33, 4, 32, 1, 65, 1, 106, 33, 1, 12, 1, 11, 11, 65, 127, 11, 2, 127, 66, 128, 128, 128, 128, 128, 128, 128, 128, 128, 127, 33, 4, 65, 0, 33, 1, 3, 64, 32, 1, 65, 192, 0, 72, 4, 64, 65, 63, 32, 1, 107, 32, 4, 32, 6, 131, 66, 0, 86, 13, 2, 26, 32, 4, 66, 1, 136, 33, 4, 32, 1, 65, 1, 106, 33, 1, 12, 1, 11, 11, 65, 127, 11, 107, 172, 134, 32, 5, 133, 33, 5, 12, 1, 11, 11, 32, 3, 32, 2, 32, 2, 172, 32, 8, 134, 32, 5, 132, 16, 10, 32, 2, 65, 1, 106, 33, 2, 12, 1, 11, 11, 65, 1, 36, 2, 11, 32, 0, 66, 0, 55, 3, 24, 32, 0, 66, 0, 55, 3, 32, 65, 0, 33, 2, 3, 64, 32, 2, 32, 0, 40, 2, 4, 72, 4, 64, 32, 0, 40, 2, 0, 32, 2, 65, 0, 16, 11, 32, 2, 65, 1, 106, 33, 2, 12, 1, 11, 11, 32, 0, 66, 0, 55, 3, 40, 32, 0, 65, 0, 54, 2, 8, 32, 0, 66, 0, 55, 3, 16, 32, 0, 66, 0, 55, 3, 40, 32, 0, 40, 2, 0, 32, 0, 40, 2, 8, 16, 12, 33, 1, 32, 0, 40, 2, 0, 32, 0, 40, 2, 8, 65, 1, 16, 11, 32, 0, 32, 0, 41, 3, 40, 35, 4, 32, 1, 65, 255, 1, 113, 16, 13, 133, 55, 3, 40, 32, 0, 32, 0, 40, 2, 8, 65, 1, 106, 32, 0, 40, 2, 4, 111, 54, 2, 8, 32, 0, 41, 3, 40, 32, 0, 41, 3, 88, 136, 167, 33, 1, 32, 0, 32, 0, 41, 3, 40, 66, 8, 134, 55, 3, 40, 32, 0, 32, 0, 41, 3, 40, 66, 1, 132, 55, 3, 40, 32, 0, 32, 0, 41, 3, 40, 35, 3, 32, 1, 65, 255, 1, 113, 16, 13, 133, 55, 3, 40, 11, 234, 1, 0, 32, 0, 69, 4, 64, 65, 128, 1, 16, 1, 33, 0, 11, 32, 0, 65, 0, 54, 2, 0, 32, 0, 65, 0, 54, 2, 4, 32, 0, 65, 0, 54, 2, 8, 32, 0, 66, 0, 55, 3, 16, 32, 0, 66, 0, 55, 3, 24, 32, 0, 66, 0, 55, 3, 32, 32, 0, 66, 0, 55, 3, 40, 32, 0, 66, 0, 55, 3, 48, 32, 0, 66, 0, 55, 3, 56, 32, 0, 66, 0, 55, 3, 64, 32, 0, 66, 0, 55, 3, 72, 32, 0, 66, 0, 55, 3, 80, 32, 0, 66, 0, 55, 3, 88, 32, 0, 66, 0, 55, 3, 96, 32, 0, 66, 0, 55, 3, 104, 32, 0, 66, 0, 55, 3, 112, 32, 0, 66, 0, 55, 3, 120, 32, 0, 32, 1, 173, 55, 3, 96, 32, 0, 32, 2, 173, 55, 3, 104, 32, 0, 32, 3, 173, 55, 3, 112, 32, 0, 65, 12, 16, 1, 32, 4, 16, 9, 54, 2, 0, 32, 0, 32, 4, 54, 2, 4, 32, 0, 66, 1, 32, 0, 41, 3, 96, 134, 66, 1, 125, 55, 3, 120, 32, 0, 66, 243, 130, 183, 218, 216, 230, 232, 30, 55, 3, 72, 32, 0, 66, 53, 55, 3, 80, 32, 0, 32, 0, 41, 3, 80, 66, 8, 125, 55, 3, 88, 32, 0, 16, 14, 32, 0, 11, 206, 4, 1, 5, 127, 32, 1, 40, 2, 8, 33, 4, 32, 1, 40, 2, 0, 65, 8, 106, 33, 5, 3, 64, 2, 127, 65, 0, 33, 3, 3, 64, 32, 3, 32, 4, 72, 4, 64, 32, 3, 32, 5, 106, 45, 0, 0, 33, 1, 32, 0, 40, 2, 0, 32, 0, 40, 2, 8, 16, 12, 33, 6, 32, 0, 40, 2, 0, 32, 0, 40, 2, 8, 32, 1, 16, 11, 32, 0, 32, 0, 41, 3, 40, 35, 4, 32, 6, 65, 255, 1, 113, 16, 13, 133, 55, 3, 40, 32, 0, 32, 0, 40, 2, 8, 65, 1, 106, 32, 0, 40, 2, 4, 111, 54, 2, 8, 32, 0, 41, 3, 40, 32, 0, 41, 3, 88, 136, 167, 33, 6, 32, 0, 32, 0, 41, 3, 40, 66, 8, 134, 55, 3, 40, 32, 0, 32, 0, 41, 3, 40, 32, 1, 173, 132, 55, 3, 40, 32, 0, 32, 0, 41, 3, 40, 35, 3, 32, 6, 65, 255, 1, 113, 16, 13, 133, 55, 3, 40, 32, 0, 32, 0, 41, 3, 16, 66, 1, 124, 55, 3, 16, 32, 0, 32, 0, 41, 3, 24, 66, 1, 124, 55, 3, 24, 2, 127, 32, 0, 41, 3, 16, 32, 0, 41, 3, 104, 90, 34, 1, 4, 64, 32, 0, 41, 3, 40, 32, 0, 41, 3, 120, 131, 66, 0, 81, 33, 1, 11, 32, 1, 69, 11, 4, 127, 32, 0, 41, 3, 16, 32, 0, 41, 3, 112, 90, 5, 32, 1, 11, 4, 64, 32, 0, 32, 0, 41, 3, 32, 55, 3, 48, 32, 0, 32, 0, 41, 3, 16, 55, 3, 56, 32, 0, 32, 0, 41, 3, 40, 55, 3, 64, 65, 0, 33, 1, 3, 64, 32, 1, 32, 0, 40, 2, 4, 72, 4, 64, 32, 0, 40, 2, 0, 32, 1, 65, 0, 16, 11, 32, 1, 65, 1, 106, 33, 1, 12, 1, 11, 11, 32, 0, 66, 0, 55, 3, 40, 32, 0, 65, 0, 54, 2, 8, 32, 0, 66, 0, 55, 3, 16, 32, 0, 66, 0, 55, 3, 40, 32, 0, 40, 2, 0, 32, 0, 40, 2, 8, 16, 12, 33, 1, 32, 0, 40, 2, 0, 32, 0, 40, 2, 8, 65, 1, 16, 11, 32, 0, 32, 0, 41, 3, 40, 35, 4, 32, 1, 65, 255, 1, 113, 16, 13, 133, 55, 3, 40, 32, 0, 32, 0, 40, 2, 8, 65, 1, 106, 32, 0, 40, 2, 4, 111, 54, 2, 8, 32, 0, 41, 3, 40, 32, 0, 41, 3, 88, 136, 167, 33, 1, 32, 0, 32, 0, 41, 3, 40, 66, 8, 134, 55, 3, 40, 32, 0, 32, 0, 41, 3, 40, 66, 1, 132, 55, 3, 40, 32, 0, 32, 0, 41, 3, 40, 35, 3, 32, 1, 65, 255, 1, 113, 16, 13, 133, 55, 3, 40, 32, 3, 65, 1, 106, 12, 3, 5, 32, 3, 65, 1, 106, 33, 3, 12, 2, 11, 0, 11, 11, 65, 127, 11, 34, 1, 65, 0, 78, 4, 64, 32, 4, 32, 1, 107, 33, 4, 32, 1, 32, 5, 106, 33, 5, 32, 7, 34, 1, 65, 1, 106, 33, 7, 32, 2, 40, 2, 4, 32, 2, 40, 2, 0, 32, 1, 65, 2, 116, 106, 106, 32, 0, 41, 3, 56, 62, 2, 8, 32, 2, 40, 2, 4, 32, 2, 40, 2, 0, 32, 1, 65, 2, 116, 106, 106, 40, 2, 8, 26, 12, 1, 11, 11, 11, 88, 1, 1, 127, 32, 0, 32, 1, 70, 4, 64, 65, 0, 15, 11, 3, 64, 32, 2, 65, 0, 71, 34, 3, 4, 64, 32, 0, 45, 0, 0, 32, 1, 45, 0, 0, 70, 33, 3, 11, 32, 3, 4, 64, 32, 2, 65, 1, 107, 33, 2, 32, 0, 65, 1, 106, 33, 0, 32, 1, 65, 1, 106, 33, 1, 12, 1, 11, 11, 32, 2, 4, 127, 32, 0, 45, 0, 0, 32, 1, 45, 0, 0, 107, 5, 65, 0, 11, 11, 10, 0, 32, 0, 32, 1, 32, 2, 16, 17, 11, 3, 0, 1, 11, 6, 0, 35, 0, 36, 1, 11, 19, 0, 65, 136, 1, 36, 0, 35, 0, 36, 1, 16, 6, 36, 3, 16, 6, 36, 4, 11, 3, 0, 1, 11, 7, 0, 32, 0, 40, 2, 0, 11, 9, 0, 32, 0, 32, 1, 54, 2, 0, 11, 7, 0, 32, 0, 40, 2, 4, 11, 9, 0, 32, 0, 32, 1, 54, 2, 4, 11, 7, 0, 32, 0, 40, 2, 8, 11, 9, 0, 32, 0, 32, 1, 54, 2, 8, 11, 7, 0, 32, 0, 41, 3, 16, 11, 9, 0, 32, 0, 32, 1, 55, 3, 16, 11, 7, 0, 32, 0, 41, 3, 24, 11, 9, 0, 32, 0, 32, 1, 55, 3, 24, 11, 7, 0, 32, 0, 41, 3, 32, 11, 9, 0, 32, 0, 32, 1, 55, 3, 32, 11, 7, 0, 32, 0, 41, 3, 40, 11, 9, 0, 32, 0, 32, 1, 55, 3, 40, 11, 7, 0, 32, 0, 41, 3, 48, 11, 9, 0, 32, 0, 32, 1, 55, 3, 48, 11, 7, 0, 32, 0, 41, 3, 56, 11, 9, 0, 32, 0, 32, 1, 55, 3, 56, 11, 7, 0, 32, 0, 41, 3, 64, 11, 9, 0, 32, 0, 32, 1, 55, 3, 64, 11, 7, 0, 32, 0, 41, 3, 72, 11, 9, 0, 32, 0, 32, 1, 55, 3, 72, 11, 7, 0, 32, 0, 41, 3, 80, 11, 9, 0, 32, 0, 32, 1, 55, 3, 80, 11, 7, 0, 32, 0, 41, 3, 88, 11, 9, 0, 32, 0, 32, 1, 55, 3, 88, 11, 7, 0, 32, 0, 41, 3, 96, 11, 9, 0, 32, 0, 32, 1, 55, 3, 96, 11, 7, 0, 32, 0, 41, 3, 104, 11, 9, 0, 32, 0, 32, 1, 55, 3, 104, 11, 7, 0, 32, 0, 41, 3, 112, 11, 9, 0, 32, 0, 32, 1, 55, 3, 112, 11, 7, 0, 32, 0, 41, 3, 120, 11, 9, 0, 32, 0, 32, 1, 55, 3, 120, 11, 11, 128, 1, 2, 0, 65, 8, 11, 57, 27, 0, 0, 0, 126, 0, 108, 0, 105, 0, 98, 0, 47, 0, 105, 0, 110, 0, 116, 0, 101, 0, 114, 0, 110, 0, 97, 0, 108, 0, 47, 0, 116, 0, 121, 0, 112, 0, 101, 0, 100, 0, 97, 0, 114, 0, 114, 0, 97, 0, 121, 0, 46, 0, 116, 0, 115, 0, 65, 200, 0, 11, 59, 28, 0, 0, 0, 126, 0, 108, 0, 105, 0, 98, 0, 47, 0, 105, 0, 110, 0, 116, 0, 101, 0, 114, 0, 110, 0, 97, 0, 108, 0, 47, 0, 97, 0, 114, 0, 114, 0, 97, 0, 121, 0, 98, 0, 117, 0, 102, 0, 102, 0, 101, 0, 114, 0, 46, 0, 116, 0, 115, 0, 32, 16, 115, 111, 117, 114, 99, 101, 77, 97, 112, 112, 105, 110, 103, 85, 82, 76, 14, 114, 97, 98, 105, 110, 46, 119, 97, 115, 109, 46, 109, 97, 112]); // make it work async because browsers throw when a wasm module is bigger than 4kb and load sync

  return instantiateStreaming(new Response(new Blob([wasm], {
    type: 'application/wasm'
  })), imp);
}

module.exports = loadWebAssembly;

/***/ }),
/* 521 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const hasBigInt64 = typeof BigUint64Array !== "undefined";
const thisPtr = Symbol();
/** Gets a string from an U32 and an U16 view on a memory. */

function getStringImpl(U32, U16, ptr) {
  var dataLength = U32[ptr >>> 2];
  var dataOffset = ptr + 4 >>> 1;
  var dataRemain = dataLength;
  var parts = [];
  const chunkSize = 1024;

  while (dataRemain > chunkSize) {
    let last = U16[dataOffset + chunkSize - 1];
    let size = last >= 0xD800 && last < 0xDC00 ? chunkSize - 1 : chunkSize;
    let part = U16.subarray(dataOffset, dataOffset += size);
    parts.push(String.fromCharCode.apply(String, part));
    dataRemain -= size;
  }

  return parts.join("") + String.fromCharCode.apply(String, U16.subarray(dataOffset, dataOffset + dataRemain));
}
/** Prepares the base module prior to instantiation. */


function preInstantiate(imports) {
  var baseModule = {};

  function getString(memory, ptr) {
    if (!memory) return "<yet unknown>";
    var buffer = memory.buffer;
    return getStringImpl(new Uint32Array(buffer), new Uint16Array(buffer), ptr);
  } // add common imports used by stdlib for convenience


  var env = imports.env = imports.env || {};

  env.abort = env.abort || function abort(mesg, file, line, colm) {
    var memory = baseModule.memory || env.memory; // prefer exported, otherwise try imported

    throw Error("abort: " + getString(memory, mesg) + " at " + getString(memory, file) + ":" + line + ":" + colm);
  };

  env.trace = env.trace || function trace(mesg, n) {
    var memory = baseModule.memory || env.memory;
    console.log("trace: " + getString(memory, mesg) + (n ? " " : "") + Array.prototype.slice.call(arguments, 2, 2 + n).join(", "));
  };

  imports.Math = imports.Math || Math;
  imports.Date = imports.Date || Date;
  return baseModule;
}
/** Prepares the final module once instantiation is complete. */


function postInstantiate(baseModule, instance) {
  var rawExports = instance.exports;
  var memory = rawExports.memory;
  var memory_allocate = rawExports["memory.allocate"];
  var memory_fill = rawExports["memory.fill"];
  var memory_free = rawExports["memory.free"];
  var table = rawExports.table;

  var setargc = rawExports._setargc || function () {}; // Provide views for all sorts of basic values


  var buffer, I8, U8, I16, U16, I32, U32, F32, F64, I64, U64;
  /** Updates memory views if memory has grown meanwhile. */

  function checkMem() {
    // see: https://github.com/WebAssembly/design/issues/1210
    if (buffer !== memory.buffer) {
      buffer = memory.buffer;
      I8 = new Int8Array(buffer);
      U8 = new Uint8Array(buffer);
      I16 = new Int16Array(buffer);
      U16 = new Uint16Array(buffer);
      I32 = new Int32Array(buffer);
      U32 = new Uint32Array(buffer);

      if (hasBigInt64) {
        I64 = new BigInt64Array(buffer);
        U64 = new BigUint64Array(buffer);
      }

      F32 = new Float32Array(buffer);
      F64 = new Float64Array(buffer);
    }
  }

  checkMem();
  /** Allocates a new string in the module's memory and returns its pointer. */

  function newString(str) {
    var dataLength = str.length;
    var ptr = memory_allocate(4 + (dataLength << 1));
    var dataOffset = 4 + ptr >>> 1;
    checkMem();
    U32[ptr >>> 2] = dataLength;

    for (let i = 0; i < dataLength; ++i) U16[dataOffset + i] = str.charCodeAt(i);

    return ptr;
  }

  baseModule.newString = newString;
  /** Gets a string from the module's memory by its pointer. */

  function getString(ptr) {
    checkMem();
    return getStringImpl(U32, U16, ptr);
  }

  baseModule.getString = getString;

  function computeBufferSize(byteLength) {
    const HEADER_SIZE = 8;
    return 1 << 32 - Math.clz32(byteLength + HEADER_SIZE - 1);
  }
  /** Creates a new typed array in the module's memory and returns its pointer. */


  function newArray(view, length, unsafe) {
    var ctor = view.constructor;

    if (ctor === Function) {
      // TypedArray constructor created in memory
      ctor = view;
      view = null;
    } else {
      // TypedArray instance copied into memory
      if (length === undefined) length = view.length;
    }

    var elementSize = ctor.BYTES_PER_ELEMENT;
    if (!elementSize) throw Error("not a typed array");
    var byteLength = elementSize * length;
    var ptr = memory_allocate(12); // TypedArray header

    var buf = memory_allocate(computeBufferSize(byteLength)); // ArrayBuffer

    checkMem();
    U32[ptr >>> 2] = buf; // .buffer

    U32[ptr + 4 >>> 2] = 0; // .byteOffset

    U32[ptr + 8 >>> 2] = byteLength; // .byteLength

    U32[buf >>> 2] = byteLength; // .byteLength

    U32[buf + 4 >>> 2] = 0; // 0

    if (view) {
      new ctor(buffer, buf + 8, length).set(view);

      if (view.length < length && !unsafe) {
        let setLength = elementSize * view.length;
        memory_fill(buf + 8 + setLength, 0, byteLength - setLength);
      }
    } else if (!unsafe) {
      memory_fill(buf + 8, 0, byteLength);
    }

    return ptr;
  }

  baseModule.newArray = newArray;
  /** Gets a view on a typed array in the module's memory by its pointer. */

  function getArray(ctor, ptr) {
    var elementSize = ctor.BYTES_PER_ELEMENT;
    if (!elementSize) throw Error("not a typed array");
    checkMem();
    var buf = U32[ptr >>> 2];
    var byteOffset = U32[ptr + 4 >>> 2];
    var byteLength = U32[ptr + 8 >>> 2];
    return new ctor(buffer, buf + 8 + byteOffset, (byteLength - byteOffset) / elementSize);
  }

  baseModule.getArray = getArray;
  /** Frees a typed array in the module's memory. Must not be accessed anymore afterwards. */

  function freeArray(ptr) {
    checkMem();
    var buf = U32[ptr >>> 2];
    memory_free(buf);
    memory_free(ptr);
  }

  baseModule.freeArray = freeArray;
  /**
   * Creates a new function in the module's table and returns its pointer. Note that only actual
   * WebAssembly functions, i.e. as exported by the module, are supported.
   */

  function newFunction(fn) {
    if (typeof fn.original === "function") fn = fn.original;
    var index = table.length;
    table.grow(1);
    table.set(index, fn);
    return index;
  }

  baseModule.newFunction = newFunction;
  /** Gets a function by its pointer. */

  function getFunction(ptr) {
    return wrapFunction(table.get(ptr), setargc);
  }

  baseModule.getFunction = getFunction; // Pull basic exports to baseModule so code in preInstantiate can use them

  baseModule.memory = baseModule.memory || memory;
  baseModule.table = baseModule.table || table; // Demangle exports and provide the usual utility on the prototype

  return demangle(rawExports, Object.defineProperties(baseModule, {
    I8: {
      get: function get() {
        checkMem();
        return I8;
      }
    },
    U8: {
      get: function get() {
        checkMem();
        return U8;
      }
    },
    I16: {
      get: function get() {
        checkMem();
        return I16;
      }
    },
    U16: {
      get: function get() {
        checkMem();
        return U16;
      }
    },
    I32: {
      get: function get() {
        checkMem();
        return I32;
      }
    },
    U32: {
      get: function get() {
        checkMem();
        return U32;
      }
    },
    I64: {
      get: function get() {
        checkMem();
        return I64;
      }
    },
    U64: {
      get: function get() {
        checkMem();
        return U64;
      }
    },
    F32: {
      get: function get() {
        checkMem();
        return F32;
      }
    },
    F64: {
      get: function get() {
        checkMem();
        return F64;
      }
    }
  }));
}
/** Wraps a WebAssembly function while also taking care of variable arguments. */


function wrapFunction(fn, setargc) {
  var wrap = (...args) => {
    setargc(args.length);
    return fn(...args);
  }; // adding a function to the table with `newFunction` is limited to actual WebAssembly functions,
  // hence we can't use the wrapper and instead need to provide a reference to the original


  wrap.original = fn;
  return wrap;
}
/** Instantiates an AssemblyScript module using the specified imports. */


function instantiate(module, imports) {
  return postInstantiate(preInstantiate(imports || (imports = {})), new WebAssembly.Instance(module, imports));
}

exports.instantiate = instantiate;
/** Instantiates an AssemblyScript module from a buffer using the specified imports. */

function instantiateBuffer(buffer, imports) {
  return instantiate(new WebAssembly.Module(buffer), imports);
}

exports.instantiateBuffer = instantiateBuffer;
/** Instantiates an AssemblyScript module from a response using the specified imports. */

async function instantiateStreaming(response, imports) {
  return postInstantiate(preInstantiate(imports || (imports = {})), (await WebAssembly.instantiateStreaming(response, imports)).instance);
}

exports.instantiateStreaming = instantiateStreaming;
/** Demangles an AssemblyScript module's exports to a friendly object structure. */

function demangle(exports, baseModule) {
  var module = baseModule ? Object.create(baseModule) : {};

  var setargc = exports._setargc || function () {};

  function hasOwnProperty(elem, prop) {
    return Object.prototype.hasOwnProperty.call(elem, prop);
  }

  for (let internalName in exports) {
    if (!hasOwnProperty(exports, internalName)) continue;
    let elem = exports[internalName];
    let parts = internalName.split(".");
    let curr = module;

    while (parts.length > 1) {
      let part = parts.shift();
      if (!hasOwnProperty(curr, part)) curr[part] = {};
      curr = curr[part];
    }

    let name = parts[0];
    let hash = name.indexOf("#");

    if (hash >= 0) {
      let className = name.substring(0, hash);
      let classElem = curr[className];

      if (typeof classElem === "undefined" || !classElem.prototype) {
        let ctor = function ctor(...args) {
          return ctor.wrap(ctor.prototype.constructor(0, ...args));
        };

        ctor.prototype = {};

        ctor.wrap = function (thisValue) {
          return Object.create(ctor.prototype, {
            [thisPtr]: {
              value: thisValue,
              writable: false
            }
          });
        };

        if (classElem) Object.getOwnPropertyNames(classElem).forEach(name => Object.defineProperty(ctor, name, Object.getOwnPropertyDescriptor(classElem, name)));
        curr[className] = ctor;
      }

      name = name.substring(hash + 1);
      curr = curr[className].prototype;

      if (/^(get|set):/.test(name)) {
        if (!hasOwnProperty(curr, name = name.substring(4))) {
          let getter = exports[internalName.replace("set:", "get:")];
          let setter = exports[internalName.replace("get:", "set:")];
          Object.defineProperty(curr, name, {
            get: function get() {
              return getter(this[thisPtr]);
            },
            set: function set(value) {
              setter(this[thisPtr], value);
            },
            enumerable: true
          });
        }
      } else {
        if (name === 'constructor') {
          curr[name] = wrapFunction(elem, setargc);
        } else {
          // for methods
          Object.defineProperty(curr, name, {
            value: function value(...args) {
              setargc(args.length);
              return elem(this[thisPtr], ...args);
            }
          });
        }
      }
    } else {
      if (/^(get|set):/.test(name)) {
        if (!hasOwnProperty(curr, name = name.substring(4))) {
          Object.defineProperty(curr, name, {
            get: exports[internalName.replace("set:", "get:")],
            set: exports[internalName.replace("get:", "set:")],
            enumerable: true
          });
        }
      } else if (typeof elem === "function") {
        curr[name] = wrapFunction(elem, setargc);
      } else {
        curr[name] = elem;
      }
    }
  }

  return module;
}

exports.demangle = demangle;

/***/ }),
/* 522 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const BufferList = __webpack_require__(30);

module.exports =
/*#__PURE__*/
function () {
  var _fixedSizeChunker = _wrapAsyncGenerator(function* (source, options) {
    let bl = new BufferList();
    let currentLength = 0;
    let emitted = false;
    const maxChunkSize = options.maxChunkSize;
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;

    var _iteratorError;

    try {
      for (var _iterator = _asyncIterator(source), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
        const buffer = _value;
        bl.append(buffer);
        currentLength += buffer.length;

        while (currentLength >= maxChunkSize) {
          yield bl.slice(0, maxChunkSize);
          emitted = true; // throw away consumed bytes

          if (maxChunkSize === bl.length) {
            bl = new BufferList();
            currentLength = 0;
          } else {
            const newBl = new BufferList();
            newBl.append(bl.shallowSlice(maxChunkSize));
            bl = newBl; // update our offset

            currentLength -= maxChunkSize;
          }
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          yield _awaitAsyncGenerator(_iterator.return());
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    if (!emitted || currentLength) {
      // return any remaining bytes or an empty buffer
      yield bl.slice(0, currentLength);
    }
  });

  function fixedSizeChunker(_x, _x2) {
    return _fixedSizeChunker.apply(this, arguments);
  }

  return fixedSizeChunker;
}();

/***/ }),
/* 523 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const errCode = __webpack_require__(2); // make sure the content only emits buffer-a-likes


function validateChunks(_x) {
  return _validateChunks.apply(this, arguments);
}

function _validateChunks() {
  _validateChunks = _wrapAsyncGenerator(function* (source) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;

    var _iteratorError;

    try {
      for (var _iterator = _asyncIterator(source), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
        const content = _value;

        if (content.length === undefined) {
          throw errCode(new Error('Content was invalid'), 'ERR_INVALID_CONTENT');
        }

        if (typeof content === 'string' || content instanceof String) {
          yield Buffer.from(content, 'utf8');
        } else if (Array.isArray(content)) {
          yield Buffer.from(content);
        } else {
          yield content;
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          yield _awaitAsyncGenerator(_iterator.return());
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  });
  return _validateChunks.apply(this, arguments);
}

module.exports = validateChunks;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 524 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _AwaitValue(value) { this.wrapped = value; }

function _asyncGeneratorDelegate(inner, awaitWrap) { var iter = {}, waiting = false; function pump(key, value) { waiting = true; value = new Promise(function (resolve) { resolve(inner[key](value)); }); return { done: false, value: awaitWrap(value) }; } ; if (typeof Symbol === "function" && Symbol.iterator) { iter[Symbol.iterator] = function () { return this; }; } iter.next = function (value) { if (waiting) { waiting = false; return value; } return pump("next", value); }; if (typeof inner.throw === "function") { iter.throw = function (value) { if (waiting) { waiting = false; throw value; } return pump("throw", value); }; } if (typeof inner.return === "function") { iter.return = function (value) { if (waiting) { waiting = false; return value; } return pump("return", value); }; } return iter; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const DirFlat = __webpack_require__(525);

const flatToShard = __webpack_require__(526);

const Dir = __webpack_require__(144);

const toPathComponents = __webpack_require__(531);

const errCode = __webpack_require__(2);

const first = __webpack_require__(532);

async function addToTree(elem, tree, options) {
  const pathElems = toPathComponents(elem.path || '');
  const lastIndex = pathElems.length - 1;
  let parent = tree;
  let currentPath = '';

  for (let i = 0; i < pathElems.length; i++) {
    const pathElem = pathElems[i];
    currentPath += "".concat(currentPath ? '/' : '').concat(pathElem);
    const last = i === lastIndex;
    parent.dirty = true;
    parent.cid = null;
    parent.size = null;

    if (last) {
      await parent.put(pathElem, elem);
      tree = await flatToShard(null, parent, options.shardSplitThreshold, options);
    } else {
      let dir = await parent.get(pathElem);

      if (!dir || !(dir instanceof Dir)) {
        dir = new DirFlat({
          dir: true,
          parent: parent,
          parentKey: pathElem,
          path: currentPath,
          dirty: true,
          flat: true,
          mtime: dir && dir.unixfs && dir.unixfs.mtime,
          mode: dir && dir.unixfs && dir.unixfs.mode
        }, options);
      }

      await parent.put(pathElem, dir);
      parent = dir;
    }
  }

  return tree;
}

function treeBuilder(_x, _x2, _x3) {
  return _treeBuilder.apply(this, arguments);
}

function _treeBuilder() {
  _treeBuilder = _wrapAsyncGenerator(function* (source, ipld, options) {
    let tree = new DirFlat({
      root: true,
      dir: true,
      path: '',
      dirty: true,
      flat: true
    }, options);
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;

    var _iteratorError;

    try {
      for (var _iterator = _asyncIterator(source), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
        const entry = _value;

        if (!entry) {
          continue;
        }

        tree = yield _awaitAsyncGenerator(addToTree(entry, tree, options));

        if (!entry.unixfs || !entry.unixfs.isDirectory()) {
          yield entry;
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          yield _awaitAsyncGenerator(_iterator.return());
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    if (!options.wrapWithDirectory) {
      if (tree.childCount() > 1) {
        throw errCode(new Error('detected more than one root'), 'ERR_MORE_THAN_ONE_ROOT');
      }

      const unwrapped = yield _awaitAsyncGenerator(first(tree.eachChildSeries()));

      if (!unwrapped) {
        return;
      }

      tree = unwrapped.child;
    }

    if (!(tree instanceof Dir)) {
      if (tree && tree.unixfs && tree.unixfs.isDirectory()) {
        yield tree;
      }

      return;
    }

    yield* _asyncGeneratorDelegate(_asyncIterator(tree.flush(tree.path, ipld)), _awaitAsyncGenerator);
  });
  return _treeBuilder.apply(this, arguments);
}

module.exports = treeBuilder;

/***/ }),
/* 525 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const {
  DAGLink,
  DAGNode
} = __webpack_require__(12);

const UnixFS = __webpack_require__(25);

const Dir = __webpack_require__(144);

const persist = __webpack_require__(57);

class DirFlat extends Dir {
  constructor(props, options) {
    super(props, options);
    this._children = {};
  }

  put(name, value) {
    this.cid = undefined;
    this.size = undefined;
    this._children[name] = value;
  }

  get(name) {
    return this._children[name];
  }

  childCount() {
    return Object.keys(this._children).length;
  }

  directChildrenCount() {
    return this.childCount();
  }

  onlyChild() {
    return this._children[Object.keys(this._children)[0]];
  }

  *eachChildSeries() {
    const keys = Object.keys(this._children);

    for (let i = 0; i < keys.length; i++) {
      const key = keys[i];
      yield {
        key: key,
        child: this._children[key]
      };
    }
  }

  flush(path, ipld) {
    var _this = this;

    return _wrapAsyncGenerator(function* () {
      const children = Object.keys(_this._children);
      const links = [];

      for (let i = 0; i < children.length; i++) {
        let child = _this._children[children[i]];

        if (typeof child.flush === 'function') {
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;

          var _iteratorError;

          try {
            for (var _iterator = _asyncIterator(child.flush(child.path, ipld)), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
              const entry = _value;
              child = entry;
              yield child;
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return != null) {
                yield _awaitAsyncGenerator(_iterator.return());
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        }

        links.push(new DAGLink(children[i], child.size, child.cid));
      }

      const unixfs = new UnixFS({
        type: 'directory',
        mtime: _this.mtime,
        mode: _this.mode
      });
      const node = new DAGNode(unixfs.marshal(), links);
      const cid = yield _awaitAsyncGenerator(persist(node, ipld, _this.options));
      _this.cid = cid;
      _this.size = node.size;
      yield {
        cid,
        unixfs,
        path,
        size: node.size
      };
    })();
  }

}

module.exports = DirFlat;

/***/ }),
/* 526 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const DirSharded = __webpack_require__(145);

module.exports = async function flatToShard(child, dir, threshold, options) {
  let newDir = dir;

  if (dir.flat && dir.directChildrenCount() >= threshold) {
    newDir = await convertToShard(dir, options);
  }

  const parent = newDir.parent;

  if (parent) {
    if (newDir !== dir) {
      if (child) {
        child.parent = newDir;
      }

      await parent.put(newDir.parentKey, newDir);
    }

    return flatToShard(newDir, parent, threshold, options);
  }

  return newDir;
};

async function convertToShard(oldDir, options) {
  const newDir = new DirSharded({
    root: oldDir.root,
    dir: true,
    parent: oldDir.parent,
    parentKey: oldDir.parentKey,
    path: oldDir.path,
    dirty: oldDir.dirty,
    flat: false,
    mtime: oldDir.mtime,
    mode: oldDir.mode
  }, options);
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;

  var _iteratorError;

  try {
    for (var _iterator = _asyncIterator(oldDir.eachChildSeries()), _step, _value; _step = await _iterator.next(), _iteratorNormalCompletion = _step.done, _value = await _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
      const {
        key,
        child
      } = _value;
      await newDir.put(key, child);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        await _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return newDir;
}

/***/ }),
/* 527 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const Bucket = __webpack_require__(146);

module.exports = function createHAMT(options) {
  return new Bucket(options);
};

module.exports.isBucket = Bucket.isBucket;

/***/ }),
/* 528 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // JS treats subjects of bitwise operators as SIGNED 32 bit numbers,
// which means the maximum amount of bits we can store inside each byte
// is 7..

const BITS_PER_BYTE = 7;
module.exports = class SparseArray {
  constructor() {
    this._bitArrays = [];
    this._data = [];
    this._length = 0;
    this._changedLength = false;
    this._changedData = false;
  }

  set(index, value) {
    let pos = this._internalPositionFor(index, false);

    if (value === undefined) {
      // unsetting
      if (pos !== -1) {
        // remove item from bit array and array itself
        this._unsetInternalPos(pos);

        this._unsetBit(index);

        this._changedLength = true;
        this._changedData = true;
      }
    } else {
      let needsSort = false;

      if (pos === -1) {
        pos = this._data.length;

        this._setBit(index);

        this._changedData = true;
      } else {
        needsSort = true;
      }

      this._setInternalPos(pos, index, value, needsSort);

      this._changedLength = true;
    }
  }

  unset(index) {
    this.set(index, undefined);
  }

  get(index) {
    this._sortData();

    const pos = this._internalPositionFor(index, true);

    if (pos === -1) {
      return undefined;
    }

    return this._data[pos][1];
  }

  push(value) {
    this.set(this.length, value);
    return this.length;
  }

  get length() {
    this._sortData();

    if (this._changedLength) {
      const last = this._data[this._data.length - 1];
      this._length = last ? last[0] + 1 : 0;
      this._changedLength = false;
    }

    return this._length;
  }

  forEach(iterator) {
    let i = 0;

    while (i < this.length) {
      iterator(this.get(i), i, this);
      i++;
    }
  }

  map(iterator) {
    let i = 0;
    let mapped = new Array(this.length);

    while (i < this.length) {
      mapped[i] = iterator(this.get(i), i, this);
      i++;
    }

    return mapped;
  }

  reduce(reducer, initialValue) {
    let i = 0;
    let acc = initialValue;

    while (i < this.length) {
      const value = this.get(i);
      acc = reducer(acc, value, i);
      i++;
    }

    return acc;
  }

  find(finder) {
    let i = 0,
        found,
        last;

    while (i < this.length && !found) {
      last = this.get(i);
      found = finder(last);
      i++;
    }

    return found ? last : undefined;
  }

  _internalPositionFor(index, noCreate) {
    const bytePos = this._bytePosFor(index, noCreate);

    if (bytePos >= this._bitArrays.length) {
      return -1;
    }

    const byte = this._bitArrays[bytePos];
    const bitPos = index - bytePos * BITS_PER_BYTE;
    const exists = (byte & 1 << bitPos) > 0;

    if (!exists) {
      return -1;
    }

    const previousPopCount = this._bitArrays.slice(0, bytePos).reduce(popCountReduce, 0);

    const mask = ~(0xffffffff << bitPos + 1);
    const bytePopCount = popCount(byte & mask);
    const arrayPos = previousPopCount + bytePopCount - 1;
    return arrayPos;
  }

  _bytePosFor(index, noCreate) {
    const bytePos = Math.floor(index / BITS_PER_BYTE);
    const targetLength = bytePos + 1;

    while (!noCreate && this._bitArrays.length < targetLength) {
      this._bitArrays.push(0);
    }

    return bytePos;
  }

  _setBit(index) {
    const bytePos = this._bytePosFor(index, false);

    this._bitArrays[bytePos] |= 1 << index - bytePos * BITS_PER_BYTE;
  }

  _unsetBit(index) {
    const bytePos = this._bytePosFor(index, false);

    this._bitArrays[bytePos] &= ~(1 << index - bytePos * BITS_PER_BYTE);
  }

  _setInternalPos(pos, index, value, needsSort) {
    const data = this._data;
    const elem = [index, value];

    if (needsSort) {
      this._sortData();

      data[pos] = elem;
    } else {
      // new element. just shove it into the array
      // but be nice about where we shove it
      // in order to make sorting it later easier
      if (data.length) {
        if (data[data.length - 1][0] >= index) {
          data.push(elem);
        } else if (data[0][0] <= index) {
          data.unshift(elem);
        } else {
          const randomIndex = Math.round(data.length / 2);
          this._data = data.slice(0, randomIndex).concat(elem).concat(data.slice(randomIndex));
        }
      } else {
        this._data.push(elem);
      }

      this._changedData = true;
      this._changedLength = true;
    }
  }

  _unsetInternalPos(pos) {
    this._data.splice(pos, 1);
  }

  _sortData() {
    if (this._changedData) {
      this._data.sort(sortInternal);
    }

    this._changedData = false;
  }

  bitField() {
    const bytes = [];
    let pendingBitsForResultingByte = 8;
    let pendingBitsForNewByte = 0;
    let resultingByte = 0;
    let newByte;

    const pending = this._bitArrays.slice();

    while (pending.length || pendingBitsForNewByte) {
      if (pendingBitsForNewByte === 0) {
        newByte = pending.shift();
        pendingBitsForNewByte = 7;
      }

      const usingBits = Math.min(pendingBitsForNewByte, pendingBitsForResultingByte);
      const mask = ~(0b11111111 << usingBits);
      const masked = newByte & mask;
      resultingByte |= masked << 8 - pendingBitsForResultingByte;
      newByte = newByte >>> usingBits;
      pendingBitsForNewByte -= usingBits;
      pendingBitsForResultingByte -= usingBits;

      if (!pendingBitsForResultingByte || !pendingBitsForNewByte && !pending.length) {
        bytes.push(resultingByte);
        resultingByte = 0;
        pendingBitsForResultingByte = 8;
      }
    } // remove trailing zeroes


    for (var i = bytes.length - 1; i > 0; i--) {
      const value = bytes[i];

      if (value === 0) {
        bytes.pop();
      } else {
        break;
      }
    }

    return bytes;
  }

  compactArray() {
    this._sortData();

    return this._data.map(valueOnly);
  }

};

function popCountReduce(count, byte) {
  return count + popCount(byte);
}

function popCount(_v) {
  let v = _v;
  v = v - (v >> 1 & 0x55555555); // reuse input as temporary

  v = (v & 0x33333333) + (v >> 2 & 0x33333333); // temp

  return (v + (v >> 4) & 0xF0F0F0F) * 0x1010101 >> 24;
}

function sortInternal(a, b) {
  return a[0] - b[0];
}

function valueOnly(elem) {
  return elem[1];
}

/***/ }),
/* 529 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const ConsumableBuffer = __webpack_require__(530);

module.exports = function wrapHash(hashFn) {
  return function hashing(value) {
    if (value instanceof InfiniteHash) {
      // already a hash. return it
      return value;
    } else {
      return new InfiniteHash(value, hashFn);
    }
  };
};

class InfiniteHash {
  constructor(value, hashFn) {
    if (typeof value !== 'string' && !Buffer.isBuffer(value)) {
      throw new Error('can only hash strings or buffers');
    }

    this._value = value;
    this._hashFn = hashFn;
    this._depth = -1;
    this._availableBits = 0;
    this._currentBufferIndex = 0;
    this._buffers = [];
  }

  async take(bits) {
    let pendingBits = bits;

    while (this._availableBits < pendingBits) {
      await this._produceMoreBits();
    }

    let result = 0;

    while (pendingBits > 0) {
      const hash = this._buffers[this._currentBufferIndex];
      const available = Math.min(hash.availableBits(), pendingBits);
      const took = hash.take(available);
      result = (result << available) + took;
      pendingBits -= available;
      this._availableBits -= available;

      if (hash.availableBits() === 0) {
        this._currentBufferIndex++;
      }
    }

    return result;
  }

  untake(bits) {
    let pendingBits = bits;

    while (pendingBits > 0) {
      const hash = this._buffers[this._currentBufferIndex];
      const availableForUntake = Math.min(hash.totalBits() - hash.availableBits(), pendingBits);
      hash.untake(availableForUntake);
      pendingBits -= availableForUntake;
      this._availableBits += availableForUntake;

      if (this._currentBufferIndex > 0 && hash.totalBits() === hash.availableBits()) {
        this._depth--;
        this._currentBufferIndex--;
      }
    }
  }

  async _produceMoreBits() {
    this._depth++;
    const value = this._depth ? this._value + this._depth : this._value;
    const hashValue = await this._hashFn(value);
    const buffer = new ConsumableBuffer(hashValue);

    this._buffers.push(buffer);

    this._availableBits += buffer.availableBits();
  }

}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 530 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const START_MASKS = [0b11111111, 0b11111110, 0b11111100, 0b11111000, 0b11110000, 0b11100000, 0b11000000, 0b10000000];
const STOP_MASKS = [0b00000001, 0b00000011, 0b00000111, 0b00001111, 0b00011111, 0b00111111, 0b01111111, 0b11111111];
module.exports = class ConsumableBuffer {
  constructor(value) {
    this._value = value;
    this._currentBytePos = value.length - 1;
    this._currentBitPos = 7;
  }

  availableBits() {
    return this._currentBitPos + 1 + this._currentBytePos * 8;
  }

  totalBits() {
    return this._value.length * 8;
  }

  take(bits) {
    let pendingBits = bits;
    let result = 0;

    while (pendingBits && this._haveBits()) {
      const byte = this._value[this._currentBytePos];
      const availableBits = this._currentBitPos + 1;
      const taking = Math.min(availableBits, pendingBits);
      const value = byteBitsToInt(byte, availableBits - taking, taking);
      result = (result << taking) + value;
      pendingBits -= taking;
      this._currentBitPos -= taking;

      if (this._currentBitPos < 0) {
        this._currentBitPos = 7;
        this._currentBytePos--;
      }
    }

    return result;
  }

  untake(bits) {
    this._currentBitPos += bits;

    while (this._currentBitPos > 7) {
      this._currentBitPos -= 8;
      this._currentBytePos += 1;
    }
  }

  _haveBits() {
    return this._currentBytePos >= 0;
  }

};

function byteBitsToInt(byte, start, length) {
  const mask = maskFor(start, length);
  return (byte & mask) >>> start;
}

function maskFor(start, length) {
  return START_MASKS[start] & STOP_MASKS[Math.min(length + start - 1, 7)];
}

/***/ }),
/* 531 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const toPathComponents = (path = '') => {
  // split on / unless escaped with \
  return (path.trim().match(/([^\\^/]|\\\/)+/g) || []).filter(Boolean);
};

module.exports = toPathComponents;

/***/ }),
/* 532 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const first = async iterator => {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;

  var _iteratorError;

  try {
    for (var _iterator = _asyncIterator(iterator), _step, _value; _step = await _iterator.next(), _iteratorNormalCompletion = _step.done, _value = await _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
      const entry = _value;
      return entry;
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        await _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
};

module.exports = first;

/***/ }),
/* 533 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _asyncGeneratorDelegate(inner, awaitWrap) { var iter = {}, waiting = false; function pump(key, value) { waiting = true; value = new Promise(function (resolve) { resolve(inner[key](value)); }); return { done: false, value: awaitWrap(value) }; } ; if (typeof Symbol === "function" && Symbol.iterator) { iter[Symbol.iterator] = function () { return this; }; } iter.next = function (value) { if (waiting) { waiting = false; return value; } return pump("next", value); }; if (typeof inner.throw === "function") { iter.throw = function (value) { if (waiting) { waiting = false; throw value; } return pump("throw", value); }; } if (typeof inner.return === "function") { iter.return = function (value) { if (waiting) { waiting = false; return value; } return pump("return", value); }; } return iter; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

const errCode = __webpack_require__(2);

const {
  Buffer
} = __webpack_require__(0);

const globalThis = __webpack_require__(534);
/*
 * Transform one of:
 *
 * ```
 * Bytes (Buffer|ArrayBuffer|TypedArray) [single file]
 * Bloby (Blob|File) [single file]
 * String [single file]
 * { path, content: Bytes } [single file]
 * { path, content: Bloby } [single file]
 * { path, content: String } [single file]
 * { path, content: Iterable<Number> } [single file]
 * { path, content: Iterable<Bytes> } [single file]
 * { path, content: AsyncIterable<Bytes> } [single file]
 * Iterable<Number> [single file]
 * Iterable<Bytes> [single file]
 * Iterable<Bloby> [multiple files]
 * Iterable<String> [multiple files]
 * Iterable<{ path, content: Bytes }> [multiple files]
 * Iterable<{ path, content: Bloby }> [multiple files]
 * Iterable<{ path, content: String }> [multiple files]
 * Iterable<{ path, content: Iterable<Number> }> [multiple files]
 * Iterable<{ path, content: Iterable<Bytes> }> [multiple files]
 * Iterable<{ path, content: AsyncIterable<Bytes> }> [multiple files]
 * AsyncIterable<Bytes> [single file]
 * AsyncIterable<Bloby> [multiple files]
 * AsyncIterable<String> [multiple files]
 * AsyncIterable<{ path, content: Bytes }> [multiple files]
 * AsyncIterable<{ path, content: Bloby }> [multiple files]
 * AsyncIterable<{ path, content: String }> [multiple files]
 * AsyncIterable<{ path, content: Iterable<Number> }> [multiple files]
 * AsyncIterable<{ path, content: Iterable<Bytes> }> [multiple files]
 * AsyncIterable<{ path, content: AsyncIterable<Bytes> }> [multiple files]
 * ```
 * Into:
 *
 * ```
 * AsyncIterable<{ path, content: AsyncIterable<Buffer> }>
 * ```
 *
 * @param input Object
 * @return AsyncInterable<{ path, content: AsyncIterable<Buffer> }>
 */


module.exports = function normaliseInput(input) {
  // must give us something
  if (input === null || input === undefined) {
    throw errCode(new Error("Unexpected input: ".concat(input), 'ERR_UNEXPECTED_INPUT'));
  } // String


  if (typeof input === 'string' || input instanceof String) {
    return _wrapAsyncGenerator(function* () {
      // eslint-disable-line require-await
      yield toFileObject(input);
    })();
  } // Buffer|ArrayBuffer|TypedArray
  // Blob|File


  if (isBytes(input) || isBloby(input)) {
    return _wrapAsyncGenerator(function* () {
      // eslint-disable-line require-await
      yield toFileObject(input);
    })();
  } // Iterable<?>


  if (input[Symbol.iterator]) {
    return _wrapAsyncGenerator(function* () {
      // eslint-disable-line require-await
      const iterator = input[Symbol.iterator]();
      const first = iterator.next();
      if (first.done) return iterator; // Iterable<Number>
      // Iterable<Bytes>

      if (Number.isInteger(first.value) || isBytes(first.value)) {
        yield toFileObject(function* () {
          yield first.value;
          yield* iterator;
        }());
        return;
      } // Iterable<Bloby>
      // Iterable<String>
      // Iterable<{ path, content }>


      if (isFileObject(first.value) || isBloby(first.value) || typeof first.value === 'string') {
        yield toFileObject(first.value);

        for (const obj of iterator) {
          yield toFileObject(obj);
        }

        return;
      }

      throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');
    })();
  } // window.ReadableStream


  if (typeof input.getReader === 'function') {
    return _wrapAsyncGenerator(function* () {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;

      var _iteratorError;

      try {
        for (var _iterator = _asyncIterator(browserStreamToIt(input)), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
          const obj = _value;
          yield toFileObject(obj);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            yield _awaitAsyncGenerator(_iterator.return());
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    })();
  } // AsyncIterable<?>


  if (input[Symbol.asyncIterator]) {
    return _wrapAsyncGenerator(function* () {
      const iterator = input[Symbol.asyncIterator]();
      const first = yield _awaitAsyncGenerator(iterator.next());
      if (first.done) return iterator; // AsyncIterable<Bytes>

      if (isBytes(first.value)) {
        yield toFileObject(_wrapAsyncGenerator(function* () {
          // eslint-disable-line require-await
          yield first.value;
          yield* _asyncGeneratorDelegate(_asyncIterator(iterator), _awaitAsyncGenerator);
        })());
        return;
      } // AsyncIterable<Bloby>
      // AsyncIterable<String>
      // AsyncIterable<{ path, content }>


      if (isFileObject(first.value) || isBloby(first.value) || typeof first.value === 'string') {
        yield toFileObject(first.value);
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;

        var _iteratorError2;

        try {
          for (var _iterator2 = _asyncIterator(iterator), _step2, _value2; _step2 = yield _awaitAsyncGenerator(_iterator2.next()), _iteratorNormalCompletion2 = _step2.done, _value2 = yield _awaitAsyncGenerator(_step2.value), !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {
            const obj = _value2;
            yield toFileObject(obj);
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
              yield _awaitAsyncGenerator(_iterator2.return());
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        return;
      }

      throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');
    })();
  } // { path, content: ? }
  // Note: Detected _after_ AsyncIterable<?> because Node.js streams have a
  // `path` property that passes this check.


  if (isFileObject(input)) {
    return _wrapAsyncGenerator(function* () {
      // eslint-disable-line require-await
      yield toFileObject(input);
    })();
  }

  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');
};

function toFileObject(input) {
  const obj = {
    path: input.path || '',
    mode: input.mode,
    mtime: input.mtime
  };

  if (input.content) {
    obj.content = toAsyncIterable(input.content);
  } else if (!input.path) {
    // Not already a file object with path or content prop
    obj.content = toAsyncIterable(input);
  }

  return obj;
}

function toAsyncIterable(input) {
  // Bytes | String
  if (isBytes(input) || typeof input === 'string') {
    return _wrapAsyncGenerator(function* () {
      // eslint-disable-line require-await
      yield toBuffer(input);
    })();
  } // Bloby


  if (isBloby(input)) {
    return blobToAsyncGenerator(input);
  } // Browser stream


  if (typeof input.getReader === 'function') {
    return browserStreamToIt(input);
  } // Iterator<?>


  if (input[Symbol.iterator]) {
    return _wrapAsyncGenerator(function* () {
      // eslint-disable-line require-await
      const iterator = input[Symbol.iterator]();
      const first = iterator.next();
      if (first.done) return iterator; // Iterable<Number>

      if (Number.isInteger(first.value)) {
        yield toBuffer(Array.from(function* () {
          yield first.value;
          yield* iterator;
        }()));
        return;
      } // Iterable<Bytes>


      if (isBytes(first.value)) {
        yield toBuffer(first.value);

        for (const chunk of iterator) {
          yield toBuffer(chunk);
        }

        return;
      }

      throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');
    })();
  } // AsyncIterable<Bytes>


  if (input[Symbol.asyncIterator]) {
    return _wrapAsyncGenerator(function* () {
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;

      var _iteratorError3;

      try {
        for (var _iterator3 = _asyncIterator(input), _step3, _value3; _step3 = yield _awaitAsyncGenerator(_iterator3.next()), _iteratorNormalCompletion3 = _step3.done, _value3 = yield _awaitAsyncGenerator(_step3.value), !_iteratorNormalCompletion3; _iteratorNormalCompletion3 = true) {
          const chunk = _value3;
          yield toBuffer(chunk);
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
            yield _awaitAsyncGenerator(_iterator3.return());
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }
    })();
  }

  throw errCode(new Error("Unexpected input: ".concat(input), 'ERR_UNEXPECTED_INPUT'));
}

function toBuffer(chunk) {
  return isBytes(chunk) ? chunk : Buffer.from(chunk);
}

function isBytes(obj) {
  return Buffer.isBuffer(obj) || ArrayBuffer.isView(obj) || obj instanceof ArrayBuffer;
}

function isBloby(obj) {
  return typeof globalThis.Blob !== 'undefined' && obj instanceof globalThis.Blob;
} // An object with a path or content property


function isFileObject(obj) {
  return typeof obj === 'object' && (obj.path || obj.content);
}

function blobToAsyncGenerator(blob) {
  if (typeof blob.stream === 'function') {
    // firefox < 69 does not support blob.stream()
    return browserStreamToIt(blob.stream());
  }

  return readBlob(blob);
}

function browserStreamToIt(_x) {
  return _browserStreamToIt.apply(this, arguments);
}

function _browserStreamToIt() {
  _browserStreamToIt = _wrapAsyncGenerator(function* (stream) {
    const reader = stream.getReader();

    while (true) {
      const result = yield _awaitAsyncGenerator(reader.read());

      if (result.done) {
        return;
      }

      yield result.value;
    }
  });
  return _browserStreamToIt.apply(this, arguments);
}

function readBlob(_x2, _x3) {
  return _readBlob.apply(this, arguments);
}

function _readBlob() {
  _readBlob = _wrapAsyncGenerator(function* (blob, options) {
    options = options || {};
    const reader = new globalThis.FileReader();
    const chunkSize = options.chunkSize || 1024 * 1024;
    let offset = options.offset || 0;

    const getNextChunk = () => new Promise((resolve, reject) => {
      reader.onloadend = e => {
        const data = e.target.result;
        resolve(data.byteLength === 0 ? null : data);
      };

      reader.onerror = reject;
      const end = offset + chunkSize;
      const slice = blob.slice(offset, end);
      reader.readAsArrayBuffer(slice);
      offset = end;
    });

    while (true) {
      const data = yield _awaitAsyncGenerator(getNextChunk());

      if (data == null) {
        return;
      }

      yield Buffer.from(data);
    }
  });
  return _readBlob.apply(this, arguments);
}

/***/ }),
/* 534 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* eslint-disable no-undef */

/* eslint-disable no-extend-native */

/* eslint-disable strict */
// polyfill for globalThis
// https://v8.dev/features/globalthis
// https://mathiasbynens.be/notes/globalthis
(function () {
  if (typeof globalThis === 'object') return;
  Object.defineProperty(Object.prototype, '__magic__', {
    get: function get() {
      return this;
    },
    configurable: true
  });
  __magic__.globalThis = __magic__;
  delete Object.prototype.__magic__;
})();

module.exports = globalThis;

/***/ }),
/* 535 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Parses chunker string into options used by DAGBuilder in ipfs-unixfs-engine
 *
 *
 * @param  {String}   chunker Chunker algorithm supported formats:
 *                    "size-{size}"
 *                    "rabin"
 *                    "rabin-{avg}"
 *                    "rabin-{min}-{avg}-{max}"
 *
 * @return {Object}   Chunker options for DAGBuilder
 */

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const parseChunkerString = chunker => {
  if (!chunker) {
    return {
      chunker: 'fixed'
    };
  } else if (chunker.startsWith('size-')) {
    const sizeStr = chunker.split('-')[1];
    const size = parseInt(sizeStr);

    if (isNaN(size)) {
      throw new Error('Chunker parameter size must be an integer');
    }

    return {
      chunker: 'fixed',
      maxChunkSize: size
    };
  } else if (chunker.startsWith('rabin')) {
    return _objectSpread({
      chunker: 'rabin'
    }, parseRabinString(chunker));
  } else {
    throw new Error("Unrecognized chunker option: ".concat(chunker));
  }
};
/**
 * Parses rabin chunker string
 *
 * @param  {String}   chunker Chunker algorithm supported formats:
 *                            "rabin"
 *                            "rabin-{avg}"
 *                            "rabin-{min}-{avg}-{max}"
 *
 * @return {Object}   rabin chunker options
 */


const parseRabinString = chunker => {
  const options = {};
  const parts = chunker.split('-');

  switch (parts.length) {
    case 1:
      options.avgChunkSize = 262144;
      break;

    case 2:
      options.avgChunkSize = parseChunkSize(parts[1], 'avg');
      break;

    case 4:
      options.minChunkSize = parseChunkSize(parts[1], 'min');
      options.avgChunkSize = parseChunkSize(parts[2], 'avg');
      options.maxChunkSize = parseChunkSize(parts[3], 'max');
      break;

    default:
      throw new Error('Incorrect chunker format (expected "rabin" "rabin-[avg]" or "rabin-[min]-[avg]-[max]"');
  }

  return options;
};

const parseChunkSize = (str, name) => {
  const size = parseInt(str);

  if (isNaN(size)) {
    throw new Error("Chunker parameter ".concat(name, " must be an integer"));
  }

  return size;
};

module.exports = {
  parseChunkSize,
  parseRabinString,
  parseChunkerString
};

/***/ }),
/* 536 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const {
  cleanCid
} = __webpack_require__(147);

module.exports = ({
  blockService,
  preload
}) => {
  return async function get(cid, options) {
    // eslint-disable-line require-await
    options = options || {};
    cid = cleanCid(cid);

    if (options.preload !== false) {
      preload(cid);
    }

    return blockService.get(cid);
  };
};

/***/ }),
/* 537 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const Block = __webpack_require__(80);

const multihashing = __webpack_require__(22);

const CID = __webpack_require__(3);

module.exports = ({
  blockService,
  gcLock,
  preload
}) => {
  return async function put(block, options) {
    options = options || {};

    if (Array.isArray(block)) {
      throw new Error('Array is not supported');
    }

    if (!Block.isBlock(block)) {
      if (options.cid && CID.isCID(options.cid)) {
        block = new Block(block, options.cid);
      } else {
        const mhtype = options.mhtype || 'sha2-256';
        const format = options.format || 'dag-pb';
        let cidVersion;

        if (options.version == null) {
          // Pick appropriate CID version
          cidVersion = mhtype === 'sha2-256' && format === 'dag-pb' ? 0 : 1;
        } else {
          cidVersion = options.version;
        }

        const multihash = await multihashing(block, mhtype);
        const cid = new CID(cidVersion, format, multihash);
        block = new Block(block, cid);
      }
    }

    const release = await gcLock.readLock();

    try {
      await blockService.put(block);

      if (options.preload !== false) {
        preload(block.cid);
      }

      return block;
    } finally {
      release();
    }
  };
};

/***/ }),
/* 538 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

function _asyncGeneratorDelegate(inner, awaitWrap) { var iter = {}, waiting = false; function pump(key, value) { waiting = true; value = new Promise(function (resolve) { resolve(inner[key](value)); }); return { done: false, value: awaitWrap(value) }; } ; if (typeof Symbol === "function" && Symbol.iterator) { iter[Symbol.iterator] = function () { return this; }; } iter.next = function (value) { if (waiting) { waiting = false; return value; } return pump("next", value); }; if (typeof inner.throw === "function") { iter.throw = function (value) { if (waiting) { waiting = false; throw value; } return pump("throw", value); }; } if (typeof inner.return === "function") { iter.return = function (value) { if (waiting) { waiting = false; return value; } return pump("return", value); }; } return iter; }

const CID = __webpack_require__(3);

const errCode = __webpack_require__(2);

const {
  parallelMap,
  filter
} = __webpack_require__(41);

const pipe = __webpack_require__(23);

const {
  PinTypes
} = __webpack_require__(102);

const {
  cleanCid
} = __webpack_require__(147);

const BLOCK_RM_CONCURRENCY = 8;

module.exports = ({
  blockService,
  gcLock,
  pinManager
}) => {
  return (
    /*#__PURE__*/
    function () {
      var _rm = _wrapAsyncGenerator(function* (cids, options) {
        options = options || {};

        if (!Array.isArray(cids)) {
          cids = [cids];
        } // We need to take a write lock here to ensure that adding and removing
        // blocks are exclusive operations


        const release = yield _awaitAsyncGenerator(gcLock.writeLock());

        try {
          yield* _asyncGeneratorDelegate(_asyncIterator(pipe(cids, parallelMap(BLOCK_RM_CONCURRENCY, async cid => {
            cid = cleanCid(cid);
            const result = {
              cid
            };

            try {
              const pinResult = await pinManager.isPinnedWithType(cid, PinTypes.all);

              if (pinResult.pinned) {
                if (CID.isCID(pinResult.reason)) {
                  // eslint-disable-line max-depth
                  throw errCode(new Error("pinned via ".concat(pinResult.reason)));
                }

                throw errCode(new Error("pinned: ".concat(pinResult.reason)));
              } // remove has check when https://github.com/ipfs/js-ipfs-block-service/pull/88 is merged


              const has = await blockService._repo.blocks.has(cid);

              if (!has) {
                throw errCode(new Error('block not found'), 'ERR_BLOCK_NOT_FOUND');
              }

              await blockService.delete(cid);
            } catch (err) {
              if (!options.force) {
                err.message = "cannot remove ".concat(cid, ": ").concat(err.message);
                result.error = err;
              }
            }

            return result;
          }), filter(() => !options.quiet))), _awaitAsyncGenerator);
        } finally {
          release();
        }
      });

      function rm(_x, _x2) {
        return _rm.apply(this, arguments);
      }

      return rm;
    }()
  );
};

/***/ }),
/* 539 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var has = Object.prototype.hasOwnProperty,
    prefix = '~';
/**
 * Constructor to create a storage for our `EE` objects.
 * An `Events` instance is a plain object whose properties are event names.
 *
 * @constructor
 * @private
 */

function Events() {} //
// We try to not inherit from `Object.prototype`. In some engines creating an
// instance in this way is faster than calling `Object.create(null)` directly.
// If `Object.create(null)` is not supported we prefix the event names with a
// character to make sure that the built-in object properties are not
// overridden or used as an attack vector.
//


if (Object.create) {
  Events.prototype = Object.create(null); //
  // This hack is needed because the `__proto__` property is still inherited in
  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
  //

  if (!new Events().__proto__) prefix = false;
}
/**
 * Representation of a single event listener.
 *
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
 * @constructor
 * @private
 */


function EE(fn, context, once) {
  this.fn = fn;
  this.context = context;
  this.once = once || false;
}
/**
 * Add a listener for a given event.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} once Specify if the listener is a one-time listener.
 * @returns {EventEmitter}
 * @private
 */


function addListener(emitter, event, fn, context, once) {
  if (typeof fn !== 'function') {
    throw new TypeError('The listener must be a function');
  }

  var listener = new EE(fn, context || emitter, once),
      evt = prefix ? prefix + event : event;
  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);else emitter._events[evt] = [emitter._events[evt], listener];
  return emitter;
}
/**
 * Clear event by name.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} evt The Event name.
 * @private
 */


function clearEvent(emitter, evt) {
  if (--emitter._eventsCount === 0) emitter._events = new Events();else delete emitter._events[evt];
}
/**
 * Minimal `EventEmitter` interface that is molded against the Node.js
 * `EventEmitter` interface.
 *
 * @constructor
 * @public
 */


function EventEmitter() {
  this._events = new Events();
  this._eventsCount = 0;
}
/**
 * Return an array listing the events for which the emitter has registered
 * listeners.
 *
 * @returns {Array}
 * @public
 */


EventEmitter.prototype.eventNames = function eventNames() {
  var names = [],
      events,
      name;
  if (this._eventsCount === 0) return names;

  for (name in events = this._events) {
    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
  }

  if (Object.getOwnPropertySymbols) {
    return names.concat(Object.getOwnPropertySymbols(events));
  }

  return names;
};
/**
 * Return the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Array} The registered listeners.
 * @public
 */


EventEmitter.prototype.listeners = function listeners(event) {
  var evt = prefix ? prefix + event : event,
      handlers = this._events[evt];
  if (!handlers) return [];
  if (handlers.fn) return [handlers.fn];

  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
    ee[i] = handlers[i].fn;
  }

  return ee;
};
/**
 * Return the number of listeners listening to a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Number} The number of listeners.
 * @public
 */


EventEmitter.prototype.listenerCount = function listenerCount(event) {
  var evt = prefix ? prefix + event : event,
      listeners = this._events[evt];
  if (!listeners) return 0;
  if (listeners.fn) return 1;
  return listeners.length;
};
/**
 * Calls each of the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Boolean} `true` if the event had listeners, else `false`.
 * @public
 */


EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
  var evt = prefix ? prefix + event : event;
  if (!this._events[evt]) return false;
  var listeners = this._events[evt],
      len = arguments.length,
      args,
      i;

  if (listeners.fn) {
    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

    switch (len) {
      case 1:
        return listeners.fn.call(listeners.context), true;

      case 2:
        return listeners.fn.call(listeners.context, a1), true;

      case 3:
        return listeners.fn.call(listeners.context, a1, a2), true;

      case 4:
        return listeners.fn.call(listeners.context, a1, a2, a3), true;

      case 5:
        return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;

      case 6:
        return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
    }

    for (i = 1, args = new Array(len - 1); i < len; i++) {
      args[i - 1] = arguments[i];
    }

    listeners.fn.apply(listeners.context, args);
  } else {
    var length = listeners.length,
        j;

    for (i = 0; i < length; i++) {
      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

      switch (len) {
        case 1:
          listeners[i].fn.call(listeners[i].context);
          break;

        case 2:
          listeners[i].fn.call(listeners[i].context, a1);
          break;

        case 3:
          listeners[i].fn.call(listeners[i].context, a1, a2);
          break;

        case 4:
          listeners[i].fn.call(listeners[i].context, a1, a2, a3);
          break;

        default:
          if (!args) for (j = 1, args = new Array(len - 1); j < len; j++) {
            args[j - 1] = arguments[j];
          }
          listeners[i].fn.apply(listeners[i].context, args);
      }
    }
  }

  return true;
};
/**
 * Add a listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */


EventEmitter.prototype.on = function on(event, fn, context) {
  return addListener(this, event, fn, context, false);
};
/**
 * Add a one-time listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */


EventEmitter.prototype.once = function once(event, fn, context) {
  return addListener(this, event, fn, context, true);
};
/**
 * Remove the listeners of a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn Only remove the listeners that match this function.
 * @param {*} context Only remove the listeners that have this context.
 * @param {Boolean} once Only remove one-time listeners.
 * @returns {EventEmitter} `this`.
 * @public
 */


EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
  var evt = prefix ? prefix + event : event;
  if (!this._events[evt]) return this;

  if (!fn) {
    clearEvent(this, evt);
    return this;
  }

  var listeners = this._events[evt];

  if (listeners.fn) {
    if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
      clearEvent(this, evt);
    }
  } else {
    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
      if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
        events.push(listeners[i]);
      }
    } //
    // Reset the array, or remove it completely if we have no more listeners.
    //


    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;else clearEvent(this, evt);
  }

  return this;
};
/**
 * Remove all listeners, or those of the specified event.
 *
 * @param {(String|Symbol)} [event] The event name.
 * @returns {EventEmitter} `this`.
 * @public
 */


EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
  var evt;

  if (event) {
    evt = prefix ? prefix + event : event;
    if (this._events[evt]) clearEvent(this, evt);
  } else {
    this._events = new Events();
    this._eventsCount = 0;
  }

  return this;
}; //
// Alias methods names because people roll like that.
//


EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.addListener = EventEmitter.prototype.on; //
// Expose the prefix.
//

EventEmitter.prefixed = prefix; //
// Allow `EventEmitter` to be imported as module namespace.
//

EventEmitter.EventEmitter = EventEmitter; //
// Expose the module.
//

if (true) {
  module.exports = EventEmitter;
}

/***/ }),
/* 540 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = (promise, onFinally) => {
  onFinally = onFinally || (() => {});

  return promise.then(val => new Promise(resolve => {
    resolve(onFinally());
  }).then(() => val), err => new Promise(resolve => {
    resolve(onFinally());
  }).then(() => {
    throw err;
  }));
};

/***/ }),
/* 541 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

const lower_bound_1 = __webpack_require__(542);

class PriorityQueue {
  constructor() {
    Object.defineProperty(this, "_queue", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: []
    });
  }

  enqueue(run, options) {
    options = Object.assign({
      priority: 0
    }, options);
    const element = {
      priority: options.priority,
      run
    };

    if (this.size && this._queue[this.size - 1].priority >= options.priority) {
      this._queue.push(element);

      return;
    }

    const index = lower_bound_1.default(this._queue, element, (a, b) => b.priority - a.priority);

    this._queue.splice(index, 0, element);
  }

  dequeue() {
    const item = this._queue.shift();

    return item && item.run;
  }

  get size() {
    return this._queue.length;
  }

}

exports.default = PriorityQueue;

/***/ }),
/* 542 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
}); // Port of lower_bound from http://en.cppreference.com/w/cpp/algorithm/lower_bound
// Used to compute insertion index to keep queue sorted after insertion

function lowerBound(array, value, comparator) {
  let first = 0;
  let count = array.length;

  while (count > 0) {
    const step = count / 2 | 0;
    let it = first + step;

    if (comparator(array[it], value) <= 0) {
      first = ++it;
      count -= step + 1;
    } else {
      count = step;
    }
  }

  return first;
}

exports.default = lowerBound;

/***/ }),
/* 543 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Unique ID creation requires a high quality random # generator.  In the
// browser this is a little complicated due to unknown quality of Math.random()
// and inconsistent support for the `crypto` API.  We do the best we can via
// feature-detection
// getRandomValues needs to be invoked in a context where "this" is a Crypto
// implementation. Also, find the complete implementation of crypto on IE11.
var getRandomValues = typeof crypto != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto);

if (getRandomValues) {
  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef

  module.exports = function whatwgRNG() {
    getRandomValues(rnds8);
    return rnds8;
  };
} else {
  // Math.random()-based (RNG)
  //
  // If all else fails, use Math.random().  It's fast, but is of unspecified
  // quality.
  var rnds = new Array(16);

  module.exports = function mathRNG() {
    for (var i = 0, r; i < 16; i++) {
      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
    }

    return rnds;
  };
}

/***/ }),
/* 544 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
var byteToHex = [];

for (var i = 0; i < 256; ++i) {
  byteToHex[i] = (i + 0x100).toString(16).substr(1);
}

function bytesToUuid(buf, offset) {
  var i = offset || 0;
  var bth = byteToHex; // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4

  return [bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], '-', bth[buf[i++]], bth[buf[i++]], '-', bth[buf[i++]], bth[buf[i++]], '-', bth[buf[i++]], bth[buf[i++]], '-', bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]]].join('');
}

module.exports = bytesToUuid;

/***/ }),
/* 545 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const {
  filter,
  sortAll,
  take,
  map
} = __webpack_require__(245);

const Key = __webpack_require__(244); // Errors


const Errors = __webpack_require__(246);

class MemoryDatastore {
  constructor() {
    this.data = {};
  }

  async open() {}

  async put(key, val) {
    // eslint-disable-line require-await
    this.data[key.toString()] = val;
  }

  async get(key) {
    const exists = await this.has(key);
    if (!exists) throw Errors.notFoundError();
    return this.data[key.toString()];
  }

  async has(key) {
    // eslint-disable-line require-await
    return this.data[key.toString()] !== undefined;
  }

  async delete(key) {
    // eslint-disable-line require-await
    delete this.data[key.toString()];
  }

  batch() {
    let puts = [];
    let dels = [];
    return {
      put(key, value) {
        puts.push([key, value]);
      },

      delete(key) {
        dels.push(key);
      },

      commit: async () => {
        // eslint-disable-line require-await
        puts.forEach(v => {
          this.data[v[0].toString()] = v[1];
        });
        puts = [];
        dels.forEach(key => {
          delete this.data[key.toString()];
        });
        dels = [];
      }
    };
  }

  query(q) {
    let it = Object.entries(this.data);
    it = map(it, entry => ({
      key: new Key(entry[0]),
      value: entry[1]
    }));

    if (q.prefix != null) {
      it = filter(it, e => e.key.toString().startsWith(q.prefix));
    }

    if (Array.isArray(q.filters)) {
      it = q.filters.reduce((it, f) => filter(it, f), it);
    }

    if (Array.isArray(q.orders)) {
      it = q.orders.reduce((it, f) => sortAll(it, f), it);
    }

    if (q.offset != null) {
      let i = 0;
      it = filter(it, () => i++ >= q.offset);
    }

    if (q.limit != null) {
      it = take(it, q.limit);
    }

    if (q.keysOnly === true) {
      it = map(it, e => ({
        key: e.key
      }));
    }

    return it;
  }

  async close() {}

}

module.exports = MemoryDatastore;

/***/ }),
/* 546 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const cbor = __webpack_require__(248);

const CID = __webpack_require__(3);

const Block = __webpack_require__(80);

const isCircular = __webpack_require__(254);

const multihashes = __webpack_require__(22);

const promisify = __webpack_require__(98).promisify;

const phash = promisify(multihashes);
const CID_CBOR_TAG = 42;
/* start copy from exisisting dag-cbor */

function tagCID(cid) {
  if (typeof cid === 'string') {
    cid = new CID(cid).buffer;
  } else if (CID.isCID(cid)) {
    cid = cid.buffer;
  }

  return new cbor.Tagged(CID_CBOR_TAG, Buffer.concat([Buffer.from('00', 'hex'), // thanks jdag
  cid]));
}

function replaceCIDbyTAG(dagNode) {
  let circular;

  try {
    circular = isCircular(dagNode);
  } catch (e) {
    circular = false;
  }

  if (circular) {
    throw new Error('The object passed has circular references');
  }

  function transform(obj) {
    if (!obj || Buffer.isBuffer(obj) || typeof obj === 'string') {
      return obj;
    }

    if (Array.isArray(obj)) {
      return obj.map(transform);
    }

    if (CID.isCID(obj)) {
      return tagCID(obj);
    }

    const keys = Object.keys(obj);

    if (keys.length === 1 && keys[0] === '/') {
      // Multiaddr encoding
      // if (typeof link === 'string' && isMultiaddr(link)) {
      //  link = new Multiaddr(link).buffer
      // }
      return tagCID(obj['/']);
    } else if (keys.length > 0) {
      // Recursive transform
      const out = {};
      keys.forEach(key => {
        if (typeof obj[key] === 'object') {
          out[key] = transform(obj[key]);
        } else {
          out[key] = obj[key];
        }
      });
      return out;
    } else {
      return obj;
    }
  }

  return transform(dagNode);
}
/* end copy from existing dag-cbor */


module.exports = maxsize => {
  let _decoder = new cbor.Decoder({
    tags: {
      [CID_CBOR_TAG]: val => {
        // remove that 0
        val = val.slice(1);
        return new CID(val);
      }
    },

    /* Defaults to the borc default. */
    size: maxsize
  });

  const deserialize = buffer => {
    return _decoder.decodeFirst(buffer);
  };

  const serialize = dagNode => {
    let dagNodeTagged = replaceCIDbyTAG(dagNode);
    return cbor.encode(dagNodeTagged);
  };

  const mkblock = async (obj, algo = 'sha2-256') => {
    let buff = serialize(obj);
    let multihash = await phash(buff, algo);
    let cid = new CID(1, 'dag-cbor', multihash);
    return new Block(buff, cid);
  };

  return {
    serialize,
    deserialize,
    mkblock
  };
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 547 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const Decoder = __webpack_require__(249);

const utils = __webpack_require__(148);
/**
 * Output the diagnostic format from a stream of CBOR bytes.
 *
 */


class Diagnose extends Decoder {
  createTag(tagNumber, value) {
    return "".concat(tagNumber, "(").concat(value, ")");
  }

  createInt(val) {
    return super.createInt(val).toString();
  }

  createInt32(f, g) {
    return super.createInt32(f, g).toString();
  }

  createInt64(f1, f2, g1, g2) {
    return super.createInt64(f1, f2, g1, g2).toString();
  }

  createInt32Neg(f, g) {
    return super.createInt32Neg(f, g).toString();
  }

  createInt64Neg(f1, f2, g1, g2) {
    return super.createInt64Neg(f1, f2, g1, g2).toString();
  }

  createTrue() {
    return 'true';
  }

  createFalse() {
    return 'false';
  }

  createFloat(val) {
    const fl = super.createFloat(val);

    if (utils.isNegativeZero(val)) {
      return '-0_1';
    }

    return "".concat(fl, "_1");
  }

  createFloatSingle(a, b, c, d) {
    const fl = super.createFloatSingle(a, b, c, d);
    return "".concat(fl, "_2");
  }

  createFloatDouble(a, b, c, d, e, f, g, h) {
    const fl = super.createFloatDouble(a, b, c, d, e, f, g, h);
    return "".concat(fl, "_3");
  }

  createByteString(raw, len) {
    const val = raw.join(', ');

    if (len === -1) {
      return "(_ ".concat(val, ")");
    }

    return "h'".concat(val);
  }

  createByteStringFromHeap(start, end) {
    const val = Buffer.from(super.createByteStringFromHeap(start, end)).toString('hex');
    return "h'".concat(val, "'");
  }

  createInfinity() {
    return 'Infinity_1';
  }

  createInfinityNeg() {
    return '-Infinity_1';
  }

  createNaN() {
    return 'NaN_1';
  }

  createNaNNeg() {
    return '-NaN_1';
  }

  createNull() {
    return 'null';
  }

  createUndefined() {
    return 'undefined';
  }

  createSimpleUnassigned(val) {
    return "simple(".concat(val, ")");
  }

  createArray(arr, len) {
    const val = super.createArray(arr, len);

    if (len === -1) {
      // indefinite
      return "[_ ".concat(val.join(', '), "]");
    }

    return "[".concat(val.join(', '), "]");
  }

  createMap(map, len) {
    const val = super.createMap(map);
    const list = Array.from(val.keys()).reduce(collectObject(val), '');

    if (len === -1) {
      return "{_ ".concat(list, "}");
    }

    return "{".concat(list, "}");
  }

  createObject(obj, len) {
    const val = super.createObject(obj);
    const map = Object.keys(val).reduce(collectObject(val), '');

    if (len === -1) {
      return "{_ ".concat(map, "}");
    }

    return "{".concat(map, "}");
  }

  createUtf8String(raw, len) {
    const val = raw.join(', ');

    if (len === -1) {
      return "(_ ".concat(val, ")");
    }

    return "\"".concat(val, "\"");
  }

  createUtf8StringFromHeap(start, end) {
    const val = Buffer.from(super.createUtf8StringFromHeap(start, end)).toString('utf8');
    return "\"".concat(val, "\"");
  }

  static diagnose(input, enc) {
    if (typeof input === 'string') {
      input = Buffer.from(input, enc || 'hex');
    }

    const dec = new Diagnose();
    return dec.decodeFirst(input);
  }

}

module.exports = Diagnose;

function collectObject(val) {
  return (acc, key) => {
    if (acc) {
      return "".concat(acc, ", ").concat(key, ": ").concat(val[key]);
    }

    return "".concat(key, ": ").concat(val[key]);
  };
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 548 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function decodeAsm(stdlib, foreign, buffer) {
  'use asm'; // -- Imports

  var heap = new stdlib.Uint8Array(buffer); // var log = foreign.log

  var pushInt = foreign.pushInt;
  var pushInt32 = foreign.pushInt32;
  var pushInt32Neg = foreign.pushInt32Neg;
  var pushInt64 = foreign.pushInt64;
  var pushInt64Neg = foreign.pushInt64Neg;
  var pushFloat = foreign.pushFloat;
  var pushFloatSingle = foreign.pushFloatSingle;
  var pushFloatDouble = foreign.pushFloatDouble;
  var pushTrue = foreign.pushTrue;
  var pushFalse = foreign.pushFalse;
  var pushUndefined = foreign.pushUndefined;
  var pushNull = foreign.pushNull;
  var pushInfinity = foreign.pushInfinity;
  var pushInfinityNeg = foreign.pushInfinityNeg;
  var pushNaN = foreign.pushNaN;
  var pushNaNNeg = foreign.pushNaNNeg;
  var pushArrayStart = foreign.pushArrayStart;
  var pushArrayStartFixed = foreign.pushArrayStartFixed;
  var pushArrayStartFixed32 = foreign.pushArrayStartFixed32;
  var pushArrayStartFixed64 = foreign.pushArrayStartFixed64;
  var pushObjectStart = foreign.pushObjectStart;
  var pushObjectStartFixed = foreign.pushObjectStartFixed;
  var pushObjectStartFixed32 = foreign.pushObjectStartFixed32;
  var pushObjectStartFixed64 = foreign.pushObjectStartFixed64;
  var pushByteString = foreign.pushByteString;
  var pushByteStringStart = foreign.pushByteStringStart;
  var pushUtf8String = foreign.pushUtf8String;
  var pushUtf8StringStart = foreign.pushUtf8StringStart;
  var pushSimpleUnassigned = foreign.pushSimpleUnassigned;
  var pushTagStart = foreign.pushTagStart;
  var pushTagStart4 = foreign.pushTagStart4;
  var pushTagStart8 = foreign.pushTagStart8;
  var pushTagUnassigned = foreign.pushTagUnassigned;
  var pushBreak = foreign.pushBreak;
  var pow = stdlib.Math.pow; // -- Constants
  // -- Mutable Variables

  var offset = 0;
  var inputLength = 0;
  var code = 0; // Decode a cbor string represented as Uint8Array
  // which is allocated on the heap from 0 to inputLength
  //
  // input - Int
  //
  // Returns Code - Int,
  // Success = 0
  // Error > 0

  function parse(input) {
    input = input | 0;
    offset = 0;
    inputLength = input;

    while ((offset | 0) < (inputLength | 0)) {
      code = jumpTable[heap[offset] & 255](heap[offset] | 0) | 0;

      if ((code | 0) > 0) {
        break;
      }
    }

    return code | 0;
  } // -- Helper Function


  function checkOffset(n) {
    n = n | 0;

    if (((offset | 0) + (n | 0) | 0) < (inputLength | 0)) {
      return 0;
    }

    return 1;
  }

  function readUInt16(n) {
    n = n | 0;
    return heap[n | 0] << 8 | heap[n + 1 | 0] | 0;
  }

  function readUInt32(n) {
    n = n | 0;
    return heap[n | 0] << 24 | heap[n + 1 | 0] << 16 | heap[n + 2 | 0] << 8 | heap[n + 3 | 0] | 0;
  } // -- Initial Byte Handlers


  function INT_P(octet) {
    octet = octet | 0;
    pushInt(octet | 0);
    offset = offset + 1 | 0;
    return 0;
  }

  function UINT_P_8(octet) {
    octet = octet | 0;

    if (checkOffset(1) | 0) {
      return 1;
    }

    pushInt(heap[offset + 1 | 0] | 0);
    offset = offset + 2 | 0;
    return 0;
  }

  function UINT_P_16(octet) {
    octet = octet | 0;

    if (checkOffset(2) | 0) {
      return 1;
    }

    pushInt(readUInt16(offset + 1 | 0) | 0);
    offset = offset + 3 | 0;
    return 0;
  }

  function UINT_P_32(octet) {
    octet = octet | 0;

    if (checkOffset(4) | 0) {
      return 1;
    }

    pushInt32(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0);
    offset = offset + 5 | 0;
    return 0;
  }

  function UINT_P_64(octet) {
    octet = octet | 0;

    if (checkOffset(8) | 0) {
      return 1;
    }

    pushInt64(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0, readUInt16(offset + 5 | 0) | 0, readUInt16(offset + 7 | 0) | 0);
    offset = offset + 9 | 0;
    return 0;
  }

  function INT_N(octet) {
    octet = octet | 0;
    pushInt(-1 - (octet - 32 | 0) | 0);
    offset = offset + 1 | 0;
    return 0;
  }

  function UINT_N_8(octet) {
    octet = octet | 0;

    if (checkOffset(1) | 0) {
      return 1;
    }

    pushInt(-1 - (heap[offset + 1 | 0] | 0) | 0);
    offset = offset + 2 | 0;
    return 0;
  }

  function UINT_N_16(octet) {
    octet = octet | 0;
    var val = 0;

    if (checkOffset(2) | 0) {
      return 1;
    }

    val = readUInt16(offset + 1 | 0) | 0;
    pushInt(-1 - (val | 0) | 0);
    offset = offset + 3 | 0;
    return 0;
  }

  function UINT_N_32(octet) {
    octet = octet | 0;

    if (checkOffset(4) | 0) {
      return 1;
    }

    pushInt32Neg(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0);
    offset = offset + 5 | 0;
    return 0;
  }

  function UINT_N_64(octet) {
    octet = octet | 0;

    if (checkOffset(8) | 0) {
      return 1;
    }

    pushInt64Neg(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0, readUInt16(offset + 5 | 0) | 0, readUInt16(offset + 7 | 0) | 0);
    offset = offset + 9 | 0;
    return 0;
  }

  function BYTE_STRING(octet) {
    octet = octet | 0;
    var start = 0;
    var end = 0;
    var step = 0;
    step = octet - 64 | 0;

    if (checkOffset(step | 0) | 0) {
      return 1;
    }

    start = offset + 1 | 0;
    end = (offset + 1 | 0) + (step | 0) | 0;
    pushByteString(start | 0, end | 0);
    offset = end | 0;
    return 0;
  }

  function BYTE_STRING_8(octet) {
    octet = octet | 0;
    var start = 0;
    var end = 0;
    var length = 0;

    if (checkOffset(1) | 0) {
      return 1;
    }

    length = heap[offset + 1 | 0] | 0;
    start = offset + 2 | 0;
    end = (offset + 2 | 0) + (length | 0) | 0;

    if (checkOffset(length + 1 | 0) | 0) {
      return 1;
    }

    pushByteString(start | 0, end | 0);
    offset = end | 0;
    return 0;
  }

  function BYTE_STRING_16(octet) {
    octet = octet | 0;
    var start = 0;
    var end = 0;
    var length = 0;

    if (checkOffset(2) | 0) {
      return 1;
    }

    length = readUInt16(offset + 1 | 0) | 0;
    start = offset + 3 | 0;
    end = (offset + 3 | 0) + (length | 0) | 0;

    if (checkOffset(length + 2 | 0) | 0) {
      return 1;
    }

    pushByteString(start | 0, end | 0);
    offset = end | 0;
    return 0;
  }

  function BYTE_STRING_32(octet) {
    octet = octet | 0;
    var start = 0;
    var end = 0;
    var length = 0;

    if (checkOffset(4) | 0) {
      return 1;
    }

    length = readUInt32(offset + 1 | 0) | 0;
    start = offset + 5 | 0;
    end = (offset + 5 | 0) + (length | 0) | 0;

    if (checkOffset(length + 4 | 0) | 0) {
      return 1;
    }

    pushByteString(start | 0, end | 0);
    offset = end | 0;
    return 0;
  }

  function BYTE_STRING_64(octet) {
    // NOT IMPLEMENTED
    octet = octet | 0;
    return 1;
  }

  function BYTE_STRING_BREAK(octet) {
    octet = octet | 0;
    pushByteStringStart();
    offset = offset + 1 | 0;
    return 0;
  }

  function UTF8_STRING(octet) {
    octet = octet | 0;
    var start = 0;
    var end = 0;
    var step = 0;
    step = octet - 96 | 0;

    if (checkOffset(step | 0) | 0) {
      return 1;
    }

    start = offset + 1 | 0;
    end = (offset + 1 | 0) + (step | 0) | 0;
    pushUtf8String(start | 0, end | 0);
    offset = end | 0;
    return 0;
  }

  function UTF8_STRING_8(octet) {
    octet = octet | 0;
    var start = 0;
    var end = 0;
    var length = 0;

    if (checkOffset(1) | 0) {
      return 1;
    }

    length = heap[offset + 1 | 0] | 0;
    start = offset + 2 | 0;
    end = (offset + 2 | 0) + (length | 0) | 0;

    if (checkOffset(length + 1 | 0) | 0) {
      return 1;
    }

    pushUtf8String(start | 0, end | 0);
    offset = end | 0;
    return 0;
  }

  function UTF8_STRING_16(octet) {
    octet = octet | 0;
    var start = 0;
    var end = 0;
    var length = 0;

    if (checkOffset(2) | 0) {
      return 1;
    }

    length = readUInt16(offset + 1 | 0) | 0;
    start = offset + 3 | 0;
    end = (offset + 3 | 0) + (length | 0) | 0;

    if (checkOffset(length + 2 | 0) | 0) {
      return 1;
    }

    pushUtf8String(start | 0, end | 0);
    offset = end | 0;
    return 0;
  }

  function UTF8_STRING_32(octet) {
    octet = octet | 0;
    var start = 0;
    var end = 0;
    var length = 0;

    if (checkOffset(4) | 0) {
      return 1;
    }

    length = readUInt32(offset + 1 | 0) | 0;
    start = offset + 5 | 0;
    end = (offset + 5 | 0) + (length | 0) | 0;

    if (checkOffset(length + 4 | 0) | 0) {
      return 1;
    }

    pushUtf8String(start | 0, end | 0);
    offset = end | 0;
    return 0;
  }

  function UTF8_STRING_64(octet) {
    // NOT IMPLEMENTED
    octet = octet | 0;
    return 1;
  }

  function UTF8_STRING_BREAK(octet) {
    octet = octet | 0;
    pushUtf8StringStart();
    offset = offset + 1 | 0;
    return 0;
  }

  function ARRAY(octet) {
    octet = octet | 0;
    pushArrayStartFixed(octet - 128 | 0);
    offset = offset + 1 | 0;
    return 0;
  }

  function ARRAY_8(octet) {
    octet = octet | 0;

    if (checkOffset(1) | 0) {
      return 1;
    }

    pushArrayStartFixed(heap[offset + 1 | 0] | 0);
    offset = offset + 2 | 0;
    return 0;
  }

  function ARRAY_16(octet) {
    octet = octet | 0;

    if (checkOffset(2) | 0) {
      return 1;
    }

    pushArrayStartFixed(readUInt16(offset + 1 | 0) | 0);
    offset = offset + 3 | 0;
    return 0;
  }

  function ARRAY_32(octet) {
    octet = octet | 0;

    if (checkOffset(4) | 0) {
      return 1;
    }

    pushArrayStartFixed32(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0);
    offset = offset + 5 | 0;
    return 0;
  }

  function ARRAY_64(octet) {
    octet = octet | 0;

    if (checkOffset(8) | 0) {
      return 1;
    }

    pushArrayStartFixed64(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0, readUInt16(offset + 5 | 0) | 0, readUInt16(offset + 7 | 0) | 0);
    offset = offset + 9 | 0;
    return 0;
  }

  function ARRAY_BREAK(octet) {
    octet = octet | 0;
    pushArrayStart();
    offset = offset + 1 | 0;
    return 0;
  }

  function MAP(octet) {
    octet = octet | 0;
    var step = 0;
    step = octet - 160 | 0;

    if (checkOffset(step | 0) | 0) {
      return 1;
    }

    pushObjectStartFixed(step | 0);
    offset = offset + 1 | 0;
    return 0;
  }

  function MAP_8(octet) {
    octet = octet | 0;

    if (checkOffset(1) | 0) {
      return 1;
    }

    pushObjectStartFixed(heap[offset + 1 | 0] | 0);
    offset = offset + 2 | 0;
    return 0;
  }

  function MAP_16(octet) {
    octet = octet | 0;

    if (checkOffset(2) | 0) {
      return 1;
    }

    pushObjectStartFixed(readUInt16(offset + 1 | 0) | 0);
    offset = offset + 3 | 0;
    return 0;
  }

  function MAP_32(octet) {
    octet = octet | 0;

    if (checkOffset(4) | 0) {
      return 1;
    }

    pushObjectStartFixed32(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0);
    offset = offset + 5 | 0;
    return 0;
  }

  function MAP_64(octet) {
    octet = octet | 0;

    if (checkOffset(8) | 0) {
      return 1;
    }

    pushObjectStartFixed64(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0, readUInt16(offset + 5 | 0) | 0, readUInt16(offset + 7 | 0) | 0);
    offset = offset + 9 | 0;
    return 0;
  }

  function MAP_BREAK(octet) {
    octet = octet | 0;
    pushObjectStart();
    offset = offset + 1 | 0;
    return 0;
  }

  function TAG_KNOWN(octet) {
    octet = octet | 0;
    pushTagStart(octet - 192 | 0 | 0);
    offset = offset + 1 | 0;
    return 0;
  }

  function TAG_BIGNUM_POS(octet) {
    octet = octet | 0;
    pushTagStart(octet | 0);
    offset = offset + 1 | 0;
    return 0;
  }

  function TAG_BIGNUM_NEG(octet) {
    octet = octet | 0;
    pushTagStart(octet | 0);
    offset = offset + 1 | 0;
    return 0;
  }

  function TAG_FRAC(octet) {
    octet = octet | 0;
    pushTagStart(octet | 0);
    offset = offset + 1 | 0;
    return 0;
  }

  function TAG_BIGNUM_FLOAT(octet) {
    octet = octet | 0;
    pushTagStart(octet | 0);
    offset = offset + 1 | 0;
    return 0;
  }

  function TAG_UNASSIGNED(octet) {
    octet = octet | 0;
    pushTagStart(octet - 192 | 0 | 0);
    offset = offset + 1 | 0;
    return 0;
  }

  function TAG_BASE64_URL(octet) {
    octet = octet | 0;
    pushTagStart(octet | 0);
    offset = offset + 1 | 0;
    return 0;
  }

  function TAG_BASE64(octet) {
    octet = octet | 0;
    pushTagStart(octet | 0);
    offset = offset + 1 | 0;
    return 0;
  }

  function TAG_BASE16(octet) {
    octet = octet | 0;
    pushTagStart(octet | 0);
    offset = offset + 1 | 0;
    return 0;
  }

  function TAG_MORE_1(octet) {
    octet = octet | 0;

    if (checkOffset(1) | 0) {
      return 1;
    }

    pushTagStart(heap[offset + 1 | 0] | 0);
    offset = offset + 2 | 0;
    return 0;
  }

  function TAG_MORE_2(octet) {
    octet = octet | 0;

    if (checkOffset(2) | 0) {
      return 1;
    }

    pushTagStart(readUInt16(offset + 1 | 0) | 0);
    offset = offset + 3 | 0;
    return 0;
  }

  function TAG_MORE_4(octet) {
    octet = octet | 0;

    if (checkOffset(4) | 0) {
      return 1;
    }

    pushTagStart4(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0);
    offset = offset + 5 | 0;
    return 0;
  }

  function TAG_MORE_8(octet) {
    octet = octet | 0;

    if (checkOffset(8) | 0) {
      return 1;
    }

    pushTagStart8(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0, readUInt16(offset + 5 | 0) | 0, readUInt16(offset + 7 | 0) | 0);
    offset = offset + 9 | 0;
    return 0;
  }

  function SIMPLE_UNASSIGNED(octet) {
    octet = octet | 0;
    pushSimpleUnassigned((octet | 0) - 224 | 0);
    offset = offset + 1 | 0;
    return 0;
  }

  function SIMPLE_FALSE(octet) {
    octet = octet | 0;
    pushFalse();
    offset = offset + 1 | 0;
    return 0;
  }

  function SIMPLE_TRUE(octet) {
    octet = octet | 0;
    pushTrue();
    offset = offset + 1 | 0;
    return 0;
  }

  function SIMPLE_NULL(octet) {
    octet = octet | 0;
    pushNull();
    offset = offset + 1 | 0;
    return 0;
  }

  function SIMPLE_UNDEFINED(octet) {
    octet = octet | 0;
    pushUndefined();
    offset = offset + 1 | 0;
    return 0;
  }

  function SIMPLE_BYTE(octet) {
    octet = octet | 0;

    if (checkOffset(1) | 0) {
      return 1;
    }

    pushSimpleUnassigned(heap[offset + 1 | 0] | 0);
    offset = offset + 2 | 0;
    return 0;
  }

  function SIMPLE_FLOAT_HALF(octet) {
    octet = octet | 0;
    var f = 0;
    var g = 0;
    var sign = 1.0;
    var exp = 0.0;
    var mant = 0.0;
    var r = 0.0;

    if (checkOffset(2) | 0) {
      return 1;
    }

    f = heap[offset + 1 | 0] | 0;
    g = heap[offset + 2 | 0] | 0;

    if ((f | 0) & 0x80) {
      sign = -1.0;
    }

    exp = +(((f | 0) & 0x7C) >> 2);
    mant = +(((f | 0) & 0x03) << 8 | g);

    if (+exp == 0.0) {
      pushFloat(+(+sign * +5.9604644775390625e-8 * +mant));
    } else if (+exp == 31.0) {
      if (+sign == 1.0) {
        if (+mant > 0.0) {
          pushNaN();
        } else {
          pushInfinity();
        }
      } else {
        if (+mant > 0.0) {
          pushNaNNeg();
        } else {
          pushInfinityNeg();
        }
      }
    } else {
      pushFloat(+(+sign * pow(+2, +(+exp - 25.0)) * +(1024.0 + mant)));
    }

    offset = offset + 3 | 0;
    return 0;
  }

  function SIMPLE_FLOAT_SINGLE(octet) {
    octet = octet | 0;

    if (checkOffset(4) | 0) {
      return 1;
    }

    pushFloatSingle(heap[offset + 1 | 0] | 0, heap[offset + 2 | 0] | 0, heap[offset + 3 | 0] | 0, heap[offset + 4 | 0] | 0);
    offset = offset + 5 | 0;
    return 0;
  }

  function SIMPLE_FLOAT_DOUBLE(octet) {
    octet = octet | 0;

    if (checkOffset(8) | 0) {
      return 1;
    }

    pushFloatDouble(heap[offset + 1 | 0] | 0, heap[offset + 2 | 0] | 0, heap[offset + 3 | 0] | 0, heap[offset + 4 | 0] | 0, heap[offset + 5 | 0] | 0, heap[offset + 6 | 0] | 0, heap[offset + 7 | 0] | 0, heap[offset + 8 | 0] | 0);
    offset = offset + 9 | 0;
    return 0;
  }

  function ERROR(octet) {
    octet = octet | 0;
    return 1;
  }

  function BREAK(octet) {
    octet = octet | 0;
    pushBreak();
    offset = offset + 1 | 0;
    return 0;
  } // -- Jump Table


  var jumpTable = [// Integer 0x00..0x17 (0..23)
  INT_P, // 0x00
  INT_P, // 0x01
  INT_P, // 0x02
  INT_P, // 0x03
  INT_P, // 0x04
  INT_P, // 0x05
  INT_P, // 0x06
  INT_P, // 0x07
  INT_P, // 0x08
  INT_P, // 0x09
  INT_P, // 0x0A
  INT_P, // 0x0B
  INT_P, // 0x0C
  INT_P, // 0x0D
  INT_P, // 0x0E
  INT_P, // 0x0F
  INT_P, // 0x10
  INT_P, // 0x11
  INT_P, // 0x12
  INT_P, // 0x13
  INT_P, // 0x14
  INT_P, // 0x15
  INT_P, // 0x16
  INT_P, // 0x17
  // Unsigned integer (one-byte uint8_t follows)
  UINT_P_8, // 0x18
  // Unsigned integer (two-byte uint16_t follows)
  UINT_P_16, // 0x19
  // Unsigned integer (four-byte uint32_t follows)
  UINT_P_32, // 0x1a
  // Unsigned integer (eight-byte uint64_t follows)
  UINT_P_64, // 0x1b
  ERROR, // 0x1c
  ERROR, // 0x1d
  ERROR, // 0x1e
  ERROR, // 0x1f
  // Negative integer -1-0x00..-1-0x17 (-1..-24)
  INT_N, // 0x20
  INT_N, // 0x21
  INT_N, // 0x22
  INT_N, // 0x23
  INT_N, // 0x24
  INT_N, // 0x25
  INT_N, // 0x26
  INT_N, // 0x27
  INT_N, // 0x28
  INT_N, // 0x29
  INT_N, // 0x2A
  INT_N, // 0x2B
  INT_N, // 0x2C
  INT_N, // 0x2D
  INT_N, // 0x2E
  INT_N, // 0x2F
  INT_N, // 0x30
  INT_N, // 0x31
  INT_N, // 0x32
  INT_N, // 0x33
  INT_N, // 0x34
  INT_N, // 0x35
  INT_N, // 0x36
  INT_N, // 0x37
  // Negative integer -1-n (one-byte uint8_t for n follows)
  UINT_N_8, // 0x38
  // Negative integer -1-n (two-byte uint16_t for n follows)
  UINT_N_16, // 0x39
  // Negative integer -1-n (four-byte uint32_t for nfollows)
  UINT_N_32, // 0x3a
  // Negative integer -1-n (eight-byte uint64_t for n follows)
  UINT_N_64, // 0x3b
  ERROR, // 0x3c
  ERROR, // 0x3d
  ERROR, // 0x3e
  ERROR, // 0x3f
  // byte string (0x00..0x17 bytes follow)
  BYTE_STRING, // 0x40
  BYTE_STRING, // 0x41
  BYTE_STRING, // 0x42
  BYTE_STRING, // 0x43
  BYTE_STRING, // 0x44
  BYTE_STRING, // 0x45
  BYTE_STRING, // 0x46
  BYTE_STRING, // 0x47
  BYTE_STRING, // 0x48
  BYTE_STRING, // 0x49
  BYTE_STRING, // 0x4A
  BYTE_STRING, // 0x4B
  BYTE_STRING, // 0x4C
  BYTE_STRING, // 0x4D
  BYTE_STRING, // 0x4E
  BYTE_STRING, // 0x4F
  BYTE_STRING, // 0x50
  BYTE_STRING, // 0x51
  BYTE_STRING, // 0x52
  BYTE_STRING, // 0x53
  BYTE_STRING, // 0x54
  BYTE_STRING, // 0x55
  BYTE_STRING, // 0x56
  BYTE_STRING, // 0x57
  // byte string (one-byte uint8_t for n, and then n bytes follow)
  BYTE_STRING_8, // 0x58
  // byte string (two-byte uint16_t for n, and then n bytes follow)
  BYTE_STRING_16, // 0x59
  // byte string (four-byte uint32_t for n, and then n bytes follow)
  BYTE_STRING_32, // 0x5a
  // byte string (eight-byte uint64_t for n, and then n bytes follow)
  BYTE_STRING_64, // 0x5b
  ERROR, // 0x5c
  ERROR, // 0x5d
  ERROR, // 0x5e
  // byte string, byte strings follow, terminated by "break"
  BYTE_STRING_BREAK, // 0x5f
  // UTF-8 string (0x00..0x17 bytes follow)
  UTF8_STRING, // 0x60
  UTF8_STRING, // 0x61
  UTF8_STRING, // 0x62
  UTF8_STRING, // 0x63
  UTF8_STRING, // 0x64
  UTF8_STRING, // 0x65
  UTF8_STRING, // 0x66
  UTF8_STRING, // 0x67
  UTF8_STRING, // 0x68
  UTF8_STRING, // 0x69
  UTF8_STRING, // 0x6A
  UTF8_STRING, // 0x6B
  UTF8_STRING, // 0x6C
  UTF8_STRING, // 0x6D
  UTF8_STRING, // 0x6E
  UTF8_STRING, // 0x6F
  UTF8_STRING, // 0x70
  UTF8_STRING, // 0x71
  UTF8_STRING, // 0x72
  UTF8_STRING, // 0x73
  UTF8_STRING, // 0x74
  UTF8_STRING, // 0x75
  UTF8_STRING, // 0x76
  UTF8_STRING, // 0x77
  // UTF-8 string (one-byte uint8_t for n, and then n bytes follow)
  UTF8_STRING_8, // 0x78
  // UTF-8 string (two-byte uint16_t for n, and then n bytes follow)
  UTF8_STRING_16, // 0x79
  // UTF-8 string (four-byte uint32_t for n, and then n bytes follow)
  UTF8_STRING_32, // 0x7a
  // UTF-8 string (eight-byte uint64_t for n, and then n bytes follow)
  UTF8_STRING_64, // 0x7b
  // UTF-8 string, UTF-8 strings follow, terminated by "break"
  ERROR, // 0x7c
  ERROR, // 0x7d
  ERROR, // 0x7e
  UTF8_STRING_BREAK, // 0x7f
  // array (0x00..0x17 data items follow)
  ARRAY, // 0x80
  ARRAY, // 0x81
  ARRAY, // 0x82
  ARRAY, // 0x83
  ARRAY, // 0x84
  ARRAY, // 0x85
  ARRAY, // 0x86
  ARRAY, // 0x87
  ARRAY, // 0x88
  ARRAY, // 0x89
  ARRAY, // 0x8A
  ARRAY, // 0x8B
  ARRAY, // 0x8C
  ARRAY, // 0x8D
  ARRAY, // 0x8E
  ARRAY, // 0x8F
  ARRAY, // 0x90
  ARRAY, // 0x91
  ARRAY, // 0x92
  ARRAY, // 0x93
  ARRAY, // 0x94
  ARRAY, // 0x95
  ARRAY, // 0x96
  ARRAY, // 0x97
  // array (one-byte uint8_t fo, and then n data items follow)
  ARRAY_8, // 0x98
  // array (two-byte uint16_t for n, and then n data items follow)
  ARRAY_16, // 0x99
  // array (four-byte uint32_t for n, and then n data items follow)
  ARRAY_32, // 0x9a
  // array (eight-byte uint64_t for n, and then n data items follow)
  ARRAY_64, // 0x9b
  // array, data items follow, terminated by "break"
  ERROR, // 0x9c
  ERROR, // 0x9d
  ERROR, // 0x9e
  ARRAY_BREAK, // 0x9f
  // map (0x00..0x17 pairs of data items follow)
  MAP, // 0xa0
  MAP, // 0xa1
  MAP, // 0xa2
  MAP, // 0xa3
  MAP, // 0xa4
  MAP, // 0xa5
  MAP, // 0xa6
  MAP, // 0xa7
  MAP, // 0xa8
  MAP, // 0xa9
  MAP, // 0xaA
  MAP, // 0xaB
  MAP, // 0xaC
  MAP, // 0xaD
  MAP, // 0xaE
  MAP, // 0xaF
  MAP, // 0xb0
  MAP, // 0xb1
  MAP, // 0xb2
  MAP, // 0xb3
  MAP, // 0xb4
  MAP, // 0xb5
  MAP, // 0xb6
  MAP, // 0xb7
  // map (one-byte uint8_t for n, and then n pairs of data items follow)
  MAP_8, // 0xb8
  // map (two-byte uint16_t for n, and then n pairs of data items follow)
  MAP_16, // 0xb9
  // map (four-byte uint32_t for n, and then n pairs of data items follow)
  MAP_32, // 0xba
  // map (eight-byte uint64_t for n, and then n pairs of data items follow)
  MAP_64, // 0xbb
  ERROR, // 0xbc
  ERROR, // 0xbd
  ERROR, // 0xbe
  // map, pairs of data items follow, terminated by "break"
  MAP_BREAK, // 0xbf
  // Text-based date/time (data item follows; see Section 2.4.1)
  TAG_KNOWN, // 0xc0
  // Epoch-based date/time (data item follows; see Section 2.4.1)
  TAG_KNOWN, // 0xc1
  // Positive bignum (data item "byte string" follows)
  TAG_KNOWN, // 0xc2
  // Negative bignum (data item "byte string" follows)
  TAG_KNOWN, // 0xc3
  // Decimal Fraction (data item "array" follows; see Section 2.4.3)
  TAG_KNOWN, // 0xc4
  // Bigfloat (data item "array" follows; see Section 2.4.3)
  TAG_KNOWN, // 0xc5
  // (tagged item)
  TAG_UNASSIGNED, // 0xc6
  TAG_UNASSIGNED, // 0xc7
  TAG_UNASSIGNED, // 0xc8
  TAG_UNASSIGNED, // 0xc9
  TAG_UNASSIGNED, // 0xca
  TAG_UNASSIGNED, // 0xcb
  TAG_UNASSIGNED, // 0xcc
  TAG_UNASSIGNED, // 0xcd
  TAG_UNASSIGNED, // 0xce
  TAG_UNASSIGNED, // 0xcf
  TAG_UNASSIGNED, // 0xd0
  TAG_UNASSIGNED, // 0xd1
  TAG_UNASSIGNED, // 0xd2
  TAG_UNASSIGNED, // 0xd3
  TAG_UNASSIGNED, // 0xd4
  // Expected Conversion (data item follows; see Section 2.4.4.2)
  TAG_UNASSIGNED, // 0xd5
  TAG_UNASSIGNED, // 0xd6
  TAG_UNASSIGNED, // 0xd7
  // (more tagged items, 1/2/4/8 bytes and then a data item follow)
  TAG_MORE_1, // 0xd8
  TAG_MORE_2, // 0xd9
  TAG_MORE_4, // 0xda
  TAG_MORE_8, // 0xdb
  ERROR, // 0xdc
  ERROR, // 0xdd
  ERROR, // 0xde
  ERROR, // 0xdf
  // (simple value)
  SIMPLE_UNASSIGNED, // 0xe0
  SIMPLE_UNASSIGNED, // 0xe1
  SIMPLE_UNASSIGNED, // 0xe2
  SIMPLE_UNASSIGNED, // 0xe3
  SIMPLE_UNASSIGNED, // 0xe4
  SIMPLE_UNASSIGNED, // 0xe5
  SIMPLE_UNASSIGNED, // 0xe6
  SIMPLE_UNASSIGNED, // 0xe7
  SIMPLE_UNASSIGNED, // 0xe8
  SIMPLE_UNASSIGNED, // 0xe9
  SIMPLE_UNASSIGNED, // 0xea
  SIMPLE_UNASSIGNED, // 0xeb
  SIMPLE_UNASSIGNED, // 0xec
  SIMPLE_UNASSIGNED, // 0xed
  SIMPLE_UNASSIGNED, // 0xee
  SIMPLE_UNASSIGNED, // 0xef
  SIMPLE_UNASSIGNED, // 0xf0
  SIMPLE_UNASSIGNED, // 0xf1
  SIMPLE_UNASSIGNED, // 0xf2
  SIMPLE_UNASSIGNED, // 0xf3
  // False
  SIMPLE_FALSE, // 0xf4
  // True
  SIMPLE_TRUE, // 0xf5
  // Null
  SIMPLE_NULL, // 0xf6
  // Undefined
  SIMPLE_UNDEFINED, // 0xf7
  // (simple value, one byte follows)
  SIMPLE_BYTE, // 0xf8
  // Half-Precision Float (two-byte IEEE 754)
  SIMPLE_FLOAT_HALF, // 0xf9
  // Single-Precision Float (four-byte IEEE 754)
  SIMPLE_FLOAT_SINGLE, // 0xfa
  // Double-Precision Float (eight-byte IEEE 754)
  SIMPLE_FLOAT_DOUBLE, // 0xfb
  ERROR, // 0xfc
  ERROR, // 0xfd
  ERROR, // 0xfe
  // "break" stop code
  BREAK // 0xff
  ]; // --

  return {
    parse: parse
  };
};

/***/ }),
/* 549 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const {
  URLWithLegacySupport,
  format
} = __webpack_require__(253);

module.exports = (url, location = {}, protocolMap = {}, defaultProtocol) => {
  let protocol = location.protocol ? location.protocol.replace(':', '') : 'http'; // Check protocol map

  protocol = (protocolMap[protocol] || defaultProtocol || protocol) + ':';
  let urlParsed;

  try {
    urlParsed = new URLWithLegacySupport(url);
  } catch (err) {
    urlParsed = {};
  }

  const base = Object.assign({}, location, {
    protocol: protocol || urlParsed.protocol,
    host: location.host || urlParsed.host
  });
  return new URLWithLegacySupport(url, format(base)).toString();
};

/***/ }),
/* 550 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const {
  URL
} = __webpack_require__(252);

const Bignumber = __webpack_require__(36).BigNumber;

const utils = __webpack_require__(148);

const constants = __webpack_require__(104);

const MT = constants.MT;
const NUMBYTES = constants.NUMBYTES;
const SHIFT32 = constants.SHIFT32;
const SYMS = constants.SYMS;
const TAG = constants.TAG;
const HALF = constants.MT.SIMPLE_FLOAT << 5 | constants.NUMBYTES.TWO;
const FLOAT = constants.MT.SIMPLE_FLOAT << 5 | constants.NUMBYTES.FOUR;
const DOUBLE = constants.MT.SIMPLE_FLOAT << 5 | constants.NUMBYTES.EIGHT;
const TRUE = constants.MT.SIMPLE_FLOAT << 5 | constants.SIMPLE.TRUE;
const FALSE = constants.MT.SIMPLE_FLOAT << 5 | constants.SIMPLE.FALSE;
const UNDEFINED = constants.MT.SIMPLE_FLOAT << 5 | constants.SIMPLE.UNDEFINED;
const NULL = constants.MT.SIMPLE_FLOAT << 5 | constants.SIMPLE.NULL;
const MAXINT_BN = new Bignumber('0x20000000000000');
const BUF_NAN = Buffer.from('f97e00', 'hex');
const BUF_INF_NEG = Buffer.from('f9fc00', 'hex');
const BUF_INF_POS = Buffer.from('f97c00', 'hex');

function toType(obj) {
  // [object Type]
  // --------8---1
  return {}.toString.call(obj).slice(8, -1);
}
/**
 * Transform JavaScript values into CBOR bytes
 *
 */


class Encoder {
  /**
   * @param {Object} [options={}]
   * @param {function(Buffer)} options.stream
   */
  constructor(options) {
    options = options || {};
    this.streaming = typeof options.stream === 'function';
    this.onData = options.stream;
    this.semanticTypes = [[URL, this._pushUrl], [Bignumber, this._pushBigNumber]];
    const addTypes = options.genTypes || [];
    const len = addTypes.length;

    for (let i = 0; i < len; i++) {
      this.addSemanticType(addTypes[i][0], addTypes[i][1]);
    }

    this._reset();
  }

  addSemanticType(type, fun) {
    const len = this.semanticTypes.length;

    for (let i = 0; i < len; i++) {
      const typ = this.semanticTypes[i][0];

      if (typ === type) {
        const old = this.semanticTypes[i][1];
        this.semanticTypes[i][1] = fun;
        return old;
      }
    }

    this.semanticTypes.push([type, fun]);
    return null;
  }

  push(val) {
    if (!val) {
      return true;
    }

    this.result[this.offset] = val;
    this.resultMethod[this.offset] = 0;
    this.resultLength[this.offset] = val.length;
    this.offset++;

    if (this.streaming) {
      this.onData(this.finalize());
    }

    return true;
  }

  pushWrite(val, method, len) {
    this.result[this.offset] = val;
    this.resultMethod[this.offset] = method;
    this.resultLength[this.offset] = len;
    this.offset++;

    if (this.streaming) {
      this.onData(this.finalize());
    }

    return true;
  }

  _pushUInt8(val) {
    return this.pushWrite(val, 1, 1);
  }

  _pushUInt16BE(val) {
    return this.pushWrite(val, 2, 2);
  }

  _pushUInt32BE(val) {
    return this.pushWrite(val, 3, 4);
  }

  _pushDoubleBE(val) {
    return this.pushWrite(val, 4, 8);
  }

  _pushNaN() {
    return this.push(BUF_NAN);
  }

  _pushInfinity(obj) {
    const half = obj < 0 ? BUF_INF_NEG : BUF_INF_POS;
    return this.push(half);
  }

  _pushFloat(obj) {
    const b2 = Buffer.allocUnsafe(2);

    if (utils.writeHalf(b2, obj)) {
      if (utils.parseHalf(b2) === obj) {
        return this._pushUInt8(HALF) && this.push(b2);
      }
    }

    const b4 = Buffer.allocUnsafe(4);
    b4.writeFloatBE(obj, 0);

    if (b4.readFloatBE(0) === obj) {
      return this._pushUInt8(FLOAT) && this.push(b4);
    }

    return this._pushUInt8(DOUBLE) && this._pushDoubleBE(obj);
  }

  _pushInt(obj, mt, orig) {
    const m = mt << 5;

    if (obj < 24) {
      return this._pushUInt8(m | obj);
    }

    if (obj <= 0xff) {
      return this._pushUInt8(m | NUMBYTES.ONE) && this._pushUInt8(obj);
    }

    if (obj <= 0xffff) {
      return this._pushUInt8(m | NUMBYTES.TWO) && this._pushUInt16BE(obj);
    }

    if (obj <= 0xffffffff) {
      return this._pushUInt8(m | NUMBYTES.FOUR) && this._pushUInt32BE(obj);
    }

    if (obj <= Number.MAX_SAFE_INTEGER) {
      return this._pushUInt8(m | NUMBYTES.EIGHT) && this._pushUInt32BE(Math.floor(obj / SHIFT32)) && this._pushUInt32BE(obj % SHIFT32);
    }

    if (mt === MT.NEG_INT) {
      return this._pushFloat(orig);
    }

    return this._pushFloat(obj);
  }

  _pushIntNum(obj) {
    if (obj < 0) {
      return this._pushInt(-obj - 1, MT.NEG_INT, obj);
    } else {
      return this._pushInt(obj, MT.POS_INT);
    }
  }

  _pushNumber(obj) {
    switch (false) {
      case obj === obj:
        // eslint-disable-line
        return this._pushNaN(obj);

      case isFinite(obj):
        return this._pushInfinity(obj);

      case obj % 1 !== 0:
        return this._pushIntNum(obj);

      default:
        return this._pushFloat(obj);
    }
  }

  _pushString(obj) {
    const len = Buffer.byteLength(obj, 'utf8');
    return this._pushInt(len, MT.UTF8_STRING) && this.pushWrite(obj, 5, len);
  }

  _pushBoolean(obj) {
    return this._pushUInt8(obj ? TRUE : FALSE);
  }

  _pushUndefined(obj) {
    return this._pushUInt8(UNDEFINED);
  }

  _pushArray(gen, obj) {
    const len = obj.length;

    if (!gen._pushInt(len, MT.ARRAY)) {
      return false;
    }

    for (let j = 0; j < len; j++) {
      if (!gen.pushAny(obj[j])) {
        return false;
      }
    }

    return true;
  }

  _pushTag(tag) {
    return this._pushInt(tag, MT.TAG);
  }

  _pushDate(gen, obj) {
    // Round date, to get seconds since 1970-01-01 00:00:00 as defined in
    // Sec. 2.4.1 and get a possibly more compact encoding. Note that it is
    // still allowed to encode fractions of seconds which can be achieved by
    // changing overwriting the encode function for Date objects.
    return gen._pushTag(TAG.DATE_EPOCH) && gen.pushAny(Math.round(obj / 1000));
  }

  _pushBuffer(gen, obj) {
    return gen._pushInt(obj.length, MT.BYTE_STRING) && gen.push(obj);
  }

  _pushNoFilter(gen, obj) {
    return gen._pushBuffer(gen, obj.slice());
  }

  _pushRegexp(gen, obj) {
    return gen._pushTag(TAG.REGEXP) && gen.pushAny(obj.source);
  }

  _pushSet(gen, obj) {
    if (!gen._pushInt(obj.size, MT.ARRAY)) {
      return false;
    }

    for (let x of obj) {
      if (!gen.pushAny(x)) {
        return false;
      }
    }

    return true;
  }

  _pushUrl(gen, obj) {
    return gen._pushTag(TAG.URI) && gen.pushAny(obj.format());
  }

  _pushBigint(obj) {
    let tag = TAG.POS_BIGINT;

    if (obj.isNegative()) {
      obj = obj.negated().minus(1);
      tag = TAG.NEG_BIGINT;
    }

    let str = obj.toString(16);

    if (str.length % 2) {
      str = '0' + str;
    }

    const buf = Buffer.from(str, 'hex');
    return this._pushTag(tag) && this._pushBuffer(this, buf);
  }

  _pushBigNumber(gen, obj) {
    if (obj.isNaN()) {
      return gen._pushNaN();
    }

    if (!obj.isFinite()) {
      return gen._pushInfinity(obj.isNegative() ? -Infinity : Infinity);
    }

    if (obj.isInteger()) {
      return gen._pushBigint(obj);
    }

    if (!(gen._pushTag(TAG.DECIMAL_FRAC) && gen._pushInt(2, MT.ARRAY))) {
      return false;
    }

    const dec = obj.decimalPlaces();
    const slide = obj.multipliedBy(new Bignumber(10).pow(dec));

    if (!gen._pushIntNum(-dec)) {
      return false;
    }

    if (slide.abs().isLessThan(MAXINT_BN)) {
      return gen._pushIntNum(slide.toNumber());
    } else {
      return gen._pushBigint(slide);
    }
  }

  _pushMap(gen, obj) {
    if (!gen._pushInt(obj.size, MT.MAP)) {
      return false;
    }

    return this._pushRawMap(obj.size, Array.from(obj));
  }

  _pushObject(obj) {
    if (!obj) {
      return this._pushUInt8(NULL);
    }

    var len = this.semanticTypes.length;

    for (var i = 0; i < len; i++) {
      if (obj instanceof this.semanticTypes[i][0]) {
        return this.semanticTypes[i][1].call(obj, this, obj);
      }
    }

    var f = obj.encodeCBOR;

    if (typeof f === 'function') {
      return f.call(obj, this);
    }

    var keys = Object.keys(obj);
    var keyLength = keys.length;

    if (!this._pushInt(keyLength, MT.MAP)) {
      return false;
    }

    return this._pushRawMap(keyLength, keys.map(k => [k, obj[k]]));
  }

  _pushRawMap(len, map) {
    // Sort keys for canoncialization
    // 1. encode key
    // 2. shorter key comes before longer key
    // 3. same length keys are sorted with lower
    //    byte value before higher
    map = map.map(function (a) {
      a[0] = Encoder.encode(a[0]);
      return a;
    }).sort(utils.keySorter);

    for (var j = 0; j < len; j++) {
      if (!this.push(map[j][0])) {
        return false;
      }

      if (!this.pushAny(map[j][1])) {
        return false;
      }
    }

    return true;
  }
  /**
   * Alias for `.pushAny`
   *
   * @param {*} obj
   * @returns {boolean} true on success
   */


  write(obj) {
    return this.pushAny(obj);
  }
  /**
   * Push any supported type onto the encoded stream
   *
   * @param {any} obj
   * @returns {boolean} true on success
   */


  pushAny(obj) {
    var typ = toType(obj);

    switch (typ) {
      case 'Number':
        return this._pushNumber(obj);

      case 'String':
        return this._pushString(obj);

      case 'Boolean':
        return this._pushBoolean(obj);

      case 'Object':
        return this._pushObject(obj);

      case 'Array':
        return this._pushArray(this, obj);

      case 'Uint8Array':
        return this._pushBuffer(this, Buffer.isBuffer(obj) ? obj : Buffer.from(obj));

      case 'Null':
        return this._pushUInt8(NULL);

      case 'Undefined':
        return this._pushUndefined(obj);

      case 'Map':
        return this._pushMap(this, obj);

      case 'Set':
        return this._pushSet(this, obj);

      case 'URL':
        return this._pushUrl(this, obj);

      case 'BigNumber':
        return this._pushBigNumber(this, obj);

      case 'Date':
        return this._pushDate(this, obj);

      case 'RegExp':
        return this._pushRegexp(this, obj);

      case 'Symbol':
        switch (obj) {
          case SYMS.NULL:
            return this._pushObject(null);

          case SYMS.UNDEFINED:
            return this._pushUndefined(void 0);
          // TODO: Add pluggable support for other symbols

          default:
            throw new Error('Unknown symbol: ' + obj.toString());
        }

      default:
        throw new Error('Unknown type: ' + typeof obj + ', ' + (obj ? obj.toString() : ''));
    }
  }

  finalize() {
    if (this.offset === 0) {
      return null;
    }

    var result = this.result;
    var resultLength = this.resultLength;
    var resultMethod = this.resultMethod;
    var offset = this.offset; // Determine the size of the buffer

    var size = 0;
    var i = 0;

    for (; i < offset; i++) {
      size += resultLength[i];
    }

    var res = Buffer.allocUnsafe(size);
    var index = 0;
    var length = 0; // Write the content into the result buffer

    for (i = 0; i < offset; i++) {
      length = resultLength[i];

      switch (resultMethod[i]) {
        case 0:
          result[i].copy(res, index);
          break;

        case 1:
          res.writeUInt8(result[i], index, true);
          break;

        case 2:
          res.writeUInt16BE(result[i], index, true);
          break;

        case 3:
          res.writeUInt32BE(result[i], index, true);
          break;

        case 4:
          res.writeDoubleBE(result[i], index, true);
          break;

        case 5:
          res.write(result[i], index, length, 'utf8');
          break;

        default:
          throw new Error('unkown method');
      }

      index += length;
    }

    var tmp = res;

    this._reset();

    return tmp;
  }

  _reset() {
    this.result = [];
    this.resultMethod = [];
    this.resultLength = [];
    this.offset = 0;
  }
  /**
   * Encode the given value
   * @param {*} o
   * @returns {Buffer}
   */


  static encode(o) {
    const enc = new Encoder();
    const ret = enc.pushAny(o);

    if (!ret) {
      throw new Error('Failed to encode input');
    }

    return enc.finalize();
  }

}

module.exports = Encoder;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 551 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = Node;
/**
 * a linked-list node
 * @class
 * @param {any} value - node's value
 * @param {Node} next - next node
 */

function Node(value, next) {
  this.value = value;
  this.next = next;
}
/**
 * checks if this node or any of its children has the value
 * @param {any} value - value to check if linked-list contains
 * @return {boolean} true if the list contains the value; false if not
 */


Node.prototype.contains = function (value) {
  var cursor = this;

  while (cursor) {
    if (cursor.value === value) return true;
    cursor = cursor.next;
  }

  return false;
};

/***/ }),
/* 552 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const multihashes = __webpack_require__(16);

const CID = __webpack_require__(3);

const protobuf = __webpack_require__(24);

const fnv1a = __webpack_require__(553);

const varint = __webpack_require__(19);

const {
  DAGNode,
  DAGLink
} = __webpack_require__(12);

const multicodec = __webpack_require__(15);

const {
  default: Queue
} = __webpack_require__(50);

const dagCborLinks = __webpack_require__(247);

const log = __webpack_require__(1)('ipfs:pin:pin-set');

const pbSchema = __webpack_require__(554);

const emptyKeyHash = 'QmdfTbBqBPQ7VNxZEYEj14VmRuZBkqFbiwReogJgS1zR1n';
const emptyKey = multihashes.fromB58String(emptyKeyHash);
const defaultFanout = 256;
const maxItems = 8192;
const pb = protobuf(pbSchema);
const HAS_DESCENDANT_CONCURRENCY = 100;

function toB58String(hash) {
  return new CID(hash).toBaseEncodedString();
}

function readHeader(rootNode) {
  // rootNode.data should be a buffer of the format:
  // < varint(headerLength) | header | itemData... >
  const rootData = rootNode.Data;
  const hdrLength = varint.decode(rootData);
  const vBytes = varint.decode.bytes;

  if (vBytes <= 0) {
    throw new Error('Invalid Set header length');
  }

  if (vBytes + hdrLength > rootData.length) {
    throw new Error('Impossibly large set header length');
  }

  const hdrSlice = rootData.slice(vBytes, hdrLength + vBytes);
  const header = pb.Set.decode(hdrSlice);

  if (header.version !== 1) {
    throw new Error("Unsupported Set version: ".concat(header.version));
  }

  if (header.fanout > rootNode.Links.length) {
    throw new Error('Impossibly large fanout');
  }

  return {
    header: header,
    data: rootData.slice(hdrLength + vBytes)
  };
}

function hash(seed, key) {
  const buf = Buffer.alloc(4);
  buf.writeUInt32LE(seed, 0);
  const data = Buffer.concat([buf, Buffer.from(toB58String(key))]);
  return fnv1a(data.toString('binary'));
}

function* cborCids(node) {
  for (const [_, cid] of dagCborLinks(node)) {
    // eslint-disable-line no-unused-vars
    yield cid;
  }
}

exports = module.exports = function (dag) {
  const pinSet = {
    // should this be part of `object` API?
    hasDescendant: async (parentCid, childhash) => {
      if (parentCid.codec !== 'dag-pb' && parentCid.codec !== 'dag-cbor') {
        return false;
      }

      const {
        value: root
      } = await dag.get(parentCid, {
        preload: false
      });
      const queue = new Queue({
        concurrency: HAS_DESCENDANT_CONCURRENCY
      });

      if (CID.isCID(childhash) || Buffer.isBuffer(childhash)) {
        childhash = toB58String(childhash);
      }

      let found = false;
      const seen = {};

      function searchChild(linkCid) {
        return async () => {
          if (found) {
            return;
          }

          try {
            const {
              value: childNode
            } = await dag.get(linkCid, {
              preload: false
            });
            searchChildren(linkCid, childNode);
          } catch (err) {
            log(err);
          }
        };
      }

      function searchChildren(cid, node) {
        let links = [];

        if (cid.codec === 'dag-pb') {
          links = node.Links;
        } else if (cid.codec === 'dag-cbor') {
          links = cborCids(node);
        }

        for (const link of links) {
          const linkCid = cid.codec === 'dag-pb' ? link.Hash : link[1];
          const bs58Link = toB58String(linkCid);

          if (bs58Link === childhash) {
            queue.clear();
            found = true;
            return;
          }

          if (seen[bs58Link]) {
            continue;
          }

          seen[bs58Link] = true;

          if (linkCid.codec !== 'dag-pb' && linkCid.codec !== 'dag-cbor') {
            continue;
          }

          queue.add(searchChild(linkCid));
        }
      }

      searchChildren(parentCid, root);
      await queue.onIdle();
      return found;
    },
    storeSet: async keys => {
      const pins = keys.map(key => {
        if (typeof key === 'string' || Buffer.isBuffer(key)) {
          key = new CID(key);
        }

        return {
          key: key,
          data: null
        };
      });
      const rootNode = await pinSet.storeItems(pins);
      const cid = await dag.put(rootNode, {
        version: 0,
        format: multicodec.DAG_PB,
        hashAlg: multicodec.SHA2_256,
        preload: false
      });
      return {
        node: rootNode,
        cid
      };
    },
    storeItems: async items => {
      // eslint-disable-line require-await
      return storePins(items, 0);

      async function storePins(pins, depth) {
        const pbHeader = pb.Set.encode({
          version: 1,
          fanout: defaultFanout,
          seed: depth
        });
        const headerBuf = Buffer.concat([Buffer.from(varint.encode(pbHeader.length)), pbHeader]);
        const fanoutLinks = [];

        for (let i = 0; i < defaultFanout; i++) {
          fanoutLinks.push(new DAGLink('', 1, emptyKey));
        }

        if (pins.length <= maxItems) {
          const nodes = pins.map(item => {
            return {
              link: new DAGLink('', 1, item.key),
              data: item.data || Buffer.alloc(0)
            };
          }) // sorting makes any ordering of `pins` produce the same DAGNode
          .sort((a, b) => Buffer.compare(a.link.Hash.buffer, b.link.Hash.buffer));
          const rootLinks = fanoutLinks.concat(nodes.map(item => item.link));
          const rootData = Buffer.concat([headerBuf].concat(nodes.map(item => item.data)));
          return new DAGNode(rootData, rootLinks);
        } else {
          // If the array of pins is > maxItems, we:
          //  - distribute the pins among `defaultFanout` bins
          //    - create a DAGNode for each bin
          //      - add each pin as a DAGLink to that bin
          //  - create a root DAGNode
          //    - add each bin as a DAGLink
          //  - send that root DAGNode via callback
          // (using go-ipfs' "wasteful but simple" approach for consistency)
          // https://github.com/ipfs/go-ipfs/blob/master/pin/set.go#L57
          const bins = pins.reduce((bins, pin) => {
            const n = hash(depth, pin.key) % defaultFanout;
            bins[n] = n in bins ? bins[n].concat([pin]) : [pin];
            return bins;
          }, []);
          let idx = 0;

          for (const bin of bins) {
            const child = await storePins(bin, depth + 1);
            await storeChild(child, idx);
            idx++;
          }

          return new DAGNode(headerBuf, fanoutLinks);
        }

        async function storeChild(child, binIdx) {
          const opts = {
            version: 0,
            format: multicodec.DAG_PB,
            hashAlg: multicodec.SHA2_256,
            preload: false
          };
          const cid = await dag.put(child, opts);
          fanoutLinks[binIdx] = new DAGLink('', child.size, cid);
        }
      }
    },
    loadSet: async (rootNode, name) => {
      const link = rootNode.Links.find(l => l.Name === name);

      if (!link) {
        throw new Error('No link found with name ' + name);
      }

      const res = await dag.get(link.Hash, '', {
        preload: false
      });
      const keys = [];

      const stepPin = link => keys.push(link.Hash);

      await pinSet.walkItems(res.value, {
        stepPin
      });
      return keys;
    },
    walkItems: async (node, {
      stepPin = () => {},
      stepBin = () => {}
    }) => {
      const pbh = readHeader(node);
      let idx = 0;

      for (const link of node.Links) {
        if (idx < pbh.header.fanout) {
          // the first pbh.header.fanout links are fanout bins
          // if a fanout bin is not 'empty', dig into and walk its DAGLinks
          const linkHash = link.Hash.buffer;

          if (!emptyKey.equals(linkHash)) {
            stepBin(link, idx, pbh.data); // walk the links of this fanout bin

            const res = await dag.get(linkHash, '', {
              preload: false
            });
            await pinSet.walkItems(res.value, {
              stepPin,
              stepBin
            });
          }
        } else {
          // otherwise, the link is a pin
          stepPin(link, idx, pbh.data);
        }

        idx++;
      }
    },
    getInternalCids: async rootNode => {
      // "Empty block" used by the pinner
      const cids = [new CID(emptyKey)];

      const stepBin = link => cids.push(link.Hash);

      for (const topLevelLink of rootNode.Links) {
        cids.push(topLevelLink.Hash);
        const res = await dag.get(topLevelLink.Hash, '', {
          preload: false
        });
        await pinSet.walkItems(res.value, {
          stepBin
        });
      }

      return cids;
    }
  };
  return pinSet;
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 553 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Created by schwarzkopfb on 15/11/17.
 */

/**
 * FNV-1a hash generation init value.
 * It's exposed, because this allows user to override it.
 *
 * @type {number}
 */
hash.BASE = 0x811c9dc5;
/**
 * Generates 32 bit FNV-1a hash from the given string.
 * As explained here: http://isthe.com/chongo/tech/comp/fnv/
 *
 * @param s {string} String to generate hash from.
 * @returns {number} The result integer hash.
 */

function hash(s) {
  var h = hash.BASE;

  for (var i = 0, l = s.length; i < l; i++) {
    h ^= s.charCodeAt(i);
    h += (h << 1) + (h << 4) + (h << 7) + (h << 8) + (h << 24);
  }

  return h >>> 0;
}

module.exports = hash;

/***/ }),
/* 554 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Protobuf interface
 * from go-ipfs/pin/internal/pb/header.proto
 */

module.exports = "\n  syntax = \"proto2\";\n\n  package ipfs.pin;\n\n  option go_package = \"pb\";\n\n  message Set {\n    optional uint32 version = 1;\n    optional uint32 fanout = 2;\n    optional fixed32 seed = 3;\n  }\n";

/***/ }),
/* 555 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const {
  cleanCid
} = __webpack_require__(147);

module.exports = ({
  blockService,
  preload
}) => {
  return async function stat(cid, options) {
    options = options || {};
    cid = cleanCid(cid);

    if (options.preload !== false) {
      preload(cid);
    }

    const block = await blockService.get(cid);
    return {
      cid,
      size: block.data.length
    };
  };
};

/***/ }),
/* 556 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const Big = __webpack_require__(36);

const CID = __webpack_require__(3);

module.exports = ({
  bitswap
}) => {
  return async function stat() {
    // eslint-disable-line require-await
    const snapshot = bitswap.stat().snapshot;
    return {
      provideBufLen: parseInt(snapshot.providesBufferLength.toString()),
      blocksReceived: new Big(snapshot.blocksReceived),
      wantlist: Array.from(bitswap.getWantlist()).map(e => e[1].cid),
      peers: bitswap.peers().map(id => new CID(id.toB58String())),
      dupBlksReceived: new Big(snapshot.dupBlksReceived),
      dupDataReceived: new Big(snapshot.dupDataReceived),
      dataReceived: new Big(snapshot.dataReceived),
      blocksSent: new Big(snapshot.blocksSent),
      dataSent: new Big(snapshot.dataSent)
    };
  };
};

/***/ }),
/* 557 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const CID = __webpack_require__(3);

const errCode = __webpack_require__(2);

module.exports = ({
  bitswap
}) => {
  return async function unwant(keys) {
    // eslint-disable-line require-await
    if (!Array.isArray(keys)) {
      keys = [keys];
    }

    try {
      keys = keys.map(key => new CID(key));
    } catch (err) {
      throw errCode(err, 'ERR_INVALID_CID');
    }

    return bitswap.unwant(keys);
  };
};

/***/ }),
/* 558 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const PeerId = __webpack_require__(9);

module.exports = ({
  bitswap
}) => {
  return async function wantlist(peerId) {
    // eslint-disable-line require-await
    const list = peerId ? bitswap.wantlistForPeer(PeerId.createFromCID(peerId)) : bitswap.getWantlist();
    return Array.from(list).map(e => e[1].cid);
  };
};

/***/ }),
/* 559 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const defaultConfig = __webpack_require__(149);

const {
  isValidMultiaddr
} = __webpack_require__(255);

module.exports = ({
  repo
}) => {
  return async function add(multiaddr, options) {
    options = options || {};

    if (multiaddr && !isValidMultiaddr(multiaddr)) {
      throw new Error("".concat(multiaddr, " is not a valid Multiaddr"));
    }

    const config = await repo.config.get();

    if (options.default) {
      config.Bootstrap = defaultConfig().Bootstrap;
    } else if (multiaddr && config.Bootstrap.indexOf(multiaddr) === -1) {
      config.Bootstrap.push(multiaddr);
    }

    await repo.config.set(config);
    return {
      Peers: options.default ? defaultConfig().Bootstrap : [multiaddr]
    };
  };
};

/***/ }),
/* 560 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = ({
  repo
}) => {
  return async function list() {
    const config = await repo.config.get();
    return {
      Peers: config.Bootstrap || []
    };
  };
};

/***/ }),
/* 561 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const {
  isValidMultiaddr
} = __webpack_require__(255);

module.exports = ({
  repo
}) => {
  return async function rm(multiaddr, options) {
    options = options || {};

    if (multiaddr && !isValidMultiaddr(multiaddr)) {
      throw new Error("".concat(multiaddr, " is not a valid Multiaddr"));
    }

    let res = [];
    const config = await repo.config.get();

    if (options.all) {
      res = config.Bootstrap || [];
      config.Bootstrap = [];
    } else {
      config.Bootstrap = (config.Bootstrap || []).filter(ma => ma !== multiaddr);
    }

    await repo.config.set(config);

    if (!options.all && multiaddr) {
      res.push(multiaddr);
    }

    return {
      Peers: res
    };
  };
};

/***/ }),
/* 562 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

function _asyncGeneratorDelegate(inner, awaitWrap) { var iter = {}, waiting = false; function pump(key, value) { waiting = true; value = new Promise(function (resolve) { resolve(inner[key](value)); }); return { done: false, value: awaitWrap(value) }; } ; if (typeof Symbol === "function" && Symbol.iterator) { iter[Symbol.iterator] = function () { return this; }; } iter.next = function (value) { if (waiting) { waiting = false; return value; } return pump("next", value); }; if (typeof inner.throw === "function") { iter.throw = function (value) { if (waiting) { waiting = false; throw value; } return pump("throw", value); }; } if (typeof inner.return === "function") { iter.return = function (value) { if (waiting) { waiting = false; return value; } return pump("return", value); }; } return iter; }

const exporter = __webpack_require__(33);

const {
  normalizeCidPath
} = __webpack_require__(29);

module.exports = function ({
  ipld,
  preload
}) {
  return (
    /*#__PURE__*/
    function () {
      var _cat = _wrapAsyncGenerator(function* (ipfsPath, options) {
        options = options || {};
        ipfsPath = normalizeCidPath(ipfsPath);

        if (options.preload !== false) {
          const pathComponents = ipfsPath.split('/');
          preload(pathComponents[0]);
        }

        const file = yield _awaitAsyncGenerator(exporter(ipfsPath, ipld, options)); // File may not have unixfs prop if small & imported with rawLeaves true

        if (file.unixfs && file.unixfs.type.includes('dir')) {
          throw new Error('this dag node is a directory');
        }

        if (!file.content) {
          throw new Error('this dag node has no content');
        }

        yield* _asyncGeneratorDelegate(_asyncIterator(file.content(options)), _awaitAsyncGenerator);
      });

      function cat(_x, _x2) {
        return _cat.apply(this, arguments);
      }

      return cat;
    }()
  );
};

/***/ }),
/* 563 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const errCode = __webpack_require__(2);

const resolvers = {
  'dag-pb': __webpack_require__(564),
  raw: __webpack_require__(568),
  'dag-cbor': __webpack_require__(569),
  identity: __webpack_require__(570)
};

const resolve = (cid, name, path, toResolve, depth, ipld) => {
  const resolver = resolvers[cid.codec];

  if (!resolver) {
    throw errCode(new Error("No resolver for codec ".concat(cid.codec)), 'ERR_NO_RESOLVER');
  }

  return resolver(cid, name, path, toResolve, resolve, depth, ipld);
};

module.exports = resolve;

/***/ }),
/* 564 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const errCode = __webpack_require__(2);

const UnixFS = __webpack_require__(25);

const findShardCid = __webpack_require__(565);

const findLinkCid = (node, name) => {
  const link = node.Links.find(link => link.Name === name);
  return link && link.Hash;
};

const contentExporters = {
  raw: __webpack_require__(256),
  file: __webpack_require__(256),
  directory: __webpack_require__(566),
  'hamt-sharded-directory': __webpack_require__(567),
  metadata: (cid, node, unixfs, path, resolve, depth, ipld) => {},
  symlink: (cid, node, unixfs, path, resolve, depth, ipld) => {}
};

const unixFsResolver = async (cid, name, path, toResolve, resolve, depth, ipld) => {
  const node = await ipld.get(cid);
  let unixfs;
  let next;

  if (!name) {
    name = cid.toBaseEncodedString();
  }

  try {
    unixfs = UnixFS.unmarshal(node.Data);
  } catch (err) {
    // non-UnixFS dag-pb node? It could happen.
    throw errCode(err, 'ERR_NOT_UNIXFS');
  }

  if (!path) {
    path = name;
  }

  if (toResolve.length) {
    let linkCid;

    if (unixfs && unixfs.type === 'hamt-sharded-directory') {
      // special case - unixfs v1 hamt shards
      linkCid = await findShardCid(node, toResolve[0], ipld);
    } else {
      linkCid = findLinkCid(node, toResolve[0]);
    }

    if (!linkCid) {
      throw errCode(new Error('file does not exist'), 'ERR_NOT_FOUND');
    } // remove the path component we have resolved


    const nextName = toResolve.shift();
    const nextPath = "".concat(path, "/").concat(nextName);
    next = {
      cid: linkCid,
      toResolve,
      name: nextName,
      path: nextPath
    };
  }

  return {
    entry: {
      name,
      path,
      cid,
      node,
      content: contentExporters[unixfs.type](cid, node, unixfs, path, resolve, depth, ipld),
      unixfs,
      depth
    },
    next
  };
};

module.exports = unixFsResolver;

/***/ }),
/* 565 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const Bucket = __webpack_require__(146);

const multihashing = __webpack_require__(22); // FIXME: this is copy/pasted from ipfs-unixfs-importer/src/dir-sharded.js


const hashFn = async function hashFn(value) {
  const hash = await multihashing(Buffer.from(value, 'utf8'), 'murmur3-128'); // Multihashing inserts preamble of 2 bytes. Remove it.
  // Also, murmur3 outputs 128 bit but, accidently, IPFS Go's
  // implementation only uses the first 64, so we must do the same
  // for parity..

  const justHash = hash.slice(2, 10);
  const length = justHash.length;
  const result = Buffer.alloc(length); // TODO: invert buffer because that's how Go impl does it

  for (let i = 0; i < length; i++) {
    result[length - i - 1] = justHash[i];
  }

  return result;
};

hashFn.code = 0x22; // TODO: get this from multihashing-async?

const addLinksToHamtBucket = (links, bucket, rootBucket) => {
  return Promise.all(links.map(link => {
    if (link.Name.length === 2) {
      const pos = parseInt(link.Name, 16);
      return bucket._putObjectAt(pos, new Bucket({
        hashFn
      }, bucket, pos));
    }

    return rootBucket.put(link.Name.substring(2), true);
  }));
};

const toPrefix = position => {
  return position.toString('16').toUpperCase().padStart(2, '0').substring(0, 2);
};

const toBucketPath = position => {
  let bucket = position.bucket;
  const path = [];

  while (bucket._parent) {
    path.push(bucket);
    bucket = bucket._parent;
  }

  path.push(bucket);
  return path.reverse();
};

const findShardCid = async (node, name, ipld, context) => {
  if (!context) {
    context = {
      rootBucket: new Bucket({
        hashFn
      }),
      hamtDepth: 1
    };
    context.lastBucket = context.rootBucket;
  }

  await addLinksToHamtBucket(node.Links, context.lastBucket, context.rootBucket);
  const position = await context.rootBucket._findNewBucketAndPos(name);
  let prefix = toPrefix(position.pos);
  const bucketPath = toBucketPath(position);

  if (bucketPath.length > context.hamtDepth) {
    context.lastBucket = bucketPath[context.hamtDepth];
    prefix = toPrefix(context.lastBucket._posAtParent);
  }

  const link = node.Links.find(link => {
    const entryPrefix = link.Name.substring(0, 2);
    const entryName = link.Name.substring(2);

    if (entryPrefix !== prefix) {
      // not the entry or subshard we're looking for
      return;
    }

    if (entryName && entryName !== name) {
      // not the entry we're looking for
      return;
    }

    return true;
  });

  if (!link) {
    return null;
  }

  if (link.Name.substring(2) === name) {
    return link.Hash;
  }

  context.hamtDepth++;
  node = await ipld.get(link.Hash);
  return findShardCid(node, name, ipld, context);
};

module.exports = findShardCid;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 566 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

const directoryContent = (cid, node, unixfs, path, resolve, depth, ipld) => {
  return (
    /*#__PURE__*/
    function () {
      var _ref = _wrapAsyncGenerator(function* (options = {}) {
        const offset = options.offset || 0;
        const length = options.length || node.Links.length;
        const links = node.Links.slice(offset, length);

        for (const link of links) {
          const result = yield _awaitAsyncGenerator(resolve(link.Hash, link.Name, "".concat(path, "/").concat(link.Name), [], depth + 1, ipld));
          yield result.entry;
        }
      });

      return function () {
        return _ref.apply(this, arguments);
      };
    }()
  );
};

module.exports = directoryContent;

/***/ }),
/* 567 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const hamtShardedDirectoryContent = (cid, node, unixfs, path, resolve, depth, ipld) => {
  return (options = {}) => {
    return listDirectory(node, path, resolve, depth, ipld, options);
  };
};

function listDirectory(_x, _x2, _x3, _x4, _x5, _x6) {
  return _listDirectory.apply(this, arguments);
}

function _listDirectory() {
  _listDirectory = _wrapAsyncGenerator(function* (node, path, resolve, depth, ipld, options) {
    const links = node.Links;

    for (const link of links) {
      const name = link.Name.substring(2);

      if (name) {
        const result = yield _awaitAsyncGenerator(resolve(link.Hash, name, "".concat(path, "/").concat(name), [], depth + 1, ipld));
        yield result.entry;
      } else {
        // descend into subshard
        node = yield _awaitAsyncGenerator(ipld.get(link.Hash));
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;

        var _iteratorError;

        try {
          for (var _iterator = _asyncIterator(listDirectory(node, path, resolve, depth, ipld, options)), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
            const file = _value;
            yield file;
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              yield _awaitAsyncGenerator(_iterator.return());
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }
    }
  });
  return _listDirectory.apply(this, arguments);
}

module.exports = hamtShardedDirectoryContent;

/***/ }),
/* 568 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const errCode = __webpack_require__(2);

const extractDataFromBlock = __webpack_require__(150);

const validateOffsetAndLength = __webpack_require__(151);

const rawContent = node => {
  return function* (options = {}) {
    const {
      offset,
      length
    } = validateOffsetAndLength(node.length, options.offset, options.length);
    yield extractDataFromBlock(node, 0, offset, offset + length);
  };
};

const resolve = async (cid, name, path, toResolve, resolve, depth, ipld) => {
  if (toResolve.length) {
    throw errCode(new Error("No link named ".concat(path, " found in raw node ").concat(cid.toBaseEncodedString())), 'ERR_NOT_FOUND');
  }

  const buf = await ipld.get(cid);
  return {
    entry: {
      name,
      path,
      cid,
      node: buf,
      content: rawContent(buf),
      depth
    }
  };
};

module.exports = resolve;

/***/ }),
/* 569 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const CID = __webpack_require__(3);

const errCode = __webpack_require__(2);

const resolve = async (cid, name, path, toResolve, resolve, depth, ipld) => {
  const node = await ipld.get(cid);
  let subObject = node;
  let subPath = path;

  while (toResolve.length) {
    const prop = toResolve[0];

    if (prop in subObject) {
      // remove the bit of the path we have resolved
      toResolve.shift();
      subPath = "".concat(subPath, "/").concat(prop);

      if (CID.isCID(subObject[prop])) {
        return {
          entry: {
            name,
            path,
            cid,
            node,
            depth
          },
          next: {
            cid: subObject[prop],
            name: prop,
            path: subPath,
            toResolve
          }
        };
      }

      subObject = subObject[prop];
    } else {
      // cannot resolve further
      throw errCode(new Error("No property named ".concat(prop, " found in cbor node ").concat(cid.toBaseEncodedString())), 'ERR_NO_PROP');
    }
  }

  return {
    entry: {
      name,
      path,
      cid,
      node,
      depth
    }
  };
};

module.exports = resolve;

/***/ }),
/* 570 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const errCode = __webpack_require__(2);

const extractDataFromBlock = __webpack_require__(150);

const validateOffsetAndLength = __webpack_require__(151);

const mh = __webpack_require__(22).multihash;

const rawContent = node => {
  return function* (options = {}) {
    const {
      offset,
      length
    } = validateOffsetAndLength(node.length, options.offset, options.length);
    yield extractDataFromBlock(node, 0, offset, offset + length);
  };
};

const resolve = async (cid, name, path, toResolve, resolve, depth, ipld) => {
  if (toResolve.length) {
    throw errCode(new Error("No link named ".concat(path, " found in raw node ").concat(cid.toBaseEncodedString())), 'ERR_NOT_FOUND');
  }

  const buf = await mh.decode(cid.multihash);
  return {
    entry: {
      name,
      path,
      cid,
      node: buf,
      content: rawContent(buf.digest),
      depth
    }
  };
};

module.exports = resolve;

/***/ }),
/* 571 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function getTime() {
  return Date.now();
};

/***/ }),
/* 572 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const {
  parseArgs
} = __webpack_require__(155);

module.exports = ({
  ipld,
  preload
}) => {
  return async function get(cid, path, options) {
    [cid, path, options] = parseArgs(cid, path, options);

    if (options.preload !== false) {
      preload(cid);
    }

    if (path == null || path === '/') {
      const value = await ipld.get(cid);
      return {
        value,
        remainderPath: ''
      };
    } else {
      let result;
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;

      var _iteratorError;

      try {
        for (var _iterator = _asyncIterator(ipld.resolve(cid, path)), _step, _value; _step = await _iterator.next(), _iteratorNormalCompletion = _step.done, _value = await _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
          const entry = _value;

          if (options.localResolve) {
            return entry;
          }

          result = entry;
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            await _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return result;
    }
  };
};

/***/ }),
/* 573 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const multicodec = __webpack_require__(15);

const nameToCodec = name => multicodec[name.toUpperCase().replace(/-/g, '_')];

module.exports = ({
  ipld,
  pin,
  gcLock,
  preload
}) => {
  return async function put(dagNode, options) {
    options = options || {};

    if (options.cid && (options.format || options.hashAlg)) {
      throw new Error('Can\'t put dag node. Please provide either `cid` OR `format` and `hashAlg` options.');
    } else if (options.format && !options.hashAlg || !options.format && options.hashAlg) {
      throw new Error('Can\'t put dag node. Please provide `format` AND `hashAlg` options.');
    }

    const optionDefaults = {
      format: multicodec.DAG_CBOR,
      hashAlg: multicodec.SHA2_256
    }; // The IPLD expects the format and hashAlg as constants

    if (options.format && typeof options.format === 'string') {
      options.format = nameToCodec(options.format);
    }

    if (options.hashAlg && typeof options.hashAlg === 'string') {
      options.hashAlg = nameToCodec(options.hashAlg);
    }

    options = options.cid ? options : Object.assign({}, optionDefaults, options); // js-ipld defaults to verion 1 CIDs. Hence set version 0 explicitly for
    // dag-pb nodes

    if (options.version === undefined) {
      if (options.format === multicodec.DAG_PB && options.hashAlg === multicodec.SHA2_256) {
        options.version = 0;
      } else {
        options.version = 1;
      }
    }

    let release;

    if (options.pin) {
      release = await gcLock.readLock();
    }

    try {
      const cid = await ipld.put(dagNode, options.format, {
        hashAlg: options.hashAlg,
        cidVersion: options.version
      });

      if (options.pin) {
        await pin.add(cid, {
          lock: false
        });
      }

      if (options.preload !== false) {
        preload(cid);
      }

      return cid;
    } finally {
      if (release) {
        release();
      }
    }
  };
};

/***/ }),
/* 574 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

function _asyncGeneratorDelegate(inner, awaitWrap) { var iter = {}, waiting = false; function pump(key, value) { waiting = true; value = new Promise(function (resolve) { resolve(inner[key](value)); }); return { done: false, value: awaitWrap(value) }; } ; if (typeof Symbol === "function" && Symbol.iterator) { iter[Symbol.iterator] = function () { return this; }; } iter.next = function (value) { if (waiting) { waiting = false; return value; } return pump("next", value); }; if (typeof inner.throw === "function") { iter.throw = function (value) { if (waiting) { waiting = false; throw value; } return pump("throw", value); }; } if (typeof inner.return === "function") { iter.return = function (value) { if (waiting) { waiting = false; return value; } return pump("return", value); }; } return iter; }

const {
  parseArgs
} = __webpack_require__(155);

module.exports = ({
  ipld,
  preload
}) => {
  return (
    /*#__PURE__*/
    function () {
      var _resolve = _wrapAsyncGenerator(function* (cid, path, options) {
        // eslint-disable-line require-await
        [cid, path, options] = parseArgs(cid, path, options);

        if (options.preload !== false) {
          preload(cid);
        }

        yield* _asyncGeneratorDelegate(_asyncIterator(ipld.resolve(cid, path, {
          signal: options.signal
        })), _awaitAsyncGenerator);
      });

      function resolve(_x, _x2, _x3) {
        return _resolve.apply(this, arguments);
      }

      return resolve;
    }()
  );
};

/***/ }),
/* 575 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

function _asyncGeneratorDelegate(inner, awaitWrap) { var iter = {}, waiting = false; function pump(key, value) { waiting = true; value = new Promise(function (resolve) { resolve(inner[key](value)); }); return { done: false, value: awaitWrap(value) }; } ; if (typeof Symbol === "function" && Symbol.iterator) { iter[Symbol.iterator] = function () { return this; }; } iter.next = function (value) { if (waiting) { waiting = false; return value; } return pump("next", value); }; if (typeof inner.throw === "function") { iter.throw = function (value) { if (waiting) { waiting = false; throw value; } return pump("throw", value); }; } if (typeof inner.return === "function") { iter.return = function (value) { if (waiting) { waiting = false; return value; } return pump("return", value); }; } return iter; }

const {
  parseArgs
} = __webpack_require__(155);

module.exports = ({
  ipld,
  preload
}) => {
  return (
    /*#__PURE__*/
    function () {
      var _tree = _wrapAsyncGenerator(function* (cid, path, options) {
        // eslint-disable-line require-await
        [cid, path, options] = parseArgs(cid, path, options);

        if (options.preload !== false) {
          preload(cid);
        }

        yield* _asyncGeneratorDelegate(_asyncIterator(ipld.tree(cid, path, options)), _awaitAsyncGenerator);
      });

      function tree(_x, _x2, _x3) {
        return _tree.apply(this, arguments);
      }

      return tree;
    }()
  );
};

/***/ }),
/* 576 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // dns-nodejs gets replaced by dns-browser when webpacked/browserified

const dns = __webpack_require__(577);

function fqdnFixups(domain) {
  // Allow resolution of .eth names via .eth.link
  // More context at the go-ipfs counterpart: https://github.com/ipfs/go-ipfs/pull/6448
  if (domain.endsWith('.eth')) {
    domain = domain.replace(/.eth$/, '.eth.link');
  }

  return domain;
}

module.exports = () => {
  return async (domain, opts) => {
    // eslint-disable-line require-await
    opts = opts || {};

    if (typeof domain !== 'string') {
      throw new Error('Invalid arguments, domain must be a string');
    }

    domain = fqdnFixups(domain);
    return dns(domain, opts);
  };
};

/***/ }),
/* 577 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-env browser */


const TLRU = __webpack_require__(259);

const {
  default: PQueue
} = __webpack_require__(50);

const {
  default: ky
} = __webpack_require__(122); // Avoid sending multiple queries for the same hostname by caching results


const cache = new TLRU(1000); // TODO: /api/v0/dns does not return TTL yet: https://github.com/ipfs/go-ipfs/issues/5884
// However we know browsers themselves cache DNS records for at least 1 minute,
// which acts a provisional default ttl: https://stackoverflow.com/a/36917902/11518426

const ttl = 60 * 1000; // browsers limit concurrent connections per host,
// we don't want preload calls to exhaust the limit (~6)

const httpQueue = new PQueue({
  concurrency: 4
}); // Delegated HTTP resolver sending DNSLink queries to ipfs.io
// TODO: replace hardcoded host with configurable DNS over HTTPS: https://github.com/ipfs/js-ipfs/issues/2212

const api = ky.create({
  prefixUrl: 'https://ipfs.io/api/v0/',
  hooks: {
    afterResponse: [async (input, options, response) => {
      const query = new URL(response.url).search.slice(1);
      const json = await response.json();
      cache.set(query, json, ttl);
    }]
  }
});

const ipfsPath = response => {
  if (response.Path) return response.Path;
  throw new Error(response.Message);
};

module.exports = async (fqdn, opts) => {
  // eslint-disable-line require-await
  const resolveDnslink = async (fqdn, opts) => {
    opts = opts || {};
    const searchParams = new URLSearchParams(opts);
    searchParams.set('arg', fqdn); // try cache first

    const query = searchParams.toString();

    if (!opts.nocache && cache.has(query)) {
      const response = cache.get(query);
      return ipfsPath(response);
    } // fallback to delegated DNS resolver


    const response = await httpQueue.add(() => api.get('dns', {
      searchParams
    }).json());
    return ipfsPath(response);
  };

  return resolveDnslink(fqdn, opts);
};

/***/ }),
/* 578 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const mfs = __webpack_require__(579);

const isIpfs = __webpack_require__(55);

module.exports = ({
  ipld,
  blockService,
  repo,
  preload,
  options: constructorOptions
}) => {
  const methods = mfs({
    ipld,
    blocks: blockService,
    datastore: repo.root,
    repoOwner: constructorOptions.repoOwner
  });

  const withPreload = fn => (...args) => {
    const paths = args.filter(arg => isIpfs.ipfsPath(arg) || isIpfs.cid(arg));

    if (paths.length) {
      const options = args[args.length - 1];

      if (options && options.preload !== false) {
        paths.forEach(path => preload(path));
      }
    }

    return fn(...args);
  };

  return _objectSpread({}, methods, {
    /**
     * Change file mode
     *
     * @param {String} path - The path of the source to modify.
     * @param {Object} mode - The mode to set the path
     * @param {Object} [opts] - Options for modification.
     * @param {boolean} [opts.recursive=false] - Whether to change modes recursively. (default: false)
     * @param {boolean} [opts.flush=true] - Whether or not to immediately flush MFS changes to disk (default: true).
     * @param {number} [opts.shardSplitThreshold] - If the modified path has more than this many links it will be turned into a HAMT shard
     * @returns {Promise<string>}
     */
    chmod: methods.chmod,

    /**
     * Copy files
     *
     * @param {String | Array<String>} from - The path(s) of the source to copy.
     * @param {String} to - The path of the destination to copy to.
     * @param {Object} [opts] - Options for copy.
     * @param {boolean} [opts.parents=false] - Whether or not to make the parent directories if they don't exist. (default: false)
     * @param {String} [opts.format=dag-pb] - Format of nodes to write any newly created directories as. (default: dag-pb)
     * @param {String} [opts.hashAlg=sha2-256] - Algorithm to use when creating CIDs for newly created directories. (default: sha2-256) {@link https://github.com/multiformats/js-multihash/blob/master/src/constants.js#L5-L343 The list of all possible values}
     * @param {boolean} [opts.flush=true] - Whether or not to immediately flush MFS changes to disk (default: true).
     * @returns {Promise<string>}
     */
    cp: withPreload(methods.cp),

    /**
     * Make a directory
     *
     * @param {String} path - The path to the directory to make.
     * @param {Object} [opts] - Options for mkdir.
     * @param {boolean} [opts.parents=false] - Value to decide whether or not to make the parent directories if they don't exist. (default: false)
     * @param {String} [opts.format=dag-pb] - Format of nodes to write any newly created directories as. (default: dag-pb).
     * @param {String} [opts.hashAlg] - Algorithm to use when creating CIDs for newly created directories. (default: sha2-256) {@link https://github.com/multiformats/js-multihash/blob/master/src/constants.js#L5-L343 The list of all possible values}
     * @param {boolean} [opts.flush=true] - Whether or not to immediately flush MFS changes to disk (default: true).
     * @returns {Promise<void>}
     */
    mkdir: methods.mkdir,

    /**
     * @typedef {Object} StatOutput
     * @prop {String} hash - Output hash.
     * @prop {number} size - File size in bytes.
     * @prop {number} cumulativeSize - Integer with the size of the DAGNodes making up the file in Bytes.
     * @prop {string} type - Output type either 'directory' or 'file'.
     * @prop {number} blocks - If type is directory, this is the number of files in the directory. If it is file it is the number of blocks that make up the file.
     * @prop {boolean} withLocality - Indicate if locality information is present.
     * @prop {boolean} local - Indicate if the queried dag is fully present locally.
     * @prop {number} sizeLocal - Integer indicating the cumulative size of the data present locally.
     */

    /**
     * Get file or directory status.
     *
     * @param {String} path - Path to the file or directory to stat.
     * @param {Object} [opts] - Options for stat.
     * @param {boolean} [opts.hash=false] - Return only the hash. (default: false)
     * @param {boolean} [opts.size=false] - Return only the size. (default: false)
     * @param {boolean} [opts.withLocal=false] - Compute the amount of the dag that is local, and if possible the total size. (default: false)
     * @returns {Promise<StatOutput>}
     */
    stat: withPreload(methods.stat),

    /**
     * Remove a file or directory.
     *
     * @param {String | Array<String>} paths - One or more paths to remove.
     * @param {Object} [opts] - Options for remove.
     * @param {boolean} [opts.recursive=false] - Whether or not to remove directories recursively. (default: false)
     * @returns {Promise<void>}
     */
    rm: methods.rm,

    /**
     * @typedef {Object} ReadOptions
     * @prop {number} [opts.offset=0] - Integer with the byte offset to begin reading from (default: 0).
     * @prop {number} [opts.length] - Integer with the maximum number of bytes to read (default: Read to the end of stream).
     */

    /**
     * Read a file into a Buffer.
     *
     * @param {string} path - Path of the file to read and must point to a file (and not a directory).
     * @param {ReadOptions} [opts] - Object for read.
     * @returns {AsyncIterable<Buffer>}
     */
    read: withPreload(methods.read),

    /**
     * Update modification time
     *
     * @param {String} path - The path of the source to modify.
     * @param {number} mtime - Time to use as the new modification time in seconds since (+ve) or before (-ve) the Unix Epoch
     * @param {Object} [opts] - Options for touch.
     * @param {boolean} [opts.parents=false] - Whether or not to make the parent directories if they don't exist. (default: false)
     * @param {number} [opts.cidVersion=0] - CID version to use with the newly updated node
     * @param {number} [opts.shardSplitThreshold] - If the modified path has more than this many links it will be turned into a HAMT shard
     * @returns {Promise<string>}
     */
    touch: methods.touch,

    /**
     * Write to a file.
     *
     * @param {string} path - Path of the file to write.
     * @param {Buffer | PullStream | ReadableStream | Blob | string} content - Content to write.
     * @param {Object} opts - Options for write.
     * @param {number} [opts.offset=0] - Integer with the byte offset to begin writing at. (default: 0)
     * @param {boolean} [opts.create=false] - Indicate to create the file if it doesn't exist. (default: false)
     * @param {boolean} [opts.truncate=false] - Indicate if the file should be truncated after writing all the bytes from content. (default: false)
     * @param {boolena} [opts.parents=false] - Value to decide whether or not to make the parent directories if they don't exist. (default: false)
     * @param {number} [opts.length] - Maximum number of bytes to read. (default: Read all bytes from content)
     * @param {boolean} [opts.rawLeaves=false] - If true, DAG leaves will contain raw file data and not be wrapped in a protobuf. (default: false)
     * @param {number} [opts.cidVersion=0] - The CID version to use when storing the data (storage keys are based on the CID, including its version). (default: 0)
     * @returns {Promise<void>}
     */
    write: methods.write,

    /**
     * Move files.
     *
     * @param {string | Array<string>} from - Path(s) of the source to move.
     * @param {string} to - Path of the destination to move to.
     * @param {Object} opts - Options for mv.
     * @param {boolean} [opts.parents=false] - Value to decide whether or not to make the parent directories if they don't exist. (default: false)
     * @param {String} [opts.format=dag-pb] - Format of nodes to write any newly created directories as. (default: dag-pb).
     * @param {String} [opts.hashAlg] - Algorithm to use when creating CIDs for newly created directories. (default: sha2-256) {@link https://github.com/multiformats/js-multihash/blob/master/src/constants.js#L5-L343 The list of all possible values}
     * @param {boolean} [opts.flush=true] - Value to decide whether or not to immediately flush MFS changes to disk. (default: true)
     * @returns {Promise<void>}
     * @description
     * If from has multiple values then to must be a directory.
     *
     * If from has a single value and to exists and is a directory, from will be moved into to.
     *
     * If from has a single value and to exists and is a file, from must be a file and the contents of to will be replaced with the contents of from otherwise an error will be returned.
     *
     * If from is an IPFS path, and an MFS path exists with the same name, the IPFS path will be chosen.
     *
     * All values of from will be removed after the operation is complete unless they are an IPFS path.
     */
    mv: withPreload(methods.mv),

    /**
     * Flush a given path's data to the disk.
     *
     * @param {string | Array<string>} [paths] - String paths to flush. (default: /)
     * @returns {Promise<void>}
     */
    flush: methods.flush,

    /**
     * @typedef {Object} ListOutputFile
     * @prop {string} name - Which is the file's name.
     * @prop {string} type - Which is the object's type (directory or file).
     * @prop {number} size - The size of the file in bytes.
     * @prop {string} hash - The hash of the file.
     */

    /**
     * @typedef {Object} ListOptions
     * @prop {boolean} [long=false] - Value to decide whether or not to populate type, size and hash. (default: false)
     * @prop {boolean} [sort=false] - If true entries will be sorted by filename. (default: false)
     */

    /**
     * List directories in the local mutable namespace.
     *
     * @param {string} [path="/"] - String to show listing for. (default: /)
     * @param {ListOptions} [opts] - Options for list.
     * @returns {AsyncIterable<ListOutputFile>}
     */
    ls: withPreload(
    /*#__PURE__*/
    function () {
      var _ref = _wrapAsyncGenerator(function* (...args) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;

        var _iteratorError;

        try {
          for (var _iterator = _asyncIterator(methods.ls(...args)), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
            const file = _value;
            yield _objectSpread({}, file, {
              size: file.size || 0
            });
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              yield _awaitAsyncGenerator(_iterator.return());
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      });

      return function () {
        return _ref.apply(this, arguments);
      };
    }())
  });
};

/***/ }),
/* 579 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(580);

/***/ }),
/* 580 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const assert = __webpack_require__(13);

const createLock = __webpack_require__(260); // These operations are read-locked at the function level and will execute simultaneously


const readOperations = {
  stat: __webpack_require__(107)
}; // These operations are locked at the function level and will execute in series

const writeOperations = {
  chmod: __webpack_require__(597),
  cp: __webpack_require__(158),
  flush: __webpack_require__(601),
  mkdir: __webpack_require__(159),
  mv: __webpack_require__(602),
  rm: __webpack_require__(161),
  touch: __webpack_require__(603)
}; // These operations are asynchronous and manage their own locking

const unwrappedOperations = {
  write: __webpack_require__(604),
  read: __webpack_require__(607),
  ls: __webpack_require__(608)
};

const wrap = ({
  options,
  mfs,
  operations,
  lock
}) => {
  Object.keys(operations).forEach(key => {
    mfs[key] = lock(operations[key](options));
  });
};

const defaultOptions = {
  repoOwner: true,
  ipld: null,
  repo: null
};

module.exports = options => {
  const {
    repoOwner
  } = Object.assign({}, defaultOptions || {}, options);
  assert(options.ipld, 'MFS requires an IPLD instance');
  assert(options.blocks, 'MFS requires an BlockStore instance');
  assert(options.datastore, 'MFS requires a DataStore instance');
  options.repo = {
    blocks: options.blocks,
    datastore: options.datastore
  };
  const lock = createLock(repoOwner);

  const readLock = operation => {
    return lock.readLock(operation);
  };

  const writeLock = operation => {
    return lock.writeLock(operation);
  };

  const mfs = {};
  wrap({
    options,
    mfs,
    operations: readOperations,
    lock: readLock
  });
  wrap({
    options,
    mfs,
    operations: writeOperations,
    lock: writeLock
  });
  Object.keys(unwrappedOperations).forEach(key => {
    mfs[key] = unwrappedOperations[key](options);
  });
  return mfs;
};

/***/ }),
/* 581 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

const EventEmitter = __webpack_require__(11).EventEmitter;

const shortid = __webpack_require__(262);

const {
  WORKER_REQUEST_READ_LOCK,
  WORKER_RELEASE_READ_LOCK,
  MASTER_GRANT_READ_LOCK,
  WORKER_REQUEST_WRITE_LOCK,
  WORKER_RELEASE_WRITE_LOCK,
  MASTER_GRANT_WRITE_LOCK
} = __webpack_require__(263);

let cluster;

const handleWorkerLockRequest = (emitter, masterEvent, requestType, releaseType, grantType) => {
  return (worker, requestEvent) => {
    if (requestEvent && requestEvent.type === requestType) {
      emitter.emit(masterEvent, requestEvent.name, () => {
        // grant lock to worker
        worker.send({
          type: grantType,
          name: requestEvent.name,
          identifier: requestEvent.identifier
        }); // wait for worker to finish

        return new Promise(resolve => {
          const releaseEventListener = releaseEvent => {
            if (releaseEvent && releaseEvent.type === releaseType && releaseEvent.identifier === requestEvent.identifier) {
              worker.removeListener('message', releaseEventListener);
              resolve();
            }
          };

          worker.on('message', releaseEventListener);
        });
      });
    }
  };
};

const makeWorkerLockRequest = (name, requestType, grantType, releaseType) => {
  return () => {
    const id = shortid.generate();
    process.send({
      type: requestType,
      identifier: id,
      name
    });
    return new Promise(resolve => {
      const listener = event => {
        if (event && event.type === grantType && event.identifier === id) {
          process.removeListener('message', listener); // grant lock

          resolve(() => {
            // release lock
            process.send({
              type: releaseType,
              identifier: id,
              name
            });
          });
        }
      };

      process.on('message', listener);
    });
  };
};

module.exports = options => {
  try {
    cluster = __webpack_require__(590);

    if (!Object.keys(cluster).length) {
      return;
    }
  } catch (_) {
    return;
  }

  if (cluster.isMaster || options.singleProcess) {
    const emitter = new EventEmitter();
    cluster.on('message', handleWorkerLockRequest(emitter, 'requestReadLock', WORKER_REQUEST_READ_LOCK, WORKER_RELEASE_READ_LOCK, MASTER_GRANT_READ_LOCK));
    cluster.on('message', handleWorkerLockRequest(emitter, 'requestWriteLock', WORKER_REQUEST_WRITE_LOCK, WORKER_RELEASE_WRITE_LOCK, MASTER_GRANT_WRITE_LOCK));
    return emitter;
  }

  return {
    isWorker: true,
    readLock: name => makeWorkerLockRequest(name, WORKER_REQUEST_READ_LOCK, MASTER_GRANT_READ_LOCK, WORKER_RELEASE_READ_LOCK),
    writeLock: name => makeWorkerLockRequest(name, WORKER_REQUEST_WRITE_LOCK, MASTER_GRANT_WRITE_LOCK, WORKER_RELEASE_WRITE_LOCK)
  };
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5)))

/***/ }),
/* 582 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var alphabet = __webpack_require__(106);

var build = __webpack_require__(584);

var isValid = __webpack_require__(588); // if you are using cluster or multiple servers use this to make each instance
// has a unique value for worker
// Note: I don't know if this is automatically set when using third
// party cluster solutions such as pm2.


var clusterWorkerId = __webpack_require__(589) || 0;
/**
 * Set the seed.
 * Highly recommended if you don't want people to try to figure out your id schema.
 * exposed as shortid.seed(int)
 * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.
 */

function seed(seedValue) {
  alphabet.seed(seedValue);
  return module.exports;
}
/**
 * Set the cluster worker or machine id
 * exposed as shortid.worker(int)
 * @param workerId worker must be positive integer.  Number less than 16 is recommended.
 * returns shortid module so it can be chained.
 */


function worker(workerId) {
  clusterWorkerId = workerId;
  return module.exports;
}
/**
 *
 * sets new characters to use in the alphabet
 * returns the shuffled alphabet
 */


function characters(newCharacters) {
  if (newCharacters !== undefined) {
    alphabet.characters(newCharacters);
  }

  return alphabet.shuffled();
}
/**
 * Generate unique id
 * Returns string id
 */


function generate() {
  return build(clusterWorkerId);
} // Export all other functions as properties of the generate function


module.exports = generate;
module.exports.generate = generate;
module.exports.seed = seed;
module.exports.worker = worker;
module.exports.characters = characters;
module.exports.isValid = isValid;

/***/ }),
/* 583 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // Found this seed-based random generator somewhere
// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)

var seed = 1;
/**
 * return a random number based on a seed
 * @param seed
 * @returns {number}
 */

function getNextValue() {
  seed = (seed * 9301 + 49297) % 233280;
  return seed / 233280.0;
}

function setSeed(_seed_) {
  seed = _seed_;
}

module.exports = {
  nextValue: getNextValue,
  seed: setSeed
};

/***/ }),
/* 584 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var generate = __webpack_require__(585);

var alphabet = __webpack_require__(106); // Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.
// This number should be updated every year or so to keep the generated id short.
// To regenerate `new Date() - 0` and bump the version. Always bump the version!


var REDUCE_TIME = 1567752802062; // don't change unless we change the algos or REDUCE_TIME
// must be an integer and less than 16

var version = 7; // Counter is used when shortid is called multiple times in one second.

var counter; // Remember the last time shortid was called in case counter is needed.

var previousSeconds;
/**
 * Generate unique id
 * Returns string id
 */

function build(clusterWorkerId) {
  var str = '';
  var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);

  if (seconds === previousSeconds) {
    counter++;
  } else {
    counter = 0;
    previousSeconds = seconds;
  }

  str = str + generate(version);
  str = str + generate(clusterWorkerId);

  if (counter > 0) {
    str = str + generate(counter);
  }

  str = str + generate(seconds);
  return str;
}

module.exports = build;

/***/ }),
/* 585 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var alphabet = __webpack_require__(106);

var random = __webpack_require__(586);

var format = __webpack_require__(587);

function generate(number) {
  var loopCounter = 0;
  var done;
  var str = '';

  while (!done) {
    str = str + format(random, alphabet.get(), 1);
    done = number < Math.pow(16, loopCounter + 1);
    loopCounter++;
  }

  return str;
}

module.exports = generate;

/***/ }),
/* 586 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto

var randomByte;

if (!crypto || !crypto.getRandomValues) {
  randomByte = function randomByte(size) {
    var bytes = [];

    for (var i = 0; i < size; i++) {
      bytes.push(Math.floor(Math.random() * 256));
    }

    return bytes;
  };
} else {
  randomByte = function randomByte(size) {
    return crypto.getRandomValues(new Uint8Array(size));
  };
}

module.exports = randomByte;

/***/ }),
/* 587 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// This file replaces `format.js` in bundlers like webpack or Rollup,
// according to `browser` config in `package.json`.
module.exports = function (random, alphabet, size) {
  // We can’t use bytes bigger than the alphabet. To make bytes values closer
  // to the alphabet, we apply bitmask on them. We look for the closest
  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have
  // 30 symbols in the alphabet, we will take 31 (00011111).
  // We do not use faster Math.clz32, because it is not available in browsers.
  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1; // Bitmask is not a perfect solution (in our example it will pass 31 bytes,
  // which is bigger than the alphabet). As a result, we will need more bytes,
  // than ID size, because we will refuse bytes bigger than the alphabet.
  // Every hardware random generator call is costly,
  // because we need to wait for entropy collection. This is why often it will
  // be faster to ask for few extra bytes in advance, to avoid additional calls.
  // Here we calculate how many random bytes should we call in advance.
  // It depends on ID length, mask / alphabet size and magic number 1.6
  // (which was selected according benchmarks).
  // -~f => Math.ceil(f) if n is float number
  // -~i => i + 1 if n is integer number

  var step = -~(1.6 * mask * size / alphabet.length);
  var id = '';

  while (true) {
    var bytes = random(step); // Compact alternative for `for (var i = 0; i < step; i++)`

    var i = step;

    while (i--) {
      // If random byte is bigger than alphabet even after bitmask,
      // we refuse it by `|| ''`.
      id += alphabet[bytes[i] & mask] || ''; // More compact than `id.length + 1 === size`

      if (id.length === +size) return id;
    }
  }
};

/***/ }),
/* 588 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var alphabet = __webpack_require__(106);

function isShortId(id) {
  if (!id || typeof id !== 'string' || id.length < 6) {
    return false;
  }

  var nonAlphabetic = new RegExp('[^' + alphabet.get().replace(/[|\\{}()[\]^$+*?.-]/g, '\\$&') + ']');
  return !nonAlphabetic.test(id);
}

module.exports = isShortId;

/***/ }),
/* 589 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = 0;

/***/ }),
/* 590 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 591 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const EventEmitter = __webpack_require__(11).EventEmitter;

const shortid = __webpack_require__(262);

const {
  WORKER_REQUEST_READ_LOCK,
  WORKER_RELEASE_READ_LOCK,
  MASTER_GRANT_READ_LOCK,
  WORKER_REQUEST_WRITE_LOCK,
  WORKER_RELEASE_WRITE_LOCK,
  MASTER_GRANT_WRITE_LOCK
} = __webpack_require__(263);

const observer = __webpack_require__(264);

const globalThis = __webpack_require__(592)();

const handleWorkerLockRequest = (emitter, masterEvent, requestType, releaseType, grantType) => {
  return (worker, event) => {
    if (!event || !event.data || event.data.type !== requestType) {
      return;
    }

    const requestEvent = {
      type: event.data.type,
      name: event.data.name,
      identifier: event.data.identifier
    };
    emitter.emit(masterEvent, requestEvent.name, () => {
      // grant lock to worker
      worker.postMessage({
        type: grantType,
        name: requestEvent.name,
        identifier: requestEvent.identifier
      }); // wait for worker to finish

      return new Promise(resolve => {
        const releaseEventListener = event => {
          if (!event || !event.data) {
            return;
          }

          const releaseEvent = {
            type: event.data.type,
            name: event.data.name,
            identifier: event.data.identifier
          };

          if (releaseEvent && releaseEvent.type === releaseType && releaseEvent.identifier === requestEvent.identifier) {
            worker.removeEventListener('message', releaseEventListener);
            resolve();
          }
        };

        worker.addEventListener('message', releaseEventListener);
      });
    });
  };
};

const makeWorkerLockRequest = (name, requestType, grantType, releaseType) => {
  return () => {
    const id = shortid.generate();
    globalThis.postMessage({
      type: requestType,
      identifier: id,
      name
    });
    return new Promise(resolve => {
      const listener = event => {
        if (!event || !event.data) {
          return;
        }

        const responseEvent = {
          type: event.data.type,
          identifier: event.data.identifier
        };

        if (responseEvent && responseEvent.type === grantType && responseEvent.identifier === id) {
          globalThis.removeEventListener('message', listener); // grant lock

          resolve(() => {
            // release lock
            globalThis.postMessage({
              type: releaseType,
              identifier: id,
              name
            });
          });
        }
      };

      globalThis.addEventListener('message', listener);
    });
  };
};

const defaultOptions = {
  singleProcess: false
};

module.exports = options => {
  options = Object.assign({}, defaultOptions, options);
  const isMaster = !!globalThis.document || options.singleProcess;

  if (isMaster) {
    const emitter = new EventEmitter();
    observer.addEventListener('message', handleWorkerLockRequest(emitter, 'requestReadLock', WORKER_REQUEST_READ_LOCK, WORKER_RELEASE_READ_LOCK, MASTER_GRANT_READ_LOCK));
    observer.addEventListener('message', handleWorkerLockRequest(emitter, 'requestWriteLock', WORKER_REQUEST_WRITE_LOCK, WORKER_RELEASE_WRITE_LOCK, MASTER_GRANT_WRITE_LOCK));
    return emitter;
  }

  return {
    isWorker: true,
    readLock: name => makeWorkerLockRequest(name, WORKER_REQUEST_READ_LOCK, MASTER_GRANT_READ_LOCK, WORKER_RELEASE_READ_LOCK),
    writeLock: name => makeWorkerLockRequest(name, WORKER_REQUEST_WRITE_LOCK, MASTER_GRANT_WRITE_LOCK, WORKER_RELEASE_WRITE_LOCK)
  };
};

/***/ }),
/* 592 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var defineProperties = __webpack_require__(265);

var implementation = __webpack_require__(267);

var getPolyfill = __webpack_require__(268);

var shim = __webpack_require__(595);

var polyfill = getPolyfill();

var getGlobal = function getGlobal() {
  return polyfill;
};

defineProperties(getGlobal, {
  getPolyfill: getPolyfill,
  implementation: implementation,
  shim: shim
});
module.exports = getGlobal;

/***/ }),
/* 593 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var slice = Array.prototype.slice;

var isArgs = __webpack_require__(266);

var origKeys = Object.keys;
var keysShim = origKeys ? function keys(o) {
  return origKeys(o);
} : __webpack_require__(594);
var originalKeys = Object.keys;

keysShim.shim = function shimObjectKeys() {
  if (Object.keys) {
    var keysWorksWithArguments = function () {
      // Safari 5.0 bug
      var args = Object.keys(arguments);
      return args && args.length === arguments.length;
    }(1, 2);

    if (!keysWorksWithArguments) {
      Object.keys = function keys(object) {
        // eslint-disable-line func-name-matching
        if (isArgs(object)) {
          return originalKeys(slice.call(object));
        }

        return originalKeys(object);
      };
    }
  } else {
    Object.keys = keysShim;
  }

  return Object.keys || keysShim;
};

module.exports = keysShim;

/***/ }),
/* 594 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var keysShim;

if (!Object.keys) {
  // modified from https://github.com/es-shims/es5-shim
  var has = Object.prototype.hasOwnProperty;
  var toStr = Object.prototype.toString;

  var isArgs = __webpack_require__(266); // eslint-disable-line global-require


  var isEnumerable = Object.prototype.propertyIsEnumerable;
  var hasDontEnumBug = !isEnumerable.call({
    toString: null
  }, 'toString');
  var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
  var dontEnums = ['toString', 'toLocaleString', 'valueOf', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'constructor'];

  var equalsConstructorPrototype = function equalsConstructorPrototype(o) {
    var ctor = o.constructor;
    return ctor && ctor.prototype === o;
  };

  var excludedKeys = {
    $applicationCache: true,
    $console: true,
    $external: true,
    $frame: true,
    $frameElement: true,
    $frames: true,
    $innerHeight: true,
    $innerWidth: true,
    $onmozfullscreenchange: true,
    $onmozfullscreenerror: true,
    $outerHeight: true,
    $outerWidth: true,
    $pageXOffset: true,
    $pageYOffset: true,
    $parent: true,
    $scrollLeft: true,
    $scrollTop: true,
    $scrollX: true,
    $scrollY: true,
    $self: true,
    $webkitIndexedDB: true,
    $webkitStorageInfo: true,
    $window: true
  };

  var hasAutomationEqualityBug = function () {
    /* global window */
    if (typeof window === 'undefined') {
      return false;
    }

    for (var k in window) {
      try {
        if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
          try {
            equalsConstructorPrototype(window[k]);
          } catch (e) {
            return true;
          }
        }
      } catch (e) {
        return true;
      }
    }

    return false;
  }();

  var equalsConstructorPrototypeIfNotBuggy = function equalsConstructorPrototypeIfNotBuggy(o) {
    /* global window */
    if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
      return equalsConstructorPrototype(o);
    }

    try {
      return equalsConstructorPrototype(o);
    } catch (e) {
      return false;
    }
  };

  keysShim = function keys(object) {
    var isObject = object !== null && typeof object === 'object';
    var isFunction = toStr.call(object) === '[object Function]';
    var isArguments = isArgs(object);
    var isString = isObject && toStr.call(object) === '[object String]';
    var theKeys = [];

    if (!isObject && !isFunction && !isArguments) {
      throw new TypeError('Object.keys called on a non-object');
    }

    var skipProto = hasProtoEnumBug && isFunction;

    if (isString && object.length > 0 && !has.call(object, 0)) {
      for (var i = 0; i < object.length; ++i) {
        theKeys.push(String(i));
      }
    }

    if (isArguments && object.length > 0) {
      for (var j = 0; j < object.length; ++j) {
        theKeys.push(String(j));
      }
    } else {
      for (var name in object) {
        if (!(skipProto && name === 'prototype') && has.call(object, name)) {
          theKeys.push(String(name));
        }
      }
    }

    if (hasDontEnumBug) {
      var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

      for (var k = 0; k < dontEnums.length; ++k) {
        if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
          theKeys.push(dontEnums[k]);
        }
      }
    }

    return theKeys;
  };
}

module.exports = keysShim;

/***/ }),
/* 595 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var define = __webpack_require__(265);

var getPolyfill = __webpack_require__(268);

module.exports = function shimGlobal() {
  var polyfill = getPolyfill();

  if (define.supportsDescriptors) {
    var descriptor = Object.getOwnPropertyDescriptor(polyfill, 'globalThis');

    if (!descriptor || descriptor.configurable && (descriptor.enumerable || descriptor.writable || globalThis !== polyfill)) {
      // eslint-disable-line max-len
      Object.defineProperty(polyfill, 'globalThis', {
        configurable: true,
        enumerable: false,
        value: polyfill,
        writable: false
      });
    }
  } else if (typeof globalThis !== 'object' || globalThis !== polyfill) {
    polyfill.globalThis = polyfill;
  }

  return polyfill;
};

/***/ }),
/* 596 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright (c) 2015-2017 David M. Lee, II

/**
 * Local reference to TimeoutError
 * @private
 */

var TimeoutError;
/**
 * Rejects a promise with a {@link TimeoutError} if it does not settle within
 * the specified timeout.
 *
 * @param {Promise} promise The promise.
 * @param {number} timeoutMillis Number of milliseconds to wait on settling.
 * @returns {Promise} Either resolves/rejects with `promise`, or rejects with
 *                   `TimeoutError`, whichever settles first.
 */

var timeout = module.exports.timeout = function (promise, timeoutMillis) {
  var error = new TimeoutError(),
      timeout;
  return Promise.race([promise, new Promise(function (resolve, reject) {
    timeout = setTimeout(function () {
      reject(error);
    }, timeoutMillis);
  })]).then(function (v) {
    clearTimeout(timeout);
    return v;
  }, function (err) {
    clearTimeout(timeout);
    throw err;
  });
};
/**
 * Exception indicating that the timeout expired.
 */


TimeoutError = module.exports.TimeoutError = function () {
  Error.call(this);
  this.stack = Error().stack;
  this.message = 'Timeout';
};

TimeoutError.prototype = Object.create(Error.prototype);
TimeoutError.prototype.name = "TimeoutError";

/***/ }),
/* 597 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const applyDefaultOptions = __webpack_require__(31);

const toMfsPath = __webpack_require__(37);

const log = __webpack_require__(1)('ipfs:mfs:touch');

const errCode = __webpack_require__(2);

const UnixFS = __webpack_require__(25);

const toTrail = __webpack_require__(82);

const addLink = __webpack_require__(62);

const updateTree = __webpack_require__(63);

const updateMfsRoot = __webpack_require__(64);

const {
  DAGNode
} = __webpack_require__(12);

const mc = __webpack_require__(15);

const mh = __webpack_require__(16);

const pipe = __webpack_require__(23);

const importer = __webpack_require__(141);

const exporter = __webpack_require__(33);

const last = __webpack_require__(81);

const cp = __webpack_require__(158);

const rm = __webpack_require__(161);

const persist = __webpack_require__(57);

const defaultOptions = {
  flush: true,
  shardSplitThreshold: 1000,
  hashAlg: 'sha2-256',
  cidVersion: 0,
  recursive: false
};

function calculateModification(mode, originalMode, isDirectory) {
  let modification = 0;

  if (mode.includes('x') || mode.includes('X') && (isDirectory || originalMode & 0o1 || originalMode & 0o10 || originalMode & 0o100)) {
    modification += 1;
  }

  if (mode.includes('w')) {
    modification += 2;
  }

  if (mode.includes('r')) {
    modification += 4;
  }

  return modification;
}

function calculateUGO(references, modification) {
  let ugo = 0;

  if (references.includes('u')) {
    ugo += modification << 6;
  }

  if (references.includes('g')) {
    ugo += modification << 3;
  }

  if (references.includes('o')) {
    ugo += modification;
  }

  return ugo;
}

function calculateSpecial(references, mode, modification) {
  if (mode.includes('t')) {
    modification += parseInt('1000', 8);
  }

  if (mode.includes('s')) {
    if (references.includes('u')) {
      modification += parseInt('4000', 8);
    }

    if (references.includes('g')) {
      modification += parseInt('2000', 8);
    }
  }

  return modification;
} // https://en.wikipedia.org/wiki/Chmod#Symbolic_modes


function parseSymbolicMode(input, originalMode, isDirectory) {
  if (!originalMode) {
    originalMode = 0;
  }

  const match = input.match(/^(u?g?o?a?)(-?\+?=?)?(r?w?x?X?s?t?)$/);

  if (!match) {
    throw new Error("Invalid file mode: ".concat(input));
  }

  let [_, // eslint-disable-line no-unused-vars
  references, operator, mode] = match;

  if (references === 'a' || !references) {
    references = 'ugo';
  }

  let modification = calculateModification(mode, originalMode, isDirectory);
  modification = calculateUGO(references, modification);
  modification = calculateSpecial(references, mode, modification);

  if (operator === '=') {
    if (references.includes('u')) {
      // blank u bits
      originalMode = originalMode & parseInt('7077', 8); // or them together

      originalMode = originalMode | modification;
    }

    if (references.includes('g')) {
      // blank g bits
      originalMode = originalMode & parseInt('7707', 8); // or them together

      originalMode = originalMode | modification;
    }

    if (references.includes('o')) {
      // blank o bits
      originalMode = originalMode & parseInt('7770', 8); // or them together

      originalMode = originalMode | modification;
    }

    return originalMode;
  }

  if (operator === '+') {
    return modification | originalMode;
  }

  if (operator === '-') {
    return modification ^ originalMode;
  }
}

function calculateMode(mode, metadata) {
  if (typeof mode === 'string' || mode instanceof String) {
    if (mode.match(/^\d+$/g)) {
      mode = parseInt(mode, 8);
    } else {
      mode = mode.split(',').reduce((curr, acc) => {
        return parseSymbolicMode(acc, curr, metadata.isDirectory());
      }, metadata.mode);
    }
  }

  return mode;
}

module.exports = context => {
  return async function mfsChmod(path, mode, options) {
    options = applyDefaultOptions(options, defaultOptions);
    log("Fetching stats for ".concat(path));
    const {
      cid,
      mfsDirectory,
      name
    } = await toMfsPath(context, path);

    if (cid.codec !== 'dag-pb') {
      throw errCode(new Error("".concat(path, " was not a UnixFS node")), 'ERR_NOT_UNIXFS');
    }

    if (options.recursive) {
      // recursively export from root CID, change perms of each entry then reimport
      // but do not reimport files, only manipulate dag-pb nodes
      const root = await pipe(
      /*#__PURE__*/
      _wrapAsyncGenerator(function* () {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;

        var _iteratorError;

        try {
          for (var _iterator = _asyncIterator(exporter.recursive(cid, context.ipld)), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
            const entry = _value;
            let node = yield _awaitAsyncGenerator(context.ipld.get(entry.cid));
            entry.unixfs.mode = calculateMode(mode, entry.unixfs);
            node = new DAGNode(entry.unixfs.marshal(), node.Links);
            yield {
              path: entry.path,
              content: node
            };
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              yield _awaitAsyncGenerator(_iterator.return());
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }), source => importer(source, context.ipld, _objectSpread({}, options, {
        dagBuilder: function () {
          var _ref2 = _wrapAsyncGenerator(function* (source, ipld, options) {
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;

            var _iteratorError2;

            try {
              for (var _iterator2 = _asyncIterator(source), _step2, _value2; _step2 = yield _awaitAsyncGenerator(_iterator2.next()), _iteratorNormalCompletion2 = _step2.done, _value2 = yield _awaitAsyncGenerator(_step2.value), !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {
                const entry = _value2;
                yield async function () {
                  const cid = await persist(entry.content, ipld, options);
                  return {
                    cid,
                    path: entry.path,
                    unixfs: UnixFS.unmarshal(entry.content.Data),
                    node: entry.content
                  };
                };
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                  yield _awaitAsyncGenerator(_iterator2.return());
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }
          });

          return function dagBuilder(_x, _x2, _x3) {
            return _ref2.apply(this, arguments);
          };
        }()
      })), nodes => last(nodes)); // remove old path from mfs

      await rm(context)(path, options); // add newly created tree to mfs at path

      await cp(context)("/ipfs/".concat(root.cid), path, options);
      return;
    }

    let node = await context.ipld.get(cid);
    const metadata = UnixFS.unmarshal(node.Data);
    metadata.mode = calculateMode(mode, metadata);
    node = new DAGNode(metadata.marshal(), node.Links);
    const updatedCid = await context.ipld.put(node, mc.DAG_PB, {
      cidVersion: cid.version,
      hashAlg: mh.names[options.hashAlg],
      onlyHash: !options.flush
    });
    const trail = await toTrail(context, mfsDirectory, options);
    const parent = trail[trail.length - 1];
    const parentNode = await context.ipld.get(parent.cid);
    const result = await addLink(context, {
      parent: parentNode,
      name: name,
      cid: updatedCid,
      size: node.serialize().length,
      flush: options.flush,
      hashAlg: options.hashAlg,
      cidVersion: cid.version
    });
    parent.cid = result.cid; // update the tree with the new child

    const newRootCid = await updateTree(context, trail, options); // Update the MFS record with the new CID for the root of the tree

    await updateMfsRoot(context, newRootCid);
  };
};

/***/ }),
/* 598 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const UnixFS = __webpack_require__(25);

const {
  DAGNode
} = __webpack_require__(12);

const mc = __webpack_require__(15);

const mh = __webpack_require__(16);

const createNode = async (context, type, options) => {
  const hashAlg = mh.names[options.hashAlg];
  const metadata = new UnixFS({
    type,
    mode: options.mode,
    mtime: options.mtime
  });
  const node = new DAGNode(metadata.marshal());
  const cid = await context.ipld.put(node, mc.DAG_PB, {
    cidVersion: options.cidVersion,
    hashAlg,
    onlyHash: !options.flush
  });
  return {
    cid,
    node
  };
};

module.exports = createNode;

/***/ }),
/* 599 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const toSources = __webpack_require__(160);

async function toSourcesAndDestination(context, args) {
  const {
    sources,
    options
  } = await toSources(context, args);
  const destination = sources.pop();
  return {
    destination,
    sources,
    options
  };
}

module.exports = toSourcesAndDestination;

/***/ }),
/* 600 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const {
  DAGNode,
  DAGLink
} = __webpack_require__(12);

const CID = __webpack_require__(3);

const log = __webpack_require__(1)('ipfs:mfs:core:utils:remove-link');

const UnixFS = __webpack_require__(25);

const {
  generatePath,
  updateHamtDirectory
} = __webpack_require__(270);

const errCode = __webpack_require__(2);

const mc = __webpack_require__(15);

const mh = __webpack_require__(16);

const removeLink = async (context, options) => {
  if (!options.parentCid && !options.parent) {
    throw errCode(new Error('No parent node or CID passed to removeLink'), 'EINVALIDPARENT');
  }

  if (options.parentCid && !CID.isCID(options.parentCid)) {
    throw errCode(new Error('Invalid CID passed to removeLink'), 'EINVALIDPARENTCID');
  }

  if (!options.parent) {
    log("Loading parent node ".concat(options.parentCid));
    options.parent = await context.ipld.get(options.parentCid);
  }

  if (!options.name) {
    throw errCode(new Error('No child name passed to removeLink'), 'EINVALIDCHILDNAME');
  }

  const meta = UnixFS.unmarshal(options.parent.Data);

  if (meta.type === 'hamt-sharded-directory') {
    log("Removing ".concat(options.name, " from sharded directory"));
    return removeFromShardedDirectory(context, options);
  }

  log("Removing link ".concat(options.name, " regular directory"));
  return removeFromDirectory(context, options);
};

const removeFromDirectory = async (context, options) => {
  const hashAlg = mh.names[options.hashAlg];
  options.parent.rmLink(options.name);
  const cid = await context.ipld.put(options.parent, mc.DAG_PB, {
    cidVersion: options.cidVersion,
    hashAlg
  });
  log("Updated regular directory ".concat(cid));
  return {
    node: options.parent,
    cid
  };
};

const removeFromShardedDirectory = async (context, options) => {
  const {
    rootBucket,
    path
  } = await generatePath(context, options.name, options.parent);
  await rootBucket.del(options.name);
  const {
    node
  } = await updateShard(context, path, {
    name: options.name,
    cid: options.cid,
    size: options.size,
    hashAlg: options.hashAlg,
    cidVersion: options.cidVersion,
    flush: options.flush
  }, options);
  return updateHamtDirectory(context, node.Links, rootBucket, options);
};

const updateShard = async (context, positions, child, options) => {
  const {
    bucket,
    prefix,
    node
  } = positions.pop();
  const link = node.Links.find(link => link.Name.substring(0, 2) === prefix);

  if (!link) {
    throw errCode(new Error("No link found with prefix ".concat(prefix, " for file ").concat(child.name)), 'ERR_NOT_FOUND');
  }

  if (link.Name === "".concat(prefix).concat(child.name)) {
    log("Removing existing link ".concat(link.Name));
    node.rmLink(link.Name);
    await bucket.del(child.name);
    return updateHamtDirectory(context, node.Links, bucket, options);
  }

  log("Descending into sub-shard ".concat(link.Name, " for ").concat(prefix).concat(child.name));
  const result = await updateShard(context, positions, child, options);
  let newName = prefix;

  if (result.node.Links.length === 1) {
    log("Removing subshard for ".concat(prefix)); // convert shard back to normal dir

    result.cid = result.node.Links[0].Hash;
    result.node = result.node.Links[0];
    newName = "".concat(prefix).concat(result.node.Name.substring(2));
  }

  log("Updating shard ".concat(prefix, " with name ").concat(newName));
  const size = DAGNode.isDAGNode(result.node) ? result.node.size : result.node.Tsize;
  return updateShardParent(context, bucket, node, prefix, newName, size, result.cid, options);
};

const updateShardParent = (context, bucket, parent, oldName, newName, size, cid, options) => {
  parent.rmLink(oldName);
  parent.addLink(new DAGLink(newName, size, cid));
  return updateHamtDirectory(context, parent.Links, bucket, options);
};

module.exports = removeLink;

/***/ }),
/* 601 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const applyDefaultOptions = __webpack_require__(31);

const stat = __webpack_require__(107);

const {
  FILE_SEPARATOR
} = __webpack_require__(34);

const defaultOptions = {};

module.exports = context => {
  return async function mfsFlush(path = FILE_SEPARATOR, options = defaultOptions) {
    options = applyDefaultOptions(options, defaultOptions);
    const result = await stat(context)(path, options);
    return result.cid;
  };
};

/***/ }),
/* 602 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const applyDefaultOptions = __webpack_require__(31);

const toSources = __webpack_require__(160);

const cp = __webpack_require__(158);

const rm = __webpack_require__(161);

const defaultOptions = {
  parents: false,
  recursive: false,
  flush: true,
  cidVersion: 0,
  hashAlg: 'sha2-256',
  shardSplitThreshold: 1000
};

module.exports = context => {
  return async function mfsMv(...args) {
    if (Array.isArray(args[0])) {
      args = args[0].concat(args.slice(1));
    }

    const {
      sources
    } = await toSources(context, args);
    const options = applyDefaultOptions(args, defaultOptions);
    const cpArgs = sources.map(source => source.path).concat(options); // remove the last source as it'll be the destination

    const rmArgs = sources.slice(0, -1).map(source => source.path).concat(Object.assign(options, {
      recursive: true
    }));
    await cp(context).apply(null, cpArgs);
    await rm(context).apply(null, rmArgs);
  };
};

/***/ }),
/* 603 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const applyDefaultOptions = __webpack_require__(31);

const toMfsPath = __webpack_require__(37);

const log = __webpack_require__(1)('ipfs:mfs:touch');

const errCode = __webpack_require__(2);

const UnixFS = __webpack_require__(25);

const toTrail = __webpack_require__(82);

const addLink = __webpack_require__(62);

const updateTree = __webpack_require__(63);

const updateMfsRoot = __webpack_require__(64);

const {
  DAGNode
} = __webpack_require__(12);

const mc = __webpack_require__(15);

const mh = __webpack_require__(16);

const defaultOptions = {
  mtime: undefined,
  flush: true,
  shardSplitThreshold: 1000,
  cidVersion: 0,
  hashAlg: 'sha2-256'
};

module.exports = context => {
  return async function mfsTouch(path, options) {
    options = options || {};
    options = applyDefaultOptions(options, defaultOptions);
    options.mtime = options.mtime || new Date();
    log("Touching ".concat(path, " mtime: ").concat(options.mtime));
    const {
      cid,
      mfsDirectory,
      name,
      exists
    } = await toMfsPath(context, path);
    let node;
    let updatedCid;
    let cidVersion = options.cidVersion;

    if (!exists) {
      const metadata = new UnixFS({
        type: 'file',
        mtime: options.mtime
      });
      node = new DAGNode(metadata.marshal());
      updatedCid = await context.ipld.put(node, mc.DAG_PB, {
        cidVersion: options.cidVersion,
        hashAlg: mh.names['sha2-256'],
        onlyHash: !options.flush
      });
    } else {
      if (cid.codec !== 'dag-pb') {
        throw errCode(new Error("".concat(path, " was not a UnixFS node")), 'ERR_NOT_UNIXFS');
      }

      cidVersion = cid.version;
      node = await context.ipld.get(cid);
      const metadata = UnixFS.unmarshal(node.Data);
      metadata.mtime = options.mtime;
      node = new DAGNode(metadata.marshal(), node.Links);
      updatedCid = await context.ipld.put(node, mc.DAG_PB, {
        cidVersion: cid.version,
        hashAlg: mh.names['sha2-256'],
        onlyHash: !options.flush
      });
    }

    const trail = await toTrail(context, mfsDirectory, options);
    const parent = trail[trail.length - 1];
    const parentNode = await context.ipld.get(parent.cid);
    const result = await addLink(context, {
      parent: parentNode,
      name: name,
      cid: updatedCid,
      size: node.serialize().length,
      flush: options.flush,
      shardSplitThreshold: options.shardSplitThreshold,
      hashAlg: 'sha2-256',
      cidVersion
    });
    parent.cid = result.cid; // update the tree with the new child

    const newRootCid = await updateTree(context, trail, options); // Update the MFS record with the new CID for the root of the tree

    await updateMfsRoot(context, newRootCid);
  };
};

/***/ }),
/* 604 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

function _asyncGeneratorDelegate(inner, awaitWrap) { var iter = {}, waiting = false; function pump(key, value) { waiting = true; value = new Promise(function (resolve) { resolve(inner[key](value)); }); return { done: false, value: awaitWrap(value) }; } ; if (typeof Symbol === "function" && Symbol.iterator) { iter[Symbol.iterator] = function () { return this; }; } iter.next = function (value) { if (waiting) { waiting = false; return value; } return pump("next", value); }; if (typeof inner.throw === "function") { iter.throw = function (value) { if (waiting) { waiting = false; throw value; } return pump("throw", value); }; } if (typeof inner.return === "function") { iter.return = function (value) { if (waiting) { waiting = false; return value; } return pump("return", value); }; } return iter; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

const log = __webpack_require__(1)('ipfs:mfs:write');

const importer = __webpack_require__(141);

const stat = __webpack_require__(107);

const mkdir = __webpack_require__(159);

const addLink = __webpack_require__(62);

const applyDefaultOptions = __webpack_require__(31);

const createLock = __webpack_require__(260);

const toAsyncIterator = __webpack_require__(605);

const toMfsPath = __webpack_require__(37);

const toPathComponents = __webpack_require__(157);

const toTrail = __webpack_require__(82);

const updateTree = __webpack_require__(63);

const updateMfsRoot = __webpack_require__(64);

const errCode = __webpack_require__(2);

const {
  MAX_CHUNK_SIZE
} = __webpack_require__(34);

const last = __webpack_require__(81);

const defaultOptions = {
  offset: 0,
  // the offset in the file to begin writing
  length: undefined,
  // how many bytes from the incoming buffer to write
  create: false,
  // whether to create the file if it does not exist
  truncate: false,
  // whether to truncate the file first
  rawLeaves: false,
  reduceSingleLeafToSelf: false,
  cidVersion: 0,
  hashAlg: 'sha2-256',
  parents: false,
  // whether to create intermediate directories if they do not exist
  progress: () => {},
  strategy: 'trickle',
  flush: true,
  leafType: 'raw',
  shardSplitThreshold: 1000,
  mode: undefined,
  mtime: undefined
};

module.exports = context => {
  return async function mfsWrite(path, content, options) {
    options = applyDefaultOptions(options, defaultOptions);
    let source, destination, parent;
    log('Reading source, destination and parent');
    await createLock().readLock(async () => {
      source = await toAsyncIterator(content, options);
      destination = await toMfsPath(context, path);
      parent = await toMfsPath(context, destination.mfsDirectory);
    })();
    log('Read source, destination and parent');

    if (!options.parents && !parent.exists) {
      throw errCode(new Error('directory does not exist'), 'ERR_NO_EXIST');
    }

    if (!options.create && !destination.exists) {
      throw errCode(new Error('file does not exist'), 'ERR_NO_EXIST');
    }

    return updateOrImport(context, path, source, destination, options);
  };
};

const updateOrImport = async (context, path, source, destination, options) => {
  const child = await write(context, source, destination, options); // The slow bit is done, now add or replace the DAGLink in the containing directory
  // re-reading the path to the containing folder in case it has changed in the interim

  await createLock().writeLock(async () => {
    const pathComponents = toPathComponents(path);
    const fileName = pathComponents.pop();
    let parentExists = false;

    try {
      await stat(context)("/".concat(pathComponents.join('/')), options);
      parentExists = true;
    } catch (err) {
      if (err.code !== 'ERR_NOT_FOUND') {
        throw err;
      }
    }

    if (!parentExists) {
      await mkdir(context)("/".concat(pathComponents.join('/')), options);
    } // get an updated mfs path in case the root changed while we were writing


    const updatedPath = await toMfsPath(context, path);
    const trail = await toTrail(context, updatedPath.mfsDirectory, options);
    const parent = trail[trail.length - 1];

    if (!parent.type.includes('directory')) {
      throw errCode(new Error("cannot write to ".concat(parent.name, ": Not a directory")), 'ERR_NOT_A_DIRECTORY');
    }

    const parentNode = await context.ipld.get(parent.cid);
    const result = await addLink(context, {
      parent: parentNode,
      name: fileName,
      cid: child.cid,
      size: child.size,
      flush: options.flush,
      shardSplitThreshold: options.shardSplitThreshold,
      hashAlg: options.hashAlg,
      cidVersion: options.cidVersion
    });
    parent.cid = result.cid; // update the tree with the new child

    const newRootCid = await updateTree(context, trail, options); // Update the MFS record with the new CID for the root of the tree

    await updateMfsRoot(context, newRootCid);
  })();
};

const write = async (context, source, destination, options) => {
  if (destination.exists) {
    log("Overwriting file ".concat(destination.cid, " offset ").concat(options.offset, " length ").concat(options.length));
  } else {
    log("Writing file offset ".concat(options.offset, " length ").concat(options.length));
  }

  const sources = []; // pad start of file if necessary

  if (options.offset > 0) {
    if (destination.unixfs) {
      log("Writing first ".concat(options.offset, " bytes of original file"));
      sources.push(() => {
        return destination.content({
          offset: 0,
          length: options.offset
        });
      });

      if (destination.unixfs.fileSize() < options.offset) {
        const extra = options.offset - destination.unixfs.fileSize();
        log("Writing zeros for extra ".concat(extra, " bytes"));
        sources.push(asyncZeroes(extra));
      }
    } else {
      log("Writing zeros for first ".concat(options.offset, " bytes"));
      sources.push(asyncZeroes(options.offset));
    }
  }

  sources.push(limitAsyncStreamBytes(source, options.length));
  const content = countBytesStreamed(catAsyncIterators(sources), bytesWritten => {
    if (destination.unixfs && !options.truncate) {
      // if we've done reading from the new source and we are not going
      // to truncate the file, add the end of the existing file to the output
      const fileSize = destination.unixfs.fileSize();

      if (fileSize > bytesWritten) {
        log("Writing last ".concat(fileSize - bytesWritten, " of ").concat(fileSize, " bytes from original file starting at offset ").concat(bytesWritten));
        return destination.content({
          offset: bytesWritten
        });
      } else {
        log('Not writing last bytes from original file');
      }
    }

    return {
      [Symbol.asyncIterator]: _wrapAsyncGenerator(function* () {})
    };
  });
  let mode;

  if (options.mode !== undefined && options.mode !== null) {
    mode = options.mode;
  } else if (destination && destination.unixfs) {
    mode = destination.unixfs.mode;
  }

  let mtime;

  if (options.mtime !== undefined && options.mtine !== null) {
    mtime = options.mtime;
  } else if (destination && destination.unixfs) {
    mtime = destination.unixfs.mtime;
  }

  const result = await last(importer([{
    content: content,
    // persist mode & mtime if set previously
    mode,
    mtime
  }], context.ipld, {
    progress: options.progress,
    hashAlg: options.hashAlg,
    cidVersion: options.cidVersion,
    strategy: options.strategy,
    rawLeaves: options.rawLeaves,
    reduceSingleLeafToSelf: options.reduceSingleLeafToSelf,
    leafType: options.leafType
  }));
  log("Wrote ".concat(result.cid));
  return {
    cid: result.cid,
    size: result.size
  };
};

const limitAsyncStreamBytes = (stream, limit) => {
  return (
    /*#__PURE__*/
    function () {
      var _limitAsyncStreamBytes2 = _wrapAsyncGenerator(function* () {
        let emitted = 0;
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;

        var _iteratorError;

        try {
          for (var _iterator = _asyncIterator(stream), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
            const buf = _value;
            emitted += buf.length;

            if (emitted > limit) {
              yield buf.slice(0, limit - emitted);
              return;
            }

            yield buf;
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              yield _awaitAsyncGenerator(_iterator.return());
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      });

      function _limitAsyncStreamBytes() {
        return _limitAsyncStreamBytes2.apply(this, arguments);
      }

      return _limitAsyncStreamBytes;
    }()
  );
};

const asyncZeroes = (count, chunkSize = MAX_CHUNK_SIZE) => {
  const buf = Buffer.alloc(chunkSize, 0);
  const stream = {
    [Symbol.asyncIterator]: function* _asyncZeroes() {
      while (true) {
        yield buf.slice();
      }
    }
  };
  return limitAsyncStreamBytes(stream, count);
};

const catAsyncIterators =
/*#__PURE__*/
function () {
  var _ref2 = _wrapAsyncGenerator(function* (sources) {
    // eslint-disable-line require-await
    for (let i = 0; i < sources.length; i++) {
      yield* _asyncGeneratorDelegate(_asyncIterator(sources[i]()), _awaitAsyncGenerator);
    }
  });

  return function catAsyncIterators(_x) {
    return _ref2.apply(this, arguments);
  };
}();

const countBytesStreamed =
/*#__PURE__*/
function () {
  var _ref3 = _wrapAsyncGenerator(function* (source, notify) {
    let wrote = 0;
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;

    var _iteratorError2;

    try {
      for (var _iterator2 = _asyncIterator(source), _step2, _value2; _step2 = yield _awaitAsyncGenerator(_iterator2.next()), _iteratorNormalCompletion2 = _step2.done, _value2 = yield _awaitAsyncGenerator(_step2.value), !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {
        const buf = _value2;
        wrote += buf.length;
        yield buf;
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          yield _awaitAsyncGenerator(_iterator2.return());
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;

    var _iteratorError3;

    try {
      for (var _iterator3 = _asyncIterator(notify(wrote)), _step3, _value3; _step3 = yield _awaitAsyncGenerator(_iterator3.next()), _iteratorNormalCompletion3 = _step3.done, _value3 = yield _awaitAsyncGenerator(_step3.value), !_iteratorNormalCompletion3; _iteratorNormalCompletion3 = true) {
        const buf = _value3;
        wrote += buf.length;
        yield buf;
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
          yield _awaitAsyncGenerator(_iterator3.return());
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }
  });

  return function countBytesStreamed(_x2, _x3) {
    return _ref3.apply(this, arguments);
  };
}();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 605 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, Buffer) {

const errCode = __webpack_require__(2);

const fs = __webpack_require__(606);

const log = __webpack_require__(1)('ipfs:mfs:utils:to-async-iterator');

const {
  MAX_CHUNK_SIZE
} = __webpack_require__(34);

const toAsyncIterator = content => {
  if (!content) {
    throw errCode(new Error('paths must start with a leading /'), 'ERR_INVALID_PATH');
  }

  if (typeof content === 'string' || content instanceof String) {
    // Paths, node only
    log('Content was a path');
    return fs.createReadStream(content);
  }

  if (content.length) {
    log('Content was array-like');
    return {
      [Symbol.asyncIterator]: function* bufferContent() {
        yield content;
      }
    };
  }

  if (content[Symbol.asyncIterator]) {
    log('Content was an async iterator');
    return content;
  }

  if (content[Symbol.iterator]) {
    log('Content was an iterator');
    return content;
  }

  if (global.Blob && content instanceof global.Blob) {
    // HTML5 Blob objects (including Files)
    log('Content was an HTML5 Blob');
    let index = 0;
    const iterator = {
      next: () => {
        if (index > content.size) {
          return {
            done: true
          };
        }

        return new Promise((resolve, reject) => {
          const chunk = content.slice(index, MAX_CHUNK_SIZE);
          index += MAX_CHUNK_SIZE;
          const reader = new global.FileReader();

          const handleLoad = ev => {
            reader.removeEventListener('loadend', handleLoad, false);

            if (ev.error) {
              return reject(ev.error);
            }

            resolve({
              done: false,
              value: Buffer.from(reader.result)
            });
          };

          reader.addEventListener('loadend', handleLoad);
          reader.readAsArrayBuffer(chunk);
        });
      }
    };
    return {
      [Symbol.asyncIterator]: () => {
        return iterator;
      }
    };
  }

  throw errCode(new Error("Don't know how to convert ".concat(content, " into an async iterator")), 'ERR_INVALID_PARAMS');
};

module.exports = toAsyncIterator;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(8), __webpack_require__(0).Buffer))

/***/ }),
/* 606 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 607 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const exporter = __webpack_require__(33);

const applyDefaultOptions = __webpack_require__(31);

const toMfsPath = __webpack_require__(37);

const errCode = __webpack_require__(2);

const defaultOptions = {
  offset: 0,
  length: Infinity
};

module.exports = context => {
  return function mfsRead(path, options = {}) {
    options = applyDefaultOptions(options, defaultOptions);
    return {
      [Symbol.asyncIterator]: function () {
        var _read = _wrapAsyncGenerator(function* () {
          const mfsPath = yield _awaitAsyncGenerator(toMfsPath(context, path));
          const result = yield _awaitAsyncGenerator(exporter(mfsPath.mfsPath, context.ipld));

          if (result.unixfs.type !== 'file') {
            throw errCode(new Error("".concat(path, " was not a file")), 'ERR_NOT_FILE');
          }

          if (!result.content) {
            throw errCode(new Error("Could not load content stream from ".concat(path)), 'ERR_NO_CONTENT');
          }

          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;

          var _iteratorError;

          try {
            for (var _iterator = _asyncIterator(result.content({
              offset: options.offset,
              length: options.length
            })), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
              const buf = _value;
              yield buf;
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return != null) {
                yield _awaitAsyncGenerator(_iterator.return());
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        });

        function read() {
          return _read.apply(this, arguments);
        }

        return read;
      }()
    };
  };
};

/***/ }),
/* 608 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const exporter = __webpack_require__(33);

const applyDefaultOptions = __webpack_require__(31);

const toMfsPath = __webpack_require__(37);

const {
  FILE_SEPARATOR,
  FILE_TYPES
} = __webpack_require__(34);

const defaultOptions = {};

const toOutput = fsEntry => {
  let type = 0;
  let size = fsEntry.node.size || fsEntry.node.length;
  let mode;
  let mtime;

  if (fsEntry.unixfs) {
    size = fsEntry.unixfs.fileSize();
    type = FILE_TYPES[fsEntry.unixfs.type];
    mode = fsEntry.unixfs.mode;
    mtime = fsEntry.unixfs.mtime;
  }

  const output = {
    cid: fsEntry.cid,
    name: fsEntry.name,
    type,
    size,
    mode
  };

  if (mtime !== undefined) {
    output.mtime = mtime;
  }

  return output;
};

module.exports = context => {
  return (
    /*#__PURE__*/
    function () {
      var _mfsLs = _wrapAsyncGenerator(function* (path = FILE_SEPARATOR, options = {}) {
        if (typeof path === 'object' && !(path instanceof String)) {
          options = path;
          path = FILE_SEPARATOR;
        }

        options = applyDefaultOptions(options, defaultOptions);
        const mfsPath = yield _awaitAsyncGenerator(toMfsPath(context, path));
        const fsDir = yield _awaitAsyncGenerator(exporter(mfsPath.mfsPath, context.ipld)); // single file/node

        if (!fsDir.unixfs || !fsDir.unixfs.type.includes('directory')) {
          yield toOutput(fsDir);
          return;
        } // directory, perhaps sharded


        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;

        var _iteratorError;

        try {
          for (var _iterator = _asyncIterator(fsDir.content(options)), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
            const fsEntry = _value;
            yield toOutput(fsEntry);
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              yield _awaitAsyncGenerator(_iterator.return());
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      });

      function mfsLs() {
        return _mfsLs.apply(this, arguments);
      }

      return mfsLs;
    }()
  );
};

/***/ }),
/* 609 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const exporter = __webpack_require__(33);

const errCode = __webpack_require__(2);

const {
  normalizeCidPath,
  mapFile
} = __webpack_require__(29);

module.exports = function ({
  ipld,
  preload
}) {
  return (
    /*#__PURE__*/
    function () {
      var _get = _wrapAsyncGenerator(function* (ipfsPath, options) {
        options = options || {};

        if (options.preload !== false) {
          let pathComponents;

          try {
            pathComponents = normalizeCidPath(ipfsPath).split('/');
          } catch (err) {
            throw errCode(err, 'ERR_INVALID_PATH');
          }

          preload(pathComponents[0]);
        }

        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;

        var _iteratorError;

        try {
          for (var _iterator = _asyncIterator(exporter.recursive(ipfsPath, ipld, options)), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
            const file = _value;
            yield mapFile(file, _objectSpread({}, options, {
              includeContent: true
            }));
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              yield _awaitAsyncGenerator(_iterator.return());
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      });

      function get(_x, _x2) {
        return _get.apply(this, arguments);
      }

      return get;
    }()
  );
};

/***/ }),
/* 610 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const pkgversion = __webpack_require__(271).version;

const multiaddr = __webpack_require__(20);

module.exports = ({
  peerInfo
}) => {
  return async function id() {
    // eslint-disable-line require-await
    const id = peerInfo.id.toB58String();
    return {
      id,
      publicKey: peerInfo.id.pubKey.bytes.toString('base64'),
      addresses: peerInfo.multiaddrs.toArray().map(ma => {
        const str = ma.toString(); // some relay-style transports add our peer id to the ma for us
        // so don't double-add

        if (str.endsWith("/p2p/".concat(id))) {
          return str;
        }

        return "".concat(str, "/p2p/").concat(id);
      }).sort().map(ma => multiaddr(ma)),
      agentVersion: "js-ipfs/".concat(pkgversion),
      protocolVersion: '9000'
    };
  };
};

/***/ }),
/* 611 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const log = __webpack_require__(1)('ipfs:components:init');

const PeerId = __webpack_require__(9);

const PeerInfo = __webpack_require__(17);

const mergeOptions = __webpack_require__(27);

const getDefaultConfig = __webpack_require__(149);

const createRepo = __webpack_require__(612);

const Keychain = __webpack_require__(676);

const NoKeychain = __webpack_require__(685);

const mortice = __webpack_require__(261);

const {
  DAGNode
} = __webpack_require__(12);

const UnixFs = __webpack_require__(25);

const multicodec = __webpack_require__(15);

const {
  AlreadyInitializingError,
  AlreadyInitializedError,
  NotStartedError,
  NotEnabledError
} = __webpack_require__(79);

const BlockService = __webpack_require__(686);

const Ipld = __webpack_require__(687);

const getDefaultIpldOptions = __webpack_require__(691);

const createPreloader = __webpack_require__(692);

const {
  ERR_REPO_NOT_INITIALIZED
} = __webpack_require__(83).errors;

const IPNS = __webpack_require__(308);

const OfflineDatastore = __webpack_require__(309);

const initAssets = __webpack_require__(713);

const PinManager = __webpack_require__(102);

const Components = __webpack_require__(101);

module.exports = ({
  apiManager,
  print,
  options: constructorOptions
}) => async function init(options) {
  const {
    cancel
  } = apiManager.update({
    init: () => {
      throw new AlreadyInitializingError();
    }
  });

  try {
    options = options || {};

    if (typeof constructorOptions.init === 'object') {
      options = mergeOptions(constructorOptions.init, options);
    }

    options.pass = options.pass || constructorOptions.pass;

    if (constructorOptions.config) {
      options.config = mergeOptions(options.config, constructorOptions.config);
    }

    options.repo = options.repo || constructorOptions.repo;
    options.repoAutoMigrate = options.repoAutoMigrate || constructorOptions.repoAutoMigrate;
    const repo = typeof options.repo === 'string' || options.repo == null ? createRepo({
      path: options.repo,
      autoMigrate: options.repoAutoMigrate
    }) : options.repo;
    let isInitialized = true;

    if (repo.closed) {
      try {
        await repo.open();
      } catch (err) {
        if (err.code === ERR_REPO_NOT_INITIALIZED) {
          isInitialized = false;
        } else {
          throw err;
        }
      }
    }

    if (!isInitialized && options.allowNew === false) {
      throw new NotEnabledError('new repo initialization is not enabled');
    }

    const {
      peerId,
      keychain
    } = isInitialized ? await initExistingRepo(repo, options) : await initNewRepo(repo, _objectSpread({}, options, {
      print
    }));
    log('peer created');
    const peerInfo = new PeerInfo(peerId);
    const blockService = new BlockService(repo);
    const ipld = new Ipld(getDefaultIpldOptions(blockService, constructorOptions.ipld, log));
    const preload = createPreloader(constructorOptions.preload);
    await preload.start(); // Make sure GC lock is specific to repo, for tests where there are
    // multiple instances of IPFS

    const gcLock = mortice(repo.path, {
      singleProcess: constructorOptions.repoOwner !== false
    });
    const dag = {
      get: Components.dag.get({
        ipld,
        preload
      }),
      resolve: Components.dag.resolve({
        ipld,
        preload
      }),
      tree: Components.dag.tree({
        ipld,
        preload
      })
    };
    const object = {
      data: Components.object.data({
        ipld,
        preload
      }),
      get: Components.object.get({
        ipld,
        preload
      }),
      links: Components.object.links({
        dag
      }),
      new: Components.object.new({
        ipld,
        preload
      }),
      patch: {
        addLink: Components.object.patch.addLink({
          ipld,
          gcLock,
          preload
        }),
        appendData: Components.object.patch.appendData({
          ipld,
          gcLock,
          preload
        }),
        rmLink: Components.object.patch.rmLink({
          ipld,
          gcLock,
          preload
        }),
        setData: Components.object.patch.setData({
          ipld,
          gcLock,
          preload
        })
      },
      put: Components.object.put({
        ipld,
        gcLock,
        preload
      }),
      stat: Components.object.stat({
        ipld,
        preload
      })
    };
    const pinManager = new PinManager(repo, dag);
    await pinManager.load();
    const pin = {
      add: Components.pin.add({
        pinManager,
        gcLock,
        dag
      }),
      ls: Components.pin.ls({
        pinManager,
        dag
      }),
      rm: Components.pin.rm({
        pinManager,
        gcLock,
        dag
      })
    }; // FIXME: resolve this circular dependency

    dag.put = Components.dag.put({
      ipld,
      pin,
      gcLock,
      preload
    });
    const add = Components.add({
      ipld,
      preload,
      pin,
      gcLock,
      options: constructorOptions
    });

    if (!isInitialized && !options.emptyRepo) {
      // add empty unixfs dir object (go-ipfs assumes this exists)
      const emptyDirCid = await addEmptyDir({
        dag
      });
      log('adding default assets');
      await initAssets({
        add,
        print
      });
      log('initializing IPNS keyspace'); // Setup the offline routing for IPNS.
      // This is primarily used for offline ipns modifications, such as the initializeKeyspace feature.

      const offlineDatastore = new OfflineDatastore(repo);
      const ipns = new IPNS(offlineDatastore, repo.datastore, peerInfo, keychain, {
        pass: options.pass
      });
      await ipns.initializeKeyspace(peerId.privKey, emptyDirCid.toString());
    }

    const api = createApi({
      add,
      apiManager,
      constructorOptions,
      blockService,
      dag,
      gcLock,
      initOptions: options,
      ipld,
      keychain,
      object,
      peerInfo,
      pin,
      pinManager,
      preload,
      print,
      repo
    });
    apiManager.update(api, () => {
      throw new NotStartedError();
    });
  } catch (err) {
    cancel();
    throw err;
  }

  return apiManager.api;
};

async function initNewRepo(repo, {
  privateKey,
  emptyRepo,
  bits,
  profiles,
  config,
  pass,
  print
}) {
  emptyRepo = emptyRepo || false;
  bits = bits == null ? 2048 : Number(bits);
  config = mergeOptions(applyProfiles(profiles, getDefaultConfig()), config); // Verify repo does not exist yet

  const exists = await repo.exists();
  log('repo exists?', exists);

  if (exists === true) {
    throw new Error('repo already exists');
  }

  const peerId = await createPeerId({
    privateKey,
    bits,
    print
  });
  let keychain = new NoKeychain();
  log('identity generated');
  config.Identity = {
    PeerID: peerId.toB58String(),
    PrivKey: peerId.privKey.bytes.toString('base64')
  };
  privateKey = peerId.privKey;
  config.Keychain = Keychain.generateOptions();
  log('peer identity: %s', config.Identity.PeerID);
  await repo.init(config);
  await repo.open();
  log('repo opened');

  if (pass) {
    log('creating keychain');

    const keychainOptions = _objectSpread({
      passPhrase: pass
    }, config.Keychain);

    keychain = new Keychain(repo.keys, keychainOptions);
    await keychain.importPeer('self', {
      privKey: privateKey
    });
  }

  return {
    peerId,
    keychain
  };
}

async function initExistingRepo(repo, {
  config: newConfig,
  profiles,
  pass
}) {
  let config = await repo.config.get();

  if (newConfig || profiles) {
    if (profiles) {
      config = applyProfiles(profiles, config);
    }

    if (newConfig) {
      config = mergeOptions(config, newConfig);
    }

    await repo.config.set(config);
  }

  let keychain = new NoKeychain();

  if (pass) {
    const keychainOptions = _objectSpread({
      passPhrase: pass
    }, config.Keychain);

    keychain = new Keychain(repo.keys, keychainOptions);
    log('keychain constructed');
  }

  const peerId = await PeerId.createFromPrivKey(config.Identity.PrivKey); // Import the private key as 'self', if needed.

  if (pass) {
    try {
      await keychain.findKeyByName('self');
    } catch (err) {
      log('Creating "self" key');
      await keychain.importPeer('self', peerId);
    }
  }

  return {
    peerId,
    keychain
  };
}

function createPeerId({
  privateKey,
  bits,
  print
}) {
  if (privateKey) {
    log('using user-supplied private-key');
    return typeof privateKey === 'object' ? privateKey : PeerId.createFromPrivKey(Buffer.from(privateKey, 'base64'));
  } else {
    // Generate peer identity keypair + transform to desired format + add to config.
    print('generating %s-bit RSA keypair...', bits);
    return PeerId.create({
      bits
    });
  }
}

function addEmptyDir({
  dag
}) {
  const node = new DAGNode(new UnixFs('directory').marshal());
  return dag.put(node, {
    version: 0,
    format: multicodec.DAG_PB,
    hashAlg: multicodec.SHA2_256,
    preload: false
  });
} // Apply profiles (e.g. ['server', 'lowpower']) to config


function applyProfiles(profiles, config) {
  return (profiles || []).reduce((config, name) => {
    const profile = __webpack_require__(258).profiles[name];

    if (!profile) {
      throw new Error("Could not find profile with name '".concat(name, "'"));
    }

    log('applying profile %s', name);
    return profile.transform(config);
  }, config);
}

function createApi({
  add,
  apiManager,
  constructorOptions,
  blockService,
  dag,
  gcLock,
  initOptions,
  ipld,
  keychain,
  object,
  peerInfo,
  pin,
  pinManager,
  preload,
  print,
  repo
}) {
  const notStarted = async () => {
    // eslint-disable-line require-await
    throw new NotStartedError();
  };

  const resolve = Components.resolve({
    ipld
  });
  const refs = Components.refs({
    ipld,
    resolve,
    preload
  });
  refs.local = Components.refs.local({
    repo
  });
  const api = {
    add,
    bitswap: {
      stat: notStarted,
      unwant: notStarted,
      wantlist: notStarted
    },
    bootstrap: {
      add: Components.bootstrap.add({
        repo
      }),
      list: Components.bootstrap.list({
        repo
      }),
      rm: Components.bootstrap.rm({
        repo
      })
    },
    block: {
      get: Components.block.get({
        blockService,
        preload
      }),
      put: Components.block.put({
        blockService,
        gcLock,
        preload
      }),
      rm: Components.block.rm({
        blockService,
        gcLock,
        pinManager
      }),
      stat: Components.block.stat({
        blockService,
        preload
      })
    },
    cat: Components.cat({
      ipld,
      preload
    }),
    config: Components.config({
      repo
    }),
    dag,
    dns: Components.dns(),
    files: Components.files({
      ipld,
      blockService,
      repo,
      preload,
      options: constructorOptions
    }),
    get: Components.get({
      ipld,
      preload
    }),
    id: Components.id({
      peerInfo
    }),
    init: async () => {
      throw new AlreadyInitializedError();
    },
    // eslint-disable-line require-await
    isOnline: Components.isOnline({}),
    key: {
      export: Components.key.export({
        keychain
      }),
      gen: Components.key.gen({
        keychain
      }),
      import: Components.key.import({
        keychain
      }),
      info: Components.key.info({
        keychain
      }),
      list: Components.key.list({
        keychain
      }),
      rename: Components.key.rename({
        keychain
      }),
      rm: Components.key.rm({
        keychain
      })
    },
    ls: Components.ls({
      ipld,
      preload
    }),
    object,
    pin,
    refs,
    repo: {
      gc: Components.repo.gc({
        gcLock,
        pin,
        pinManager,
        refs,
        repo
      }),
      stat: Components.repo.stat({
        repo
      }),
      version: Components.repo.version({
        repo
      })
    },
    resolve,
    start: Components.start({
      apiManager,
      options: constructorOptions,
      blockService,
      gcLock,
      initOptions,
      ipld,
      keychain,
      peerInfo,
      pinManager,
      preload,
      print,
      repo
    }),
    stats: {
      bitswap: notStarted,
      bw: notStarted,
      repo: Components.repo.stat({
        repo
      })
    },
    stop: () => apiManager.api,
    swarm: {
      addrs: notStarted,
      connect: notStarted,
      disconnect: notStarted,
      localAddrs: Components.swarm.localAddrs({
        peerInfo
      }),
      peers: notStarted
    },
    version: Components.version({
      repo
    })
  };
  return api;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 612 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const IPFSRepo = __webpack_require__(83);

module.exports = options => {
  options = options || {};
  const repoPath = options.path || 'ipfs';
  return new IPFSRepo(repoPath, {
    autoMigrate: options.autoMigrate
  });
};

/***/ }),
/* 613 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const defaultMigrations = __webpack_require__(614);

const repoVersion = __webpack_require__(615);

const repoLock = __webpack_require__(655);

const errors = __webpack_require__(273);

const log = __webpack_require__(1)('repo-migrations:migrator');

exports.getCurrentRepoVersion = repoVersion.getVersion;
exports.errors = errors;
/**
 * Returns the version of latest migration.
 * If no migrations are present returns 0.
 *
 * @param {array?} migrations - Array of migrations to consider. If undefined, the bundled migrations are used. Mainly for testing purpose.
 * @returns {int}
 */

function getLatestMigrationVersion(migrations) {
  migrations = migrations || defaultMigrations;

  if (!Array.isArray(migrations) || migrations.length === 0) {
    return 0;
  }

  return migrations[migrations.length - 1].version;
}

exports.getLatestMigrationVersion = getLatestMigrationVersion;
/**
 * Main function to execute forward migrations.
 * It acquire lock on the provided path before doing any migrations.
 *
 * Signature of the progress callback is: function(migrationObject: object, currentMigrationNumber: int, totalMigrationsCount: int)
 *
 * @param {string} path - Path to initialized (!) JS-IPFS repo
 * @param {int} toVersion - Version to which the repo should be migrated.
 * @param {Object} options - Options for migration
 * @param {boolean?} options.ignoreLock - Won't lock the repo for applying the migrations. Use with caution.
 * @param {object?} options.repoOptions - Options that are passed to migrations, that can use them to correctly construct datastore. Options are same like for IPFSRepo.
 * @param {function?} options.onProgress - Callback which will be called after each executed migration to report progress
 * @param {boolean?} options.isDryRun - Allows to simulate the execution of the migrations without any effect.
 * @param {array?} options.migrations - Array of migrations to migrate. If undefined, the bundled migrations are used. Mainly for testing purpose.
 * @returns {Promise<void>}
 */

async function migrate(path, toVersion, {
  ignoreLock = false,
  repoOptions,
  onProgress,
  isDryRun = false,
  migrations
}) {
  migrations = migrations || defaultMigrations;

  onProgress = onProgress || (() => {});

  if (!path) {
    throw new errors.RequiredParameterError('Path argument is required!');
  }

  if (!toVersion) {
    throw new errors.RequiredParameterError('toVersion argument is required!');
  }

  if (!Number.isInteger(toVersion) || toVersion <= 0) {
    throw new errors.InvalidValueError('Version has to be positive integer!');
  }

  const currentVersion = await repoVersion.getVersion(path);

  if (currentVersion === toVersion) {
    log('Nothing to migrate.');
    return;
  }

  if (currentVersion > toVersion) {
    throw new errors.InvalidValueError("Current repo's version (".concat(currentVersion, ") is higher then toVersion (").concat(toVersion, "), you probably wanted to revert it?"));
  }

  verifyAvailableMigrations(migrations, currentVersion, toVersion);
  let lock;
  if (!isDryRun && !ignoreLock) lock = await repoLock.lock(currentVersion, path);

  try {
    let counter = 0;
    const totalMigrations = toVersion - currentVersion;

    for (const migration of migrations) {
      if (toVersion !== undefined && migration.version > toVersion) {
        break;
      }

      if (migration.version <= currentVersion) {
        continue;
      }

      counter++;
      log("Migrating version ".concat(migration.version));

      try {
        if (!isDryRun) await migration.migrate(path, repoOptions);
      } catch (e) {
        const lastSuccessfullyMigratedVersion = migration.version - 1;
        log("An exception was raised during execution of migration. Setting the repo's version to last successfully migrated version: ".concat(lastSuccessfullyMigratedVersion));
        await repoVersion.setVersion(path, lastSuccessfullyMigratedVersion);
        e.message = "During migration to version ".concat(migration.version, " exception was raised: ").concat(e.message);
        throw e;
      }

      onProgress(migration, counter, totalMigrations); // Reports on migration process

      log("Migrating to version ".concat(migration.version, " finished"));
    }

    if (!isDryRun) await repoVersion.setVersion(path, toVersion || getLatestMigrationVersion(migrations));
    log('Repo successfully migrated ', toVersion !== undefined ? "to version ".concat(toVersion, "!") : 'to latest version!');
  } finally {
    if (!isDryRun && !ignoreLock) await lock.close();
  }
}

exports.migrate = migrate;
/**
 * Main function to execute backward migration (reversion).
 * It acquire lock on the provided path before doing any migrations.
 *
 * Signature of the progress callback is: function(migrationObject: object, currentMigrationNumber: int, totalMigrationsCount: int)
 *
 * @param {string} path - Path to initialized (!) JS-IPFS repo
 * @param {int} toVersion - Version to which the repo will be reverted.
 * @param {Object} options - Options for the reversion
 * @param {function?} options.onProgress - Callback which will be called after each reverted migration to report progress
 * @param {object?} options.repoOptions - Options that are passed to migrations, that can use them to correctly construct datastore. Options are same like for IPFSRepo.
 * @param {boolean?} options.isDryRun - Allows to simulate the execution of the reversion without any effects. Make sense to utilize onProgress with this argument.
 * @param {boolean?} options.ignoreLock - Won't lock the repo for reverting the migrations. Use with caution.
 * @param {array?} options.migrations - Array of migrations to migrate. If undefined, the bundled migrations are used. Mainly for testing purpose.
 * @returns {Promise<void>}
 */

async function revert(path, toVersion, {
  ignoreLock = false,
  repoOptions,
  onProgress,
  isDryRun = false,
  migrations
}) {
  migrations = migrations || defaultMigrations;

  onProgress = onProgress || (() => {});

  if (!path) {
    throw new errors.RequiredParameterError('Path argument is required!');
  }

  if (!toVersion) {
    throw new errors.RequiredParameterError('When reverting migrations, you have to specify to which version to revert!');
  }

  if (!Number.isInteger(toVersion) || toVersion <= 0) {
    throw new errors.InvalidValueError('Version has to be positive integer!');
  }

  const currentVersion = await repoVersion.getVersion(path);

  if (currentVersion === toVersion) {
    log('Nothing to revert.');
    return;
  }

  if (currentVersion < toVersion) {
    throw new errors.InvalidValueError("Current repo's version (".concat(currentVersion, ") is lower then toVersion (").concat(toVersion, "), you probably wanted to migrate it?"));
  }

  verifyAvailableMigrations(migrations, toVersion, currentVersion, true);
  let lock;
  if (!isDryRun && !ignoreLock) lock = await repoLock.lock(currentVersion, path);
  log("Reverting from version ".concat(currentVersion, " to ").concat(toVersion));

  try {
    let counter = 0;
    const totalMigrations = currentVersion - toVersion;
    const reversedMigrationArray = migrations.slice().reverse();

    for (const migration of reversedMigrationArray) {
      if (migration.version <= toVersion) {
        break;
      }

      if (migration.version > currentVersion) {
        continue;
      }

      counter++;
      log("Reverting migration version ".concat(migration.version));

      try {
        if (!isDryRun) await migration.revert(path, repoOptions);
      } catch (e) {
        const lastSuccessfullyRevertedVersion = migration.version;
        log("An exception was raised during execution of migration. Setting the repo's version to last successfully reverted version: ".concat(lastSuccessfullyRevertedVersion));
        await repoVersion.setVersion(path, lastSuccessfullyRevertedVersion);
        e.message = "During reversion to version ".concat(migration.version, " exception was raised: ").concat(e.message);
        throw e;
      }

      onProgress(migration, counter, totalMigrations); // Reports on migration process

      log("Reverting to version ".concat(migration.version, " finished"));
    }

    if (!isDryRun) await repoVersion.setVersion(path, toVersion);
    log("All migrations successfully reverted to version ".concat(toVersion, "!"));
  } finally {
    if (!isDryRun && !ignoreLock) await lock.close();
  }
}

exports.revert = revert;
/**
 * Function checks if all migrations in given range are available.
 *
 * @param {array} migrations
 * @param {int} fromVersion
 * @param {int} toVersion
 * @param {boolean} checkReversibility - Will additionally checks if all the migrations in the range are reversible
 * @returns {void}
 */

function verifyAvailableMigrations(migrations, fromVersion, toVersion, checkReversibility = false) {
  let migrationCounter = 0;

  for (const migration of migrations) {
    if (migration.version > toVersion) {
      break;
    }

    if (migration.version > fromVersion) {
      if (checkReversibility && !migration.revert) {
        throw new errors.NonReversibleMigrationError("It is not possible to revert to version ".concat(fromVersion, " because migration version ").concat(migration.version, " is not reversible. Cancelling reversion."));
      }

      migrationCounter++;
    }
  }

  if (migrationCounter !== toVersion - fromVersion) {
    throw new errors.InvalidValueError("The ipfs-repo-migrations package does not have all migration to migrate from version ".concat(fromVersion, " to ").concat(toVersion));
  }
}

/***/ }),
/* 614 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // Do not modify this file manually as it will be overridden when running 'add' CLI command.
// Modify migration-templates.js file

const emptyMigration = {
  description: 'Empty migration.',
  migrate: () => {},
  revert: () => {},
  empty: true
};
module.exports = [Object.assign({}, emptyMigration, {
  version: 7,
  revert: undefined
}), Object.assign({}, emptyMigration, {
  version: 6,
  revert: undefined
}), Object.assign({}, emptyMigration, {
  version: 5,
  revert: undefined
}), Object.assign({}, emptyMigration, {
  version: 4,
  revert: undefined
}), Object.assign({}, emptyMigration, {
  version: 3,
  revert: undefined
}), Object.assign({}, emptyMigration, {
  version: 2,
  revert: undefined
}), Object.assign({}, emptyMigration, {
  version: 1,
  revert: undefined
})];

/***/ }),
/* 615 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const errors = __webpack_require__(273);

const repoInit = __webpack_require__(616);

const Datastore = __webpack_require__(274);

const Key = __webpack_require__(14).Key;

const versionKey = new Key('version');
exports.getVersion = getVersion;
/**
 * Function that has responsibility to retrieve version of repo from its root datastore's instance.
 * This function needs to be cross-repo-version functional to be able to fetch any version number,
 * even in case of change of repo's versioning.
 *
 * @param {string} path
 * @returns {Promise<int>}
 */

async function getVersion(path) {
  if (!(await repoInit.isRepoInitialized(path))) {
    throw new errors.NotInitializedRepoError("Repo in path ".concat(path, " is not initialized!"));
  }

  const store = new Datastore(path, {
    extension: '',
    createIfMissing: false
  });
  await store.open();
  const version = parseInt((await store.get(versionKey)));
  await store.close();
  return version;
}
/**
 * Function for setting a version in cross-repo-version manner.
 *
 * @param {string} path
 * @param {int} version
 * @returns {Promise<void>}
 */


async function setVersion(path, version) {
  const store = new Datastore(path, {
    extension: '',
    createIfMissing: false
  });
  await store.open();
  await store.put(versionKey, Buffer.from(String(version)));
  await store.close();
}

exports.setVersion = setVersion;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 616 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const Datastore = __webpack_require__(274);

const log = __webpack_require__(1)('repo-migrations:repo:init');

const Key = __webpack_require__(14).Key;

const versionKey = new Key('/version');
const configKey = new Key('/config');

exports.isRepoInitialized = async function isRepoInitialized(path) {
  let root;

  try {
    root = new Datastore(path, {
      extension: '',
      createIfMissing: false
    });
    const versionCheck = await root.has(versionKey);
    const configCheck = await root.has(configKey);

    if (!versionCheck || !configCheck) {
      log("Version entry present: ".concat(versionCheck));
      log("Config entry present: ".concat(configCheck));
      return false;
    }

    return true;
  } catch (e) {
    log('While checking if repo is initialized error was thrown: ' + e.message);
    return false;
  } finally {
    if (root !== undefined) await root.close();
  }
};

/***/ }),
/* 617 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* @flow */


const Key = __webpack_require__(275);

const MemoryDatastore = __webpack_require__(618);

const utils = __webpack_require__(276);

const Errors = __webpack_require__(277);

exports.Key = Key;
exports.MemoryDatastore = MemoryDatastore;
exports.utils = utils;
exports.Errors = Errors;
/* ::
// -- Basics

export type Callback<Value> = (err: ?Error, ?Value) => void

// eslint-disable-next-line
export interface Datastore<Value> {
  // eslint-disable-next-line
  put(Key, Value, Callback<void>): void;
  // eslint-disable-next-line
  get(Key, Callback<Value>): void;
  has(Key, Callback<bool>): void;
  delete(Key, Callback<void>): void;
  // eslint-disable-next-line
  query(Query<Value>): QueryResult<Value>;

  // eslint-disable-next-line
  batch(): Batch<Value>;
  close(Callback<void>): void;
  open(Callback<void>): void;
}

// -- Batch
export type Batch<Value> = {
  put(Key, Value): void,
  delete(Key): void,
  commit(Callback<void>): void
}

// -- Query

export type Query<Value> = {
  prefix?: string,
  filters?: Array<Filter<Value>>,
  orders?: Array<Order<Value>>,
  limit?: number,
  offset?: number,
  keysOnly?: bool
}

export type PullEnd = bool | Error
export type PullSource<Val> = (end: ?PullEnd, (end: ?PullEnd, Val) => void) => void

export type QueryResult<Value> = PullSource<QueryEntry<Value>>

export type QueryEntry<Value> = {
  key: Key,
  value?: Value
}

export type Filter<Value> = (QueryEntry<Value>, Callback<bool>) => void

export type Order<Value> = (QueryResult<Value>, Callback<QueryResult<Value>>) => void

*/

/***/ }),
/* 618 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* @flow */

/* :: import type {Batch, Query, QueryResult, Callback} from './' */

const {
  filter,
  sortAll,
  take,
  map
} = __webpack_require__(276);

const Key = __webpack_require__(275); // Errors


const Errors = __webpack_require__(277);

class MemoryDatastore {
  /* :: data: {[key: string]: Buffer} */
  constructor() {
    this.data = {};
  }

  async open()
  /* : Promise */
  {}

  async put(key
  /* : Key */
  , val
  /* : Buffer */
  )
  /* : Promise */
  {
    this.data[key.toString()] = val;
  }

  async get(key
  /* : Key */
  )
  /* : Promise<Buffer> */
  {
    const exists = await this.has(key);
    if (!exists) throw Errors.notFoundError();
    return this.data[key.toString()];
  }

  async has(key
  /* : Key */
  )
  /* : Promise<Boolean> */
  {
    return this.data[key.toString()] !== undefined;
  }

  async delete(key
  /* : Key */
  )
  /* : Promise */
  {
    delete this.data[key.toString()];
  }

  batch()
  /* : Batch<Buffer> */
  {
    let puts = [];
    let dels = [];
    return {
      put(key
      /* : Key */
      , value
      /* : Buffer */
      )
      /* : void */
      {
        puts.push([key, value]);
      },

      delete(key
      /* : Key */
      )
      /* : void */
      {
        dels.push(key);
      },

      commit: async () =>
      /* : Promise */
      {
        puts.forEach(v => {
          this.data[v[0].toString()] = v[1];
        });
        puts = [];
        dels.forEach(key => {
          delete this.data[key.toString()];
        });
        dels = [];
      }
    };
  }

  query(q
  /* : Query<Buffer> */
  )
  /* : Iterator */
  {
    let it = Object.entries(this.data);
    it = map(it, entry => ({
      key: new Key(entry[0]),
      value: entry[1]
    }));

    if (q.prefix != null) {
      it = filter(it, e => e.key.toString().startsWith(q.prefix));
    }

    if (Array.isArray(q.filters)) {
      it = q.filters.reduce((it, f) => filter(it, f), it);
    }

    if (Array.isArray(q.orders)) {
      it = q.orders.reduce((it, f) => sortAll(it, f), it);
    }

    if (q.offset != null) {
      let i = 0;
      it = filter(it, () => i++ >= q.offset);
    }

    if (q.limit != null) {
      it = take(it, q.limit);
    }

    if (q.keysOnly === true) {
      it = map(it, e => ({
        key: e.key
      }));
    }

    return it;
  }

  async close()
  /* : Promise */
  {}

}

module.exports = MemoryDatastore;

/***/ }),
/* 619 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function createError(msg, code, props) {
  var err = msg instanceof Error ? msg : new Error(msg);
  var key;

  if (typeof code === 'object') {
    props = code;
  } else if (code != null) {
    err.code = code;
  }

  if (props) {
    for (key in props) {
      err[key] = props[key];
    }
  }

  return err;
}

module.exports = createError;

/***/ }),
/* 620 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var levelup = __webpack_require__(621);

var encode = __webpack_require__(638);

function packager(leveldown) {
  function Level(location, options, callback) {
    if (typeof location === 'function') {
      callback = location;
    } else if (typeof options === 'function') {
      callback = options;
    }

    if (!isObject(options)) {
      options = isObject(location) ? location : {};
    }

    return levelup(encode(leveldown(location, options), options), options, callback);
  }

  function isObject(o) {
    return typeof o === 'object' && o !== null;
  }

  ['destroy', 'repair'].forEach(function (m) {
    if (typeof leveldown[m] === 'function') {
      Level[m] = function () {
        leveldown[m].apply(leveldown, arguments);
      };
    }
  });
  Level.errors = levelup.errors;
  return Level;
}

module.exports = packager;

/***/ }),
/* 621 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var EventEmitter = __webpack_require__(11).EventEmitter;

var inherits = __webpack_require__(98).inherits;

var extend = __webpack_require__(65);

var DeferredLevelDOWN = __webpack_require__(622);

var IteratorStream = __webpack_require__(626);

var Batch = __webpack_require__(634);

var errors = __webpack_require__(165);

var supports = __webpack_require__(162);

var assert = __webpack_require__(13);

var promisify = __webpack_require__(288);

var getCallback = __webpack_require__(108).getCallback;

var getOptions = __webpack_require__(108).getOptions;

var WriteError = errors.WriteError;
var ReadError = errors.ReadError;
var NotFoundError = errors.NotFoundError;
var OpenError = errors.OpenError;
var InitializationError = errors.InitializationError; // Possible AbstractLevelDOWN#status values:
//  - 'new'     - newly created, not opened or closed
//  - 'opening' - waiting for the database to be opened, post open()
//  - 'open'    - successfully opened the database, available for use
//  - 'closing' - waiting for the database to be closed, post close()
//  - 'closed'  - database has been successfully closed, should not be
//                 used except for another open() operation

function LevelUP(db, options, callback) {
  if (!(this instanceof LevelUP)) {
    return new LevelUP(db, options, callback);
  }

  var error;
  var self = this;
  EventEmitter.call(this);
  this.setMaxListeners(Infinity);

  if (typeof options === 'function') {
    callback = options;
    options = {};
  }

  options = options || {};

  if (!db || typeof db !== 'object') {
    error = new InitializationError('First argument must be an abstract-leveldown compliant store');

    if (typeof callback === 'function') {
      return process.nextTick(callback, error);
    }

    throw error;
  }

  assert.strictEqual(typeof db.status, 'string', '.status required, old abstract-leveldown');
  this.options = getOptions(options);
  this._db = db;
  this.db = new DeferredLevelDOWN(db);
  this.open(callback || function (err) {
    if (err) self.emit('error', err);
  }); // Create manifest based on deferred-leveldown's

  this.supports = supports(this.db.supports, {
    status: false,
    deferredOpen: true,
    openCallback: true,
    promises: true,
    streams: true
  }); // Experimental: enrich levelup interface

  Object.keys(this.supports.additionalMethods).forEach(function (method) {
    if (this[method] != null) return; // Don't do this.db[method].bind() because this.db is dynamic.

    this[method] = function () {
      return this.db[method].apply(this.db, arguments);
    };
  }, this);
}

LevelUP.prototype.emit = EventEmitter.prototype.emit;
LevelUP.prototype.once = EventEmitter.prototype.once;
inherits(LevelUP, EventEmitter);

LevelUP.prototype.open = function (opts, callback) {
  var self = this;
  var promise;

  if (typeof opts === 'function') {
    callback = opts;
    opts = null;
  }

  if (!callback) {
    callback = promisify();
    promise = callback.promise;
  }

  if (!opts) {
    opts = this.options;
  }

  if (this.isOpen()) {
    process.nextTick(callback, null, self);
    return promise;
  }

  if (this._isOpening()) {
    this.once('open', function () {
      callback(null, self);
    });
    return promise;
  }

  this.emit('opening');
  this.db.open(opts, function (err) {
    if (err) {
      return callback(new OpenError(err));
    }

    self.db = self._db;
    callback(null, self);
    self.emit('open');
    self.emit('ready');
  });
  return promise;
};

LevelUP.prototype.close = function (callback) {
  var self = this;
  var promise;

  if (!callback) {
    callback = promisify();
    promise = callback.promise;
  }

  if (this.isOpen()) {
    this.db.close(function () {
      self.emit('closed');
      callback.apply(null, arguments);
    });
    this.emit('closing');
    this.db = new DeferredLevelDOWN(this._db);
  } else if (this.isClosed()) {
    process.nextTick(callback);
  } else if (this.db.status === 'closing') {
    this.once('closed', callback);
  } else if (this._isOpening()) {
    this.once('open', function () {
      self.close(callback);
    });
  }

  return promise;
};

LevelUP.prototype.isOpen = function () {
  return this.db.status === 'open';
};

LevelUP.prototype._isOpening = function () {
  return this.db.status === 'opening';
};

LevelUP.prototype.isClosed = function () {
  return /^clos|new/.test(this.db.status);
};

LevelUP.prototype.get = function (key, options, callback) {
  if (key === null || key === undefined) {
    throw new ReadError('get() requires a key argument');
  }

  var promise;
  callback = getCallback(options, callback);

  if (!callback) {
    callback = promisify();
    promise = callback.promise;
  }

  if (maybeError(this, callback)) {
    return promise;
  }

  options = getOptions(options);
  this.db.get(key, options, function (err, value) {
    if (err) {
      if (/notfound/i.test(err) || err.notFound) {
        err = new NotFoundError('Key not found in database [' + key + ']', err);
      } else {
        err = new ReadError(err);
      }

      return callback(err);
    }

    callback(null, value);
  });
  return promise;
};

LevelUP.prototype.put = function (key, value, options, callback) {
  if (key === null || key === undefined) {
    throw new WriteError('put() requires a key argument');
  }

  var self = this;
  var promise;
  callback = getCallback(options, callback);

  if (!callback) {
    callback = promisify();
    promise = callback.promise;
  }

  if (maybeError(this, callback)) {
    return promise;
  }

  options = getOptions(options);
  this.db.put(key, value, options, function (err) {
    if (err) {
      return callback(new WriteError(err));
    }

    self.emit('put', key, value);
    callback();
  });
  return promise;
};

LevelUP.prototype.del = function (key, options, callback) {
  if (key === null || key === undefined) {
    throw new WriteError('del() requires a key argument');
  }

  var self = this;
  var promise;
  callback = getCallback(options, callback);

  if (!callback) {
    callback = promisify();
    promise = callback.promise;
  }

  if (maybeError(this, callback)) {
    return promise;
  }

  options = getOptions(options);
  this.db.del(key, options, function (err) {
    if (err) {
      return callback(new WriteError(err));
    }

    self.emit('del', key);
    callback();
  });
  return promise;
};

LevelUP.prototype.batch = function (arr, options, callback) {
  if (!arguments.length) {
    return new Batch(this);
  }

  if (!Array.isArray(arr)) {
    throw new WriteError('batch() requires an array argument');
  }

  var self = this;
  var promise;
  callback = getCallback(options, callback);

  if (!callback) {
    callback = promisify();
    promise = callback.promise;
  }

  if (maybeError(this, callback)) {
    return promise;
  }

  options = getOptions(options);
  this.db.batch(arr, options, function (err) {
    if (err) {
      return callback(new WriteError(err));
    }

    self.emit('batch', arr);
    callback();
  });
  return promise;
};

LevelUP.prototype.iterator = function (options) {
  return this.db.iterator(options);
};

LevelUP.prototype.clear = function (options, callback) {
  var self = this;
  var promise;
  callback = getCallback(options, callback);
  options = getOptions(options);

  if (!callback) {
    callback = promisify();
    promise = callback.promise;
  }

  if (maybeError(this, callback)) {
    return promise;
  }

  this.db.clear(options, function (err) {
    if (err) {
      return callback(new WriteError(err));
    }

    self.emit('clear', options);
    callback();
  });
  return promise;
};

LevelUP.prototype.readStream = LevelUP.prototype.createReadStream = function (options) {
  options = extend({
    keys: true,
    values: true
  }, options);

  if (typeof options.limit !== 'number') {
    options.limit = -1;
  }

  return new IteratorStream(this.db.iterator(options), options);
};

LevelUP.prototype.keyStream = LevelUP.prototype.createKeyStream = function (options) {
  return this.createReadStream(extend(options, {
    keys: true,
    values: false
  }));
};

LevelUP.prototype.valueStream = LevelUP.prototype.createValueStream = function (options) {
  return this.createReadStream(extend(options, {
    keys: false,
    values: true
  }));
};

LevelUP.prototype.toString = function () {
  return 'LevelUP';
};

LevelUP.prototype.type = 'levelup';

function maybeError(db, callback) {
  if (!db._isOpening() && !db.isOpen()) {
    process.nextTick(callback, new ReadError('Database is not open'));
    return true;
  }
}

LevelUP.errors = errors;
module.exports = LevelUP.default = LevelUP;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5)))

/***/ }),
/* 622 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var AbstractLevelDOWN = __webpack_require__(279).AbstractLevelDOWN;

var inherits = __webpack_require__(4);

var DeferredIterator = __webpack_require__(625);

var deferrables = 'put get del batch clear'.split(' ');
var optionalDeferrables = 'approximateSize compactRange'.split(' ');

function DeferredLevelDOWN(db) {
  AbstractLevelDOWN.call(this, db.supports || {}); // TODO (future major): remove this fallback; db must have manifest that
  // declares approximateSize and compactRange in additionalMethods.

  optionalDeferrables.forEach(function (m) {
    if (typeof db[m] === 'function' && !this.supports.additionalMethods[m]) {
      this.supports.additionalMethods[m] = true;
    }
  }, this);
  this._db = db;
  this._operations = [];
  closed(this);
}

inherits(DeferredLevelDOWN, AbstractLevelDOWN);
DeferredLevelDOWN.prototype.type = 'deferred-leveldown';

DeferredLevelDOWN.prototype._open = function (options, callback) {
  var self = this;

  this._db.open(options, function (err) {
    if (err) return callback(err);

    self._operations.forEach(function (op) {
      if (op.iterator) {
        op.iterator.setDb(self._db);
      } else {
        self._db[op.method].apply(self._db, op.args);
      }
    });

    self._operations = [];
    open(self);
    callback();
  });
};

DeferredLevelDOWN.prototype._close = function (callback) {
  var self = this;

  this._db.close(function (err) {
    if (err) return callback(err);
    closed(self);
    callback();
  });
};

function open(self) {
  deferrables.concat('iterator').forEach(function (m) {
    self['_' + m] = function () {
      return this._db[m].apply(this._db, arguments);
    };
  });
  Object.keys(self.supports.additionalMethods).forEach(function (m) {
    self[m] = function () {
      return this._db[m].apply(this._db, arguments);
    };
  });
}

function closed(self) {
  deferrables.forEach(function (m) {
    self['_' + m] = function () {
      this._operations.push({
        method: m,
        args: arguments
      });
    };
  });
  Object.keys(self.supports.additionalMethods).forEach(function (m) {
    self[m] = function () {
      this._operations.push({
        method: m,
        args: arguments
      });
    };
  });

  self._iterator = function (options) {
    var it = new DeferredIterator(self, options);

    this._operations.push({
      iterator: it
    });

    return it;
  };
}

DeferredLevelDOWN.prototype._serializeKey = function (key) {
  return key;
};

DeferredLevelDOWN.prototype._serializeValue = function (value) {
  return value;
};

module.exports = DeferredLevelDOWN;
module.exports.DeferredIterator = DeferredIterator;

/***/ }),
/* 623 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, Buffer) {

var xtend = __webpack_require__(65);

var supports = __webpack_require__(162);

var AbstractIterator = __webpack_require__(280);

var AbstractChainedBatch = __webpack_require__(281);

var hasOwnProperty = Object.prototype.hasOwnProperty;
var rangeOptions = 'start end gt gte lt lte'.split(' ');

function AbstractLevelDOWN(manifest) {
  this.status = 'new'; // TODO (next major): make this mandatory

  this.supports = supports(manifest, {
    status: true
  });
}

AbstractLevelDOWN.prototype.open = function (options, callback) {
  var self = this;
  var oldStatus = this.status;
  if (typeof options === 'function') callback = options;

  if (typeof callback !== 'function') {
    throw new Error('open() requires a callback argument');
  }

  if (typeof options !== 'object' || options === null) options = {};
  options.createIfMissing = options.createIfMissing !== false;
  options.errorIfExists = !!options.errorIfExists;
  this.status = 'opening';

  this._open(options, function (err) {
    if (err) {
      self.status = oldStatus;
      return callback(err);
    }

    self.status = 'open';
    callback();
  });
};

AbstractLevelDOWN.prototype._open = function (options, callback) {
  process.nextTick(callback);
};

AbstractLevelDOWN.prototype.close = function (callback) {
  var self = this;
  var oldStatus = this.status;

  if (typeof callback !== 'function') {
    throw new Error('close() requires a callback argument');
  }

  this.status = 'closing';

  this._close(function (err) {
    if (err) {
      self.status = oldStatus;
      return callback(err);
    }

    self.status = 'closed';
    callback();
  });
};

AbstractLevelDOWN.prototype._close = function (callback) {
  process.nextTick(callback);
};

AbstractLevelDOWN.prototype.get = function (key, options, callback) {
  if (typeof options === 'function') callback = options;

  if (typeof callback !== 'function') {
    throw new Error('get() requires a callback argument');
  }

  var err = this._checkKey(key);

  if (err) return process.nextTick(callback, err);
  key = this._serializeKey(key);
  if (typeof options !== 'object' || options === null) options = {};
  options.asBuffer = options.asBuffer !== false;

  this._get(key, options, callback);
};

AbstractLevelDOWN.prototype._get = function (key, options, callback) {
  process.nextTick(function () {
    callback(new Error('NotFound'));
  });
};

AbstractLevelDOWN.prototype.put = function (key, value, options, callback) {
  if (typeof options === 'function') callback = options;

  if (typeof callback !== 'function') {
    throw new Error('put() requires a callback argument');
  }

  var err = this._checkKey(key) || this._checkValue(value);

  if (err) return process.nextTick(callback, err);
  key = this._serializeKey(key);
  value = this._serializeValue(value);
  if (typeof options !== 'object' || options === null) options = {};

  this._put(key, value, options, callback);
};

AbstractLevelDOWN.prototype._put = function (key, value, options, callback) {
  process.nextTick(callback);
};

AbstractLevelDOWN.prototype.del = function (key, options, callback) {
  if (typeof options === 'function') callback = options;

  if (typeof callback !== 'function') {
    throw new Error('del() requires a callback argument');
  }

  var err = this._checkKey(key);

  if (err) return process.nextTick(callback, err);
  key = this._serializeKey(key);
  if (typeof options !== 'object' || options === null) options = {};

  this._del(key, options, callback);
};

AbstractLevelDOWN.prototype._del = function (key, options, callback) {
  process.nextTick(callback);
};

AbstractLevelDOWN.prototype.batch = function (array, options, callback) {
  if (!arguments.length) return this._chainedBatch();
  if (typeof options === 'function') callback = options;
  if (typeof array === 'function') callback = array;

  if (typeof callback !== 'function') {
    throw new Error('batch(array) requires a callback argument');
  }

  if (!Array.isArray(array)) {
    return process.nextTick(callback, new Error('batch(array) requires an array argument'));
  }

  if (array.length === 0) {
    return process.nextTick(callback);
  }

  if (typeof options !== 'object' || options === null) options = {};
  var serialized = new Array(array.length);

  for (var i = 0; i < array.length; i++) {
    if (typeof array[i] !== 'object' || array[i] === null) {
      return process.nextTick(callback, new Error('batch(array) element must be an object and not `null`'));
    }

    var e = xtend(array[i]);

    if (e.type !== 'put' && e.type !== 'del') {
      return process.nextTick(callback, new Error("`type` must be 'put' or 'del'"));
    }

    var err = this._checkKey(e.key);

    if (err) return process.nextTick(callback, err);
    e.key = this._serializeKey(e.key);

    if (e.type === 'put') {
      var valueErr = this._checkValue(e.value);

      if (valueErr) return process.nextTick(callback, valueErr);
      e.value = this._serializeValue(e.value);
    }

    serialized[i] = e;
  }

  this._batch(serialized, options, callback);
};

AbstractLevelDOWN.prototype._batch = function (array, options, callback) {
  process.nextTick(callback);
};

AbstractLevelDOWN.prototype.clear = function (options, callback) {
  if (typeof options === 'function') {
    callback = options;
  } else if (typeof callback !== 'function') {
    throw new Error('clear() requires a callback argument');
  }

  options = cleanRangeOptions(this, options);
  options.reverse = !!options.reverse;
  options.limit = 'limit' in options ? options.limit : -1;

  this._clear(options, callback);
};

AbstractLevelDOWN.prototype._clear = function (options, callback) {
  // Avoid setupIteratorOptions, would serialize range options a second time.
  options.keys = true;
  options.values = false;
  options.keyAsBuffer = true;
  options.valueAsBuffer = true;

  var iterator = this._iterator(options);

  var emptyOptions = {};
  var self = this;

  var next = function next(err) {
    if (err) {
      return iterator.end(function () {
        callback(err);
      });
    }

    iterator.next(function (err, key) {
      if (err) return next(err);
      if (key === undefined) return iterator.end(callback); // This could be optimized by using a batch, but the default _clear
      // is not meant to be fast. Implementations have more room to optimize
      // if they override _clear. Note: using _del bypasses key serialization.

      self._del(key, emptyOptions, next);
    });
  };

  next();
};

AbstractLevelDOWN.prototype._setupIteratorOptions = function (options) {
  options = cleanRangeOptions(this, options);
  options.reverse = !!options.reverse;
  options.keys = options.keys !== false;
  options.values = options.values !== false;
  options.limit = 'limit' in options ? options.limit : -1;
  options.keyAsBuffer = options.keyAsBuffer !== false;
  options.valueAsBuffer = options.valueAsBuffer !== false;
  return options;
};

function cleanRangeOptions(db, options) {
  var result = {};

  for (var k in options) {
    if (!hasOwnProperty.call(options, k)) continue;
    var opt = options[k];

    if (isRangeOption(k)) {
      // Note that we don't reject nullish and empty options here. While
      // those types are invalid as keys, they are valid as range options.
      opt = db._serializeKey(opt);
    }

    result[k] = opt;
  }

  return result;
}

function isRangeOption(k) {
  return rangeOptions.indexOf(k) !== -1;
}

AbstractLevelDOWN.prototype.iterator = function (options) {
  if (typeof options !== 'object' || options === null) options = {};
  options = this._setupIteratorOptions(options);
  return this._iterator(options);
};

AbstractLevelDOWN.prototype._iterator = function (options) {
  return new AbstractIterator(this);
};

AbstractLevelDOWN.prototype._chainedBatch = function () {
  return new AbstractChainedBatch(this);
};

AbstractLevelDOWN.prototype._serializeKey = function (key) {
  return key;
};

AbstractLevelDOWN.prototype._serializeValue = function (value) {
  return value;
};

AbstractLevelDOWN.prototype._checkKey = function (key) {
  if (key === null || key === undefined) {
    return new Error('key cannot be `null` or `undefined`');
  } else if (Buffer.isBuffer(key) && key.length === 0) {
    return new Error('key cannot be an empty Buffer');
  } else if (key === '') {
    return new Error('key cannot be an empty String');
  } else if (Array.isArray(key) && key.length === 0) {
    return new Error('key cannot be an empty Array');
  }
};

AbstractLevelDOWN.prototype._checkValue = function (value) {
  if (value === null || value === undefined) {
    return new Error('value cannot be `null` or `undefined`');
  }
};

module.exports = AbstractLevelDOWN;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5), __webpack_require__(0).Buffer))

/***/ }),
/* 624 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = extend;
var hasOwnProperty = Object.prototype.hasOwnProperty;

function extend(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
}

/***/ }),
/* 625 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var AbstractIterator = __webpack_require__(279).AbstractIterator;

var inherits = __webpack_require__(4);

function DeferredIterator(db, options) {
  AbstractIterator.call(this, db);
  this._options = options;
  this._iterator = null;
  this._operations = [];
}

inherits(DeferredIterator, AbstractIterator);

DeferredIterator.prototype.setDb = function (db) {
  var it = this._iterator = db.iterator(this._options);

  this._operations.forEach(function (op) {
    it[op.method].apply(it, op.args);
  });
};

DeferredIterator.prototype._operation = function (method, args) {
  if (this._iterator) return this._iterator[method].apply(this._iterator, args);

  this._operations.push({
    method: method,
    args: args
  });
};

'next end'.split(' ').forEach(function (m) {
  DeferredIterator.prototype['_' + m] = function () {
    this._operation(m, arguments);
  };
}); // Must defer seek() rather than _seek() because it requires db._serializeKey to be available

DeferredIterator.prototype.seek = function () {
  this._operation('seek', arguments);
};

module.exports = DeferredIterator;

/***/ }),
/* 626 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(4);

var Readable = __webpack_require__(163).Readable;

var extend = __webpack_require__(65);

module.exports = ReadStream;
inherits(ReadStream, Readable);

function ReadStream(iterator, options) {
  if (!(this instanceof ReadStream)) return new ReadStream(iterator, options);
  options = options || {};
  Readable.call(this, extend(options, {
    objectMode: true
  }));
  this._iterator = iterator;
  this._options = options;
  this.on('end', this.destroy.bind(this, null, null));
}

ReadStream.prototype._read = function () {
  var self = this;
  var options = this._options;
  if (this.destroyed) return;

  this._iterator.next(function (err, key, value) {
    if (self.destroyed) return;
    if (err) return self.destroy(err);

    if (key === undefined && value === undefined) {
      self.push(null);
    } else if (options.keys !== false && options.values === false) {
      self.push(key);
    } else if (options.keys === false && options.values !== false) {
      self.push(value);
    } else {
      self.push({
        key: key,
        value: value
      });
    }
  });
};

ReadStream.prototype._destroy = function (err, callback) {
  this._iterator.end(function (err2) {
    callback(err || err2);
  });
};

/***/ }),
/* 627 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 628 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var _require = __webpack_require__(0),
    Buffer = _require.Buffer;

var _require2 = __webpack_require__(629),
    inspect = _require2.inspect;

var custom = inspect && inspect.custom || 'inspect';

function copyBuffer(src, target, offset) {
  Buffer.prototype.copy.call(src, target, offset);
}

module.exports =
/*#__PURE__*/
function () {
  function BufferList() {
    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  var _proto = BufferList.prototype;

  _proto.push = function push(v) {
    var entry = {
      data: v,
      next: null
    };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  _proto.unshift = function unshift(v) {
    var entry = {
      data: v,
      next: this.head
    };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  _proto.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  _proto.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  _proto.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;

    while (p = p.next) {
      ret += s + p.data;
    }

    return ret;
  };

  _proto.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;

    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }

    return ret;
  } // Consumes a specified amount of bytes or characters from the buffered data.
  ;

  _proto.consume = function consume(n, hasStrings) {
    var ret;

    if (n < this.head.data.length) {
      // `slice` is the same for buffers and strings.
      ret = this.head.data.slice(0, n);
      this.head.data = this.head.data.slice(n);
    } else if (n === this.head.data.length) {
      // First chunk is a perfect match.
      ret = this.shift();
    } else {
      // Result spans more than one buffer.
      ret = hasStrings ? this._getString(n) : this._getBuffer(n);
    }

    return ret;
  };

  _proto.first = function first() {
    return this.head.data;
  } // Consumes a specified amount of characters from the buffered data.
  ;

  _proto._getString = function _getString(n) {
    var p = this.head;
    var c = 1;
    var ret = p.data;
    n -= ret.length;

    while (p = p.next) {
      var str = p.data;
      var nb = n > str.length ? str.length : n;
      if (nb === str.length) ret += str;else ret += str.slice(0, n);
      n -= nb;

      if (n === 0) {
        if (nb === str.length) {
          ++c;
          if (p.next) this.head = p.next;else this.head = this.tail = null;
        } else {
          this.head = p;
          p.data = str.slice(nb);
        }

        break;
      }

      ++c;
    }

    this.length -= c;
    return ret;
  } // Consumes a specified amount of bytes from the buffered data.
  ;

  _proto._getBuffer = function _getBuffer(n) {
    var ret = Buffer.allocUnsafe(n);
    var p = this.head;
    var c = 1;
    p.data.copy(ret);
    n -= p.data.length;

    while (p = p.next) {
      var buf = p.data;
      var nb = n > buf.length ? buf.length : n;
      buf.copy(ret, ret.length - n, 0, nb);
      n -= nb;

      if (n === 0) {
        if (nb === buf.length) {
          ++c;
          if (p.next) this.head = p.next;else this.head = this.tail = null;
        } else {
          this.head = p;
          p.data = buf.slice(nb);
        }

        break;
      }

      ++c;
    }

    this.length -= c;
    return ret;
  } // Make sure the linked list only shows the minimal necessary information.
  ;

  _proto[custom] = function (_, options) {
    return inspect(this, _objectSpread({}, options, {
      // Only inspect one level.
      depth: 0,
      // It should not recurse.
      customInspect: false
    }));
  };

  return BufferList;
}();

/***/ }),
/* 629 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 630 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var _Object$setPrototypeO;

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var finished = __webpack_require__(164);

var kLastResolve = Symbol('lastResolve');
var kLastReject = Symbol('lastReject');
var kError = Symbol('error');
var kEnded = Symbol('ended');
var kLastPromise = Symbol('lastPromise');
var kHandlePromise = Symbol('handlePromise');
var kStream = Symbol('stream');

function createIterResult(value, done) {
  return {
    value: value,
    done: done
  };
}

function readAndResolve(iter) {
  var resolve = iter[kLastResolve];

  if (resolve !== null) {
    var data = iter[kStream].read(); // we defer if data is null
    // we can be expecting either 'end' or
    // 'error'

    if (data !== null) {
      iter[kLastPromise] = null;
      iter[kLastResolve] = null;
      iter[kLastReject] = null;
      resolve(createIterResult(data, false));
    }
  }
}

function onReadable(iter) {
  // we wait for the next tick, because it might
  // emit an error with process.nextTick
  process.nextTick(readAndResolve, iter);
}

function wrapForNext(lastPromise, iter) {
  return function (resolve, reject) {
    lastPromise.then(function () {
      if (iter[kEnded]) {
        resolve(createIterResult(undefined, true));
        return;
      }

      iter[kHandlePromise](resolve, reject);
    }, reject);
  };
}

var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
  get stream() {
    return this[kStream];
  },

  next: function next() {
    var _this = this; // if we have detected an error in the meanwhile
    // reject straight away


    var error = this[kError];

    if (error !== null) {
      return Promise.reject(error);
    }

    if (this[kEnded]) {
      return Promise.resolve(createIterResult(undefined, true));
    }

    if (this[kStream].destroyed) {
      // We need to defer via nextTick because if .destroy(err) is
      // called, the error will be emitted via nextTick, and
      // we cannot guarantee that there is no error lingering around
      // waiting to be emitted.
      return new Promise(function (resolve, reject) {
        process.nextTick(function () {
          if (_this[kError]) {
            reject(_this[kError]);
          } else {
            resolve(createIterResult(undefined, true));
          }
        });
      });
    } // if we have multiple next() calls
    // we will wait for the previous Promise to finish
    // this logic is optimized to support for await loops,
    // where next() is only called once at a time


    var lastPromise = this[kLastPromise];
    var promise;

    if (lastPromise) {
      promise = new Promise(wrapForNext(lastPromise, this));
    } else {
      // fast path needed to support multiple this.push()
      // without triggering the next() queue
      var data = this[kStream].read();

      if (data !== null) {
        return Promise.resolve(createIterResult(data, false));
      }

      promise = new Promise(this[kHandlePromise]);
    }

    this[kLastPromise] = promise;
    return promise;
  }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
  return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
  var _this2 = this; // destroy(err, cb) is a private API
  // we can guarantee we have that here, because we control the
  // Readable class this is attached to


  return new Promise(function (resolve, reject) {
    _this2[kStream].destroy(null, function (err) {
      if (err) {
        reject(err);
        return;
      }

      resolve(createIterResult(undefined, true));
    });
  });
}), _Object$setPrototypeO), AsyncIteratorPrototype);

var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
  var _Object$create;

  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
    value: stream,
    writable: true
  }), _defineProperty(_Object$create, kLastResolve, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kLastReject, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kError, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kEnded, {
    value: stream._readableState.endEmitted,
    writable: true
  }), _defineProperty(_Object$create, kHandlePromise, {
    value: function value(resolve, reject) {
      var data = iterator[kStream].read();

      if (data) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        resolve(createIterResult(data, false));
      } else {
        iterator[kLastResolve] = resolve;
        iterator[kLastReject] = reject;
      }
    },
    writable: true
  }), _Object$create));
  iterator[kLastPromise] = null;
  finished(stream, function (err) {
    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
      var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
      // returned by next() and store the error

      if (reject !== null) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        reject(err);
      }

      iterator[kError] = err;
      return;
    }

    var resolve = iterator[kLastResolve];

    if (resolve !== null) {
      iterator[kLastPromise] = null;
      iterator[kLastResolve] = null;
      iterator[kLastReject] = null;
      resolve(createIterResult(undefined, true));
    }

    iterator[kEnded] = true;
  });
  stream.on('readable', onReadable.bind(null, iterator));
  return iterator;
};

module.exports = createReadableStreamAsyncIterator;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5)))

/***/ }),
/* 631 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function () {
  throw new Error('Readable.from is not available in the browser');
};

/***/ }),
/* 632 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.


module.exports = PassThrough;

var Transform = __webpack_require__(287);

__webpack_require__(4)(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);
  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};

/***/ }),
/* 633 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).


var eos;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    callback.apply(void 0, arguments);
  };
}

var _require$codes = __webpack_require__(66).codes,
    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;

function noop(err) {
  // Rethrow the error if it exists to avoid swallowing it
  if (err) throw err;
}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function destroyer(stream, reading, writing, callback) {
  callback = once(callback);
  var closed = false;
  stream.on('close', function () {
    closed = true;
  });
  if (eos === undefined) eos = __webpack_require__(164);
  eos(stream, {
    readable: reading,
    writable: writing
  }, function (err) {
    if (err) return callback(err);
    closed = true;
    callback();
  });
  var destroyed = false;
  return function (err) {
    if (closed) return;
    if (destroyed) return;
    destroyed = true; // request.destroy just do .end - .abort is what we want

    if (isRequest(stream)) return stream.abort();
    if (typeof stream.destroy === 'function') return stream.destroy();
    callback(err || new ERR_STREAM_DESTROYED('pipe'));
  };
}

function call(fn) {
  fn();
}

function pipe(from, to) {
  return from.pipe(to);
}

function popCallback(streams) {
  if (!streams.length) return noop;
  if (typeof streams[streams.length - 1] !== 'function') return noop;
  return streams.pop();
}

function pipeline() {
  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
    streams[_key] = arguments[_key];
  }

  var callback = popCallback(streams);
  if (Array.isArray(streams[0])) streams = streams[0];

  if (streams.length < 2) {
    throw new ERR_MISSING_ARGS('streams');
  }

  var error;
  var destroys = streams.map(function (stream, i) {
    var reading = i < streams.length - 1;
    var writing = i > 0;
    return destroyer(stream, reading, writing, function (err) {
      if (!error) error = err;
      if (err) destroys.forEach(call);
      if (reading) return;
      destroys.forEach(call);
      callback(error);
    });
  });
  return streams.reduce(pipe);
}

module.exports = pipeline;

/***/ }),
/* 634 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var WriteError = __webpack_require__(165).WriteError;

var promisify = __webpack_require__(288);

var getCallback = __webpack_require__(108).getCallback;

var getOptions = __webpack_require__(108).getOptions;

function Batch(levelup) {
  this._levelup = levelup;
  this.batch = levelup.db.batch();
  this.ops = [];
  this.length = 0;
}

Batch.prototype.put = function (key, value) {
  try {
    this.batch.put(key, value);
  } catch (e) {
    throw new WriteError(e);
  }

  this.ops.push({
    type: 'put',
    key: key,
    value: value
  });
  this.length++;
  return this;
};

Batch.prototype.del = function (key) {
  try {
    this.batch.del(key);
  } catch (err) {
    throw new WriteError(err);
  }

  this.ops.push({
    type: 'del',
    key: key
  });
  this.length++;
  return this;
};

Batch.prototype.clear = function () {
  try {
    this.batch.clear();
  } catch (err) {
    throw new WriteError(err);
  }

  this.ops = [];
  this.length = 0;
  return this;
};

Batch.prototype.write = function (options, callback) {
  var levelup = this._levelup;
  var ops = this.ops;
  var promise;
  callback = getCallback(options, callback);

  if (!callback) {
    callback = promisify();
    promise = callback.promise;
  }

  options = getOptions(options);

  try {
    this.batch.write(options, function (err) {
      if (err) {
        return callback(new WriteError(err));
      }

      levelup.emit('batch', ops);
      callback();
    });
  } catch (err) {
    throw new WriteError(err);
  }

  return promise;
};

module.exports = Batch;

/***/ }),
/* 635 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var all = module.exports.all = [{
  errno: -2,
  code: 'ENOENT',
  description: 'no such file or directory'
}, {
  errno: -1,
  code: 'UNKNOWN',
  description: 'unknown error'
}, {
  errno: 0,
  code: 'OK',
  description: 'success'
}, {
  errno: 1,
  code: 'EOF',
  description: 'end of file'
}, {
  errno: 2,
  code: 'EADDRINFO',
  description: 'getaddrinfo error'
}, {
  errno: 3,
  code: 'EACCES',
  description: 'permission denied'
}, {
  errno: 4,
  code: 'EAGAIN',
  description: 'resource temporarily unavailable'
}, {
  errno: 5,
  code: 'EADDRINUSE',
  description: 'address already in use'
}, {
  errno: 6,
  code: 'EADDRNOTAVAIL',
  description: 'address not available'
}, {
  errno: 7,
  code: 'EAFNOSUPPORT',
  description: 'address family not supported'
}, {
  errno: 8,
  code: 'EALREADY',
  description: 'connection already in progress'
}, {
  errno: 9,
  code: 'EBADF',
  description: 'bad file descriptor'
}, {
  errno: 10,
  code: 'EBUSY',
  description: 'resource busy or locked'
}, {
  errno: 11,
  code: 'ECONNABORTED',
  description: 'software caused connection abort'
}, {
  errno: 12,
  code: 'ECONNREFUSED',
  description: 'connection refused'
}, {
  errno: 13,
  code: 'ECONNRESET',
  description: 'connection reset by peer'
}, {
  errno: 14,
  code: 'EDESTADDRREQ',
  description: 'destination address required'
}, {
  errno: 15,
  code: 'EFAULT',
  description: 'bad address in system call argument'
}, {
  errno: 16,
  code: 'EHOSTUNREACH',
  description: 'host is unreachable'
}, {
  errno: 17,
  code: 'EINTR',
  description: 'interrupted system call'
}, {
  errno: 18,
  code: 'EINVAL',
  description: 'invalid argument'
}, {
  errno: 19,
  code: 'EISCONN',
  description: 'socket is already connected'
}, {
  errno: 20,
  code: 'EMFILE',
  description: 'too many open files'
}, {
  errno: 21,
  code: 'EMSGSIZE',
  description: 'message too long'
}, {
  errno: 22,
  code: 'ENETDOWN',
  description: 'network is down'
}, {
  errno: 23,
  code: 'ENETUNREACH',
  description: 'network is unreachable'
}, {
  errno: 24,
  code: 'ENFILE',
  description: 'file table overflow'
}, {
  errno: 25,
  code: 'ENOBUFS',
  description: 'no buffer space available'
}, {
  errno: 26,
  code: 'ENOMEM',
  description: 'not enough memory'
}, {
  errno: 27,
  code: 'ENOTDIR',
  description: 'not a directory'
}, {
  errno: 28,
  code: 'EISDIR',
  description: 'illegal operation on a directory'
}, {
  errno: 29,
  code: 'ENONET',
  description: 'machine is not on the network'
}, {
  errno: 31,
  code: 'ENOTCONN',
  description: 'socket is not connected'
}, {
  errno: 32,
  code: 'ENOTSOCK',
  description: 'socket operation on non-socket'
}, {
  errno: 33,
  code: 'ENOTSUP',
  description: 'operation not supported on socket'
}, {
  errno: 34,
  code: 'ENOENT',
  description: 'no such file or directory'
}, {
  errno: 35,
  code: 'ENOSYS',
  description: 'function not implemented'
}, {
  errno: 36,
  code: 'EPIPE',
  description: 'broken pipe'
}, {
  errno: 37,
  code: 'EPROTO',
  description: 'protocol error'
}, {
  errno: 38,
  code: 'EPROTONOSUPPORT',
  description: 'protocol not supported'
}, {
  errno: 39,
  code: 'EPROTOTYPE',
  description: 'protocol wrong type for socket'
}, {
  errno: 40,
  code: 'ETIMEDOUT',
  description: 'connection timed out'
}, {
  errno: 41,
  code: 'ECHARSET',
  description: 'invalid Unicode character'
}, {
  errno: 42,
  code: 'EAIFAMNOSUPPORT',
  description: 'address family for hostname not supported'
}, {
  errno: 44,
  code: 'EAISERVICE',
  description: 'servname not supported for ai_socktype'
}, {
  errno: 45,
  code: 'EAISOCKTYPE',
  description: 'ai_socktype not supported'
}, {
  errno: 46,
  code: 'ESHUTDOWN',
  description: 'cannot send after transport endpoint shutdown'
}, {
  errno: 47,
  code: 'EEXIST',
  description: 'file already exists'
}, {
  errno: 48,
  code: 'ESRCH',
  description: 'no such process'
}, {
  errno: 49,
  code: 'ENAMETOOLONG',
  description: 'name too long'
}, {
  errno: 50,
  code: 'EPERM',
  description: 'operation not permitted'
}, {
  errno: 51,
  code: 'ELOOP',
  description: 'too many symbolic links encountered'
}, {
  errno: 52,
  code: 'EXDEV',
  description: 'cross-device link not permitted'
}, {
  errno: 53,
  code: 'ENOTEMPTY',
  description: 'directory not empty'
}, {
  errno: 54,
  code: 'ENOSPC',
  description: 'no space left on device'
}, {
  errno: 55,
  code: 'EIO',
  description: 'i/o error'
}, {
  errno: 56,
  code: 'EROFS',
  description: 'read-only file system'
}, {
  errno: 57,
  code: 'ENODEV',
  description: 'no such device'
}, {
  errno: 58,
  code: 'ESPIPE',
  description: 'invalid seek'
}, {
  errno: 59,
  code: 'ECANCELED',
  description: 'operation canceled'
}];
module.exports.errno = {};
module.exports.code = {};
all.forEach(function (error) {
  module.exports.errno[error.errno] = error;
  module.exports.code[error.code] = error;
});
module.exports.custom = __webpack_require__(636)(module.exports);
module.exports.create = module.exports.custom.createError;

/***/ }),
/* 636 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var prr = __webpack_require__(637);

function init(type, message, cause) {
  if (!!message && typeof message != 'string') {
    message = message.message || message.name;
  }

  prr(this, {
    type: type,
    name: type // can be passed just a 'cause'
    ,
    cause: typeof message != 'string' ? message : cause,
    message: message
  }, 'ewr');
} // generic prototype, not intended to be actually used - helpful for `instanceof`


function CustomError(message, cause) {
  Error.call(this);
  if (Error.captureStackTrace) Error.captureStackTrace(this, this.constructor);
  init.call(this, 'CustomError', message, cause);
}

CustomError.prototype = new Error();

function createError(errno, type, proto) {
  var err = function err(message, cause) {
    init.call(this, type, message, cause); //TODO: the specificity here is stupid, errno should be available everywhere

    if (type == 'FilesystemError') {
      this.code = this.cause.code;
      this.path = this.cause.path;
      this.errno = this.cause.errno;
      this.message = (errno.errno[this.cause.errno] ? errno.errno[this.cause.errno].description : this.cause.message) + (this.cause.path ? ' [' + this.cause.path + ']' : '');
    }

    Error.call(this);
    if (Error.captureStackTrace) Error.captureStackTrace(this, err);
  };

  err.prototype = !!proto ? new proto() : new CustomError();
  return err;
}

module.exports = function (errno) {
  var ce = function ce(type, proto) {
    return createError(errno, type, proto);
  };

  return {
    CustomError: CustomError,
    FilesystemError: ce('FilesystemError'),
    createError: ce
  };
};

/***/ }),
/* 637 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*!
  * prr
  * (c) 2013 Rod Vagg <rod@vagg.org>
  * https://github.com/rvagg/prr
  * License: MIT
  */
(function (name, context, definition) {
  if ( true && module.exports) module.exports = definition();else context[name] = definition();
})('prr', void 0, function () {
  var setProperty = typeof Object.defineProperty == 'function' ? function (obj, key, options) {
    Object.defineProperty(obj, key, options);
    return obj;
  } : function (obj, key, options) {
    // < es5
    obj[key] = options.value;
    return obj;
  },
      makeOptions = function makeOptions(value, options) {
    var oo = typeof options == 'object',
        os = !oo && typeof options == 'string',
        op = function op(p) {
      return oo ? !!options[p] : os ? options.indexOf(p[0]) > -1 : false;
    };

    return {
      enumerable: op('enumerable'),
      configurable: op('configurable'),
      writable: op('writable'),
      value: value
    };
  },
      prr = function prr(obj, key, value, options) {
    var k;
    options = makeOptions(value, options);

    if (typeof key == 'object') {
      for (k in key) {
        if (Object.hasOwnProperty.call(key, k)) {
          options.value = key[k];
          setProperty(obj, k, options);
        }
      }

      return obj;
    }

    return setProperty(obj, key, options);
  };

  return prr;
});

/***/ }),
/* 638 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var AbstractLevelDOWN = __webpack_require__(166).AbstractLevelDOWN;

var AbstractChainedBatch = __webpack_require__(166).AbstractChainedBatch;

var AbstractIterator = __webpack_require__(166).AbstractIterator;

var inherits = __webpack_require__(4);

var Codec = __webpack_require__(640);

var EncodingError = __webpack_require__(165).EncodingError;

var rangeMethods = ['approximateSize', 'compactRange'];
module.exports = DB.default = DB;

function DB(db, opts) {
  if (!(this instanceof DB)) return new DB(db, opts);
  var manifest = db.supports || {};
  var additionalMethods = manifest.additionalMethods || {};
  AbstractLevelDOWN.call(this, manifest);
  this.supports.encodings = true;
  this.supports.additionalMethods = {};
  rangeMethods.forEach(function (m) {
    // TODO (future major): remove this fallback
    var fallback = typeof db[m] === 'function';

    if (additionalMethods[m] || fallback) {
      this.supports.additionalMethods[m] = true;

      this[m] = function (start, end, opts, cb) {
        start = this.codec.encodeKey(start, opts);
        end = this.codec.encodeKey(end, opts);
        return this.db[m](start, end, opts, cb);
      };
    }
  }, this);
  opts = opts || {};
  if (typeof opts.keyEncoding === 'undefined') opts.keyEncoding = 'utf8';
  if (typeof opts.valueEncoding === 'undefined') opts.valueEncoding = 'utf8';
  this.db = db;
  this.codec = new Codec(opts);
}

inherits(DB, AbstractLevelDOWN);
DB.prototype.type = 'encoding-down';

DB.prototype._serializeKey = DB.prototype._serializeValue = function (datum) {
  return datum;
};

DB.prototype._open = function (opts, cb) {
  this.db.open(opts, cb);
};

DB.prototype._close = function (cb) {
  this.db.close(cb);
};

DB.prototype._put = function (key, value, opts, cb) {
  key = this.codec.encodeKey(key, opts);
  value = this.codec.encodeValue(value, opts);
  this.db.put(key, value, opts, cb);
};

DB.prototype._get = function (key, opts, cb) {
  var self = this;
  key = this.codec.encodeKey(key, opts);
  opts.asBuffer = this.codec.valueAsBuffer(opts);
  this.db.get(key, opts, function (err, value) {
    if (err) return cb(err);

    try {
      value = self.codec.decodeValue(value, opts);
    } catch (err) {
      return cb(new EncodingError(err));
    }

    cb(null, value);
  });
};

DB.prototype._del = function (key, opts, cb) {
  key = this.codec.encodeKey(key, opts);
  this.db.del(key, opts, cb);
};

DB.prototype._chainedBatch = function () {
  return new Batch(this);
};

DB.prototype._batch = function (ops, opts, cb) {
  ops = this.codec.encodeBatch(ops, opts);
  this.db.batch(ops, opts, cb);
};

DB.prototype._iterator = function (opts) {
  opts.keyAsBuffer = this.codec.keyAsBuffer(opts);
  opts.valueAsBuffer = this.codec.valueAsBuffer(opts);
  return new Iterator(this, opts);
};

DB.prototype._clear = function (opts, callback) {
  opts = this.codec.encodeLtgt(opts);
  this.db.clear(opts, callback);
};

function Iterator(db, opts) {
  AbstractIterator.call(this, db);
  this.codec = db.codec;
  this.keys = opts.keys;
  this.values = opts.values;
  this.opts = this.codec.encodeLtgt(opts);
  this.it = db.db.iterator(this.opts);
}

inherits(Iterator, AbstractIterator);

Iterator.prototype._next = function (cb) {
  var self = this;
  this.it.next(function (err, key, value) {
    if (err) return cb(err);

    try {
      if (self.keys && typeof key !== 'undefined') {
        key = self.codec.decodeKey(key, self.opts);
      } else {
        key = undefined;
      }

      if (self.values && typeof value !== 'undefined') {
        value = self.codec.decodeValue(value, self.opts);
      } else {
        value = undefined;
      }
    } catch (err) {
      return cb(new EncodingError(err));
    }

    cb(null, key, value);
  });
};

Iterator.prototype._seek = function (key) {
  key = this.codec.encodeKey(key, this.opts);
  this.it.seek(key);
};

Iterator.prototype._end = function (cb) {
  this.it.end(cb);
};

function Batch(db, codec) {
  AbstractChainedBatch.call(this, db);
  this.codec = db.codec;
  this.batch = db.db.batch();
}

inherits(Batch, AbstractChainedBatch);

Batch.prototype._put = function (key, value) {
  key = this.codec.encodeKey(key);
  value = this.codec.encodeValue(value);
  this.batch.put(key, value);
};

Batch.prototype._del = function (key) {
  key = this.codec.encodeKey(key);
  this.batch.del(key);
};

Batch.prototype._clear = function () {
  this.batch.clear();
};

Batch.prototype._write = function (opts, cb) {
  this.batch.write(opts, cb);
};

/***/ }),
/* 639 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, Buffer) {

var xtend = __webpack_require__(65);

var supports = __webpack_require__(162);

var AbstractIterator = __webpack_require__(289);

var AbstractChainedBatch = __webpack_require__(290);

var hasOwnProperty = Object.prototype.hasOwnProperty;
var rangeOptions = 'start end gt gte lt lte'.split(' ');

function AbstractLevelDOWN(manifest) {
  this.status = 'new'; // TODO (next major): make this mandatory

  this.supports = supports(manifest, {
    status: true
  });
}

AbstractLevelDOWN.prototype.open = function (options, callback) {
  var self = this;
  var oldStatus = this.status;
  if (typeof options === 'function') callback = options;

  if (typeof callback !== 'function') {
    throw new Error('open() requires a callback argument');
  }

  if (typeof options !== 'object' || options === null) options = {};
  options.createIfMissing = options.createIfMissing !== false;
  options.errorIfExists = !!options.errorIfExists;
  this.status = 'opening';

  this._open(options, function (err) {
    if (err) {
      self.status = oldStatus;
      return callback(err);
    }

    self.status = 'open';
    callback();
  });
};

AbstractLevelDOWN.prototype._open = function (options, callback) {
  process.nextTick(callback);
};

AbstractLevelDOWN.prototype.close = function (callback) {
  var self = this;
  var oldStatus = this.status;

  if (typeof callback !== 'function') {
    throw new Error('close() requires a callback argument');
  }

  this.status = 'closing';

  this._close(function (err) {
    if (err) {
      self.status = oldStatus;
      return callback(err);
    }

    self.status = 'closed';
    callback();
  });
};

AbstractLevelDOWN.prototype._close = function (callback) {
  process.nextTick(callback);
};

AbstractLevelDOWN.prototype.get = function (key, options, callback) {
  if (typeof options === 'function') callback = options;

  if (typeof callback !== 'function') {
    throw new Error('get() requires a callback argument');
  }

  var err = this._checkKey(key);

  if (err) return process.nextTick(callback, err);
  key = this._serializeKey(key);
  if (typeof options !== 'object' || options === null) options = {};
  options.asBuffer = options.asBuffer !== false;

  this._get(key, options, callback);
};

AbstractLevelDOWN.prototype._get = function (key, options, callback) {
  process.nextTick(function () {
    callback(new Error('NotFound'));
  });
};

AbstractLevelDOWN.prototype.put = function (key, value, options, callback) {
  if (typeof options === 'function') callback = options;

  if (typeof callback !== 'function') {
    throw new Error('put() requires a callback argument');
  }

  var err = this._checkKey(key) || this._checkValue(value);

  if (err) return process.nextTick(callback, err);
  key = this._serializeKey(key);
  value = this._serializeValue(value);
  if (typeof options !== 'object' || options === null) options = {};

  this._put(key, value, options, callback);
};

AbstractLevelDOWN.prototype._put = function (key, value, options, callback) {
  process.nextTick(callback);
};

AbstractLevelDOWN.prototype.del = function (key, options, callback) {
  if (typeof options === 'function') callback = options;

  if (typeof callback !== 'function') {
    throw new Error('del() requires a callback argument');
  }

  var err = this._checkKey(key);

  if (err) return process.nextTick(callback, err);
  key = this._serializeKey(key);
  if (typeof options !== 'object' || options === null) options = {};

  this._del(key, options, callback);
};

AbstractLevelDOWN.prototype._del = function (key, options, callback) {
  process.nextTick(callback);
};

AbstractLevelDOWN.prototype.batch = function (array, options, callback) {
  if (!arguments.length) return this._chainedBatch();
  if (typeof options === 'function') callback = options;
  if (typeof array === 'function') callback = array;

  if (typeof callback !== 'function') {
    throw new Error('batch(array) requires a callback argument');
  }

  if (!Array.isArray(array)) {
    return process.nextTick(callback, new Error('batch(array) requires an array argument'));
  }

  if (array.length === 0) {
    return process.nextTick(callback);
  }

  if (typeof options !== 'object' || options === null) options = {};
  var serialized = new Array(array.length);

  for (var i = 0; i < array.length; i++) {
    if (typeof array[i] !== 'object' || array[i] === null) {
      return process.nextTick(callback, new Error('batch(array) element must be an object and not `null`'));
    }

    var e = xtend(array[i]);

    if (e.type !== 'put' && e.type !== 'del') {
      return process.nextTick(callback, new Error("`type` must be 'put' or 'del'"));
    }

    var err = this._checkKey(e.key);

    if (err) return process.nextTick(callback, err);
    e.key = this._serializeKey(e.key);

    if (e.type === 'put') {
      var valueErr = this._checkValue(e.value);

      if (valueErr) return process.nextTick(callback, valueErr);
      e.value = this._serializeValue(e.value);
    }

    serialized[i] = e;
  }

  this._batch(serialized, options, callback);
};

AbstractLevelDOWN.prototype._batch = function (array, options, callback) {
  process.nextTick(callback);
};

AbstractLevelDOWN.prototype.clear = function (options, callback) {
  if (typeof options === 'function') {
    callback = options;
  } else if (typeof callback !== 'function') {
    throw new Error('clear() requires a callback argument');
  }

  options = cleanRangeOptions(this, options);
  options.reverse = !!options.reverse;
  options.limit = 'limit' in options ? options.limit : -1;

  this._clear(options, callback);
};

AbstractLevelDOWN.prototype._clear = function (options, callback) {
  // Avoid setupIteratorOptions, would serialize range options a second time.
  options.keys = true;
  options.values = false;
  options.keyAsBuffer = true;
  options.valueAsBuffer = true;

  var iterator = this._iterator(options);

  var emptyOptions = {};
  var self = this;

  var next = function next(err) {
    if (err) {
      return iterator.end(function () {
        callback(err);
      });
    }

    iterator.next(function (err, key) {
      if (err) return next(err);
      if (key === undefined) return iterator.end(callback); // This could be optimized by using a batch, but the default _clear
      // is not meant to be fast. Implementations have more room to optimize
      // if they override _clear. Note: using _del bypasses key serialization.

      self._del(key, emptyOptions, next);
    });
  };

  next();
};

AbstractLevelDOWN.prototype._setupIteratorOptions = function (options) {
  options = cleanRangeOptions(this, options);
  options.reverse = !!options.reverse;
  options.keys = options.keys !== false;
  options.values = options.values !== false;
  options.limit = 'limit' in options ? options.limit : -1;
  options.keyAsBuffer = options.keyAsBuffer !== false;
  options.valueAsBuffer = options.valueAsBuffer !== false;
  return options;
};

function cleanRangeOptions(db, options) {
  var result = {};

  for (var k in options) {
    if (!hasOwnProperty.call(options, k)) continue;
    var opt = options[k];

    if (isRangeOption(k)) {
      // Note that we don't reject nullish and empty options here. While
      // those types are invalid as keys, they are valid as range options.
      opt = db._serializeKey(opt);
    }

    result[k] = opt;
  }

  return result;
}

function isRangeOption(k) {
  return rangeOptions.indexOf(k) !== -1;
}

AbstractLevelDOWN.prototype.iterator = function (options) {
  if (typeof options !== 'object' || options === null) options = {};
  options = this._setupIteratorOptions(options);
  return this._iterator(options);
};

AbstractLevelDOWN.prototype._iterator = function (options) {
  return new AbstractIterator(this);
};

AbstractLevelDOWN.prototype._chainedBatch = function () {
  return new AbstractChainedBatch(this);
};

AbstractLevelDOWN.prototype._serializeKey = function (key) {
  return key;
};

AbstractLevelDOWN.prototype._serializeValue = function (value) {
  return value;
};

AbstractLevelDOWN.prototype._checkKey = function (key) {
  if (key === null || key === undefined) {
    return new Error('key cannot be `null` or `undefined`');
  } else if (Buffer.isBuffer(key) && key.length === 0) {
    return new Error('key cannot be an empty Buffer');
  } else if (key === '') {
    return new Error('key cannot be an empty String');
  } else if (Array.isArray(key) && key.length === 0) {
    return new Error('key cannot be an empty Array');
  }
};

AbstractLevelDOWN.prototype._checkValue = function (value) {
  if (value === null || value === undefined) {
    return new Error('value cannot be `null` or `undefined`');
  }
};

module.exports = AbstractLevelDOWN;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5), __webpack_require__(0).Buffer))

/***/ }),
/* 640 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var encodings = __webpack_require__(641);

module.exports = Codec;

function Codec(opts) {
  if (!(this instanceof Codec)) {
    return new Codec(opts);
  }

  this.opts = opts || {};
  this.encodings = encodings;
}

Codec.prototype._encoding = function (encoding) {
  if (typeof encoding === 'string') encoding = encodings[encoding];
  if (!encoding) encoding = encodings.id;
  return encoding;
};

Codec.prototype._keyEncoding = function (opts, batchOpts) {
  return this._encoding(batchOpts && batchOpts.keyEncoding || opts && opts.keyEncoding || this.opts.keyEncoding);
};

Codec.prototype._valueEncoding = function (opts, batchOpts) {
  return this._encoding(batchOpts && (batchOpts.valueEncoding || batchOpts.encoding) || opts && (opts.valueEncoding || opts.encoding) || this.opts.valueEncoding || this.opts.encoding);
};

Codec.prototype.encodeKey = function (key, opts, batchOpts) {
  return this._keyEncoding(opts, batchOpts).encode(key);
};

Codec.prototype.encodeValue = function (value, opts, batchOpts) {
  return this._valueEncoding(opts, batchOpts).encode(value);
};

Codec.prototype.decodeKey = function (key, opts) {
  return this._keyEncoding(opts).decode(key);
};

Codec.prototype.decodeValue = function (value, opts) {
  return this._valueEncoding(opts).decode(value);
};

Codec.prototype.encodeBatch = function (ops, opts) {
  var self = this;
  return ops.map(function (_op) {
    var op = {
      type: _op.type,
      key: self.encodeKey(_op.key, opts, _op)
    };
    if (self.keyAsBuffer(opts, _op)) op.keyEncoding = 'binary';
    if (_op.prefix) op.prefix = _op.prefix;

    if ('value' in _op) {
      op.value = self.encodeValue(_op.value, opts, _op);
      if (self.valueAsBuffer(opts, _op)) op.valueEncoding = 'binary';
    }

    return op;
  });
};

var ltgtKeys = ['lt', 'gt', 'lte', 'gte', 'start', 'end'];

Codec.prototype.encodeLtgt = function (ltgt) {
  var self = this;
  var ret = {};
  Object.keys(ltgt).forEach(function (key) {
    ret[key] = ltgtKeys.indexOf(key) > -1 ? self.encodeKey(ltgt[key], ltgt) : ltgt[key];
  });
  return ret;
};

Codec.prototype.createStreamDecoder = function (opts) {
  var self = this;

  if (opts.keys && opts.values) {
    return function (key, value) {
      return {
        key: self.decodeKey(key, opts),
        value: self.decodeValue(value, opts)
      };
    };
  } else if (opts.keys) {
    return function (key) {
      return self.decodeKey(key, opts);
    };
  } else if (opts.values) {
    return function (_, value) {
      return self.decodeValue(value, opts);
    };
  } else {
    return function () {};
  }
};

Codec.prototype.keyAsBuffer = function (opts) {
  return this._keyEncoding(opts).buffer;
};

Codec.prototype.valueAsBuffer = function (opts) {
  return this._valueEncoding(opts).buffer;
};

/***/ }),
/* 641 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

exports.utf8 = exports['utf-8'] = {
  encode: function encode(data) {
    return isBinary(data) ? data : String(data);
  },
  decode: identity,
  buffer: false,
  type: 'utf8'
};
exports.json = {
  encode: JSON.stringify,
  decode: JSON.parse,
  buffer: false,
  type: 'json'
};
exports.binary = {
  encode: function encode(data) {
    return isBinary(data) ? data : Buffer.from(data);
  },
  decode: identity,
  buffer: true,
  type: 'binary'
};
exports.none = {
  encode: identity,
  decode: identity,
  buffer: false,
  type: 'id'
};
exports.id = exports.none;
var bufferEncodings = ['hex', 'ascii', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le'];
bufferEncodings.forEach(function (type) {
  exports[type] = {
    encode: function encode(data) {
      return isBinary(data) ? data : Buffer.from(data, type);
    },
    decode: function decode(buffer) {
      return buffer.toString(type);
    },
    buffer: true,
    type: type
  };
});

function identity(value) {
  return value;
}

function isBinary(data) {
  return data === undefined || data === null || Buffer.isBuffer(data);
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 642 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {/* global indexedDB */


module.exports = Level;

var AbstractLevelDOWN = __webpack_require__(291).AbstractLevelDOWN;

var inherits = __webpack_require__(4);

var Iterator = __webpack_require__(644);

var mixedToBuffer = __webpack_require__(294);

var setImmediate = __webpack_require__(295);

var support = __webpack_require__(654);

var DEFAULT_PREFIX = 'level-js-';

function Level(location, opts) {
  if (!(this instanceof Level)) return new Level(location, opts);
  AbstractLevelDOWN.call(this);
  opts = opts || {};

  if (typeof location !== 'string') {
    throw new Error('constructor requires a location string argument');
  }

  this.location = location;
  this.prefix = opts.prefix == null ? DEFAULT_PREFIX : opts.prefix;
  this.version = parseInt(opts.version || 1, 10);
}

inherits(Level, AbstractLevelDOWN); // Detect binary and array key support (IndexedDB Second Edition)

Level.binaryKeys = support.binaryKeys(indexedDB);
Level.arrayKeys = support.arrayKeys(indexedDB);

Level.prototype._open = function (options, callback) {
  var req = indexedDB.open(this.prefix + this.location, this.version);
  var self = this;

  req.onerror = function () {
    callback(req.error || new Error('unknown error'));
  };

  req.onsuccess = function () {
    self.db = req.result;
    callback();
  };

  req.onupgradeneeded = function (ev) {
    var db = ev.target.result;

    if (!db.objectStoreNames.contains(self.location)) {
      db.createObjectStore(self.location);
    }
  };
};

Level.prototype.store = function (mode) {
  var transaction = this.db.transaction([this.location], mode);
  return transaction.objectStore(this.location);
};

Level.prototype.await = function (request, callback) {
  var transaction = request.transaction; // Take advantage of the fact that a non-canceled request error aborts
  // the transaction. I.e. no need to listen for "request.onerror".

  transaction.onabort = function () {
    callback(transaction.error || new Error('aborted by user'));
  };

  transaction.oncomplete = function () {
    callback(null, request.result);
  };
};

Level.prototype._get = function (key, options, callback) {
  var store = this.store('readonly');

  try {
    var req = store.get(key);
  } catch (err) {
    return setImmediate(function () {
      callback(err);
    });
  }

  this.await(req, function (err, value) {
    if (err) return callback(err);

    if (value === undefined) {
      // 'NotFound' error, consistent with LevelDOWN API
      return callback(new Error('NotFound'));
    }

    if (options.asBuffer) {
      value = mixedToBuffer(value);
    }

    callback(null, value);
  });
};

Level.prototype._del = function (key, options, callback) {
  var store = this.store('readwrite');

  try {
    var req = store.delete(key);
  } catch (err) {
    return setImmediate(function () {
      callback(err);
    });
  }

  this.await(req, callback);
};

Level.prototype._put = function (key, value, options, callback) {
  var store = this.store('readwrite');

  try {
    // Will throw a DataError or DataCloneError if the environment
    // does not support serializing the key or value respectively.
    var req = store.put(value, key);
  } catch (err) {
    return setImmediate(function () {
      callback(err);
    });
  }

  this.await(req, callback);
}; // Valid key types in IndexedDB Second Edition:
//
// - Number, except NaN. Includes Infinity and -Infinity
// - Date, except invalid (NaN)
// - String
// - ArrayBuffer or a view thereof (typed arrays). In level-js we also support
//   Buffer (which is an Uint8Array) (and the primary binary type of Level).
// - Array, except cyclical and empty (e.g. Array(10)). Elements must be valid
//   types themselves.


Level.prototype._serializeKey = function (key) {
  if (Buffer.isBuffer(key)) {
    return Level.binaryKeys ? key : key.toString();
  } else if (Array.isArray(key)) {
    return Level.arrayKeys ? key.map(this._serializeKey, this) : String(key);
  } else {
    return key;
  }
};

Level.prototype._serializeValue = function (value) {
  return value;
};

Level.prototype._iterator = function (options) {
  return new Iterator(this, this.location, options);
};

Level.prototype._batch = function (operations, options, callback) {
  if (operations.length === 0) return setImmediate(callback);
  var store = this.store('readwrite');
  var transaction = store.transaction;
  var index = 0;
  var error;

  transaction.onabort = function () {
    callback(error || transaction.error || new Error('aborted by user'));
  };

  transaction.oncomplete = function () {
    callback();
  }; // Wait for a request to complete before making the next, saving CPU.


  function loop() {
    var op = operations[index++];
    var key = op.key;

    try {
      var req = op.type === 'del' ? store.delete(key) : store.put(op.value, key);
    } catch (err) {
      error = err;
      transaction.abort();
      return;
    }

    if (index < operations.length) {
      req.onsuccess = loop;
    }
  }

  loop();
};

Level.prototype._close = function (callback) {
  this.db.close();
  setImmediate(callback);
};

Level.destroy = function (location, prefix, callback) {
  if (typeof prefix === 'function') {
    callback = prefix;
    prefix = DEFAULT_PREFIX;
  }

  var request = indexedDB.deleteDatabase(prefix + location);

  request.onsuccess = function () {
    callback();
  };

  request.onerror = function (err) {
    callback(err);
  };
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 643 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, Buffer) {

var xtend = __webpack_require__(65);

var AbstractIterator = __webpack_require__(292);

var AbstractChainedBatch = __webpack_require__(293);

var hasOwnProperty = Object.prototype.hasOwnProperty;
var rangeOptions = 'start end gt gte lt lte'.split(' ');

function AbstractLevelDOWN() {
  this.status = 'new';
}

AbstractLevelDOWN.prototype.open = function (options, callback) {
  var self = this;
  var oldStatus = this.status;
  if (typeof options === 'function') callback = options;

  if (typeof callback !== 'function') {
    throw new Error('open() requires a callback argument');
  }

  if (typeof options !== 'object' || options === null) options = {};
  options.createIfMissing = options.createIfMissing !== false;
  options.errorIfExists = !!options.errorIfExists;
  this.status = 'opening';

  this._open(options, function (err) {
    if (err) {
      self.status = oldStatus;
      return callback(err);
    }

    self.status = 'open';
    callback();
  });
};

AbstractLevelDOWN.prototype._open = function (options, callback) {
  process.nextTick(callback);
};

AbstractLevelDOWN.prototype.close = function (callback) {
  var self = this;
  var oldStatus = this.status;

  if (typeof callback !== 'function') {
    throw new Error('close() requires a callback argument');
  }

  this.status = 'closing';

  this._close(function (err) {
    if (err) {
      self.status = oldStatus;
      return callback(err);
    }

    self.status = 'closed';
    callback();
  });
};

AbstractLevelDOWN.prototype._close = function (callback) {
  process.nextTick(callback);
};

AbstractLevelDOWN.prototype.get = function (key, options, callback) {
  if (typeof options === 'function') callback = options;

  if (typeof callback !== 'function') {
    throw new Error('get() requires a callback argument');
  }

  var err = this._checkKey(key);

  if (err) return process.nextTick(callback, err);
  key = this._serializeKey(key);
  if (typeof options !== 'object' || options === null) options = {};
  options.asBuffer = options.asBuffer !== false;

  this._get(key, options, callback);
};

AbstractLevelDOWN.prototype._get = function (key, options, callback) {
  process.nextTick(function () {
    callback(new Error('NotFound'));
  });
};

AbstractLevelDOWN.prototype.put = function (key, value, options, callback) {
  if (typeof options === 'function') callback = options;

  if (typeof callback !== 'function') {
    throw new Error('put() requires a callback argument');
  }

  var err = this._checkKey(key) || this._checkValue(value);

  if (err) return process.nextTick(callback, err);
  key = this._serializeKey(key);
  value = this._serializeValue(value);
  if (typeof options !== 'object' || options === null) options = {};

  this._put(key, value, options, callback);
};

AbstractLevelDOWN.prototype._put = function (key, value, options, callback) {
  process.nextTick(callback);
};

AbstractLevelDOWN.prototype.del = function (key, options, callback) {
  if (typeof options === 'function') callback = options;

  if (typeof callback !== 'function') {
    throw new Error('del() requires a callback argument');
  }

  var err = this._checkKey(key);

  if (err) return process.nextTick(callback, err);
  key = this._serializeKey(key);
  if (typeof options !== 'object' || options === null) options = {};

  this._del(key, options, callback);
};

AbstractLevelDOWN.prototype._del = function (key, options, callback) {
  process.nextTick(callback);
};

AbstractLevelDOWN.prototype.batch = function (array, options, callback) {
  if (!arguments.length) return this._chainedBatch();
  if (typeof options === 'function') callback = options;
  if (typeof array === 'function') callback = array;

  if (typeof callback !== 'function') {
    throw new Error('batch(array) requires a callback argument');
  }

  if (!Array.isArray(array)) {
    return process.nextTick(callback, new Error('batch(array) requires an array argument'));
  }

  if (array.length === 0) {
    return process.nextTick(callback);
  }

  if (typeof options !== 'object' || options === null) options = {};
  var serialized = new Array(array.length);

  for (var i = 0; i < array.length; i++) {
    if (typeof array[i] !== 'object' || array[i] === null) {
      return process.nextTick(callback, new Error('batch(array) element must be an object and not `null`'));
    }

    var e = xtend(array[i]);

    if (e.type !== 'put' && e.type !== 'del') {
      return process.nextTick(callback, new Error("`type` must be 'put' or 'del'"));
    }

    var err = this._checkKey(e.key);

    if (err) return process.nextTick(callback, err);
    e.key = this._serializeKey(e.key);

    if (e.type === 'put') {
      var valueErr = this._checkValue(e.value);

      if (valueErr) return process.nextTick(callback, valueErr);
      e.value = this._serializeValue(e.value);
    }

    serialized[i] = e;
  }

  this._batch(serialized, options, callback);
};

AbstractLevelDOWN.prototype._batch = function (array, options, callback) {
  process.nextTick(callback);
};

AbstractLevelDOWN.prototype._setupIteratorOptions = function (options) {
  options = cleanRangeOptions(this, options);
  options.reverse = !!options.reverse;
  options.keys = options.keys !== false;
  options.values = options.values !== false;
  options.limit = 'limit' in options ? options.limit : -1;
  options.keyAsBuffer = options.keyAsBuffer !== false;
  options.valueAsBuffer = options.valueAsBuffer !== false;
  return options;
};

function cleanRangeOptions(db, options) {
  var result = {};

  for (var k in options) {
    if (!hasOwnProperty.call(options, k)) continue;
    var opt = options[k];

    if (isRangeOption(k)) {
      // Note that we don't reject nullish and empty options here. While
      // those types are invalid as keys, they are valid as range options.
      opt = db._serializeKey(opt);
    }

    result[k] = opt;
  }

  return result;
}

function isRangeOption(k) {
  return rangeOptions.indexOf(k) !== -1;
}

AbstractLevelDOWN.prototype.iterator = function (options) {
  if (typeof options !== 'object' || options === null) options = {};
  options = this._setupIteratorOptions(options);
  return this._iterator(options);
};

AbstractLevelDOWN.prototype._iterator = function (options) {
  return new AbstractIterator(this);
};

AbstractLevelDOWN.prototype._chainedBatch = function () {
  return new AbstractChainedBatch(this);
};

AbstractLevelDOWN.prototype._serializeKey = function (key) {
  return key;
};

AbstractLevelDOWN.prototype._serializeValue = function (value) {
  return value;
};

AbstractLevelDOWN.prototype._checkKey = function (key) {
  if (key === null || key === undefined) {
    return new Error('key cannot be `null` or `undefined`');
  } else if (Buffer.isBuffer(key) && key.length === 0) {
    return new Error('key cannot be an empty Buffer');
  } else if (key === '') {
    return new Error('key cannot be an empty String');
  } else if (Array.isArray(key) && key.length === 0) {
    return new Error('key cannot be an empty Array');
  }
};

AbstractLevelDOWN.prototype._checkValue = function (value) {
  if (value === null || value === undefined) {
    return new Error('value cannot be `null` or `undefined`');
  }
};

module.exports = AbstractLevelDOWN;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5), __webpack_require__(0).Buffer))

/***/ }),
/* 644 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* global IDBKeyRange */


var inherits = __webpack_require__(4);

var AbstractIterator = __webpack_require__(291).AbstractIterator;

var ltgt = __webpack_require__(645);

var mixedToBuffer = __webpack_require__(294);

var setImmediate = __webpack_require__(295);

var noop = function noop() {};

module.exports = Iterator;

function Iterator(db, location, options) {
  AbstractIterator.call(this, db);
  this._limit = options.limit;
  this._count = 0;
  this._callback = null;
  this._cache = [];
  this._completed = false;
  this._aborted = false;
  this._error = null;
  this._transaction = null;
  this._keyAsBuffer = options.keyAsBuffer;
  this._valueAsBuffer = options.valueAsBuffer;

  if (this._limit === 0) {
    this._completed = true;
    return;
  }

  try {
    var keyRange = this.createKeyRange(options);
  } catch (e) {
    // The lower key is greater than the upper key.
    // IndexedDB throws an error, but we'll just return 0 results.
    this._completed = true;
    return;
  }

  this.createIterator(location, keyRange, options.reverse);
}

inherits(Iterator, AbstractIterator);

Iterator.prototype.createKeyRange = function (options) {
  var lower = ltgt.lowerBound(options);
  var upper = ltgt.upperBound(options);
  var lowerOpen = ltgt.lowerBoundExclusive(options);
  var upperOpen = ltgt.upperBoundExclusive(options);

  if (lower !== undefined && upper !== undefined) {
    return IDBKeyRange.bound(lower, upper, lowerOpen, upperOpen);
  } else if (lower !== undefined) {
    return IDBKeyRange.lowerBound(lower, lowerOpen);
  } else if (upper !== undefined) {
    return IDBKeyRange.upperBound(upper, upperOpen);
  } else {
    return null;
  }
};

Iterator.prototype.createIterator = function (location, keyRange, reverse) {
  var self = this;
  var transaction = this.db.db.transaction([location], 'readonly');
  var store = transaction.objectStore(location);
  var req = store.openCursor(keyRange, reverse ? 'prev' : 'next');

  req.onsuccess = function (ev) {
    var cursor = ev.target.result;
    if (cursor) self.onItem(cursor);
  };

  this._transaction = transaction; // If an error occurs (on the request), the transaction will abort.

  transaction.onabort = function () {
    self.onAbort(self._transaction.error || new Error('aborted by user'));
  };

  transaction.oncomplete = function () {
    self.onComplete();
  };
};

Iterator.prototype.onItem = function (cursor) {
  this._cache.push(cursor.key, cursor.value);

  if (this._limit <= 0 || ++this._count < this._limit) {
    cursor['continue']();
  }

  this.maybeNext();
};

Iterator.prototype.onAbort = function (err) {
  this._aborted = true;
  this._error = err;
  this.maybeNext();
};

Iterator.prototype.onComplete = function () {
  this._completed = true;
  this.maybeNext();
};

Iterator.prototype.maybeNext = function () {
  if (this._callback) {
    this._next(this._callback);

    this._callback = null;
  }
};

Iterator.prototype._next = function (callback) {
  if (this._aborted) {
    // The error should be picked up by either next() or end().
    var err = this._error;
    this._error = null;
    setImmediate(function () {
      callback(err);
    });
  } else if (this._cache.length > 0) {
    var key = this._cache.shift();

    var value = this._cache.shift();

    if (this._keyAsBuffer) key = mixedToBuffer(key);
    if (this._valueAsBuffer) value = mixedToBuffer(value);
    setImmediate(function () {
      callback(null, key, value);
    });
  } else if (this._completed) {
    setImmediate(callback);
  } else {
    this._callback = callback;
  }
};

Iterator.prototype._end = function (callback) {
  if (this._aborted || this._completed) {
    var err = this._error;
    setImmediate(function () {
      callback(err);
    });
    return;
  } // Don't advance the cursor anymore, and the transaction will complete
  // on its own in the next tick. This approach is much cleaner than calling
  // transaction.abort() with its unpredictable event order.


  this.onItem = noop;
  this.onAbort = callback;
  this.onComplete = callback;
};

/***/ }),
/* 645 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

exports.compare = function (a, b) {
  if (Buffer.isBuffer(a)) {
    var l = Math.min(a.length, b.length);

    for (var i = 0; i < l; i++) {
      var cmp = a[i] - b[i];
      if (cmp) return cmp;
    }

    return a.length - b.length;
  }

  return a < b ? -1 : a > b ? 1 : 0;
}; // to be compatible with the current abstract-leveldown tests
// nullish or empty strings.
// I could use !!val but I want to permit numbers and booleans,
// if possible.


function isDef(val) {
  return val !== undefined && val !== '';
}

function has(range, name) {
  return Object.hasOwnProperty.call(range, name);
}

function hasKey(range, name) {
  return Object.hasOwnProperty.call(range, name) && name;
}

var lowerBoundKey = exports.lowerBoundKey = function (range) {
  return hasKey(range, 'gt') || hasKey(range, 'gte') || hasKey(range, 'min') || (range.reverse ? hasKey(range, 'end') : hasKey(range, 'start')) || undefined;
};

var lowerBound = exports.lowerBound = function (range, def) {
  var k = lowerBoundKey(range);
  return k ? range[k] : def;
};

var lowerBoundInclusive = exports.lowerBoundInclusive = function (range) {
  return has(range, 'gt') ? false : true;
};

var upperBoundInclusive = exports.upperBoundInclusive = function (range) {
  return has(range, 'lt')
  /*&& !range.maxEx*/
  ? false : true;
};

var lowerBoundExclusive = exports.lowerBoundExclusive = function (range) {
  return !lowerBoundInclusive(range);
};

var upperBoundExclusive = exports.upperBoundExclusive = function (range) {
  return !upperBoundInclusive(range);
};

var upperBoundKey = exports.upperBoundKey = function (range) {
  return hasKey(range, 'lt') || hasKey(range, 'lte') || hasKey(range, 'max') || (range.reverse ? hasKey(range, 'start') : hasKey(range, 'end')) || undefined;
};

var upperBound = exports.upperBound = function (range, def) {
  var k = upperBoundKey(range);
  return k ? range[k] : def;
};

exports.start = function (range, def) {
  return range.reverse ? upperBound(range, def) : lowerBound(range, def);
};

exports.end = function (range, def) {
  return range.reverse ? lowerBound(range, def) : upperBound(range, def);
};

exports.startInclusive = function (range) {
  return range.reverse ? upperBoundInclusive(range) : lowerBoundInclusive(range);
};

exports.endInclusive = function (range) {
  return range.reverse ? lowerBoundInclusive(range) : upperBoundInclusive(range);
};

function id(e) {
  return e;
}

exports.toLtgt = function (range, _range, map, lower, upper) {
  _range = _range || {};
  map = map || id;
  var defaults = arguments.length > 3;
  var lb = exports.lowerBoundKey(range);
  var ub = exports.upperBoundKey(range);

  if (lb) {
    if (lb === 'gt') _range.gt = map(range.gt, false);else _range.gte = map(range[lb], false);
  } else if (defaults) _range.gte = map(lower, false);

  if (ub) {
    if (ub === 'lt') _range.lt = map(range.lt, true);else _range.lte = map(range[ub], true);
  } else if (defaults) _range.lte = map(upper, true);

  if (range.reverse != null) _range.reverse = !!range.reverse; //if range was used mutably
  //(in level-sublevel it's part of an options object
  //that has more properties on it.)

  if (has(_range, 'max')) delete _range.max;
  if (has(_range, 'min')) delete _range.min;
  if (has(_range, 'start')) delete _range.start;
  if (has(_range, 'end')) delete _range.end;
  return _range;
};

exports.contains = function (range, key, compare) {
  compare = compare || exports.compare;
  var lb = lowerBound(range);

  if (isDef(lb)) {
    var cmp = compare(key, lb);
    if (cmp < 0 || cmp === 0 && lowerBoundExclusive(range)) return false;
  }

  var ub = upperBound(range);

  if (isDef(ub)) {
    var cmp = compare(key, ub);
    if (cmp > 0 || cmp === 0 && upperBoundExclusive(range)) return false;
  }

  return true;
};

exports.filter = function (range, compare) {
  return function (key) {
    return exports.contains(range, key, compare);
  };
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 646 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

/**
 * Convert a typed array to a Buffer without a copy
 *
 * Author:   Feross Aboukhadijeh <https://feross.org>
 * License:  MIT
 *
 * `npm install typedarray-to-buffer`
 */
var isTypedArray = __webpack_require__(647).strict;

module.exports = function typedarrayToBuffer(arr) {
  if (isTypedArray(arr)) {
    // To avoid a copy, use the typed array's underlying ArrayBuffer to back new Buffer
    var buf = Buffer.from(arr.buffer);

    if (arr.byteLength !== arr.buffer.byteLength) {
      // Respect the "view", i.e. byteOffset and byteLength, without doing a copy
      buf = buf.slice(arr.byteOffset, arr.byteOffset + arr.byteLength);
    }

    return buf;
  } else {
    // Pass through all other types to `Buffer.from`
    return Buffer.from(arr);
  }
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 647 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = isTypedArray;
isTypedArray.strict = isStrictTypedArray;
isTypedArray.loose = isLooseTypedArray;
var toString = Object.prototype.toString;
var names = {
  '[object Int8Array]': true,
  '[object Int16Array]': true,
  '[object Int32Array]': true,
  '[object Uint8Array]': true,
  '[object Uint8ClampedArray]': true,
  '[object Uint16Array]': true,
  '[object Uint32Array]': true,
  '[object Float32Array]': true,
  '[object Float64Array]': true
};

function isTypedArray(arr) {
  return isStrictTypedArray(arr) || isLooseTypedArray(arr);
}

function isStrictTypedArray(arr) {
  return arr instanceof Int8Array || arr instanceof Int16Array || arr instanceof Int32Array || arr instanceof Uint8Array || arr instanceof Uint8ClampedArray || arr instanceof Uint16Array || arr instanceof Uint32Array || arr instanceof Float32Array || arr instanceof Float64Array;
}

function isLooseTypedArray(arr) {
  return names[toString.call(arr)];
}

/***/ }),
/* 648 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var types = [__webpack_require__(649), __webpack_require__(650), __webpack_require__(651), __webpack_require__(652), __webpack_require__(653)];
var draining;
var currentQueue;
var queueIndex = -1;
var queue = [];
var scheduled = false;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    nextTick();
  }
} //named nextTick for less confusing stack traces


function nextTick() {
  if (draining) {
    return;
  }

  scheduled = false;
  draining = true;
  var len = queue.length;
  var timeout = setTimeout(cleanUpNextTick);

  while (len) {
    currentQueue = queue;
    queue = [];

    while (currentQueue && ++queueIndex < len) {
      currentQueue[queueIndex].run();
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  queueIndex = -1;
  draining = false;
  clearTimeout(timeout);
}

var scheduleDrain;
var i = -1;
var len = types.length;

while (++i < len) {
  if (types[i] && types[i].test && types[i].test()) {
    scheduleDrain = types[i].install(nextTick);
    break;
  }
} // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  var fun = this.fun;
  var array = this.array;

  switch (array.length) {
    case 0:
      return fun();

    case 1:
      return fun(array[0]);

    case 2:
      return fun(array[0], array[1]);

    case 3:
      return fun(array[0], array[1], array[2]);

    default:
      return fun.apply(null, array);
  }
};

module.exports = immediate;

function immediate(task) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(task, args));

  if (!scheduled && !draining) {
    scheduled = true;
    scheduleDrain();
  }
}

/***/ }),
/* 649 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

exports.test = function () {
  // Don't get fooled by e.g. browserify environments.
  return typeof process !== 'undefined' && !process.browser;
};

exports.install = function (func) {
  return function () {
    process.nextTick(func);
  };
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5)))

/***/ }),
/* 650 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) { //based off rsvp https://github.com/tildeio/rsvp.js
//license https://github.com/tildeio/rsvp.js/blob/master/LICENSE
//https://github.com/tildeio/rsvp.js/blob/master/lib/rsvp/asap.js

var Mutation = global.MutationObserver || global.WebKitMutationObserver;

exports.test = function () {
  return Mutation;
};

exports.install = function (handle) {
  var called = 0;
  var observer = new Mutation(handle);
  var element = global.document.createTextNode('');
  observer.observe(element, {
    characterData: true
  });
  return function () {
    element.data = called = ++called % 2;
  };
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(8)))

/***/ }),
/* 651 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

exports.test = function () {
  if (global.setImmediate) {
    // we can only get here in IE10
    // which doesn't handel postMessage well
    return false;
  }

  return typeof global.MessageChannel !== 'undefined';
};

exports.install = function (func) {
  var channel = new global.MessageChannel();
  channel.port1.onmessage = func;
  return function () {
    channel.port2.postMessage(0);
  };
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(8)))

/***/ }),
/* 652 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

exports.test = function () {
  return 'document' in global && 'onreadystatechange' in global.document.createElement('script');
};

exports.install = function (handle) {
  return function () {
    // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
    // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
    var scriptEl = global.document.createElement('script');

    scriptEl.onreadystatechange = function () {
      handle();
      scriptEl.onreadystatechange = null;
      scriptEl.parentNode.removeChild(scriptEl);
      scriptEl = null;
    };

    global.document.documentElement.appendChild(scriptEl);
    return handle;
  };
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(8)))

/***/ }),
/* 653 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.test = function () {
  return true;
};

exports.install = function (t) {
  return function () {
    setTimeout(t, 0);
  };
};

/***/ }),
/* 654 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.test = function (key) {
  return function test(impl) {
    try {
      impl.cmp(key, 0);
      return true;
    } catch (err) {
      return false;
    }
  };
};

exports.binaryKeys = exports.test(new Uint8Array(0));
exports.arrayKeys = exports.test([1]);

/***/ }),
/* 655 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const debug = __webpack_require__(1);

const log = debug('repo-migrations:repo_mem_lock');
const lockFile = 'repo.lock';
const LOCKS = {};
/**
 * Lock the repo in the given dir and for given repo version.
 * @param {int} version
 * @param {string} dir
 * @returns {Promise<Object>}
 */

exports.lock = async function lock(version, dir) {
  // eslint-disable-line require-await
  const file = dir + '/' + lockFile;
  log('locking %s', file);

  if (LOCKS[file] === true) {
    throw Error("There is already present lock for: ".concat(file));
  }

  LOCKS[file] = true;
  return {
    close() {
      if (LOCKS[file]) {
        log('releasing lock %s', file);
        delete LOCKS[file];
      }
    }

  };
};

/***/ }),
/* 656 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * bytes
 * Copyright(c) 2012-2014 TJ Holowaychuk
 * Copyright(c) 2015 Jed Watson
 * MIT Licensed
 */

/**
 * Module exports.
 * @public
 */

module.exports = bytes;
module.exports.format = format;
module.exports.parse = parse;
/**
 * Module variables.
 * @private
 */

var formatThousandsRegExp = /\B(?=(\d{3})+(?!\d))/g;
var formatDecimalsRegExp = /(?:\.0*|(\.[^0]+)0+)$/;
var map = {
  b: 1,
  kb: 1 << 10,
  mb: 1 << 20,
  gb: 1 << 30,
  tb: Math.pow(1024, 4),
  pb: Math.pow(1024, 5)
};
var parseRegExp = /^((-|\+)?(\d+(?:\.\d+)?)) *(kb|mb|gb|tb|pb)$/i;
/**
 * Convert the given value in bytes into a string or parse to string to an integer in bytes.
 *
 * @param {string|number} value
 * @param {{
 *  case: [string],
 *  decimalPlaces: [number]
 *  fixedDecimals: [boolean]
 *  thousandsSeparator: [string]
 *  unitSeparator: [string]
 *  }} [options] bytes options.
 *
 * @returns {string|number|null}
 */

function bytes(value, options) {
  if (typeof value === 'string') {
    return parse(value);
  }

  if (typeof value === 'number') {
    return format(value, options);
  }

  return null;
}
/**
 * Format the given value in bytes into a string.
 *
 * If the value is negative, it is kept as such. If it is a float,
 * it is rounded.
 *
 * @param {number} value
 * @param {object} [options]
 * @param {number} [options.decimalPlaces=2]
 * @param {number} [options.fixedDecimals=false]
 * @param {string} [options.thousandsSeparator=]
 * @param {string} [options.unit=]
 * @param {string} [options.unitSeparator=]
 *
 * @returns {string|null}
 * @public
 */


function format(value, options) {
  if (!Number.isFinite(value)) {
    return null;
  }

  var mag = Math.abs(value);
  var thousandsSeparator = options && options.thousandsSeparator || '';
  var unitSeparator = options && options.unitSeparator || '';
  var decimalPlaces = options && options.decimalPlaces !== undefined ? options.decimalPlaces : 2;
  var fixedDecimals = Boolean(options && options.fixedDecimals);
  var unit = options && options.unit || '';

  if (!unit || !map[unit.toLowerCase()]) {
    if (mag >= map.pb) {
      unit = 'PB';
    } else if (mag >= map.tb) {
      unit = 'TB';
    } else if (mag >= map.gb) {
      unit = 'GB';
    } else if (mag >= map.mb) {
      unit = 'MB';
    } else if (mag >= map.kb) {
      unit = 'KB';
    } else {
      unit = 'B';
    }
  }

  var val = value / map[unit.toLowerCase()];
  var str = val.toFixed(decimalPlaces);

  if (!fixedDecimals) {
    str = str.replace(formatDecimalsRegExp, '$1');
  }

  if (thousandsSeparator) {
    str = str.replace(formatThousandsRegExp, thousandsSeparator);
  }

  return str + unitSeparator + unit;
}
/**
 * Parse the string value into an integer in bytes.
 *
 * If no unit is given, it is assumed the value is in bytes.
 *
 * @param {number|string} val
 *
 * @returns {number|null}
 * @public
 */


function parse(val) {
  if (typeof val === 'number' && !isNaN(val)) {
    return val;
  }

  if (typeof val !== 'string') {
    return null;
  } // Test if the string passed is valid


  var results = parseRegExp.exec(val);
  var floatValue;
  var unit = 'b';

  if (!results) {
    // Nothing could be extracted from the given string
    floatValue = parseInt(val, 10);
    unit = 'b';
  } else {
    // Retrieve the value and the unit
    floatValue = parseFloat(results[1]);
    unit = results[4].toLowerCase();
  }

  return Math.floor(map[unit] * floatValue);
}

/***/ }),
/* 657 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  repoVersion: 7
};

/***/ }),
/* 658 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.create = function createBackend(name, path, options) {
  const Ctor = options.storageBackends[name];
  const backendOptions = Object.assign({}, options.storageBackendOptions[name] || {});
  return new Ctor(path, backendOptions);
};

/***/ }),
/* 659 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const Key = __webpack_require__(14).Key;

const debug = __webpack_require__(1);

const log = debug('repo:version');
const versionKey = new Key('version');

module.exports = store => {
  return {
    /**
     * Check if a version file exists.
     *
     * @returns {Promise<bool>}
     */
    async exists() {
      // eslint-disable-line require-await
      return store.has(versionKey);
    },

    /**
     * Get the current version.
     *
     * @returns {Promise<Integer>}
     */
    async get() {
      const buf = await store.get(versionKey);
      return parseInt(buf.toString().trim(), 10);
    },

    /**
     * Set the version of the repo, writing it to the underlying store.
     *
     * @param {number} version
     * @returns {Promise<void>}
     */
    async set(version) {
      // eslint-disable-line require-await
      return store.put(versionKey, Buffer.from(String(version)));
    },

    /**
     * Check the current version, and returns true if versions matches
     * @param {number} expected
     * @returns {boolean}
     */
    async check(expected) {
      const version = await this.get();
      log('comparing version: %s and %s', version, expected); // Version 6 and 7 are the same
      // TODO: Clean up the compatibility logic. Repo feature detection would be ideal, or a better version schema

      const compatibleVersion = version === 6 && expected === 7 || expected === 6 && version === 7;
      return version === expected || compatibleVersion;
    }

  };
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 660 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const Key = __webpack_require__(14).Key;

const {
  default: Queue
} = __webpack_require__(50);

const _get = __webpack_require__(272);

const _set = __webpack_require__(661);

const _has = __webpack_require__(662);

const errcode = __webpack_require__(2);

const errors = __webpack_require__(167);

const configKey = new Key('config');

module.exports = store => {
  const setQueue = new Queue({
    concurrency: 1
  });
  const configStore = {
    /**
     * Get the current configuration from the repo.
     *
     * @param {String} key - the config key to get
     * @returns {Promise<Object>}
     */
    async get(key) {
      if (!key) {
        key = undefined;
      }

      const encodedValue = await store.get(configKey);
      const config = JSON.parse(encodedValue.toString());

      if (key !== undefined && !_has(config, key)) {
        throw new errors.NotFoundError("Key ".concat(key, " does not exist in config"));
      }

      const value = key !== undefined ? _get(config, key) : config;
      return value;
    },

    /**
     * Set the current configuration for this repo.
     *
     * @param {String} key - the config key to be written
     * @param {Object} value - the config value to be written
     * @returns {void}
     */
    async set(key, value) {
      // eslint-disable-line require-await
      if (arguments.length === 1) {
        value = key;
        key = undefined;
      } else if (!key || typeof key !== 'string') {
        throw errcode(new Error('Invalid key type: ' + typeof key), 'ERR_INVALID_KEY');
      }

      if (value === undefined || Buffer.isBuffer(value)) {
        throw errcode(new Error('Invalid value type: ' + typeof value), 'ERR_INVALID_VALUE');
      }

      return setQueue.add(() => _doSet({
        key: key,
        value: value
      }));
    },

    /**
     * Check if a config file exists.
     *
     * @returns {Promise<bool>}
     */
    async exists() {
      // eslint-disable-line require-await
      return store.has(configKey);
    }

  };
  return configStore;

  async function _doSet(m) {
    const key = m.key;
    const value = m.value;

    if (key) {
      const config = await configStore.get();

      _set(config, key, value);

      return _saveAll(config);
    }

    return _saveAll(value);
  }

  function _saveAll(config) {
    const buf = Buffer.from(JSON.stringify(config, null, 2));
    return store.put(configKey, buf);
  }
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 661 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = set;
/*
  var obj1 = {};
  set(obj1, 'a.aa.aaa', 4}); // true
  obj1; // {a: {aa: {aaa: 4}}}

  var obj2 = {};
  set(obj2, [a, aa, aaa], 4}); // true
  obj2; // {a: {aa: {aaa: 4}}}

  var obj3 = {a: {aa: {aaa: 2}}};
  set(obj3, 'a.aa.aaa', 3); // true
  obj3; // {a: {aa: {aaa: 3}}}

  // don't clobber existing
  var obj4 = {a: {aa: {aaa: 2}}};
  set(obj4, 'a.aa', {bbb: 7}); // false

  const obj5 = {a: {}};
  const sym = Symbol();
  set(obj5.a, sym, 7); // true
  obj5; // {a: {Symbol(): 7}}
*/

function set(obj, props, value) {
  if (typeof props == 'string') {
    props = props.split('.');
  }

  if (typeof props == 'symbol') {
    props = [props];
  }

  var lastProp = props.pop();

  if (!lastProp) {
    return false;
  }

  var thisProp;

  while (thisProp = props.shift()) {
    if (typeof obj[thisProp] == 'undefined') {
      obj[thisProp] = {};
    }

    obj = obj[thisProp];

    if (!obj || typeof obj != 'object') {
      return false;
    }
  }

  obj[lastProp] = value;
  return true;
}

/***/ }),
/* 662 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT = 'Expected a function';
/** Used to stand-in for `undefined` hash values. */

var HASH_UNDEFINED = '__lodash_hash_undefined__';
/** Used as references for various `Number` constants. */

var INFINITY = 1 / 0,
    MAX_SAFE_INTEGER = 9007199254740991;
/** `Object#toString` result references. */

var argsTag = '[object Arguments]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    symbolTag = '[object Symbol]';
/** Used to match property names within property paths. */

var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/,
    reLeadingDot = /^\./,
    rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */

var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
/** Used to match backslashes in property paths. */

var reEscapeChar = /\\(\\)?/g;
/** Used to detect host constructors (Safari). */

var reIsHostCtor = /^\[object .+?Constructor\]$/;
/** Used to detect unsigned integer values. */

var reIsUint = /^(?:0|[1-9]\d*)$/;
/** Detect free variable `global` from Node.js. */

var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
/** Detect free variable `self`. */

var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
/** Used as a reference to the global object. */

var root = freeGlobal || freeSelf || Function('return this')();
/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */

function getValue(object, key) {
  return object == null ? undefined : object[key];
}
/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */


function isHostObject(value) {
  // Many host objects are `Object` objects that can coerce to strings
  // despite having improperly defined `toString` methods.
  var result = false;

  if (value != null && typeof value.toString != 'function') {
    try {
      result = !!(value + '');
    } catch (e) {}
  }

  return result;
}
/** Used for built-in method references. */


var arrayProto = Array.prototype,
    funcProto = Function.prototype,
    objectProto = Object.prototype;
/** Used to detect overreaching core-js shims. */

var coreJsData = root['__core-js_shared__'];
/** Used to detect methods masquerading as native. */

var maskSrcKey = function () {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? 'Symbol(src)_1.' + uid : '';
}();
/** Used to resolve the decompiled source of functions. */


var funcToString = funcProto.toString;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */

var objectToString = objectProto.toString;
/** Used to detect if a method is native. */

var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
/** Built-in value references. */

var Symbol = root.Symbol,
    propertyIsEnumerable = objectProto.propertyIsEnumerable,
    splice = arrayProto.splice;
/* Built-in method references that are verified to be native. */

var Map = getNative(root, 'Map'),
    nativeCreate = getNative(Object, 'create');
/** Used to convert symbols to primitives and strings. */

var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;
/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

function Hash(entries) {
  var index = -1,
      length = entries ? entries.length : 0;
  this.clear();

  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */


function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
}
/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */


function hashDelete(key) {
  return this.has(key) && delete this.__data__[key];
}
/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */


function hashGet(key) {
  var data = this.__data__;

  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }

  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}
/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */


function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}
/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */


function hashSet(key, value) {
  var data = this.__data__;
  data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
  return this;
} // Add methods to `Hash`.


Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;
/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

function ListCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;
  this.clear();

  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */


function listCacheClear() {
  this.__data__ = [];
}
/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */


function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }

  var lastIndex = data.length - 1;

  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }

  return true;
}
/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */


function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);
  return index < 0 ? undefined : data[index][1];
}
/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */


function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}
/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */


function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }

  return this;
} // Add methods to `ListCache`.


ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;
/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

function MapCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;
  this.clear();

  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */


function mapCacheClear() {
  this.__data__ = {
    'hash': new Hash(),
    'map': new (Map || ListCache)(),
    'string': new Hash()
  };
}
/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */


function mapCacheDelete(key) {
  return getMapData(this, key)['delete'](key);
}
/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */


function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}
/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */


function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}
/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */


function mapCacheSet(key, value) {
  getMapData(this, key).set(key, value);
  return this;
} // Add methods to `MapCache`.


MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;
/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */

function assocIndexOf(array, key) {
  var length = array.length;

  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }

  return -1;
}
/**
 * The base implementation of `_.has` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */


function baseHas(object, key) {
  return object != null && hasOwnProperty.call(object, key);
}
/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */


function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }

  var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}
/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */


function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }

  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }

  var result = value + '';
  return result == '0' && 1 / value == -INFINITY ? '-0' : result;
}
/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Array} Returns the cast property path array.
 */


function castPath(value) {
  return isArray(value) ? value : stringToPath(value);
}
/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */


function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
}
/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */


function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}
/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */


function hasPath(object, path, hasFunc) {
  path = isKey(path, object) ? [path] : castPath(path);
  var result,
      index = -1,
      length = path.length;

  while (++index < length) {
    var key = toKey(path[index]);

    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }

    object = object[key];
  }

  if (result) {
    return result;
  }

  var length = object ? object.length : 0;
  return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
}
/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */


function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
}
/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */


function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }

  var type = typeof value;

  if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
    return true;
  }

  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
}
/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */


function isKeyable(value) {
  var type = typeof value;
  return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
}
/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */


function isMasked(func) {
  return !!maskSrcKey && maskSrcKey in func;
}
/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */


var stringToPath = memoize(function (string) {
  string = toString(string);
  var result = [];

  if (reLeadingDot.test(string)) {
    result.push('');
  }

  string.replace(rePropName, function (match, number, quote, string) {
    result.push(quote ? string.replace(reEscapeChar, '$1') : number || match);
  });
  return result;
});
/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */

function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }

  var result = value + '';
  return result == '0' && 1 / value == -INFINITY ? '-0' : result;
}
/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to process.
 * @returns {string} Returns the source code.
 */


function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}

    try {
      return func + '';
    } catch (e) {}
  }

  return '';
}
/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */


function memoize(func, resolver) {
  if (typeof func != 'function' || resolver && typeof resolver != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }

  var memoized = function memoized() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }

    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result);
    return result;
  };

  memoized.cache = new (memoize.Cache || MapCache)();
  return memoized;
} // Assign cache to `_.memoize`.


memoize.Cache = MapCache;
/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */

function eq(value, other) {
  return value === other || value !== value && other !== other;
}
/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */


function isArguments(value) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') && (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
}
/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */


var isArray = Array.isArray;
/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */

function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}
/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */


function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}
/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */


function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}
/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */


function isLength(value) {
  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */


function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */


function isObjectLike(value) {
  return !!value && typeof value == 'object';
}
/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */


function isSymbol(value) {
  return typeof value == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;
}
/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */


function toString(value) {
  return value == null ? '' : baseToString(value);
}
/**
 * Checks if `path` is a direct property of `object`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = { 'a': { 'b': 2 } };
 * var other = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.has(object, 'a');
 * // => true
 *
 * _.has(object, 'a.b');
 * // => true
 *
 * _.has(object, ['a', 'b']);
 * // => true
 *
 * _.has(other, 'a');
 * // => false
 */


function has(object, path) {
  return object != null && hasPath(object, path, baseHas);
}

module.exports = has;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(8)))

/***/ }),
/* 663 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const Key = __webpack_require__(14).Key;

const sortKeys = __webpack_require__(664);

const specKey = new Key('datastore_spec');

module.exports = store => {
  return {
    /**
     * Check if a datastore spec file exists.
     *
     * @returns {Promise<bool>}
     */
    async exists() {
      // eslint-disable-line require-await
      return store.has(specKey);
    },

    /**
     * Get the current datastore spec.
     *
     * @returns {Promise<Buffer>}
     */
    async get() {
      const buf = await store.get(specKey);
      return JSON.parse(buf.toString());
    },

    /**
     * Set the datastore spec of the repo, writing it to the underlying store.
     * TODO unclear on what the type should be or if it's required
     * @param {number} spec
     * @returns {Promise<void>}
     */
    async set(spec) {
      // eslint-disable-line require-await
      return store.put(specKey, Buffer.from(JSON.stringify(sortKeys(spec, {
        deep: true
      }))));
    }

  };
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 664 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const isPlainObject = __webpack_require__(194);

module.exports = (object, options = {}) => {
  if (!isPlainObject(object)) {
    throw new TypeError('Expected a plain object');
  }

  const {
    deep
  } = options;
  const seenInput = [];
  const seenOutput = [];

  const deepSortArray = array => {
    const seenIndex = seenInput.indexOf(array);

    if (seenIndex !== -1) {
      return seenOutput[seenIndex];
    }

    const result = [];
    seenInput.push(array);
    seenOutput.push(result);
    result.push(...array.map(item => {
      if (Array.isArray(item)) {
        return deepSortArray(item);
      }

      if (isPlainObject(item)) {
        return sortKeys(item);
      }

      return item;
    }));
    return result;
  };

  const sortKeys = object => {
    const seenIndex = seenInput.indexOf(object);

    if (seenIndex !== -1) {
      return seenOutput[seenIndex];
    }

    const result = {};
    const keys = Object.keys(object).sort(options.compare);
    seenInput.push(object);
    seenOutput.push(result);

    for (const key of keys) {
      const value = object[key];

      if (deep && Array.isArray(value)) {
        result[key] = deepSortArray(value);
        continue;
      }

      result[key] = deep && isPlainObject(value) ? sortKeys(value) : value;
    }

    return result;
  };

  return sortKeys(object);
};

/***/ }),
/* 665 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const Key = __webpack_require__(14).Key;

const apiFile = new Key('api');

module.exports = store => {
  return {
    /**
     * Get the current configuration from the repo.
     *
     * @returns {Promise<String>}
     */
    async get() {
      const value = await store.get(apiFile);
      return value && value.toString();
    },

    /**
     * Set the current configuration for this repo.
     *
     * @param {Object} value - the api address to be written
     * @returns {Promise<?>}
     */
    async set(value) {
      // eslint-disable-line require-await
      return store.put(apiFile, Buffer.from(value.toString()));
    },

    /**
     * Deletes api file
     *
     * @returns {Promise<void>}
     */
    async delete() {
      // eslint-disable-line require-await
      return store.delete(apiFile);
    }

  };
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 666 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const core = __webpack_require__(296);

const ShardingStore = core.ShardingDatastore;

const Block = __webpack_require__(80);

const CID = __webpack_require__(3);

const errcode = __webpack_require__(2);

const {
  cidToKey
} = __webpack_require__(301);

module.exports = async (filestore, options) => {
  const store = await maybeWithSharding(filestore, options);
  return createBaseStore(store);
};

function maybeWithSharding(filestore, options) {
  if (options.sharding) {
    const shard = new core.shard.NextToLast(2);
    return ShardingStore.createOrOpen(filestore, shard);
  }

  return filestore;
}

function createBaseStore(store) {
  return {
    /**
     * Query the store.
     *
     * @param {object} query
     * @return {Iterable}
     */
    query(query) {
      return _wrapAsyncGenerator(function* () {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;

        var _iteratorError;

        try {
          for (var _iterator = _asyncIterator(store.query(query)), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
            const block = _value;
            yield block;
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              yield _awaitAsyncGenerator(_iterator.return());
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      })();
    },

    /**
     * Get a single block by CID.
     *
     * @param {CID} cid
     * @returns {Promise<Block>}
     */
    async get(cid) {
      if (!CID.isCID(cid)) {
        throw errcode(new Error('Not a valid cid'), 'ERR_INVALID_CID');
      }

      const key = cidToKey(cid);
      let blockData;

      try {
        blockData = await store.get(key);
        return new Block(blockData, cid);
      } catch (err) {
        if (err.code === 'ERR_NOT_FOUND') {
          const otherCid = cidToOtherVersion(cid);

          if (!otherCid) {
            throw err;
          }

          const otherKey = cidToKey(otherCid);
          const blockData = await store.get(otherKey);
          await store.put(key, blockData);
          return new Block(blockData, cid);
        }

        throw err;
      }
    },

    /**
     * Write a single block to the store.
     *
     * @param {Block} block
     * @returns {Promise<void>}
     */
    async put(block) {
      if (!Block.isBlock(block)) {
        throw new Error('invalid block');
      }

      const k = cidToKey(block.cid);
      const exists = await store.has(k);
      if (exists) return;
      return store.put(k, block.data);
    },

    /**
     * Like put, but for more.
     *
     * @param {AsyncIterable<Block>|Iterable<Block>} blocks
     * @returns {Promise<void>}
     */
    async putMany(blocks) {
      const batch = store.batch();
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;

      var _iteratorError2;

      try {
        for (var _iterator2 = _asyncIterator(blocks), _step2, _value2; _step2 = await _iterator2.next(), _iteratorNormalCompletion2 = _step2.done, _value2 = await _step2.value, !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {
          const block = _value2;
          const key = cidToKey(block.cid);

          if (await store.has(key)) {
            continue;
          }

          batch.put(key, block.data);
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
            await _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return batch.commit();
    },

    /**
     * Does the store contain block with this cid?
     *
     * @param {CID} cid
     * @returns {Promise<bool>}
     */
    async has(cid) {
      if (!CID.isCID(cid)) {
        throw errcode(new Error('Not a valid cid'), 'ERR_INVALID_CID');
      }

      const exists = await store.has(cidToKey(cid));
      if (exists) return exists;
      const otherCid = cidToOtherVersion(cid);
      if (!otherCid) return false;
      return store.has(cidToKey(otherCid));
    },

    /**
     * Delete a block from the store
     *
     * @param {CID} cid
     * @returns {Promise<void>}
     */
    async delete(cid) {
      // eslint-disable-line require-await
      if (!CID.isCID(cid)) {
        throw errcode(new Error('Not a valid cid'), 'ERR_INVALID_CID');
      }

      return store.delete(cidToKey(cid));
    },

    /**
     * Close the store
     *
     * @returns {Promise<void>}
     */
    async close() {
      // eslint-disable-line require-await
      return store.close();
    }

  };
}

function cidToOtherVersion(cid) {
  try {
    return cid.version === 0 ? cid.toV1() : cid.toV0();
  } catch (err) {
    return null;
  }
}

/***/ }),
/* 667 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* @flow */

/* :: import type {Batch, Query, QueryResult, Callback} from './' */

const {
  filter,
  sortAll,
  take,
  map
} = __webpack_require__(298);

const Key = __webpack_require__(297); // Errors


const Errors = __webpack_require__(299);

class MemoryDatastore {
  /* :: data: {[key: string]: Buffer} */
  constructor() {
    this.data = {};
  }

  async open()
  /* : Promise */
  {}

  async put(key
  /* : Key */
  , val
  /* : Buffer */
  )
  /* : Promise */
  {
    this.data[key.toString()] = val;
  }

  async get(key
  /* : Key */
  )
  /* : Promise<Buffer> */
  {
    const exists = await this.has(key);
    if (!exists) throw Errors.notFoundError();
    return this.data[key.toString()];
  }

  async has(key
  /* : Key */
  )
  /* : Promise<Boolean> */
  {
    return this.data[key.toString()] !== undefined;
  }

  async delete(key
  /* : Key */
  )
  /* : Promise */
  {
    delete this.data[key.toString()];
  }

  batch()
  /* : Batch<Buffer> */
  {
    let puts = [];
    let dels = [];
    return {
      put(key
      /* : Key */
      , value
      /* : Buffer */
      )
      /* : void */
      {
        puts.push([key, value]);
      },

      delete(key
      /* : Key */
      )
      /* : void */
      {
        dels.push(key);
      },

      commit: async () =>
      /* : Promise */
      {
        puts.forEach(v => {
          this.data[v[0].toString()] = v[1];
        });
        puts = [];
        dels.forEach(key => {
          delete this.data[key.toString()];
        });
        dels = [];
      }
    };
  }

  query(q
  /* : Query<Buffer> */
  )
  /* : Iterator */
  {
    let it = Object.entries(this.data);
    it = map(it, entry => ({
      key: new Key(entry[0]),
      value: entry[1]
    }));

    if (q.prefix != null) {
      it = filter(it, e => e.key.toString().startsWith(q.prefix));
    }

    if (Array.isArray(q.filters)) {
      it = q.filters.reduce((it, f) => filter(it, f), it);
    }

    if (Array.isArray(q.orders)) {
      it = q.orders.reduce((it, f) => sortAll(it, f), it);
    }

    if (q.offset != null) {
      let i = 0;
      it = filter(it, () => i++ >= q.offset);
    }

    if (q.limit != null) {
      it = take(it, q.limit);
    }

    if (q.keysOnly === true) {
      it = map(it, e => ({
        key: e.key
      }));
    }

    return it;
  }

  async close()
  /* : Promise */
  {}

}

module.exports = MemoryDatastore;

/***/ }),
/* 668 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function createError(msg, code, props) {
  var err = msg instanceof Error ? msg : new Error(msg);
  var key;

  if (typeof code === 'object') {
    props = code;
  } else if (code != null) {
    err.code = code;
  }

  if (props) {
    for (key in props) {
      err[key] = props[key];
    }
  }

  return err;
}

module.exports = createError;

/***/ }),
/* 669 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const Key = __webpack_require__(42).Key;

const sh = __webpack_require__(300);

const KeytransformStore = __webpack_require__(109);

const shardKey = new Key(sh.SHARDING_FN);
const shardReadmeKey = new Key(sh.README_FN);
/**
 * Backend independent abstraction of go-ds-flatfs.
 *
 * Wraps another datastore such that all values are stored
 * sharded according to the given sharding function.
 */

class ShardingDatastore {
  constructor(store, shard) {
    this.child = new KeytransformStore(store, {
      convert: this._convertKey.bind(this),
      invert: this._invertKey.bind(this)
    });
    this.shard = shard;
  }

  open() {
    return this.child.open();
  }

  _convertKey(key) {
    const s = key.toString();

    if (s === shardKey.toString() || s === shardReadmeKey.toString()) {
      return key;
    }

    const parent = new Key(this.shard.fun(s));
    return parent.child(key);
  }

  _invertKey(key) {
    const s = key.toString();

    if (s === shardKey.toString() || s === shardReadmeKey.toString()) {
      return key;
    }

    return Key.withNamespaces(key.list().slice(1));
  }

  static async createOrOpen(store, shard) {
    try {
      await ShardingDatastore.create(store, shard);
    } catch (err) {
      if (err && err.message !== 'datastore exists') throw err;
    }

    return ShardingDatastore.open(store);
  }

  static async open(store) {
    const shard = await sh.readShardFun('/', store);
    return new ShardingDatastore(store, shard);
  }

  static async create(store, shard) {
    const exists = await store.has(shardKey);

    if (!exists) {
      const put = typeof store.putRaw === 'function' ? store.putRaw.bind(store) : store.put.bind(store);
      return Promise.all([put(shardKey, Buffer.from(shard.toString() + '\n')), put(shardReadmeKey, Buffer.from(sh.readme))]);
    }

    const diskShard = await sh.readShardFun('/', store);
    const a = (diskShard || '').toString();
    const b = shard.toString();
    if (a !== b) throw new Error("specified fun ".concat(b, " does not match repo shard fun ").concat(a));
    throw new Error('datastore exists');
  }

  put(key, val) {
    return this.child.put(key, val);
  }

  get(key) {
    return this.child.get(key);
  }

  has(key) {
    return this.child.has(key);
  }

  delete(key) {
    return this.child.delete(key);
  }

  batch() {
    return this.child.batch();
  }

  query(q) {
    const tq = {
      keysOnly: q.keysOnly,
      offset: q.offset,
      limit: q.limit,
      filters: [e => e.key.toString() !== shardKey.toString(), e => e.key.toString() !== shardReadmeKey.toString()]
    };

    if (q.prefix != null) {
      tq.filters.push(e => {
        return this._invertKey(e.key).toString().startsWith(q.prefix);
      });
    }

    if (q.filters != null) {
      const filters = q.filters.map(f => e => {
        return f(Object.assign({}, e, {
          key: this._invertKey(e.key)
        }));
      });
      tq.filters = tq.filters.concat(filters);
    }

    if (q.orders != null) {
      tq.orders = q.orders.map(o => async res => {
        res.forEach(e => {
          e.key = this._invertKey(e.key);
        });
        const ordered = await o(res);
        ordered.forEach(e => {
          e.key = this._convertKey(e.key);
        });
        return ordered;
      });
    }

    return this.child.query(tq);
  }

  close() {
    return this.child.close();
  }

}

module.exports = ShardingDatastore;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 670 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = "This is a repository of IPLD objects. Each IPLD object is in a single file,\nnamed <base32 encoding of cid>.data. Where <base32 encoding of cid> is the\n\"base32\" encoding of the CID (as specified in\nhttps://github.com/multiformats/multibase) without the 'B' prefix.\nAll the object files are placed in a tree of directories, based on a\nfunction of the CID. This is a form of sharding similar to\nthe objects directory in git repositories. Previously, we used\nprefixes, we now use the next-to-last two charters.\n    func NextToLast(base32cid string) {\n      nextToLastLen := 2\n      offset := len(base32cid) - nextToLastLen - 1\n      return str[offset : offset+nextToLastLen]\n    }\nFor example, an object with a base58 CIDv1 of\n    zb2rhYSxw4ZjuzgCnWSt19Q94ERaeFhu9uSqRgjSdx9bsgM6f\nhas a base32 CIDv1 of\n    BAFKREIA22FLID5AJ2KU7URG47MDLROZIH6YF2KALU2PWEFPVI37YLKRSCA\nand will be placed at\n    SC/AFKREIA22FLID5AJ2KU7URG47MDLROZIH6YF2KALU2PWEFPVI37YLKRSCA.data\nwith 'SC' being the last-to-next two characters and the 'B' at the\nbeginning of the CIDv1 string is the multibase prefix that is not\nstored in the filename.\n";

/***/ }),
/* 671 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* @flow */


function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

const Key = __webpack_require__(42).Key;

const Errors = __webpack_require__(42).Errors;

const utils = __webpack_require__(42).utils;

const filter = utils.filter;
const take = utils.take;
const sortAll = utils.sortAll;
const replaceStartWith = utils.replaceStartWith;

const Keytransform = __webpack_require__(109);
/**
 * A datastore that can combine multiple stores inside various
 * key prefixs.
 */


class MountDatastore {
  constructor(mounts) {
    this.mounts = mounts.slice();
  }

  open() {
    return Promise.all(this.mounts.map(m => m.datastore.open()));
  }
  /**
   * Lookup the matching datastore for the given key.
   *
   * @private
   * @param {Key} key
   * @returns {{Datastore, Key, Key}}
   */


  _lookup(key) {
    for (let mount of this.mounts) {
      if (mount.prefix.toString() === key.toString() || mount.prefix.isAncestorOf(key)) {
        const s = replaceStartWith(key.toString(), mount.prefix.toString());
        return {
          datastore: mount.datastore,
          mountpoint: mount.prefix,
          rest: new Key(s)
        };
      }
    }
  }

  put(key, value) {
    const match = this._lookup(key);

    if (match == null) {
      throw Errors.dbWriteFailedError(new Error('No datastore mounted for this key'));
    }

    return match.datastore.put(match.rest, value);
  }

  get(key) {
    const match = this._lookup(key);

    if (match == null) {
      throw Errors.notFoundError(new Error('No datastore mounted for this key'));
    }

    return match.datastore.get(match.rest);
  }

  has(key) {
    const match = this._lookup(key);

    if (match == null) {
      return false;
    }

    return match.datastore.has(match.rest);
  }

  delete(key) {
    const match = this._lookup(key);

    if (match == null) {
      throw Errors.dbDeleteFailedError(new Error('No datastore mounted for this key'));
    }

    return match.datastore.delete(match.rest);
  }

  close() {
    return Promise.all(this.mounts.map(m => {
      return m.datastore.close();
    }));
  }

  batch() {
    const batchMounts = {};

    const lookup = key => {
      const match = this._lookup(key);

      if (match == null) {
        throw new Error('No datastore mounted for this key');
      }

      const m = match.mountpoint.toString();

      if (batchMounts[m] == null) {
        batchMounts[m] = match.datastore.batch();
      }

      return {
        batch: batchMounts[m],
        rest: match.rest
      };
    };

    return {
      put: (key, value) => {
        const match = lookup(key);
        match.batch.put(match.rest, value);
      },
      delete: key => {
        const match = lookup(key);
        match.batch.delete(match.rest);
      },
      commit: () => {
        return Promise.all(Object.keys(batchMounts).map(p => batchMounts[p].commit()));
      }
    };
  }

  query(q) {
    const qs = this.mounts.map(m => {
      const ks = new Keytransform(m.datastore, {
        convert: key => {
          throw new Error('should never be called');
        },
        invert: key => {
          return m.prefix.child(key);
        }
      });
      let prefix;

      if (q.prefix != null) {
        prefix = replaceStartWith(q.prefix, m.prefix.toString());
      }

      return ks.query({
        prefix: prefix,
        filters: q.filters,
        keysOnly: q.keysOnly
      });
    });

    let it = _many(qs);

    if (q.filters) q.filters.forEach(f => {
      it = filter(it, f);
    });
    if (q.orders) q.orders.forEach(o => {
      it = sortAll(it, o);
    });

    if (q.offset != null) {
      let i = 0;
      it = filter(it, () => i++ >= q.offset);
    }

    if (q.limit != null) it = take(it, q.limit);
    return it;
  }

}

function _many(iterable) {
  return _wrapAsyncGenerator(function* () {
    let completed = iterable.map(() => false);

    while (!completed.every(Boolean)) {
      for (const [idx, itr] of iterable.entries()) {
        const it = yield _awaitAsyncGenerator(itr.next());

        if (it.done) {
          completed[idx] = true;
          continue;
        }

        yield it.value;
      }
    }
  })();
}

module.exports = MountDatastore;

/***/ }),
/* 672 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const Errors = __webpack_require__(42).Errors;

const log = __webpack_require__(1)('datastore:core:tiered');
/**
 * A datastore that can combine multiple stores. Puts and deletes
 * will write through to all datastores. Has and get will
 * try each store sequentially. Query will always try the
 * last one first.
 *
 */


class TieredDatastore {
  constructor(stores) {
    this.stores = stores.slice();
  }

  async open() {
    try {
      await this.stores.map(store => store.open());
    } catch (err) {
      throw Errors.dbOpenFailedError();
    }
  }

  async put(key, value) {
    try {
      await Promise.all(this.stores.map(store => store.put(key, value)));
    } catch (err) {
      throw Errors.dbWriteFailedError();
    }
  }

  async get(key) {
    for (const store of this.stores) {
      try {
        const res = await store.get(key);
        if (res) return res;
      } catch (err) {
        log(err);
      }
    }

    throw Errors.notFoundError();
  }

  has(key) {
    return new Promise(async resolve => {
      await Promise.all(this.stores.map(async store => {
        const has = await store.has(key);

        if (has) {
          resolve(true);
        }
      }));
      resolve(false);
    });
  }

  async delete(key) {
    try {
      await Promise.all(this.stores.map(store => store.delete(key)));
    } catch (err) {
      throw Errors.dbDeleteFailedError();
    }
  }

  async close() {
    await Promise.all(this.stores.map(store => store.close()));
  }

  batch() {
    const batches = this.stores.map(store => store.batch());
    return {
      put: (key, value) => {
        batches.forEach(b => b.put(key, value));
      },
      delete: key => {
        batches.forEach(b => b.delete(key));
      },
      commit: async () => {
        for (const batch of batches) {
          await batch.commit();
        }
      }
    };
  }

  query(q) {
    return this.stores[this.stores.length - 1].query(q);
  }

}

module.exports = TieredDatastore;

/***/ }),
/* 673 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const Key = __webpack_require__(42).Key;

const KeytransformDatastore = __webpack_require__(109);
/**
 * Wraps a given datastore into a keytransform which
 * makes a given prefix transparent.
 *
 * For example, if the prefix is `new Key(/hello)` a call
 * to `store.put(new Key('/world'), mydata)` would store the data under
 * `/hello/world`.
 *
 */


class NamespaceDatastore extends KeytransformDatastore {
  constructor(child, prefix) {
    super(child, {
      convert(key) {
        return prefix.child(key);
      },

      invert(key) {
        if (prefix.toString() === '/') {
          return key;
        }

        if (!prefix.isAncestorOf(key)) {
          throw new Error("Expected prefix: (".concat(prefix.toString(), ") in key: ").concat(key.toString()));
        }

        return new Key(key.toString().slice(prefix.toString().length), false);
      }

    });
    this.prefix = prefix;
  }

  query(q) {
    if (q.prefix && this.prefix.toString() !== '/') {
      return super.query(Object.assign({}, q, {
        prefix: this.prefix.child(new Key(q.prefix)).toString()
      }));
    }

    return super.query(q);
  }

}

module.exports = NamespaceDatastore;

/***/ }),
/* 674 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // Default configuration for a repo in the browser

module.exports = {
  lock: 'memory',
  storageBackends: {
    root: __webpack_require__(110),
    blocks: __webpack_require__(110),
    keys: __webpack_require__(110),
    datastore: __webpack_require__(110)
  },
  storageBackendOptions: {
    root: {
      extension: '',
      prefix: '',
      version: 2
    },
    blocks: {
      sharding: false,
      prefix: '',
      version: 2
    },
    keys: {
      sharding: false,
      prefix: '',
      version: 2
    },
    datastore: {
      sharding: false,
      prefix: '',
      version: 2
    }
  }
};

/***/ }),
/* 675 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // Default configuration for the datastore spec in node.js

module.exports = {
  Spec: {
    type: 'mount',
    mounts: [{
      mountpoint: '/blocks',
      type: 'measure',
      prefix: 'flatfs.datastore',
      child: {
        type: 'flatfs',
        path: 'blocks',
        sync: true,
        shardFunc: '/repo/flatfs/shard/v1/next-to-last/2'
      }
    }, {
      mountpoint: '/',
      type: 'measure',
      prefix: 'leveldb.datastore',
      child: {
        type: 'levelds',
        path: 'datastore',
        compression: 'none'
      }
    }]
  }
};

/***/ }),
/* 676 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(677);

/***/ }),
/* 677 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint max-nested-callbacks: ["error", 5] */


function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const sanitize = __webpack_require__(678);

const mergeOptions = __webpack_require__(27);

const crypto = __webpack_require__(28);

const DS = __webpack_require__(14);

const CMS = __webpack_require__(682);

const errcode = __webpack_require__(2);

const keyPrefix = '/pkcs8/';
const infoPrefix = '/info/'; // NIST SP 800-132

const NIST = {
  minKeyLength: 112 / 8,
  minSaltLength: 128 / 8,
  minIterationCount: 1000
};
const defaultOptions = {
  // See https://cryptosense.com/parametesr-choice-for-pbkdf2/
  dek: {
    keyLength: 512 / 8,
    iterationCount: 10000,
    salt: 'you should override this value with a crypto secure random number',
    hash: 'sha2-512'
  }
};

function validateKeyName(name) {
  if (!name) return false;
  if (typeof name !== 'string') return false;
  return name === sanitize(name.trim());
}
/**
 * Throws an error after a delay
 *
 * This assumes than an error indicates that the keychain is under attack. Delay returning an
 * error to make brute force attacks harder.
 *
 * @param {string | Error} err - The error
 * @private
 */


async function throwDelayed(err) {
  const min = 200;
  const max = 1000;
  const delay = Math.random() * (max - min) + min;
  await new Promise(resolve => setTimeout(resolve, delay));
  throw err;
}
/**
 * Converts a key name into a datastore name.
 *
 * @param {string} name
 * @returns {DS.Key}
 * @private
 */


function DsName(name) {
  return new DS.Key(keyPrefix + name);
}
/**
 * Converts a key name into a datastore info name.
 *
 * @param {string} name
 * @returns {DS.Key}
 * @private
 */


function DsInfoName(name) {
  return new DS.Key(infoPrefix + name);
}
/**
 * Information about a key.
 *
 * @typedef {Object} KeyInfo
 *
 * @property {string} id - The universally unique key id.
 * @property {string} name - The local key name.
 */

/**
 * Manages the lifecycle of a key. Keys are encrypted at rest using PKCS #8.
 *
 * A key in the store has two entries
 * - '/info/*key-name*', contains the KeyInfo for the key
 * - '/pkcs8/*key-name*', contains the PKCS #8 for the key
 *
 */


class Keychain {
  /**
   * Creates a new instance of a key chain.
   *
   * @param {DS} store - where the key are.
   * @param {object} options - ???
   */
  constructor(store, options) {
    if (!store) {
      throw new Error('store is required');
    }

    this.store = store;
    const opts = mergeOptions(defaultOptions, options); // Enforce NIST SP 800-132

    if (!opts.passPhrase || opts.passPhrase.length < 20) {
      throw new Error('passPhrase must be least 20 characters');
    }

    if (opts.dek.keyLength < NIST.minKeyLength) {
      throw new Error("dek.keyLength must be least ".concat(NIST.minKeyLength, " bytes"));
    }

    if (opts.dek.salt.length < NIST.minSaltLength) {
      throw new Error("dek.saltLength must be least ".concat(NIST.minSaltLength, " bytes"));
    }

    if (opts.dek.iterationCount < NIST.minIterationCount) {
      throw new Error("dek.iterationCount must be least ".concat(NIST.minIterationCount));
    } // Create the derived encrypting key


    const dek = crypto.pbkdf2(opts.passPhrase, opts.dek.salt, opts.dek.iterationCount, opts.dek.keyLength, opts.dek.hash);
    Object.defineProperty(this, '_', {
      value: () => dek
    });
  }
  /**
   * Gets an object that can encrypt/decrypt protected data
   * using the Cryptographic Message Syntax (CMS).
   *
   * CMS describes an encapsulation syntax for data protection. It
   * is used to digitally sign, digest, authenticate, or encrypt
   * arbitrary message content.
   *
   * @returns {CMS}
   */


  get cms() {
    return new CMS(this);
  }
  /**
   * Generates the options for a keychain.  A random salt is produced.
   *
   * @returns {object}
   */


  static generateOptions() {
    const options = Object.assign({}, defaultOptions);
    const saltLength = Math.ceil(NIST.minSaltLength / 3) * 3; // no base64 padding

    options.dek.salt = crypto.randomBytes(saltLength).toString('base64');
    return options;
  }
  /**
   * Gets an object that can encrypt/decrypt protected data.
   * The default options for a keychain.
   *
   * @returns {object}
   */


  static get options() {
    return defaultOptions;
  }
  /**
   * Create a new key.
   *
   * @param {string} name - The local key name; cannot already exist.
   * @param {string} type - One of the key types; 'rsa'.
   * @param {int} size - The key size in bits.
    * @returns {KeyInfo}
   */


  async createKey(name, type, size) {
    const self = this;

    if (!validateKeyName(name) || name === 'self') {
      return throwDelayed(errcode(new Error("Invalid key name '".concat(name, "'")), 'ERR_INVALID_KEY_NAME'));
    }

    if (typeof type !== 'string') {
      return throwDelayed(errcode(new Error("Invalid key type '".concat(type, "'")), 'ERR_INVALID_KEY_TYPE'));
    }

    if (!Number.isSafeInteger(size)) {
      return throwDelayed(errcode(new Error("Invalid key size '".concat(size, "'")), 'ERR_INVALID_KEY_SIZE'));
    }

    const dsname = DsName(name);
    const exists = await self.store.has(dsname);
    if (exists) return throwDelayed(errcode(new Error("Key '".concat(name, "' already exists")), 'ERR_KEY_ALREADY_EXISTS'));

    switch (type.toLowerCase()) {
      case 'rsa':
        if (size < 2048) {
          return throwDelayed(errcode(new Error("Invalid RSA key size ".concat(size)), 'ERR_INVALID_KEY_SIZE'));
        }

        break;

      default:
        break;
    }

    let keyInfo;

    try {
      const keypair = await crypto.keys.generateKeyPair(type, size);
      const kid = await keypair.id();
      const pem = await keypair.export(this._());
      keyInfo = {
        name: name,
        id: kid
      };
      const batch = self.store.batch();
      batch.put(dsname, pem);
      batch.put(DsInfoName(name), JSON.stringify(keyInfo));
      await batch.commit();
    } catch (err) {
      return throwDelayed(err);
    }

    return keyInfo;
  }
  /**
   * List all the keys.
   *
    * @returns {KeyInfo[]}
   */


  async listKeys() {
    const self = this;
    const query = {
      prefix: infoPrefix
    };
    const info = [];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;

    var _iteratorError;

    try {
      for (var _iterator = _asyncIterator(self.store.query(query)), _step, _value; _step = await _iterator.next(), _iteratorNormalCompletion = _step.done, _value = await _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
        const value = _value;
        info.push(JSON.parse(value.value));
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          await _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return info;
  }
  /**
   * Find a key by it's id.
   *
   * @param {string} id - The universally unique key identifier.
    * @returns {KeyInfo}
   */


  async findKeyById(id) {
    try {
      const keys = await this.listKeys();
      return keys.find(k => k.id === id);
    } catch (err) {
      return throwDelayed(err);
    }
  }
  /**
   * Find a key by it's name.
   *
   * @param {string} name - The local key name.
    * @returns {KeyInfo}
   */


  async findKeyByName(name) {
    if (!validateKeyName(name)) {
      return throwDelayed(errcode(new Error("Invalid key name '".concat(name, "'")), 'ERR_INVALID_KEY_NAME'));
    }

    const dsname = DsInfoName(name);

    try {
      const res = await this.store.get(dsname);
      return JSON.parse(res.toString());
    } catch (err) {
      return throwDelayed(errcode(new Error("Key '".concat(name, "' does not exist. ").concat(err.message)), 'ERR_KEY_NOT_FOUND'));
    }
  }
  /**
   * Remove an existing key.
   *
   * @param {string} name - The local key name; must already exist.
    * @returns {KeyInfo}
   */


  async removeKey(name) {
    const self = this;

    if (!validateKeyName(name) || name === 'self') {
      return throwDelayed(errcode(new Error("Invalid key name '".concat(name, "'")), 'ERR_INVALID_KEY_NAME'));
    }

    const dsname = DsName(name);
    const keyInfo = await self.findKeyByName(name);
    const batch = self.store.batch();
    batch.delete(dsname);
    batch.delete(DsInfoName(name));
    await batch.commit();
    return keyInfo;
  }
  /**
   * Rename a key
   *
   * @param {string} oldName - The old local key name; must already exist.
   * @param {string} newName - The new local key name; must not already exist.
    * @returns {KeyInfo}
   */


  async renameKey(oldName, newName) {
    const self = this;

    if (!validateKeyName(oldName) || oldName === 'self') {
      return throwDelayed(errcode(new Error("Invalid old key name '".concat(oldName, "'")), 'ERR_OLD_KEY_NAME_INVALID'));
    }

    if (!validateKeyName(newName) || newName === 'self') {
      return throwDelayed(errcode(new Error("Invalid new key name '".concat(newName, "'")), 'ERR_NEW_KEY_NAME_INVALID'));
    }

    const oldDsname = DsName(oldName);
    const newDsname = DsName(newName);
    const oldInfoName = DsInfoName(oldName);
    const newInfoName = DsInfoName(newName);
    const exists = await self.store.has(newDsname);
    if (exists) return throwDelayed(errcode(new Error("Key '".concat(newName, "' already exists")), 'ERR_KEY_ALREADY_EXISTS'));

    try {
      let res = await this.store.get(oldDsname);
      const pem = res.toString();
      res = await self.store.get(oldInfoName);
      const keyInfo = JSON.parse(res.toString());
      keyInfo.name = newName;
      const batch = self.store.batch();
      batch.put(newDsname, pem);
      batch.put(newInfoName, JSON.stringify(keyInfo));
      batch.delete(oldDsname);
      batch.delete(oldInfoName);
      await batch.commit();
      return keyInfo;
    } catch (err) {
      return throwDelayed(err);
    }
  }
  /**
   * Export an existing key as a PEM encrypted PKCS #8 string
   *
   * @param {string} name - The local key name; must already exist.
   * @param {string} password - The password
    * @returns {string}
   */


  async exportKey(name, password) {
    if (!validateKeyName(name)) {
      return throwDelayed(errcode(new Error("Invalid key name '".concat(name, "'")), 'ERR_INVALID_KEY_NAME'));
    }

    if (!password) {
      return throwDelayed(errcode(new Error('Password is required'), 'ERR_PASSWORD_REQUIRED'));
    }

    const dsname = DsName(name);

    try {
      const res = await this.store.get(dsname);
      const pem = res.toString();
      const privateKey = await crypto.keys.import(pem, this._());
      return privateKey.export(password);
    } catch (err) {
      return throwDelayed(err);
    }
  }
  /**
   * Import a new key from a PEM encoded PKCS #8 string
   *
   * @param {string} name - The local key name; must not already exist.
   * @param {string} pem - The PEM encoded PKCS #8 string
   * @param {string} password - The password.
    * @returns {KeyInfo}
   */


  async importKey(name, pem, password) {
    const self = this;

    if (!validateKeyName(name) || name === 'self') {
      return throwDelayed(errcode(new Error("Invalid key name '".concat(name, "'")), 'ERR_INVALID_KEY_NAME'));
    }

    if (!pem) {
      return throwDelayed(errcode(new Error('PEM encoded key is required'), 'ERR_PEM_REQUIRED'));
    }

    const dsname = DsName(name);
    const exists = await self.store.has(dsname);
    if (exists) return throwDelayed(errcode(new Error("Key '".concat(name, "' already exists")), 'ERR_KEY_ALREADY_EXISTS'));
    let privateKey;

    try {
      privateKey = await crypto.keys.import(pem, password);
    } catch (err) {
      return throwDelayed(errcode(new Error('Cannot read the key, most likely the password is wrong'), 'ERR_CANNOT_READ_KEY'));
    }

    let kid;

    try {
      kid = await privateKey.id();
      pem = await privateKey.export(this._());
    } catch (err) {
      return throwDelayed(err);
    }

    const keyInfo = {
      name: name,
      id: kid
    };
    const batch = self.store.batch();
    batch.put(dsname, pem);
    batch.put(DsInfoName(name), JSON.stringify(keyInfo));
    await batch.commit();
    return keyInfo;
  }

  async importPeer(name, peer) {
    const self = this;

    if (!validateKeyName(name)) {
      return throwDelayed(errcode(new Error("Invalid key name '".concat(name, "'")), 'ERR_INVALID_KEY_NAME'));
    }

    if (!peer || !peer.privKey) {
      return throwDelayed(errcode(new Error('Peer.privKey is required'), 'ERR_MISSING_PRIVATE_KEY'));
    }

    const privateKey = peer.privKey;
    const dsname = DsName(name);
    const exists = await self.store.has(dsname);
    if (exists) return throwDelayed(errcode(new Error("Key '".concat(name, "' already exists")), 'ERR_KEY_ALREADY_EXISTS'));

    try {
      const kid = await privateKey.id();
      const pem = await privateKey.export(this._());
      const keyInfo = {
        name: name,
        id: kid
      };
      const batch = self.store.batch();
      batch.put(dsname, pem);
      batch.put(DsInfoName(name), JSON.stringify(keyInfo));
      await batch.commit();
      return keyInfo;
    } catch (err) {
      return throwDelayed(err);
    }
  }
  /**
   * Gets the private key as PEM encoded PKCS #8 string.
   *
   * @param {string} name
    * @returns {string}
   * @private
   */


  async _getPrivateKey(name) {
    if (!validateKeyName(name)) {
      return throwDelayed(errcode(new Error("Invalid key name '".concat(name, "'")), 'ERR_INVALID_KEY_NAME'));
    }

    try {
      const dsname = DsName(name);
      const res = await this.store.get(dsname);
      return res.toString();
    } catch (err) {
      return throwDelayed(errcode(new Error("Key '".concat(name, "' does not exist. ").concat(err.message)), 'ERR_KEY_NOT_FOUND'));
    }
  }

}

module.exports = Keychain;

/***/ }),
/* 678 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*jshint node:true*/

/**
 * Replaces characters in strings that are illegal/unsafe for filenames.
 * Unsafe characters are either removed or replaced by a substitute set
 * in the optional `options` object.
 *
 * Illegal Characters on Various Operating Systems
 * / ? < > \ : * | "
 * https://kb.acronis.com/content/39790
 *
 * Unicode Control codes
 * C0 0x00-0x1f & C1 (0x80-0x9f)
 * http://en.wikipedia.org/wiki/C0_and_C1_control_codes
 *
 * Reserved filenames on Unix-based systems (".", "..")
 * Reserved filenames in Windows ("CON", "PRN", "AUX", "NUL", "COM1",
 * "COM2", "COM3", "COM4", "COM5", "COM6", "COM7", "COM8", "COM9",
 * "LPT1", "LPT2", "LPT3", "LPT4", "LPT5", "LPT6", "LPT7", "LPT8", and
 * "LPT9") case-insesitively and with or without filename extensions.
 *
 * Capped at 255 characters in length.
 * http://unix.stackexchange.com/questions/32795/what-is-the-maximum-allowed-filename-and-folder-size-with-ecryptfs
 *
 * @param  {String} input   Original filename
 * @param  {Object} options {replacement: String | Function }
 * @return {String}         Sanitized filename
 */

var truncate = __webpack_require__(679);

var illegalRe = /[\/\?<>\\:\*\|"]/g;
var controlRe = /[\x00-\x1f\x80-\x9f]/g;
var reservedRe = /^\.+$/;
var windowsReservedRe = /^(con|prn|aux|nul|com[0-9]|lpt[0-9])(\..*)?$/i;
var windowsTrailingRe = /[\. ]+$/;

function sanitize(input, replacement) {
  if (typeof input !== 'string') {
    throw new Error('Input must be string');
  }

  var sanitized = input.replace(illegalRe, replacement).replace(controlRe, replacement).replace(reservedRe, replacement).replace(windowsReservedRe, replacement).replace(windowsTrailingRe, replacement);
  return truncate(sanitized, 255);
}

module.exports = function (input, options) {
  var replacement = options && options.replacement || '';
  var output = sanitize(input, replacement);

  if (replacement === '') {
    return output;
  }

  return sanitize(output, '');
};

/***/ }),
/* 679 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var truncate = __webpack_require__(680);

var getLength = __webpack_require__(681);

module.exports = truncate.bind(null, getLength);

/***/ }),
/* 680 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function isHighSurrogate(codePoint) {
  return codePoint >= 0xd800 && codePoint <= 0xdbff;
}

function isLowSurrogate(codePoint) {
  return codePoint >= 0xdc00 && codePoint <= 0xdfff;
} // Truncate string by size in bytes


module.exports = function truncate(getLength, string, byteLength) {
  if (typeof string !== "string") {
    throw new Error("Input must be string");
  }

  var charLength = string.length;
  var curByteLength = 0;
  var codePoint;
  var segment;

  for (var i = 0; i < charLength; i += 1) {
    codePoint = string.charCodeAt(i);
    segment = string[i];

    if (isHighSurrogate(codePoint) && isLowSurrogate(string.charCodeAt(i + 1))) {
      i += 1;
      segment += string[i];
    }

    curByteLength += getLength(segment);

    if (curByteLength === byteLength) {
      return string.slice(0, i + 1);
    } else if (curByteLength > byteLength) {
      return string.slice(0, i - segment.length + 1);
    }
  }

  return string;
};

/***/ }),
/* 681 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function isHighSurrogate(codePoint) {
  return codePoint >= 0xd800 && codePoint <= 0xdbff;
}

function isLowSurrogate(codePoint) {
  return codePoint >= 0xdc00 && codePoint <= 0xdfff;
} // Truncate string by size in bytes


module.exports = function getByteLength(string) {
  if (typeof string !== "string") {
    throw new Error("Input must be string");
  }

  var charLength = string.length;
  var byteLength = 0;
  var codePoint = null;
  var prevCodePoint = null;

  for (var i = 0; i < charLength; i++) {
    codePoint = string.charCodeAt(i); // handle 4-byte non-BMP chars
    // low surrogate

    if (isLowSurrogate(codePoint)) {
      // when parsing previous hi-surrogate, 3 is added to byteLength
      if (prevCodePoint != null && isHighSurrogate(prevCodePoint)) {
        byteLength += 1;
      } else {
        byteLength += 3;
      }
    } else if (codePoint <= 0x7f) {
      byteLength += 1;
    } else if (codePoint >= 0x80 && codePoint <= 0x7ff) {
      byteLength += 2;
    } else if (codePoint >= 0x800 && codePoint <= 0xffff) {
      byteLength += 3;
    }

    prevCodePoint = codePoint;
  }

  return byteLength;
};

/***/ }),
/* 682 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

__webpack_require__(683);

__webpack_require__(74);

const forge = __webpack_require__(7);

const {
  certificateForKey,
  findAsync
} = __webpack_require__(684);

const errcode = __webpack_require__(2);
/**
 * Cryptographic Message Syntax (aka PKCS #7)
 *
 * CMS describes an encapsulation syntax for data protection. It
 * is used to digitally sign, digest, authenticate, or encrypt
 * arbitrary message content.
 *
 * See RFC 5652 for all the details.
 */


class CMS {
  /**
   * Creates a new instance with a keychain
   *
   * @param {Keychain} keychain - the available keys
   */
  constructor(keychain) {
    if (!keychain) {
      throw errcode(new Error('keychain is required'), 'ERR_KEYCHAIN_REQUIRED');
    }

    this.keychain = keychain;
  }
  /**
   * Creates some protected data.
   *
   * The output Buffer contains the PKCS #7 message in DER.
   *
   * @param {string} name - The local key name.
   * @param {Buffer} plain - The data to encrypt.
   * @returns {undefined}
   */


  async encrypt(name, plain) {
    if (!Buffer.isBuffer(plain)) {
      throw errcode(new Error('Plain data must be a Buffer'), 'ERR_INVALID_PARAMS');
    }

    const key = await this.keychain.findKeyByName(name);
    const pem = await this.keychain._getPrivateKey(name);
    const privateKey = forge.pki.decryptRsaPrivateKey(pem, this.keychain._());
    const certificate = await certificateForKey(key, privateKey); // create a p7 enveloped message

    const p7 = forge.pkcs7.createEnvelopedData();
    p7.addRecipient(certificate);
    p7.content = forge.util.createBuffer(plain);
    p7.encrypt(); // convert message to DER

    const der = forge.asn1.toDer(p7.toAsn1()).getBytes();
    return Buffer.from(der, 'binary');
  }
  /**
   * Reads some protected data.
   *
   * The keychain must contain one of the keys used to encrypt the data.  If none of the keys
   * exists, an Error is returned with the property 'missingKeys'.  It is array of key ids.
   *
   * @param {Buffer} cmsData - The CMS encrypted data to decrypt.
   * @returns {undefined}
   */


  async decrypt(cmsData) {
    if (!Buffer.isBuffer(cmsData)) {
      throw errcode(new Error('CMS data is required'), 'ERR_INVALID_PARAMS');
    }

    let cms;

    try {
      const buf = forge.util.createBuffer(cmsData.toString('binary'));
      const obj = forge.asn1.fromDer(buf);
      cms = forge.pkcs7.messageFromAsn1(obj);
    } catch (err) {
      throw errcode(new Error('Invalid CMS: ' + err.message), 'ERR_INVALID_CMS');
    } // Find a recipient whose key we hold. We only deal with recipient certs
    // issued by ipfs (O=ipfs).


    const recipients = cms.recipients.filter(r => r.issuer.find(a => a.shortName === 'O' && a.value === 'ipfs')).filter(r => r.issuer.find(a => a.shortName === 'CN')).map(r => {
      return {
        recipient: r,
        keyId: r.issuer.find(a => a.shortName === 'CN').value
      };
    });
    const r = await findAsync(recipients, async recipient => {
      try {
        const key = await this.keychain.findKeyById(recipient.keyId);
        if (key) return true;
      } catch (err) {
        return false;
      }

      return false;
    });

    if (!r) {
      const missingKeys = recipients.map(r => r.keyId);
      throw errcode(new Error('Decryption needs one of the key(s): ' + missingKeys.join(', ')), 'ERR_MISSING_KEYS', {
        missingKeys
      });
    }

    const key = await this.keychain.findKeyById(r.keyId);
    const pem = await this.keychain._getPrivateKey(key.name);
    const privateKey = forge.pki.decryptRsaPrivateKey(pem, this.keychain._());
    cms.decrypt(r.recipient, privateKey);
    return Buffer.from(cms.content.getBytes(), 'binary');
  }

}

module.exports = CMS;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 683 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Javascript implementation of PKCS#7 v1.5.
 *
 * @author Stefan Siegl
 * @author Dave Longley
 *
 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
 * Copyright (c) 2012-2015 Digital Bazaar, Inc.
 *
 * Currently this implementation only supports ContentType of EnvelopedData,
 * EncryptedData, or SignedData at the root level. The top level elements may
 * contain only a ContentInfo of ContentType Data, i.e. plain data. Further
 * nesting is not (yet) supported.
 *
 * The Forge validators for PKCS #7's ASN.1 structures are available from
 * a separate file pkcs7asn1.js, since those are referenced from other
 * PKCS standards like PKCS #12.
 */
var forge = __webpack_require__(7);

__webpack_require__(92);

__webpack_require__(40);

__webpack_require__(127);

__webpack_require__(45);

__webpack_require__(93);

__webpack_require__(211);

__webpack_require__(46);

__webpack_require__(10);

__webpack_require__(95); // shortcut for ASN.1 API


var asn1 = forge.asn1; // shortcut for PKCS#7 API

var p7 = module.exports = forge.pkcs7 = forge.pkcs7 || {};
/**
 * Converts a PKCS#7 message from PEM format.
 *
 * @param pem the PEM-formatted PKCS#7 message.
 *
 * @return the PKCS#7 message.
 */

p7.messageFromPem = function (pem) {
  var msg = forge.pem.decode(pem)[0];

  if (msg.type !== 'PKCS7') {
    var error = new Error('Could not convert PKCS#7 message from PEM; PEM ' + 'header type is not "PKCS#7".');
    error.headerType = msg.type;
    throw error;
  }

  if (msg.procType && msg.procType.type === 'ENCRYPTED') {
    throw new Error('Could not convert PKCS#7 message from PEM; PEM is encrypted.');
  } // convert DER to ASN.1 object


  var obj = asn1.fromDer(msg.body);
  return p7.messageFromAsn1(obj);
};
/**
 * Converts a PKCS#7 message to PEM format.
 *
 * @param msg The PKCS#7 message object
 * @param maxline The maximum characters per line, defaults to 64.
 *
 * @return The PEM-formatted PKCS#7 message.
 */


p7.messageToPem = function (msg, maxline) {
  // convert to ASN.1, then DER, then PEM-encode
  var pemObj = {
    type: 'PKCS7',
    body: asn1.toDer(msg.toAsn1()).getBytes()
  };
  return forge.pem.encode(pemObj, {
    maxline: maxline
  });
};
/**
 * Converts a PKCS#7 message from an ASN.1 object.
 *
 * @param obj the ASN.1 representation of a ContentInfo.
 *
 * @return the PKCS#7 message.
 */


p7.messageFromAsn1 = function (obj) {
  // validate root level ContentInfo and capture data
  var capture = {};
  var errors = [];

  if (!asn1.validate(obj, p7.asn1.contentInfoValidator, capture, errors)) {
    var error = new Error('Cannot read PKCS#7 message. ' + 'ASN.1 object is not an PKCS#7 ContentInfo.');
    error.errors = errors;
    throw error;
  }

  var contentType = asn1.derToOid(capture.contentType);
  var msg;

  switch (contentType) {
    case forge.pki.oids.envelopedData:
      msg = p7.createEnvelopedData();
      break;

    case forge.pki.oids.encryptedData:
      msg = p7.createEncryptedData();
      break;

    case forge.pki.oids.signedData:
      msg = p7.createSignedData();
      break;

    default:
      throw new Error('Cannot read PKCS#7 message. ContentType with OID ' + contentType + ' is not (yet) supported.');
  }

  msg.fromAsn1(capture.content.value[0]);
  return msg;
};

p7.createSignedData = function () {
  var msg = null;
  msg = {
    type: forge.pki.oids.signedData,
    version: 1,
    certificates: [],
    crls: [],
    // TODO: add json-formatted signer stuff here?
    signers: [],
    // populated during sign()
    digestAlgorithmIdentifiers: [],
    contentInfo: null,
    signerInfos: [],
    fromAsn1: function fromAsn1(obj) {
      // validate SignedData content block and capture data.
      _fromAsn1(msg, obj, p7.asn1.signedDataValidator);

      msg.certificates = [];
      msg.crls = [];
      msg.digestAlgorithmIdentifiers = [];
      msg.contentInfo = null;
      msg.signerInfos = [];

      if (msg.rawCapture.certificates) {
        var certs = msg.rawCapture.certificates.value;

        for (var i = 0; i < certs.length; ++i) {
          msg.certificates.push(forge.pki.certificateFromAsn1(certs[i]));
        }
      } // TODO: parse crls

    },
    toAsn1: function toAsn1() {
      // degenerate case with no content
      if (!msg.contentInfo) {
        msg.sign();
      }

      var certs = [];

      for (var i = 0; i < msg.certificates.length; ++i) {
        certs.push(forge.pki.certificateToAsn1(msg.certificates[i]));
      }

      var crls = []; // TODO: implement CRLs
      // [0] SignedData

      var signedData = asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// Version
      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, asn1.integerToDer(msg.version).getBytes()), // DigestAlgorithmIdentifiers
      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, msg.digestAlgorithmIdentifiers), // ContentInfo
      msg.contentInfo])]);

      if (certs.length > 0) {
        // [0] IMPLICIT ExtendedCertificatesAndCertificates OPTIONAL
        signedData.value[0].value.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, certs));
      }

      if (crls.length > 0) {
        // [1] IMPLICIT CertificateRevocationLists OPTIONAL
        signedData.value[0].value.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, 1, true, crls));
      } // SignerInfos


      signedData.value[0].value.push(asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, msg.signerInfos)); // ContentInfo

      return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// ContentType
      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(msg.type).getBytes()), // [0] SignedData
      signedData]);
    },

    /**
     * Add (another) entity to list of signers.
     *
     * Note: If authenticatedAttributes are provided, then, per RFC 2315,
     * they must include at least two attributes: content type and
     * message digest. The message digest attribute value will be
     * auto-calculated during signing and will be ignored if provided.
     *
     * Here's an example of providing these two attributes:
     *
     * forge.pkcs7.createSignedData();
     * p7.addSigner({
     *   issuer: cert.issuer.attributes,
     *   serialNumber: cert.serialNumber,
     *   key: privateKey,
     *   digestAlgorithm: forge.pki.oids.sha1,
     *   authenticatedAttributes: [{
     *     type: forge.pki.oids.contentType,
     *     value: forge.pki.oids.data
     *   }, {
     *     type: forge.pki.oids.messageDigest
     *   }]
     * });
     *
     * TODO: Support [subjectKeyIdentifier] as signer's ID.
     *
     * @param signer the signer information:
     *          key the signer's private key.
     *          [certificate] a certificate containing the public key
     *            associated with the signer's private key; use this option as
     *            an alternative to specifying signer.issuer and
     *            signer.serialNumber.
     *          [issuer] the issuer attributes (eg: cert.issuer.attributes).
     *          [serialNumber] the signer's certificate's serial number in
     *           hexadecimal (eg: cert.serialNumber).
     *          [digestAlgorithm] the message digest OID, as a string, to use
     *            (eg: forge.pki.oids.sha1).
     *          [authenticatedAttributes] an optional array of attributes
     *            to also sign along with the content.
     */
    addSigner: function addSigner(signer) {
      var issuer = signer.issuer;
      var serialNumber = signer.serialNumber;

      if (signer.certificate) {
        var cert = signer.certificate;

        if (typeof cert === 'string') {
          cert = forge.pki.certificateFromPem(cert);
        }

        issuer = cert.issuer.attributes;
        serialNumber = cert.serialNumber;
      }

      var key = signer.key;

      if (!key) {
        throw new Error('Could not add PKCS#7 signer; no private key specified.');
      }

      if (typeof key === 'string') {
        key = forge.pki.privateKeyFromPem(key);
      } // ensure OID known for digest algorithm


      var digestAlgorithm = signer.digestAlgorithm || forge.pki.oids.sha1;

      switch (digestAlgorithm) {
        case forge.pki.oids.sha1:
        case forge.pki.oids.sha256:
        case forge.pki.oids.sha384:
        case forge.pki.oids.sha512:
        case forge.pki.oids.md5:
          break;

        default:
          throw new Error('Could not add PKCS#7 signer; unknown message digest algorithm: ' + digestAlgorithm);
      } // if authenticatedAttributes is present, then the attributes
      // must contain at least PKCS #9 content-type and message-digest


      var authenticatedAttributes = signer.authenticatedAttributes || [];

      if (authenticatedAttributes.length > 0) {
        var contentType = false;
        var messageDigest = false;

        for (var i = 0; i < authenticatedAttributes.length; ++i) {
          var attr = authenticatedAttributes[i];

          if (!contentType && attr.type === forge.pki.oids.contentType) {
            contentType = true;

            if (messageDigest) {
              break;
            }

            continue;
          }

          if (!messageDigest && attr.type === forge.pki.oids.messageDigest) {
            messageDigest = true;

            if (contentType) {
              break;
            }

            continue;
          }
        }

        if (!contentType || !messageDigest) {
          throw new Error('Invalid signer.authenticatedAttributes. If ' + 'signer.authenticatedAttributes is specified, then it must ' + 'contain at least two attributes, PKCS #9 content-type and ' + 'PKCS #9 message-digest.');
        }
      }

      msg.signers.push({
        key: key,
        version: 1,
        issuer: issuer,
        serialNumber: serialNumber,
        digestAlgorithm: digestAlgorithm,
        signatureAlgorithm: forge.pki.oids.rsaEncryption,
        signature: null,
        authenticatedAttributes: authenticatedAttributes,
        unauthenticatedAttributes: []
      });
    },

    /**
     * Signs the content.
     * @param options Options to apply when signing:
     *    [detached] boolean. If signing should be done in detached mode. Defaults to false.
     */
    sign: function sign(options) {
      options = options || {}; // auto-generate content info

      if (typeof msg.content !== 'object' || msg.contentInfo === null) {
        // use Data ContentInfo
        msg.contentInfo = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// ContentType
        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(forge.pki.oids.data).getBytes())]); // add actual content, if present

        if ('content' in msg) {
          var content;

          if (msg.content instanceof forge.util.ByteBuffer) {
            content = msg.content.bytes();
          } else if (typeof msg.content === 'string') {
            content = forge.util.encodeUtf8(msg.content);
          }

          if (options.detached) {
            msg.detachedContent = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, content);
          } else {
            msg.contentInfo.value.push( // [0] EXPLICIT content
            asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, content)]));
          }
        }
      } // no signers, return early (degenerate case for certificate container)


      if (msg.signers.length === 0) {
        return;
      } // generate digest algorithm identifiers


      var mds = addDigestAlgorithmIds(); // generate signerInfos

      addSignerInfos(mds);
    },
    verify: function verify() {
      throw new Error('PKCS#7 signature verification not yet implemented.');
    },

    /**
     * Add a certificate.
     *
     * @param cert the certificate to add.
     */
    addCertificate: function addCertificate(cert) {
      // convert from PEM
      if (typeof cert === 'string') {
        cert = forge.pki.certificateFromPem(cert);
      }

      msg.certificates.push(cert);
    },

    /**
     * Add a certificate revokation list.
     *
     * @param crl the certificate revokation list to add.
     */
    addCertificateRevokationList: function addCertificateRevokationList(crl) {
      throw new Error('PKCS#7 CRL support not yet implemented.');
    }
  };
  return msg;

  function addDigestAlgorithmIds() {
    var mds = {};

    for (var i = 0; i < msg.signers.length; ++i) {
      var signer = msg.signers[i];
      var oid = signer.digestAlgorithm;

      if (!(oid in mds)) {
        // content digest
        mds[oid] = forge.md[forge.pki.oids[oid]].create();
      }

      if (signer.authenticatedAttributes.length === 0) {
        // no custom attributes to digest; use content message digest
        signer.md = mds[oid];
      } else {
        // custom attributes to be digested; use own message digest
        // TODO: optimize to just copy message digest state if that
        // feature is ever supported with message digests
        signer.md = forge.md[forge.pki.oids[oid]].create();
      }
    } // add unique digest algorithm identifiers


    msg.digestAlgorithmIdentifiers = [];

    for (var oid in mds) {
      msg.digestAlgorithmIdentifiers.push( // AlgorithmIdentifier
      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// algorithm
      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(oid).getBytes()), // parameters (null)
      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')]));
    }

    return mds;
  }

  function addSignerInfos(mds) {
    var content;

    if (msg.detachedContent) {
      // Signature has been made in detached mode.
      content = msg.detachedContent;
    } else {
      // Note: ContentInfo is a SEQUENCE with 2 values, second value is
      // the content field and is optional for a ContentInfo but required here
      // since signers are present
      // get ContentInfo content
      content = msg.contentInfo.value[1]; // skip [0] EXPLICIT content wrapper

      content = content.value[0];
    }

    if (!content) {
      throw new Error('Could not sign PKCS#7 message; there is no content to sign.');
    } // get ContentInfo content type


    var contentType = asn1.derToOid(msg.contentInfo.value[0].value); // serialize content

    var bytes = asn1.toDer(content); // skip identifier and length per RFC 2315 9.3
    // skip identifier (1 byte)

    bytes.getByte(); // read and discard length bytes

    asn1.getBerValueLength(bytes);
    bytes = bytes.getBytes(); // digest content DER value bytes

    for (var oid in mds) {
      mds[oid].start().update(bytes);
    } // sign content


    var signingTime = new Date();

    for (var i = 0; i < msg.signers.length; ++i) {
      var signer = msg.signers[i];

      if (signer.authenticatedAttributes.length === 0) {
        // if ContentInfo content type is not "Data", then
        // authenticatedAttributes must be present per RFC 2315
        if (contentType !== forge.pki.oids.data) {
          throw new Error('Invalid signer; authenticatedAttributes must be present ' + 'when the ContentInfo content type is not PKCS#7 Data.');
        }
      } else {
        // process authenticated attributes
        // [0] IMPLICIT
        signer.authenticatedAttributesAsn1 = asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, []); // per RFC 2315, attributes are to be digested using a SET container
        // not the above [0] IMPLICIT container

        var attrsAsn1 = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, []);

        for (var ai = 0; ai < signer.authenticatedAttributes.length; ++ai) {
          var attr = signer.authenticatedAttributes[ai];

          if (attr.type === forge.pki.oids.messageDigest) {
            // use content message digest as value
            attr.value = mds[signer.digestAlgorithm].digest();
          } else if (attr.type === forge.pki.oids.signingTime) {
            // auto-populate signing time if not already set
            if (!attr.value) {
              attr.value = signingTime;
            }
          } // convert to ASN.1 and push onto Attributes SET (for signing) and
          // onto authenticatedAttributesAsn1 to complete SignedData ASN.1
          // TODO: optimize away duplication


          attrsAsn1.value.push(_attributeToAsn1(attr));
          signer.authenticatedAttributesAsn1.value.push(_attributeToAsn1(attr));
        } // DER-serialize and digest SET OF attributes only


        bytes = asn1.toDer(attrsAsn1).getBytes();
        signer.md.start().update(bytes);
      } // sign digest


      signer.signature = signer.key.sign(signer.md, 'RSASSA-PKCS1-V1_5');
    } // add signer info


    msg.signerInfos = _signersToAsn1(msg.signers);
  }
};
/**
 * Creates an empty PKCS#7 message of type EncryptedData.
 *
 * @return the message.
 */


p7.createEncryptedData = function () {
  var msg = null;
  msg = {
    type: forge.pki.oids.encryptedData,
    version: 0,
    encryptedContent: {
      algorithm: forge.pki.oids['aes256-CBC']
    },

    /**
     * Reads an EncryptedData content block (in ASN.1 format)
     *
     * @param obj The ASN.1 representation of the EncryptedData content block
     */
    fromAsn1: function fromAsn1(obj) {
      // Validate EncryptedData content block and capture data.
      _fromAsn1(msg, obj, p7.asn1.encryptedDataValidator);
    },

    /**
     * Decrypt encrypted content
     *
     * @param key The (symmetric) key as a byte buffer
     */
    decrypt: function decrypt(key) {
      if (key !== undefined) {
        msg.encryptedContent.key = key;
      }

      _decryptContent(msg);
    }
  };
  return msg;
};
/**
 * Creates an empty PKCS#7 message of type EnvelopedData.
 *
 * @return the message.
 */


p7.createEnvelopedData = function () {
  var msg = null;
  msg = {
    type: forge.pki.oids.envelopedData,
    version: 0,
    recipients: [],
    encryptedContent: {
      algorithm: forge.pki.oids['aes256-CBC']
    },

    /**
     * Reads an EnvelopedData content block (in ASN.1 format)
     *
     * @param obj the ASN.1 representation of the EnvelopedData content block.
     */
    fromAsn1: function fromAsn1(obj) {
      // validate EnvelopedData content block and capture data
      var capture = _fromAsn1(msg, obj, p7.asn1.envelopedDataValidator);

      msg.recipients = _recipientsFromAsn1(capture.recipientInfos.value);
    },
    toAsn1: function toAsn1() {
      // ContentInfo
      return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// ContentType
      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(msg.type).getBytes()), // [0] EnvelopedData
      asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// Version
      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, asn1.integerToDer(msg.version).getBytes()), // RecipientInfos
      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, _recipientsToAsn1(msg.recipients)), // EncryptedContentInfo
      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, _encryptedContentToAsn1(msg.encryptedContent))])])]);
    },

    /**
     * Find recipient by X.509 certificate's issuer.
     *
     * @param cert the certificate with the issuer to look for.
     *
     * @return the recipient object.
     */
    findRecipient: function findRecipient(cert) {
      var sAttr = cert.issuer.attributes;

      for (var i = 0; i < msg.recipients.length; ++i) {
        var r = msg.recipients[i];
        var rAttr = r.issuer;

        if (r.serialNumber !== cert.serialNumber) {
          continue;
        }

        if (rAttr.length !== sAttr.length) {
          continue;
        }

        var match = true;

        for (var j = 0; j < sAttr.length; ++j) {
          if (rAttr[j].type !== sAttr[j].type || rAttr[j].value !== sAttr[j].value) {
            match = false;
            break;
          }
        }

        if (match) {
          return r;
        }
      }

      return null;
    },

    /**
     * Decrypt enveloped content
     *
     * @param recipient The recipient object related to the private key
     * @param privKey The (RSA) private key object
     */
    decrypt: function decrypt(recipient, privKey) {
      if (msg.encryptedContent.key === undefined && recipient !== undefined && privKey !== undefined) {
        switch (recipient.encryptedContent.algorithm) {
          case forge.pki.oids.rsaEncryption:
          case forge.pki.oids.desCBC:
            var key = privKey.decrypt(recipient.encryptedContent.content);
            msg.encryptedContent.key = forge.util.createBuffer(key);
            break;

          default:
            throw new Error('Unsupported asymmetric cipher, ' + 'OID ' + recipient.encryptedContent.algorithm);
        }
      }

      _decryptContent(msg);
    },

    /**
     * Add (another) entity to list of recipients.
     *
     * @param cert The certificate of the entity to add.
     */
    addRecipient: function addRecipient(cert) {
      msg.recipients.push({
        version: 0,
        issuer: cert.issuer.attributes,
        serialNumber: cert.serialNumber,
        encryptedContent: {
          // We simply assume rsaEncryption here, since forge.pki only
          // supports RSA so far.  If the PKI module supports other
          // ciphers one day, we need to modify this one as well.
          algorithm: forge.pki.oids.rsaEncryption,
          key: cert.publicKey
        }
      });
    },

    /**
     * Encrypt enveloped content.
     *
     * This function supports two optional arguments, cipher and key, which
     * can be used to influence symmetric encryption.  Unless cipher is
     * provided, the cipher specified in encryptedContent.algorithm is used
     * (defaults to AES-256-CBC).  If no key is provided, encryptedContent.key
     * is (re-)used.  If that one's not set, a random key will be generated
     * automatically.
     *
     * @param [key] The key to be used for symmetric encryption.
     * @param [cipher] The OID of the symmetric cipher to use.
     */
    encrypt: function encrypt(key, cipher) {
      // Part 1: Symmetric encryption
      if (msg.encryptedContent.content === undefined) {
        cipher = cipher || msg.encryptedContent.algorithm;
        key = key || msg.encryptedContent.key;
        var keyLen, ivLen, ciphFn;

        switch (cipher) {
          case forge.pki.oids['aes128-CBC']:
            keyLen = 16;
            ivLen = 16;
            ciphFn = forge.aes.createEncryptionCipher;
            break;

          case forge.pki.oids['aes192-CBC']:
            keyLen = 24;
            ivLen = 16;
            ciphFn = forge.aes.createEncryptionCipher;
            break;

          case forge.pki.oids['aes256-CBC']:
            keyLen = 32;
            ivLen = 16;
            ciphFn = forge.aes.createEncryptionCipher;
            break;

          case forge.pki.oids['des-EDE3-CBC']:
            keyLen = 24;
            ivLen = 8;
            ciphFn = forge.des.createEncryptionCipher;
            break;

          default:
            throw new Error('Unsupported symmetric cipher, OID ' + cipher);
        }

        if (key === undefined) {
          key = forge.util.createBuffer(forge.random.getBytes(keyLen));
        } else if (key.length() != keyLen) {
          throw new Error('Symmetric key has wrong length; ' + 'got ' + key.length() + ' bytes, expected ' + keyLen + '.');
        } // Keep a copy of the key & IV in the object, so the caller can
        // use it for whatever reason.


        msg.encryptedContent.algorithm = cipher;
        msg.encryptedContent.key = key;
        msg.encryptedContent.parameter = forge.util.createBuffer(forge.random.getBytes(ivLen));
        var ciph = ciphFn(key);
        ciph.start(msg.encryptedContent.parameter.copy());
        ciph.update(msg.content); // The finish function does PKCS#7 padding by default, therefore
        // no action required by us.

        if (!ciph.finish()) {
          throw new Error('Symmetric encryption failed.');
        }

        msg.encryptedContent.content = ciph.output;
      } // Part 2: asymmetric encryption for each recipient


      for (var i = 0; i < msg.recipients.length; ++i) {
        var recipient = msg.recipients[i]; // Nothing to do, encryption already done.

        if (recipient.encryptedContent.content !== undefined) {
          continue;
        }

        switch (recipient.encryptedContent.algorithm) {
          case forge.pki.oids.rsaEncryption:
            recipient.encryptedContent.content = recipient.encryptedContent.key.encrypt(msg.encryptedContent.key.data);
            break;

          default:
            throw new Error('Unsupported asymmetric cipher, OID ' + recipient.encryptedContent.algorithm);
        }
      }
    }
  };
  return msg;
};
/**
 * Converts a single recipient from an ASN.1 object.
 *
 * @param obj the ASN.1 RecipientInfo.
 *
 * @return the recipient object.
 */


function _recipientFromAsn1(obj) {
  // validate EnvelopedData content block and capture data
  var capture = {};
  var errors = [];

  if (!asn1.validate(obj, p7.asn1.recipientInfoValidator, capture, errors)) {
    var error = new Error('Cannot read PKCS#7 RecipientInfo. ' + 'ASN.1 object is not an PKCS#7 RecipientInfo.');
    error.errors = errors;
    throw error;
  }

  return {
    version: capture.version.charCodeAt(0),
    issuer: forge.pki.RDNAttributesAsArray(capture.issuer),
    serialNumber: forge.util.createBuffer(capture.serial).toHex(),
    encryptedContent: {
      algorithm: asn1.derToOid(capture.encAlgorithm),
      parameter: capture.encParameter.value,
      content: capture.encKey
    }
  };
}
/**
 * Converts a single recipient object to an ASN.1 object.
 *
 * @param obj the recipient object.
 *
 * @return the ASN.1 RecipientInfo.
 */


function _recipientToAsn1(obj) {
  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// Version
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, asn1.integerToDer(obj.version).getBytes()), // IssuerAndSerialNumber
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// Name
  forge.pki.distinguishedNameToAsn1({
    attributes: obj.issuer
  }), // Serial
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, forge.util.hexToBytes(obj.serialNumber))]), // KeyEncryptionAlgorithmIdentifier
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// Algorithm
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(obj.encryptedContent.algorithm).getBytes()), // Parameter, force NULL, only RSA supported for now.
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')]), // EncryptedKey
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, obj.encryptedContent.content)]);
}
/**
 * Map a set of RecipientInfo ASN.1 objects to recipient objects.
 *
 * @param infos an array of ASN.1 representations RecipientInfo (i.e. SET OF).
 *
 * @return an array of recipient objects.
 */


function _recipientsFromAsn1(infos) {
  var ret = [];

  for (var i = 0; i < infos.length; ++i) {
    ret.push(_recipientFromAsn1(infos[i]));
  }

  return ret;
}
/**
 * Map an array of recipient objects to ASN.1 RecipientInfo objects.
 *
 * @param recipients an array of recipientInfo objects.
 *
 * @return an array of ASN.1 RecipientInfos.
 */


function _recipientsToAsn1(recipients) {
  var ret = [];

  for (var i = 0; i < recipients.length; ++i) {
    ret.push(_recipientToAsn1(recipients[i]));
  }

  return ret;
}
/**
 * Converts a single signer from an ASN.1 object.
 *
 * @param obj the ASN.1 representation of a SignerInfo.
 *
 * @return the signer object.
 */


function _signerFromAsn1(obj) {
  // validate EnvelopedData content block and capture data
  var capture = {};
  var errors = [];

  if (!asn1.validate(obj, p7.asn1.signerInfoValidator, capture, errors)) {
    var error = new Error('Cannot read PKCS#7 SignerInfo. ' + 'ASN.1 object is not an PKCS#7 SignerInfo.');
    error.errors = errors;
    throw error;
  }

  var rval = {
    version: capture.version.charCodeAt(0),
    issuer: forge.pki.RDNAttributesAsArray(capture.issuer),
    serialNumber: forge.util.createBuffer(capture.serial).toHex(),
    digestAlgorithm: asn1.derToOid(capture.digestAlgorithm),
    signatureAlgorithm: asn1.derToOid(capture.signatureAlgorithm),
    signature: capture.signature,
    authenticatedAttributes: [],
    unauthenticatedAttributes: []
  }; // TODO: convert attributes

  var authenticatedAttributes = capture.authenticatedAttributes || [];
  var unauthenticatedAttributes = capture.unauthenticatedAttributes || [];
  return rval;
}
/**
 * Converts a single signerInfo object to an ASN.1 object.
 *
 * @param obj the signerInfo object.
 *
 * @return the ASN.1 representation of a SignerInfo.
 */


function _signerToAsn1(obj) {
  // SignerInfo
  var rval = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// version
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, asn1.integerToDer(obj.version).getBytes()), // issuerAndSerialNumber
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// name
  forge.pki.distinguishedNameToAsn1({
    attributes: obj.issuer
  }), // serial
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, forge.util.hexToBytes(obj.serialNumber))]), // digestAlgorithm
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// algorithm
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(obj.digestAlgorithm).getBytes()), // parameters (null)
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')])]); // authenticatedAttributes (OPTIONAL)

  if (obj.authenticatedAttributesAsn1) {
    // add ASN.1 previously generated during signing
    rval.value.push(obj.authenticatedAttributesAsn1);
  } // digestEncryptionAlgorithm


  rval.value.push(asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// algorithm
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(obj.signatureAlgorithm).getBytes()), // parameters (null)
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')])); // encryptedDigest

  rval.value.push(asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, obj.signature)); // unauthenticatedAttributes (OPTIONAL)

  if (obj.unauthenticatedAttributes.length > 0) {
    // [1] IMPLICIT
    var attrsAsn1 = asn1.create(asn1.Class.CONTEXT_SPECIFIC, 1, true, []);

    for (var i = 0; i < obj.unauthenticatedAttributes.length; ++i) {
      var attr = obj.unauthenticatedAttributes[i];
      attrsAsn1.values.push(_attributeToAsn1(attr));
    }

    rval.value.push(attrsAsn1);
  }

  return rval;
}
/**
 * Map a set of SignerInfo ASN.1 objects to an array of signer objects.
 *
 * @param signerInfoAsn1s an array of ASN.1 SignerInfos (i.e. SET OF).
 *
 * @return an array of signers objects.
 */


function _signersFromAsn1(signerInfoAsn1s) {
  var ret = [];

  for (var i = 0; i < signerInfoAsn1s.length; ++i) {
    ret.push(_signerFromAsn1(signerInfoAsn1s[i]));
  }

  return ret;
}
/**
 * Map an array of signer objects to ASN.1 objects.
 *
 * @param signers an array of signer objects.
 *
 * @return an array of ASN.1 SignerInfos.
 */


function _signersToAsn1(signers) {
  var ret = [];

  for (var i = 0; i < signers.length; ++i) {
    ret.push(_signerToAsn1(signers[i]));
  }

  return ret;
}
/**
 * Convert an attribute object to an ASN.1 Attribute.
 *
 * @param attr the attribute object.
 *
 * @return the ASN.1 Attribute.
 */


function _attributeToAsn1(attr) {
  var value; // TODO: generalize to support more attributes

  if (attr.type === forge.pki.oids.contentType) {
    value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(attr.value).getBytes());
  } else if (attr.type === forge.pki.oids.messageDigest) {
    value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, attr.value.bytes());
  } else if (attr.type === forge.pki.oids.signingTime) {
    /* Note per RFC 2985: Dates between 1 January 1950 and 31 December 2049
      (inclusive) MUST be encoded as UTCTime. Any dates with year values
      before 1950 or after 2049 MUST be encoded as GeneralizedTime. [Further,]
      UTCTime values MUST be expressed in Greenwich Mean Time (Zulu) and MUST
      include seconds (i.e., times are YYMMDDHHMMSSZ), even where the
      number of seconds is zero.  Midnight (GMT) must be represented as
      "YYMMDD000000Z". */
    // TODO: make these module-level constants
    var jan_1_1950 = new Date('1950-01-01T00:00:00Z');
    var jan_1_2050 = new Date('2050-01-01T00:00:00Z');
    var date = attr.value;

    if (typeof date === 'string') {
      // try to parse date
      var timestamp = Date.parse(date);

      if (!isNaN(timestamp)) {
        date = new Date(timestamp);
      } else if (date.length === 13) {
        // YYMMDDHHMMSSZ (13 chars for UTCTime)
        date = asn1.utcTimeToDate(date);
      } else {
        // assume generalized time
        date = asn1.generalizedTimeToDate(date);
      }
    }

    if (date >= jan_1_1950 && date < jan_1_2050) {
      value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.UTCTIME, false, asn1.dateToUtcTime(date));
    } else {
      value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.GENERALIZEDTIME, false, asn1.dateToGeneralizedTime(date));
    }
  } // TODO: expose as common API call
  // create a RelativeDistinguishedName set
  // each value in the set is an AttributeTypeAndValue first
  // containing the type (an OID) and second the value


  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// AttributeType
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(attr.type).getBytes()), asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, [// AttributeValue
  value])]);
}
/**
 * Map messages encrypted content to ASN.1 objects.
 *
 * @param ec The encryptedContent object of the message.
 *
 * @return ASN.1 representation of the encryptedContent object (SEQUENCE).
 */


function _encryptedContentToAsn1(ec) {
  return [// ContentType, always Data for the moment
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(forge.pki.oids.data).getBytes()), // ContentEncryptionAlgorithmIdentifier
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// Algorithm
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(ec.algorithm).getBytes()), // Parameters (IV)
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, ec.parameter.getBytes())]), // [0] EncryptedContent
  asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, ec.content.getBytes())])];
}
/**
 * Reads the "common part" of an PKCS#7 content block (in ASN.1 format)
 *
 * This function reads the "common part" of the PKCS#7 content blocks
 * EncryptedData and EnvelopedData, i.e. version number and symmetrically
 * encrypted content block.
 *
 * The result of the ASN.1 validate and capture process is returned
 * to allow the caller to extract further data, e.g. the list of recipients
 * in case of a EnvelopedData object.
 *
 * @param msg the PKCS#7 object to read the data to.
 * @param obj the ASN.1 representation of the content block.
 * @param validator the ASN.1 structure validator object to use.
 *
 * @return the value map captured by validator object.
 */


function _fromAsn1(msg, obj, validator) {
  var capture = {};
  var errors = [];

  if (!asn1.validate(obj, validator, capture, errors)) {
    var error = new Error('Cannot read PKCS#7 message. ' + 'ASN.1 object is not a supported PKCS#7 message.');
    error.errors = error;
    throw error;
  } // Check contentType, so far we only support (raw) Data.


  var contentType = asn1.derToOid(capture.contentType);

  if (contentType !== forge.pki.oids.data) {
    throw new Error('Unsupported PKCS#7 message. ' + 'Only wrapped ContentType Data supported.');
  }

  if (capture.encryptedContent) {
    var content = '';

    if (forge.util.isArray(capture.encryptedContent)) {
      for (var i = 0; i < capture.encryptedContent.length; ++i) {
        if (capture.encryptedContent[i].type !== asn1.Type.OCTETSTRING) {
          throw new Error('Malformed PKCS#7 message, expecting encrypted ' + 'content constructed of only OCTET STRING objects.');
        }

        content += capture.encryptedContent[i].value;
      }
    } else {
      content = capture.encryptedContent;
    }

    msg.encryptedContent = {
      algorithm: asn1.derToOid(capture.encAlgorithm),
      parameter: forge.util.createBuffer(capture.encParameter.value),
      content: forge.util.createBuffer(content)
    };
  }

  if (capture.content) {
    var content = '';

    if (forge.util.isArray(capture.content)) {
      for (var i = 0; i < capture.content.length; ++i) {
        if (capture.content[i].type !== asn1.Type.OCTETSTRING) {
          throw new Error('Malformed PKCS#7 message, expecting ' + 'content constructed of only OCTET STRING objects.');
        }

        content += capture.content[i].value;
      }
    } else {
      content = capture.content;
    }

    msg.content = forge.util.createBuffer(content);
  }

  msg.version = capture.version.charCodeAt(0);
  msg.rawCapture = capture;
  return capture;
}
/**
 * Decrypt the symmetrically encrypted content block of the PKCS#7 message.
 *
 * Decryption is skipped in case the PKCS#7 message object already has a
 * (decrypted) content attribute.  The algorithm, key and cipher parameters
 * (probably the iv) are taken from the encryptedContent attribute of the
 * message object.
 *
 * @param The PKCS#7 message object.
 */


function _decryptContent(msg) {
  if (msg.encryptedContent.key === undefined) {
    throw new Error('Symmetric key not available.');
  }

  if (msg.content === undefined) {
    var ciph;

    switch (msg.encryptedContent.algorithm) {
      case forge.pki.oids['aes128-CBC']:
      case forge.pki.oids['aes192-CBC']:
      case forge.pki.oids['aes256-CBC']:
        ciph = forge.aes.createDecryptionCipher(msg.encryptedContent.key);
        break;

      case forge.pki.oids['desCBC']:
      case forge.pki.oids['des-EDE3-CBC']:
        ciph = forge.des.createDecryptionCipher(msg.encryptedContent.key);
        break;

      default:
        throw new Error('Unsupported symmetric cipher, OID ' + msg.encryptedContent.algorithm);
    }

    ciph.start(msg.encryptedContent.parameter);
    ciph.update(msg.encryptedContent.content);

    if (!ciph.finish()) {
      throw new Error('Symmetric decryption failed.');
    }

    msg.content = ciph.output;
  }
}

/***/ }),
/* 684 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(95);

const forge = __webpack_require__(7);

const pki = forge.pki;
exports = module.exports;
/**
 * Gets a self-signed X.509 certificate for the key.
 *
 * The output Buffer contains the PKCS #7 message in DER.
 *
 * TODO: move to libp2p-crypto package
 *
 * @param {KeyInfo} key - The id and name of the key
 * @param {RsaPrivateKey} privateKey - The naked key
 * @returns {undefined}
 */

exports.certificateForKey = (key, privateKey) => {
  const publicKey = pki.setRsaPublicKey(privateKey.n, privateKey.e);
  const cert = pki.createCertificate();
  cert.publicKey = publicKey;
  cert.serialNumber = '01';
  cert.validity.notBefore = new Date();
  cert.validity.notAfter = new Date();
  cert.validity.notAfter.setFullYear(cert.validity.notBefore.getFullYear() + 10);
  const attrs = [{
    name: 'organizationName',
    value: 'ipfs'
  }, {
    shortName: 'OU',
    value: 'keystore'
  }, {
    name: 'commonName',
    value: key.id
  }];
  cert.setSubject(attrs);
  cert.setIssuer(attrs);
  cert.setExtensions([{
    name: 'basicConstraints',
    cA: true
  }, {
    name: 'keyUsage',
    keyCertSign: true,
    digitalSignature: true,
    nonRepudiation: true,
    keyEncipherment: true,
    dataEncipherment: true
  }, {
    name: 'extKeyUsage',
    serverAuth: true,
    clientAuth: true,
    codeSigning: true,
    emailProtection: true,
    timeStamping: true
  }, {
    name: 'nsCertType',
    client: true,
    server: true,
    email: true,
    objsign: true,
    sslCA: true,
    emailCA: true,
    objCA: true
  }]); // self-sign certificate

  cert.sign(privateKey);
  return cert;
};
/**
 * Finds the first item in a collection that is matched in the
 * `asyncCompare` function.
 *
 * `asyncCompare` is an async function that must
 * resolve to either `true` or `false`.
 *
 * @param {Array} array
 * @param {function(*)} asyncCompare An async function that returns a boolean
 */


async function findAsync(array, asyncCompare) {
  const promises = array.map(asyncCompare);
  const results = await Promise.all(promises);
  const index = results.findIndex(result => result);
  return array[index];
}

module.exports.findAsync = findAsync;

/***/ }),
/* 685 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function fail() {
  throw new Error('Key management requires \'--pass ...\' option');
}

class NoKeychain {
  static get options() {
    fail();
  }

  static generateOptions() {
    fail();
  }

  createKey() {
    fail();
  }

  listKeys() {
    fail();
  }

  findKeyById() {
    fail();
  }

  findKeyByName() {
    fail();
  }

  renameKey() {
    fail();
  }

  removeKey() {
    fail();
  }

  exportKey() {
    fail();
  }

  importKey() {
    fail();
  }

  importPeer() {
    fail();
  }

  get cms() {
    fail();
  }

}

module.exports = NoKeychain;

/***/ }),
/* 686 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const {
  map
} = __webpack_require__(41);
/**
 * BlockService is a hybrid block datastore. It stores data in a local
 * datastore and may retrieve data from a remote Exchange.
 * It uses an internal `datastore.Datastore` instance to store values.
 */


class BlockService {
  /**
   * Create a new BlockService
   *
   * @param {IPFSRepo} ipfsRepo
   */
  constructor(ipfsRepo) {
    this._repo = ipfsRepo;
    this._bitswap = null;
  }
  /**
   * Add a bitswap instance that communicates with the
   * network to retreive blocks that are not in the local store.
   *
   * If the node is online all requests for blocks first
   * check locally and afterwards ask the network for the blocks.
   *
   * @param {Bitswap} bitswap
   * @returns {void}
   */


  setExchange(bitswap) {
    this._bitswap = bitswap;
  }
  /**
   * Go offline, i.e. drop the reference to bitswap.
   *
   * @returns {void}
   */


  unsetExchange() {
    this._bitswap = null;
  }
  /**
   * Is the blockservice online, i.e. is bitswap present.
   *
   * @returns {bool}
   */


  hasExchange() {
    return this._bitswap != null;
  }
  /**
   * Put a block to the underlying datastore.
   *
   * @param {Block} block
   * @returns {Promise}
   */


  put(block) {
    if (this.hasExchange()) {
      return this._bitswap.put(block);
    } else {
      return this._repo.blocks.put(block);
    }
  }
  /**
   * Put a multiple blocks to the underlying datastore.
   *
   * @param {Array<Block>} blocks
   * @returns {Promise}
   */


  putMany(blocks) {
    if (this.hasExchange()) {
      return this._bitswap.putMany(blocks);
    } else {
      return this._repo.blocks.putMany(blocks);
    }
  }
  /**
   * Get a block by cid.
   *
   * @param {CID} cid
   * @returns {Promise<Block>}
   */


  get(cid) {
    if (this.hasExchange()) {
      return this._bitswap.get(cid);
    } else {
      return this._repo.blocks.get(cid);
    }
  }
  /**
   * Get multiple blocks back from an array of cids.
   *
   * @param {Array<CID>} cids
   * @returns {Iterator<Block>}
   */


  getMany(cids) {
    if (!Array.isArray(cids)) {
      throw new Error('first arg must be an array of cids');
    }

    if (this.hasExchange()) {
      return this._bitswap.getMany(cids);
    } else {
      const getRepoBlocks = map(cid => this._repo.blocks.get(cid));
      return getRepoBlocks(cids);
    }
  }
  /**
   * Delete a block from the blockstore.
   *
   * @param {CID} cid
   * @returns {Promise}
   */


  delete(cid) {
    return this._repo.blocks.delete(cid);
  }

}

module.exports = BlockService;

/***/ }),
/* 687 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

const Block = __webpack_require__(80);

const CID = __webpack_require__(3);

const mergeOptions = __webpack_require__(27);

const ipldDagCbor = __webpack_require__(304);

const ipldDagPb = __webpack_require__(12);

const ipldRaw = __webpack_require__(306);

const multicodec = __webpack_require__(15);

const typical = __webpack_require__(689);

const {
  extendIterator
} = __webpack_require__(690);

class IPLDResolver {
  constructor(userOptions) {
    const options = mergeOptions(IPLDResolver.defaultOptions, userOptions);

    if (!options.blockService) {
      throw new Error('Missing blockservice');
    }

    this.bs = options.blockService; // Object with current list of active resolvers

    this.resolvers = {};

    if (typeof options.loadFormat !== 'function') {
      this.loadFormat = codec => {
        const codecName = multicodec.print[codec];
        throw new Error("No resolver found for codec \"".concat(codecName, "\""));
      };
    } else {
      this.loadFormat = options.loadFormat;
    } // Enable all supplied formats


    for (const format of options.formats) {
      this.addFormat(format);
    }
  }
  /**
   * Add support for an IPLD Format.
   *
   * @param {Object} format - The implementation of an IPLD Format.
   * @returns {this}
   */


  addFormat(format) {
    const codec = format.codec;

    if (this.resolvers[format.format]) {
      const codecName = multicodec.print[codec];
      throw new Error("Resolver already exists for codec \"".concat(codecName, "\""));
    }

    this.resolvers[codec] = format;
    return this;
  }
  /**
   * Remove support for an IPLD Format.
   *
   * @param {number} codec - The codec of the IPLD Format to remove.
   * @returns {this}
   */


  removeFormat(codec) {
    if (this.resolvers[codec]) {
      delete this.resolvers[codec];
    }

    return this;
  }
  /**
   * Retrieves IPLD Nodes along the `path` that is rooted at `cid`.
   *
   * @param {CID} cid - the CID the resolving starts.
   * @param {string} path - the path that should be resolved.
   * @returns {Iterable.<Promise.<{remainderPath: string, value}>>} - Returns an async iterator of all the IPLD Nodes that were traversed during the path resolving. Every element is an object with these fields:
   *   - `remainderPath`: the part of the path that wasn’t resolved yet.
   *   - `value`: the value where the resolved path points to. If further traversing is possible, then the value is a CID object linking to another IPLD Node. If it was possible to fully resolve the path, value is the value the path points to. So if you need the CID of the IPLD Node you’re currently at, just take the value of the previously returned IPLD Node.
   */


  resolve(cid, path) {
    if (!CID.isCID(cid)) {
      throw new Error('`cid` argument must be a CID');
    }

    if (typeof path !== 'string') {
      throw new Error('`path` argument must be a string');
    }

    const generator =
    /*#__PURE__*/
    _wrapAsyncGenerator(function* () {
      // End iteration if there isn't a CID to follow anymore
      while (cid !== null) {
        const format = yield _awaitAsyncGenerator(this._getFormat(cid.codec)); // get block
        // use local resolver
        // update path value

        const block = yield _awaitAsyncGenerator(this.bs.get(cid));
        const result = format.resolver.resolve(block.data, path); // Prepare for the next iteration if there is a `remainderPath`

        path = result.remainderPath;
        let value = result.value; // NOTE vmx 2018-11-29: Not all IPLD Formats return links as
        // CIDs yet. Hence try to convert old style links to CIDs

        if (Object.keys(value).length === 1 && '/' in value) {
          try {
            value = new CID(value['/']);
          } catch (_error) {
            value = null;
          }
        }

        cid = CID.isCID(value) ? value : null;
        yield {
          remainderPath: path,
          value
        };
      }
    }).bind(this);

    return extendIterator(generator());
  }
  /**
   * Get a node by CID.
   *
   * @param {CID} cid - The CID of the IPLD Node that should be retrieved.
   * @returns {Promise.<Object>} - Returns a Promise with the IPLD Node that correspond to the given `cid`.
   */


  async get(cid) {
    const block = await this.bs.get(cid);
    const format = await this._getFormat(block.cid.codec);
    const node = format.util.deserialize(block.data);
    return node;
  }
  /**
   * Get multiple nodes back from an array of CIDs.
   *
   * @param {Iterable.<CID>} cids - The CIDs of the IPLD Nodes that should be retrieved.
   * @returns {Iterable.<Promise.<Object>>} - Returns an async iterator with the IPLD Nodes that correspond to the given `cids`.
   */


  getMany(cids) {
    if (!typical.isIterable(cids) || typeof cids === 'string' || Buffer.isBuffer(cids)) {
      throw new Error('`cids` must be an iterable of CIDs');
    }

    const generator =
    /*#__PURE__*/
    _wrapAsyncGenerator(function* () {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;

      var _iteratorError;

      try {
        for (var _iterator = _asyncIterator(cids), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
          const cid = _value;
          yield this.get(cid);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            yield _awaitAsyncGenerator(_iterator.return());
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }).bind(this);

    return extendIterator(generator());
  }
  /**
   * Stores the given IPLD Node of a recognized IPLD Format.
   *
   * @param {Object} node - The deserialized IPLD node that should be inserted.
   * @param {number} format - The multicodec of the format that IPLD Node should be encoded in.
   * @param {Object} [userOptions] -  Options is an object with the following properties.
   * @param {number} [userOtions.hashAlg=hash algorithm of the given multicodec] - The hashing algorithm that is used to calculate the CID.
   * @param {number} [userOptions.cidVersion=1] - The CID version to use.
   * @param {boolean} [userOptions.onlyHash=false] - If true the serialized form of the IPLD Node will not be passed to the underlying block store.
   * @returns {Promise.<CID>} - Returns the CID of the serialized IPLD Nodes.
   */


  async put(node, format, userOptions) {
    if (format === undefined) {
      throw new Error('`put` requires a format');
    }

    if (typeof format !== 'number') {
      throw new Error('`format` parameter must be number (multicodec)');
    }

    const formatImpl = await this._getFormat(format);
    const defaultOptions = {
      hashAlg: formatImpl.defaultHashAlg,
      cidVersion: 1,
      onlyHash: false
    };
    const options = mergeOptions(defaultOptions, userOptions);
    const cidOptions = {
      cidVersion: options.cidVersion,
      hashAlg: options.hashAlg,
      onlyHash: options.onlyHash
    };
    const serialized = formatImpl.util.serialize(node);
    const cid = await formatImpl.util.cid(serialized, cidOptions);

    if (!options.onlyHash) {
      const block = new Block(serialized, cid);
      await this.bs.put(block);
    }

    return cid;
  }
  /**
   * Stores the given IPLD Nodes of a recognized IPLD Format.
   *
   * @param {Iterable.<Object>} nodes - Deserialized IPLD nodes that should be inserted.
   * @param {number} format - The multicodec of the format that IPLD Node should be encoded in.
   * @param {Object} [userOptions] -  Options are applied to any of the `nodes` and is an object with the following properties.
   * @param {number} [userOtions.hashAlg=hash algorithm of the given multicodec] - The hashing algorithm that is used to calculate the CID.
   * @param {number} [userOptions.cidVersion=1] - The CID version to use.
   * @param {boolean} [userOptions.onlyHash=false] - If true the serialized form of the IPLD Node will not be passed to the underlying block store.
   * @returns {Iterable.<Promise.<CID>>} - Returns an async iterator with the CIDs of the serialized IPLD Nodes.
   */


  putMany(nodes, format, userOptions) {
    if (!typical.isIterable(nodes) || typeof nodes === 'string' || Buffer.isBuffer(nodes)) {
      throw new Error('`nodes` must be an iterable');
    }

    if (format === undefined) {
      throw new Error('`put` requires a format');
    }

    if (typeof format !== 'number') {
      throw new Error('`format` parameter must be number (multicodec)');
    }

    let options;
    let formatImpl;

    const generator =
    /*#__PURE__*/
    _wrapAsyncGenerator(function* () {
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;

      var _iteratorError2;

      try {
        for (var _iterator2 = _asyncIterator(nodes), _step2, _value2; _step2 = yield _awaitAsyncGenerator(_iterator2.next()), _iteratorNormalCompletion2 = _step2.done, _value2 = yield _awaitAsyncGenerator(_step2.value), !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {
          const node = _value2;

          // Lazy load the options not when the iterator is initialized, but
          // when we hit the first iteration. This way the constructor can be
          // a synchronous function.
          if (options === undefined) {
            formatImpl = yield _awaitAsyncGenerator(this._getFormat(format));
            const defaultOptions = {
              hashAlg: formatImpl.defaultHashAlg,
              cidVersion: 1,
              onlyHash: false
            };
            options = mergeOptions(defaultOptions, userOptions);
          }

          yield this.put(node, format, options);
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
            yield _awaitAsyncGenerator(_iterator2.return());
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }).bind(this);

    return extendIterator(generator());
  }
  /**
   * Remove an IPLD Node by the given CID.
   *
   * @param {CID} cid - The CID of the IPLD Node that should be removed.
   * @return {Promise.<CID>} The CID of the removed IPLD Node.
   */


  async remove(cid) {
    // eslint-disable-line require-await
    return this.bs.delete(cid);
  }
  /**
   * Remove IPLD Nodes by the given CIDs.
   *
   * Throws an error if any of the Blocks can’t be removed. This operation is
   * *not* atomic, some Blocks might have already been removed.
   *
   * @param {Iterable.<CID>} cids - The CIDs of the IPLD Nodes that should be removed.
   * @return {Iterable.<Promise.<CID>>} Returns an async iterator with the CIDs of the removed IPLD Nodes.
   */


  removeMany(cids) {
    if (!typical.isIterable(cids) || typeof cids === 'string' || Buffer.isBuffer(cids)) {
      throw new Error('`cids` must be an iterable of CIDs');
    }

    const generator =
    /*#__PURE__*/
    _wrapAsyncGenerator(function* () {
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;

      var _iteratorError3;

      try {
        for (var _iterator3 = _asyncIterator(cids), _step3, _value3; _step3 = yield _awaitAsyncGenerator(_iterator3.next()), _iteratorNormalCompletion3 = _step3.done, _value3 = yield _awaitAsyncGenerator(_step3.value), !_iteratorNormalCompletion3; _iteratorNormalCompletion3 = true) {
          const cid = _value3;
          yield this.remove(cid);
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
            yield _awaitAsyncGenerator(_iterator3.return());
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }
    }).bind(this);

    return extendIterator(generator());
  }
  /**
   * Returns all the paths that can be resolved into.
   *
   * @param {Object} cid - The ID to get the paths from
   * @param {string} [offsetPath=''] - the path to start to retrieve the other paths from.
   * @param {Object} [userOptions]
   * @param {number} [userOptions.recursive=false] - whether to get the paths recursively or not. `false` resolves only the paths of the given CID.
   * @returns {Iterable.<Promise.<String>>} - Returns an async iterator with paths that can be resolved into
   */


  tree(cid, offsetPath, userOptions) {
    if (typeof offsetPath === 'object') {
      userOptions = offsetPath;
      offsetPath = undefined;
    }

    offsetPath = offsetPath || '';
    const defaultOptions = {
      recursive: false
    };
    const options = mergeOptions(defaultOptions, userOptions); // If a path is a link then follow it and return its CID

    const maybeRecurse = async (block, treePath) => {
      // A treepath we might want to follow recursively
      const format = await this._getFormat(block.cid.codec);
      const result = format.resolver.resolve(block.data, treePath); // Something to follow recusively, hence push it into the queue

      if (CID.isCID(result.value)) {
        return result.value;
      } else {
        return null;
      }
    };

    const generator =
    /*#__PURE__*/
    _wrapAsyncGenerator(function* () {
      // The list of paths that will get returned
      const treePaths = []; // The current block, needed to call `isLink()` on every interation

      let block; // The list of items we want to follow recursively. The items are
      // an object consisting of the CID and the currently already resolved
      // path

      const queue = [{
        cid,
        basePath: ''
      }]; // The path that was already traversed

      let basePath; // End of iteration if there aren't any paths left to return or
      // if we don't want to traverse recursively and have already
      // returne the first level

      while (treePaths.length > 0 || queue.length > 0) {
        // There aren't any paths left, get them from the given CID
        if (treePaths.length === 0 && queue.length > 0) {
          ({
            cid,
            basePath
          } = queue.shift());
          const format = yield _awaitAsyncGenerator(this._getFormat(cid.codec));
          block = yield _awaitAsyncGenerator(this.bs.get(cid));
          const paths = format.resolver.tree(block.data);
          treePaths.push(...paths);
        }

        const treePath = treePaths.shift();
        let fullPath = basePath + treePath; // Only follow links if recursion is intended

        if (options.recursive) {
          cid = yield _awaitAsyncGenerator(maybeRecurse(block, treePath));

          if (cid !== null) {
            queue.push({
              cid,
              basePath: fullPath + '/'
            });
          }
        } // Return it if it matches the given offset path, but is not the
        // offset path itself


        if (fullPath.startsWith(offsetPath) && fullPath.length > offsetPath.length) {
          if (offsetPath.length > 0) {
            fullPath = fullPath.slice(offsetPath.length + 1);
          }

          yield fullPath;
        }
      }
    }).bind(this);

    return extendIterator(generator());
  }
  /*           */

  /* internals */

  /*           */


  async _getFormat(codec) {
    // TODO vmx 2019-01-24: Once all CIDs support accessing the codec code
    // instead of the name, remove this part
    if (typeof codec === 'string') {
      const constantName = codec.toUpperCase().replace(/-/g, '_');
      codec = multicodec[constantName];
    }

    if (this.resolvers[codec]) {
      return this.resolvers[codec];
    } // If not supported, attempt to dynamically load this format


    const format = await this.loadFormat(codec);
    this.addFormat(format);
    return format;
  }

}
/**
 * Default options for IPLD.
 */


IPLDResolver.defaultOptions = {
  formats: [ipldDagCbor, ipldDagPb, ipldRaw]
};
module.exports = IPLDResolver;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 688 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const CID = __webpack_require__(3);

const util = __webpack_require__(305);
/**
 * Resolves a path within a CBOR block.
 *
 * Returns the value or a link and the partial mising path. This way the
 * IPLD Resolver can fetch the link and continue to resolve.
 *
 * @param {Buffer} binaryBlob - Binary representation of a CBOR block
 * @param {string} [path='/'] - Path that should be resolved
 * @returns {Object} result - Result of the path it it was resolved successfully
 * @returns {*} result.value - Value the path resolves to
 * @returns {string} result.remainderPath - If the path resolves half-way to a
 *   link, then the `remainderPath` is the part after the link that can be used
 *   for further resolving
 */


exports.resolve = (binaryBlob, path) => {
  let node = util.deserialize(binaryBlob);
  const parts = path.split('/').filter(Boolean);

  while (parts.length) {
    const key = parts.shift();

    if (node[key] === undefined) {
      throw new Error("Object has no property '".concat(key, "'"));
    }

    node = node[key];

    if (CID.isCID(node)) {
      return {
        value: node,
        remainderPath: parts.join('/')
      };
    }
  }

  return {
    value: node,
    remainderPath: ''
  };
};

const traverse = function* traverse(node, path) {
  // Traverse only objects and arrays
  if (Buffer.isBuffer(node) || CID.isCID(node) || typeof node === 'string' || node === null) {
    return;
  }

  for (const item of Object.keys(node)) {
    const nextpath = path === undefined ? item : path + '/' + item;
    yield nextpath;
    yield* traverse(node[item], nextpath);
  }
};
/**
 * Return all available paths of a block.
 *
 * @generator
 * @param {Buffer} binaryBlob - Binary representation of a CBOR block
 * @yields {string} - A single path
 */


exports.tree = function* (binaryBlob) {
  const node = util.deserialize(binaryBlob);
  yield* traverse(node);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 689 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


(function (global, factory) {
   true ? factory(exports) : undefined;
})(void 0, function (exports) {
  'use strict';
  /**
   * Isomorphic, functional type-checking for Javascript.
   * @module typical
   * @typicalname t
   * @example
   * const t = require('typical')
   * const allDefined = array.every(t.isDefined)
   */

  /**
   * Returns true if input is a number. It is a more reasonable alternative to `typeof n` which returns `number` for `NaN` and `Infinity`.
   *
   * @param {*} - the input to test
   * @returns {boolean}
   * @static
   * @example
   * > t.isNumber(0)
   * true
   * > t.isNumber(1)
   * true
   * > t.isNumber(1.1)
   * true
   * > t.isNumber(0xff)
   * true
   * > t.isNumber(0644)
   * true
   * > t.isNumber(6.2e5)
   * true
   * > t.isNumber(NaN)
   * false
   * > t.isNumber(Infinity)
   * false
   */

  function isNumber(n) {
    return !isNaN(parseFloat(n)) && isFinite(n);
  }
  /**
   * A plain object is a simple object literal, it is not an instance of a class. Returns true if the input `typeof` is `object` and directly decends from `Object`.
   *
   * @param {*} - the input to test
   * @returns {boolean}
   * @static
   * @example
   * > t.isPlainObject({ something: 'one' })
   * true
   * > t.isPlainObject(new Date())
   * false
   * > t.isPlainObject([ 0, 1 ])
   * false
   * > t.isPlainObject(/test/)
   * false
   * > t.isPlainObject(1)
   * false
   * > t.isPlainObject('one')
   * false
   * > t.isPlainObject(null)
   * false
   * > t.isPlainObject((function * () {})())
   * false
   * > t.isPlainObject(function * () {})
   * false
   */


  function isPlainObject(input) {
    return input !== null && typeof input === 'object' && input.constructor === Object;
  }
  /**
   * An array-like value has all the properties of an array yet is not an array instance. An example is the `arguments` object. Returns `true`` if the input value is an object, not `null`` and has a `length` property set with a numeric value.
   *
   * @param {*} - the input to test
   * @returns {boolean}
   * @static
   * @example
   * function sum(x, y){
   *   console.log(t.isArrayLike(arguments))
   *   // prints `true`
   * }
   */


  function isArrayLike(input) {
    return isObject(input) && typeof input.length === 'number';
  }
  /**
   * Returns true if the typeof input is `'object'` but not null.
   * @param {*} - the input to test
   * @returns {boolean}
   * @static
   */


  function isObject(input) {
    return typeof input === 'object' && input !== null;
  }
  /**
   * Returns true if the input value is defined.
   * @param {*} - the input to test
   * @returns {boolean}
   * @static
   */


  function isDefined(input) {
    return typeof input !== 'undefined';
  }
  /**
   * Returns true if the input value is undefined.
   * @param {*} - the input to test
   * @returns {boolean}
   * @static
   */


  function isUndefined(input) {
    return !isDefined(input);
  }
  /**
   * Returns true if the input value is null.
   * @param {*} - the input to test
   * @returns {boolean}
   * @static
   */


  function isNull(input) {
    return input === null;
  }
  /**
   * Returns true if the input value is not one of `undefined`, `null`, or `NaN`.
   * @param {*} - the input to test
   * @returns {boolean}
   * @static
   */


  function isDefinedValue(input) {
    return isDefined(input) && !isNull(input) && !Number.isNaN(input);
  }
  /**
   * Returns true if the input value is an ES2015 `class`.
   * @param {*} - the input to test
   * @returns {boolean}
   * @static
   */


  function isClass(input) {
    if (typeof input === 'function') {
      return /^class /.test(Function.prototype.toString.call(input));
    } else {
      return false;
    }
  }
  /**
   * Returns true if the input is a string, number, symbol, boolean, null or undefined value.
   * @param {*} - the input to test
   * @returns {boolean}
   * @static
   */


  function isPrimitive(input) {
    if (input === null) return true;

    switch (typeof input) {
      case 'string':
      case 'number':
      case 'symbol':
      case 'undefined':
      case 'boolean':
        return true;

      default:
        return false;
    }
  }
  /**
   * Returns true if the input is a Promise.
   * @param {*} - the input to test
   * @returns {boolean}
   * @static
   */


  function isPromise(input) {
    if (input) {
      const isPromise = isDefined(Promise) && input instanceof Promise;
      const isThenable = input.then && typeof input.then === 'function';
      return !!(isPromise || isThenable);
    } else {
      return false;
    }
  }
  /**
   * Returns true if the input is an iterable (`Map`, `Set`, `Array`, Generator etc.).
   * @param {*} - the input to test
   * @returns {boolean}
   * @static
   * @example
   * > t.isIterable('string')
   * true
   * > t.isIterable(new Map())
   * true
   * > t.isIterable([])
   * true
   * > t.isIterable((function * () {})())
   * true
   * > t.isIterable(Promise.resolve())
   * false
   * > t.isIterable(Promise)
   * false
   * > t.isIterable(true)
   * false
   * > t.isIterable({})
   * false
   * > t.isIterable(0)
   * false
   * > t.isIterable(1.1)
   * false
   * > t.isIterable(NaN)
   * false
   * > t.isIterable(Infinity)
   * false
   * > t.isIterable(function () {})
   * false
   * > t.isIterable(Date)
   * false
   * > t.isIterable()
   * false
   * > t.isIterable({ then: function () {} })
   * false
   */


  function isIterable(input) {
    if (input === null || !isDefined(input)) {
      return false;
    } else {
      return typeof input[Symbol.iterator] === 'function' || typeof input[Symbol.asyncIterator] === 'function';
    }
  }
  /**
   * Returns true if the input value is a string. The equivalent of `typeof input === 'string'` for use in funcitonal contexts.
   * @param {*} - the input to test
   * @returns {boolean}
   * @static
   */


  function isString(input) {
    return typeof input === 'string';
  }
  /**
   * Returns true if the input value is a function. The equivalent of `typeof input === 'function'` for use in funcitonal contexts.
   * @param {*} - the input to test
   * @returns {boolean}
   * @static
   */


  function isFunction(input) {
    return typeof input === 'function';
  }

  var index = {
    isNumber,
    isPlainObject,
    isArrayLike,
    isObject,
    isDefined,
    isUndefined,
    isNull,
    isDefinedValue,
    isClass,
    isPrimitive,
    isPromise,
    isIterable,
    isString,
    isFunction
  };
  exports.default = index;
  exports.isArrayLike = isArrayLike;
  exports.isClass = isClass;
  exports.isDefined = isDefined;
  exports.isDefinedValue = isDefinedValue;
  exports.isFunction = isFunction;
  exports.isIterable = isIterable;
  exports.isNull = isNull;
  exports.isNumber = isNumber;
  exports.isObject = isObject;
  exports.isPlainObject = isPlainObject;
  exports.isPrimitive = isPrimitive;
  exports.isPromise = isPromise;
  exports.isString = isString;
  exports.isUndefined = isUndefined;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

/***/ }),
/* 690 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

exports.first = async iterator => {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;

  var _iteratorError;

  try {
    for (var _iterator = _asyncIterator(iterator), _step, _value; _step = await _iterator.next(), _iteratorNormalCompletion = _step.done, _value = await _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
      const value = _value;
      return value;
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        await _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
};

exports.last = async iterator => {
  let value;
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;

  var _iteratorError2;

  try {
    for (var _iterator2 = _asyncIterator(iterator), _step2, _value2; _step2 = await _iterator2.next(), _iteratorNormalCompletion2 = _step2.done, _value2 = await _step2.value, !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {// Intentionally empty

      value = _value2;
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
        await _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return value;
};

exports.all = async iterator => {
  const values = [];
  var _iteratorNormalCompletion3 = true;
  var _didIteratorError3 = false;

  var _iteratorError3;

  try {
    for (var _iterator3 = _asyncIterator(iterator), _step3, _value3; _step3 = await _iterator3.next(), _iteratorNormalCompletion3 = _step3.done, _value3 = await _step3.value, !_iteratorNormalCompletion3; _iteratorNormalCompletion3 = true) {
      const value = _value3;
      values.push(value);
    }
  } catch (err) {
    _didIteratorError3 = true;
    _iteratorError3 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
        await _iterator3.return();
      }
    } finally {
      if (_didIteratorError3) {
        throw _iteratorError3;
      }
    }
  }

  return values;
};

exports.extendIterator = iterator => {
  iterator.first = () => exports.first(iterator);

  iterator.last = () => exports.last(iterator);

  iterator.all = () => exports.all(iterator);

  return iterator;
};

/***/ }),
/* 691 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const mergeOptions = __webpack_require__(27);

const ipldDagCbor = __webpack_require__(304);

const ipldDagPb = __webpack_require__(12);

const ipldRaw = __webpack_require__(306);

module.exports = (blockService, options) => {
  options = options || {};
  return mergeOptions.call( // ensure we have the defaults formats even if the user overrides `formats: []`
  {
    concatArrays: true
  }, {
    blockService: blockService,
    formats: [ipldDagCbor, ipldDagPb, ipldRaw]
  }, options);
};

/***/ }),
/* 692 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const toUri = __webpack_require__(307);

const debug = __webpack_require__(1);

const CID = __webpack_require__(3);

const shuffle = __webpack_require__(693);

const AbortController = __webpack_require__(61);

const preload = __webpack_require__(694);

const log = debug('ipfs:preload');
log.error = debug('ipfs:preload:error');

module.exports = options => {
  options = options || {};
  options.enabled = Boolean(options.enabled);
  options.addresses = options.addresses || [];

  if (!options.enabled || !options.addresses.length) {
    log('preload disabled');

    const api = () => {};

    api.start = () => {};

    api.stop = () => {};

    return api;
  }

  let stopped = true;
  let requests = [];
  const apiUris = options.addresses.map(toUri);

  const api = async path => {
    try {
      if (stopped) throw new Error("preload ".concat(path, " but preloader is not started"));

      if (typeof path !== 'string') {
        path = new CID(path).toString();
      }

      const fallbackApiUris = shuffle(apiUris);
      let success = false;
      const now = Date.now();

      for (const uri of fallbackApiUris) {
        if (stopped) throw new Error("preload aborted for ".concat(path));
        let controller;

        try {
          controller = new AbortController();
          requests = requests.concat(controller);
          await preload("".concat(uri, "/api/v0/refs?r=true&arg=").concat(encodeURIComponent(path)), {
            signal: controller.signal
          });
          success = true;
        } catch (err) {
          if (err.type !== 'aborted') log.error(err);
        } finally {
          requests = requests.filter(r => r !== controller);
        }

        if (success) break;
      }

      log("".concat(success ? '' : 'un', "successfully preloaded ").concat(path, " in ").concat(Date.now() - now, "ms"));
    } catch (err) {
      log.error(err);
    }
  };

  api.start = () => {
    stopped = false;
  };

  api.stop = () => {
    stopped = true;
    log("aborting ".concat(requests.length, " pending preload request(s)"));
    requests.forEach(r => r.abort());
    requests = [];
  };

  return api;
};

/***/ }),
/* 693 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (arr) {
  if (!Array.isArray(arr)) {
    throw new TypeError('Expected Array, got ' + typeof arr);
  }

  var rand;
  var tmp;
  var len = arr.length;
  var ret = arr.slice();

  while (len) {
    rand = Math.floor(Math.random() * len--);
    tmp = ret[len];
    ret[len] = ret[rand];
    ret[rand] = tmp;
  }

  return ret;
};

/***/ }),
/* 694 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-env browser */


const {
  default: PQueue
} = __webpack_require__(50);

const {
  default: ky
} = __webpack_require__(122);

const debug = __webpack_require__(1);

const log = debug('ipfs:preload');
log.error = debug('ipfs:preload:error'); // browsers limit concurrent connections per host,
// we don't want preload calls to exhaust the limit (~6)

const httpQueue = new PQueue({
  concurrency: 4
});

module.exports = function preload(url, options) {
  log(url);
  options = options || {};
  return httpQueue.add(async () => {
    const res = await ky.get(url, {
      signal: options.signal
    });
    const reader = res.body.getReader();

    try {
      while (true) {
        const {
          done
        } = await reader.read();
        if (done) return; // Read to completion but do not cache
      }
    } finally {
      reader.releaseLock();
    }
  });
};

/***/ }),
/* 695 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const PeerId = __webpack_require__(9);

const {
  Key,
  Errors
} = __webpack_require__(14);

const errcode = __webpack_require__(2);

const debug = __webpack_require__(1);

const log = debug('ipfs:ipns:publisher');
log.error = debug('ipfs:ipns:publisher:error');

const ipns = __webpack_require__(84);

const ERR_NOT_FOUND = Errors.notFoundError().code;
const defaultRecordLifetime = 60 * 60 * 1000; // IpnsPublisher is capable of publishing and resolving names to the IPFS routing system.

class IpnsPublisher {
  constructor(routing, datastore) {
    this._routing = routing;
    this._datastore = datastore;
  } // publish record with a eol


  async publishWithEOL(privKey, value, lifetime) {
    if (!privKey || !privKey.bytes) {
      throw errcode(new Error('invalid private key'), 'ERR_INVALID_PRIVATE_KEY');
    }

    const peerId = await PeerId.createFromPrivKey(privKey.bytes);
    const record = await this._updateOrCreateRecord(privKey, value, lifetime, peerId);
    return this._putRecordToRouting(record, peerId);
  } // Accepts a keypair, as well as a value (ipfsPath), and publishes it out to the routing system


  async publish(privKey, value) {
    // eslint-disable-line require-await
    return this.publishWithEOL(privKey, value, defaultRecordLifetime);
  }

  async _putRecordToRouting(record, peerId) {
    if (!PeerId.isPeerId(peerId)) {
      const errMsg = 'peerId received is not valid';
      log.error(errMsg);
      throw errcode(new Error(errMsg), 'ERR_INVALID_PEER_ID');
    }

    const publicKey = peerId._pubKey;
    const embedPublicKeyRecord = await ipns.embedPublicKey(publicKey, record);
    const keys = ipns.getIdKeys(peerId.toBytes());
    await this._publishEntry(keys.routingKey, embedPublicKeyRecord || record, peerId); // Publish the public key to support old go-ipfs nodes that are looking for it in the routing
    // We will be able to deprecate this part in the future, since the public keys will be only
    // in IPNS record and the peerId.

    await this._publishPublicKey(keys.routingPubKey, publicKey);
    return embedPublicKeyRecord || record;
  }

  async _publishEntry(key, entry) {
    if (!Key.isKey(key)) {
      const errMsg = 'datastore key does not have a valid format';
      log.error(errMsg);
      throw errcode(new Error(errMsg), 'ERR_INVALID_DATASTORE_KEY');
    }

    let entryData;

    try {
      // Marshal record
      entryData = ipns.marshal(entry);
    } catch (err) {
      log.error(err);
      throw err;
    } // Add record to routing (buffer key)


    try {
      const res = await this._routing.put(key.toBuffer(), entryData);
      log("ipns record for ".concat(key.toString('base64'), " was stored in the routing"));
      return res;
    } catch (err) {
      const errMsg = "ipns record for ".concat(key.toString('base64'), " could not be stored in the routing");
      log.error(errMsg);
      log.error(err);
      throw errcode(new Error(errMsg), 'ERR_PUTTING_TO_ROUTING');
    }
  }

  async _publishPublicKey(key, publicKey) {
    if (!Key.isKey(key)) {
      const errMsg = 'datastore key does not have a valid format';
      log.error(errMsg);
      throw errcode(new Error(errMsg), 'ERR_INVALID_DATASTORE_KEY');
    }

    if (!publicKey || !publicKey.bytes) {
      const errMsg = 'one or more of the provided parameters are not defined';
      log.error(errMsg);
      throw errcode(new Error(errMsg), 'ERR_UNDEFINED_PARAMETER');
    } // Add public key to routing (buffer key)


    try {
      const res = await this._routing.put(key.toBuffer(), publicKey.bytes);
      log("public key for ".concat(key.toString('base64'), " was stored in the routing"));
      return res;
    } catch (err) {
      const errMsg = "public key for ".concat(key.toString('base64'), " could not be stored in the routing");
      log.error(errMsg);
      log.error(err);
      throw errcode(new Error(errMsg), 'ERR_PUTTING_TO_ROUTING');
    }
  } // Returns the record this node has published corresponding to the given peer ID.
  // If `checkRouting` is true and we have no existing record, this method will check the routing system for any existing records.


  async _getPublished(peerId, options) {
    if (!PeerId.isPeerId(peerId)) {
      const errMsg = 'peerId received is not valid';
      log.error(errMsg);
      throw errcode(new Error(errMsg), 'ERR_INVALID_PEER_ID');
    }

    options = options || {};
    const checkRouting = options.checkRouting !== false;

    try {
      const dsVal = await this._datastore.get(ipns.getLocalKey(peerId.id)); // unmarshal data

      return this._unmarshalData(dsVal);
    } catch (err) {
      if (err.code !== ERR_NOT_FOUND) {
        const errMsg = "unexpected error getting the ipns record ".concat(peerId.id, " from datastore");
        log.error(errMsg);
        throw errcode(new Error(errMsg), 'ERR_UNEXPECTED_DATASTORE_RESPONSE');
      }

      if (!checkRouting) {
        throw errcode(err);
      } // Try to get from routing


      try {
        const keys = ipns.getIdKeys(peerId.toBytes());
        const res = await this._routing.get(keys.routingKey.toBuffer()); // unmarshal data

        return this._unmarshalData(res);
      } catch (err) {
        log.error(err);
        throw err;
      }
    }
  }

  _unmarshalData(data) {
    try {
      return ipns.unmarshal(data);
    } catch (err) {
      throw errcode(err, 'ERR_INVALID_RECORD_DATA');
    }
  }

  async _updateOrCreateRecord(privKey, value, validity, peerId) {
    if (!PeerId.isPeerId(peerId)) {
      const errMsg = 'peerId received is not valid';
      log.error(errMsg);
      throw errcode(new Error(errMsg), 'ERR_INVALID_PEER_ID');
    }

    const getPublishedOptions = {
      checkRouting: true
    };
    let record;

    try {
      record = await this._getPublished(peerId, getPublishedOptions);
    } catch (err) {
      if (err.code !== ERR_NOT_FOUND) {
        const errMsg = "unexpected error when determining the last published IPNS record for ".concat(peerId.id);
        log.error(errMsg);
        throw errcode(new Error(errMsg), 'ERR_DETERMINING_PUBLISHED_RECORD');
      }
    } // Determinate the record sequence number


    let seqNumber = 0;

    if (record && record.sequence !== undefined) {
      seqNumber = record.value.toString() !== value ? record.sequence + 1 : record.sequence;
    }

    let entryData;

    try {
      // Create record
      entryData = await ipns.create(privKey, value, seqNumber, validity);
    } catch (err) {
      const errMsg = "ipns record for ".concat(value, " could not be created");
      log.error(err);
      throw errcode(new Error(errMsg), 'ERR_CREATING_IPNS_RECORD');
    } // TODO IMPROVEMENT - set ttl (still experimental feature for go)


    try {
      // Marshal record
      const data = ipns.marshal(entryData); // Store the new record

      await this._datastore.put(ipns.getLocalKey(peerId.id), data);
      log("ipns record for ".concat(value, " was stored in the datastore"));
      return entryData;
    } catch (err) {
      const errMsg = "ipns record for ".concat(value, " could not be stored in the datastore");
      log.error(errMsg);
      throw errcode(new Error(errMsg), 'ERR_STORING_IN_DATASTORE');
    }
  }

}

IpnsPublisher.defaultRecordLifetime = defaultRecordLifetime;
exports = module.exports = IpnsPublisher;

/***/ }),
/* 696 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var RFC4648 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567';
var RFC4648_HEX = '0123456789ABCDEFGHIJKLMNOPQRSTUV';
var CROCKFORD = '0123456789ABCDEFGHJKMNPQRSTVWXYZ';

module.exports = function base32Encode(buffer, variant, options) {
  options = options || {};
  var alphabet, defaultPadding;

  switch (variant) {
    case 'RFC3548':
    case 'RFC4648':
      alphabet = RFC4648;
      defaultPadding = true;
      break;

    case 'RFC4648-HEX':
      alphabet = RFC4648_HEX;
      defaultPadding = true;
      break;

    case 'Crockford':
      alphabet = CROCKFORD;
      defaultPadding = false;
      break;

    default:
      throw new Error('Unknown base32 variant: ' + variant);
  }

  var padding = options.padding !== undefined ? options.padding : defaultPadding;
  var length = buffer.byteLength;
  var view = new Uint8Array(buffer);
  var bits = 0;
  var value = 0;
  var output = '';

  for (var i = 0; i < length; i++) {
    value = value << 8 | view[i];
    bits += 8;

    while (bits >= 5) {
      output += alphabet[value >>> bits - 5 & 31];
      bits -= 5;
    }
  }

  if (bits > 0) {
    output += alphabet[value << 5 - bits & 31];
  }

  if (padding) {
    while (output.length % 8 !== 0) {
      output += '=';
    }
  }

  return output;
};

/***/ }),
/* 697 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Timestamp for 64-bit time_t, nanosecond precision and strftime
 *
 * @author Yusuke Kawasaki
 * @license MIT
 * @see https://github.com/kawanet/timestamp-nano
 */
var Timestamp = function () {
  if (true) module.exports = Timestamp;
  var SEC_DAY = 24 * 3600; // seconds per day

  var YEAR_SLOT = 3200; // years per slot

  var DAY_SLOT = (365 * 400 + 97) * YEAR_SLOT / 400; // days per slot

  var SEC_SLOT = SEC_DAY * DAY_SLOT; // seconds per slot

  var MSEC_SLOT = SEC_SLOT * 1000; // mseconds per slot
  // 15.9.1.1 Time Values and Time Range
  // The actual range of times supported by ECMAScript Date objects is
  // exactly –100,000,000 days to 100,000,000 days measured relative to
  // midnight at the beginning of 01 January, 1970 UTC.

  var MAX_MSEC = 1000 * 10000 * 10000 * SEC_DAY;
  var BIT24 = 0x1000000;
  var BIT32 = 0x10000 * 0x10000;
  var DEC6 = 1000 * 1000;
  var DEC9 = 1000 * 1000 * 1000;
  var ZERO9 = "000000000";
  var trunc = Math.trunc || Math_trunc;
  var P = Timestamp.prototype; // static methods

  Timestamp.fromDate = fromDate;
  Timestamp.fromInt64BE = buildFromInt64(0, 1, 2, 3, 0, 4);
  Timestamp.fromInt64LE = buildFromInt64(3, 2, 1, 0, 4, 0);
  Timestamp.fromString = fromString;
  Timestamp.fromTimeT = fromTimeT; // private properties

  P.year = 0; // Offset number for year precision

  P.time = 0; // Milliseconds from epoch

  P.nano = 0; // Offset number for nanosecond precision
  // instance methods

  P.addNano = addNano;
  P.getNano = getNano;
  P.getTimeT = getTimeT;
  P.getYear = getYear;
  P.toDate = toDate;
  P.toJSON = toJSON;
  P.toString = toString;
  P.writeInt64BE = buildWriteInt64(0, 1, 2, 3, 0, 4);
  P.writeInt64LE = buildWriteInt64(3, 2, 1, 0, 4, 0);
  var FMT_JSON = "%Y-%m-%dT%H:%M:%S.%NZ";
  var FMT_MONTH = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
  var FMT_DAY = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
  var FMT_STRING = {
    "%": "%",
    F: "%Y-%m-%d",
    n: "\n",
    R: "%H:%M",
    T: "%H:%M:%S",
    t: "\t",
    X: "%T",
    Z: "GMT",
    z: "+0000"
  };
  return Timestamp;

  function Timestamp(time, nano, year) {
    var ts = this;
    if (!(ts instanceof Timestamp)) return new Timestamp(time, nano, year);
    ts.time = +time || 0;
    ts.nano = +nano || 0;
    ts.year = +year || 0;
    normalize(ts);
  }

  function getYear() {
    var year = this.toDate().getUTCFullYear();
    return year + this.year;
  }

  function normalize(ts) {
    var year = ts.year;
    var time = ts.time;
    var nano = ts.nano;
    var changed;
    var slot; // normalize nano

    if (nano < 0 || DEC6 <= nano) {
      var n = Math.floor(nano / DEC6);
      nano -= n * DEC6;
      time += n;
      changed = 1;
    }

    var y = year % YEAR_SLOT;

    if (time < -MAX_MSEC || MAX_MSEC < time || y) {
      // shrink time into the minimal slot
      slot = trunc(time / MSEC_SLOT);

      if (slot) {
        year += slot * YEAR_SLOT;
        time -= slot * MSEC_SLOT;
      } // add year offset smaller than a slot


      var dt = newDate(time);
      dt.setUTCFullYear(y + dt.getUTCFullYear());
      year -= y;
      time = +dt; // use full range of 100 million days.

      slot = trunc(year / YEAR_SLOT);
      var total = time + slot * MSEC_SLOT;

      if (slot && -MAX_MSEC <= total && total <= MAX_MSEC) {
        year -= slot * YEAR_SLOT;
        time = total;
      }

      changed = 1;
    }

    if (changed) {
      ts.year = year;
      ts.time = time;
      ts.nano = nano;
    }

    return ts;
  }

  function toDate() {
    var ts = normalize(this);
    return newDate(ts.time);
  }

  function newDate(time) {
    var dt = new Date(0);
    dt.setTime(time);
    return dt;
  }

  function addNano(nano) {
    this.nano += +nano || 0;
    return this;
  }

  function getNano() {
    var ts = normalize(this);
    return (ts.time % 1000 * DEC6 + +ts.nano + DEC9) % DEC9;
  }

  function fromString(string) {
    var time;
    var ts = new Timestamp();
    string += "";
    var array = string.replace(/^\s*[+\-]?\d+/, function (match) {
      var year = +match; // Use only years around 1970 to avoid Date's terrible behavior:
      // 15.9.4.3 Date.UTC
      // If y is not NaN and 0 <= y <= 99, then let yr be 1900+y

      var y = 1970 + (year - 1970) % 400;
      ts.year = year - y;
      return y;
    }).replace(/(?:Z|([+\-]\d{2}):?(\d{2}))$/, function (match, hour, min) {
      // time zone
      if (hour < 0) min *= -1;
      time = (+hour * 60 + +min) * 60000;
      return "";
    }).replace(/\.\d+$/, function (match) {
      // nanoseconds
      ts.nano = +(match + ZERO9).substr(1, 9);
      return "";
    }).split(/\D+/);

    if (array.length > 1) {
      array[1]--; // month starts from 0
    } else {
      array[1] = 0;
    }

    ts.time = time = Date.UTC.apply(Date, array) - (time || 0);

    if (isNaN(time)) {
      throw new TypeError("Invalid Date");
    }

    return normalize(ts);
  }

  function fromDate(date) {
    return new Timestamp(+date);
  }

  function fromTimeT(time) {
    return fromTime(time, 0);
  }

  function fromTime(low, high) {
    high |= 0;
    high *= BIT32;
    low = +low || 0; // slot count

    var slot = trunc(high / SEC_SLOT) + trunc(low / SEC_SLOT); // seconds within slot

    var second = high % SEC_SLOT + low % SEC_SLOT; // slot offset

    var offset = trunc(second / SEC_SLOT);

    if (offset) {
      slot += offset;
      second -= offset * SEC_SLOT;
    }

    return new Timestamp(second * 1000, 0, slot * YEAR_SLOT);
  }

  function getTimeT() {
    var ts = normalize(this);
    var time = Math.floor(ts.time / 1000);
    var year = ts.year;
    if (year) time += year * DAY_SLOT * SEC_DAY / YEAR_SLOT; // this may loose some bits over than 53 bit precision

    return time;
  }

  function toJSON() {
    return this.toString().replace(/0{1,6}Z$/, "Z");
  }

  function toString(format) {
    var ts = this;
    var dt = ts.toDate();
    var map = {
      H: H,
      L: L,
      M: M,
      N: N,
      S: S,
      Y: Y,
      a: a,
      b: b,
      d: d,
      e: e,
      m: m
    };
    return strftime(format || FMT_JSON);

    function strftime(format) {
      return format.replace(/%./g, function (match) {
        var m = match[1];
        var c = FMT_STRING[m];
        var f = map[m];
        return c ? strftime(c) : f ? f() : match;
      });
    }

    function Y() {
      var year = ts.getYear();

      if (year > 999999) {
        return "+" + year;
      } else if (year > 9999) {
        return "+" + pad(year, 6);
      } else if (year >= 0) {
        return pad(year, 4);
      } else if (year >= -999999) {
        return "-" + pad(-year, 6);
      } else {
        return year;
      }
    }

    function m() {
      return pad2(dt.getUTCMonth() + 1);
    }

    function d() {
      return pad2(dt.getUTCDate());
    }

    function e() {
      return padS(dt.getUTCDate());
    }

    function H() {
      return pad2(dt.getUTCHours());
    }

    function M() {
      return pad2(dt.getUTCMinutes());
    }

    function S() {
      return pad2(dt.getUTCSeconds());
    }

    function L() {
      return pad(dt.getUTCMilliseconds(), 3);
    }

    function N() {
      return pad(ts.getNano(), 9);
    }

    function a() {
      return FMT_DAY[dt.getUTCDay()];
    }

    function b() {
      return FMT_MONTH[dt.getUTCMonth()];
    }
  }

  function buildWriteInt64(pos0, pos1, pos2, pos3, posH, posL) {
    return writeInt64;

    function writeInt64(buffer, offset) {
      var ts = normalize(this);
      if (!buffer) buffer = new Array(8);
      checkRange(buffer, offset |= 0);
      var second = Math.floor(ts.time / 1000);
      var day = ts.year * (DAY_SLOT * SEC_DAY / YEAR_SLOT);
      var high = trunc(day / BIT32) + trunc(second / BIT32);
      var low = day % BIT32 + second % BIT32; // slot offset

      var slot = Math.floor(low / BIT32);

      if (slot) {
        high += slot;
        low -= slot * BIT32;
      }

      writeUint32(buffer, offset + posH, high);
      writeUint32(buffer, offset + posL, low);
      return buffer;
    }

    function writeUint32(buffer, offset, value) {
      buffer[offset + pos0] = value >> 24 & 255;
      buffer[offset + pos1] = value >> 16 & 255;
      buffer[offset + pos2] = value >> 8 & 255;
      buffer[offset + pos3] = value & 255;
    }
  }

  function buildFromInt64(pos0, pos1, pos2, pos3, posH, posL) {
    return fromInt64;

    function fromInt64(buffer, offset) {
      checkRange(buffer, offset |= 0);
      var high = readUint32(buffer, offset + posH);
      var low = readUint32(buffer, offset + posL);
      return fromTime(low, high);
    }

    function readUint32(buffer, offset) {
      return buffer[offset + pos0] * BIT24 + (buffer[offset + pos1] << 16 | buffer[offset + pos2] << 8 | buffer[offset + pos3]);
    }
  }

  function checkRange(buffer, offset) {
    var last = buffer && buffer.length;
    if (last == null) throw new TypeError("Invalid Buffer");
    if (last < offset + 8) throw new RangeError("Out of range");
  }

  function Math_trunc(x) {
    var n = x - x % 1;
    return n === 0 && (x < 0 || x === 0 && 1 / x !== 1 / 0) ? -0 : n;
  }

  function padS(v) {
    return (v > 9 ? "" : " ") + (v | 0);
  }

  function pad2(v) {
    return (v > 9 ? "" : "0") + (v | 0);
  }

  function pad(v, len) {
    return (ZERO9 + (v | 0)).substr(-len);
  }
}();

/***/ }),
/* 698 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const protons = __webpack_require__(24);
/* eslint-disable no-tabs */


const message = "\nmessage IpnsEntry {\n  enum ValidityType {\n\t\tEOL = 0; // setting an EOL says \"this record is valid until...\"\n\t}\n\n  required bytes value = 1;\n\trequired bytes signature = 2;\n\n\toptional ValidityType validityType = 3;\n\toptional bytes validity = 4;\n\n\toptional uint64 sequence = 5;\n\n\toptional uint64 ttl = 6;\n\n\t// in order for nodes to properly validate a record upon receipt, they need the public\n\t// key associated with it. For old RSA keys, its easiest if we just send this as part of\n\t// the record itself. For newer ed25519 keys, the public key can be embedded in the\n\t// peerID, making this field unnecessary.\n\toptional bytes pubKey = 7;\n}\n";
module.exports = protons(message).IpnsEntry;

/***/ }),
/* 699 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Convert a JavaScript date into an `RFC3339Nano` formatted
 * string.
 *
 * @param {Date} time
 * @returns {string}
 */

module.exports.toRFC3339 = time => {
  const year = time.getUTCFullYear();
  const month = String(time.getUTCMonth() + 1).padStart(2, '0');
  const day = String(time.getUTCDate()).padStart(2, '0');
  const hour = String(time.getUTCHours()).padStart(2, '0');
  const minute = String(time.getUTCMinutes()).padStart(2, '0');
  const seconds = String(time.getUTCSeconds()).padStart(2, '0');
  const milliseconds = time.getUTCMilliseconds();
  const nanoseconds = milliseconds * 1000 * 1000;
  return "".concat(year, "-").concat(month, "-").concat(day, "T").concat(hour, ":").concat(minute, ":").concat(seconds, ".").concat(nanoseconds, "Z");
};
/**
 * Parses a date string formatted as `RFC3339Nano` into a
 * JavaScript Date object.
 *
 * @param {string} time
 * @returns {Date}
 */


module.exports.parseRFC3339 = time => {
  const rfc3339Matcher = new RegExp( // 2006-01-02T
  '(\\d{4})-(\\d{2})-(\\d{2})T' + // 15:04:05
  '(\\d{2}):(\\d{2}):(\\d{2})' + // .999999999Z
  '\\.(\\d+)Z');
  const m = String(time).trim().match(rfc3339Matcher);

  if (!m) {
    throw new Error('Invalid format');
  }

  const year = parseInt(m[1], 10);
  const month = parseInt(m[2], 10) - 1;
  const date = parseInt(m[3], 10);
  const hour = parseInt(m[4], 10);
  const minute = parseInt(m[5], 10);
  const second = parseInt(m[6], 10);
  const millisecond = parseInt(m[7].slice(0, -6), 10);
  return new Date(Date.UTC(year, month, date, hour, minute, second, millisecond));
};

/***/ }),
/* 700 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.ERR_IPNS_EXPIRED_RECORD = 'ERR_IPNS_EXPIRED_RECORD';
exports.ERR_UNRECOGNIZED_VALIDITY = 'ERR_UNRECOGNIZED_VALIDITY';
exports.ERR_SIGNATURE_CREATION = 'ERR_SIGNATURE_CREATION';
exports.ERR_SIGNATURE_VERIFICATION = 'ERR_SIGNATURE_VERIFICATION';
exports.ERR_UNRECOGNIZED_FORMAT = 'ERR_UNRECOGNIZED_FORMAT';
exports.ERR_PEER_ID_FROM_PUBLIC_KEY = 'ERR_PEER_ID_FROM_PUBLIC_KEY';
exports.ERR_PUBLIC_KEY_FROM_ID = 'ERR_PUBLIC_KEY_FROM_ID';
exports.ERR_UNDEFINED_PARAMETER = 'ERR_UNDEFINED_PARAMETER';

/***/ }),
/* 701 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const ipns = __webpack_require__(84);

const crypto = __webpack_require__(28);

const PeerId = __webpack_require__(9);

const errcode = __webpack_require__(2);

const debug = __webpack_require__(1);

const log = debug('ipfs:ipns:republisher');
log.error = debug('ipfs:ipns:republisher:error');
const minute = 60 * 1000;
const hour = 60 * minute;
const defaultBroadcastInterval = 4 * hour;
const defaultRecordLifetime = 24 * hour;

class IpnsRepublisher {
  constructor(publisher, datastore, peerInfo, keychain, options) {
    this._publisher = publisher;
    this._datastore = datastore;
    this._peerInfo = peerInfo;
    this._keychain = keychain;
    this._options = options || {};
    this._republishHandle = null;
  }

  async start() {
    // eslint-disable-line require-await
    if (this._republishHandle) {
      throw errcode(new Error('republisher is already running'), 'ERR_REPUBLISH_ALREADY_RUNNING');
    } // TODO: this handler should be isolated in another module


    const republishHandle = {
      _task: null,
      _inflightTask: null,
      _timeoutId: null,
      runPeriodically: period => {
        republishHandle._timeoutId = setTimeout(async () => {
          republishHandle._timeoutId = null;

          try {
            republishHandle._inflightTask = republishHandle._task();
            await republishHandle._inflightTask; // Schedule next

            if (republishHandle._task) {
              republishHandle.runPeriodically(period);
            }
          } catch (err) {
            log.error(err);
          }
        }, period());
      },
      cancel: async () => {
        // do not run again
        clearTimeout(republishHandle._timeoutId);
        republishHandle._task = null; // wait for the currently in flight task to complete

        await republishHandle._inflightTask;
      }
    };
    const {
      privKey
    } = this._peerInfo.id;
    const {
      pass
    } = this._options;
    let firstRun = true;

    republishHandle._task = () => this._republishEntries(privKey, pass);

    republishHandle.runPeriodically(() => {
      if (firstRun) {
        firstRun = false;
        return this._options.initialBroadcastInterval || minute;
      }

      return this._options.broadcastInterval || defaultBroadcastInterval;
    });
    this._republishHandle = republishHandle;
  }

  async stop() {
    const republishHandle = this._republishHandle;

    if (!republishHandle) {
      throw errcode(new Error('republisher is not running'), 'ERR_REPUBLISH_NOT_RUNNING');
    }

    this._republishHandle = null;
    await republishHandle.cancel();
  }

  async _republishEntries(privateKey, pass) {
    // TODO: Should use list of published entries.
    // We can't currently *do* that because go uses this method for now.
    try {
      await this._republishEntry(privateKey);
    } catch (err) {
      const errMsg = 'cannot republish entry for the node\'s private key';
      log.error(errMsg);
      return;
    } // keychain needs pass to get the cryptographic keys


    if (pass) {
      try {
        const keys = await this._keychain.listKeys();

        for (const key in keys) {
          const pem = await this._keychain.exportKey(key.name, pass);
          const privKey = await crypto.keys.import(pem, pass);
          await this._republishEntry(privKey);
        }
      } catch (err) {
        log.error(err);
      }
    }
  }

  async _republishEntry(privateKey) {
    if (!privateKey || !privateKey.bytes) {
      throw errcode(new Error('invalid private key'), 'ERR_INVALID_PRIVATE_KEY');
    }

    try {
      const peerId = await PeerId.createFromPrivKey(privateKey.bytes);
      const value = await this._getPreviousValue(peerId);
      await this._publisher.publishWithEOL(privateKey, value, defaultRecordLifetime);
    } catch (err) {
      if (err.code === 'ERR_NO_ENTRY_FOUND') {
        return;
      }

      throw err;
    }
  }

  async _getPreviousValue(peerId) {
    if (!PeerId.isPeerId(peerId)) {
      throw errcode(new Error('invalid peer ID'), 'ERR_INVALID_PEER_ID');
    }

    try {
      const dsVal = await this._datastore.get(ipns.getLocalKey(peerId.id));

      if (!Buffer.isBuffer(dsVal)) {
        throw errcode(new Error("found ipns record that we couldn't process"), 'ERR_INVALID_IPNS_RECORD');
      } // unmarshal data


      try {
        const record = ipns.unmarshal(dsVal);
        return record.value;
      } catch (err) {
        log.error(err);
        throw errcode(new Error('found ipns record that we couldn\'t convert to a value'), 'ERR_INVALID_IPNS_RECORD');
      }
    } catch (err) {
      // error handling
      // no need to republish
      if (err && err.notFound) {
        throw errcode(new Error("no previous entry for record with id: ".concat(peerId.id)), 'ERR_NO_ENTRY_FOUND');
      }

      throw err;
    }
  }

}

exports = module.exports = IpnsRepublisher;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 702 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const ipns = __webpack_require__(84);

const crypto = __webpack_require__(28);

const PeerId = __webpack_require__(9);

const errcode = __webpack_require__(2);

const debug = __webpack_require__(1);

const log = debug('ipfs:ipns:resolver');
log.error = debug('ipfs:ipns:resolver:error');

const {
  Errors
} = __webpack_require__(14);

const ERR_NOT_FOUND = Errors.notFoundError().code;
const defaultMaximumRecursiveDepth = 32;

class IpnsResolver {
  constructor(routing) {
    this._routing = routing;
  }

  async resolve(name, options) {
    options = options || {};

    if (typeof name !== 'string') {
      throw errcode(new Error('invalid name'), 'ERR_INVALID_NAME');
    }

    options = options || {};
    const recursive = options.recursive && options.recursive.toString() === 'true';
    const nameSegments = name.split('/');

    if (nameSegments.length !== 3 || nameSegments[0] !== '') {
      throw errcode(new Error('invalid name'), 'ERR_INVALID_NAME');
    }

    const key = nameSegments[2]; // Define a maximum depth if recursive option enabled

    let depth;

    if (recursive) {
      depth = defaultMaximumRecursiveDepth;
    }

    const res = await this.resolver(key, depth);
    log("".concat(name, " was locally resolved correctly"));
    return res;
  } // Recursive resolver according to the specified depth


  async resolver(name, depth) {
    // Exceeded recursive maximum depth
    if (depth === 0) {
      const errMsg = "could not resolve name (recursion limit of ".concat(defaultMaximumRecursiveDepth, " exceeded)");
      log.error(errMsg);
      throw errcode(new Error(errMsg), 'ERR_RESOLVE_RECURSION_LIMIT');
    }

    const res = await this._resolveName(name);
    const nameSegments = res.split('/'); // If obtained a ipfs cid or recursive option is disabled

    if (nameSegments[1] === 'ipfs' || !depth) {
      return res;
    } // continue recursively until depth equals 0


    return this.resolver(nameSegments[2], depth - 1);
  } // resolve ipns entries from the provided routing


  async _resolveName(name) {
    const peerId = PeerId.createFromCID(name);
    const {
      routingKey
    } = ipns.getIdKeys(peerId.toBytes());
    let record;

    try {
      record = await this._routing.get(routingKey.toBuffer());
    } catch (err) {
      log.error(err);

      if (err.code === ERR_NOT_FOUND) {
        throw errcode(new Error("record requested for ".concat(name, " was not found in the network")), 'ERR_NO_RECORD_FOUND');
      }

      throw errcode(new Error("unexpected error getting the ipns record ".concat(peerId.id)), 'ERR_UNEXPECTED_ERROR_GETTING_RECORD');
    } // IPNS entry


    let ipnsEntry;

    try {
      ipnsEntry = ipns.unmarshal(record);
    } catch (err) {
      log.error(err);
      throw errcode(new Error('found ipns record that we couldn\'t convert to a value'), 'ERR_INVALID_RECORD_RECEIVED');
    } // if the record has a public key validate it


    if (ipnsEntry.pubKey) {
      return this._validateRecord(peerId, ipnsEntry);
    } // Otherwise, try to get the public key from routing


    let pubKey;

    try {
      pubKey = await this._routing.get(routingKey.toBuffer());
    } catch (err) {
      log.error(err);

      if (err.code === ERR_NOT_FOUND) {
        throw errcode(new Error("public key requested for ".concat(name, " was not found in the network")), 'ERR_NO_RECORD_FOUND');
      }

      throw errcode(new Error("unexpected error getting the public key for the ipns record ".concat(peerId.id)), 'ERR_UNEXPECTED_ERROR_GETTING_PUB_KEY');
    }

    try {
      // Insert it into the peer id, in order to be validated by IPNS validator
      peerId.pubKey = crypto.keys.unmarshalPublicKey(pubKey);
    } catch (err) {
      log.error(err);
      throw errcode(new Error('found public key record that we couldn\'t convert to a value'), 'ERR_INVALID_PUB_KEY_RECEIVED');
    }

    return this._validateRecord(peerId, ipnsEntry);
  } // validate a resolved record


  async _validateRecord(peerId, ipnsEntry) {
    const pubKey = await ipns.extractPublicKey(peerId, ipnsEntry); // IPNS entry validation

    await ipns.validate(pubKey, ipnsEntry);
    return ipnsEntry.value.toString();
  }

}

exports = module.exports = IpnsResolver;

/***/ }),
/* 703 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const protons = __webpack_require__(24);

const assert = __webpack_require__(13);

const pb = protons(__webpack_require__(704)).Record;

const utils = __webpack_require__(705);

class Record {
  /**
   * @param {Buffer} [key]
   * @param {Buffer} [value]
   * @param {Date} [recvtime]
   */
  constructor(key, value, recvtime) {
    if (key) {
      assert(Buffer.isBuffer(key), 'key must be a Buffer');
    }

    if (value) {
      assert(Buffer.isBuffer(value), 'value must be a buffer');
    }

    this.key = key;
    this.value = value;
    this.timeReceived = recvtime;
  }
  /**
   * @returns {Buffer}
   */


  serialize() {
    return pb.encode(this.prepareSerialize());
  }
  /**
   * Return the object format ready to be given to the protobuf library.
   *
   * @returns {Object}
   */


  prepareSerialize() {
    return {
      key: this.key,
      value: this.value,
      timeReceived: this.timeReceived && utils.toRFC3339(this.timeReceived)
    };
  }
  /**
   * Decode a protobuf encoded record.
   *
   * @param {Buffer} raw
   * @returns {Record}
   */


  static deserialize(raw) {
    const dec = pb.decode(raw);
    return Record.fromDeserialized(dec);
  }
  /**
   * Create a record from the raw object returned from the protobuf library.
   *
   * @param {Object} obj
   * @returns {Record}
   */


  static fromDeserialized(obj) {
    let recvtime;

    if (obj.timeReceived) {
      recvtime = utils.parseRFC3339(obj.timeReceived);
    }

    const rec = new Record(obj.key, obj.value, recvtime);
    return rec;
  }

}

module.exports = Record;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 704 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = "// Record represents a dht record that contains a value\n// for a key value pair\nmessage Record {\n  // The key that references this record\n  bytes key = 1;\n\n  // The actual value this record is storing\n  bytes value = 2;\n\n  // Note: These fields were removed from the Record message\n  // hash of the authors public key\n  // optional bytes author = 3;\n  // A PKI signature for the key+value+author\n  // optional bytes signature = 4;\n\n  // Time the record was received, set by receiver\n  optional string timeReceived = 5;\n}";

/***/ }),
/* 705 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Convert a JavaScript date into an `RFC3339Nano` formatted
 * string.
 *
 * @param {Date} time
 * @returns {string}
 */

module.exports.toRFC3339 = time => {
  const year = time.getUTCFullYear();
  const month = String(time.getUTCMonth() + 1).padStart(2, '0');
  const day = String(time.getUTCDate()).padStart(2, '0');
  const hour = String(time.getUTCHours()).padStart(2, '0');
  const minute = String(time.getUTCMinutes()).padStart(2, '0');
  const seconds = String(time.getUTCSeconds()).padStart(2, '0');
  const milliseconds = time.getUTCMilliseconds();
  const nanoseconds = milliseconds * 1000 * 1000;
  return "".concat(year, "-").concat(month, "-").concat(day, "T").concat(hour, ":").concat(minute, ":").concat(seconds, ".").concat(nanoseconds, "Z");
};
/**
 * Parses a date string formatted as `RFC3339Nano` into a
 * JavaScript Date object.
 *
 * @param {string} time
 * @returns {Date}
 */


module.exports.parseRFC3339 = time => {
  const rfc3339Matcher = new RegExp( // 2006-01-02T
  '(\\d{4})-(\\d{2})-(\\d{2})T' + // 15:04:05
  '(\\d{2}):(\\d{2}):(\\d{2})' + // .999999999Z
  '\\.(\\d+)Z');
  const m = String(time).trim().match(rfc3339Matcher);

  if (!m) {
    throw new Error('Invalid format');
  }

  const year = parseInt(m[1], 10);
  const month = parseInt(m[2], 10) - 1;
  const date = parseInt(m[3], 10);
  const hour = parseInt(m[4], 10);
  const minute = parseInt(m[5], 10);
  const second = parseInt(m[6], 10);
  const millisecond = parseInt(m[7].slice(0, -6), 10);
  return new Date(Date.UTC(year, month, date, hour, minute, second, millisecond));
};

/***/ }),
/* 706 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const bsplit = __webpack_require__(310);

const errcode = __webpack_require__(2);
/**
 * Checks a record and ensures it is still valid.
 * It runs the needed validators.
 * If verification fails the returned Promise will reject with the error.
 *
 * @param {Object} validators
 * @param {Record} record
 * @returns {Promise}
 */


const verifyRecord = (validators, record) => {
  const key = record.key;
  const parts = bsplit(key, Buffer.from('/'));

  if (parts.length < 3) {
    // No validator available
    return;
  }

  const validator = validators[parts[1].toString()];

  if (!validator) {
    const errMsg = 'Invalid record keytype';
    throw errcode(new Error(errMsg), 'ERR_INVALID_RECORD_KEY_TYPE');
  }

  return validator.func(key, record.value);
};

module.exports = {
  verifyRecord: verifyRecord,
  validators: __webpack_require__(708)
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 707 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function bufferIndexOf(buf, search, offset) {
  offset = offset || 0;
  var m = 0;
  var s = -1;

  for (var i = offset; i < buf.length; ++i) {
    if (buf[i] == search[m]) {
      if (s == -1) s = i;
      ++m;
      if (m == search.length) break;
    } else {
      s = -1;
      m = 0;
    }
  }

  if (s > -1 && buf.length - s < search.length) return -1;
  return s;
};

/***/ }),
/* 708 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  pk: __webpack_require__(709)
};

/***/ }),
/* 709 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const multihashing = __webpack_require__(22);

const errcode = __webpack_require__(2);
/**
 * Validator for publick key records.
 * Verifies that the passed in record value is the PublicKey
 * that matches the passed in key.
 * If validation fails the returned Promise will reject with the error.
 *
 * @param {Buffer} key - A valid key is of the form `'/pk/<keymultihash>'`
 * @param {Buffer} publicKey - The public key to validate against (protobuf encoded).
 * @returns {Promise}
 */


const validatePublicKeyRecord = async (key, publicKey) => {
  if (!Buffer.isBuffer(key)) {
    throw errcode(new Error('"key" must be a Buffer'), 'ERR_INVALID_RECORD_KEY_NOT_BUFFER');
  }

  if (key.length < 5) {
    throw errcode(new Error('invalid public key record'), 'ERR_INVALID_RECORD_KEY_TOO_SHORT');
  }

  const prefix = key.slice(0, 4).toString();

  if (prefix !== '/pk/') {
    throw errcode(new Error('key was not prefixed with /pk/'), 'ERR_INVALID_RECORD_KEY_BAD_PREFIX');
  }

  const keyhash = key.slice(4);
  const publicKeyHash = await multihashing(publicKey, 'sha2-256');

  if (!keyhash.equals(publicKeyHash)) {
    throw errcode(new Error('public key does not match passed in key'), 'ERR_INVALID_RECORD_HASH_MISMATCH');
  }
};

module.exports = {
  func: validatePublicKeyRecord,
  sign: false
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 710 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const bsplit = __webpack_require__(310);

const errcode = __webpack_require__(2);
/**
 * Select the best record out of the given records.
 *
 * @param {Object} selectors
 * @param {Buffer} k
 * @param {Array<Buffer>} records
 * @returns {number} - The index of the best record.
 */


const bestRecord = (selectors, k, records) => {
  if (records.length === 0) {
    const errMsg = 'No records given';
    throw errcode(new Error(errMsg), 'ERR_NO_RECORDS_RECEIVED');
  }

  const parts = bsplit(k, Buffer.from('/'));

  if (parts.length < 3) {
    const errMsg = 'Record key does not have a selector function';
    throw errcode(new Error(errMsg), 'ERR_NO_SELECTOR_FUNCTION_FOR_RECORD_KEY');
  }

  const selector = selectors[parts[1].toString()];

  if (!selector) {
    const errMsg = "Unrecognized key prefix: ".concat(parts[1]);
    throw errcode(new Error(errMsg), 'ERR_UNRECOGNIZED_KEY_PREFIX');
  }

  return selector(k, records);
};

module.exports = {
  bestRecord: bestRecord,
  selectors: __webpack_require__(711)
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 711 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  pk: __webpack_require__(712)
};

/***/ }),
/* 712 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Best record selector, for public key records.
 * Simply returns the first record, as all valid public key
 * records are equal.
 *
 * @param {Buffer} k
 * @param {Array<Buffer>} records
 * @returns {number}
 */

const publicKeySelector = (k, records) => {
  return 0;
};

module.exports = publicKeySelector;

/***/ }),
/* 713 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = () => {};

/***/ }),
/* 714 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = ({
  libp2p
}) => {
  return () => Boolean(libp2p && libp2p.isStarted());
};

/***/ }),
/* 715 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = ({
  keychain
}) => {
  return (name, password) => keychain.exportKey(name, password);
};

/***/ }),
/* 716 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = ({
  keychain
}) => {
  return (name, options) => {
    options = options || {};
    return keychain.createKey(name, options.type, options.size);
  };
};

/***/ }),
/* 717 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = ({
  keychain
}) => {
  return (name, pem, password) => keychain.importKey(name, pem, password);
};

/***/ }),
/* 718 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = ({
  keychain
}) => {
  return name => keychain.findKeyByName(name);
};

/***/ }),
/* 719 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = ({
  keychain
}) => {
  return () => keychain.listKeys();
};

/***/ }),
/* 720 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = ({
  keychain
}) => {
  return async (oldName, newName) => {
    const key = await keychain.renameKey(oldName, newName);
    return {
      was: oldName,
      now: key.name,
      id: key.id,
      overwrite: false
    };
  };
};

/***/ }),
/* 721 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = ({
  keychain
}) => {
  return name => keychain.removeKey(name);
};

/***/ }),
/* 722 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const get = __webpack_require__(168);

const mergeOptions = __webpack_require__(27);

const errCode = __webpack_require__(2);

const PubsubRouters = __webpack_require__(723);

module.exports = ({
  options,
  peerInfo,
  repo,
  print,
  config
}) => {
  options = options || {};
  config = config || {};
  const {
    datastore
  } = repo;
  const libp2pOptions = getLibp2pOptions({
    options,
    config,
    datastore,
    peerInfo
  });

  if (typeof options.libp2p === 'function') {
    return options.libp2p({
      libp2pOptions,
      options,
      config,
      datastore,
      peerInfo
    });
  } // Required inline to reduce startup time


  const Libp2p = __webpack_require__(745);

  return new Libp2p(mergeOptions(libp2pOptions, get(options, 'libp2p', {})));
};

function getLibp2pOptions({
  options,
  config,
  datastore,
  peerInfo
}) {
  const getPubsubRouter = () => {
    const router = get(config, 'Pubsub.Router') || 'gossipsub';

    if (!PubsubRouters[router]) {
      throw errCode(new Error("Router unavailable. Configure libp2p.modules.pubsub to use the ".concat(router, " router.")), 'ERR_NOT_SUPPORTED');
    }

    return PubsubRouters[router];
  };

  const libp2pDefaults = {
    datastore,
    peerInfo,
    modules: {}
  };
  const bootstrapList = get(options, 'config.Bootstrap', get(config, 'Bootstrap', []));
  const libp2pOptions = {
    modules: {
      pubsub: getPubsubRouter()
    },
    config: {
      peerDiscovery: {
        mdns: {
          enabled: get(options, 'config.Discovery.MDNS.Enabled', get(config, 'Discovery.MDNS.Enabled', true))
        },
        webRTCStar: {
          enabled: get(options, 'config.Discovery.webRTCStar.Enabled', get(config, 'Discovery.webRTCStar.Enabled', true))
        },
        bootstrap: {
          list: bootstrapList
        }
      },
      relay: {
        enabled: get(options, 'relay.enabled', get(config, 'relay.enabled', true)),
        hop: {
          enabled: get(options, 'relay.hop.enabled', get(config, 'relay.hop.enabled', false)),
          active: get(options, 'relay.hop.active', get(config, 'relay.hop.active', false))
        }
      },
      dht: {
        kBucketSize: get(options, 'dht.kBucketSize', 20)
      },
      pubsub: {
        enabled: get(options, 'config.Pubsub.Enabled', get(config, 'Pubsub.Enabled', true))
      }
    },
    connectionManager: get(options, 'connectionManager', {
      maxConnections: get(options, 'config.Swarm.ConnMgr.HighWater', get(config, 'Swarm.ConnMgr.HighWater')),
      minConnections: get(options, 'config.Swarm.ConnMgr.LowWater', get(config, 'Swarm.ConnMgr.LowWater'))
    })
  }; // Required inline to reduce startup time
  // Note: libp2p-nodejs gets replaced by libp2p-browser when webpacked/browserified

  const getEnvLibp2pOptions = __webpack_require__(832); // Merge defaults with Node.js/browser/other environments options and configuration


  const libp2pConfig = mergeOptions(libp2pDefaults, getEnvLibp2pOptions(), libp2pOptions);

  if (bootstrapList.length > 0) {
    libp2pConfig.modules.peerDiscovery.push(__webpack_require__(955));
  }

  return libp2pConfig;
}

/***/ }),
/* 723 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  gossipsub: __webpack_require__(312)
};

/***/ }),
/* 724 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const assert = __webpack_require__(13);

const withIs = __webpack_require__(21);

const Topology = __webpack_require__(313);

class MulticodecTopology extends Topology {
  /**
   * @param {Object} props
   * @param {number} props.min minimum needed connections (default: 0)
   * @param {number} props.max maximum needed connections (default: Infinity)
   * @param {Array<string>} props.multicodecs protocol multicodecs
   * @param {Object} props.handlers
   * @param {function} props.handlers.onConnect protocol "onConnect" handler
   * @param {function} props.handlers.onDisconnect protocol "onDisconnect" handler
   * @constructor
   */
  constructor({
    min,
    max,
    multicodecs,
    handlers
  }) {
    super({
      min,
      max,
      handlers
    });
    assert(multicodecs, 'one or more multicodec should be provided');
    assert(handlers, 'the handlers should be provided');
    assert(handlers.onConnect && typeof handlers.onConnect === 'function', 'the \'onConnect\' handler must be provided');
    assert(handlers.onDisconnect && typeof handlers.onDisconnect === 'function', 'the \'onDisconnect\' handler must be provided');
    this.multicodecs = Array.isArray(multicodecs) ? multicodecs : [multicodecs];
    this._registrar = undefined;
    this._onProtocolChange = this._onProtocolChange.bind(this);
  }

  set registrar(registrar) {
    this._registrar = registrar;

    this._registrar.peerStore.on('change:protocols', this._onProtocolChange); // Update topology peers


    this._updatePeers(this._registrar.peerStore.peers.values());
  }
  /**
   * Update topology.
   * @param {Array<PeerInfo>} peerInfoIterable
   * @returns {void}
   */


  _updatePeers(peerInfoIterable) {
    for (const peerInfo of peerInfoIterable) {
      if (this.multicodecs.filter(multicodec => peerInfo.protocols.has(multicodec)).length) {
        // Add the peer regardless of whether or not there is currently a connection
        this.peers.set(peerInfo.id.toB58String(), peerInfo); // If there is a connection, call _onConnect

        const connection = this._registrar.getConnection(peerInfo);

        connection && this._onConnect(peerInfo, connection);
      } else {
        // Remove any peers we might be tracking that are no longer of value to us
        this.peers.delete(peerInfo.id.toB58String());
      }
    }
  }
  /**
   * Check if a new peer support the multicodecs for this topology.
   * @param {Object} props
   * @param {PeerInfo} props.peerInfo
   * @param {Array<string>} props.protocols
   */


  _onProtocolChange({
    peerInfo,
    protocols
  }) {
    const existingPeer = this.peers.get(peerInfo.id.toB58String());
    const hasProtocol = protocols.filter(protocol => this.multicodecs.includes(protocol)); // Not supporting the protocol anymore?

    if (existingPeer && hasProtocol.length === 0) {
      this._onDisconnect(peerInfo);
    } // New to protocol support


    for (const protocol of protocols) {
      if (this.multicodecs.includes(protocol)) {
        this._updatePeers([peerInfo]);

        return;
      }
    }
  }

}

module.exports = withIs(MulticodecTopology, {
  className: 'MulticodecTopology',
  symbolName: '@libp2p/js-interfaces/topology/multicodec-topology'
});

/***/ }),
/* 725 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = "\nmessage RPC {\n  repeated SubOpts subscriptions = 1;\n  repeated Message msgs = 2;\n\n  message SubOpts {\n    optional bool subscribe = 1; // subscribe or unsubcribe\n    optional string topicID = 2;\n  }\n\n  message Message {\n    optional bytes from = 1;\n    optional bytes data = 2;\n    optional bytes seqno = 3;\n    repeated string topicIDs = 4;\n    optional bytes signature = 5;\n    optional bytes key = 6;\n  }\n}";

/***/ }),
/* 726 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = "\n// topicCID = cid(merkledag_protobuf(topicDescriptor)); (not the topic.name)\nmessage TopicDescriptor {\n  optional string name = 1;\n  optional AuthOpts auth = 2;\n  optional EncOpts enc = 2;\n\n  message AuthOpts {\n    optional AuthMode mode = 1;\n    repeated bytes keys = 2; // root keys to trust\n\n    enum AuthMode {\n      NONE = 0; // no authentication, anyone can publish\n      KEY = 1; // only messages signed by keys in the topic descriptor are accepted\n      WOT = 2; // web of trust, certificates can allow publisher set to grow\n    }\n  }\n\n  message EncOpts {\n    optional EncMode mode = 1;\n    repeated bytes keyHashes = 2; // the hashes of the shared keys used (salted)\n\n    enum EncMode {\n      NONE = 0; // no encryption, anyone can read\n      SHAREDKEY = 1; // messages are encrypted with shared key\n      WOT = 2; // web of trust, certificates can allow publisher set to grow\n    }\n  }\n}";

/***/ }),
/* 727 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const EventEmitter = __webpack_require__(11);

const lp = __webpack_require__(26);

const pushable = __webpack_require__(112);

const pipe = __webpack_require__(23);

const {
  RPC
} = __webpack_require__(169);
/**
 * The known state of a connected peer.
 */


class Peer extends EventEmitter {
  /**
   * @param {PeerInfo} info
   */
  constructor(info) {
    super();
    /**
     * @type {PeerInfo}
     */

    this.info = info;
    /**
     * @type {Connection}
     */

    this.conn = null;
    /**
     * @type {Set}
     */

    this.topics = new Set();
    /**
     * @type {Pushable}
     */

    this.stream = null;
    this._references = 0;
  }
  /**
   * Is the peer connected currently?
   *
   * @type {boolean}
   */


  get isConnected() {
    return Boolean(this.conn);
  }
  /**
   * Do we have a connection to write on?
   *
   * @type {boolean}
   */


  get isWritable() {
    return Boolean(this.stream);
  }
  /**
   * Send a message to this peer.
   * Throws if there is no `stream` to write to available.
   *
   * @param {Buffer} msg
   * @returns {undefined}
   */


  write(msg) {
    if (!this.isWritable) {
      const id = this.info.id.toB58String();
      throw new Error('No writable connection to ' + id);
    }

    this.stream.push(msg);
  }
  /**
   * Attach the peer to a connection and setup a write stream
   *
   * @param {Connection} conn
   * @returns {void}
   */


  attachConnection(conn) {
    this.conn = conn;
    this.stream = pushable({
      onEnd: () => {
        this.conn = null;
        this.stream = null;
        this.emit('close');
      }
    });
    pipe(this.stream, lp.encode(), conn);
    this.emit('connection');
  }

  _sendRawSubscriptions(topics, subscribe) {
    if (topics.size === 0) {
      return;
    }

    const subs = [];
    topics.forEach(topic => {
      subs.push({
        subscribe: subscribe,
        topicID: topic
      });
    });
    this.write(RPC.encode({
      subscriptions: subs
    }));
  }
  /**
   * Send the given subscriptions to this peer.
   * @param {Set|Array} topics
   * @returns {undefined}
   */


  sendSubscriptions(topics) {
    this._sendRawSubscriptions(topics, true);
  }
  /**
   * Send the given unsubscriptions to this peer.
   * @param {Set|Array} topics
   * @returns {undefined}
   */


  sendUnsubscriptions(topics) {
    this._sendRawSubscriptions(topics, false);
  }
  /**
   * Send messages to this peer.
   *
   * @param {Array<any>} msgs
   * @returns {undefined}
   */


  sendMessages(msgs) {
    this.write(RPC.encode({
      msgs: msgs
    }));
  }
  /**
   * Bulk process subscription updates.
   *
   * @param {Array} changes
   * @returns {undefined}
   */


  updateSubscriptions(changes) {
    changes.forEach(subopt => {
      if (subopt.subscribe) {
        this.topics.add(subopt.topicID);
      } else {
        this.topics.delete(subopt.topicID);
      }
    });
  }
  /**
   * Closes the open connection to peer
   * @returns {void}
   */


  close() {
    // Force removal of peer
    this._references = 1; // End the pushable

    if (this.stream) {
      this.stream.end();
    }

    this.conn = null;
    this.stream = null;
    this.emit('close');
  }

}

module.exports = Peer;

/***/ }),
/* 728 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const {
  Buffer
} = __webpack_require__(0);

const BufferList = __webpack_require__(30);

const varintEncode = __webpack_require__(314);

const MIN_POOL_SIZE = 8; // Varint.encode(Number.MAX_SAFE_INTEGER).length

const DEFAULT_POOL_SIZE = 10 * 1024;

function encode(options) {
  options = options || {};
  const poolSize = Math.max(options.poolSize || DEFAULT_POOL_SIZE, options.minPoolSize || MIN_POOL_SIZE);
  const encodeLength = options.lengthEncoder || varintEncode;
  return source => _wrapAsyncGenerator(function* () {
    let pool = Buffer.alloc(poolSize);
    let poolOffset = 0;
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;

    var _iteratorError;

    try {
      for (var _iterator = _asyncIterator(source), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
        const chunk = _value;
        encodeLength(chunk.length, pool, poolOffset);
        const encodedLength = pool.slice(poolOffset, poolOffset + encodeLength.bytes);
        poolOffset += encodeLength.bytes;

        if (pool.length - poolOffset < MIN_POOL_SIZE) {
          pool = Buffer.alloc(poolSize);
          poolOffset = 0;
        }

        yield new BufferList().append(encodedLength).append(chunk); // yield Buffer.concat([encodedLength, chunk])
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          yield _awaitAsyncGenerator(_iterator.return());
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  })();
}

encode.single = (chunk, options) => {
  options = options || {};
  const encodeLength = options.lengthEncoder || varintEncode;
  return new BufferList([encodeLength(chunk.length), chunk]);
};

module.exports = encode;
module.exports.MIN_POOL_SIZE = MIN_POOL_SIZE;
module.exports.DEFAULT_POOL_SIZE = DEFAULT_POOL_SIZE;

/***/ }),
/* 729 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const BufferList = __webpack_require__(30);

const varintDecode = __webpack_require__(315); // Maximum length of the length section of the message


const MAX_LENGTH_LENGTH = 8; // Varint.encode(Number.MAX_SAFE_INTEGER).length
// Maximum length of the data section of the message

const MAX_DATA_LENGTH = 1024 * 1024 * 4;
const Empty = Buffer.alloc(0);
const ReadModes = {
  LENGTH: 'readLength',
  DATA: 'readData'
};
const ReadHandlers = {
  [ReadModes.LENGTH]: (chunk, buffer, state, options) => {
    // console.log(ReadModes.LENGTH, chunk.length)
    buffer = buffer.append(chunk);
    let dataLength;

    try {
      dataLength = options.lengthDecoder(buffer);
    } catch (err) {
      if (buffer.length > options.maxLengthLength) {
        throw Object.assign(err, {
          message: 'message length too long',
          code: 'ERR_MSG_LENGTH_TOO_LONG'
        });
      }

      if (err instanceof RangeError) {
        return {
          mode: ReadModes.LENGTH,
          buffer
        };
      }

      throw err;
    }

    if (dataLength > options.maxDataLength) {
      throw Object.assign(new Error('message data too long'), {
        code: 'ERR_MSG_DATA_TOO_LONG'
      });
    }

    chunk = buffer.shallowSlice(options.lengthDecoder.bytes);
    buffer = new BufferList();
    if (options.onLength) options.onLength(dataLength);

    if (dataLength <= 0) {
      if (options.onData) options.onData(Empty);
      return {
        mode: ReadModes.LENGTH,
        chunk,
        buffer,
        data: Empty
      };
    }

    return {
      mode: ReadModes.DATA,
      chunk,
      buffer,
      state: {
        dataLength
      }
    };
  },
  [ReadModes.DATA]: (chunk, buffer, state, options) => {
    // console.log(ReadModes.DATA, chunk.length)
    buffer = buffer.append(chunk);

    if (buffer.length < state.dataLength) {
      return {
        mode: ReadModes.DATA,
        buffer,
        state
      };
    }

    const {
      dataLength
    } = state;
    const data = buffer.shallowSlice(0, dataLength);
    chunk = buffer.length > dataLength ? buffer.shallowSlice(dataLength) : null;
    buffer = new BufferList();
    if (options.onData) options.onData(data);
    return {
      mode: ReadModes.LENGTH,
      chunk,
      buffer,
      data
    };
  }
};

function decode(options) {
  options = options || {};
  options.lengthDecoder = options.lengthDecoder || varintDecode;
  options.maxLengthLength = options.maxLengthLength || MAX_LENGTH_LENGTH;
  options.maxDataLength = options.maxDataLength || MAX_DATA_LENGTH;
  return source => _wrapAsyncGenerator(function* () {
    let buffer = new BufferList();
    let mode = ReadModes.LENGTH; // current parsing mode

    let state; // accumulated state for the current mode

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;

    var _iteratorError;

    try {
      for (var _iterator = _asyncIterator(source), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
        let chunk = _value;

        // Each chunk may contain multiple messages - keep calling handler for the
        // current parsing mode until all handlers have consumed the chunk.
        while (chunk) {
          const result = ReadHandlers[mode](chunk, buffer, state, options);
          ({
            mode,
            chunk,
            buffer,
            state
          } = result);
          if (result.data) yield result.data;
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          yield _awaitAsyncGenerator(_iterator.return());
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    if (buffer.length) {
      throw Object.assign(new Error('unexpected end of input'), {
        code: 'ERR_UNEXPECTED_EOF'
      });
    }
  })();
}

decode.fromReader = (reader, options) => {
  options = options || {};
  let byteLength = 1; // Read single byte chunks until the length is known

  const varByteSource = {
    [Symbol.asyncIterator]() {
      return this;
    },

    next: async () => {
      try {
        return await reader.next(byteLength);
      } catch (err) {
        if (err.code === 'ERR_UNDER_READ') {
          return {
            done: true,
            value: null
          };
        }

        throw err;
      } finally {
        // Reset the byteLength so we continue to check for varints
        byteLength = 1;
      }
    }
  }; // Once the length has been parsed, read chunk for that length

  options.onLength = l => {
    byteLength = l;
  };

  return decode(options)(varByteSource);
};

module.exports = decode;
module.exports.MAX_LENGTH_LENGTH = MAX_LENGTH_LENGTH;
module.exports.MAX_DATA_LENGTH = MAX_DATA_LENGTH;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 730 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const {
  Buffer
} = __webpack_require__(0);

const int32BEEncode = (value, target, offset) => {
  target = target || Buffer.allocUnsafe(4);
  target.writeInt32BE(value, offset);
  return target;
};

int32BEEncode.bytes = 4; // Always because fixed length

module.exports = int32BEEncode;

/***/ }),
/* 731 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const int32BEDecode = data => {
  if (data.length < 4) throw RangeError('Could not decode int32BE');
  return data.readInt32BE(0);
};

int32BEDecode.bytes = 4; // Always because fixed length

module.exports = int32BEDecode;

/***/ }),
/* 732 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = class FixedFIFO {
  constructor(hwm) {
    if (!(hwm > 0) || (hwm - 1 & hwm) !== 0) throw new Error('Max size for a FixedFIFO should be a power of two');
    this.buffer = new Array(hwm);
    this.mask = hwm - 1;
    this.top = 0;
    this.btm = 0;
    this.next = null;
  }

  push(data) {
    if (this.buffer[this.top] !== undefined) return false;
    this.buffer[this.top] = data;
    this.top = this.top + 1 & this.mask;
    return true;
  }

  shift() {
    const last = this.buffer[this.btm];
    if (last === undefined) return undefined;
    this.buffer[this.btm] = undefined;
    this.btm = this.btm + 1 & this.mask;
    return last;
  }

  isEmpty() {
    return this.buffer[this.btm] === undefined;
  }

};

/***/ }),
/* 733 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const crypto = __webpack_require__(28);

const bs58 = __webpack_require__(39);

exports = module.exports;
/**
 * Generatea random sequence number.
 *
 * @returns {Buffer}
 * @private
 */

exports.randomSeqno = () => {
  return crypto.randomBytes(8);
};
/**
 * Generate a message id, based on the `from` and `seqno`.
 *
 * @param {string} from
 * @param {Buffer} seqno
 * @returns {string}
 * @private
 */


exports.msgId = (from, seqno) => {
  return from + seqno.toString('hex');
};
/**
 * Check if any member of the first set is also a member
 * of the second set.
 *
 * @param {Set|Array} a
 * @param {Set|Array} b
 * @returns {boolean}
 * @private
 */


exports.anyMatch = (a, b) => {
  let bHas;

  if (Array.isArray(b)) {
    bHas = val => b.indexOf(val) > -1;
  } else {
    bHas = val => b.has(val);
  }

  for (const val of a) {
    if (bHas(val)) {
      return true;
    }
  }

  return false;
};
/**
 * Make everything an array.
 *
 * @param {any} maybeArray
 * @returns {Array}
 * @private
 */


exports.ensureArray = maybeArray => {
  if (!Array.isArray(maybeArray)) {
    return [maybeArray];
  }

  return maybeArray;
};
/**
 * Ensures `message.from` is base58 encoded
 * @param {Object} message
 * @param {Buffer|String} message.from
 * @return {Object}
 */


exports.normalizeInRpcMessage = message => {
  const m = Object.assign({}, message);

  if (Buffer.isBuffer(message.from)) {
    m.from = bs58.encode(message.from);
  }

  return m;
};
/**
 * The same as `normalizeInRpcMessage`, but performed on an array of messages
 * @param {Object[]} messages
 * @return {Object[]}
 */


exports.normalizeInRpcMessages = messages => {
  if (!messages) {
    return messages;
  }

  return messages.map(exports.normalizeInRpcMessage);
};

exports.normalizeOutRpcMessage = message => {
  const m = Object.assign({}, message);

  if (typeof message.from === 'string' || message.from instanceof String) {
    m.from = bs58.decode(message.from);
  }

  return m;
};

exports.normalizeOutRpcMessages = messages => {
  if (!messages) {
    return messages;
  }

  return messages.map(exports.normalizeOutRpcMessage);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 734 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const PeerId = __webpack_require__(9);

const {
  Message
} = __webpack_require__(169);

const SignPrefix = Buffer.from('libp2p-pubsub:');
/**
 * Signs the provided message with the given `peerId`
 *
 * @param {PeerId} peerId
 * @param {Message} message
 * @returns {Promise<Message>}
 */

async function signMessage(peerId, message) {
  // Get the message in bytes, and prepend with the pubsub prefix
  const bytes = Buffer.concat([SignPrefix, Message.encode(message)]);
  const signature = await peerId.privKey.sign(bytes);
  return _objectSpread({}, message, {
    signature: signature,
    key: peerId.pubKey.bytes
  });
}
/**
 * Verifies the signature of the given message
 * @param {rpc.RPC.Message} message
 * @returns {Promise<Boolean>}
 */


async function verifySignature(message) {
  // Get message sans the signature
  const baseMessage = _objectSpread({}, message);

  delete baseMessage.signature;
  delete baseMessage.key;
  const bytes = Buffer.concat([SignPrefix, Message.encode(baseMessage)]); // Get the public key

  const pubKey = await messagePublicKey(message); // verify the base message

  return pubKey.verify(bytes, message.signature);
}
/**
 * Returns the PublicKey associated with the given message.
 * If no, valid PublicKey can be retrieved an error will be returned.
 *
 * @param {Message} message
 * @returns {Promise<PublicKey>}
 */


async function messagePublicKey(message) {
  if (message.key) {
    const peerId = await PeerId.createFromPubKey(message.key); // the key belongs to the sender, return the key

    if (peerId.isEqual(message.from)) return peerId.pubKey; // We couldn't validate pubkey is from the originator, error

    throw new Error('Public Key does not match the originator');
  } else {
    // should be available in the from property of the message (peer id)
    const from = PeerId.createFromBytes(message.from);

    if (from.pubKey) {
      return from.pubKey;
    } else {
      throw new Error('Could not get the public key from the originator id');
    }
  }
}

module.exports = {
  messagePublicKey,
  signMessage,
  SignPrefix,
  verifySignature
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 735 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const assert = __webpack_require__(13);

const errcode = __webpack_require__(2);

const TimeCache = __webpack_require__(736);

const pipe = __webpack_require__(23);

const lp = __webpack_require__(26);

const pMap = __webpack_require__(170);

const {
  GossipSubID
} = __webpack_require__(171);

const floodsubMulticodec = '/floodsub/1.0.0';

const Pubsub = __webpack_require__(111);

const {
  utils
} = __webpack_require__(111);

const {
  rpc
} = __webpack_require__(318);

class BasicPubSub extends Pubsub {
  /**
   * @param {Object} props
   * @param {String} props.debugName log namespace
   * @param {string} props.multicodec protocol identificer to connect
   * @param {PeerInfo} props.peerInfo peer's peerInfo
   * @param {Object} props.registrar registrar for libp2p protocols
   * @param {function} props.registrar.handle
   * @param {function} props.registrar.register
   * @param {function} props.registrar.unregister
   * @param {Object} [props.options]
   * @param {bool} [props.options.emitSelf] if publish should emit to self, if subscribed, defaults to false
   * @param {bool} [props.options.gossipIncoming] if incoming messages on a subscribed topic should be automatically gossiped, defaults to true
   * @param {bool} [props.options.fallbackToFloodsub] if dial should fallback to floodsub, defaults to true
   * @constructor
   */
  constructor({
    debugName,
    multicodec,
    peerInfo,
    registrar,
    options = {}
  }) {
    const multicodecs = [multicodec];

    const _options = _objectSpread({
      emitSelf: false,
      gossipIncoming: true,
      fallbackToFloodsub: true
    }, options); // Also wants to get notified of peers connected using floodsub


    if (_options.fallbackToFloodsub) {
      multicodecs.push(floodsubMulticodec);
    }

    super(_objectSpread({
      debugName,
      multicodecs,
      peerInfo,
      registrar
    }, _options));
    /**
     * A set of subscriptions
     */

    this.subscriptions = new Set();
    /**
     * Cache of seen messages
     *
     * @type {TimeCache}
     */

    this.seenCache = new TimeCache();
    /**
     * Pubsub options
     */

    this._options = _options;
    this._onRpc = this._onRpc.bind(this);
  }
  /**
   * Peer connected successfully with pubsub protocol.
   * @override
   * @param {PeerInfo} peerInfo peer info
   * @param {Connection} conn connection to the peer
   * @returns {Promise<void>}
   */


  async _onPeerConnected(peerInfo, conn) {
    await super._onPeerConnected(peerInfo, conn);
    const idB58Str = peerInfo.id.toB58String();
    const peer = this.peers.get(idB58Str);

    if (peer && peer.isWritable) {
      // Immediately send my own subscriptions to the newly established conn
      peer.sendSubscriptions(this.subscriptions);
    }
  }
  /**
   * Overriding the implementation of _processConnection should keep the connection and is
   * responsible for processing each RPC message received by other peers.
   * @override
   * @param {string} idB58Str peer id string in base58
   * @param {Connection} conn connection
   * @param {Peer} peer PubSub peer
   * @returns {void}
   *
   */


  async _processMessages(idB58Str, conn, peer) {
    const onRpcFunc = this._onRpc;

    try {
      await pipe(conn, lp.decode(), async function (source) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;

        var _iteratorError;

        try {
          for (var _iterator = _asyncIterator(source), _step, _value; _step = await _iterator.next(), _iteratorNormalCompletion = _step.done, _value = await _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
            const data = _value;
            const rpcMsg = Buffer.isBuffer(data) ? data : data.slice();
            onRpcFunc(idB58Str, rpc.RPC.decode(rpcMsg));
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              await _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      });
    } catch (err) {
      this._onPeerDisconnected(peer.info, err);
    }
  }
  /**
   * Handles an rpc request from a peer
   *
   * @param {String} idB58Str
   * @param {Object} rpc
   * @returns {void}
   */


  _onRpc(idB58Str, rpc) {
    if (!rpc) {
      return;
    }

    const peer = this.peers.get(idB58Str);

    if (!peer) {
      return;
    }

    this.log('rpc from', idB58Str);
    const subs = rpc.subscriptions;
    const msgs = rpc.msgs;

    if (subs.length) {
      // update peer subscriptions
      peer.updateSubscriptions(subs);
      subs.forEach(subOptMsg => {
        const t = subOptMsg.topicID;

        if (!this.topics.has(t)) {
          this.topics.set(t, new Set());
        }

        const topicSet = this.topics.get(t);

        if (subOptMsg.subscribe) {
          // subscribe peer to new topic
          topicSet.add(peer);
        } else {
          // unsubscribe from existing topic
          topicSet.delete(peer);
        }
      });
      this.emit('pubsub:subscription-change', peer.info, peer.topics, subs);
    }

    if (msgs.length) {
      msgs.forEach(async message => {
        const msg = utils.normalizeInRpcMessage(message);
        const seqno = utils.msgId(msg.from, msg.seqno); // Ignore if we've already seen the message

        if (this.seenCache.has(seqno)) {
          return;
        }

        this.seenCache.put(seqno); // Ensure the message is valid before processing it

        let isValid;
        let error;

        try {
          isValid = await this.validate(message);
        } catch (err) {
          error = err;
        }

        if (error || !isValid) {
          this.log('Message could not be validated, dropping it. isValid=%s', isValid, error);
          return;
        }

        this._processRpcMessage(msg);
      });
    }

    this._handleRpcControl(peer, rpc);
  }
  /**
   * @param {rpc.RPC.Message} msg
   */


  _processRpcMessage(msg) {
    if (this.peerInfo.id.toB58String() === msg.from && !this._options.emitSelf) {
      return;
    } // Emit to self


    this._emitMessage(msg.topicIDs, msg);
  }

  _emitMessage(topics, message) {
    topics.forEach(topic => {
      if (this.subscriptions.has(topic)) {
        this.emit(topic, message);
      }
    });
  }

  _handleRpcControl(peer, rpc) {
    throw errcode(new Error('_handleRpcControl must be implemented by the subclass'), 'ERR_NOT_IMPLEMENTED');
  }
  /**
   * Returns a buffer of a RPC message that contains a control message
   * @param {Array<rpc.RPC.Message>} msgs
   * @param {Array<rpc.RPC.ControlIHave>} ihave
   * @param {Array<rpc.RPC.ControlIWant>} iwant
   * @param {Array<rpc.RPC.ControlGraft>} graft
   * @param {Array<rpc.RPC.Prune>} prune
   * @returns {rpc.RPC}
   */


  _rpcWithControl(msgs = [], ihave = [], iwant = [], graft = [], prune = []) {
    return {
      subscriptions: [],
      msgs: msgs,
      control: {
        ihave: ihave,
        iwant: iwant,
        graft: graft,
        prune: prune
      }
    };
  }
  /**
   * Unmounts the protocol and shuts down every connection
   * @override
   * @returns {void}
   */


  async stop() {
    await super.stop();
    this.subscriptions = new Set();
  }
  /**
   * Subscribes to topics
   * @override
   * @param {Array<string>|string} topics
   * @returns {void}
   */


  subscribe(topics) {
    assert(this.started, 'Pubsub has not started');
    topics = utils.ensureArray(topics);
    const newTopics = topics.filter(topic => !this.subscriptions.has(topic));

    if (newTopics.length === 0) {
      return;
    } // set subscriptions


    newTopics.forEach(topic => {
      this.subscriptions.add(topic);
    }); // Broadcast SUBSCRIBE to all peers

    this.peers.forEach(peer => sendSubscriptionsOnceReady(peer)); // make sure that Gossipsub is already mounted

    function sendSubscriptionsOnceReady(peer) {
      if (peer && peer.isWritable) {
        return peer.sendSubscriptions(topics);
      }

      const onConnection = () => {
        peer.removeListener('connection', onConnection);
        sendSubscriptionsOnceReady(peer);
      };

      peer.on('connection', onConnection);
      peer.once('close', () => peer.removeListener('connection', onConnection));
    }

    this.join(newTopics);
  }

  join(topics) {
    throw errcode(new Error('join must be implemented by the subclass'), 'ERR_NOT_IMPLEMENTED');
  }
  /**
   * Leaves a topic
   * @override
   * @param {Array<string>|string} topics
   * @returns {void}
   */


  unsubscribe(topics) {
    assert(this.started, 'Pubsub has not started');
    topics = utils.ensureArray(topics);
    const unTopics = topics.filter(topic => this.subscriptions.has(topic));

    if (!unTopics.length) {
      return;
    } // delete subscriptions


    unTopics.forEach(topic => {
      this.subscriptions.delete(topic);
    }); // Broadcast UNSUBSCRIBE to all peers ready

    this.peers.forEach(peer => sendUnsubscriptionsOnceReady(peer)); // make sure that Gossipsub is already mounted

    function sendUnsubscriptionsOnceReady(peer) {
      if (peer && peer.isWritable) {
        return peer.sendUnsubscriptions(topics);
      }

      const onConnection = () => {
        peer.removeListener('connection', onConnection);
        sendUnsubscriptionsOnceReady(peer);
      };

      peer.on('connection', onConnection);
      peer.once('close', () => peer.removeListener('connection', onConnection));
    }

    this.leave(unTopics);
  }

  leave(topics) {
    throw errcode(new Error('leave must be implemented by the subclass'), 'ERR_NOT_IMPLEMENTED');
  }
  /**
   * Publishes messages to all subscribed peers
   * @override
   * @param {Array<string>|string} topics
   * @param {Array<any>|any} messages
   * @returns {void}
   */


  async publish(topics, messages) {
    assert(this.started, 'Pubsub has not started');
    this.log('publish', topics, messages);
    topics = utils.ensureArray(topics);
    messages = utils.ensureArray(messages);
    const from = this.peerInfo.id.toB58String();

    const buildMessage = (msg, cb) => {
      const seqno = utils.randomSeqno();
      const msgObj = {
        from: from,
        data: msg,
        seqno: seqno,
        topicIDs: topics
      }; // put in seen cache

      this.seenCache.put(msgObj.seqno); // Emit to self if I'm interested and emitSelf enabled

      this._options.emitSelf && this._emitMessages(topics, [msgObj]);
      return this._buildMessage(msgObj);
    };

    const msgObjects = await pMap(messages, buildMessage); // send to all the other peers

    this._publish(utils.normalizeOutRpcMessages(msgObjects));
  }
  /**
   * Get the list of topics which the peer is subscribed to.
   * @override
   * @returns {Array<String>}
   */


  getTopics() {
    assert(this.started, 'Pubsub is not started');
    return Array.from(this.subscriptions);
  }

  _emitMessages(topics, messages) {
    topics.forEach(topic => {
      if (!this.subscriptions.has(topic)) {
        return;
      }

      messages.forEach(message => {
        this.emit(topic, message);
      });
    });
  }

  _publish(rpcs) {
    throw errcode(new Error('_publish must be implemented by the subclass'), 'ERR_NOT_IMPLEMENTED');
  }
  /**
   * Given a topic, returns up to count peers subscribed to that topic
   *
   * @param {String} topic
   * @param {Number} count
   * @returns {Set<Peer>}
   *
   */


  _getPeers(topic, count) {
    const peersInTopic = this.topics.get(topic);

    if (!peersInTopic) {
      return new Set();
    } // Adds all peers using our protocol


    let peers = [];
    peersInTopic.forEach(peer => {
      if (peer.info.protocols.has(GossipSubID)) {
        peers.push(peer);
      }
    }); // Pseudo-randomly shuffles peers

    peers = this._shufflePeers(peers);

    if (count > 0 && peers.length > count) {
      peers = peers.slice(0, count);
    }

    return new Set(peers);
  }
  /**
   * Pseudo-randomly shuffles peers
   *
   * @param {Array<Peers>} peers
   * @returns {Array<Peers>}
   */


  _shufflePeers(peers) {
    if (peers.length <= 1) {
      return peers;
    }

    for (let i = 0; i < peers.length; i++) {
      const randInt = () => {
        return Math.floor(Math.random() * Math.floor(peers.length));
      };

      const j = randInt();
      const tmp = peers[i];
      peers[i] = peers[j];
      peers[j] = tmp;
      return peers;
    }
  }

}

module.exports = BasicPubSub;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 736 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const throttle = __webpack_require__(737);

exports = module.exports = TimeCache;

function TimeCache(options) {
  if (!(this instanceof TimeCache)) {
    return new TimeCache(options);
  }

  options = options || {};
  const validity = options.validity || 30; // seconds

  const entries = new Map();
  const sweep = throttle(() => {
    entries.forEach((entry, key) => {
      const v = entry.validity || validity;
      const delta = getTimeElapsed(entry.timestamp);

      if (delta > v) {
        entries.delete(key);
      }
    });
  }, 200);

  this.put = (key, value, validity) => {
    if (!this.has(key)) {
      entries.set(key, {
        value: value,
        timestamp: new Date(),
        validity: validity
      });
    }

    sweep();
  };

  this.get = key => {
    if (entries.has(key)) {
      return entries.get(key).value;
    } else {
      throw new Error('key does not exist');
    }
  };

  this.has = key => {
    return entries.has(key);
  };
}

function getTimeElapsed(prevTime) {
  const currentTime = new Date();
  const a = currentTime.getTime() - prevTime.getTime();
  return Math.floor(a / 1000);
}

/***/ }),
/* 737 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT = 'Expected a function';
/** Used as references for various `Number` constants. */

var NAN = 0 / 0;
/** `Object#toString` result references. */

var symbolTag = '[object Symbol]';
/** Used to match leading and trailing whitespace. */

var reTrim = /^\s+|\s+$/g;
/** Used to detect bad signed hexadecimal string values. */

var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
/** Used to detect binary string values. */

var reIsBinary = /^0b[01]+$/i;
/** Used to detect octal string values. */

var reIsOctal = /^0o[0-7]+$/i;
/** Built-in method references without a dependency on `root`. */

var freeParseInt = parseInt;
/** Detect free variable `global` from Node.js. */

var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
/** Detect free variable `self`. */

var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
/** Used as a reference to the global object. */

var root = freeGlobal || freeSelf || Function('return this')();
/** Used for built-in method references. */

var objectProto = Object.prototype;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */

var objectToString = objectProto.toString;
/* Built-in method references for those with the same name as other `lodash` methods. */

var nativeMax = Math.max,
    nativeMin = Math.min;
/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */

var now = function now() {
  return root.Date.now();
};
/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */


function debounce(func, wait, options) {
  var lastArgs,
      lastThis,
      maxWait,
      result,
      timerId,
      lastCallTime,
      lastInvokeTime = 0,
      leading = false,
      maxing = false,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }

  wait = toNumber(wait) || 0;

  if (isObject(options)) {
    leading = !!options.leading;
    maxing = 'maxWait' in options;
    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }

  function invokeFunc(time) {
    var args = lastArgs,
        thisArg = lastThis;
    lastArgs = lastThis = undefined;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }

  function leadingEdge(time) {
    // Reset any `maxWait` timer.
    lastInvokeTime = time; // Start the timer for the trailing edge.

    timerId = setTimeout(timerExpired, wait); // Invoke the leading edge.

    return leading ? invokeFunc(time) : result;
  }

  function remainingWait(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime,
        result = wait - timeSinceLastCall;
    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
  }

  function shouldInvoke(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime; // Either this is the first call, activity has stopped and we're at the
    // trailing edge, the system time has gone backwards and we're treating
    // it as the trailing edge, or we've hit the `maxWait` limit.

    return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
  }

  function timerExpired() {
    var time = now();

    if (shouldInvoke(time)) {
      return trailingEdge(time);
    } // Restart the timer.


    timerId = setTimeout(timerExpired, remainingWait(time));
  }

  function trailingEdge(time) {
    timerId = undefined; // Only invoke if we have `lastArgs` which means `func` has been
    // debounced at least once.

    if (trailing && lastArgs) {
      return invokeFunc(time);
    }

    lastArgs = lastThis = undefined;
    return result;
  }

  function cancel() {
    if (timerId !== undefined) {
      clearTimeout(timerId);
    }

    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = undefined;
  }

  function flush() {
    return timerId === undefined ? result : trailingEdge(now());
  }

  function debounced() {
    var time = now(),
        isInvoking = shouldInvoke(time);
    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time;

    if (isInvoking) {
      if (timerId === undefined) {
        return leadingEdge(lastCallTime);
      }

      if (maxing) {
        // Handle invocations in a tight loop.
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }

    if (timerId === undefined) {
      timerId = setTimeout(timerExpired, wait);
    }

    return result;
  }

  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}
/**
 * Creates a throttled function that only invokes `func` at most once per
 * every `wait` milliseconds. The throttled function comes with a `cancel`
 * method to cancel delayed `func` invocations and a `flush` method to
 * immediately invoke them. Provide `options` to indicate whether `func`
 * should be invoked on the leading and/or trailing edge of the `wait`
 * timeout. The `func` is invoked with the last arguments provided to the
 * throttled function. Subsequent calls to the throttled function return the
 * result of the last `func` invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the throttled function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.throttle` and `_.debounce`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to throttle.
 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=true]
 *  Specify invoking on the leading edge of the timeout.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new throttled function.
 * @example
 *
 * // Avoid excessively updating the position while scrolling.
 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
 *
 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
 * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
 * jQuery(element).on('click', throttled);
 *
 * // Cancel the trailing throttled invocation.
 * jQuery(window).on('popstate', throttled.cancel);
 */


function throttle(func, wait, options) {
  var leading = true,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }

  if (isObject(options)) {
    leading = 'leading' in options ? !!options.leading : leading;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }

  return debounce(func, wait, {
    'leading': leading,
    'maxWait': wait,
    'trailing': trailing
  });
}
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */


function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */


function isObjectLike(value) {
  return !!value && typeof value == 'object';
}
/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */


function isSymbol(value) {
  return typeof value == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;
}
/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */


function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }

  if (isSymbol(value)) {
    return NAN;
  }

  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? other + '' : other;
  }

  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }

  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
}

module.exports = throttle;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(8)))

/***/ }),
/* 738 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

module.exports = (string, count = 1, options) => {
  options = _objectSpread({
    indent: ' ',
    includeEmptyLines: false
  }, options);

  if (typeof string !== 'string') {
    throw new TypeError("Expected `input` to be a `string`, got `".concat(typeof string, "`"));
  }

  if (typeof count !== 'number') {
    throw new TypeError("Expected `count` to be a `number`, got `".concat(typeof count, "`"));
  }

  if (typeof options.indent !== 'string') {
    throw new TypeError("Expected `options.indent` to be a `string`, got `".concat(typeof options.indent, "`"));
  }

  if (count === 0) {
    return string;
  }

  const regex = options.includeEmptyLines ? /^/gm : /^(?!\s*$)/gm;
  return string.replace(regex, options.indent.repeat(count));
};

/***/ }),
/* 739 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const os = __webpack_require__(740);

const extractPathRegex = /\s+at.*(?:\(|\s)(.*)\)?/;
const pathRegex = /^(?:(?:(?:node|(?:internal\/[\w/]*|.*node_modules\/(?:babel-polyfill|pirates)\/.*)?\w+)\.js:\d+:\d+)|native)/;
const homeDir = typeof os.homedir === 'undefined' ? '' : os.homedir();

module.exports = (stack, options) => {
  options = Object.assign({
    pretty: false
  }, options);
  return stack.replace(/\\/g, '/').split('\n').filter(line => {
    const pathMatches = line.match(extractPathRegex);

    if (pathMatches === null || !pathMatches[1]) {
      return true;
    }

    const match = pathMatches[1]; // Electron

    if (match.includes('.app/Contents/Resources/electron.asar') || match.includes('.app/Contents/Resources/default_app.asar')) {
      return false;
    }

    return !pathRegex.test(match);
  }).filter(line => line.trim() !== '').map(line => {
    if (options.pretty) {
      return line.replace(extractPathRegex, (m, p1) => m.replace(p1, p1.replace(homeDir, '~')));
    }

    return line;
  }).join('\n');
};

/***/ }),
/* 740 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 741 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = "\nmessage RPC {\n  repeated SubOpts subscriptions = 1;\n  repeated Message msgs = 2;\n  optional ControlMessage control = 3;\n\n  message SubOpts {\n    optional bool subscribe = 1; // subscribe or unsubcribe\n    optional string topicID = 2;\n  }\n\n  message Message {\n    optional bytes from = 1;\n    optional bytes data = 2;\n    optional bytes seqno = 3;\n    repeated string topicIDs = 4; \n    optional bytes signature = 5;\n    optional bytes key = 6;\n  }\n\n  message ControlMessage {\n    repeated ControlIHave ihave = 1;\n    repeated ControlIWant iwant = 2;\n    repeated ControlGraft graft = 3;\n    repeated ControlPrune prune = 4;\n  }\n\n  message ControlIHave {\n    optional string topicID = 1;\n    repeated string messageIDs = 2;\n  }\n\n  message ControlIWant {\n    repeated string messageIDs = 1;  \n  }\n\n  message ControlGraft {\n    optional string topicID = 1;\n  }\n\n  message ControlPrune {\n    optional string topicID = 1;\n  }\n}";

/***/ }),
/* 742 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = "\nmessage TopicDescriptor {\n  optional string name = 1;\n  optional AuthOpts auth = 2;\n  optional EncOpts enc = 3;\n\n  message AuthOpts {\n    optional AuthMode mode = 1;\n    repeated bytes keys = 2; // root keys to trust\n\n    enum AuthMode {\n      NONE = 0; // no authentication, anyone can publish\n      KEY = 1; // only messages signed by keys in the topic descriptor are accepted\n      WOT = 2; // web of trust, certificates can allow publisher set to grow\n    }\n  }\n\n  message EncOpts {\n    optional EncMode mode = 1;\n    repeated bytes keyHashes = 2; // the hashes of the shared keys used (salted)\n\n    enum EncMode {\n      NONE = 0; // no encryption, anyone can read\n      SHAREDKEY = 1; // messages are encrypted with shared key\n      WOT = 2; // web of trust, certificates can allow publisher set to grow\n    }\n  }\n}";

/***/ }),
/* 743 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const {
  utils
} = __webpack_require__(111);

class CacheEntry {
  /**
   * @param {String} msgID
   * @param {Array<String>} topics
   *
   * @constructor
   */
  constructor(msgID, topics) {
    this.msgID = msgID;
    this.topics = topics;
  }

}

class MessageCache {
  /**
   * @param {Number} gossip
   * @param {Number} history
   *
   * @constructor
   */
  constructor(gossip, history) {
    /**
     * @type {Map<string, RPC.Message>}
     */
    this.msgs = new Map();
    /**
     * @type {Array<Array<CacheEntry>>}
     */

    this.history = [];

    for (let i = 0; i < history; i++) {
      this.history[i] = [];
    }
    /**
     * @type {Number}
     */


    this.gossip = gossip;
  }
  /**
   * Adds a message to the current window and the cache
   *
   * @param {rpc.RPC.Message} msg
   * @returns {void}
   */


  put(msg) {
    const msgID = utils.msgId(msg.from, msg.seqno);
    this.msgs.set(msgID, msg);
    this.history[0].push(new CacheEntry(msgID, msg.topicIDs));
  }
  /**
   * Retrieves a message from the cache by its ID, if it is still present
   *
   * @param {String} msgID
   * @returns {rpc.RPC.Message}
   */


  get(msgID) {
    return this.msgs.get(msgID);
  }
  /**
   * Retrieves a list of message IDs for a given topic
   *
   * @param {String} topic
   *
   * @returns {Array<String>}
   */


  getGossipIDs(topic) {
    const msgIDs = [];

    for (let i = 0; i < this.gossip; i++) {
      this.history[i].forEach(entry => {
        for (const t of entry.topics) {
          if (t === topic) {
            msgIDs.push(entry.msgID);
            break;
          }
        }
      });
    }

    return msgIDs;
  }
  /**
   * Shifts the current window, discarding messages older than this.history.length of the cache
   *
   * @returns {void}
   */


  shift() {
    const last = this.history[this.history.length - 1];
    last.forEach(entry => {
      this.msgs.delete(entry.msgID);
    });
    this.history.pop();
    this.history.unshift([]);
  }

}

module.exports = {
  CacheEntry,
  MessageCache
};

/***/ }),
/* 744 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const constants = __webpack_require__(171);

const errcode = __webpack_require__(2);

class Heartbeat {
  /**
   * @param {Object} gossipsub
   * @constructor
   */
  constructor(gossipsub) {
    this.gossipsub = gossipsub;
  }

  start() {
    if (this._heartbeatTimer) {
      const errMsg = 'Heartbeat timer is already running';
      this.gossipsub.log(errMsg);
      throw errcode(new Error(errMsg), 'ERR_HEARTBEAT_ALREADY_RUNNING');
    }

    const heartbeat = this._heartbeat.bind(this);

    const timeout = setTimeout(() => {
      heartbeat();

      this._heartbeatTimer.runPeriodically(heartbeat, constants.GossipSubHeartbeatInterval);
    }, constants.GossipSubHeartbeatInitialDelay);
    this._heartbeatTimer = {
      _onCancel: null,
      _intervalId: null,
      runPeriodically: (fn, period) => {
        this._heartbeatTimer._intervalId = setInterval(fn, period);
      },
      cancel: () => {
        clearTimeout(timeout);
        clearInterval(this._heartbeatTimer._intervalId);
      }
    };
  }
  /**
   * Unmounts the gossipsub protocol and shuts down every connection
   * @override
   * @returns {void}
   */


  stop() {
    if (!this._heartbeatTimer) {
      const errMsg = 'Heartbeat timer is not running';
      this.gossipsub.log(errMsg);
      throw errcode(new Error(errMsg), 'ERR_HEARTBEAT_NO_RUNNING');
    }

    this._heartbeatTimer.cancel();

    this._heartbeatTimer = null;
  }
  /**
   * Maintains the mesh and fanout maps in gossipsub.
   *
   * @returns {void}
   */


  _heartbeat() {
    // flush pending control message from retries and gossip
    // that hasn't been piggybacked since the last heartbeat
    this.gossipsub._flush();
    /**
     * @type {Map<Peer, Array<String>>}
     */


    const tograft = new Map();
    const toprune = new Map(); // maintain the mesh for topics we have joined

    this.gossipsub.mesh.forEach((peers, topic) => {
      // do we have enough peers?
      if (peers.size < constants.GossipSubDlo) {
        const ineed = constants.GossipSubD - peers.size;

        const peersSet = this.gossipsub._getPeers(topic, ineed);

        peersSet.forEach(peer => {
          // add topic peers not already in mesh
          if (peers.has(peer)) {
            return;
          }

          this.gossipsub.log('HEARTBEAT: Add mesh link to %s in %s', peer.info.id.toB58String(), topic);
          peers.add(peer);
          const peerGrafts = tograft.get(peer);

          if (!peerGrafts) {
            tograft.set(peer, [topic]);
          } else {
            peerGrafts.push(topic);
          }
        });
      } // do we have to many peers?


      if (peers.size > constants.GossipSubDhi) {
        const idontneed = peers.size - constants.GossipSubD;
        let peersArray = Array.from(peers);
        peersArray = this.gossipsub._shufflePeers(peersArray);
        peersArray = peersArray.slice(0, idontneed);
        peersArray.forEach(peer => {
          this.gossipsub.log('HEARTBEAT: Remove mesh link to %s in %s', peer.info.id.toB58String(), topic);
          peers.delete(peer);
          const peerPrunes = toprune.get(peer);

          if (!peerPrunes) {
            toprune.set(peer, [topic]);
          } else {
            peerPrunes.push(topic);
          }
        });
      }

      this.gossipsub._emitGossip(topic, peers);
    }); // expire fanout for topics we haven't published to in a while

    const now = this.gossipsub._now();

    this.gossipsub.lastpub.forEach((lastpb, topic) => {
      if (lastpb + constants.GossipSubFanoutTTL < now) {
        this.gossipsub.fanout.delete(topic);
        this.gossipsub.lastpub.delete(topic);
      }
    }); // maintain our fanout for topics we are publishing but we have not joined

    this.gossipsub.fanout.forEach((peers, topic) => {
      // checks whether our peers are still in the topic
      peers.forEach(peer => {
        if (this.gossipsub.topics.has(peer)) {
          peers.delete(peer);
        }
      }); // do we need more peers?

      if (peers.size < constants.GossipSubD) {
        const ineed = constants.GossipSubD - peers.size;

        const peersSet = this.gossipsub._getPeers(topic, ineed);

        peersSet.forEach(peer => {
          if (!peers.has(peer)) {
            return;
          }

          peers.add(peer);
        });
      }

      this.gossipsub._emitGossip(topic, peers);
    }); // send coalesced GRAFT/PRUNE messages (will piggyback gossip)

    this.gossipsub._sendGraftPrune(tograft, toprune); // advance the message history window


    this.gossipsub.messageCache.shift();
    this.gossipsub.emit('gossipsub:heartbeat');
  }

}

module.exports = Heartbeat;

/***/ }),
/* 745 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const {
  EventEmitter
} = __webpack_require__(11);

const debug = __webpack_require__(1);

const log = debug('libp2p');
log.error = debug('libp2p:error');

const PeerInfo = __webpack_require__(17);

const peerRouting = __webpack_require__(746);

const contentRouting = __webpack_require__(748);

const pubsub = __webpack_require__(749);

const {
  getPeerInfo
} = __webpack_require__(750);

const {
  validate: validateConfig
} = __webpack_require__(751);

const {
  codes
} = __webpack_require__(43);

const ConnectionManager = __webpack_require__(752);

const Circuit = __webpack_require__(799);

const Dialer = __webpack_require__(804);

const Metrics = __webpack_require__(807);

const TransportManager = __webpack_require__(810);

const Upgrader = __webpack_require__(815);

const PeerStore = __webpack_require__(823);

const Registrar = __webpack_require__(824);

const ping = __webpack_require__(825);

const {
  IdentifyService,
  multicodecs: IDENTIFY_PROTOCOLS
} = __webpack_require__(827);
/**
 * @fires Libp2p#error Emitted when an error occurs
 * @fires Libp2p#peer:connect Emitted when a peer is connected to this node
 * @fires Libp2p#peer:disconnect Emitted when a peer disconnects from this node
 * @fires Libp2p#peer:discovery Emitted when a peer is discovered
 */


class Libp2p extends EventEmitter {
  constructor(_options) {
    super(); // validateConfig will ensure the config is correct,
    // and add default values where appropriate

    this._options = validateConfig(_options);
    this.datastore = this._options.datastore;
    this.peerInfo = this._options.peerInfo;
    this.peerStore = new PeerStore();
    this._modules = this._options.modules;
    this._config = this._options.config;
    this._transport = []; // Transport instances/references

    this._discovery = new Map(); // Discovery service instances/references

    if (this._options.metrics.enabled) {
      this.metrics = new Metrics(this._options.metrics);
    } // Setup the Upgrader


    this.upgrader = new Upgrader({
      localPeer: this.peerInfo.id,
      metrics: this.metrics,
      onConnection: connection => {
        const peerInfo = this.peerStore.put(new PeerInfo(connection.remotePeer), {
          silent: true
        });
        this.registrar.onConnect(peerInfo, connection);
        this.connectionManager.onConnect(connection);
        this.emit('peer:connect', peerInfo); // Run identify for every connection

        if (this.identifyService) {
          this.identifyService.identify(connection, connection.remotePeer).catch(log.error);
        }
      },
      onConnectionEnd: connection => {
        const peerInfo = Dialer.getDialable(connection.remotePeer);
        this.registrar.onDisconnect(peerInfo, connection);
        this.connectionManager.onDisconnect(connection); // If there are no connections to the peer, disconnect

        if (!this.registrar.getConnection(peerInfo)) {
          this.emit('peer:disconnect', peerInfo);
          this.metrics && this.metrics.onPeerDisconnected(peerInfo.id);
        }
      }
    }); // Create the Registrar

    this.registrar = new Registrar({
      peerStore: this.peerStore
    });
    this.handle = this.handle.bind(this);
    this.registrar.handle = this.handle; // Create the Connection Manager

    this.connectionManager = new ConnectionManager(this, this._options.connectionManager); // Setup the transport manager

    this.transportManager = new TransportManager({
      libp2p: this,
      upgrader: this.upgrader
    }); // Attach crypto channels

    if (this._modules.connEncryption) {
      const cryptos = this._modules.connEncryption;
      cryptos.forEach(crypto => {
        this.upgrader.cryptos.set(crypto.protocol, crypto);
      });
    }

    this.dialer = new Dialer({
      transportManager: this.transportManager,
      peerStore: this.peerStore,
      concurrency: this._options.dialer.maxParallelDials,
      perPeerLimit: this._options.dialer.maxDialsPerPeer,
      timeout: this._options.dialer.dialTimeout
    });

    this._modules.transport.forEach(Transport => {
      const key = Transport.prototype[Symbol.toStringTag];
      const transportOptions = this._config.transport[key];
      this.transportManager.add(key, Transport, transportOptions);
    });

    if (this._config.relay.enabled) {
      this.transportManager.add(Circuit.prototype[Symbol.toStringTag], Circuit);
    } // Attach stream multiplexers


    if (this._modules.streamMuxer) {
      const muxers = this._modules.streamMuxer;
      muxers.forEach(muxer => {
        this.upgrader.muxers.set(muxer.multicodec, muxer);
      }); // Add the identify service since we can multiplex

      this.identifyService = new IdentifyService({
        registrar: this.registrar,
        peerInfo: this.peerInfo,
        protocols: this.upgrader.protocols
      });
      this.handle(Object.values(IDENTIFY_PROTOCOLS), this.identifyService.handleMessage);
    } // Attach private network protector


    if (this._modules.connProtector) {
      this.upgrader.protector = this._modules.connProtector;
    } else if (process.env.LIBP2P_FORCE_PNET) {
      throw new Error('Private network is enforced, but no protector was provided');
    } // dht provided components (peerRouting, contentRouting, dht)


    if (this._modules.dht) {
      const DHT = this._modules.dht;
      this._dht = new DHT(_objectSpread({
        dialer: this.dialer,
        peerInfo: this.peerInfo,
        peerStore: this.peerStore,
        registrar: this.registrar,
        datastore: this.datastore
      }, this._config.dht));
    } // start pubsub


    if (this._modules.pubsub) {
      this.pubsub = pubsub(this, this._modules.pubsub, this._config.pubsub);
    } // Attach remaining APIs
    // peer and content routing will automatically get modules from _modules and _dht


    this.peerRouting = peerRouting(this);
    this.contentRouting = contentRouting(this); // Mount default protocols

    ping.mount(this);
    this._onDiscoveryPeer = this._onDiscoveryPeer.bind(this);
  }
  /**
   * Overrides EventEmitter.emit to conditionally emit errors
   * if there is a handler. If not, errors will be logged.
   * @param {string} eventName
   * @param  {...any} args
   * @returns {void}
   */


  emit(eventName, ...args) {
    if (eventName === 'error' && !this._events.error) {
      log.error(...args);
    } else {
      super.emit(eventName, ...args);
    }
  }
  /**
   * Starts the libp2p node and all its subsystems
   *
   * @returns {Promise<void>}
   */


  async start() {
    log('libp2p is starting');

    try {
      await this._onStarting();
      await this._onDidStart();
      log('libp2p has started');
    } catch (err) {
      this.emit('error', err);
      log.error('An error occurred starting libp2p', err);
      await this.stop();
      throw err;
    }
  }
  /**
   * Stop the libp2p node by closing its listeners and open connections
   * @async
   * @returns {void}
   */


  async stop() {
    log('libp2p is stopping');

    try {
      for (const service of this._discovery.values()) {
        service.removeListener('peer', this._onDiscoveryPeer);
      }

      await Promise.all(Array.from(this._discovery.values(), s => s.stop()));
      this.connectionManager.stop();
      await Promise.all([this.pubsub && this.pubsub.stop(), this._dht && this._dht.stop(), this.metrics && this.metrics.stop()]);
      await this.transportManager.close();
      await this.registrar.close();
      ping.unmount(this);
      this.dialer.destroy();
    } catch (err) {
      if (err) {
        log.error(err);
        this.emit('error', err);
      }
    }

    this._isStarted = false;
    log('libp2p has stopped');
  }

  isStarted() {
    return this._isStarted;
  }
  /**
   * Gets a Map of the current connections. The keys are the stringified
   * `PeerId` of the peer. The value is an array of Connections to that peer.
   * @returns {Map<string, Connection[]>}
   */


  get connections() {
    return this.registrar.connections;
  }
  /**
   * Dials to the provided peer. If successful, the `PeerInfo` of the
   * peer will be added to the nodes `peerStore`
   *
   * @param {PeerInfo|PeerId|Multiaddr|string} peer The peer to dial
   * @param {object} options
   * @param {AbortSignal} [options.signal]
   * @returns {Promise<Connection>}
   */


  dial(peer, options) {
    return this.dialProtocol(peer, null, options);
  }
  /**
   * Dials to the provided peer and handshakes with the given protocol.
   * If successful, the `PeerInfo` of the peer will be added to the nodes `peerStore`,
   * and the `Connection` will be sent in the callback
   *
   * @async
   * @param {PeerInfo|PeerId|Multiaddr|string} peer The peer to dial
   * @param {string[]|string} protocols
   * @param {object} options
   * @param {AbortSignal} [options.signal]
   * @returns {Promise<Connection|*>}
   */


  async dialProtocol(peer, protocols, options) {
    const dialable = Dialer.getDialable(peer);
    let connection;

    if (PeerInfo.isPeerInfo(dialable)) {
      this.peerStore.put(dialable, {
        silent: true
      });
      connection = this.registrar.getConnection(dialable);
    }

    if (!connection) {
      connection = await this.dialer.connectToPeer(dialable, options);
    } // If a protocol was provided, create a new stream


    if (protocols) {
      return connection.newStream(protocols);
    }

    return connection;
  }
  /**
   * Disconnects all connections to the given `peer`
   *
   * @param {PeerInfo|PeerId|multiaddr|string} peer the peer to close connections to
   * @returns {Promise<void>}
   */


  hangUp(peer) {
    const peerInfo = getPeerInfo(peer, this.peerStore);
    return Promise.all(this.registrar.connections.get(peerInfo.id.toB58String()).map(connection => {
      return connection.close();
    }));
  }
  /**
   * Pings the given peer
   * @param {PeerInfo|PeerId|Multiaddr|string} peer The peer to ping
   * @returns {Promise<number>}
   */


  async ping(peer) {
    const peerInfo = await getPeerInfo(peer, this.peerStore);
    return ping(this, peerInfo);
  }
  /**
   * Registers the `handler` for each protocol
   * @param {string[]|string} protocols
   * @param {function({ connection:*, stream:*, protocol:string })} handler
   */


  handle(protocols, handler) {
    protocols = Array.isArray(protocols) ? protocols : [protocols];
    protocols.forEach(protocol => {
      this.upgrader.protocols.set(protocol, handler);
    }); // Only push if libp2p is running

    if (this.isStarted() && this.identifyService) {
      this.identifyService.pushToPeerStore(this.peerStore);
    }
  }
  /**
   * Removes the handler for each protocol. The protocol
   * will no longer be supported on streams.
   * @param {string[]|string} protocols
   */


  unhandle(protocols) {
    protocols = Array.isArray(protocols) ? protocols : [protocols];
    protocols.forEach(protocol => {
      this.upgrader.protocols.delete(protocol);
    }); // Only push if libp2p is running

    if (this.isStarted() && this.identifyService) {
      this.identifyService.pushToPeerStore(this.peerStore);
    }
  }

  async _onStarting() {
    // Listen on the addresses supplied in the peerInfo
    const multiaddrs = this.peerInfo.multiaddrs.toArray();
    await this.transportManager.listen(multiaddrs); // The addresses may change once the listener starts
    // eg /ip4/0.0.0.0/tcp/0 => /ip4/192.168.1.0/tcp/58751

    this.peerInfo.multiaddrs.clear();

    for (const ma of this.transportManager.getAddrs()) {
      this.peerInfo.multiaddrs.add(ma);
    }

    if (this._config.pubsub.enabled) {
      this.pubsub && this.pubsub.start();
    } // DHT subsystem


    if (this._config.dht.enabled) {
      this._dht && this._dht.start(); // TODO: this should be modified once random-walk is used as
      // the other discovery modules

      this._dht.on('peer', this._onDiscoveryPeer);
    } // Start metrics if present


    this.metrics && this.metrics.start();
  }
  /**
   * Called when libp2p has started and before it returns
   * @private
   */


  _onDidStart() {
    this._isStarted = true;
    this.connectionManager.start();
    this.peerStore.on('peer', peerInfo => {
      this.emit('peer:discovery', peerInfo);

      this._maybeConnect(peerInfo);
    }); // Peer discovery

    this._setupPeerDiscovery(); // Once we start, emit and dial any peers we may have already discovered


    for (const peerInfo of this.peerStore.peers.values()) {
      this.emit('peer:discovery', peerInfo);

      this._maybeConnect(peerInfo);
    }
  }
  /**
   * Called whenever peer discovery services emit `peer` events.
   * Known peers may be emitted.
   * @private
   * @param {PeerInfo} peerInfo
   */


  _onDiscoveryPeer(peerInfo) {
    if (peerInfo.id.toB58String() === this.peerInfo.id.toB58String()) {
      log.error(new Error(codes.ERR_DISCOVERED_SELF));
      return;
    }

    this.peerStore.put(peerInfo);
  }
  /**
   * Will dial to the given `peerInfo` if the current number of
   * connected peers is less than the configured `ConnectionManager`
   * minPeers.
   * @private
   * @param {PeerInfo} peerInfo
   */


  async _maybeConnect(peerInfo) {
    // If auto dialing is on and we have no connection to the peer, check if we should dial
    if (this._config.peerDiscovery.autoDial === true && !this.registrar.getConnection(peerInfo)) {
      const minPeers = this._options.connectionManager.minPeers || 0;

      if (minPeers > this.connectionManager._connections.size) {
        log('connecting to discovered peer %s', peerInfo.id.toB58String());

        try {
          await this.dialer.connectToPeer(peerInfo);
        } catch (err) {
          log.error('could not connect to discovered peer', err);
        }
      }
    }
  }
  /**
   * Initializes and starts peer discovery services
   *
   * @private
   * @returns {Promise<void>}
   */


  _setupPeerDiscovery() {
    const setupService = DiscoveryService => {
      let config = {
        enabled: true // on by default

      };

      if (DiscoveryService.tag && this._config.peerDiscovery && this._config.peerDiscovery[DiscoveryService.tag]) {
        config = _objectSpread({}, config, {}, this._config.peerDiscovery[DiscoveryService.tag]);
      }

      if (config.enabled && !this._discovery.has(DiscoveryService.tag)) {
        // not already added
        let discoveryService;

        if (typeof DiscoveryService === 'function') {
          discoveryService = new DiscoveryService(Object.assign({}, config, {
            peerInfo: this.peerInfo
          }));
        } else {
          discoveryService = DiscoveryService;
        }

        discoveryService.on('peer', this._onDiscoveryPeer);

        this._discovery.set(DiscoveryService.tag, discoveryService);
      }
    }; // Discovery modules


    for (const DiscoveryService of this._modules.peerDiscovery || []) {
      setupService(DiscoveryService);
    } // Transport modules with discovery


    for (const Transport of this.transportManager.getTransports()) {
      if (Transport.discovery) {
        setupService(Transport.discovery);
      }
    }

    return Promise.all(Array.from(this._discovery.values(), d => d.start()));
  }

}

module.exports = Libp2p;
/**
 * Like `new Libp2p(options)` except it will create a `PeerInfo`
 * instance if one is not provided in options.
 * @param {object} options Libp2p configuration options
 * @returns {Libp2p}
 */

module.exports.create = async (options = {}) => {
  if (options.peerInfo) {
    return new Libp2p(options);
  }

  const peerInfo = await PeerInfo.create();
  options.peerInfo = peerInfo;
  return new Libp2p(options);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5)))

/***/ }),
/* 746 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const errCode = __webpack_require__(32);

const pAny = __webpack_require__(172);

module.exports = node => {
  const routers = node._modules.peerRouting || []; // If we have the dht, make it first

  if (node._dht) {
    routers.unshift(node._dht);
  }

  return {
    /**
     * Iterates over all peer routers in series to find the given peer.
     *
     * @param {String} id The id of the peer to find
     * @param {object} [options]
     * @param {number} [options.timeout] How long the query should run
     * @returns {Promise<PeerInfo>}
     */
    findPeer: async (id, options) => {
      // eslint-disable-line require-await
      if (!routers.length) {
        throw errCode(new Error('No peer routers available'), 'NO_ROUTERS_AVAILABLE');
      }

      return pAny(routers.map(async router => {
        const result = await router.findPeer(id, options); // If we don't have a result, we need to provide an error to keep trying

        if (!result || Object.keys(result).length === 0) {
          throw errCode(new Error('not found'), 'NOT_FOUND');
        }

        return result;
      }));
    }
  };
};

/***/ }),
/* 747 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const AggregateError = __webpack_require__(317);

const PCancelable = __webpack_require__(319);

const pSome = (iterable, options) => new PCancelable((resolve, reject, onCancel) => {
  options = _objectSpread({
    filter: () => true
  }, options);

  if (!Number.isFinite(options.count)) {
    throw new TypeError("Expected a finite number, got ".concat(typeof options.count));
  }

  const values = [];
  const errors = [];
  let elementCount = 0;
  let maxErrors = -options.count + 1;
  let maxFiltered = -options.count + 1;
  let isDone = false;
  const completed = new Set();

  const cancelPendingIfDone = () => {
    if (!isDone) {
      return;
    }

    for (const promise of iterable) {
      if (!completed.has(promise) && typeof promise.cancel === 'function') {
        promise.cancel();
      }
    }
  };

  onCancel(() => {
    isDone = true;
    cancelPendingIfDone();
  });

  const fulfilled = value => {
    if (isDone) {
      return;
    }

    if (!options.filter(value)) {
      if (--maxFiltered === 0) {
        isDone = true;
        reject(new RangeError('Not enough values pass the `filter` option'));
      }

      return;
    }

    values.push(value);

    if (--options.count === 0) {
      isDone = true;
      resolve(values);
    }
  };

  const rejected = error => {
    if (isDone) {
      return;
    }

    errors.push(error);

    if (--maxErrors === 0) {
      isDone = true;
      reject(new AggregateError(errors));
    }
  };

  for (const element of iterable) {
    maxErrors++;
    maxFiltered++;
    elementCount++;

    (async () => {
      try {
        const value = await Promise.resolve(element);
        fulfilled(value);
      } catch (error) {
        rejected(error);
      }

      completed.add(element);
      cancelPendingIfDone();
    })();
  }

  if (options.count > elementCount) {
    throw new RangeError("Expected input to contain at least ".concat(options.count, " items, but contains ").concat(elementCount, " items"));
  }
});

module.exports = pSome; // TODO: Remove this for the next major release

module.exports.default = pSome;
module.exports.AggregateError = AggregateError;

/***/ }),
/* 748 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

const errCode = __webpack_require__(32);

const {
  messages,
  codes
} = __webpack_require__(43);

const all = __webpack_require__(143);

const pAny = __webpack_require__(172);

module.exports = node => {
  const routers = node._modules.contentRouting || [];
  const dht = node._dht; // If we have the dht, make it first

  if (dht) {
    routers.unshift(dht);
  }

  return {
    /**
     * Iterates over all content routers in series to find providers of the given key.
     * Once a content router succeeds, iteration will stop.
     *
     * @param {CID} key The CID key of the content to find
     * @param {object} [options]
     * @param {number} [options.timeout] How long the query should run
     * @param {number} [options.maxNumProviders] - maximum number of providers to find
     * @returns {AsyncIterable<PeerInfo>}
     */
    findProviders(key, options) {
      return _wrapAsyncGenerator(function* () {
        if (!routers.length) {
          throw errCode(new Error('No content routers available'), 'NO_ROUTERS_AVAILABLE');
        }

        const result = yield _awaitAsyncGenerator(pAny(routers.map(async router => {
          const provs = await all(router.findProviders(key, options));

          if (!provs || !provs.length) {
            throw errCode(new Error('not found'), 'NOT_FOUND');
          }

          return provs;
        })));

        for (const pInfo of result) {
          yield pInfo;
        }
      })();
    },

    /**
     * Iterates over all content routers in parallel to notify it is
     * a provider of the given key.
     *
     * @param {CID} key The CID key of the content to find
     * @returns {Promise<void>}
     */
    async provide(key) {
      // eslint-disable-line require-await
      if (!routers.length) {
        throw errCode(new Error('No content routers available'), 'NO_ROUTERS_AVAILABLE');
      }

      return Promise.all(routers.map(router => router.provide(key)));
    },

    /**
     * Store the given key/value pair in the DHT.
     * @param {Buffer} key
     * @param {Buffer} value
     * @param {Object} [options] - put options
     * @param {number} [options.minPeers] - minimum number of peers required to successfully put
     * @returns {Promise<void>}
     */
    async put(key, value, options) {
      // eslint-disable-line require-await
      if (!node.isStarted() || !dht.isStarted) {
        throw errCode(new Error(messages.NOT_STARTED_YET), codes.DHT_NOT_STARTED);
      }

      return dht.put(key, value, options);
    },

    /**
     * Get the value to the given key.
     * Times out after 1 minute by default.
     * @param {Buffer} key
     * @param {Object} [options] - get options
     * @param {number} [options.timeout] - optional timeout (default: 60000)
     * @returns {Promise<{from: PeerId, val: Buffer}>}
     */
    async get(key, options) {
      // eslint-disable-line require-await
      if (!node.isStarted() || !dht.isStarted) {
        throw errCode(new Error(messages.NOT_STARTED_YET), codes.DHT_NOT_STARTED);
      }

      return dht.get(key, options);
    },

    /**
     * Get the `n` values to the given key without sorting.
     * @param {Buffer} key
     * @param {number} nVals
     * @param {Object} [options] - get options
     * @param {number} [options.timeout] - optional timeout (default: 60000)
     * @returns {Promise<Array<{from: PeerId, val: Buffer}>>}
     */
    async getMany(key, nVals, options) {
      // eslint-disable-line require-await
      if (!node.isStarted() || !dht.isStarted) {
        throw errCode(new Error(messages.NOT_STARTED_YET), codes.DHT_NOT_STARTED);
      }

      return dht.getMany(key, nVals, options);
    }

  };
};

/***/ }),
/* 749 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const errCode = __webpack_require__(32);

const {
  messages,
  codes
} = __webpack_require__(43);

module.exports = (node, Pubsub, config) => {
  const pubsub = new Pubsub(node.peerInfo, node.registrar, config);
  return {
    /**
     * Subscribe the given handler to a pubsub topic
     * @param {string} topic
     * @param {function} handler The handler to subscribe
     * @returns {void}
     */
    subscribe: (topic, handler) => {
      if (!node.isStarted() && !pubsub.started) {
        throw errCode(new Error(messages.NOT_STARTED_YET), codes.PUBSUB_NOT_STARTED);
      }

      if (pubsub.listenerCount(topic) === 0) {
        pubsub.subscribe(topic);
      }

      pubsub.on(topic, handler);
    },

    /**
     * Unsubscribes from a pubsub topic
     * @param {string} topic
     * @param {function} [handler] The handler to unsubscribe from
     */
    unsubscribe: (topic, handler) => {
      if (!node.isStarted() && !pubsub.started) {
        throw errCode(new Error(messages.NOT_STARTED_YET), codes.PUBSUB_NOT_STARTED);
      }

      if (!handler) {
        pubsub.removeAllListeners(topic);
      } else {
        pubsub.removeListener(topic, handler);
      }

      if (pubsub.listenerCount(topic) === 0) {
        pubsub.unsubscribe(topic);
      }
    },

    /**
     * Publish messages to the given topics.
     * @param {Array<string>|string} topic
     * @param {Buffer} data
     * @returns {Promise<void>}
     */
    publish: (topic, data) => {
      if (!node.isStarted() && !pubsub.started) {
        throw errCode(new Error(messages.NOT_STARTED_YET), codes.PUBSUB_NOT_STARTED);
      }

      try {
        data = Buffer.from(data);
      } catch (err) {
        throw errCode(new Error('data must be convertible to a Buffer'), 'ERR_DATA_IS_NOT_VALID');
      }

      return pubsub.publish(topic, data);
    },

    /**
     * Get a list of topics the node is subscribed to.
     * @returns {Array<String>} topics
     */
    getTopics: () => {
      if (!node.isStarted() && !pubsub.started) {
        throw errCode(new Error(messages.NOT_STARTED_YET), codes.PUBSUB_NOT_STARTED);
      }

      return pubsub.getTopics();
    },

    /**
     * Get a list of the peer-ids that are subscribed to one topic.
     * @param {string} topic
     * @returns {Array<string>}
     */
    getSubscribers: topic => {
      if (!node.isStarted() && !pubsub.started) {
        throw errCode(new Error(messages.NOT_STARTED_YET), codes.PUBSUB_NOT_STARTED);
      }

      return pubsub.getSubscribers(topic);
    },

    setMaxListeners(n) {
      return pubsub.setMaxListeners(n);
    },

    _pubsub: pubsub,
    start: () => pubsub.start(),
    stop: () => pubsub.stop()
  };
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 750 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const PeerId = __webpack_require__(9);

const PeerInfo = __webpack_require__(17);

const multiaddr = __webpack_require__(20);

const errCode = __webpack_require__(32);
/**
 * Converts the given `peer` to a `PeerInfo` instance.
 * The `PeerStore` will be checked for the resulting peer, and
 * the peer will be updated in the `PeerStore`.
 *
 * @param {PeerInfo|PeerId|Multiaddr|string} peer
 * @param {PeerStore} peerStore
 * @returns {PeerInfo}
 */


function getPeerInfo(peer, peerStore) {
  if (typeof peer === 'string') {
    peer = multiaddr(peer);
  }

  let addr;

  if (multiaddr.isMultiaddr(peer)) {
    addr = peer;

    try {
      peer = PeerId.createFromB58String(peer.getPeerId());
    } catch (err) {
      throw errCode(new Error("".concat(peer, " is not a valid peer type")), 'ERR_INVALID_MULTIADDR');
    }
  }

  if (PeerId.isPeerId(peer)) {
    peer = new PeerInfo(peer);
  }

  addr && peer.multiaddrs.add(addr);
  return peerStore ? peerStore.put(peer) : peer;
}
/**
 * If `getPeerInfo` does not return a peer with multiaddrs,
 * the `libp2p` PeerRouter will be used to attempt to find the peer.
 *
 * @async
 * @param {PeerInfo|PeerId|Multiaddr|string} peer
 * @param {Libp2p} libp2p
 * @returns {Promise<PeerInfo>}
 */


function getPeerInfoRemote(peer, libp2p) {
  let peerInfo;

  try {
    peerInfo = getPeerInfo(peer, libp2p.peerStore);
  } catch (err) {
    throw errCode(err, 'ERR_INVALID_PEER_TYPE');
  } // If we don't have an address for the peer, attempt to find it


  if (peerInfo.multiaddrs.size < 1) {
    return libp2p.peerRouting.findPeer(peerInfo.id);
  }

  return peerInfo;
}

module.exports = {
  getPeerInfoRemote,
  getPeerInfo
};

/***/ }),
/* 751 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const mergeOptions = __webpack_require__(27);

const Constants = __webpack_require__(173);

const DefaultConfig = {
  connectionManager: {
    minPeers: 25
  },
  dialer: {
    maxParallelDials: Constants.MAX_PARALLEL_DIALS,
    maxDialsPerPeer: Constants.MAX_PER_PEER_DIALS,
    dialTimeout: Constants.DIAL_TIMEOUT
  },
  metrics: {
    enabled: false
  },
  config: {
    dht: {
      enabled: false,
      kBucketSize: 20,
      randomWalk: {
        enabled: false,
        // disabled waiting for https://github.com/libp2p/js-libp2p-kad-dht/issues/86
        queriesPerPeriod: 1,
        interval: 300e3,
        timeout: 10e3
      }
    },
    peerDiscovery: {
      autoDial: true
    },
    pubsub: {
      enabled: true,
      emitSelf: true,
      signMessages: true,
      strictSigning: true
    },
    relay: {
      enabled: true,
      hop: {
        enabled: false,
        active: false
      }
    },
    transport: {}
  }
};

module.exports.validate = opts => {
  opts = mergeOptions(DefaultConfig, opts);
  if (opts.modules.transport.length < 1) throw new Error("'options.modules.transport' must contain at least 1 transport");
  return opts;
};

/***/ }),
/* 752 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const assert = __webpack_require__(13);

const mergeOptions = __webpack_require__(27);

const LatencyMonitor = __webpack_require__(753).default;

const debug = __webpack_require__(1)('libp2p:connection-manager');

const retimer = __webpack_require__(152);

const defaultOptions = {
  maxConnections: Infinity,
  minConnections: 0,
  maxData: Infinity,
  maxSentData: Infinity,
  maxReceivedData: Infinity,
  maxEventLoopDelay: Infinity,
  pollInterval: 2000,
  movingAverageInterval: 60000,
  defaultPeerValue: 1
};

class ConnectionManager {
  /**
   * @constructor
   * @param {Libp2p} libp2p
   * @param {object} options
   * @param {Number} options.maxConnections The maximum number of connections allowed. Default=Infinity
   * @param {Number} options.minConnections The minimum number of connections to avoid pruning. Default=0
   * @param {Number} options.maxData The max data (in and out), per average interval to allow. Default=Infinity
   * @param {Number} options.maxSentData The max outgoing data, per average interval to allow. Default=Infinity
   * @param {Number} options.maxReceivedData The max incoming data, per average interval to allow.. Default=Infinity
   * @param {Number} options.maxEventLoopDelay The upper limit the event loop can take to run. Default=Infinity
   * @param {Number} options.pollInterval How often, in milliseconds, metrics and latency should be checked. Default=2000
   * @param {Number} options.movingAverageInterval How often, in milliseconds, to compute averages. Default=60000
   * @param {Number} options.defaultPeerValue The value of the peer. Default=1
   */
  constructor(libp2p, options) {
    this._libp2p = libp2p;
    this._registrar = libp2p.registrar;
    this._peerId = libp2p.peerInfo.id.toB58String();
    this._options = mergeOptions.call({
      ignoreUndefined: true
    }, defaultOptions, options);
    assert(this._options.maxConnections > this._options.minConnections, 'Connection Manager maxConnections must be greater than minConnections');
    debug('options: %j', this._options);
    this._metrics = libp2p.metrics;
    this._peerValues = new Map();
    this._connections = new Map();
    this._timer = null;
    this._checkMetrics = this._checkMetrics.bind(this);
  }
  /**
   * Starts the Connection Manager. If Metrics are not enabled on libp2p
   * only event loop and connection limits will be monitored.
   */


  start() {
    if (this._metrics) {
      this._timer = this._timer || retimer(this._checkMetrics, this._options.pollInterval);
    } // latency monitor


    this._latencyMonitor = new LatencyMonitor({
      latencyCheckIntervalMs: this._options.pollInterval,
      dataEmitIntervalMs: this._options.pollInterval
    });
    this._onLatencyMeasure = this._onLatencyMeasure.bind(this);

    this._latencyMonitor.on('data', this._onLatencyMeasure);

    debug('started');
  }
  /**
   * Stops the Connection Manager
   */


  stop() {
    this._timer && this._timer.clear();
    this._latencyMonitor && this._latencyMonitor.removeListener('data', this._onLatencyMeasure);
    debug('stopped');
  }
  /**
   * Sets the value of the given peer. Peers with lower values
   * will be disconnected first.
   * @param {PeerId} peerId
   * @param {number} value A number between 0 and 1
   */


  setPeerValue(peerId, value) {
    if (value < 0 || value > 1) {
      throw new Error('value should be a number between 0 and 1');
    }

    if (peerId.toB58String) {
      peerId = peerId.toB58String();
    }

    this._peerValues.set(peerId, value);
  }
  /**
   * Checks the libp2p metrics to determine if any values have exceeded
   * the configured maximums.
   * @private
   */


  _checkMetrics() {
    const movingAverages = this._metrics.global.movingAverages;

    const received = movingAverages.dataReceived[this._options.movingAverageInterval].movingAverage();

    this._checkLimit('maxReceivedData', received);

    const sent = movingAverages.dataSent[this._options.movingAverageInterval].movingAverage();

    this._checkLimit('maxSentData', sent);

    const total = received + sent;

    this._checkLimit('maxData', total);

    debug('metrics update', total);

    this._timer.reschedule(this._options.pollInterval);
  }
  /**
   * Tracks the incoming connection and check the connection limit
   * @param {Connection} connection
   */


  onConnect(connection) {
    const peerId = connection.remotePeer.toB58String();

    this._connections.set(connection.id, connection);

    if (!this._peerValues.has(peerId)) {
      this._peerValues.set(peerId, this._options.defaultPeerValue);
    }

    this._checkLimit('maxConnections', this._connections.size);
  }
  /**
   * Removes the connection from tracking
   * @param {Connection} connection
   */


  onDisconnect(connection) {
    this._connections.delete(connection.id);

    this._peerValues.delete(connection.remotePeer.toB58String());
  }
  /**
   * If the event loop is slow, maybe close a connection
   * @private
   * @param {*} summary The LatencyMonitor summary
   */


  _onLatencyMeasure(summary) {
    this._checkLimit('maxEventLoopDelay', summary.avgMs);
  }
  /**
   * If the `value` of `name` has exceeded its limit, maybe close a connection
   * @private
   * @param {string} name The name of the field to check limits for
   * @param {number} value The current value of the field
   */


  _checkLimit(name, value) {
    const limit = this._options[name];
    debug('checking limit of %s. current value: %d of %d', name, value, limit);

    if (value > limit) {
      debug('%s: limit exceeded: %s, %d', this._peerId, name, value);

      this._maybeDisconnectOne();
    }
  }
  /**
   * If we have more connections than our maximum, close a connection
   * to the lowest valued peer.
   * @private
   */


  _maybeDisconnectOne() {
    if (this._options.minConnections < this._connections.size) {
      const peerValues = Array.from(this._peerValues).sort(byPeerValue);
      debug('%s: sorted peer values: %j', this._peerId, peerValues);
      const disconnectPeer = peerValues[0];

      if (disconnectPeer) {
        const peerId = disconnectPeer[0];
        debug('%s: lowest value peer is %s', this._peerId, peerId);
        debug('%s: closing a connection to %j', this._peerId, peerId);

        for (const connection of this._connections.values()) {
          if (connection.remotePeer.toB58String() === peerId) {
            connection.close();
            break;
          }
        }
      }
    }
  }

}

module.exports = ConnectionManager;

function byPeerValue(peerValueEntryA, peerValueEntryB) {
  return peerValueEntryA[1] - peerValueEntryB[1];
}

/***/ }),
/* 753 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable strict */


Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.default = __webpack_require__(754).default;

/***/ }),
/* 754 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var _events = __webpack_require__(11);

var _events2 = _interopRequireDefault(_events);

var _get = __webpack_require__(755);

var _get2 = _interopRequireDefault(_get);

var _isFunction = __webpack_require__(322);

var _isFunction2 = _interopRequireDefault(_isFunction);

var _VisibilityChangeEmitter = __webpack_require__(796);

var _VisibilityChangeEmitter2 = _interopRequireDefault(_VisibilityChangeEmitter);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}
/* global window */


var debug = __webpack_require__(323)('latency-monitor:LatencyMonitor');
/**
 * @typedef {Object} SummaryObject
 * @property {Number} events How many events were called
 * @property {Number} minMS What was the min time for a cb to be called
 * @property {Number} maxMS What was the max time for a cb to be called
 * @property {Number} avgMs What was the average time for a cb to be called
 * @property {Number} lengthMs How long this interval was in ms
 */

/**
 * A class to monitor latency of any async function which works in a browser or node. This works by periodically calling
 * the asyncTestFn and timing how long it takes the callback to be called. It can also periodically emit stats about this.
 * This can be disabled and stats can be pulled via setting dataEmitIntervalMs = 0.
 *
 * The default implementation is an event loop latency monitor. This works by firing periodic events into the event loop
 * and timing how long it takes to get back.
 *
 * @example
 * const monitor = new LatencyMonitor();
 * monitor.on('data', (summary) => console.log('Event Loop Latency: %O', summary));
 *
 * @example
 * const monitor = new LatencyMonitor({latencyCheckIntervalMs: 1000, dataEmitIntervalMs: 60000, asyncTestFn:ping});
 * monitor.on('data', (summary) => console.log('Ping Pong Latency: %O', summary));
 */


var LatencyMonitor = function (_EventEmitter) {
  _inherits(LatencyMonitor, _EventEmitter);
  /**
   * @param {Number} [latencyCheckIntervalMs=500] How often to add a latency check event (ms)
   * @param {Number} [dataEmitIntervalMs=5000] How often to summarize latency check events. null or 0 disables event firing
   * @param {function} [asyncTestFn] What cb-style async function to use
   * @param {Number} [latencyRandomPercentage=5] What percent (+/-) of latencyCheckIntervalMs should we randomly use? This helps avoid alignment to other events.
   */


  function LatencyMonitor() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        latencyCheckIntervalMs = _ref.latencyCheckIntervalMs,
        dataEmitIntervalMs = _ref.dataEmitIntervalMs,
        asyncTestFn = _ref.asyncTestFn,
        latencyRandomPercentage = _ref.latencyRandomPercentage;

    _classCallCheck(this, LatencyMonitor);

    var _this = _possibleConstructorReturn(this, (LatencyMonitor.__proto__ || Object.getPrototypeOf(LatencyMonitor)).call(this));

    var that = _this; // 0 isn't valid here, so its ok to use ||

    that.latencyCheckIntervalMs = latencyCheckIntervalMs || 500; // 0.5s

    that.latencyRandomPercentage = latencyRandomPercentage || 10;
    that._latecyCheckMultiply = 2 * (that.latencyRandomPercentage / 100.0) * that.latencyCheckIntervalMs;
    that._latecyCheckSubtract = that._latecyCheckMultiply / 2;
    that.dataEmitIntervalMs = dataEmitIntervalMs === null || dataEmitIntervalMs === 0 ? undefined : dataEmitIntervalMs || 5 * 1000; // 5s

    debug('latencyCheckIntervalMs: %s dataEmitIntervalMs: %s', that.latencyCheckIntervalMs, that.dataEmitIntervalMs);

    if (that.dataEmitIntervalMs) {
      debug('Expecting ~%s events per summary', that.latencyCheckIntervalMs / that.dataEmitIntervalMs);
    } else {
      debug('Not emitting summaries');
    }

    that.asyncTestFn = asyncTestFn; // If there is no asyncFn, we measure latency
    // If process: use high resolution timer

    if (process && process.hrtime) {
      debug('Using process.hrtime for timing');
      that.now = process.hrtime;

      that.getDeltaMS = function (startTime) {
        var hrtime = that.now(startTime);
        return hrtime[0] * 1000 + hrtime[1] / 1000000;
      }; // Let's try for a timer that only monotonically increases

    } else if (typeof window !== 'undefined' && (0, _get2.default)(window, 'performance.now')) {
      debug('Using performance.now for timing');
      that.now = window.performance.now.bind(window.performance);

      that.getDeltaMS = function (startTime) {
        return Math.round(that.now() - startTime);
      };
    } else {
      debug('Using Date.now for timing');
      that.now = Date.now;

      that.getDeltaMS = function (startTime) {
        return that.now() - startTime;
      };
    }

    that._latencyData = that._initLatencyData(); // We check for isBrowser because of browsers set max rates of timeouts when a page is hidden,
    // so we fall back to another library
    // See: http://stackoverflow.com/questions/6032429/chrome-timeouts-interval-suspended-in-background-tabs

    if (isBrowser()) {
      that._visibilityChangeEmitter = new _VisibilityChangeEmitter2.default();

      that._visibilityChangeEmitter.on('visibilityChange', function (pageInFocus) {
        if (pageInFocus) {
          that._startTimers();
        } else {
          that._emitSummary();

          that._stopTimers();
        }
      });
    }

    if (!that._visibilityChangeEmitter || that._visibilityChangeEmitter.isVisible()) {
      that._startTimers();
    }

    return _this;
  }
  /**
   * Start internal timers
   * @private
   */


  _createClass(LatencyMonitor, [{
    key: '_startTimers',
    value: function _startTimers() {
      var _this2 = this; // Timer already started, ignore this


      if (this._checkLatencyID) {
        return;
      }

      this._checkLatency();

      if (this.dataEmitIntervalMs) {
        this._emitIntervalID = setInterval(function () {
          return _this2._emitSummary();
        }, this.dataEmitIntervalMs);

        if ((0, _isFunction2.default)(this._emitIntervalID.unref)) {
          this._emitIntervalID.unref(); // Doesn't block exit

        }
      }
    }
    /**
     * Stop internal timers
     * @private
     */

  }, {
    key: '_stopTimers',
    value: function _stopTimers() {
      if (this._checkLatencyID) {
        clearTimeout(this._checkLatencyID);
        this._checkLatencyID = undefined;
      }

      if (this._emitIntervalID) {
        clearInterval(this._emitIntervalID);
        this._emitIntervalID = undefined;
      }
    }
    /**
     * Emit summary only if there were events. It might not have any events if it was forced via a page hidden/show
     * @private
     */

  }, {
    key: '_emitSummary',
    value: function _emitSummary() {
      var summary = this.getSummary();

      if (summary.events > 0) {
        this.emit('data', summary);
      }
    }
    /**
     * Calling this function will end the collection period. If a timing event was already fired and somewhere in the queue,
     * it will not count for this time period
     * @returns {SummaryObject}
     */

  }, {
    key: 'getSummary',
    value: function getSummary() {
      // We might want to adjust for the number of expected events
      // Example: first 1 event it comes back, then such a long blocker that the next emit check comes
      // Then this fires - looks like no latency!!
      var latency = {
        events: this._latencyData.events,
        minMs: this._latencyData.minMs,
        maxMs: this._latencyData.maxMs,
        avgMs: this._latencyData.events ? this._latencyData.totalMs / this._latencyData.events : Number.POSITIVE_INFINITY,
        lengthMs: this.getDeltaMS(this._latencyData.startTime)
      };
      this._latencyData = this._initLatencyData(); // Clear

      debug('Summary: %O', latency);
      return latency;
    }
    /**
     * Randomly calls an async fn every roughly latencyCheckIntervalMs (plus some randomness). If no async fn is found,
     * it will simply report on event loop latency.
     *
     * @private
     */

  }, {
    key: '_checkLatency',
    value: function _checkLatency() {
      var _this3 = this;

      var that = this; // Randomness is needed to avoid alignment by accident to regular things in the event loop

      var randomness = Math.random() * that._latecyCheckMultiply - that._latecyCheckSubtract; // We use this to ensure that in case some overlap somehow, we don't take the wrong startTime/offset


      var localData = {
        deltaOffset: Math.ceil(that.latencyCheckIntervalMs + randomness),
        startTime: that.now()
      };

      var cb = function cb() {
        // We are already stopped, ignore this datapoint
        if (!_this3._checkLatencyID) {
          return;
        }

        var deltaMS = that.getDeltaMS(localData.startTime) - localData.deltaOffset;

        that._checkLatency(); // Start again ASAP
        // Add the data point. If this gets complex, refactor it


        that._latencyData.events++;
        that._latencyData.minMs = Math.min(that._latencyData.minMs, deltaMS);
        that._latencyData.maxMs = Math.max(that._latencyData.maxMs, deltaMS);
        that._latencyData.totalMs += deltaMS;
        debug('MS: %s Data: %O', deltaMS, that._latencyData);
      };

      debug('localData: %O', localData);
      this._checkLatencyID = setTimeout(function () {
        // This gets rid of including event loop
        if (that.asyncTestFn) {
          // Clear timing related things
          localData.deltaOffset = 0;
          localData.startTime = that.now();
          that.asyncTestFn(cb);
        } else {
          // setTimeout is not more accurate than 1ms, so this will ensure positive numbers. Add 1 to emitted data to remove.
          // This is not the best, but for now it'll be just fine. This isn't meant to be sub ms accurate.
          localData.deltaOffset -= 1; // If there is no function to test, we mean check latency which is a special case that is really cb => cb()
          // We avoid that for the few extra function all overheads. Also, we want to keep the timers different

          cb();
        }
      }, localData.deltaOffset);

      if ((0, _isFunction2.default)(this._checkLatencyID.unref)) {
        this._checkLatencyID.unref(); // Doesn't block exit

      }
    }
  }, {
    key: '_initLatencyData',
    value: function _initLatencyData() {
      return {
        startTime: this.now(),
        minMs: Number.POSITIVE_INFINITY,
        maxMs: Number.NEGATIVE_INFINITY,
        events: 0,
        totalMs: 0
      };
    }
  }]);

  return LatencyMonitor;
}(_events2.default);

function isBrowser() {
  return typeof window !== 'undefined';
}

exports.default = LatencyMonitor;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5)))

/***/ }),
/* 755 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var baseGet = __webpack_require__(756);
/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */


function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

module.exports = get;

/***/ }),
/* 756 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var castPath = __webpack_require__(757),
    toKey = __webpack_require__(795);
/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */


function baseGet(object, path) {
  path = castPath(path, object);
  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }

  return index && index == length ? object : undefined;
}

module.exports = baseGet;

/***/ }),
/* 757 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isArray = __webpack_require__(113),
    isKey = __webpack_require__(758),
    stringToPath = __webpack_require__(763),
    toString = __webpack_require__(792);
/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */


function castPath(value, object) {
  if (isArray(value)) {
    return value;
  }

  return isKey(value, object) ? [value] : stringToPath(toString(value));
}

module.exports = castPath;

/***/ }),
/* 758 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isArray = __webpack_require__(113),
    isSymbol = __webpack_require__(174);
/** Used to match property names within property paths. */


var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;
/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */

function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }

  var type = typeof value;

  if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
    return true;
  }

  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
}

module.exports = isKey;

/***/ }),
/* 759 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
module.exports = freeGlobal;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(8)))

/***/ }),
/* 760 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Symbol = __webpack_require__(175);
/** Used for built-in method references. */


var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */

var nativeObjectToString = objectProto.toString;
/** Built-in value references. */

var symToStringTag = Symbol ? Symbol.toStringTag : undefined;
/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */

function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);

  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }

  return result;
}

module.exports = getRawTag;

/***/ }),
/* 761 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/** Used for built-in method references. */
var objectProto = Object.prototype;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */

var nativeObjectToString = objectProto.toString;
/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */

function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;

/***/ }),
/* 762 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;

/***/ }),
/* 763 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var memoizeCapped = __webpack_require__(764);
/** Used to match property names within property paths. */


var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
/** Used to match backslashes in property paths. */

var reEscapeChar = /\\(\\)?/g;
/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */

var stringToPath = memoizeCapped(function (string) {
  var result = [];

  if (string.charCodeAt(0) === 46
  /* . */
  ) {
      result.push('');
    }

  string.replace(rePropName, function (match, number, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);
  });
  return result;
});
module.exports = stringToPath;

/***/ }),
/* 764 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var memoize = __webpack_require__(765);
/** Used as the maximum memoize cache size. */


var MAX_MEMOIZE_SIZE = 500;
/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */

function memoizeCapped(func) {
  var result = memoize(func, function (key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }

    return key;
  });
  var cache = result.cache;
  return result;
}

module.exports = memoizeCapped;

/***/ }),
/* 765 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var MapCache = __webpack_require__(766);
/** Error message constants. */


var FUNC_ERROR_TEXT = 'Expected a function';
/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */

function memoize(func, resolver) {
  if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }

  var memoized = function memoized() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }

    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };

  memoized.cache = new (memoize.Cache || MapCache)();
  return memoized;
} // Expose `MapCache`.


memoize.Cache = MapCache;
module.exports = memoize;

/***/ }),
/* 766 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var mapCacheClear = __webpack_require__(767),
    mapCacheDelete = __webpack_require__(787),
    mapCacheGet = __webpack_require__(789),
    mapCacheHas = __webpack_require__(790),
    mapCacheSet = __webpack_require__(791);
/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */


function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;
  this.clear();

  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
} // Add methods to `MapCache`.


MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;
module.exports = MapCache;

/***/ }),
/* 767 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Hash = __webpack_require__(768),
    ListCache = __webpack_require__(779),
    Map = __webpack_require__(786);
/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */


function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash(),
    'map': new (Map || ListCache)(),
    'string': new Hash()
  };
}

module.exports = mapCacheClear;

/***/ }),
/* 768 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var hashClear = __webpack_require__(769),
    hashDelete = __webpack_require__(775),
    hashGet = __webpack_require__(776),
    hashHas = __webpack_require__(777),
    hashSet = __webpack_require__(778);
/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */


function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;
  this.clear();

  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
} // Add methods to `Hash`.


Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;
module.exports = Hash;

/***/ }),
/* 769 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var nativeCreate = __webpack_require__(114);
/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */


function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

module.exports = hashClear;

/***/ }),
/* 770 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isFunction = __webpack_require__(322),
    isMasked = __webpack_require__(771),
    isObject = __webpack_require__(177),
    toSource = __webpack_require__(773);
/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */


var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
/** Used to detect host constructors (Safari). */

var reIsHostCtor = /^\[object .+?Constructor\]$/;
/** Used for built-in method references. */

var funcProto = Function.prototype,
    objectProto = Object.prototype;
/** Used to resolve the decompiled source of functions. */

var funcToString = funcProto.toString;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/** Used to detect if a method is native. */

var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */

function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }

  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

module.exports = baseIsNative;

/***/ }),
/* 771 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var coreJsData = __webpack_require__(772);
/** Used to detect methods masquerading as native. */


var maskSrcKey = function () {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? 'Symbol(src)_1.' + uid : '';
}();
/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */


function isMasked(func) {
  return !!maskSrcKey && maskSrcKey in func;
}

module.exports = isMasked;

/***/ }),
/* 772 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var root = __webpack_require__(176);
/** Used to detect overreaching core-js shims. */


var coreJsData = root['__core-js_shared__'];
module.exports = coreJsData;

/***/ }),
/* 773 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/** Used for built-in method references. */
var funcProto = Function.prototype;
/** Used to resolve the decompiled source of functions. */

var funcToString = funcProto.toString;
/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */

function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}

    try {
      return func + '';
    } catch (e) {}
  }

  return '';
}

module.exports = toSource;

/***/ }),
/* 774 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

module.exports = getValue;

/***/ }),
/* 775 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = hashDelete;

/***/ }),
/* 776 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var nativeCreate = __webpack_require__(114);
/** Used to stand-in for `undefined` hash values. */


var HASH_UNDEFINED = '__lodash_hash_undefined__';
/** Used for built-in method references. */

var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */

function hashGet(key) {
  var data = this.__data__;

  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }

  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

module.exports = hashGet;

/***/ }),
/* 777 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var nativeCreate = __webpack_require__(114);
/** Used for built-in method references. */


var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}

module.exports = hashHas;

/***/ }),
/* 778 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var nativeCreate = __webpack_require__(114);
/** Used to stand-in for `undefined` hash values. */


var HASH_UNDEFINED = '__lodash_hash_undefined__';
/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */

function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
  return this;
}

module.exports = hashSet;

/***/ }),
/* 779 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var listCacheClear = __webpack_require__(780),
    listCacheDelete = __webpack_require__(781),
    listCacheGet = __webpack_require__(783),
    listCacheHas = __webpack_require__(784),
    listCacheSet = __webpack_require__(785);
/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */


function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;
  this.clear();

  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
} // Add methods to `ListCache`.


ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;
module.exports = ListCache;

/***/ }),
/* 780 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

module.exports = listCacheClear;

/***/ }),
/* 781 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assocIndexOf = __webpack_require__(115);
/** Used for built-in method references. */


var arrayProto = Array.prototype;
/** Built-in value references. */

var splice = arrayProto.splice;
/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */

function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }

  var lastIndex = data.length - 1;

  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }

  --this.size;
  return true;
}

module.exports = listCacheDelete;

/***/ }),
/* 782 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || value !== value && other !== other;
}

module.exports = eq;

/***/ }),
/* 783 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assocIndexOf = __webpack_require__(115);
/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */


function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);
  return index < 0 ? undefined : data[index][1];
}

module.exports = listCacheGet;

/***/ }),
/* 784 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assocIndexOf = __webpack_require__(115);
/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */


function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

module.exports = listCacheHas;

/***/ }),
/* 785 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assocIndexOf = __webpack_require__(115);
/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */


function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }

  return this;
}

module.exports = listCacheSet;

/***/ }),
/* 786 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var getNative = __webpack_require__(321),
    root = __webpack_require__(176);
/* Built-in method references that are verified to be native. */


var Map = getNative(root, 'Map');
module.exports = Map;

/***/ }),
/* 787 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var getMapData = __webpack_require__(116);
/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */


function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = mapCacheDelete;

/***/ }),
/* 788 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
}

module.exports = isKeyable;

/***/ }),
/* 789 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var getMapData = __webpack_require__(116);
/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */


function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

module.exports = mapCacheGet;

/***/ }),
/* 790 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var getMapData = __webpack_require__(116);
/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */


function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

module.exports = mapCacheHas;

/***/ }),
/* 791 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var getMapData = __webpack_require__(116);
/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */


function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;
  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

module.exports = mapCacheSet;

/***/ }),
/* 792 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var baseToString = __webpack_require__(793);
/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */


function toString(value) {
  return value == null ? '' : baseToString(value);
}

module.exports = toString;

/***/ }),
/* 793 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Symbol = __webpack_require__(175),
    arrayMap = __webpack_require__(794),
    isArray = __webpack_require__(113),
    isSymbol = __webpack_require__(174);
/** Used as references for various `Number` constants. */


var INFINITY = 1 / 0;
/** Used to convert symbols to primitives and strings. */

var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;
/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */

function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }

  if (isArray(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return arrayMap(value, baseToString) + '';
  }

  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }

  var result = value + '';
  return result == '0' && 1 / value == -INFINITY ? '-0' : result;
}

module.exports = baseToString;

/***/ }),
/* 794 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }

  return result;
}

module.exports = arrayMap;

/***/ }),
/* 795 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isSymbol = __webpack_require__(174);
/** Used as references for various `Number` constants. */


var INFINITY = 1 / 0;
/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */

function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }

  var result = value + '';
  return result == '0' && 1 / value == -INFINITY ? '-0' : result;
}

module.exports = toKey;

/***/ }),
/* 796 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var _events = __webpack_require__(11);

var _events2 = _interopRequireDefault(_events);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}
/* global document */


var debug = __webpack_require__(323)('latency-monitor:VisibilityChangeEmitter');
/**
 * Listen to page visibility change events (i.e. when the page is focused / blurred) by an event emitter.
 *
 * Warning: This does not work on all browsers, but should work on all modern browsers
 *
 * @example
 *
 *     const myVisibilityEmitter = new VisibilityChangeEmitter();
 *
 *     myVisibilityEmitter.on('visibilityChange', (pageInFocus) => {
 *        if ( pageInFocus ){
 *            // Page is in focus
 *            console.log('In focus');
 *        }
 *        else {
 *            // Page is blurred
 *            console.log('Out of focus');
 *        }
 *     });
 *     // To access the visibility state directly, call:
 *     console.log('Am I focused now? ' + myVisibilityEmitter.isVisible());
 *
 * @class VisibilityChangeEmitter
 */


var VisibilityChangeEmitter = function (_EventEmitter) {
  _inherits(VisibilityChangeEmitter, _EventEmitter);
  /**
   * Creates a VisibilityChangeEmitter
   */


  function VisibilityChangeEmitter() {
    _classCallCheck(this, VisibilityChangeEmitter);

    var _this = _possibleConstructorReturn(this, (VisibilityChangeEmitter.__proto__ || Object.getPrototypeOf(VisibilityChangeEmitter)).call(this));

    if (typeof document === 'undefined') {
      debug('This is not a browser, no "document" found. Stopping.');
      return _possibleConstructorReturn(_this);
    }

    _this._initializeVisibilityVarNames();

    _this._addVisibilityChangeListener();

    return _this;
  }
  /**
   * document.hidden and document.visibilityChange are the two variables we need to check for;
   * Since these variables are named differently in different browsers, this function sets
   * the appropriate name based on the browser being used. Once executed, tha actual names of
   * document.hidden and document.visibilityChange are found in this._hidden and this._visibilityChange
   * respectively
   * @private
   */


  _createClass(VisibilityChangeEmitter, [{
    key: '_initializeVisibilityVarNames',
    value: function _initializeVisibilityVarNames() {
      var hidden = void 0;
      var visibilityChange = void 0;

      if (typeof document.hidden !== 'undefined') {
        // Opera 12.10 and Firefox 18 and later support
        hidden = 'hidden';
        visibilityChange = 'visibilitychange';
      } else if (typeof document.mozHidden !== 'undefined') {
        hidden = 'mozHidden';
        visibilityChange = 'mozvisibilitychange';
      } else if (typeof document.msHidden !== 'undefined') {
        hidden = 'msHidden';
        visibilityChange = 'msvisibilitychange';
      } else if (typeof document.webkitHidden !== 'undefined') {
        hidden = 'webkitHidden';
        visibilityChange = 'webkitvisibilitychange';
      }

      this._hidden = hidden;
      this._visibilityChange = visibilityChange;
    }
    /**
     * Adds an event listener on the document that listens to changes in document.visibilityChange
     * (or whatever name by which the visibilityChange variable is known in the browser)
     * @private
     */

  }, {
    key: '_addVisibilityChangeListener',
    value: function _addVisibilityChangeListener() {
      if (typeof document.addEventListener === 'undefined' || typeof document[this._hidden] === 'undefined') {
        debug('Checking page visibility requires a browser that supports the Page Visibility API.');
      } else {
        // Handle page visibility change
        document.addEventListener(this._visibilityChange, this._handleVisibilityChange.bind(this), false);
      }
    }
    /**
     * The function returns ```true``` if the page is visible or ```false``` if the page is not visible and
     * ```undefined``` if the page visibility API is not supported by the browser.
     * @returns {Boolean|void} whether the page is now visible or not (undefined is unknown)
     */

  }, {
    key: 'isVisible',
    value: function isVisible() {
      if (this._hidden === undefined || document[this._hidden] === undefined) {
        return undefined;
      }

      return !document[this._hidden];
    }
    /**
     * The function that is called when document.visibilityChange has changed
     * It emits an event called visibilityChange and sends the value of document.hidden as a
     * parameter
     *
     * @private
     */

  }, {
    key: '_handleVisibilityChange',
    value: function _handleVisibilityChange() {
      var visible = !document[this._hidden];
      debug(visible ? 'Page Visible' : 'Page Hidden'); // Emit the event

      this.emit('visibilityChange', visible);
    }
  }]);

  return VisibilityChangeEmitter;
}(_events2.default);

exports.default = VisibilityChangeEmitter;

/***/ }),
/* 797 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */
exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = __webpack_require__(798);
/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];
/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */

exports.formatters = {};
/**
 * Previous log timestamp.
 */

var prevTime;
/**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */

function selectColor(namespace) {
  var hash = 0,
      i;

  for (i in namespace) {
    hash = (hash << 5) - hash + namespace.charCodeAt(i);
    hash |= 0; // Convert to 32bit integer
  }

  return exports.colors[Math.abs(hash) % exports.colors.length];
}
/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */


function createDebug(namespace) {
  function debug() {
    // disabled?
    if (!debug.enabled) return;
    var self = debug; // set `diff` timestamp

    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr; // turn the `arguments` into a proper Array

    var args = new Array(arguments.length);

    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %O
      args.unshift('%O');
    } // apply any `formatters` transformations


    var index = 0;
    args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];

      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val); // now we need to remove `args[index]` since it's inlined in the `format`

        args.splice(index, 1);
        index--;
      }

      return match;
    }); // apply env-specific formatting (colors, etc.)

    exports.formatArgs.call(self, args);
    var logFn = debug.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }

  debug.namespace = namespace;
  debug.enabled = exports.enabled(namespace);
  debug.useColors = exports.useColors();
  debug.color = selectColor(namespace); // env-specific initialization logic for debug instances

  if ('function' === typeof exports.init) {
    exports.init(debug);
  }

  return debug;
}
/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */


function enable(namespaces) {
  exports.save(namespaces);
  exports.names = [];
  exports.skips = [];
  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
  var len = split.length;

  for (var i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings

    namespaces = split[i].replace(/\*/g, '.*?');

    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }
}
/**
 * Disable debug output.
 *
 * @api public
 */


function disable() {
  exports.enable('');
}
/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */


function enabled(name) {
  var i, len;

  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }

  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }

  return false;
}
/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */


function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}

/***/ }),
/* 798 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Helpers.
 */
var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;
/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function (val, options) {
  options = options || {};
  var type = typeof val;

  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }

  throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
};
/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */


function parse(str) {
  str = String(str);

  if (str.length > 100) {
    return;
  }

  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);

  if (!match) {
    return;
  }

  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();

  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;

    case 'days':
    case 'day':
    case 'd':
      return n * d;

    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;

    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;

    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;

    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;

    default:
      return undefined;
  }
}
/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */


function fmtShort(ms) {
  if (ms >= d) {
    return Math.round(ms / d) + 'd';
  }

  if (ms >= h) {
    return Math.round(ms / h) + 'h';
  }

  if (ms >= m) {
    return Math.round(ms / m) + 'm';
  }

  if (ms >= s) {
    return Math.round(ms / s) + 's';
  }

  return ms + 'ms';
}
/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */


function fmtLong(ms) {
  return plural(ms, d, 'day') || plural(ms, h, 'hour') || plural(ms, m, 'minute') || plural(ms, s, 'second') || ms + ' ms';
}
/**
 * Pluralization helper.
 */


function plural(ms, n, name) {
  if (ms < n) {
    return;
  }

  if (ms < n * 1.5) {
    return Math.floor(ms / n) + ' ' + name;
  }

  return Math.ceil(ms / n) + ' ' + name + 's';
}

/***/ }),
/* 799 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const mafmt = __webpack_require__(56);

const multiaddr = __webpack_require__(20);

const PeerId = __webpack_require__(9);

const PeerInfo = __webpack_require__(17);

const withIs = __webpack_require__(21);

const {
  CircuitRelay: CircuitPB
} = __webpack_require__(85);

const debug = __webpack_require__(1);

const log = debug('libp2p:circuit');
log.error = debug('libp2p:circuit:error');

const {
  relay: multicodec
} = __webpack_require__(178);

const createListener = __webpack_require__(800);

const {
  handleCanHop,
  handleHop,
  hop
} = __webpack_require__(801);

const {
  handleStop
} = __webpack_require__(326);

const StreamHandler = __webpack_require__(179);

const toConnection = __webpack_require__(802);

class Circuit {
  /**
   * Creates an instance of Circuit.
   *
   * @constructor
   * @param {object} options
   * @param {Libp2p} options.libp2p
   * @param {Upgrader} options.upgrader
   */
  constructor({
    libp2p,
    upgrader
  }) {
    this._dialer = libp2p.dialer;
    this._registrar = libp2p.registrar;
    this._upgrader = upgrader;
    this._options = libp2p._config.relay;
    this.peerInfo = libp2p.peerInfo;

    this._registrar.handle(multicodec, this._onProtocol.bind(this));
  }

  async _onProtocol({
    connection,
    stream,
    protocol
  }) {
    const streamHandler = new StreamHandler({
      stream
    });
    const request = await streamHandler.read();
    const circuit = this;
    let virtualConnection;

    switch (request.type) {
      case CircuitPB.Type.CAN_HOP:
        {
          log('received CAN_HOP request from %s', connection.remotePeer.toB58String());
          await handleCanHop({
            circuit,
            connection,
            streamHandler
          });
          break;
        }

      case CircuitPB.Type.HOP:
        {
          log('received HOP request from %s', connection.remotePeer.toB58String());
          virtualConnection = await handleHop({
            connection,
            request,
            streamHandler,
            circuit
          });
          break;
        }

      case CircuitPB.Type.STOP:
        {
          log('received STOP request from %s', connection.remotePeer.toB58String());
          virtualConnection = await handleStop({
            connection,
            request,
            streamHandler,
            circuit
          });
          break;
        }

      default:
        {
          log('Request of type %s not supported', request.type);
        }
    }

    if (virtualConnection) {
      const remoteAddr = multiaddr(request.dstPeer.addrs[0]);
      const localAddr = multiaddr(request.srcPeer.addrs[0]);
      const maConn = toConnection({
        stream: virtualConnection,
        remoteAddr,
        localAddr
      });
      const type = CircuitPB.Type === CircuitPB.Type.HOP ? 'relay' : 'inbound';
      log('new %s connection %s', type, maConn.remoteAddr);
      const conn = await this._upgrader.upgradeInbound(maConn);
      log('%s connection %s upgraded', type, maConn.remoteAddr);
      this.handler && this.handler(conn);
    }
  }
  /**
   * Dial a peer over a relay
   *
   * @param {multiaddr} ma - the multiaddr of the peer to dial
   * @param {Object} options - dial options
   * @param {AbortSignal} [options.signal] - An optional abort signal
   * @returns {Connection} - the connection
   */


  async dial(ma, options) {
    // Check the multiaddr to see if it contains a relay and a destination peer
    const addrs = ma.toString().split('/p2p-circuit');
    const relayAddr = multiaddr(addrs[0]);
    const destinationAddr = multiaddr(addrs[addrs.length - 1]);
    const relayPeer = PeerId.createFromCID(relayAddr.getPeerId());
    const destinationPeer = PeerId.createFromCID(destinationAddr.getPeerId());
    let disconnectOnFailure = false;

    let relayConnection = this._registrar.getConnection(new PeerInfo(relayPeer));

    if (!relayConnection) {
      relayConnection = await this._dialer.connectToPeer(relayAddr, options);
      disconnectOnFailure = true;
    }

    try {
      const virtualConnection = await hop({
        connection: relayConnection,
        circuit: this,
        request: {
          type: CircuitPB.Type.HOP,
          srcPeer: {
            id: this.peerInfo.id.toBytes(),
            addrs: this.peerInfo.multiaddrs.toArray().map(addr => addr.buffer)
          },
          dstPeer: {
            id: destinationPeer.toBytes(),
            addrs: [multiaddr(destinationAddr).buffer]
          }
        }
      });
      const localAddr = relayAddr.encapsulate("/p2p-circuit/p2p/".concat(this.peerInfo.id.toB58String()));
      const maConn = toConnection({
        stream: virtualConnection,
        remoteAddr: ma,
        localAddr
      });
      log('new outbound connection %s', maConn.remoteAddr);
      return this._upgrader.upgradeOutbound(maConn);
    } catch (err) {
      log.error('Circuit relay dial failed', err);
      disconnectOnFailure && (await relayConnection.close());
      throw err;
    }
  }
  /**
   * Create a listener
   *
   * @param {any} options
   * @param {Function} handler
   * @return {listener}
   */


  createListener(options, handler) {
    if (typeof options === 'function') {
      handler = options;
      options = {};
    } // Called on successful HOP and STOP requests


    this.handler = handler;
    return createListener(this, options);
  }
  /**
   * Filter check for all Multiaddrs that this transport can dial on
   *
   * @param {Array<Multiaddr>} multiaddrs
   * @returns {Array<Multiaddr>}
   */


  filter(multiaddrs) {
    multiaddrs = Array.isArray(multiaddrs) ? multiaddrs : [multiaddrs];
    return multiaddrs.filter(ma => {
      return mafmt.Circuit.matches(ma);
    });
  }

}
/**
 * @type {Circuit}
 */


module.exports = withIs(Circuit, {
  className: 'Circuit',
  symbolName: '@libp2p/js-libp2p-circuit/circuit'
});

/***/ }),
/* 800 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const EventEmitter = __webpack_require__(11);

const multiaddr = __webpack_require__(20);

const debug = __webpack_require__(1);

const log = debug('libp2p:circuit:listener');
log.err = debug('libp2p:circuit:error:listener');
/**
 * @param {*} circuit
 * @returns {Listener} a transport listener
 */

module.exports = circuit => {
  const listener = new EventEmitter();
  const listeningAddrs = new Map();
  /**
   * Add swarm handler and listen for incoming connections
   *
   * @param {Multiaddr} addr
   * @return {void}
   */

  listener.listen = async addr => {
    const [addrString] = String(addr).split('/p2p-circuit').slice(-1);
    const relayConn = await circuit._dialer.connectToPeer(multiaddr(addrString));
    const relayedAddr = relayConn.remoteAddr.encapsulate('/p2p-circuit');
    listeningAddrs.set(relayConn.remotePeer.toB58String(), relayedAddr);
    listener.emit('listening');
  };
  /**
   * TODO: Remove the peers from our topology
   *
   * @return {void}
   */


  listener.close = () => {};
  /**
   * Get fixed up multiaddrs
   *
   * NOTE: This method will grab the peers multiaddrs and expand them such that:
   *
   * a) If it's an existing /p2p-circuit address for a specific relay i.e.
   *    `/ip4/0.0.0.0/tcp/0/ipfs/QmRelay/p2p-circuit` this method will expand the
   *    address to `/ip4/0.0.0.0/tcp/0/ipfs/QmRelay/p2p-circuit/ipfs/QmPeer` where
   *    `QmPeer` is this peers id
   * b) If it's not a /p2p-circuit address, it will encapsulate the address as a /p2p-circuit
   *    addr, such when dialing over a relay with this address, it will create the circuit using
   *    the encapsulated transport address. This is useful when for example, a peer should only
   *    be dialed over TCP rather than any other transport
   *
   * @return {Multiaddr[]}
   */


  listener.getAddrs = () => {
    const addrs = [];

    for (const addr of listeningAddrs.values()) {
      addrs.push(addr);
    }

    return addrs;
  };

  return listener;
};

/***/ }),
/* 801 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const debug = __webpack_require__(1);

const PeerInfo = __webpack_require__(17);

const PeerId = __webpack_require__(9);

const {
  validateAddrs
} = __webpack_require__(324);

const StreamHandler = __webpack_require__(179);

const {
  CircuitRelay: CircuitPB
} = __webpack_require__(85);

const pipe = __webpack_require__(23);

const errCode = __webpack_require__(32);

const {
  codes: Errors
} = __webpack_require__(43);

const {
  stop
} = __webpack_require__(326);

const multicodec = __webpack_require__(178);

const log = debug('libp2p:circuit:hop');
log.error = debug('libp2p:circuit:hop:error');

module.exports.handleHop = async function handleHop({
  connection,
  request,
  streamHandler,
  circuit
}) {
  // Ensure hop is enabled
  if (!circuit._options.hop.enabled) {
    log('HOP request received but we are not acting as a relay');
    return streamHandler.end({
      type: CircuitPB.Type.STATUS,
      code: CircuitPB.Status.HOP_CANT_SPEAK_RELAY
    });
  } // Validate the HOP request has the required input


  try {
    validateAddrs(request, streamHandler);
  } catch (err) {
    return log.error('invalid hop request via peer %s', connection.remotePeer.toB58String(), err);
  } // Get the connection to the destination (stop) peer


  const destinationPeer = new PeerId(request.dstPeer.id);

  const destinationConnection = circuit._registrar.getConnection(new PeerInfo(destinationPeer));

  if (!destinationConnection && !circuit._options.hop.active) {
    log('HOP request received but we are not connected to the destination peer');
    return streamHandler.end({
      type: CircuitPB.Type.STATUS,
      code: CircuitPB.Status.HOP_NO_CONN_TO_DST
    });
  } // TODO: Handle being an active relay
  // Handle the incoming HOP request by performing a STOP request


  const stopRequest = {
    type: CircuitPB.Type.STOP,
    dstPeer: request.dstPeer,
    srcPeer: request.srcPeer
  };
  let destinationStream;

  try {
    destinationStream = await stop({
      connection: destinationConnection,
      request: stopRequest,
      circuit
    });
  } catch (err) {
    return log.error(err);
  }

  log('hop request from %s is valid', connection.remotePeer.toB58String());
  streamHandler.write({
    type: CircuitPB.Type.STATUS,
    code: CircuitPB.Status.SUCCESS
  });
  const sourceStream = streamHandler.rest(); // Short circuit the two streams to create the relayed connection

  return pipe(sourceStream, destinationStream, sourceStream);
};
/**
 * Performs a HOP request to a relay peer, to request a connection to another
 * peer. A new, virtual, connection will be created between the two via the relay.
 *
 * @param {object} options
 * @param {Connection} options.connection Connection to the relay
 * @param {*} options.request
 * @param {Circuit} options.circuit
 * @returns {Promise<Connection>}
 */


module.exports.hop = async function hop({
  connection,
  request
}) {
  // Create a new stream to the relay
  const {
    stream
  } = await connection.newStream([multicodec.relay]); // Send the HOP request

  const streamHandler = new StreamHandler({
    stream
  });
  streamHandler.write(request);
  const response = await streamHandler.read();

  if (response.code === CircuitPB.Status.SUCCESS) {
    log('hop request was successful');
    return streamHandler.rest();
  }

  log('hop request failed with code %d, closing stream', response.code);
  streamHandler.close();
  throw errCode(new Error("HOP request failed with code ".concat(response.code)), Errors.ERR_HOP_REQUEST_FAILED);
};
/**
 * Creates an unencoded CAN_HOP response based on the Circuits configuration
 * @private
 */


module.exports.handleCanHop = function handleCanHop({
  connection,
  streamHandler,
  circuit
}) {
  const canHop = circuit._options.hop.enabled;
  log('can hop (%s) request from %s', canHop, connection.remotePeer.toB58String());
  streamHandler.end({
    type: CircuitPB.Type.STATUS,
    code: canHop ? CircuitPB.Status.SUCCESS : CircuitPB.Status.HOP_CANT_SPEAK_RELAY
  });
};

/***/ }),
/* 802 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const abortable = __webpack_require__(180);

const log = __webpack_require__(1)('libp2p:circuit:stream'); // Convert a duplex iterable into a MultiaddrConnection
// https://github.com/libp2p/interface-transport#multiaddrconnection


module.exports = ({
  stream,
  remoteAddr,
  localAddr
}, options = {}) => {
  const {
    sink,
    source
  } = stream;
  const maConn = {
    async sink(source) {
      if (options.signal) {
        source = abortable(source, options.signal);
      }

      try {
        await sink(source);
      } catch (err) {
        // If aborted we can safely ignore
        if (err.type !== 'aborted') {
          // If the source errored the socket will already have been destroyed by
          // toIterable.duplex(). If the socket errored it will already be
          // destroyed. There's nothing to do here except log the error & return.
          log(err);
        }
      }

      close();
    },

    source: options.signal ? abortable(source, options.signal) : source,
    conn: stream,
    localAddr,
    remoteAddr,
    timeline: {
      open: Date.now()
    },

    close() {
      sink([]);
      close();
    }

  };

  function close() {
    if (!maConn.timeline.close) {
      maConn.timeline.close = Date.now();
    }
  }

  return maConn;
};

/***/ }),
/* 803 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = class AbortError extends Error {
  constructor(message, code) {
    super(message || 'The operation was aborted');
    this.type = 'aborted';
    this.code = code || 'ABORT_ERR';
  }

};

/***/ }),
/* 804 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const multiaddr = __webpack_require__(20);

const errCode = __webpack_require__(32);

const TimeoutController = __webpack_require__(257);

const anySignal = __webpack_require__(153);

const PeerId = __webpack_require__(9);

const PeerInfo = __webpack_require__(17);

const debug = __webpack_require__(1);

const log = debug('libp2p:dialer');
log.error = debug('libp2p:dialer:error');

const {
  DialRequest
} = __webpack_require__(805);

const {
  codes
} = __webpack_require__(43);

const {
  DIAL_TIMEOUT,
  MAX_PARALLEL_DIALS,
  MAX_PER_PEER_DIALS
} = __webpack_require__(173);

class Dialer {
  /**
   * @constructor
   * @param {object} options
   * @param {TransportManager} options.transportManager
   * @param {Peerstore} peerStore
   * @param {number} options.concurrency Number of max concurrent dials. Defaults to `MAX_PARALLEL_DIALS`
   * @param {number} options.timeout How long a dial attempt is allowed to take. Defaults to `DIAL_TIMEOUT`
   */
  constructor({
    transportManager,
    peerStore,
    concurrency = MAX_PARALLEL_DIALS,
    timeout = DIAL_TIMEOUT,
    perPeerLimit = MAX_PER_PEER_DIALS
  }) {
    this.transportManager = transportManager;
    this.peerStore = peerStore;
    this.concurrency = concurrency;
    this.timeout = timeout;
    this.perPeerLimit = perPeerLimit;
    this.tokens = [...new Array(concurrency)].map((_, index) => index);
    this._pendingDials = new Map();
  }
  /**
   * Clears any pending dials
   */


  destroy() {
    for (const dial of this._pendingDials.values()) {
      try {
        dial.controller.abort();
      } catch (err) {
        log.error(err);
      }
    }

    this._pendingDials.clear();
  }
  /**
   * Connects to a given `PeerId` or `Multiaddr` by dialing all of its known addresses.
   * The dial to the first address that is successfully able to upgrade a connection
   * will be used.
   *
   * @param {PeerInfo|Multiaddr} peer The peer to dial
   * @param {object} [options]
   * @param {AbortSignal} [options.signal] An AbortController signal
   * @returns {Promise<Connection>}
   */


  async connectToPeer(peer, options = {}) {
    const dialTarget = this._createDialTarget(peer);

    if (dialTarget.addrs.length === 0) {
      throw errCode(new Error('The dial request has no addresses'), 'ERR_NO_DIAL_MULTIADDRS');
    }

    const pendingDial = this._pendingDials.get(dialTarget.id) || this._createPendingDial(dialTarget, options);

    try {
      const connection = await pendingDial.promise;
      log('dial succeeded to %s', dialTarget.id);
      return connection;
    } catch (err) {
      // Error is a timeout
      if (pendingDial.controller.signal.aborted) {
        err.code = codes.ERR_TIMEOUT;
      }

      log.error(err);
      throw err;
    } finally {
      pendingDial.destroy();
    }
  }
  /**
   * @typedef DialTarget
   * @property {string} id
   * @property {Multiaddr[]} addrs
   */

  /**
   * Creates a DialTarget. The DialTarget is used to create and track
   * the DialRequest to a given peer.
   * @private
   * @param {PeerInfo|Multiaddr} peer A PeerId or Multiaddr
   * @returns {DialTarget}
   */


  _createDialTarget(peer) {
    const dialable = Dialer.getDialable(peer);

    if (multiaddr.isMultiaddr(dialable)) {
      return {
        id: dialable.toString(),
        addrs: [dialable]
      };
    }

    const addrs = this.peerStore.multiaddrsForPeer(dialable);
    return {
      id: dialable.id.toB58String(),
      addrs
    };
  }
  /**
   * @typedef PendingDial
   * @property {DialRequest} dialRequest
   * @property {TimeoutController} controller
   * @property {Promise} promise
   * @property {function():void} destroy
   */

  /**
   * Creates a PendingDial that wraps the underlying DialRequest
   * @private
   * @param {DialTarget} dialTarget
   * @param {object} [options]
   * @param {AbortSignal} [options.signal] An AbortController signal
   * @returns {PendingDial}
   */


  _createPendingDial(dialTarget, options) {
    const dialAction = (addr, options) => {
      if (options.signal.aborted) throw errCode(new Error('already aborted'), 'ERR_ALREADY_ABORTED');
      return this.transportManager.dial(addr, options);
    };

    const dialRequest = new DialRequest({
      addrs: dialTarget.addrs,
      dialAction,
      dialer: this
    }); // Combine the timeout signal and options.signal, if provided

    const timeoutController = new TimeoutController(this.timeout);
    const signals = [timeoutController.signal];
    options.signal && signals.push(options.signal);
    const signal = anySignal(signals);
    const pendingDial = {
      dialRequest,
      controller: timeoutController,
      promise: dialRequest.run(_objectSpread({}, options, {
        signal
      })),
      destroy: () => {
        timeoutController.clear();

        this._pendingDials.delete(dialTarget.id);
      }
    };

    this._pendingDials.set(dialTarget.id, pendingDial);

    return pendingDial;
  }

  getTokens(num) {
    const total = Math.min(num, this.perPeerLimit, this.tokens.length);
    const tokens = this.tokens.splice(0, total);
    log('%d tokens request, returning %d, %d remaining', num, total, this.tokens.length);
    return tokens;
  }

  releaseToken(token) {
    // Guard against duplicate releases
    if (this.tokens.indexOf(token) > -1) return;
    log('token %d released', token);
    this.tokens.push(token);
  }
  /**
   * Converts the given `peer` into a `PeerInfo` or `Multiaddr`.
   * @static
   * @param {PeerInfo|PeerId|Multiaddr|string} peer
   * @returns {PeerInfo|Multiaddr}
   */


  static getDialable(peer) {
    if (PeerInfo.isPeerInfo(peer)) return peer;

    if (typeof peer === 'string') {
      peer = multiaddr(peer);
    }

    let addr;

    if (multiaddr.isMultiaddr(peer)) {
      addr = peer;

      try {
        peer = PeerId.createFromCID(peer.getPeerId());
      } catch (err) {
        // Couldn't get the PeerId, just use the address
        return peer;
      }
    }

    if (PeerId.isPeerId(peer)) {
      peer = new PeerInfo(peer);
    }

    addr && peer.multiaddrs.add(addr);
    return peer;
  }

}

module.exports = Dialer;

/***/ }),
/* 805 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const AbortController = __webpack_require__(61);

const anySignal = __webpack_require__(153);

const debug = __webpack_require__(1);

const errCode = __webpack_require__(32);

const log = debug('libp2p:dialer:request');
log.error = debug('libp2p:dialer:request:error');

const FIFO = __webpack_require__(806);

const pAny = __webpack_require__(172);

class DialRequest {
  /**
   * Manages running the `dialAction` on multiple provided `addrs` in parallel
   * up to a maximum determined by the number of tokens returned
   * from `dialer.getTokens`. Once a DialRequest is created, it can be
   * started using `DialRequest.run(options)`. Once a single dial has succeeded,
   * all other dials in the request will be cancelled.
   * @param {object} options
   * @param {Multiaddr[]} options.addrs
   * @param {function(Multiaddr):Promise<Connection>} options.dialAction
   * @param {Dialer} options.dialer
   */
  constructor({
    addrs,
    dialAction,
    dialer
  }) {
    this.addrs = addrs;
    this.dialer = dialer;
    this.dialAction = dialAction;
  }
  /**
   * @async
   * @param {object} options
   * @param {AbortSignal} options.signal An AbortController signal
   * @returns {Connection}
   */


  async run(options) {
    const tokens = this.dialer.getTokens(this.addrs.length); // If no tokens are available, throw

    if (tokens.length < 1) {
      throw errCode(new Error('No dial tokens available'), 'ERR_NO_DIAL_TOKENS');
    }

    const tokenHolder = new FIFO();
    tokens.forEach(token => tokenHolder.push(token));
    const dialAbortControllers = this.addrs.map(() => new AbortController());
    let completedDials = 0;

    try {
      return await pAny(this.addrs.map(async (addr, i) => {
        const token = await tokenHolder.shift(); // get token

        let conn;

        try {
          const signal = dialAbortControllers[i].signal;
          conn = await this.dialAction(addr, _objectSpread({}, options, {
            signal: anySignal([signal, options.signal])
          })); // Remove the successful AbortController so it is not aborted

          dialAbortControllers.splice(i, 1);
        } finally {
          completedDials++; // If we have more or equal dials remaining than tokens, recycle the token, otherwise release it

          if (this.addrs.length - completedDials >= tokens.length) {
            tokenHolder.push(token);
          } else {
            this.dialer.releaseToken(tokens.splice(tokens.indexOf(token), 1)[0]);
          }
        }

        return conn;
      }));
    } finally {
      dialAbortControllers.map(c => c.abort()); // success/failure happened, abort everything else

      tokens.forEach(token => this.dialer.releaseToken(token)); // release tokens back to the dialer
    }
  }

}

module.exports.DialRequest = DialRequest;

/***/ }),
/* 806 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const Fifo = __webpack_require__(316);

const defer = __webpack_require__(69);

module.exports = class PFifo {
  constructor() {
    this._buffer = new Fifo();
    this._waitingConsumers = new Fifo();
  }

  push(chunk) {
    const {
      promise,
      resolve
    } = defer();

    this._buffer.push({
      chunk,
      resolve
    });

    this._consume();

    return promise;
  }

  _consume() {
    while (!this._waitingConsumers.isEmpty() && !this._buffer.isEmpty()) {
      const nextConsumer = this._waitingConsumers.shift();

      const nextChunk = this._buffer.shift();

      nextConsumer.resolve(nextChunk.chunk);
      nextChunk.resolve();
    }
  }

  shift() {
    const {
      promise,
      resolve
    } = defer();

    this._waitingConsumers.push({
      resolve
    });

    this._consume();

    return promise;
  }

  isEmpty() {
    return this._buffer.isEmpty();
  }

};

/***/ }),
/* 807 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const mergeOptions = __webpack_require__(27);

const pipe = __webpack_require__(23);

const {
  tap
} = __webpack_require__(41);

const oldPeerLRU = __webpack_require__(808);

const {
  METRICS: defaultOptions
} = __webpack_require__(173);

const Stats = __webpack_require__(809);

const initialCounters = ['dataReceived', 'dataSent'];
const directionToEvent = {
  in: 'dataReceived',
  out: 'dataSent'
};

class Metrics {
  /**
   *
   * @param {object} options
   * @param {number} options.computeThrottleMaxQueueSize
   * @param {number} options.computeThrottleTimeout
   * @param {Array<number>} options.movingAverageIntervals
   * @param {number} options.maxOldPeersRetention
   */
  constructor(options) {
    this._options = mergeOptions(defaultOptions, options);
    this._globalStats = new Stats(initialCounters, this._options);
    this._peerStats = new Map();
    this._protocolStats = new Map();
    this._oldPeers = oldPeerLRU(this._options.maxOldPeersRetention);
    this._running = false;
    this._onMessage = this._onMessage.bind(this);
  }
  /**
   * Must be called for stats to saved. Any data pushed for tracking
   * will be ignored.
   */


  start() {
    this._running = true;
  }
  /**
   * Stops all averages timers and prevents new data from being tracked.
   * Once `stop` is called, `start` must be called to resume stats tracking.
   */


  stop() {
    this._running = false;

    this._globalStats.stop();

    for (const stats of this._peerStats.values()) {
      stats.stop();
    }

    for (const stats of this._protocolStats.values()) {
      stats.stop();
    }
  }
  /**
   * Gets the global `Stats` object
   * @returns {Stats}
   */


  get global() {
    return this._globalStats;
  }
  /**
   * Returns a list of `PeerId` strings currently being tracked
   * @returns {Array<string>}
   */


  get peers() {
    return Array.from(this._peerStats.keys());
  }
  /**
   * Returns the `Stats` object for the given `PeerId` whether it
   * is a live peer, or in the disconnected peer LRU cache.
   * @param {PeerId} peerId
   * @returns {Stats}
   */


  forPeer(peerId) {
    const idString = peerId.toB58String();
    return this._peerStats.get(idString) || this._oldPeers.get(idString);
  }
  /**
   * Returns a list of all protocol strings currently being tracked.
   * @returns {Array<string>}
   */


  get protocols() {
    return Array.from(this._protocolStats.keys());
  }
  /**
   * Returns the `Stats` object for the given `protocol`.
   * @param {string} protocol
   * @returns {Stats}
   */


  forProtocol(protocol) {
    return this._protocolStats.get(protocol);
  }
  /**
   * Should be called when all connections to a given peer
   * have closed. The `Stats` collection for the peer will
   * be stopped and moved to an LRU for temporary retention.
   * @param {PeerId} peerId
   */


  onPeerDisconnected(peerId) {
    const idString = peerId.toB58String();

    const peerStats = this._peerStats.get(idString);

    if (peerStats) {
      peerStats.stop();

      this._peerStats.delete(idString);

      this._oldPeers.set(idString, peerStats);
    }
  }
  /**
   * Takes the metadata for a message and tracks it in the
   * appropriate categories. If the protocol is present, protocol
   * stats will also be tracked.
   *
   * @private
   * @param {object} params
   * @param {PeerId} params.remotePeer Remote peer
   * @param {string} [params.protocol] Protocol string the stream is running
   * @param {string} params.direction One of ['in','out']
   * @param {number} params.dataLength Size of the message
   * @returns {void}
   */


  _onMessage({
    remotePeer,
    protocol,
    direction,
    dataLength
  }) {
    if (!this._running) return;
    const key = directionToEvent[direction];
    let peerStats = this.forPeer(remotePeer);

    if (!peerStats) {
      peerStats = new Stats(initialCounters, this._options);

      this._peerStats.set(remotePeer.toB58String(), peerStats);
    } // Peer and global stats


    peerStats.push(key, dataLength);

    this._globalStats.push(key, dataLength); // Protocol specific stats


    if (protocol) {
      let protocolStats = this.forProtocol(protocol);

      if (!protocolStats) {
        protocolStats = new Stats(initialCounters, this._options);

        this._protocolStats.set(protocol, protocolStats);
      }

      protocolStats.push(key, dataLength);
    }
  }
  /**
   * Replaces the `PeerId` string with the given `peerId`.
   * If stats are already being tracked for the given `peerId`, the
   * placeholder stats will be merged with the existing stats.
   * @param {PeerId} placeholder A peerId string
   * @param {PeerId} peerId
   */


  updatePlaceholder(placeholder, peerId) {
    if (!this._running) return;
    const placeholderStats = this.forPeer(placeholder);
    const peerIdString = peerId.toB58String();
    const existingStats = this.forPeer(peerId);
    let mergedStats = placeholderStats; // If we already have stats, merge the two

    if (existingStats) {
      // If existing, merge
      mergedStats = Metrics.mergeStats(existingStats, mergedStats); // Attempt to delete from the old peers list just in case it was tracked there

      this._oldPeers.delete(peerIdString);
    }

    this._peerStats.delete(placeholder.toB58String());

    this._peerStats.set(peerIdString, mergedStats);

    mergedStats.start();
  }
  /**
   * Tracks data running through a given Duplex Iterable `stream`. If
   * the `peerId` is not provided, a placeholder string will be created and
   * returned. This allows lazy tracking of a peer when the peer is not yet known.
   * When the `PeerId` is known, `Metrics.updatePlaceholder` should be called
   * with the placeholder string returned from here, and the known `PeerId`.
   *
   * @param {Object} options
   * @param {{ sink: function(*), source: function() }} options.stream A duplex iterable stream
   * @param {PeerId} [options.peerId] The id of the remote peer that's connected
   * @param {string} [options.protocol] The protocol the stream is running
   * @returns {string} The peerId string or placeholder string
   */


  trackStream({
    stream,
    remotePeer,
    protocol
  }) {
    const metrics = this;
    const _source = stream.source;
    stream.source = tap(chunk => metrics._onMessage({
      remotePeer,
      protocol,
      direction: 'in',
      dataLength: chunk.length
    }))(_source);
    const _sink = stream.sink;

    stream.sink = source => {
      pipe(source, tap(chunk => metrics._onMessage({
        remotePeer,
        protocol,
        direction: 'out',
        dataLength: chunk.length
      })), _sink);
    };

    return stream;
  }
  /**
   * Merges `other` into `target`. `target` will be modified
   * and returned.
   * @param {Stats} target
   * @param {Stats} other
   * @returns {Stats}
   */


  static mergeStats(target, other) {
    target.stop();
    other.stop(); // Merge queues

    target._queue = [...target._queue, ...other._queue]; // TODO: how to merge moving averages?

    return target;
  }

}

module.exports = Metrics;

/***/ }),
/* 808 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const LRU = __webpack_require__(156);
/**
 * Creates and returns a Least Recently Used Cache
 *
 * @param {Number} maxSize
 * @returns {LRUCache}
 */


module.exports = maxSize => {
  const patched = LRU(maxSize);
  patched.delete = patched.remove;
  return patched;
};

/***/ }),
/* 809 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const EventEmitter = __webpack_require__(11);

const Big = __webpack_require__(36);

const MovingAverage = __webpack_require__(327);

const retimer = __webpack_require__(152);
/**
 * A queue based manager for stat processing
 *
 * @param {Array<string>} initialCounters
 * @param {any} options
 */


class Stats extends EventEmitter {
  constructor(initialCounters, options) {
    super();
    this._options = options;
    this._queue = [];
    this._stats = {};
    this._frequencyLastTime = Date.now();
    this._frequencyAccumulators = {};
    this._movingAverages = {};
    this._update = this._update.bind(this);
    const intervals = this._options.movingAverageIntervals;

    for (var i = 0; i < initialCounters.length; i++) {
      var key = initialCounters[i];
      this._stats[key] = Big(0);
      this._movingAverages[key] = {};

      for (var k = 0; k < intervals.length; k++) {
        var interval = intervals[k];
        var ma = this._movingAverages[key][interval] = MovingAverage(interval);
        ma.push(this._frequencyLastTime, 0);
      }
    }
  }
  /**
   * Initializes the internal timer if there are items in the queue. This
   * should only need to be called if `Stats.stop` was previously called, as
   * `Stats.push` will also start the processing.
   *
   * @returns {void}
   */


  start() {
    if (this._queue.length) {
      this._resetComputeTimeout();
    }
  }
  /**
   * Stops processing and computing of stats by clearing the internal
   * timer.
   *
   * @returns {void}
   */


  stop() {
    if (this._timeout) {
      this._timeout.clear();

      this._timeout = null;
    }
  }
  /**
   * Returns a clone of the current stats.
   *
   * @returns {Map<string, Stat>}
   */


  get snapshot() {
    return Object.assign({}, this._stats);
  }
  /**
   * Returns a clone of the internal movingAverages
   *
   * @returns {Array<MovingAverage>}
   */


  get movingAverages() {
    return Object.assign({}, this._movingAverages);
  }
  /**
   * Returns a plain JSON object of the stats
   *
   * @returns {*}
   */


  toJSON() {
    const snapshot = this.snapshot;
    const movingAverages = this.movingAverages;
    const data = {
      dataReceived: snapshot.dataReceived.toString(),
      dataSent: snapshot.dataSent.toString(),
      movingAverages: {}
    };
    const counters = Object.keys(movingAverages);

    for (const key of counters) {
      data.movingAverages[key] = {};

      for (const interval of Object.keys(movingAverages[key])) {
        data.movingAverages[key][interval] = movingAverages[key][interval].movingAverage();
      }
    }

    return data;
  }
  /**
   * Pushes the given operation data to the queue, along with the
   * current Timestamp, then resets the update timer.
   *
   * @param {string} counter
   * @param {number} inc
   * @returns {void}
   */


  push(counter, inc) {
    this._queue.push([counter, inc, Date.now()]);

    this._resetComputeTimeout();
  }
  /**
   * Resets the timeout for triggering updates.
   *
   * @private
   * @returns {void}
   */


  _resetComputeTimeout() {
    if (this._timeout) {
      this._timeout.reschedule(this._nextTimeout());
    } else {
      this._timeout = retimer(this._update, this._nextTimeout());
    }
  }
  /**
   * Calculates and returns the timeout for the next update based on
   * the urgency of the update.
   *
   * @private
   * @returns {number}
   */


  _nextTimeout() {
    // calculate the need for an update, depending on the queue length
    const urgency = this._queue.length / this._options.computeThrottleMaxQueueSize;
    const timeout = Math.max(this._options.computeThrottleTimeout * (1 - urgency), 0);
    return timeout;
  }
  /**
   * If there are items in the queue, they will will be processed and
   * the frequency for all items will be updated based on the Timestamp
   * of the last item in the queue. The `update` event will also be emitted
   * with the latest stats.
   *
   * If there are no items in the queue, no action is taken.
   *
   * @private
   * @returns {void}
   */


  _update() {
    this._timeout = null;

    if (this._queue.length) {
      let last;

      for (last of this._queue) {
        this._applyOp(last);
      }

      this._queue = [];

      this._updateFrequency(last[2]); // contains timestamp of last op


      this.emit('update', this._stats);
    }
  }
  /**
   * For each key in the stats, the frequency and moving averages
   * will be updated via Stats._updateFrequencyFor based on the time
   * difference between calls to this method.
   *
   * @private
   * @param {Timestamp} latestTime
   * @returns {void}
   */


  _updateFrequency(latestTime) {
    const timeDiff = latestTime - this._frequencyLastTime;
    Object.keys(this._stats).forEach(key => {
      this._updateFrequencyFor(key, timeDiff, latestTime);
    });
    this._frequencyLastTime = latestTime;
  }
  /**
   * Updates the `movingAverages` for the given `key` and also
   * resets the `frequencyAccumulator` for the `key`.
   *
   * @private
   * @param {string} key
   * @param {number} timeDiffMS Time in milliseconds
   * @param {Timestamp} latestTime Time in ticks
   * @returns {void}
   */


  _updateFrequencyFor(key, timeDiffMS, latestTime) {
    const count = this._frequencyAccumulators[key] || 0;
    this._frequencyAccumulators[key] = 0; // if `timeDiff` is zero, `hz` becomes Infinity, so we fallback to 1ms

    const safeTimeDiff = timeDiffMS || 1;
    const hz = count / safeTimeDiff * 1000;
    let movingAverages = this._movingAverages[key];

    if (!movingAverages) {
      movingAverages = this._movingAverages[key] = {};
    }

    const intervals = this._options.movingAverageIntervals;

    for (var i = 0; i < intervals.length; i++) {
      var movingAverageInterval = intervals[i];
      var movingAverage = movingAverages[movingAverageInterval];

      if (!movingAverage) {
        movingAverage = movingAverages[movingAverageInterval] = MovingAverage(movingAverageInterval);
      }

      movingAverage.push(latestTime, hz);
    }
  }
  /**
   * For the given operation, `op`, the stats and `frequencyAccumulator`
   * will be updated or initialized if they don't already exist.
   *
   * @private
   * @param {Array<string, number>} op
   * @throws {InvalidNumber}
   * @returns {void}
   */


  _applyOp(op) {
    const key = op[0];
    const inc = op[1];

    if (typeof inc !== 'number') {
      throw new Error('invalid increment number:', inc);
    }

    let n;

    if (!Object.prototype.hasOwnProperty.call(this._stats, key)) {
      n = this._stats[key] = Big(0);
    } else {
      n = this._stats[key];
    }

    this._stats[key] = n.plus(inc);

    if (!this._frequencyAccumulators[key]) {
      this._frequencyAccumulators[key] = 0;
    }

    this._frequencyAccumulators[key] += inc;
  }

}

module.exports = Stats;

/***/ }),
/* 810 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const pSettle = __webpack_require__(811);

const {
  codes
} = __webpack_require__(43);

const errCode = __webpack_require__(32);

const debug = __webpack_require__(1);

const log = debug('libp2p:transports');
log.error = debug('libp2p:transports:error');

class TransportManager {
  /**
   * @constructor
   * @param {object} options
   * @param {Libp2p} options.libp2p The Libp2p instance. It will be passed to the transports.
   * @param {Upgrader} options.upgrader The upgrader to provide to the transports
   */
  constructor({
    libp2p,
    upgrader
  }) {
    this.libp2p = libp2p;
    this.upgrader = upgrader;
    this._transports = new Map();
    this._listeners = new Map();
  }
  /**
   * Adds a `Transport` to the manager
   *
   * @param {String} key
   * @param {Transport} Transport
   * @param {*} transportOptions Additional options to pass to the transport
   * @returns {void}
   */


  add(key, Transport, transportOptions = {}) {
    log('adding %s', key);

    if (!key) {
      throw errCode(new Error("Transport must have a valid key, was given '".concat(key, "'")), codes.ERR_INVALID_KEY);
    }

    if (this._transports.has(key)) {
      throw errCode(new Error('There is already a transport with this key'), codes.ERR_DUPLICATE_TRANSPORT);
    }

    const transport = new Transport(_objectSpread({}, transportOptions, {
      libp2p: this.libp2p,
      upgrader: this.upgrader
    }));

    this._transports.set(key, transport);

    if (!this._listeners.has(key)) {
      this._listeners.set(key, []);
    }
  }
  /**
   * Stops all listeners
   * @async
   */


  async close() {
    const tasks = [];

    for (const [key, listeners] of this._listeners) {
      log('closing listeners for %s', key);

      while (listeners.length) {
        const listener = listeners.pop();
        tasks.push(listener.close());
      }
    }

    await Promise.all(tasks);
    log('all listeners closed');

    for (const key of this._listeners.keys()) {
      this._listeners.set(key, []);
    }
  }
  /**
   * Dials the given Multiaddr over it's supported transport
   * @param {Multiaddr} ma
   * @param {*} options
   * @returns {Promise<Connection>}
   */


  async dial(ma, options) {
    const transport = this.transportForMultiaddr(ma);

    if (!transport) {
      throw errCode(new Error("No transport available for address ".concat(String(ma))), codes.ERR_TRANSPORT_UNAVAILABLE);
    }

    try {
      return await transport.dial(ma, options);
    } catch (err) {
      if (!err.code) err.code = codes.ERR_TRANSPORT_DIAL_FAILED;
      throw err;
    }
  }
  /**
   * Returns all Multiaddr's the listeners are using
   * @returns {Multiaddr[]}
   */


  getAddrs() {
    let addrs = [];

    for (const listeners of this._listeners.values()) {
      for (const listener of listeners) {
        addrs = [...addrs, ...listener.getAddrs()];
      }
    }

    return addrs;
  }
  /**
   * Returns all the transports instances.
   * @returns {Iterator<Transport>}
   */


  getTransports() {
    return this._transports.values();
  }
  /**
   * Finds a transport that matches the given Multiaddr
   * @param {Multiaddr} ma
   * @returns {Transport|null}
   */


  transportForMultiaddr(ma) {
    for (const transport of this._transports.values()) {
      const addrs = transport.filter([ma]);
      if (addrs.length) return transport;
    }

    return null;
  }
  /**
   * Starts listeners for each given Multiaddr.
   * @async
   * @param {Multiaddr[]} addrs
   */


  async listen(addrs) {
    if (addrs.length === 0) {
      log('no addresses were provided for listening, this node is dial only');
      return;
    }

    const couldNotListen = [];

    for (const [key, transport] of this._transports.entries()) {
      const supportedAddrs = transport.filter(addrs);
      const tasks = []; // For each supported multiaddr, create a listener

      for (const addr of supportedAddrs) {
        log('creating listener for %s on %s', key, addr);
        const listener = transport.createListener({}, this.onConnection);

        this._listeners.get(key).push(listener); // We need to attempt to listen on everything


        tasks.push(listener.listen(addr));
      } // Keep track of transports we had no addresses for


      if (tasks.length === 0) {
        couldNotListen.push(key);
        continue;
      }

      const results = await pSettle(tasks); // If we are listening on at least 1 address, succeed.
      // TODO: we should look at adding a retry (`p-retry`) here to better support
      // listening on remote addresses as they may be offline. We could then potentially
      // just wait for any (`p-any`) listener to succeed on each transport before returning

      const isListening = results.find(r => r.isFulfilled === true);

      if (!isListening) {
        throw errCode(new Error("Transport (".concat(key, ") could not listen on any available address")), codes.ERR_NO_VALID_ADDRESSES);
      }
    } // If no transports were able to listen, throw an error. This likely
    // means we were given addresses we do not have transports for


    if (couldNotListen.length === this._transports.size) {
      throw errCode(new Error("no valid addresses were provided for transports [".concat(couldNotListen, "]")), codes.ERR_NO_VALID_ADDRESSES);
    }
  }
  /**
   * Removes the given transport from the manager.
   * If a transport has any running listeners, they will be closed.
   *
   * @async
   * @param {string} key
   */


  async remove(key) {
    log('removing %s', key);

    if (this._listeners.has(key)) {
      // Close any running listeners
      for (const listener of this._listeners.get(key)) {
        await listener.close();
      }
    }

    this._transports.delete(key);

    this._listeners.delete(key);
  }
  /**
   * Removes all transports from the manager.
   * If any listeners are running, they will be closed.
   * @async
   */


  async removeAll() {
    const tasks = [];

    for (const key of this._transports.keys()) {
      tasks.push(this.remove(key));
    }

    await Promise.all(tasks);
  }

}

module.exports = TransportManager;

/***/ }),
/* 811 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const pReflect = __webpack_require__(812);

const pLimit = __webpack_require__(813);

const pSettle = async (promises, options) => {
  const {
    concurrency
  } = _objectSpread({
    concurrency: Infinity
  }, options);

  if (!(typeof concurrency === 'number' && concurrency >= 1)) {
    throw new TypeError("Expected `concurrency` to be a number from 1 and up, got `".concat(concurrency, "` (").concat(typeof concurrency, ")"));
  }

  const limit = pLimit(concurrency);
  return Promise.all(promises.map(item => pReflect(limit(() => item))));
};

module.exports = pSettle; // TODO: Remove this for the next major release

module.exports.default = pSettle;

/***/ }),
/* 812 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const pReflect = async promise => {
  try {
    const value = await promise;
    return {
      isFulfilled: true,
      isRejected: false,
      value
    };
  } catch (error) {
    return {
      isFulfilled: false,
      isRejected: true,
      reason: error
    };
  }
};

module.exports = pReflect; // TODO: Remove this for the next major release

module.exports.default = pReflect;

/***/ }),
/* 813 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const pTry = __webpack_require__(814);

const pLimit = concurrency => {
  if (!((Number.isInteger(concurrency) || concurrency === Infinity) && concurrency > 0)) {
    return Promise.reject(new TypeError('Expected `concurrency` to be a number from 1 and up'));
  }

  const queue = [];
  let activeCount = 0;

  const next = () => {
    activeCount--;

    if (queue.length > 0) {
      queue.shift()();
    }
  };

  const run = (fn, resolve, ...args) => {
    activeCount++;
    const result = pTry(fn, ...args);
    resolve(result);
    result.then(next, next);
  };

  const enqueue = (fn, resolve, ...args) => {
    if (activeCount < concurrency) {
      run(fn, resolve, ...args);
    } else {
      queue.push(run.bind(null, fn, resolve, ...args));
    }
  };

  const generator = (fn, ...args) => new Promise(resolve => enqueue(fn, resolve, ...args));

  Object.defineProperties(generator, {
    activeCount: {
      get: () => activeCount
    },
    pendingCount: {
      get: () => queue.length
    }
  });
  return generator;
};

module.exports = pLimit;
module.exports.default = pLimit;

/***/ }),
/* 814 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const pTry = (fn, ...arguments_) => new Promise(resolve => {
  resolve(fn(...arguments_));
});

module.exports = pTry; // TODO: remove this in the next major version

module.exports.default = pTry;

/***/ }),
/* 815 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const debug = __webpack_require__(1);

const log = debug('libp2p:upgrader');
log.error = debug('libp2p:upgrader:error');

const Multistream = __webpack_require__(816);

const {
  Connection
} = __webpack_require__(329);

const PeerId = __webpack_require__(9);

const pipe = __webpack_require__(23);

const errCode = __webpack_require__(32);

const mutableProxy = __webpack_require__(822);

const {
  codes
} = __webpack_require__(43);
/**
 * @typedef MultiaddrConnection
 * @property {function} sink
 * @property {AsyncIterator} source
 * @property {*} conn
 * @property {Multiaddr} remoteAddr
 */

/**
 * @typedef CryptoResult
 * @property {*} conn A duplex iterable
 * @property {PeerId} remotePeer
 * @property {string} protocol
 */


class Upgrader {
  /**
   * @param {object} options
   * @param {PeerId} options.localPeer
   * @param {Metrics} options.metrics
   * @param {Map<string, Crypto>} options.cryptos
   * @param {Map<string, Muxer>} options.muxers
   * @param {function(Connection)} options.onConnection Called when a connection is upgraded
   * @param {function(Connection)} options.onConnectionEnd
   */
  constructor({
    localPeer,
    metrics,
    cryptos,
    muxers,
    onConnectionEnd = () => {},
    onConnection = () => {}
  }) {
    this.localPeer = localPeer;
    this.metrics = metrics;
    this.cryptos = cryptos || new Map();
    this.muxers = muxers || new Map();
    this.protector = null;
    this.protocols = new Map();
    this.onConnection = onConnection;
    this.onConnectionEnd = onConnectionEnd;
  }
  /**
   * Upgrades an inbound connection
   * @async
   * @param {MultiaddrConnection} maConn
   * @returns {Promise<Connection>}
   */


  async upgradeInbound(maConn) {
    let encryptedConn;
    let remotePeer;
    let upgradedConn;
    let Muxer;
    let cryptoProtocol;
    let setPeer;
    let proxyPeer;

    if (this.metrics) {
      ({
        setTarget: setPeer,
        proxy: proxyPeer
      } = mutableProxy());
      const idString = parseInt(Math.random() * 1e9).toString(36) + Date.now();
      setPeer({
        toB58String: () => idString
      });
      maConn = this.metrics.trackStream({
        stream: maConn,
        remotePeer: proxyPeer
      });
    }

    log('Starting the inbound connection upgrade'); // Protect

    let protectedConn = maConn;

    if (this.protector) {
      protectedConn = await this.protector.protect(maConn);
    }

    try {
      // Encrypt the connection
      ({
        conn: encryptedConn,
        remotePeer,
        protocol: cryptoProtocol
      } = await this._encryptInbound(this.localPeer, protectedConn, this.cryptos)); // Multiplex the connection

      if (this.muxers.size) {
        ({
          stream: upgradedConn,
          Muxer
        } = await this._multiplexInbound(encryptedConn, this.muxers));
      } else {
        upgradedConn = encryptedConn;
      }
    } catch (err) {
      log.error('Failed to upgrade inbound connection', err);
      await maConn.close(err);
      throw err;
    }

    if (this.metrics) {
      this.metrics.updatePlaceholder(proxyPeer, remotePeer);
      setPeer(remotePeer);
    }

    log('Successfully upgraded inbound connection');
    return this._createConnection({
      cryptoProtocol,
      direction: 'inbound',
      maConn,
      upgradedConn,
      Muxer,
      remotePeer
    });
  }
  /**
   * Upgrades an outbound connection
   * @async
   * @param {MultiaddrConnection} maConn
   * @returns {Promise<Connection>}
   */


  async upgradeOutbound(maConn) {
    let remotePeerId;

    try {
      remotePeerId = PeerId.createFromB58String(maConn.remoteAddr.getPeerId());
    } catch (err) {
      log.error('multiaddr did not contain a valid peer id', err);
    }

    let encryptedConn;
    let remotePeer;
    let upgradedConn;
    let cryptoProtocol;
    let Muxer;
    let setPeer;
    let proxyPeer;

    if (this.metrics) {
      ({
        setTarget: setPeer,
        proxy: proxyPeer
      } = mutableProxy());
      const idString = parseInt(Math.random() * 1e9).toString(36) + Date.now();
      setPeer({
        toB58String: () => idString
      });
      maConn = this.metrics.trackStream({
        stream: maConn,
        remotePeer: proxyPeer
      });
    }

    log('Starting the outbound connection upgrade'); // Protect

    let protectedConn = maConn;

    if (this.protector) {
      protectedConn = await this.protector.protect(maConn);
    }

    try {
      // Encrypt the connection
      ({
        conn: encryptedConn,
        remotePeer,
        protocol: cryptoProtocol
      } = await this._encryptOutbound(this.localPeer, protectedConn, remotePeerId, this.cryptos)); // Multiplex the connection

      if (this.muxers.size) {
        ({
          stream: upgradedConn,
          Muxer
        } = await this._multiplexOutbound(encryptedConn, this.muxers));
      } else {
        upgradedConn = encryptedConn;
      }
    } catch (err) {
      log.error('Failed to upgrade outbound connection', err);
      await maConn.close(err);
      throw err;
    }

    if (this.metrics) {
      this.metrics.updatePlaceholder(proxyPeer, remotePeer);
      setPeer(remotePeer);
    }

    log('Successfully upgraded outbound connection');
    return this._createConnection({
      cryptoProtocol,
      direction: 'outbound',
      maConn,
      upgradedConn,
      Muxer,
      remotePeer
    });
  }
  /**
   * A convenience method for generating a new `Connection`
   * @private
   * @param {object} options
   * @param {string} cryptoProtocol The crypto protocol that was negotiated
   * @param {string} direction One of ['inbound', 'outbound']
   * @param {MultiaddrConnection} maConn The transport layer connection
   * @param {*} upgradedConn A duplex connection returned from multiplexer and/or crypto selection
   * @param {Muxer} Muxer The muxer to be used for muxing
   * @param {PeerId} remotePeer The peer the connection is with
   * @returns {Connection}
   */


  _createConnection({
    cryptoProtocol,
    direction,
    maConn,
    upgradedConn,
    Muxer,
    remotePeer
  }) {
    let muxer;
    let newStream; // eslint-disable-next-line prefer-const

    let connection;

    if (Muxer) {
      // Create the muxer
      muxer = new Muxer({
        // Run anytime a remote stream is created
        onStream: async muxedStream => {
          const mss = new Multistream.Listener(muxedStream);

          try {
            const {
              stream,
              protocol
            } = await mss.handle(Array.from(this.protocols.keys()));
            log('%s: incoming stream opened on %s', direction, protocol);
            if (this.metrics) this.metrics.trackStream({
              stream,
              remotePeer,
              protocol
            });
            connection.addStream(stream, protocol);

            this._onStream({
              connection,
              stream,
              protocol
            });
          } catch (err) {
            log.error(err);
          }
        },
        // Run anytime a stream closes
        onStreamEnd: muxedStream => {
          connection.removeStream(muxedStream.id);
        }
      });

      newStream = async protocols => {
        log('%s: starting new stream on %s', direction, protocols);
        const muxedStream = muxer.newStream();
        const mss = new Multistream.Dialer(muxedStream);

        try {
          const {
            stream,
            protocol
          } = await mss.select(protocols);
          if (this.metrics) this.metrics.trackStream({
            stream,
            remotePeer,
            protocol
          });
          return {
            stream: _objectSpread({}, muxedStream, {}, stream),
            protocol
          };
        } catch (err) {
          log.error('could not create new stream', err);
          throw errCode(err, codes.ERR_UNSUPPORTED_PROTOCOL);
        }
      }; // Pipe all data through the muxer


      pipe(upgradedConn, muxer, upgradedConn);
    }

    const _timeline = maConn.timeline;
    maConn.timeline = new Proxy(_timeline, {
      set: (...args) => {
        if (connection && args[1] === 'close' && args[2] && !_timeline.close) {
          connection.stat.status = 'closed';
          this.onConnectionEnd(connection);
        }

        return Reflect.set(...args);
      }
    });
    maConn.timeline.upgraded = Date.now();

    const errConnectionNotMultiplexed = () => {
      throw errCode(new Error('connection is not multiplexed'), 'ERR_CONNECTION_NOT_MULTIPLEXED');
    }; // Create the connection


    connection = new Connection({
      localAddr: maConn.localAddr,
      remoteAddr: maConn.remoteAddr,
      localPeer: this.localPeer,
      remotePeer: remotePeer,
      stat: {
        direction,
        timeline: maConn.timeline,
        multiplexer: Muxer && Muxer.multicodec,
        encryption: cryptoProtocol
      },
      newStream: newStream || errConnectionNotMultiplexed,
      getStreams: () => muxer ? muxer.streams : errConnectionNotMultiplexed,
      close: err => maConn.close(err)
    });
    this.onConnection(connection);
    return connection;
  }
  /**
   * Routes incoming streams to the correct handler
   * @private
   * @param {object} options
   * @param {Connection} options.connection The connection the stream belongs to
   * @param {Stream} options.stream
   * @param {string} options.protocol
   */


  _onStream({
    connection,
    stream,
    protocol
  }) {
    const handler = this.protocols.get(protocol);
    handler({
      connection,
      stream,
      protocol
    });
  }
  /**
   * Attempts to encrypt the incoming `connection` with the provided `cryptos`.
   * @private
   * @async
   * @param {PeerId} localPeer The initiators PeerInfo
   * @param {*} connection
   * @param {Map<string, Crypto>} cryptos
   * @returns {CryptoResult} An encrypted connection, remote peer `PeerId` and the protocol of the `Crypto` used
   */


  async _encryptInbound(localPeer, connection, cryptos) {
    const mss = new Multistream.Listener(connection);
    const protocols = Array.from(cryptos.keys());
    log('handling inbound crypto protocol selection', protocols);

    try {
      const {
        stream,
        protocol
      } = await mss.handle(protocols);
      const crypto = cryptos.get(protocol);
      log('encrypting inbound connection...');
      return _objectSpread({}, (await crypto.secureInbound(localPeer, stream)), {
        protocol
      });
    } catch (err) {
      throw errCode(err, codes.ERR_ENCRYPTION_FAILED);
    }
  }
  /**
   * Attempts to encrypt the given `connection` with the provided `cryptos`.
   * The first `Crypto` module to succeed will be used
   * @private
   * @async
   * @param {PeerId} localPeer The initiators PeerInfo
   * @param {*} connection
   * @param {PeerId} remotePeerId
   * @param {Map<string, Crypto>} cryptos
   * @returns {CryptoResult} An encrypted connection, remote peer `PeerId` and the protocol of the `Crypto` used
   */


  async _encryptOutbound(localPeer, connection, remotePeerId, cryptos) {
    const mss = new Multistream.Dialer(connection);
    const protocols = Array.from(cryptos.keys());
    log('selecting outbound crypto protocol', protocols);

    try {
      const {
        stream,
        protocol
      } = await mss.select(protocols);
      const crypto = cryptos.get(protocol);
      log('encrypting outbound connection to %j', remotePeerId);
      return _objectSpread({}, (await crypto.secureOutbound(localPeer, stream, remotePeerId)), {
        protocol
      });
    } catch (err) {
      throw errCode(err, codes.ERR_ENCRYPTION_FAILED);
    }
  }
  /**
   * Selects one of the given muxers via multistream-select. That
   * muxer will be used for all future streams on the connection.
   * @private
   * @async
   * @param {*} connection A basic duplex connection to multiplex
   * @param {Map<string, Muxer>} muxers The muxers to attempt multiplexing with
   * @returns {*} A muxed connection
   */


  async _multiplexOutbound(connection, muxers) {
    const dialer = new Multistream.Dialer(connection);
    const protocols = Array.from(muxers.keys());
    log('outbound selecting muxer %s', protocols);

    try {
      const {
        stream,
        protocol
      } = await dialer.select(protocols);
      log('%s selected as muxer protocol', protocol);
      const Muxer = muxers.get(protocol);
      return {
        stream,
        Muxer
      };
    } catch (err) {
      throw errCode(err, codes.ERR_MUXER_UNAVAILABLE);
    }
  }
  /**
   * Registers support for one of the given muxers via multistream-select. The
   * selected muxer will be used for all future streams on the connection.
   * @private
   * @async
   * @param {*} connection A basic duplex connection to multiplex
   * @param {Map<string, Muxer>} muxers The muxers to attempt multiplexing with
   * @returns {*} A muxed connection
   */


  async _multiplexInbound(connection, muxers) {
    const listener = new Multistream.Listener(connection);
    const protocols = Array.from(muxers.keys());
    log('inbound handling muxers %s', protocols);

    try {
      const {
        stream,
        protocol
      } = await listener.handle(protocols);
      const Muxer = muxers.get(protocol);
      return {
        stream,
        Muxer
      };
    } catch (err) {
      throw errCode(err, codes.ERR_MUXER_UNAVAILABLE);
    }
  }

}

module.exports = Upgrader;

/***/ }),
/* 816 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const select = __webpack_require__(817);

const handle = __webpack_require__(818);

const ls = __webpack_require__(819);

const {
  PROTOCOL_ID
} = __webpack_require__(328);

exports.PROTOCOL_ID = PROTOCOL_ID;

class MultistreamSelect {
  constructor(stream) {
    this._stream = stream;
    this._shaken = false;
  } // Perform the multistream-select handshake


  async _handshake() {
    if (this._shaken) return;
    const {
      stream
    } = await select(this._stream, PROTOCOL_ID);
    this._stream = stream;
    this._shaken = true;
  }

}

class Dialer extends MultistreamSelect {
  select(protocols) {
    return select(this._stream, protocols, this._shaken ? null : PROTOCOL_ID);
  }

  async ls() {
    await this._handshake();
    const {
      stream,
      protocols
    } = await ls(this._stream);
    this._stream = stream;
    return protocols;
  }

}

exports.Dialer = Dialer;

class Listener extends MultistreamSelect {
  handle(protocols) {
    return handle(this._stream, protocols);
  }

}

exports.Listener = Listener;

/***/ }),
/* 817 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const log = __webpack_require__(1)('mss:select');

const errCode = __webpack_require__(2);

const multistream = __webpack_require__(181);

const handshake = __webpack_require__(86);

module.exports = async (stream, protocols, protocolId) => {
  protocols = Array.isArray(protocols) ? [...protocols] : [protocols];
  const {
    reader,
    writer,
    rest,
    stream: shakeStream
  } = handshake(stream);
  const protocol = protocols.shift();

  if (protocolId) {
    log('select: write ["%s", "%s"]', protocolId, protocol);
    multistream.writeAll(writer, [protocolId, protocol]);
  } else {
    log('select: write "%s"', protocol);
    multistream.write(writer, protocol);
  }

  let response = (await multistream.read(reader)).toString();
  log('select: read "%s"', response); // Read the protocol response if we got the protocolId in return

  if (response === protocolId) {
    response = (await multistream.read(reader)).toString();
    log('select: read "%s"', response);
  } // We're done


  if (response === protocol) {
    rest();
    return {
      stream: shakeStream,
      protocol
    };
  } // We haven't gotten a valid ack, try the other protocols


  for (const protocol of protocols) {
    log('select: write "%s"', protocol);
    multistream.write(writer, protocol);
    const response = (await multistream.read(reader)).toString();
    log('select: read "%s" for "%s"', response, protocol);

    if (response === protocol) {
      rest(); // End our writer so others can start writing to stream

      return {
        stream: shakeStream,
        protocol
      };
    }
  }

  rest();
  throw errCode(new Error('protocol selection failed'), 'ERR_UNSUPPORTED_PROTOCOL');
};

/***/ }),
/* 818 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const log = __webpack_require__(1)('mss:handle');

const BufferList = __webpack_require__(30);

const multistream = __webpack_require__(181);

const handshake = __webpack_require__(86);

const {
  PROTOCOL_ID
} = __webpack_require__(328);

module.exports = async (stream, protocols) => {
  protocols = Array.isArray(protocols) ? protocols : [protocols];
  const {
    writer,
    reader,
    rest,
    stream: shakeStream
  } = handshake(stream);

  while (true) {
    const protocol = (await multistream.read(reader)).toString();
    log('read "%s"', protocol);

    if (protocol === PROTOCOL_ID) {
      log('respond with "%s" for "%s"', PROTOCOL_ID, protocol);
      multistream.write(writer, PROTOCOL_ID);
      continue;
    }

    if (protocols.includes(protocol)) {
      multistream.write(writer, protocol);
      log('respond with "%s" for "%s"', protocol, protocol);
      rest();
      return {
        stream: shakeStream,
        protocol
      };
    }

    if (protocol === 'ls') {
      // <varint-msg-len><varint-proto-name-len><proto-name>\n<varint-proto-name-len><proto-name>\n\n
      multistream.write(writer, new BufferList(protocols.map(p => multistream.encode(p))));
      log('respond with "%s" for %s', protocols, protocol);
      continue;
    }

    multistream.write(writer, 'na');
    log('respond with "na" for "%s"', protocol);
  }
};

/***/ }),
/* 819 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const Reader = __webpack_require__(325);

const log = __webpack_require__(1)('it-multistream-select:ls');

const multistream = __webpack_require__(181);

const handshake = __webpack_require__(86);

const lp = __webpack_require__(26);

const pipe = __webpack_require__(23);

module.exports = async stream => {
  const {
    reader,
    writer,
    rest,
    stream: shakeStream
  } = handshake(stream);
  log('write "ls"');
  multistream.write(writer, 'ls');
  rest(); // Next message from remote will be (e.g. for 2 protocols):
  // <varint-msg-len><varint-proto-name-len><proto-name>\n<varint-proto-name-len><proto-name>\n

  const res = await multistream.read(reader); // After reading response we have:
  // <varint-proto-name-len><proto-name>\n<varint-proto-name-len><proto-name>\n

  const protocolsReader = Reader([res]);
  const protocols = []; // Decode each of the protocols from the reader

  await pipe(protocolsReader, lp.decode(), async source => {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;

    var _iteratorError;

    try {
      for (var _iterator = _asyncIterator(source), _step, _value; _step = await _iterator.next(), _iteratorNormalCompletion = _step.done, _value = await _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
        const protocol = _value;
        // Remove the newline
        protocols.push(protocol.shallowSlice(0, -1).toString());
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          await _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  });
  return {
    stream: shakeStream,
    protocols
  };
};

/***/ }),
/* 820 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const PeerId = __webpack_require__(9);

const multiaddr = __webpack_require__(20);

const withIs = __webpack_require__(21);

const assert = __webpack_require__(13);

const errCode = __webpack_require__(2);

const Status = __webpack_require__(821);
/**
 * An implementation of the js-libp2p connection.
 * Any libp2p transport should use an upgrader to return this connection.
 */


class Connection {
  /**
   * Creates an instance of Connection.
   * @param {object} properties properties of the connection.
   * @param {multiaddr} [properties.localAddr] local multiaddr of the connection if known.
   * @param {multiaddr} [properties.remoteAddr] remote multiaddr of the connection.
   * @param {PeerId} properties.localPeer local peer-id.
   * @param {PeerId} properties.remotePeer remote peer-id.
   * @param {function} properties.newStream new stream muxer function.
   * @param {function} properties.close close raw connection function.
   * @param {function} properties.getStreams get streams from muxer function.
   * @param {object} properties.stat metadata of the connection.
   * @param {string} properties.stat.direction connection establishment direction ("inbound" or "outbound").
   * @param {object} properties.stat.timeline connection relevant events timestamp.
   * @param {string} properties.stat.timeline.open connection opening timestamp.
   * @param {string} properties.stat.timeline.upgraded connection upgraded timestamp.
   * @param {string} [properties.stat.multiplexer] connection multiplexing identifier.
   * @param {string} [properties.stat.encryption] connection encryption method identifier.
   */
  constructor({
    localAddr,
    remoteAddr,
    localPeer,
    remotePeer,
    newStream,
    close,
    getStreams,
    stat
  }) {
    localAddr && assert(multiaddr.isMultiaddr(localAddr), 'localAddr must be an instance of multiaddr');
    assert(PeerId.isPeerId(localPeer), 'localPeer must be an instance of peer-id');
    assert(PeerId.isPeerId(remotePeer), 'remotePeer must be an instance of peer-id');
    assert(typeof newStream === 'function', 'new stream must be a function');
    assert(typeof close === 'function', 'close must be a function');
    assert(typeof getStreams === 'function', 'getStreams must be a function');
    assert(stat, 'connection metadata object must be provided');
    assert(stat.direction === 'inbound' || stat.direction === 'outbound', 'direction must be "inbound" or "outbound"');
    assert(stat.timeline, 'connection timeline object must be provided in the stat object');
    assert(stat.timeline.open, 'connection open timestamp must be provided');
    assert(stat.timeline.upgraded, 'connection upgraded timestamp must be provided');
    /**
     * Connection identifier.
     */

    this.id = parseInt(Math.random() * 1e9).toString(36) + Date.now();
    /**
     * Observed multiaddr of the local peer
     */

    this.localAddr = localAddr;
    /**
     * Observed multiaddr of the remote peer
     */

    this.remoteAddr = remoteAddr;
    /**
     * Local peer id.
     */

    this.localPeer = localPeer;
    /**
     * Remote peer id.
     */

    this.remotePeer = remotePeer;
    /**
     * Connection metadata.
     */

    this._stat = _objectSpread({}, stat, {
      status: Status.OPEN
    });
    /**
     * Reference to the new stream function of the multiplexer
     */

    this._newStream = newStream;
    /**
     * Reference to the close function of the raw connection
     */

    this._close = close;
    /**
     * Reference to the getStreams function of the muxer
     */

    this._getStreams = getStreams;
    /**
     * Connection streams registry
     */

    this.registry = new Map();
    /**
     * User provided tags
     */

    this.tags = [];
  }
  /**
   * Get connection metadata
   * @return {Object}
   */


  get stat() {
    return this._stat;
  }
  /**
   * Get all the streams of the muxer.
   * @return {Array<*>}
   */


  get streams() {
    return this._getStreams();
  }
  /**
   * Create a new stream from this connection
   * @param {string[]} protocols intended protocol for the stream
   * @return {Promise<object>} with muxed+multistream-selected stream and selected protocol
   */


  async newStream(protocols) {
    if (this.stat.status === Status.CLOSING) {
      throw errCode(new Error('the connection is being closed'), 'ERR_CONNECTION_BEING_CLOSED');
    }

    if (this.stat.status === Status.CLOSED) {
      throw errCode(new Error('the connection is closed'), 'ERR_CONNECTION_CLOSED');
    }

    if (!Array.isArray(protocols)) protocols = [protocols];
    const {
      stream,
      protocol
    } = await this._newStream(protocols);
    this.addStream(stream, protocol);
    return {
      stream,
      protocol
    };
  }
  /**
   * Add a stream when it is opened to the registry.
   * @param {*} muxedStream a muxed stream
   * @param {object} properties the stream properties to be registered
   * @param {string} properties.protocol the protocol used by the stream
   * @param {object} properties.metadata metadata of the stream
   * @return {void}
   */


  addStream(muxedStream, {
    protocol,
    metadata = {}
  }) {
    // Add metadata for the stream
    this.registry.set(muxedStream.id, _objectSpread({
      protocol
    }, metadata));
  }
  /**
   * Remove stream registry after it is closed.
   * @param {string} id identifier of the stream
   */


  removeStream(id) {
    this.registry.delete(id);
  }
  /**
   * Close the connection.
   * @return {Promise}
   */


  async close() {
    if (this.stat.status === Status.CLOSED) {
      return;
    }

    if (this._closing) {
      return this._closing;
    }

    this.stat.status = Status.CLOSING; // Close raw connection

    this._closing = await this._close();
    this._stat.timeline.close = Date.now();
    this.stat.status = Status.CLOSED;
  }

}

module.exports = withIs(Connection, {
  className: 'Connection',
  symbolName: '@libp2p/interface-connection/connection'
});

/***/ }),
/* 821 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  OPEN: 'open',
  CLOSING: 'closing',
  CLOSED: 'closed'
};

/***/ }),
/* 822 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _toConsumableArray(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  } else {
    return Array.from(arr);
  }
}

module.exports = function mutableProxyFactory(defaultTarget) {
  var mutableHandler = void 0;
  var mutableTarget = void 0;

  function setTarget(target) {
    if (!(target instanceof Object)) {
      throw new Error('Target "' + target + '" is not an object');
    }

    mutableTarget = target;
  }

  function setHandler(handler) {
    Object.keys(handler).forEach(function (key) {
      var value = handler[key];

      if (typeof value !== 'function') {
        throw new Error('Trap "' + key + ': ' + value + '" is not a function');
      }

      if (!Reflect[key]) {
        throw new Error('Trap "' + key + ': ' + value + '" is not a valid trap');
      }
    });
    mutableHandler = handler;
  }

  setTarget(function () {});

  if (defaultTarget) {
    setTarget(defaultTarget);
  }

  setHandler(Reflect); // Dynamically forward all the traps to the associated methods on the mutable handler

  var handler = new Proxy({}, {
    get: function get(target, property) {
      return function () {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return mutableHandler[property].apply(null, [mutableTarget].concat(_toConsumableArray(args.slice(1))));
      };
    }
  });
  return {
    setTarget: setTarget,
    setHandler: setHandler,
    getTarget: function getTarget() {
      return mutableTarget;
    },
    getHandler: function getHandler() {
      return mutableHandler;
    },
    proxy: new Proxy(mutableTarget, handler)
  };
};

/***/ }),
/* 823 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const assert = __webpack_require__(13);

const debug = __webpack_require__(1);

const log = debug('libp2p:peer-store');
log.error = debug('libp2p:peer-store:error');

const {
  EventEmitter
} = __webpack_require__(11);

const PeerId = __webpack_require__(9);

const PeerInfo = __webpack_require__(17);
/**
 * Responsible for managing known peers, as well as their addresses and metadata
 * @fires PeerStore#peer Emitted when a peer is connected to this node
 * @fires PeerStore#change:protocols
 * @fires PeerStore#change:multiaddrs
 */


class PeerStore extends EventEmitter {
  constructor() {
    super();
    /**
     * Map of peers
     *
     * @type {Map<string, PeerInfo>}
     */

    this.peers = new Map(); // TODO: Track ourselves. We should split `peerInfo` up into its pieces so we get better
    // control and observability. This will be the initial step for removing PeerInfo
    // https://github.com/libp2p/go-libp2p-core/blob/master/peerstore/peerstore.go
    // this.addressBook = new Map()
    // this.protoBook = new Map()
  }
  /**
   * Stores the peerInfo of a new peer.
   * If already exist, its info is updated. If `silent` is set to
   * true, no 'peer' event will be emitted. This can be useful if you
   * are already in the process of dialing the peer. The peer is technically
   * known, but may not have been added to the PeerStore yet.
   * @param {PeerInfo} peerInfo
   * @param {object} [options]
   * @param {boolean} [options.silent] (Default=false)
   * @return {PeerInfo}
   */


  put(peerInfo, options = {
    silent: false
  }) {
    assert(PeerInfo.isPeerInfo(peerInfo), 'peerInfo must be an instance of peer-info');
    let peer; // Already know the peer?

    if (this.has(peerInfo.id)) {
      peer = this.update(peerInfo);
    } else {
      peer = this.add(peerInfo); // Emit the peer if silent = false

      !options.silent && this.emit('peer', peerInfo);
    }

    return peer;
  }
  /**
   * Add a new peer to the store.
   * @param {PeerInfo} peerInfo
   * @return {PeerInfo}
   */


  add(peerInfo) {
    assert(PeerInfo.isPeerInfo(peerInfo), 'peerInfo must be an instance of peer-info'); // Create new instance and add values to it

    const newPeerInfo = new PeerInfo(peerInfo.id);
    peerInfo.multiaddrs.forEach(ma => newPeerInfo.multiaddrs.add(ma));
    peerInfo.protocols.forEach(p => newPeerInfo.protocols.add(p));
    const connectedMa = peerInfo.isConnected();
    connectedMa && newPeerInfo.connect(connectedMa);
    const peerProxy = new Proxy(newPeerInfo, {
      set: (obj, prop, value) => {
        if (prop === 'multiaddrs') {
          this.emit('change:multiaddrs', {
            peerInfo: obj,
            multiaddrs: value.toArray()
          });
        } else if (prop === 'protocols') {
          this.emit('change:protocols', {
            peerInfo: obj,
            protocols: Array.from(value)
          });
        }

        return Reflect.set(...arguments);
      }
    });
    this.peers.set(peerInfo.id.toB58String(), peerProxy);
    return peerProxy;
  }
  /**
   * Updates an already known peer.
   * @param {PeerInfo} peerInfo
   * @return {PeerInfo}
   */


  update(peerInfo) {
    assert(PeerInfo.isPeerInfo(peerInfo), 'peerInfo must be an instance of peer-info');
    const id = peerInfo.id.toB58String();
    const recorded = this.peers.get(id); // pass active connection state

    const ma = peerInfo.isConnected();

    if (ma) {
      recorded.connect(ma);
    } // Verify new multiaddrs
    // TODO: better track added and removed multiaddrs


    const multiaddrsIntersection = [...recorded.multiaddrs.toArray()].filter(m => peerInfo.multiaddrs.has(m));

    if (multiaddrsIntersection.length !== peerInfo.multiaddrs.size || multiaddrsIntersection.length !== recorded.multiaddrs.size) {
      for (const ma of peerInfo.multiaddrs.toArray()) {
        recorded.multiaddrs.add(ma);
      }

      this.emit('change:multiaddrs', {
        peerInfo: recorded,
        multiaddrs: recorded.multiaddrs.toArray()
      });
    } // Update protocols
    // TODO: better track added and removed protocols


    const protocolsIntersection = new Set([...recorded.protocols].filter(p => peerInfo.protocols.has(p)));

    if (protocolsIntersection.size !== peerInfo.protocols.size || protocolsIntersection.size !== recorded.protocols.size) {
      for (const protocol of peerInfo.protocols) {
        recorded.protocols.add(protocol);
      }

      this.emit('change:protocols', {
        peerInfo: recorded,
        protocols: Array.from(recorded.protocols)
      });
    } // Add the public key if missing


    if (!recorded.id.pubKey && peerInfo.id.pubKey) {
      recorded.id.pubKey = peerInfo.id.pubKey;
    }

    return recorded;
  }
  /**
   * Get the info to the given id.
   * @param {PeerId|string} peerId b58str id
   * @returns {PeerInfo}
   */


  get(peerId) {
    // TODO: deprecate this and just accept `PeerId` instances
    if (PeerId.isPeerId(peerId)) {
      peerId = peerId.toB58String();
    }

    return this.peers.get(peerId);
  }
  /**
   * Has the info to the given id.
   * @param {PeerId|string} peerId b58str id
   * @returns {boolean}
   */


  has(peerId) {
    // TODO: deprecate this and just accept `PeerId` instances
    if (PeerId.isPeerId(peerId)) {
      peerId = peerId.toB58String();
    }

    return this.peers.has(peerId);
  }
  /**
   * Removes the Peer with the matching `peerId` from the PeerStore
   * @param {PeerId|string} peerId b58str id
   * @returns {boolean} true if found and removed
   */


  remove(peerId) {
    // TODO: deprecate this and just accept `PeerId` instances
    if (PeerId.isPeerId(peerId)) {
      peerId = peerId.toB58String();
    }

    return this.peers.delete(peerId);
  }
  /**
   * Completely replaces the existing peers metadata with the given `peerInfo`
   * @param {PeerInfo} peerInfo
   * @returns {void}
   */


  replace(peerInfo) {
    assert(PeerInfo.isPeerInfo(peerInfo), 'peerInfo must be an instance of peer-info');
    this.remove(peerInfo.id.toB58String());
    this.add(peerInfo); // This should be cleaned up in PeerStore v2

    this.emit('change:multiaddrs', {
      peerInfo,
      multiaddrs: peerInfo.multiaddrs.toArray()
    });
    this.emit('change:protocols', {
      peerInfo,
      protocols: Array.from(peerInfo.protocols)
    });
  }
  /**
   * Returns the known multiaddrs for a given `PeerInfo`
   * @param {PeerInfo} peer
   * @returns {Array<Multiaddr>}
   */


  multiaddrsForPeer(peer) {
    return this.put(peer, true).multiaddrs.toArray();
  }

}

module.exports = PeerStore;

/***/ }),
/* 824 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const assert = __webpack_require__(13);

const debug = __webpack_require__(1);

const log = debug('libp2p:peer-store');
log.error = debug('libp2p:peer-store:error');

const Topology = __webpack_require__(313);

const {
  Connection
} = __webpack_require__(329);

const PeerInfo = __webpack_require__(17);
/**
 * Responsible for notifying registered protocols of events in the network.
 */


class Registrar {
  /**
   * @param {Object} props
   * @param {PeerStore} props.peerStore
   * @constructor
   */
  constructor({
    peerStore
  }) {
    this.peerStore = peerStore;
    /**
     * Map of connections per peer
     * TODO: this should be handled by connectionManager
     * @type {Map<string, Array<conn>>}
     */

    this.connections = new Map();
    /**
     * Map of topologies
     *
     * @type {Map<string, object>}
     */

    this.topologies = new Map();
    this._handle = undefined;
  }

  get handle() {
    return this._handle;
  }

  set handle(handle) {
    this._handle = handle;
  }
  /**
   * Cleans up the registrar
   * @async
   */


  async close() {
    // Close all connections we're tracking
    const tasks = [];

    for (const connectionList of this.connections.values()) {
      for (const connection of connectionList) {
        tasks.push(connection.close());
      }
    }

    await tasks;
    this.connections.clear();
  }
  /**
   * Add a new connected peer to the record
   * TODO: this should live in the ConnectionManager
   * @param {PeerInfo} peerInfo
   * @param {Connection} conn
   * @returns {void}
   */


  onConnect(peerInfo, conn) {
    assert(PeerInfo.isPeerInfo(peerInfo), 'peerInfo must be an instance of peer-info');
    assert(Connection.isConnection(conn), 'conn must be an instance of interface-connection');
    const id = peerInfo.id.toB58String();
    const storedConn = this.connections.get(id);

    if (storedConn) {
      storedConn.push(conn);
    } else {
      this.connections.set(id, [conn]);
    }
  }
  /**
   * Remove a disconnected peer from the record
   * TODO: this should live in the ConnectionManager
   * @param {PeerInfo} peerInfo
   * @param {Connection} connection
   * @param {Error} [error]
   * @returns {void}
   */


  onDisconnect(peerInfo, connection, error) {
    assert(PeerInfo.isPeerInfo(peerInfo), 'peerInfo must be an instance of peer-info');
    const id = peerInfo.id.toB58String();
    let storedConn = this.connections.get(id);

    if (storedConn && storedConn.length > 1) {
      storedConn = storedConn.filter(conn => conn.id !== connection.id);
      this.connections.set(id, storedConn);
    } else if (storedConn) {
      for (const [, topology] of this.topologies) {
        topology.disconnect(peerInfo, error);
      }

      this.connections.delete(peerInfo.id.toB58String());
    }
  }
  /**
   * Get a connection with a peer.
   * @param {PeerInfo} peerInfo
   * @returns {Connection}
   */


  getConnection(peerInfo) {
    assert(PeerInfo.isPeerInfo(peerInfo), 'peerInfo must be an instance of peer-info');
    const connections = this.connections.get(peerInfo.id.toB58String()); // Return the first, open connection

    if (connections) {
      return connections.find(connection => connection.stat.status === 'open');
    }

    return null;
  }
  /**
   * Register handlers for a set of multicodecs given
   * @param {Topology} topology protocol topology
   * @return {string} registrar identifier
   */


  register(topology) {
    assert(Topology.isTopology(topology), 'topology must be an instance of interfaces/topology'); // Create topology

    const id = parseInt(Math.random() * 1e9).toString(36) + Date.now();
    this.topologies.set(id, topology); // Set registrar

    topology.registrar = this;
    return id;
  }
  /**
   * Unregister topology.
   * @param {string} id registrar identifier
   * @return {boolean} unregistered successfully
   */


  unregister(id) {
    return this.topologies.delete(id);
  }

}

module.exports = Registrar;

/***/ }),
/* 825 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const debug = __webpack_require__(1);

const log = debug('libp2p-ping');
log.error = debug('libp2p-ping:error');

const errCode = __webpack_require__(32);

const crypto = __webpack_require__(28);

const pipe = __webpack_require__(23);

const {
  toBuffer
} = __webpack_require__(117);

const {
  collect,
  take
} = __webpack_require__(41);

const {
  PROTOCOL,
  PING_LENGTH
} = __webpack_require__(826);
/**
 * Ping a given peer and wait for its response, getting the operation latency.
 * @param {Libp2p} node
 * @param {PeerInfo} peer
 * @returns {Promise<Number>}
 */


async function ping(node, peer) {
  log('dialing %s to %s', PROTOCOL, peer.id.toB58String());
  const {
    stream
  } = await node.dialProtocol(peer, PROTOCOL);
  const start = new Date();
  const data = crypto.randomBytes(PING_LENGTH);
  const [result] = await pipe([data], stream, stream => take(1, stream), toBuffer, collect);
  const end = Date.now();

  if (!data.equals(result)) {
    throw errCode(new Error('Received wrong ping ack'), 'ERR_WRONG_PING_ACK');
  }

  return end - start;
}
/**
 * Subscribe ping protocol handler.
 * @param {Libp2p} node
 */


function mount(node) {
  node.handle(PROTOCOL, ({
    stream
  }) => pipe(stream, stream));
}
/**
 * Unsubscribe ping protocol handler.
 * @param {Libp2p} node
 */


function unmount(node) {
  node.unhandle(PROTOCOL);
}

exports = module.exports = ping;
exports.mount = mount;
exports.unmount = unmount;

/***/ }),
/* 826 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  PROTOCOL: '/ipfs/ping/1.0.0',
  PING_LENGTH: 32
};

/***/ }),
/* 827 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const debug = __webpack_require__(1);

const pb = __webpack_require__(828);

const lp = __webpack_require__(26);

const pipe = __webpack_require__(23);

const {
  collect,
  take
} = __webpack_require__(41);

const PeerInfo = __webpack_require__(17);

const PeerId = __webpack_require__(9);

const multiaddr = __webpack_require__(20);

const {
  toBuffer
} = __webpack_require__(117);

const Message = __webpack_require__(830);

const log = debug('libp2p:identify');
log.error = debug('libp2p:identify:error');

const {
  MULTICODEC_IDENTIFY,
  MULTICODEC_IDENTIFY_PUSH,
  AGENT_VERSION,
  PROTOCOL_VERSION
} = __webpack_require__(831);

const errCode = __webpack_require__(32);

const {
  codes
} = __webpack_require__(43);

class IdentifyService {
  /**
   * Replaces the multiaddrs on the given `peerInfo`,
   * with the provided `multiaddrs`
   * @param {PeerInfo} peerInfo
   * @param {Array<Multiaddr>|Array<Buffer>} multiaddrs
   */
  static updatePeerAddresses(peerInfo, multiaddrs) {
    if (multiaddrs && multiaddrs.length > 0) {
      peerInfo.multiaddrs.clear();
      multiaddrs.forEach(ma => {
        try {
          peerInfo.multiaddrs.add(ma);
        } catch (err) {
          log.error('could not add multiaddr', err);
        }
      });
    }
  }
  /**
   * Replaces the protocols on the given `peerInfo`,
   * with the provided `protocols`
   * @static
   * @param {PeerInfo} peerInfo
   * @param {Array<string>} protocols
   */


  static updatePeerProtocols(peerInfo, protocols) {
    if (protocols && protocols.length > 0) {
      peerInfo.protocols.clear();
      protocols.forEach(proto => peerInfo.protocols.add(proto));
    }
  }
  /**
   * Takes the `addr` and converts it to a Multiaddr if possible
   * @param {Buffer|String} addr
   * @returns {Multiaddr|null}
   */


  static getCleanMultiaddr(addr) {
    if (addr && addr.length > 0) {
      try {
        return multiaddr(addr);
      } catch (_) {
        return null;
      }
    }

    return null;
  }
  /**
   * @constructor
   * @param {object} options
   * @param {Registrar} options.registrar
   * @param {Map<string, handler>} options.protocols A reference to the protocols we support
   * @param {PeerInfo} options.peerInfo The peer running the identify service
   */


  constructor(options) {
    /**
     * @property {Registrar}
     */
    this.registrar = options.registrar;
    /**
     * @property {PeerInfo}
     */

    this.peerInfo = options.peerInfo;
    this._protocols = options.protocols;
    this.handleMessage = this.handleMessage.bind(this);
  }
  /**
   * Send an Identify Push update to the list of connections
   * @param {Array<Connection>} connections
   * @returns {Promise<void>}
   */


  push(connections) {
    const pushes = connections.map(async connection => {
      try {
        const {
          stream
        } = await connection.newStream(MULTICODEC_IDENTIFY_PUSH);
        await pipe([{
          listenAddrs: this.peerInfo.multiaddrs.toArray().map(ma => ma.buffer),
          protocols: Array.from(this._protocols.keys())
        }], pb.encode(Message), stream);
      } catch (err) {
        // Just log errors
        log.error('could not push identify update to peer', err);
      }
    });
    return Promise.all(pushes);
  }
  /**
   * Calls `push` for all peers in the `peerStore` that are connected
   * @param {PeerStore} peerStore
   */


  pushToPeerStore(peerStore) {
    const connections = [];
    let connection;

    for (const peer of peerStore.peers.values()) {
      if (peer.protocols.has(MULTICODEC_IDENTIFY_PUSH) && (connection = this.registrar.getConnection(peer))) {
        connections.push(connection);
      }
    }

    this.push(connections);
  }
  /**
   * Requests the `Identify` message from peer associated with the given `connection`.
   * If the identified peer does not match the `PeerId` associated with the connection,
   * an error will be thrown.
   *
   * @async
   * @param {Connection} connection
   * @returns {Promise<void>}
   */


  async identify(connection) {
    const {
      stream
    } = await connection.newStream(MULTICODEC_IDENTIFY);
    const [data] = await pipe(stream, lp.decode(), take(1), toBuffer, collect);

    if (!data) {
      throw errCode(new Error('No data could be retrieved'), codes.ERR_CONNECTION_ENDED);
    }

    let message;

    try {
      message = Message.decode(data);
    } catch (err) {
      throw errCode(err, codes.ERR_INVALID_MESSAGE);
    }

    let {
      publicKey,
      listenAddrs,
      protocols,
      observedAddr
    } = message;
    const id = await PeerId.createFromPubKey(publicKey);
    const peerInfo = new PeerInfo(id);

    if (connection.remotePeer.toB58String() !== id.toB58String()) {
      throw errCode(new Error('identified peer does not match the expected peer'), codes.ERR_INVALID_PEER);
    } // Get the observedAddr if there is one


    observedAddr = IdentifyService.getCleanMultiaddr(observedAddr); // Copy the listenAddrs and protocols

    IdentifyService.updatePeerAddresses(peerInfo, listenAddrs);
    IdentifyService.updatePeerProtocols(peerInfo, protocols);
    this.registrar.peerStore.replace(peerInfo); // TODO: Track our observed address so that we can score it

    log('received observed address of %s', observedAddr);
  }
  /**
   * A handler to register with Libp2p to process identify messages.
   *
   * @param {object} options
   * @param {String} options.protocol
   * @param {*} options.stream
   * @param {Connection} options.connection
   * @returns {Promise<void>}
   */


  handleMessage({
    connection,
    stream,
    protocol
  }) {
    switch (protocol) {
      case MULTICODEC_IDENTIFY:
        return this._handleIdentify({
          connection,
          stream
        });

      case MULTICODEC_IDENTIFY_PUSH:
        return this._handlePush({
          connection,
          stream
        });

      default:
        log.error('cannot handle unknown protocol %s', protocol);
    }
  }
  /**
   * Sends the `Identify` response to the requesting peer over the
   * given `connection`
   * @private
   * @param {object} options
   * @param {*} options.stream
   * @param {Connection} options.connection
   */


  _handleIdentify({
    connection,
    stream
  }) {
    let publicKey = Buffer.alloc(0);

    if (this.peerInfo.id.pubKey) {
      publicKey = this.peerInfo.id.pubKey.bytes;
    }

    const message = Message.encode({
      protocolVersion: PROTOCOL_VERSION,
      agentVersion: AGENT_VERSION,
      publicKey,
      listenAddrs: this.peerInfo.multiaddrs.toArray().map(ma => ma.buffer),
      observedAddr: connection.remoteAddr.buffer,
      protocols: Array.from(this._protocols.keys())
    });
    pipe([message], lp.encode(), stream);
  }
  /**
   * Reads the Identify Push message from the given `connection`
   * @private
   * @param {object} options
   * @param {*} options.stream
   * @param {Connection} options.connection
   */


  async _handlePush({
    connection,
    stream
  }) {
    const [data] = await pipe(stream, lp.decode(), take(1), toBuffer, collect);
    let message;

    try {
      message = Message.decode(data);
    } catch (err) {
      return log.error('received invalid message', err);
    } // Update the listen addresses


    const peerInfo = new PeerInfo(connection.remotePeer);

    try {
      IdentifyService.updatePeerAddresses(peerInfo, message.listenAddrs);
    } catch (err) {
      return log.error('received invalid listen addrs', err);
    } // Update the protocols


    IdentifyService.updatePeerProtocols(peerInfo, message.protocols); // Update the peer in the PeerStore

    this.registrar.peerStore.replace(peerInfo);
  }

}

module.exports.IdentifyService = IdentifyService;
/**
 * The protocols the IdentifyService supports
 * @property multicodecs
 */

module.exports.multicodecs = {
  IDENTIFY: MULTICODEC_IDENTIFY,
  IDENTIFY_PUSH: MULTICODEC_IDENTIFY_PUSH
};
module.exports.Message = Message;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 828 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const lp = __webpack_require__(26);

const it = __webpack_require__(829);

const toBuffer = __webpack_require__(117);

module.exports.encode = proto => {
  return source => lp.encode()(it.encode(proto)(source));
};

module.exports.decode = proto => {
  return source => it.decode(proto)(toBuffer(lp.decode()(source)));
};

module.exports.it = it;

/***/ }),
/* 829 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

module.exports.encode = proto => {
  return source => _wrapAsyncGenerator(function* () {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;

    var _iteratorError;

    try {
      for (var _iterator = _asyncIterator(source), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
        const msg = _value;
        yield proto.encode(msg);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          yield _awaitAsyncGenerator(_iterator.return());
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  })();
};

module.exports.decode = proto => {
  return source => _wrapAsyncGenerator(function* () {
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;

    var _iteratorError2;

    try {
      for (var _iterator2 = _asyncIterator(source), _step2, _value2; _step2 = yield _awaitAsyncGenerator(_iterator2.next()), _iteratorNormalCompletion2 = _step2.done, _value2 = yield _awaitAsyncGenerator(_step2.value), !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {
        const msg = _value2;
        yield proto.decode(msg);
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          yield _awaitAsyncGenerator(_iterator2.return());
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }
  })();
};

/***/ }),
/* 830 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const protons = __webpack_require__(24);

const schema = "\nmessage Identify {\n  // protocolVersion determines compatibility between peers\n  optional string protocolVersion = 5; // e.g. ipfs/1.0.0\n\n  // agentVersion is like a UserAgent string in browsers, or client version in bittorrent\n  // includes the client name and client.\n  optional string agentVersion = 6; // e.g. go-ipfs/0.1.0\n\n  // publicKey is this node's public key (which also gives its node.ID)\n  // - may not need to be sent, as secure channel implies it has been sent.\n  // - then again, if we change / disable secure channel, may still want it.\n  optional bytes publicKey = 1;\n\n  // listenAddrs are the multiaddrs the sender node listens for open connections on\n  repeated bytes listenAddrs = 2;\n\n  // oservedAddr is the multiaddr of the remote endpoint that the sender node perceives\n  // this is useful information to convey to the other side, as it helps the remote endpoint\n  // determine whether its connection to the local peer goes through NAT.\n  optional bytes observedAddr = 4;\n\n  repeated string protocols = 3;\n}\n";
module.exports = protons(schema).Identify;

/***/ }),
/* 831 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports.PROTOCOL_VERSION = 'ipfs/0.1.0';
module.exports.AGENT_VERSION = 'js-libp2p/0.1.0';
module.exports.MULTICODEC_IDENTIFY = '/ipfs/id/1.0.0';
module.exports.MULTICODEC_IDENTIFY_PUSH = '/ipfs/id/push/1.0.0';

/***/ }),
/* 832 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const WS = __webpack_require__(833);

const WebRTCStar = __webpack_require__(861);

const Multiplex = __webpack_require__(891);

const SECIO = __webpack_require__(898);

const KadDHT = __webpack_require__(909);

const GossipSub = __webpack_require__(312);

const ipnsUtils = __webpack_require__(311);

module.exports = () => {
  return {
    dialer: {
      maxParallelDials: 150,
      // 150 total parallel multiaddr dials
      maxDialsPerPeer: 4,
      // Allow 4 multiaddrs to be dialed per peer in parallel
      dialTimeout: 10e3 // 10 second dial timeout per peer dial

    },
    modules: {
      transport: [WS, WebRTCStar],
      streamMuxer: [Multiplex],
      connEncryption: [SECIO],
      peerDiscovery: [],
      dht: KadDHT,
      pubsub: GossipSub
    },
    config: {
      peerDiscovery: {
        autoDial: true,
        bootstrap: {
          enabled: true
        },
        webRTCStar: {
          enabled: true
        },
        websocketStar: {
          enabled: true
        }
      },
      dht: {
        kBucketSize: 20,
        enabled: false,
        randomWalk: {
          enabled: false
        },
        validators: {
          ipns: ipnsUtils.validator
        },
        selectors: {
          ipns: ipnsUtils.selector
        }
      },
      pubsub: {
        enabled: true,
        emitSelf: true
      }
    },
    metrics: {
      enabled: true
    }
  };
};

/***/ }),
/* 833 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const connect = __webpack_require__(834);

const mafmt = __webpack_require__(56);

const withIs = __webpack_require__(21);

const toUri = __webpack_require__(307);

const {
  AbortError
} = __webpack_require__(180);

const log = __webpack_require__(1)('libp2p:websockets');

const assert = __webpack_require__(13);

const createListener = __webpack_require__(851);

const toConnection = __webpack_require__(852);

const {
  CODE_CIRCUIT,
  CODE_P2P
} = __webpack_require__(330);
/**
 * @class WebSockets
 */


class WebSockets {
  /**
   * @constructor
   * @param {object} options
   * @param {Upgrader} options.upgrader
   */
  constructor({
    upgrader
  }) {
    assert(upgrader, 'An upgrader must be provided. See https://github.com/libp2p/interface-transport#upgrader.');
    this._upgrader = upgrader;
  }
  /**
   * @async
   * @param {Multiaddr} ma
   * @param {object} [options]
   * @param {AbortSignal} [options.signal] Used to abort dial requests
   * @returns {Connection} An upgraded Connection
   */


  async dial(ma, options = {}) {
    log('dialing %s', ma);
    const socket = await this._connect(ma, options);
    const maConn = toConnection(socket, {
      remoteAddr: ma,
      signal: options.signal
    });
    log('new outbound connection %s', maConn.remoteAddr);
    const conn = await this._upgrader.upgradeOutbound(maConn);
    log('outbound connection %s upgraded', maConn.remoteAddr);
    return conn;
  }
  /**
   * @private
   * @param {Multiaddr} ma
   * @param {object} [options]
   * @param {AbortSignal} [options.signal] Used to abort dial requests
   * @returns {Promise<WebSocket>} Resolves a extended duplex iterable on top of a WebSocket
   */


  async _connect(ma, options = {}) {
    if (options.signal && options.signal.aborted) {
      throw new AbortError();
    }

    const cOpts = ma.toOptions();
    log('dialing %s:%s', cOpts.host, cOpts.port);
    const rawSocket = connect(toUri(ma), Object.assign({
      binary: true
    }, options));

    if (!options.signal) {
      await rawSocket.connected();
      log('connected %s', ma);
      return rawSocket;
    } // Allow abort via signal during connect


    let onAbort;
    const abort = new Promise((resolve, reject) => {
      onAbort = () => {
        reject(new AbortError());
        rawSocket.close();
      }; // Already aborted?


      if (options.signal.aborted) return onAbort();
      options.signal.addEventListener('abort', onAbort);
    });

    try {
      await Promise.race([abort, rawSocket.connected()]);
    } finally {
      options.signal.removeEventListener('abort', onAbort);
    }

    log('connected %s', ma);
    return rawSocket;
  }
  /**
   * Creates a Websockets listener. The provided `handler` function will be called
   * anytime a new incoming Connection has been successfully upgraded via
   * `upgrader.upgradeInbound`.
   * @param {object} [options]
   * @param {http.Server} [options.server] A pre-created Node.js HTTP/S server.
   * @param {function (Connection)} handler
   * @returns {Listener} A Websockets listener
   */


  createListener(options = {}, handler) {
    if (typeof options === 'function') {
      handler = options;
      options = {};
    }

    return createListener({
      handler,
      upgrader: this._upgrader
    }, options);
  }
  /**
   * Takes a list of `Multiaddr`s and returns only valid Websockets addresses
   * @param {Multiaddr[]} multiaddrs
   * @returns {Multiaddr[]} Valid Websockets multiaddrs
   */


  filter(multiaddrs) {
    multiaddrs = Array.isArray(multiaddrs) ? multiaddrs : [multiaddrs];
    return multiaddrs.filter(ma => {
      if (ma.protoCodes().includes(CODE_CIRCUIT)) {
        return false;
      }

      return mafmt.WebSockets.matches(ma.decapsulateCode(CODE_P2P)) || mafmt.WebSocketsSecure.matches(ma.decapsulateCode(CODE_P2P));
    });
  }

}

module.exports = withIs(WebSockets, {
  className: 'WebSockets',
  symbolName: '@libp2p/js-libp2p-websockets/websockets'
});

/***/ }),
/* 834 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // load websocket library if we are not in the browser

var WebSocket = __webpack_require__(835);

var duplex = __webpack_require__(837);

var wsurl = __webpack_require__(843);

module.exports = function (addr, opts = {}) {
  const location = typeof window === 'undefined' ? {} : window.location;
  const url = wsurl(addr, location);
  const socket = new WebSocket(url, opts.websocket);
  const stream = duplex(socket, opts);
  stream.remoteAddress = url;

  stream.close = () => new Promise((resolve, reject) => {
    socket.addEventListener('close', resolve);
    socket.close();
  });

  stream.destroy = () => {
    socket.terminate();
  };

  stream.socket = socket;
  return stream;
};

module.exports.connect = module.exports;

/***/ }),
/* 835 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* eslint-env browser */
module.exports = typeof WebSocket === 'undefined' ? __webpack_require__(836) : WebSocket;

/***/ }),
/* 836 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 837 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const source = __webpack_require__(838);

const sink = __webpack_require__(841);

module.exports = (socket, options) => {
  options = options || {};

  if (options.binaryType) {
    socket.binaryType = options.binaryType;
  } else if (options.binary) {
    socket.binaryType = 'arraybuffer';
  }

  const duplex = {
    sink: sink(socket, options),
    source: source(socket, options),
    connected: () => duplex.source.connected()
  };
  return duplex;
};

/***/ }),
/* 838 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const {
  Buffer
} = __webpack_require__(6);

const {
  EventIterator
} = __webpack_require__(839); // copied from github.com/feross/buffer
// Some ArrayBuffers are not passing the instanceof check, so we need to do a bit more work :(


function isArrayBuffer(obj) {
  return obj instanceof ArrayBuffer || obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' && typeof obj.byteLength === 'number';
}

module.exports = socket => {
  const removeListener = socket.removeEventListener || socket.removeListener;

  const source = _wrapAsyncGenerator(function* () {
    const messages = new EventIterator((push, stop, fail) => {
      socket.addEventListener('message', push);
      socket.addEventListener('error', fail);
      socket.addEventListener('close', stop);
    }, (push, stop, fail) => {
      removeListener.call(socket, 'message', push);
      removeListener.call(socket, 'error', fail);
      removeListener.call(socket, 'close', stop);
    }, {
      highWaterMark: Infinity
    });
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;

    var _iteratorError;

    try {
      for (var _iterator = _asyncIterator(messages), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
        let {
          data
        } = _value;
        yield isArrayBuffer(data) ? Buffer.from(data) : data;
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          yield _awaitAsyncGenerator(_iterator.return());
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  })();

  let connected = socket.readyState === 1;
  let connError;
  socket.addEventListener('open', () => {
    connected = true;
    connError = null;
  });
  socket.addEventListener('close', () => {
    connected = false;
    connError = null;
  });
  socket.addEventListener('error', err => {
    if (!connected) connError = err;
  });

  source.connected = () => new Promise((resolve, reject) => {
    if (connected) return resolve();
    if (connError) return reject(connError);

    const cleanUp = cont => {
      removeListener.call(socket, 'open', onOpen);
      removeListener.call(socket, 'error', onError);
      cont();
    };

    const onOpen = () => cleanUp(resolve);

    const onError = err => cleanUp(() => reject(err));

    socket.addEventListener('open', onOpen);
    socket.addEventListener('error', onError);
  });

  return source;
};

/***/ }),
/* 839 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

const event_iterator_1 = __webpack_require__(840);

exports.EventIterator = event_iterator_1.EventIterator;

function subscribe(event, options, evOptions) {
  return new event_iterator_1.EventIterator(push => {
    this.addEventListener(event, push, options);
  }, push => {
    this.removeEventListener(event, push, options);
  }, evOptions);
}

exports.subscribe = subscribe;
exports.default = event_iterator_1.EventIterator;

/***/ }),
/* 840 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

class EventIterator {
  constructor(listen, remove, options = {}) {
    this.listen = listen;
    this.remove = remove;
    this.options = Object.assign({
      highWaterMark: 100
    }, options);
    Object.freeze(this);
  }

  [Symbol.asyncIterator]() {
    let placeholder;
    const queue = [];
    const listen = this.listen;
    const remove = this.remove;

    const push = value => {
      const resolution = {
        value,
        done: false
      };

      if (placeholder) {
        placeholder.resolve(resolution);
        placeholder = undefined;
      } else {
        queue.push(Promise.resolve(resolution));
        const {
          highWaterMark
        } = this.options;

        if (highWaterMark !== undefined && queue.length >= highWaterMark && console) {
          console.warn("EventIterator queue reached ".concat(queue.length, " items"));
        }
      }
    };

    const stop = () => {
      if (remove) {
        remove(push, stop, fail);
      }

      const resolution = {
        done: true
      };

      if (placeholder) {
        placeholder.resolve(resolution);
        placeholder = undefined;
      } else {
        queue.push(Promise.resolve(resolution));
      }
    };

    const fail = error => {
      if (remove) {
        remove(push, stop, fail);
      }

      if (placeholder) {
        placeholder.reject(error);
        placeholder = undefined;
      } else {
        const rejection = Promise.reject(error);
        /* Attach error handler to avoid leaking an unhandled promise rejection. */

        rejection.catch(() => {});
        queue.push(rejection);
      }
    };

    listen(push, stop, fail);
    return {
      next(value) {
        if (queue.length) {
          return queue.shift();
        } else {
          return new Promise((resolve, reject) => {
            placeholder = {
              resolve,
              reject
            };
          });
        }
      },

      return() {
        if (remove) {
          remove(push, stop, fail);
        }

        return Promise.resolve({
          done: true
        });
      }

    };
  }

}

exports.EventIterator = EventIterator;
exports.default = EventIterator;

/***/ }),
/* 841 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const ready = __webpack_require__(842);

module.exports = (socket, options) => {
  options = options || {};
  options.closeOnEnd = options.closeOnEnd !== false;
  return async source => {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;

    var _iteratorError;

    try {
      for (var _iterator = _asyncIterator(source), _step, _value; _step = await _iterator.next(), _iteratorNormalCompletion = _step.done, _value = await _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
        const data = _value;

        try {
          await ready(socket);
        } catch (err) {
          if (err.message === 'socket closed') break;
          throw err;
        }

        socket.send(data);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          await _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    if (options.closeOnEnd && socket.readyState <= 1) {
      return new Promise((resolve, reject) => {
        socket.addEventListener('close', event => {
          if (event.wasClean || event.code === 1006) {
            resolve();
          } else {
            const err = Object.assign(new Error('ws error'), {
              event
            });
            reject(err);
          }
        });
        setTimeout(() => socket.close());
      });
    }
  };
};

/***/ }),
/* 842 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = async socket => {
  // if the socket is closing or closed, return end
  if (socket.readyState >= 2) {
    throw new Error('socket closed');
  } // if open, return


  if (socket.readyState === 1) {
    return;
  }

  return new Promise((resolve, reject) => {
    let remove = socket && (socket.removeEventListener || socket.removeListener);

    function cleanup() {
      if (typeof remove === 'function') {
        remove.call(socket, 'open', handleOpen);
        remove.call(socket, 'error', handleErr);
      }
    }

    function handleOpen() {
      cleanup();
      resolve();
    }

    function handleErr(evt) {
      cleanup();
      reject(evt);
    }

    socket.addEventListener('open', handleOpen);
    socket.addEventListener('error', handleErr);
  });
};

/***/ }),
/* 843 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const rurl = __webpack_require__(844);

const map = {
  http: 'ws',
  https: 'wss'
};
const def = 'ws';

module.exports = (url, location) => rurl(url, location, map, def);

/***/ }),
/* 844 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


//normalize a ws url.
var URL = __webpack_require__(845);

module.exports = function (url, location, protocolMap, defaultProtocol) {
  protocolMap = protocolMap || {};
  /*
   https://nodejs.org/dist/latest-v6.x/docs/api/url.html#url_url_parse_urlstr_parsequerystring_slashesdenotehost
   I didn't know this, but url.parse takes a 3rd
  argument which interprets "//foo.com" as the hostname,
  but without the protocol. by default, // is interpreted
  as the path.
   that lets us do what the wsurl module does.
  https://www.npmjs.com/package/wsurl
   but most of the time, I want to write js
  that will work on localhost, and will work
  on a server...
   so I want to just do createWebSocket('/')
  and get "ws://mydomain.com/"
   */

  var url = URL.parse(url, false, true);
  var proto;
  if (url.protocol) proto = url.protocol;else {
    proto = location.protocol ? location.protocol.replace(/:$/, '') : 'http';
    proto = (protocolMap[proto] || defaultProtocol || proto) + ':';
  } //handle quirk in url package

  if (url.host && url.host[0] === ':') url.host = null; //useful for websockets

  if (url.hostname) {
    return URL.format({
      protocol: proto,
      slashes: true,
      hostname: url.hostname,
      port: url.port,
      pathname: url.pathname,
      search: url.search
    });
  } else url.host = location.host; //included for completeness. would you want to do this?


  if (url.port) {
    return URL.format({
      protocol: proto,
      slashes: true,
      host: location.hostname + ':' + url.port,
      port: url.port,
      pathname: url.pathname,
      search: url.search
    });
  } //definately useful for websockets


  if (url.pathname) {
    return URL.format({
      protocol: proto,
      slashes: true,
      host: url.host,
      pathname: url.pathname,
      search: url.search
    });
  } else url.pathname = location.pathname; //included for completeness. would you want to do this?


  if (url.search) {
    return URL.format({
      protocol: proto,
      slashes: true,
      host: url.host,
      pathname: url.pathname,
      search: url.search
    });
  } else url.search = location.search;

  return url.format(url);
};

/***/ }),
/* 845 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


var punycode = __webpack_require__(846);

var util = __webpack_require__(847);

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;
exports.Url = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
} // Reference: RFC 3986, RFC 1808, RFC 2396
// define these here so at least they only have to be
// compiled once on the first module load.


var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,
    // Special case for a simple path URL
simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,
    // RFC 2396: characters reserved for delimiting URLs.
// We actually just auto-escape these.
delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],
    // RFC 2396: characters not allowed for various reasons.
unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),
    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
// Note that any invalid chars are also handled, but these
// are the ones that are *expected* to be seen, so we fast-path
// them.
nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
unsafeProtocol = {
  'javascript': true,
  'javascript:': true
},
    // protocols that never have a hostname.
hostlessProtocol = {
  'javascript': true,
  'javascript:': true
},
    // protocols that always contain a // bit.
slashedProtocol = {
  'http': true,
  'https': true,
  'ftp': true,
  'gopher': true,
  'file': true,
  'http:': true,
  'https:': true,
  'ftp:': true,
  'gopher:': true,
  'file:': true
},
    querystring = __webpack_require__(848);

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && util.isObject(url) && url instanceof Url) return url;
  var u = new Url();
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function (url, parseQueryString, slashesDenoteHost) {
  if (!util.isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  } // Copy chrome, IE, opera backslash-handling behavior.
  // Back slashes before the query string get converted to forward slashes
  // See: https://code.google.com/p/chromium/issues/detail?id=25916


  var queryIndex = url.indexOf('?'),
      splitter = queryIndex !== -1 && queryIndex < url.indexOf('#') ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);
  var rest = url; // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"

  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);

    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];

      if (simplePath[2]) {
        this.search = simplePath[2];

        if (parseQueryString) {
          this.query = querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }

      return this;
    }
  }

  var proto = protocolPattern.exec(rest);

  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  } // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.


  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';

    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c
    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.
    // find the first instance of any hostEndingChars
    var hostEnd = -1;

    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
    } // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.


    var auth, atSign;

    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    } // Now we have a portion which is definitely the auth.
    // Pull that off.


    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    } // the host is the remaining to the left of the first non-host char


    hostEnd = -1;

    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
    } // if we still have not hit it, then the entire thing is a host.


    if (hostEnd === -1) hostEnd = rest.length;
    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd); // pull out port.

    this.parseHost(); // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.

    this.hostname = this.hostname || ''; // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.

    var ipv6Hostname = this.hostname[0] === '[' && this.hostname[this.hostname.length - 1] === ']'; // validate a little.

    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);

      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;

        if (!part.match(hostnamePartPattern)) {
          var newpart = '';

          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          } // we test again with ASCII char only


          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);

            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }

            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }

            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a punycoded representation of "domain".
      // It only converts parts of the domain name that
      // have non-ASCII characters, i.e. it doesn't matter if
      // you call it with a domain that already is ASCII-only.
      this.hostname = punycode.toASCII(this.hostname);
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host; // strip [ and ] from the hostname
    // the host field still retains them, though

    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);

      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  } // now rest is set to the post-host stuff.
  // chop off any delim chars.


  if (!unsafeProtocol[lowerProto]) {
    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1) continue;
      var esc = encodeURIComponent(ae);

      if (esc === ae) {
        esc = escape(ae);
      }

      rest = rest.split(ae).join(esc);
    }
  } // chop off from the tail first.


  var hash = rest.indexOf('#');

  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }

  var qm = rest.indexOf('?');

  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);

    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }

    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }

  if (rest) this.pathname = rest;

  if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
    this.pathname = '/';
  } //to support http.request


  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  } // finally, reconstruct the href based on what has been validated.


  this.href = this.format();
  return this;
}; // format a parsed object into a url string


function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (util.isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function () {
  var auth = this.auth || '';

  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ? this.hostname : '[' + this.hostname + ']');

    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query && util.isObject(this.query) && Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || query && '?' + query || '';
  if (protocol && protocol.substr(-1) !== ':') protocol += ':'; // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.

  if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;
  pathname = pathname.replace(/[?#]/g, function (match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');
  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function (relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function (relative) {
  if (util.isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);

  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  } // hash is always overridden, no matter what.
  // even href="" will remove it.


  result.hash = relative.hash; // if the relative url is empty, then there's nothing left to do here.

  if (relative.href === '') {
    result.href = result.format();
    return result;
  } // hrefs like //foo/bar always cut to the protocol.


  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);

    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol') result[rkey] = relative[rkey];
    } //urlParse appends trailing / to urls like http://www.example.com


    if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);

      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }

      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;

    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');

      while (relPath.length && !(relative.host = relPath.shift()));

      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }

    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port; // to support http.request

    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }

    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = result.pathname && result.pathname.charAt(0) === '/',
      isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === '/',
      mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname,
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol]; // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.

  if (psychotic) {
    result.hostname = '';
    result.port = null;

    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;else srcPath.unshift(result.host);
    }

    result.host = '';

    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;

      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;else relPath.unshift(relative.host);
      }

      relative.host = null;
    }

    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = relative.host || relative.host === '' ? relative.host : result.host;
    result.hostname = relative.hostname || relative.hostname === '' ? relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath; // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!util.isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift(); //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')

      var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;

      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }

    result.search = relative.search;
    result.query = relative.query; //to support http.request

    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
    }

    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null; //to support http.request

    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }

    result.href = result.format();
    return result;
  } // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.


  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === '.' || last === '..') || last === ''; // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0

  var up = 0;

  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];

    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  } // if the path is allowed to go above the root, restore leading ..s


  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' && (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && srcPath.join('/').substr(-1) !== '/') {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' || srcPath[0] && srcPath[0].charAt(0) === '/'; // put the host back

  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' : srcPath.length ? srcPath.shift() : ''; //occationaly the auth can get stuck only in host
    //this especially happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')

    var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;

    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || result.host && srcPath.length;

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  } //to support request.http


  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
  }

  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function () {
  var host = this.host;
  var port = portPattern.exec(host);

  if (port) {
    port = port[0];

    if (port !== ':') {
      this.port = port.substr(1);
    }

    host = host.substr(0, host.length - port.length);
  }

  if (host) this.hostname = host;
};

/***/ }),
/* 846 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;

/*! https://mths.be/punycode v1.4.1 by @mathias */
;

(function (root) {
  /** Detect free variables */
  var freeExports =  true && exports && !exports.nodeType && exports;
  var freeModule =  true && module && !module.nodeType && module;
  var freeGlobal = typeof global == 'object' && global;

  if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) {
    root = freeGlobal;
  }
  /**
   * The `punycode` object.
   * @name punycode
   * @type Object
   */


  var punycode,

  /** Highest positive signed 32-bit float value */
  maxInt = 2147483647,
      // aka. 0x7FFFFFFF or 2^31-1

  /** Bootstring parameters */
  base = 36,
      tMin = 1,
      tMax = 26,
      skew = 38,
      damp = 700,
      initialBias = 72,
      initialN = 128,
      // 0x80
  delimiter = '-',
      // '\x2D'

  /** Regular expressions */
  regexPunycode = /^xn--/,
      regexNonASCII = /[^\x20-\x7E]/,
      // unprintable ASCII chars + non-ASCII chars
  regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g,
      // RFC 3490 separators

  /** Error messages */
  errors = {
    'overflow': 'Overflow: input needs wider integers to process',
    'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
    'invalid-input': 'Invalid input'
  },

  /** Convenience shortcuts */
  baseMinusTMin = base - tMin,
      floor = Math.floor,
      stringFromCharCode = String.fromCharCode,

  /** Temporary variable */
  key;
  /*--------------------------------------------------------------------------*/

  /**
   * A generic error utility function.
   * @private
   * @param {String} type The error type.
   * @returns {Error} Throws a `RangeError` with the applicable error message.
   */

  function error(type) {
    throw new RangeError(errors[type]);
  }
  /**
   * A generic `Array#map` utility function.
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} callback The function that gets called for every array
   * item.
   * @returns {Array} A new array of values returned by the callback function.
   */


  function map(array, fn) {
    var length = array.length;
    var result = [];

    while (length--) {
      result[length] = fn(array[length]);
    }

    return result;
  }
  /**
   * A simple `Array#map`-like wrapper to work with domain name strings or email
   * addresses.
   * @private
   * @param {String} domain The domain name or email address.
   * @param {Function} callback The function that gets called for every
   * character.
   * @returns {Array} A new string of characters returned by the callback
   * function.
   */


  function mapDomain(string, fn) {
    var parts = string.split('@');
    var result = '';

    if (parts.length > 1) {
      // In email addresses, only the domain name should be punycoded. Leave
      // the local part (i.e. everything up to `@`) intact.
      result = parts[0] + '@';
      string = parts[1];
    } // Avoid `split(regex)` for IE8 compatibility. See #17.


    string = string.replace(regexSeparators, '\x2E');
    var labels = string.split('.');
    var encoded = map(labels, fn).join('.');
    return result + encoded;
  }
  /**
   * Creates an array containing the numeric code points of each Unicode
   * character in the string. While JavaScript uses UCS-2 internally,
   * this function will convert a pair of surrogate halves (each of which
   * UCS-2 exposes as separate characters) into a single code point,
   * matching UTF-16.
   * @see `punycode.ucs2.encode`
   * @see <https://mathiasbynens.be/notes/javascript-encoding>
   * @memberOf punycode.ucs2
   * @name decode
   * @param {String} string The Unicode input string (UCS-2).
   * @returns {Array} The new array of code points.
   */


  function ucs2decode(string) {
    var output = [],
        counter = 0,
        length = string.length,
        value,
        extra;

    while (counter < length) {
      value = string.charCodeAt(counter++);

      if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
        // high surrogate, and there is a next character
        extra = string.charCodeAt(counter++);

        if ((extra & 0xFC00) == 0xDC00) {
          // low surrogate
          output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
        } else {
          // unmatched surrogate; only append this code unit, in case the next
          // code unit is the high surrogate of a surrogate pair
          output.push(value);
          counter--;
        }
      } else {
        output.push(value);
      }
    }

    return output;
  }
  /**
   * Creates a string based on an array of numeric code points.
   * @see `punycode.ucs2.decode`
   * @memberOf punycode.ucs2
   * @name encode
   * @param {Array} codePoints The array of numeric code points.
   * @returns {String} The new Unicode string (UCS-2).
   */


  function ucs2encode(array) {
    return map(array, function (value) {
      var output = '';

      if (value > 0xFFFF) {
        value -= 0x10000;
        output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
        value = 0xDC00 | value & 0x3FF;
      }

      output += stringFromCharCode(value);
      return output;
    }).join('');
  }
  /**
   * Converts a basic code point into a digit/integer.
   * @see `digitToBasic()`
   * @private
   * @param {Number} codePoint The basic numeric code point value.
   * @returns {Number} The numeric value of a basic code point (for use in
   * representing integers) in the range `0` to `base - 1`, or `base` if
   * the code point does not represent a value.
   */


  function basicToDigit(codePoint) {
    if (codePoint - 48 < 10) {
      return codePoint - 22;
    }

    if (codePoint - 65 < 26) {
      return codePoint - 65;
    }

    if (codePoint - 97 < 26) {
      return codePoint - 97;
    }

    return base;
  }
  /**
   * Converts a digit/integer into a basic code point.
   * @see `basicToDigit()`
   * @private
   * @param {Number} digit The numeric value of a basic code point.
   * @returns {Number} The basic code point whose value (when used for
   * representing integers) is `digit`, which needs to be in the range
   * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
   * used; else, the lowercase form is used. The behavior is undefined
   * if `flag` is non-zero and `digit` has no uppercase form.
   */


  function digitToBasic(digit, flag) {
    //  0..25 map to ASCII a..z or A..Z
    // 26..35 map to ASCII 0..9
    return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
  }
  /**
   * Bias adaptation function as per section 3.4 of RFC 3492.
   * https://tools.ietf.org/html/rfc3492#section-3.4
   * @private
   */


  function adapt(delta, numPoints, firstTime) {
    var k = 0;
    delta = firstTime ? floor(delta / damp) : delta >> 1;
    delta += floor(delta / numPoints);

    for (;
    /* no initialization */
    delta > baseMinusTMin * tMax >> 1; k += base) {
      delta = floor(delta / baseMinusTMin);
    }

    return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
  }
  /**
   * Converts a Punycode string of ASCII-only symbols to a string of Unicode
   * symbols.
   * @memberOf punycode
   * @param {String} input The Punycode string of ASCII-only symbols.
   * @returns {String} The resulting string of Unicode symbols.
   */


  function decode(input) {
    // Don't use UCS-2
    var output = [],
        inputLength = input.length,
        out,
        i = 0,
        n = initialN,
        bias = initialBias,
        basic,
        j,
        index,
        oldi,
        w,
        k,
        digit,
        t,

    /** Cached calculation results */
    baseMinusT; // Handle the basic code points: let `basic` be the number of input code
    // points before the last delimiter, or `0` if there is none, then copy
    // the first basic code points to the output.

    basic = input.lastIndexOf(delimiter);

    if (basic < 0) {
      basic = 0;
    }

    for (j = 0; j < basic; ++j) {
      // if it's not a basic code point
      if (input.charCodeAt(j) >= 0x80) {
        error('not-basic');
      }

      output.push(input.charCodeAt(j));
    } // Main decoding loop: start just after the last delimiter if any basic code
    // points were copied; start at the beginning otherwise.


    for (index = basic > 0 ? basic + 1 : 0; index < inputLength;)
    /* no final expression */
    {
      // `index` is the index of the next character to be consumed.
      // Decode a generalized variable-length integer into `delta`,
      // which gets added to `i`. The overflow checking is easier
      // if we increase `i` as we go, then subtract off its starting
      // value at the end to obtain `delta`.
      for (oldi = i, w = 1, k = base;;
      /* no condition */
      k += base) {
        if (index >= inputLength) {
          error('invalid-input');
        }

        digit = basicToDigit(input.charCodeAt(index++));

        if (digit >= base || digit > floor((maxInt - i) / w)) {
          error('overflow');
        }

        i += digit * w;
        t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

        if (digit < t) {
          break;
        }

        baseMinusT = base - t;

        if (w > floor(maxInt / baseMinusT)) {
          error('overflow');
        }

        w *= baseMinusT;
      }

      out = output.length + 1;
      bias = adapt(i - oldi, out, oldi == 0); // `i` was supposed to wrap around from `out` to `0`,
      // incrementing `n` each time, so we'll fix that now:

      if (floor(i / out) > maxInt - n) {
        error('overflow');
      }

      n += floor(i / out);
      i %= out; // Insert `n` at position `i` of the output

      output.splice(i++, 0, n);
    }

    return ucs2encode(output);
  }
  /**
   * Converts a string of Unicode symbols (e.g. a domain name label) to a
   * Punycode string of ASCII-only symbols.
   * @memberOf punycode
   * @param {String} input The string of Unicode symbols.
   * @returns {String} The resulting Punycode string of ASCII-only symbols.
   */


  function encode(input) {
    var n,
        delta,
        handledCPCount,
        basicLength,
        bias,
        j,
        m,
        q,
        k,
        t,
        currentValue,
        output = [],

    /** `inputLength` will hold the number of code points in `input`. */
    inputLength,

    /** Cached calculation results */
    handledCPCountPlusOne,
        baseMinusT,
        qMinusT; // Convert the input in UCS-2 to Unicode

    input = ucs2decode(input); // Cache the length

    inputLength = input.length; // Initialize the state

    n = initialN;
    delta = 0;
    bias = initialBias; // Handle the basic code points

    for (j = 0; j < inputLength; ++j) {
      currentValue = input[j];

      if (currentValue < 0x80) {
        output.push(stringFromCharCode(currentValue));
      }
    }

    handledCPCount = basicLength = output.length; // `handledCPCount` is the number of code points that have been handled;
    // `basicLength` is the number of basic code points.
    // Finish the basic string - if it is not empty - with a delimiter

    if (basicLength) {
      output.push(delimiter);
    } // Main encoding loop:


    while (handledCPCount < inputLength) {
      // All non-basic code points < n have been handled already. Find the next
      // larger one:
      for (m = maxInt, j = 0; j < inputLength; ++j) {
        currentValue = input[j];

        if (currentValue >= n && currentValue < m) {
          m = currentValue;
        }
      } // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
      // but guard against overflow


      handledCPCountPlusOne = handledCPCount + 1;

      if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
        error('overflow');
      }

      delta += (m - n) * handledCPCountPlusOne;
      n = m;

      for (j = 0; j < inputLength; ++j) {
        currentValue = input[j];

        if (currentValue < n && ++delta > maxInt) {
          error('overflow');
        }

        if (currentValue == n) {
          // Represent delta as a generalized variable-length integer
          for (q = delta, k = base;;
          /* no condition */
          k += base) {
            t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

            if (q < t) {
              break;
            }

            qMinusT = q - t;
            baseMinusT = base - t;
            output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
            q = floor(qMinusT / baseMinusT);
          }

          output.push(stringFromCharCode(digitToBasic(q, 0)));
          bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
          delta = 0;
          ++handledCPCount;
        }
      }

      ++delta;
      ++n;
    }

    return output.join('');
  }
  /**
   * Converts a Punycode string representing a domain name or an email address
   * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
   * it doesn't matter if you call it on a string that has already been
   * converted to Unicode.
   * @memberOf punycode
   * @param {String} input The Punycoded domain name or email address to
   * convert to Unicode.
   * @returns {String} The Unicode representation of the given Punycode
   * string.
   */


  function toUnicode(input) {
    return mapDomain(input, function (string) {
      return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
    });
  }
  /**
   * Converts a Unicode string representing a domain name or an email address to
   * Punycode. Only the non-ASCII parts of the domain name will be converted,
   * i.e. it doesn't matter if you call it with a domain that's already in
   * ASCII.
   * @memberOf punycode
   * @param {String} input The domain name or email address to convert, as a
   * Unicode string.
   * @returns {String} The Punycode representation of the given domain name or
   * email address.
   */


  function toASCII(input) {
    return mapDomain(input, function (string) {
      return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;
    });
  }
  /*--------------------------------------------------------------------------*/

  /** Define the public API */


  punycode = {
    /**
     * A string representing the current Punycode.js version number.
     * @memberOf punycode
     * @type String
     */
    'version': '1.4.1',

    /**
     * An object of methods to convert from JavaScript's internal character
     * representation (UCS-2) to Unicode code points, and back.
     * @see <https://mathiasbynens.be/notes/javascript-encoding>
     * @memberOf punycode
     * @type Object
     */
    'ucs2': {
      'decode': ucs2decode,
      'encode': ucs2encode
    },
    'decode': decode,
    'encode': encode,
    'toASCII': toASCII,
    'toUnicode': toUnicode
  };
  /** Expose `punycode` */
  // Some AMD build optimizers, like r.js, check for specific condition patterns
  // like the following:

  if (true) {
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
      return punycode;
    }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
})(void 0);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(94)(module), __webpack_require__(8)))

/***/ }),
/* 847 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  isString: function isString(arg) {
    return typeof arg === 'string';
  },
  isObject: function isObject(arg) {
    return typeof arg === 'object' && arg !== null;
  },
  isNull: function isNull(arg) {
    return arg === null;
  },
  isNullOrUndefined: function isNullOrUndefined(arg) {
    return arg == null;
  }
};

/***/ }),
/* 848 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.decode = exports.parse = __webpack_require__(849);
exports.encode = exports.stringify = __webpack_require__(850);

/***/ }),
/* 849 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
 // If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function (qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);
  var maxKeys = 1000;

  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length; // maxKeys <= 0 means that we should not limit keys count

  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr,
        vstr,
        k,
        v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

/***/ }),
/* 850 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


var stringifyPrimitive = function stringifyPrimitive(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function (obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';

  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function (k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;

      if (isArray(obj[k])) {
        return map(obj[k], function (v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);
  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map(xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];

  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }

  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }

  return res;
};

/***/ }),
/* 851 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function () {
  throw new Error('WebSocket Servers can not be created in the browser!');
};

/***/ }),
/* 852 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const abortable = __webpack_require__(180);

const {
  CLOSE_TIMEOUT
} = __webpack_require__(330);

const toMultiaddr = __webpack_require__(331);

const pTimeout = __webpack_require__(59);

const debug = __webpack_require__(1);

const log = debug('libp2p:websockets:socket');
log.error = debug('libp2p:websockets:socket:error'); // Convert a stream into a MultiaddrConnection
// https://github.com/libp2p/interface-transport#multiaddrconnection

module.exports = (stream, options = {}) => {
  const maConn = {
    async sink(source) {
      if (options.signal) {
        source = abortable(source, options.signal);
      }

      try {
        await stream.sink(_wrapAsyncGenerator(function* () {
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;

          var _iteratorError;

          try {
            for (var _iterator = _asyncIterator(source), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
              const chunk = _value;
              // Convert BufferList to Buffer
              yield Buffer.isBuffer(chunk) ? chunk : chunk.slice();
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return != null) {
                yield _awaitAsyncGenerator(_iterator.return());
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        })());
      } catch (err) {
        if (err.type !== 'aborted') {
          log.error(err);
        }
      }
    },

    source: options.signal ? abortable(stream.source, options.signal) : stream.source,
    conn: stream,
    localAddr: options.localAddr || (stream.localAddress && stream.localPort ? toMultiaddr(stream.localAddress, stream.localPort) : undefined),
    // If the remote address was passed, use it - it may have the peer ID encapsulated
    remoteAddr: options.remoteAddr || toMultiaddr(stream.remoteAddress, stream.remotePort),
    timeline: {
      open: Date.now()
    },

    async close() {
      const start = Date.now();

      try {
        await pTimeout(stream.close(), CLOSE_TIMEOUT);
      } catch (err) {
        const {
          host,
          port
        } = maConn.remoteAddr.toOptions();
        log('timeout closing stream to %s:%s after %dms, destroying it manually', host, port, Date.now() - start);
        stream.destroy();
      } finally {
        maConn.timeline.close = Date.now();
      }
    }

  };
  stream.socket.once && stream.socket.once('close', () => {
    // In instances where `close` was not explicitly called,
    // such as an iterable stream ending, ensure we have set the close
    // timeline
    if (!maConn.timeline.close) {
      maConn.timeline.close = Date.now();
    }
  });
  return maConn;
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 853 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.Address4 = __webpack_require__(332);
exports.Address6 = __webpack_require__(854);
exports.v6 = {
  helpers: __webpack_require__(337)
};

/***/ }),
/* 854 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BigInteger = __webpack_require__(333).BigInteger;

var sprintf = __webpack_require__(88).sprintf;

var merge = __webpack_require__(855);

var padStart = __webpack_require__(335);

var repeat = __webpack_require__(336);

var find = __webpack_require__(856);

var max = __webpack_require__(857);

var constants4 = __webpack_require__(182);

var constants6 = __webpack_require__(183);

var Address4 = __webpack_require__(332);

function addCommas(number) {
  var r = /(\d+)(\d{3})/;

  while (r.test(number)) {
    number = number.replace(r, '$1,$2');
  }

  return number;
}

function spanLeadingZeroes4(n) {
  n = n.replace(/^(0{1,})([1-9]+)$/, '<span class="parse-error">$1</span>$2');
  n = n.replace(/^(0{1,})(0)$/, '<span class="parse-error">$1</span>$2');
  return n;
}
/**
 * Represents an IPv6 address
 * @class Address6
 * @param {string} address - An IPv6 address string
 * @param {number} [groups=8] - How many octets to parse
 * @example
 * var address = new Address6('2001::/32');
 */


function Address6(address, optionalGroups) {
  if (optionalGroups === undefined) {
    this.groups = constants6.GROUPS;
  } else {
    this.groups = optionalGroups;
  }

  this.v4 = false;
  this.subnet = '/128';
  this.subnetMask = 128;
  this.zone = '';
  this.address = address;
  var subnet = constants6.RE_SUBNET_STRING.exec(address);

  if (subnet) {
    this.parsedSubnet = subnet[0].replace('/', '');
    this.subnetMask = parseInt(this.parsedSubnet, 10);
    this.subnet = '/' + this.subnetMask;

    if (isNaN(this.subnetMask) || this.subnetMask < 0 || this.subnetMask > constants6.BITS) {
      this.valid = false;
      this.error = 'Invalid subnet mask.';
      return;
    }

    address = address.replace(constants6.RE_SUBNET_STRING, '');
  } else if (/\//.test(address)) {
    this.valid = false;
    this.error = 'Invalid subnet mask.';
    return;
  }

  var zone = constants6.RE_ZONE_STRING.exec(address);

  if (zone) {
    this.zone = zone[0];
    address = address.replace(constants6.RE_ZONE_STRING, '');
  }

  this.addressMinusSuffix = address;
  this.parsedAddress = this.parse(this.addressMinusSuffix);
}

merge(Address6.prototype, __webpack_require__(858));
merge(Address6.prototype, __webpack_require__(859));
merge(Address6.prototype, __webpack_require__(860));
/**
 * Convert a BigInteger to a v6 address object
 * @memberof Address6
 * @static
 * @param {BigInteger} bigInteger - a BigInteger to convert
 * @returns {Address6}
 * @example
 * var bigInteger = new BigInteger('1000000000000');
 * var address = Address6.fromBigInteger(bigInteger);
 * address.correctForm(); // '::e8:d4a5:1000'
 */

Address6.fromBigInteger = function (bigInteger) {
  var hex = padStart(bigInteger.toString(16), 32, '0');
  var groups = [];
  var i;

  for (i = 0; i < constants6.GROUPS; i++) {
    groups.push(hex.slice(i * 4, (i + 1) * 4));
  }

  return new Address6(groups.join(':'));
};
/**
 * Convert a URL (with optional port number) to an address object
 * @memberof Address6
 * @static
 * @param {string} url - a URL with optional port number
 * @returns {Address6}
 * @example
 * var addressAndPort = Address6.fromURL('http://[ffff::]:8080/foo/');
 * addressAndPort.address.correctForm(); // 'ffff::'
 * addressAndPort.port; // 8080
 */


Address6.fromURL = function (url) {
  var host;
  var port;
  var result; // If we have brackets parse them and find a port

  if (url.indexOf('[') !== -1 && url.indexOf(']:') !== -1) {
    result = constants6.RE_URL_WITH_PORT.exec(url);

    if (result === null) {
      return {
        error: 'failed to parse address with port',
        address: null,
        port: null
      };
    }

    host = result[1];
    port = result[2]; // If there's a URL extract the address
  } else if (url.indexOf('/') !== -1) {
    // Remove the protocol prefix
    url = url.replace(/^[a-z0-9]+:\/\//, ''); // Parse the address

    result = constants6.RE_URL.exec(url);

    if (result === null) {
      return {
        error: 'failed to parse address from URL',
        address: null,
        port: null
      };
    }

    host = result[1]; // Otherwise just assign the URL to the host and let the library parse it
  } else {
    host = url;
  } // If there's a port convert it to an integer


  if (port) {
    port = parseInt(port, 10); //squelch out of range ports

    if (port < 0 || port > 65536) {
      port = null;
    }
  } else {
    // Standardize `undefined` to `null`
    port = null;
  }

  return {
    address: new Address6(host),
    port: port
  };
};
/**
 * Create an IPv6-mapped address given an IPv4 address
 * @memberof Address6
 * @static
 * @param {string} address - An IPv4 address string
 * @returns {Address6}
 * @example
 * var address = Address6.fromAddress4('192.168.0.1');
 * address.correctForm(); // '::ffff:c0a8:1'
 * address.to4in6(); // '::ffff:192.168.0.1'
 */


Address6.fromAddress4 = function (address4) {
  var address4 = new Address4(address4);
  var mask6 = constants6.BITS - (constants4.BITS - address4.subnetMask);
  return new Address6('::ffff:' + address4.correctForm() + '/' + mask6);
};
/**
 * Return an address from ip6.arpa form
 * @memberof Address6
 * @static
 * @param {string} arpaFormAddress - an 'ip6.arpa' form address
 * @returns {Adress6}
 * @example
 * var address = Address6.fromArpa(e.f.f.f.3.c.2.6.f.f.f.e.6.6.8.e.1.0.6.7.9.4.e.c.0.0.0.0.1.0.0.2.ip6.arpa.)
 * address.correctForm(); // '2001:0:ce49:7601:e866:efff:62c3:fffe'
 */


Address6.fromArpa = function (arpaFormAddress) {
  //remove ending ".ip6.arpa." or just "."
  var address = arpaFormAddress.replace(/(\.ip6\.arpa)?\.$/, '');
  var semicolonAmount = 7; //correct ip6.arpa form with ending removed will be 63 characters

  if (address.length !== 63) {
    address = {
      error: "Not Valid 'ip6.arpa' form",
      address: null
    };
    return address;
  }

  address = address.split('.').reverse();

  for (var i = semicolonAmount; i > 0; i--) {
    var insertIndex = i * 4;
    address.splice(insertIndex, 0, ':');
  }

  address = address.join('');
  return new Address6(address);
};
/*
 * A helper function to compact an array
 */


function compact(address, slice) {
  var s1 = [];
  var s2 = [];
  var i;

  for (i = 0; i < address.length; i++) {
    if (i < slice[0]) {
      s1.push(address[i]);
    } else if (i > slice[1]) {
      s2.push(address[i]);
    }
  }

  return s1.concat(['compact']).concat(s2);
}
/**
 * Return the Microsoft UNC transcription of the address
 * @memberof Address6
 * @instance
 * @returns {String} the Microsoft UNC transcription of the address
 */


Address6.prototype.microsoftTranscription = function () {
  return sprintf('%s.ipv6-literal.net', this.correctForm().replace(/:/g, '-'));
};
/**
 * Return the first n bits of the address, defaulting to the subnet mask
 * @memberof Address6
 * @instance
 * @param {number} [mask=subnet] - the number of bits to mask
 * @returns {String} the first n bits of the address as a string
 */


Address6.prototype.mask = function (optionalMask) {
  if (optionalMask === undefined) {
    optionalMask = this.subnetMask;
  }

  return this.getBitsBase2(0, optionalMask);
};
/**
 * Return the number of possible subnets of a given size in the address
 * @memberof Address6
 * @instance
 * @param {number} [size=128] - the subnet size
 * @returns {String}
 */
// TODO: probably useful to have a numeric version of this too


Address6.prototype.possibleSubnets = function (optionalSubnetSize) {
  if (optionalSubnetSize === undefined) {
    optionalSubnetSize = 128;
  }

  var availableBits = constants6.BITS - this.subnetMask;
  var subnetBits = Math.abs(optionalSubnetSize - constants6.BITS);
  var subnetPowers = availableBits - subnetBits;

  if (subnetPowers < 0) {
    return '0';
  }

  return addCommas(new BigInteger('2', 10).pow(subnetPowers).toString(10));
};
/**
 * Helper function getting start address.
 * @memberof Address6
 * @instance
 * @returns {BigInteger}
 */


Address6.prototype._startAddress = function () {
  return new BigInteger(this.mask() + repeat('0', constants6.BITS - this.subnetMask), 2);
};
/**
 * The first address in the range given by this address' subnet
 * Often referred to as the Network Address.
 * @memberof Address6
 * @instance
 * @returns {Address6}
 */


Address6.prototype.startAddress = function () {
  return Address6.fromBigInteger(this._startAddress());
};
/**
 * The first host address in the range given by this address's subnet ie
 * the first address after the Network Address
 * @memberof Address6
 * @instance
 * @returns {Address6}
 */


Address6.prototype.startAddressExclusive = function () {
  var adjust = new BigInteger('1');
  return Address6.fromBigInteger(this._startAddress().add(adjust));
};
/**
 * Helper function getting end address.
 * @memberof Address6
 * @instance
 * @returns {BigInteger}
 */


Address6.prototype._endAddress = function () {
  return new BigInteger(this.mask() + repeat('1', constants6.BITS - this.subnetMask), 2);
};
/**
 * The last address in the range given by this address' subnet
 * Often referred to as the Broadcast
 * @memberof Address6
 * @instance
 * @returns {Address6}
 */


Address6.prototype.endAddress = function () {
  return Address6.fromBigInteger(this._endAddress());
};
/**
 * The last host address in the range given by this address's subnet ie
 * the last address prior to the Broadcast Address
 * @memberof Address6
 * @instance
 * @returns {Address6}
 */


Address6.prototype.endAddressExclusive = function () {
  var adjust = new BigInteger('1');
  return Address6.fromBigInteger(this._endAddress().subtract(adjust));
};
/**
 * Return the scope of the address
 * @memberof Address6
 * @instance
 * @returns {String}
 */


Address6.prototype.getScope = function () {
  var scope = constants6.SCOPES[this.getBits(12, 16)];

  if (this.getType() === 'Global unicast' && scope !== 'Link local') {
    scope = 'Global';
  }

  return scope;
};
/**
 * Return the type of the address
 * @memberof Address6
 * @instance
 * @returns {String}
 */


Address6.prototype.getType = function () {
  var self = this;

  function isType(name, type) {
    return self.isInSubnet(new Address6(type));
  }

  return find(constants6.TYPES, isType) || 'Global unicast';
};
/**
 * Return the bits in the given range as a BigInteger
 * @memberof Address6
 * @instance
 * @returns {BigInteger}
 */


Address6.prototype.getBits = function (start, end) {
  return new BigInteger(this.getBitsBase2(start, end), 2);
};
/**
 * Return the bits in the given range as a base-2 string
 * @memberof Address6
 * @instance
 * @returns {String}
 */


Address6.prototype.getBitsBase2 = function (start, end) {
  return this.binaryZeroPad().slice(start, end);
};
/**
 * Return the bits in the given range as a base-16 string
 * @memberof Address6
 * @instance
 * @returns {String}
 */


Address6.prototype.getBitsBase16 = function (start, end) {
  var length = end - start;

  if (length % 4 !== 0) {
    return null;
  }

  return padStart(this.getBits(start, end).toString(16), length / 4, '0');
};
/**
 * Return the bits that are set past the subnet mask length
 * @memberof Address6
 * @instance
 * @returns {String}
 */


Address6.prototype.getBitsPastSubnet = function () {
  return this.getBitsBase2(this.subnetMask, constants6.BITS);
};
/**
 * Return the reversed ip6.arpa form of the address
 * @memberof Address6
 * @param {Object} options
 * @param {boolean} options.omitSuffix - omit the "ip6.arpa" suffix
 * @instance
 * @returns {String}
 */


Address6.prototype.reverseForm = function (options) {
  if (!options) {
    options = {};
  }

  var characters = Math.floor(this.subnetMask / 4);
  var reversed = this.canonicalForm().replace(/:/g, '').split('').slice(0, characters).reverse().join('.');

  if (characters > 0) {
    if (options.omitSuffix) {
      return reversed;
    }

    return sprintf('%s.ip6.arpa.', reversed);
  }

  if (options.omitSuffix) {
    return '';
  }

  return 'ip6.arpa.';
};
/**
 * Return the correct form of the address
 * @memberof Address6
 * @instance
 * @returns {String}
 */


Address6.prototype.correctForm = function () {
  if (!this.parsedAddress) {
    return null;
  }

  var i;
  var groups = [];
  var zeroCounter = 0;
  var zeroes = [];

  for (i = 0; i < this.parsedAddress.length; i++) {
    var value = parseInt(this.parsedAddress[i], 16);

    if (value === 0) {
      zeroCounter++;
    }

    if (value !== 0 && zeroCounter > 0) {
      if (zeroCounter > 1) {
        zeroes.push([i - zeroCounter, i - 1]);
      }

      zeroCounter = 0;
    }
  } // Do we end with a string of zeroes?


  if (zeroCounter > 1) {
    zeroes.push([this.parsedAddress.length - zeroCounter, this.parsedAddress.length - 1]);
  }

  var zeroLengths = zeroes.map(function (n) {
    return n[1] - n[0] + 1;
  });

  if (zeroes.length > 0) {
    var index = zeroLengths.indexOf(max(zeroLengths));
    groups = compact(this.parsedAddress, zeroes[index]);
  } else {
    groups = this.parsedAddress;
  }

  for (i = 0; i < groups.length; i++) {
    if (groups[i] !== 'compact') {
      groups[i] = parseInt(groups[i], 16).toString(16);
    }
  }

  var correct = groups.join(':');
  correct = correct.replace(/^compact$/, '::');
  correct = correct.replace(/^compact|compact$/, ':');
  correct = correct.replace(/compact/, '');
  return correct;
};
/**
 * Return a zero-padded base-2 string representation of the address
 * @memberof Address6
 * @instance
 * @returns {String}
 * @example
 * var address = new Address6('2001:4860:4001:803::1011');
 * address.binaryZeroPad();
 * // '0010000000000001010010000110000001000000000000010000100000000011
 * //  0000000000000000000000000000000000000000000000000001000000010001'
 */


Address6.prototype.binaryZeroPad = function () {
  return padStart(this.bigInteger().toString(2), constants6.BITS, '0');
}; // TODO: Improve the semantics of this helper function


Address6.prototype.parse4in6 = function (address) {
  var groups = address.split(':');
  var lastGroup = groups.slice(-1)[0];
  var address4 = lastGroup.match(constants4.RE_ADDRESS);

  if (address4) {
    var temp4 = new Address4(address4[0]);

    for (var i = 0; i < temp4.groups; i++) {
      if (/^0[0-9]+/.test(temp4.parsedAddress[i])) {
        this.valid = false;
        this.error = 'IPv4 addresses can not have leading zeroes.';
        this.parseError = address.replace(constants4.RE_ADDRESS, temp4.parsedAddress.map(spanLeadingZeroes4).join('.'));
        return null;
      }
    }

    this.v4 = true;
    groups[groups.length - 1] = temp4.toGroup6();
    address = groups.join(':');
  }

  return address;
}; // TODO: Make private?


Address6.prototype.parse = function (address) {
  address = this.parse4in6(address);

  if (this.error) {
    return null;
  }

  var badCharacters = address.match(constants6.RE_BAD_CHARACTERS);

  if (badCharacters) {
    this.valid = false;
    this.error = sprintf('Bad character%s detected in address: %s', badCharacters.length > 1 ? 's' : '', badCharacters.join(''));
    this.parseError = address.replace(constants6.RE_BAD_CHARACTERS, '<span class="parse-error">$1</span>');
    return null;
  }

  var badAddress = address.match(constants6.RE_BAD_ADDRESS);

  if (badAddress) {
    this.valid = false;
    this.error = sprintf('Address failed regex: %s', badAddress.join(''));
    this.parseError = address.replace(constants6.RE_BAD_ADDRESS, '<span class="parse-error">$1</span>');
    return null;
  }

  var groups = [];
  var halves = address.split('::');

  if (halves.length === 2) {
    var first = halves[0].split(':');
    var last = halves[1].split(':');

    if (first.length === 1 && first[0] === '') {
      first = [];
    }

    if (last.length === 1 && last[0] === '') {
      last = [];
    }

    var remaining = this.groups - (first.length + last.length);

    if (!remaining) {
      this.valid = false;
      this.error = 'Error parsing groups';
      return null;
    }

    this.elidedGroups = remaining;
    this.elisionBegin = first.length;
    this.elisionEnd = first.length + this.elidedGroups;
    first.forEach(function (group) {
      groups.push(group);
    });

    for (var i = 0; i < remaining; i++) {
      groups.push(0);
    }

    last.forEach(function (group) {
      groups.push(group);
    });
  } else if (halves.length === 1) {
    groups = address.split(':');
    this.elidedGroups = 0;
  } else {
    this.valid = false;
    this.error = 'Too many :: groups found';
    return null;
  }

  groups = groups.map(function (g) {
    return sprintf('%x', parseInt(g, 16));
  });

  if (groups.length !== this.groups) {
    this.valid = false;
    this.error = 'Incorrect number of groups found';
    return null;
  }

  this.valid = true;
  return groups;
};

function paddedHex(octet) {
  return sprintf('%04x', parseInt(octet, 16));
}
/**
 * Return the canonical form of the address
 * @memberof Address6
 * @instance
 * @returns {String}
 */


Address6.prototype.canonicalForm = function () {
  if (!this.valid) {
    return null;
  }

  return this.parsedAddress.map(paddedHex).join(':');
};
/**
 * Return the decimal form of the address
 * @memberof Address6
 * @instance
 * @returns {String}
 */


Address6.prototype.decimal = function () {
  if (!this.valid) {
    return null;
  }

  return this.parsedAddress.map(function (n) {
    return sprintf('%05d', parseInt(n, 16));
  }).join(':');
};
/**
 * Return the address as a BigInteger
 * @memberof Address6
 * @instance
 * @returns {BigInteger}
 */


Address6.prototype.bigInteger = function () {
  if (!this.valid) {
    return null;
  }

  return new BigInteger(this.parsedAddress.map(paddedHex).join(''), 16);
};
/**
 * Return the last two groups of this address as an IPv4 address string
 * @memberof Address6
 * @instance
 * @returns {String}
 * @example
 * var address = new Address6('2001:4860:4001::1825:bf11');
 * address.to4(); // '24.37.191.17'
 */


Address6.prototype.to4 = function () {
  var binary = this.binaryZeroPad().split('');
  return Address4.fromHex(new BigInteger(binary.slice(96, 128).join(''), 2).toString(16));
};
/**
 * Return the v4-in-v6 form of the address
 * @memberof Address6
 * @instance
 * @returns {String}
 */


Address6.prototype.to4in6 = function () {
  var address4 = this.to4();
  var address6 = new Address6(this.parsedAddress.slice(0, 6).join(':'), 6);
  var correct = address6.correctForm();
  var infix = '';

  if (!/:$/.test(correct)) {
    infix = ':';
  }

  return address6.correctForm() + infix + address4.address;
};
/**
 * Return an object containing the Teredo properties of the address
 * @memberof Address6
 * @instance
 * @returns {Object}
 */


Address6.prototype.inspectTeredo = function () {
  /*
  - Bits 0 to 31 are set to the Teredo prefix (normally 2001:0000::/32).
  - Bits 32 to 63 embed the primary IPv4 address of the Teredo server that
    is used.
  - Bits 64 to 79 can be used to define some flags. Currently only the
    higher order bit is used; it is set to 1 if the Teredo client is
    located behind a cone NAT, 0 otherwise. For Microsoft's Windows Vista
    and Windows Server 2008 implementations, more bits are used. In those
    implementations, the format for these 16 bits is "CRAAAAUG AAAAAAAA",
    where "C" remains the "Cone" flag. The "R" bit is reserved for future
    use. The "U" bit is for the Universal/Local flag (set to 0). The "G" bit
    is Individual/Group flag (set to 0). The A bits are set to a 12-bit
    randomly generated number chosen by the Teredo client to introduce
    additional protection for the Teredo node against IPv6-based scanning
    attacks.
  - Bits 80 to 95 contains the obfuscated UDP port number. This is the
    port number that is mapped by the NAT to the Teredo client with all
    bits inverted.
  - Bits 96 to 127 contains the obfuscated IPv4 address. This is the
    public IPv4 address of the NAT with all bits inverted.
  */
  var prefix = this.getBitsBase16(0, 32);
  var udpPort = this.getBits(80, 96).xor(new BigInteger('ffff', 16)).toString();
  var server4 = Address4.fromHex(this.getBitsBase16(32, 64));
  var client4 = Address4.fromHex(this.getBits(96, 128).xor(new BigInteger('ffffffff', 16)).toString(16));
  var flags = this.getBits(64, 80);
  var flagsBase2 = this.getBitsBase2(64, 80);
  var coneNat = flags.testBit(15);
  var reserved = flags.testBit(14);
  var groupIndividual = flags.testBit(8);
  var universalLocal = flags.testBit(9);
  var nonce = new BigInteger(flagsBase2.slice(2, 6) + flagsBase2.slice(8, 16), 2).toString(10);
  return {
    prefix: sprintf('%s:%s', prefix.slice(0, 4), prefix.slice(4, 8)),
    server4: server4.address,
    client4: client4.address,
    flags: flagsBase2,
    coneNat: coneNat,
    microsoft: {
      reserved: reserved,
      universalLocal: universalLocal,
      groupIndividual: groupIndividual,
      nonce: nonce
    },
    udpPort: udpPort
  };
};
/**
 * Return an object containing the 6to4 properties of the address
 * @memberof Address6
 * @instance
 * @returns {Object}
 */


Address6.prototype.inspect6to4 = function () {
  /*
  - Bits 0 to 15 are set to the 6to4 prefix (2002::/16).
  - Bits 16 to 48 embed the IPv4 address of the 6to4 gateway that is used.
  */
  var prefix = this.getBitsBase16(0, 16);
  var gateway = Address4.fromHex(this.getBitsBase16(16, 48));
  return {
    prefix: sprintf('%s', prefix.slice(0, 4)),
    gateway: gateway.address
  };
};
/**
 * Return a v6 6to4 address from a v6 v4inv6 address
 * @memberof Address6
 * @instance
 * @returns {Address6}
 */


Address6.prototype.to6to4 = function () {
  if (!this.is4()) {
    return null;
  }

  var addr6to4 = ['2002', this.getBitsBase16(96, 112), this.getBitsBase16(112, 128), '', '/16'].join(':');
  return new Address6(addr6to4);
};
/**
 * Return a byte array
 * @memberof Address6
 * @instance
 * @returns {Array}
 */


Address6.prototype.toByteArray = function () {
  var byteArray = this.bigInteger().toByteArray(); // work around issue where `toByteArray` returns a leading 0 element

  if (byteArray.length === 17 && byteArray[0] === 0) {
    return byteArray.slice(1);
  }

  return byteArray;
};

function unsignByte(b) {
  return b & 0xFF;
}
/**
 * Return an unsigned byte array
 * @memberof Address6
 * @instance
 * @returns {Array}
 */


Address6.prototype.toUnsignedByteArray = function () {
  return this.toByteArray().map(unsignByte);
};
/**
 * Convert a byte array to an Address6 object
 * @memberof Address6
 * @static
 * @returns {Address6}
 */


Address6.fromByteArray = function (bytes) {
  return this.fromUnsignedByteArray(bytes.map(unsignByte));
};
/**
 * Convert an unsigned byte array to an Address6 object
 * @memberof Address6
 * @static
 * @returns {Address6}
 */


Address6.fromUnsignedByteArray = function (bytes) {
  var BYTE_MAX = new BigInteger('256', 10);
  var result = new BigInteger('0', 10);
  var multiplier = new BigInteger('1', 10);

  for (var i = bytes.length - 1; i >= 0; i--) {
    result = result.add(multiplier.multiply(new BigInteger(bytes[i].toString(10), 10)));
    multiplier = multiplier.multiply(BYTE_MAX);
  }

  return Address6.fromBigInteger(result);
};

module.exports = Address6;

/***/ }),
/* 855 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, module) {

/**
 * Lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;
/** Used to stand-in for `undefined` hash values. */

var HASH_UNDEFINED = '__lodash_hash_undefined__';
/** Used to detect hot functions by number of calls within a span of milliseconds. */

var HOT_COUNT = 800,
    HOT_SPAN = 16;
/** Used as references for various `Number` constants. */

var MAX_SAFE_INTEGER = 9007199254740991;
/** `Object#toString` result references. */

var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    asyncTag = '[object AsyncFunction]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    nullTag = '[object Null]',
    objectTag = '[object Object]',
    proxyTag = '[object Proxy]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    undefinedTag = '[object Undefined]',
    weakMapTag = '[object WeakMap]';
var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';
/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */

var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
/** Used to detect host constructors (Safari). */

var reIsHostCtor = /^\[object .+?Constructor\]$/;
/** Used to detect unsigned integer values. */

var reIsUint = /^(?:0|[1-9]\d*)$/;
/** Used to identify `toStringTag` values of typed arrays. */

var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
/** Detect free variable `global` from Node.js. */

var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
/** Detect free variable `self`. */

var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
/** Used as a reference to the global object. */

var root = freeGlobal || freeSelf || Function('return this')();
/** Detect free variable `exports`. */

var freeExports =  true && exports && !exports.nodeType && exports;
/** Detect free variable `module`. */

var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
/** Detect the popular CommonJS extension `module.exports`. */

var moduleExports = freeModule && freeModule.exports === freeExports;
/** Detect free variable `process` from Node.js. */

var freeProcess = moduleExports && freeGlobal.process;
/** Used to access faster Node.js helpers. */

var nodeUtil = function () {
  try {
    // Use `util.types` for Node.js 10+.
    var types = freeModule && freeModule.require && freeModule.require('util').types;

    if (types) {
      return types;
    } // Legacy `process.binding('util')` for Node.js < 10.


    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}();
/* Node.js helper references. */


var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */

function apply(func, thisArg, args) {
  switch (args.length) {
    case 0:
      return func.call(thisArg);

    case 1:
      return func.call(thisArg, args[0]);

    case 2:
      return func.call(thisArg, args[0], args[1]);

    case 3:
      return func.call(thisArg, args[0], args[1], args[2]);
  }

  return func.apply(thisArg, args);
}
/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */


function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }

  return result;
}
/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */


function baseUnary(func) {
  return function (value) {
    return func(value);
  };
}
/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */


function getValue(object, key) {
  return object == null ? undefined : object[key];
}
/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */


function overArg(func, transform) {
  return function (arg) {
    return func(transform(arg));
  };
}
/** Used for built-in method references. */


var arrayProto = Array.prototype,
    funcProto = Function.prototype,
    objectProto = Object.prototype;
/** Used to detect overreaching core-js shims. */

var coreJsData = root['__core-js_shared__'];
/** Used to resolve the decompiled source of functions. */

var funcToString = funcProto.toString;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/** Used to detect methods masquerading as native. */

var maskSrcKey = function () {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? 'Symbol(src)_1.' + uid : '';
}();
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */


var nativeObjectToString = objectProto.toString;
/** Used to infer the `Object` constructor. */

var objectCtorString = funcToString.call(Object);
/** Used to detect if a method is native. */

var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
/** Built-in value references. */

var Buffer = moduleExports ? root.Buffer : undefined,
    Symbol = root.Symbol,
    Uint8Array = root.Uint8Array,
    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
    getPrototype = overArg(Object.getPrototypeOf, Object),
    objectCreate = Object.create,
    propertyIsEnumerable = objectProto.propertyIsEnumerable,
    splice = arrayProto.splice,
    symToStringTag = Symbol ? Symbol.toStringTag : undefined;

var defineProperty = function () {
  try {
    var func = getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}();
/* Built-in method references for those with the same name as other `lodash` methods. */


var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
    nativeMax = Math.max,
    nativeNow = Date.now;
/* Built-in method references that are verified to be native. */

var Map = getNative(root, 'Map'),
    nativeCreate = getNative(Object, 'create');
/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */

var baseCreate = function () {
  function object() {}

  return function (proto) {
    if (!isObject(proto)) {
      return {};
    }

    if (objectCreate) {
      return objectCreate(proto);
    }

    object.prototype = proto;
    var result = new object();
    object.prototype = undefined;
    return result;
  };
}();
/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */


function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;
  this.clear();

  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */


function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}
/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */


function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}
/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */


function hashGet(key) {
  var data = this.__data__;

  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }

  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}
/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */


function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}
/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */


function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
  return this;
} // Add methods to `Hash`.


Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;
/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;
  this.clear();

  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */


function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}
/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */


function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }

  var lastIndex = data.length - 1;

  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }

  --this.size;
  return true;
}
/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */


function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);
  return index < 0 ? undefined : data[index][1];
}
/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */


function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}
/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */


function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }

  return this;
} // Add methods to `ListCache`.


ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;
/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;
  this.clear();

  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */


function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash(),
    'map': new (Map || ListCache)(),
    'string': new Hash()
  };
}
/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */


function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}
/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */


function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}
/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */


function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}
/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */


function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;
  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
} // Add methods to `MapCache`.


MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;
/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}
/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */


function stackClear() {
  this.__data__ = new ListCache();
  this.size = 0;
}
/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */


function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);
  this.size = data.size;
  return result;
}
/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */


function stackGet(key) {
  return this.__data__.get(key);
}
/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */


function stackHas(key) {
  return this.__data__.has(key);
}
/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */


function stackSet(key, value) {
  var data = this.__data__;

  if (data instanceof ListCache) {
    var pairs = data.__data__;

    if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }

    data = this.__data__ = new MapCache(pairs);
  }

  data.set(key, value);
  this.size = data.size;
  return this;
} // Add methods to `Stack`.


Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;
/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */

function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && ( // Safari 9 has enumerable `arguments.length` in strict mode.
    key == 'length' || // Node.js 0.10 has enumerable non-index properties on buffers.
    isBuff && (key == 'offset' || key == 'parent') || // PhantomJS 2 has enumerable non-index properties on typed arrays.
    isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || // Skip index properties.
    isIndex(key, length)))) {
      result.push(key);
    }
  }

  return result;
}
/**
 * This function is like `assignValue` except that it doesn't assign
 * `undefined` values.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */


function assignMergeValue(object, key, value) {
  if (value !== undefined && !eq(object[key], value) || value === undefined && !(key in object)) {
    baseAssignValue(object, key, value);
  }
}
/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */


function assignValue(object, key, value) {
  var objValue = object[key];

  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
    baseAssignValue(object, key, value);
  }
}
/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */


function assocIndexOf(array, key) {
  var length = array.length;

  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }

  return -1;
}
/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */


function baseAssignValue(object, key, value) {
  if (key == '__proto__' && defineProperty) {
    defineProperty(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}
/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */


var baseFor = createBaseFor();
/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */

function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }

  return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
}
/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */


function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}
/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */


function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }

  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}
/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */


function baseIsTypedArray(value) {
  return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}
/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */


function baseKeysIn(object) {
  if (!isObject(object)) {
    return nativeKeysIn(object);
  }

  var isProto = isPrototype(object),
      result = [];

  for (var key in object) {
    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
      result.push(key);
    }
  }

  return result;
}
/**
 * The base implementation of `_.merge` without support for multiple sources.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} [customizer] The function to customize merged values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */


function baseMerge(object, source, srcIndex, customizer, stack) {
  if (object === source) {
    return;
  }

  baseFor(source, function (srcValue, key) {
    stack || (stack = new Stack());

    if (isObject(srcValue)) {
      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
    } else {
      var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + '', object, source, stack) : undefined;

      if (newValue === undefined) {
        newValue = srcValue;
      }

      assignMergeValue(object, key, newValue);
    }
  }, keysIn);
}
/**
 * A specialized version of `baseMerge` for arrays and objects which performs
 * deep merges and tracks traversed objects enabling objects with circular
 * references to be merged.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {string} key The key of the value to merge.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} mergeFunc The function to merge values.
 * @param {Function} [customizer] The function to customize assigned values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */


function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
  var objValue = safeGet(object, key),
      srcValue = safeGet(source, key),
      stacked = stack.get(srcValue);

  if (stacked) {
    assignMergeValue(object, key, stacked);
    return;
  }

  var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;
  var isCommon = newValue === undefined;

  if (isCommon) {
    var isArr = isArray(srcValue),
        isBuff = !isArr && isBuffer(srcValue),
        isTyped = !isArr && !isBuff && isTypedArray(srcValue);
    newValue = srcValue;

    if (isArr || isBuff || isTyped) {
      if (isArray(objValue)) {
        newValue = objValue;
      } else if (isArrayLikeObject(objValue)) {
        newValue = copyArray(objValue);
      } else if (isBuff) {
        isCommon = false;
        newValue = cloneBuffer(srcValue, true);
      } else if (isTyped) {
        isCommon = false;
        newValue = cloneTypedArray(srcValue, true);
      } else {
        newValue = [];
      }
    } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
      newValue = objValue;

      if (isArguments(objValue)) {
        newValue = toPlainObject(objValue);
      } else if (!isObject(objValue) || isFunction(objValue)) {
        newValue = initCloneObject(srcValue);
      }
    } else {
      isCommon = false;
    }
  }

  if (isCommon) {
    // Recursively merge objects and arrays (susceptible to call stack limits).
    stack.set(srcValue, newValue);
    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
    stack['delete'](srcValue);
  }

  assignMergeValue(object, key, newValue);
}
/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */


function baseRest(func, start) {
  return setToString(overRest(func, start, identity), func + '');
}
/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */


var baseSetToString = !defineProperty ? identity : function (func, string) {
  return defineProperty(func, 'toString', {
    'configurable': true,
    'enumerable': false,
    'value': constant(string),
    'writable': true
  });
};
/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */

function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }

  var length = buffer.length,
      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
  buffer.copy(result);
  return result;
}
/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */


function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
  return result;
}
/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */


function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}
/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */


function copyArray(source, array) {
  var index = -1,
      length = source.length;
  array || (array = Array(length));

  while (++index < length) {
    array[index] = source[index];
  }

  return array;
}
/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */


function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});
  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];
    var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;

    if (newValue === undefined) {
      newValue = source[key];
    }

    if (isNew) {
      baseAssignValue(object, key, newValue);
    } else {
      assignValue(object, key, newValue);
    }
  }

  return object;
}
/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */


function createAssigner(assigner) {
  return baseRest(function (object, sources) {
    var index = -1,
        length = sources.length,
        customizer = length > 1 ? sources[length - 1] : undefined,
        guard = length > 2 ? sources[2] : undefined;
    customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;

    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
      customizer = length < 3 ? undefined : customizer;
      length = 1;
    }

    object = Object(object);

    while (++index < length) {
      var source = sources[index];

      if (source) {
        assigner(object, source, index, customizer);
      }
    }

    return object;
  });
}
/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */


function createBaseFor(fromRight) {
  return function (object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];

      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }

    return object;
  };
}
/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */


function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
}
/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */


function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}
/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */


function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);

  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }

  return result;
}
/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */


function initCloneObject(object) {
  return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
}
/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */


function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
}
/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */


function isIterateeCall(value, index, object) {
  if (!isObject(object)) {
    return false;
  }

  var type = typeof index;

  if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {
    return eq(object[index], value);
  }

  return false;
}
/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */


function isKeyable(value) {
  var type = typeof value;
  return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
}
/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */


function isMasked(func) {
  return !!maskSrcKey && maskSrcKey in func;
}
/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */


function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
  return value === proto;
}
/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */


function nativeKeysIn(object) {
  var result = [];

  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }

  return result;
}
/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */


function objectToString(value) {
  return nativeObjectToString.call(value);
}
/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */


function overRest(func, start, transform) {
  start = nativeMax(start === undefined ? func.length - 1 : start, 0);
  return function () {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }

    index = -1;
    var otherArgs = Array(start + 1);

    while (++index < start) {
      otherArgs[index] = args[index];
    }

    otherArgs[start] = transform(array);
    return apply(func, this, otherArgs);
  };
}
/**
 * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */


function safeGet(object, key) {
  if (key === 'constructor' && typeof object[key] === 'function') {
    return;
  }

  if (key == '__proto__') {
    return;
  }

  return object[key];
}
/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */


var setToString = shortOut(baseSetToString);
/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */

function shortOut(func) {
  var count = 0,
      lastCalled = 0;
  return function () {
    var stamp = nativeNow(),
        remaining = HOT_SPAN - (stamp - lastCalled);
    lastCalled = stamp;

    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }

    return func.apply(undefined, arguments);
  };
}
/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */


function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}

    try {
      return func + '';
    } catch (e) {}
  }

  return '';
}
/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */


function eq(value, other) {
  return value === other || value !== value && other !== other;
}
/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */


var isArguments = baseIsArguments(function () {
  return arguments;
}()) ? baseIsArguments : function (value) {
  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
};
/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */

var isArray = Array.isArray;
/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */

function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}
/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */


function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}
/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */


var isBuffer = nativeIsBuffer || stubFalse;
/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */

function isFunction(value) {
  if (!isObject(value)) {
    return false;
  } // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.


  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}
/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */


function isLength(value) {
  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */


function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */


function isObjectLike(value) {
  return value != null && typeof value == 'object';
}
/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */


function isPlainObject(value) {
  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
    return false;
  }

  var proto = getPrototype(value);

  if (proto === null) {
    return true;
  }

  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
  return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
}
/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */


var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
/**
 * Converts `value` to a plain object flattening inherited enumerable string
 * keyed properties of `value` to own properties of the plain object.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {Object} Returns the converted plain object.
 * @example
 *
 * function Foo() {
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.assign({ 'a': 1 }, new Foo);
 * // => { 'a': 1, 'b': 2 }
 *
 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
 * // => { 'a': 1, 'b': 2, 'c': 3 }
 */

function toPlainObject(value) {
  return copyObject(value, keysIn(value));
}
/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */


function keysIn(object) {
  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
}
/**
 * This method is like `_.assign` except that it recursively merges own and
 * inherited enumerable string keyed properties of source objects into the
 * destination object. Source properties that resolve to `undefined` are
 * skipped if a destination value exists. Array and plain object properties
 * are merged recursively. Other objects and value types are overridden by
 * assignment. Source objects are applied from left to right. Subsequent
 * sources overwrite property assignments of previous sources.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 0.5.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = {
 *   'a': [{ 'b': 2 }, { 'd': 4 }]
 * };
 *
 * var other = {
 *   'a': [{ 'c': 3 }, { 'e': 5 }]
 * };
 *
 * _.merge(object, other);
 * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
 */


var merge = createAssigner(function (object, source, srcIndex) {
  baseMerge(object, source, srcIndex);
});
/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */

function constant(value) {
  return function () {
    return value;
  };
}
/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */


function identity(value) {
  return value;
}
/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */


function stubFalse() {
  return false;
}

module.exports = merge;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(8), __webpack_require__(94)(module)))

/***/ }),
/* 856 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, module) {

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;
/** Used as the `TypeError` message for "Functions" methods. */

var FUNC_ERROR_TEXT = 'Expected a function';
/** Used to stand-in for `undefined` hash values. */

var HASH_UNDEFINED = '__lodash_hash_undefined__';
/** Used to compose bitmasks for comparison styles. */

var UNORDERED_COMPARE_FLAG = 1,
    PARTIAL_COMPARE_FLAG = 2;
/** Used as references for various `Number` constants. */

var INFINITY = 1 / 0,
    MAX_SAFE_INTEGER = 9007199254740991,
    MAX_INTEGER = 1.7976931348623157e+308,
    NAN = 0 / 0;
/** `Object#toString` result references. */

var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    weakMapTag = '[object WeakMap]';
var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';
/** Used to match property names within property paths. */

var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/,
    reLeadingDot = /^\./,
    rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */

var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
/** Used to match leading and trailing whitespace. */

var reTrim = /^\s+|\s+$/g;
/** Used to match backslashes in property paths. */

var reEscapeChar = /\\(\\)?/g;
/** Used to detect bad signed hexadecimal string values. */

var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
/** Used to detect binary string values. */

var reIsBinary = /^0b[01]+$/i;
/** Used to detect host constructors (Safari). */

var reIsHostCtor = /^\[object .+?Constructor\]$/;
/** Used to detect octal string values. */

var reIsOctal = /^0o[0-7]+$/i;
/** Used to detect unsigned integer values. */

var reIsUint = /^(?:0|[1-9]\d*)$/;
/** Used to identify `toStringTag` values of typed arrays. */

var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
/** Built-in method references without a dependency on `root`. */

var freeParseInt = parseInt;
/** Detect free variable `global` from Node.js. */

var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
/** Detect free variable `self`. */

var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
/** Used as a reference to the global object. */

var root = freeGlobal || freeSelf || Function('return this')();
/** Detect free variable `exports`. */

var freeExports =  true && exports && !exports.nodeType && exports;
/** Detect free variable `module`. */

var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
/** Detect the popular CommonJS extension `module.exports`. */

var moduleExports = freeModule && freeModule.exports === freeExports;
/** Detect free variable `process` from Node.js. */

var freeProcess = moduleExports && freeGlobal.process;
/** Used to access faster Node.js helpers. */

var nodeUtil = function () {
  try {
    return freeProcess && freeProcess.binding('util');
  } catch (e) {}
}();
/* Node.js helper references. */


var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */

function arraySome(array, predicate) {
  var index = -1,
      length = array ? array.length : 0;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }

  return false;
}
/**
 * The base implementation of `_.findIndex` and `_.findLastIndex` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */


function baseFindIndex(array, predicate, fromIndex, fromRight) {
  var length = array.length,
      index = fromIndex + (fromRight ? 1 : -1);

  while (fromRight ? index-- : ++index < length) {
    if (predicate(array[index], index, array)) {
      return index;
    }
  }

  return -1;
}
/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */


function baseProperty(key) {
  return function (object) {
    return object == null ? undefined : object[key];
  };
}
/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */


function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }

  return result;
}
/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */


function baseUnary(func) {
  return function (value) {
    return func(value);
  };
}
/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */


function getValue(object, key) {
  return object == null ? undefined : object[key];
}
/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */


function isHostObject(value) {
  // Many host objects are `Object` objects that can coerce to strings
  // despite having improperly defined `toString` methods.
  var result = false;

  if (value != null && typeof value.toString != 'function') {
    try {
      result = !!(value + '');
    } catch (e) {}
  }

  return result;
}
/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */


function mapToArray(map) {
  var index = -1,
      result = Array(map.size);
  map.forEach(function (value, key) {
    result[++index] = [key, value];
  });
  return result;
}
/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */


function overArg(func, transform) {
  return function (arg) {
    return func(transform(arg));
  };
}
/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */


function setToArray(set) {
  var index = -1,
      result = Array(set.size);
  set.forEach(function (value) {
    result[++index] = value;
  });
  return result;
}
/** Used for built-in method references. */


var arrayProto = Array.prototype,
    funcProto = Function.prototype,
    objectProto = Object.prototype;
/** Used to detect overreaching core-js shims. */

var coreJsData = root['__core-js_shared__'];
/** Used to detect methods masquerading as native. */

var maskSrcKey = function () {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? 'Symbol(src)_1.' + uid : '';
}();
/** Used to resolve the decompiled source of functions. */


var funcToString = funcProto.toString;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */

var objectToString = objectProto.toString;
/** Used to detect if a method is native. */

var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
/** Built-in value references. */

var Symbol = root.Symbol,
    Uint8Array = root.Uint8Array,
    propertyIsEnumerable = objectProto.propertyIsEnumerable,
    splice = arrayProto.splice;
/* Built-in method references for those with the same name as other `lodash` methods. */

var nativeKeys = overArg(Object.keys, Object),
    nativeMax = Math.max;
/* Built-in method references that are verified to be native. */

var DataView = getNative(root, 'DataView'),
    Map = getNative(root, 'Map'),
    Promise = getNative(root, 'Promise'),
    Set = getNative(root, 'Set'),
    WeakMap = getNative(root, 'WeakMap'),
    nativeCreate = getNative(Object, 'create');
/** Used to detect maps, sets, and weakmaps. */

var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);
/** Used to convert symbols to primitives and strings. */

var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;
/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

function Hash(entries) {
  var index = -1,
      length = entries ? entries.length : 0;
  this.clear();

  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */


function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
}
/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */


function hashDelete(key) {
  return this.has(key) && delete this.__data__[key];
}
/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */


function hashGet(key) {
  var data = this.__data__;

  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }

  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}
/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */


function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}
/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */


function hashSet(key, value) {
  var data = this.__data__;
  data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
  return this;
} // Add methods to `Hash`.


Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;
/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

function ListCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;
  this.clear();

  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */


function listCacheClear() {
  this.__data__ = [];
}
/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */


function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }

  var lastIndex = data.length - 1;

  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }

  return true;
}
/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */


function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);
  return index < 0 ? undefined : data[index][1];
}
/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */


function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}
/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */


function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }

  return this;
} // Add methods to `ListCache`.


ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;
/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

function MapCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;
  this.clear();

  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */


function mapCacheClear() {
  this.__data__ = {
    'hash': new Hash(),
    'map': new (Map || ListCache)(),
    'string': new Hash()
  };
}
/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */


function mapCacheDelete(key) {
  return getMapData(this, key)['delete'](key);
}
/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */


function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}
/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */


function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}
/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */


function mapCacheSet(key, value) {
  getMapData(this, key).set(key, value);
  return this;
} // Add methods to `MapCache`.


MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;
/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */

function SetCache(values) {
  var index = -1,
      length = values ? values.length : 0;
  this.__data__ = new MapCache();

  while (++index < length) {
    this.add(values[index]);
  }
}
/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */


function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);

  return this;
}
/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */


function setCacheHas(value) {
  return this.__data__.has(value);
} // Add methods to `SetCache`.


SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;
/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

function Stack(entries) {
  this.__data__ = new ListCache(entries);
}
/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */


function stackClear() {
  this.__data__ = new ListCache();
}
/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */


function stackDelete(key) {
  return this.__data__['delete'](key);
}
/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */


function stackGet(key) {
  return this.__data__.get(key);
}
/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */


function stackHas(key) {
  return this.__data__.has(key);
}
/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */


function stackSet(key, value) {
  var cache = this.__data__;

  if (cache instanceof ListCache) {
    var pairs = cache.__data__;

    if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
      pairs.push([key, value]);
      return this;
    }

    cache = this.__data__ = new MapCache(pairs);
  }

  cache.set(key, value);
  return this;
} // Add methods to `Stack`.


Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;
/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */

function arrayLikeKeys(value, inherited) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  // Safari 9 makes `arguments.length` enumerable in strict mode.
  var result = isArray(value) || isArguments(value) ? baseTimes(value.length, String) : [];
  var length = result.length,
      skipIndexes = !!length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
      result.push(key);
    }
  }

  return result;
}
/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */


function assocIndexOf(array, key) {
  var length = array.length;

  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }

  return -1;
}
/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */


function baseGet(object, path) {
  path = isKey(path, object) ? [path] : castPath(path);
  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }

  return index && index == length ? object : undefined;
}
/**
 * The base implementation of `getTag`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */


function baseGetTag(value) {
  return objectToString.call(value);
}
/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */


function baseHasIn(object, key) {
  return object != null && key in Object(object);
}
/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {boolean} [bitmask] The bitmask of comparison flags.
 *  The bitmask may be composed of the following flags:
 *     1 - Unordered comparison
 *     2 - Partial comparison
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */


function baseIsEqual(value, other, customizer, bitmask, stack) {
  if (value === other) {
    return true;
  }

  if (value == null || other == null || !isObject(value) && !isObjectLike(other)) {
    return value !== value && other !== other;
  }

  return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
}
/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`
 *  for more details.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */


function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = arrayTag,
      othTag = arrayTag;

  if (!objIsArr) {
    objTag = getTag(object);
    objTag = objTag == argsTag ? objectTag : objTag;
  }

  if (!othIsArr) {
    othTag = getTag(other);
    othTag = othTag == argsTag ? objectTag : othTag;
  }

  var objIsObj = objTag == objectTag && !isHostObject(object),
      othIsObj = othTag == objectTag && !isHostObject(other),
      isSameTag = objTag == othTag;

  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack());
    return objIsArr || isTypedArray(object) ? equalArrays(object, other, equalFunc, customizer, bitmask, stack) : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
  }

  if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;
      stack || (stack = new Stack());
      return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
    }
  }

  if (!isSameTag) {
    return false;
  }

  stack || (stack = new Stack());
  return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
}
/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */


function baseIsMatch(object, source, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }

  object = Object(object);

  while (index--) {
    var data = matchData[index];

    if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
      return false;
    }
  }

  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack();

      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }

      if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack) : result)) {
        return false;
      }
    }
  }

  return true;
}
/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */


function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }

  var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}
/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */


function baseIsTypedArray(value) {
  return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
}
/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */


function baseIteratee(value) {
  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
  if (typeof value == 'function') {
    return value;
  }

  if (value == null) {
    return identity;
  }

  if (typeof value == 'object') {
    return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
  }

  return property(value);
}
/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */


function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }

  var result = [];

  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }

  return result;
}
/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */


function baseMatches(source) {
  var matchData = getMatchData(source);

  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
  }

  return function (object) {
    return object === source || baseIsMatch(object, source, matchData);
  };
}
/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */


function baseMatchesProperty(path, srcValue) {
  if (isKey(path) && isStrictComparable(srcValue)) {
    return matchesStrictComparable(toKey(path), srcValue);
  }

  return function (object) {
    var objValue = get(object, path);
    return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
  };
}
/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */


function basePropertyDeep(path) {
  return function (object) {
    return baseGet(object, path);
  };
}
/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */


function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }

  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }

  var result = value + '';
  return result == '0' && 1 / value == -INFINITY ? '-0' : result;
}
/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Array} Returns the cast property path array.
 */


function castPath(value) {
  return isArray(value) ? value : stringToPath(value);
}
/**
 * Creates a `_.find` or `_.findLast` function.
 *
 * @private
 * @param {Function} findIndexFunc The function to find the collection index.
 * @returns {Function} Returns the new find function.
 */


function createFind(findIndexFunc) {
  return function (collection, predicate, fromIndex) {
    var iterable = Object(collection);

    if (!isArrayLike(collection)) {
      var iteratee = baseIteratee(predicate, 3);
      collection = keys(collection);

      predicate = function predicate(key) {
        return iteratee(iterable[key], key, iterable);
      };
    }

    var index = findIndexFunc(collection, predicate, fromIndex);
    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
  };
}
/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} customizer The function to customize comparisons.
 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
 *  for more details.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */


function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  } // Assume cyclic values are equal.


  var stacked = stack.get(array);

  if (stacked && stack.get(other)) {
    return stacked == other;
  }

  var index = -1,
      result = true,
      seen = bitmask & UNORDERED_COMPARE_FLAG ? new SetCache() : undefined;
  stack.set(array, other);
  stack.set(other, array); // Ignore non-index properties.

  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
    }

    if (compared !== undefined) {
      if (compared) {
        continue;
      }

      result = false;
      break;
    } // Recursively compare arrays (susceptible to call stack limits).


    if (seen) {
      if (!arraySome(other, function (othValue, othIndex) {
        if (!seen.has(othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
          return seen.add(othIndex);
        }
      })) {
        result = false;
        break;
      }
    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
      result = false;
      break;
    }
  }

  stack['delete'](array);
  stack['delete'](other);
  return result;
}
/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} customizer The function to customize comparisons.
 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
 *  for more details.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */


function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
  switch (tag) {
    case dataViewTag:
      if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
        return false;
      }

      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }

      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == other + '';

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      } // Assume cyclic values are equal.


      var stacked = stack.get(object);

      if (stacked) {
        return stacked == other;
      }

      bitmask |= UNORDERED_COMPARE_FLAG; // Recursively compare objects (susceptible to call stack limits).

      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }

  }

  return false;
}
/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} customizer The function to customize comparisons.
 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
 *  for more details.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */


function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
      objProps = keys(object),
      objLength = objProps.length,
      othProps = keys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }

  var index = objLength;

  while (index--) {
    var key = objProps[index];

    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  } // Assume cyclic values are equal.


  var stacked = stack.get(object);

  if (stacked && stack.get(other)) {
    return stacked == other;
  }

  var result = true;
  stack.set(object, other);
  stack.set(other, object);
  var skipCtor = isPartial;

  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
    } // Recursively compare objects (susceptible to call stack limits).


    if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack) : compared)) {
      result = false;
      break;
    }

    skipCtor || (skipCtor = key == 'constructor');
  }

  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor; // Non `Object` object instances with different constructors are not equal.

    if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }

  stack['delete'](object);
  stack['delete'](other);
  return result;
}
/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */


function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
}
/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */


function getMatchData(object) {
  var result = keys(object),
      length = result.length;

  while (length--) {
    var key = result[length],
        value = object[key];
    result[length] = [key, value, isStrictComparable(value)];
  }

  return result;
}
/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */


function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}
/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */


var getTag = baseGetTag; // Fallback for data views, maps, sets, and weak maps in IE 11,
// for data views in Edge < 14, and promises in Node.js.

if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
  getTag = function getTag(value) {
    var result = objectToString.call(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : undefined;

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString:
          return dataViewTag;

        case mapCtorString:
          return mapTag;

        case promiseCtorString:
          return promiseTag;

        case setCtorString:
          return setTag;

        case weakMapCtorString:
          return weakMapTag;
      }
    }

    return result;
  };
}
/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */


function hasPath(object, path, hasFunc) {
  path = isKey(path, object) ? [path] : castPath(path);
  var result,
      index = -1,
      length = path.length;

  while (++index < length) {
    var key = toKey(path[index]);

    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }

    object = object[key];
  }

  if (result) {
    return result;
  }

  var length = object ? object.length : 0;
  return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
}
/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */


function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
}
/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */


function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }

  var type = typeof value;

  if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
    return true;
  }

  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
}
/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */


function isKeyable(value) {
  var type = typeof value;
  return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
}
/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */


function isMasked(func) {
  return !!maskSrcKey && maskSrcKey in func;
}
/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */


function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
  return value === proto;
}
/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */


function isStrictComparable(value) {
  return value === value && !isObject(value);
}
/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */


function matchesStrictComparable(key, srcValue) {
  return function (object) {
    if (object == null) {
      return false;
    }

    return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
  };
}
/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */


var stringToPath = memoize(function (string) {
  string = toString(string);
  var result = [];

  if (reLeadingDot.test(string)) {
    result.push('');
  }

  string.replace(rePropName, function (match, number, quote, string) {
    result.push(quote ? string.replace(reEscapeChar, '$1') : number || match);
  });
  return result;
});
/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */

function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }

  var result = value + '';
  return result == '0' && 1 / value == -INFINITY ? '-0' : result;
}
/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to process.
 * @returns {string} Returns the source code.
 */


function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}

    try {
      return func + '';
    } catch (e) {}
  }

  return '';
}
/**
 * This method is like `_.find` except that it returns the index of the first
 * element `predicate` returns truthy for instead of the element itself.
 *
 * @static
 * @memberOf _
 * @since 1.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {Function} [predicate=_.identity]
 *  The function invoked per iteration.
 * @param {number} [fromIndex=0] The index to search from.
 * @returns {number} Returns the index of the found element, else `-1`.
 * @example
 *
 * var users = [
 *   { 'user': 'barney',  'active': false },
 *   { 'user': 'fred',    'active': false },
 *   { 'user': 'pebbles', 'active': true }
 * ];
 *
 * _.findIndex(users, function(o) { return o.user == 'barney'; });
 * // => 0
 *
 * // The `_.matches` iteratee shorthand.
 * _.findIndex(users, { 'user': 'fred', 'active': false });
 * // => 1
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.findIndex(users, ['active', false]);
 * // => 0
 *
 * // The `_.property` iteratee shorthand.
 * _.findIndex(users, 'active');
 * // => 2
 */


function findIndex(array, predicate, fromIndex) {
  var length = array ? array.length : 0;

  if (!length) {
    return -1;
  }

  var index = fromIndex == null ? 0 : toInteger(fromIndex);

  if (index < 0) {
    index = nativeMax(length + index, 0);
  }

  return baseFindIndex(array, baseIteratee(predicate, 3), index);
}
/**
 * Iterates over elements of `collection`, returning the first element
 * `predicate` returns truthy for. The predicate is invoked with three
 * arguments: (value, index|key, collection).
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to inspect.
 * @param {Function} [predicate=_.identity]
 *  The function invoked per iteration.
 * @param {number} [fromIndex=0] The index to search from.
 * @returns {*} Returns the matched element, else `undefined`.
 * @example
 *
 * var users = [
 *   { 'user': 'barney',  'age': 36, 'active': true },
 *   { 'user': 'fred',    'age': 40, 'active': false },
 *   { 'user': 'pebbles', 'age': 1,  'active': true }
 * ];
 *
 * _.find(users, function(o) { return o.age < 40; });
 * // => object for 'barney'
 *
 * // The `_.matches` iteratee shorthand.
 * _.find(users, { 'age': 1, 'active': true });
 * // => object for 'pebbles'
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.find(users, ['active', false]);
 * // => object for 'fred'
 *
 * // The `_.property` iteratee shorthand.
 * _.find(users, 'active');
 * // => object for 'barney'
 */


var find = createFind(findIndex);
/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */

function memoize(func, resolver) {
  if (typeof func != 'function' || resolver && typeof resolver != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }

  var memoized = function memoized() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }

    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result);
    return result;
  };

  memoized.cache = new (memoize.Cache || MapCache)();
  return memoized;
} // Assign cache to `_.memoize`.


memoize.Cache = MapCache;
/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */

function eq(value, other) {
  return value === other || value !== value && other !== other;
}
/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */


function isArguments(value) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') && (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
}
/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */


var isArray = Array.isArray;
/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */

function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}
/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */


function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}
/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */


function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}
/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */


function isLength(value) {
  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */


function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */


function isObjectLike(value) {
  return !!value && typeof value == 'object';
}
/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */


function isSymbol(value) {
  return typeof value == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;
}
/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */


var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
/**
 * Converts `value` to a finite number.
 *
 * @static
 * @memberOf _
 * @since 4.12.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted number.
 * @example
 *
 * _.toFinite(3.2);
 * // => 3.2
 *
 * _.toFinite(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toFinite(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toFinite('3.2');
 * // => 3.2
 */

function toFinite(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }

  value = toNumber(value);

  if (value === INFINITY || value === -INFINITY) {
    var sign = value < 0 ? -1 : 1;
    return sign * MAX_INTEGER;
  }

  return value === value ? value : 0;
}
/**
 * Converts `value` to an integer.
 *
 * **Note:** This method is loosely based on
 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toInteger(3.2);
 * // => 3
 *
 * _.toInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toInteger(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toInteger('3.2');
 * // => 3
 */


function toInteger(value) {
  var result = toFinite(value),
      remainder = result % 1;
  return result === result ? remainder ? result - remainder : result : 0;
}
/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */


function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }

  if (isSymbol(value)) {
    return NAN;
  }

  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? other + '' : other;
  }

  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }

  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
}
/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */


function toString(value) {
  return value == null ? '' : baseToString(value);
}
/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */


function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}
/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */


function hasIn(object, path) {
  return object != null && hasPath(object, path, baseHasIn);
}
/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */


function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}
/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */


function identity(value) {
  return value;
}
/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */


function property(path) {
  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
}

module.exports = find;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(8), __webpack_require__(94)(module)))

/***/ }),
/* 857 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';
/** Used for built-in method references. */

var objectProto = Object.prototype;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */

var objectToString = objectProto.toString;
/**
 * The base implementation of methods like `_.max` and `_.min` which accepts a
 * `comparator` to determine the extremum value.
 *
 * @private
 * @param {Array} array The array to iterate over.
 * @param {Function} iteratee The iteratee invoked per iteration.
 * @param {Function} comparator The comparator used to compare values.
 * @returns {*} Returns the extremum value.
 */

function baseExtremum(array, iteratee, comparator) {
  var index = -1,
      length = array.length;

  while (++index < length) {
    var value = array[index],
        current = iteratee(value);

    if (current != null && (computed === undefined ? current === current && !isSymbol(current) : comparator(current, computed))) {
      var computed = current,
          result = value;
    }
  }

  return result;
}
/**
 * The base implementation of `_.gt` which doesn't coerce arguments to numbers.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if `value` is greater than `other`,
 *  else `false`.
 */


function baseGt(value, other) {
  return value > other;
}
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */


function isObjectLike(value) {
  return !!value && typeof value == 'object';
}
/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified,
 *  else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */


function isSymbol(value) {
  return typeof value == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;
}
/**
 * This method returns the first argument given to it.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'user': 'fred' };
 *
 * _.identity(object) === object;
 * // => true
 */


function identity(value) {
  return value;
}
/**
 * Computes the maximum value of `array`. If `array` is empty or falsey,
 * `undefined` is returned.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Math
 * @param {Array} array The array to iterate over.
 * @returns {*} Returns the maximum value.
 * @example
 *
 * _.max([4, 2, 8, 6]);
 * // => 8
 *
 * _.max([]);
 * // => undefined
 */


function max(array) {
  return array && array.length ? baseExtremum(array, identity, baseGt) : undefined;
}

module.exports = max;

/***/ }),
/* 858 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var common = __webpack_require__(334);

var v6 = __webpack_require__(183);
/**
 * Returns true if the address is valid, false otherwise
 * @memberof Address6
 * @instance
 * @returns {boolean}
 */


exports.isValid = function () {
  return this.valid;
};
/**
 * Returns true if the given address is in the subnet of the current address
 * @memberof Address6
 * @instance
 * @returns {boolean}
 */


exports.isInSubnet = common.isInSubnet;
/**
 * Returns true if the address is correct, false otherwise
 * @memberof Address6
 * @instance
 * @returns {boolean}
 */

exports.isCorrect = common.isCorrect(v6.BITS);
/**
 * Returns true if the address is in the canonical form, false otherwise
 * @memberof Address6
 * @instance
 * @returns {boolean}
 */

exports.isCanonical = common.falseIfInvalid(function () {
  return this.addressMinusSuffix === this.canonicalForm();
});
/**
 * Returns true if the address is a link local address, false otherwise
 * @memberof Address6
 * @instance
 * @returns {boolean}
 */

exports.isLinkLocal = common.falseIfInvalid(function () {
  // Zeroes are required, i.e. we can't check isInSubnet with 'fe80::/10'
  if (this.getBitsBase2(0, 64) === '1111111010000000000000000000000000000000000000000000000000000000') {
    return true;
  }

  return false;
});
/**
 * Returns true if the address is a multicast address, false otherwise
 * @memberof Address6
 * @instance
 * @returns {boolean}
 */

exports.isMulticast = common.falseIfInvalid(function () {
  return this.getType() === 'Multicast';
});
/**
 * Returns true if the address is a v4-in-v6 address, false otherwise
 * @memberof Address6
 * @instance
 * @returns {boolean}
 */

exports.is4 = common.falseIfInvalid(function () {
  return this.v4;
});
/**
 * Returns true if the address is a Teredo address, false otherwise
 * @memberof Address6
 * @instance
 * @returns {boolean}
 */

exports.isTeredo = common.falseIfInvalid(function () {
  return this.isInSubnet(new this.constructor('2001::/32'));
});
/**
 * Returns true if the address is a 6to4 address, false otherwise
 * @memberof Address6
 * @instance
 * @returns {boolean}
 */

exports.is6to4 = common.falseIfInvalid(function () {
  return this.isInSubnet(new this.constructor('2002::/16'));
});
/**
 * Returns true if the address is a loopback address, false otherwise
 * @memberof Address6
 * @instance
 * @returns {boolean}
 */

exports.isLoopback = common.falseIfInvalid(function () {
  return this.getType() === 'Loopback';
});

/***/ }),
/* 859 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var constants4 = __webpack_require__(182);

var helpers = __webpack_require__(337);

var sprintf = __webpack_require__(88).sprintf;
/**
 * @returns {String} the address in link form with a default port of 80
 */


exports.href = function (optionalPort) {
  if (optionalPort === undefined) {
    optionalPort = '';
  } else {
    optionalPort = sprintf(':%s', optionalPort);
  }

  return sprintf('http://[%s]%s/', this.correctForm(), optionalPort);
};
/**
 * @returns {String} a link suitable for conveying the address via a URL hash
 */


exports.link = function (options) {
  if (!options) {
    options = {};
  }

  if (options.className === undefined) {
    options.className = '';
  }

  if (options.prefix === undefined) {
    options.prefix = '/#address=';
  }

  if (options.v4 === undefined) {
    options.v4 = false;
  }

  var formFunction = this.correctForm;

  if (options.v4) {
    formFunction = this.to4in6;
  }

  if (options.className) {
    return sprintf('<a href="%1$s%2$s" class="%3$s">%2$s</a>', options.prefix, formFunction.call(this), options.className);
  }

  return sprintf('<a href="%1$s%2$s">%2$s</a>', options.prefix, formFunction.call(this));
};
/**
 * Groups an address
 * @returns {String}
 */


exports.group = function () {
  var address4 = this.address.match(constants4.RE_ADDRESS);
  var i;

  if (address4) {
    // The IPv4 case
    var segments = address4[0].split('.');
    this.address = this.address.replace(constants4.RE_ADDRESS, sprintf('<span class="hover-group group-v4 group-6">%s</span>' + '.' + '<span class="hover-group group-v4 group-7">%s</span>', segments.slice(0, 2).join('.'), segments.slice(2, 4).join('.')));
  }

  if (this.elidedGroups === 0) {
    // The simple case
    return helpers.simpleGroup(this.address);
  } // The elided case


  var output = [];
  var halves = this.address.split('::');

  if (halves[0].length) {
    output.push(helpers.simpleGroup(halves[0]));
  } else {
    output.push('');
  }

  var classes = ['hover-group'];

  for (i = this.elisionBegin; i < this.elisionBegin + this.elidedGroups; i++) {
    classes.push(sprintf('group-%d', i));
  }

  output.push(sprintf('<span class="%s"></span>', classes.join(' ')));

  if (halves[1].length) {
    output.push(helpers.simpleGroup(halves[1], this.elisionEnd));
  } else {
    output.push('');
  }

  return output.join(':');
};

/***/ }),
/* 860 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var sprintf = __webpack_require__(88).sprintf;

var v6 = __webpack_require__(183);

function groupPossibilities(possibilities) {
  return sprintf('(%s)', possibilities.join('|'));
}

function padGroup(group) {
  if (group.length < 4) {
    return sprintf('0{0,%d}%s', 4 - group.length, group);
  }

  return group;
}

function simpleRegularExpression(groups) {
  var zeroIndexes = [];
  groups.forEach(function (group, i) {
    var groupInteger = parseInt(group, 16);

    if (groupInteger === 0) {
      zeroIndexes.push(i);
    }
  }); // You can technically elide a single 0, this creates the regular expressions
  // to match that eventuality

  var possibilities = zeroIndexes.map(function (zeroIndex) {
    return groups.map(function (group, i) {
      if (i === zeroIndex) {
        var elision = i === 0 || i === v6.GROUPS - 1 ? ':' : '';
        return groupPossibilities([padGroup(group), elision]);
      }

      return padGroup(group);
    }).join(':');
  }); // The simplest case

  possibilities.push(groups.map(padGroup).join(':'));
  return groupPossibilities(possibilities);
}

function possibleElisions(elidedGroups, moreLeft, moreRight) {
  var left = moreLeft ? '' : ':';
  var right = moreRight ? '' : ':';
  var possibilities = []; // 1. elision of everything (::)

  if (!moreLeft && !moreRight) {
    possibilities.push('::');
  } // 2. complete elision of the middle


  if (moreLeft && moreRight) {
    possibilities.push('');
  }

  if (moreRight && !moreLeft || !moreRight && moreLeft) {
    // 3. complete elision of one side
    possibilities.push(':');
  } // 4. elision from the left side


  possibilities.push(sprintf('%s(:0{1,4}){1,%d}', left, elidedGroups - 1)); // 5. elision from the right side

  possibilities.push(sprintf('(0{1,4}:){1,%d}%s', elidedGroups - 1, right)); // 6. no elision

  possibilities.push(sprintf('(0{1,4}:){%d}0{1,4}', elidedGroups - 1)); // 7. elision (including sloppy elision) from the middle

  for (var groups = 1; groups < elidedGroups - 1; groups++) {
    for (var position = 1; position < elidedGroups - groups; position++) {
      possibilities.push(sprintf('(0{1,4}:){%d}:(0{1,4}:){%d}0{1,4}', position, elidedGroups - position - groups - 1));
    }
  }

  return groupPossibilities(possibilities);
}
/**
 * Generate a regular expression string that can be used to find or validate
 * all variations of this address
 * @memberof Address6
 * @instance
 * @param {string} optionalSubString
 * @returns {string}
 */


exports.regularExpressionString = function (optionalSubString) {
  if (optionalSubString === undefined) {
    optionalSubString = false;
  }

  var output = []; // TODO: revisit why this is necessary

  var address6 = new this.constructor(this.correctForm());

  if (address6.elidedGroups === 0) {
    // The simple case
    output.push(simpleRegularExpression(address6.parsedAddress));
  } else if (address6.elidedGroups === v6.GROUPS) {
    // A completely elided address
    output.push(possibleElisions(v6.GROUPS));
  } else {
    // A partially elided address
    var halves = address6.address.split('::');

    if (halves[0].length) {
      output.push(simpleRegularExpression(halves[0].split(':')));
    }

    output.push(possibleElisions(address6.elidedGroups, halves[0].length !== 0, halves[1].length !== 0));

    if (halves[1].length) {
      output.push(simpleRegularExpression(halves[1].split(':')));
    }

    output = [output.join(':')];
  }

  if (!optionalSubString) {
    output = [].concat('(?=^|\\b|[^\\w\\:])(', output, ')(?=[^\\w\\:]|\\b|$)');
  }

  return output.join('');
};
/**
 * Generate a regular expression that can be used to find or validate all
 * variations of this address.
 * @memberof Address6
 * @instance
 * @param {string} optionalSubString
 * @returns {RegExp}
 */


exports.regularExpression = function (optionalSubstring) {
  return new RegExp(this.regularExpressionString(optionalSubstring), 'i');
};

/***/ }),
/* 861 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const debug = __webpack_require__(1);

const log = debug('libp2p:webrtc-star');
log.error = debug('libp2p:webrtc-star:error');

const assert = __webpack_require__(13);

const {
  EventEmitter
} = __webpack_require__(11);

const errcode = __webpack_require__(2);

const withIs = __webpack_require__(21);

const {
  AbortError
} = __webpack_require__(338);

const SimplePeer = __webpack_require__(339);

const webrtcSupport = __webpack_require__(865);

const multiaddr = __webpack_require__(20);

const mafmt = __webpack_require__(56);

const PeerId = __webpack_require__(9);

const PeerInfo = __webpack_require__(17);

const {
  CODE_CIRCUIT
} = __webpack_require__(184);

const createListener = __webpack_require__(866);

const toConnection = __webpack_require__(353);

const {
  cleanMultiaddr
} = __webpack_require__(356);

function noop() {}
/**
 * @class WebRTCStar
 */


class WebRTCStar {
  /**
   * @constructor
   * @param {object} options
   * @param {Upgrader} options.upgrader
   */
  constructor(options = {}) {
    assert(options.upgrader, 'An upgrader must be provided. See https://github.com/libp2p/interface-transport#upgrader.');
    this._upgrader = options.upgrader;
    this._signallingAddr = undefined;
    this.sioOptions = {
      transports: ['websocket'],
      'force new connection': true
    };

    if (options.wrtc) {
      this.wrtc = options.wrtc;
    }

    this.listenersRefs = {}; // Discovery

    this.discovery = new EventEmitter();
    this.discovery.tag = 'webRTCStar';
    this.discovery._isStarted = false;

    this.discovery.start = () => {
      this.discovery._isStarted = true;
    };

    this.discovery.stop = () => {
      this.discovery._isStarted = false;
    };

    this._peerDiscovered = this._peerDiscovered.bind(this);
  }
  /**
   * @async
   * @param {Multiaddr} ma
   * @param {object} options
   * @param {AbortSignal} options.signal Used to abort dial requests
   * @returns {Connection} An upgraded Connection
   */


  async dial(ma, options = {}) {
    const rawConn = await this._connect(ma, options);
    const maConn = toConnection(rawConn, {
      remoteAddr: ma,
      signal: options.signal
    });
    log('new outbound connection %s', maConn.remoteAddr);
    const conn = await this._upgrader.upgradeOutbound(maConn);
    log('outbound connection %s upgraded', maConn.remoteAddr);
    return conn;
  }
  /**
   * @private
   * @param {Multiaddr} ma
   * @param {object} options
   * @param {AbortSignal} options.signal Used to abort dial requests
   * @returns {Promise<SimplePeer>} Resolves a SimplePeer Webrtc channel
   */


  _connect(ma, options = {}) {
    if (options.signal && options.signal.aborted) {
      throw new AbortError();
    }

    const spOptions = {
      initiator: true,
      trickle: false
    }; // Use custom WebRTC implementation

    if (this.wrtc) {
      spOptions.wrtc = this.wrtc;
    }

    const cOpts = ma.toOptions();
    const intentId = (~~(Math.random() * 1e9)).toString(36) + Date.now();
    const sioClient = this.listenersRefs[Object.keys(this.listenersRefs)[0]].io;
    return new Promise((resolve, reject) => {
      const start = Date.now();
      let connected;
      log('dialing %s:%s', cOpts.host, cOpts.port);
      const channel = new SimplePeer(spOptions);

      const onError = err => {
        if (!connected) {
          const msg = "connection error ".concat(cOpts.host, ":").concat(cOpts.port, ": ").concat(err.message);
          err.message = msg;
          log.error(msg);
          done(err);
        }
      };

      const onTimeout = () => {
        log('connnection timeout %s:%s', cOpts.host, cOpts.port);
        const err = errcode(new Error("connection timeout after ".concat(Date.now() - start, "ms")), 'ERR_CONNECT_TIMEOUT'); // Note: this will result in onError() being called

        channel.emit('error', err);
      };

      const onConnect = () => {
        connected = true;
        log('connection opened %s:%s', cOpts.host, cOpts.port);
        done(null);
      };

      const onAbort = () => {
        log.error('connection aborted %s:%s', cOpts.host, cOpts.port);
        channel.destroy();
        done(new AbortError());
      };

      const done = err => {
        channel.removeListener('error', onError);
        channel.removeListener('timeout', onTimeout);
        channel.removeListener('connect', onConnect);
        options.signal && options.signal.removeEventListener('abort', onAbort);
        err ? reject(err) : resolve(channel);
      };

      channel.once('error', onError);
      channel.once('timeout', onTimeout);
      channel.once('connect', onConnect);
      channel.on('close', () => channel.destroy());
      options.signal && options.signal.addEventListener('abort', onAbort);
      channel.on('signal', signal => {
        sioClient.emit('ss-handshake', {
          intentId: intentId,
          srcMultiaddr: this._signallingAddr.toString(),
          dstMultiaddr: ma.toString(),
          signal: signal
        });
      }); // NOTE: aegir segfaults if we do .once on the socket.io event emitter and we
      // are clueless as to why.

      sioClient.on('ws-handshake', offer => {
        if (offer.intentId === intentId && offer.err) {
          reject(errcode(offer.err instanceof Error ? offer.err : new Error(offer.err), 'ERR_SIGNALLING_FAILED'));
        }

        if (offer.intentId !== intentId || !offer.answer) {
          return;
        }

        channel.signal(offer.signal);
      });
    });
  }
  /**
   * Creates a WebrtcStar listener. The provided `handler` function will be called
   * anytime a new incoming Connection has been successfully upgraded via
   * `upgrader.upgradeInbound`.
   * @param {object} [options] simple-peer options for listener
   * @param {function (Connection)} handler
   * @returns {Listener} A WebrtcStar listener
   */


  createListener(options = {}, handler) {
    if (!webrtcSupport.support && !this.wrtc) {
      throw errcode(new Error('no WebRTC support'), 'ERR_NO_WEBRTC_SUPPORT');
    }

    if (typeof options === 'function') {
      handler = options;
      options = {};
    }

    handler = handler || noop;
    return createListener({
      handler,
      upgrader: this._upgrader
    }, this, options);
  }
  /**
   * Takes a list of `Multiaddr`s and returns only valid TCP addresses
   * @param {Multiaddr[]} multiaddrs
   * @returns {Multiaddr[]} Valid TCP multiaddrs
   */


  filter(multiaddrs) {
    multiaddrs = Array.isArray(multiaddrs) ? multiaddrs : [multiaddrs];
    return multiaddrs.filter(ma => {
      if (ma.protoCodes().includes(CODE_CIRCUIT)) {
        return false;
      }

      return mafmt.WebRTCStar.matches(ma);
    });
  }

  _peerDiscovered(maStr) {
    if (!this.discovery._isStarted) return;
    log('Peer Discovered:', maStr);
    maStr = cleanMultiaddr(maStr);
    const ma = multiaddr(maStr);
    const peerId = PeerId.createFromB58String(ma.getPeerId());
    const peerInfo = new PeerInfo(peerId);
    peerInfo.multiaddrs.add(ma);
    this.discovery.emit('peer', peerInfo);
  }

}

module.exports = withIs(WebRTCStar, {
  className: 'WebRTCStar',
  symbolName: '@libp2p/js-libp2p-webrtc-star/webrtcstar'
});

/***/ }),
/* 862 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = class AbortError extends Error {
  constructor(message, code) {
    super(message || 'The operation was aborted');
    this.type = 'aborted';
    this.code = code || 'ABORT_ERR';
  }

};

/***/ }),
/* 863 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// originally pulled out of simple-peer
module.exports = function getBrowserRTC() {
  if (typeof window === 'undefined') return null;
  var wrtc = {
    RTCPeerConnection: window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection,
    RTCSessionDescription: window.RTCSessionDescription || window.mozRTCSessionDescription || window.webkitRTCSessionDescription,
    RTCIceCandidate: window.RTCIceCandidate || window.mozRTCIceCandidate || window.webkitRTCIceCandidate
  };
  if (!wrtc.RTCPeerConnection) return null;
  return wrtc;
};

/***/ }),
/* 864 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


let promise;
module.exports = typeof queueMicrotask === 'function' ? queueMicrotask // reuse resolved promise, and allocate it lazily
: cb => (promise || (promise = Promise.resolve())).then(cb).catch(err => setTimeout(() => {
  throw err;
}, 0));

/***/ }),
/* 865 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* global self */
// created by @HenrikJoreteg
var prefix;
var version;

if (self.mozRTCPeerConnection || navigator.mozGetUserMedia) {
  prefix = 'moz';
  version = parseInt(navigator.userAgent.match(/Firefox\/([0-9]+)\./)[1], 10);
} else if (self.webkitRTCPeerConnection || navigator.webkitGetUserMedia) {
  prefix = 'webkit';
  version = navigator.userAgent.match(/Chrom(e|ium)/) && parseInt(navigator.userAgent.match(/Chrom(e|ium)\/([0-9]+)\./)[2], 10);
}

var PC = self.RTCPeerConnection || self.mozRTCPeerConnection || self.webkitRTCPeerConnection;
var IceCandidate = self.mozRTCIceCandidate || self.RTCIceCandidate;
var SessionDescription = self.mozRTCSessionDescription || self.RTCSessionDescription;
var MediaStream = self.webkitMediaStream || self.MediaStream;
var screenSharing = self.location.protocol === 'https:' && (prefix === 'webkit' && version >= 26 || prefix === 'moz' && version >= 33);
var AudioContext = self.AudioContext || self.webkitAudioContext;
var videoEl = self.document && document.createElement('video');
var supportVp8 = videoEl && videoEl.canPlayType && videoEl.canPlayType('video/webm; codecs="vp8", vorbis') === 'probably';
var getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.msGetUserMedia || navigator.mozGetUserMedia; // export support flags and constructors.prototype && PC

module.exports = {
  prefix: prefix,
  browserVersion: version,
  support: !!PC && !!getUserMedia,
  // new support style
  supportRTCPeerConnection: !!PC,
  supportVp8: supportVp8,
  supportGetUserMedia: !!getUserMedia,
  supportDataChannel: !!(PC && PC.prototype && PC.prototype.createDataChannel),
  supportWebAudio: !!(AudioContext && AudioContext.prototype.createMediaStreamSource),
  supportMediaStream: !!(MediaStream && MediaStream.prototype.removeTrack),
  supportScreenSharing: !!screenSharing,
  // constructors
  AudioContext: AudioContext,
  PeerConnection: PC,
  SessionDescription: SessionDescription,
  IceCandidate: IceCandidate,
  MediaStream: MediaStream,
  getUserMedia: getUserMedia
};

/***/ }),
/* 866 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const EventEmitter = __webpack_require__(11);

const debug = __webpack_require__(1);

const log = debug('libp2p:webrtc-star:listener');
log.error = debug('libp2p:webrtc-star:listener:error');

const multiaddr = __webpack_require__(20);

const io = __webpack_require__(867);

const SimplePeer = __webpack_require__(339);

const pDefer = __webpack_require__(69);

const toConnection = __webpack_require__(353);

const {
  cleanUrlSIO
} = __webpack_require__(356);

const {
  CODE_P2P
} = __webpack_require__(184);

const sioOptions = {
  transports: ['websocket'],
  'force new connection': true
};

module.exports = ({
  handler,
  upgrader
}, WebRTCStar, options = {}) => {
  const listener = new EventEmitter();
  let listeningAddr;
  listener.__connections = [];

  listener.listen = ma => {
    const defer = pDefer();
    listeningAddr = ma;

    if (!ma.protoCodes().includes(CODE_P2P) && upgrader.localPeer) {
      WebRTCStar._signallingAddr = ma.encapsulate("/p2p/".concat(upgrader.localPeer.toB58String()));
    } else {
      WebRTCStar._signallingAddr = ma;
    }

    const sioUrl = cleanUrlSIO(ma);
    log('Dialing to Signalling Server on: ' + sioUrl);
    listener.io = io.connect(sioUrl, sioOptions);

    const incommingDial = offer => {
      if (offer.answer || offer.err) {
        return;
      }

      const spOptions = _objectSpread({
        trickle: false
      }, options); // Use custom WebRTC implementation


      if (WebRTCStar.wrtc) {
        spOptions.wrtc = WebRTCStar.wrtc;
      }

      const channel = new SimplePeer(spOptions);
      channel.once('signal', signal => {
        offer.signal = signal;
        offer.answer = true;
        listener.io.emit('ss-handshake', offer);
      });
      channel.signal(offer.signal);
      channel.once('connect', async () => {
        const maConn = toConnection(channel);
        log('new inbound connection %s', maConn.remoteAddr);
        let conn;

        try {
          conn = await upgrader.upgradeInbound(maConn);
        } catch (err) {
          log.error('inbound connection failed to upgrade', err);
          return maConn.close();
        }

        if (!conn.remoteAddr) {
          try {
            conn.remoteAddr = ma.decapsulateCode(CODE_P2P).encapsulate("/p2p/".concat(conn.remotePeer.toB58String()));
          } catch (err) {
            log.error('could not determine remote address', err);
          }
        }

        log('inbound connection %s upgraded', maConn.remoteAddr);
        trackConn(listener, maConn);
        listener.emit('connection', conn);
        handler(conn);
      });
    };

    listener.io.once('connect_error', err => defer.reject(err));
    listener.io.once('error', err => {
      listener.emit('error', err);
      listener.emit('close');
    });
    listener.io.on('ws-handshake', incommingDial);
    listener.io.on('ws-peer', WebRTCStar._peerDiscovered);
    listener.io.on('connect', () => {
      listener.io.emit('ss-join', WebRTCStar._signallingAddr.toString());
    });
    listener.io.once('connect', () => {
      listener.emit('listening');
      defer.resolve();
    });
    return defer.promise;
  };

  listener.close = async () => {
    listener.io && listener.io.emit('ss-leave');
    await Promise.all(listener.__connections.map(maConn => maConn.close()));
    listener.emit('close');
  };

  listener.getAddrs = () => {
    return [listeningAddr];
  };

  WebRTCStar.listenersRefs[multiaddr.toString()] = listener;
  return listener;
};

function trackConn(listener, maConn) {
  listener.__connections.push(maConn);

  const untrackConn = () => {
    listener.__connections = listener.__connections.filter(c => c !== maConn);
  };

  maConn.conn.once('close', untrackConn);
}

/***/ }),
/* 867 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Module dependencies.
 */
var url = __webpack_require__(868);

var parser = __webpack_require__(185);

var Manager = __webpack_require__(344);

var debug = __webpack_require__(1)('socket.io-client');
/**
 * Module exports.
 */


module.exports = exports = lookup;
/**
 * Managers cache.
 */

var cache = exports.managers = {};
/**
 * Looks up an existing `Manager` for multiplexing.
 * If the user summons:
 *
 *   `io('http://localhost/a');`
 *   `io('http://localhost/b');`
 *
 * We reuse the existing instance based on same scheme/port/host,
 * and we initialize sockets for each namespace.
 *
 * @api public
 */

function lookup(uri, opts) {
  if (typeof uri === 'object') {
    opts = uri;
    uri = undefined;
  }

  opts = opts || {};
  var parsed = url(uri);
  var source = parsed.source;
  var id = parsed.id;
  var path = parsed.path;
  var sameNamespace = cache[id] && path in cache[id].nsps;
  var newConnection = opts.forceNew || opts['force new connection'] || false === opts.multiplex || sameNamespace;
  var io;

  if (newConnection) {
    debug('ignoring socket cache for %s', source);
    io = Manager(source, opts);
  } else {
    if (!cache[id]) {
      debug('new io instance for %s', source);
      cache[id] = Manager(source, opts);
    }

    io = cache[id];
  }

  if (parsed.query && !opts.query) {
    opts.query = parsed.query;
  }

  return io.socket(parsed.path, opts);
}
/**
 * Protocol version.
 *
 * @api public
 */


exports.protocol = parser.protocol;
/**
 * `connect`.
 *
 * @param {String} uri
 * @api public
 */

exports.connect = lookup;
/**
 * Expose constructors for standalone build.
 *
 * @api public
 */

exports.Manager = __webpack_require__(344);
exports.Socket = __webpack_require__(350);

/***/ }),
/* 868 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Module dependencies.
 */
var parseuri = __webpack_require__(341);

var debug = __webpack_require__(1)('socket.io-client:url');
/**
 * Module exports.
 */


module.exports = url;
/**
 * URL parser.
 *
 * @param {String} url
 * @param {Object} An object meant to mimic window.location.
 *                 Defaults to window.location.
 * @api public
 */

function url(uri, loc) {
  var obj = uri; // default to window.location

  loc = loc || typeof location !== 'undefined' && location;
  if (null == uri) uri = loc.protocol + '//' + loc.host; // relative path support

  if ('string' === typeof uri) {
    if ('/' === uri.charAt(0)) {
      if ('/' === uri.charAt(1)) {
        uri = loc.protocol + uri;
      } else {
        uri = loc.host + uri;
      }
    }

    if (!/^(https?|wss?):\/\//.test(uri)) {
      debug('protocol-less url %s', uri);

      if ('undefined' !== typeof loc) {
        uri = loc.protocol + '//' + uri;
      } else {
        uri = 'https://' + uri;
      }
    } // parse


    debug('parse %s', uri);
    obj = parseuri(uri);
  } // make sure we treat `localhost:80` and `localhost` equally


  if (!obj.port) {
    if (/^(http|ws)$/.test(obj.protocol)) {
      obj.port = '80';
    } else if (/^(http|ws)s$/.test(obj.protocol)) {
      obj.port = '443';
    }
  }

  obj.path = obj.path || '/';
  var ipv6 = obj.host.indexOf(':') !== -1;
  var host = ipv6 ? '[' + obj.host + ']' : obj.host; // define unique id

  obj.id = obj.protocol + '://' + host + ':' + obj.port; // define href

  obj.href = obj.protocol + '://' + host + (loc && loc.port === obj.port ? '' : ':' + obj.port);
  return obj;
}

/***/ }),
/* 869 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */
exports = module.exports = __webpack_require__(870);
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome && 'undefined' != typeof chrome.storage ? chrome.storage.local : localstorage();
/**
 * Colors.
 */

exports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];
/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
    return true;
  } // Internet Explorer and Edge do not support colors.


  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
    return false;
  } // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632


  return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // is firebug? http://stackoverflow.com/a/398120/376773
  typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || // is firefox >= v31?
  // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // double check webkit in userAgent just in case we are in a worker
  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
}
/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */


exports.formatters.j = function (v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};
/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */


function formatArgs(args) {
  var useColors = this.useColors;
  args[0] = (useColors ? '%c' : '') + this.namespace + (useColors ? ' %c' : ' ') + args[0] + (useColors ? '%c ' : ' ') + '+' + exports.humanize(this.diff);
  if (!useColors) return;
  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit'); // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into

  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function (match) {
    if ('%%' === match) return;
    index++;

    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });
  args.splice(lastC, 0, c);
}
/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */


function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console && console.log && Function.prototype.apply.call(console.log, console, arguments);
}
/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */


function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch (e) {}
}
/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */


function load() {
  var r;

  try {
    r = exports.storage.debug;
  } catch (e) {} // If debug isn't set in LS, and we're in Electron, try to load $DEBUG


  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}
/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */


exports.enable(load());
/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
  try {
    return window.localStorage;
  } catch (e) {}
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5)))

/***/ }),
/* 870 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */
exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = __webpack_require__(871);
/**
 * Active `debug` instances.
 */

exports.instances = [];
/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];
/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */

exports.formatters = {};
/**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */

function selectColor(namespace) {
  var hash = 0,
      i;

  for (i in namespace) {
    hash = (hash << 5) - hash + namespace.charCodeAt(i);
    hash |= 0; // Convert to 32bit integer
  }

  return exports.colors[Math.abs(hash) % exports.colors.length];
}
/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */


function createDebug(namespace) {
  var prevTime;

  function debug() {
    // disabled?
    if (!debug.enabled) return;
    var self = debug; // set `diff` timestamp

    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr; // turn the `arguments` into a proper Array

    var args = new Array(arguments.length);

    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %O
      args.unshift('%O');
    } // apply any `formatters` transformations


    var index = 0;
    args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];

      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val); // now we need to remove `args[index]` since it's inlined in the `format`

        args.splice(index, 1);
        index--;
      }

      return match;
    }); // apply env-specific formatting (colors, etc.)

    exports.formatArgs.call(self, args);
    var logFn = debug.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }

  debug.namespace = namespace;
  debug.enabled = exports.enabled(namespace);
  debug.useColors = exports.useColors();
  debug.color = selectColor(namespace);
  debug.destroy = destroy; // env-specific initialization logic for debug instances

  if ('function' === typeof exports.init) {
    exports.init(debug);
  }

  exports.instances.push(debug);
  return debug;
}

function destroy() {
  var index = exports.instances.indexOf(this);

  if (index !== -1) {
    exports.instances.splice(index, 1);
    return true;
  } else {
    return false;
  }
}
/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */


function enable(namespaces) {
  exports.save(namespaces);
  exports.names = [];
  exports.skips = [];
  var i;
  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
  var len = split.length;

  for (i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings

    namespaces = split[i].replace(/\*/g, '.*?');

    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }

  for (i = 0; i < exports.instances.length; i++) {
    var instance = exports.instances[i];
    instance.enabled = exports.enabled(instance.namespace);
  }
}
/**
 * Disable debug output.
 *
 * @api public
 */


function disable() {
  exports.enable('');
}
/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */


function enabled(name) {
  if (name[name.length - 1] === '*') {
    return true;
  }

  var i, len;

  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }

  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }

  return false;
}
/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */


function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}

/***/ }),
/* 871 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Helpers.
 */
var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;
/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function (val, options) {
  options = options || {};
  var type = typeof val;

  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }

  throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
};
/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */


function parse(str) {
  str = String(str);

  if (str.length > 100) {
    return;
  }

  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);

  if (!match) {
    return;
  }

  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();

  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;

    case 'days':
    case 'day':
    case 'd':
      return n * d;

    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;

    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;

    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;

    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;

    default:
      return undefined;
  }
}
/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */


function fmtShort(ms) {
  if (ms >= d) {
    return Math.round(ms / d) + 'd';
  }

  if (ms >= h) {
    return Math.round(ms / h) + 'h';
  }

  if (ms >= m) {
    return Math.round(ms / m) + 'm';
  }

  if (ms >= s) {
    return Math.round(ms / s) + 's';
  }

  return ms + 'ms';
}
/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */


function fmtLong(ms) {
  return plural(ms, d, 'day') || plural(ms, h, 'hour') || plural(ms, m, 'minute') || plural(ms, s, 'second') || ms + ' ms';
}
/**
 * Pluralization helper.
 */


function plural(ms, n, name) {
  if (ms < n) {
    return;
  }

  if (ms < n * 1.5) {
    return Math.floor(ms / n) + ' ' + name;
  }

  return Math.ceil(ms / n) + ' ' + name + 's';
}

/***/ }),
/* 872 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*global Blob,File*/

/**
 * Module requirements
 */
var isArray = __webpack_require__(342);

var isBuf = __webpack_require__(343);

var toString = Object.prototype.toString;
var withNativeBlob = typeof Blob === 'function' || typeof Blob !== 'undefined' && toString.call(Blob) === '[object BlobConstructor]';
var withNativeFile = typeof File === 'function' || typeof File !== 'undefined' && toString.call(File) === '[object FileConstructor]';
/**
 * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.
 * Anything with blobs or files should be fed through removeBlobs before coming
 * here.
 *
 * @param {Object} packet - socket.io event packet
 * @return {Object} with deconstructed packet and list of buffers
 * @api public
 */

exports.deconstructPacket = function (packet) {
  var buffers = [];
  var packetData = packet.data;
  var pack = packet;
  pack.data = _deconstructPacket(packetData, buffers);
  pack.attachments = buffers.length; // number of binary 'attachments'

  return {
    packet: pack,
    buffers: buffers
  };
};

function _deconstructPacket(data, buffers) {
  if (!data) return data;

  if (isBuf(data)) {
    var placeholder = {
      _placeholder: true,
      num: buffers.length
    };
    buffers.push(data);
    return placeholder;
  } else if (isArray(data)) {
    var newData = new Array(data.length);

    for (var i = 0; i < data.length; i++) {
      newData[i] = _deconstructPacket(data[i], buffers);
    }

    return newData;
  } else if (typeof data === 'object' && !(data instanceof Date)) {
    var newData = {};

    for (var key in data) {
      newData[key] = _deconstructPacket(data[key], buffers);
    }

    return newData;
  }

  return data;
}
/**
 * Reconstructs a binary packet from its placeholder packet and buffers
 *
 * @param {Object} packet - event packet with placeholders
 * @param {Array} buffers - binary buffers to put in placeholder positions
 * @return {Object} reconstructed packet
 * @api public
 */


exports.reconstructPacket = function (packet, buffers) {
  packet.data = _reconstructPacket(packet.data, buffers);
  packet.attachments = undefined; // no longer useful

  return packet;
};

function _reconstructPacket(data, buffers) {
  if (!data) return data;

  if (data && data._placeholder) {
    return buffers[data.num]; // appropriate buffer (should be natural order anyway)
  } else if (isArray(data)) {
    for (var i = 0; i < data.length; i++) {
      data[i] = _reconstructPacket(data[i], buffers);
    }
  } else if (typeof data === 'object') {
    for (var key in data) {
      data[key] = _reconstructPacket(data[key], buffers);
    }
  }

  return data;
}
/**
 * Asynchronously removes Blobs or Files from data via
 * FileReader's readAsArrayBuffer method. Used before encoding
 * data as msgpack. Calls callback with the blobless data.
 *
 * @param {Object} data
 * @param {Function} callback
 * @api private
 */


exports.removeBlobs = function (data, callback) {
  function _removeBlobs(obj, curKey, containingObject) {
    if (!obj) return obj; // convert any blob

    if (withNativeBlob && obj instanceof Blob || withNativeFile && obj instanceof File) {
      pendingBlobs++; // async filereader

      var fileReader = new FileReader();

      fileReader.onload = function () {
        // this.result == arraybuffer
        if (containingObject) {
          containingObject[curKey] = this.result;
        } else {
          bloblessData = this.result;
        } // if nothing pending its callback time


        if (! --pendingBlobs) {
          callback(bloblessData);
        }
      };

      fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer
    } else if (isArray(obj)) {
      // handle array
      for (var i = 0; i < obj.length; i++) {
        _removeBlobs(obj[i], i, obj);
      }
    } else if (typeof obj === 'object' && !isBuf(obj)) {
      // and object
      for (var key in obj) {
        _removeBlobs(obj[key], key, obj);
      }
    }
  }

  var pendingBlobs = 0;
  var bloblessData = data;

  _removeBlobs(bloblessData);

  if (!pendingBlobs) {
    callback(bloblessData);
  }
};

/***/ }),
/* 873 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(874);
/**
 * Exports parser
 *
 * @api public
 *
 */

module.exports.parser = __webpack_require__(71);

/***/ }),
/* 874 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Module dependencies.
 */
var transports = __webpack_require__(345);

var Emitter = __webpack_require__(70);

var debug = __webpack_require__(1)('engine.io-client:socket');

var index = __webpack_require__(349);

var parser = __webpack_require__(71);

var parseuri = __webpack_require__(341);

var parseqs = __webpack_require__(118);
/**
 * Module exports.
 */


module.exports = Socket;
/**
 * Socket constructor.
 *
 * @param {String|Object} uri or options
 * @param {Object} options
 * @api public
 */

function Socket(uri, opts) {
  if (!(this instanceof Socket)) return new Socket(uri, opts);
  opts = opts || {};

  if (uri && 'object' === typeof uri) {
    opts = uri;
    uri = null;
  }

  if (uri) {
    uri = parseuri(uri);
    opts.hostname = uri.host;
    opts.secure = uri.protocol === 'https' || uri.protocol === 'wss';
    opts.port = uri.port;
    if (uri.query) opts.query = uri.query;
  } else if (opts.host) {
    opts.hostname = parseuri(opts.host).host;
  }

  this.secure = null != opts.secure ? opts.secure : typeof location !== 'undefined' && 'https:' === location.protocol;

  if (opts.hostname && !opts.port) {
    // if no port is specified manually, use the protocol default
    opts.port = this.secure ? '443' : '80';
  }

  this.agent = opts.agent || false;
  this.hostname = opts.hostname || (typeof location !== 'undefined' ? location.hostname : 'localhost');
  this.port = opts.port || (typeof location !== 'undefined' && location.port ? location.port : this.secure ? 443 : 80);
  this.query = opts.query || {};
  if ('string' === typeof this.query) this.query = parseqs.decode(this.query);
  this.upgrade = false !== opts.upgrade;
  this.path = (opts.path || '/engine.io').replace(/\/$/, '') + '/';
  this.forceJSONP = !!opts.forceJSONP;
  this.jsonp = false !== opts.jsonp;
  this.forceBase64 = !!opts.forceBase64;
  this.enablesXDR = !!opts.enablesXDR;
  this.withCredentials = false !== opts.withCredentials;
  this.timestampParam = opts.timestampParam || 't';
  this.timestampRequests = opts.timestampRequests;
  this.transports = opts.transports || ['polling', 'websocket'];
  this.transportOptions = opts.transportOptions || {};
  this.readyState = '';
  this.writeBuffer = [];
  this.prevBufferLen = 0;
  this.policyPort = opts.policyPort || 843;
  this.rememberUpgrade = opts.rememberUpgrade || false;
  this.binaryType = null;
  this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;
  this.perMessageDeflate = false !== opts.perMessageDeflate ? opts.perMessageDeflate || {} : false;
  if (true === this.perMessageDeflate) this.perMessageDeflate = {};

  if (this.perMessageDeflate && null == this.perMessageDeflate.threshold) {
    this.perMessageDeflate.threshold = 1024;
  } // SSL options for Node.js client


  this.pfx = opts.pfx || null;
  this.key = opts.key || null;
  this.passphrase = opts.passphrase || null;
  this.cert = opts.cert || null;
  this.ca = opts.ca || null;
  this.ciphers = opts.ciphers || null;
  this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? true : opts.rejectUnauthorized;
  this.forceNode = !!opts.forceNode; // detect ReactNative environment

  this.isReactNative = typeof navigator !== 'undefined' && typeof navigator.product === 'string' && navigator.product.toLowerCase() === 'reactnative'; // other options for Node.js or ReactNative client

  if (typeof self === 'undefined' || this.isReactNative) {
    if (opts.extraHeaders && Object.keys(opts.extraHeaders).length > 0) {
      this.extraHeaders = opts.extraHeaders;
    }

    if (opts.localAddress) {
      this.localAddress = opts.localAddress;
    }
  } // set on handshake


  this.id = null;
  this.upgrades = null;
  this.pingInterval = null;
  this.pingTimeout = null; // set on heartbeat

  this.pingIntervalTimer = null;
  this.pingTimeoutTimer = null;
  this.open();
}

Socket.priorWebsocketSuccess = false;
/**
 * Mix in `Emitter`.
 */

Emitter(Socket.prototype);
/**
 * Protocol version.
 *
 * @api public
 */

Socket.protocol = parser.protocol; // this is an int

/**
 * Expose deps for legacy compatibility
 * and standalone browser access.
 */

Socket.Socket = Socket;
Socket.Transport = __webpack_require__(187);
Socket.transports = __webpack_require__(345);
Socket.parser = __webpack_require__(71);
/**
 * Creates transport of the given type.
 *
 * @param {String} transport name
 * @return {Transport}
 * @api private
 */

Socket.prototype.createTransport = function (name) {
  debug('creating transport "%s"', name);
  var query = clone(this.query); // append engine.io protocol identifier

  query.EIO = parser.protocol; // transport name

  query.transport = name; // per-transport options

  var options = this.transportOptions[name] || {}; // session id if we already have one

  if (this.id) query.sid = this.id;
  var transport = new transports[name]({
    query: query,
    socket: this,
    agent: options.agent || this.agent,
    hostname: options.hostname || this.hostname,
    port: options.port || this.port,
    secure: options.secure || this.secure,
    path: options.path || this.path,
    forceJSONP: options.forceJSONP || this.forceJSONP,
    jsonp: options.jsonp || this.jsonp,
    forceBase64: options.forceBase64 || this.forceBase64,
    enablesXDR: options.enablesXDR || this.enablesXDR,
    withCredentials: options.withCredentials || this.withCredentials,
    timestampRequests: options.timestampRequests || this.timestampRequests,
    timestampParam: options.timestampParam || this.timestampParam,
    policyPort: options.policyPort || this.policyPort,
    pfx: options.pfx || this.pfx,
    key: options.key || this.key,
    passphrase: options.passphrase || this.passphrase,
    cert: options.cert || this.cert,
    ca: options.ca || this.ca,
    ciphers: options.ciphers || this.ciphers,
    rejectUnauthorized: options.rejectUnauthorized || this.rejectUnauthorized,
    perMessageDeflate: options.perMessageDeflate || this.perMessageDeflate,
    extraHeaders: options.extraHeaders || this.extraHeaders,
    forceNode: options.forceNode || this.forceNode,
    localAddress: options.localAddress || this.localAddress,
    requestTimeout: options.requestTimeout || this.requestTimeout,
    protocols: options.protocols || void 0,
    isReactNative: this.isReactNative
  });
  return transport;
};

function clone(obj) {
  var o = {};

  for (var i in obj) {
    if (obj.hasOwnProperty(i)) {
      o[i] = obj[i];
    }
  }

  return o;
}
/**
 * Initializes transport to use and starts probe.
 *
 * @api private
 */


Socket.prototype.open = function () {
  var transport;

  if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') !== -1) {
    transport = 'websocket';
  } else if (0 === this.transports.length) {
    // Emit error on next tick so it can be listened to
    var self = this;
    setTimeout(function () {
      self.emit('error', 'No transports available');
    }, 0);
    return;
  } else {
    transport = this.transports[0];
  }

  this.readyState = 'opening'; // Retry with the next transport if the transport is disabled (jsonp: false)

  try {
    transport = this.createTransport(transport);
  } catch (e) {
    this.transports.shift();
    this.open();
    return;
  }

  transport.open();
  this.setTransport(transport);
};
/**
 * Sets the current transport. Disables the existing one (if any).
 *
 * @api private
 */


Socket.prototype.setTransport = function (transport) {
  debug('setting transport %s', transport.name);
  var self = this;

  if (this.transport) {
    debug('clearing existing transport %s', this.transport.name);
    this.transport.removeAllListeners();
  } // set up transport


  this.transport = transport; // set up transport listeners

  transport.on('drain', function () {
    self.onDrain();
  }).on('packet', function (packet) {
    self.onPacket(packet);
  }).on('error', function (e) {
    self.onError(e);
  }).on('close', function () {
    self.onClose('transport close');
  });
};
/**
 * Probes a transport.
 *
 * @param {String} transport name
 * @api private
 */


Socket.prototype.probe = function (name) {
  debug('probing transport "%s"', name);
  var transport = this.createTransport(name, {
    probe: 1
  });
  var failed = false;
  var self = this;
  Socket.priorWebsocketSuccess = false;

  function onTransportOpen() {
    if (self.onlyBinaryUpgrades) {
      var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;
      failed = failed || upgradeLosesBinary;
    }

    if (failed) return;
    debug('probe transport "%s" opened', name);
    transport.send([{
      type: 'ping',
      data: 'probe'
    }]);
    transport.once('packet', function (msg) {
      if (failed) return;

      if ('pong' === msg.type && 'probe' === msg.data) {
        debug('probe transport "%s" pong', name);
        self.upgrading = true;
        self.emit('upgrading', transport);
        if (!transport) return;
        Socket.priorWebsocketSuccess = 'websocket' === transport.name;
        debug('pausing current transport "%s"', self.transport.name);
        self.transport.pause(function () {
          if (failed) return;
          if ('closed' === self.readyState) return;
          debug('changing transport and sending upgrade packet');
          cleanup();
          self.setTransport(transport);
          transport.send([{
            type: 'upgrade'
          }]);
          self.emit('upgrade', transport);
          transport = null;
          self.upgrading = false;
          self.flush();
        });
      } else {
        debug('probe transport "%s" failed', name);
        var err = new Error('probe error');
        err.transport = transport.name;
        self.emit('upgradeError', err);
      }
    });
  }

  function freezeTransport() {
    if (failed) return; // Any callback called by transport should be ignored since now

    failed = true;
    cleanup();
    transport.close();
    transport = null;
  } // Handle any error that happens while probing


  function onerror(err) {
    var error = new Error('probe error: ' + err);
    error.transport = transport.name;
    freezeTransport();
    debug('probe transport "%s" failed because of error: %s', name, err);
    self.emit('upgradeError', error);
  }

  function onTransportClose() {
    onerror('transport closed');
  } // When the socket is closed while we're probing


  function onclose() {
    onerror('socket closed');
  } // When the socket is upgraded while we're probing


  function onupgrade(to) {
    if (transport && to.name !== transport.name) {
      debug('"%s" works - aborting "%s"', to.name, transport.name);
      freezeTransport();
    }
  } // Remove all listeners on the transport and on self


  function cleanup() {
    transport.removeListener('open', onTransportOpen);
    transport.removeListener('error', onerror);
    transport.removeListener('close', onTransportClose);
    self.removeListener('close', onclose);
    self.removeListener('upgrading', onupgrade);
  }

  transport.once('open', onTransportOpen);
  transport.once('error', onerror);
  transport.once('close', onTransportClose);
  this.once('close', onclose);
  this.once('upgrading', onupgrade);
  transport.open();
};
/**
 * Called when connection is deemed open.
 *
 * @api public
 */


Socket.prototype.onOpen = function () {
  debug('socket open');
  this.readyState = 'open';
  Socket.priorWebsocketSuccess = 'websocket' === this.transport.name;
  this.emit('open');
  this.flush(); // we check for `readyState` in case an `open`
  // listener already closed the socket

  if ('open' === this.readyState && this.upgrade && this.transport.pause) {
    debug('starting upgrade probes');

    for (var i = 0, l = this.upgrades.length; i < l; i++) {
      this.probe(this.upgrades[i]);
    }
  }
};
/**
 * Handles a packet.
 *
 * @api private
 */


Socket.prototype.onPacket = function (packet) {
  if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {
    debug('socket receive: type "%s", data "%s"', packet.type, packet.data);
    this.emit('packet', packet); // Socket is live - any packet counts

    this.emit('heartbeat');

    switch (packet.type) {
      case 'open':
        this.onHandshake(JSON.parse(packet.data));
        break;

      case 'pong':
        this.setPing();
        this.emit('pong');
        break;

      case 'error':
        var err = new Error('server error');
        err.code = packet.data;
        this.onError(err);
        break;

      case 'message':
        this.emit('data', packet.data);
        this.emit('message', packet.data);
        break;
    }
  } else {
    debug('packet received with socket readyState "%s"', this.readyState);
  }
};
/**
 * Called upon handshake completion.
 *
 * @param {Object} handshake obj
 * @api private
 */


Socket.prototype.onHandshake = function (data) {
  this.emit('handshake', data);
  this.id = data.sid;
  this.transport.query.sid = data.sid;
  this.upgrades = this.filterUpgrades(data.upgrades);
  this.pingInterval = data.pingInterval;
  this.pingTimeout = data.pingTimeout;
  this.onOpen(); // In case open handler closes socket

  if ('closed' === this.readyState) return;
  this.setPing(); // Prolong liveness of socket on heartbeat

  this.removeListener('heartbeat', this.onHeartbeat);
  this.on('heartbeat', this.onHeartbeat);
};
/**
 * Resets ping timeout.
 *
 * @api private
 */


Socket.prototype.onHeartbeat = function (timeout) {
  clearTimeout(this.pingTimeoutTimer);
  var self = this;
  self.pingTimeoutTimer = setTimeout(function () {
    if ('closed' === self.readyState) return;
    self.onClose('ping timeout');
  }, timeout || self.pingInterval + self.pingTimeout);
};
/**
 * Pings server every `this.pingInterval` and expects response
 * within `this.pingTimeout` or closes connection.
 *
 * @api private
 */


Socket.prototype.setPing = function () {
  var self = this;
  clearTimeout(self.pingIntervalTimer);
  self.pingIntervalTimer = setTimeout(function () {
    debug('writing ping packet - expecting pong within %sms', self.pingTimeout);
    self.ping();
    self.onHeartbeat(self.pingTimeout);
  }, self.pingInterval);
};
/**
* Sends a ping packet.
*
* @api private
*/


Socket.prototype.ping = function () {
  var self = this;
  this.sendPacket('ping', function () {
    self.emit('ping');
  });
};
/**
 * Called on `drain` event
 *
 * @api private
 */


Socket.prototype.onDrain = function () {
  this.writeBuffer.splice(0, this.prevBufferLen); // setting prevBufferLen = 0 is very important
  // for example, when upgrading, upgrade packet is sent over,
  // and a nonzero prevBufferLen could cause problems on `drain`

  this.prevBufferLen = 0;

  if (0 === this.writeBuffer.length) {
    this.emit('drain');
  } else {
    this.flush();
  }
};
/**
 * Flush write buffers.
 *
 * @api private
 */


Socket.prototype.flush = function () {
  if ('closed' !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {
    debug('flushing %d packets in socket', this.writeBuffer.length);
    this.transport.send(this.writeBuffer); // keep track of current length of writeBuffer
    // splice writeBuffer and callbackBuffer on `drain`

    this.prevBufferLen = this.writeBuffer.length;
    this.emit('flush');
  }
};
/**
 * Sends a message.
 *
 * @param {String} message.
 * @param {Function} callback function.
 * @param {Object} options.
 * @return {Socket} for chaining.
 * @api public
 */


Socket.prototype.write = Socket.prototype.send = function (msg, options, fn) {
  this.sendPacket('message', msg, options, fn);
  return this;
};
/**
 * Sends a packet.
 *
 * @param {String} packet type.
 * @param {String} data.
 * @param {Object} options.
 * @param {Function} callback function.
 * @api private
 */


Socket.prototype.sendPacket = function (type, data, options, fn) {
  if ('function' === typeof data) {
    fn = data;
    data = undefined;
  }

  if ('function' === typeof options) {
    fn = options;
    options = null;
  }

  if ('closing' === this.readyState || 'closed' === this.readyState) {
    return;
  }

  options = options || {};
  options.compress = false !== options.compress;
  var packet = {
    type: type,
    data: data,
    options: options
  };
  this.emit('packetCreate', packet);
  this.writeBuffer.push(packet);
  if (fn) this.once('flush', fn);
  this.flush();
};
/**
 * Closes the connection.
 *
 * @api private
 */


Socket.prototype.close = function () {
  if ('opening' === this.readyState || 'open' === this.readyState) {
    this.readyState = 'closing';
    var self = this;

    if (this.writeBuffer.length) {
      this.once('drain', function () {
        if (this.upgrading) {
          waitForUpgrade();
        } else {
          close();
        }
      });
    } else if (this.upgrading) {
      waitForUpgrade();
    } else {
      close();
    }
  }

  function close() {
    self.onClose('forced close');
    debug('socket closing - telling transport to close');
    self.transport.close();
  }

  function cleanupAndClose() {
    self.removeListener('upgrade', cleanupAndClose);
    self.removeListener('upgradeError', cleanupAndClose);
    close();
  }

  function waitForUpgrade() {
    // wait for upgrade to finish since we can't send packets while pausing a transport
    self.once('upgrade', cleanupAndClose);
    self.once('upgradeError', cleanupAndClose);
  }

  return this;
};
/**
 * Called upon transport error
 *
 * @api private
 */


Socket.prototype.onError = function (err) {
  debug('socket error %j', err);
  Socket.priorWebsocketSuccess = false;
  this.emit('error', err);
  this.onClose('transport error', err);
};
/**
 * Called upon transport close.
 *
 * @api private
 */


Socket.prototype.onClose = function (reason, desc) {
  if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {
    debug('socket close with reason: "%s"', reason);
    var self = this; // clear timers

    clearTimeout(this.pingIntervalTimer);
    clearTimeout(this.pingTimeoutTimer); // stop event from firing again for transport

    this.transport.removeAllListeners('close'); // ensure transport won't stay open

    this.transport.close(); // ignore further transport communication

    this.transport.removeAllListeners(); // set ready state

    this.readyState = 'closed'; // clear session id

    this.id = null; // emit close event

    this.emit('close', reason, desc); // clean buffers after, so users can still
    // grab the buffers on `close` event

    self.writeBuffer = [];
    self.prevBufferLen = 0;
  }
};
/**
 * Filters upgrades, returning only those matching client transports.
 *
 * @param {Array} server upgrades
 * @api private
 *
 */


Socket.prototype.filterUpgrades = function (upgrades) {
  var filteredUpgrades = [];

  for (var i = 0, j = upgrades.length; i < j; i++) {
    if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);
  }

  return filteredUpgrades;
};

/***/ }),
/* 875 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Module exports.
 *
 * Logic borrowed from Modernizr:
 *
 *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js
 */
try {
  module.exports = typeof XMLHttpRequest !== 'undefined' && 'withCredentials' in new XMLHttpRequest();
} catch (err) {
  // if XMLHttp support is disabled in IE then it will throw
  // when trying to create
  module.exports = false;
}

/***/ }),
/* 876 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* global attachEvent */

/**
 * Module requirements.
 */
var XMLHttpRequest = __webpack_require__(186);

var Polling = __webpack_require__(346);

var Emitter = __webpack_require__(70);

var inherit = __webpack_require__(119);

var debug = __webpack_require__(1)('engine.io-client:polling-xhr');
/**
 * Module exports.
 */


module.exports = XHR;
module.exports.Request = Request;
/**
 * Empty function
 */

function empty() {}
/**
 * XHR Polling constructor.
 *
 * @param {Object} opts
 * @api public
 */


function XHR(opts) {
  Polling.call(this, opts);
  this.requestTimeout = opts.requestTimeout;
  this.extraHeaders = opts.extraHeaders;

  if (typeof location !== 'undefined') {
    var isSSL = 'https:' === location.protocol;
    var port = location.port; // some user agents have empty `location.port`

    if (!port) {
      port = isSSL ? 443 : 80;
    }

    this.xd = typeof location !== 'undefined' && opts.hostname !== location.hostname || port !== opts.port;
    this.xs = opts.secure !== isSSL;
  }
}
/**
 * Inherits from Polling.
 */


inherit(XHR, Polling);
/**
 * XHR supports binary
 */

XHR.prototype.supportsBinary = true;
/**
 * Creates a request.
 *
 * @param {String} method
 * @api private
 */

XHR.prototype.request = function (opts) {
  opts = opts || {};
  opts.uri = this.uri();
  opts.xd = this.xd;
  opts.xs = this.xs;
  opts.agent = this.agent || false;
  opts.supportsBinary = this.supportsBinary;
  opts.enablesXDR = this.enablesXDR;
  opts.withCredentials = this.withCredentials; // SSL options for Node.js client

  opts.pfx = this.pfx;
  opts.key = this.key;
  opts.passphrase = this.passphrase;
  opts.cert = this.cert;
  opts.ca = this.ca;
  opts.ciphers = this.ciphers;
  opts.rejectUnauthorized = this.rejectUnauthorized;
  opts.requestTimeout = this.requestTimeout; // other options for Node.js client

  opts.extraHeaders = this.extraHeaders;
  return new Request(opts);
};
/**
 * Sends data.
 *
 * @param {String} data to send.
 * @param {Function} called upon flush.
 * @api private
 */


XHR.prototype.doWrite = function (data, fn) {
  var isBinary = typeof data !== 'string' && data !== undefined;
  var req = this.request({
    method: 'POST',
    data: data,
    isBinary: isBinary
  });
  var self = this;
  req.on('success', fn);
  req.on('error', function (err) {
    self.onError('xhr post error', err);
  });
  this.sendXhr = req;
};
/**
 * Starts a poll cycle.
 *
 * @api private
 */


XHR.prototype.doPoll = function () {
  debug('xhr poll');
  var req = this.request();
  var self = this;
  req.on('data', function (data) {
    self.onData(data);
  });
  req.on('error', function (err) {
    self.onError('xhr poll error', err);
  });
  this.pollXhr = req;
};
/**
 * Request constructor
 *
 * @param {Object} options
 * @api public
 */


function Request(opts) {
  this.method = opts.method || 'GET';
  this.uri = opts.uri;
  this.xd = !!opts.xd;
  this.xs = !!opts.xs;
  this.async = false !== opts.async;
  this.data = undefined !== opts.data ? opts.data : null;
  this.agent = opts.agent;
  this.isBinary = opts.isBinary;
  this.supportsBinary = opts.supportsBinary;
  this.enablesXDR = opts.enablesXDR;
  this.withCredentials = opts.withCredentials;
  this.requestTimeout = opts.requestTimeout; // SSL options for Node.js client

  this.pfx = opts.pfx;
  this.key = opts.key;
  this.passphrase = opts.passphrase;
  this.cert = opts.cert;
  this.ca = opts.ca;
  this.ciphers = opts.ciphers;
  this.rejectUnauthorized = opts.rejectUnauthorized; // other options for Node.js client

  this.extraHeaders = opts.extraHeaders;
  this.create();
}
/**
 * Mix in `Emitter`.
 */


Emitter(Request.prototype);
/**
 * Creates the XHR object and sends the request.
 *
 * @api private
 */

Request.prototype.create = function () {
  var opts = {
    agent: this.agent,
    xdomain: this.xd,
    xscheme: this.xs,
    enablesXDR: this.enablesXDR
  }; // SSL options for Node.js client

  opts.pfx = this.pfx;
  opts.key = this.key;
  opts.passphrase = this.passphrase;
  opts.cert = this.cert;
  opts.ca = this.ca;
  opts.ciphers = this.ciphers;
  opts.rejectUnauthorized = this.rejectUnauthorized;
  var xhr = this.xhr = new XMLHttpRequest(opts);
  var self = this;

  try {
    debug('xhr open %s: %s', this.method, this.uri);
    xhr.open(this.method, this.uri, this.async);

    try {
      if (this.extraHeaders) {
        xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);

        for (var i in this.extraHeaders) {
          if (this.extraHeaders.hasOwnProperty(i)) {
            xhr.setRequestHeader(i, this.extraHeaders[i]);
          }
        }
      }
    } catch (e) {}

    if ('POST' === this.method) {
      try {
        if (this.isBinary) {
          xhr.setRequestHeader('Content-type', 'application/octet-stream');
        } else {
          xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');
        }
      } catch (e) {}
    }

    try {
      xhr.setRequestHeader('Accept', '*/*');
    } catch (e) {} // ie6 check


    if ('withCredentials' in xhr) {
      xhr.withCredentials = this.withCredentials;
    }

    if (this.requestTimeout) {
      xhr.timeout = this.requestTimeout;
    }

    if (this.hasXDR()) {
      xhr.onload = function () {
        self.onLoad();
      };

      xhr.onerror = function () {
        self.onError(xhr.responseText);
      };
    } else {
      xhr.onreadystatechange = function () {
        if (xhr.readyState === 2) {
          try {
            var contentType = xhr.getResponseHeader('Content-Type');

            if (self.supportsBinary && contentType === 'application/octet-stream' || contentType === 'application/octet-stream; charset=UTF-8') {
              xhr.responseType = 'arraybuffer';
            }
          } catch (e) {}
        }

        if (4 !== xhr.readyState) return;

        if (200 === xhr.status || 1223 === xhr.status) {
          self.onLoad();
        } else {
          // make sure the `error` event handler that's user-set
          // does not throw in the same tick and gets caught here
          setTimeout(function () {
            self.onError(typeof xhr.status === 'number' ? xhr.status : 0);
          }, 0);
        }
      };
    }

    debug('xhr data %s', this.data);
    xhr.send(this.data);
  } catch (e) {
    // Need to defer since .create() is called directly fhrom the constructor
    // and thus the 'error' event can only be only bound *after* this exception
    // occurs.  Therefore, also, we cannot throw here at all.
    setTimeout(function () {
      self.onError(e);
    }, 0);
    return;
  }

  if (typeof document !== 'undefined') {
    this.index = Request.requestsCount++;
    Request.requests[this.index] = this;
  }
};
/**
 * Called upon successful response.
 *
 * @api private
 */


Request.prototype.onSuccess = function () {
  this.emit('success');
  this.cleanup();
};
/**
 * Called if we have data.
 *
 * @api private
 */


Request.prototype.onData = function (data) {
  this.emit('data', data);
  this.onSuccess();
};
/**
 * Called upon error.
 *
 * @api private
 */


Request.prototype.onError = function (err) {
  this.emit('error', err);
  this.cleanup(true);
};
/**
 * Cleans up house.
 *
 * @api private
 */


Request.prototype.cleanup = function (fromError) {
  if ('undefined' === typeof this.xhr || null === this.xhr) {
    return;
  } // xmlhttprequest


  if (this.hasXDR()) {
    this.xhr.onload = this.xhr.onerror = empty;
  } else {
    this.xhr.onreadystatechange = empty;
  }

  if (fromError) {
    try {
      this.xhr.abort();
    } catch (e) {}
  }

  if (typeof document !== 'undefined') {
    delete Request.requests[this.index];
  }

  this.xhr = null;
};
/**
 * Called upon load.
 *
 * @api private
 */


Request.prototype.onLoad = function () {
  var data;

  try {
    var contentType;

    try {
      contentType = this.xhr.getResponseHeader('Content-Type');
    } catch (e) {}

    if (contentType === 'application/octet-stream' || contentType === 'application/octet-stream; charset=UTF-8') {
      data = this.xhr.response || this.xhr.responseText;
    } else {
      data = this.xhr.responseText;
    }
  } catch (e) {
    this.onError(e);
  }

  if (null != data) {
    this.onData(data);
  }
};
/**
 * Check if it has XDomainRequest.
 *
 * @api private
 */


Request.prototype.hasXDR = function () {
  return typeof XDomainRequest !== 'undefined' && !this.xs && this.enablesXDR;
};
/**
 * Aborts the request.
 *
 * @api public
 */


Request.prototype.abort = function () {
  this.cleanup();
};
/**
 * Aborts pending requests when unloading the window. This is needed to prevent
 * memory leaks (e.g. when using IE) and to ensure that no spurious error is
 * emitted.
 */


Request.requestsCount = 0;
Request.requests = {};

if (typeof document !== 'undefined') {
  if (typeof attachEvent === 'function') {
    attachEvent('onunload', unloadHandler);
  } else if (typeof addEventListener === 'function') {
    var terminationEvent = 'onpagehide' in self ? 'pagehide' : 'unload';
    addEventListener(terminationEvent, unloadHandler, false);
  }
}

function unloadHandler() {
  for (var i in Request.requests) {
    if (Request.requests.hasOwnProperty(i)) {
      Request.requests[i].abort();
    }
  }
}

/***/ }),
/* 877 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Gets the keys for an object.
 *
 * @return {Array} keys
 * @api private
 */
module.exports = Object.keys || function keys(obj) {
  var arr = [];
  var has = Object.prototype.hasOwnProperty;

  for (var i in obj) {
    if (has.call(obj, i)) {
      arr.push(i);
    }
  }

  return arr;
};

/***/ }),
/* 878 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

/***/ }),
/* 879 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * An abstraction for slicing an arraybuffer even when
 * ArrayBuffer.prototype.slice is not supported
 *
 * @api public
 */
module.exports = function (arraybuffer, start, end) {
  var bytes = arraybuffer.byteLength;
  start = start || 0;
  end = end || bytes;

  if (arraybuffer.slice) {
    return arraybuffer.slice(start, end);
  }

  if (start < 0) {
    start += bytes;
  }

  if (end < 0) {
    end += bytes;
  }

  if (end > bytes) {
    end = bytes;
  }

  if (start >= bytes || start >= end || bytes === 0) {
    return new ArrayBuffer(0);
  }

  var abv = new Uint8Array(arraybuffer);
  var result = new Uint8Array(end - start);

  for (var i = start, ii = 0; i < end; i++, ii++) {
    result[ii] = abv[i];
  }

  return result.buffer;
};

/***/ }),
/* 880 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = after;

function after(count, callback, err_cb) {
  var bail = false;
  err_cb = err_cb || noop;
  proxy.count = count;
  return count === 0 ? callback() : proxy;

  function proxy(err, result) {
    if (proxy.count <= 0) {
      throw new Error('after called too many times');
    }

    --proxy.count; // after first error, rest are passed to err_cb

    if (err) {
      bail = true;
      callback(err); // future error callbacks will go to error handler

      callback = err_cb;
    } else if (proxy.count === 0 && !bail) {
      callback(null, result);
    }
  }
}

function noop() {}

/***/ }),
/* 881 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*! https://mths.be/utf8js v2.1.2 by @mathias */
var stringFromCharCode = String.fromCharCode; // Taken from https://mths.be/punycode

function ucs2decode(string) {
  var output = [];
  var counter = 0;
  var length = string.length;
  var value;
  var extra;

  while (counter < length) {
    value = string.charCodeAt(counter++);

    if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
      // high surrogate, and there is a next character
      extra = string.charCodeAt(counter++);

      if ((extra & 0xFC00) == 0xDC00) {
        // low surrogate
        output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
      } else {
        // unmatched surrogate; only append this code unit, in case the next
        // code unit is the high surrogate of a surrogate pair
        output.push(value);
        counter--;
      }
    } else {
      output.push(value);
    }
  }

  return output;
} // Taken from https://mths.be/punycode


function ucs2encode(array) {
  var length = array.length;
  var index = -1;
  var value;
  var output = '';

  while (++index < length) {
    value = array[index];

    if (value > 0xFFFF) {
      value -= 0x10000;
      output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
      value = 0xDC00 | value & 0x3FF;
    }

    output += stringFromCharCode(value);
  }

  return output;
}

function checkScalarValue(codePoint, strict) {
  if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {
    if (strict) {
      throw Error('Lone surrogate U+' + codePoint.toString(16).toUpperCase() + ' is not a scalar value');
    }

    return false;
  }

  return true;
}
/*--------------------------------------------------------------------------*/


function createByte(codePoint, shift) {
  return stringFromCharCode(codePoint >> shift & 0x3F | 0x80);
}

function encodeCodePoint(codePoint, strict) {
  if ((codePoint & 0xFFFFFF80) == 0) {
    // 1-byte sequence
    return stringFromCharCode(codePoint);
  }

  var symbol = '';

  if ((codePoint & 0xFFFFF800) == 0) {
    // 2-byte sequence
    symbol = stringFromCharCode(codePoint >> 6 & 0x1F | 0xC0);
  } else if ((codePoint & 0xFFFF0000) == 0) {
    // 3-byte sequence
    if (!checkScalarValue(codePoint, strict)) {
      codePoint = 0xFFFD;
    }

    symbol = stringFromCharCode(codePoint >> 12 & 0x0F | 0xE0);
    symbol += createByte(codePoint, 6);
  } else if ((codePoint & 0xFFE00000) == 0) {
    // 4-byte sequence
    symbol = stringFromCharCode(codePoint >> 18 & 0x07 | 0xF0);
    symbol += createByte(codePoint, 12);
    symbol += createByte(codePoint, 6);
  }

  symbol += stringFromCharCode(codePoint & 0x3F | 0x80);
  return symbol;
}

function utf8encode(string, opts) {
  opts = opts || {};
  var strict = false !== opts.strict;
  var codePoints = ucs2decode(string);
  var length = codePoints.length;
  var index = -1;
  var codePoint;
  var byteString = '';

  while (++index < length) {
    codePoint = codePoints[index];
    byteString += encodeCodePoint(codePoint, strict);
  }

  return byteString;
}
/*--------------------------------------------------------------------------*/


function readContinuationByte() {
  if (byteIndex >= byteCount) {
    throw Error('Invalid byte index');
  }

  var continuationByte = byteArray[byteIndex] & 0xFF;
  byteIndex++;

  if ((continuationByte & 0xC0) == 0x80) {
    return continuationByte & 0x3F;
  } // If we end up here, it’s not a continuation byte


  throw Error('Invalid continuation byte');
}

function decodeSymbol(strict) {
  var byte1;
  var byte2;
  var byte3;
  var byte4;
  var codePoint;

  if (byteIndex > byteCount) {
    throw Error('Invalid byte index');
  }

  if (byteIndex == byteCount) {
    return false;
  } // Read first byte


  byte1 = byteArray[byteIndex] & 0xFF;
  byteIndex++; // 1-byte sequence (no continuation bytes)

  if ((byte1 & 0x80) == 0) {
    return byte1;
  } // 2-byte sequence


  if ((byte1 & 0xE0) == 0xC0) {
    byte2 = readContinuationByte();
    codePoint = (byte1 & 0x1F) << 6 | byte2;

    if (codePoint >= 0x80) {
      return codePoint;
    } else {
      throw Error('Invalid continuation byte');
    }
  } // 3-byte sequence (may include unpaired surrogates)


  if ((byte1 & 0xF0) == 0xE0) {
    byte2 = readContinuationByte();
    byte3 = readContinuationByte();
    codePoint = (byte1 & 0x0F) << 12 | byte2 << 6 | byte3;

    if (codePoint >= 0x0800) {
      return checkScalarValue(codePoint, strict) ? codePoint : 0xFFFD;
    } else {
      throw Error('Invalid continuation byte');
    }
  } // 4-byte sequence


  if ((byte1 & 0xF8) == 0xF0) {
    byte2 = readContinuationByte();
    byte3 = readContinuationByte();
    byte4 = readContinuationByte();
    codePoint = (byte1 & 0x07) << 0x12 | byte2 << 0x0C | byte3 << 0x06 | byte4;

    if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
      return codePoint;
    }
  }

  throw Error('Invalid UTF-8 detected');
}

var byteArray;
var byteCount;
var byteIndex;

function utf8decode(byteString, opts) {
  opts = opts || {};
  var strict = false !== opts.strict;
  byteArray = ucs2decode(byteString);
  byteCount = byteArray.length;
  byteIndex = 0;
  var codePoints = [];
  var tmp;

  while ((tmp = decodeSymbol(strict)) !== false) {
    codePoints.push(tmp);
  }

  return ucs2encode(codePoints);
}

module.exports = {
  version: '2.1.2',
  encode: utf8encode,
  decode: utf8decode
};

/***/ }),
/* 882 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
 * base64-arraybuffer
 * https://github.com/niklasvh/base64-arraybuffer
 *
 * Copyright (c) 2012 Niklas von Hertzen
 * Licensed under the MIT license.
 */
(function () {
  "use strict";

  var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"; // Use a lookup table to find the index.

  var lookup = new Uint8Array(256);

  for (var i = 0; i < chars.length; i++) {
    lookup[chars.charCodeAt(i)] = i;
  }

  exports.encode = function (arraybuffer) {
    var bytes = new Uint8Array(arraybuffer),
        i,
        len = bytes.length,
        base64 = "";

    for (i = 0; i < len; i += 3) {
      base64 += chars[bytes[i] >> 2];
      base64 += chars[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];
      base64 += chars[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];
      base64 += chars[bytes[i + 2] & 63];
    }

    if (len % 3 === 2) {
      base64 = base64.substring(0, base64.length - 1) + "=";
    } else if (len % 3 === 1) {
      base64 = base64.substring(0, base64.length - 2) + "==";
    }

    return base64;
  };

  exports.decode = function (base64) {
    var bufferLength = base64.length * 0.75,
        len = base64.length,
        i,
        p = 0,
        encoded1,
        encoded2,
        encoded3,
        encoded4;

    if (base64[base64.length - 1] === "=") {
      bufferLength--;

      if (base64[base64.length - 2] === "=") {
        bufferLength--;
      }
    }

    var arraybuffer = new ArrayBuffer(bufferLength),
        bytes = new Uint8Array(arraybuffer);

    for (i = 0; i < len; i += 4) {
      encoded1 = lookup[base64.charCodeAt(i)];
      encoded2 = lookup[base64.charCodeAt(i + 1)];
      encoded3 = lookup[base64.charCodeAt(i + 2)];
      encoded4 = lookup[base64.charCodeAt(i + 3)];
      bytes[p++] = encoded1 << 2 | encoded2 >> 4;
      bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;
      bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;
    }

    return arraybuffer;
  };
})();

/***/ }),
/* 883 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Create a blob builder even when vendor prefixes exist
 */
var BlobBuilder = typeof BlobBuilder !== 'undefined' ? BlobBuilder : typeof WebKitBlobBuilder !== 'undefined' ? WebKitBlobBuilder : typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder : typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : false;
/**
 * Check if Blob constructor is supported
 */

var blobSupported = function () {
  try {
    var a = new Blob(['hi']);
    return a.size === 2;
  } catch (e) {
    return false;
  }
}();
/**
 * Check if Blob constructor supports ArrayBufferViews
 * Fails in Safari 6, so we need to map to ArrayBuffers there.
 */


var blobSupportsArrayBufferView = blobSupported && function () {
  try {
    var b = new Blob([new Uint8Array([1, 2])]);
    return b.size === 2;
  } catch (e) {
    return false;
  }
}();
/**
 * Check if BlobBuilder is supported
 */


var blobBuilderSupported = BlobBuilder && BlobBuilder.prototype.append && BlobBuilder.prototype.getBlob;
/**
 * Helper function that maps ArrayBufferViews to ArrayBuffers
 * Used by BlobBuilder constructor and old browsers that didn't
 * support it in the Blob constructor.
 */

function mapArrayBufferViews(ary) {
  return ary.map(function (chunk) {
    if (chunk.buffer instanceof ArrayBuffer) {
      var buf = chunk.buffer; // if this is a subarray, make a copy so we only
      // include the subarray region from the underlying buffer

      if (chunk.byteLength !== buf.byteLength) {
        var copy = new Uint8Array(chunk.byteLength);
        copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));
        buf = copy.buffer;
      }

      return buf;
    }

    return chunk;
  });
}

function BlobBuilderConstructor(ary, options) {
  options = options || {};
  var bb = new BlobBuilder();
  mapArrayBufferViews(ary).forEach(function (part) {
    bb.append(part);
  });
  return options.type ? bb.getBlob(options.type) : bb.getBlob();
}

;

function BlobConstructor(ary, options) {
  return new Blob(mapArrayBufferViews(ary), options || {});
}

;

if (typeof Blob !== 'undefined') {
  BlobBuilderConstructor.prototype = Blob.prototype;
  BlobConstructor.prototype = Blob.prototype;
}

module.exports = function () {
  if (blobSupported) {
    return blobSupportsArrayBufferView ? Blob : BlobConstructor;
  } else if (blobBuilderSupported) {
    return BlobBuilderConstructor;
  } else {
    return undefined;
  }
}();

/***/ }),
/* 884 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

/**
 * Module requirements.
 */
var Polling = __webpack_require__(346);

var inherit = __webpack_require__(119);
/**
 * Module exports.
 */


module.exports = JSONPPolling;
/**
 * Cached regular expressions.
 */

var rNewline = /\n/g;
var rEscapedNewline = /\\n/g;
/**
 * Global JSONP callbacks.
 */

var callbacks;
/**
 * Noop.
 */

function empty() {}
/**
 * Until https://github.com/tc39/proposal-global is shipped.
 */


function glob() {
  return typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : {};
}
/**
 * JSONP Polling constructor.
 *
 * @param {Object} opts.
 * @api public
 */


function JSONPPolling(opts) {
  Polling.call(this, opts);
  this.query = this.query || {}; // define global callbacks array if not present
  // we do this here (lazily) to avoid unneeded global pollution

  if (!callbacks) {
    // we need to consider multiple engines in the same page
    var global = glob();
    callbacks = global.___eio = global.___eio || [];
  } // callback identifier


  this.index = callbacks.length; // add callback to jsonp global

  var self = this;
  callbacks.push(function (msg) {
    self.onData(msg);
  }); // append to query string

  this.query.j = this.index; // prevent spurious errors from being emitted when the window is unloaded

  if (typeof addEventListener === 'function') {
    addEventListener('beforeunload', function () {
      if (self.script) self.script.onerror = empty;
    }, false);
  }
}
/**
 * Inherits from Polling.
 */


inherit(JSONPPolling, Polling);
/*
 * JSONP only supports binary as base64 encoded strings
 */

JSONPPolling.prototype.supportsBinary = false;
/**
 * Closes the socket.
 *
 * @api private
 */

JSONPPolling.prototype.doClose = function () {
  if (this.script) {
    this.script.parentNode.removeChild(this.script);
    this.script = null;
  }

  if (this.form) {
    this.form.parentNode.removeChild(this.form);
    this.form = null;
    this.iframe = null;
  }

  Polling.prototype.doClose.call(this);
};
/**
 * Starts a poll cycle.
 *
 * @api private
 */


JSONPPolling.prototype.doPoll = function () {
  var self = this;
  var script = document.createElement('script');

  if (this.script) {
    this.script.parentNode.removeChild(this.script);
    this.script = null;
  }

  script.async = true;
  script.src = this.uri();

  script.onerror = function (e) {
    self.onError('jsonp poll error', e);
  };

  var insertAt = document.getElementsByTagName('script')[0];

  if (insertAt) {
    insertAt.parentNode.insertBefore(script, insertAt);
  } else {
    (document.head || document.body).appendChild(script);
  }

  this.script = script;
  var isUAgecko = 'undefined' !== typeof navigator && /gecko/i.test(navigator.userAgent);

  if (isUAgecko) {
    setTimeout(function () {
      var iframe = document.createElement('iframe');
      document.body.appendChild(iframe);
      document.body.removeChild(iframe);
    }, 100);
  }
};
/**
 * Writes with a hidden iframe.
 *
 * @param {String} data to send
 * @param {Function} called upon flush.
 * @api private
 */


JSONPPolling.prototype.doWrite = function (data, fn) {
  var self = this;

  if (!this.form) {
    var form = document.createElement('form');
    var area = document.createElement('textarea');
    var id = this.iframeId = 'eio_iframe_' + this.index;
    var iframe;
    form.className = 'socketio';
    form.style.position = 'absolute';
    form.style.top = '-1000px';
    form.style.left = '-1000px';
    form.target = id;
    form.method = 'POST';
    form.setAttribute('accept-charset', 'utf-8');
    area.name = 'd';
    form.appendChild(area);
    document.body.appendChild(form);
    this.form = form;
    this.area = area;
  }

  this.form.action = this.uri();

  function complete() {
    initIframe();
    fn();
  }

  function initIframe() {
    if (self.iframe) {
      try {
        self.form.removeChild(self.iframe);
      } catch (e) {
        self.onError('jsonp polling iframe removal error', e);
      }
    }

    try {
      // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
      var html = '<iframe src="javascript:0" name="' + self.iframeId + '">';
      iframe = document.createElement(html);
    } catch (e) {
      iframe = document.createElement('iframe');
      iframe.name = self.iframeId;
      iframe.src = 'javascript:0';
    }

    iframe.id = self.iframeId;
    self.form.appendChild(iframe);
    self.iframe = iframe;
  }

  initIframe(); // escape \n to prevent it from being converted into \r\n by some UAs
  // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side

  data = data.replace(rEscapedNewline, '\\\n');
  this.area.value = data.replace(rNewline, '\\n');

  try {
    this.form.submit();
  } catch (e) {}

  if (this.iframe.attachEvent) {
    this.iframe.onreadystatechange = function () {
      if (self.iframe.readyState === 'complete') {
        complete();
      }
    };
  } else {
    this.iframe.onload = complete;
  }
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(8)))

/***/ }),
/* 885 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

/**
 * Module dependencies.
 */
var Transport = __webpack_require__(187);

var parser = __webpack_require__(71);

var parseqs = __webpack_require__(118);

var inherit = __webpack_require__(119);

var yeast = __webpack_require__(348);

var debug = __webpack_require__(1)('engine.io-client:websocket');

var BrowserWebSocket, NodeWebSocket;

if (typeof WebSocket !== 'undefined') {
  BrowserWebSocket = WebSocket;
} else if (typeof self !== 'undefined') {
  BrowserWebSocket = self.WebSocket || self.MozWebSocket;
}

if (typeof window === 'undefined') {
  try {
    NodeWebSocket = __webpack_require__(886);
  } catch (e) {}
}
/**
 * Get either the `WebSocket` or `MozWebSocket` globals
 * in the browser or try to resolve WebSocket-compatible
 * interface exposed by `ws` for Node-like environment.
 */


var WebSocketImpl = BrowserWebSocket || NodeWebSocket;
/**
 * Module exports.
 */

module.exports = WS;
/**
 * WebSocket transport constructor.
 *
 * @api {Object} connection options
 * @api public
 */

function WS(opts) {
  var forceBase64 = opts && opts.forceBase64;

  if (forceBase64) {
    this.supportsBinary = false;
  }

  this.perMessageDeflate = opts.perMessageDeflate;
  this.usingBrowserWebSocket = BrowserWebSocket && !opts.forceNode;
  this.protocols = opts.protocols;

  if (!this.usingBrowserWebSocket) {
    WebSocketImpl = NodeWebSocket;
  }

  Transport.call(this, opts);
}
/**
 * Inherits from Transport.
 */


inherit(WS, Transport);
/**
 * Transport name.
 *
 * @api public
 */

WS.prototype.name = 'websocket';
/*
 * WebSockets support binary
 */

WS.prototype.supportsBinary = true;
/**
 * Opens socket.
 *
 * @api private
 */

WS.prototype.doOpen = function () {
  if (!this.check()) {
    // let probe timeout
    return;
  }

  var uri = this.uri();
  var protocols = this.protocols;
  var opts = {
    agent: this.agent,
    perMessageDeflate: this.perMessageDeflate
  }; // SSL options for Node.js client

  opts.pfx = this.pfx;
  opts.key = this.key;
  opts.passphrase = this.passphrase;
  opts.cert = this.cert;
  opts.ca = this.ca;
  opts.ciphers = this.ciphers;
  opts.rejectUnauthorized = this.rejectUnauthorized;

  if (this.extraHeaders) {
    opts.headers = this.extraHeaders;
  }

  if (this.localAddress) {
    opts.localAddress = this.localAddress;
  }

  try {
    this.ws = this.usingBrowserWebSocket && !this.isReactNative ? protocols ? new WebSocketImpl(uri, protocols) : new WebSocketImpl(uri) : new WebSocketImpl(uri, protocols, opts);
  } catch (err) {
    return this.emit('error', err);
  }

  if (this.ws.binaryType === undefined) {
    this.supportsBinary = false;
  }

  if (this.ws.supports && this.ws.supports.binary) {
    this.supportsBinary = true;
    this.ws.binaryType = 'nodebuffer';
  } else {
    this.ws.binaryType = 'arraybuffer';
  }

  this.addEventListeners();
};
/**
 * Adds event listeners to the socket
 *
 * @api private
 */


WS.prototype.addEventListeners = function () {
  var self = this;

  this.ws.onopen = function () {
    self.onOpen();
  };

  this.ws.onclose = function () {
    self.onClose();
  };

  this.ws.onmessage = function (ev) {
    self.onData(ev.data);
  };

  this.ws.onerror = function (e) {
    self.onError('websocket error', e);
  };
};
/**
 * Writes data to socket.
 *
 * @param {Array} array of packets.
 * @api private
 */


WS.prototype.write = function (packets) {
  var self = this;
  this.writable = false; // encodePacket efficient as it uses WS framing
  // no need for encodePayload

  var total = packets.length;

  for (var i = 0, l = total; i < l; i++) {
    (function (packet) {
      parser.encodePacket(packet, self.supportsBinary, function (data) {
        if (!self.usingBrowserWebSocket) {
          // always create a new object (GH-437)
          var opts = {};

          if (packet.options) {
            opts.compress = packet.options.compress;
          }

          if (self.perMessageDeflate) {
            var len = 'string' === typeof data ? Buffer.byteLength(data) : data.length;

            if (len < self.perMessageDeflate.threshold) {
              opts.compress = false;
            }
          }
        } // Sometimes the websocket has already been closed but the browser didn't
        // have a chance of informing us about it yet, in that case send will
        // throw an error


        try {
          if (self.usingBrowserWebSocket) {
            // TypeError is thrown when passing the second argument on Safari
            self.ws.send(data);
          } else {
            self.ws.send(data, opts);
          }
        } catch (e) {
          debug('websocket closed before onclose event');
        }

        --total || done();
      });
    })(packets[i]);
  }

  function done() {
    self.emit('flush'); // fake drain
    // defer to next tick to allow Socket to clear writeBuffer

    setTimeout(function () {
      self.writable = true;
      self.emit('drain');
    }, 0);
  }
};
/**
 * Called upon close
 *
 * @api private
 */


WS.prototype.onClose = function () {
  Transport.prototype.onClose.call(this);
};
/**
 * Closes socket.
 *
 * @api private
 */


WS.prototype.doClose = function () {
  if (typeof this.ws !== 'undefined') {
    this.ws.close();
  }
};
/**
 * Generates uri for connection.
 *
 * @api private
 */


WS.prototype.uri = function () {
  var query = this.query || {};
  var schema = this.secure ? 'wss' : 'ws';
  var port = ''; // avoid port if default for schema

  if (this.port && ('wss' === schema && Number(this.port) !== 443 || 'ws' === schema && Number(this.port) !== 80)) {
    port = ':' + this.port;
  } // append timestamp to URI


  if (this.timestampRequests) {
    query[this.timestampParam] = yeast();
  } // communicate binary support capabilities


  if (!this.supportsBinary) {
    query.b64 = 1;
  }

  query = parseqs.encode(query); // prepend ? to query

  if (query.length) {
    query = '?' + query;
  }

  var ipv6 = this.hostname.indexOf(':') !== -1;
  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
};
/**
 * Feature detection for WebSocket.
 *
 * @return {Boolean} whether this transport is available.
 * @api public
 */


WS.prototype.check = function () {
  return !!WebSocketImpl && !('__initialize' in WebSocketImpl && this.name === WS.prototype.name);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 886 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 887 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = toArray;

function toArray(list, index) {
  var array = [];
  index = index || 0;

  for (var i = index || 0; i < list.length; i++) {
    array[i - index] = list[i];
  }

  return array;
}

/***/ }),
/* 888 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Expose `Backoff`.
 */
module.exports = Backoff;
/**
 * Initialize backoff timer with `opts`.
 *
 * - `min` initial timeout in milliseconds [100]
 * - `max` max timeout [10000]
 * - `jitter` [0]
 * - `factor` [2]
 *
 * @param {Object} opts
 * @api public
 */

function Backoff(opts) {
  opts = opts || {};
  this.ms = opts.min || 100;
  this.max = opts.max || 10000;
  this.factor = opts.factor || 2;
  this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
  this.attempts = 0;
}
/**
 * Return the backoff duration.
 *
 * @return {Number}
 * @api public
 */


Backoff.prototype.duration = function () {
  var ms = this.ms * Math.pow(this.factor, this.attempts++);

  if (this.jitter) {
    var rand = Math.random();
    var deviation = Math.floor(rand * this.jitter * ms);
    ms = (Math.floor(rand * 10) & 1) == 0 ? ms - deviation : ms + deviation;
  }

  return Math.min(ms, this.max) | 0;
};
/**
 * Reset the number of attempts.
 *
 * @api public
 */


Backoff.prototype.reset = function () {
  this.attempts = 0;
};
/**
 * Set the minimum duration
 *
 * @api public
 */


Backoff.prototype.setMin = function (min) {
  this.ms = min;
};
/**
 * Set the maximum duration
 *
 * @api public
 */


Backoff.prototype.setMax = function (max) {
  this.max = max;
};
/**
 * Set the jitter
 *
 * @api public
 */


Backoff.prototype.setJitter = function (jitter) {
  this.jitter = jitter;
};

/***/ }),
/* 889 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(90);
module.exports.source = __webpack_require__(90);
module.exports.sink = __webpack_require__(354);
module.exports.transform = __webpack_require__(890);
module.exports.duplex = __webpack_require__(355);

/***/ }),
/* 890 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

function _asyncGeneratorDelegate(inner, awaitWrap) { var iter = {}, waiting = false; function pump(key, value) { waiting = true; value = new Promise(function (resolve) { resolve(inner[key](value)); }); return { done: false, value: awaitWrap(value) }; } ; if (typeof Symbol === "function" && Symbol.iterator) { iter[Symbol.iterator] = function () { return this; }; } iter.next = function (value) { if (waiting) { waiting = false; return value; } return pump("next", value); }; if (typeof inner.throw === "function") { iter.throw = function (value) { if (waiting) { waiting = false; throw value; } return pump("throw", value); }; } if (typeof inner.return === "function") { iter.return = function (value) { if (waiting) { waiting = false; return value; } return pump("return", value); }; } return iter; }

const toDuplex = __webpack_require__(355);

module.exports = transform =>
/*#__PURE__*/
function () {
  var _ref = _wrapAsyncGenerator(function* (source) {
    const duplex = toDuplex(transform); // In a transform the sink and source are connected, an error in the sink
    // will be thrown in the source also. Catch the sink error to avoid unhandled
    // rejections and yield from the source.

    duplex.sink(source).catch(_ => {});
    yield* _asyncGeneratorDelegate(_asyncIterator(duplex.source), _awaitAsyncGenerator);
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();

/***/ }),
/* 891 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(892);

/***/ }),
/* 892 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const pipe = __webpack_require__(23);

const pushable = __webpack_require__(112);

const log = __webpack_require__(1)('libp2p:mplex');

const abortable = __webpack_require__(357);

const Coder = __webpack_require__(894);

const restrictSize = __webpack_require__(359);

const {
  MessageTypes,
  MessageTypeNames
} = __webpack_require__(360);

const createStream = __webpack_require__(897);

class Mplex {
  /**
   * @constructor
   * @param {object} options
   * @param {function(*)} options.onStream Called whenever an inbound stream is created
   * @param {function(*)} options.onStreamEnd Called whenever a stream ends
   * @param {AbortSignal} options.signal An AbortController signal
   */
  constructor(options) {
    options = options || {};
    options = typeof options === 'function' ? {
      onStream: options
    } : options;
    this._streamId = 0;
    this._streams = {
      /**
       * @type {Map<number, *>} Stream to ids map
       */
      initiators: new Map(),

      /**
       * @type {Map<number, *>} Stream to ids map
       */
      receivers: new Map()
    };
    this._options = options;
    /**
     * An iterable sink
     */

    this.sink = this._createSink();
    /**
     * An iterable source
     */

    this.source = this._createSource();
    /**
     * @property {function} onStream
     */

    this.onStream = options.onStream;
    /**
     * @property {function} onStreamEnd
     */

    this.onStreamEnd = options.onStreamEnd;
  }
  /**
   * Returns a Map of streams and their ids
   * @returns {Map<number,*>}
   */


  get streams() {
    // Inbound and Outbound streams may have the same ids, so we need to make those unique
    const streams = [];

    this._streams.initiators.forEach(stream => {
      streams.push(stream);
    });

    this._streams.receivers.forEach(stream => {
      streams.push(stream);
    });

    return streams;
  }
  /**
   * Initiate a new stream with the given name. If no name is
   * provided, the id of th stream will be used.
   * @param {string} [name] If name is not a string it will be cast to one
   * @returns {Stream}
   */


  newStream(name) {
    const id = this._streamId++;
    name = name == null ? id.toString() : String(name);
    const registry = this._streams.initiators;
    return this._newStream({
      id,
      name,
      type: 'initiator',
      registry
    });
  }
  /**
   * Called whenever an inbound stream is created
   * @private
   * @param {*} options
   * @param {number} options.id
   * @param {string} options.name
   * @returns {*} A muxed stream
   */


  _newReceiverStream({
    id,
    name
  }) {
    const registry = this._streams.receivers;
    return this._newStream({
      id,
      name,
      type: 'receiver',
      registry
    });
  }
  /**
   * Creates a new stream
   * @private
   * @param {object} options
   * @param {number} options.id
   * @param {string} options.name
   * @param {string} options.type
   * @param {Map<number, *>} options.registry A map of streams to their ids
   * @returns {*} A muxed stream
   */


  _newStream({
    id,
    name,
    type,
    registry
  }) {
    if (registry.has(id)) {
      throw new Error("".concat(type, " stream ").concat(id, " already exists!"));
    }

    log('new %s stream %s %s', type, id, name);

    const send = msg => {
      if (log.enabled) {
        log('%s stream %s %s send', type, id, name, _objectSpread({}, msg, {
          type: MessageTypeNames[msg.type],
          data: msg.data && msg.data.slice()
        }));
      }

      return this.source.push(msg);
    };

    const onEnd = () => {
      log('%s stream %s %s ended', type, id, name);
      registry.delete(id);
      this.onStreamEnd && this.onStreamEnd(stream);
    };

    const stream = createStream({
      id,
      name,
      send,
      type,
      onEnd,
      maxMsgSize: this._options.maxMsgSize
    });
    registry.set(id, stream);
    return stream;
  }
  /**
   * Creates a sink with an abortable source. Incoming messages will
   * also have their size restricted. All messages will be varint decoded.
   * @private
   * @returns {*} Returns an iterable sink
   */


  _createSink() {
    return async source => {
      if (this._options.signal) {
        source = abortable(source, this._options.signal);
      }

      try {
        await pipe(source, Coder.decode, restrictSize(this._options.maxMsgSize), async source => {
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;

          var _iteratorError;

          try {
            for (var _iterator = _asyncIterator(source), _step, _value; _step = await _iterator.next(), _iteratorNormalCompletion = _step.done, _value = await _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
              const msgs = _value;

              for (const msg of msgs) {
                this._handleIncoming(msg);
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return != null) {
                await _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        });
      } catch (err) {
        log('error in sink', err);
        return this.source.end(err); // End the source with an error
      }

      this.source.end();
    };
  }
  /**
   * Creates a source that restricts outgoing message sizes
   * and varint encodes them.
   * @private
   * @returns {*} An iterable source
   */


  _createSource() {
    const onEnd = err => {
      const {
        initiators,
        receivers
      } = this._streams; // Abort all the things!

      for (const s of initiators.values()) s.abort(err);

      for (const s of receivers.values()) s.abort(err);
    };

    const source = pushable({
      onEnd,
      writev: true
    });
    return Object.assign(Coder.encode(source), {
      push: source.push,
      end: source.end,
      return: source.return
    });
  }
  /**
   * @private
   * @param {object} options
   * @param {number} options.id
   * @param {string} options.type
   * @param {Buffer|BufferList} options.data
   * @returns {void}
   */


  _handleIncoming({
    id,
    type,
    data
  }) {
    if (log.enabled) {
      log('incoming message', {
        id,
        type: MessageTypeNames[type],
        data: data.slice()
      });
    } // Create a new stream?


    if (type === MessageTypes.NEW_STREAM && this.onStream) {
      const stream = this._newReceiverStream({
        id,
        name: data.toString()
      });

      return this.onStream(stream);
    }

    const list = type & 1 ? this._streams.initiators : this._streams.receivers;
    const stream = list.get(id);
    if (!stream) return log('missing stream %s', id);

    switch (type) {
      case MessageTypes.MESSAGE_INITIATOR:
      case MessageTypes.MESSAGE_RECEIVER:
        stream.source.push(data);
        break;

      case MessageTypes.CLOSE_INITIATOR:
      case MessageTypes.CLOSE_RECEIVER:
        stream.close();
        break;

      case MessageTypes.RESET_INITIATOR:
      case MessageTypes.RESET_RECEIVER:
        stream.reset();
        break;

      default:
        log('unknown message type %s', type);
    }
  }

}

Mplex.multicodec = '/mplex/6.7.0';
module.exports = Mplex;

/***/ }),
/* 893 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = class AbortError extends Error {
  constructor(message, code) {
    super(message || 'The operation was aborted');
    this.type = 'aborted';
    this.code = code || 'ABORT_ERR';
  }

};

/***/ }),
/* 894 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.encode = __webpack_require__(895);
exports.decode = __webpack_require__(896);

/***/ }),
/* 895 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const varint = __webpack_require__(19);

const {
  BufferList
} = __webpack_require__(358);

const POOL_SIZE = 10 * 1024;

class Encoder {
  constructor() {
    this._pool = Buffer.allocUnsafe(POOL_SIZE);
    this._poolOffset = 0;
  }
  /**
   * Encodes the given message and returns it and its header
   * @param {*} msg The message object to encode
   * @returns {Buffer|Buffer[]}
   */


  write(msg) {
    const pool = this._pool;
    let offset = this._poolOffset;
    varint.encode(msg.id << 3 | msg.type, pool, offset);
    offset += varint.encode.bytes;
    varint.encode(msg.data ? msg.data.length : 0, pool, offset);
    offset += varint.encode.bytes;
    const header = pool.slice(this._poolOffset, offset);

    if (POOL_SIZE - offset < 100) {
      this._pool = Buffer.allocUnsafe(POOL_SIZE);
      this._poolOffset = 0;
    } else {
      this._poolOffset = offset;
    }

    if (!msg.data) return header;
    return [header, msg.data];
  }

}

const encoder = new Encoder(); // Encode one or more messages and yield a BufferList of encoded messages

module.exports = source => function () {
  var _encode = _wrapAsyncGenerator(function* () {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;

    var _iteratorError;

    try {
      for (var _iterator = _asyncIterator(source), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
        const msg = _value;

        if (Array.isArray(msg)) {
          yield new BufferList(msg.map(m => encoder.write(m)));
        } else {
          yield new BufferList(encoder.write(msg));
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          yield _awaitAsyncGenerator(_iterator.return());
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  });

  function encode() {
    return _encode.apply(this, arguments);
  }

  return encode;
}()();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 896 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const varint = __webpack_require__(19);

const {
  BufferList
} = __webpack_require__(358); // Decode a chunk and yield an _array_ of decoded messages


module.exports = source => function () {
  var _decode = _wrapAsyncGenerator(function* () {
    const decoder = new Decoder();
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;

    var _iteratorError;

    try {
      for (var _iterator = _asyncIterator(source), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
        const chunk = _value;
        const msgs = decoder.write(chunk);
        if (msgs.length) yield msgs;
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          yield _awaitAsyncGenerator(_iterator.return());
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  });

  function decode() {
    return _decode.apply(this, arguments);
  }

  return decode;
}()();

class Decoder {
  constructor() {
    this._buffer = new BufferList(); // optimization to allow varint to take a BufferList (well a proxy to)

    this._bufferProxy = new Proxy({}, {
      get: (_, prop) => prop[0] === 'l' ? this._buffer[prop] : this._buffer.get(parseInt(prop))
    });
    this._headerInfo = null;
  }
  /**
   * @param {Buffer|BufferList} chunk
   * @returns {object[]} An array of message objects
   */


  write(chunk) {
    if (!chunk || !chunk.length) return [];

    this._buffer.append(chunk);

    const msgs = [];

    while (true) {
      if (!this._headerInfo) {
        try {
          this._headerInfo = this._decodeHeader(this._bufferProxy);
        } catch (_) {
          break; // We haven't received enough data yet
        }
      }

      const {
        id,
        type,
        length,
        offset
      } = this._headerInfo;
      const bufferedDataLength = this._buffer.length - offset;
      if (bufferedDataLength < length) break; // not enough data yet

      msgs.push({
        id,
        type,
        data: this._buffer.shallowSlice(offset, offset + length)
      });

      this._buffer.consume(offset + length);

      this._headerInfo = null;
    }

    return msgs;
  }
  /**
   * Attempts to decode the message header from the buffer
   * @private
   * @param {Buffer} data
   * @returns {*} message header (id, type, offset, length)
   */


  _decodeHeader(data) {
    const h = varint.decode(data);
    let offset = varint.decode.bytes;
    const length = varint.decode(data, offset);
    offset += varint.decode.bytes;
    return {
      id: h >> 3,
      type: h & 7,
      offset,
      length
    };
  }

}

/***/ }),
/* 897 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const abortable = __webpack_require__(357);

const AbortController = __webpack_require__(61);

const log = __webpack_require__(1)('libp2p:mplex:stream');

const pushable = __webpack_require__(112);

const BufferList = __webpack_require__(30);

const {
  MAX_MSG_SIZE
} = __webpack_require__(359);

const {
  InitiatorMessageTypes,
  ReceiverMessageTypes
} = __webpack_require__(360);
/**
 * @param {object} options
 * @param {number} options.id
 * @param {string} options.name
 * @param {function(*)} options.send Called to send data through the stream
 * @param {function(Error)} [options.onEnd] Called whenever the stream ends
 * @param {string} [options.type] One of ['initiator','receiver']. Defaults to 'initiator'
 * @param {number} [options.maxMsgSize] Max size of an mplex message in bytes. Writes > size are automatically split. Defaults to 1MB
 * @returns {*} A muxed stream
 */


module.exports = ({
  id,
  name,
  send,
  onEnd = () => {},
  type = 'initiator',
  maxMsgSize = MAX_MSG_SIZE
}) => {
  const abortController = new AbortController();
  const resetController = new AbortController();
  const Types = type === 'initiator' ? InitiatorMessageTypes : ReceiverMessageTypes;
  const externalId = type === 'initiator' ? "i".concat(id) : "r".concat(id);
  name = String(name == null ? id : name);
  let sourceEnded = false;
  let sinkEnded = false;
  let endErr;

  const onSourceEnd = err => {
    sourceEnded = true;
    log('%s stream %s source end', type, name, err);
    if (err && !endErr) endErr = err;

    if (sinkEnded) {
      stream.timeline.close = Date.now();
      onEnd(endErr);
    }
  };

  const onSinkEnd = err => {
    sinkEnded = true;
    log('%s stream %s sink end', type, name, err);
    if (err && !endErr) endErr = err;

    if (sourceEnded) {
      stream.timeline.close = Date.now();
      onEnd(endErr);
    }
  };

  const stream = {
    // Close for reading
    close: () => stream.source.end(),
    // Close for reading and writing (local error)
    abort: err => {
      log('%s stream %s abort', type, name, err); // End the source with the passed error

      stream.source.end(err);
      abortController.abort();
    },
    // Close immediately for reading and writing (remote error)
    reset: () => resetController.abort(),
    sink: async source => {
      source = abortable(source, [{
        signal: abortController.signal,
        options: {
          abortMessage: 'stream aborted',
          abortCode: 'ERR_MPLEX_STREAM_ABORT'
        }
      }, {
        signal: resetController.signal,
        options: {
          abortMessage: 'stream reset',
          abortCode: 'ERR_MPLEX_STREAM_RESET'
        }
      }]);

      if (type === 'initiator') {
        // If initiator, open a new stream
        send({
          id,
          type: Types.NEW_STREAM,
          data: name
        });
      }

      try {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;

        var _iteratorError;

        try {
          for (var _iterator = _asyncIterator(source), _step, _value; _step = await _iterator.next(), _iteratorNormalCompletion = _step.done, _value = await _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
            let data = _value;

            while (data.length) {
              if (data.length <= maxMsgSize) {
                send({
                  id,
                  type: Types.MESSAGE,
                  data
                });
                break;
              }

              data = BufferList.isBufferList(data) ? data : new BufferList(data);
              send({
                id,
                type: Types.MESSAGE,
                data: data.shallowSlice(0, maxMsgSize)
              });
              data.consume(maxMsgSize);
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              await _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      } catch (err) {
        // Send no more data if this stream was remotely reset
        if (err.code === 'ERR_MPLEX_STREAM_RESET') {
          log('%s stream %s reset', type, name);
        } else {
          log('%s stream %s error', type, name, err);
          send({
            id,
            type: Types.RESET
          });
        }

        stream.source.end(err);
        return onSinkEnd(err);
      }

      send({
        id,
        type: Types.CLOSE
      });
      onSinkEnd();
    },
    source: pushable(onSourceEnd),
    timeline: {
      open: Date.now(),
      close: null
    },
    id: externalId
  };
  return stream;
};

/***/ }),
/* 898 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const assert = __webpack_require__(13);

const debug = __webpack_require__(1);

const log = debug('libp2p:secio');
log.error = debug('libp2p:secio:error');

const handshake = __webpack_require__(899);

const State = __webpack_require__(908);

const Wrap = __webpack_require__(361);

const {
  int32BEDecode,
  int32BEEncode
} = __webpack_require__(26);

async function secure(localPeer, duplex, remotePeer) {
  // returns duplex
  assert(localPeer, 'no local private key provided');
  assert(duplex, 'no connection for the handshake provided');
  const state = new State(localPeer, remotePeer);
  const wrapped = Wrap(duplex, {
    lengthDecoder: int32BEDecode,
    lengthEncoder: int32BEEncode
  });
  await handshake(state, wrapped);
  return {
    conn: state.secure,
    remotePeer: state.id.remote
  };
}

module.exports = {
  protocol: '/secio/1.0.0',
  // since SECIO is symetric, we only need one function here
  secureInbound: secure,
  secureOutbound: secure
};

/***/ }),
/* 899 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const propose = __webpack_require__(900);

const exchange = __webpack_require__(903);

const finish = __webpack_require__(904); // Performs initial communication over insecure channel to share keys, IDs,
// and initiate communication, assigning all necessary params.


module.exports = async function handshake(state, wrapped) {
  await propose(state, wrapped);
  await exchange(state, wrapped);
  await finish(state, wrapped);
  state.cleanSecrets();
};

/***/ }),
/* 900 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const crypto = __webpack_require__(188);

const lp = __webpack_require__(26);

const {
  int32BEEncode
} = lp;

const debug = __webpack_require__(1);

const log = debug('libp2p:secio');
log.error = debug('libp2p:secio:error'); // step 1. Propose
// -- propose cipher suite + send pubkeys + nonce

module.exports = async function propose(state, wrapped) {
  log('1. propose - start');
  const prop = crypto.createProposal(state);
  log('1. propose - writing proposal', prop);
  await wrapped.write(lp.encode.single(prop, {
    lengthEncoder: int32BEEncode
  }));
  log('1. propose - reading proposal');
  const msg = (await wrapped.readLP()).slice();
  log('1. propose - read proposal', msg);
  await crypto.identify(state, msg);
  await crypto.selectProtocols(state);
  log('1. propose - finish');
};

/***/ }),
/* 901 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const protons = __webpack_require__(24);

module.exports = protons("message Propose {\n  optional bytes rand = 1;\n  optional bytes pubkey = 2;\n  optional string exchanges = 3;\n  optional string ciphers = 4;\n  optional string hashes = 5;\n}\n\nmessage Exchange {\n  optional bytes epubkey = 1;\n  optional bytes signature = 2;\n}");

/***/ }),
/* 902 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const mh = __webpack_require__(22);

const crypto = __webpack_require__(28);

const {
  InvalidCryptoExchangeError
} = __webpack_require__(189);

exports.exchanges = ['P-256', 'P-384', 'P-521'];
exports.ciphers = ['AES-256', 'AES-128'];
exports.hashes = ['SHA256', 'SHA512']; // Determines which algorithm to use.  Note:  f(a, b) = f(b, a)

exports.theBest = (order, p1, p2) => {
  let first;
  let second;

  if (order < 0) {
    first = p2;
    second = p1;
  } else if (order > 0) {
    first = p1;
    second = p2;
  } else {
    return p1[0];
  }

  for (const firstCandidate of first) {
    for (const secondCandidate of second) {
      if (firstCandidate === secondCandidate) {
        return firstCandidate;
      }
    }
  }

  throw new InvalidCryptoExchangeError('No algorithms in common!');
};

exports.makeMacAndCipher = async target => {
  [target.mac, target.cipher] = await Promise.all([makeMac(target.hashT, target.keys.macKey), makeCipher(target.cipherT, target.keys.iv, target.keys.cipherKey)]);
};

function makeMac(hash, key) {
  return crypto.hmac.create(hash, key);
}

function makeCipher(cipherType, iv, key) {
  if (cipherType === 'AES-128' || cipherType === 'AES-256') {
    return crypto.aes.create(key, iv);
  } // TODO: figure out if Blowfish is needed and if so find a library for it.


  throw new InvalidCryptoExchangeError("unrecognized cipher type: ".concat(cipherType));
}

exports.selectBest = async (local, remote) => {
  const oh1 = await exports.digest(Buffer.concat([remote.pubKeyBytes, local.nonce]));
  const oh2 = await exports.digest(Buffer.concat([local.pubKeyBytes, remote.nonce]));
  const order = Buffer.compare(oh1, oh2);

  if (order === 0) {
    throw new InvalidCryptoExchangeError('you are trying to talk to yourself');
  }

  return {
    curveT: exports.theBest(order, local.exchanges, remote.exchanges),
    cipherT: exports.theBest(order, local.ciphers, remote.ciphers),
    hashT: exports.theBest(order, local.hashes, remote.hashes),
    order
  };
};

exports.digest = buf => {
  return mh.digest(buf, 'sha2-256', buf.length);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 903 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const crypto = __webpack_require__(188);

const debug = __webpack_require__(1);

const log = debug('libp2p:secio');
log.error = debug('libp2p:secio:error'); // step 2. Exchange
// -- exchange (signed) ephemeral keys. verify signatures.

module.exports = async function exchange(state, wrapped) {
  log('2. exchange - start');
  log('2. exchange - writing exchange');
  const ex = await crypto.createExchange(state);
  await wrapped.writeLP(ex);
  const msg = await wrapped.readLP();
  log('2. exchange - reading exchange');
  await crypto.verify(state, msg.slice());
  await crypto.generateKeys(state);
  log('2. exchange - finish');
};

/***/ }),
/* 904 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const debug = __webpack_require__(1);

const log = debug('libp2p:secio');
log.error = debug('libp2p:secio:error');

const DuplexPair = __webpack_require__(905);

const pipe = __webpack_require__(23);

const lp = __webpack_require__(26);

const Wrap = __webpack_require__(361);

const {
  int32BEEncode,
  int32BEDecode
} = lp;

const ensureBuffer = __webpack_require__(117);

const etm = __webpack_require__(907);

const crypto = __webpack_require__(188); // step 3. Finish
// -- send expected message to verify encryption works (send local nonce)


module.exports = async function finish(state, wrapped) {
  log('3. finish - start');
  const proto = state.protocols;
  const [secure, user] = DuplexPair();
  const network = wrapped.unwrap();
  pipe(secure, // this is FROM the user
  ensureBuffer, etm.createBoxStream(proto.local.cipher, proto.local.mac), lp.encode({
    lengthEncoder: int32BEEncode
  }), network, // and gets piped INTO and FROM the network
  lp.decode({
    lengthDecoder: int32BEDecode
  }), ensureBuffer, etm.createUnboxStream(proto.remote.cipher, proto.remote.mac), secure // and gets piped TO the user
  ); // Exchange nonces over the encrypted stream for final verification

  const shake = Wrap(user);
  shake.write(state.proposal.in.rand);
  const nonceBack = await shake.read(state.proposal.in.rand.length);
  crypto.verifyNonce(state, nonceBack.slice());
  log('3. finish - finish'); // Awesome that's all folks.

  state.secure = shake.unwrap();
};

/***/ }),
/* 905 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Pair = __webpack_require__(906);

module.exports = function () {
  var a = Pair();
  var b = Pair();
  return [{
    source: a.source,
    sink: b.sink
  }, {
    source: b.source,
    sink: a.sink
  }];
};

/***/ }),
/* 906 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const getIterator = __webpack_require__(87); // a pair of streams where one drains from the other


module.exports = function pair() {
  let _source, onSource;

  const sink = async source => {
    if (_source) throw new Error('already piped');
    _source = getIterator(source);
    if (onSource) onSource(_source);
  };

  const source = {
    [Symbol.asyncIterator]() {
      return this;
    },

    next() {
      if (_source) return _source.next();
      return new Promise(resolve => {
        onSource = source => {
          onSource = null;
          resolve(source.next());
        };
      });
    }

  };
  return {
    sink,
    source
  };
};

/***/ }),
/* 907 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const BufferList = __webpack_require__(30);

const {
  InvalidCryptoTransmissionError
} = __webpack_require__(189);

exports.createBoxStream = (cipher, mac) => {
  return (
    /*#__PURE__*/
    function () {
      var _ref = _wrapAsyncGenerator(function* (source) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;

        var _iteratorError;

        try {
          for (var _iterator = _asyncIterator(source), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
            const chunk = _value;
            const data = yield _awaitAsyncGenerator(cipher.encrypt(chunk));
            const digest = yield _awaitAsyncGenerator(mac.digest(data));
            yield new BufferList([data, digest]);
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              yield _awaitAsyncGenerator(_iterator.return());
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      });

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }()
  );
};

exports.createUnboxStream = (decipher, mac) => {
  return (
    /*#__PURE__*/
    function () {
      var _ref2 = _wrapAsyncGenerator(function* (source) {
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;

        var _iteratorError2;

        try {
          for (var _iterator2 = _asyncIterator(source), _step2, _value2; _step2 = yield _awaitAsyncGenerator(_iterator2.next()), _iteratorNormalCompletion2 = _step2.done, _value2 = yield _awaitAsyncGenerator(_step2.value), !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {
            const chunk = _value2;
            const l = chunk.length;
            const macSize = mac.length;

            if (l < macSize) {
              throw new InvalidCryptoTransmissionError("buffer (".concat(l, ") shorter than MAC size (").concat(macSize, ")"));
            }

            const mark = l - macSize;
            const data = chunk.slice(0, mark);
            const macd = chunk.slice(mark);
            const expected = yield _awaitAsyncGenerator(mac.digest(data));

            if (!macd.equals(expected)) {
              throw new InvalidCryptoTransmissionError("MAC Invalid: ".concat(macd.toString('hex'), " != ").concat(expected.toString('hex')));
            }

            const decrypted = yield _awaitAsyncGenerator(decipher.decrypt(data));
            yield decrypted;
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
              yield _awaitAsyncGenerator(_iterator2.return());
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      });

      return function (_x2) {
        return _ref2.apply(this, arguments);
      };
    }()
  );
};

/***/ }),
/* 908 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


class State {
  constructor(localId, remoteId) {
    this.setup();
    this.id.local = localId;
    this.id.remote = remoteId;
    this.key.local = localId.privKey;
  }

  setup() {
    this.id = {
      local: null,
      remote: null
    };
    this.key = {
      local: null,
      remote: null
    };
    this.shake = null;
    this.cleanSecrets();
  } // remove all data from the handshake that is not needed anymore


  cleanSecrets() {
    this.shared = {};
    this.ephemeralKey = {
      local: null,
      remote: null
    };
    this.proposal = {
      in: null,
      out: null
    };
    this.proposalEncoded = {
      in: null,
      out: null
    };
    this.protocols = {
      local: null,
      remote: null
    };
    this.exchange = {
      in: null,
      out: null
    };
  }

}

module.exports = State;

/***/ }),
/* 909 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const assert = __webpack_require__(13);

const {
  EventEmitter
} = __webpack_require__(11);

const errcode = __webpack_require__(2);

const libp2pRecord = __webpack_require__(68);

const {
  MemoryDatastore
} = __webpack_require__(14);

const PeerInfo = __webpack_require__(17);

const RoutingTable = __webpack_require__(910);

const utils = __webpack_require__(18);

const c = __webpack_require__(51);

const Network = __webpack_require__(912);

const contentFetching = __webpack_require__(924);

const contentRouting = __webpack_require__(946);

const peerRouting = __webpack_require__(949);

const Message = __webpack_require__(38);

const Providers = __webpack_require__(950);

const RandomWalk = __webpack_require__(951);

const QueryManager = __webpack_require__(954);

const Record = libp2pRecord.Record;
/**
 * A DHT implementation modeled after Kademlia with S/Kademlia modifications.
 * Original implementation in go: https://github.com/libp2p/go-libp2p-kad-dht.
 */

class KadDHT extends EventEmitter {
  /**
   * Random walk options
   * @typedef {Object} randomWalkOptions
   * @property {boolean} enabled discovery enabled (default: true)
   * @property {number} queriesPerPeriod how many queries to run per period (default: 1)
   * @property {number} interval how often to run the the random-walk process, in milliseconds (default: 300000)
   * @property {number} timeout how long to wait for the the random-walk query to run, in milliseconds (default: 30000)
   * @property {number} delay how long to wait before starting the first random walk, in milliseconds (default: 10000)
   */

  /**
   * Create a new KadDHT.
   * @param {Object} props
   * @param {Dialer} props.dialer libp2p dialer instance
   * @param {PeerInfo} props.peerInfo peer's peerInfo
   * @param {PeerStore} props.peerStore libp2p peerStore
   * @param {Object} props.registrar libp2p registrar instance
   * @param {function} props.registrar.handle
   * @param {function} props.registrar.register
   * @param {function} props.registrar.unregister
   * @param {number} props.kBucketSize k-bucket size (default 20)
   * @param {number} props.concurrency alpha concurrency of queries (default 3)
   * @param {Datastore} props.datastore datastore (default MemoryDatastore)
   * @param {object} props.validators validators object with namespace as keys and function(key, record, callback)
   * @param {object} props.selectors selectors object with namespace as keys and function(key, records)
   * @param {randomWalkOptions} options.randomWalk randomWalk options
   */
  constructor({
    dialer,
    peerInfo,
    peerStore,
    registrar,
    datastore = new MemoryDatastore(),
    kBucketSize = c.K,
    concurrency = c.ALPHA,
    validators = {},
    selectors = {},
    randomWalk = {}
  }) {
    super();
    assert(dialer, 'libp2p-kad-dht requires an instance of Dialer');
    /**
     * Local reference to the libp2p dialer instance
     * @type {Dialer}
     */

    this.dialer = dialer;
    /**
     * Local peer info
     * @type {PeerInfo}
     */

    this.peerInfo = peerInfo;
    /**
     * Local PeerStore
     * @type {PeerStore}
     */

    this.peerStore = peerStore;
    /**
     * Local peer info
     * @type {Registrar}
     */

    this.registrar = registrar;
    /**
     * k-bucket size
     *
     * @type {number}
     */

    this.kBucketSize = kBucketSize;
    /**
     * ALPHA concurrency at which each query path with run, defaults to 3
     * @type {number}
     */

    this.concurrency = concurrency;
    /**
     * Number of disjoint query paths to use
     * This is set to `kBucketSize`/2 per the S/Kademlia paper
     * @type {number}
     */

    this.disjointPaths = Math.ceil(this.kBucketSize / 2);
    /**
     * The routing table.
     *
     * @type {RoutingTable}
     */

    this.routingTable = new RoutingTable(this.peerInfo.id, this.kBucketSize);
    /**
     * Reference to the datastore, uses an in-memory store if none given.
     *
     * @type {Datastore}
     */

    this.datastore = datastore;
    /**
     * Provider management
     *
     * @type {Providers}
     */

    this.providers = new Providers(this.datastore, this.peerInfo.id);
    this.validators = _objectSpread({
      pk: libp2pRecord.validator.validators.pk
    }, validators);
    this.selectors = _objectSpread({
      pk: libp2pRecord.selection.selectors.pk
    }, selectors);
    this.network = new Network(this);
    this._log = utils.logger(this.peerInfo.id);
    /**
     * Random walk management
     *
     * @type {RandomWalk}
     */

    this.randomWalk = new RandomWalk(this, randomWalk);
    /**
     * Keeps track of running queries
     *
     * @type {QueryManager}
     */

    this._queryManager = new QueryManager();
    this._running = false; // DHT components

    this.contentFetching = contentFetching(this);
    this.contentRouting = contentRouting(this);
    this.peerRouting = peerRouting(this);
  }
  /**
   * Is this DHT running.
   * @type {bool}
   */


  get isStarted() {
    return this._running;
  }
  /**
   * Start listening to incoming connections.
   * @returns {Promise<void>}
   */


  async start() {
    this._running = true;

    this._queryManager.start();

    await this.network.start(); // Start random walk, it will not run if it's disabled

    this.randomWalk.start();
  }
  /**
   * Stop accepting incoming connections and sending outgoing
   * messages.
   * @returns {Promise<void>}
   */


  stop() {
    this._running = false;
    this.randomWalk.stop();
    this.providers.stop();

    this._queryManager.stop();

    return this.network.stop();
  }
  /**
   * Store the given key/value  pair in the DHT.
   * @param {Buffer} key
   * @param {Buffer} value
   * @param {Object} [options] - put options
   * @param {number} [options.minPeers] - minimum number of peers required to successfully put (default: closestPeers.length)
   * @returns {Promise<void>}
   */


  async put(key, value, options = {}) {
    // eslint-disable-line require-await
    return this.contentFetching.put(key, value, options);
  }
  /**
   * Get the value to the given key.
   * Times out after 1 minute by default.
   * @param {Buffer} key
   * @param {Object} [options] - get options
   * @param {number} [options.timeout] - optional timeout (default: 60000)
   * @returns {Promise<Buffer>}
   */


  async get(key, options = {}) {
    // eslint-disable-line require-await
    return this.contentFetching.get(key, options);
  }
  /**
   * Get the `n` values to the given key without sorting.
   * @param {Buffer} key
   * @param {number} nvals
   * @param {Object} [options] - get options
   * @param {number} [options.timeout] - optional timeout (default: 60000)
   * @returns {Promise<Array<{from: PeerId, val: Buffer}>>}
   */


  async getMany(key, nvals, options = {}) {
    // eslint-disable-line require-await
    return this.contentFetching.getMany(key, nvals, options);
  } // ----------- Content Routing

  /**
   * Announce to the network that we can provide given key's value.
   * @param {CID} key
   * @returns {Promise<void>}
   */


  async provide(key) {
    // eslint-disable-line require-await
    return this.contentRouting.provide(key);
  }
  /**
   * Search the dht for up to `K` providers of the given CID.
   * @param {CID} key
   * @param {Object} options - findProviders options
   * @param {number} options.timeout - how long the query should maximally run, in milliseconds (default: 60000)
   * @param {number} options.maxNumProviders - maximum number of providers to find
   * @returns {AsyncIterable<PeerInfo>}
   */


  findProviders(key, options = {}) {
    var _this = this;

    return _wrapAsyncGenerator(function* () {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;

      var _iteratorError;

      try {
        for (var _iterator = _asyncIterator(_this.contentRouting.findProviders(key, options)), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
          const pInfo = _value;
          yield pInfo;
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            yield _awaitAsyncGenerator(_iterator.return());
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    })();
  } // ----------- Peer Routing -----------

  /**
   * Search for a peer with the given ID.
   *
   * @param {PeerId} id
   * @param {Object} options - findPeer options
   * @param {number} options.timeout - how long the query should maximally run, in milliseconds (default: 60000)
   * @returns {Promise<PeerInfo>}
   */


  async findPeer(id, options = {}) {
    // eslint-disable-line require-await
    return this.peerRouting.findPeer(id, options);
  }
  /**
   * Kademlia 'node lookup' operation.
   * @param {Buffer} key
   * @param {Object} [options]
   * @param {boolean} [options.shallow] shallow query (default: false)
   * @returns {AsyncIterable<PeerId>}
   */


  getClosestPeers(key, options = {
    shallow: false
  }) {
    var _this2 = this;

    return _wrapAsyncGenerator(function* () {
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;

      var _iteratorError2;

      try {
        for (var _iterator2 = _asyncIterator(_this2.peerRouting.getClosestPeers(key, options)), _step2, _value2; _step2 = yield _awaitAsyncGenerator(_iterator2.next()), _iteratorNormalCompletion2 = _step2.done, _value2 = yield _awaitAsyncGenerator(_step2.value), !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {
          const pId = _value2;
          yield pId;
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
            yield _awaitAsyncGenerator(_iterator2.return());
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    })();
  }
  /**
   * Get the public key for the given peer id.
   * @param {PeerId} peer
   * @returns {Promise<PubKey>}
   */


  async getPublicKey(peer) {
    // eslint-disable-line require-await
    return this.peerRouting.getPublicKey(peer);
  } // ----------- Discovery -----------


  _peerDiscovered(peerInfo) {
    this.emit('peer', peerInfo);
  } // ----------- Internals -----------

  /**
   * Returns the routing tables closest peers, for the key of
   * the message.
   *
   * @param {Message} msg
   * @returns {Promise<Array<PeerInfo>>}
   * @private
   */


  async _nearestPeersToQuery(msg) {
    const key = await utils.convertBuffer(msg.key);
    const ids = this.routingTable.closestPeers(key, this.kBucketSize);
    return ids.map(p => {
      if (this.peerStore.has(p)) {
        return this.peerStore.get(p);
      }

      return this.peerStore.put(new PeerInfo(p));
    });
  }
  /**
   * Get the nearest peers to the given query, but iff closer
   * than self.
   *
   * @param {Message} msg
   * @param {PeerInfo} peer
   * @returns {Promise<Array<PeerInfo>>}
   * @private
   */


  async _betterPeersToQuery(msg, peer) {
    this._log('betterPeersToQuery');

    const closer = await this._nearestPeersToQuery(msg);
    return closer.filter(closer => {
      if (this._isSelf(closer.id)) {
        // Should bail, not sure
        this._log.error('trying to return self as closer');

        return false;
      }

      return !closer.id.isEqual(peer.id);
    });
  }
  /**
   * Try to fetch a given record by from the local datastore.
   * Returns the record iff it is still valid, meaning
   * - it was either authored by this node, or
   * - it was received less than `MAX_RECORD_AGE` ago.
   *
   * @param {Buffer} key
   * @returns {Promise<Record>}
   * @private
   */


  async _checkLocalDatastore(key) {
    this._log('checkLocalDatastore: %b', key);

    const dsKey = utils.bufferToKey(key); // Fetch value from ds

    let rawRecord;

    try {
      rawRecord = await this.datastore.get(dsKey);
    } catch (err) {
      if (err.code === 'ERR_NOT_FOUND') {
        return undefined;
      }

      throw err;
    } // Create record from the returned bytes


    const record = Record.deserialize(rawRecord);

    if (!record) {
      throw errcode('Invalid record', 'ERR_INVALID_RECORD');
    } // Check validity: compare time received with max record age


    if (record.timeReceived == null || utils.now() - record.timeReceived > c.MAX_RECORD_AGE) {
      // If record is bad delete it and return
      await this.datastore.delete(dsKey);
      return undefined;
    } // Record is valid


    return record;
  }
  /**
   * Add the peer to the routing table and update it in the peerStore.
   *
   * @param {PeerInfo} peer
   * @returns {Promise<void>}
   * @private
   */


  async _add(peer) {
    await this.routingTable.add(peer.id);
  }
  /**
   * Verify a record without searching the DHT.
   *
   * @param {Record} record
   * @returns {Promise<void>}
   * @private
   */


  async _verifyRecordLocally(record) {
    this._log('verifyRecordLocally');

    await libp2pRecord.validator.verifyRecord(this.validators, record);
  }
  /**
   * Is the given peer id our PeerId?
   *
   * @param {PeerId} other
   * @returns {bool}
   *
   * @private
   */


  _isSelf(other) {
    return other && this.peerInfo.id.id.equals(other.id);
  }
  /**
   * Store the given key/value pair at the peer `target`.
   *
   * @param {Buffer} key
   * @param {Buffer} rec - encoded record
   * @param {PeerId} target
   * @returns {Promise<void>}
   *
   * @private
   */


  async _putValueToPeer(key, rec, target) {
    const msg = new Message(Message.TYPES.PUT_VALUE, key, 0);
    msg.record = rec;
    const resp = await this.network.sendRequest(target, msg);

    if (!resp.record.value.equals(Record.deserialize(rec).value)) {
      throw errcode(new Error('value not put correctly'), 'ERR_PUT_VALUE_INVALID');
    }
  }
  /**
   * Query a particular peer for the value for the given key.
   * It will either return the value or a list of closer peers.
   *
   * Note: The peerStore is updated with new addresses found for the given peer.
   *
   * @param {PeerId} peer
   * @param {Buffer} key
   * @returns {Promise<{Record, Array<PeerInfo}>}
   * @private
   */


  async _getValueOrPeers(peer, key) {
    const msg = await this._getValueSingle(peer, key);
    const peers = msg.closerPeers;
    const record = msg.record;

    if (record) {
      // We have a record
      try {
        await this._verifyRecordOnline(record);
      } catch (err) {
        const errMsg = 'invalid record received, discarded';

        this._log(errMsg);

        throw errcode(new Error(errMsg), 'ERR_INVALID_RECORD');
      }

      return {
        record,
        peers
      };
    }

    if (peers.length > 0) {
      return {
        peers
      };
    }

    throw errcode(new Error('Not found'), 'ERR_NOT_FOUND');
  }
  /**
   * Get a value via rpc call for the given parameters.
   *
   * @param {PeerId} peer
   * @param {Buffer} key
   * @returns {Promise<Message>}
   * @private
   */


  async _getValueSingle(peer, key) {
    // eslint-disable-line require-await
    const msg = new Message(Message.TYPES.GET_VALUE, key, 0);
    return this.network.sendRequest(peer, msg);
  }
  /**
   * Verify a record, fetching missing public keys from the network.
   * Calls back with an error if the record is invalid.
   *
   * @param {Record} record
   * @returns {Promise<void>}
   * @private
   */


  async _verifyRecordOnline(record) {
    await libp2pRecord.validator.verifyRecord(this.validators, record);
  }

}

module.exports = KadDHT;
module.exports.multicodec = c.PROTOCOL_DHT;

/***/ }),
/* 910 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const KBucket = __webpack_require__(911);

const utils = __webpack_require__(18);
/**
 * A wrapper around `k-bucket`, to provide easy store and
 * retrival for peers.
 */


class RoutingTable {
  /**
   * @param {PeerId} self
   * @param {number} kBucketSize
   */
  constructor(self, kBucketSize) {
    this.self = self;
    this._onPing = this._onPing.bind(this);

    this._onInit(kBucketSize);
  } // -- Private Methods


  async _onInit(kBucketSize) {
    const selfKey = await utils.convertPeerId(this.self);
    this.kb = new KBucket({
      localNodeId: selfKey,
      numberOfNodesPerKBucket: kBucketSize,
      numberOfNodesToPing: 1
    });
    this.kb.on('ping', this._onPing);
  }
  /**
   * Called on the `ping` event from `k-bucket`.
   * Currently this just removes the oldest contact from
   * the list, without acutally pinging the individual peers.
   * This is the same as go does, but should probably
   * be upgraded to actually ping the individual peers.
   *
   * @param {Array<Object>} oldContacts
   * @param {Object} newContact
   * @returns {undefined}
   * @private
   */


  _onPing(oldContacts, newContact) {
    // just use the first one (k-bucket sorts from oldest to newest)
    const oldest = oldContacts[0]; // remove the oldest one

    this.kb.remove(oldest.id); // add the new one

    this.kb.add(newContact);
  } // -- Public Interface

  /**
   * Amount of currently stored peers.
   *
   * @type {number}
   */


  get size() {
    return this.kb.count();
  }
  /**
   * Find a specific peer by id.
   *
   * @param {PeerId} peer
   * @returns {Promise<PeerId>}
   */


  async find(peer) {
    const key = await utils.convertPeerId(peer);
    const closest = this.closestPeer(key);

    if (closest && closest.isEqual(peer)) {
      return closest;
    }
  }
  /**
   * Retrieve the closest peers to the given key.
   *
   * @param {Buffer} key
   * @returns {PeerId|undefined}
   */


  closestPeer(key) {
    const res = this.closestPeers(key, 1);

    if (res.length > 0) {
      return res[0];
    }
  }
  /**
   * Retrieve the `count`-closest peers to the given key.
   *
   * @param {Buffer} key
   * @param {number} count
   * @returns {Array<PeerId>}
   */


  closestPeers(key, count) {
    return this.kb.closest(key, count).map(p => p.peer);
  }
  /**
   * Add or update the routing table with the given peer.
   *
   * @param {PeerId} peer
   * @returns {Promise<void>}
   */


  async add(peer) {
    const id = await utils.convertPeerId(peer);
    this.kb.add({
      id: id,
      peer: peer
    });
  }
  /**
   * Remove a given peer from the table.
   *
   * @param {PeerId} peer
   * @returns {Promise<void>}
   */


  async remove(peer) {
    const id = await utils.convertPeerId(peer);
    this.kb.remove(id);
  }

}

module.exports = RoutingTable;

/***/ }),
/* 911 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
index.js - Kademlia DHT K-bucket implementation as a binary tree.

The MIT License (MIT)

Copyright (c) 2013-2018 Tristan Slominski

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
*/


const randomBytes = __webpack_require__(340);

const {
  EventEmitter
} = __webpack_require__(11);
/**
 * @param  {Uint8Array} array1
 * @param  {Uint8Array} array2
 * @return {Boolean}
 */


function arrayEquals(array1, array2) {
  if (array1 === array2) {
    return true;
  }

  if (array1.length !== array2.length) {
    return false;
  }

  for (let i = 0, length = array1.length; i < length; ++i) {
    if (array1[i] !== array2[i]) {
      return false;
    }
  }

  return true;
}

function createNode() {
  return {
    contacts: [],
    dontSplit: false,
    left: null,
    right: null
  };
}

function ensureInt8(name, val) {
  if (!(val instanceof Uint8Array)) {
    throw new TypeError(name + ' is not a Uint8Array');
  }
}
/**
 * Implementation of a Kademlia DHT k-bucket used for storing
 * contact (peer node) information.
 *
 * @extends EventEmitter
 */


class KBucket extends EventEmitter {
  /**
   * `options`:
   *   `distance`: _Function_
   *     `function (firstId, secondId) { return distance }` An optional
   *     `distance` function that gets two `id` Uint8Arrays
   *     and return distance (as number) between them.
   *   `arbiter`: _Function_ _(Default: vectorClock arbiter)_
   *     `function (incumbent, candidate) { return contact; }` An optional
   *     `arbiter` function that givent two `contact` objects with the same `id`
   *     returns the desired object to be used for updating the k-bucket. For
   *     more details, see [arbiter function](#arbiter-function).
   *   `localNodeId`: _Uint8Array_ An optional Uint8Array representing the local node id.
   *     If not provided, a local node id will be created via `randomBytes(20)`.
   *     `metadata`: _Object_ _(Default: {})_ Optional satellite data to include
   *     with the k-bucket. `metadata` property is guaranteed not be altered by,
   *     it is provided as an explicit container for users of k-bucket to store
   *     implementation-specific data.
   *   `numberOfNodesPerKBucket`: _Integer_ _(Default: 20)_ The number of nodes
   *     that a k-bucket can contain before being full or split.
   *     `numberOfNodesToPing`: _Integer_ _(Default: 3)_ The number of nodes to
   *     ping when a bucket that should not be split becomes full. KBucket will
   *     emit a `ping` event that contains `numberOfNodesToPing` nodes that have
   *     not been contacted the longest.
   *
   * @param {Object=} options optional
   */
  constructor(options = {}) {
    super();
    this.localNodeId = options.localNodeId || randomBytes(20);
    this.numberOfNodesPerKBucket = options.numberOfNodesPerKBucket || 20;
    this.numberOfNodesToPing = options.numberOfNodesToPing || 3;
    this.distance = options.distance || KBucket.distance; // use an arbiter from options or vectorClock arbiter by default

    this.arbiter = options.arbiter || KBucket.arbiter;
    this.metadata = Object.assign({}, options.metadata);
    ensureInt8('option.localNodeId as parameter 1', this.localNodeId);
    this.root = createNode();
  }
  /**
   * Default arbiter function for contacts with the same id. Uses
   * contact.vectorClock to select which contact to update the k-bucket with.
   * Contact with larger vectorClock field will be selected. If vectorClock is
   * the same, candidat will be selected.
   *
   * @param  {Object} incumbent Contact currently stored in the k-bucket.
   * @param  {Object} candidate Contact being added to the k-bucket.
   * @return {Object}           Contact to updated the k-bucket with.
   */


  static arbiter(incumbent, candidate) {
    return incumbent.vectorClock > candidate.vectorClock ? incumbent : candidate;
  }
  /**
   * Default distance function. Finds the XOR
   * distance between firstId and secondId.
   *
   * @param  {Uint8Array} firstId  Uint8Array containing first id.
   * @param  {Uint8Array} secondId Uint8Array containing second id.
   * @return {Number}              Integer The XOR distance between firstId
   *                               and secondId.
   */


  static distance(firstId, secondId) {
    let distance = 0;
    let i = 0;
    const min = Math.min(firstId.length, secondId.length);
    const max = Math.max(firstId.length, secondId.length);

    for (; i < min; ++i) {
      distance = distance * 256 + (firstId[i] ^ secondId[i]);
    }

    for (; i < max; ++i) distance = distance * 256 + 255;

    return distance;
  }
  /**
   * Adds a contact to the k-bucket.
   *
   * @param {Object} contact the contact object to add
   */


  add(contact) {
    ensureInt8('contact.id', (contact || {}).id);
    let bitIndex = 0;
    let node = this.root;

    while (node.contacts === null) {
      // this is not a leaf node but an inner node with 'low' and 'high'
      // branches; we will check the appropriate bit of the identifier and
      // delegate to the appropriate node for further processing
      node = this._determineNode(node, contact.id, bitIndex++);
    } // check if the contact already exists


    const index = this._indexOf(node, contact.id);

    if (index >= 0) {
      this._update(node, index, contact);

      return this;
    }

    if (node.contacts.length < this.numberOfNodesPerKBucket) {
      node.contacts.push(contact);
      this.emit('added', contact);
      return this;
    } // the bucket is full


    if (node.dontSplit) {
      // we are not allowed to split the bucket
      // we need to ping the first this.numberOfNodesToPing
      // in order to determine if they are alive
      // only if one of the pinged nodes does not respond, can the new contact
      // be added (this prevents DoS flodding with new invalid contacts)
      this.emit('ping', node.contacts.slice(0, this.numberOfNodesToPing), contact);
      return this;
    }

    this._split(node, bitIndex);

    return this.add(contact);
  }
  /**
   * Get the n closest contacts to the provided node id. "Closest" here means:
   * closest according to the XOR metric of the contact node id.
   *
   * @param  {Uint8Array} id  Contact node id
   * @param  {Number=} n      Integer (Default: Infinity) The maximum number of
   *                          closest contacts to return
   * @return {Array}          Array Maximum of n closest contacts to the node id
   */


  closest(id, n = Infinity) {
    ensureInt8('id', id);

    if (!Number.isInteger(n) && n !== Infinity || n <= 0) {
      throw new TypeError('n is not positive number');
    }

    let contacts = [];

    for (let nodes = [this.root], bitIndex = 0; nodes.length > 0 && contacts.length < n;) {
      const node = nodes.pop();

      if (node.contacts === null) {
        const detNode = this._determineNode(node, id, bitIndex++);

        nodes.push(node.left === detNode ? node.right : node.left);
        nodes.push(detNode);
      } else {
        contacts = contacts.concat(node.contacts);
      }
    }

    return contacts.map(a => [this.distance(a.id, id), a]).sort((a, b) => a[0] - b[0]).slice(0, n).map(a => a[1]);
  }
  /**
   * Counts the total number of contacts in the tree.
   *
   * @return {Number} The number of contacts held in the tree
   */


  count() {
    // return this.toArray().length
    let count = 0;

    for (const nodes = [this.root]; nodes.length > 0;) {
      const node = nodes.pop();
      if (node.contacts === null) nodes.push(node.right, node.left);else count += node.contacts.length;
    }

    return count;
  }
  /**
   * Determines whether the id at the bitIndex is 0 or 1.
   * Return left leaf if `id` at `bitIndex` is 0, right leaf otherwise
   *
   * @param  {Object} node     internal object that has 2 leafs: left and right
   * @param  {Uint8Array} id   Id to compare localNodeId with.
   * @param  {Number} bitIndex Integer (Default: 0) The bit index to which bit
   *                           to check in the id Uint8Array.
   * @return {Object}          left leaf if id at bitIndex is 0, right leaf otherwise.
   */


  _determineNode(node, id, bitIndex) {
    // **NOTE** remember that id is a Uint8Array and has granularity of
    // bytes (8 bits), whereas the bitIndex is the _bit_ index (not byte)
    // id's that are too short are put in low bucket (1 byte = 8 bits)
    // (bitIndex >> 3) finds how many bytes the bitIndex describes
    // bitIndex % 8 checks if we have extra bits beyond byte multiples
    // if number of bytes is <= no. of bytes described by bitIndex and there
    // are extra bits to consider, this means id has less bits than what
    // bitIndex describes, id therefore is too short, and will be put in low
    // bucket
    const bytesDescribedByBitIndex = bitIndex >> 3;
    const bitIndexWithinByte = bitIndex % 8;

    if (id.length <= bytesDescribedByBitIndex && bitIndexWithinByte !== 0) {
      return node.left;
    }

    const byteUnderConsideration = id[bytesDescribedByBitIndex]; // byteUnderConsideration is an integer from 0 to 255 represented by 8 bits
    // where 255 is 11111111 and 0 is 00000000
    // in order to find out whether the bit at bitIndexWithinByte is set
    // we construct (1 << (7 - bitIndexWithinByte)) which will consist
    // of all bits being 0, with only one bit set to 1
    // for example, if bitIndexWithinByte is 3, we will construct 00010000 by
    // (1 << (7 - 3)) -> (1 << 4) -> 16

    if (byteUnderConsideration & 1 << 7 - bitIndexWithinByte) {
      return node.right;
    }

    return node.left;
  }
  /**
   * Get a contact by its exact ID.
   * If this is a leaf, loop through the bucket contents and return the correct
   * contact if we have it or null if not. If this is an inner node, determine
   * which branch of the tree to traverse and repeat.
   *
   * @param  {Uint8Array} id The ID of the contact to fetch.
   * @return {Object|Null}   The contact if available, otherwise null
   */


  get(id) {
    ensureInt8('id', id);
    let bitIndex = 0;
    let node = this.root;

    while (node.contacts === null) {
      node = this._determineNode(node, id, bitIndex++);
    } // index of uses contact id for matching


    const index = this._indexOf(node, id);

    return index >= 0 ? node.contacts[index] : null;
  }
  /**
   * Returns the index of the contact with provided
   * id if it exists, returns -1 otherwise.
   *
   * @param  {Object} node    internal object that has 2 leafs: left and right
   * @param  {Uint8Array} id  Contact node id.
   * @return {Number}         Integer Index of contact with provided id if it
   *                          exists, -1 otherwise.
   */


  _indexOf(node, id) {
    for (let i = 0; i < node.contacts.length; ++i) {
      if (arrayEquals(node.contacts[i].id, id)) return i;
    }

    return -1;
  }
  /**
   * Removes contact with the provided id.
   *
   * @param  {Uint8Array} id The ID of the contact to remove.
   * @return {Object}        The k-bucket itself.
   */


  remove(id) {
    ensureInt8('the id as parameter 1', id);
    let bitIndex = 0;
    let node = this.root;

    while (node.contacts === null) {
      node = this._determineNode(node, id, bitIndex++);
    }

    const index = this._indexOf(node, id);

    if (index >= 0) {
      const contact = node.contacts.splice(index, 1)[0];
      this.emit('removed', contact);
    }

    return this;
  }
  /**
   * Splits the node, redistributes contacts to the new nodes, and marks the
   * node that was split as an inner node of the binary tree of nodes by
   * setting this.root.contacts = null
   *
   * @param  {Object} node     node for splitting
   * @param  {Number} bitIndex the bitIndex to which byte to check in the
   *                           Uint8Array for navigating the binary tree
   */


  _split(node, bitIndex) {
    node.left = createNode();
    node.right = createNode(); // redistribute existing contacts amongst the two newly created nodes

    for (const contact of node.contacts) {
      this._determineNode(node, contact.id, bitIndex).contacts.push(contact);
    }

    node.contacts = null; // mark as inner tree node
    // don't split the "far away" node
    // we check where the local node would end up and mark the other one as
    // "dontSplit" (i.e. "far away")

    const detNode = this._determineNode(node, this.localNodeId, bitIndex);

    const otherNode = node.left === detNode ? node.right : node.left;
    otherNode.dontSplit = true;
  }
  /**
   * Returns all the contacts contained in the tree as an array.
   * If this is a leaf, return a copy of the bucket. `slice` is used so that we
   * don't accidentally leak an internal reference out that might be
   * accidentally misused. If this is not a leaf, return the union of the low
   * and high branches (themselves also as arrays).
   *
   * @return {Array} All of the contacts in the tree, as an array
   */


  toArray() {
    let result = [];

    for (const nodes = [this.root]; nodes.length > 0;) {
      const node = nodes.pop();
      if (node.contacts === null) nodes.push(node.right, node.left);else result = result.concat(node.contacts);
    }

    return result;
  }
  /**
   * Updates the contact selected by the arbiter.
   * If the selection is our old contact and the candidate is some new contact
   * then the new contact is abandoned (not added).
   * If the selection is our old contact and the candidate is our old contact
   * then we are refreshing the contact and it is marked as most recently
   * contacted (by being moved to the right/end of the bucket array).
   * If the selection is our new contact, the old contact is removed and the new
   * contact is marked as most recently contacted.
   *
   * @param  {Object} node    internal object that has 2 leafs: left and right
   * @param  {Number} index   the index in the bucket where contact exists
   *                          (index has already been computed in a previous
   *                          calculation)
   * @param  {Object} contact The contact object to update.
   */


  _update(node, index, contact) {
    // sanity check
    if (!arrayEquals(node.contacts[index].id, contact.id)) {
      throw new Error('wrong index for _update');
    }

    const incumbent = node.contacts[index];
    const selection = this.arbiter(incumbent, contact); // if the selection is our old contact and the candidate is some new
    // contact, then there is nothing to do

    if (selection === incumbent && incumbent !== contact) return;
    node.contacts.splice(index, 1); // remove old contact

    node.contacts.push(selection); // add more recent contact version

    this.emit('updated', incumbent, selection);
  }

}

module.exports = KBucket;

/***/ }),
/* 912 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const errcode = __webpack_require__(2);

const pipe = __webpack_require__(23);

const lp = __webpack_require__(26);

const pTimeout = __webpack_require__(59);

const MulticodecTopology = __webpack_require__(913);

const rpc = __webpack_require__(915);

const c = __webpack_require__(51);

const Message = __webpack_require__(38);

const utils = __webpack_require__(18);
/**
 * Handle network operations for the dht
 */


class Network {
  /**
   * Create a new network.
   *
   * @param {KadDHT} self
   */
  constructor(self) {
    this.dht = self;
    this.readMessageTimeout = c.READ_MESSAGE_TIMEOUT;
    this._log = utils.logger(this.dht.peerInfo.id, 'net');
    this._rpc = rpc(this.dht);
    this._onPeerConnected = this._onPeerConnected.bind(this);
    this._running = false;
  }
  /**
   * Start the network.
   * @returns {Promise<void>}
   */


  async start() {
    if (this._running) {
      return;
    }

    if (!this.dht.isStarted) {
      throw errcode(new Error('Can not start network'), 'ERR_CANNOT_START_NETWORK');
    }

    this._running = true; // Incoming streams

    this.dht.registrar.handle(c.PROTOCOL_DHT, this._rpc); // register protocol with topology

    const topology = new MulticodecTopology({
      multicodecs: [c.PROTOCOL_DHT],
      handlers: {
        onConnect: this._onPeerConnected,
        onDisconnect: () => {}
      }
    });
    this._registrarId = await this.dht.registrar.register(topology);
  }
  /**
   * Stop all network activity.
   * @returns {Promise<void>}
   */


  async stop() {
    if (!this.dht.isStarted && !this.isStarted) {
      return;
    }

    this._running = false; // unregister protocol and handlers

    await this.dht.registrar.unregister(this._registrarId);
  }
  /**
   * Is the network online?
   *
   * @type {bool}
   */


  get isStarted() {
    return this._running;
  }
  /**
   * Are all network components there?
   *
   * @type {bool}
   */


  get isConnected() {
    // TODO add a way to check if switch has started or not
    return this.dht.isStarted && this.isStarted;
  }
  /**
   * Registrar notifies a connection successfully with dht protocol.
   * @private
   * @param {PeerInfo} peerInfo remote peer info
   * @returns {Promise<void>}
   */


  async _onPeerConnected(peerInfo) {
    await this.dht._add(peerInfo);

    this._log('added to the routing table: %s', peerInfo.id.toB58String());
  }
  /**
   * Send a request and record RTT for latency measurements.
   * @async
   * @param {PeerId} to - The peer that should receive a message
   * @param {Message} msg - The message to send.
   * @returns {Promise<Message>}
   */


  async sendRequest(to, msg) {
    // TODO: record latency
    if (!this.isConnected) {
      throw errcode(new Error('Network is offline'), 'ERR_NETWORK_OFFLINE');
    }

    const id = to.toB58String();

    this._log('sending to: %s', id);

    const conn = await this.dht.dialer.connectToPeer(to);
    const {
      stream
    } = await conn.newStream(c.PROTOCOL_DHT);
    return this._writeReadMessage(stream, msg.serialize());
  }
  /**
   * Sends a message without expecting an answer.
   *
   * @param {PeerId} to
   * @param {Message} msg
   * @returns {Promise<void>}
   */


  async sendMessage(to, msg) {
    if (!this.isConnected) {
      throw errcode(new Error('Network is offline'), 'ERR_NETWORK_OFFLINE');
    }

    const id = to.toB58String();

    this._log('sending to: %s', id);

    const conn = await this.dht.dialer.connectToPeer(to);
    const {
      stream
    } = await conn.newStream(c.PROTOCOL_DHT);
    return this._writeMessage(stream, msg.serialize());
  }
  /**
   * Write a message and read its response.
   * If no response is received after the specified timeout
   * this will error out.
   *
   * @param {DuplexIterable} stream - the stream to use
   * @param {Buffer} msg - the message to send
   * @returns {Promise<Message>}
   * @private
   */


  async _writeReadMessage(stream, msg) {
    // eslint-disable-line require-await
    return pTimeout(writeReadMessage(stream, msg), this.readMessageTimeout);
  }
  /**
   * Write a message to the given stream.
   *
   * @param {DuplexIterable} stream - the stream to use
   * @param {Buffer} msg - the message to send
   * @returns {Promise<void>}
   * @private
   */


  _writeMessage(stream, msg) {
    return pipe([msg], lp.encode(), stream);
  }

}

async function writeReadMessage(stream, msg) {
  const res = await pipe([msg], lp.encode(), stream, lp.decode(), async source => {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;

    var _iteratorError;

    try {
      for (var _iterator = _asyncIterator(source), _step, _value; _step = await _iterator.next(), _iteratorNormalCompletion = _step.done, _value = await _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
        const chunk = _value;
        return chunk.slice();
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          await _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  });

  if (res.length === 0) {
    throw errcode(new Error('No message received'), 'ERR_NO_MESSAGE_RECEIVED');
  }

  return Message.deserialize(res);
}

module.exports = Network;

/***/ }),
/* 913 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const assert = __webpack_require__(13);

const withIs = __webpack_require__(21);

const Topology = __webpack_require__(914);

class MulticodecTopology extends Topology {
  /**
   * @param {Object} props
   * @param {number} props.min minimum needed connections (default: 0)
   * @param {number} props.max maximum needed connections (default: Infinity)
   * @param {Array<string>} props.multicodecs protocol multicodecs
   * @param {Object} props.handlers
   * @param {function} props.handlers.onConnect protocol "onConnect" handler
   * @param {function} props.handlers.onDisconnect protocol "onDisconnect" handler
   * @constructor
   */
  constructor({
    min,
    max,
    multicodecs,
    handlers
  }) {
    super({
      min,
      max,
      handlers
    });
    assert(multicodecs, 'one or more multicodec should be provided');
    assert(handlers, 'the handlers should be provided');
    assert(handlers.onConnect && typeof handlers.onConnect === 'function', 'the \'onConnect\' handler must be provided');
    assert(handlers.onDisconnect && typeof handlers.onDisconnect === 'function', 'the \'onDisconnect\' handler must be provided');
    this.multicodecs = Array.isArray(multicodecs) ? multicodecs : [multicodecs];
    this._registrar = undefined;
    this._onProtocolChange = this._onProtocolChange.bind(this);
  }

  set registrar(registrar) {
    this._registrar = registrar;

    this._registrar.peerStore.on('change:protocols', this._onProtocolChange); // Update topology peers


    this._updatePeers(this._registrar.peerStore.peers.values());
  }
  /**
   * Update topology.
   * @param {Array<PeerInfo>} peerInfoIterable
   * @returns {void}
   */


  _updatePeers(peerInfoIterable) {
    for (const peerInfo of peerInfoIterable) {
      if (this.multicodecs.filter(multicodec => peerInfo.protocols.has(multicodec)).length) {
        // Add the peer regardless of whether or not there is currently a connection
        this.peers.set(peerInfo.id.toB58String(), peerInfo); // If there is a connection, call _onConnect

        const connection = this._registrar.getConnection(peerInfo);

        connection && this._onConnect(peerInfo, connection);
      } else {
        // Remove any peers we might be tracking that are no longer of value to us
        this.peers.delete(peerInfo.id.toB58String());
      }
    }
  }
  /**
   * Check if a new peer support the multicodecs for this topology.
   * @param {Object} props
   * @param {PeerInfo} props.peerInfo
   * @param {Array<string>} props.protocols
   */


  _onProtocolChange({
    peerInfo,
    protocols
  }) {
    const existingPeer = this.peers.get(peerInfo.id.toB58String());
    const hasProtocol = protocols.filter(protocol => this.multicodecs.includes(protocol)); // Not supporting the protocol anymore?

    if (existingPeer && hasProtocol.length === 0) {
      this._onDisconnect(peerInfo);
    } // New to protocol support


    for (const protocol of protocols) {
      if (this.multicodecs.includes(protocol)) {
        this._updatePeers([peerInfo]);

        return;
      }
    }
  }

}

module.exports = withIs(MulticodecTopology, {
  className: 'MulticodecTopology',
  symbolName: '@libp2p/js-interfaces/topology/multicodec-topology'
});

/***/ }),
/* 914 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const withIs = __webpack_require__(21);

const noop = () => {};

class Topology {
  /**
   * @param {Object} props
   * @param {number} props.min minimum needed connections (default: 0)
   * @param {number} props.max maximum needed connections (default: Infinity)
   * @param {Object} [props.handlers]
   * @param {function} [props.handlers.onConnect] protocol "onConnect" handler
   * @param {function} [props.handlers.onDisconnect] protocol "onDisconnect" handler
   * @constructor
   */
  constructor({
    min = 0,
    max = Infinity,
    handlers = {}
  }) {
    this.min = min;
    this.max = max; // Handlers

    this._onConnect = handlers.onConnect || noop;
    this._onDisconnect = handlers.onDisconnect || noop;
    this.peers = new Map();
  }

  set registrar(registrar) {
    this._registrar = registrar;
  }
  /**
   * Notify about peer disconnected event.
   * @param {PeerInfo} peerInfo
   * @returns {void}
   */


  disconnect(peerInfo) {
    this._onDisconnect(peerInfo);
  }

}

module.exports = withIs(Topology, {
  className: 'Topology',
  symbolName: '@libp2p/js-interfaces/topology'
});

/***/ }),
/* 915 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const pipe = __webpack_require__(23);

const lp = __webpack_require__(26);

const PeerInfo = __webpack_require__(17);

const Message = __webpack_require__(38);

const handlers = __webpack_require__(917);

const utils = __webpack_require__(18);

module.exports = dht => {
  const log = utils.logger(dht.peerInfo.id, 'rpc');
  const getMessageHandler = handlers(dht);
  /**
   * Process incoming DHT messages.
   * @param {PeerInfo} peer
   * @param {Message} msg
   * @returns {Promise<Message>}
   *
   * @private
   */

  async function handleMessage(peer, msg) {
    // get handler & execute it
    const handler = getMessageHandler(msg.type);

    try {
      await dht._add(peer);
    } catch (err) {
      log.error('Failed to update the kbucket store', err);
    }

    if (!handler) {
      log.error("no handler found for message type: ".concat(msg.type));
      return;
    }

    return handler(peer, msg);
  }
  /**
   * Handle incoming streams on the dht protocol.
   * @param {Object} props
   * @param {DuplexStream} props.stream
   * @param {Connection} props.connection connection
   * @returns {Promise<void>}
   */


  return async function onIncomingStream({
    stream,
    connection
  }) {
    const peerInfo = await PeerInfo.create(connection.remotePeer);

    try {
      await dht._add(peerInfo);
    } catch (err) {
      log.error(err);
    }

    const idB58Str = peerInfo.id.toB58String();
    log('from: %s', idB58Str);
    await pipe(stream.source, lp.decode(), source => _wrapAsyncGenerator(function* () {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;

      var _iteratorError;

      try {
        for (var _iterator = _asyncIterator(source), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
          const msg = _value;
          // handle the message
          const desMessage = Message.deserialize(msg.slice());
          const res = yield _awaitAsyncGenerator(handleMessage(peerInfo, desMessage)); // Not all handlers will return a response

          if (res) {
            yield res.serialize();
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            yield _awaitAsyncGenerator(_iterator.return());
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    })(), lp.encode(), stream.sink);
  };
};

/***/ }),
/* 916 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = "// can't use, because protocol-buffers doesn't support imports\n// so we have to duplicate for now :(\n// import \"record.proto\";\n\nmessage Record {\n  // adjusted for javascript\n  optional bytes key = 1;\n  optional bytes value = 2;\n  optional bytes author = 3;\n  optional bytes signature = 4;\n  optional string timeReceived = 5;\n}\n\nmessage Message {\n  enum MessageType {\n    PUT_VALUE = 0;\n    GET_VALUE = 1;\n    ADD_PROVIDER = 2;\n    GET_PROVIDERS = 3;\n    FIND_NODE = 4;\n    PING = 5;\n  }\n\n  enum ConnectionType {\n    // sender does not have a connection to peer, and no extra information (default)\n    NOT_CONNECTED = 0;\n\n    // sender has a live connection to peer\n    CONNECTED = 1;\n\n    // sender recently connected to peer\n    CAN_CONNECT = 2;\n\n    // sender recently tried to connect to peer repeatedly but failed to connect\n    // (\"try\" here is loose, but this should signal \"made strong effort, failed\")\n    CANNOT_CONNECT = 3;\n  }\n\n  message Peer {\n    // ID of a given peer.\n    optional bytes id = 1;\n\n    // multiaddrs for a given peer\n    repeated bytes addrs = 2;\n\n    // used to signal the sender's connection capabilities to the peer\n    optional ConnectionType connection = 3;\n  }\n\n  // defines what type of message it is.\n  optional MessageType type = 1;\n\n  // defines what coral cluster level this query/response belongs to.\n  // in case we want to implement coral's cluster rings in the future.\n  optional int32 clusterLevelRaw = 10;\n\n  // Used to specify the key associated with this message.\n  // PUT_VALUE, GET_VALUE, ADD_PROVIDER, GET_PROVIDERS\n  // adjusted for javascript\n  optional bytes key = 2;\n\n  // Used to return a value\n  // PUT_VALUE, GET_VALUE\n  // adjusted Record to bytes for js\n  optional bytes record = 3;\n\n  // Used to return peers closer to a key in a query\n  // GET_VALUE, GET_PROVIDERS, FIND_NODE\n  repeated Peer closerPeers = 8;\n\n  // Used to return Providers\n  // GET_VALUE, ADD_PROVIDER, GET_PROVIDERS\n  repeated Peer providerPeers = 9;\n}";

/***/ }),
/* 917 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const T = __webpack_require__(38).TYPES;

module.exports = dht => {
  const handlers = {
    [T.GET_VALUE]: __webpack_require__(918)(dht),
    [T.PUT_VALUE]: __webpack_require__(919)(dht),
    [T.FIND_NODE]: __webpack_require__(920)(dht),
    [T.ADD_PROVIDER]: __webpack_require__(921)(dht),
    [T.GET_PROVIDERS]: __webpack_require__(922)(dht),
    [T.PING]: __webpack_require__(923)(dht)
  };
  /**
   * Get the message handler matching the passed in type.
   *
   * @param {number} type
   *
   * @returns {function(PeerInfo, Message, function(Error, Message))}
   *
   * @private
   */

  return function getMessageHandler(type) {
    return handlers[type];
  };
};

/***/ }),
/* 918 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const {
  Record
} = __webpack_require__(68);

const errcode = __webpack_require__(2);

const Message = __webpack_require__(38);

const utils = __webpack_require__(18);

module.exports = dht => {
  const log = utils.logger(dht.peerInfo.id, 'rpc:get-value');
  /**
   * Process `GetValue` DHT messages.
   *
   * @param {PeerInfo} peer
   * @param {Message} msg
   * @returns {Promise<Message>}
   */

  return async function getValue(peer, msg) {
    const key = msg.key;
    log('key: %b', key);

    if (!key || key.length === 0) {
      throw errcode(new Error('Invalid key'), 'ERR_INVALID_KEY');
    }

    const response = new Message(Message.TYPES.GET_VALUE, key, msg.clusterLevel);

    if (utils.isPublicKeyKey(key)) {
      log('is public key');
      const id = utils.fromPublicKeyKey(key);
      let info;

      if (dht._isSelf(id)) {
        info = dht.peerInfo;
      } else if (dht.peerStore.has(id)) {
        info = dht.peerStore.get(id);
      }

      if (info && info.id.pubKey) {
        log('returning found public key');
        response.record = new Record(key, info.id.pubKey.bytes);
        return response;
      }
    }

    const [record, closer] = await Promise.all([dht._checkLocalDatastore(key), dht._betterPeersToQuery(msg, peer)]);

    if (record) {
      log('got record');
      response.record = record;
    }

    if (closer.length > 0) {
      log('got closer %s', closer.length);
      response.closerPeers = closer;
    }

    return response;
  };
};

/***/ }),
/* 919 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const utils = __webpack_require__(18);

const errcode = __webpack_require__(2);

module.exports = dht => {
  const log = utils.logger(dht.peerInfo.id, 'rpc:put-value');
  /**
   * Process `PutValue` DHT messages.
   *
   * @param {PeerInfo} peer
   * @param {Message} msg
   * @returns {Promise<Message>}
   */

  return async function putValue(peer, msg) {
    const key = msg.key;
    log('key: %b', key);
    const record = msg.record;

    if (!record) {
      const errMsg = "Empty record from: ".concat(peer.id.toB58String());
      log.error(errMsg);
      throw errcode(new Error(errMsg), 'ERR_EMPTY_RECORD');
    }

    await dht._verifyRecordLocally(record);
    record.timeReceived = new Date();
    const recordKey = utils.bufferToKey(record.key);
    await dht.datastore.put(recordKey, record.serialize());
    return msg;
  };
};

/***/ }),
/* 920 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const Message = __webpack_require__(38);

const utils = __webpack_require__(18);

module.exports = dht => {
  const log = utils.logger(dht.peerInfo.id, 'rpc:find-node');
  /**
   * Process `FindNode` DHT messages.
   *
   * @param {PeerInfo} peer
   * @param {Message} msg
   * @returns {Promise<Message>}
   */

  return async function findNode(peer, msg) {
    log('start');
    let closer;

    if (msg.key.equals(dht.peerInfo.id.id)) {
      closer = [dht.peerInfo];
    } else {
      closer = await dht._betterPeersToQuery(msg, peer);
    }

    const response = new Message(msg.type, Buffer.alloc(0), msg.clusterLevel);

    if (closer.length > 0) {
      response.closerPeers = closer;
    } else {
      log('handle FindNode %s: could not find anything', peer.id.toB58String());
    }

    return response;
  };
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 921 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const CID = __webpack_require__(3);

const errcode = __webpack_require__(2);

const utils = __webpack_require__(18);

module.exports = dht => {
  const log = utils.logger(dht.peerInfo.id, 'rpc:add-provider');
  /**
   * Process `AddProvider` DHT messages.
   *
   * @param {PeerInfo} peer
   * @param {Message} msg
   * @returns {Promise<void>}
   */

  return async function addProvider(peer, msg) {
    // eslint-disable-line require-await
    log('start');

    if (!msg.key || msg.key.length === 0) {
      throw errcode(new Error('Missing key'), 'ERR_MISSING_KEY');
    }

    let cid;

    try {
      cid = new CID(msg.key);
    } catch (err) {
      const errMsg = "Invalid CID: ".concat(err.message);
      throw errcode(new Error(errMsg), 'ERR_INVALID_CID');
    }

    msg.providerPeers.forEach(pi => {
      // Ignore providers not from the originator
      if (!pi.id.isEqual(peer.id)) {
        log('invalid provider peer %s from %s', pi.id.toB58String(), peer.id.toB58String());
        return;
      }

      if (pi.multiaddrs.size < 1) {
        log('no valid addresses for provider %s. Ignore', peer.id.toB58String());
        return;
      }

      log('received provider %s for %s (addrs %s)', peer.id.toB58String(), cid.toBaseEncodedString(), pi.multiaddrs.toArray().map(m => m.toString()));

      if (!dht._isSelf(pi.id)) {
        dht.peerStore.put(pi);
        return dht.providers.addProvider(cid, pi.id);
      }
    }); // Previous versions of the JS DHT sent erroneous providers in the
    // `providerPeers` field. In order to accommodate older clients that have
    // this bug, we fall back to assuming the originator is the provider if
    // we can't find any valid providers in the payload.
    // https://github.com/libp2p/js-libp2p-kad-dht/pull/127
    // https://github.com/libp2p/js-libp2p-kad-dht/issues/128

    return dht.providers.addProvider(cid, peer.id);
  };
};

/***/ }),
/* 922 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const CID = __webpack_require__(3);

const PeerInfo = __webpack_require__(17);

const errcode = __webpack_require__(2);

const Message = __webpack_require__(38);

const utils = __webpack_require__(18);

module.exports = dht => {
  const log = utils.logger(dht.peerInfo.id, 'rpc:get-providers');
  /**
   * Process `GetProviders` DHT messages.
   *
   * @param {PeerInfo} peer
   * @param {Message} msg
   * @returns {Promise<Message>}
   */

  return async function getProviders(peer, msg) {
    let cid;

    try {
      cid = new CID(msg.key);
    } catch (err) {
      throw errcode(new Error("Invalid CID: ".concat(err.message)), 'ERR_INVALID_CID');
    }

    log('%s', cid.toBaseEncodedString());
    const dsKey = utils.bufferToKey(cid.buffer);
    const [has, peers, closer] = await Promise.all([dht.datastore.has(dsKey), dht.providers.getProviders(cid), dht._betterPeersToQuery(msg, peer)]);
    const providers = peers.map(p => {
      if (dht.peerStore.has(p)) {
        return dht.peerStore.get(p);
      }

      return dht.peerStore.put(new PeerInfo(p));
    });

    if (has) {
      providers.push(dht.peerInfo);
    }

    const response = new Message(msg.type, msg.key, msg.clusterLevel);

    if (providers.length > 0) {
      response.providerPeers = providers;
    }

    if (closer.length > 0) {
      response.closerPeers = closer;
    }

    log('got %s providers %s closerPeers', providers.length, closer.length);
    return response;
  };
};

/***/ }),
/* 923 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const utils = __webpack_require__(18);

module.exports = dht => {
  const log = utils.logger(dht.peerInfo.id, 'rpc:ping');
  /**
   * Process `Ping` DHT messages.
   *
   * @param {PeerInfo} peer
   * @param {Message} msg
   * @returns {Message}
   */

  return function ping(peer, msg) {
    log('from %s', peer.id.toB58String());
    return msg;
  };
};

/***/ }),
/* 924 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const errcode = __webpack_require__(2);

const pTimeout = __webpack_require__(59);

const libp2pRecord = __webpack_require__(68);

const c = __webpack_require__(51);

const Query = __webpack_require__(191);

const utils = __webpack_require__(18);

const Record = libp2pRecord.Record;

module.exports = dht => {
  const putLocal = async (key, rec) => {
    // eslint-disable-line require-await
    return dht.datastore.put(utils.bufferToKey(key), rec);
  };
  /**
   * Attempt to retrieve the value for the given key from
   * the local datastore.
   *
   * @param {Buffer} key
   * @returns {Promise<Record>}
   *
   * @private
   */


  const getLocal = async key => {
    dht._log('getLocal %b', key);

    const raw = await dht.datastore.get(utils.bufferToKey(key));

    dht._log('found %b in local datastore', key);

    const rec = Record.deserialize(raw);
    await dht._verifyRecordLocally(rec);
    return rec;
  };
  /**
   * Send the best record found to any peers that have an out of date record.
   *
   * @param {Buffer} key
   * @param {Array<Object>} vals - values retrieved from the DHT
   * @param {Object} best - the best record that was found
   * @returns {Promise}
   *
   * @private
   */


  const sendCorrectionRecord = async (key, vals, best) => {
    const fixupRec = await utils.createPutRecord(key, best);
    return Promise.all(vals.map(async v => {
      // no need to do anything
      if (v.val.equals(best)) {
        return;
      } // correct ourself


      if (dht._isSelf(v.from)) {
        try {
          await dht._putLocal(key, fixupRec);
        } catch (err) {
          dht._log.error('Failed error correcting self', err);
        }

        return;
      } // send correction


      try {
        await dht._putValueToPeer(key, fixupRec, v.from);
      } catch (err) {
        dht._log.error('Failed error correcting entry', err);
      }
    }));
  };

  return {
    /**
     * Store the given key/value pair locally, in the datastore.
     * @param {Buffer} key
     * @param {Buffer} rec - encoded record
     * @returns {Promise<void>}
     * @private
     */
    async _putLocal(key, rec) {
      // eslint-disable-line require-await
      return putLocal(key, rec);
    },

    /**
     * Store the given key/value  pair in the DHT.
     *
     * @param {Buffer} key
     * @param {Buffer} value
     * @param {Object} [options] - put options
     * @param {number} [options.minPeers] - minimum number of peers required to successfully put (default: closestPeers.length)
     * @returns {Promise<void>}
     */
    async put(key, value, options = {}) {
      dht._log('PutValue %b', key); // create record in the dht format


      const record = await utils.createPutRecord(key, value); // store the record locally

      await putLocal(key, record); // put record to the closest peers

      let counterAll = 0;
      let counterSuccess = 0;
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;

      var _iteratorError;

      try {
        for (var _iterator = _asyncIterator(dht.getClosestPeers(key, {
          shallow: true
        })), _step, _value; _step = await _iterator.next(), _iteratorNormalCompletion = _step.done, _value = await _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
          const peer = _value;

          try {
            counterAll += 1;
            await dht._putValueToPeer(key, record, peer);
            counterSuccess += 1;
          } catch (err) {
            dht._log.error('Failed to put to peer (%b): %s', peer.id, err);
          }
        } // verify if we were able to put to enough peers

      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            await _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      const minPeers = options.minPeers || counterAll; // Ensure we have a default `minPeers`

      if (minPeers > counterSuccess) {
        const error = errcode(new Error("Failed to put value to enough peers: ".concat(counterSuccess, "/").concat(minPeers)), 'ERR_NOT_ENOUGH_PUT_PEERS');

        dht._log.error(error);

        throw error;
      }
    },

    /**
     * Get the value to the given key.
     * Times out after 1 minute by default.
     *
     * @param {Buffer} key
     * @param {Object} [options] - get options
     * @param {number} [options.timeout] - optional timeout (default: 60000)
     * @returns {Promise<Buffer>}
     */
    async get(key, options = {}) {
      options.timeout = options.timeout || c.minute;

      dht._log('_get %b', key);

      const vals = await dht.getMany(key, c.GET_MANY_RECORD_COUNT, options);
      const recs = vals.map(v => v.val);
      let i = 0;

      try {
        i = libp2pRecord.selection.bestRecord(dht.selectors, key, recs);
      } catch (err) {
        // Assume the first record if no selector available
        if (err.code !== 'ERR_NO_SELECTOR_FUNCTION_FOR_RECORD_KEY') {
          throw err;
        }
      }

      const best = recs[i];

      dht._log('GetValue %b %s', key, best);

      if (!best) {
        throw errcode(new Error('best value was not found'), 'ERR_NOT_FOUND');
      }

      await sendCorrectionRecord(key, vals, best);
      return best;
    },

    /**
     * Get the `n` values to the given key without sorting.
     *
     * @param {Buffer} key
     * @param {number} nvals
     * @param {Object} [options] - get options
     * @param {number} [options.timeout] - optional timeout (default: 60000)
     * @returns {Promise<Array<{from: PeerId, val: Buffer}>>}
     */
    async getMany(key, nvals, options = {}) {
      options.timeout = options.timeout || c.minute;

      dht._log('getMany %b (%s)', key, nvals);

      let vals = [];
      let localRec;

      try {
        localRec = await getLocal(key);
      } catch (err) {
        if (nvals === 0) {
          throw err;
        }
      }

      if (localRec) {
        vals.push({
          val: localRec.value,
          from: dht.peerInfo.id
        });
      }

      if (vals.length >= nvals) {
        return vals;
      }

      const paths = [];
      const id = await utils.convertBuffer(key);
      const rtp = dht.routingTable.closestPeers(id, this.kBucketSize);

      dht._log('peers in rt: %d', rtp.length);

      if (rtp.length === 0) {
        const errMsg = 'Failed to lookup key! No peers from routing table!';

        dht._log.error(errMsg);

        if (vals.length === 0) {
          throw errcode(new Error(errMsg), 'ERR_NO_PEERS_IN_ROUTING_TABLE');
        }

        return vals;
      } // we have peers, lets do the actual query to them


      const query = new Query(dht, key, (pathIndex, numPaths) => {
        // This function body runs once per disjoint path
        const pathSize = utils.pathSize(nvals - vals.length, numPaths);
        const pathVals = [];
        paths.push(pathVals); // Here we return the query function to use on this particular disjoint path

        return async peer => {
          let rec, peers, lookupErr;

          try {
            const results = await dht._getValueOrPeers(peer, key);
            rec = results.record;
            peers = results.peers;
          } catch (err) {
            // If we have an invalid record we just want to continue and fetch a new one.
            if (err.code !== 'ERR_INVALID_RECORD') {
              throw err;
            }

            lookupErr = err;
          }

          const res = {
            closerPeers: peers
          };

          if (rec && rec.value || lookupErr) {
            pathVals.push({
              val: rec && rec.value,
              from: peer
            });
          } // enough is enough


          if (pathVals.length >= pathSize) {
            res.pathComplete = true;
          }

          return res;
        };
      });
      let error;

      try {
        await pTimeout(query.run(rtp), options.timeout);
      } catch (err) {
        error = err;
      }

      query.stop(); // combine vals from each path

      vals = [].concat.apply(vals, paths).slice(0, nvals);

      if (error && vals.length === 0) {
        throw error;
      }

      return vals;
    }

  };
};

/***/ }),
/* 925 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const PeerDistanceList = __webpack_require__(926);

const EventEmitter = __webpack_require__(11);

const Path = __webpack_require__(927);

const WorkerQueue = __webpack_require__(931);

const utils = __webpack_require__(18);
/**
 * Manages a single run of the query.
 */


class Run extends EventEmitter {
  /**
   * Creates a Run.
   *
   * @param {Query} query
   */
  constructor(query) {
    super();
    this.query = query;
    this.running = false;
    this.workers = []; // The peers that have been queried (including error responses)

    this.peersSeen = new Set(); // The errors received when querying peers

    this.errors = []; // The closest K peers that have been queried successfully
    // (this member is initialized when the worker queues start)

    this.peersQueried = null;
  }
  /**
   * Stop all the workers
   */


  stop() {
    if (!this.running) {
      return;
    }

    this.running = false;

    for (const worker of this.workers) {
      worker.stop();
    }
  }
  /**
   * Execute the run with the given initial set of peers.
   *
   * @param {Array<PeerId>} peers
   * @returns {Promise}
   */


  async execute(peers) {
    const paths = []; // array of states per disjoint path
    // Create disjoint paths

    const numPaths = Math.min(this.query.dht.disjointPaths, peers.length);

    for (let i = 0; i < numPaths; i++) {
      paths.push(new Path(this, this.query.makePath(i, numPaths)));
    } // Assign peers to paths round-robin style


    peers.forEach((peer, i) => {
      paths[i % numPaths].addInitialPeer(peer);
    }); // Execute the query along each disjoint path

    await this.executePaths(paths);
    const res = {
      // The closest K peers we were able to query successfully
      finalSet: new Set(this.peersQueried.peers),
      paths: []
    }; // Collect the results from each completed path

    for (const path of paths) {
      if (path.res && (path.res.pathComplete || path.res.queryComplete)) {
        path.res.success = true;
        res.paths.push(path.res);
      }
    }

    return res;
  }
  /**
   * Execute all paths through the DHT.
   *
   * @param {Array<Path>} paths
   * @returns {Promise<void>}
   */


  async executePaths(paths) {
    this.running = true;
    this.emit('start');

    try {
      await Promise.all(paths.map(path => path.execute()));
    } finally {
      // Ensure all workers are stopped
      this.stop(); // Completed the Run

      this.emit('complete');
    } // If all queries errored out, something is seriously wrong, so callback
    // with an error


    if (this.errors.length === this.peersSeen.size) {
      throw this.errors[0];
    }
  }
  /**
   * Initialize the list of queried peers, then start a worker queue for the
   * given path.
   *
   * @param {Path} path
   * @returns {Promise<void>}
   */


  async workerQueue(path) {
    await this.init();
    await this.startWorker(path);
  }
  /**
   * Create and start a worker queue for a particular path.
   *
   * @param {Path} path
   * @returns {Promise<void>}
   */


  async startWorker(path) {
    const worker = new WorkerQueue(this.query.dht, this, path, this.query._log);
    this.workers.push(worker);
    await worker.execute();
  }
  /**
   * Initialize the list of closest peers we've queried - this is shared by all
   * paths in the run.
   *
   * @returns {Promise<void>}
   */


  async init() {
    if (this.peersQueried) {
      return;
    } // We only want to initialize the PeerDistanceList once for the run


    if (this.peersQueriedPromise) {
      await this.peersQueriedPromise;
      return;
    } // This promise is temporarily stored so that others may await its completion


    this.peersQueriedPromise = (async () => {
      const dhtKey = await utils.convertBuffer(this.query.key);
      this.peersQueried = new PeerDistanceList(dhtKey, this.query.dht.kBucketSize);
    })(); // After PeerDistanceList is initialized, clean up


    await this.peersQueriedPromise;
    delete this.peersQueriedPromise;
  }
  /**
   * If we've queried K peers, and the remaining peers in the given `worker`'s queue
   * are all further from the key than the peers we've already queried, then we should
   * stop querying on that `worker`.
   *
   * @param {WorkerQueue} worker
   * @returns {Promise<Boolean>}
   */


  async continueQuerying(worker) {
    // If we haven't queried K peers yet, keep going
    if (this.peersQueried.length < this.peersQueried.capacity) {
      return true;
    } // Get all the peers that are currently being queried.
    // Note that this function gets called right after a peer has been popped
    // off the head of the closest peers queue so it will include that peer.


    const running = worker.queue.workersList().map(i => i.data); // Check if any of the peers that are currently being queried are closer
    // to the key than the peers we've already queried

    const someCloser = await this.peersQueried.anyCloser(running); // Some are closer, the worker should keep going

    if (someCloser) {
      return true;
    } // None are closer, the worker can stop


    return false;
  }

}

module.exports = Run;

/***/ }),
/* 926 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const distance = __webpack_require__(190);

const utils = __webpack_require__(18);

const pMap = __webpack_require__(170);
/**
 * Maintains a list of peerIds sorted by distance from a DHT key.
 */


class PeerDistanceList {
  /**
   * Creates a new PeerDistanceList.
   *
   * @param {Buffer} originDhtKey - the DHT key from which distance is calculated
   * @param {number} capacity - the maximum size of the list
   */
  constructor(originDhtKey, capacity) {
    this.originDhtKey = originDhtKey;
    this.capacity = capacity;
    this.peerDistances = [];
  }
  /**
   * The length of the list
   */


  get length() {
    return this.peerDistances.length;
  }
  /**
   * The peerIds in the list, in order of distance from the origin key
   */


  get peers() {
    return this.peerDistances.map(pd => pd.peerId);
  }
  /**
   * Add a peerId to the list.
   *
   * @param {PeerId} peerId
   * @returns {Promise<void>}
   */


  async add(peerId) {
    if (this.peerDistances.find(pd => pd.peerId.id.equals(peerId.id))) {
      return;
    }

    const dhtKey = await utils.convertPeerId(peerId);
    const el = {
      peerId,
      distance: distance(this.originDhtKey, dhtKey)
    };
    this.peerDistances.push(el);
    this.peerDistances.sort((a, b) => distance.compare(a.distance, b.distance));
    this.peerDistances = this.peerDistances.slice(0, this.capacity);
  }
  /**
   * Indicates whether any of the peerIds passed as a parameter are closer
   * to the origin key than the furthest peerId in the PeerDistanceList.
   *
   * @param {Array<PeerId>} peerIds
   * @returns {Boolean}
   */


  async anyCloser(peerIds) {
    if (!peerIds.length) {
      return false;
    }

    if (!this.length) {
      return true;
    }

    const dhtKeys = await pMap(peerIds, peerId => utils.convertPeerId(peerId));
    const furthestDistance = this.peerDistances[this.peerDistances.length - 1].distance;

    for (const dhtKey of dhtKeys) {
      const keyDistance = distance(this.originDhtKey, dhtKey);

      if (distance.compare(keyDistance, furthestDistance) < 0) {
        return true;
      }
    }

    return false;
  }

}

module.exports = PeerDistanceList;

/***/ }),
/* 927 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const PeerQueue = __webpack_require__(928);

const utils = __webpack_require__(18); // TODO: Temporary until parallel dial in Switch have a proper
// timeout. Requires async/await refactor of transports and
// dial abort logic. This gives us 30s to complete the `queryFunc`.
// This should help reduce the high end call times of queries


const QUERY_FUNC_TIMEOUT = 30e3;
/**
 * Manages a single Path through the DHT.
 */

class Path {
  /**
   * Creates a Path.
   *
   * @param {Run} run
   * @param {queryFunc} queryFunc
   */
  constructor(run, queryFunc) {
    this.run = run;
    this.queryFunc = utils.withTimeout(queryFunc, QUERY_FUNC_TIMEOUT);
    if (!this.queryFunc) throw new Error('Path requires a `queryFn` to be specified');
    if (typeof this.queryFunc !== 'function') throw new Error('Path expected `queryFn` to be a function. Got ' + typeof this.queryFunc);
    /**
     * @type {Array<PeerId>}
     */

    this.initialPeers = [];
    /**
     * @type {PeerQueue}
     */

    this.peersToQuery = null;
  }
  /**
   * Add a peer to the set of peers that are used to intialize the path.
   * @param {PeerId} peer
   */


  addInitialPeer(peer) {
    this.initialPeers.push(peer);
  }
  /**
   * Execute the path.
   *
   * @returns {Promise}
   *
   */


  async execute() {
    // Create a queue of peers ordered by distance from the key
    const queue = await PeerQueue.fromKey(this.run.query.key); // Add initial peers to the queue

    this.peersToQuery = queue;
    await Promise.all(this.initialPeers.map(peer => this.addPeerToQuery(peer)));
    await this.run.workerQueue(this);
  }
  /**
   * Add a peer to the peers to be queried.
   *
   * @param {PeerId} peer
   * @returns {Promise<void>}
   */


  async addPeerToQuery(peer) {
    // Don't add self
    if (this.run.query.dht._isSelf(peer)) {
      return;
    } // The paths must be disjoint, meaning that no two paths in the Query may
    // traverse the same peer


    if (this.run.peersSeen.has(peer.toB58String())) {
      return;
    }

    await this.peersToQuery.enqueue(peer);
  }

}

module.exports = Path;

/***/ }),
/* 928 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const Heap = __webpack_require__(929);

const distance = __webpack_require__(190);

const debug = __webpack_require__(1);

const utils = __webpack_require__(18);

const log = debug('libp2p:dht:peer-queue');
/**
 * PeerQueue is a heap that sorts its entries (PeerIds) by their
 * xor distance to the inital provided key.
 */

class PeerQueue {
  /**
   * Create from a given peer id.
   *
   * @param {PeerId} id
   * @returns {Promise<PeerQueue>}
   */
  static async fromPeerId(id) {
    const key = await utils.convertPeerId(id);
    return new PeerQueue(key);
  }
  /**
   * Create from a given buffer.
   *
   * @param {Buffer} keyBuffer
   * @returns {Promise<PeerQueue>}
   */


  static async fromKey(keyBuffer) {
    const key = await utils.convertBuffer(keyBuffer);
    return new PeerQueue(key);
  }
  /**
   * Create a new PeerQueue.
   *
   * @param {Buffer} from - The sha2-256 encoded peer id
   */


  constructor(from) {
    log('create: %b', from);
    this.from = from;
    this.heap = new Heap(utils.xorCompare);
  }
  /**
   * Add a new PeerId to the queue.
   *
   * @param {PeerId} id
   * @returns {Promise}
   */


  async enqueue(id) {
    log('enqueue %s', id.toB58String());
    const key = await utils.convertPeerId(id);
    const el = {
      id: id,
      distance: distance(this.from, key)
    };
    this.heap.push(el);
  }
  /**
   * Returns the closest peer to the `from` peer.
   *
   * @returns {PeerId}
   */


  dequeue() {
    const el = this.heap.pop();
    log('dequeue %s', el.id.toB58String());
    return el.id;
  }

  get length() {
    return this.heap.size();
  }

}

module.exports = PeerQueue;

/***/ }),
/* 929 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(930);

/***/ }),
/* 930 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

// Generated by CoffeeScript 1.8.0
(function () {
  var Heap, defaultCmp, floor, heapify, heappop, heappush, heappushpop, heapreplace, insort, min, nlargest, nsmallest, updateItem, _siftdown, _siftup;

  floor = Math.floor, min = Math.min;
  /*
  Default comparison function to be used
   */

  defaultCmp = function defaultCmp(x, y) {
    if (x < y) {
      return -1;
    }

    if (x > y) {
      return 1;
    }

    return 0;
  };
  /*
  Insert item x in list a, and keep it sorted assuming a is sorted.
  
  If x is already in a, insert it to the right of the rightmost x.
  
  Optional args lo (default 0) and hi (default a.length) bound the slice
  of a to be searched.
   */


  insort = function insort(a, x, lo, hi, cmp) {
    var mid;

    if (lo == null) {
      lo = 0;
    }

    if (cmp == null) {
      cmp = defaultCmp;
    }

    if (lo < 0) {
      throw new Error('lo must be non-negative');
    }

    if (hi == null) {
      hi = a.length;
    }

    while (lo < hi) {
      mid = floor((lo + hi) / 2);

      if (cmp(x, a[mid]) < 0) {
        hi = mid;
      } else {
        lo = mid + 1;
      }
    }

    return [].splice.apply(a, [lo, lo - lo].concat(x)), x;
  };
  /*
  Push item onto heap, maintaining the heap invariant.
   */


  heappush = function heappush(array, item, cmp) {
    if (cmp == null) {
      cmp = defaultCmp;
    }

    array.push(item);
    return _siftdown(array, 0, array.length - 1, cmp);
  };
  /*
  Pop the smallest item off the heap, maintaining the heap invariant.
   */


  heappop = function heappop(array, cmp) {
    var lastelt, returnitem;

    if (cmp == null) {
      cmp = defaultCmp;
    }

    lastelt = array.pop();

    if (array.length) {
      returnitem = array[0];
      array[0] = lastelt;

      _siftup(array, 0, cmp);
    } else {
      returnitem = lastelt;
    }

    return returnitem;
  };
  /*
  Pop and return the current smallest value, and add the new item.
  
  This is more efficient than heappop() followed by heappush(), and can be
  more appropriate when using a fixed size heap. Note that the value
  returned may be larger than item! That constrains reasonable use of
  this routine unless written as part of a conditional replacement:
      if item > array[0]
        item = heapreplace(array, item)
   */


  heapreplace = function heapreplace(array, item, cmp) {
    var returnitem;

    if (cmp == null) {
      cmp = defaultCmp;
    }

    returnitem = array[0];
    array[0] = item;

    _siftup(array, 0, cmp);

    return returnitem;
  };
  /*
  Fast version of a heappush followed by a heappop.
   */


  heappushpop = function heappushpop(array, item, cmp) {
    var _ref;

    if (cmp == null) {
      cmp = defaultCmp;
    }

    if (array.length && cmp(array[0], item) < 0) {
      _ref = [array[0], item], item = _ref[0], array[0] = _ref[1];

      _siftup(array, 0, cmp);
    }

    return item;
  };
  /*
  Transform list into a heap, in-place, in O(array.length) time.
   */


  heapify = function heapify(array, cmp) {
    var i, _i, _j, _len, _ref, _ref1, _results, _results1;

    if (cmp == null) {
      cmp = defaultCmp;
    }

    _ref1 = function () {
      _results1 = [];

      for (var _j = 0, _ref = floor(array.length / 2); 0 <= _ref ? _j < _ref : _j > _ref; 0 <= _ref ? _j++ : _j--) {
        _results1.push(_j);
      }

      return _results1;
    }.apply(this).reverse();

    _results = [];

    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      i = _ref1[_i];

      _results.push(_siftup(array, i, cmp));
    }

    return _results;
  };
  /*
  Update the position of the given item in the heap.
  This function should be called every time the item is being modified.
   */


  updateItem = function updateItem(array, item, cmp) {
    var pos;

    if (cmp == null) {
      cmp = defaultCmp;
    }

    pos = array.indexOf(item);

    if (pos === -1) {
      return;
    }

    _siftdown(array, 0, pos, cmp);

    return _siftup(array, pos, cmp);
  };
  /*
  Find the n largest elements in a dataset.
   */


  nlargest = function nlargest(array, n, cmp) {
    var elem, result, _i, _len, _ref;

    if (cmp == null) {
      cmp = defaultCmp;
    }

    result = array.slice(0, n);

    if (!result.length) {
      return result;
    }

    heapify(result, cmp);
    _ref = array.slice(n);

    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      elem = _ref[_i];
      heappushpop(result, elem, cmp);
    }

    return result.sort(cmp).reverse();
  };
  /*
  Find the n smallest elements in a dataset.
   */


  nsmallest = function nsmallest(array, n, cmp) {
    var elem, i, los, result, _i, _j, _len, _ref, _ref1, _results;

    if (cmp == null) {
      cmp = defaultCmp;
    }

    if (n * 10 <= array.length) {
      result = array.slice(0, n).sort(cmp);

      if (!result.length) {
        return result;
      }

      los = result[result.length - 1];
      _ref = array.slice(n);

      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        elem = _ref[_i];

        if (cmp(elem, los) < 0) {
          insort(result, elem, 0, null, cmp);
          result.pop();
          los = result[result.length - 1];
        }
      }

      return result;
    }

    heapify(array, cmp);
    _results = [];

    for (i = _j = 0, _ref1 = min(n, array.length); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
      _results.push(heappop(array, cmp));
    }

    return _results;
  };

  _siftdown = function _siftdown(array, startpos, pos, cmp) {
    var newitem, parent, parentpos;

    if (cmp == null) {
      cmp = defaultCmp;
    }

    newitem = array[pos];

    while (pos > startpos) {
      parentpos = pos - 1 >> 1;
      parent = array[parentpos];

      if (cmp(newitem, parent) < 0) {
        array[pos] = parent;
        pos = parentpos;
        continue;
      }

      break;
    }

    return array[pos] = newitem;
  };

  _siftup = function _siftup(array, pos, cmp) {
    var childpos, endpos, newitem, rightpos, startpos;

    if (cmp == null) {
      cmp = defaultCmp;
    }

    endpos = array.length;
    startpos = pos;
    newitem = array[pos];
    childpos = 2 * pos + 1;

    while (childpos < endpos) {
      rightpos = childpos + 1;

      if (rightpos < endpos && !(cmp(array[childpos], array[rightpos]) < 0)) {
        childpos = rightpos;
      }

      array[pos] = array[childpos];
      pos = childpos;
      childpos = 2 * pos + 1;
    }

    array[pos] = newitem;
    return _siftdown(array, startpos, pos, cmp);
  };

  Heap = function () {
    Heap.push = heappush;
    Heap.pop = heappop;
    Heap.replace = heapreplace;
    Heap.pushpop = heappushpop;
    Heap.heapify = heapify;
    Heap.updateItem = updateItem;
    Heap.nlargest = nlargest;
    Heap.nsmallest = nsmallest;

    function Heap(cmp) {
      this.cmp = cmp != null ? cmp : defaultCmp;
      this.nodes = [];
    }

    Heap.prototype.push = function (x) {
      return heappush(this.nodes, x, this.cmp);
    };

    Heap.prototype.pop = function () {
      return heappop(this.nodes, this.cmp);
    };

    Heap.prototype.peek = function () {
      return this.nodes[0];
    };

    Heap.prototype.contains = function (x) {
      return this.nodes.indexOf(x) !== -1;
    };

    Heap.prototype.replace = function (x) {
      return heapreplace(this.nodes, x, this.cmp);
    };

    Heap.prototype.pushpop = function (x) {
      return heappushpop(this.nodes, x, this.cmp);
    };

    Heap.prototype.heapify = function () {
      return heapify(this.nodes, this.cmp);
    };

    Heap.prototype.updateItem = function (x) {
      return updateItem(this.nodes, x, this.cmp);
    };

    Heap.prototype.clear = function () {
      return this.nodes = [];
    };

    Heap.prototype.empty = function () {
      return this.nodes.length === 0;
    };

    Heap.prototype.size = function () {
      return this.nodes.length;
    };

    Heap.prototype.clone = function () {
      var heap;
      heap = new Heap();
      heap.nodes = this.nodes.slice(0);
      return heap;
    };

    Heap.prototype.toArray = function () {
      return this.nodes.slice(0);
    };

    Heap.prototype.insert = Heap.prototype.push;
    Heap.prototype.top = Heap.prototype.peek;
    Heap.prototype.front = Heap.prototype.peek;
    Heap.prototype.has = Heap.prototype.contains;
    Heap.prototype.copy = Heap.prototype.clone;
    return Heap;
  }();

  (function (root, factory) {
    if (true) {
      return !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {}
  })(this, function () {
    return Heap;
  });
}).call(void 0);

/***/ }),
/* 931 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const queue = __webpack_require__(932);

const promiseToCallback = __webpack_require__(943);

class WorkerQueue {
  /**
   * Creates a new WorkerQueue.
   *
   * @param {DHT} dht
   * @param {Run} run
   * @param {Object} path
   * @param {function} log
   */
  constructor(dht, run, path, log) {
    this.dht = dht;
    this.run = run;
    this.path = path;
    this.log = log;
    this.concurrency = this.dht.concurrency;
    this.queue = this.setupQueue(); // a container for resolve/reject functions that will be populated
    // when execute() is called

    this.execution = null;
  }
  /**
   * Create the underlying async queue.
   *
   * @returns {Object}
   */


  setupQueue() {
    const q = queue((peer, cb) => {
      promiseToCallback(this.processNext(peer))(cb);
    }, this.concurrency); // If there's an error, stop the worker

    q.error = err => {
      this.log.error('queue', err);
      this.stop(err);
    }; // When all peers in the queue have been processed, stop the worker


    q.drain = () => {
      this.log('queue:drain');
      this.stop();
    }; // When a space opens up in the queue, add some more peers


    q.unsaturated = () => {
      if (this.running) {
        this.fill();
      }
    };

    q.buffer = 0;
    return q;
  }
  /**
   * Stop the worker, optionally providing an error to pass to the worker's
   * callback.
   *
   * @param {Error} err
   */


  stop(err) {
    if (!this.running) {
      return;
    }

    this.running = false;
    this.queue.kill();
    this.log('worker:stop, %d workers still running', this.run.workers.filter(w => w.running).length);

    if (err) {
      this.execution.reject(err);
    } else {
      this.execution.resolve();
    }
  }
  /**
   * Use the queue from async to keep `concurrency` amount items running
   * per path.
   *
   * @return {Promise<void>}
   */


  async execute() {
    this.running = true; // store the promise resolution functions to be resolved at end of queue

    this.execution = {};
    const execPromise = new Promise((resolve, reject) => Object.assign(this.execution, {
      resolve,
      reject
    })); // start queue

    this.fill(); // await completion

    await execPromise;
  }
  /**
   * Add peers to the worker queue until there are enough to satisfy the
   * worker queue concurrency.
   * Note that we don't want to take any more than those required to satisfy
   * concurrency from the peers-to-query queue, because we always want to
   * query the closest peers to the key first, and new peers are continously
   * being added to the peers-to-query queue.
   */


  fill() {
    // Note:
    // - queue.running(): number of items that are currently running
    // - queue.length(): the number of items that are waiting to be run
    while (this.queue.running() + this.queue.length() < this.concurrency && this.path.peersToQuery.length > 0) {
      this.queue.push(this.path.peersToQuery.dequeue());
    }
  }
  /**
   * Process the next peer in the queue
   *
   * @param {PeerId} peer
   * @returns {Promise<void>}
   */


  async processNext(peer) {
    if (!this.running) {
      return;
    } // The paths must be disjoint, meaning that no two paths in the Query may
    // traverse the same peer


    if (this.run.peersSeen.has(peer.toB58String())) {
      return;
    } // Check if we've queried enough peers already


    let continueQuerying, continueQueryingError;

    try {
      continueQuerying = await this.run.continueQuerying(this);
    } catch (err) {
      continueQueryingError = err;
    } // Abort and ignore any error if we're no longer running


    if (!this.running) {
      return;
    }

    if (continueQueryingError) {
      throw continueQueryingError;
    } // No peer we're querying is closer, stop the queue
    // This will cause queries that may potentially result in
    // closer nodes to be ended, but it reduces overall query time


    if (!continueQuerying) {
      this.stop();
      return;
    } // Check if another path has queried this peer in the mean time


    if (this.run.peersSeen.has(peer.toB58String())) {
      return;
    }

    this.run.peersSeen.add(peer.toB58String()); // Execute the query on the next peer

    this.log('queue:work');
    let state, execError;

    try {
      state = await this.execQuery(peer);
    } catch (err) {
      execError = err;
    } // Abort and ignore any error if we're no longer running


    if (!this.running) {
      return;
    }

    this.log('queue:work:done', execError, state);

    if (execError) {
      throw execError;
    } // If query is complete, stop all workers.
    // Note: run.stop() calls stop() on all the workers, which kills the
    // queue and resolves execution


    if (state && state.queryComplete) {
      this.log('query:complete');
      this.run.stop();
      return;
    } // If path is complete, just stop this worker.
    // Note: this.stop() kills the queue and resolves execution


    if (state && state.pathComplete) {
      this.stop();
    }
  }
  /**
   * Execute a query on the next peer.
   *
   * @param {PeerId} peer
   * @returns {Promise<void>}
   * @private
   */


  async execQuery(peer) {
    let res, queryError;

    try {
      res = await this.path.queryFunc(peer);
    } catch (err) {
      queryError = err;
    } // Abort and ignore any error if we're no longer running


    if (!this.running) {
      return;
    }

    if (queryError) {
      this.run.errors.push(queryError);
      return;
    } // Add the peer to the closest peers we have successfully queried


    await this.run.peersQueried.add(peer); // If the query indicates that this path or the whole query is complete
    // set the path result and bail out

    if (res.pathComplete || res.queryComplete) {
      this.path.res = res;
      return {
        pathComplete: res.pathComplete,
        queryComplete: res.queryComplete
      };
    } // If there are closer peers to query, add them to the queue


    if (res.closerPeers && res.closerPeers.length > 0) {
      await Promise.all(res.closerPeers.map(async closer => {
        // don't add ourselves
        if (this.dht._isSelf(closer.id)) {
          return;
        }

        closer = this.dht.peerStore.put(closer);

        this.dht._peerDiscovered(closer);

        await this.path.addPeerToQuery(closer.id);
      }));
    }
  }

}

module.exports = WorkerQueue;

/***/ }),
/* 932 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (worker, concurrency) {
  var _worker = (0, _wrapAsync2.default)(worker);

  return (0, _queue2.default)(function (items, cb) {
    _worker(items[0], cb);
  }, concurrency, 1);
};

var _queue = __webpack_require__(933);

var _queue2 = _interopRequireDefault(_queue);

var _wrapAsync = __webpack_require__(364);

var _wrapAsync2 = _interopRequireDefault(_wrapAsync);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

module.exports = exports['default'];
/**
 * A queue of tasks for the worker function to complete.
 * @typedef {Object} QueueObject
 * @memberOf module:ControlFlow
 * @property {Function} length - a function returning the number of items
 * waiting to be processed. Invoke with `queue.length()`.
 * @property {boolean} started - a boolean indicating whether or not any
 * items have been pushed and processed by the queue.
 * @property {Function} running - a function returning the number of items
 * currently being processed. Invoke with `queue.running()`.
 * @property {Function} workersList - a function returning the array of items
 * currently being processed. Invoke with `queue.workersList()`.
 * @property {Function} idle - a function returning false if there are items
 * waiting or being processed, or true if not. Invoke with `queue.idle()`.
 * @property {number} concurrency - an integer for determining how many `worker`
 * functions should be run in parallel. This property can be changed after a
 * `queue` is created to alter the concurrency on-the-fly.
 * @property {Function} push - add a new task to the `queue`. Calls `callback`
 * once the `worker` has finished processing the task. Instead of a single task,
 * a `tasks` array can be submitted. The respective callback is used for every
 * task in the list. Invoke with `queue.push(task, [callback])`,
 * @property {Function} unshift - add a new task to the front of the `queue`.
 * Invoke with `queue.unshift(task, [callback])`.
 * @property {Function} remove - remove items from the queue that match a test
 * function.  The test function will be passed an object with a `data` property,
 * and a `priority` property, if this is a
 * [priorityQueue]{@link module:ControlFlow.priorityQueue} object.
 * Invoked with `queue.remove(testFn)`, where `testFn` is of the form
 * `function ({data, priority}) {}` and returns a Boolean.
 * @property {Function} saturated - a callback that is called when the number of
 * running workers hits the `concurrency` limit, and further tasks will be
 * queued.
 * @property {Function} unsaturated - a callback that is called when the number
 * of running workers is less than the `concurrency` & `buffer` limits, and
 * further tasks will not be queued.
 * @property {number} buffer - A minimum threshold buffer in order to say that
 * the `queue` is `unsaturated`.
 * @property {Function} empty - a callback that is called when the last item
 * from the `queue` is given to a `worker`.
 * @property {Function} drain - a callback that is called when the last item
 * from the `queue` has returned from the `worker`.
 * @property {Function} error - a callback that is called when a task errors.
 * Has the signature `function(error, task)`.
 * @property {boolean} paused - a boolean for determining whether the queue is
 * in a paused state.
 * @property {Function} pause - a function that pauses the processing of tasks
 * until `resume()` is called. Invoke with `queue.pause()`.
 * @property {Function} resume - a function that resumes the processing of
 * queued tasks when the queue is paused. Invoke with `queue.resume()`.
 * @property {Function} kill - a function that removes the `drain` callback and
 * empties remaining tasks from the queue forcing it to go idle. No more tasks
 * should be pushed to the queue after calling this function. Invoke with `queue.kill()`.
 */

/**
 * Creates a `queue` object with the specified `concurrency`. Tasks added to the
 * `queue` are processed in parallel (up to the `concurrency` limit). If all
 * `worker`s are in progress, the task is queued until one becomes available.
 * Once a `worker` completes a `task`, that `task`'s callback is called.
 *
 * @name queue
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {AsyncFunction} worker - An async function for processing a queued task.
 * If you want to handle errors from an individual task, pass a callback to
 * `q.push()`. Invoked with (task, callback).
 * @param {number} [concurrency=1] - An `integer` for determining how many
 * `worker` functions should be run in parallel.  If omitted, the concurrency
 * defaults to `1`.  If the concurrency is `0`, an error is thrown.
 * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can
 * attached as certain properties to listen for specific events during the
 * lifecycle of the queue.
 * @example
 *
 * // create a queue object with concurrency 2
 * var q = async.queue(function(task, callback) {
 *     console.log('hello ' + task.name);
 *     callback();
 * }, 2);
 *
 * // assign a callback
 * q.drain = function() {
 *     console.log('all items have been processed');
 * };
 *
 * // add some items to the queue
 * q.push({name: 'foo'}, function(err) {
 *     console.log('finished processing foo');
 * });
 * q.push({name: 'bar'}, function (err) {
 *     console.log('finished processing bar');
 * });
 *
 * // add some items to the queue (batch-wise)
 * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {
 *     console.log('finished processing item');
 * });
 *
 * // add some items to the front of the queue
 * q.unshift({name: 'bar'}, function (err) {
 *     console.log('finished processing bar');
 * });
 */

/***/ }),
/* 933 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = queue;

var _baseIndexOf = __webpack_require__(934);

var _baseIndexOf2 = _interopRequireDefault(_baseIndexOf);

var _isArray = __webpack_require__(113);

var _isArray2 = _interopRequireDefault(_isArray);

var _noop = __webpack_require__(938);

var _noop2 = _interopRequireDefault(_noop);

var _onlyOnce = __webpack_require__(939);

var _onlyOnce2 = _interopRequireDefault(_onlyOnce);

var _setImmediate = __webpack_require__(362);

var _setImmediate2 = _interopRequireDefault(_setImmediate);

var _DoublyLinkedList = __webpack_require__(940);

var _DoublyLinkedList2 = _interopRequireDefault(_DoublyLinkedList);

var _wrapAsync = __webpack_require__(364);

var _wrapAsync2 = _interopRequireDefault(_wrapAsync);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function queue(worker, concurrency, payload) {
  if (concurrency == null) {
    concurrency = 1;
  } else if (concurrency === 0) {
    throw new Error('Concurrency must not be zero');
  }

  var _worker = (0, _wrapAsync2.default)(worker);

  var numRunning = 0;
  var _workersList = [];
  var processingScheduled = false;

  function _insert(data, insertAtFront, callback) {
    if (callback != null && typeof callback !== 'function') {
      throw new Error('task callback must be a function');
    }

    q.started = true;

    if (!(0, _isArray2.default)(data)) {
      data = [data];
    }

    if (data.length === 0 && q.idle()) {
      // call drain immediately if there are no tasks
      return (0, _setImmediate2.default)(function () {
        q.drain();
      });
    }

    for (var i = 0, l = data.length; i < l; i++) {
      var item = {
        data: data[i],
        callback: callback || _noop2.default
      };

      if (insertAtFront) {
        q._tasks.unshift(item);
      } else {
        q._tasks.push(item);
      }
    }

    if (!processingScheduled) {
      processingScheduled = true;
      (0, _setImmediate2.default)(function () {
        processingScheduled = false;
        q.process();
      });
    }
  }

  function _next(tasks) {
    return function (err) {
      numRunning -= 1;

      for (var i = 0, l = tasks.length; i < l; i++) {
        var task = tasks[i];
        var index = (0, _baseIndexOf2.default)(_workersList, task, 0);

        if (index === 0) {
          _workersList.shift();
        } else if (index > 0) {
          _workersList.splice(index, 1);
        }

        task.callback.apply(task, arguments);

        if (err != null) {
          q.error(err, task.data);
        }
      }

      if (numRunning <= q.concurrency - q.buffer) {
        q.unsaturated();
      }

      if (q.idle()) {
        q.drain();
      }

      q.process();
    };
  }

  var isProcessing = false;
  var q = {
    _tasks: new _DoublyLinkedList2.default(),
    concurrency: concurrency,
    payload: payload,
    saturated: _noop2.default,
    unsaturated: _noop2.default,
    buffer: concurrency / 4,
    empty: _noop2.default,
    drain: _noop2.default,
    error: _noop2.default,
    started: false,
    paused: false,
    push: function push(data, callback) {
      _insert(data, false, callback);
    },
    kill: function kill() {
      q.drain = _noop2.default;

      q._tasks.empty();
    },
    unshift: function unshift(data, callback) {
      _insert(data, true, callback);
    },
    remove: function remove(testFn) {
      q._tasks.remove(testFn);
    },
    process: function process() {
      // Avoid trying to start too many processing operations. This can occur
      // when callbacks resolve synchronously (#1267).
      if (isProcessing) {
        return;
      }

      isProcessing = true;

      while (!q.paused && numRunning < q.concurrency && q._tasks.length) {
        var tasks = [],
            data = [];
        var l = q._tasks.length;
        if (q.payload) l = Math.min(l, q.payload);

        for (var i = 0; i < l; i++) {
          var node = q._tasks.shift();

          tasks.push(node);

          _workersList.push(node);

          data.push(node.data);
        }

        numRunning += 1;

        if (q._tasks.length === 0) {
          q.empty();
        }

        if (numRunning === q.concurrency) {
          q.saturated();
        }

        var cb = (0, _onlyOnce2.default)(_next(tasks));

        _worker(data, cb);
      }

      isProcessing = false;
    },
    length: function length() {
      return q._tasks.length;
    },
    running: function running() {
      return numRunning;
    },
    workersList: function workersList() {
      return _workersList;
    },
    idle: function idle() {
      return q._tasks.length + numRunning === 0;
    },
    pause: function pause() {
      q.paused = true;
    },
    resume: function resume() {
      if (q.paused === false) {
        return;
      }

      q.paused = false;
      (0, _setImmediate2.default)(q.process);
    }
  };
  return q;
}

module.exports = exports['default'];

/***/ }),
/* 934 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var baseFindIndex = __webpack_require__(935),
    baseIsNaN = __webpack_require__(936),
    strictIndexOf = __webpack_require__(937);
/**
 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */


function baseIndexOf(array, value, fromIndex) {
  return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
}

module.exports = baseIndexOf;

/***/ }),
/* 935 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * The base implementation of `_.findIndex` and `_.findLastIndex` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseFindIndex(array, predicate, fromIndex, fromRight) {
  var length = array.length,
      index = fromIndex + (fromRight ? 1 : -1);

  while (fromRight ? index-- : ++index < length) {
    if (predicate(array[index], index, array)) {
      return index;
    }
  }

  return -1;
}

module.exports = baseFindIndex;

/***/ }),
/* 936 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * The base implementation of `_.isNaN` without support for number objects.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 */
function baseIsNaN(value) {
  return value !== value;
}

module.exports = baseIsNaN;

/***/ }),
/* 937 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * A specialized version of `_.indexOf` which performs strict equality
 * comparisons of values, i.e. `===`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function strictIndexOf(array, value, fromIndex) {
  var index = fromIndex - 1,
      length = array.length;

  while (++index < length) {
    if (array[index] === value) {
      return index;
    }
  }

  return -1;
}

module.exports = strictIndexOf;

/***/ }),
/* 938 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * This method returns `undefined`.
 *
 * @static
 * @memberOf _
 * @since 2.3.0
 * @category Util
 * @example
 *
 * _.times(2, _.noop);
 * // => [undefined, undefined]
 */
function noop() {// No operation performed.
}

module.exports = noop;

/***/ }),
/* 939 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = onlyOnce;

function onlyOnce(fn) {
  return function () {
    if (fn === null) throw new Error("Callback was already called.");
    var callFn = fn;
    fn = null;
    callFn.apply(this, arguments);
  };
}

module.exports = exports["default"];

/***/ }),
/* 940 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = DLL; // Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation
// used for queues. This implementation assumes that the node provided by the user can be modified
// to adjust the next and last properties. We implement only the minimal functionality
// for queue support.

function DLL() {
  this.head = this.tail = null;
  this.length = 0;
}

function setInitial(dll, node) {
  dll.length = 1;
  dll.head = dll.tail = node;
}

DLL.prototype.removeLink = function (node) {
  if (node.prev) node.prev.next = node.next;else this.head = node.next;
  if (node.next) node.next.prev = node.prev;else this.tail = node.prev;
  node.prev = node.next = null;
  this.length -= 1;
  return node;
};

DLL.prototype.empty = function () {
  while (this.head) this.shift();

  return this;
};

DLL.prototype.insertAfter = function (node, newNode) {
  newNode.prev = node;
  newNode.next = node.next;
  if (node.next) node.next.prev = newNode;else this.tail = newNode;
  node.next = newNode;
  this.length += 1;
};

DLL.prototype.insertBefore = function (node, newNode) {
  newNode.prev = node.prev;
  newNode.next = node;
  if (node.prev) node.prev.next = newNode;else this.head = newNode;
  node.prev = newNode;
  this.length += 1;
};

DLL.prototype.unshift = function (node) {
  if (this.head) this.insertBefore(this.head, node);else setInitial(this, node);
};

DLL.prototype.push = function (node) {
  if (this.tail) this.insertAfter(this.tail, node);else setInitial(this, node);
};

DLL.prototype.shift = function () {
  return this.head && this.removeLink(this.head);
};

DLL.prototype.pop = function () {
  return this.tail && this.removeLink(this.tail);
};

DLL.prototype.toArray = function () {
  var arr = Array(this.length);
  var curr = this.head;

  for (var idx = 0; idx < this.length; idx++) {
    arr[idx] = curr.data;
    curr = curr.next;
  }

  return arr;
};

DLL.prototype.remove = function (testFn) {
  var curr = this.head;

  while (!!curr) {
    var next = curr.next;

    if (testFn(curr)) {
      this.removeLink(curr);
    }

    curr = next;
  }

  return this;
};

module.exports = exports["default"];

/***/ }),
/* 941 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = asyncify;

var _isObject = __webpack_require__(177);

var _isObject2 = _interopRequireDefault(_isObject);

var _initialParams = __webpack_require__(942);

var _initialParams2 = _interopRequireDefault(_initialParams);

var _setImmediate = __webpack_require__(362);

var _setImmediate2 = _interopRequireDefault(_setImmediate);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
/**
 * Take a sync function and make it async, passing its return value to a
 * callback. This is useful for plugging sync functions into a waterfall,
 * series, or other async functions. Any arguments passed to the generated
 * function will be passed to the wrapped function (except for the final
 * callback argument). Errors thrown will be passed to the callback.
 *
 * If the function passed to `asyncify` returns a Promise, that promises's
 * resolved/rejected state will be used to call the callback, rather than simply
 * the synchronous return value.
 *
 * This also means you can asyncify ES2017 `async` functions.
 *
 * @name asyncify
 * @static
 * @memberOf module:Utils
 * @method
 * @alias wrapSync
 * @category Util
 * @param {Function} func - The synchronous function, or Promise-returning
 * function to convert to an {@link AsyncFunction}.
 * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be
 * invoked with `(args..., callback)`.
 * @example
 *
 * // passing a regular synchronous function
 * async.waterfall([
 *     async.apply(fs.readFile, filename, "utf8"),
 *     async.asyncify(JSON.parse),
 *     function (data, next) {
 *         // data is the result of parsing the text.
 *         // If there was a parsing error, it would have been caught.
 *     }
 * ], callback);
 *
 * // passing a function returning a promise
 * async.waterfall([
 *     async.apply(fs.readFile, filename, "utf8"),
 *     async.asyncify(function (contents) {
 *         return db.model.create(contents);
 *     }),
 *     function (model, next) {
 *         // `model` is the instantiated model object.
 *         // If there was an error, this function would be skipped.
 *     }
 * ], callback);
 *
 * // es2017 example, though `asyncify` is not needed if your JS environment
 * // supports async functions out of the box
 * var q = async.queue(async.asyncify(async function(file) {
 *     var intermediateStep = await processFile(file);
 *     return await somePromise(intermediateStep)
 * }));
 *
 * q.push(files);
 */


function asyncify(func) {
  return (0, _initialParams2.default)(function (args, callback) {
    var result;

    try {
      result = func.apply(this, args);
    } catch (e) {
      return callback(e);
    } // if result is Promise object


    if ((0, _isObject2.default)(result) && typeof result.then === 'function') {
      result.then(function (value) {
        invokeCallback(callback, null, value);
      }, function (err) {
        invokeCallback(callback, err.message ? err : new Error(err));
      });
    } else {
      callback(null, result);
    }
  });
}

function invokeCallback(callback, error, value) {
  try {
    callback(error, value);
  } catch (e) {
    (0, _setImmediate2.default)(rethrow, e);
  }
}

function rethrow(error) {
  throw error;
}

module.exports = exports['default'];

/***/ }),
/* 942 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (fn) {
  return function ()
  /*...args, callback*/
  {
    var args = (0, _slice2.default)(arguments);
    var callback = args.pop();
    fn.call(this, args, callback);
  };
};

var _slice = __webpack_require__(363);

var _slice2 = _interopRequireDefault(_slice);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

module.exports = exports['default'];

/***/ }),
/* 943 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isFn = __webpack_require__(944);

var setImmediate = __webpack_require__(945);

module.exports = function (promise) {
  if (!isFn(promise.then)) {
    throw new TypeError('Expected a promise');
  }

  return function (cb) {
    promise.then(function (data) {
      setImmediate(cb, null, data);
    }, function (err) {
      setImmediate(cb, err);
    });
  };
};

/***/ }),
/* 944 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var toString = Object.prototype.toString;

module.exports = function (x) {
  return toString.call(x) === '[object Function]';
};

/***/ }),
/* 945 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(setImmediate) {

module.exports = typeof setImmediate === 'function' ? setImmediate : function setImmediate() {
  var args = [].slice.apply(arguments);
  args.splice(1, 0, 0);
  setTimeout.apply(null, args);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(91).setImmediate))

/***/ }),
/* 946 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const errcode = __webpack_require__(2);

const pTimeout = __webpack_require__(59);

const PeerInfo = __webpack_require__(17);

const c = __webpack_require__(51);

const LimitedPeerList = __webpack_require__(947);

const Message = __webpack_require__(38);

const Query = __webpack_require__(191);

const utils = __webpack_require__(18);

module.exports = dht => {
  /**
   * Check for providers from a single node.
   *
   * @param {PeerId} peer
   * @param {CID} key
   * @returns {Promise<Message>}
   *
   * @private
   */
  const findProvidersSingle = async (peer, key) => {
    // eslint-disable-line require-await
    const msg = new Message(Message.TYPES.GET_PROVIDERS, key.buffer, 0);
    return dht.network.sendRequest(peer, msg);
  };

  return {
    /**
     * Announce to the network that we can provide given key's value.
     * @param {CID} key
     * @returns {Promise<void>}
     */
    async provide(key) {
      dht._log('provide: %s', key.toBaseEncodedString());

      const errors = []; // Add peer as provider

      await dht.providers.addProvider(key, dht.peerInfo.id);
      const msg = new Message(Message.TYPES.ADD_PROVIDER, key.buffer, 0);
      msg.providerPeers = [dht.peerInfo]; // Notify closest peers

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;

      var _iteratorError;

      try {
        for (var _iterator = _asyncIterator(dht.getClosestPeers(key.buffer)), _step, _value; _step = await _iterator.next(), _iteratorNormalCompletion = _step.done, _value = await _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
          const peer = _value;

          dht._log('putProvider %s to %s', key.toBaseEncodedString(), peer.toB58String());

          try {
            await dht.network.sendMessage(peer, msg);
          } catch (err) {
            errors.push(err);
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            await _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      if (errors.length) {
        // TODO:
        // This should be infrequent. This means a peer we previously connected
        // to failed to exchange the provide message. If getClosestPeers was an
        // iterator, we could continue to pull until we announce to kBucketSize peers.
        throw errcode("Failed to provide to ".concat(errors.length, " of ").concat(dht.kBucketSize, " peers"), 'ERR_SOME_PROVIDES_FAILED', {
          errors
        });
      }
    },

    /**
     * Search the dht for up to `K` providers of the given CID.
     * @param {CID} key
     * @param {Object} options - findProviders options
     * @param {number} options.timeout - how long the query should maximally run, in milliseconds (default: 60000)
     * @param {number} options.maxNumProviders - maximum number of providers to find
     * @returns {AsyncIterable<PeerInfo>}
     */
    findProviders(key, options = {}) {
      return _wrapAsyncGenerator(function* () {
        const providerTimeout = options.timeout || c.minute;
        const n = options.maxNumProviders || c.K;

        dht._log('findProviders %s', key.toBaseEncodedString());

        const out = new LimitedPeerList(n);
        const provs = yield _awaitAsyncGenerator(dht.providers.getProviders(key));
        provs.forEach(id => {
          let info;

          if (dht.peerStore.has(id)) {
            info = dht.peerStore.get(id);
          } else {
            info = dht.peerStore.put(new PeerInfo(id));
          }

          out.push(info);
        }); // All done

        if (out.length >= n) {
          // yield values
          for (const pInfo of out.toArray()) {
            yield pInfo;
          }

          return;
        } // need more, query the network


        const paths = [];
        const query = new Query(dht, key.buffer, (pathIndex, numPaths) => {
          // This function body runs once per disjoint path
          const pathSize = utils.pathSize(n - out.length, numPaths);
          const pathProviders = new LimitedPeerList(pathSize);
          paths.push(pathProviders); // Here we return the query function to use on this particular disjoint path

          return async peer => {
            const msg = await findProvidersSingle(peer, key);
            const provs = msg.providerPeers;

            dht._log('(%s) found %s provider entries', dht.peerInfo.id.toB58String(), provs.length);

            provs.forEach(prov => {
              pathProviders.push(dht.peerStore.put(prov));
            }); // hooray we have all that we want

            if (pathProviders.length >= pathSize) {
              return {
                pathComplete: true
              };
            } // it looks like we want some more


            return {
              closerPeers: msg.closerPeers
            };
          };
        });
        const peers = dht.routingTable.closestPeers(key.buffer, dht.kBucketSize);

        try {
          yield _awaitAsyncGenerator(pTimeout(query.run(peers), providerTimeout));
        } catch (err) {
          if (err.name !== pTimeout.TimeoutError.name) {
            throw err;
          }
        } finally {
          query.stop();
        } // combine peers from each path


        paths.forEach(path => {
          path.toArray().forEach(peer => {
            out.push(peer);
          });
        });

        if (out.length === 0) {
          throw errcode(new Error('no providers found'), 'ERR_NOT_FOUND');
        }

        for (const pInfo of out.toArray()) {
          yield pInfo;
        }
      })();
    }

  };
};

/***/ }),
/* 947 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const PeerList = __webpack_require__(948);
/**
 * Like PeerList but with a length restriction.
 */


class LimitedPeerList extends PeerList {
  /**
   * Create a new limited peer list.
   *
   * @param {number} limit
   */
  constructor(limit) {
    super();
    this.limit = limit;
  }
  /**
   * Add a PeerInfo if it fits in the list
   *
   * @param {PeerInfo} info
   * @returns {bool}
   */


  push(info) {
    if (this.length < this.limit) {
      return super.push(info);
    }

    return false;
  }

}

module.exports = LimitedPeerList;

/***/ }),
/* 948 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * A list of unique peer infos.
 */

class PeerList {
  constructor() {
    this.list = [];
  }
  /**
   * Add a new info. Returns `true` if it was a new one
   *
   * @param {PeerInfo} info
   * @returns {bool}
   */


  push(info) {
    if (!this.has(info)) {
      this.list.push(info);
      return true;
    }

    return false;
  }
  /**
   * Check if this PeerInfo is already in here.
   *
   * @param {PeerInfo} info
   * @returns {bool}
   */


  has(info) {
    const match = this.list.find(i => i.id.isEqual(info.id));
    return Boolean(match);
  }
  /**
   * Get the list as an array.
   *
   * @returns {Array<PeerInfo>}
   */


  toArray() {
    return this.list.slice();
  }
  /**
   * Remove the last element
   *
   * @returns {PeerInfo}
   */


  pop() {
    return this.list.pop();
  }
  /**
   * The length of the list
   *
   * @type {number}
   */


  get length() {
    return this.list.length;
  }

}

module.exports = PeerList;

/***/ }),
/* 949 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

const errcode = __webpack_require__(2);

const pTimeout = __webpack_require__(59);

const PeerId = __webpack_require__(9);

const PeerInfo = __webpack_require__(17);

const crypto = __webpack_require__(28);

const c = __webpack_require__(51);

const Message = __webpack_require__(38);

const Query = __webpack_require__(191);

const utils = __webpack_require__(18);

module.exports = dht => {
  /**
   * Look if we are connected to a peer with the given id.
   * Returns the `PeerInfo` for it, if found, otherwise `undefined`.
   * @param {PeerId} peer
   * @returns {Promise<PeerInfo>}
   */
  const findPeerLocal = async peer => {
    dht._log('findPeerLocal %s', peer.toB58String());

    const p = await dht.routingTable.find(peer);

    if (!p || !dht.peerStore.has(p)) {
      return;
    }

    return dht.peerStore.get(p);
  };
  /**
   * Get a value via rpc call for the given parameters.
   * @param {PeerId} peer
   * @param {Buffer} key
   * @returns {Promise<Message>}
   * @private
   */


  const getValueSingle = async (peer, key) => {
    // eslint-disable-line require-await
    const msg = new Message(Message.TYPES.GET_VALUE, key, 0);
    return dht.network.sendRequest(peer, msg);
  };
  /**
   * Find close peers for a given peer
   * @param {Buffer} key
   * @param {PeerId} peer
   * @returns {Promise<Array<PeerInfo>>}
   * @private
   */


  const closerPeersSingle = async (key, peer) => {
    dht._log('closerPeersSingle %b from %s', key, peer.toB58String());

    const msg = await dht.peerRouting._findPeerSingle(peer, new PeerId(key));
    return msg.closerPeers.filter(pInfo => !dht._isSelf(pInfo.id)).map(pInfo => dht.peerStore.put(pInfo));
  };
  /**
   * Get the public key directly from a node.
   * @param {PeerId} peer
   * @returns {Promise<PublicKey>}
   * @private
   */


  const getPublicKeyFromNode = async peer => {
    const pkKey = utils.keyForPublicKey(peer);
    const msg = await getValueSingle(peer, pkKey);

    if (!msg.record || !msg.record.value) {
      throw errcode("Node not responding with its public key: ".concat(peer.toB58String()), 'ERR_INVALID_RECORD');
    }

    const recPeer = PeerId.createFromPubKey(msg.record.value); // compare hashes of the pub key

    if (!recPeer.isEqual(peer)) {
      throw errcode('public key does not match id', 'ERR_PUBLIC_KEY_DOES_NOT_MATCH_ID');
    }

    return recPeer.pubKey;
  };

  return {
    /**
     * Ask peer `peer` if they know where the peer with id `target` is.
     * @param {PeerId} peer
     * @param {PeerId} target
     * @returns {Promise<Message>}
     * @private
     */
    async _findPeerSingle(peer, target) {
      // eslint-disable-line require-await
      dht._log('findPeerSingle %s', peer.toB58String());

      const msg = new Message(Message.TYPES.FIND_NODE, target.id, 0);
      return dht.network.sendRequest(peer, msg);
    },

    /**
     * Search for a peer with the given ID.
     * @param {PeerId} id
     * @param {Object} options - findPeer options
     * @param {number} options.timeout - how long the query should maximally run, in milliseconds (default: 60000)
     * @returns {Promise<PeerInfo>}
     */
    async findPeer(id, options = {}) {
      options.timeout = options.timeout || c.minute;

      dht._log('findPeer %s', id.toB58String()); // Try to find locally


      const pi = await findPeerLocal(id); // already got it

      if (pi != null) {
        dht._log('found local');

        return pi;
      }

      const key = await utils.convertPeerId(id);
      const peers = dht.routingTable.closestPeers(key, dht.kBucketSize);

      if (peers.length === 0) {
        throw errcode(new Error('Peer lookup failed'), 'ERR_LOOKUP_FAILED');
      } // sanity check


      const match = peers.find(p => p.isEqual(id));

      if (match && dht.peerStore.has(id)) {
        dht._log('found in peerStore');

        return dht.peerStore.get(id);
      } // query the network


      const query = new Query(dht, id.id, () => {
        // There is no distinction between the disjoint paths,
        // so there are no per-path variables in dht scope.
        // Just return the actual query function.
        return async peer => {
          const msg = await this._findPeerSingle(peer, id);
          const match = msg.closerPeers.find(p => p.id.isEqual(id)); // found it

          if (match) {
            return {
              peer: match,
              queryComplete: true
            };
          }

          return {
            closerPeers: msg.closerPeers
          };
        };
      });
      let error, result;

      try {
        result = await pTimeout(query.run(peers), options.timeout);
      } catch (err) {
        error = err;
      }

      query.stop();
      if (error) throw error;
      let success = false;
      result.paths.forEach(result => {
        if (result.success) {
          success = true;
          dht.peerStore.put(result.peer);
        }
      });

      dht._log('findPeer %s: %s', id.toB58String(), success);

      if (!success) {
        throw errcode(new Error('No peer found'), 'ERR_NOT_FOUND');
      }

      return dht.peerStore.get(id);
    },

    /**
     * Kademlia 'node lookup' operation.
     * @param {Buffer} key
     * @param {Object} [options]
     * @param {boolean} [options.shallow] shallow query (default: false)
     * @returns {AsyncIterable<PeerId>}
     */
    getClosestPeers(key, options = {
      shallow: false
    }) {
      return _wrapAsyncGenerator(function* () {
        dht._log('getClosestPeers to %b', key);

        const id = yield _awaitAsyncGenerator(utils.convertBuffer(key));
        const tablePeers = dht.routingTable.closestPeers(id, dht.kBucketSize);
        const q = new Query(dht, key, () => {
          // There is no distinction between the disjoint paths,
          // so there are no per-path variables in dht scope.
          // Just return the actual query function.
          return async peer => {
            const closer = await closerPeersSingle(key, peer);
            return {
              closerPeers: closer,
              pathComplete: options.shallow ? true : undefined
            };
          };
        });
        const res = yield _awaitAsyncGenerator(q.run(tablePeers));

        if (!res || !res.finalSet) {
          return [];
        }

        const sorted = yield _awaitAsyncGenerator(utils.sortClosestPeers(Array.from(res.finalSet), id));

        for (const pId of sorted.slice(0, dht.kBucketSize)) {
          yield pId;
        }
      })();
    },

    /**
     * Get the public key for the given peer id.
     * @param {PeerId} peer
     * @returns {Promise<PubKey>}
     */
    async getPublicKey(peer) {
      dht._log('getPublicKey %s', peer.toB58String()); // local check


      let info;

      if (dht.peerStore.has(peer)) {
        info = dht.peerStore.get(peer);

        if (info && info.id.pubKey) {
          dht._log('getPublicKey: found local copy');

          return info.id.pubKey;
        }
      } else {
        info = dht.peerStore.put(new PeerInfo(peer));
      } // try the node directly


      let pk;

      try {
        pk = await getPublicKeyFromNode(peer);
      } catch (err) {
        // try dht directly
        const pkKey = utils.keyForPublicKey(peer);
        const value = await dht.get(pkKey);
        pk = crypto.keys.unmarshalPublicKey(value);
      }

      info.id = new PeerId(peer.id, null, pk);
      dht.peerStore.put(info);
      return pk;
    }

  };
};

/***/ }),
/* 950 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const cache = __webpack_require__(156);

const varint = __webpack_require__(19);

const PeerId = __webpack_require__(9);

const {
  Key
} = __webpack_require__(14);

const {
  default: Queue
} = __webpack_require__(50);

const c = __webpack_require__(51);

const utils = __webpack_require__(18);
/**
 * This class manages known providers.
 * A provider is a peer that we know to have the content for a given CID.
 *
 * Every `cleanupInterval` providers are checked if they
 * are still valid, i.e. younger than the `provideValidity`.
 * If they are not, they are deleted.
 *
 * To ensure the list survives restarts of the daemon,
 * providers are stored in the datastore, but to ensure
 * access is fast there is an LRU cache in front of that.
 */


class Providers {
  /**
   * @param {Object} datastore
   * @param {PeerId} [self]
   * @param {number} [cacheSize=256]
   */
  constructor(datastore, self, cacheSize) {
    this.datastore = datastore;
    this._log = utils.logger(self, 'providers');
    /**
     * How often invalid records are cleaned. (in seconds)
     *
     * @type {number}
     */

    this.cleanupInterval = c.PROVIDERS_CLEANUP_INTERVAL;
    /**
     * How long is a provider valid for. (in seconds)
     *
     * @type {number}
     */

    this.provideValidity = c.PROVIDERS_VALIDITY;
    /**
     * LRU cache size
     *
     * @type {number}
     */

    this.lruCacheSize = cacheSize || c.PROVIDERS_LRU_CACHE_SIZE;
    this.providers = cache(this.lruCacheSize);
    this.syncQueue = new Queue({
      concurrency: 1
    });
  }
  /**
   * Release any resources.
   *
   * @returns {void}
   */


  stop() {
    if (this._cleaner) {
      clearInterval(this._cleaner);
      this._cleaner = null;
    }
  }
  /**
   * Check all providers if they are still valid, and if not delete them.
   *
   * @returns {Promise<void>}
   * @private
   */


  _cleanup() {
    return this.syncQueue.add(async () => {
      this._log('start cleanup');

      const start = Date.now();
      let count = 0;
      let deleteCount = 0;
      const deleted = new Map();
      const batch = this.datastore.batch(); // Get all provider entries from the datastore

      const query = this.datastore.query({
        prefix: c.PROVIDERS_KEY_PREFIX
      });
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;

      var _iteratorError;

      try {
        for (var _iterator = _asyncIterator(query), _step, _value; _step = await _iterator.next(), _iteratorNormalCompletion = _step.done, _value = await _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
          const entry = _value;

          try {
            // Add a delete to the batch for each expired entry
            const {
              cid,
              peerId
            } = parseProviderKey(entry.key);
            const time = readTime(entry.value);
            const now = Date.now();
            const delta = now - time;
            const expired = delta > this.provideValidity;

            this._log('comparing: %d - %d = %d > %d %s', now, time, delta, this.provideValidity, expired ? '(expired)' : '');

            if (expired) {
              deleteCount++;
              batch.delete(entry.key);
              const peers = deleted.get(cid) || new Set();
              peers.add(peerId);
              deleted.set(cid, peers);
            }

            count++;
          } catch (err) {
            this._log.error(err.message);
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            await _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      this._log('deleting %d / %d entries', deleteCount, count); // Commit the deletes to the datastore


      if (deleted.size) {
        await batch.commit();
      } // Clear expired entries from the cache


      for (const [cid, peers] of deleted) {
        const key = makeProviderKey(cid);
        const provs = this.providers.get(key);

        if (provs) {
          for (const peerId of peers) {
            provs.delete(peerId);
          }

          if (provs.size === 0) {
            this.providers.remove(key);
          } else {
            this.providers.set(key, provs);
          }
        }
      }

      this._log('Cleanup successful (%dms)', Date.now() - start);
    });
  }
  /**
   * Get the currently known provider peer ids for a given CID.
   *
   * @param {CID} cid
   * @returns {Promise<Map<String, Date>>}
   *
   * @private
   */


  async _getProvidersMap(cid) {
    const cacheKey = makeProviderKey(cid);
    let provs = this.providers.get(cacheKey);

    if (!provs) {
      provs = await loadProviders(this.datastore, cid);
      this.providers.set(cacheKey, provs);
    }

    return provs;
  }

  get cleanupInterval() {
    return this._cleanupInterval;
  }

  set cleanupInterval(val) {
    this._cleanupInterval = val;

    if (this._cleaner) {
      clearInterval(this._cleaner);
    }

    this._cleaner = setInterval(() => this._cleanup(), this.cleanupInterval);
  }
  /**
   * Add a new provider for the given CID.
   *
   * @param {CID} cid
   * @param {PeerId} provider
   * @returns {Promise<void>}
   */


  async addProvider(cid, provider) {
    // eslint-disable-line require-await
    return this.syncQueue.add(async () => {
      this._log('addProvider %s', cid.toBaseEncodedString());

      const provs = await this._getProvidersMap(cid);

      this._log('loaded %s provs', provs.size);

      const now = Date.now();
      provs.set(utils.encodeBase32(provider.id), now);
      const dsKey = makeProviderKey(cid);
      this.providers.set(dsKey, provs);
      return writeProviderEntry(this.datastore, cid, provider, now);
    });
  }
  /**
   * Get a list of providers for the given CID.
   *
   * @param {CID} cid
   * @returns {Promise<Array<PeerId>>}
   */


  async getProviders(cid) {
    // eslint-disable-line require-await
    return this.syncQueue.add(async () => {
      this._log('getProviders %s', cid.toBaseEncodedString());

      const provs = await this._getProvidersMap(cid);
      return [...provs.keys()].map(base32PeerId => {
        return new PeerId(utils.decodeBase32(base32PeerId));
      });
    });
  }

}
/**
 * Encode the given key its matching datastore key.
 *
 * @param {CID|string} cid - cid or base32 encoded string
 * @returns {string}
 *
 * @private
 */


function makeProviderKey(cid) {
  cid = typeof cid === 'string' ? cid : utils.encodeBase32(cid.buffer);
  return c.PROVIDERS_KEY_PREFIX + cid;
}
/**
 * Write a provider into the given store.
 *
 * @param {Datastore} store
 * @param {CID} cid
 * @param {PeerId} peer
 * @param {number} time
 * @returns {Promise<void>}
 *
 * @private
 */


async function writeProviderEntry(store, cid, peer, time) {
  // eslint-disable-line require-await
  const dsKey = [makeProviderKey(cid), '/', utils.encodeBase32(peer.id)].join('');
  const key = new Key(dsKey);
  const buffer = Buffer.from(varint.encode(time));
  return store.put(key, buffer);
}
/**
 * Parse the CID and provider peer id from the key
 *
 * @param {DKey} key
 * @returns {Object} object with peer id and cid
 *
 * @private
 */


function parseProviderKey(key) {
  const parts = key.toString().split('/');

  if (parts.length !== 4) {
    throw new Error('incorrectly formatted provider entry key in datastore: ' + key);
  }

  return {
    cid: parts[2],
    peerId: parts[3]
  };
}
/**
 * Load providers for the given CID from the store.
 *
 * @param {Datastore} store
 * @param {CID} cid
 * @returns {Promise<Map<PeerId, Date>>}
 *
 * @private
 */


async function loadProviders(store, cid) {
  const providers = new Map();
  const query = store.query({
    prefix: makeProviderKey(cid)
  });
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;

  var _iteratorError2;

  try {
    for (var _iterator2 = _asyncIterator(query), _step2, _value2; _step2 = await _iterator2.next(), _iteratorNormalCompletion2 = _step2.done, _value2 = await _step2.value, !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {
      const entry = _value2;
      const {
        peerId
      } = parseProviderKey(entry.key);
      providers.set(peerId, readTime(entry.value));
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
        await _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return providers;
}

function readTime(buf) {
  return varint.decode(buf);
}

module.exports = Providers;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 951 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const crypto = __webpack_require__(28);

const multihashing = __webpack_require__(22);

const PeerId = __webpack_require__(9);

const assert = __webpack_require__(13);

const AbortController = __webpack_require__(61);

const errcode = __webpack_require__(2);

const times = __webpack_require__(952);

const c = __webpack_require__(51);

const {
  logger
} = __webpack_require__(18);

class RandomWalk {
  /**
   * @constructor
   * @param {DHT} dht
   * @param {object} options
   * @param {randomWalkOptions.enabled} options.enabled
   * @param {randomWalkOptions.queriesPerPeriod} options.queriesPerPeriod
   * @param {randomWalkOptions.interval} options.interval
   * @param {randomWalkOptions.timeout} options.timeout
   * @param {randomWalkOptions.delay} options.delay
   * @param {DHT} options.dht
   */
  constructor(dht, options) {
    assert(dht, 'Random Walk needs an instance of the Kademlia DHT');
    this._kadDHT = dht;
    this._options = _objectSpread({}, c.defaultRandomWalk, {}, options);
    this.log = logger(dht.peerInfo.id, 'random-walk');
    this._timeoutId = undefined;
  }
  /**
   * Start the Random Walk process. This means running a number of queries
   * every interval requesting random data. This is done to keep the dht
   * healthy over time.
   *
   * @returns {void}
   */


  start() {
    // Don't run twice
    if (this._timeoutId || !this._options.enabled) {
      return;
    } // Start doing random walks after `this._options.delay`


    this._timeoutId = setTimeout(() => {
      // Start runner immediately
      this._runPeriodically();
    }, this._options.delay);
  }
  /**
   * Stop the random-walk process. Any active
   * queries will be aborted.
   *
   * @returns {void}
   */


  stop() {
    if (this._timeoutId) {
      clearTimeout(this._timeoutId);
      this._timeoutId = undefined;
    }

    this._controller && this._controller.abort();
  }
  /**
   * Run function `randomWalk._walk` on every `options.interval` ms
   *
   * @private
   */


  async _runPeriodically() {
    // run until the walk has been stopped
    while (this._timeoutId) {
      try {
        await this._walk(this._options.queriesPerPeriod, this._options.timeout);
      } catch (err) {
        this._kadDHT._log.error('random-walk:error', err);
      } // Each subsequent walk should run on a `this._options.interval` interval


      await new Promise(resolve => {
        this._timeoutId = setTimeout(resolve, this._options.interval);
      });
    }
  }
  /**
   * Do the random walk work.
   *
   * @param {number} queries
   * @param {number} walkTimeout
   * @returns {Promise}
   *
   * @private
   */


  async _walk(queries, walkTimeout) {
    this.log('start');
    this._controller = new AbortController();

    try {
      await times(queries, async index => {
        this.log('running query %d', index);

        try {
          const id = await this._randomPeerId(); // Check if we've happened to already abort

          if (!this._controller) return;
          await this._query(id, {
            timeout: walkTimeout,
            signal: this._controller.signal
          });
        } catch (err) {
          if (err && err.code !== 'ETIMEDOUT') {
            this.log.error('query %d finished with error', index, err);
            throw err;
          }
        }

        this.log('finished query %d', index);
      });
    } finally {
      this._controller = null;
      this.log('finished queries');
    }
  }
  /**
   * The query run during a random walk request.
   *
   * TODO: While query currently supports an abort controller, it is not
   * yet supported by `DHT.findPeer`. Once https://github.com/libp2p/js-libp2p-kad-dht/pull/82
   * is complete, and AbortController support has been added to the
   * DHT query functions, the abort here will just work, provided the
   * functions support `options.signal`. Once done, this todo should be
   * removed.
   *
   * @param {PeerId} id
   * @param {object} options
   * @param {number} options.timeout
   * @param {AbortControllerSignal} options.signal
   * @returns {Promise}
   *
   * @private
   */


  async _query(id, options) {
    this.log('query:%s', id.toB58String());
    let peer;

    try {
      peer = await this._kadDHT.findPeer(id, options);
    } catch (err) {
      if (err && err.code === 'ERR_NOT_FOUND') {
        // expected case, we asked for random stuff after all
        return;
      }

      throw err;
    }

    this.log('query:found', peer); // wait what, there was something found? Lucky day!

    throw errcode("random-walk: ACTUALLY FOUND PEER: ".concat(peer, ", ").concat(id.toB58String()), 'ERR_FOUND_RANDOM_PEER');
  }
  /**
   * Generate a random peer id for random-walk purposes.
   *
   * @returns {Promise<PeerId>}
   *
   * @private
   */


  async _randomPeerId() {
    const digest = await multihashing(crypto.randomBytes(16), 'sha2-256');
    return new PeerId(digest);
  }

}

module.exports = RandomWalk;

/***/ }),
/* 952 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const pMap = __webpack_require__(953);

const pTimes = async (count, mapper, options) => pMap(new Array(count).fill(), (element, index) => mapper(index), options);

module.exports = pTimes; // TODO: Remove this for the next major release

module.exports.default = pTimes;

/***/ }),
/* 953 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const pMap = (iterable, mapper, options) => new Promise((resolve, reject) => {
  options = Object.assign({
    concurrency: Infinity
  }, options);

  if (typeof mapper !== 'function') {
    throw new TypeError('Mapper function is required');
  }

  const {
    concurrency
  } = options;

  if (!(typeof concurrency === 'number' && concurrency >= 1)) {
    throw new TypeError("Expected `concurrency` to be a number from 1 and up, got `".concat(concurrency, "` (").concat(typeof concurrency, ")"));
  }

  const ret = [];
  const iterator = iterable[Symbol.iterator]();
  let isRejected = false;
  let isIterableDone = false;
  let resolvingCount = 0;
  let currentIndex = 0;

  const next = () => {
    if (isRejected) {
      return;
    }

    const nextItem = iterator.next();
    const i = currentIndex;
    currentIndex++;

    if (nextItem.done) {
      isIterableDone = true;

      if (resolvingCount === 0) {
        resolve(ret);
      }

      return;
    }

    resolvingCount++;
    Promise.resolve(nextItem.value).then(element => mapper(element, i)).then(value => {
      ret[i] = value;
      resolvingCount--;
      next();
    }, error => {
      isRejected = true;
      reject(error);
    });
  };

  for (let i = 0; i < concurrency; i++) {
    next();

    if (isIterableDone) {
      break;
    }
  }
});

module.exports = pMap; // TODO: Remove this for the next major release

module.exports.default = pMap;

/***/ }),
/* 954 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Keeps track of all running queries.
 */

class QueryManager {
  /**
   * Creates a new QueryManager.
   */
  constructor() {
    this.queries = new Set();
    this.running = false;
  }
  /**
   * Called when a query is started.
   *
   * @param {Query} query
   */


  queryStarted(query) {
    this.queries.add(query);
  }
  /**
   * Called when a query completes.
   *
   * @param {Query} query
   */


  queryCompleted(query) {
    this.queries.delete(query);
  }
  /**
   * Starts the query manager.
   */


  start() {
    this.running = true;
  }
  /**
   * Stops all queries.
   */


  stop() {
    this.running = false;

    for (const query of this.queries) {
      query.stop();
    }

    this.queries.clear();
  }

}

module.exports = QueryManager;

/***/ }),
/* 955 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const assert = __webpack_require__(13);

const PeerId = __webpack_require__(9);

const PeerInfo = __webpack_require__(17);

const multiaddr = __webpack_require__(20);

const mafmt = __webpack_require__(56);

const {
  EventEmitter
} = __webpack_require__(11);

const debug = __webpack_require__(1);

const log = debug('libp2p:bootstrap');
log.error = debug('libp2p:bootstrap:error');
/**
 * Emits 'peer' events on a regular interval for each peer in the provided list.
 */

class Bootstrap extends EventEmitter {
  /**
   * Constructs a new Bootstrap.
   *
   * @param {Object} options
   * @param {Array<string>} options.list - the list of peer addresses in multi-address format
   * @param {number} [options.interval] - the interval between emitting addresses in milliseconds (default: 10000)
   *
   */
  constructor(options = {}) {
    assert(options.list && options.list.length, 'Bootstrap requires a list of peer addresses');
    super();
    this._list = options.list;
    this._interval = options.interval || 10000;
    this._timer = null;
  }
  /**
   * Start emitting events.
   */


  start() {
    if (this._timer) {
      return;
    }

    this._timer = setInterval(() => this._discoverBootstrapPeers(), this._interval);

    this._discoverBootstrapPeers();
  }
  /**
   * Emit each address in the list as a PeerInfo.
   */


  _discoverBootstrapPeers() {
    this._list.forEach(async candidate => {
      if (!mafmt.P2P.matches(candidate)) {
        return log.error('Invalid multiaddr');
      }

      const ma = multiaddr(candidate);
      const peerId = PeerId.createFromB58String(ma.getPeerId());

      try {
        const peerInfo = await PeerInfo.create(peerId);
        peerInfo.multiaddrs.add(ma);
        this.emit('peer', peerInfo);
      } catch (err) {
        log.error('Invalid bootstrap peer id', err);
      }
    });
  }
  /**
   * Stop emitting events.
   */


  stop() {
    if (this._timer) {
      clearInterval(this._timer);
      this._timer = null;
    }
  }

}

exports = module.exports = Bootstrap;
exports.tag = 'bootstrap';

/***/ }),
/* 956 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const exporter = __webpack_require__(33);

const errCode = __webpack_require__(2);

const {
  normalizeCidPath,
  mapFile
} = __webpack_require__(29);

module.exports = function ({
  ipld,
  preload
}) {
  return (
    /*#__PURE__*/
    function () {
      var _ls = _wrapAsyncGenerator(function* (ipfsPath, options) {
        options = options || {};
        const path = normalizeCidPath(ipfsPath);
        const recursive = options.recursive;
        const pathComponents = path.split('/');

        if (options.preload !== false) {
          preload(pathComponents[0]);
        }

        const file = yield _awaitAsyncGenerator(exporter(ipfsPath, ipld, options));

        if (!file.unixfs) {
          throw errCode(new Error('dag node was not a UnixFS node'), 'ERR_NOT_UNIXFS');
        }

        if (file.unixfs.type === 'file') {
          return mapFile(file, options);
        }

        if (file.unixfs.type.includes('dir')) {
          if (recursive) {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;

            var _iteratorError;

            try {
              for (var _iterator = _asyncIterator(exporter.recursive(file.cid, ipld, options)), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
                const child = _value;

                if (file.cid.toBaseEncodedString() === child.cid.toBaseEncodedString()) {
                  continue;
                }

                yield mapFile(child, options);
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                  yield _awaitAsyncGenerator(_iterator.return());
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }

            return;
          }

          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;

          var _iteratorError2;

          try {
            for (var _iterator2 = _asyncIterator(file.content()), _step2, _value2; _step2 = yield _awaitAsyncGenerator(_iterator2.next()), _iteratorNormalCompletion2 = _step2.done, _value2 = yield _awaitAsyncGenerator(_step2.value), !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {
              let child = _value2;
              child = mapFile(child, options);
              child.depth--;
              yield child;
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                yield _awaitAsyncGenerator(_iterator2.return());
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }

          return;
        }

        throw errCode(new Error("Unknown UnixFS type ".concat(file.unixfs.type)), 'ERR_UNKNOWN_UNIXFS_TYPE');
      });

      function ls(_x, _x2) {
        return _ls.apply(this, arguments);
      }

      return ls;
    }()
  );
};

/***/ }),
/* 957 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const debug = __webpack_require__(1);

const parseDuration = __webpack_require__(154);

const crypto = __webpack_require__(28);

const errcode = __webpack_require__(2);

const log = debug('ipfs:name:publish');
log.error = debug('ipfs:name:publish:error');

const {
  OFFLINE_ERROR,
  normalizePath
} = __webpack_require__(29);

const {
  resolvePath
} = __webpack_require__(958);
/**
 * @typedef { import("../index") } IPFS
 */

/**
 * IPNS - Inter-Planetary Naming System
 *
 * @param {IPFS} self
 * @returns {Object}
 */


module.exports = ({
  ipns,
  dag,
  peerInfo,
  isOnline,
  keychain,
  options: constructorOptions
}) => {
  const lookupKey = async keyName => {
    if (keyName === 'self') {
      return peerInfo.id.privKey;
    }

    try {
      const pass = constructorOptions.pass;
      const pem = await keychain.exportKey(keyName, pass);
      const privateKey = await crypto.keys.import(pem, pass);
      return privateKey;
    } catch (err) {
      log.error(err);
      throw errcode(err, 'ERR_CANNOT_GET_KEY');
    }
  };
  /**
   * IPNS is a PKI namespace, where names are the hashes of public keys, and
   * the private key enables publishing new (signed) values. In both publish
   * and resolve, the default name used is the node's own PeerID,
   * which is the hash of its public key.
   *
   * @param {String} value ipfs path of the object to be published.
   * @param {Object} options ipfs publish options.
   * @param {boolean} options.resolve resolve given path before publishing.
   * @param {String} options.lifetime time duration that the record will be valid for.
  This accepts durations such as "300s", "1.5h" or "2h45m". Valid time units are
  "ns", "ms", "s", "m", "h". Default is 24h.
    * @param {String} options.ttl time duration this record should be cached for (NOT IMPLEMENTED YET).
    * This accepts durations such as "300s", "1.5h" or "2h45m". Valid time units are
    "ns", "ms", "s", "m", "h" (caution: experimental).
    * @param {String} options.key name of the key to be used, as listed by 'ipfs key list -l'.
    * @param {function(Error)} [callback]
    * @returns {Promise|void}
    */


  return async function publish(value, options) {
    options = options || {};
    const resolve = !(options.resolve === false);
    const lifetime = options.lifetime || '24h';
    const key = options.key || 'self';

    if (!isOnline()) {
      throw errcode(new Error(OFFLINE_ERROR), 'OFFLINE_ERROR');
    } // TODO: params related logic should be in the core implementation
    // Normalize path value


    try {
      value = normalizePath(value);
    } catch (err) {
      log.error(err);
      throw err;
    }

    let pubLifetime;

    try {
      pubLifetime = parseDuration(lifetime); // Calculate lifetime with nanoseconds precision

      pubLifetime = pubLifetime.toFixed(6);
    } catch (err) {
      log.error(err);
      throw err;
    } // TODO: ttl human for cache


    const results = await Promise.all([// verify if the path exists, if not, an error will stop the execution
    lookupKey(key), resolve ? resolvePath({
      ipns,
      dag
    }, value) : Promise.resolve()]); // Start publishing process

    return ipns.publish(results[0], value, pubLifetime);
  };
};

/***/ }),
/* 958 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const isIPFS = __webpack_require__(55); // resolves the given path by parsing out protocol-specific entries
// (e.g. /ipns/<node-key>) and then going through the /ipfs/ entries and returning the final node


exports.resolvePath = ({
  ipns,
  dag
}, name) => {
  // ipns path
  if (isIPFS.ipnsPath(name)) {
    return ipns.resolve(name);
  } // ipfs path


  return dag.get(name.substring('/ipfs/'.length));
};

/***/ }),
/* 959 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const {
  getPubsubRouting
} = __webpack_require__(192);

module.exports = ({
  ipns,
  options: constructorOptions
}) => {
  /**
   * Cancel a name subscription.
   *
   * @param {String} name subscription name.
   * @param {function(Error)} [callback]
   * @returns {Promise<{ canceled: boolean }>}
   */
  return async function cancel(name) {
    // eslint-disable-line require-await
    const pubsub = getPubsubRouting(ipns, constructorOptions);
    return pubsub.cancel(name);
  };
};

/***/ }),
/* 960 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const {
  Key
} = __webpack_require__(14);

const {
  encodeBase32,
  keyToTopic,
  topicToKey
} = __webpack_require__(961);

const errcode = __webpack_require__(2);

const debug = __webpack_require__(1);

const log = debug('datastore-pubsub:publisher');
log.error = debug('datastore-pubsub:publisher:error'); // DatastorePubsub is responsible for providing an api for pubsub to be used as a datastore with
// [TieredDatastore]{@link https://github.com/ipfs/js-datastore-core/blob/master/src/tiered.js}

class DatastorePubsub {
  /**
   * Creates an instance of DatastorePubsub.
   * @param {*} pubsub - pubsub implementation.
   * @param {*} datastore - datastore instance.
   * @param {*} peerId - peer-id instance.
   * @param {Object} validator - validator functions.
   * @param {function(record, peerId, callback)} validator.validate - function to validate a record.
   * @param {function(received, current, callback)} validator.select - function to select the newest between two records.
   * @param {function(key, callback)} subscriptionKeyFn - optional function to manipulate the key topic received before processing it.
   * @memberof DatastorePubsub
   */
  constructor(pubsub, datastore, peerId, validator, subscriptionKeyFn) {
    if (!validator) {
      throw errcode(new TypeError('missing validator'), 'ERR_INVALID_PARAMETERS');
    }

    if (typeof validator.validate !== 'function') {
      throw errcode(new TypeError('missing validate function'), 'ERR_INVALID_PARAMETERS');
    }

    if (typeof validator.select !== 'function') {
      throw errcode(new TypeError('missing select function'), 'ERR_INVALID_PARAMETERS');
    }

    if (subscriptionKeyFn && typeof subscriptionKeyFn !== 'function') {
      throw errcode(new TypeError('invalid subscriptionKeyFn received'), 'ERR_INVALID_PARAMETERS');
    }

    this._pubsub = pubsub;
    this._datastore = datastore;
    this._peerId = peerId;
    this._validator = validator;
    this._handleSubscriptionKeyFn = subscriptionKeyFn; // Bind _onMessage function, which is called by pubsub.

    this._onMessage = this._onMessage.bind(this);
  }
  /**
   * Publishes a value through pubsub.
   * @param {Buffer} key identifier of the value to be published.
   * @param {Buffer} val value to be propagated.
   * @returns {Promise}
   */


  async put(key, val) {
    // eslint-disable-line require-await
    if (!Buffer.isBuffer(key)) {
      const errMsg = 'datastore key does not have a valid format';
      log.error(errMsg);
      throw errcode(new Error(errMsg), 'ERR_INVALID_DATASTORE_KEY');
    }

    if (!Buffer.isBuffer(val)) {
      const errMsg = 'received value is not a buffer';
      log.error(errMsg);
      throw errcode(new Error(errMsg), 'ERR_INVALID_VALUE_RECEIVED');
    }

    const stringifiedTopic = keyToTopic(key);
    log("publish value for topic ".concat(stringifiedTopic)); // Publish record to pubsub

    return this._pubsub.publish(stringifiedTopic, val);
  }
  /**
   * Try to subscribe a topic with Pubsub and returns the local value if available.
   * @param {Buffer} key identifier of the value to be subscribed.
   * @returns {Promise<Buffer>}
   */


  async get(key) {
    if (!Buffer.isBuffer(key)) {
      const errMsg = 'datastore key does not have a valid format';
      log.error(errMsg);
      throw errcode(new Error(errMsg), 'ERR_INVALID_DATASTORE_KEY');
    }

    const stringifiedTopic = keyToTopic(key);
    const subscriptions = await this._pubsub.getTopics(); // If already subscribed, just try to get it

    if (subscriptions && Array.isArray(subscriptions) && subscriptions.indexOf(stringifiedTopic) > -1) {
      return this._getLocal(key);
    } // subscribe


    try {
      await this._pubsub.subscribe(stringifiedTopic, this._onMessage);
    } catch (err) {
      const errMsg = "cannot subscribe topic ".concat(stringifiedTopic);
      log.error(errMsg);
      throw errcode(new Error(errMsg), 'ERR_SUBSCRIBING_TOPIC');
    }

    log("subscribed values for key ".concat(stringifiedTopic));
    return this._getLocal(key);
  }
  /**
   * Unsubscribe topic.
   * @param {Buffer} key identifier of the value to unsubscribe.
   * @returns {void}
   */


  unsubscribe(key) {
    const stringifiedTopic = keyToTopic(key);
    return this._pubsub.unsubscribe(stringifiedTopic, this._onMessage);
  } // Get record from local datastore


  async _getLocal(key) {
    // encode key - base32(/ipns/{cid})
    const routingKey = new Key('/' + encodeBase32(key), false);
    let dsVal;

    try {
      dsVal = await this._datastore.get(routingKey);
    } catch (err) {
      if (err.code !== 'ERR_NOT_FOUND') {
        const errMsg = "unexpected error getting the ipns record for ".concat(routingKey.toString());
        log.error(errMsg);
        throw errcode(new Error(errMsg), 'ERR_UNEXPECTED_ERROR_GETTING_RECORD');
      }

      const errMsg = "local record requested was not found for ".concat(routingKey.toString());
      log.error(errMsg);
      throw errcode(new Error(errMsg), 'ERR_NOT_FOUND');
    }

    if (!Buffer.isBuffer(dsVal)) {
      const errMsg = 'found record that we couldn\'t convert to a value';
      log.error(errMsg);
      throw errcode(new Error(errMsg), 'ERR_INVALID_RECORD_RECEIVED');
    }

    return dsVal;
  } // handles pubsub subscription messages


  async _onMessage(msg) {
    const {
      data,
      from,
      topicIDs
    } = msg;
    let key;

    try {
      key = topicToKey(topicIDs[0]);
    } catch (err) {
      log.error(err);
      return;
    }

    log("message received for topic ".concat(topicIDs[0])); // Stop if the message is from the peer (it already stored it while publishing to pubsub)

    if (from === this._peerId.toB58String()) {
      log('message discarded as it is from the same peer');
      return;
    }

    if (this._handleSubscriptionKeyFn) {
      let res;

      try {
        res = await this._handleSubscriptionKeyFn(key);
      } catch (err) {
        log.error('message discarded by the subscriptionKeyFn');
        return;
      }

      key = res;
    }

    try {
      await this._storeIfSubscriptionIsBetter(key, data);
    } catch (err) {
      log.error(err);
    }
  } // Store the received record if it is better than the current stored


  async _storeIfSubscriptionIsBetter(key, data) {
    let isBetter = false;

    try {
      isBetter = await this._isBetter(key, data);
    } catch (err) {
      if (err.code !== 'ERR_NOT_VALID_RECORD') {
        throw err;
      }
    }

    if (isBetter) {
      await this._storeRecord(Buffer.from(key), data);
    }
  } // Validate record according to the received validation function


  async _validateRecord(value, peerId) {
    // eslint-disable-line require-await
    return this._validator.validate(value, peerId);
  } // Select the best record according to the received select function.


  async _selectRecord(receivedRecord, currentRecord) {
    const res = await this._validator.select(receivedRecord, currentRecord); // If the selected was the first (0), it should be stored (true)

    return res === 0;
  } // Verify if the record received through pubsub is valid and better than the one currently stored


  async _isBetter(key, val) {
    // validate received record
    let error, valid;

    try {
      valid = await this._validateRecord(val, key);
    } catch (err) {
      error = err;
    } // If not valid, it is not better than the one currently available


    if (error || !valid) {
      const errMsg = 'record received through pubsub is not valid';
      log.error(errMsg);
      throw errcode(new Error(errMsg), 'ERR_NOT_VALID_RECORD');
    } // Get Local record


    const dsKey = new Key(key);
    let currentRecord;

    try {
      currentRecord = await this._getLocal(dsKey.toBuffer());
    } catch (err) {
      // if the old one is invalid, the new one is *always* better
      return true;
    } // if the same record, do not need to store


    if (currentRecord.equals(val)) {
      return false;
    } // verify if the received record should replace the current one


    return this._selectRecord(val, currentRecord);
  } // add record to datastore


  async _storeRecord(key, data) {
    // encode key - base32(/ipns/{cid})
    const routingKey = new Key('/' + encodeBase32(key), false);
    await this._datastore.put(routingKey, data);
    log("record for ".concat(keyToTopic(key), " was stored in the datastore"));
  }

  open() {
    const errMsg = 'open function was not implemented yet';
    log.error(errMsg);
    throw errcode(new Error(errMsg), 'ERR_NOT_IMPLEMENTED_YET');
  }

  has(key) {
    const errMsg = 'has function was not implemented yet';
    log.error(errMsg);
    throw errcode(new Error(errMsg), 'ERR_NOT_IMPLEMENTED_YET');
  }

  delete(key) {
    const errMsg = 'delete function was not implemented yet';
    log.error(errMsg);
    throw errcode(new Error(errMsg), 'ERR_NOT_IMPLEMENTED_YET');
  }

  close() {
    const errMsg = 'close function was not implemented yet';
    log.error(errMsg);
    throw errcode(new Error(errMsg), 'ERR_NOT_IMPLEMENTED_YET');
  }

  batch() {
    const errMsg = 'batch function was not implemented yet';
    log.error(errMsg);
    throw errcode(new Error(errMsg), 'ERR_NOT_IMPLEMENTED_YET');
  }

  query() {
    const errMsg = 'query function was not implemented yet';
    log.error(errMsg);
    throw errcode(new Error(errMsg), 'ERR_NOT_IMPLEMENTED_YET');
  }

}

exports = module.exports = DatastorePubsub;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 961 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const multibase = __webpack_require__(53);

const errcode = __webpack_require__(2);

const namespace = '/record/';
const base64urlCode = 'u'; // base64url code from multibase

module.exports.encodeBase32 = buf => {
  return multibase.encode('base32', buf).slice(1); // slice off multibase codec
}; // converts a binary record key to a pubsub topic key.


module.exports.keyToTopic = key => {
  // Record-store keys are arbitrary binary. However, pubsub requires UTF-8 string topic IDs
  // Encodes to "/record/base64url(key)"
  const b64url = multibase.encode('base64url', key).slice(1).toString();
  return "".concat(namespace).concat(b64url);
}; // converts a pubsub topic key to a binary record key.


module.exports.topicToKey = topic => {
  if (topic.substring(0, namespace.length) !== namespace) {
    throw errcode(new Error('topic received is not from a record'), 'ERR_TOPIC_IS_NOT_FROM_RECORD_NAMESPACE');
  }

  const key = "".concat(base64urlCode).concat(topic.substring(namespace.length));
  return multibase.decode(key);
};

/***/ }),
/* 962 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const {
  getPubsubRouting
} = __webpack_require__(192);

module.exports = ({
  ipns,
  options: constructorOptions
}) => {
  /**
   * Query the state of IPNS pubsub.
   *
   * @returns {Promise<boolean>}
   */
  return async function state() {
    // eslint-disable-line require-await
    try {
      return {
        enabled: Boolean(getPubsubRouting(ipns, constructorOptions))
      };
    } catch (err) {
      return false;
    }
  };
};

/***/ }),
/* 963 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const {
  getPubsubRouting
} = __webpack_require__(192);

module.exports = ({
  ipns,
  options: constructorOptions
}) => {
  /**
   * Show current name subscriptions.
   *
   * @param {function(Error)} [callback]
   * @returns {Promise<string[]>}
   */
  return async function subs() {
    // eslint-disable-line require-await
    const pubsub = getPubsubRouting(ipns, constructorOptions);
    return pubsub.getSubscriptions();
  };
};

/***/ }),
/* 964 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

const debug = __webpack_require__(1);

const errcode = __webpack_require__(2);

const mergeOptions = __webpack_require__(27);

const CID = __webpack_require__(3);

const isDomain = __webpack_require__(965);

const log = debug('ipfs:name:resolve');
log.error = debug('ipfs:name:resolve:error');

const {
  OFFLINE_ERROR
} = __webpack_require__(29);

const appendRemainder = async (result, remainder) => {
  result = await result;

  if (remainder.length) {
    return result + '/' + remainder.join('/');
  }

  return result;
};
/**
 * @typedef { import("../index") } IPFS
 */

/**
 * IPNS - Inter-Planetary Naming System
 *
 * @param {IPFS} self
 * @returns {Object}
 */


module.exports = ({
  dns,
  ipns,
  peerInfo,
  isOnline,
  options: constructorOptions
}) => {
  /**
   * Given a key, query the DHT for its best value.
   *
   * @param {String} name ipns name to resolve. Defaults to your node's peerID.
   * @param {Object} options ipfs resolve options.
   * @param {boolean} options.nocache do not use cached entries.
   * @param {boolean} options.recursive resolve until the result is not an IPNS name.
   * @param {function(Error)} [callback]
   * @returns {Promise|void}
   */
  return (
    /*#__PURE__*/
    function () {
      var _resolve = _wrapAsyncGenerator(function* (name, options) {
        // eslint-disable-line require-await
        options = mergeOptions({
          nocache: false,
          recursive: true
        }, options || {});
        const {
          offline
        } = constructorOptions; // TODO: params related logic should be in the core implementation

        if (offline && options.nocache) {
          throw errcode(new Error('cannot specify both offline and nocache'), 'ERR_NOCACHE_AND_OFFLINE');
        } // Set node id as name for being resolved, if it is not received


        if (!name) {
          name = peerInfo.id.toB58String();
        }

        if (!name.startsWith('/ipns/')) {
          name = "/ipns/".concat(name);
        }

        const [namespace, hash, ...remainder] = name.slice(1).split('/');

        try {
          new CID(hash); // eslint-disable-line no-new
        } catch (err) {
          // lets check if we have a domain ex. /ipns/ipfs.io and resolve with dns
          if (isDomain(hash)) {
            yield appendRemainder(dns(hash, options), remainder);
            return;
          }

          log.error(err);
          throw errcode(new Error('Invalid IPNS name'), 'ERR_IPNS_INVALID_NAME');
        } // multihash is valid lets resolve with IPNS
        // IPNS resolve needs a online daemon


        if (!isOnline() && !offline) {
          throw errcode(new Error(OFFLINE_ERROR), 'OFFLINE_ERROR');
        } // TODO: convert ipns.resolve to return an iterator


        yield appendRemainder(ipns.resolve("/".concat(namespace, "/").concat(hash), options), remainder);
      });

      function resolve(_x, _x2) {
        return _resolve.apply(this, arguments);
      }

      return resolve;
    }()
  );
};

/***/ }),
/* 965 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // Adapted from RFC 2181 (See section 11)
//
// The RFC defines a Domain Name to be at most 255 chars including seperators
// between labels.
// Subdomains are labels plus a seperator. A label is a string starting and
// ending with an alphanum, with dashes allowed in the middle. It is between 1 and 63 chars.
//
// We make some assumptions below that go beyond the RFC. We assume the TLD
// to be at least 2 chars. The regex also allows domains longer than 255 chars,
// but allows at most 127 subdomains, as assuming a lower-bound of one char per
// subdomain will yield 252, and adding a TLD of 2 chars sums to 254.

/*
(?:                   // Group 1: This is for subdomain, which is composed of a label and a seperator (length = [1, 63] + 1)
  [a-z0-9]
  (?:
    [a-z0-9\-]{0,61} // Limited to 61 chars as we have at least two chars if we reach this group (61 + 2 = 63 which is the limit)
    [a-z0-9]
  )?
  \.                  // Label seperator
){0,126}             // If we assume the lower-bound of 1 char labels, we can at most have 126 groups before approaching the total limit of 255 chars
(?:                   // Group 2: Assume that the TLD is at least 2 chars (for sanity)
  [a-z0-9]
  [a-z0-9\-]{0,61}
  [a-z0-9]
)
\.?                   // Some consider a trailing dot to be considered valid as it signifies the root of the domain tree
 */

var domainNameRegex = /^(?:[a-z0-9](?:[a-z0-9\-]{0,61}[a-z0-9])?\.){0,126}(?:[a-z0-9](?:[a-z0-9\-]{0,61}[a-z0-9]))\.?$/i;
/**
 * Test whether a string is a valid domain name, optionally checking for a root dot as well
 * @param  {String}  domainName
 * @param  {Boolean} rootDot    Check for a root dot eg. 'example.com.'. Defaults to false
 * @return {Boolean}
 */

module.exports = function isDomainName(domainName, rootDot) {
  if (rootDot == null) rootDot = false;
  if (domainName.length < 2) return false;
  if (domainName.length > 255) return false;
  var lastChar = domainName[domainName.length - 1];

  if (rootDot) {
    if (lastChar !== '.') return false;
  } else {
    if (lastChar === '.') return false;
  }

  return domainNameRegex.test(domainName);
};

/***/ }),
/* 966 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = ({
  ipld,
  preload
}) => {
  const get = __webpack_require__(52)({
    ipld,
    preload
  });

  return async function data(multihash, options) {
    const node = await get(multihash, options);
    return node.Data;
  };
};

/***/ }),
/* 967 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const dagPB = __webpack_require__(12);

const DAGLink = dagPB.DAGLink;

const CID = __webpack_require__(3);

function findLinks(node, links = []) {
  for (const key in node) {
    const val = node[key];

    if (key === '/' && Object.keys(node).length === 1) {
      try {
        links.push(new DAGLink('', 0, new CID(val)));
        continue;
      } catch (_) {// not a CID
      }
    }

    if (CID.isCID(val)) {
      links.push(new DAGLink('', 0, val));
      continue;
    }

    if (Array.isArray(val)) {
      findLinks(val, links);
    }

    if (val && typeof val === 'object') {
      findLinks(val, links);
    }
  }

  return links;
}

module.exports = ({
  dag
}) => {
  return async function links(multihash, options) {
    options = options || {};
    const cid = new CID(multihash);
    const result = await dag.get(cid, options);

    if (cid.codec === 'raw') {
      return [];
    }

    if (cid.codec === 'dag-pb') {
      return result.value.Links;
    }

    if (cid.codec === 'dag-cbor') {
      return findLinks(result);
    }

    throw new Error("Cannot resolve links from codec ".concat(cid.codec));
  };
};

/***/ }),
/* 968 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const dagPB = __webpack_require__(12);

const DAGNode = dagPB.DAGNode;

const multicodec = __webpack_require__(15);

const Unixfs = __webpack_require__(25);

module.exports = ({
  ipld,
  preload
}) => {
  return async function _new(template, options) {
    options = options || {}; // allow options in the template position

    if (template && typeof template !== 'string') {
      options = template;
      template = null;
    }

    let data;

    if (template) {
      if (template === 'unixfs-dir') {
        data = new Unixfs('directory').marshal();
      } else {
        throw new Error('unknown template');
      }
    } else {
      data = Buffer.alloc(0);
    }

    const node = new DAGNode(data);
    const cid = await ipld.put(node, multicodec.DAG_PB, {
      cidVersion: 0,
      hashAlg: multicodec.SHA2_256
    });

    if (options.preload !== false) {
      preload(cid);
    }

    return cid;
  };
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 969 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = ({
  ipld,
  gcLock,
  preload
}) => {
  const get = __webpack_require__(52)({
    ipld,
    preload
  });

  const put = __webpack_require__(89)({
    ipld,
    gcLock,
    preload
  });

  return async function addLink(multihash, link, options) {
    const node = await get(multihash, options);
    node.addLink(link);
    return put(node, options);
  };
};

/***/ }),
/* 970 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const {
  DAGNode
} = __webpack_require__(12);

module.exports = ({
  ipld,
  gcLock,
  preload
}) => {
  const get = __webpack_require__(52)({
    ipld,
    preload
  });

  const put = __webpack_require__(89)({
    ipld,
    gcLock,
    preload
  });

  return async function appendData(multihash, data, options) {
    const node = await get(multihash, options);
    const newData = Buffer.concat([node.Data, data]);
    return put(new DAGNode(newData, node.Links), options);
  };
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 971 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = ({
  ipld,
  gcLock,
  preload
}) => {
  const get = __webpack_require__(52)({
    ipld,
    preload
  });

  const put = __webpack_require__(89)({
    ipld,
    gcLock,
    preload
  });

  return async function rmLink(multihash, linkRef, options) {
    const node = await get(multihash, options);
    node.rmLink(linkRef.Name || linkRef.name);
    return put(node, options);
  };
};

/***/ }),
/* 972 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const {
  DAGNode
} = __webpack_require__(12);

module.exports = ({
  ipld,
  gcLock,
  preload
}) => {
  const get = __webpack_require__(52)({
    ipld,
    preload
  });

  const put = __webpack_require__(89)({
    ipld,
    gcLock,
    preload
  });

  return async function setData(multihash, data, options) {
    const node = await get(multihash, options);
    return put(new DAGNode(data, node.Links), options);
  };
};

/***/ }),
/* 973 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const dagPB = __webpack_require__(12);

module.exports = ({
  ipld,
  preload
}) => {
  const get = __webpack_require__(52)({
    ipld,
    preload
  });

  return async function stat(multihash, options) {
    options = options || {};
    const node = await get(multihash, options);
    const serialized = dagPB.util.serialize(node);
    const cid = await dagPB.util.cid(serialized, {
      cidVersion: 0
    });
    const blockSize = serialized.length;
    const linkLength = node.Links.reduce((a, l) => a + l.Tsize, 0);
    return {
      Hash: cid.toBaseEncodedString(),
      NumLinks: node.Links.length,
      BlockSize: blockSize,
      LinksSize: blockSize - node.Data.length,
      DataSize: node.Data.length,
      CumulativeSize: blockSize + linkLength
    };
  };
};

/***/ }),
/* 974 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint max-nested-callbacks: ["error", 8] */


const {
  resolvePath,
  withTimeoutOption
} = __webpack_require__(29);

module.exports = ({
  pinManager,
  gcLock,
  dag
}) => {
  return withTimeoutOption(async function add(paths, options) {
    options = options || {};
    const recursive = options.recursive !== false;
    const cids = await resolvePath(dag, paths, {
      signal: options.signal
    });

    const pinAdd = async () => {
      const results = []; // verify that each hash can be pinned

      for (const cid of cids) {
        const key = cid.toBaseEncodedString();

        if (recursive) {
          if (pinManager.recursivePins.has(key)) {
            // it's already pinned recursively
            results.push(cid);
            continue;
          } // entire graph of nested links should be pinned,
          // so make sure we have all the objects


          await pinManager.fetchCompleteDag(key, {
            preload: options.preload,
            signal: options.signal
          }); // found all objects, we can add the pin

          results.push(cid);
        } else {
          if (pinManager.recursivePins.has(key)) {
            // recursive supersedes direct, can't have both
            throw new Error("".concat(key, " already pinned recursively"));
          }

          if (!pinManager.directPins.has(key)) {
            // make sure we have the object
            await dag.get(cid, {
              preload: options.preload
            });
          }

          results.push(cid);
        }
      } // update the pin sets in memory


      const pinset = recursive ? pinManager.recursivePins : pinManager.directPins;
      results.forEach(cid => pinset.add(cid.toString())); // persist updated pin sets to datastore

      await pinManager.flushPins();
      return results.map(cid => ({
        cid
      }));
    }; // When adding a file, we take a lock that gets released after pinning
    // is complete, so don't take a second lock here


    const lock = Boolean(options.lock);

    if (!lock) {
      return pinAdd();
    }

    const release = await gcLock.readLock();

    try {
      await pinAdd();
    } finally {
      release();
    }
  });
};

/***/ }),
/* 975 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint max-nested-callbacks: ["error", 8] */


function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

function _asyncGeneratorDelegate(inner, awaitWrap) { var iter = {}, waiting = false; function pump(key, value) { waiting = true; value = new Promise(function (resolve) { resolve(inner[key](value)); }); return { done: false, value: awaitWrap(value) }; } ; if (typeof Symbol === "function" && Symbol.iterator) { iter[Symbol.iterator] = function () { return this; }; } iter.next = function (value) { if (waiting) { waiting = false; return value; } return pump("next", value); }; if (typeof inner.throw === "function") { iter.throw = function (value) { if (waiting) { waiting = false; throw value; } return pump("throw", value); }; } if (typeof inner.return === "function") { iter.return = function (value) { if (waiting) { waiting = false; return value; } return pump("return", value); }; } return iter; }

const {
  parallelMap
} = __webpack_require__(41);

const CID = __webpack_require__(3);

const {
  resolvePath
} = __webpack_require__(29);

const PinManager = __webpack_require__(102);

const {
  PinTypes
} = PinManager;
const PIN_LS_CONCURRENCY = 8;

module.exports = ({
  pinManager,
  dag
}) => {
  return (
    /*#__PURE__*/
    function () {
      var _ls = _wrapAsyncGenerator(function* (paths, options) {
        options = options || {};
        let type = PinTypes.all;

        if (paths && paths.type) {
          options = paths;
          paths = null;
        }

        if (options.type) {
          type = options.type;

          if (typeof options.type === 'string') {
            type = options.type.toLowerCase();
          }

          const err = PinManager.checkPinType(type);

          if (err) {
            throw err;
          }
        }

        if (paths) {
          paths = Array.isArray(paths) ? paths : [paths]; // check the pinned state of specific hashes

          const cids = yield _awaitAsyncGenerator(resolvePath(dag, paths));
          yield* _asyncGeneratorDelegate(_asyncIterator(parallelMap(PIN_LS_CONCURRENCY, async cid => {
            const {
              reason,
              pinned
            } = await pinManager.isPinnedWithType(cid, type);

            if (!pinned) {
              throw new Error("path '".concat(paths[cids.indexOf(cid)], "' is not pinned"));
            }

            if (reason === PinTypes.direct || reason === PinTypes.recursive) {
              return {
                cid,
                type: reason
              };
            }

            return {
              cid,
              type: "".concat(PinTypes.indirect, " through ").concat(reason)
            };
          }, cids)), _awaitAsyncGenerator);
          return;
        } // show all pinned items of type


        let pins = [];

        if (type === PinTypes.direct || type === PinTypes.all) {
          pins = pins.concat(Array.from(pinManager.directPins).map(cid => ({
            type: PinTypes.direct,
            cid: new CID(cid)
          })));
        }

        if (type === PinTypes.recursive || type === PinTypes.all) {
          pins = pins.concat(Array.from(pinManager.recursivePins).map(cid => ({
            type: PinTypes.recursive,
            cid: new CID(cid)
          })));
        }

        if (type === PinTypes.indirect || type === PinTypes.all) {
          const indirects = yield _awaitAsyncGenerator(pinManager.getIndirectKeys(options));
          pins = pins // if something is pinned both directly and indirectly,
          // report the indirect entry
          .filter(({
            cid
          }) => !indirects.includes(cid.toString()) || !pinManager.directPins.has(cid.toString())).concat(indirects.map(cid => ({
            type: PinTypes.indirect,
            cid: new CID(cid)
          })));
        } // FIXME: https://github.com/ipfs/js-ipfs/issues/2244


        yield* _asyncGeneratorDelegate(_asyncIterator(pins), _awaitAsyncGenerator);
      });

      function ls(_x, _x2) {
        return _ls.apply(this, arguments);
      }

      return ls;
    }()
  );
};

/***/ }),
/* 976 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const errCode = __webpack_require__(2);

const multibase = __webpack_require__(53);

const {
  parallelMap,
  collect
} = __webpack_require__(41);

const pipe = __webpack_require__(23);

const {
  resolvePath
} = __webpack_require__(29);

const {
  PinTypes
} = __webpack_require__(102);

const PIN_RM_CONCURRENCY = 8;

module.exports = ({
  pinManager,
  gcLock,
  dag
}) => {
  return async function rm(paths, options) {
    options = options || {};
    const recursive = options.recursive !== false;

    if (options.cidBase && !multibase.names.includes(options.cidBase)) {
      throw errCode(new Error('invalid multibase'), 'ERR_INVALID_MULTIBASE');
    }

    const cids = await resolvePath(dag, paths);
    const release = await gcLock.readLock();

    try {
      // verify that each hash can be unpinned
      const results = await pipe(cids, parallelMap(PIN_RM_CONCURRENCY, async cid => {
        const {
          pinned,
          reason
        } = await pinManager.isPinnedWithType(cid, PinTypes.all);

        if (!pinned) {
          throw new Error("".concat(cid, " is not pinned"));
        }

        if (reason !== PinTypes.recursive && reason !== PinTypes.direct) {
          throw new Error("".concat(cid, " is pinned indirectly under ").concat(reason));
        }

        if (reason === PinTypes.recursive && !recursive) {
          throw new Error("".concat(cid, " is pinned recursively"));
        }

        return cid;
      }), collect); // update the pin sets in memory

      results.forEach(cid => {
        if (recursive && pinManager.recursivePins.has(cid.toString())) {
          pinManager.recursivePins.delete(cid.toString());
        } else {
          pinManager.directPins.delete(cid.toString());
        }
      }); // persist updated pin sets to datastore

      await pinManager.flushPins();
      return results.map(cid => ({
        cid
      }));
    } finally {
      release();
    }
  };
};

/***/ }),
/* 977 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

const PeerId = __webpack_require__(9);

const basePacket = {
  success: true,
  time: 0,
  text: ''
};

module.exports = ({
  libp2p
}) => {
  return (
    /*#__PURE__*/
    function () {
      var _ref = _wrapAsyncGenerator(function* (peerId, options) {
        options = options || {};
        options.count = options.count || 10;

        if (!PeerId.isPeerId(peerId)) {
          peerId = PeerId.createFromCID(peerId);
        }

        let peerInfo;

        if (libp2p.peerStore.has(peerId)) {
          peerInfo = libp2p.peerStore.get(peerId);
        } else {
          yield _objectSpread({}, basePacket, {
            text: "Looking up peer ".concat(peerId)
          });
          peerInfo = yield _awaitAsyncGenerator(libp2p.peerRouting.findPeer(peerId));
        }

        yield _objectSpread({}, basePacket, {
          text: "PING ".concat(peerInfo.id.toB58String())
        });
        let packetCount = 0;
        let totalTime = 0;

        for (let i = 0; i < options.count; i++) {
          try {
            const time = yield _awaitAsyncGenerator(libp2p.ping(peerInfo));
            totalTime += time;
            packetCount++;
            yield _objectSpread({}, basePacket, {
              time
            });
          } catch (err) {
            yield _objectSpread({}, basePacket, {
              success: false,
              text: err.toString()
            });
          }
        }

        if (packetCount) {
          const average = totalTime / packetCount;
          yield _objectSpread({}, basePacket, {
            text: "Average latency: ".concat(average, "ms")
          });
        }
      });

      return function (_x, _x2) {
        return _ref.apply(this, arguments);
      };
    }()
  );
};

/***/ }),
/* 978 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = ({
  libp2p
}) => {
  return {
    subscribe: (...args) => libp2p.pubsub.subscribe(...args),
    unsubscribe: (...args) => libp2p.pubsub.unsubscribe(...args),
    publish: (...args) => libp2p.pubsub.publish(...args),
    ls: (...args) => libp2p.pubsub.getTopics(...args),
    peers: (...args) => libp2p.pubsub.getSubscribers(...args)
  };
};

/***/ }),
/* 979 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

function _asyncGeneratorDelegate(inner, awaitWrap) { var iter = {}, waiting = false; function pump(key, value) { waiting = true; value = new Promise(function (resolve) { resolve(inner[key](value)); }); return { done: false, value: awaitWrap(value) }; } ; if (typeof Symbol === "function" && Symbol.iterator) { iter[Symbol.iterator] = function () { return this; }; } iter.next = function (value) { if (waiting) { waiting = false; return value; } return pump("next", value); }; if (typeof inner.throw === "function") { iter.throw = function (value) { if (waiting) { waiting = false; throw value; } return pump("throw", value); }; } if (typeof inner.return === "function") { iter.return = function (value) { if (waiting) { waiting = false; return value; } return pump("return", value); }; } return iter; }

const isIpfs = __webpack_require__(55);

const CID = __webpack_require__(3);

const {
  DAGNode
} = __webpack_require__(12);

const {
  normalizeCidPath
} = __webpack_require__(29);

const {
  Errors
} = __webpack_require__(14);

const ERR_NOT_FOUND = Errors.notFoundError().code;

const {
  withTimeoutOption
} = __webpack_require__(29);

const Format = {
  default: '<dst>',
  edges: '<src> -> <dst>'
};

module.exports = function ({
  ipld,
  resolve,
  preload
}) {
  return withTimeoutOption(
  /*#__PURE__*/
  function () {
    var _refs = _wrapAsyncGenerator(function* (ipfsPath, options) {
      // eslint-disable-line require-await
      options = options || {};

      if (options.maxDepth === 0) {
        return;
      }

      if (options.edges && options.format && options.format !== Format.default) {
        throw new Error('Cannot set edges to true and also specify format');
      }

      options.format = options.edges ? Format.edges : options.format || Format.default;

      if (typeof options.maxDepth !== 'number') {
        options.maxDepth = options.recursive ? Infinity : 1;
      }

      const rawPaths = Array.isArray(ipfsPath) ? ipfsPath : [ipfsPath];
      const paths = rawPaths.map(p => getFullPath(preload, p, options));

      for (const path of paths) {
        yield* _asyncGeneratorDelegate(_asyncIterator(refsStream(resolve, ipld, path, options)), _awaitAsyncGenerator);
      }
    });

    function refs(_x, _x2) {
      return _refs.apply(this, arguments);
    }

    return refs;
  }());
};

module.exports.Format = Format;

function getFullPath(preload, ipfsPath, options) {
  // normalizeCidPath() strips /ipfs/ off the front of the path so the CID will
  // be at the front of the path
  const path = normalizeCidPath(ipfsPath);
  const pathComponents = path.split('/');
  const cid = pathComponents[0];

  if (!isIpfs.cid(cid)) {
    throw new Error("Error resolving path '".concat(path, "': '").concat(cid, "' is not a valid CID"));
  }

  if (options.preload !== false) {
    preload(cid);
  }

  return '/ipfs/' + path;
} // Get a stream of refs at the given path


function refsStream(_x3, _x4, _x5, _x6) {
  return _refsStream.apply(this, arguments);
} // Get formatted link


function _refsStream() {
  _refsStream = _wrapAsyncGenerator(function* (resolve, ipld, path, options) {
    // Resolve to the target CID of the path
    const resPath = yield _awaitAsyncGenerator(resolve(path)); // path is /ipfs/<cid>

    const parts = resPath.split('/');
    const cid = parts[2]; // Traverse the DAG, converting it into a stream

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;

    var _iteratorError;

    try {
      for (var _iterator = _asyncIterator(objectStream(ipld, cid, options.maxDepth, options.unique)), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
        const obj = _value;

        // Root object will not have a parent
        if (!obj.parent) {
          continue;
        } // Filter out duplicates (isDuplicate flag is only set if options.unique is set)


        if (obj.isDuplicate) {
          continue;
        } // Format the links
        // Clients expect refs to be in the format { ref: <ref> }


        yield {
          ref: formatLink(obj.parent.cid, obj.node.cid, obj.node.name, options.format)
        };
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          yield _awaitAsyncGenerator(_iterator.return());
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  });
  return _refsStream.apply(this, arguments);
}

function formatLink(srcCid, dstCid, linkName, format) {
  let out = format.replace(/<src>/g, srcCid.toString());
  out = out.replace(/<dst>/g, dstCid.toString());
  out = out.replace(/<linkname>/g, linkName);
  return out;
} // Do a depth first search of the DAG, starting from the given root cid


function objectStream(_x7, _x8, _x9, _x10) {
  return _objectStream.apply(this, arguments);
} // Fetch a node from IPLD then get all its links


function _objectStream() {
  _objectStream = _wrapAsyncGenerator(function* (ipld, rootCid, maxDepth, uniqueOnly) {
    // eslint-disable-line require-await
    const seen = new Set();

    function traverseLevel(_x11, _x12) {
      return _traverseLevel.apply(this, arguments);
    }

    function _traverseLevel() {
      _traverseLevel = _wrapAsyncGenerator(function* (parent, depth) {
        const nextLevelDepth = depth + 1; // Check the depth

        if (nextLevelDepth > maxDepth) {
          return;
        } // Get this object's links


        try {
          // Look at each link, parent and the new depth
          for (const link of yield _awaitAsyncGenerator(getLinks(ipld, parent.cid))) {
            yield {
              parent: parent,
              node: link,
              isDuplicate: uniqueOnly && seen.has(link.cid.toString())
            };

            if (uniqueOnly) {
              seen.add(link.cid.toString());
            }

            yield* _asyncGeneratorDelegate(_asyncIterator(traverseLevel(link, nextLevelDepth)), _awaitAsyncGenerator);
          }
        } catch (err) {
          if (err.code === ERR_NOT_FOUND) {
            err.message = "Could not find object with CID: ".concat(parent.cid);
          }

          throw err;
        }
      });
      return _traverseLevel.apply(this, arguments);
    }

    yield* _asyncGeneratorDelegate(_asyncIterator(traverseLevel({
      cid: rootCid
    }, 0)), _awaitAsyncGenerator);
  });
  return _objectStream.apply(this, arguments);
}

async function getLinks(ipld, cid) {
  const node = await ipld.get(new CID(cid));

  if (DAGNode.isDAGNode(node)) {
    return node.Links.map(({
      Name,
      Hash
    }) => ({
      name: Name,
      cid: new CID(Hash)
    }));
  }

  return getNodeLinks(node);
} // Recursively search the node for CIDs


function getNodeLinks(node, path = '') {
  let links = [];

  for (const [name, value] of Object.entries(node)) {
    if (CID.isCID(value)) {
      links.push({
        name: path + name,
        cid: value
      });
    } else if (typeof value === 'object') {
      links = links.concat(getNodeLinks(value, path + name + '/'));
    }
  }

  return links;
}

/***/ }),
/* 980 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const Repo = __webpack_require__(83);

module.exports = function ({
  repo
}) {
  return (
    /*#__PURE__*/
    function () {
      var _refsLocal = _wrapAsyncGenerator(function* () {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;

        var _iteratorError;

        try {
          for (var _iterator = _asyncIterator(repo.blocks.query({
            keysOnly: true
          })), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
            const result = _value;
            yield dsKeyToRef(result.key);
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              yield _awaitAsyncGenerator(_iterator.return());
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      });

      function refsLocal() {
        return _refsLocal.apply(this, arguments);
      }

      return refsLocal;
    }()
  );
};

function dsKeyToRef(key) {
  try {
    return {
      ref: Repo.utils.blockstore.keyToCid(key).toString()
    };
  } catch (err) {
    return {
      err: "Could not convert block with key '".concat(key, "' to CID: ").concat(err.message)
    };
  }
}

/***/ }),
/* 981 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

function _asyncGeneratorDelegate(inner, awaitWrap) { var iter = {}, waiting = false; function pump(key, value) { waiting = true; value = new Promise(function (resolve) { resolve(inner[key](value)); }); return { done: false, value: awaitWrap(value) }; } ; if (typeof Symbol === "function" && Symbol.iterator) { iter[Symbol.iterator] = function () { return this; }; } iter.next = function (value) { if (waiting) { waiting = false; return value; } return pump("next", value); }; if (typeof inner.throw === "function") { iter.throw = function (value) { if (waiting) { waiting = false; throw value; } return pump("throw", value); }; } if (typeof inner.return === "function") { iter.return = function (value) { if (waiting) { waiting = false; return value; } return pump("return", value); }; } return iter; }

const CID = __webpack_require__(3);

const {
  cidToString
} = __webpack_require__(105);

const log = __webpack_require__(1)('ipfs:repo:gc');

const {
  MFS_ROOT_KEY
} = __webpack_require__(34);

const Repo = __webpack_require__(83);

const {
  Errors
} = __webpack_require__(14);

const ERR_NOT_FOUND = Errors.notFoundError().code;

const {
  parallelMerge,
  transform,
  map
} = __webpack_require__(41); // Limit on the number of parallel block remove operations


const BLOCK_RM_CONCURRENCY = 256; // Perform mark and sweep garbage collection

module.exports = ({
  gcLock,
  pin,
  pinManager,
  refs,
  repo
}) => {
  return (
    /*#__PURE__*/
    function () {
      var _gc = _wrapAsyncGenerator(function* () {
        const start = Date.now();
        log('Creating set of marked blocks');
        const release = yield _awaitAsyncGenerator(gcLock.writeLock());

        try {
          // Mark all blocks that are being used
          const markedSet = yield _awaitAsyncGenerator(createMarkedSet({
            pin,
            pinManager,
            refs,
            repo
          })); // Get all blocks keys from the blockstore

          const blockKeys = repo.blocks.query({
            keysOnly: true
          }); // Delete blocks that are not being used

          yield* _asyncGeneratorDelegate(_asyncIterator(deleteUnmarkedBlocks({
            repo,
            refs
          }, markedSet, blockKeys)), _awaitAsyncGenerator);
          log("Complete (".concat(Date.now() - start, "ms)"));
        } finally {
          release();
        }
      });

      function gc() {
        return _gc.apply(this, arguments);
      }

      return gc;
    }()
  );
}; // Get Set of CIDs of blocks to keep


async function createMarkedSet({
  pin,
  pinManager,
  refs,
  repo
}) {
  const pinsSource = map(({
    cid
  }) => cid, pin.ls());

  const pinInternalsSource = _wrapAsyncGenerator(function* () {
    const cids = yield _awaitAsyncGenerator(pinManager.getInternalBlocks());
    yield* _asyncGeneratorDelegate(_asyncIterator(cids), _awaitAsyncGenerator);
  })();

  const mfsSource = _wrapAsyncGenerator(function* () {
    let mh;

    try {
      mh = yield _awaitAsyncGenerator(repo.root.get(MFS_ROOT_KEY));
    } catch (err) {
      if (err.code === ERR_NOT_FOUND) {
        log('No blocks in MFS');
        return;
      }

      throw err;
    }

    const rootCid = new CID(mh);
    yield rootCid;
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;

    var _iteratorError2;

    try {
      for (var _iterator2 = _asyncIterator(refs(rootCid, {
        recursive: true
      })), _step2, _value2; _step2 = yield _awaitAsyncGenerator(_iterator2.next()), _iteratorNormalCompletion2 = _step2.done, _value2 = yield _awaitAsyncGenerator(_step2.value), !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {
        const {
          ref
        } = _value2;
        yield new CID(ref);
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          yield _awaitAsyncGenerator(_iterator2.return());
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }
  })();

  const output = new Set();
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;

  var _iteratorError;

  try {
    for (var _iterator = _asyncIterator(parallelMerge(pinsSource, pinInternalsSource, mfsSource)), _step, _value; _step = await _iterator.next(), _iteratorNormalCompletion = _step.done, _value = await _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
      const cid = _value;
      output.add(cidToString(cid, {
        base: 'base32'
      }));
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        await _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return output;
} // Delete all blocks that are not marked as in use


function deleteUnmarkedBlocks(_x, _x2, _x3) {
  return _deleteUnmarkedBlocks.apply(this, arguments);
}

function _deleteUnmarkedBlocks() {
  _deleteUnmarkedBlocks = _wrapAsyncGenerator(function* ({
    repo,
    refs
  }, markedSet, blockKeys) {
    // Iterate through all blocks and find those that are not in the marked set
    // blockKeys yields { key: Key() }
    let blocksCount = 0;
    let removedBlocksCount = 0;

    const removeBlock = async ({
      key: k
    }) => {
      blocksCount++;

      try {
        const cid = Repo.utils.blockstore.keyToCid(k);
        const b32 = cid.toV1().toString('base32');
        if (markedSet.has(b32)) return null;
        const res = {
          cid
        };

        try {
          await repo.blocks.delete(cid);
          removedBlocksCount++;
        } catch (err) {
          res.err = new Error("Could not delete block with CID ".concat(cid, ": ").concat(err.message));
        }

        return res;
      } catch (err) {
        const msg = "Could not convert block with key '".concat(k, "' to CID");
        log(msg, err);
        return {
          err: new Error(msg + ": ".concat(err.message))
        };
      }
    };

    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;

    var _iteratorError3;

    try {
      for (var _iterator3 = _asyncIterator(transform(BLOCK_RM_CONCURRENCY, removeBlock, blockKeys)), _step3, _value3; _step3 = yield _awaitAsyncGenerator(_iterator3.next()), _iteratorNormalCompletion3 = _step3.done, _value3 = yield _awaitAsyncGenerator(_step3.value), !_iteratorNormalCompletion3; _iteratorNormalCompletion3 = true) {
        const res = _value3;
        // filter nulls (blocks that were retained)
        if (res) yield res;
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
          yield _awaitAsyncGenerator(_iterator3.return());
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }

    log("Marked set has ".concat(markedSet.size, " unique blocks. Blockstore has ").concat(blocksCount, " blocks. ") + "Deleted ".concat(removedBlocksCount, " blocks."));
  });
  return _deleteUnmarkedBlocks.apply(this, arguments);
}

/***/ }),
/* 982 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = ({
  repo
}) => {
  return async function stat() {
    const stats = await repo.stat();
    return {
      numObjects: stats.numObjects,
      repoSize: stats.repoSize,
      repoPath: stats.repoPath,
      version: stats.version.toString(),
      storageMax: stats.storageMax
    };
  };
};

/***/ }),
/* 983 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const {
  repoVersion
} = __webpack_require__(83);

module.exports = ({
  repo
}) => {
  /**
   * If the repo has been initialized, report the current version.
   * Otherwise report the version that would be initialized.
   *
   * @returns {number}
   */
  return async function version() {
    try {
      await repo._checkInitialized();
    } catch (err) {
      // TODO: (dryajov) This is really hacky, there must be a better way
      const match = [/Key not found in database \[\/version\]/, /ENOENT/, /repo is not initialized yet/].some(m => {
        return m.test(err.message);
      });

      if (match) {
        // this repo has not been initialized
        return repoVersion;
      }

      throw err;
    }

    return repo.version.get();
  };
};

/***/ }),
/* 984 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const isIpfs = __webpack_require__(55);

const CID = __webpack_require__(3);

const {
  cidToString
} = __webpack_require__(105);
/**
 * @typedef {Object} ResolveOptions
 * @prop {string} cidBase - Multibase codec name the CID in the resolved path will be encoded with
 * @prop {boolean} [recursive=true] - Resolve until the result is an IPFS name
 *
 */

/** @typedef {(path: string, options?: ResolveOptions) => Promise<string>} Resolve */

/**
 * IPFS Resolve factory
 *
 * @param {Object} config
 * @param {IPLD} config.ipld - An instance of IPLD
 * @param {NameApi} [config.name] - An IPFS core interface name API
 * @returns {Resolve}
 */


module.exports = ({
  ipld,
  name
}) => {
  return async function resolve(path, opts) {
    opts = opts || {};

    if (!isIpfs.path(path)) {
      throw new Error('invalid argument ' + path);
    }

    if (isIpfs.ipnsPath(path)) {
      if (!name) {
        throw new Error('failed to resolve IPNS path: name API unavailable');
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;

      var _iteratorError;

      try {
        for (var _iterator = _asyncIterator(name.resolve(path, opts)), _step, _value; _step = await _iterator.next(), _iteratorNormalCompletion = _step.done, _value = await _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
          const resolvedPath = _value;
          path = resolvedPath;
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            await _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }

    const [,, hash, ...rest] = path.split('/'); // ['', 'ipfs', 'hash', ...path]

    const cid = new CID(hash); // nothing to resolve return the input

    if (rest.length === 0) {
      return "/ipfs/".concat(cidToString(cid, {
        base: opts.cidBase
      }));
    }

    path = rest.join('/');
    const results = ipld.resolve(cid, path);
    let value = cid;
    let remainderPath = path;
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;

    var _iteratorError2;

    try {
      for (var _iterator2 = _asyncIterator(results), _step2, _value2; _step2 = await _iterator2.next(), _iteratorNormalCompletion2 = _step2.done, _value2 = await _step2.value, !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {
        const result = _value2;

        if (CID.isCID(result.value)) {
          value = result.value;
          remainderPath = result.remainderPath;
        }
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          await _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    return "/ipfs/".concat(cidToString(value, {
      base: opts.cidBase
    })).concat(remainderPath ? '/' + remainderPath : '');
  };
};

/***/ }),
/* 985 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const Bitswap = __webpack_require__(986);

const multiaddr = __webpack_require__(20);

const get = __webpack_require__(168);

const defer = __webpack_require__(69);

const IPNS = __webpack_require__(308);

const routingConfig = __webpack_require__(999);

const {
  AlreadyInitializedError,
  NotEnabledError
} = __webpack_require__(79);

const Components = __webpack_require__(101);

const createMfsPreload = __webpack_require__(1000);

module.exports = ({
  apiManager,
  options: constructorOptions,
  blockService,
  gcLock,
  initOptions,
  ipld,
  keychain,
  peerInfo,
  pinManager,
  preload,
  print,
  repo
}) => async function start() {
  const startPromise = defer();
  const {
    cancel
  } = apiManager.update({
    start: () => startPromise.promise
  });

  try {
    // The repo may be closed if previously stopped
    if (repo.closed) {
      await repo.open();
    }

    const config = await repo.config.get();

    if (config.Addresses && config.Addresses.Swarm) {
      config.Addresses.Swarm.forEach(addr => {
        let ma = multiaddr(addr);

        if (ma.getPeerId()) {
          ma = ma.encapsulate("/p2p/".concat(peerInfo.id.toB58String()));
        }

        peerInfo.multiaddrs.add(ma);
      });
    }

    const libp2p = Components.libp2p({
      options: constructorOptions,
      repo,
      peerInfo,
      print,
      config
    });
    await libp2p.start();
    peerInfo.multiaddrs.forEach(ma => print('Swarm listening on', ma.toString()));
    const ipnsRouting = routingConfig({
      libp2p,
      repo,
      peerInfo,
      options: constructorOptions
    });
    const ipns = new IPNS(ipnsRouting, repo.datastore, peerInfo, keychain, {
      pass: initOptions.pass
    });
    const bitswap = new Bitswap(libp2p, repo.blocks, {
      statsEnabled: true
    });
    await bitswap.start();
    blockService.setExchange(bitswap);
    const files = Components.files({
      ipld,
      blockService,
      repo,
      preload,
      options: constructorOptions
    });
    const mfsPreload = createMfsPreload({
      files,
      preload,
      options: constructorOptions.preload
    });
    await Promise.all([ipns.republisher.start(), preload.start(), mfsPreload.start()]);
    const api = createApi({
      apiManager,
      bitswap,
      blockService,
      config,
      constructorOptions,
      files,
      gcLock,
      initOptions,
      ipld,
      ipns,
      keychain,
      libp2p,
      mfsPreload,
      peerInfo,
      pinManager,
      preload,
      print,
      repo
    });
    apiManager.update(api, () => undefined);
  } catch (err) {
    cancel();
    startPromise.reject(err);
    throw err;
  }

  startPromise.resolve(apiManager.api);
  return apiManager.api;
};

function createApi({
  apiManager,
  bitswap,
  blockService,
  config,
  constructorOptions,
  files,
  gcLock,
  initOptions,
  ipld,
  ipns,
  keychain,
  libp2p,
  mfsPreload,
  peerInfo,
  pinManager,
  preload,
  print,
  repo
}) {
  const dag = {
    get: Components.dag.get({
      ipld,
      preload
    }),
    resolve: Components.dag.resolve({
      ipld,
      preload
    }),
    tree: Components.dag.tree({
      ipld,
      preload
    })
  };
  const object = {
    data: Components.object.data({
      ipld,
      preload
    }),
    get: Components.object.get({
      ipld,
      preload
    }),
    links: Components.object.links({
      dag
    }),
    new: Components.object.new({
      ipld,
      preload
    }),
    patch: {
      addLink: Components.object.patch.addLink({
        ipld,
        gcLock,
        preload
      }),
      appendData: Components.object.patch.appendData({
        ipld,
        gcLock,
        preload
      }),
      rmLink: Components.object.patch.rmLink({
        ipld,
        gcLock,
        preload
      }),
      setData: Components.object.patch.setData({
        ipld,
        gcLock,
        preload
      })
    },
    put: Components.object.put({
      ipld,
      gcLock,
      preload
    }),
    stat: Components.object.stat({
      ipld,
      preload
    })
  };
  const pin = {
    add: Components.pin.add({
      pinManager,
      gcLock,
      dag
    }),
    ls: Components.pin.ls({
      pinManager,
      dag
    }),
    rm: Components.pin.rm({
      pinManager,
      gcLock,
      dag
    })
  }; // FIXME: resolve this circular dependency

  dag.put = Components.dag.put({
    ipld,
    pin,
    gcLock,
    preload
  });
  const add = Components.add({
    ipld,
    preload,
    pin,
    gcLock,
    options: constructorOptions
  });
  const isOnline = Components.isOnline({
    libp2p
  });
  const dns = Components.dns();
  const name = {
    pubsub: {
      cancel: Components.name.pubsub.cancel({
        ipns,
        options: constructorOptions
      }),
      state: Components.name.pubsub.state({
        ipns,
        options: constructorOptions
      }),
      subs: Components.name.pubsub.subs({
        ipns,
        options: constructorOptions
      })
    },
    publish: Components.name.publish({
      ipns,
      dag,
      peerInfo,
      isOnline,
      keychain,
      options: constructorOptions
    }),
    resolve: Components.name.resolve({
      dns,
      ipns,
      peerInfo,
      isOnline,
      options: constructorOptions
    })
  };
  const resolve = Components.resolve({
    name,
    ipld
  });
  const refs = Components.refs({
    ipld,
    resolve,
    preload
  });
  refs.local = Components.refs.local({
    repo
  });

  const pubsubNotEnabled = async () => {
    // eslint-disable-line require-await
    throw new NotEnabledError('pubsub not enabled');
  };

  const pubsub = get(constructorOptions, 'config.Pubsub.Enabled', get(config, 'Pubsub.Enabled', true)) ? Components.pubsub({
    libp2p
  }) : {
    subscribe: pubsubNotEnabled,
    unsubscribe: pubsubNotEnabled,
    publish: pubsubNotEnabled,
    ls: pubsubNotEnabled,
    peers: pubsubNotEnabled
  };
  const api = {
    add,
    bitswap: {
      stat: Components.bitswap.stat({
        bitswap
      }),
      unwant: Components.bitswap.unwant({
        bitswap
      }),
      wantlist: Components.bitswap.wantlist({
        bitswap
      })
    },
    block: {
      get: Components.block.get({
        blockService,
        preload
      }),
      put: Components.block.put({
        blockService,
        gcLock,
        preload
      }),
      rm: Components.block.rm({
        blockService,
        gcLock,
        pinManager
      }),
      stat: Components.block.stat({
        blockService,
        preload
      })
    },
    bootstrap: {
      add: Components.bootstrap.add({
        repo
      }),
      list: Components.bootstrap.list({
        repo
      }),
      rm: Components.bootstrap.rm({
        repo
      })
    },
    cat: Components.cat({
      ipld,
      preload
    }),
    config: Components.config({
      repo
    }),
    dag,
    dns,
    files,
    get: Components.get({
      ipld,
      preload
    }),
    id: Components.id({
      peerInfo
    }),
    init: async () => {
      throw new AlreadyInitializedError();
    },
    // eslint-disable-line require-await
    isOnline,
    key: {
      export: Components.key.export({
        keychain
      }),
      gen: Components.key.gen({
        keychain
      }),
      import: Components.key.import({
        keychain
      }),
      info: Components.key.info({
        keychain
      }),
      list: Components.key.list({
        keychain
      }),
      rename: Components.key.rename({
        keychain
      }),
      rm: Components.key.rm({
        keychain
      })
    },
    libp2p,
    ls: Components.ls({
      ipld,
      preload
    }),
    name,
    object,
    pin,
    ping: Components.ping({
      libp2p
    }),
    pubsub,
    refs,
    repo: {
      gc: Components.repo.gc({
        gcLock,
        pin,
        pinManager,
        refs,
        repo
      }),
      stat: Components.repo.stat({
        repo
      }),
      version: Components.repo.version({
        repo
      })
    },
    resolve,
    start: () => apiManager.api,
    stats: {
      bitswap: Components.bitswap.stat({
        bitswap
      }),
      bw: libp2p.metrics ? Components.stats.bw({
        libp2p
      }) : async () => {
        // eslint-disable-line require-await
        throw new NotEnabledError('libp2p metrics not enabled');
      },
      repo: Components.repo.stat({
        repo
      })
    },
    stop: Components.stop({
      apiManager,
      bitswap,
      options: constructorOptions,
      blockService,
      gcLock,
      initOptions,
      ipld,
      ipns,
      keychain,
      libp2p,
      mfsPreload,
      peerInfo,
      preload,
      print,
      repo
    }),
    swarm: {
      addrs: Components.swarm.addrs({
        libp2p
      }),
      connect: Components.swarm.connect({
        libp2p
      }),
      disconnect: Components.swarm.disconnect({
        libp2p
      }),
      localAddrs: Components.swarm.localAddrs({
        peerInfo
      }),
      peers: Components.swarm.peers({
        libp2p
      })
    },
    version: Components.version({
      repo
    })
  };
  return api;
}

/***/ }),
/* 986 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const WantManager = __webpack_require__(987);

const Network = __webpack_require__(993);

const DecisionEngine = __webpack_require__(994);

const Notifications = __webpack_require__(996);

const logger = __webpack_require__(44).logger;

const Stats = __webpack_require__(997);

const defaultOptions = {
  statsEnabled: false,
  statsComputeThrottleTimeout: 1000,
  statsComputeThrottleMaxQueueSize: 1000
};
const statsKeys = ['blocksReceived', 'dataReceived', 'dupBlksReceived', 'dupDataReceived', 'blocksSent', 'dataSent', 'providesBufferLength', 'wantListLength', 'peerCount'];
/**
 * JavaScript implementation of the Bitswap 'data exchange' protocol
 * used by IPFS.
 *
 * @param {Libp2p} libp2p
 * @param {Blockstore} blockstore
 * @param {Object} options
 */

class Bitswap {
  constructor(libp2p, blockstore, options) {
    this._libp2p = libp2p;
    this._log = logger(this.peerInfo.id);
    this._options = Object.assign({}, defaultOptions, options); // stats

    this._stats = new Stats(statsKeys, {
      enabled: this._options.statsEnabled,
      computeThrottleTimeout: this._options.statsComputeThrottleTimeout,
      computeThrottleMaxQueueSize: this._options.statsComputeThrottleMaxQueueSize
    }); // the network delivers messages

    this.network = new Network(libp2p, this, {}, this._stats); // local database

    this.blockstore = blockstore;
    this.engine = new DecisionEngine(this.peerInfo.id, blockstore, this.network, this._stats); // handle message sending

    this.wm = new WantManager(this.peerInfo.id, this.network, this._stats);
    this.notifications = new Notifications(this.peerInfo.id);
  }

  get peerInfo() {
    return this._libp2p.peerInfo;
  } // handle messages received through the network


  async _receiveMessage(peerId, incoming) {
    try {
      await this.engine.messageReceived(peerId, incoming);
    } catch (err) {
      // Only logging the issue to process as much as possible
      // of the message. Currently `messageReceived` does not
      // throw any errors, but this could change in the future.
      this._log('failed to receive message', incoming);
    }

    if (incoming.blocks.size === 0) {
      return;
    }

    const blocks = Array.from(incoming.blocks.values()); // quickly send out cancels, reduces chances of duplicate block receives

    const wanted = blocks.filter(b => this.wm.wantlist.contains(b.cid)).map(b => b.cid);
    this.wm.cancelWants(wanted);
    await Promise.all(blocks.map(async b => {
      const wasWanted = wanted.includes(b.cid);
      await this._handleReceivedBlock(peerId, b, wasWanted);
    }));
  }

  async _handleReceivedBlock(peerId, block, wasWanted) {
    this._log('received block');

    const has = await this.blockstore.has(block.cid);

    this._updateReceiveCounters(peerId.toB58String(), block, has);

    if (has || !wasWanted) {
      return;
    }

    await this.put(block);
  }

  _updateReceiveCounters(peerId, block, exists) {
    this._stats.push(peerId, 'blocksReceived', 1);

    this._stats.push(peerId, 'dataReceived', block.data.length);

    if (exists) {
      this._stats.push(peerId, 'dupBlksReceived', 1);

      this._stats.push(peerId, 'dupDataReceived', block.data.length);
    }
  } // handle errors on the receiving channel


  _receiveError(err) {
    this._log.error('ReceiveError: %s', err.message);
  } // handle new peers


  _onPeerConnected(peerId) {
    this.wm.connected(peerId);
  } // handle peers being disconnected


  _onPeerDisconnected(peerId) {
    this.wm.disconnected(peerId);
    this.engine.peerDisconnected(peerId);

    this._stats.disconnected(peerId);
  }
  /**
   * @returns {void}
   */


  enableStats() {
    this._stats.enable();
  }
  /**
   * @returns {void}
   */


  disableStats() {
    this._stats.disable();
  }
  /**
   * Return the current wantlist for a given `peerId`
   *
   * @param {PeerId} peerId
   * @returns {Map}
   */


  wantlistForPeer(peerId) {
    return this.engine.wantlistForPeer(peerId);
  }
  /**
   * Return ledger information for a given `peerId`
   *
   * @param {PeerId} peerId
   * @returns {Object}
   */


  ledgerForPeer(peerId) {
    return this.engine.ledgerForPeer(peerId);
  }
  /**
   * Fetch a given block by cid. If the block is in the local
   * blockstore it is returned, otherwise the block is added to the wantlist and returned once another node sends it to us.
   *
   * @param {CID} cid
   * @returns {Promise<Block>}
   */


  async get(cid) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;

    var _iteratorError;

    try {
      for (var _iterator = _asyncIterator(this.getMany([cid])), _step, _value; _step = await _iterator.next(), _iteratorNormalCompletion = _step.done, _value = await _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
        const block = _value;
        return block;
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          await _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }
  /**
   * Fetch a a list of blocks by cid. If the blocks are in the local
   * blockstore they are returned, otherwise the blocks are added to the wantlist and returned once another node sends them to us.
   *
   * @param {Iterable<CID>} cids
   * @returns {Promise<AsyncIterator<Block>>}
   */


  getMany(cids) {
    var _this = this;

    return _wrapAsyncGenerator(function* () {
      let pendingStart = cids.length;
      const wantList = [];
      let promptedNetwork = false;

      const fetchFromNetwork = async cid => {
        wantList.push(cid);

        const blockP = _this.notifications.wantBlock(cid);

        if (!pendingStart) {
          _this.wm.wantBlocks(wantList);
        }

        const block = await blockP;

        _this.wm.cancelWants([cid]);

        return block;
      };

      for (const cid of cids) {
        const has = yield _awaitAsyncGenerator(_this.blockstore.has(cid));
        pendingStart--;

        if (has) {
          if (!pendingStart) {
            _this.wm.wantBlocks(wantList);
          }

          yield _this.blockstore.get(cid);
          continue;
        }

        if (!promptedNetwork) {
          promptedNetwork = true;

          _this.network.findAndConnect(cids[0]).catch(err => _this._log.error(err));
        } // we don't have the block locally so fetch it from the network


        yield fetchFromNetwork(cid);
      }
    })();
  }
  /**
   * Removes the given CIDs from the wantlist independent of any ref counts
   *
   * @param {Iterable<CID>} cids
   * @returns {void}
   */


  unwant(cids) {
    if (!Array.isArray(cids)) {
      cids = [cids];
    }

    this.wm.unwantBlocks(cids);
    cids.forEach(cid => this.notifications.unwantBlock(cid));
  }
  /**
   * Removes the given keys from the want list
   *
   * @param {Iterable<CID>} cids
   * @returns {void}
   */


  cancelWants(cids) {
    if (!Array.isArray(cids)) {
      cids = [cids];
    }

    this.wm.cancelWants(cids);
  }
  /**
   * Put the given block to the underlying blockstore and
   * send it to nodes that have it in their wantlist.
   *
   * @param {Block} block
   * @returns {Promise<void>}
   */


  async put(block) {
    // eslint-disable-line require-await
    return this.putMany([block]);
  }
  /**
   * Put the given blocks to the underlying blockstore and
   * send it to nodes that have it them their wantlist.
   *
   * @param {AsyncIterable<Block>|Iterable<Block>} blocks
   * @returns {Promise<void>}
   */


  async putMany(blocks) {
    // eslint-disable-line require-await
    const self = this;
    return this.blockstore.putMany(_wrapAsyncGenerator(function* () {
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;

      var _iteratorError2;

      try {
        for (var _iterator2 = _asyncIterator(blocks), _step2, _value2; _step2 = yield _awaitAsyncGenerator(_iterator2.next()), _iteratorNormalCompletion2 = _step2.done, _value2 = yield _awaitAsyncGenerator(_step2.value), !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {
          const block = _value2;

          if (yield _awaitAsyncGenerator(self.blockstore.has(block.cid))) {
            continue;
          }

          yield block;
          self.notifications.hasBlock(block);
          self.engine.receivedBlocks([block.cid]); // Note: Don't wait for provide to finish before returning

          self.network.provide(block.cid).catch(err => {
            self._log.error('Failed to provide: %s', err.message);
          });
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
            yield _awaitAsyncGenerator(_iterator2.return());
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    })());
  }
  /**
   * Get the current list of wants.
   *
   * @returns {Iterator<WantlistEntry>}
   */


  getWantlist() {
    return this.wm.wantlist.entries();
  }
  /**
   * Get the current list of partners.
   *
   * @returns {Iterator<PeerId>}
   */


  peers() {
    return this.engine.peers();
  }
  /**
   * Get stats about the bitswap node.
   *
   * @returns {Object}
   */


  stat() {
    return this._stats;
  }
  /**
   * Start the bitswap node.
   *
   * @returns {void}
   */


  start() {
    this.wm.start();
    this.network.start();
    this.engine.start();
  }
  /**
   * Stop the bitswap node.
   *
   * @returns {void}
   */


  stop() {
    this._stats.stop();

    this.wm.stop();
    this.network.stop();
    this.engine.stop();
  }

}

module.exports = Bitswap;

/***/ }),
/* 987 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const Message = __webpack_require__(120);

const Wantlist = __webpack_require__(121);

const CONSTANTS = __webpack_require__(193);

const MsgQueue = __webpack_require__(992);

const logger = __webpack_require__(44).logger;

module.exports = class WantManager {
  constructor(peerId, network, stats) {
    this.peers = new Map();
    this.wantlist = new Wantlist(stats);
    this.network = network;
    this._stats = stats;
    this._peerId = peerId;
    this._log = logger(peerId, 'want');
  }

  _addEntries(cids, cancel, force) {
    const entries = cids.map((cid, i) => {
      return new Message.Entry(cid, CONSTANTS.kMaxPriority - i, cancel);
    });
    entries.forEach(e => {
      // add changes to our wantlist
      if (e.cancel) {
        if (force) {
          this.wantlist.removeForce(e.cid);
        } else {
          this.wantlist.remove(e.cid);
        }
      } else {
        this._log('adding to wl');

        this.wantlist.add(e.cid, e.priority);
      }
    }); // broadcast changes

    for (const p of this.peers.values()) {
      p.addEntries(entries);
    }
  }

  _startPeerHandler(peerId) {
    let mq = this.peers.get(peerId.toB58String());

    if (mq) {
      mq.refcnt++;
      return;
    }

    mq = new MsgQueue(this._peerId, peerId, this.network); // new peer, give them the full wantlist

    const fullwantlist = new Message(true);

    for (const entry of this.wantlist.entries()) {
      fullwantlist.addEntry(entry[1].cid, entry[1].priority);
    }

    mq.addMessage(fullwantlist);
    this.peers.set(peerId.toB58String(), mq);
    return mq;
  }

  _stopPeerHandler(peerId) {
    const mq = this.peers.get(peerId.toB58String());

    if (!mq) {
      return;
    }

    mq.refcnt--;

    if (mq.refcnt > 0) {
      return;
    }

    this.peers.delete(peerId.toB58String());
  } // add all the cids to the wantlist


  wantBlocks(cids) {
    this._addEntries(cids, false);
  } // remove blocks of all the given keys without respecting refcounts


  unwantBlocks(cids) {
    this._log('unwant blocks: %s', cids.length);

    this._addEntries(cids, true, true);
  } // cancel wanting all of the given keys


  cancelWants(cids) {
    this._log('cancel wants: %s', cids.length);

    this._addEntries(cids, true);
  } // Returns a list of all currently connected peers


  connectedPeers() {
    return Array.from(this.peers.keys());
  }

  connected(peerId) {
    this._startPeerHandler(peerId);
  }

  disconnected(peerId) {
    this._stopPeerHandler(peerId);
  }

  start() {
    // resend entire wantlist every so often
    this.timer = setInterval(() => {
      this._log('resend full-wantlist');

      const fullwantlist = new Message(true);
      this.wantlist.forEach(entry => {
        fullwantlist.addEntry(entry.cid, entry.priority);
      });
      this.peers.forEach(p => p.addMessage(fullwantlist));
    }, 60 * 1000);
  }

  stop() {
    this.peers.forEach(mq => this.disconnected(mq.peerId));
    clearInterval(this.timer);
  }

};

/***/ }),
/* 988 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

const varint = __webpack_require__(19);

module.exports = buf => {
  if (!Buffer.isBuffer(buf)) {
    throw new Error('arg needs to be a buffer');
  }

  let result = [];

  while (buf.length > 0) {
    const num = varint.decode(buf);
    result.push(num);
    buf = buf.slice(varint.decode.bytes);
  }

  return result;
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 989 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const protons = __webpack_require__(24); // from: https://github.com/ipfs/go-ipfs/blob/master/exchange/bitswap/message/pb/message.proto


module.exports = protons("\n  message Message {\n    message Wantlist {\n      message Entry {\n        // changed from string to bytes, it makes a difference in JavaScript\n        optional bytes block = 1;      // the block cid (cidV0 in bitswap 1.0.0, cidV1 in bitswap 1.1.0)\n        optional int32 priority = 2;    // the priority (normalized). default to 1\n        optional bool cancel = 3;       // whether this revokes an entry\n      }\n\n      repeated Entry entries = 1;       // a list of wantlist entries\n      optional bool full = 2;           // whether this is the full wantlist. default to false\n    }\n\n    message Block {\n      optional bytes prefix = 1;        // CID prefix (cid version, multicodec and multihash prefix (type + length)\n      optional bytes data = 2;\n    }\n\n    optional Wantlist wantlist = 1;\n    repeated bytes blocks = 2;          // used to send Blocks in bitswap 1.0.0\n    repeated Block payload = 3;         // used to send Blocks in bitswap 1.1.0\n  }\n");

/***/ }),
/* 990 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const WantlistEntry = __webpack_require__(121).Entry;

module.exports = class BitswapMessageEntry {
  constructor(cid, priority, cancel) {
    this.entry = new WantlistEntry(cid, priority);
    this.cancel = Boolean(cancel);
  }

  get cid() {
    return this.entry.cid;
  }

  set cid(cid) {
    this.entry.cid = cid;
  }

  get priority() {
    return this.entry.priority;
  }

  set priority(val) {
    this.entry.priority = val;
  }

  get [Symbol.toStringTag]() {
    const cidStr = this.cid.toString('base58btc');
    return "BitswapMessageEntry ".concat(cidStr, " <cancel: ").concat(this.cancel, ", priority: ").concat(this.priority, ">");
  }

  equals(other) {
    return this.cancel === other.cancel && this.entry.equals(other.entry);
  }

};

/***/ }),
/* 991 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


class WantListEntry {
  constructor(cid, priority) {
    // Keep track of how many requests we have for this key
    this._refCounter = 1;
    this.cid = cid;
    this.priority = priority || 1;
  }

  inc() {
    this._refCounter += 1;
  }

  dec() {
    this._refCounter = Math.max(0, this._refCounter - 1);
  }

  hasRefs() {
    return this._refCounter > 0;
  } // So that console.log prints a nice description of this object


  get [Symbol.toStringTag]() {
    const cidStr = this.cid.toString('base58btc');
    return "WantlistEntry <key: ".concat(cidStr, ", priority: ").concat(this.priority, ", refs: ").concat(this._refCounter, ">");
  }

  equals(other) {
    return this._refCounter === other._refCounter && this.cid.equals(other.cid) && this.priority === other.priority;
  }

}

module.exports = WantListEntry;

/***/ }),
/* 992 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const debounce = __webpack_require__(366);

const Message = __webpack_require__(120);

const logger = __webpack_require__(44).logger;

module.exports = class MsgQueue {
  constructor(selfPeerId, otherPeerId, network) {
    this.peerId = otherPeerId;
    this.network = network;
    this.refcnt = 1;
    this._entries = [];
    this._log = logger(selfPeerId, 'msgqueue', otherPeerId.toB58String().slice(0, 8));
    this.sendEntries = debounce(this._sendEntries.bind(this), 200);
  }

  addMessage(msg) {
    if (msg.empty) {
      return;
    }

    this.send(msg);
  }

  addEntries(entries) {
    this._entries = this._entries.concat(entries);
    this.sendEntries();
  }

  _sendEntries() {
    if (!this._entries.length) {
      return;
    }

    const msg = new Message(false);

    this._entries.forEach(entry => {
      if (entry.cancel) {
        msg.cancel(entry.cid);
      } else {
        msg.addEntry(entry.cid, entry.priority);
      }
    });

    this._entries = [];
    this.addMessage(msg);
  }

  async send(msg) {
    try {
      await this.network.connectTo(this.peerId);
    } catch (err) {
      this._log.error('cant connect to peer %s: %s', this.peerId.toB58String(), err.message);

      return;
    }

    this._log('sending message to peer %s', this.peerId.toB58String()); // Note: Don't wait for sendMessage() to complete


    this.network.sendMessage(this.peerId, msg).catch(err => {
      this._log.error('send error: %s', err.message);
    });
  }

};

/***/ }),
/* 993 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

const lp = __webpack_require__(26);

const pipe = __webpack_require__(23);

const Message = __webpack_require__(120);

const CONSTANTS = __webpack_require__(193);

const logger = __webpack_require__(44).logger;

const BITSWAP100 = '/ipfs/bitswap/1.0.0';
const BITSWAP110 = '/ipfs/bitswap/1.1.0';

class Network {
  constructor(libp2p, bitswap, options, stats) {
    this._log = logger(libp2p.peerInfo.id, 'network');
    options = options || {};
    this.libp2p = libp2p;
    this.bitswap = bitswap;
    this.protocols = [BITSWAP100];

    if (!options.b100Only) {
      // Latest bitswap first
      this.protocols.unshift(BITSWAP110);
    }

    this._stats = stats;
    this._running = false; // bind event listeners

    this._onPeerConnect = this._onPeerConnect.bind(this);
    this._onPeerDisconnect = this._onPeerDisconnect.bind(this);
    this._onConnection = this._onConnection.bind(this);
  }

  start() {
    this._running = true;
    this.libp2p.handle(this.protocols, this._onConnection);
    this.libp2p.on('peer:connect', this._onPeerConnect);
    this.libp2p.on('peer:disconnect', this._onPeerDisconnect); // All existing connections are like new ones for us

    for (const peer of this.libp2p.peerStore.peers.values()) {
      if (this.libp2p.registrar.getConnection(peer)) {
        this._onPeerConnect(peer);
      }
    }
  }

  stop() {
    this._running = false; // Unhandle both, libp2p doesn't care if it's not already handled

    this.libp2p.unhandle(this.protocols);
    this.libp2p.removeListener('peer:connect', this._onPeerConnect);
    this.libp2p.removeListener('peer:disconnect', this._onPeerDisconnect);
  }
  /**
   * Handles both types of incoming bitswap messages
   * @private
   * @param {object} param0
   * @param {string} param0.protocol The protocol the stream is running
   * @param {Stream} param0.stream A duplex iterable stream
   * @param {Connection} param0.connection A libp2p Connection
   * @returns {void}
   */


  async _onConnection({
    protocol,
    stream,
    connection
  }) {
    if (!this._running) {
      return;
    }

    this._log('incoming new bitswap %s connection from %s', protocol, connection.remotePeer.toB58String());

    try {
      await pipe(stream, lp.decode(), async source => {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;

        var _iteratorError;

        try {
          for (var _iterator = _asyncIterator(source), _step, _value; _step = await _iterator.next(), _iteratorNormalCompletion = _step.done, _value = await _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
            const data = _value;

            try {
              const message = await Message.deserialize(data.slice());

              this.bitswap._receiveMessage(connection.remotePeer, message);
            } catch (err) {
              this.bitswap._receiveError(err);

              break;
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              await _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      });
    } catch (err) {
      this._log(err);
    }
  }

  _onPeerConnect(peerInfo) {
    this.bitswap._onPeerConnected(peerInfo.id);
  }

  _onPeerDisconnect(peerInfo) {
    this.bitswap._onPeerDisconnected(peerInfo.id);
  }
  /**
   * Find providers given a `cid`.
   *
   * @param {CID} cid
   * @param {number} maxProviders
   * @returns {Promise<Result<Array>>}
   */


  findProviders(cid, maxProviders) {
    return this.libp2p.contentRouting.findProviders(cid, {
      maxTimeout: CONSTANTS.providerRequestTimeout,
      maxNumProviders: maxProviders
    });
  }
  /**
   * Find the providers of a given `cid` and connect to them.
   *
   * @param {CID} cid
   * @returns {void}
   */


  async findAndConnect(cid) {
    const connectAttempts = [];
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;

    var _iteratorError2;

    try {
      for (var _iterator2 = _asyncIterator(this.findProviders(cid, CONSTANTS.maxProvidersPerRequest)), _step2, _value2; _step2 = await _iterator2.next(), _iteratorNormalCompletion2 = _step2.done, _value2 = await _step2.value, !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {
        const provider = _value2;

        this._log('connecting to providers', provider.id.toB58String());

        connectAttempts.push(this.connectTo(provider));
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          await _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    await Promise.all(connectAttempts);
  }

  async provide(cid) {
    await this.libp2p.contentRouting.provide(cid);
  } // Connect to the given peer
  // Send the given msg (instance of Message) to the given peer


  async sendMessage(peer, msg) {
    if (!this._running) throw new Error('network isn\'t running');
    const stringId = peer.toB58String();

    this._log('sendMessage to %s', stringId, msg);

    const {
      stream,
      protocol
    } = await this._dialPeer(peer);
    let serialized;

    switch (protocol) {
      case BITSWAP100:
        serialized = msg.serializeToBitswap100();
        break;

      case BITSWAP110:
        serialized = msg.serializeToBitswap110();
        break;

      default:
        throw new Error('Unknown protocol: ' + protocol);
    } // Note: Don't wait for writeMessage() to complete


    writeMessage(stream, serialized, this._log);

    this._updateSentStats(peer, msg.blocks);
  }
  /**
   * Connects to another peer
   *
   * @param {PeerInfo|PeerId|Multiaddr} peer
   * @returns {Promise.<Connection>}
   */


  async connectTo(peer) {
    // eslint-disable-line require-await
    if (!this._running) {
      throw new Error('network isn\'t running');
    }

    return this.libp2p.dial(peer);
  } // Dial to the peer and try to use the most recent Bitswap


  _dialPeer(peer) {
    return this.libp2p.dialProtocol(peer, [BITSWAP110, BITSWAP100]);
  }

  _updateSentStats(peer, blocks) {
    const peerId = peer.toB58String();

    if (this._stats) {
      blocks.forEach(block => this._stats.push(peerId, 'dataSent', block.data.length));

      this._stats.push(peerId, 'blocksSent', blocks.size);
    }
  }

}

async function writeMessage(stream, msg, log) {
  try {
    await pipe([msg], lp.encode(), stream);
  } catch (err) {
    log(err);
  }
}

module.exports = Network;

/***/ }),
/* 994 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const debounce = __webpack_require__(366);

const Message = __webpack_require__(120);

const Wantlist = __webpack_require__(121);

const Ledger = __webpack_require__(995);

const {
  logger,
  groupBy,
  pullAllWith,
  uniqWith
} = __webpack_require__(44);

const MAX_MESSAGE_SIZE = 512 * 1024;

class DecisionEngine {
  constructor(peerId, blockstore, network, stats) {
    this._log = logger(peerId, 'engine');
    this.blockstore = blockstore;
    this.network = network;
    this._stats = stats; // A list of of ledgers by their partner id

    this.ledgerMap = new Map();
    this._running = false; // List of tasks to be processed

    this._tasks = [];
    this._outbox = debounce(this._processTasks.bind(this), 100);
  }

  async _sendBlocks(peer, blocks) {
    // split into messages of max 512 * 1024 bytes
    const total = blocks.reduce((acc, b) => {
      return acc + b.data.byteLength;
    }, 0);

    if (total < MAX_MESSAGE_SIZE) {
      await this._sendSafeBlocks(peer, blocks);
      return;
    }

    let size = 0;
    let batch = [];
    let outstanding = blocks.length;

    for (const b of blocks) {
      outstanding--;
      batch.push(b);
      size += b.data.byteLength;

      if (size >= MAX_MESSAGE_SIZE || // need to ensure the last remaining items get sent
      outstanding === 0) {
        size = 0;
        const nextBatch = batch.slice();
        batch = [];

        try {
          await this._sendSafeBlocks(peer, nextBatch);
        } catch (err) {
          // catch the error so as to send as many blocks as we can
          this._log('sendblock error: %s', err.message);
        }
      }
    }
  }

  async _sendSafeBlocks(peer, blocks) {
    const msg = new Message(false);
    blocks.forEach(b => msg.addBlock(b));
    await this.network.sendMessage(peer, msg);
  }

  async _processTasks() {
    if (!this._running || !this._tasks.length) {
      return;
    }

    const tasks = this._tasks;
    this._tasks = [];
    const entries = tasks.map(t => t.entry);
    const cids = entries.map(e => e.cid);
    const uniqCids = uniqWith((a, b) => a.equals(b), cids);
    const groupedTasks = groupBy(task => task.target.toB58String(), tasks);
    const blocks = await Promise.all(uniqCids.map(cid => this.blockstore.get(cid)));
    await Promise.all(Object.values(groupedTasks).map(async tasks => {
      // all tasks in the group have the same target
      const peer = tasks[0].target;
      const blockList = cids.map(cid => blocks.find(b => b.cid.equals(cid)));

      try {
        await this._sendBlocks(peer, blockList);
      } catch (err) {
        // `_sendBlocks` actually doesn't return any errors
        this._log.error('should never happen: ', err);

        return;
      }

      for (const block of blockList) {
        this.messageSent(peer, block);
      }
    }));
    this._tasks = [];
  }

  wantlistForPeer(peerId) {
    const peerIdStr = peerId.toB58String();

    if (!this.ledgerMap.has(peerIdStr)) {
      return new Map();
    }

    return this.ledgerMap.get(peerIdStr).wantlist.sortedEntries();
  }

  ledgerForPeer(peerId) {
    const peerIdStr = peerId.toB58String();
    const ledger = this.ledgerMap.get(peerIdStr);

    if (!ledger) {
      return null;
    }

    return {
      peer: ledger.partner.toPrint(),
      value: ledger.debtRatio(),
      sent: ledger.accounting.bytesSent,
      recv: ledger.accounting.bytesRecv,
      exchanged: ledger.exchangeCount
    };
  }

  peers() {
    return Array.from(this.ledgerMap.values()).map(l => l.partner);
  }

  receivedBlocks(cids) {
    if (!cids.length) {
      return;
    } // Check all connected peers if they want the block we received


    this.ledgerMap.forEach(ledger => {
      cids.map(cid => ledger.wantlistContains(cid)).filter(Boolean).forEach(entry => {
        this._tasks.push({
          entry: entry,
          target: ledger.partner
        });
      });
    });

    this._outbox();
  } // Handle incoming messages


  async messageReceived(peerId, msg) {
    const ledger = this._findOrCreate(peerId);

    if (msg.empty) {
      return;
    } // If the message was a full wantlist clear the current one


    if (msg.full) {
      ledger.wantlist = new Wantlist();
    }

    this._processBlocks(msg.blocks, ledger);

    if (msg.wantlist.size === 0) {
      return;
    }

    const cancels = [];
    const wants = [];
    msg.wantlist.forEach(entry => {
      if (entry.cancel) {
        ledger.cancelWant(entry.cid);
        cancels.push(entry);
      } else {
        ledger.wants(entry.cid, entry.priority);
        wants.push(entry);
      }
    });

    this._cancelWants(ledger, peerId, cancels);

    await this._addWants(ledger, peerId, wants);
  }

  _cancelWants(ledger, peerId, entries) {
    const id = peerId.toB58String();
    this._tasks = pullAllWith((t, e) => {
      const sameTarget = t.target.toB58String() === id;
      const sameCid = t.entry.cid.equals(e.cid);
      return sameTarget && sameCid;
    }, this._tasks, entries);
  }

  async _addWants(ledger, peerId, entries) {
    await Promise.all(entries.map(async entry => {
      // If we already have the block, serve it
      let exists;

      try {
        exists = await this.blockstore.has(entry.cid);
      } catch (err) {
        this._log.error('failed blockstore existence check for ' + entry.cid);

        return;
      }

      if (exists) {
        this._tasks.push({
          entry: entry.entry,
          target: peerId
        });
      }
    }));

    this._outbox();
  }

  _processBlocks(blocks, ledger) {
    const cids = [];
    blocks.forEach((b, cidStr) => {
      this._log('got block (%s bytes)', b.data.length);

      ledger.receivedBytes(b.data.length);
      cids.push(b.cid);
    });
    this.receivedBlocks(cids);
  } // Clear up all accounting things after message was sent


  messageSent(peerId, block) {
    const ledger = this._findOrCreate(peerId);

    ledger.sentBytes(block ? block.data.length : 0);

    if (block && block.cid) {
      ledger.wantlist.remove(block.cid);
    }
  }

  numBytesSentTo(peerId) {
    return this._findOrCreate(peerId).accounting.bytesSent;
  }

  numBytesReceivedFrom(peerId) {
    return this._findOrCreate(peerId).accounting.bytesRecv;
  }

  peerDisconnected(peerId) {// if (this.ledgerMap.has(peerId.toB58String())) {
    //   this.ledgerMap.delete(peerId.toB58String())
    // }
    //
    // TODO: figure out how to remove all other references
    // in the peer request queue
  }

  _findOrCreate(peerId) {
    const peerIdStr = peerId.toB58String();

    if (this.ledgerMap.has(peerIdStr)) {
      return this.ledgerMap.get(peerIdStr);
    }

    const l = new Ledger(peerId);
    this.ledgerMap.set(peerIdStr, l);

    if (this._stats) {
      this._stats.push(peerIdStr, 'peerCount', 1);
    }

    return l;
  }

  start() {
    this._running = true;
  }

  stop() {
    this._running = false;
  }

}

module.exports = DecisionEngine;

/***/ }),
/* 995 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const Wantlist = __webpack_require__(121);

class Ledger {
  constructor(peerId) {
    this.partner = peerId;
    this.wantlist = new Wantlist();
    this.exchangeCount = 0;
    this.sentToPeer = new Map();
    this.accounting = {
      bytesSent: 0,
      bytesRecv: 0
    };
  }

  sentBytes(n) {
    this.exchangeCount++;
    this.lastExchange = new Date().getTime();
    this.accounting.bytesSent += n;
  }

  receivedBytes(n) {
    this.exchangeCount++;
    this.lastExchange = new Date().getTime();
    this.accounting.bytesRecv += n;
  }

  wants(cid, priority) {
    this.wantlist.add(cid, priority);
  }

  cancelWant(cid) {
    this.wantlist.remove(cid);
  }

  wantlistContains(cid) {
    return this.wantlist.contains(cid);
  }

  debtRatio() {
    return this.accounting.bytesSent / (this.accounting.bytesRecv + 1); // +1 is to prevent division by zero
  }

}

module.exports = Ledger;

/***/ }),
/* 996 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const EventEmitter = __webpack_require__(11).EventEmitter;

const CONSTANTS = __webpack_require__(193);

const logger = __webpack_require__(44).logger;

const unwantEvent = c => "unwant:".concat(c);

const blockEvent = c => "block:".concat(c);
/**
 * Internal module used to track events about incoming blocks,
 * wants and unwants.
 *
 * @param {PeerId} peerId
 * @private
 */


class Notifications extends EventEmitter {
  constructor(peerId) {
    super();
    this.setMaxListeners(CONSTANTS.maxListeners);
    this._log = logger(peerId, 'notif');
    this._unwantListeners = {};
    this._blockListeners = {};
  }
  /**
   * Signal the system that we received `block`.
   *
   * @param {Block} block
   * @return {void}
   */


  hasBlock(block) {
    const cidStr = block.cid.toString('base58btc');
    const str = "block:".concat(cidStr);

    this._log(str);

    this.emit(str, block);
  }
  /**
   * Signal the system that we are waiting to receive the
   * block associated with the given `cid`.
   * Returns a Promise that resolves to the block when it is received,
   * or undefined when the block is unwanted.
   *
   * @param {CID} cid
   * @returns {Promise<Block>}
   */


  wantBlock(cid) {
    const cidStr = cid.toString('base58btc');

    this._log("wantBlock:".concat(cidStr));

    return new Promise((resolve, reject) => {
      this._unwantListeners[cidStr] = () => {
        this._log("manual unwant: ".concat(cidStr));

        this._cleanup(cidStr);

        resolve();
      };

      this._blockListeners[cidStr] = block => {
        this._cleanup(cidStr);

        resolve(block);
      };

      this.once(unwantEvent(cidStr), this._unwantListeners[cidStr]);
      this.once(blockEvent(cidStr), this._blockListeners[cidStr]);
    });
  }
  /**
   * Signal that the block is not wanted anymore.
   *
   * @param {CID} cid - the CID of the block that is not wanted anymore.
   * @returns {void}
   */


  unwantBlock(cid) {
    const str = "unwant:".concat(cid.toString('base58btc'));

    this._log(str);

    this.emit(str);
  }
  /**
   * Internal method to clean up once a block was received or unwanted.
   *
   * @private
   * @param  {string} cidStr
   * @returns {void}
   */


  _cleanup(cidStr) {
    if (this._unwantListeners[cidStr]) {
      this.removeListener(unwantEvent(cidStr), this._unwantListeners[cidStr]);
      delete this._unwantListeners[cidStr];
    }

    if (this._blockListeners[cidStr]) {
      this.removeListener(blockEvent(cidStr), this._blockListeners[cidStr]);
      delete this._blockListeners[cidStr];
    }
  }

}

module.exports = Notifications;

/***/ }),
/* 997 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const EventEmitter = __webpack_require__(11);

const Stat = __webpack_require__(998);

const defaultOptions = {
  movingAverageIntervals: [60 * 1000, // 1 minute
  5 * 60 * 1000, // 5 minutes
  15 * 60 * 1000 // 15 minutes
  ]
};

class Stats extends EventEmitter {
  constructor(initialCounters, _options) {
    super();
    const options = Object.assign({}, defaultOptions, _options);

    if (typeof options.computeThrottleTimeout !== 'number') {
      throw new Error('need computeThrottleTimeout');
    }

    if (typeof options.computeThrottleMaxQueueSize !== 'number') {
      throw new Error('need computeThrottleMaxQueueSize');
    }

    this._initialCounters = initialCounters;
    this._options = options;
    this._enabled = this._options.enabled;
    this._global = new Stat(initialCounters, options);

    this._global.on('update', stats => this.emit('update', stats));

    this._peers = new Map();
  }

  enable() {
    this._enabled = true;
    this._options.enabled = true;

    this._global.enable();
  }

  disable() {
    this._enabled = false;
    this._options.enabled = false;

    this._global.disable();
  }

  stop() {
    this._enabled = false;

    this._global.stop();

    for (const peerStat of this._peers) {
      peerStat[1].stop();
    }
  }

  get snapshot() {
    return this._global.snapshot;
  }

  get movingAverages() {
    return this._global.movingAverages;
  }

  forPeer(peerId) {
    if (peerId.toB58String) {
      peerId = peerId.toB58String();
    }

    return this._peers.get(peerId);
  }

  push(peer, counter, inc) {
    if (this._enabled) {
      this._global.push(counter, inc);

      if (peer) {
        let peerStats = this._peers.get(peer);

        if (!peerStats) {
          peerStats = new Stat(this._initialCounters, this._options);

          this._peers.set(peer, peerStats);
        }

        peerStats.push(counter, inc);
      }
    }
  }

  disconnected(peer) {
    const peerId = peer.toB58String();

    const peerStats = this._peers.get(peerId);

    if (peerStats) {
      peerStats.stop();

      this._peers.delete(peerId);
    }
  }

}

module.exports = Stats;

/***/ }),
/* 998 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const EventEmitter = __webpack_require__(11);

const Big = __webpack_require__(36);

const MovingAverage = __webpack_require__(327);

class Stats extends EventEmitter {
  constructor(initialCounters, options) {
    super();
    this._options = options;
    this._queue = [];
    this._stats = {};
    this._frequencyLastTime = Date.now();
    this._frequencyAccumulators = {};
    this._movingAverages = {};
    this._update = this._update.bind(this);
    initialCounters.forEach(key => {
      this._stats[key] = Big(0);
      this._movingAverages[key] = {};

      this._options.movingAverageIntervals.forEach(interval => {
        const ma = this._movingAverages[key][interval] = MovingAverage(interval);
        ma.push(this._frequencyLastTime, 0);
      });
    });
    this._enabled = this._options.enabled;
  }

  enable() {
    this._enabled = true;
  }

  disable() {
    this._disabled = true;
  }

  stop() {
    if (this._timeout) {
      clearTimeout(this._timeout);
    }
  }

  get snapshot() {
    return Object.assign({}, this._stats);
  }

  get movingAverages() {
    return Object.assign({}, this._movingAverages);
  }

  push(counter, inc) {
    if (this._enabled) {
      this._queue.push([counter, inc, Date.now()]);

      this._resetComputeTimeout();
    }
  }

  _resetComputeTimeout() {
    if (this._timeout) {
      clearTimeout(this._timeout);
    }

    this._timeout = setTimeout(this._update, this._nextTimeout());
  }

  _nextTimeout() {
    // calculate the need for an update, depending on the queue length
    const urgency = this._queue.length / this._options.computeThrottleMaxQueueSize;
    return Math.max(this._options.computeThrottleTimeout * (1 - urgency), 0);
  }

  _update() {
    this._timeout = null;

    if (this._queue.length) {
      let last;

      while (this._queue.length) {
        const op = last = this._queue.shift();

        this._applyOp(op);
      }

      this._updateFrequency(last[2]); // contains timestamp of last op


      this.emit('update', this._stats);
    }
  }

  _updateFrequency(latestTime) {
    const timeDiff = latestTime - this._frequencyLastTime;
    Object.keys(this._stats).forEach(key => {
      this._updateFrequencyFor(key, timeDiff, latestTime);
    });
    this._frequencyLastTime = latestTime;
  }

  _updateFrequencyFor(key, timeDiffMS, latestTime) {
    const count = this._frequencyAccumulators[key] || 0;
    this._frequencyAccumulators[key] = 0;
    const hz = count / timeDiffMS * 1000;
    let movingAverages = this._movingAverages[key];

    if (!movingAverages) {
      movingAverages = this._movingAverages[key] = {};
    }

    this._options.movingAverageIntervals.forEach(movingAverageInterval => {
      let movingAverage = movingAverages[movingAverageInterval];

      if (!movingAverage) {
        movingAverage = movingAverages[movingAverageInterval] = MovingAverage(movingAverageInterval);
      }

      movingAverage.push(latestTime, hz);
    });
  }

  _applyOp(op) {
    const key = op[0];
    const inc = op[1];

    if (typeof inc !== 'number') {
      throw new Error('invalid increment number:', inc);
    }

    let n;

    if (!Object.prototype.hasOwnProperty.call(this._stats, key)) {
      n = this._stats[key] = Big(0);
    } else {
      n = this._stats[key];
    }

    this._stats[key] = n.plus(inc);

    if (!this._frequencyAccumulators[key]) {
      this._frequencyAccumulators[key] = 0;
    }

    this._frequencyAccumulators[key] += inc;
  }

}

module.exports = Stats;

/***/ }),
/* 999 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const {
  TieredDatastore
} = __webpack_require__(296);

const get = __webpack_require__(168);

const PubsubDatastore = __webpack_require__(365);

const OfflineDatastore = __webpack_require__(309);

module.exports = ({
  libp2p,
  repo,
  peerInfo,
  options
}) => {
  // Setup online routing for IPNS with a tiered routing composed by a DHT and a Pubsub router (if properly enabled)
  const ipnsStores = []; // Add IPNS pubsub if enabled

  let pubsubDs;

  if (get(options, 'EXPERIMENTAL.ipnsPubsub', false)) {
    const pubsub = libp2p.pubsub;
    const localDatastore = repo.datastore;
    const peerId = peerInfo.id;
    pubsubDs = new PubsubDatastore(pubsub, localDatastore, peerId);
    ipnsStores.push(pubsubDs);
  } // DHT should not be added as routing if we are offline or it is disabled


  if (get(options, 'offline') || !get(options, 'libp2p.config.dht.enabled', false)) {
    const offlineDatastore = new OfflineDatastore(repo);
    ipnsStores.push(offlineDatastore);
  } else {
    ipnsStores.push(libp2p.dht);
  } // Create ipns routing with a set of datastores


  return new TieredDatastore(ipnsStores);
};

/***/ }),
/* 1000 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const debug = __webpack_require__(1);

const {
  cidToString
} = __webpack_require__(105);

const log = debug('ipfs:mfs-preload');
log.error = debug('ipfs:mfs-preload:error');

module.exports = ({
  preload,
  files,
  options
}) => {
  options = options || {};
  options.interval = options.interval || 30 * 1000;

  if (!options.enabled) {
    log('MFS preload disabled');

    const noop = async () => {};

    return {
      start: noop,
      stop: noop
    };
  }

  let rootCid, timeoutId;

  const preloadMfs = async () => {
    try {
      const stats = await files.stat('/');
      const nextRootCid = cidToString(stats.cid, {
        base: 'base32'
      });

      if (rootCid !== nextRootCid) {
        log("preloading updated MFS root ".concat(rootCid, " -> ").concat(stats.cid));
        await preload(stats.cid);
        rootCid = nextRootCid;
      }
    } catch (err) {
      log.error('failed to preload MFS root', err);
    } finally {
      timeoutId = setTimeout(preloadMfs, options.interval);
    }
  };

  return {
    async start() {
      const stats = await files.stat('/');
      rootCid = cidToString(stats.cid, {
        base: 'base32'
      });
      log("monitoring MFS root ".concat(stats.cid));
      timeoutId = setTimeout(preloadMfs, options.interval);
    },

    stop() {
      clearTimeout(timeoutId);
    }

  };
};

/***/ }),
/* 1001 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

const Big = __webpack_require__(36);

const parseDuration = __webpack_require__(154);

const errCode = __webpack_require__(2);

function getBandwidthStats(libp2p, opts) {
  let stats;

  if (opts.peer) {
    stats = libp2p.metrics.forPeer(opts.peer);
  } else if (opts.proto) {
    stats = libp2p.metrics.forProtocol(opts.proto);
  } else {
    stats = libp2p.metrics.global;
  }

  if (!stats) {
    return {
      totalIn: new Big(0),
      totalOut: new Big(0),
      rateIn: new Big(0),
      rateOut: new Big(0)
    };
  }

  const {
    movingAverages,
    snapshot
  } = stats;
  return {
    totalIn: snapshot.dataReceived,
    totalOut: snapshot.dataSent,
    rateIn: new Big(movingAverages.dataReceived[60000].movingAverage() / 60),
    rateOut: new Big(movingAverages.dataSent[60000].movingAverage() / 60)
  };
}

module.exports = ({
  libp2p
}) => {
  return (
    /*#__PURE__*/
    function () {
      var _ref = _wrapAsyncGenerator(function* (options) {
        options = options || {};

        if (!options.poll) {
          yield getBandwidthStats(libp2p, options);
          return;
        }

        let interval = options.interval || 1000;

        try {
          interval = typeof interval === 'string' ? parseDuration(interval) : interval;
          if (!interval || interval < 0) throw new Error('invalid poll interval');
        } catch (err) {
          throw errCode(err, 'ERR_INVALID_POLL_INTERVAL');
        }

        let timeoutId;

        try {
          while (true) {
            yield getBandwidthStats(libp2p, options); // eslint-disable-next-line no-loop-func

            yield _awaitAsyncGenerator(new Promise(resolve => {
              timeoutId = setTimeout(resolve, interval);
            }));
          }
        } finally {
          clearTimeout(timeoutId);
        }
      });

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }()
  );
};

/***/ }),
/* 1002 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const defer = __webpack_require__(69);

const {
  NotStartedError,
  AlreadyInitializedError
} = __webpack_require__(79);

const Components = __webpack_require__(101);

module.exports = ({
  apiManager,
  options: constructorOptions,
  bitswap,
  blockService,
  gcLock,
  initOptions,
  ipld,
  ipns,
  keychain,
  libp2p,
  mfsPreload,
  peerInfo,
  pinManager,
  preload,
  print,
  repo
}) => async function stop() {
  const stopPromise = defer();
  const {
    cancel
  } = apiManager.update({
    stop: () => stopPromise.promise
  });

  try {
    blockService.unsetExchange();
    bitswap.stop();
    preload.stop();
    await Promise.all([ipns.republisher.stop(), mfsPreload.stop(), libp2p.stop(), repo.close()]); // Clear our addresses so we can start clean

    peerInfo.multiaddrs.clear();
    const api = createApi({
      apiManager,
      constructorOptions,
      blockService,
      gcLock,
      initOptions,
      ipld,
      keychain,
      peerInfo,
      pinManager,
      preload,
      print,
      repo
    });
    apiManager.update(api, () => {
      throw new NotStartedError();
    });
  } catch (err) {
    cancel();
    stopPromise.reject(err);
    throw err;
  }

  stopPromise.resolve(apiManager.api);
  return apiManager.api;
};

function createApi({
  apiManager,
  constructorOptions,
  blockService,
  gcLock,
  initOptions,
  ipld,
  keychain,
  peerInfo,
  pinManager,
  preload,
  print,
  repo
}) {
  const dag = {
    get: Components.dag.get({
      ipld,
      preload
    }),
    resolve: Components.dag.resolve({
      ipld,
      preload
    }),
    tree: Components.dag.tree({
      ipld,
      preload
    })
  };
  const object = {
    data: Components.object.data({
      ipld,
      preload
    }),
    get: Components.object.get({
      ipld,
      preload
    }),
    links: Components.object.links({
      dag
    }),
    new: Components.object.new({
      ipld,
      preload
    }),
    patch: {
      addLink: Components.object.patch.addLink({
        ipld,
        gcLock,
        preload
      }),
      appendData: Components.object.patch.appendData({
        ipld,
        gcLock,
        preload
      }),
      rmLink: Components.object.patch.rmLink({
        ipld,
        gcLock,
        preload
      }),
      setData: Components.object.patch.setData({
        ipld,
        gcLock,
        preload
      })
    },
    put: Components.object.put({
      ipld,
      gcLock,
      preload
    }),
    stat: Components.object.stat({
      ipld,
      preload
    })
  };
  const pin = {
    add: Components.pin.add({
      pinManager,
      gcLock,
      dag
    }),
    ls: Components.pin.ls({
      pinManager,
      dag
    }),
    rm: Components.pin.rm({
      pinManager,
      gcLock,
      dag
    })
  }; // FIXME: resolve this circular dependency

  dag.put = Components.dag.put({
    ipld,
    pin,
    gcLock,
    preload
  });
  const add = Components.add({
    ipld,
    preload,
    pin,
    gcLock,
    options: constructorOptions
  });
  const resolve = Components.resolve({
    ipld
  });
  const refs = Components.refs({
    ipld,
    resolve,
    preload
  });
  refs.local = Components.refs.local({
    repo
  });

  const notStarted = async () => {
    // eslint-disable-line require-await
    throw new NotStartedError();
  };

  const api = {
    add,
    bitswap: {
      stat: notStarted,
      unwant: notStarted,
      wantlist: notStarted
    },
    block: {
      get: Components.block.get({
        blockService,
        preload
      }),
      put: Components.block.put({
        blockService,
        gcLock,
        preload
      }),
      rm: Components.block.rm({
        blockService,
        gcLock,
        pinManager
      }),
      stat: Components.block.stat({
        blockService,
        preload
      })
    },
    bootstrap: {
      add: Components.bootstrap.add({
        repo
      }),
      list: Components.bootstrap.list({
        repo
      }),
      rm: Components.bootstrap.rm({
        repo
      })
    },
    cat: Components.cat({
      ipld,
      preload
    }),
    config: Components.config({
      repo
    }),
    dag,
    dns: Components.dns(),
    files: Components.files({
      ipld,
      blockService,
      repo,
      preload,
      options: constructorOptions
    }),
    get: Components.get({
      ipld,
      preload
    }),
    id: Components.id({
      peerInfo
    }),
    init: async () => {
      // eslint-disable-line require-await
      throw new AlreadyInitializedError();
    },
    isOnline: Components.isOnline({}),
    key: {
      export: Components.key.export({
        keychain
      }),
      gen: Components.key.gen({
        keychain
      }),
      import: Components.key.import({
        keychain
      }),
      info: Components.key.info({
        keychain
      }),
      list: Components.key.list({
        keychain
      }),
      rename: Components.key.rename({
        keychain
      }),
      rm: Components.key.rm({
        keychain
      })
    },
    ls: Components.ls({
      ipld,
      preload
    }),
    object,
    pin,
    refs,
    repo: {
      gc: Components.repo.gc({
        gcLock,
        pin,
        pinManager,
        refs,
        repo
      }),
      stat: Components.repo.stat({
        repo
      }),
      version: Components.repo.version({
        repo
      })
    },
    resolve,
    start: Components.start({
      apiManager,
      options: constructorOptions,
      blockService,
      gcLock,
      initOptions,
      ipld,
      keychain,
      peerInfo,
      pinManager,
      preload,
      print,
      repo
    }),
    stats: {
      bitswap: notStarted,
      bw: notStarted,
      repo: Components.repo.stat({
        repo
      })
    },
    stop: () => apiManager.api,
    swarm: {
      addrs: notStarted,
      connect: notStarted,
      disconnect: notStarted,
      localAddrs: Components.swarm.localAddrs({
        peerInfo
      }),
      peers: notStarted
    },
    version: Components.version({
      repo
    })
  };
  return api;
}

/***/ }),
/* 1003 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = ({
  libp2p
}) => {
  return async function addrs() {
    // eslint-disable-line require-await
    const peers = [];

    for (const [peerId, peerInfo] of libp2p.peerStore.peers.entries()) {
      peers.push({
        id: peerId,
        addrs: peerInfo.multiaddrs.toArray()
      });
    }

    return peers;
  };
};

/***/ }),
/* 1004 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = ({
  libp2p
}) => {
  return function connect(addr) {
    return libp2p.dial(addr);
  };
};

/***/ }),
/* 1005 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = ({
  libp2p
}) => {
  return function disconnect(addr) {
    return libp2p.hangUp(addr);
  };
};

/***/ }),
/* 1006 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = ({
  peerInfo
}) => {
  return async function localAddrs() {
    // eslint-disable-line require-await
    return peerInfo.multiaddrs.toArray();
  };
};

/***/ }),
/* 1007 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = ({
  libp2p
}) => {
  return async function peers(options) {
    // eslint-disable-line require-await
    options = options || {};
    const verbose = options.v || options.verbose;
    const peers = [];

    for (const [peerId, connections] of libp2p.connections) {
      for (const connection of connections) {
        const tupple = {
          addr: connection.remoteAddr,
          peer: peerId
        };

        if (verbose || options.direction) {
          tupple.direction = connection.stat.direction;
        }

        if (verbose) {
          tupple.muxer = connection.stat.multiplexer;
          tupple.latency = 'n/a';
        }

        peers.push(tupple);
      }
    }

    return peers;
  };
};

/***/ }),
/* 1008 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const pkg = __webpack_require__(271); // TODO add the commit hash of the current ipfs version to the response.


module.exports = ({
  repo
}) => {
  return async function version() {
    const repoVersion = await repo.version.get();
    return {
      version: pkg.version,
      repo: repoVersion,
      commit: ''
    };
  };
};

/***/ }),
/* 1009 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

module.exports = class ApiManager {
  constructor() {
    this._api = {};

    this._onUndef = () => undefined;

    this.api = new Proxy(this._api, {
      get: (_, prop) => {
        if (prop === 'then') return undefined; // Not a promise!

        return this._api[prop] === undefined ? this._onUndef(prop) : this._api[prop];
      }
    });
  }

  update(nextApi, onUndef) {
    const prevApi = _objectSpread({}, this._api);

    const prevUndef = this._onUndef;
    Object.keys(this._api).forEach(k => {
      delete this._api[k];
    });
    Object.assign(this._api, nextApi);
    if (onUndef) this._onUndef = onUndef;
    return {
      cancel: () => this.update(prevApi, prevUndef),
      api: this.api
    };
  }

};

/***/ })
/******/ ]);
});
//# sourceMappingURL=index.js.map