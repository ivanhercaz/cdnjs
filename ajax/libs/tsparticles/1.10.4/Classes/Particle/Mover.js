"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Mover = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _Utils = require("../Utils/Utils");

var Mover = /*#__PURE__*/function () {
  function Mover(container, particle) {
    (0, _classCallCheck2["default"])(this, Mover);
    this.container = void 0;
    this.particle = void 0;
    this.container = container;
    this.particle = particle;
  }

  (0, _createClass2["default"])(Mover, [{
    key: "move",
    value: function move(delta) {
      var container = this.container;
      var options = container.options;
      var particle = this.particle;

      if (options.particles.move.enable) {
        var slowFactor = this.getProximitySpeedFactor();
        var deltaFactor = options.fpsLimit > 0 ? 60 * delta / 1000 : 3.6;
        var moveSpeed = container.retina.moveSpeed / 2 * slowFactor * deltaFactor;
        particle.position.x += particle.velocity.horizontal * moveSpeed;
        particle.position.y += particle.velocity.vertical * moveSpeed;
      }
      /* parallax */


      this.moveParallax();
    }
  }, {
    key: "moveParallax",
    value: function moveParallax() {
      var container = this.container;
      var options = container.options;

      if (!options.interactivity.events.onHover.parallax.enable) {
        return;
      }

      var particle = this.particle;
      var parallaxForce = options.interactivity.events.onHover.parallax.force;
      var mousePos = container.interactivity.mouse.position || {
        x: 0,
        y: 0
      };
      var windowDimension = {
        height: window.innerHeight / 2,
        width: window.innerWidth / 2
      };
      var parallaxSmooth = options.interactivity.events.onHover.parallax.smooth;
      /* smaller is the particle, longer is the offset distance */

      var tmp = {
        x: (mousePos.x - windowDimension.width) * (particle.radius / parallaxForce),
        y: (mousePos.y - windowDimension.height) * (particle.radius / parallaxForce)
      };
      particle.offset.x += (tmp.x - particle.offset.x) / parallaxSmooth; // Easing equation

      particle.offset.y += (tmp.y - particle.offset.y) / parallaxSmooth; // Easing equation
    }
  }, {
    key: "getProximitySpeedFactor",
    value: function getProximitySpeedFactor() {
      var container = this.container;
      var options = container.options;
      var particle = this.particle;
      var active = options.interactivity.modes.slow.active;

      if (!active) {
        return 1;
      }

      var mousePos = this.container.interactivity.mouse.position;

      if (!mousePos) {
        return 1;
      }

      var particlePos = particle.position;

      var dist = _Utils.Utils.getDistanceBetweenCoordinates(mousePos, particlePos);

      var radius = container.retina.slowModeRadius;

      if (dist > radius) {
        return 1;
      }

      var proximityFactor = dist / radius || 0;
      var slowFactor = options.interactivity.modes.slow.factor;
      return proximityFactor / slowFactor;
    }
  }]);
  return Mover;
}();

exports.Mover = Mover;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,