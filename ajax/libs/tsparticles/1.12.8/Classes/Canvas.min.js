import{Constants}from"./Utils/Constants";import{Utils}from"./Utils/Utils";import{CanvasUtils}from"./Utils/CanvasUtils";import{ColorUtils}from"./Utils/ColorUtils";export class Canvas{constructor(t){this.container=t,this.dimension={height:0,width:0},this.context=null,this.generatedCanvas=!1}init(){this.size();const t=this.container.options,o=t.backgroundMask.cover,i=t.particles.move.trail;this.coverColor=ColorUtils.colorToRgb(void 0!==o.color?o.color:t.backgroundMask.cover),this.trailFillColor="string"==typeof i.fillColor?ColorUtils.stringToRgb(i.fillColor):ColorUtils.colorToRgb(i.fillColor),this.paint()}loadCanvas(t,o){var i;t.className||(t.className=Constants.canvasClass),this.generatedCanvas&&(null===(i=this.element)||void 0===i||i.remove()),this.generatedCanvas=null!=o&&o,this.element=t,this.dimension.height=t.offsetHeight,this.dimension.width=t.offsetWidth,this.context=this.element.getContext("2d"),this.container.retina.init(),this.initBackground()}destroy(){var t;this.generatedCanvas&&(null===(t=this.element)||void 0===t||t.remove()),this.context&&CanvasUtils.clear(this.context,this.dimension)}size(){this.element&&(this.element.width=this.dimension.width,this.element.height=this.dimension.height)}paint(){const t=this.container.options;this.context&&(t.backgroundMask.enable&&t.backgroundMask.cover&&this.coverColor?this.paintBase(ColorUtils.getStyleFromColor(this.coverColor)):this.paintBase())}clear(){const t=this.container.options,o=t.particles.move.trail;t.backgroundMask.enable?this.paint():o.enable&&o.length>0&&this.trailFillColor?this.paintBase(ColorUtils.getStyleFromColor(this.trailFillColor,1/o.length)):this.context&&CanvasUtils.clear(this.context,this.dimension)}isPointInPath(t,o){var i,n;return null!==(n=null===(i=this.context)||void 0===i?void 0:i.isPointInPath(t,o.x,o.y))&&void 0!==n&&n}drawPolygonMask(){const t=this.container,o=t.options,i=this.context,n=o.polygon.draw,s=t.polygon,e=s.raw,r=s.polygonPath,l=s.path2DSupported;i&&(l&&r&&s.offset?CanvasUtils.drawPolygonMaskPath(i,r,n.stroke,s.offset):e&&CanvasUtils.drawPolygonMask(i,e,n.stroke))}drawLinkedLine(t,o,i,n,s){const e=this.container,r=e.options,l=this.context;if(!l)return;let a;if(e.particles.lineLinkedColor===Constants.randomColorValue)a=ColorUtils.getRandomRgbColor();else if("mid"==e.particles.lineLinkedColor&&t.color&&o.color){const i=t.color,n=o.color;a={b:Math.floor(Utils.mix(i.b,n.b,t.radius,o.radius)),g:Math.floor(Utils.mix(i.g,n.g,t.radius,o.radius)),r:Math.floor(Utils.mix(i.r,n.r,t.radius,o.radius))}}else a=e.particles.lineLinkedColor;const c=e.retina.lineLinkedWidth;CanvasUtils.drawLineLinked(l,c,i,n,r.backgroundMask.enable,a,s,r.particles.lineLinked.shadow)}drawConnectLine(t,o){const i=this.lineStyle(t,o);if(!i)return;const n=this.context;n&&CanvasUtils.drawConnectLine(n,this.container.retina.lineLinkedWidth,i,t.position,o.position)}drawGrabLine(t,o,i){const n=this.container,s=n.options.particles.lineLinked.color;let e=n.particles.lineLinkedColor||("string"==typeof s?ColorUtils.stringToRgb(s):ColorUtils.colorToRgb(s));e==Constants.randomColorValue&&(e=ColorUtils.getRandomRgbColor()),n.particles.lineLinkedColor=e;let r={r:127,g:127,b:127};const l=n.canvas.context;if(!l)return;r=n.particles.lineLinkedColor==Constants.randomColorValue?ColorUtils.getRandomRgbColor()||r:n.particles.lineLinkedColor||r;const a={x:t.position.x+t.offset.x,y:t.position.y+t.offset.y};CanvasUtils.drawGrabLine(l,n.retina.lineLinkedWidth,a,i,r,o)}drawParticle(t){const o=this.container.options;let i;const n=void 0!==t.bubbler.radius?t.bubbler.radius:t.radius,s=void 0!==t.bubbler.opacity?t.bubbler.opacity:t.opacity.value;t.color&&(i=ColorUtils.getStyleFromColor(t.color,s)),this.context&&i&&CanvasUtils.drawParticle(this.context,t,i,o.backgroundMask.enable,n,s)}paintBase(t){this.context&&CanvasUtils.paintBase(this.context,this.dimension,t)}lineStyle(t,o){const i=this.container.options.interactivity.modes.connect;if(t.color&&o.color){const n=t.color,s=o.color,e={b:Utils.mix(n.b,s.b,t.radius,o.radius),g:Utils.mix(n.g,s.g,t.radius,o.radius),r:Utils.mix(n.r,s.r,t.radius,o.radius)};if(this.context)return CanvasUtils.gradient(this.context,t,o,e,i.lineLinked.opacity)}}initBackground(){const t=this.container.options.background,o=this.element;if(!o)return;const i=o.style;if(t.color){const o="string"==typeof t.color?ColorUtils.stringToRgb(t.color):ColorUtils.colorToRgb(t.color);o&&(i.backgroundColor=ColorUtils.getStyleFromColor(o,t.opacity))}t.image&&(i.backgroundImage=t.image),t.position&&(i.backgroundPosition=t.position),t.repeat&&(i.backgroundRepeat=t.repeat),t.size&&(i.backgroundSize=t.size)}};