import{Constants}from"./Utils/Constants";import{Utils}from"./Utils/Utils";import{CanvasUtils}from"./Utils/CanvasUtils";import{ColorUtils}from"./Utils/ColorUtils";export class Canvas{constructor(t){this.container=t,this.dimension={height:0,width:0},this.context=null,this.generatedCanvas=!1}init(){this.size();const t=this.container.options,i=t.backgroundMask.cover,o=t.particles.move.trail;this.coverColor=ColorUtils.colorToRgb(void 0!==i.color?i.color:t.backgroundMask.cover),this.trailFillColor="string"==typeof o.fillColor?ColorUtils.stringToRgb(o.fillColor):ColorUtils.colorToRgb(o.fillColor),this.paint()}loadCanvas(t,i){var o;t.className||(t.className=Constants.canvasClass),this.generatedCanvas&&(null===(o=this.element)||void 0===o||o.remove()),this.generatedCanvas=null!=i&&i,this.element=t,this.dimension.height=t.offsetHeight,this.dimension.width=t.offsetWidth,this.context=this.element.getContext("2d"),this.container.retina.init()}destroy(){var t;this.generatedCanvas&&(null===(t=this.element)||void 0===t||t.remove()),this.context&&CanvasUtils.clear(this.context,this.dimension)}isPointInside(t,i){return this.areBoundsInside(this.calculateBounds(t,null!=i?i:0))}areBoundsInside(t){return t.left>=0&&t.right<=this.dimension.width&&t.top>=0&&t.bottom<=this.dimension.height}calculateBounds(t,i){return{bottom:t.y+i,left:t.x-i,right:t.x+i,top:t.y-i}}size(){this.element&&(this.element.width=this.dimension.width,this.element.height=this.dimension.height)}paint(){const t=this.container.options;this.context&&(t.backgroundMask.enable&&t.backgroundMask.cover&&this.coverColor?this.paintBase(ColorUtils.getStyleFromColor(this.coverColor)):this.paintBase())}clear(){const t=this.container.options,i=t.particles.move.trail;t.backgroundMask.enable?this.paint():i.enable&&i.length>0&&this.trailFillColor?this.paintBase(ColorUtils.getStyleFromColor(this.trailFillColor,1/i.length)):this.context&&CanvasUtils.clear(this.context,this.dimension)}isPointInPath(t,i){var o,s;return null!==(s=null===(o=this.context)||void 0===o?void 0:o.isPointInPath(t,i.x,i.y))&&void 0!==s&&s}drawPolygonMask(t){const i=this.container.options,o=this.context,s=i.polygon.draw;o&&CanvasUtils.drawPolygonMask(o,t,s.stroke)}drawLinkedLine(t,i,o,s,n){const e=this.container,l=e.options,r=this.context;if(!r)return;let a;if("random"===e.particles.lineLinkedColor)a=ColorUtils.getRandomRgbColor();else if("mid"==e.particles.lineLinkedColor&&t.color&&i.color){const o=t.color,s=i.color;a={b:Math.floor(Utils.mix(o.b,s.b,t.radius,i.radius)),g:Math.floor(Utils.mix(o.g,s.g,t.radius,i.radius)),r:Math.floor(Utils.mix(o.r,s.r,t.radius,i.radius))}}else a=e.particles.lineLinkedColor;const c=e.retina.lineLinkedWidth;CanvasUtils.drawLineLinked(r,c,o,s,l.backgroundMask.enable,a,n,l.particles.lineLinked.shadow)}drawConnectLine(t,i){const o=this.lineStyle(t,i);if(!o)return;const s=this.context;s&&CanvasUtils.drawConnectLine(s,this.container.retina.lineLinkedWidth,o,t.position,i.position)}drawGrabLine(t,i,o){const s=this.container,n=s.options.particles.lineLinked.color;let e=s.particles.lineLinkedColor||("string"==typeof n?ColorUtils.stringToRgb(n):ColorUtils.colorToRgb(n));"random"==e&&(e=ColorUtils.getRandomRgbColor()),s.particles.lineLinkedColor=e;let l={r:127,g:127,b:127};const r=s.canvas.context;if(!r)return;l="random"==s.particles.lineLinkedColor?ColorUtils.getRandomRgbColor()||l:s.particles.lineLinkedColor||l;const a={x:t.position.x+t.offset.x,y:t.position.y+t.offset.y};CanvasUtils.drawGrabLine(r,s.retina.lineLinkedWidth,a,o,l,i)}drawParticle(t){const i=this.container.options;let o;const s=void 0!==t.bubbler.radius?t.bubbler.radius:t.radius,n=void 0!==t.bubbler.opacity?t.bubbler.opacity:t.opacity.value;t.color&&(o=ColorUtils.getStyleFromColor(t.color,n)),this.context&&o&&CanvasUtils.drawParticle(this.context,t,o,i.backgroundMask.enable,s)}paintBase(t){this.context&&CanvasUtils.paintBase(this.context,this.dimension,t)}lineStyle(t,i){if(t.color&&i.color){const o=t.color,s=i.color,n={b:Utils.mix(o.b,s.b,t.radius,i.radius),g:Utils.mix(o.g,s.g,t.radius,i.radius),r:Utils.mix(o.r,s.r,t.radius,i.radius)},e=ColorUtils.getStyleFromColor(n);if(this.context)return CanvasUtils.gradient(this.context,t,i,e)}}};