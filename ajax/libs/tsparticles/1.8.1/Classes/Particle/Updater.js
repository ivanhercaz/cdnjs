"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Updater = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _OutMode = require("../../Enums/OutMode");

var _Utils = require("../Utils/Utils");

var _ClickMode = require("../../Enums/Modes/ClickMode");

var _PolygonMaskType = require("../../Enums/PolygonMaskType");

var _Mover = require("./Mover");

/**
 * Particle updater, it manages movement
 */
var Updater = /*#__PURE__*/function () {
  function Updater(container, particle) {
    (0, _classCallCheck2["default"])(this, Updater);
    this.particle = void 0;
    this.container = void 0;
    this.mover = void 0;
    this.container = container;
    this.particle = particle;
    this.mover = new _Mover.Mover(container, particle);
  }

  (0, _createClass2["default"])(Updater, [{
    key: "update",
    value: function update(delta) {
      /* move the particle */
      this.mover.move(delta);
      /* change opacity status */

      this.updateOpacity();
      /* change size */

      this.updateSize();
      /* change particle position if it is out of canvas */

      this.fixOutOfCanvasPosition();
      /* out of canvas modes */

      this.updateOutMode();
    }
  }, {
    key: "updateOpacity",
    value: function updateOpacity() {
      var container = this.container;
      var options = container.options;
      var particle = this.particle;

      if (options.particles.opacity.animation.enable) {
        if (particle.opacity.status) {
          if (particle.opacity.value >= options.particles.opacity.value) {
            particle.opacity.status = false;
          }

          particle.opacity.value += particle.opacity.velocity || 0;
        } else {
          if (particle.opacity.value <= options.particles.opacity.animation.minimumValue) {
            particle.opacity.status = true;
          }

          particle.opacity.value -= particle.opacity.velocity || 0;
        }

        if (particle.opacity.value < 0) {
          particle.opacity.value = 0;
        }
      }
    }
  }, {
    key: "updateSize",
    value: function updateSize() {
      var container = this.container;
      var options = container.options;
      var particle = this.particle;

      if (options.particles.size.animation.enable) {
        if (particle.size.status) {
          if (particle.radius >= container.retina.sizeValue) {
            particle.size.status = false;
          }

          particle.radius += particle.size.velocity || 0;
        } else {
          if (particle.radius <= options.particles.size.animation.minimumValue) {
            particle.size.status = true;
          }

          particle.radius -= particle.size.velocity || 0;
        }

        if (particle.radius < 0) {
          particle.radius = 0;
        }
      }
    }
  }, {
    key: "fixOutOfCanvasPosition",
    value: function fixOutOfCanvasPosition() {
      var container = this.container;
      var options = container.options;
      var particle = this.particle;
      var outMode = options.particles.move.outMode;
      var newPos;

      if (outMode === _OutMode.OutMode.bounce) {
        newPos = {
          x_left: particle.radius,
          x_right: container.canvas.dimension.width,
          y_bottom: container.canvas.dimension.height,
          y_top: particle.radius
        };
      } else if (outMode === _OutMode.OutMode.bounceHorizontal) {
        newPos = {
          x_left: particle.radius,
          x_right: container.canvas.dimension.width,
          y_bottom: container.canvas.dimension.height + particle.radius - particle.offset.y,
          y_top: -particle.radius - particle.offset.y
        };
      } else if (outMode === _OutMode.OutMode.bounceVertical) {
        newPos = {
          x_left: -particle.radius - particle.offset.x,
          x_right: container.canvas.dimension.width + particle.radius + particle.offset.x,
          y_bottom: container.canvas.dimension.height,
          y_top: particle.radius
        };
      } else {
        newPos = {
          x_left: -particle.radius - particle.offset.x,
          x_right: container.canvas.dimension.width + particle.radius + particle.offset.x,
          y_bottom: container.canvas.dimension.height + particle.radius - particle.offset.y,
          y_top: -particle.radius - particle.offset.y
        };
      }

      if (outMode === _OutMode.OutMode.destroy) {
        if (particle.position.x + particle.radius < 0 || particle.position.y + particle.radius < 0 || particle.position.x - particle.radius > container.canvas.dimension.width || particle.position.y - particle.radius > container.canvas.dimension.height) {
          var idx = container.particles.array.indexOf(particle);
          container.particles.array.splice(idx, 1);
          /* remove the canvas if the array is empty */

          var clickMode = options.interactivity.events.onClick.mode;

          if (!container.particles.array.length && !_Utils.Utils.isInArray(_ClickMode.ClickMode.push, clickMode)) {
            container.destroy();
          }
        }
      } else {
        var nextPos = {
          x_left: particle.position.x - particle.radius,
          x_right: particle.position.x + particle.radius,
          y_bottom: particle.position.y + particle.radius,
          y_top: particle.position.y - particle.radius
        };
        var dimension = container.canvas.dimension;

        if (nextPos.x_left > dimension.width - particle.offset.x) {
          particle.position.x = newPos.x_left;
          particle.position.y = Math.random() * dimension.height;
        } else if (nextPos.x_right < -particle.offset.x) {
          particle.position.x = newPos.x_right;
          particle.position.y = Math.random() * dimension.height;
        }

        if (nextPos.y_top > container.canvas.dimension.height - particle.offset.y) {
          particle.position.y = newPos.y_top;
          particle.position.x = Math.random() * container.canvas.dimension.width;
        } else if (nextPos.y_bottom < -particle.offset.y) {
          particle.position.y = newPos.y_bottom;
          particle.position.x = Math.random() * container.canvas.dimension.width;
        }
      }
    }
  }, {
    key: "updateOutMode",
    value: function updateOutMode() {
      var container = this.container;
      var options = container.options;

      switch (options.particles.move.outMode) {
        case _OutMode.OutMode.bounce:
        case _OutMode.OutMode.bounceVertical:
        case _OutMode.OutMode.bounceHorizontal:
          this.updateBounce();
          break;
      }
    }
  }, {
    key: "updateBounce",
    value: function updateBounce() {
      var container = this.container;
      var options = container.options;
      var particle = this.particle;
      /* check bounce against polygon boundaries */

      if (options.polygon.type !== _PolygonMaskType.PolygonMaskType.none && options.polygon.type !== _PolygonMaskType.PolygonMaskType.inline) {
        if (!container.polygon.checkInsidePolygon(particle.position)) {
          this.polygonBounce();
        }
      } else if (options.polygon.type === _PolygonMaskType.PolygonMaskType.inline) {
        if (!particle.initialPosition) {
          particle.initialPosition = {
            x: 0,
            y: 0
          };
        }

        var dist = _Utils.Utils.getDistanceBetweenCoordinates(particle.initialPosition, particle.position);

        if (dist > container.retina.polygonMaskMoveRadius) {
          this.polygonBounce();
        }
      } else {
        var outMode = options.particles.move.outMode;
        var x = particle.position.x + particle.offset.x;
        var y = particle.position.y + particle.offset.y;

        if (outMode === _OutMode.OutMode.bounce || outMode === _OutMode.OutMode.bounceHorizontal) {
          Updater.checkBounds(x, particle.radius, container.canvas.dimension.width, function () {
            particle.velocity.horizontal = -particle.velocity.horizontal;
          });
        }

        if (outMode === _OutMode.OutMode.bounce || outMode === _OutMode.OutMode.bounceVertical) {
          Updater.checkBounds(y, particle.radius, container.canvas.dimension.height, function () {
            particle.velocity.vertical = -particle.velocity.vertical;
          });
        }
      }
    }
  }, {
    key: "polygonBounce",
    value: function polygonBounce() {
      var particle = this.particle;
      particle.velocity.horizontal = -particle.velocity.horizontal + particle.velocity.vertical / 2;
      particle.velocity.vertical = -particle.velocity.vertical + particle.velocity.horizontal / 2;
    }
  }], [{
    key: "checkBounds",
    value: function checkBounds(coordinate, radius, size, outside) {
      if (coordinate + radius > size || coordinate - radius < 0) {
        outside();
      }
    }
  }]);
  return Updater;
}();

exports.Updater = Updater;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,