"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EventListeners = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _ClickMode = require("../../Enums/Modes/ClickMode");

var _InteractivityDetect = require("../../Enums/InteractivityDetect");

var _PolygonMaskType = require("../../Enums/PolygonMaskType");

/**
 * Particles container event listeners manager
 */
var EventListeners = /*#__PURE__*/function () {
  /**
   * Events listener constructor
   * @param container the calling container
   */
  function EventListeners(container) {
    (0, _classCallCheck2["default"])(this, EventListeners);
    this.container = void 0;
    this.container = container;
  }
  /**
   * Initializing event listeners
   */


  (0, _createClass2["default"])(EventListeners, [{
    key: "addEventsListeners",
    value: function addEventsListeners() {
      var _this = this;

      var container = this.container;
      var options = container.options;
      /* events target element */

      if (options.interactivity.detectsOn === _InteractivityDetect.InteractivityDetect.window) {
        container.interactivity.element = window;
      } else if (container.options.interactivity.detectsOn === _InteractivityDetect.InteractivityDetect.parent) {
        container.interactivity.element = container.canvas.element.parentNode;
      } else {
        container.interactivity.element = container.canvas.element;
      }

      var interactivityEl = container.interactivity.element;
      /* detect mouse pos - on hover / click event */

      if (options.interactivity.events.onHover.enable || options.interactivity.events.onClick.enable) {
        if (interactivityEl) {
          /* el on mousemove */
          interactivityEl.addEventListener("mousemove", function (e) {
            return _this.mouseTouchMove(e);
          });
          /* el on touchstart */

          interactivityEl.addEventListener("touchstart", function (e) {
            return _this.mouseTouchMove(e);
          });
          /* el on touchmove */

          interactivityEl.addEventListener("touchmove", function (e) {
            return _this.mouseTouchMove(e);
          });

          if (!options.interactivity.events.onClick.enable) {
            /* el on touchend */
            interactivityEl.addEventListener("touchend", function () {
              return _this.mouseTouchFinish();
            });
          }
          /* el on onmouseleave */


          interactivityEl.addEventListener("mouseleave", function () {
            return _this.mouseTouchFinish();
          });
          /* el on touchcancel */

          interactivityEl.addEventListener("touchcancel", function () {
            return _this.mouseTouchFinish();
          });
        }
      }
      /* on click event */


      if (options.interactivity.events.onClick.enable) {
        if (interactivityEl) {
          interactivityEl.addEventListener("touchend", function (e) {
            return _this.mouseTouchClick(e);
          });
          interactivityEl.addEventListener("mouseup", function (e) {
            return _this.mouseTouchClick(e);
          });
        }
      }
    }
    /**
     * Mouse/Touch move event
     * @param e the event arguments
     */

  }, {
    key: "mouseTouchMove",
    value: function mouseTouchMove(e) {
      var container = this.container;
      var options = container.options;
      var pos;

      if (e.type.startsWith("mouse")) {
        var mouseEvent = e;

        if (container.interactivity.element === window) {
          var clientRect = container.canvas.element.getBoundingClientRect();
          pos = {
            x: mouseEvent.clientX - clientRect.left,
            y: mouseEvent.clientY - clientRect.top
          };
        } else if (options.interactivity.detectsOn === _InteractivityDetect.InteractivityDetect.parent) {
          var source = mouseEvent.target;
          var target = mouseEvent.currentTarget;

          if (source && target) {
            var sourceRect = source.getBoundingClientRect();
            var targetRect = target.getBoundingClientRect();
            pos = {
              x: mouseEvent.offsetX + sourceRect.left - targetRect.left,
              y: mouseEvent.offsetY + sourceRect.top - targetRect.top
            };
          } else {
            pos = {
              x: mouseEvent.offsetX || mouseEvent.clientX,
              y: mouseEvent.offsetY || mouseEvent.clientY
            };
          }
        } else {
          pos = {
            x: mouseEvent.offsetX || mouseEvent.clientX,
            y: mouseEvent.offsetY || mouseEvent.clientY
          };
        }
      } else {
        var touchEvent = e;
        var lastTouch = touchEvent.touches[touchEvent.touches.length - 1];
        pos = {
          x: lastTouch.clientX,
          y: lastTouch.clientY
        };
      }

      container.interactivity.mouse.position = pos;

      if (container.retina.isRetina) {
        container.interactivity.mouse.position.x *= container.canvas.pxRatio;
        container.interactivity.mouse.position.y *= container.canvas.pxRatio;
      }

      container.interactivity.status = "mousemove";
    }
    /**
     * Mouse/Touch event finish
     */

  }, {
    key: "mouseTouchFinish",
    value: function mouseTouchFinish() {
      var container = this.container;
      container.interactivity.mouse.position = null;
      container.interactivity.status = "mouseleave";
    }
    /**
     * Mouse/Touch click/tap event
     * @param e the click event arguments
     */

  }, {
    key: "mouseTouchClick",
    value: function mouseTouchClick(e) {
      var container = this.container;
      var options = container.options;

      if (options.polygon.type !== _PolygonMaskType.PolygonMaskType.none && options.polygon.type !== _PolygonMaskType.PolygonMaskType.inline) {
        if (container.polygon.checkInsidePolygon(container.interactivity.mouse.position)) {
          this.doMouseTouchClick(e);
        }
      } else {
        this.doMouseTouchClick(e);
      }
    }
    /**
     * Mouse/Touch click/tap event implementation
     * @param e the click event arguments
     */

  }, {
    key: "doMouseTouchClick",
    value: function doMouseTouchClick(e) {
      var _this2 = this;

      var container = this.container;
      var options = container.options;

      if (container.interactivity.mouse.position) {
        container.interactivity.mouse.clickPosition = {
          x: container.interactivity.mouse.position.x,
          y: container.interactivity.mouse.position.y
        };
      }

      container.interactivity.mouse.clickTime = new Date().getTime();
      var pushNb = options.interactivity.modes.push.quantity;
      var removeNb = options.interactivity.modes.remove.quantity;

      switch (options.interactivity.events.onClick.mode) {
        case _ClickMode.ClickMode.push:
          if (options.particles.move.enable) {
            container.particles.push(pushNb, container.interactivity.mouse);
          } else {
            if (options.interactivity.modes.push.quantity === 1) {
              container.particles.push(pushNb, container.interactivity.mouse);
            } else if (options.interactivity.modes.push.quantity > 1) {
              container.particles.push(pushNb);
            }
          }

          break;

        case _ClickMode.ClickMode.remove:
          container.particles.remove(removeNb);
          break;

        case _ClickMode.ClickMode.bubble:
          container.bubble.clicking = true;
          break;

        case _ClickMode.ClickMode.repulse:
          container.repulse.clicking = true;
          container.repulse.count = 0;
          container.repulse.finish = false;
          setTimeout(function () {
            container.repulse.clicking = false;
          }, options.interactivity.modes.repulse.duration * 1000);
          break;
      }

      e.preventDefault();

      if (e.type === "touchend") {
        setTimeout(function () {
          return _this2.mouseTouchFinish();
        }, 500);
      }

      e.preventDefault();
    }
  }]);
  return EventListeners;
}();

exports.EventListeners = EventListeners;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,