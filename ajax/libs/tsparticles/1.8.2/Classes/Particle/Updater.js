"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Updater = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _OutMode = require("../../Enums/OutMode");

var _Utils = require("../Utils/Utils");

var _ClickMode = require("../../Enums/Modes/ClickMode");

var _PolygonMaskType = require("../../Enums/PolygonMaskType");

var _Mover = require("./Mover");

/**
 * Particle updater, it manages movement
 */
var Updater = /*#__PURE__*/function () {
  function Updater(container, particle) {
    (0, _classCallCheck2["default"])(this, Updater);
    this.particle = void 0;
    this.container = void 0;
    this.mover = void 0;
    this.container = container;
    this.particle = particle;
    this.mover = new _Mover.Mover(container, particle);
  }

  (0, _createClass2["default"])(Updater, [{
    key: "update",
    value: function update(delta) {
      /* move the particle */
      this.mover.move(delta);
      /* change opacity status */

      this.updateOpacity();
      /* change size */

      this.updateSize();
      /* change particle position if it is out of canvas */

      this.fixOutOfCanvasPosition();
      /* out of canvas modes */

      this.updateOutMode();
    }
  }, {
    key: "updateOpacity",
    value: function updateOpacity() {
      var container = this.container;
      var options = container.options;
      var particle = this.particle;

      if (options.particles.opacity.animation.enable) {
        if (particle.opacity.status) {
          if (particle.opacity.value >= options.particles.opacity.value) {
            particle.opacity.status = false;
          }

          particle.opacity.value += particle.opacity.velocity || 0;
        } else {
          if (particle.opacity.value <= options.particles.opacity.animation.minimumValue) {
            particle.opacity.status = true;
          }

          particle.opacity.value -= particle.opacity.velocity || 0;
        }

        if (particle.opacity.value < 0) {
          particle.opacity.value = 0;
        }
      }
    }
  }, {
    key: "updateSize",
    value: function updateSize() {
      var container = this.container;
      var options = container.options;
      var particle = this.particle;

      if (options.particles.size.animation.enable) {
        if (particle.size.status) {
          if (particle.radius >= container.retina.sizeValue) {
            particle.size.status = false;
          }

          particle.radius += particle.size.velocity || 0;
        } else {
          if (particle.radius <= options.particles.size.animation.minimumValue) {
            particle.size.status = true;
          }

          particle.radius -= particle.size.velocity || 0;
        }

        if (particle.radius < 0) {
          particle.radius = 0;
        }
      }
    }
  }, {
    key: "fixOutOfCanvasPosition",
    value: function fixOutOfCanvasPosition() {
      var container = this.container;
      var options = container.options;
      var particle = this.particle;
      var outMode = options.particles.move.outMode;
      var newPos;

      if (outMode === _OutMode.OutMode.bounce) {
        newPos = {
          x_left: particle.radius,
          x_right: container.canvas.dimension.width,
          y_bottom: container.canvas.dimension.height,
          y_top: particle.radius
        };
      } else if (outMode === _OutMode.OutMode.bounceHorizontal) {
        newPos = {
          x_left: particle.radius,
          x_right: container.canvas.dimension.width,
          y_bottom: container.canvas.dimension.height + particle.radius - particle.offset.y,
          y_top: -particle.radius - particle.offset.y
        };
      } else if (outMode === _OutMode.OutMode.bounceVertical) {
        newPos = {
          x_left: -particle.radius - particle.offset.x,
          x_right: container.canvas.dimension.width + particle.radius + particle.offset.x,
          y_bottom: container.canvas.dimension.height,
          y_top: particle.radius
        };
      } else {
        newPos = {
          x_left: -particle.radius - particle.offset.x,
          x_right: container.canvas.dimension.width + particle.radius + particle.offset.x,
          y_bottom: container.canvas.dimension.height + particle.radius - particle.offset.y,
          y_top: -particle.radius - particle.offset.y
        };
      }

      if (outMode === _OutMode.OutMode.destroy) {
        if (particle.position.x + particle.radius < 0 || particle.position.y + particle.radius < 0 || particle.position.x - particle.radius > container.canvas.dimension.width || particle.position.y - particle.radius > container.canvas.dimension.height) {
          var idx = container.particles.array.indexOf(particle);
          container.particles.array.splice(idx, 1);
          /* remove the canvas if the array is empty */

          var clickMode = options.interactivity.events.onClick.mode;

          if (!container.particles.array.length && !_Utils.Utils.isInArray(_ClickMode.ClickMode.push, clickMode)) {
            container.destroy();
          }
        }
      } else {
        var nextPos = {
          x_left: particle.position.x - particle.radius,
          x_right: particle.position.x + particle.radius,
          y_bottom: particle.position.y + particle.radius,
          y_top: particle.position.y - particle.radius
        };
        var dimension = container.canvas.dimension;

        if (nextPos.x_left > dimension.width - particle.offset.x) {
          particle.position.x = newPos.x_left;
          particle.position.y = Math.random() * dimension.height;
        } else if (nextPos.x_right < -particle.offset.x) {
          particle.position.x = newPos.x_right;
          particle.position.y = Math.random() * dimension.height;
        }

        if (nextPos.y_top > container.canvas.dimension.height - particle.offset.y) {
          particle.position.y = newPos.y_top;
          particle.position.x = Math.random() * container.canvas.dimension.width;
        } else if (nextPos.y_bottom < -particle.offset.y) {
          particle.position.y = newPos.y_bottom;
          particle.position.x = Math.random() * container.canvas.dimension.width;
        }
      }
    }
  }, {
    key: "updateOutMode",
    value: function updateOutMode() {
      var container = this.container;
      var options = container.options;

      switch (options.particles.move.outMode) {
        case _OutMode.OutMode.bounce:
        case _OutMode.OutMode.bounceVertical:
        case _OutMode.OutMode.bounceHorizontal:
          this.updateBounce();
          break;
      }
    }
  }, {
    key: "updateBounce",
    value: function updateBounce() {
      var container = this.container;
      var options = container.options;
      var particle = this.particle;
      /* check bounce against polygon boundaries */

      if (options.polygon.type !== _PolygonMaskType.PolygonMaskType.none && options.polygon.type !== _PolygonMaskType.PolygonMaskType.inline) {
        if (!container.polygon.checkInsidePolygon(particle.position)) {
          this.polygonBounce();
        }
      } else if (options.polygon.type === _PolygonMaskType.PolygonMaskType.inline) {
        if (particle.initialPosition) {
          var dist = _Utils.Utils.getDistanceBetweenCoordinates(particle.initialPosition, particle.position);

          if (dist > container.retina.polygonMaskMoveRadius) {
            this.polygonBounce();
          }
        }
      } else {
        var outMode = options.particles.move.outMode;
        var x = particle.position.x + particle.offset.x;
        var y = particle.position.y + particle.offset.y;

        if (outMode === _OutMode.OutMode.bounce || outMode === _OutMode.OutMode.bounceHorizontal) {
          Updater.checkBounds(x, particle.radius, container.canvas.dimension.width, function () {
            particle.velocity.horizontal = -particle.velocity.horizontal;
          });
        }

        if (outMode === _OutMode.OutMode.bounce || outMode === _OutMode.OutMode.bounceVertical) {
          Updater.checkBounds(y, particle.radius, container.canvas.dimension.height, function () {
            particle.velocity.vertical = -particle.velocity.vertical;
          });
        }
      }
    }
  }, {
    key: "polygonBounce",
    value: function polygonBounce() {
      var particle = this.particle;
      particle.velocity.horizontal = -particle.velocity.horizontal + particle.velocity.vertical / 2;
      particle.velocity.vertical = -particle.velocity.vertical + particle.velocity.horizontal / 2;
    }
  }], [{
    key: "checkBounds",
    value: function checkBounds(coordinate, radius, size, outside) {
      if (coordinate + radius > size || coordinate - radius < 0) {
        outside();
      }
    }
  }]);
  return Updater;
}();

exports.Updater = Updater;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9DbGFzc2VzL1BhcnRpY2xlL1VwZGF0ZXIudHMiXSwibmFtZXMiOlsiVXBkYXRlciIsImNvbnRhaW5lciIsInBhcnRpY2xlIiwibW92ZXIiLCJNb3ZlciIsImRlbHRhIiwibW92ZSIsInVwZGF0ZU9wYWNpdHkiLCJ1cGRhdGVTaXplIiwiZml4T3V0T2ZDYW52YXNQb3NpdGlvbiIsInVwZGF0ZU91dE1vZGUiLCJvcHRpb25zIiwicGFydGljbGVzIiwib3BhY2l0eSIsImFuaW1hdGlvbiIsImVuYWJsZSIsInN0YXR1cyIsInZhbHVlIiwidmVsb2NpdHkiLCJtaW5pbXVtVmFsdWUiLCJzaXplIiwicmFkaXVzIiwicmV0aW5hIiwic2l6ZVZhbHVlIiwib3V0TW9kZSIsIm5ld1BvcyIsIk91dE1vZGUiLCJib3VuY2UiLCJ4X2xlZnQiLCJ4X3JpZ2h0IiwiY2FudmFzIiwiZGltZW5zaW9uIiwid2lkdGgiLCJ5X2JvdHRvbSIsImhlaWdodCIsInlfdG9wIiwiYm91bmNlSG9yaXpvbnRhbCIsIm9mZnNldCIsInkiLCJib3VuY2VWZXJ0aWNhbCIsIngiLCJkZXN0cm95IiwicG9zaXRpb24iLCJpZHgiLCJhcnJheSIsImluZGV4T2YiLCJzcGxpY2UiLCJjbGlja01vZGUiLCJpbnRlcmFjdGl2aXR5IiwiZXZlbnRzIiwib25DbGljayIsIm1vZGUiLCJsZW5ndGgiLCJVdGlscyIsImlzSW5BcnJheSIsIkNsaWNrTW9kZSIsInB1c2giLCJuZXh0UG9zIiwiTWF0aCIsInJhbmRvbSIsInVwZGF0ZUJvdW5jZSIsInBvbHlnb24iLCJ0eXBlIiwiUG9seWdvbk1hc2tUeXBlIiwibm9uZSIsImlubGluZSIsImNoZWNrSW5zaWRlUG9seWdvbiIsInBvbHlnb25Cb3VuY2UiLCJpbml0aWFsUG9zaXRpb24iLCJkaXN0IiwiZ2V0RGlzdGFuY2VCZXR3ZWVuQ29vcmRpbmF0ZXMiLCJwb2x5Z29uTWFza01vdmVSYWRpdXMiLCJjaGVja0JvdW5kcyIsImhvcml6b250YWwiLCJ2ZXJ0aWNhbCIsImNvb3JkaW5hdGUiLCJvdXRzaWRlIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7OztBQUdBOztBQUVBOztBQUNBOztBQUNBOztBQUNBOztBQUVBOzs7SUFHYUEsTztBQUtULG1CQUFZQyxTQUFaLEVBQWtDQyxRQUFsQyxFQUFzRDtBQUFBO0FBQUEsU0FKckNBLFFBSXFDO0FBQUEsU0FIckNELFNBR3FDO0FBQUEsU0FGckNFLEtBRXFDO0FBQ2xELFNBQUtGLFNBQUwsR0FBaUJBLFNBQWpCO0FBQ0EsU0FBS0MsUUFBTCxHQUFnQkEsUUFBaEI7QUFDQSxTQUFLQyxLQUFMLEdBQWEsSUFBSUMsWUFBSixDQUFVSCxTQUFWLEVBQXFCQyxRQUFyQixDQUFiO0FBQ0g7Ozs7MkJBUWFHLEssRUFBcUI7QUFDL0I7QUFDQSxXQUFLRixLQUFMLENBQVdHLElBQVgsQ0FBZ0JELEtBQWhCO0FBRUE7O0FBQ0EsV0FBS0UsYUFBTDtBQUVBOztBQUNBLFdBQUtDLFVBQUw7QUFFQTs7QUFDQSxXQUFLQyxzQkFBTDtBQUVBOztBQUNBLFdBQUtDLGFBQUw7QUFDSDs7O29DQUU2QjtBQUMxQixVQUFNVCxTQUFTLEdBQUcsS0FBS0EsU0FBdkI7QUFDQSxVQUFNVSxPQUFPLEdBQUdWLFNBQVMsQ0FBQ1UsT0FBMUI7QUFDQSxVQUFNVCxRQUFRLEdBQUcsS0FBS0EsUUFBdEI7O0FBRUEsVUFBSVMsT0FBTyxDQUFDQyxTQUFSLENBQWtCQyxPQUFsQixDQUEwQkMsU0FBMUIsQ0FBb0NDLE1BQXhDLEVBQWdEO0FBQzVDLFlBQUliLFFBQVEsQ0FBQ1csT0FBVCxDQUFpQkcsTUFBckIsRUFBNkI7QUFDekIsY0FBSWQsUUFBUSxDQUFDVyxPQUFULENBQWlCSSxLQUFqQixJQUEwQk4sT0FBTyxDQUFDQyxTQUFSLENBQWtCQyxPQUFsQixDQUEwQkksS0FBeEQsRUFBK0Q7QUFDM0RmLFlBQUFBLFFBQVEsQ0FBQ1csT0FBVCxDQUFpQkcsTUFBakIsR0FBMEIsS0FBMUI7QUFDSDs7QUFFRGQsVUFBQUEsUUFBUSxDQUFDVyxPQUFULENBQWlCSSxLQUFqQixJQUEyQmYsUUFBUSxDQUFDVyxPQUFULENBQWlCSyxRQUFqQixJQUE2QixDQUF4RDtBQUNILFNBTkQsTUFNTztBQUNILGNBQUloQixRQUFRLENBQUNXLE9BQVQsQ0FBaUJJLEtBQWpCLElBQTBCTixPQUFPLENBQUNDLFNBQVIsQ0FBa0JDLE9BQWxCLENBQTBCQyxTQUExQixDQUFvQ0ssWUFBbEUsRUFBZ0Y7QUFDNUVqQixZQUFBQSxRQUFRLENBQUNXLE9BQVQsQ0FBaUJHLE1BQWpCLEdBQTBCLElBQTFCO0FBQ0g7O0FBRURkLFVBQUFBLFFBQVEsQ0FBQ1csT0FBVCxDQUFpQkksS0FBakIsSUFBMkJmLFFBQVEsQ0FBQ1csT0FBVCxDQUFpQkssUUFBakIsSUFBNkIsQ0FBeEQ7QUFDSDs7QUFFRCxZQUFJaEIsUUFBUSxDQUFDVyxPQUFULENBQWlCSSxLQUFqQixHQUF5QixDQUE3QixFQUFnQztBQUM1QmYsVUFBQUEsUUFBUSxDQUFDVyxPQUFULENBQWlCSSxLQUFqQixHQUF5QixDQUF6QjtBQUNIO0FBQ0o7QUFDSjs7O2lDQUUwQjtBQUN2QixVQUFNaEIsU0FBUyxHQUFHLEtBQUtBLFNBQXZCO0FBQ0EsVUFBTVUsT0FBTyxHQUFHVixTQUFTLENBQUNVLE9BQTFCO0FBQ0EsVUFBTVQsUUFBUSxHQUFHLEtBQUtBLFFBQXRCOztBQUVBLFVBQUlTLE9BQU8sQ0FBQ0MsU0FBUixDQUFrQlEsSUFBbEIsQ0FBdUJOLFNBQXZCLENBQWlDQyxNQUFyQyxFQUE2QztBQUN6QyxZQUFJYixRQUFRLENBQUNrQixJQUFULENBQWNKLE1BQWxCLEVBQTBCO0FBQ3RCLGNBQUlkLFFBQVEsQ0FBQ21CLE1BQVQsSUFBbUJwQixTQUFTLENBQUNxQixNQUFWLENBQWlCQyxTQUF4QyxFQUFtRDtBQUMvQ3JCLFlBQUFBLFFBQVEsQ0FBQ2tCLElBQVQsQ0FBY0osTUFBZCxHQUF1QixLQUF2QjtBQUNIOztBQUVEZCxVQUFBQSxRQUFRLENBQUNtQixNQUFULElBQW9CbkIsUUFBUSxDQUFDa0IsSUFBVCxDQUFjRixRQUFkLElBQTBCLENBQTlDO0FBQ0gsU0FORCxNQU1PO0FBQ0gsY0FBSWhCLFFBQVEsQ0FBQ21CLE1BQVQsSUFBbUJWLE9BQU8sQ0FBQ0MsU0FBUixDQUFrQlEsSUFBbEIsQ0FBdUJOLFNBQXZCLENBQWlDSyxZQUF4RCxFQUFzRTtBQUNsRWpCLFlBQUFBLFFBQVEsQ0FBQ2tCLElBQVQsQ0FBY0osTUFBZCxHQUF1QixJQUF2QjtBQUNIOztBQUVEZCxVQUFBQSxRQUFRLENBQUNtQixNQUFULElBQW9CbkIsUUFBUSxDQUFDa0IsSUFBVCxDQUFjRixRQUFkLElBQTBCLENBQTlDO0FBQ0g7O0FBRUQsWUFBSWhCLFFBQVEsQ0FBQ21CLE1BQVQsR0FBa0IsQ0FBdEIsRUFBeUI7QUFDckJuQixVQUFBQSxRQUFRLENBQUNtQixNQUFULEdBQWtCLENBQWxCO0FBQ0g7QUFDSjtBQUNKOzs7NkNBRXNDO0FBQ25DLFVBQU1wQixTQUFTLEdBQUcsS0FBS0EsU0FBdkI7QUFDQSxVQUFNVSxPQUFPLEdBQUdWLFNBQVMsQ0FBQ1UsT0FBMUI7QUFDQSxVQUFNVCxRQUFRLEdBQUcsS0FBS0EsUUFBdEI7QUFDQSxVQUFNc0IsT0FBTyxHQUFHYixPQUFPLENBQUNDLFNBQVIsQ0FBa0JOLElBQWxCLENBQXVCa0IsT0FBdkM7QUFFQSxVQUFJQyxNQUFKOztBQUVBLFVBQUlELE9BQU8sS0FBS0UsaUJBQVFDLE1BQXhCLEVBQWdDO0FBQzVCRixRQUFBQSxNQUFNLEdBQUc7QUFDTEcsVUFBQUEsTUFBTSxFQUFFMUIsUUFBUSxDQUFDbUIsTUFEWjtBQUVMUSxVQUFBQSxPQUFPLEVBQUU1QixTQUFTLENBQUM2QixNQUFWLENBQWlCQyxTQUFqQixDQUEyQkMsS0FGL0I7QUFHTEMsVUFBQUEsUUFBUSxFQUFFaEMsU0FBUyxDQUFDNkIsTUFBVixDQUFpQkMsU0FBakIsQ0FBMkJHLE1BSGhDO0FBSUxDLFVBQUFBLEtBQUssRUFBRWpDLFFBQVEsQ0FBQ21CO0FBSlgsU0FBVDtBQU1ILE9BUEQsTUFPTyxJQUFJRyxPQUFPLEtBQUtFLGlCQUFRVSxnQkFBeEIsRUFBMEM7QUFDN0NYLFFBQUFBLE1BQU0sR0FBRztBQUNMRyxVQUFBQSxNQUFNLEVBQUUxQixRQUFRLENBQUNtQixNQURaO0FBRUxRLFVBQUFBLE9BQU8sRUFBRTVCLFNBQVMsQ0FBQzZCLE1BQVYsQ0FBaUJDLFNBQWpCLENBQTJCQyxLQUYvQjtBQUdMQyxVQUFBQSxRQUFRLEVBQUVoQyxTQUFTLENBQUM2QixNQUFWLENBQWlCQyxTQUFqQixDQUEyQkcsTUFBM0IsR0FBb0NoQyxRQUFRLENBQUNtQixNQUE3QyxHQUFzRG5CLFFBQVEsQ0FBQ21DLE1BQVQsQ0FBZ0JDLENBSDNFO0FBSUxILFVBQUFBLEtBQUssRUFBRSxDQUFDakMsUUFBUSxDQUFDbUIsTUFBVixHQUFtQm5CLFFBQVEsQ0FBQ21DLE1BQVQsQ0FBZ0JDO0FBSnJDLFNBQVQ7QUFNSCxPQVBNLE1BT0EsSUFBSWQsT0FBTyxLQUFLRSxpQkFBUWEsY0FBeEIsRUFBd0M7QUFDM0NkLFFBQUFBLE1BQU0sR0FBRztBQUNMRyxVQUFBQSxNQUFNLEVBQUUsQ0FBQzFCLFFBQVEsQ0FBQ21CLE1BQVYsR0FBbUJuQixRQUFRLENBQUNtQyxNQUFULENBQWdCRyxDQUR0QztBQUVMWCxVQUFBQSxPQUFPLEVBQUU1QixTQUFTLENBQUM2QixNQUFWLENBQWlCQyxTQUFqQixDQUEyQkMsS0FBM0IsR0FBbUM5QixRQUFRLENBQUNtQixNQUE1QyxHQUFxRG5CLFFBQVEsQ0FBQ21DLE1BQVQsQ0FBZ0JHLENBRnpFO0FBR0xQLFVBQUFBLFFBQVEsRUFBRWhDLFNBQVMsQ0FBQzZCLE1BQVYsQ0FBaUJDLFNBQWpCLENBQTJCRyxNQUhoQztBQUlMQyxVQUFBQSxLQUFLLEVBQUVqQyxRQUFRLENBQUNtQjtBQUpYLFNBQVQ7QUFNSCxPQVBNLE1BT0E7QUFDSEksUUFBQUEsTUFBTSxHQUFHO0FBQ0xHLFVBQUFBLE1BQU0sRUFBRSxDQUFDMUIsUUFBUSxDQUFDbUIsTUFBVixHQUFtQm5CLFFBQVEsQ0FBQ21DLE1BQVQsQ0FBZ0JHLENBRHRDO0FBRUxYLFVBQUFBLE9BQU8sRUFBRTVCLFNBQVMsQ0FBQzZCLE1BQVYsQ0FBaUJDLFNBQWpCLENBQTJCQyxLQUEzQixHQUFtQzlCLFFBQVEsQ0FBQ21CLE1BQTVDLEdBQXFEbkIsUUFBUSxDQUFDbUMsTUFBVCxDQUFnQkcsQ0FGekU7QUFHTFAsVUFBQUEsUUFBUSxFQUFFaEMsU0FBUyxDQUFDNkIsTUFBVixDQUFpQkMsU0FBakIsQ0FBMkJHLE1BQTNCLEdBQW9DaEMsUUFBUSxDQUFDbUIsTUFBN0MsR0FBc0RuQixRQUFRLENBQUNtQyxNQUFULENBQWdCQyxDQUgzRTtBQUlMSCxVQUFBQSxLQUFLLEVBQUUsQ0FBQ2pDLFFBQVEsQ0FBQ21CLE1BQVYsR0FBbUJuQixRQUFRLENBQUNtQyxNQUFULENBQWdCQztBQUpyQyxTQUFUO0FBTUg7O0FBRUQsVUFBSWQsT0FBTyxLQUFLRSxpQkFBUWUsT0FBeEIsRUFBaUM7QUFDN0IsWUFBSXZDLFFBQVEsQ0FBQ3dDLFFBQVQsQ0FBa0JGLENBQWxCLEdBQXNCdEMsUUFBUSxDQUFDbUIsTUFBL0IsR0FBd0MsQ0FBeEMsSUFDQW5CLFFBQVEsQ0FBQ3dDLFFBQVQsQ0FBa0JKLENBQWxCLEdBQXNCcEMsUUFBUSxDQUFDbUIsTUFBL0IsR0FBd0MsQ0FEeEMsSUFFQW5CLFFBQVEsQ0FBQ3dDLFFBQVQsQ0FBa0JGLENBQWxCLEdBQXNCdEMsUUFBUSxDQUFDbUIsTUFBL0IsR0FBd0NwQixTQUFTLENBQUM2QixNQUFWLENBQWlCQyxTQUFqQixDQUEyQkMsS0FGbkUsSUFHQTlCLFFBQVEsQ0FBQ3dDLFFBQVQsQ0FBa0JKLENBQWxCLEdBQXNCcEMsUUFBUSxDQUFDbUIsTUFBL0IsR0FBd0NwQixTQUFTLENBQUM2QixNQUFWLENBQWlCQyxTQUFqQixDQUEyQkcsTUFIdkUsRUFHK0U7QUFDM0UsY0FBTVMsR0FBRyxHQUFHMUMsU0FBUyxDQUFDVyxTQUFWLENBQW9CZ0MsS0FBcEIsQ0FBMEJDLE9BQTFCLENBQWtDM0MsUUFBbEMsQ0FBWjtBQUNBRCxVQUFBQSxTQUFTLENBQUNXLFNBQVYsQ0FBb0JnQyxLQUFwQixDQUEwQkUsTUFBMUIsQ0FBaUNILEdBQWpDLEVBQXNDLENBQXRDO0FBRUE7O0FBQ0EsY0FBTUksU0FBUyxHQUFHcEMsT0FBTyxDQUFDcUMsYUFBUixDQUFzQkMsTUFBdEIsQ0FBNkJDLE9BQTdCLENBQXFDQyxJQUF2RDs7QUFFQSxjQUFJLENBQUNsRCxTQUFTLENBQUNXLFNBQVYsQ0FBb0JnQyxLQUFwQixDQUEwQlEsTUFBM0IsSUFBcUMsQ0FBQ0MsYUFBTUMsU0FBTixDQUFnQkMscUJBQVVDLElBQTFCLEVBQWdDVCxTQUFoQyxDQUExQyxFQUFzRjtBQUNsRjlDLFlBQUFBLFNBQVMsQ0FBQ3dDLE9BQVY7QUFDSDtBQUNKO0FBQ0osT0FmRCxNQWVPO0FBQ0gsWUFBTWdCLE9BQU8sR0FBRztBQUNaN0IsVUFBQUEsTUFBTSxFQUFFMUIsUUFBUSxDQUFDd0MsUUFBVCxDQUFrQkYsQ0FBbEIsR0FBc0J0QyxRQUFRLENBQUNtQixNQUQzQjtBQUVaUSxVQUFBQSxPQUFPLEVBQUUzQixRQUFRLENBQUN3QyxRQUFULENBQWtCRixDQUFsQixHQUFzQnRDLFFBQVEsQ0FBQ21CLE1BRjVCO0FBR1pZLFVBQUFBLFFBQVEsRUFBRS9CLFFBQVEsQ0FBQ3dDLFFBQVQsQ0FBa0JKLENBQWxCLEdBQXNCcEMsUUFBUSxDQUFDbUIsTUFIN0I7QUFJWmMsVUFBQUEsS0FBSyxFQUFFakMsUUFBUSxDQUFDd0MsUUFBVCxDQUFrQkosQ0FBbEIsR0FBc0JwQyxRQUFRLENBQUNtQjtBQUoxQixTQUFoQjtBQU1BLFlBQU1VLFNBQVMsR0FBRzlCLFNBQVMsQ0FBQzZCLE1BQVYsQ0FBaUJDLFNBQW5DOztBQUVBLFlBQUkwQixPQUFPLENBQUM3QixNQUFSLEdBQWlCRyxTQUFTLENBQUNDLEtBQVYsR0FBa0I5QixRQUFRLENBQUNtQyxNQUFULENBQWdCRyxDQUF2RCxFQUEwRDtBQUN0RHRDLFVBQUFBLFFBQVEsQ0FBQ3dDLFFBQVQsQ0FBa0JGLENBQWxCLEdBQXNCZixNQUFNLENBQUNHLE1BQTdCO0FBQ0ExQixVQUFBQSxRQUFRLENBQUN3QyxRQUFULENBQWtCSixDQUFsQixHQUFzQm9CLElBQUksQ0FBQ0MsTUFBTCxLQUFnQjVCLFNBQVMsQ0FBQ0csTUFBaEQ7QUFDSCxTQUhELE1BR08sSUFBSXVCLE9BQU8sQ0FBQzVCLE9BQVIsR0FBa0IsQ0FBQzNCLFFBQVEsQ0FBQ21DLE1BQVQsQ0FBZ0JHLENBQXZDLEVBQTBDO0FBQzdDdEMsVUFBQUEsUUFBUSxDQUFDd0MsUUFBVCxDQUFrQkYsQ0FBbEIsR0FBc0JmLE1BQU0sQ0FBQ0ksT0FBN0I7QUFDQTNCLFVBQUFBLFFBQVEsQ0FBQ3dDLFFBQVQsQ0FBa0JKLENBQWxCLEdBQXNCb0IsSUFBSSxDQUFDQyxNQUFMLEtBQWdCNUIsU0FBUyxDQUFDRyxNQUFoRDtBQUNIOztBQUVELFlBQUl1QixPQUFPLENBQUN0QixLQUFSLEdBQWdCbEMsU0FBUyxDQUFDNkIsTUFBVixDQUFpQkMsU0FBakIsQ0FBMkJHLE1BQTNCLEdBQW9DaEMsUUFBUSxDQUFDbUMsTUFBVCxDQUFnQkMsQ0FBeEUsRUFBMkU7QUFDdkVwQyxVQUFBQSxRQUFRLENBQUN3QyxRQUFULENBQWtCSixDQUFsQixHQUFzQmIsTUFBTSxDQUFDVSxLQUE3QjtBQUNBakMsVUFBQUEsUUFBUSxDQUFDd0MsUUFBVCxDQUFrQkYsQ0FBbEIsR0FBc0JrQixJQUFJLENBQUNDLE1BQUwsS0FBZ0IxRCxTQUFTLENBQUM2QixNQUFWLENBQWlCQyxTQUFqQixDQUEyQkMsS0FBakU7QUFDSCxTQUhELE1BR08sSUFBSXlCLE9BQU8sQ0FBQ3hCLFFBQVIsR0FBbUIsQ0FBQy9CLFFBQVEsQ0FBQ21DLE1BQVQsQ0FBZ0JDLENBQXhDLEVBQTJDO0FBQzlDcEMsVUFBQUEsUUFBUSxDQUFDd0MsUUFBVCxDQUFrQkosQ0FBbEIsR0FBc0JiLE1BQU0sQ0FBQ1EsUUFBN0I7QUFDQS9CLFVBQUFBLFFBQVEsQ0FBQ3dDLFFBQVQsQ0FBa0JGLENBQWxCLEdBQXNCa0IsSUFBSSxDQUFDQyxNQUFMLEtBQWdCMUQsU0FBUyxDQUFDNkIsTUFBVixDQUFpQkMsU0FBakIsQ0FBMkJDLEtBQWpFO0FBQ0g7QUFDSjtBQUNKOzs7b0NBRTZCO0FBQzFCLFVBQU0vQixTQUFTLEdBQUcsS0FBS0EsU0FBdkI7QUFDQSxVQUFNVSxPQUFPLEdBQUdWLFNBQVMsQ0FBQ1UsT0FBMUI7O0FBRUEsY0FBUUEsT0FBTyxDQUFDQyxTQUFSLENBQWtCTixJQUFsQixDQUF1QmtCLE9BQS9CO0FBQ0ksYUFBS0UsaUJBQVFDLE1BQWI7QUFDQSxhQUFLRCxpQkFBUWEsY0FBYjtBQUNBLGFBQUtiLGlCQUFRVSxnQkFBYjtBQUNJLGVBQUt3QixZQUFMO0FBRUE7QUFOUjtBQVFIOzs7bUNBRTRCO0FBQ3pCLFVBQU0zRCxTQUFTLEdBQUcsS0FBS0EsU0FBdkI7QUFDQSxVQUFNVSxPQUFPLEdBQUdWLFNBQVMsQ0FBQ1UsT0FBMUI7QUFDQSxVQUFNVCxRQUFRLEdBQUcsS0FBS0EsUUFBdEI7QUFFQTs7QUFDQSxVQUFJUyxPQUFPLENBQUNrRCxPQUFSLENBQWdCQyxJQUFoQixLQUF5QkMsaUNBQWdCQyxJQUF6QyxJQUFpRHJELE9BQU8sQ0FBQ2tELE9BQVIsQ0FBZ0JDLElBQWhCLEtBQXlCQyxpQ0FBZ0JFLE1BQTlGLEVBQXNHO0FBQ2xHLFlBQUksQ0FBQ2hFLFNBQVMsQ0FBQzRELE9BQVYsQ0FBa0JLLGtCQUFsQixDQUFxQ2hFLFFBQVEsQ0FBQ3dDLFFBQTlDLENBQUwsRUFBOEQ7QUFDMUQsZUFBS3lCLGFBQUw7QUFDSDtBQUNKLE9BSkQsTUFJTyxJQUFJeEQsT0FBTyxDQUFDa0QsT0FBUixDQUFnQkMsSUFBaEIsS0FBeUJDLGlDQUFnQkUsTUFBN0MsRUFBcUQ7QUFDeEQsWUFBSS9ELFFBQVEsQ0FBQ2tFLGVBQWIsRUFBOEI7QUFDMUIsY0FBTUMsSUFBSSxHQUFHaEIsYUFBTWlCLDZCQUFOLENBQW9DcEUsUUFBUSxDQUFDa0UsZUFBN0MsRUFBOERsRSxRQUFRLENBQUN3QyxRQUF2RSxDQUFiOztBQUVBLGNBQUkyQixJQUFJLEdBQUdwRSxTQUFTLENBQUNxQixNQUFWLENBQWlCaUQscUJBQTVCLEVBQW1EO0FBQy9DLGlCQUFLSixhQUFMO0FBQ0g7QUFDSjtBQUNKLE9BUk0sTUFRQTtBQUNILFlBQU0zQyxPQUFPLEdBQUdiLE9BQU8sQ0FBQ0MsU0FBUixDQUFrQk4sSUFBbEIsQ0FBdUJrQixPQUF2QztBQUNBLFlBQU1nQixDQUFDLEdBQUd0QyxRQUFRLENBQUN3QyxRQUFULENBQWtCRixDQUFsQixHQUFzQnRDLFFBQVEsQ0FBQ21DLE1BQVQsQ0FBZ0JHLENBQWhEO0FBQ0EsWUFBTUYsQ0FBQyxHQUFHcEMsUUFBUSxDQUFDd0MsUUFBVCxDQUFrQkosQ0FBbEIsR0FBc0JwQyxRQUFRLENBQUNtQyxNQUFULENBQWdCQyxDQUFoRDs7QUFFQSxZQUFJZCxPQUFPLEtBQUtFLGlCQUFRQyxNQUFwQixJQUE4QkgsT0FBTyxLQUFLRSxpQkFBUVUsZ0JBQXRELEVBQXdFO0FBQ3BFcEMsVUFBQUEsT0FBTyxDQUFDd0UsV0FBUixDQUFvQmhDLENBQXBCLEVBQXVCdEMsUUFBUSxDQUFDbUIsTUFBaEMsRUFBd0NwQixTQUFTLENBQUM2QixNQUFWLENBQWlCQyxTQUFqQixDQUEyQkMsS0FBbkUsRUFBMEUsWUFBTTtBQUM1RTlCLFlBQUFBLFFBQVEsQ0FBQ2dCLFFBQVQsQ0FBa0J1RCxVQUFsQixHQUErQixDQUFDdkUsUUFBUSxDQUFDZ0IsUUFBVCxDQUFrQnVELFVBQWxEO0FBQ0gsV0FGRDtBQUdIOztBQUVELFlBQUlqRCxPQUFPLEtBQUtFLGlCQUFRQyxNQUFwQixJQUE4QkgsT0FBTyxLQUFLRSxpQkFBUWEsY0FBdEQsRUFBc0U7QUFDbEV2QyxVQUFBQSxPQUFPLENBQUN3RSxXQUFSLENBQW9CbEMsQ0FBcEIsRUFBdUJwQyxRQUFRLENBQUNtQixNQUFoQyxFQUF3Q3BCLFNBQVMsQ0FBQzZCLE1BQVYsQ0FBaUJDLFNBQWpCLENBQTJCRyxNQUFuRSxFQUEyRSxZQUFNO0FBQzdFaEMsWUFBQUEsUUFBUSxDQUFDZ0IsUUFBVCxDQUFrQndELFFBQWxCLEdBQTZCLENBQUN4RSxRQUFRLENBQUNnQixRQUFULENBQWtCd0QsUUFBaEQ7QUFDSCxXQUZEO0FBR0g7QUFDSjtBQUNKOzs7b0NBRTZCO0FBQzFCLFVBQU14RSxRQUFRLEdBQUcsS0FBS0EsUUFBdEI7QUFFQUEsTUFBQUEsUUFBUSxDQUFDZ0IsUUFBVCxDQUFrQnVELFVBQWxCLEdBQStCLENBQUN2RSxRQUFRLENBQUNnQixRQUFULENBQWtCdUQsVUFBbkIsR0FBaUN2RSxRQUFRLENBQUNnQixRQUFULENBQWtCd0QsUUFBbEIsR0FBNkIsQ0FBN0Y7QUFDQXhFLE1BQUFBLFFBQVEsQ0FBQ2dCLFFBQVQsQ0FBa0J3RCxRQUFsQixHQUE2QixDQUFDeEUsUUFBUSxDQUFDZ0IsUUFBVCxDQUFrQndELFFBQW5CLEdBQStCeEUsUUFBUSxDQUFDZ0IsUUFBVCxDQUFrQnVELFVBQWxCLEdBQStCLENBQTNGO0FBQ0g7OztnQ0FuTjBCRSxVLEVBQW9CdEQsTSxFQUFnQkQsSSxFQUFjd0QsTyxFQUEyQjtBQUNwRyxVQUFLRCxVQUFVLEdBQUd0RCxNQUFiLEdBQXNCRCxJQUF2QixJQUFpQ3VELFVBQVUsR0FBR3RELE1BQWIsR0FBc0IsQ0FBM0QsRUFBK0Q7QUFDM0R1RCxRQUFBQSxPQUFPO0FBQ1Y7QUFDSiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQge0NvbnRhaW5lcn0gZnJvbSBcIi4uL0NvbnRhaW5lclwiO1xuaW1wb3J0IHtPdXRNb2RlfSBmcm9tIFwiLi4vLi4vRW51bXMvT3V0TW9kZVwiO1xuaW1wb3J0IHtQYXJ0aWNsZX0gZnJvbSBcIi4uL1BhcnRpY2xlXCI7XG5pbXBvcnQge1V0aWxzfSBmcm9tIFwiLi4vVXRpbHMvVXRpbHNcIjtcbmltcG9ydCB7Q2xpY2tNb2RlfSBmcm9tIFwiLi4vLi4vRW51bXMvTW9kZXMvQ2xpY2tNb2RlXCI7XG5pbXBvcnQge1BvbHlnb25NYXNrVHlwZX0gZnJvbSBcIi4uLy4uL0VudW1zL1BvbHlnb25NYXNrVHlwZVwiO1xuaW1wb3J0IHtNb3Zlcn0gZnJvbSBcIi4vTW92ZXJcIjtcblxuLyoqXG4gKiBQYXJ0aWNsZSB1cGRhdGVyLCBpdCBtYW5hZ2VzIG1vdmVtZW50XG4gKi9cbmV4cG9ydCBjbGFzcyBVcGRhdGVyIHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHBhcnRpY2xlOiBQYXJ0aWNsZTtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGNvbnRhaW5lcjogQ29udGFpbmVyO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgbW92ZXI6IE1vdmVyO1xuXG4gICAgY29uc3RydWN0b3IoY29udGFpbmVyOiBDb250YWluZXIsIHBhcnRpY2xlOiBQYXJ0aWNsZSkge1xuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICAgICAgdGhpcy5wYXJ0aWNsZSA9IHBhcnRpY2xlO1xuICAgICAgICB0aGlzLm1vdmVyID0gbmV3IE1vdmVyKGNvbnRhaW5lciwgcGFydGljbGUpO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGNoZWNrQm91bmRzKGNvb3JkaW5hdGU6IG51bWJlciwgcmFkaXVzOiBudW1iZXIsIHNpemU6IG51bWJlciwgb3V0c2lkZTogKCkgPT4gdm9pZCk6IHZvaWQge1xuICAgICAgICBpZiAoKGNvb3JkaW5hdGUgKyByYWRpdXMgPiBzaXplKSB8fCAoY29vcmRpbmF0ZSAtIHJhZGl1cyA8IDApKSB7XG4gICAgICAgICAgICBvdXRzaWRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgdXBkYXRlKGRlbHRhOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgLyogbW92ZSB0aGUgcGFydGljbGUgKi9cbiAgICAgICAgdGhpcy5tb3Zlci5tb3ZlKGRlbHRhKTtcblxuICAgICAgICAvKiBjaGFuZ2Ugb3BhY2l0eSBzdGF0dXMgKi9cbiAgICAgICAgdGhpcy51cGRhdGVPcGFjaXR5KCk7XG5cbiAgICAgICAgLyogY2hhbmdlIHNpemUgKi9cbiAgICAgICAgdGhpcy51cGRhdGVTaXplKCk7XG5cbiAgICAgICAgLyogY2hhbmdlIHBhcnRpY2xlIHBvc2l0aW9uIGlmIGl0IGlzIG91dCBvZiBjYW52YXMgKi9cbiAgICAgICAgdGhpcy5maXhPdXRPZkNhbnZhc1Bvc2l0aW9uKCk7XG5cbiAgICAgICAgLyogb3V0IG9mIGNhbnZhcyBtb2RlcyAqL1xuICAgICAgICB0aGlzLnVwZGF0ZU91dE1vZGUoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHVwZGF0ZU9wYWNpdHkoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gY29udGFpbmVyLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHBhcnRpY2xlID0gdGhpcy5wYXJ0aWNsZTtcblxuICAgICAgICBpZiAob3B0aW9ucy5wYXJ0aWNsZXMub3BhY2l0eS5hbmltYXRpb24uZW5hYmxlKSB7XG4gICAgICAgICAgICBpZiAocGFydGljbGUub3BhY2l0eS5zdGF0dXMpIHtcbiAgICAgICAgICAgICAgICBpZiAocGFydGljbGUub3BhY2l0eS52YWx1ZSA+PSBvcHRpb25zLnBhcnRpY2xlcy5vcGFjaXR5LnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcnRpY2xlLm9wYWNpdHkuc3RhdHVzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcGFydGljbGUub3BhY2l0eS52YWx1ZSArPSAocGFydGljbGUub3BhY2l0eS52ZWxvY2l0eSB8fCAwKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcnRpY2xlLm9wYWNpdHkudmFsdWUgPD0gb3B0aW9ucy5wYXJ0aWNsZXMub3BhY2l0eS5hbmltYXRpb24ubWluaW11bVZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcnRpY2xlLm9wYWNpdHkuc3RhdHVzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBwYXJ0aWNsZS5vcGFjaXR5LnZhbHVlIC09IChwYXJ0aWNsZS5vcGFjaXR5LnZlbG9jaXR5IHx8IDApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocGFydGljbGUub3BhY2l0eS52YWx1ZSA8IDApIHtcbiAgICAgICAgICAgICAgICBwYXJ0aWNsZS5vcGFjaXR5LnZhbHVlID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgdXBkYXRlU2l6ZSgpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5jb250YWluZXI7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSBjb250YWluZXIub3B0aW9ucztcbiAgICAgICAgY29uc3QgcGFydGljbGUgPSB0aGlzLnBhcnRpY2xlO1xuXG4gICAgICAgIGlmIChvcHRpb25zLnBhcnRpY2xlcy5zaXplLmFuaW1hdGlvbi5lbmFibGUpIHtcbiAgICAgICAgICAgIGlmIChwYXJ0aWNsZS5zaXplLnN0YXR1cykge1xuICAgICAgICAgICAgICAgIGlmIChwYXJ0aWNsZS5yYWRpdXMgPj0gY29udGFpbmVyLnJldGluYS5zaXplVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFydGljbGUuc2l6ZS5zdGF0dXMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBwYXJ0aWNsZS5yYWRpdXMgKz0gKHBhcnRpY2xlLnNpemUudmVsb2NpdHkgfHwgMCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChwYXJ0aWNsZS5yYWRpdXMgPD0gb3B0aW9ucy5wYXJ0aWNsZXMuc2l6ZS5hbmltYXRpb24ubWluaW11bVZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcnRpY2xlLnNpemUuc3RhdHVzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBwYXJ0aWNsZS5yYWRpdXMgLT0gKHBhcnRpY2xlLnNpemUudmVsb2NpdHkgfHwgMCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChwYXJ0aWNsZS5yYWRpdXMgPCAwKSB7XG4gICAgICAgICAgICAgICAgcGFydGljbGUucmFkaXVzID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgZml4T3V0T2ZDYW52YXNQb3NpdGlvbigpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5jb250YWluZXI7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSBjb250YWluZXIub3B0aW9ucztcbiAgICAgICAgY29uc3QgcGFydGljbGUgPSB0aGlzLnBhcnRpY2xlO1xuICAgICAgICBjb25zdCBvdXRNb2RlID0gb3B0aW9ucy5wYXJ0aWNsZXMubW92ZS5vdXRNb2RlO1xuXG4gICAgICAgIGxldCBuZXdQb3M7XG5cbiAgICAgICAgaWYgKG91dE1vZGUgPT09IE91dE1vZGUuYm91bmNlKSB7XG4gICAgICAgICAgICBuZXdQb3MgPSB7XG4gICAgICAgICAgICAgICAgeF9sZWZ0OiBwYXJ0aWNsZS5yYWRpdXMsXG4gICAgICAgICAgICAgICAgeF9yaWdodDogY29udGFpbmVyLmNhbnZhcy5kaW1lbnNpb24ud2lkdGgsXG4gICAgICAgICAgICAgICAgeV9ib3R0b206IGNvbnRhaW5lci5jYW52YXMuZGltZW5zaW9uLmhlaWdodCxcbiAgICAgICAgICAgICAgICB5X3RvcDogcGFydGljbGUucmFkaXVzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmIChvdXRNb2RlID09PSBPdXRNb2RlLmJvdW5jZUhvcml6b250YWwpIHtcbiAgICAgICAgICAgIG5ld1BvcyA9IHtcbiAgICAgICAgICAgICAgICB4X2xlZnQ6IHBhcnRpY2xlLnJhZGl1cyxcbiAgICAgICAgICAgICAgICB4X3JpZ2h0OiBjb250YWluZXIuY2FudmFzLmRpbWVuc2lvbi53aWR0aCxcbiAgICAgICAgICAgICAgICB5X2JvdHRvbTogY29udGFpbmVyLmNhbnZhcy5kaW1lbnNpb24uaGVpZ2h0ICsgcGFydGljbGUucmFkaXVzIC0gcGFydGljbGUub2Zmc2V0LnksXG4gICAgICAgICAgICAgICAgeV90b3A6IC1wYXJ0aWNsZS5yYWRpdXMgLSBwYXJ0aWNsZS5vZmZzZXQueSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAob3V0TW9kZSA9PT0gT3V0TW9kZS5ib3VuY2VWZXJ0aWNhbCkge1xuICAgICAgICAgICAgbmV3UG9zID0ge1xuICAgICAgICAgICAgICAgIHhfbGVmdDogLXBhcnRpY2xlLnJhZGl1cyAtIHBhcnRpY2xlLm9mZnNldC54LFxuICAgICAgICAgICAgICAgIHhfcmlnaHQ6IGNvbnRhaW5lci5jYW52YXMuZGltZW5zaW9uLndpZHRoICsgcGFydGljbGUucmFkaXVzICsgcGFydGljbGUub2Zmc2V0LngsXG4gICAgICAgICAgICAgICAgeV9ib3R0b206IGNvbnRhaW5lci5jYW52YXMuZGltZW5zaW9uLmhlaWdodCxcbiAgICAgICAgICAgICAgICB5X3RvcDogcGFydGljbGUucmFkaXVzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld1BvcyA9IHtcbiAgICAgICAgICAgICAgICB4X2xlZnQ6IC1wYXJ0aWNsZS5yYWRpdXMgLSBwYXJ0aWNsZS5vZmZzZXQueCxcbiAgICAgICAgICAgICAgICB4X3JpZ2h0OiBjb250YWluZXIuY2FudmFzLmRpbWVuc2lvbi53aWR0aCArIHBhcnRpY2xlLnJhZGl1cyArIHBhcnRpY2xlLm9mZnNldC54LFxuICAgICAgICAgICAgICAgIHlfYm90dG9tOiBjb250YWluZXIuY2FudmFzLmRpbWVuc2lvbi5oZWlnaHQgKyBwYXJ0aWNsZS5yYWRpdXMgLSBwYXJ0aWNsZS5vZmZzZXQueSxcbiAgICAgICAgICAgICAgICB5X3RvcDogLXBhcnRpY2xlLnJhZGl1cyAtIHBhcnRpY2xlLm9mZnNldC55LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvdXRNb2RlID09PSBPdXRNb2RlLmRlc3Ryb3kpIHtcbiAgICAgICAgICAgIGlmIChwYXJ0aWNsZS5wb3NpdGlvbi54ICsgcGFydGljbGUucmFkaXVzIDwgMCB8fFxuICAgICAgICAgICAgICAgIHBhcnRpY2xlLnBvc2l0aW9uLnkgKyBwYXJ0aWNsZS5yYWRpdXMgPCAwIHx8XG4gICAgICAgICAgICAgICAgcGFydGljbGUucG9zaXRpb24ueCAtIHBhcnRpY2xlLnJhZGl1cyA+IGNvbnRhaW5lci5jYW52YXMuZGltZW5zaW9uLndpZHRoIHx8XG4gICAgICAgICAgICAgICAgcGFydGljbGUucG9zaXRpb24ueSAtIHBhcnRpY2xlLnJhZGl1cyA+IGNvbnRhaW5lci5jYW52YXMuZGltZW5zaW9uLmhlaWdodCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlkeCA9IGNvbnRhaW5lci5wYXJ0aWNsZXMuYXJyYXkuaW5kZXhPZihwYXJ0aWNsZSk7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyLnBhcnRpY2xlcy5hcnJheS5zcGxpY2UoaWR4LCAxKTtcblxuICAgICAgICAgICAgICAgIC8qIHJlbW92ZSB0aGUgY2FudmFzIGlmIHRoZSBhcnJheSBpcyBlbXB0eSAqL1xuICAgICAgICAgICAgICAgIGNvbnN0IGNsaWNrTW9kZSA9IG9wdGlvbnMuaW50ZXJhY3Rpdml0eS5ldmVudHMub25DbGljay5tb2RlO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFjb250YWluZXIucGFydGljbGVzLmFycmF5Lmxlbmd0aCAmJiAhVXRpbHMuaXNJbkFycmF5KENsaWNrTW9kZS5wdXNoLCBjbGlja01vZGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgbmV4dFBvcyA9IHtcbiAgICAgICAgICAgICAgICB4X2xlZnQ6IHBhcnRpY2xlLnBvc2l0aW9uLnggLSBwYXJ0aWNsZS5yYWRpdXMsXG4gICAgICAgICAgICAgICAgeF9yaWdodDogcGFydGljbGUucG9zaXRpb24ueCArIHBhcnRpY2xlLnJhZGl1cyxcbiAgICAgICAgICAgICAgICB5X2JvdHRvbTogcGFydGljbGUucG9zaXRpb24ueSArIHBhcnRpY2xlLnJhZGl1cyxcbiAgICAgICAgICAgICAgICB5X3RvcDogcGFydGljbGUucG9zaXRpb24ueSAtIHBhcnRpY2xlLnJhZGl1cyxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBkaW1lbnNpb24gPSBjb250YWluZXIuY2FudmFzLmRpbWVuc2lvbjtcblxuICAgICAgICAgICAgaWYgKG5leHRQb3MueF9sZWZ0ID4gZGltZW5zaW9uLndpZHRoIC0gcGFydGljbGUub2Zmc2V0LngpIHtcbiAgICAgICAgICAgICAgICBwYXJ0aWNsZS5wb3NpdGlvbi54ID0gbmV3UG9zLnhfbGVmdDtcbiAgICAgICAgICAgICAgICBwYXJ0aWNsZS5wb3NpdGlvbi55ID0gTWF0aC5yYW5kb20oKSAqIGRpbWVuc2lvbi5oZWlnaHQ7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG5leHRQb3MueF9yaWdodCA8IC1wYXJ0aWNsZS5vZmZzZXQueCkge1xuICAgICAgICAgICAgICAgIHBhcnRpY2xlLnBvc2l0aW9uLnggPSBuZXdQb3MueF9yaWdodDtcbiAgICAgICAgICAgICAgICBwYXJ0aWNsZS5wb3NpdGlvbi55ID0gTWF0aC5yYW5kb20oKSAqIGRpbWVuc2lvbi5oZWlnaHQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChuZXh0UG9zLnlfdG9wID4gY29udGFpbmVyLmNhbnZhcy5kaW1lbnNpb24uaGVpZ2h0IC0gcGFydGljbGUub2Zmc2V0LnkpIHtcbiAgICAgICAgICAgICAgICBwYXJ0aWNsZS5wb3NpdGlvbi55ID0gbmV3UG9zLnlfdG9wO1xuICAgICAgICAgICAgICAgIHBhcnRpY2xlLnBvc2l0aW9uLnggPSBNYXRoLnJhbmRvbSgpICogY29udGFpbmVyLmNhbnZhcy5kaW1lbnNpb24ud2lkdGg7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG5leHRQb3MueV9ib3R0b20gPCAtcGFydGljbGUub2Zmc2V0LnkpIHtcbiAgICAgICAgICAgICAgICBwYXJ0aWNsZS5wb3NpdGlvbi55ID0gbmV3UG9zLnlfYm90dG9tO1xuICAgICAgICAgICAgICAgIHBhcnRpY2xlLnBvc2l0aW9uLnggPSBNYXRoLnJhbmRvbSgpICogY29udGFpbmVyLmNhbnZhcy5kaW1lbnNpb24ud2lkdGg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHVwZGF0ZU91dE1vZGUoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gY29udGFpbmVyLm9wdGlvbnM7XG5cbiAgICAgICAgc3dpdGNoIChvcHRpb25zLnBhcnRpY2xlcy5tb3ZlLm91dE1vZGUpIHtcbiAgICAgICAgICAgIGNhc2UgT3V0TW9kZS5ib3VuY2U6XG4gICAgICAgICAgICBjYXNlIE91dE1vZGUuYm91bmNlVmVydGljYWw6XG4gICAgICAgICAgICBjYXNlIE91dE1vZGUuYm91bmNlSG9yaXpvbnRhbDpcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUJvdW5jZSgpO1xuXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHVwZGF0ZUJvdW5jZSgpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5jb250YWluZXI7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSBjb250YWluZXIub3B0aW9ucztcbiAgICAgICAgY29uc3QgcGFydGljbGUgPSB0aGlzLnBhcnRpY2xlO1xuXG4gICAgICAgIC8qIGNoZWNrIGJvdW5jZSBhZ2FpbnN0IHBvbHlnb24gYm91bmRhcmllcyAqL1xuICAgICAgICBpZiAob3B0aW9ucy5wb2x5Z29uLnR5cGUgIT09IFBvbHlnb25NYXNrVHlwZS5ub25lICYmIG9wdGlvbnMucG9seWdvbi50eXBlICE9PSBQb2x5Z29uTWFza1R5cGUuaW5saW5lKSB7XG4gICAgICAgICAgICBpZiAoIWNvbnRhaW5lci5wb2x5Z29uLmNoZWNrSW5zaWRlUG9seWdvbihwYXJ0aWNsZS5wb3NpdGlvbikpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBvbHlnb25Cb3VuY2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLnBvbHlnb24udHlwZSA9PT0gUG9seWdvbk1hc2tUeXBlLmlubGluZSkge1xuICAgICAgICAgICAgaWYgKHBhcnRpY2xlLmluaXRpYWxQb3NpdGlvbikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRpc3QgPSBVdGlscy5nZXREaXN0YW5jZUJldHdlZW5Db29yZGluYXRlcyhwYXJ0aWNsZS5pbml0aWFsUG9zaXRpb24sIHBhcnRpY2xlLnBvc2l0aW9uKTtcblxuICAgICAgICAgICAgICAgIGlmIChkaXN0ID4gY29udGFpbmVyLnJldGluYS5wb2x5Z29uTWFza01vdmVSYWRpdXMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wb2x5Z29uQm91bmNlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3Qgb3V0TW9kZSA9IG9wdGlvbnMucGFydGljbGVzLm1vdmUub3V0TW9kZTtcbiAgICAgICAgICAgIGNvbnN0IHggPSBwYXJ0aWNsZS5wb3NpdGlvbi54ICsgcGFydGljbGUub2Zmc2V0Lng7XG4gICAgICAgICAgICBjb25zdCB5ID0gcGFydGljbGUucG9zaXRpb24ueSArIHBhcnRpY2xlLm9mZnNldC55O1xuXG4gICAgICAgICAgICBpZiAob3V0TW9kZSA9PT0gT3V0TW9kZS5ib3VuY2UgfHwgb3V0TW9kZSA9PT0gT3V0TW9kZS5ib3VuY2VIb3Jpem9udGFsKSB7XG4gICAgICAgICAgICAgICAgVXBkYXRlci5jaGVja0JvdW5kcyh4LCBwYXJ0aWNsZS5yYWRpdXMsIGNvbnRhaW5lci5jYW52YXMuZGltZW5zaW9uLndpZHRoLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHBhcnRpY2xlLnZlbG9jaXR5Lmhvcml6b250YWwgPSAtcGFydGljbGUudmVsb2NpdHkuaG9yaXpvbnRhbDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG91dE1vZGUgPT09IE91dE1vZGUuYm91bmNlIHx8IG91dE1vZGUgPT09IE91dE1vZGUuYm91bmNlVmVydGljYWwpIHtcbiAgICAgICAgICAgICAgICBVcGRhdGVyLmNoZWNrQm91bmRzKHksIHBhcnRpY2xlLnJhZGl1cywgY29udGFpbmVyLmNhbnZhcy5kaW1lbnNpb24uaGVpZ2h0LCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHBhcnRpY2xlLnZlbG9jaXR5LnZlcnRpY2FsID0gLXBhcnRpY2xlLnZlbG9jaXR5LnZlcnRpY2FsO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBwb2x5Z29uQm91bmNlKCk6IHZvaWQge1xuICAgICAgICBjb25zdCBwYXJ0aWNsZSA9IHRoaXMucGFydGljbGU7XG5cbiAgICAgICAgcGFydGljbGUudmVsb2NpdHkuaG9yaXpvbnRhbCA9IC1wYXJ0aWNsZS52ZWxvY2l0eS5ob3Jpem9udGFsICsgKHBhcnRpY2xlLnZlbG9jaXR5LnZlcnRpY2FsIC8gMik7XG4gICAgICAgIHBhcnRpY2xlLnZlbG9jaXR5LnZlcnRpY2FsID0gLXBhcnRpY2xlLnZlbG9jaXR5LnZlcnRpY2FsICsgKHBhcnRpY2xlLnZlbG9jaXR5Lmhvcml6b250YWwgLyAyKTtcbiAgICB9XG59XG4iXX0=