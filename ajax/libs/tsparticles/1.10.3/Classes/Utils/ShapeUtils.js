"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ShapeUtils = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _ShapeType = require("../../Enums/ShapeType");

var ShapeUtils = /*#__PURE__*/function () {
  function ShapeUtils() {
    (0, _classCallCheck2["default"])(this, ShapeUtils);
  }

  (0, _createClass2["default"])(ShapeUtils, null, [{
    key: "drawShape",
    value: function drawShape(context, particle, radius, stroke) {
      var pos = {
        x: particle.offset.x,
        y: particle.offset.y
      };
      var sides = particle.container.options.particles.shape.polygon.sides;

      switch (particle.shape) {
        case _ShapeType.ShapeType.line:
          this.drawLineShape(context, radius, stroke);
          break;

        case _ShapeType.ShapeType.circle:
          this.drawCircleShape(context, radius, pos);
          break;

        case _ShapeType.ShapeType.edge:
        case _ShapeType.ShapeType.square:
          this.drawSquareShape(context, radius);
          break;

        case _ShapeType.ShapeType.triangle:
          this.drawTriangleShape(context, radius);
          break;

        case _ShapeType.ShapeType.polygon:
          this.drawPolygonShape(context, radius, sides);
          break;

        case _ShapeType.ShapeType.star:
          this.drawStarShape(context, radius, sides);
          break;

        case _ShapeType.ShapeType.heart:
          this.drawHeartShape(context, radius);
          break;

        case _ShapeType.ShapeType["char"]:
        case _ShapeType.ShapeType.character:
          this.drawTextShape(context, particle.character, particle.text, radius);
          break;

        case _ShapeType.ShapeType.image:
          this.drawImageShape(context, particle, radius);
          break;
      }
    }
  }, {
    key: "drawTriangleShape",
    value: function drawTriangleShape(context, radius) {
      var start = {
        x: -radius,
        y: radius / 1.66
      };
      var side = {
        count: {
          denominator: 2,
          numerator: 3
        },
        length: radius * 2
      };
      this.drawGenericPolygonShape(context, start, side);
    }
  }, {
    key: "drawPolygonShape",
    value: function drawPolygonShape(context, radius, sides) {
      var start = {
        x: -radius / (sides / 3.5),
        y: -radius / (2.66 / 3.5)
      };
      var side = {
        count: {
          denominator: 1,
          numerator: sides
        },
        length: radius * 2.66 / (sides / 3)
      };
      this.drawGenericPolygonShape(context, start, side);
    }
  }, {
    key: "drawStarShape",
    value: function drawStarShape(context, radius, sides) {
      var start = {
        x: -radius * 2 / (sides / 4),
        y: -radius / (2 * 2.66 / 3.5)
      };
      var side = {
        count: {
          denominator: 2,
          numerator: sides
        },
        length: radius * 2 * 2.66 / (sides / 3)
      };
      this.drawGenericPolygonShape(context, start, side);
    }
  }, {
    key: "drawLineShape",
    value: function drawLineShape(context, length, stroke) {
      context.moveTo(0, -length / 2);
      context.lineTo(0, length / 2);
      context.strokeStyle = stroke.color;
      context.lineWidth = stroke.width;
      context.stroke();
    }
  }, {
    key: "drawCircleShape",
    value: function drawCircleShape(context, radius, center) {
      context.arc(center.x, center.y, radius, 0, Math.PI * 2, false);
    }
  }, {
    key: "drawSquareShape",
    value: function drawSquareShape(context, side) {
      context.rect(-side, -side, side * 2, side * 2);
    }
  }, {
    key: "drawHeartShape",
    value: function drawHeartShape(context, radius) {
      var x = -radius / 2;
      var y = -radius / 2;
      context.moveTo(x, y + radius / 4);
      context.quadraticCurveTo(x, y, x + radius / 4, y);
      context.quadraticCurveTo(x + radius / 2, y, x + radius / 2, y + radius / 4);
      context.quadraticCurveTo(x + radius / 2, y, x + radius * 3 / 4, y);
      context.quadraticCurveTo(x + radius, y, x + radius, y + radius / 4);
      context.quadraticCurveTo(x + radius, y + radius / 2, x + radius * 3 / 4, y + radius * 3 / 4);
      context.lineTo(x + radius / 2, y + radius);
      context.lineTo(x + radius / 4, y + radius * 3 / 4);
      context.quadraticCurveTo(x, y + radius / 2, x, y + radius / 4);
    }
  }, {
    key: "drawTextShape",
    value: function drawTextShape(context, character, text, radius) {
      if (text === undefined || character === undefined) {
        return;
      }

      var style = character.style;
      var weight = character.weight;
      var size = Math.round(radius) * 2;
      var font = character.font;
      var fill = character.fill;
      context.font = "".concat(style, " ").concat(weight, " ").concat(size, "px \"").concat(font, "\"");
      var pos = {
        x: -radius / 2,
        y: radius / 2
      };

      if (fill) {
        context.fillText(text, pos.x, pos.y);
      } else {
        context.strokeText(text, pos.x, pos.y);
      }
    }
  }, {
    key: "drawGenericPolygonShape",
    value: function drawGenericPolygonShape(context, start, side) {
      // By Programming Thomas - https://programmingthomas.wordpress.com/2013/04/03/n-sided-shapes/
      var sideCount = side.count.numerator * side.count.denominator;
      var decimalSides = side.count.numerator / side.count.denominator;
      var interiorAngleDegrees = 180 * (decimalSides - 2) / decimalSides;
      var interiorAngle = Math.PI - Math.PI * interiorAngleDegrees / 180; // convert to radians

      if (!context) {
        return;
      }

      context.save();
      context.beginPath();
      context.translate(start.x, start.y);
      context.moveTo(0, 0);

      for (var i = 0; i < sideCount; i++) {
        context.lineTo(side.length, 0);
        context.translate(side.length, 0);
        context.rotate(interiorAngle);
      } // c.stroke();


      context.fill();
      context.restore();
    }
  }, {
    key: "drawImageShape",
    value: function drawImageShape(context, particle, radius) {
      var _particle$image;

      if (!context) {
        return;
      }

      var imgObj = (_particle$image = particle.image) === null || _particle$image === void 0 ? void 0 : _particle$image.data.obj;

      if (!imgObj) {
        return;
      }

      var ratio = 1;

      if (particle.image) {
        ratio = particle.image.ratio;
      }

      var pos = {
        x: -radius,
        y: -radius
      };
      context.drawImage(imgObj, pos.x, pos.y, radius * 2, radius * 2 / ratio);
    }
  }]);
  return ShapeUtils;
}();

exports.ShapeUtils = ShapeUtils;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,