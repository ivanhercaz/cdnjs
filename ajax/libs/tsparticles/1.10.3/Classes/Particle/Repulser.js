"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Repulser = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _ClickMode = require("../../Enums/Modes/ClickMode");

var _HoverMode = require("../../Enums/Modes/HoverMode");

var _OutMode = require("../../Enums/OutMode");

var _Utils = require("../Utils/Utils");

var _DivMode = require("../../Enums/Modes/DivMode");

/**
 * Particle repulse manager
 */
var Repulser = /*#__PURE__*/function () {
  function Repulser(container, particle) {
    (0, _classCallCheck2["default"])(this, Repulser);
    this.particle = void 0;
    this.container = void 0;
    this.container = container;
    this.particle = particle;
  }

  (0, _createClass2["default"])(Repulser, [{
    key: "repulse",
    value: function repulse() {
      var container = this.container;
      var options = container.options;
      var hoverEnabled = options.interactivity.events.onHover.enable;
      var clickEnabled = options.interactivity.events.onClick.enable;
      var mouseMoveStatus = container.interactivity.status === "mousemove";
      var hoverMode = options.interactivity.events.onHover.mode;
      var clickMode = options.interactivity.events.onClick.mode;
      var divMode = options.interactivity.events.onDiv.mode;

      if (mouseMoveStatus && hoverEnabled && _Utils.Utils.isInArray(_HoverMode.HoverMode.repulse, hoverMode)) {
        this.hoverRepulse();
      } else if (clickEnabled && _Utils.Utils.isInArray(_ClickMode.ClickMode.repulse, clickMode)) {
        this.clickRepulse();
      } else if (options.interactivity.events.onDiv.enable && _Utils.Utils.isInArray(_DivMode.DivMode.repulse, divMode)) {
        this.divRepulse();
      }
    }
  }, {
    key: "divRepulse",
    value: function divRepulse() {
      var container = this.container;
      var options = container.options;
      var particle = this.particle;
      var elem = document.getElementById(options.interactivity.events.onDiv.elementId);
      var pos = {
        x: elem.offsetLeft + elem.offsetWidth / 2,
        y: elem.offsetTop + elem.offsetHeight / 2
      };
      var divWidth = elem.offsetWidth / 2;

      if (container.retina.isRetina) {
        pos.x *= container.retina.pxRatio;
        pos.y *= container.retina.pxRatio;
        divWidth *= container.retina.pxRatio;
      }

      var dxDiv = particle.position.x - pos.x;
      var dyDiv = particle.position.y - pos.y;
      var distDiv = Math.sqrt(dxDiv * dxDiv + dyDiv * dyDiv);
      var normVec = {
        x: dxDiv / distDiv,
        y: dyDiv / distDiv
      };
      var repulseRadius = divWidth;
      var velocity = 100;

      var repulseFactor = _Utils.Utils.clamp((-Math.pow(distDiv / repulseRadius, 4) + 1) * velocity, 0, 50);

      this.particle.position.x += normVec.x * repulseFactor;
      this.particle.position.y += normVec.y * repulseFactor;
    }
  }, {
    key: "clickRepulse",
    value: function clickRepulse() {
      var container = this.container;
      var particle = this.particle;

      if (!container.repulse.finish) {
        if (!container.repulse.count) {
          container.repulse.count = 0;
        }

        container.repulse.count++;

        if (container.repulse.count === container.particles.array.length) {
          container.repulse.finish = true;
        }
      }

      if (container.repulse.clicking) {
        var repulseDistance = container.retina.repulseModeDistance;
        var repulseRadius = Math.pow(repulseDistance / 6, 3);
        var mouseClickPos = container.interactivity.mouse.clickPosition || {
          x: 0,
          y: 0
        };
        var dx = mouseClickPos.x - particle.position.x;
        var dy = mouseClickPos.y - particle.position.y;
        var d = dx * dx + dy * dy;
        var force = -repulseRadius / d; // default

        if (d <= repulseRadius) {
          this.processRepulse(dx, dy, force);
        } // bang - slow motion mode
        // if(!container.repulse_finish){
        //   if(d <= repulseRadius){
        //     process();
        //   }
        // }else{
        //   process();
        // }

      } else if (container.repulse.clicking === false) {
        particle.velocity.horizontal = particle.initialVelocity.horizontal;
        particle.velocity.vertical = particle.initialVelocity.vertical;
      }
    }
  }, {
    key: "hoverRepulse",
    value: function hoverRepulse() {
      var container = this.container;
      var options = container.options;
      var particle = this.particle;
      var mousePos = container.interactivity.mouse.position || {
        x: 0,
        y: 0
      };
      var dxMouse = particle.position.x - mousePos.x;
      var dyMouse = particle.position.y - mousePos.y;
      var distMouse = Math.sqrt(dxMouse * dxMouse + dyMouse * dyMouse);
      var normVec = {
        x: dxMouse / distMouse,
        y: dyMouse / distMouse
      };
      var repulseRadius = container.retina.repulseModeDistance;
      var velocity = 100;

      var repulseFactor = _Utils.Utils.clamp((1 - Math.pow(distMouse / repulseRadius, 2)) * velocity, 0, 50);

      var pos = {
        x: particle.position.x + normVec.x * repulseFactor,
        y: particle.position.y + normVec.y * repulseFactor
      };
      var outMode = options.particles.move.outMode;

      if (outMode === _OutMode.OutMode.bounce || outMode === _OutMode.OutMode.bounceVertical || outMode === _OutMode.OutMode.bounceHorizontal) {
        var isInside = {
          horizontal: pos.x - particle.radius > 0 && pos.x + particle.radius < container.canvas.dimension.width,
          vertical: pos.y - particle.radius > 0 && pos.y + particle.radius < container.canvas.dimension.height
        };

        if (outMode === _OutMode.OutMode.bounceVertical || isInside.horizontal) {
          particle.position.x = pos.x;
        }

        if (outMode === _OutMode.OutMode.bounceHorizontal || isInside.vertical) {
          particle.position.y = pos.y;
        }
      } else {
        particle.position.x = pos.x;
        particle.position.y = pos.y;
      }
    }
  }, {
    key: "processRepulse",
    value: function processRepulse(dx, dy, force) {
      var container = this.container;
      var options = container.options;
      var particle = this.particle;
      var f = Math.atan2(dy, dx);
      particle.velocity.horizontal = force * Math.cos(f);
      particle.velocity.vertical = force * Math.sin(f);
      var outMode = options.particles.move.outMode;

      if (outMode === _OutMode.OutMode.bounce || outMode === _OutMode.OutMode.bounceHorizontal || outMode === _OutMode.OutMode.bounceVertical) {
        var pos = {
          x: particle.position.x + particle.velocity.horizontal,
          y: particle.position.y + particle.velocity.vertical
        };

        if (outMode !== _OutMode.OutMode.bounceVertical) {
          if (pos.x + particle.radius > container.canvas.dimension.width || pos.x - particle.radius < 0) {
            particle.velocity.horizontal = -particle.velocity.horizontal;
          }
        }

        if (outMode !== _OutMode.OutMode.bounceHorizontal) {
          if (pos.y + particle.radius > container.canvas.dimension.height || pos.y - particle.radius < 0) {
            particle.velocity.vertical = -particle.velocity.vertical;
          }
        }
      }
    }
  }]);
  return Repulser;
}();

exports.Repulser = Repulser;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,