export class Retina{constructor(i){this.container=i,this.isRetina=!1,this.bubbleModeDistance=0,this.bubbleModeSize=0,this.connectModeDistance=0,this.connectModeRadius=0,this.grabModeDistance=0,this.repulseModeDistance=0,this.slowModeRadius=0,this.lineLinkedDistance=0,this.lineLinkedWidth=0,this.moveSpeed=0,this.sizeValue=0,this.sizeAnimationSpeed=0,this.polygonMaskMoveRadius=0,this.pixelRatio=1}init(){const i=this.container,e=i.options;e.detectRetina&&window.devicePixelRatio>1?(this.pixelRatio=window.devicePixelRatio,this.isRetina=!0):(this.pixelRatio=1,this.isRetina=!1);const t=this.pixelRatio;i.canvas.element&&(i.canvas.dimension.width=i.canvas.element.offsetWidth*t,i.canvas.dimension.height=i.canvas.element.offsetHeight*t),this.bubbleModeDistance=e.interactivity.modes.bubble.distance*t,this.bubbleModeSize=e.interactivity.modes.bubble.size*t,this.connectModeDistance=e.interactivity.modes.connect.distance*t,this.connectModeRadius=e.interactivity.modes.connect.radius*t,this.grabModeDistance=e.interactivity.modes.grab.distance*t,this.repulseModeDistance=e.interactivity.modes.repulse.distance*t,this.slowModeRadius=e.interactivity.modes.slow.radius*t,this.lineLinkedDistance=e.particles.lineLinked.distance*t,this.lineLinkedWidth=e.particles.lineLinked.width*t,this.moveSpeed=e.particles.move.speed*t,this.sizeValue=e.particles.size.value*t,this.sizeAnimationSpeed=e.particles.size.animation.speed*t,this.polygonMaskMoveRadius=e.polygon.move.radius*t}initParticle(i){const e=i.particlesOptions,t=this.pixelRatio;i.lineLinkedDistance=e.lineLinked.distance*t,i.lineLinkedWidth=e.lineLinked.width*t,i.moveSpeed=e.move.speed*t,i.sizeValue=e.size.value*t,"boolean"!=typeof e.size.random&&(i.randomMinimumSize=e.size.random.minimumValue),i.sizeAnimationSpeed=e.size.animation.speed*t}reset(){}};