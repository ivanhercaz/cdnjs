import{Constants}from"./Utils/Constants";import{Utils}from"./Utils/Utils";import{CanvasUtils}from"./Utils/CanvasUtils";import{ColorUtils}from"./Utils/ColorUtils";export class Canvas{constructor(t){this.container=t,this.dimension={height:0,width:0},this.context=null,this.generatedCanvas=!1}init(){this.size();const t=this.container.options,o=t.backgroundMask.cover,i=t.particles.move.trail;this.coverColor=ColorUtils.colorToRgb(void 0!==o.color?o.color:t.backgroundMask.cover),this.trailFillColor="string"==typeof i.fillColor?ColorUtils.stringToRgb(i.fillColor):ColorUtils.colorToRgb(i.fillColor),this.paint()}loadCanvas(t,o){var i;t.className||(t.className=Constants.canvasClass),this.generatedCanvas&&(null===(i=this.element)||void 0===i||i.remove()),this.generatedCanvas=null!=o&&o,this.element=t,this.dimension.height=t.offsetHeight,this.dimension.width=t.offsetWidth,this.context=this.element.getContext("2d"),this.container.retina.init(),this.initBackground()}destroy(){var t;this.generatedCanvas&&(null===(t=this.element)||void 0===t||t.remove()),this.context&&CanvasUtils.clear(this.context,this.dimension)}size(){this.element&&(this.element.width=this.dimension.width,this.element.height=this.dimension.height)}paint(){const t=this.container.options;this.context&&(t.backgroundMask.enable&&t.backgroundMask.cover&&this.coverColor?this.paintBase(ColorUtils.getStyleFromColor(this.coverColor)):this.paintBase())}clear(){const t=this.container.options,o=t.particles.move.trail;t.backgroundMask.enable?this.paint():o.enable&&o.length>0&&this.trailFillColor?this.paintBase(ColorUtils.getStyleFromColor(this.trailFillColor,1/o.length)):this.context&&CanvasUtils.clear(this.context,this.dimension)}isPointInPath(t,o){var i,e;return null!==(e=null===(i=this.context)||void 0===i?void 0:i.isPointInPath(t,o.x,o.y))&&void 0!==e&&e}drawPolygonMask(){const t=this.container,o=t.options,i=this.context,e=o.polygon.draw,n=t.polygon,s=n.raw,l=n.polygonPath,a=n.path2DSupported;i&&(a&&l&&n.offset?CanvasUtils.drawPolygonMaskPath(i,l,e.stroke,n.offset):s&&CanvasUtils.drawPolygonMask(i,s,e.stroke))}drawLinkedLine(t,o,i,e,n){var s;const l=this.container,a=l.options,r=this.context;if(!r)return;let c;if(l.particles.lineLinkedColor===Constants.randomColorValue)c=ColorUtils.getRandomRgbColor();else if("mid"==l.particles.lineLinkedColor&&t.color&&o.color){const i=t.color,e=o.color;c={b:Math.floor(Utils.mix(i.b,e.b,t.size.value,o.size.value)),g:Math.floor(Utils.mix(i.g,e.g,t.size.value,o.size.value)),r:Math.floor(Utils.mix(i.r,e.r,t.size.value,o.size.value))}}else c=l.particles.lineLinkedColor;const d=null!==(s=t.lineLinkedWidth)&&void 0!==s?s:l.retina.lineLinkedWidth;CanvasUtils.drawLineLinked(r,d,i,e,a.backgroundMask.enable,c,n,t.particlesOptions.lineLinked.shadow)}drawConnectLine(t,o){var i;const e=this.lineStyle(t,o);if(!e)return;const n=this.context;n&&CanvasUtils.drawConnectLine(n,null!==(i=t.lineLinkedWidth)&&void 0!==i?i:this.container.retina.lineLinkedWidth,e,t.position,o.position)}drawGrabLine(t,o,i){var e;const n=this.container,s=t.particlesOptions.lineLinked.color;let l=n.particles.lineLinkedColor||("string"==typeof s?ColorUtils.stringToRgb(s):ColorUtils.colorToRgb(s));l==Constants.randomColorValue&&(l=ColorUtils.getRandomRgbColor()),n.particles.lineLinkedColor=l;let a={r:127,g:127,b:127};const r=n.canvas.context;if(!r)return;a=n.particles.lineLinkedColor==Constants.randomColorValue?ColorUtils.getRandomRgbColor()||a:n.particles.lineLinkedColor||a;const c={x:t.position.x+t.offset.x,y:t.position.y+t.offset.y};CanvasUtils.drawGrabLine(r,null!==(e=t.lineLinkedWidth)&&void 0!==e?e:n.retina.lineLinkedWidth,c,i,a,o)}drawParticle(t){var o,i;const e=this.container.options;let n;const s=null!==(o=t.bubble.radius)&&void 0!==o?o:t.size.value,l=null!==(i=t.bubble.opacity)&&void 0!==i?i:t.opacity.value;t.color&&(n=ColorUtils.getStyleFromColor(t.color,l)),this.context&&n&&CanvasUtils.drawParticle(this.context,t,n,e.backgroundMask.enable,s,l,t.particlesOptions.shadow)}paintBase(t){this.context&&CanvasUtils.paintBase(this.context,this.dimension,t)}lineStyle(t,o){const i=this.container.options.interactivity.modes.connect;if(t.color&&o.color){const e=t.color,n=o.color,s={b:Utils.mix(e.b,n.b,t.size.value,o.size.value),g:Utils.mix(e.g,n.g,t.size.value,o.size.value),r:Utils.mix(e.r,n.r,t.size.value,o.size.value)};if(this.context)return CanvasUtils.gradient(this.context,t,o,s,i.lineLinked.opacity)}}initBackground(){const t=this.container.options.background,o=this.element;if(!o)return;const i=o.style;if(t.color){const o="string"==typeof t.color?ColorUtils.stringToRgb(t.color):ColorUtils.colorToRgb(t.color);o&&(i.backgroundColor=ColorUtils.getStyleFromColor(o,t.opacity))}t.image&&(i.backgroundImage=t.image),t.position&&(i.backgroundPosition=t.position),t.repeat&&(i.backgroundRepeat=t.repeat),t.size&&(i.backgroundSize=t.size)}};