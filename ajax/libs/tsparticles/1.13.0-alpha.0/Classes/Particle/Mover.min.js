import{Utils}from"../Utils/Utils";import{HoverMode}from"../../Enums/Modes/HoverMode";export class Mover{constructor(t,e){this.container=t,this.particle=e}move(t){var e;const i=this.container,o=i.options,n=this.particle;if(o.particles.move.enable){const r=this.getProximitySpeedFactor(),s=o.fpsLimit>0?60*t/1e3:3.6,a=(null!==(e=n.moveSpeed)&&void 0!==e?e:i.retina.moveSpeed)/2*r*s;n.position.x+=n.velocity.horizontal*a,n.position.y+=n.velocity.vertical*a}this.moveParallax()}moveParallax(){const t=this.container,e=t.options;if(!e.interactivity.events.onHover.parallax.enable)return;const i=this.particle,o=e.interactivity.events.onHover.parallax.force,n=t.interactivity.mouse.position||{x:0,y:0},r=window.innerHeight/2,s=window.innerWidth/2,a=e.interactivity.events.onHover.parallax.smooth,c=(n.x-s)*(i.size.value/o),l=(n.y-r)*(i.size.value/o);i.offset.x+=(c-i.offset.x)/a,i.offset.y+=(l-i.offset.y)/a}getProximitySpeedFactor(){const t=this.container,e=t.options,i=this.particle;if(!Utils.isInArray(HoverMode.slow,e.interactivity.events.onHover.mode))return 1;const o=this.container.interactivity.mouse.position;if(!o)return 1;const n=i.position,r=Utils.getDistanceBetweenCoordinates(o,n),s=t.retina.slowModeRadius;return r>s?1:(r/s||0)/e.interactivity.modes.slow.factor}};