import{Interactivity}from"./Interactivity/Interactivity";import{Particles}from"./Particles/Particles";import{PolygonMask}from"./PolygonMask/PolygonMask";import{BackgroundMask}from"./BackgroundMask/BackgroundMask";import{Presets}from"../Utils/Presets";import{Background}from"./Background/Background";import{Emitter}from"./Emitters/Emitter";export class Options{constructor(){this.detectRetina=!1,this.emitters=[],this.fpsLimit=30,this.interactivity=new Interactivity,this.particles=new Particles,this.polygon=new PolygonMask,this.backgroundMask=new BackgroundMask,this.pauseOnBlur=!0,this.background=new Background}get fps_limit(){return this.fpsLimit}set fps_limit(t){this.fpsLimit=t}get retina_detect(){return this.detectRetina}set retina_detect(t){this.detectRetina=t}load(t){var i,e;if(void 0!==t){if(void 0!==t.preset)if(t.preset instanceof Array)for(const i of t.preset)this.importPreset(i);else this.importPreset(t.preset);void 0!==t.background&&this.background.load(t.background);const s=null!==(i=t.detectRetina)&&void 0!==i?i:t.retina_detect;void 0!==s&&(this.detectRetina=s);const r=null!==(e=t.fpsLimit)&&void 0!==e?e:t.fps_limit;void 0!==r&&(this.fpsLimit=r),void 0!==t.pauseOnBlur&&(this.pauseOnBlur=t.pauseOnBlur),this.particles.load(t.particles),this.interactivity.load(t.interactivity,this.particles),this.polygon.load(t.polygon),this.backgroundMask.load(t.backgroundMask),void 0!==t.emitters&&(t.emitters instanceof Array?this.emitters=t.emitters.map(t=>{const i=new Emitter;return i.load(t,this.particles),i}):(this.emitters instanceof Array&&(this.emitters=new Emitter),this.emitters.load(t.emitters,this.particles)))}}importPreset(t){const i=Presets.getPreset(t);void 0!==i&&this.load(i)}};