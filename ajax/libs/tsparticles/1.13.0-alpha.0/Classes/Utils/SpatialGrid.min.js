import{Utils}from"./Utils";export class SpatialGrid{constructor(t){this.grid=[],this.cellSize=5,this.widthSegment=Math.round(t.width/this.cellSize),this.heightSegment=Math.round(t.height/this.cellSize)}setGrid(t,i){const e=[],s=(null==i?void 0:i.width)?(null==i?void 0:i.width)/this.cellSize:this.widthSegment,h=(null==i?void 0:i.height)?(null==i?void 0:i.height)/this.cellSize:this.heightSegment;for(let i=0;i<t.length;i++){const s=this.index(t[i].position);Array.isArray(e[s.x])||(e[s.x]=[]),Array.isArray(e[s.x][s.y])||(e[s.x][s.y]=[]),e[s.x][s.y].push(t[i])}this.widthSegment=s,this.heightSegment=h,this.grid=e}queryInCell(t){const i=this.index(t);return Array.isArray(this.grid[i.x])&&Array.isArray(this.grid[i.x][i.y])&&this.grid[i.x][i.y]||[]}queryRadius(t,i){const e=this.index(t),s=this.radius({x:i,y:i}),h=this.select(this.indexOp(e,"-",s),this.indexOp(e,"+",s));let r=[];for(let e=0;e<h.length;e++)h[e]&&Utils.getDistanceBetweenCoordinates(h[e].position,t)<=i&&(r[r.length+1]=h[e]);return r}queryRadiusWithDist(t,i){const e=this.index(t),s=this.radius({x:i,y:i}),h=this.select(this.indexOp(e,"-",s),this.indexOp(e,"+",s));let r=[];for(let e=0;e<h.length;e++)if(h[e]){const s=Utils.getDistanceBetweenCoordinates(h[e].position,t);s<=i&&r.push({dist:s,particle:h[e]})}return r}select(t,i){let e=[];for(let s=t.x;s<=i.x;s++)if(Array.isArray(this.grid[s]))for(let h=t.y;h<=i.y;h++)if(Array.isArray(this.grid[s][h]))for(let t=0;t<this.grid[s][h].length;t++)null!=this.grid[s][h][t]&&(e[e.length+1]=this.grid[s][h][t]);return e}index(t){return{x:Math.round(t.x/this.widthSegment),y:Math.round(t.y/this.heightSegment)}}radius(t){return{x:Math.ceil(t.x/this.widthSegment),y:Math.ceil(t.y/this.heightSegment)}}indexOp(t,i,e){return"+"==i?{x:this.clamp(t.x+e.x),y:this.clamp(t.y+e.y)}:{x:this.clamp(t.x-e.x),y:this.clamp(t.y-e.y)}}clamp(t){return Utils.clamp(t,0,this.cellSize)}};