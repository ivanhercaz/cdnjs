import{Utils}from"../Utils/Utils";import{HoverMode}from"../../Enums/Modes/HoverMode";export class Mover{constructor(t,i){this.container=t,this.particle=i}move(t){const i=this.container,e=i.options,o=this.particle;if(e.particles.move.enable){const r=this.getProximitySpeedFactor(),n=e.fpsLimit>0?60*t/1e3:3.6,s=i.retina.moveSpeed/2*r*n;o.position.x+=o.velocity.horizontal*s,o.position.y+=o.velocity.vertical*s}this.moveParallax()}moveParallax(){const t=this.container,i=t.options;if(!i.interactivity.events.onHover.parallax.enable)return;const e=this.particle,o=i.interactivity.events.onHover.parallax.force,r=t.interactivity.mouse.position||{x:0,y:0},n=window.innerHeight/2,s=window.innerWidth/2,a=i.interactivity.events.onHover.parallax.smooth,c=(r.x-s)*(e.radius/o),l=(r.y-n)*(e.radius/o);e.offset.x+=(c-e.offset.x)/a,e.offset.y+=(l-e.offset.y)/a}getProximitySpeedFactor(){const t=this.container,i=t.options,e=this.particle;if(!Utils.isInArray(HoverMode.slow,i.interactivity.events.onHover.mode))return 1;const o=this.container.interactivity.mouse.position;if(!o)return 1;const r=e.position,n=Utils.getDistanceBetweenCoordinates(o,r),s=t.retina.slowModeRadius;return n>s?1:(n/s||0)/i.interactivity.modes.slow.factor}};