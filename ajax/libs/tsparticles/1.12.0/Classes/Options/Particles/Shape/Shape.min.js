import{ShapeType}from"../../../../Enums/ShapeType";import{CharacterShape}from"./CharacterShape";import{ImageShape}from"./ImageShape";import{PolygonShape}from"./PolygonShape";export class Shape{constructor(){this.character=new CharacterShape,this.image=new ImageShape,this.polygon=new PolygonShape,this.type=ShapeType.circle,this.custom={}}get images(){return this.image instanceof Array?this.image:[]}set images(a){this.image=a}get stroke(){return[]}set stroke(a){}load(a){if(void 0!==a){if(void 0!==a.custom)for(const e in a.custom){const t=a.custom[e];void 0!==t&&(t instanceof Array?this.custom[e]=t.filter(a=>void 0!==a).map(a=>a):this.custom[e]=t)}void 0!==a.character&&(a.character instanceof Array?this.character=a.character.map(a=>{const e=new CharacterShape;return e.load(a),e}):(this.character=new CharacterShape,this.character.load(a.character))),void 0!==a.image&&(a.image instanceof Array?this.image=a.image.map(a=>{const e=new ImageShape;return e.load(a),e}):(this.image=new ImageShape,this.image.load(a.image))),void 0!==a.polygon&&(a.polygon instanceof Array?this.polygon=a.polygon.map(a=>{const e=new PolygonShape;return e.load(a),e}):(this.polygon=new PolygonShape,this.polygon.load(a.polygon))),void 0!==a.type&&(this.type=a.type)}}};