"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Bubbler = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _ProcessBubbleType = require("../../Enums/ProcessBubbleType");

var _Utils = require("../Utils/Utils");

var _HoverMode = require("../../Enums/Modes/HoverMode");

var _ClickMode = require("../../Enums/Modes/ClickMode");

/**
 * Particle bubble manager
 */
var Bubbler = /*#__PURE__*/function () {
  function Bubbler(container, particle) {
    (0, _classCallCheck2["default"])(this, Bubbler);
    this.opacity = void 0;
    this.radius = void 0;
    this.particle = void 0;
    this.container = void 0;
    this.container = container;
    this.particle = particle;
  }

  (0, _createClass2["default"])(Bubbler, [{
    key: "bubble",
    value: function bubble() {
      var container = this.container;
      var options = container.options;
      var hoverEnabled = options.interactivity.events.onHover.enable;
      var hoverMode = options.interactivity.events.onHover.mode;
      var clickEnabled = options.interactivity.events.onClick.enable;
      var clickMode = options.interactivity.events.onClick.mode;
      /* on hover event */

      if (hoverEnabled && _Utils.Utils.isInArray(_HoverMode.HoverMode.bubble, hoverMode)) {
        this.hoverBubble();
      } else if (clickEnabled && _Utils.Utils.isInArray(_ClickMode.ClickMode.bubble, clickMode)) {
        this.clickBubble();
      }
    }
  }, {
    key: "init",
    value: function init() {
      var particle = this.particle;
      this.opacity = particle.opacity.value;
      this.radius = particle.radius;
    }
  }, {
    key: "process",
    value: function process(distMouse, timeSpent, data) {
      var container = this.container;
      var options = container.options;
      var bubbleDuration = options.interactivity.modes.bubble.duration;
      var bubbleParam = data.bubbleObj.optValue;
      var bubbleDistance = container.retina.bubbleModeDistance;
      var particlesParam = data.particlesObj.optValue;
      var pObjBubble = data.bubbleObj.value;
      var pObj = data.particlesObj.value || 0;
      var type = data.type;

      if (bubbleParam !== particlesParam) {
        if (!container.bubble.durationEnd) {
          if (distMouse <= bubbleDistance) {
            var obj;

            if (pObjBubble) {
              obj = pObjBubble;
            } else {
              obj = pObj;
            }

            if (obj !== bubbleParam) {
              var value = pObj - timeSpent * (pObj - bubbleParam) / bubbleDuration;

              if (type === _ProcessBubbleType.ProcessBubbleType.size) {
                this.radius = value;
              }

              if (type === _ProcessBubbleType.ProcessBubbleType.opacity) {
                this.opacity = value;
              }
            }
          } else {
            if (type === _ProcessBubbleType.ProcessBubbleType.size) {
              this.radius = undefined;
            }

            if (type === _ProcessBubbleType.ProcessBubbleType.opacity) {
              this.opacity = undefined;
            }
          }
        } else if (pObjBubble) {
          var tmpValue = pObj - timeSpent * (pObj - bubbleParam) / bubbleDuration;
          var dif = bubbleParam - tmpValue;

          var _value = bubbleParam + dif;

          if (type === _ProcessBubbleType.ProcessBubbleType.size) {
            this.radius = _value;
          }

          if (type === _ProcessBubbleType.ProcessBubbleType.opacity) {
            this.opacity = _value;
          }
        }
      }
    }
  }, {
    key: "clickBubble",
    value: function clickBubble() {
      var container = this.container;
      var options = container.options;
      var particle = this.particle;
      /* on click event */

      var mouseClickPos = container.interactivity.mouse.clickPosition || {
        x: 0,
        y: 0
      };

      var distMouse = _Utils.Utils.getDistanceBetweenCoordinates(particle.position, mouseClickPos);

      var timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime || 0)) / 1000;

      if (container.bubble.clicking) {
        if (timeSpent > options.interactivity.modes.bubble.duration) {
          container.bubble.durationEnd = true;
        }

        if (timeSpent > options.interactivity.modes.bubble.duration * 2) {
          container.bubble.clicking = false;
          container.bubble.durationEnd = false;
        }
      }

      if (container.bubble.clicking) {
        /* size */
        var sizeData = {
          bubbleObj: {
            optValue: container.retina.bubbleModeSize,
            value: this.radius
          },
          particlesObj: {
            optValue: container.retina.sizeValue,
            value: this.particle.radius
          },
          type: _ProcessBubbleType.ProcessBubbleType.size
        };
        this.process(distMouse, timeSpent, sizeData);
        /* opacity */

        var opacityData = {
          bubbleObj: {
            optValue: options.interactivity.modes.bubble.opacity,
            value: this.opacity
          },
          particlesObj: {
            optValue: options.particles.opacity.value,
            value: this.particle.opacity.value
          },
          type: _ProcessBubbleType.ProcessBubbleType.opacity
        };
        this.process(distMouse, timeSpent, opacityData);
      }
    }
  }, {
    key: "hoverBubble",
    value: function hoverBubble() {
      var container = this.container;
      var particle = this.particle;
      var mousePos = container.interactivity.mouse.position || {
        x: 0,
        y: 0
      };

      var distMouse = _Utils.Utils.getDistanceBetweenCoordinates(particle.position, mousePos);

      var ratio = 1 - distMouse / container.retina.bubbleModeDistance;
      /* mousemove - check ratio */

      if (distMouse <= container.retina.bubbleModeDistance) {
        if (ratio >= 0 && container.interactivity.status === "mousemove") {
          /* size */
          this.hoverBubbleSize(ratio);
          /* opacity */

          this.hoverBubbleOpacity(ratio);
        }
      } else {
        this.init();
      }
      /* mouseleave */


      if (container.interactivity.status === "mouseleave") {
        this.init();
      }
    }
  }, {
    key: "hoverBubbleSize",
    value: function hoverBubbleSize(ratio) {
      var container = this.container;
      var particle = this.particle;

      if (container.retina.bubbleModeSize !== container.retina.sizeValue) {
        if (container.retina.bubbleModeSize > container.retina.sizeValue) {
          var size = particle.radius + container.retina.bubbleModeSize * ratio;

          if (size >= 0) {
            this.radius = size;
          }
        } else {
          var dif = particle.radius - container.retina.bubbleModeSize;

          var _size = particle.radius - dif * ratio;

          if (_size > 0) {
            this.radius = _size;
          } else {
            this.radius = 0;
          }
        }
      }
    }
  }, {
    key: "hoverBubbleOpacity",
    value: function hoverBubbleOpacity(ratio) {
      var container = this.container;
      var options = container.options;
      var particle = this.particle;
      var modeOpacity = options.interactivity.modes.bubble.opacity;
      var optOpacity = options.particles.opacity.value;
      var pOpacity = particle.opacity.value;

      if (modeOpacity !== optOpacity) {
        if (modeOpacity > optOpacity) {
          var opacity = options.interactivity.modes.bubble.opacity * ratio;

          if (opacity > pOpacity && opacity <= modeOpacity) {
            this.opacity = opacity;
          }
        } else {
          var _opacity = pOpacity - (optOpacity - modeOpacity) * ratio;

          if (_opacity < pOpacity && _opacity >= modeOpacity) {
            this.opacity = _opacity;
          }
        }
      }
    }
  }]);
  return Bubbler;
}();

exports.Bubbler = Bubbler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,