import{ShapeUtils}from"./ShapeUtils";import{ColorUtils}from"./ColorUtils";export class CanvasUtils{static paintBase(o,t,e){o.save(),o.fillStyle=null!=e?e:"rgba(255, 255, 255, 0)",o.fillRect(0,0,t.width,t.height),o.restore()}static clear(o,t){o.clearRect(0,0,t.width,t.height)}static drawPolygonMask(o,t,e){const l="string"==typeof e.color?ColorUtils.stringToRgb(e.color):ColorUtils.colorToRgb(e.color);if(l){o.save(),o.beginPath(),o.moveTo(t[0].x,t[0].y);for(let e=1;e<t.length;e++)o.lineTo(t[e].x,t[e].y);o.closePath(),o.strokeStyle=ColorUtils.getStyleFromColor(l),o.lineWidth=e.width,o.stroke(),o.restore()}}static drawLineLinked(o,t,e,l,r,s,i,a){o.save(),r&&(o.globalCompositeOperation="destination-out"),s&&(o.strokeStyle=ColorUtils.getStyleFromColor(s,i)),o.lineWidth=t,o.beginPath();const n="string"==typeof a.color?ColorUtils.stringToRgb(a.color):ColorUtils.colorToRgb(a.color);a.enable&&n&&(o.shadowBlur=a.blur,o.shadowColor=ColorUtils.getStyleFromColor(n)),o.moveTo(e.x,e.y),o.lineTo(l.x,l.y),o.stroke(),o.closePath(),o.restore()}static drawConnectLine(o,t,e,l,r){o.save(),o.beginPath(),o.lineWidth=t,o.strokeStyle=e,o.moveTo(l.x,l.y),o.lineTo(r.x,r.y),o.stroke(),o.closePath(),o.restore()}static gradient(o,t,e,l){const r=Math.floor(e.radius/t.radius);if(!t.color||!e.color)return;const s=t.position,i=e.position,a=o.createLinearGradient(s.x,s.y,i.x,i.y);return a.addColorStop(0,ColorUtils.getStyleFromColor(t.color)),a.addColorStop(r>1?1:r,l),a.addColorStop(1,ColorUtils.getStyleFromColor(e.color)),a}static drawGrabLine(o,t,e,l,r,s){o.save(),o.strokeStyle=`rgba(${r.r},${r.g},${r.b},${s})`,o.lineWidth=t,o.beginPath(),o.moveTo(e.x,e.y),o.lineTo(l.x,l.y),o.stroke(),o.closePath(),o.restore()}static drawParticle(o,t,e,l,r){o.save();const s=t.stroke,i=t.strokeColor,a=t.container.options.particles.shadow,n=t.shadowColor;a.enable&&n&&(o.shadowBlur=a.blur,o.shadowColor=ColorUtils.getStyleFromColor(n),o.shadowOffsetX=a.offset.x,o.shadowOffsetY=a.offset.y),o.fillStyle=e;const c={x:t.position.x,y:t.position.y};o.translate(c.x,c.y),o.beginPath(),0!==t.angle&&o.rotate(t.angle*Math.PI/180),l&&(o.globalCompositeOperation="destination-out"),ShapeUtils.drawShape(o,t,r,s,i),o.closePath(),s.width>0&&t.strokeColor&&(o.strokeStyle=ColorUtils.getStyleFromColor(t.strokeColor),o.lineWidth=s.width,o.stroke()),o.fill(),o.restore()}};