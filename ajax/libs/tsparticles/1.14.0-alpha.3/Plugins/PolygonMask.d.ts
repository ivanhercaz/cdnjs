import { Container } from "../Core/Container";
import type { ICoordinates } from "../Core/Interfaces/ICoordinates";
import { Particle } from "../Core/Particle";
import type { IDimension } from "../Core/Interfaces/IDimension";
import { ISvgPath } from "../Core/Interfaces/ISvgPath";
import type { IPlugin } from "../Core/Interfaces/IPlugin";
export declare class PolygonMask implements IPlugin {
    redrawTimeout?: number;
    raw?: ICoordinates[];
    svg?: SVGSVGElement;
    paths: ISvgPath[];
    dimension: IDimension;
    offset?: ICoordinates;
    readonly path2DSupported: boolean;
    private readonly container;
    constructor(container: Container);
    checkInsidePolygon(position: ICoordinates | undefined): boolean;
    resize(): void;
    initAsync(): Promise<void>;
    reset(): void;
    randomPointInPolygon(): ICoordinates;
    particlesInitialization(): boolean;
    particlePosition(position?: ICoordinates): ICoordinates | undefined;
    particleBounce(particle: Particle): boolean;
    clickPositionValid(position: ICoordinates): boolean;
    parseSvgPathToPolygon(svgUrl?: string): Promise<ICoordinates[] | undefined>;
    draw(): void;
    drawPointsOnPolygonPath(): void;
    private getRandomPointOnPolygonPath;
    private getRandomPointOnPolygonPathByLength;
    private getEquidistantPointOnPolygonPathByIndex;
    private getPointOnPolygonPathByIndex;
    private createPath2D;
    private static polygonBounce;
    private static drawPolygonMask;
    private static drawPolygonMaskPath;
}
