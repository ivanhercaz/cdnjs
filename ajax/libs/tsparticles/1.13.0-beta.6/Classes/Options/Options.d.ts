import type { IOptions } from "../../Interfaces/Options/IOptions";
import type { IInteractivity } from "../../Interfaces/Options/Interactivity/IInteractivity";
import type { IParticles } from "../../Interfaces/Options/Particles/IParticles";
import type { IPolygonMask } from "../../Interfaces/Options/PolygonMask/IPolygonMask";
import type { IBackgroundMask } from "../../Interfaces/Options/BackgroundMask/IBackgroundMask";
import type { RecursivePartial } from "../../Types/RecursivePartial";
import type { IBackground } from "../../Interfaces/Options/Background/IBackground";
import type { SingleOrMultiple } from "../../Types/SingleOrMultiple";
import type { IEmitter } from "../../Interfaces/Options/Emitters/IEmitter";
import { IBlackHole } from "../../Interfaces/Options/BlackHoles/IBlackHole";
export declare class Options implements IOptions {
    get fps_limit(): number;
    set fps_limit(value: number);
    get retina_detect(): boolean;
    set retina_detect(value: boolean);
    background: IBackground;
    backgroundMask: IBackgroundMask;
    blackHoles: SingleOrMultiple<IBlackHole>;
    detectRetina: boolean;
    emitters: SingleOrMultiple<IEmitter>;
    fpsLimit: number;
    interactivity: IInteractivity;
    particles: IParticles;
    polygon: IPolygonMask;
    pauseOnBlur: boolean;
    preset?: string | string[];
    constructor();
    load(data: RecursivePartial<IOptions>): void;
    private importPreset;
}
