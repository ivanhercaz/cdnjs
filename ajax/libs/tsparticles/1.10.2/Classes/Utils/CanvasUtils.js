"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CanvasUtils = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _Utils = require("./Utils");

var _ShapeUtils = require("./ShapeUtils");

var CanvasUtils = /*#__PURE__*/function () {
  function CanvasUtils() {
    (0, _classCallCheck2["default"])(this, CanvasUtils);
  }

  (0, _createClass2["default"])(CanvasUtils, null, [{
    key: "paintBase",
    value: function paintBase(context, dimension, baseColor) {
      context.save();
      context.fillStyle = baseColor !== null && baseColor !== void 0 ? baseColor : "rgba(255, 255, 255, 0)";
      context.fillRect(0, 0, dimension.width, dimension.height);
      context.restore();
    }
  }, {
    key: "clear",
    value: function clear(context, dimension) {
      context.clearRect(0, 0, dimension.width, dimension.height);
    }
  }, {
    key: "drawPolygonMask",
    value: function drawPolygonMask(context, rawData, stroke) {
      context.save();
      context.beginPath();
      context.moveTo(rawData[0].x, rawData[0].y);

      for (var i = 1; i < rawData.length; i++) {
        context.lineTo(rawData[i].x, rawData[i].y);
      }

      context.closePath();
      context.strokeStyle = stroke.color;
      context.lineWidth = stroke.width;
      context.stroke();
      context.restore();
    }
  }, {
    key: "drawLineLinked",
    value: function drawLineLinked(context, width, begin, end, backgroundMask, colorLine, opacity, shadow) {
      context.save();

      if (backgroundMask) {
        context.globalCompositeOperation = 'destination-out';
      }

      if (colorLine) {
        context.strokeStyle = "rgba(".concat(colorLine.r, ",").concat(colorLine.g, ",").concat(colorLine.b, ",").concat(opacity, ")");
      }

      context.lineWidth = width; // this.ctx.lineCap = "round"; /* performance issue */

      /* path */

      context.beginPath();

      if (shadow.enable) {
        context.shadowBlur = shadow.blur;
        context.shadowColor = shadow.color;
      }

      context.moveTo(begin.x, begin.y);
      context.lineTo(end.x, end.y);
      context.stroke();
      context.closePath();
      context.restore();
    }
  }, {
    key: "drawConnectLine",
    value: function drawConnectLine(context, width, lineStyle, begin, end) {
      context.save();
      context.beginPath();
      context.lineWidth = width;
      context.strokeStyle = lineStyle;
      context.moveTo(begin.x, begin.y);
      context.lineTo(end.x, end.y);
      context.stroke();
      context.closePath();
      context.restore();
    }
  }, {
    key: "gradient",
    value: function gradient(context, p1, p2, midColor) {
      var gradStop = Math.floor(p2.radius / p1.radius);

      if (!p1.color || !p2.color) {
        return;
      }

      var sourcePos = p1.position;
      var destPos = p2.position;
      var grad = context.createLinearGradient(sourcePos.x, sourcePos.y, destPos.x, destPos.y);
      grad.addColorStop(0, _Utils.Utils.getStyleFromColor(p1.color));
      grad.addColorStop(gradStop > 1 ? 1 : gradStop, midColor);
      grad.addColorStop(1, _Utils.Utils.getStyleFromColor(p2.color));
      return grad;
    }
  }, {
    key: "drawGrabLine",
    value: function drawGrabLine(context, width, begin, end, colorLine, opacity) {
      context.save();
      context.strokeStyle = "rgba(".concat(colorLine.r, ",").concat(colorLine.g, ",").concat(colorLine.b, ",").concat(opacity, ")");
      context.lineWidth = width;
      context.beginPath();
      context.moveTo(begin.x, begin.y);
      context.lineTo(end.x, end.y);
      context.stroke();
      context.closePath();
      context.restore();
    }
  }, {
    key: "drawParticle",
    value: function drawParticle(context, particle, colorValue, backgroundMask, radius, stroke) {
      context.save(); // TODO: Performance issues, the canvas shadow is really slow
      // const shadow = options.particles.shadow;
      // if (shadow.enable) {
      //     ctx.shadowBlur = shadow.blur;
      //     ctx.shadowColor = shadow.color;
      //     ctx.shadowOffsetX = shadow.offset.x;
      //     ctx.shadowOffsetY = shadow.offset.y;
      // } else {
      //     delete ctx.shadowBlur;
      //     delete ctx.shadowColor;
      //     delete ctx.shadowOffsetX;
      //     delete ctx.shadowOffsetY;
      // }

      context.fillStyle = colorValue;
      var pos = {
        x: particle.position.x,
        y: particle.position.y
      };
      context.translate(pos.x, pos.y);
      context.beginPath();

      if (particle.angle !== 0) {
        context.rotate(particle.angle * Math.PI / 180);
      }

      if (backgroundMask) {
        context.globalCompositeOperation = 'destination-out';
      }

      _ShapeUtils.ShapeUtils.drawShape(context, particle, radius, stroke);

      context.closePath();

      if (stroke.width > 0) {
        context.strokeStyle = stroke.color;
        context.lineWidth = stroke.width;
        context.stroke();
      }

      context.fill();
      context.restore();
    }
  }]);
  return CanvasUtils;
}();

exports.CanvasUtils = CanvasUtils;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9DbGFzc2VzL1V0aWxzL0NhbnZhc1V0aWxzLnRzIl0sIm5hbWVzIjpbIkNhbnZhc1V0aWxzIiwiY29udGV4dCIsImRpbWVuc2lvbiIsImJhc2VDb2xvciIsInNhdmUiLCJmaWxsU3R5bGUiLCJmaWxsUmVjdCIsIndpZHRoIiwiaGVpZ2h0IiwicmVzdG9yZSIsImNsZWFyUmVjdCIsInJhd0RhdGEiLCJzdHJva2UiLCJiZWdpblBhdGgiLCJtb3ZlVG8iLCJ4IiwieSIsImkiLCJsZW5ndGgiLCJsaW5lVG8iLCJjbG9zZVBhdGgiLCJzdHJva2VTdHlsZSIsImNvbG9yIiwibGluZVdpZHRoIiwiYmVnaW4iLCJlbmQiLCJiYWNrZ3JvdW5kTWFzayIsImNvbG9yTGluZSIsIm9wYWNpdHkiLCJzaGFkb3ciLCJnbG9iYWxDb21wb3NpdGVPcGVyYXRpb24iLCJyIiwiZyIsImIiLCJlbmFibGUiLCJzaGFkb3dCbHVyIiwiYmx1ciIsInNoYWRvd0NvbG9yIiwibGluZVN0eWxlIiwicDEiLCJwMiIsIm1pZENvbG9yIiwiZ3JhZFN0b3AiLCJNYXRoIiwiZmxvb3IiLCJyYWRpdXMiLCJzb3VyY2VQb3MiLCJwb3NpdGlvbiIsImRlc3RQb3MiLCJncmFkIiwiY3JlYXRlTGluZWFyR3JhZGllbnQiLCJhZGRDb2xvclN0b3AiLCJVdGlscyIsImdldFN0eWxlRnJvbUNvbG9yIiwicGFydGljbGUiLCJjb2xvclZhbHVlIiwicG9zIiwidHJhbnNsYXRlIiwiYW5nbGUiLCJyb3RhdGUiLCJQSSIsIlNoYXBlVXRpbHMiLCJkcmF3U2hhcGUiLCJmaWxsIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBSUE7O0FBRUE7O0lBSWFBLFc7Ozs7Ozs7OEJBQ2VDLE8sRUFDQUMsUyxFQUNBQyxTLEVBQTBCO0FBQzlDRixNQUFBQSxPQUFPLENBQUNHLElBQVI7QUFDQUgsTUFBQUEsT0FBTyxDQUFDSSxTQUFSLEdBQW9CRixTQUFwQixhQUFvQkEsU0FBcEIsY0FBb0JBLFNB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RyxHQUFHO0FBQ1J6QyxRQUFBQSxDQUFDLEVBQUV1QyxRQUFRLENBQUNQLFFBQVQsQ0FBa0JoQyxDQURiO0FBRVJDLFFBQUFBLENBQUMsRUFBRXNDLFFBQVEsQ0FBQ1AsUUFBVCxDQUFrQi9CO0FBRmIsT0FBWjtBQUtBZixNQUFBQSxPQUFPLENBQUN3RCxTQUFSLENBQWtCRCxHQUFHLENBQUN6QyxDQUF0QixFQUF5QnlDLEdBQUcsQ0FBQ3hDLENBQTdCO0FBQ0FmLE1BQUFBLE9BQU8sQ0FBQ1ksU0FBUjs7QUFFQSxVQUFJeUMsUUFBUSxDQUFDSSxLQUFULEtBQW1CLENBQXZCLEVBQTBCO0FBQ3RCekQsUUFBQUEsT0FBTyxDQUFDMEQsTUFBUixDQUFlTCxRQUFRLENBQUNJLEtBQVQsR0FBaUJmLElBQUksQ0FBQ2lCLEVBQXRCLEdBQTJCLEdBQTFDO0FBQ0g7O0FBRUQsVUFBSWxDLGNBQUosRUFBb0I7QUFDaEJ6QixRQUFBQSxPQUFPLENBQUM2Qix3QkFBUixHQUFtQyxpQkFBbkM7QUFDSDs7QUFFRCtCLDZCQUFXQyxTQUFYLENBQXFCN0QsT0FBckIsRUFBOEJxRCxRQUE5QixFQUF3Q1QsTUFBeEMsRUFBZ0RqQyxNQUFoRDs7QUFFQVgsTUFBQUEsT0FBTyxDQUFDbUIsU0FBUjs7QUFFQSxVQUFJUixNQUFNLENBQUNMLEtBQVAsR0FBZSxDQUFuQixFQUFzQjtBQUNsQk4sUUFBQUEsT0FBTyxDQUFDb0IsV0FBUixHQUFzQlQsTUFBTSxDQUFDVSxLQUE3QjtBQUNBckIsUUFBQUEsT0FBTyxDQUFDc0IsU0FBUixHQUFvQlgsTUFBTSxDQUFDTCxLQUEzQjtBQUNBTixRQUFBQSxPQUFPLENBQUNXLE1BQVI7QUFDSDs7QUFFRFgsTUFBQUEsT0FBTyxDQUFDOEQsSUFBUjtBQUNBOUQsTUFBQUEsT0FBTyxDQUFDUSxPQUFSO0FBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0lEaW1lbnNpb259IGZyb20gXCIuLi8uLi9JbnRlcmZhY2VzL0lEaW1lbnNpb25cIjtcbmltcG9ydCB7SUNvb3JkaW5hdGVzfSBmcm9tIFwiLi4vLi4vSW50ZXJmYWNlcy9JQ29vcmRpbmF0ZXNcIjtcbmltcG9ydCB7SVJnYn0gZnJvbSBcIi4uLy4uL0ludGVyZmFjZXMvSVJnYlwiO1xuaW1wb3J0IHtQYXJ0aWNsZX0gZnJvbSBcIi4uL1BhcnRpY2xlXCI7XG5pbXBvcnQge1V0aWxzfSBmcm9tIFwiLi9VdGlsc1wiO1xuaW1wb3J0IHtJU3Ryb2tlfSBmcm9tIFwiLi4vLi4vSW50ZXJmYWNlcy9PcHRpb25zL1BhcnRpY2xlcy9TaGFwZS9JU3Ryb2tlXCI7XG5pbXBvcnQge1NoYXBlVXRpbHN9IGZyb20gXCIuL1NoYXBlVXRpbHNcIjtcbmltcG9ydCB7SUxpbmVMaW5rZWRTaGFkb3d9IGZyb20gXCIuLi8uLi9JbnRlcmZhY2VzL09wdGlvbnMvUGFydGljbGVzL0lMaW5lTGlua2VkU2hhZG93XCI7XG5pbXBvcnQge0lQb2x5Z29uTWFza0RyYXdTdHJva2V9IGZyb20gXCIuLi8uLi9JbnRlcmZhY2VzL09wdGlvbnMvUG9seWdvbk1hc2svSVBvbHlnb25NYXNrRHJhd1N0cm9rZVwiO1xuXG5leHBvcnQgY2xhc3MgQ2FudmFzVXRpbHMge1xuICAgIHB1YmxpYyBzdGF0aWMgcGFpbnRCYXNlKGNvbnRleHQ6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaW1lbnNpb246IElEaW1lbnNpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFzZUNvbG9yPzogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGNvbnRleHQuc2F2ZSgpO1xuICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IGJhc2VDb2xvciA/PyBcInJnYmEoMjU1LCAyNTUsIDI1NSwgMClcIjtcbiAgICAgICAgY29udGV4dC5maWxsUmVjdCgwLCAwLCBkaW1lbnNpb24ud2lkdGgsIGRpbWVuc2lvbi5oZWlnaHQpO1xuICAgICAgICBjb250ZXh0LnJlc3RvcmUoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGNsZWFyKGNvbnRleHQ6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgZGltZW5zaW9uOiBJRGltZW5zaW9uKTogdm9pZCB7XG4gICAgICAgIGNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIGRpbWVuc2lvbi53aWR0aCwgZGltZW5zaW9uLmhlaWdodCk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBkcmF3UG9seWdvbk1hc2soY29udGV4dDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd0RhdGE6IElDb29yZGluYXRlc1tdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZTogSVBvbHlnb25NYXNrRHJhd1N0cm9rZSk6IHZvaWQge1xuICAgICAgICBjb250ZXh0LnNhdmUoKTtcbiAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgICAgY29udGV4dC5tb3ZlVG8ocmF3RGF0YVswXS54LCByYXdEYXRhWzBdLnkpO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgcmF3RGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29udGV4dC5saW5lVG8ocmF3RGF0YVtpXS54LCByYXdEYXRhW2ldLnkpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9IHN0cm9rZS5jb2xvcjtcbiAgICAgICAgY29udGV4dC5saW5lV2lkdGggPSBzdHJva2Uud2lkdGg7XG4gICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XG4gICAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgZHJhd0xpbmVMaW5rZWQoY29udGV4dDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IG51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlZ2luOiBJQ29vcmRpbmF0ZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IElDb29yZGluYXRlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRNYXNrOiBib29sZWFuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JMaW5lOiBJUmdiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogbnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hhZG93OiBJTGluZUxpbmtlZFNoYWRvdyk6IHZvaWQge1xuICAgICAgICBjb250ZXh0LnNhdmUoKTtcblxuICAgICAgICBpZiAoYmFja2dyb3VuZE1hc2spIHtcbiAgICAgICAgICAgIGNvbnRleHQuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gJ2Rlc3RpbmF0aW9uLW91dCc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29sb3JMaW5lKSB7XG4gICAgICAgICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gYHJnYmEoJHtjb2xvckxpbmUucn0sJHtjb2xvckxpbmUuZ30sJHtjb2xvckxpbmUuYn0sJHtvcGFjaXR5fSlgO1xuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5saW5lV2lkdGggPSB3aWR0aDtcbiAgICAgICAgLy8gdGhpcy5jdHgubGluZUNhcCA9IFwicm91bmRcIjsgLyogcGVyZm9ybWFuY2UgaXNzdWUgKi9cbiAgICAgICAgLyogcGF0aCAqL1xuICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgICBpZiAoc2hhZG93LmVuYWJsZSkge1xuICAgICAgICAgICAgY29udGV4dC5zaGFkb3dCbHVyID0gc2hhZG93LmJsdXI7XG4gICAgICAgICAgICBjb250ZXh0LnNoYWRvd0NvbG9yID0gc2hhZG93LmNvbG9yO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRleHQubW92ZVRvKGJlZ2luLngsIGJlZ2luLnkpO1xuICAgICAgICBjb250ZXh0LmxpbmVUbyhlbmQueCwgZW5kLnkpO1xuICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xuICAgICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICBjb250ZXh0LnJlc3RvcmUoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGRyYXdDb25uZWN0TGluZShjb250ZXh0OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IG51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lU3R5bGU6IENhbnZhc0dyYWRpZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlZ2luOiBJQ29vcmRpbmF0ZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBJQ29vcmRpbmF0ZXMpOiB2b2lkIHtcbiAgICAgICAgY29udGV4dC5zYXZlKCk7XG4gICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICAgIGNvbnRleHQubGluZVdpZHRoID0gd2lkdGg7XG4gICAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSBsaW5lU3R5bGU7XG4gICAgICAgIGNvbnRleHQubW92ZVRvKGJlZ2luLngsIGJlZ2luLnkpO1xuICAgICAgICBjb250ZXh0LmxpbmVUbyhlbmQueCwgZW5kLnkpO1xuICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xuICAgICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICBjb250ZXh0LnJlc3RvcmUoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGdyYWRpZW50KGNvbnRleHQ6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHAxOiBQYXJ0aWNsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHAyOiBQYXJ0aWNsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pZENvbG9yOiBzdHJpbmcpOiBDYW52YXNHcmFkaWVudCB8IHVuZGVmaW5lZCB7XG4gICAgICAgIGNvbnN0IGdyYWRTdG9wID0gTWF0aC5mbG9vcihwMi5yYWRpdXMgLyBwMS5yYWRpdXMpO1xuXG4gICAgICAgIGlmICghcDEuY29sb3IgfHwgIXAyLmNvbG9yKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzb3VyY2VQb3MgPSBwMS5wb3NpdGlvbjtcbiAgICAgICAgY29uc3QgZGVzdFBvcyA9IHAyLnBvc2l0aW9uO1xuICAgICAgICBjb25zdCBncmFkID0gY29udGV4dC5jcmVhdGVMaW5lYXJHcmFkaWVudChzb3VyY2VQb3MueCwgc291cmNlUG9zLnksIGRlc3RQb3MueCwgZGVzdFBvcy55KTtcblxuICAgICAgICBncmFkLmFkZENvbG9yU3RvcCgwLCBVdGlscy5nZXRTdHlsZUZyb21Db2xvcihwMS5jb2xvcikpO1xuICAgICAgICBncmFkLmFkZENvbG9yU3RvcChncmFkU3RvcCA+IDEgPyAxIDogZ3JhZFN0b3AsIG1pZENvbG9yKTtcbiAgICAgICAgZ3JhZC5hZGRDb2xvclN0b3AoMSwgVXRpbHMuZ2V0U3R5bGVGcm9tQ29sb3IocDIuY29sb3IpKTtcblxuICAgICAgICByZXR1cm4gZ3JhZDtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGRyYXdHcmFiTGluZShjb250ZXh0OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IG51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWdpbjogSUNvb3JkaW5hdGVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogSUNvb3JkaW5hdGVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yTGluZTogSVJnYixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgY29udGV4dC5zYXZlKCk7XG4gICAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSBgcmdiYSgke2NvbG9yTGluZS5yfSwke2NvbG9yTGluZS5nfSwke2NvbG9yTGluZS5ifSwke29wYWNpdHl9KWA7XG4gICAgICAgIGNvbnRleHQubGluZVdpZHRoID0gd2lkdGg7XG4gICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICAgIGNvbnRleHQubW92ZVRvKGJlZ2luLngsIGJlZ2luLnkpO1xuICAgICAgICBjb250ZXh0LmxpbmVUbyhlbmQueCwgZW5kLnkpO1xuICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xuICAgICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICBjb250ZXh0LnJlc3RvcmUoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGRyYXdQYXJ0aWNsZShjb250ZXh0OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFydGljbGU6IFBhcnRpY2xlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yVmFsdWU6IHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kTWFzazogYm9vbGVhbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYWRpdXM6IG51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJva2U6IElTdHJva2UpOiB2b2lkIHtcbiAgICAgICAgY29udGV4dC5zYXZlKCk7XG5cbiAgICAgICAgLy8gVE9ETzogUGVyZm9ybWFuY2UgaXNzdWVzLCB0aGUgY2FudmFzIHNoYWRvdyBpcyByZWFsbHkgc2xvd1xuICAgICAgICAvLyBjb25zdCBzaGFkb3cgPSBvcHRpb25zLnBhcnRpY2xlcy5zaGFkb3c7XG5cbiAgICAgICAgLy8gaWYgKHNoYWRvdy5lbmFibGUpIHtcbiAgICAgICAgLy8gICAgIGN0eC5zaGFkb3dCbHVyID0gc2hhZG93LmJsdXI7XG4gICAgICAgIC8vICAgICBjdHguc2hhZG93Q29sb3IgPSBzaGFkb3cuY29sb3I7XG4gICAgICAgIC8vICAgICBjdHguc2hhZG93T2Zmc2V0WCA9IHNoYWRvdy5vZmZzZXQueDtcbiAgICAgICAgLy8gICAgIGN0eC5zaGFkb3dPZmZzZXRZID0gc2hhZG93Lm9mZnNldC55O1xuICAgICAgICAvLyB9IGVsc2Uge1xuICAgICAgICAvLyAgICAgZGVsZXRlIGN0eC5zaGFkb3dCbHVyO1xuICAgICAgICAvLyAgICAgZGVsZXRlIGN0eC5zaGFkb3dDb2xvcjtcbiAgICAgICAgLy8gICAgIGRlbGV0ZSBjdHguc2hhZG93T2Zmc2V0WDtcbiAgICAgICAgLy8gICAgIGRlbGV0ZSBjdHguc2hhZG93T2Zmc2V0WTtcbiAgICAgICAgLy8gfVxuXG4gICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gY29sb3JWYWx1ZTtcblxuICAgICAgICBjb25zdCBwb3MgPSB7XG4gICAgICAgICAgICB4OiBwYXJ0aWNsZS5wb3NpdGlvbi54LFxuICAgICAgICAgICAgeTogcGFydGljbGUucG9zaXRpb24ueSxcbiAgICAgICAgfTtcblxuICAgICAgICBjb250ZXh0LnRyYW5zbGF0ZShwb3MueCwgcG9zLnkpO1xuICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuXG4gICAgICAgIGlmIChwYXJ0aWNsZS5hbmdsZSAhPT0gMCkge1xuICAgICAgICAgICAgY29udGV4dC5yb3RhdGUocGFydGljbGUuYW5nbGUgKiBNYXRoLlBJIC8gMTgwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChiYWNrZ3JvdW5kTWFzaykge1xuICAgICAgICAgICAgY29udGV4dC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSAnZGVzdGluYXRpb24tb3V0JztcbiAgICAgICAgfVxuXG4gICAgICAgIFNoYXBlVXRpbHMuZHJhd1NoYXBlKGNvbnRleHQsIHBhcnRpY2xlLCByYWRpdXMsIHN0cm9rZSk7XG5cbiAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcblxuICAgICAgICBpZiAoc3Ryb2tlLndpZHRoID4gMCkge1xuICAgICAgICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9IHN0cm9rZS5jb2xvcjtcbiAgICAgICAgICAgIGNvbnRleHQubGluZVdpZHRoID0gc3Ryb2tlLndpZHRoO1xuICAgICAgICAgICAgY29udGV4dC5zdHJva2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQuZmlsbCgpO1xuICAgICAgICBjb250ZXh0LnJlc3RvcmUoKTtcbiAgICB9XG59XG4iXX0=