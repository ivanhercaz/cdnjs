import{Color}from"./Color";import{LineLinked}from"./LineLinked";import{Move}from"./Move";import{ParticlesNumber}from"./ParticlesNumber";import{Opacity}from"./Opacity";import{Shape}from"./Shape/Shape";import{ParticlesSize}from"./ParticlesSize";import{Rotate}from"./Rotate";import{Shadow}from"./Shadow";import{Stroke}from"./Stroke";export class Particles{constructor(){this.color=new Color,this.lineLinked=new LineLinked,this.move=new Move,this.number=new ParticlesNumber,this.opacity=new Opacity,this.rotate=new Rotate,this.shape=new Shape,this.size=new ParticlesSize,this.shadow=new Shadow,this.stroke=new Stroke}get line_linked(){return this.lineLinked}set line_linked(o){this.lineLinked=o}load(o){var e,i,t;if(void 0!==o){void 0!==o.color&&(o.color instanceof Array?this.color=o.color.map(o=>{const e=new Color;return e.load(o),e}):(this.color instanceof Array&&(this.color=new Color),this.color.load(o.color)));const r=null!==(e=o.lineLinked)&&void 0!==e?e:o.line_linked;void 0!==r&&this.lineLinked.load(r),this.move.load(o.move),this.number.load(o.number),this.opacity.load(o.opacity),this.rotate.load(o.rotate),this.shape.load(o.shape),this.size.load(o.size),this.shadow.load(o.shadow);const s=null!==(i=o.stroke)&&void 0!==i?i:null===(t=o.shape)||void 0===t?void 0:t.stroke;void 0!==s&&(s instanceof Array?this.stroke=s.map(o=>{const e=new Stroke;return e.load(o),e}):(this.stroke instanceof Array&&(this.stroke=new Stroke),this.stroke.load(s)))}}};