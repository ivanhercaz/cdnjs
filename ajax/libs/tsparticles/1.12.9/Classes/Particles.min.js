import{Particle}from"./Particle";import{PolygonMaskType}from"../Enums/PolygonMaskType";import{PolygonMaskInlineArrangement}from"../Enums/PolygonMaskInlineArrangement";export class Particles{constructor(t){this.container=t,this.array=[],this.interactionsEnabled=!1}get count(){return this.array.length}init(){const t=this.container,n=t.options;if(!n.polygon.enable||n.polygon.type!==PolygonMaskType.inline||n.polygon.inline.arrangement!==PolygonMaskInlineArrangement.onePerPoint&&n.polygon.inline.arrangement!==PolygonMaskInlineArrangement.perPoint)for(let e=this.array.length;e<n.particles.number.value;e++)this.addParticle(new Particle(t));else t.polygon.drawPointsOnPolygonPath();this.interactionsEnabled=n.particles.lineLinked.enable||n.particles.move.attract.enable||n.particles.move.collisions}redraw(){this.clear(),this.init(),this.draw(0)}removeAt(t,n){t>=0&&t<=this.count&&this.array.splice(t,null!=n?n:1)}remove(t){this.removeAt(this.array.indexOf(t))}update(t){for(let n=0;n<this.array.length;n++){const e=this.array[n];if(e.update(n,t),this.interactionsEnabled)for(let t=n+1;t<this.array.length;t++){const n=this.array[t];e.interact(n)}}}draw(t){const n=this.container,e=n.options;n.canvas.clear(),this.update(t),e.polygon.enable&&e.polygon.draw.enable&&n.polygon.drawPolygon();for(const t of this.array)t.draw()}clear(){this.array=[]}push(t,n){var e;const i=this.container,a=i.options;let r;this.pushing=!0,a.particles.number.limit>0&&this.array.length+t>a.particles.number.limit&&this.removeQuantity(this.array.length+t-a.particles.number.limit),n&&(r=null!==(e=n.position)&&void 0!==e?e:{x:0,y:0});for(let n=0;n<t;n++)this.addParticle(new Particle(i,r));a.particles.move.enable||this.container.play(),this.pushing=!1}addParticle(t){this.array.push(t)}removeQuantity(t){const n=this.container.options;this.removeAt(0,t),n.particles.move.enable||this.container.play()}};