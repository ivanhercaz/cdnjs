"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Drawer = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _ShapeType = require("../../Enums/ShapeType");

/**
 * Particle draw manager
 */
var Drawer = /*#__PURE__*/function () {
  function Drawer(container, particle, bubbler) {
    (0, _classCallCheck2["default"])(this, Drawer);
    this.particle = void 0;
    this.container = void 0;
    this.bubbler = void 0;
    this.text = void 0;
    this.container = container;
    this.particle = particle;
    this.bubbler = bubbler;
    var options = this.container.options;

    if (this.particle.shape === _ShapeType.ShapeType["char"] || particle.shape === _ShapeType.ShapeType.character) {
      var value = options.particles.shape.character.value;

      if (typeof value === "string") {
        this.text = value;
      } else {
        this.text = value[Math.floor(Math.random() * value.length)];
      }
    }
  }

  (0, _createClass2["default"])(Drawer, [{
    key: "draw",
    value: function draw() {
      var container = this.container;
      var options = container.options;
      var particle = this.particle;
      var radius;
      var opacity;
      var colorValue;

      if (this.bubbler.radius !== undefined) {
        radius = this.bubbler.radius;
      } else {
        radius = particle.radius;
      }

      if (this.bubbler.opacity !== undefined) {
        opacity = this.bubbler.opacity;
      } else {
        opacity = particle.opacity.value;
      }

      if (particle.color) {
        colorValue = "rgba(".concat(particle.color.r, ", ").concat(particle.color.g, ", ").concat(particle.color.b, ", ").concat(opacity, ")");
      }

      if (!container.canvas.context || !colorValue) {
        return;
      }

      var ctx = container.canvas.context; // TODO: Performance issues, the canvas shadow is really slow
      // const shadow = options.particles.shadow;
      // if (shadow.enable) {
      //     ctx.shadowBlur = shadow.blur;
      //     ctx.shadowColor = shadow.color;
      //     ctx.shadowOffsetX = shadow.offset.x;
      //     ctx.shadowOffsetY = shadow.offset.y;
      // } else {
      //     delete ctx.shadowBlur;
      //     delete ctx.shadowColor;
      //     delete ctx.shadowOffsetX;
      //     delete ctx.shadowOffsetY;
      // }

      ctx.fillStyle = colorValue;
      ctx.beginPath();
      this.drawShape(radius);
      ctx.closePath();

      if (options.particles.shape.stroke.width > 0) {
        ctx.strokeStyle = options.particles.shape.stroke.color;
        ctx.lineWidth = options.particles.shape.stroke.width;
        ctx.stroke();
      }

      ctx.fill();
    }
  }, {
    key: "drawShape",
    value: function drawShape(radius) {
      var container = this.container;
      var options = container.options;
      var particle = this.particle;
      var ctx = container.canvas.context;

      if (!ctx) {
        return;
      }

      var pos = {
        x: particle.position.x + particle.offset.x,
        y: particle.position.y + particle.offset.y
      };

      switch (particle.shape) {
        case _ShapeType.ShapeType.line:
          ctx.moveTo(particle.position.x, particle.position.y);
          ctx.lineTo(particle.position.x, particle.position.y + radius);
          ctx.strokeStyle = options.particles.shape.stroke.color;
          ctx.lineWidth = options.particles.shape.stroke.width;
          ctx.stroke();
          break;

        case _ShapeType.ShapeType.circle:
          ctx.arc(pos.x, pos.y, radius, 0, Math.PI * 2, false);
          break;

        case _ShapeType.ShapeType.edge:
        case _ShapeType.ShapeType.square:
          ctx.rect(particle.position.x - radius, particle.position.y - radius, radius * 2, radius * 2);
          break;

        case _ShapeType.ShapeType.triangle:
          {
            var start = {
              x: particle.position.x - radius,
              y: particle.position.y + radius / 1.66
            };
            var side = {
              count: {
                denominator: 2,
                numerator: 3
              },
              length: radius * 2
            };
            Drawer.subDrawShape(ctx, start, side);
          }
          break;

        case _ShapeType.ShapeType.polygon:
          {
            var _start = {
              x: particle.position.x - radius / (options.particles.shape.polygon.sides / 3.5),
              y: particle.position.y - radius / (2.66 / 3.5)
            };
            var _side = {
              count: {
                denominator: 1,
                numerator: options.particles.shape.polygon.sides
              },
              length: radius * 2.66 / (options.particles.shape.polygon.sides / 3)
            };
            Drawer.subDrawShape(ctx, _start, _side);
          }
          break;

        case _ShapeType.ShapeType.star:
          {
            var _start2 = {
              x: particle.position.x - radius * 2 / (options.particles.shape.polygon.sides / 4),
              y: particle.position.y - radius / (2 * 2.66 / 3.5)
            };
            var _side2 = {
              count: {
                denominator: 2,
                numerator: options.particles.shape.polygon.sides
              },
              length: radius * 2 * 2.66 / (options.particles.shape.polygon.sides / 3)
            };
            Drawer.subDrawShape(ctx, _start2, _side2);
          }
          break;

        case _ShapeType.ShapeType.heart:
          {
            var x = particle.position.x - radius / 2;
            var y = particle.position.y - radius / 2;
            ctx.moveTo(x, y + radius / 4);
            ctx.quadraticCurveTo(x, y, x + radius / 4, y);
            ctx.quadraticCurveTo(x + radius / 2, y, x + radius / 2, y + radius / 4);
            ctx.quadraticCurveTo(x + radius / 2, y, x + radius * 3 / 4, y);
            ctx.quadraticCurveTo(x + radius, y, x + radius, y + radius / 4);
            ctx.quadraticCurveTo(x + radius, y + radius / 2, x + radius * 3 / 4, y + radius * 3 / 4);
            ctx.lineTo(x + radius / 2, y + radius);
            ctx.lineTo(x + radius / 4, y + radius * 3 / 4);
            ctx.quadraticCurveTo(x, y + radius / 2, x, y + radius / 4);
          }
          break;

        case _ShapeType.ShapeType["char"]:
        case _ShapeType.ShapeType.character:
          {
            var style = options.particles.shape.character.style;
            var weight = options.particles.shape.character.weight;
            var size = Math.round(radius) * 2;
            var font = options.particles.shape.character.font;
            var text = this.text;
            ctx.font = "".concat(style, " ").concat(weight, " ").concat(size, "px ").concat(font);

            if (text) {
              var _x = particle.position.x - radius / 2;

              var _y = particle.position.y + radius / 2;

              if (options.particles.shape.character.fill) {
                ctx.fillText(text, _x, _y);
              } else {
                ctx.strokeText(text, _x, _y);
              }
            }
          }
          break;

        case _ShapeType.ShapeType.image:
          if (particle.image && particle.image.data.obj) {
            this.subDraw(ctx, particle.image.data.obj, radius);
          }

          break;
      }
    }
  }, {
    key: "subDraw",
    value: function subDraw(ctx, imgObj, radius) {
      var particle = this.particle;
      var ratio = 1;

      if (particle.image) {
        ratio = particle.image.ratio;
      }

      var pos = {
        x: particle.position.x - radius,
        y: particle.position.y - radius
      };
      ctx.drawImage(imgObj, pos.x, pos.y, radius * 2, radius * 2 / ratio);
    }
  }], [{
    key: "subDrawShape",
    value: function subDrawShape(ctx, start, side) {
      // By Programming Thomas - https://programmingthomas.wordpress.com/2013/04/03/n-sided-shapes/
      var sideCount = side.count.numerator * side.count.denominator;
      var decimalSides = side.count.numerator / side.count.denominator;
      var interiorAngleDegrees = 180 * (decimalSides - 2) / decimalSides;
      var interiorAngle = Math.PI - Math.PI * interiorAngleDegrees / 180; // convert to radians

      ctx.save();
      ctx.beginPath();
      ctx.translate(start.x, start.y);
      ctx.moveTo(0, 0);

      for (var i = 0; i < sideCount; i++) {
        ctx.lineTo(side.length, 0);
        ctx.translate(side.length, 0);
        ctx.rotate(interiorAngle);
      } // c.stroke();


      ctx.fill();
      ctx.restore();
    }
  }]);
  return Drawer;
}();

exports.Drawer = Drawer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9DbGFzc2VzL1BhcnRpY2xlL0RyYXdlci50cyJdLCJuYW1lcyI6WyJEcmF3ZXIiLCJjb250YWluZXIiLCJwYXJ0aWNsZSIsImJ1YmJsZXIiLCJ0ZXh0Iiwib3B0aW9ucyIsInNoYXBlIiwiU2hhcGVUeXBlIiwiY2hhcmFjdGVyIiwidmFsdWUiLCJwYXJ0aWNsZXMiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJsZW5ndGgiLCJyYWRpdXMiLCJvcGFjaXR5IiwiY29sb3JWYWx1ZSIsInVuZGVmaW5lZCIsImNvbG9yIiwiciIsImciLCJiIiwiY2FudmFzIiwiY29udGV4dCIsImN0eCIsImZpbGxTdHlsZSIsImJlZ2luUGF0aCIsImRyYXdTaGFwZSIsImNsb3NlUGF0aCIsInN0cm9rZSIsIndpZHRoIiwic3Ryb2tlU3R5bGUiLCJsaW5lV2lkdGgiLCJmaWxsIiwicG9zIiwieCIsInBvc2l0aW9uIiwib2Zmc2V0IiwieSIsImxpbmUiLCJtb3ZlVG8iLCJsaW5lVG8iLCJjaXJjbGUiLCJhcmMiLCJQSSIsImVkZ2UiLCJzcXVhcmUiLCJyZWN0IiwidHJpYW5nbGUiLCJzdGFydCIsInNpZGUiLCJjb3VudCIsImRlbm9taW5hdG9yIiwibnVtZXJhdG9yIiwic3ViRHJhd1NoYXBlIiwicG9seWdvbiIsInNpZGVzIiwic3RhciIsImhlYXJ0IiwicXVhZHJhdGljQ3VydmVUbyIsInN0eWxlIiwid2VpZ2h0Iiwic2l6ZSIsInJvdW5kIiwiZm9udCIsImZpbGxUZXh0Iiwic3Ryb2tlVGV4dCIsImltYWdlIiwiZGF0YSIsIm9iaiIsInN1YkRyYXciLCJpbWdPYmoiLCJyYXRpbyIsImRyYXdJbWFnZSIsInNpZGVDb3VudCIsImRlY2ltYWxTaWRlcyIsImludGVyaW9yQW5nbGVEZWdyZWVzIiwiaW50ZXJpb3JBbmdsZSIsInNhdmUiLCJ0cmFuc2xhdGUiLCJpIiwicm90YXRlIiwicmVzdG9yZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7QUFP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c291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7QnViYmxlcn0gZnJvbSBcIi4vQnViYmxlclwiO1xuaW1wb3J0IHtDb250YWluZXJ9IGZyb20gXCIuLi9Db250YWluZXJcIjtcbmltcG9ydCB7SVNpZGV9IGZyb20gXCIuLi8uLi9JbnRlcmZhY2VzL09wdGlvbnMvU2hhcGUvSVNpZGVcIjtcbmltcG9ydCB7SUNvb3JkaW5hdGVzfSBmcm9tIFwiLi4vLi4vSW50ZXJmYWNlcy9JQ29vcmRpbmF0ZXNcIjtcbmltcG9ydCB7UGFydGljbGV9IGZyb20gXCIuLi9QYXJ0aWNsZVwiO1xuaW1wb3J0IHtTaGFwZVR5cGV9IGZyb20gXCIuLi8uLi9FbnVtcy9TaGFwZVR5cGVcIjtcblxuLyoqXG4gKiBQYXJ0aWNsZSBkcmF3IG1hbmFnZXJcbiAqL1xuZXhwb3J0IGNsYXNzIERyYXdlciB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBwYXJ0aWNsZTogUGFydGljbGU7XG4gICAgcHJpdmF0ZSByZWFkb25seSBjb250YWluZXI6IENvbnRhaW5lcjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGJ1YmJsZXI6IEJ1YmJsZXI7XG4gICAgcHJpdmF0ZSByZWFkb25seSB0ZXh0Pzogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoY29udGFpbmVyOiBDb250YWluZXIsIHBhcnRpY2xlOiBQYXJ0aWNsZSwgYnViYmxlcjogQnViYmxlcikge1xuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICAgICAgdGhpcy5wYXJ0aWNsZSA9IHBhcnRpY2xlO1xuICAgICAgICB0aGlzLmJ1YmJsZXIgPSBidWJibGVyO1xuXG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLmNvbnRhaW5lci5vcHRpb25zO1xuXG4gICAgICAgIGlmICh0aGlzLnBhcnRpY2xlLnNoYXBlID09PSBTaGFwZVR5cGUuY2hhciB8fCBwYXJ0aWNsZS5zaGFwZSA9PT0gU2hhcGVUeXBlLmNoYXJhY3Rlcikge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBvcHRpb25zLnBhcnRpY2xlcy5zaGFwZS5jaGFyYWN0ZXIudmFsdWU7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRleHQgPSB2YWx1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy50ZXh0ID0gdmFsdWVbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdmFsdWUubGVuZ3RoKV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIHN1YkRyYXdTaGFwZShjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgc3RhcnQ6IElDb29yZGluYXRlcywgc2lkZTogSVNpZGUpOiB2b2lkIHtcbiAgICAgICAgLy8gQnkgUHJvZ3JhbW1pbmcgVGhvbWFzIC0gaHR0cHM6Ly9wcm9ncmFtbWluZ3Rob21hcy53b3JkcHJlc3MuY29tLzIwMTMvMDQvMDMvbi1zaWRlZC1zaGFwZXMvXG4gICAgICAgIGNvbnN0IHNpZGVDb3VudCA9IHNpZGUuY291bnQubnVtZXJhdG9yICogc2lkZS5jb3VudC5kZW5vbWluYXRvcjtcbiAgICAgICAgY29uc3QgZGVjaW1hbFNpZGVzID0gc2lkZS5jb3VudC5udW1lcmF0b3IgLyBzaWRlLmNvdW50LmRlbm9taW5hdG9yO1xuICAgICAgICBjb25zdCBpbnRlcmlvckFuZ2xlRGVncmVlcyA9ICgxODAgKiAoZGVjaW1hbFNpZGVzIC0gMikpIC8gZGVjaW1hbFNpZGVzO1xuICAgICAgICBjb25zdCBpbnRlcmlvckFuZ2xlID0gTWF0aC5QSSAtIE1hdGguUEkgKiBpbnRlcmlvckFuZ2xlRGVncmVlcyAvIDE4MDsgLy8gY29udmVydCB0byByYWRpYW5zXG5cbiAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBjdHgudHJhbnNsYXRlKHN0YXJ0LngsIHN0YXJ0LnkpO1xuICAgICAgICBjdHgubW92ZVRvKDAsIDApO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2lkZUNvdW50OyBpKyspIHtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oc2lkZS5sZW5ndGgsIDApO1xuICAgICAgICAgICAgY3R4LnRyYW5zbGF0ZShzaWRlLmxlbmd0aCwgMCk7XG4gICAgICAgICAgICBjdHgucm90YXRlKGludGVyaW9yQW5nbGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYy5zdHJva2UoKTtcbiAgICAgICAgY3R4LmZpbGwoKTtcbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZHJhdygpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5jb250YWluZXI7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSBjb250YWluZXIub3B0aW9ucztcbiAgICAgICAgY29uc3QgcGFydGljbGUgPSB0aGlzLnBhcnRpY2xlO1xuXG4gICAgICAgIGxldCByYWRpdXM6IG51bWJlcjtcbiAgICAgICAgbGV0IG9wYWNpdHk7XG4gICAgICAgIGxldCBjb2xvclZhbHVlO1xuXG4gICAgICAgIGlmICh0aGlzLmJ1YmJsZXIucmFkaXVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJhZGl1cyA9IHRoaXMuYnViYmxlci5yYWRpdXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByYWRpdXMgPSBwYXJ0aWNsZS5yYWRpdXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5idWJibGVyLm9wYWNpdHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgb3BhY2l0eSA9IHRoaXMuYnViYmxlci5vcGFjaXR5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3BhY2l0eSA9IHBhcnRpY2xlLm9wYWNpdHkudmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFydGljbGUuY29sb3IpIHtcbiAgICAgICAgICAgIGNvbG9yVmFsdWUgPSBgcmdiYSgke3BhcnRpY2xlLmNvbG9yLnJ9LCAke3BhcnRpY2xlLmNvbG9yLmd9LCAke3BhcnRpY2xlLmNvbG9yLmJ9LCAke29wYWNpdHl9KWA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWNvbnRhaW5lci5jYW52YXMuY29udGV4dCB8fCAhY29sb3JWYWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY3R4ID0gY29udGFpbmVyLmNhbnZhcy5jb250ZXh0O1xuXG4gICAgICAgIC8vIFRPRE86IFBlcmZvcm1hbmNlIGlzc3VlcywgdGhlIGNhbnZhcyBzaGFkb3cgaXMgcmVhbGx5IHNsb3dcbiAgICAgICAgLy8gY29uc3Qgc2hhZG93ID0gb3B0aW9ucy5wYXJ0aWNsZXMuc2hhZG93O1xuXG4gICAgICAgIC8vIGlmIChzaGFkb3cuZW5hYmxlKSB7XG4gICAgICAgIC8vICAgICBjdHguc2hhZG93Qmx1ciA9IHNoYWRvdy5ibHVyO1xuICAgICAgICAvLyAgICAgY3R4LnNoYWRvd0NvbG9yID0gc2hhZG93LmNvbG9yO1xuICAgICAgICAvLyAgICAgY3R4LnNoYWRvd09mZnNldFggPSBzaGFkb3cub2Zmc2V0Lng7XG4gICAgICAgIC8vICAgICBjdHguc2hhZG93T2Zmc2V0WSA9IHNoYWRvdy5vZmZzZXQueTtcbiAgICAgICAgLy8gfSBlbHNlIHtcbiAgICAgICAgLy8gICAgIGRlbGV0ZSBjdHguc2hhZG93Qmx1cjtcbiAgICAgICAgLy8gICAgIGRlbGV0ZSBjdHguc2hhZG93Q29sb3I7XG4gICAgICAgIC8vICAgICBkZWxldGUgY3R4LnNoYWRvd09mZnNldFg7XG4gICAgICAgIC8vICAgICBkZWxldGUgY3R4LnNoYWRvd09mZnNldFk7XG4gICAgICAgIC8vIH1cblxuICAgICAgICBjdHguZmlsbFN0eWxlID0gY29sb3JWYWx1ZTtcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuXG4gICAgICAgIHRoaXMuZHJhd1NoYXBlKHJhZGl1cyk7XG5cbiAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuXG4gICAgICAgIGlmIChvcHRpb25zLnBhcnRpY2xlcy5zaGFwZS5zdHJva2Uud2lkdGggPiAwKSB7XG4gICAgICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBvcHRpb25zLnBhcnRpY2xlcy5zaGFwZS5zdHJva2UuY29sb3I7XG4gICAgICAgICAgICBjdHgubGluZVdpZHRoID0gb3B0aW9ucy5wYXJ0aWNsZXMuc2hhcGUuc3Ryb2tlLndpZHRoO1xuICAgICAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgY3R4LmZpbGwoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGRyYXdTaGFwZShyYWRpdXM6IG51bWJlcik6IHZvaWQge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLmNvbnRhaW5lcjtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IGNvbnRhaW5lci5vcHRpb25zO1xuICAgICAgICBjb25zdCBwYXJ0aWNsZSA9IHRoaXMucGFydGljbGU7XG4gICAgICAgIGNvbnN0IGN0eCA9IGNvbnRhaW5lci5jYW52YXMuY29udGV4dDtcblxuICAgICAgICBpZiAoIWN0eCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcG9zID0ge1xuICAgICAgICAgICAgeDogcGFydGljbGUucG9zaXRpb24ueCArIHBhcnRpY2xlLm9mZnNldC54LFxuICAgICAgICAgICAgeTogcGFydGljbGUucG9zaXRpb24ueSArIHBhcnRpY2xlLm9mZnNldC55LFxuICAgICAgICB9O1xuXG4gICAgICAgIHN3aXRjaCAocGFydGljbGUuc2hhcGUpIHtcbiAgICAgICAgICAgIGNhc2UgU2hhcGVUeXBlLmxpbmU6XG4gICAgICAgICAgICAgICAgY3R4Lm1vdmVUbyhwYXJ0aWNsZS5wb3NpdGlvbi54LCBwYXJ0aWNsZS5wb3NpdGlvbi55KTtcbiAgICAgICAgICAgICAgICBjdHgubGluZVRvKHBhcnRpY2xlLnBvc2l0aW9uLngsIHBhcnRpY2xlLnBvc2l0aW9uLnkgKyByYWRpdXMpO1xuICAgICAgICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IG9wdGlvbnMucGFydGljbGVzLnNoYXBlLnN0cm9rZS5jb2xvcjtcbiAgICAgICAgICAgICAgICBjdHgubGluZVdpZHRoID0gb3B0aW9ucy5wYXJ0aWNsZXMuc2hhcGUuc3Ryb2tlLndpZHRoO1xuICAgICAgICAgICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBTaGFwZVR5cGUuY2lyY2xlOlxuICAgICAgICAgICAgICAgIGN0eC5hcmMocG9zLngsIHBvcy55LCByYWRpdXMsIDAsIE1hdGguUEkgKiAyLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFNoYXBlVHlwZS5lZGdlOlxuICAgICAgICAgICAgY2FzZSBTaGFwZVR5cGUuc3F1YXJlOlxuICAgICAgICAgICAgICAgIGN0eC5yZWN0KHBhcnRpY2xlLnBvc2l0aW9uLnggLSByYWRpdXMsIHBhcnRpY2xlLnBvc2l0aW9uLnkgLSByYWRpdXMsIHJhZGl1cyAqIDIsIHJhZGl1cyAqIDIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTaGFwZVR5cGUudHJpYW5nbGU6IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGFydDogSUNvb3JkaW5hdGVzID0ge1xuICAgICAgICAgICAgICAgICAgICB4OiBwYXJ0aWNsZS5wb3NpdGlvbi54IC0gcmFkaXVzLFxuICAgICAgICAgICAgICAgICAgICB5OiBwYXJ0aWNsZS5wb3NpdGlvbi55ICsgcmFkaXVzIC8gMS42NixcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgY29uc3Qgc2lkZTogSVNpZGUgPSB7XG4gICAgICAgICAgICAgICAgICAgIGNvdW50OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZW5vbWluYXRvcjogMixcbiAgICAgICAgICAgICAgICAgICAgICAgIG51bWVyYXRvcjogMyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoOiByYWRpdXMgKiAyLFxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBEcmF3ZXIuc3ViRHJhd1NoYXBlKGN0eCwgc3RhcnQsIHNpZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTaGFwZVR5cGUucG9seWdvbjoge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0OiBJQ29vcmRpbmF0ZXMgPSB7XG4gICAgICAgICAgICAgICAgICAgIHg6IHBhcnRpY2xlLnBvc2l0aW9uLnggLSByYWRpdXMgLyAob3B0aW9ucy5wYXJ0aWNsZXMuc2hhcGUucG9seWdvbi5zaWRlcyAvIDMuNSksXG4gICAgICAgICAgICAgICAgICAgIHk6IHBhcnRpY2xlLnBvc2l0aW9uLnkgLSByYWRpdXMgLyAoMi42NiAvIDMuNSksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjb25zdCBzaWRlOiBJU2lkZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgY291bnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbm9taW5hdG9yOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgbnVtZXJhdG9yOiBvcHRpb25zLnBhcnRpY2xlcy5zaGFwZS5wb2x5Z29uLnNpZGVzLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBsZW5ndGg6IHJhZGl1cyAqIDIuNjYgLyAob3B0aW9ucy5wYXJ0aWNsZXMuc2hhcGUucG9seWdvbi5zaWRlcyAvIDMpLFxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBEcmF3ZXIuc3ViRHJhd1NoYXBlKGN0eCwgc3RhcnQsIHNpZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTaGFwZVR5cGUuc3Rhcjoge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0OiBJQ29vcmRpbmF0ZXMgPSB7XG4gICAgICAgICAgICAgICAgICAgIHg6IHBhcnRpY2xlLnBvc2l0aW9uLnggLSByYWRpdXMgKiAyIC8gKG9wdGlvbnMucGFydGljbGVzLnNoYXBlLnBvbHlnb24uc2lkZXMgLyA0KSxcbiAgICAgICAgICAgICAgICAgICAgeTogcGFydGljbGUucG9zaXRpb24ueSAtIHJhZGl1cyAvICgyICogMi42NiAvIDMuNSksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjb25zdCBzaWRlOiBJU2lkZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgY291bnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbm9taW5hdG9yOiAyLFxuICAgICAgICAgICAgICAgICAgICAgICAgbnVtZXJhdG9yOiBvcHRpb25zLnBhcnRpY2xlcy5zaGFwZS5wb2x5Z29uLnNpZGVzLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBsZW5ndGg6IHJhZGl1cyAqIDIgKiAyLjY2IC8gKG9wdGlvbnMucGFydGljbGVzLnNoYXBlLnBvbHlnb24uc2lkZXMgLyAzKSxcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgRHJhd2VyLnN1YkRyYXdTaGFwZShjdHgsIHN0YXJ0LCBzaWRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBTaGFwZVR5cGUuaGVhcnQ6IHtcbiAgICAgICAgICAgICAgICBjb25zdCB4ID0gcGFydGljbGUucG9zaXRpb24ueCAtIHJhZGl1cyAvIDI7XG4gICAgICAgICAgICAgICAgY29uc3QgeSA9IHBhcnRpY2xlLnBvc2l0aW9uLnkgLSByYWRpdXMgLyAyO1xuXG4gICAgICAgICAgICAgICAgY3R4Lm1vdmVUbyh4LCB5ICsgcmFkaXVzIC8gNCk7XG4gICAgICAgICAgICAgICAgY3R4LnF1YWRyYXRpY0N1cnZlVG8oeCwgeSwgeCArIHJhZGl1cyAvIDQsIHkpO1xuICAgICAgICAgICAgICAgIGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKHggKyByYWRpdXMgLyAyLCB5LCB4ICsgcmFkaXVzIC8gMiwgeSArIHJhZGl1cyAvIDQpO1xuICAgICAgICAgICAgICAgIGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKHggKyByYWRpdXMgLyAyLCB5LCB4ICsgcmFkaXVzICogMyAvIDQsIHkpO1xuICAgICAgICAgICAgICAgIGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKHggKyByYWRpdXMsIHksIHggKyByYWRpdXMsIHkgKyByYWRpdXMgLyA0KTtcbiAgICAgICAgICAgICAgICBjdHgucXVhZHJhdGljQ3VydmVUbyh4ICsgcmFkaXVzLCB5ICsgcmFkaXVzIC8gMiwgeCArIHJhZGl1cyAqIDMgLyA0LCB5ICsgcmFkaXVzICogMyAvIDQpO1xuICAgICAgICAgICAgICAgIGN0eC5saW5lVG8oeCArIHJhZGl1cyAvIDIsIHkgKyByYWRpdXMpO1xuICAgICAgICAgICAgICAgIGN0eC5saW5lVG8oeCArIHJhZGl1cyAvIDQsIHkgKyByYWRpdXMgKiAzIC8gNCk7XG4gICAgICAgICAgICAgICAgY3R4LnF1YWRyYXRpY0N1cnZlVG8oeCwgeSArIHJhZGl1cyAvIDIsIHgsIHkgKyByYWRpdXMgLyA0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBTaGFwZVR5cGUuY2hhcjpcbiAgICAgICAgICAgIGNhc2UgU2hhcGVUeXBlLmNoYXJhY3Rlcjoge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0eWxlID0gb3B0aW9ucy5wYXJ0aWNsZXMuc2hhcGUuY2hhcmFjdGVyLnN0eWxlO1xuICAgICAgICAgICAgICAgIGNvbnN0IHdlaWdodCA9IG9wdGlvbnMucGFydGljbGVzLnNoYXBlLmNoYXJhY3Rlci53ZWlnaHQ7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2l6ZSA9IE1hdGgucm91bmQocmFkaXVzKSAqIDI7XG4gICAgICAgICAgICAgICAgY29uc3QgZm9udCA9IG9wdGlvbnMucGFydGljbGVzLnNoYXBlLmNoYXJhY3Rlci5mb250O1xuICAgICAgICAgICAgICAgIGNvbnN0IHRleHQgPSB0aGlzLnRleHQ7XG5cbiAgICAgICAgICAgICAgICBjdHguZm9udCA9IGAke3N0eWxlfSAke3dlaWdodH0gJHtzaXplfXB4ICR7Zm9udH1gO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeCA9IHBhcnRpY2xlLnBvc2l0aW9uLnggLSByYWRpdXMgLyAyO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB5ID0gcGFydGljbGUucG9zaXRpb24ueSArIHJhZGl1cyAvIDI7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMucGFydGljbGVzLnNoYXBlLmNoYXJhY3Rlci5maWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHguZmlsbFRleHQodGV4dCwgeCwgeSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHguc3Ryb2tlVGV4dCh0ZXh0LCB4LCB5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBTaGFwZVR5cGUuaW1hZ2U6XG4gICAgICAgICAgICAgICAgaWYgKHBhcnRpY2xlLmltYWdlICYmIHBhcnRpY2xlLmltYWdlLmRhdGEub2JqKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3ViRHJhdyhjdHgsIHBhcnRpY2xlLmltYWdlLmRhdGEub2JqLCByYWRpdXMpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdWJEcmF3KGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCBpbWdPYmo6IEhUTUxJbWFnZUVsZW1lbnQsIHJhZGl1czogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHBhcnRpY2xlID0gdGhpcy5wYXJ0aWNsZTtcblxuICAgICAgICBsZXQgcmF0aW8gPSAxO1xuXG4gICAgICAgIGlmIChwYXJ0aWNsZS5pbWFnZSkge1xuICAgICAgICAgICAgcmF0aW8gPSBwYXJ0aWNsZS5pbWFnZS5yYXRpbztcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHBvcyA9IHtcbiAgICAgICAgICAgIHg6IHBhcnRpY2xlLnBvc2l0aW9uLnggLSByYWRpdXMsXG4gICAgICAgICAgICB5OiBwYXJ0aWNsZS5wb3NpdGlvbi55IC0gcmFkaXVzLFxuICAgICAgICB9O1xuXG4gICAgICAgIGN0eC5kcmF3SW1hZ2UoaW1nT2JqLCBwb3MueCwgcG9zLnksIHJhZGl1cyAqIDIsIHJhZGl1cyAqIDIgLyByYXRpbyk7XG4gICAgfVxufVxuIl19