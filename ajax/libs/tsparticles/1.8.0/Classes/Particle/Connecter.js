"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Connecter = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _Utils = require("../Utils/Utils");

/**
 * Particle connection manager
 */
var Connecter = /*#__PURE__*/function () {
  function Connecter(container, particle) {
    (0, _classCallCheck2["default"])(this, Connecter);
    this.particle = void 0;
    this.container = void 0;
    this.container = container;
    this.particle = particle;
  }
  /**
   * Connecting particles on hover interactivity
   */


  (0, _createClass2["default"])(Connecter, [{
    key: "connect",
    value: function connect(destParticle) {
      var container = this.container;
      var options = container.options;
      var particle = this.particle;
      var ctx = container.canvas.context;

      if (!ctx) {
        return;
      }

      if (options.interactivity.events.onHover.enable && container.interactivity.status == 'mousemove') {
        var xDiff = Math.abs(particle.position.x - destParticle.position.x);
        var yDiff = Math.abs(particle.position.y - destParticle.position.y);
        var mousePos = container.interactivity.mouse.position || {
          x: 0,
          y: 0
        };
        var xCoreDiff = Math.abs(particle.position.x - mousePos.x);
        var yCoreDiff = Math.abs(particle.position.y - mousePos.y);
        var distMax = Math.abs(container.retina.connectModeDistance);
        var connectAreaRadius = Math.abs(container.retina.connectModeRadius);

        if (xDiff < distMax && yDiff < distMax && xCoreDiff < connectAreaRadius && yCoreDiff < connectAreaRadius) {
          var lineStyle = this.lineStyle(destParticle);

          if (!lineStyle) {
            return;
          }

          ctx.beginPath();
          ctx.strokeStyle = lineStyle;
          ctx.moveTo(particle.position.x, particle.position.y);
          ctx.lineTo(destParticle.position.x, destParticle.position.y);
          ctx.stroke();
          ctx.closePath();
        }
      }
    }
  }, {
    key: "lineStyle",
    value: function lineStyle(destParticle) {
      var particle = this.particle;

      if (particle.color && destParticle.color) {
        var sourceRgb = particle.color;
        var destRgb = destParticle.color;
        var rgb = {
          b: _Utils.Utils.mixComponents(sourceRgb.b, destRgb.b, particle.radius, destParticle.radius),
          g: _Utils.Utils.mixComponents(sourceRgb.g, destRgb.g, particle.radius, destParticle.radius),
          r: _Utils.Utils.mixComponents(sourceRgb.r, destRgb.r, particle.radius, destParticle.radius)
        };

        var midColor = _Utils.Utils.getStyleFromColor(rgb);

        return this.gradient(destParticle, midColor);
      }
    }
  }, {
    key: "gradient",
    value: function gradient(destParticle, midColor) {
      var container = this.container;
      var particle = this.particle;
      var gradStop = Math.floor(destParticle.radius / particle.radius);
      var ctx = container.canvas.context;

      if (!ctx || !particle.color || !destParticle.color) {
        return;
      }

      var sourcePos = particle.position;
      var destPos = destParticle.position;
      var grad = ctx.createLinearGradient(sourcePos.x, sourcePos.y, destPos.x, destPos.y);
      grad.addColorStop(0, _Utils.Utils.getStyleFromColor(particle.color));
      grad.addColorStop(gradStop > 1 ? 1 : gradStop, midColor);
      grad.addColorStop(1, _Utils.Utils.getStyleFromColor(destParticle.color));
      return grad;
    }
  }]);
  return Connecter;
}();

exports.Connecter = Connecter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9DbGFzc2VzL1BhcnRpY2xlL0Nvbm5lY3Rlci50cyJdLCJuYW1lcyI6WyJDb25uZWN0ZXIiLCJjb250YWluZXIiLCJwYXJ0aWNsZSIsImRlc3RQYXJ0aWNsZSIsIm9wdGlvbnMiLCJjdHgiLCJjYW52YXMiLCJjb250ZXh0IiwiaW50ZXJhY3Rpdml0eSIsImV2ZW50cyIsIm9uSG92ZXIiLCJlbmFibGUiLCJzdGF0dXMiLCJ4RGlmZiIsIk1hdGgiLCJhYnMiLCJwb3NpdGlvbiIsIngiLCJ5RGlmZiIsInkiLCJtb3VzZVBvcyIsIm1vdXNlIiwieENvcmVEaWZmIiwieUNvcmVEaWZmIiwiZGlzdE1heCIsInJldGluYSIsImNvbm5lY3RNb2RlRGlzdGFuY2UiLCJjb25uZWN0QXJlYVJhZGl1cyIsImNvbm5lY3RNb2RlUmFkaXVzIiwibGluZVN0eWxlIiwiYmVnaW5QYXRoIiwic3Ryb2tlU3R5bGUiLCJtb3ZlVG8iLCJsaW5lVG8iLCJzdHJva2UiLCJjbG9zZVBhdGgiLCJjb2xvciIsInNvdXJjZVJnYiIsImRlc3RSZ2IiLCJyZ2IiLCJiIiwiVXRpbHMiLCJtaXhDb21wb25lbnRzIiwicmFkaXVzIiwiZyIsInIiLCJtaWRDb2xvciIsImdldFN0eWxlRnJvbUNvbG9yIiwiZ3JhZGllbnQiLCJncmFkU3RvcCIsImZsb29yIiwic291cmNlUG9zIiwiZGVzdFBvcyIsImdyYWQiLCJjcmVhdGVMaW5lYXJHcmFkaWVudCIsImFkZENvbG9yU3RvcCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUVBOztBQUVBOzs7SUFHYUEsUztBQUlULHFCQUFZQyxTQUFaLEVBQWtDQyxRQUFsQyxFQUFzRDtBQUFBO0FBQUEsU0FIckNBLFFBR3FDO0FBQUEsU0FGckNELFNBRXFDO0FBQ2xELFNBQUtBLFNBQUwsR0FBaUJBLFNBQWpCO0FBQ0EsU0FBS0MsUUFBTCxHQUFnQkEsUUFBaEI7QUFDSDtBQUVEOzs7Ozs7OzRCQUdlQyxZLEVBQThCO0FBQ3pDLFVBQU1G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QVMsR0FBR2pELFFBQVEsQ0FBQ2MsUUFBM0I7QUFDQSxVQUFNb0MsT0FBTyxHQUFHakQsWUFBWSxDQUFDYSxRQUE3QjtBQUNBLFVBQU1xQyxJQUFJLEdBQUdoRCxHQUFHLENBQUNpRCxvQkFBSixDQUF5QkgsU0FBUyxDQUFDbEMsQ0FBbkMsRUFBc0NrQyxTQUFTLENBQUNoQyxDQUFoRCxFQUFtRGlDLE9BQU8sQ0FBQ25DLENBQTNELEVBQThEbUMsT0FBTyxDQUFDakMsQ0FBdEUsQ0FBYjtBQUVBa0MsTUFBQUEsSUFBSSxDQUFDRSxZQUFMLENBQWtCLENBQWxCLEVBQXFCZCxhQUFNTSxpQkFBTixDQUF3QjdDLFFBQVEsQ0FBQ2tDLEtBQWpDLENBQXJCO0FBQ0FpQixNQUFBQSxJQUFJLENBQUNFLFlBQUwsQ0FBa0JOLFFBQVEsR0FBRyxDQUFYLEdBQWUsQ0FBZixHQUFtQkEsUUFBckMsRUFBK0NILFFBQS9DO0FBQ0FPLE1BQUFBLElBQUksQ0FBQ0UsWUFBTCxDQUFrQixDQUFsQixFQUFxQmQsYUFBTU0saUJBQU4sQ0FBd0I1QyxZQUFZLENBQUNpQyxLQUFyQyxDQUFyQjtBQUVBLGFBQU9pQixJQUFQO0FBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1BhcnRpY2xlfSBmcm9tIFwiLi4vUGFydGljbGVcIjtcbmltcG9ydCB7Q29udGFpbmVyfSBmcm9tIFwiLi4vQ29udGFpbmVyXCI7XG5pbXBvcnQge1V0aWxzfSBmcm9tIFwiLi4vVXRpbHMvVXRpbHNcIjtcblxuLyoqXG4gKiBQYXJ0aWNsZSBjb25uZWN0aW9uIG1hbmFnZXJcbiAqL1xuZXhwb3J0IGNsYXNzIENvbm5lY3RlciB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBwYXJ0aWNsZTogUGFydGljbGU7XG4gICAgcHJpdmF0ZSByZWFkb25seSBjb250YWluZXI6IENvbnRhaW5lcjtcblxuICAgIGNvbnN0cnVjdG9yKGNvbnRhaW5lcjogQ29udGFpbmVyLCBwYXJ0aWNsZTogUGFydGljbGUpIHtcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgICAgIHRoaXMucGFydGljbGUgPSBwYXJ0aWNsZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb25uZWN0aW5nIHBhcnRpY2xlcyBvbiBob3ZlciBpbnRlcmFjdGl2aXR5XG4gICAgICovXG4gICAgcHVibGljIGNvbm5lY3QoZGVzdFBhcnRpY2xlOiBQYXJ0aWNsZSk6IHZvaWQge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLmNvbnRhaW5lcjtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IGNvbnRhaW5lci5vcHRpb25zO1xuICAgICAgICBjb25zdCBwYXJ0aWNsZSA9IHRoaXMucGFydGljbGU7XG4gICAgICAgIGNvbnN0IGN0eCA9IGNvbnRhaW5lci5jYW52YXMuY29udGV4dDtcblxuICAgICAgICBpZiAoIWN0eCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuaW50ZXJhY3Rpdml0eS5ldmVudHMub25Ib3Zlci5lbmFibGUgJiYgY29udGFpbmVyLmludGVyYWN0aXZpdHkuc3RhdHVzID09ICdtb3VzZW1vdmUnKSB7XG4gICAgICAgICAgICBjb25zdCB4RGlmZiA9IE1hdGguYWJzKHBhcnRpY2xlLnBvc2l0aW9uLnggLSBkZXN0UGFydGljbGUucG9zaXRpb24ueCk7XG4gICAgICAgICAgICBjb25zdCB5RGlmZiA9IE1hdGguYWJzKHBhcnRpY2xlLnBvc2l0aW9uLnkgLSBkZXN0UGFydGljbGUucG9zaXRpb24ueSk7XG4gICAgICAgICAgICBjb25zdCBtb3VzZVBvcyA9IGNvbnRhaW5lci5pbnRlcmFjdGl2aXR5Lm1vdXNlLnBvc2l0aW9uIHx8IHt4OiAwLCB5OiAwfTtcbiAgICAgICAgICAgIGNvbnN0IHhDb3JlRGlmZiA9IE1hdGguYWJzKHBhcnRpY2xlLnBvc2l0aW9uLnggLSBtb3VzZVBvcy54KTtcbiAgICAgICAgICAgIGNvbnN0IHlDb3JlRGlmZiA9IE1hdGguYWJzKHBhcnRpY2xlLnBvc2l0aW9uLnkgLSBtb3VzZVBvcy55KTtcbiAgICAgICAgICAgIGNvbnN0IGRpc3RNYXggPSBNYXRoLmFicyhjb250YWluZXIucmV0aW5hLmNvbm5lY3RNb2RlRGlzdGFuY2UpO1xuICAgICAgICAgICAgY29uc3QgY29ubmVjdEFyZWFSYWRpdXMgPSBNYXRoLmFicyhjb250YWluZXIucmV0aW5hLmNvbm5lY3RNb2RlUmFkaXVzKTtcblxuICAgICAgICAgICAgaWYgKHhEaWZmIDwgZGlzdE1heCAmJiB5RGlmZiA8IGRpc3RNYXggJiYgeENvcmVEaWZmIDwgY29ubmVjdEFyZWFSYWRpdXMgJiYgeUNvcmVEaWZmIDwgY29ubmVjdEFyZWFSYWRpdXMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsaW5lU3R5bGUgPSB0aGlzLmxpbmVTdHlsZShkZXN0UGFydGljbGUpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFsaW5lU3R5bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBsaW5lU3R5bGU7XG4gICAgICAgICAgICAgICAgY3R4Lm1vdmVUbyhwYXJ0aWNsZS5wb3NpdGlvbi54LCBwYXJ0aWNsZS5wb3NpdGlvbi55KTtcbiAgICAgICAgICAgICAgICBjdHgubGluZVRvKGRlc3RQYXJ0aWNsZS5wb3NpdGlvbi54LCBkZXN0UGFydGljbGUucG9zaXRpb24ueSk7XG4gICAgICAgICAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgICAgICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgbGluZVN0eWxlKGRlc3RQYXJ0aWNsZTogUGFydGljbGUpOiBDYW52YXNHcmFkaWVudCB8IHVuZGVmaW5lZCB7XG4gICAgICAgIGNvbnN0IHBhcnRpY2xlID0gdGhpcy5wYXJ0aWNsZTtcblxuICAgICAgICBpZiAocGFydGljbGUuY29sb3IgJiYgZGVzdFBhcnRpY2xlLmNvbG9yKSB7XG4gICAgICAgICAgICBjb25zdCBzb3VyY2VSZ2IgPSBwYXJ0aWNsZS5jb2xvcjtcbiAgICAgICAgICAgIGNvbnN0IGRlc3RSZ2IgPSBkZXN0UGFydGljbGUuY29sb3I7XG5cbiAgICAgICAgICAgIGNvbnN0IHJnYiA9IHtcbiAgICAgICAgICAgICAgICBiOiBVdGlscy5taXhDb21wb25lbnRzKHNvdXJjZVJnYi5iLCBkZXN0UmdiLmIsIHBhcnRpY2xlLnJhZGl1cywgZGVzdFBhcnRpY2xlLnJhZGl1cyksXG4gICAgICAgICAgICAgICAgZzogVXRpbHMubWl4Q29tcG9uZW50cyhzb3VyY2VSZ2IuZywgZGVzdFJnYi5nLCBwYXJ0aWNsZS5yYWRpdXMsIGRlc3RQYXJ0aWNsZS5yYWRpdXMpLFxuICAgICAgICAgICAgICAgIHI6IFV0aWxzLm1peENvbXBvbmVudHMoc291cmNlUmdiLnIsIGRlc3RSZ2IuciwgcGFydGljbGUucmFkaXVzLCBkZXN0UGFydGljbGUucmFkaXVzKSxcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGNvbnN0IG1pZENvbG9yID0gVXRpbHMuZ2V0U3R5bGVGcm9tQ29sb3IocmdiKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ3JhZGllbnQoZGVzdFBhcnRpY2xlLCBtaWRDb2xvcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGdyYWRpZW50KGRlc3RQYXJ0aWNsZTogUGFydGljbGUsIG1pZENvbG9yOiBzdHJpbmcpOiBDYW52YXNHcmFkaWVudCB8IHVuZGVmaW5lZCB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyO1xuICAgICAgICBjb25zdCBwYXJ0aWNsZSA9IHRoaXMucGFydGljbGU7XG4gICAgICAgIGNvbnN0IGdyYWRTdG9wID0gTWF0aC5mbG9vcihkZXN0UGFydGljbGUucmFkaXVzIC8gcGFydGljbGUucmFkaXVzKTtcbiAgICAgICAgY29uc3QgY3R4ID0gY29udGFpbmVyLmNhbnZhcy5jb250ZXh0O1xuXG4gICAgICAgIGlmICghY3R4IHx8ICFwYXJ0aWNsZS5jb2xvciB8fCAhZGVzdFBhcnRpY2xlLmNvbG9yKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzb3VyY2VQb3MgPSBwYXJ0aWNsZS5wb3NpdGlvbjtcbiAgICAgICAgY29uc3QgZGVzdFBvcyA9IGRlc3RQYXJ0aWNsZS5wb3NpdGlvbjtcbiAgICAgICAgY29uc3QgZ3JhZCA9IGN0eC5jcmVhdGVMaW5lYXJHcmFkaWVudChzb3VyY2VQb3MueCwgc291cmNlUG9zLnksIGRlc3RQb3MueCwgZGVzdFBvcy55KTtcblxuICAgICAgICBncmFkLmFkZENvbG9yU3RvcCgwLCBVdGlscy5nZXRTdHlsZUZyb21Db2xvcihwYXJ0aWNsZS5jb2xvcikpO1xuICAgICAgICBncmFkLmFkZENvbG9yU3RvcChncmFkU3RvcCA+IDEgPyAxIDogZ3JhZFN0b3AsIG1pZENvbG9yKTtcbiAgICAgICAgZ3JhZC5hZGRDb2xvclN0b3AoMSwgVXRpbHMuZ2V0U3R5bGVGcm9tQ29sb3IoZGVzdFBhcnRpY2xlLmNvbG9yKSk7XG5cbiAgICAgICAgcmV0dXJuIGdyYWQ7XG4gICAgfVxufVxuIl19