"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Utils = void 0;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _MoveDirection = require("../../Enums/MoveDirection");

/* ---------- global functions - vendors ------------ */
var Utils = /*#__PURE__*/function () {
  function Utils() {
    (0, _classCallCheck2["default"])(this, Utils);
  }

  (0, _createClass2["default"])(Utils, null, [{
    key: "hexToRgb",

    /**
     * Converts hexadecimal string (HTML color code) in a [[IRgb]] object
     * @param hex the hexadecimal string (#f70 or #ff7700)
     */
    value: function hexToRgb(hex) {
      // By Tim Down - http://stackoverflow.com/a/5624139/3493650
      // Expand shorthand form (e.g. "03F") to full form (e.g. "0033FF")
      var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
      var hexFixed = hex.replace(shorthandRegex, function (m, r, g, b) {
        return r + r + g + g + b + b;
      });
      var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hexFixed);
      return result ? {
        b: parseInt(result[3], 16),
        g: parseInt(result[2], 16),
        r: parseInt(result[1], 16)
      } : null;
    }
    /**
     * Converts a Hue Saturation Lightness ([[IHsl]]) object in a [[IRgb]] object
     * @param hsl
     */

  }, {
    key: "hslToRgb",
    value: function hslToRgb(hsl) {
      var result = {
        b: 0,
        g: 0,
        r: 0
      };

      if (hsl.s == 0) {
        result.b = hsl.l; // achromatic

        result.g = hsl.l;
        result.r = hsl.l;
      } else {
        var q = hsl.l < 0.5 ? hsl.l * (1 + hsl.s) : hsl.l + hsl.s - hsl.l * hsl.s;
        var p = 2 * hsl.l - q;
        result.r = Utils.hue2rgb(p, q, hsl.h + 1 / 3);
        result.g = Utils.hue2rgb(p, q, hsl.h);
        result.b = Utils.hue2rgb(p, q, hsl.h - 1 / 3);
      }

      result.r = Math.round(result.r * 255);
      result.g = Math.round(result.g * 255);
      result.b = Math.round(result.b * 255);
      return result;
    }
    /**
     * Generate a random RGBA color
     * @param min a minimum seed value for all 3 values
     */

  }, {
    key: "getRandomColorRGBA",
    value: function getRandomColorRGBA(min) {
      var fixedMin = min || 0;
      return {
        b: Math.floor(Math.random() * (255 * fixedMin) + fixedMin),
        g: Math.floor(Math.random() * (255 * fixedMin) + fixedMin),
        r: Math.floor(Math.random() * (255 * fixedMin) + fixedMin)
      };
    }
    /**
     * Clamps a number between a minimum and maximum value
     * @param num the source number
     * @param min the minimum value
     * @param max the maximum value
     */

  }, {
    key: "clamp",
    value: function clamp(num, min, max) {
      return Math.min(Math.max(num, min), max);
    }
    /**
     * Check if a value is equal to the destination, if same type, or is in the provided array
     * @param value the value to check
     * @param array the data array or single value
     */

  }, {
    key: "isInArray",
    value: function isInArray(value, array) {
      return value === array || array.indexOf(value) > -1;
    }
    /**
     * Extend destination object with source values
     * @param destination the object to extend
     * @param source the source providing new values
     */

  }, {
    key: "deepExtend",
    value: function deepExtend(destination, source) {
      for (var property in source) {
        if (source[property] && source[property].constructor && source[property].constructor === Object) {
          destination[property] = destination[property] || {};
          Utils.deepExtend(destination[property], source[property]);
        } else {
          destination[property] = source[property];
        }
      }

      return destination;
    }
    /**
     *
     * @param comp1
     * @param comp2
     * @param weight1
     * @param weight2
     */

  }, {
    key: "mixComponents",
    value: function mixComponents(comp1, comp2, weight1, weight2) {
      return (comp1 * weight1 + comp2 * weight2) / (weight1 + weight2);
    }
    /**
     * Prepares a rgba() css function from a [[IRgb]] object
     * @param color the [[IRgb]] color to convert
     */

  }, {
    key: "getStyleFromColor",
    value: function getStyleFromColor(color) {
      return "rgba(".concat(Math.floor(color.r), ", ").concat(Math.floor(color.g), ", ").concat(Math.floor(color.b), ", 0.4)");
    }
    /**
     * Get Particle base velocity
     * @param options the options to use for calculating the velocity
     */

  }, {
    key: "getParticleBaseVelocity",
    value: function getParticleBaseVelocity(options) {
      var velocityBase;

      switch (options.particles.move.direction) {
        case _MoveDirection.MoveDirection.top:
          velocityBase = {
            x: 0,
            y: -1
          };
          break;

        case _MoveDirection.MoveDirection.topRight:
          velocityBase = {
            x: 0.5,
            y: -0.5
          };
          break;

        case _MoveDirection.MoveDirection.right:
          velocityBase = {
            x: 1,
            y: -0
          };
          break;

        case _MoveDirection.MoveDirection.bottomRight:
          velocityBase = {
            x: 0.5,
            y: 0.5
          };
          break;

        case _MoveDirection.MoveDirection.bottom:
          velocityBase = {
            x: 0,
            y: 1
          };
          break;

        case _MoveDirection.MoveDirection.bottomLeft:
          velocityBase = {
            x: -0.5,
            y: 1
          };
          break;

        case _MoveDirection.MoveDirection.left:
          velocityBase = {
            x: -1,
            y: 0
          };
          break;

        case _MoveDirection.MoveDirection.topLeft:
          velocityBase = {
            x: -0.5,
            y: -0.5
          };
          break;

        default:
          velocityBase = {
            x: 0,
            y: 0
          };
          break;
      }

      return velocityBase;
    }
    /**
     * Gets the particles color
     * @param options the options to use for calculating the color
     * @param color the input color to convert in [[IRgb]] object
     */

  }, {
    key: "getParticleColor",
    value: function getParticleColor(options, color) {
      var res = null;

      if ((0, _typeof2["default"])(color.value) === "object") {
        if (color.value instanceof Array) {
          var arr = options.particles.color.value;
          var colorSelected = color.value[Math.floor(Math.random() * arr.length)];
          res = Utils.hexToRgb(colorSelected);
        } else {
          var rgbColor = color.value;

          if (rgbColor.r !== undefined) {
            res = rgbColor;
          }

          var hslColor = color.value;

          if (hslColor.h !== undefined) {
            res = Utils.hslToRgb(hslColor);
          }
        }
      } else {
        if (color.value === "random") {
          res = {
            b: Math.floor(Math.random() * 256),
            g: Math.floor(Math.random() * 256),
            r: Math.floor(Math.random() * 256)
          };
        } else {
          res = Utils.hexToRgb(color.value);
        }
      }

      return res;
    }
    /**
     * Gets the distance between two coordinates
     * @param pointA the first coordinate
     * @param pointB the second coordinate
     */

  }, {
    key: "getDistanceBetweenCoordinates",
    value: function getDistanceBetweenCoordinates(pointA, pointB) {
      var dx = pointA.x - pointB.x;
      var dy = pointA.y - pointB.y;
      return Math.sqrt(dx * dx + dy * dy);
    }
    /**
     *
     * @param p
     * @param q
     * @param t
     */

  }, {
    key: "hue2rgb",
    value: function hue2rgb(p, q, t) {
      if (t < 0) {
        t += 1;
      }

      if (t > 1) {
        t -= 1;
      }

      if (t < 1 / 6) {
        return p + (q - p) * 6 * t;
      }

      if (t < 1 / 2) {
        return q;
      }

      if (t < 2 / 3) {
        return p + (q - p) * (2 / 3 - t) * 6;
      }

      return p;
    }
  }]);
  return Utils;
}();

exports.Utils = Utils;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,