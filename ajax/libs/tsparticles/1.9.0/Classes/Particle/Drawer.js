"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Drawer = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _ShapeType = require("../../Enums/ShapeType");

/**
 * Particle draw manager
 */
var Drawer = /*#__PURE__*/function () {
  function Drawer(container, particle, bubbler) {
    (0, _classCallCheck2["default"])(this, Drawer);
    this.particle = void 0;
    this.container = void 0;
    this.bubbler = void 0;
    this.text = void 0;
    this.container = container;
    this.particle = particle;
    this.bubbler = bubbler;
    var options = this.container.options;

    if (this.particle.shape === _ShapeType.ShapeType["char"] || particle.shape === _ShapeType.ShapeType.character) {
      var value = options.particles.shape.character.value;

      if (typeof value === "string") {
        this.text = value;
      } else {
        this.text = value[Math.floor(Math.random() * value.length)];
      }
    }
  }

  (0, _createClass2["default"])(Drawer, [{
    key: "draw",
    value: function draw() {
      var container = this.container;
      var options = container.options;
      var particle = this.particle;
      var radius;
      var opacity;
      var colorValue;

      if (this.bubbler.radius !== undefined) {
        radius = this.bubbler.radius;
      } else {
        radius = particle.radius;
      }

      if (this.bubbler.opacity !== undefined) {
        opacity = this.bubbler.opacity;
      } else {
        opacity = particle.opacity.value;
      }

      if (particle.color) {
        colorValue = "rgba(".concat(particle.color.r, ", ").concat(particle.color.g, ", ").concat(particle.color.b, ", ").concat(opacity, ")");
      }

      if (!container.canvas.context || !colorValue) {
        return;
      }

      var ctx = container.canvas.context;
      ctx.save(); // TODO: Performance issues, the canvas shadow is really slow
      // const shadow = options.particles.shadow;
      // if (shadow.enable) {
      //     ctx.shadowBlur = shadow.blur;
      //     ctx.shadowColor = shadow.color;
      //     ctx.shadowOffsetX = shadow.offset.x;
      //     ctx.shadowOffsetY = shadow.offset.y;
      // } else {
      //     delete ctx.shadowBlur;
      //     delete ctx.shadowColor;
      //     delete ctx.shadowOffsetX;
      //     delete ctx.shadowOffsetY;
      // }

      ctx.fillStyle = colorValue;
      var pos = {
        x: particle.position.x,
        y: particle.position.y
      };
      ctx.translate(pos.x, pos.y);
      ctx.beginPath();

      if (particle.angle !== 0) {
        ctx.rotate(particle.angle * Math.PI / 180);
      }

      if (options.backgroundMask.enable) {
        ctx.globalCompositeOperation = 'destination-out';
      }

      this.drawShape(radius);
      ctx.closePath();

      if (options.particles.shape.stroke.width > 0) {
        ctx.strokeStyle = options.particles.shape.stroke.color;
        ctx.lineWidth = options.particles.shape.stroke.width;
        ctx.stroke();
      }

      ctx.fill();
      ctx.restore();
    }
  }, {
    key: "drawShape",
    value: function drawShape(radius) {
      var container = this.container;
      var options = container.options;
      var particle = this.particle;
      var ctx = container.canvas.context;

      if (!ctx) {
        return;
      }

      var pos = {
        x: particle.offset.x,
        y: particle.offset.y
      };

      switch (particle.shape) {
        case _ShapeType.ShapeType.line:
          ctx.moveTo(0, 0);
          ctx.lineTo(0, radius);
          ctx.strokeStyle = options.particles.shape.stroke.color;
          ctx.lineWidth = options.particles.shape.stroke.width;
          ctx.stroke();
          break;

        case _ShapeType.ShapeType.circle:
          ctx.arc(pos.x, pos.y, radius, 0, Math.PI * 2, false);
          break;

        case _ShapeType.ShapeType.edge:
        case _ShapeType.ShapeType.square:
          ctx.rect(-radius, -radius, radius * 2, radius * 2);
          break;

        case _ShapeType.ShapeType.triangle:
          {
            var start = {
              x: -radius,
              y: radius / 1.66
            };
            var side = {
              count: {
                denominator: 2,
                numerator: 3
              },
              length: radius * 2
            };
            Drawer.subDrawShape(ctx, start, side);
          }
          break;

        case _ShapeType.ShapeType.polygon:
          {
            var _start = {
              x: -radius / (options.particles.shape.polygon.sides / 3.5),
              y: -radius / (2.66 / 3.5)
            };
            var _side = {
              count: {
                denominator: 1,
                numerator: options.particles.shape.polygon.sides
              },
              length: radius * 2.66 / (options.particles.shape.polygon.sides / 3)
            };
            Drawer.subDrawShape(ctx, _start, _side);
          }
          break;

        case _ShapeType.ShapeType.star:
          {
            var _start2 = {
              x: -radius * 2 / (options.particles.shape.polygon.sides / 4),
              y: -radius / (2 * 2.66 / 3.5)
            };
            var _side2 = {
              count: {
                denominator: 2,
                numerator: options.particles.shape.polygon.sides
              },
              length: radius * 2 * 2.66 / (options.particles.shape.polygon.sides / 3)
            };
            Drawer.subDrawShape(ctx, _start2, _side2);
          }
          break;

        case _ShapeType.ShapeType.heart:
          {
            var x = -radius / 2;
            var y = -radius / 2;
            ctx.moveTo(x, y + radius / 4);
            ctx.quadraticCurveTo(x, y, x + radius / 4, y);
            ctx.quadraticCurveTo(x + radius / 2, y, x + radius / 2, y + radius / 4);
            ctx.quadraticCurveTo(x + radius / 2, y, x + radius * 3 / 4, y);
            ctx.quadraticCurveTo(x + radius, y, x + radius, y + radius / 4);
            ctx.quadraticCurveTo(x + radius, y + radius / 2, x + radius * 3 / 4, y + radius * 3 / 4);
            ctx.lineTo(x + radius / 2, y + radius);
            ctx.lineTo(x + radius / 4, y + radius * 3 / 4);
            ctx.quadraticCurveTo(x, y + radius / 2, x, y + radius / 4);
          }
          break;

        case _ShapeType.ShapeType["char"]:
        case _ShapeType.ShapeType.character:
          {
            var style = options.particles.shape.character.style;
            var weight = options.particles.shape.character.weight;
            var size = Math.round(radius) * 2;
            var font = options.particles.shape.character.font;
            var text = this.text;
            ctx.font = "".concat(style, " ").concat(weight, " ").concat(size, "px ").concat(font);

            if (text) {
              var _x = -radius / 2;

              var _y = radius / 2;

              if (options.particles.shape.character.fill) {
                ctx.fillText(text, _x, _y);
              } else {
                ctx.strokeText(text, _x, _y);
              }
            }
          }
          break;

        case _ShapeType.ShapeType.image:
          if (particle.image && particle.image.data.obj) {
            this.subDraw(ctx, particle.image.data.obj, radius);
          }

          break;
      }
    }
  }, {
    key: "subDraw",
    value: function subDraw(ctx, imgObj, radius) {
      var particle = this.particle;
      var ratio = 1;

      if (particle.image) {
        ratio = particle.image.ratio;
      }

      var pos = {
        x: -radius,
        y: -radius
      };
      ctx.drawImage(imgObj, pos.x, pos.y, radius * 2, radius * 2 / ratio);
    }
  }], [{
    key: "subDrawShape",
    value: function subDrawShape(ctx, start, side) {
      // By Programming Thomas - https://programmingthomas.wordpress.com/2013/04/03/n-sided-shapes/
      var sideCount = side.count.numerator * side.count.denominator;
      var decimalSides = side.count.numerator / side.count.denominator;
      var interiorAngleDegrees = 180 * (decimalSides - 2) / decimalSides;
      var interiorAngle = Math.PI - Math.PI * interiorAngleDegrees / 180; // convert to radians

      ctx.save();
      ctx.beginPath();
      ctx.translate(start.x, start.y);
      ctx.moveTo(0, 0);

      for (var i = 0; i < sideCount; i++) {
        ctx.lineTo(side.length, 0);
        ctx.translate(side.length, 0);
        ctx.rotate(interiorAngle);
      } // c.stroke();


      ctx.fill();
      ctx.restore();
    }
  }]);
  return Drawer;
}();

exports.Drawer = Drawer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,