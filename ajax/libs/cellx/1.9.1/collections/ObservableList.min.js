import{EventEmitter}from"../EventEmitter";const push=Array.prototype.push,splice=Array.prototype.splice,defaultComparator=(t,e)=>t<e?-1:t>e?1:0;export class ObservableList extends EventEmitter{constructor(t,e){if(super(),this._items=[],e&&(e.sorted||e.comparator&&!1!==e.sorted)?(this._comparator=e.comparator||defaultComparator,this._sorted=!0):(this._comparator=null,this._sorted=!1),t)if(this._sorted){t instanceof ObservableList&&(t=t._items);for(let e=0,i=t.length;e<i;e++)this._insertSortedValue(t[e])}else push.apply(this._items,t instanceof ObservableList?t._items:t)}get length(){return this._items.length}_validateIndex(t,e){if(void 0===t)return t;if(t<0){if((t+=this._items.length)<0)throw new RangeError("Index out of valid range")}else if(t>this._items.length-(e?0:1))throw new RangeError("Index out of valid range");return t}contains(t){return-1!=this._items.indexOf(t)}indexOf(t,e){return this._items.indexOf(t,this._validateIndex(e,!0))}lastIndexOf(t,e){return this._items.lastIndexOf(t,void 0===e?-1:this._validateIndex(e,!0))}get(t){return this._items[this._validateIndex(t,!0)]}getRange(t,e){if(t=this._validateIndex(t,!0),void 0===e)return this._items.slice(t);if(t+e>this._items.length)throw new RangeError('Sum of "index" and "count" out of valid range');return this._items.slice(t,t+e)}set(t,e){if(this._sorted)throw new TypeError("Cannot set to sorted list");return t=this._validateIndex(t,!0),Object.is(e,this._items[t])||(this._items[t]=e,this.emit("change")),this}setRange(t,e){if(this._sorted)throw new TypeError("Cannot set to sorted list");t=this._validateIndex(t,!0),e instanceof ObservableList&&(e=e._items);let i=e.length;if(!i)return this;if(t+i>this._items.length)throw new RangeError('Sum of "index" and "values.length" out of valid range');let s=this._items,r=!1;for(let n=t+i;n>t;){let i=e[--n-t];Object.is(i,s[n])||(s[n]=i,r=!0)}return r&&this.emit("change"),this}add(t,e){return e&&-1!=this._items.indexOf(t)?this:(this._sorted?this._insertSortedValue(t):this._items.push(t),this.emit("change"),this)}addRange(t,e){if(t instanceof ObservableList&&(t=t._items),t.length)if(e){let e=this._items,i=this._sorted,s=!1;for(let r of t)-1==e.indexOf(r)&&(i?this._insertSortedValue(r):e.push(r),s=!0);s&&this.emit("change")}else{if(this._sorted)for(let e=0,i=t.length;e<i;e++)this._insertSortedValue(t[e]);else push.apply(this._items,t);this.emit("change")}return this}insert(t,e){if(this._sorted)throw new TypeError("Cannot insert to sorted list");return this._items.splice(this._validateIndex(t,!0),0,e),this.emit("change"),this}insertRange(t,e){if(this._sorted)throw new TypeError("Cannot insert to sorted list");return t=this._validateIndex(t,!0),e instanceof ObservableList&&(e=e._items),e.length&&(splice.apply(this._items,[t,0].concat(e)),this.emit("change")),this}remove(t,e){let i=this._items.indexOf(t,this._validateIndex(e,!0));return-1!=i&&(this._items.splice(i,1),this.emit("change"),!0)}removeAll(t,e){let i=this._validateIndex(e,!0),s=this._items,r=!1;for(;-1!=(i=s.indexOf(t,i));)s.splice(i,1),r=!0;return r&&this.emit("change"),r}removeEach(t,e){e=this._validateIndex(e,!0),t instanceof ObservableList&&(t=t._items.slice());let i=this._items,s=!1;for(let r=0,n=t.length;r<n;r++){let n=i.indexOf(t[r],e);-1!=n&&(i.splice(n,1),s=!0)}return s&&this.emit("change"),s}removeAt(t){let e=this._items.splice(this._validateIndex(t),1)[0];return this.emit("change"),e}removeRange(t,e){if(t=this._validateIndex(t,!0),void 0===e){if(!(e=this._items.length-t))return[]}else{if(!e)return[];if(t+e>this._items.length)throw new RangeError('Sum of "index" and "count" out of valid range')}let i=this._items.splice(t,e);return this.emit("change"),i}clear(){return this._items.length&&(this._items.length=0,this.emit("change",{subtype:"clear"})),this}join(t){return this._items.join(t)}find(t,e){let i=this._items;for(let s=0,r=i.length;s<r;s++){let r=i[s];if(t.call(e,r,s,this))return r}}findIndex(t,e){let i=this._items;for(let s=0,r=i.length;s<r;s++)if(t.call(e,i[s],s,this))return s;return-1}clone(t){return new this.constructor(t?this._items.map(t=>t&&t.clone?t.clone(!0):t):this,{comparator:this._comparator||void 0,sorted:this._sorted})}toArray(){return this._items.slice()}toString(){return this._items.join()}_insertSortedValue(t){let e=this._items,i=this._comparator,s=0,r=e.length;for(;s!=r;){let n=s+r>>1;i(t,e[n])<0?r=n:s=n+1}e.splice(s,0,t)}};["forEach","map","filter","every","some"].forEach(t=>{ObservableList.prototype[t]=function(e,i){return this._items[t](function(t,s){return e.call(i,t,s,this)},this)}}),["reduce","reduceRight"].forEach(t=>{ObservableList.prototype[t]=function(e,i){let s=this;function r(t,i,r){return e(t,i,r,s)}return arguments.length>=2?this._items[t](r,i):this._items[t](r)}}),[["keys",t=>t],["values",(t,e)=>e],["entries",(t,e)=>[t,e]]].forEach(t=>{let e=t[1];ObservableList.prototype[t[0]]=function(){let t=this._items,i=0,s=!1;return{next(){if(!s){if(i<t.length)return{value:e(i,t[i++]),done:!1};s=!0}return{value:void 0,done:!0}}}}}),ObservableList.prototype[Symbol.iterator]=ObservableList.prototype.values;