"use strict";exports.__esModule=!0,exports.receiveMessage=receiveMessage,exports.setupGlobalReceiveMessage=setupGlobalReceiveMessage,exports.messageListener=messageListener,exports.listenForMessages=listenForMessages,exports.stopListenForMessages=stopListenForMessages;var _src=require("cross-domain-utils/src"),_src2=require("belter/src"),_lib=require("../../lib"),_serialize=require("../../serialize"),_global=require("../../global"),_types=require("./types");function parseMessage(e,s,r,{on:o,send:n}){let t;try{t=(0,_serialize.deserializeMessage)(s,r,e,{on:o,send:n})}catch(e){return}if(t&&"object"==typeof t&&null!==t&&(t=t[__POST_ROBOT__.__GLOBAL_KEY__])&&"object"==typeof t&&null!==t&&t.type&&"string"==typeof t.type&&_types.RECEIVE_MESSAGE_TYPES[t.type])return t}function receiveMessage(e,{on:s,send:r}){const o=(0,_global.globalStore)("receivedMessages");try{if(!window||window.closed||!e.source)return}catch(e){return}let{source:n,origin:t,data:i}=e;__TEST__&&(t=(0,_src.getDomain)(n));const a=parseMessage(i,n,t,{on:s,send:r});a&&((0,_lib.markWindowKnown)(n),o.has(a.id)||(o.set(a.id,!0),(0,_src.isWindowClosed)(n)&&!a.fireAndForget||(0===a.origin.indexOf(_src.PROTOCOL.FILE)&&(t=`${_src.PROTOCOL.FILE}//`),_types.RECEIVE_MESSAGE_TYPES[a.type](n,t,a,{on:s,send:r}))))}function setupGlobalReceiveMessage({on:e,send:s}){const r=(0,_global.getGlobal)();r.receiveMessage=r.receiveMessage||(r=>receiveMessage(r,{on:e,send:s}))}function messageListener(e,{on:s,send:r}){try{(0,_src2.noop)(e.source)}catch(e){return}const o=e.source||e.sourceElement;let n=e.origin||e.originalEvent&&e.originalEvent.origin;const t=e.data;if("null"===n&&(n=`${_src.PROTOCOL.FILE}//`),o){if(!n)throw new Error("Post message did not have origin domain");__TEST__&&(0,_lib.needsGlobalMessagingForBrowser)()&&!1===(0,_src.isSameTopWindow)(o,window)||receiveMessage({source:o,origin:n,data:t},{on:s,send:r})}}function listenForMessages({on:e,send:s}){return(0,_global.globalStore)().getOrSet("postMessageListener",()=>(0,_src2.addEventListener)(window,"message",r=>{messageListener(r,{on:e,send:s})}))}function stopListenForMessages(){const e=(0,_global.globalStore)().get("postMessageListener");e&&e.cancel()}