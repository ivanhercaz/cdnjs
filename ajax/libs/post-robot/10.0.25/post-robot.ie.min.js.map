{"version":3,"sources":["webpack://postRobot/webpack/universalModuleDefinition","webpack://postRobot/webpack/bootstrap","webpack://postRobot/./node_modules/cross-domain-utils/src/util.js","webpack://postRobot/./node_modules/cross-domain-utils/src/constants.js","webpack://postRobot/./node_modules/cross-domain-utils/src/utils.js","webpack://postRobot/./node_modules/zalgo-promise/src/utils.js","webpack://postRobot/./node_modules/zalgo-promise/src/exceptions.js","webpack://postRobot/./node_modules/zalgo-promise/src/flush.js","webpack://postRobot/./node_modules/zalgo-promise/src/promise.js","webpack://postRobot/./node_modules/@babel/runtime/helpers/esm/extends.js","webpack://postRobot/./node_modules/cross-domain-safe-weakmap/src/util.js","webpack://postRobot/./node_modules/cross-domain-safe-weakmap/src/weakmap.js","webpack://postRobot/./node_modules/belter/src/util.js","webpack://postRobot/./node_modules/cross-domain-safe-weakmap/src/native.js","webpack://postRobot/./node_modules/belter/src/dom.js","webpack://postRobot/./src/conf/config.js","webpack://postRobot/./src/conf/constants.js","webpack://postRobot/./src/global.js","webpack://postRobot/./src/lib/hello.js","webpack://postRobot/./src/lib/windows.js","webpack://postRobot/./node_modules/universal-serialize/src/constants.js","webpack://postRobot/./node_modules/universal-serialize/src/common.js","webpack://postRobot/./node_modules/universal-serialize/src/serialize.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/function.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/error.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/promise.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/regex.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/date.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/array.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/object.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/string.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/number.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/boolean.js","webpack://postRobot/./node_modules/universal-serialize/src/serializers/null.js","webpack://postRobot/./node_modules/universal-serialize/src/deserialize.js","webpack://postRobot/./src/bridge/common.js","webpack://postRobot/./src/bridge/parent.js","webpack://postRobot/./src/bridge/setup.js","webpack://postRobot/./src/bridge/bridge.js","webpack://postRobot/./src/bridge/child.js","webpack://postRobot/./src/serialize/window.js","webpack://postRobot/./src/serialize/function.js","webpack://postRobot/./src/serialize/serialize.js","webpack://postRobot/./src/serialize/promise.js","webpack://postRobot/./src/drivers/send/strategies.js","webpack://postRobot/./src/drivers/send/index.js","webpack://postRobot/./src/lib/compat.js","webpack://postRobot/./src/drivers/listeners.js","webpack://postRobot/./src/drivers/receive/types.js","webpack://postRobot/./src/drivers/receive/index.js","webpack://postRobot/./src/public/on.js","webpack://postRobot/./src/public/send.js","webpack://postRobot/./src/index.js","webpack://postRobot/./src/setup.js","webpack://postRobot/./src/clean.js","webpack://postRobot/./src/types.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","hasOwnProperty","p","s","isRegex","item","toString","PROTOCOL","MOCK","FILE","ABOUT","WILDCARD","WINDOW_TYPE","IFRAME","POPUP","IE_WIN_ACCESS_ERROR","isAboutProtocol","win","window","location","protocol","getParent","parent","err","getOpener","opener","canReadFromWindow","getActualDomain","Error","host","getDomain","domain","mockDomain","indexOf","isSameDomain","desc","getOwnPropertyDescriptor","isActuallySameDomain","assertSameDomain","isAncestorParent","child","childParent","result","push","getParents","getFrames","frames","len","length","frame","getAllChildFrames","getTop","top","getAllFramesInWindow","iframeWindows","iframeFrames","isWindowClosed","allowMock","closed","message","mockclosed","iframeIndex","collection","safeIndexOf","contentWindow","parentNode","doc","ownerDocument","documentElement","contains","isFrameWindowClosed","getUserAgent","navigator","mockUserAgent","userAgent","getFrameByName","winFrames","childFrame","isOpener","getAncestor","anyMatch","collection1","collection2","item1","isSameTopWindow","win1","win2","top1","top2","allFrames1","allFrames2","opener1","opener2","matchDomain","pattern","origin","Array","isArray","Boolean","match","JSON","stringify","some","subpattern","getDomainFromUrl","url","split","slice","join","isWindow","obj","Window","__cross_domain_utils_window_check__","closeWindow","close","isPromise","Promise","constructor","then","flushPromise","dispatchedErrors","possiblyUnhandledPromiseHandlers","activeCount","flushActive","promise","resolve","startActive","endActive","ZalgoPromise","handler","resolved","rejected","errorHandled","error","handlers","dispatching","stack","isAsync","res","reject","dispatch","setTimeout","j","dispatchPossiblyUnhandledError","asyncReject","chain","firstPromise","secondPromise","onSuccess","onError","catch","undefined","finally","onFinally","try","timeout","time","clearTimeout","toPromise","TypeError","all","promises","count","results","prom","hash","keys","map","items","method","onPossiblyUnhandledException","cancel","splice","context","args","apply","delay","flush","_extends","assign","target","arguments","source","objectIDs","CrossDomainSafeWeakMap","weakmap","values","Math","random","WeakMap","freeze","testWeakMap","testKey","set","hasNativeWeakMap","_cleanupClosedWindows","delete","isSafeToReadWrite","entry","writable","index","has","getOrSet","uniqueID","chars","replace","charAt","floor","str","btoa","encodeURIComponent","p1","String","fromCharCode","parseInt","Buffer","from","base64encode","Date","toISOString","toLowerCase","memoizePromise","fn","cache","memoizedPromiseFunction","subkey","val","uid","getObjectID","serializeArgs","reset","__name__","displayName","setFunctionName","noop","stringifyError","level","newErr","prototype","MESSAGE_NAME","METHOD","HELLO","OPEN_TUNNEL","BRIDGE_NAME_PREFIX","SERIALIZATION_TYPE","CROSS_DOMAIN_ZALGO_PROMISE","CROSS_DOMAIN_FUNCTION","CROSS_DOMAIN_WINDOW","getGlobal","getObj","globalStore","defStore","store","storeKey","defVal","del","WildCard","getWildcard","global","WINDOW_WILDCARD","windowStore","winStore","getStore","getInstanceID","resolveHelloPromise","helloPromises","existingPromise","newPromise","sayHello","send","instanceID","data","getWindowInstanceID","awaitWindowHello","getHelloPromise","markWindowKnown","TYPE","FUNCTION","ERROR","PROMISE","REGEX","DATE","ARRAY","OBJECT","STRING","NUMBER","BOOLEAN","NULL","UNDEFINED","isSerializedType","__type__","determineType","serializeType","type","__val__","SERIALIZER","code","toJSON","defaultSerializers","DESERIALIZER","RegExp","defaultDeserializers","needsBridgeForBrowser","needsBridgeForWin","needsBridgeForDomain","needsBridge","getBridgeName","sanitizedDomain","isBridge","documentBodyReady","document","body","interval","setInterval","clearInterval","registerRemoteWindow","findRemoteWindow","remoteWinPromise","registerRemoteSendMessage","sendMessage","remoteWin","remoteDomain","fireAndForget","rejectRemoteSendMessage","linkWindow","popupWindowsByName","popupWindowsByWin","winName","details","setupBridge","windowOpen","on","receiveMessage","open","options","last","normalizeMockUrl","bridgePromise","bridge","winDetails","listenForOpenTunnel","openTunnelToParent","canary","tunnelWindows","parentWindow","id","cleanTunnelWindows","addTunnelWindow","tunnelWindow","setupOpenTunnelToParent","openTunnelToOpener","cleanupProxyWindows","idToProxyWindow","shouldClean","getSerializedWindow","winPromise","windowName","getType","getName","focus","isClosed","setLocation","href","setName","sameDomain","frameElement","querySelectorAll","getFrameForWindow","setAttribute","ProxyWindow","serializedWindow","isProxyWindow","actualWindow","actualWindowPromise","getID","setWindow","isPopup","isPopupPromise","getNamePromise","reopenPromise","focusPromise","getWindow","awaitWindow","matchWindow","proxyInstanceID","knownWindowInstanceID","unwrap","serialize","toProxyWindow","deserialize","addMethod","methodStore","proxyWindowMethods","lookupMethod","serializeFunction","destination","meth","methodSource","__id__","serializeMessage","serializers","serializer","serializePromise","deserializeMessage","deserializers","parse","deserializer","serializedPromise","deserializePromise","serializedFunction","getDeserializedFunction","opts","crossDomainFunctionWrapper","__origin__","__source__","deserializeFunction","SEND_MESSAGE_STRATEGIES","serializedMessage","strategies","errors","strategyName","dom","forEach","postMessage","messagingChild","messagingParent","sendBridgeMessage","foreignGlobal","__DOMAIN_REGEX__","getResponseListener","deleteResponseListener","isResponseListenerErrored","getRequestListener","requestListeners","winQualifier","nameListeners","domainListeners","listener","regex","RECEIVE_MESSAGE_TYPES","logName","sendResponse","ack","response","pathname","handleError","event","receivedMessages","parsedMessage","parseMessage","requestListener","addRequestListener","listenersCollection","existingListener","regexListeners","regexListener","strDomain","errorHandler","once","responseTimeout","childTimeout","validateOptions","actualParent","isAncestor","targetDomain","actualDomain","normalizedDomain","normalizeDomain","responseListener","addResponseListener","reqPromises","markResponseListenerErrored","totalAckTimeout","isWindowKnown","totalResTimeout","ackTimeout","resTimeout","cancelled","max","loop","internalSerializeMessage","internalDeserializeMessage","createProxyWindow","setup","initialized","addEventListener","sourceElement","originalEvent","messageListener","removeEventListener","listenForMessages","initHello","destroy","responseListeners","cancelResponseListeners","cleanUpWindow","openBridge","bridges","bridgeFrames","iframe","createElement","src","openBridgeFrame","appendChild","linkUrl","hasBridge","destroyBridges","removeChild"],"mappings":"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","file":"post-robot.ie.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"postRobot\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"postRobot\"] = factory();\n\telse\n\t\troot[\"postRobot\"] = factory();\n})((typeof self !== 'undefined' ? self : this), function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/* @flow */\n\nexport function isRegex(item : mixed) : boolean {\n    return Object.prototype.toString.call(item) === '[object RegExp]';\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : Array<mixed>) {\n    // pass\n}\n","/* @flow */\n\nexport const PROTOCOL = {\n    MOCK:  ('mock:' : 'mock:'),\n    FILE:  ('file:' : 'file:'),\n    ABOUT: ('about:' : 'about:')\n};\n\nexport const WILDCARD = '*';\n\nexport const WINDOW_TYPE = {\n    IFRAME: ('iframe' : 'iframe'),\n    POPUP:  ('popup' : 'popup')\n};\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { isRegex, noop } from './util';\nimport type { CrossDomainWindowType, SameDomainWindowType, DomainMatcher } from './types';\nimport { PROTOCOL, WILDCARD } from './constants';\n\nlet IE_WIN_ACCESS_ERROR = 'Call was rejected by callee.\\r\\n';\n\nexport function isFileProtocol(win : SameDomainWindowType = window) : boolean {\n    return win.location.protocol === PROTOCOL.FILE;\n}\n\nexport function isAboutProtocol(win : SameDomainWindowType = window) : boolean {\n    return win.location.protocol === PROTOCOL.ABOUT;\n}\n\nexport function getParent(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n\n    if (!win) {\n        return;\n    }\n\n    try {\n        if (win.parent && win.parent !== win) {\n            return win.parent;\n        }\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function getOpener(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n\n    if (!win) {\n        return;\n    }\n\n    // Make sure we're not actually an iframe which has had window.open() called on us\n    if (getParent(win)) {\n        return;\n    }\n\n    try {\n        return win.opener;\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function canReadFromWindow(win : CrossDomainWindowType | SameDomainWindowType) : boolean {\n    try {\n        // $FlowFixMe\n        noop(win && win.location && win.location.href);\n        return true;\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function getActualDomain(win? : SameDomainWindowType = window) : string {\n\n    let location = win.location;\n\n    if (!location) {\n        throw new Error(`Can not read window location`);\n    }\n\n    let protocol = location.protocol;\n\n    if (!protocol) {\n        throw new Error(`Can not read window protocol`);\n    }\n\n    if (protocol === PROTOCOL.FILE) {\n        return `${ PROTOCOL.FILE }//`;\n    }\n\n    if (protocol === PROTOCOL.ABOUT) {\n\n        let parent = getParent(win);\n        if (parent && canReadFromWindow(parent)) {\n            // $FlowFixMe\n            return getActualDomain(parent);\n        }\n\n        return `${ PROTOCOL.ABOUT }//`;\n    }\n\n    let host = location.host;\n\n    if (!host) {\n        throw new Error(`Can not read window host`);\n    }\n\n    return `${ protocol }//${ host }`;\n}\n\nexport function getDomain(win? : SameDomainWindowType = window) : string {\n\n    let domain = getActualDomain(win);\n\n    if (domain && win.mockDomain && win.mockDomain.indexOf(PROTOCOL.MOCK) === 0) {\n        return win.mockDomain;\n    }\n\n    return domain;\n}\n\nexport function isBlankDomain(win : CrossDomainWindowType) : boolean {\n    try {\n        // $FlowFixMe\n        if (!win.location.href) {\n            return true;\n        }\n\n        if (win.location.href === 'about:blank') {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function isActuallySameDomain(win : CrossDomainWindowType) : boolean {\n\n    try {\n        if (win === window) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        let desc = Object.getOwnPropertyDescriptor(win, 'location');\n\n        if (desc && desc.enumerable === false) {\n            return false;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        // $FlowFixMe\n        if (isAboutProtocol(win) && canReadFromWindow(win)) {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        // $FlowFixMe\n        if (getActualDomain(win) === getActualDomain(window)) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function isSameDomain(win : CrossDomainWindowType | SameDomainWindowType) : boolean {\n\n    if (!isActuallySameDomain(win)) {\n        return false;\n    }\n\n    try {\n\n        if (win === window) {\n            return true;\n        }\n\n        // $FlowFixMe\n        if (isAboutProtocol(win) && canReadFromWindow(win)) {\n            return true;\n        }\n\n        // $FlowFixMe\n        if (getDomain(window) === getDomain(win)) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\n\nexport function assertSameDomain(win : CrossDomainWindowType | SameDomainWindowType) : SameDomainWindowType {\n    if (!isSameDomain(win)) {\n        throw new Error(`Expected window to be same domain`);\n    }\n\n    // $FlowFixMe\n    return win;\n}\n\nexport function getParents(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let result = [];\n\n    try {\n\n        while (win.parent !== win) {\n            result.push(win.parent);\n            win = win.parent;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return result;\n}\n\nexport function isAncestorParent(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    if (!parent || !child) {\n        return false;\n    }\n\n    let childParent = getParent(child);\n\n    if (childParent) {\n        return childParent === parent;\n    }\n\n    if (getParents(child).indexOf(parent) !== -1) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function getFrames(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let result = [];\n\n    let frames;\n\n    try {\n        frames = win.frames;\n    } catch (err) {\n        frames = win;\n    }\n\n    let len;\n\n    try {\n        len = frames.length;\n    } catch (err) {\n        // pass\n    }\n\n    if (len === 0) {\n        return result;\n    }\n\n    if (len) {\n        for (let i = 0; i < len; i++) {\n\n            let frame;\n\n            try {\n                frame = frames[i];\n            } catch (err) {\n                continue;\n            }\n\n            result.push(frame);\n        }\n\n        return result;\n    }\n\n    for (let i = 0; i < 100; i++) {\n        let frame;\n\n        try {\n            frame = frames[i];\n        } catch (err) {\n            return result;\n        }\n\n        if (!frame) {\n            return result;\n        }\n\n        result.push(frame);\n    }\n\n    return result;\n}\n\n\nexport function getAllChildFrames(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let result = [];\n\n    for (let frame of getFrames(win)) {\n        result.push(frame);\n\n        for (let childFrame of getAllChildFrames(frame)) {\n            result.push(childFrame);\n        }\n    }\n\n    return result;\n}\n\nexport function getTop(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n\n    try {\n        if (win.top) {\n            return win.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    if (getParent(win) === win) {\n        return win;\n    }\n\n    try {\n        if (isAncestorParent(window, win) && window.top) {\n            return window.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        if (isAncestorParent(win, window) && window.top) {\n            return window.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    for (let frame of getAllChildFrames(win)) {\n        try {\n            if (frame.top) {\n                return frame.top;\n            }\n        } catch (err) {\n            // pass\n        }\n\n        if (getParent(frame) === frame) {\n            return frame;\n        }\n    }\n}\n\nexport function getNextOpener(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n    return getOpener(getTop(win) || win);\n}\n\nexport function getUltimateTop(win? : CrossDomainWindowType = window) : CrossDomainWindowType {\n    let opener = getNextOpener(win);\n\n    if (opener) {\n        return getUltimateTop(opener);\n    }\n\n    return top;\n}\n\nexport function getAllFramesInWindow(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n    let top = getTop(win);\n\n    if (!top) {\n        throw new Error(`Can not determine top window`);\n    }\n\n    return [ ...getAllChildFrames(top), top ];\n}\n\nexport function getAllWindows(win? : CrossDomainWindowType = window) : $ReadOnlyArray<CrossDomainWindowType> {\n    let frames = getAllFramesInWindow(win);\n    let opener = getNextOpener(win);\n\n    if (opener) {\n        return [ ...getAllWindows(opener), ...frames ];\n    } else {\n        return frames;\n    }\n}\n\nexport function isTop(win : CrossDomainWindowType) : boolean {\n    return win === getTop(win);\n}\n\nexport function isFrameWindowClosed(frame : HTMLIFrameElement) : boolean {\n\n    if (!frame.contentWindow) {\n        return true;\n    }\n\n    if (!frame.parentNode) {\n        return true;\n    }\n\n    let doc = frame.ownerDocument;\n\n    if (doc && doc.documentElement && !doc.documentElement.contains(frame)) {\n        return true;\n    }\n\n    return false;\n}\n\nfunction safeIndexOf<T>(collection : Array<T>, item : T) : number {\n    for (let i = 0; i < collection.length; i++) {\n\n        try {\n            if (collection[i] === item) {\n                return i;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    return -1;\n}\n\nlet iframeWindows = [];\nlet iframeFrames = [];\n\nexport function isWindowClosed(win : CrossDomainWindowType, allowMock : boolean = true) : boolean {\n\n    try {\n        if (win === window) {\n            return false;\n        }\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if (!win) {\n            return true;\n        }\n\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if (win.closed) {\n            return true;\n        }\n\n    } catch (err) {\n\n        // I love you so much IE\n\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return false;\n        }\n\n        return true;\n    }\n\n\n    if (allowMock && isSameDomain(win)) {\n        try {\n            // $FlowFixMe\n            if (win.mockclosed) {\n                return true;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    // Mobile safari\n\n    try {\n        if (!win.parent || !win.top) {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    // Yes, this actually happens in IE. win === win errors out when the window\n    // is from an iframe, and the iframe was removed from the page.\n\n    try {\n        noop(win === win); // eslint-disable-line no-self-compare\n    } catch (err) {\n        return true;\n    }\n\n    // IE orphaned frame\n\n    let iframeIndex = safeIndexOf(iframeWindows, win);\n\n    if (iframeIndex !== -1) {\n        let frame = iframeFrames[iframeIndex];\n\n        if (frame && isFrameWindowClosed(frame)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction cleanIframes() {\n    for (let i = 0; i < iframeWindows.length; i++) {\n        let closed = false;\n\n        try {\n            closed = iframeWindows[i].closed;\n        } catch (err) {\n            // pass\n        }\n\n        if (closed) {\n            iframeFrames.splice(i, 1);\n            iframeWindows.splice(i, 1);\n        }\n    }\n}\n\nexport function linkFrameWindow(frame : HTMLIFrameElement) {\n\n    cleanIframes();\n\n    if (frame && frame.contentWindow) {\n        try {\n            iframeWindows.push(frame.contentWindow);\n            iframeFrames.push(frame);\n        } catch (err) {\n            // pass\n        }\n    }\n}\n\nexport function getUserAgent(win : ?SameDomainWindowType) : string {\n    win = win || window;\n    return win.navigator.mockUserAgent || win.navigator.userAgent;\n}\n\n\nexport function getFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    let winFrames = getFrames(win);\n\n    for (let childFrame of winFrames) {\n        try {\n            // $FlowFixMe\n            if (isSameDomain(childFrame) && childFrame.name === name && winFrames.indexOf(childFrame) !== -1) {\n                return childFrame;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    try {\n        // $FlowFixMe\n        if (winFrames.indexOf(win.frames[name]) !== -1) {\n            // $FlowFixMe\n            return win.frames[name];\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        if (winFrames.indexOf(win[name]) !== -1) {\n            return win[name];\n        }\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function findChildFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    let frame = getFrameByName(win, name);\n\n    if (frame) {\n        return frame;\n    }\n\n    for (let childFrame of getFrames(win)) {\n        let namedFrame = findChildFrameByName(childFrame, name);\n\n        if (namedFrame) {\n            return namedFrame;\n        }\n    }\n}\n\nexport function findFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    let frame;\n\n    frame = getFrameByName(win, name);\n\n    if (frame) {\n        return frame;\n    }\n\n    let top = getTop(win) || win;\n\n    return findChildFrameByName(top, name);\n}\n\nexport function isParent(win : CrossDomainWindowType, frame : CrossDomainWindowType) : boolean {\n\n    let frameParent = getParent(frame);\n\n    if (frameParent) {\n        return frameParent === win;\n    }\n\n    for (let childFrame of getFrames(win)) {\n        if (childFrame === frame) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function isOpener(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    return parent === getOpener(child);\n}\n\nexport function getAncestor(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n    win = win || window;\n\n    let opener = getOpener(win);\n\n    if (opener) {\n        return opener;\n    }\n\n    let parent = getParent(win);\n\n    if (parent) {\n        return parent;\n    }\n}\n\nexport function getAncestors(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let results = [];\n\n    let ancestor = win;\n\n    while (ancestor) {\n        ancestor = getAncestor(ancestor);\n        if (ancestor) {\n            results.push(ancestor);\n        }\n    }\n\n    return results;\n}\n\n\nexport function isAncestor(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    let actualParent = getAncestor(child);\n\n    if (actualParent) {\n        if (actualParent === parent) {\n            return true;\n        }\n\n        return false;\n    }\n\n    if (child === parent) {\n        return false;\n    }\n\n    if (getTop(child) === child) {\n        return false;\n    }\n\n    for (let frame of getFrames(parent)) {\n        if (frame === child) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function isPopup(win? : CrossDomainWindowType = window) : boolean {\n    return Boolean(getOpener(win));\n}\n\nexport function isIframe(win? : CrossDomainWindowType = window) : boolean {\n    return Boolean(getParent(win));\n}\n\nexport function isFullpage(win? : CrossDomainWindowType = window) : boolean {\n    return Boolean(!isIframe(win) && !isPopup(win));\n}\n\nfunction anyMatch(collection1, collection2) : boolean {\n\n    for (let item1 of collection1) {\n        for (let item2 of collection2) {\n            if (item1 === item2) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n\nexport function getDistanceFromTop(win : CrossDomainWindowType = window) : number {\n    let distance = 0;\n    let parent = win;\n\n    while (parent) {\n        parent = getParent(parent);\n        if (parent) {\n            distance += 1;\n        }\n    }\n\n    return distance;\n}\n\nexport function getNthParent(win : CrossDomainWindowType, n : number = 1) : ?CrossDomainWindowType {\n    let parent = win;\n\n    for (let i = 0; i < n; i++) {\n        if (!parent) {\n            return;\n        }\n\n        parent = getParent(parent);\n    }\n\n    return parent;\n}\n\nexport function getNthParentFromTop(win : CrossDomainWindowType, n : number = 1) : ?CrossDomainWindowType {\n    return getNthParent(win, getDistanceFromTop(win) - n);\n}\n\nexport function isSameTopWindow(win1 : CrossDomainWindowType, win2 : CrossDomainWindowType) : boolean {\n\n    let top1 = getTop(win1) || win1;\n    let top2 = getTop(win2) || win2;\n\n    try {\n        if (top1 && top2) {\n            if (top1 === top2) {\n                return true;\n            }\n\n            return false;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    let allFrames1 = getAllFramesInWindow(win1);\n    let allFrames2 = getAllFramesInWindow(win2);\n\n    if (anyMatch(allFrames1, allFrames2)) {\n        return true;\n    }\n\n    let opener1 = getOpener(top1);\n    let opener2 = getOpener(top2);\n\n    if (opener1 && anyMatch(getAllFramesInWindow(opener1), allFrames2)) {\n        return false;\n    }\n\n    if (opener2 && anyMatch(getAllFramesInWindow(opener2), allFrames1)) {\n        return false;\n    }\n\n    return false;\n}\n\nexport function matchDomain(pattern : DomainMatcher, origin : DomainMatcher) : boolean {\n\n    if (typeof pattern === 'string') {\n\n        if (typeof origin === 'string') {\n            return pattern === WILDCARD || origin === pattern;\n        }\n\n        if (isRegex(origin)) {\n            return false;\n        }\n\n        if (Array.isArray(origin)) {\n            return false;\n        }\n    }\n\n    if (isRegex(pattern)) {\n\n        if (isRegex(origin)) {\n            return pattern.toString() === origin.toString();\n        }\n\n        if (Array.isArray(origin)) {\n            return false;\n        }\n\n        // $FlowFixMe\n        return Boolean(origin.match(pattern));\n    }\n\n    if (Array.isArray(pattern)) {\n\n        if (Array.isArray(origin)) {\n            return JSON.stringify(pattern) === JSON.stringify(origin);\n        }\n\n        if (isRegex(origin)) {\n            return false;\n        }\n\n        return pattern.some(subpattern => matchDomain(subpattern, origin));\n    }\n\n    return false;\n}\n\nexport function stringifyDomainPattern(pattern : DomainMatcher) : string {\n    if (Array.isArray(pattern)) {\n        return `(${ pattern.join(' | ') })`;\n    } else if (isRegex(pattern)) {\n        return `RegExp(${ pattern.toString() }`;\n    } else {\n        return pattern.toString();\n    }\n}\n\nexport function getDomainFromUrl(url : string) : string {\n\n    let domain;\n\n    if (url.match(/^(https?|mock|file):\\/\\//)) {\n        domain = url;\n    } else {\n        return getDomain();\n    }\n\n    domain = domain.split('/').slice(0, 3).join('/');\n\n    return domain;\n}\n\nexport function onCloseWindow(win : CrossDomainWindowType, callback : Function, delay : number = 1000, maxtime : number = Infinity) : { cancel : () => void } {\n\n    let timeout;\n\n    let check = () => {\n\n        if (isWindowClosed(win)) {\n\n            if (timeout) {\n                clearTimeout(timeout);\n            }\n\n            return callback();\n        }\n\n        if (maxtime <= 0) {\n            clearTimeout(timeout);\n        } else {\n            maxtime -= delay;\n            timeout = setTimeout(check, delay);\n        }\n    };\n\n    check();\n\n    return {\n        cancel() {\n            if (timeout) {\n                clearTimeout(timeout);\n            }\n        }\n    };\n}\n\n// eslint-disable-next-line complexity\nexport function isWindow(obj : Object) : boolean {\n\n    try {\n        if (obj === window) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (Object.prototype.toString.call(obj) === '[object Window]') {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (window.Window && obj instanceof window.Window) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.self === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.parent === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.top === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (noop(obj === obj) === '__unlikely_value__') { // eslint-disable-line no-self-compare\n            return false;\n        }\n\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if (obj && obj.__cross_domain_utils_window_check__ === '__unlikely_value__') {\n            return false;\n        }\n\n    } catch (err) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function isBrowser() : boolean {\n    return (typeof window !== 'undefined' && typeof window.location !== 'undefined');\n}\n\nexport function isCurrentDomain(domain : string) : boolean {\n    if (!isBrowser()) {\n        return false;\n    }\n\n    return (getDomain() === domain);\n}\n\nexport function isMockDomain(domain : string) : boolean {\n    return domain.indexOf(PROTOCOL.MOCK) === 0;\n}\n\nexport function normalizeMockUrl(url : string) : string {\n    if (!isMockDomain(getDomainFromUrl(url))) {\n        return url;\n    }\n\n    if (!__TEST__) {\n        throw new Error(`Mock urls not supported out of test mode`);\n    }\n\n    return url.replace(/^mock:\\/\\/[^/]+/, getActualDomain(window));\n}\n\nexport function closeWindow(win : CrossDomainWindowType) {\n    try {\n        win.close();\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function getFrameForWindow(win : CrossDomainWindowType) : ?HTMLElement {\n    if (isSameDomain(win)) {\n        return assertSameDomain(win).frameElement;\n    }\n\n    for (const frame of document.querySelectorAll('iframe')) {\n        if (frame && frame.contentWindow && frame.contentWindow === win) {\n            return frame;\n        }\n    }\n}\n","/* @flow */\n\nexport function isPromise(item : mixed) : boolean {\n    try {\n        if (!item) {\n            return false;\n        }\n\n        if (typeof Promise !== 'undefined' && item instanceof Promise) {\n            return true;\n        }\n\n        if (typeof window !== 'undefined' && typeof window.Window === 'function' && item instanceof window.Window) {\n            return false;\n        }\n\n        if (typeof window !== 'undefined' && typeof window.constructor === 'function' && item instanceof window.constructor) {\n            return false;\n        }\n\n        let toString = ({}).toString;\n\n        if (toString) {\n            let name = toString.call(item);\n\n            if (name === '[object Window]' || name === '[object global]' || name === '[object DOMWindow]') {\n                return false;\n            }\n        }\n\n        if (typeof item.then === 'function') {\n            return true;\n        }\n    } catch (err) {\n        return false;\n    }\n\n    return false;\n}\n","/* @flow */\n\nimport type { ZalgoPromise } from './promise';\n\nconst dispatchedErrors = [];\nconst possiblyUnhandledPromiseHandlers : Array<(mixed, promise? : ZalgoPromise<mixed>) => void> = [];\n\nexport function dispatchPossiblyUnhandledError<T>(err : mixed, promise : ZalgoPromise<T>) {\n\n    if (dispatchedErrors.indexOf(err) !== -1) {\n        return;\n    }\n\n    dispatchedErrors.push(err);\n\n    setTimeout(() => {\n        if (__DEBUG__) {\n            // $FlowFixMe\n            throw new Error(`${ err.stack || err.toString() }\\n\\nFrom promise:\\n\\n${ promise.stack }`);\n        }\n\n        throw err;\n    }, 1);\n\n    for (let j = 0; j < possiblyUnhandledPromiseHandlers.length; j++) {\n        // $FlowFixMe\n        possiblyUnhandledPromiseHandlers[j](err, promise);\n    }\n}\n\nexport function onPossiblyUnhandledException(handler : (mixed, promise? : ZalgoPromise<mixed>) => void) : { cancel : () => void } {\n    possiblyUnhandledPromiseHandlers.push(handler);\n\n    return {\n        cancel() {\n            possiblyUnhandledPromiseHandlers.splice(possiblyUnhandledPromiseHandlers.indexOf(handler), 1);\n        }\n    };\n}\n","/* @flow */\n\nimport type { ZalgoPromise } from './promise';\n\nlet activeCount = 0;\nlet flushPromise;\n\nfunction flushActive() {\n    if (!activeCount && flushPromise) {\n        const promise = flushPromise;\n        flushPromise = null;\n        promise.resolve();\n    }\n}\n\nexport function startActive() {\n    activeCount += 1;\n}\n\nexport function endActive() {\n    activeCount -= 1;\n    flushActive();\n}\n\nexport function awaitActive(Zalgo : Class<ZalgoPromise<*>>) : ZalgoPromise<void> { // eslint-disable-line no-undef\n    let promise = flushPromise = flushPromise || new Zalgo();\n    flushActive();\n    return promise;\n}\n","/* @flow */\n\nimport { isPromise } from './utils';\nimport { onPossiblyUnhandledException, dispatchPossiblyUnhandledError } from './exceptions';\nimport { startActive, endActive, awaitActive } from './flush';\n\nexport class ZalgoPromise<R : mixed> {\n\n    resolved : boolean\n    rejected : boolean\n    errorHandled : boolean\n    value : R\n    error : mixed\n    handlers : Array<{\n        promise : ZalgoPromise<*>,\n        onSuccess : void | (result : R) => mixed,\n        onError : void | (error : mixed) => mixed\n    }>\n    dispatching : boolean\n    stack : string\n\n    constructor(handler : ?(resolve : (result : R) => void, reject : (error : mixed) => void) => void) {\n\n        this.resolved = false;\n        this.rejected = false;\n        this.errorHandled = false;\n\n        this.handlers = [];\n\n        if (handler) {\n\n            let result;\n            let error;\n            let resolved = false;\n            let rejected = false;\n            let isAsync = false;\n\n            startActive();\n\n            try {\n                handler(res => {\n                    if (isAsync) {\n                        this.resolve(res);\n                    } else {\n                        resolved = true;\n                        result = res;\n                    }\n\n                }, err => {\n                    if (isAsync) {\n                        this.reject(err);\n                    } else {\n                        rejected = true;\n                        error = err;\n                    }\n                });\n\n            } catch (err) {\n                endActive();\n                this.reject(err);\n                return;\n            }\n\n            endActive();\n\n            isAsync = true;\n\n            if (resolved) {\n                // $FlowFixMe\n                this.resolve(result);\n            } else if (rejected) {\n                this.reject(error);\n            }\n        }\n\n        if (__DEBUG__) {\n            try {\n                throw new Error(`ZalgoPromise`);\n            } catch (err) {\n                this.stack = err.stack;\n            }\n        }\n    }\n\n    resolve(result : R) : ZalgoPromise<R> {\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        if (isPromise(result)) {\n            throw new Error('Can not resolve promise with another promise');\n        }\n\n        this.resolved = true;\n        this.value = result;\n        this.dispatch();\n\n        return this;\n    }\n\n    reject(error : mixed) : ZalgoPromise<R> {\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        if (isPromise(error)) {\n            throw new Error('Can not reject promise with another promise');\n        }\n\n        if (!error) {\n            // $FlowFixMe\n            let err = (error && typeof error.toString === 'function' ? error.toString() : Object.prototype.toString.call(error));\n            error = new Error(`Expected reject to be called with Error, got ${ err }`);\n        }\n\n        this.rejected = true;\n        this.error = error;\n\n        if (!this.errorHandled) {\n            setTimeout(() => {\n                if (!this.errorHandled) {\n                    dispatchPossiblyUnhandledError(error, this);\n                }\n            }, 1);\n        }\n\n        this.dispatch();\n\n        return this;\n    }\n\n    asyncReject(error : mixed) : ZalgoPromise<R> {\n        this.errorHandled = true;\n        this.reject(error);\n        return this;\n    }\n    \n    dispatch() {\n\n        let { dispatching, resolved, rejected, handlers } = this;\n\n        if (dispatching) {\n            return;\n        }\n\n        if (!resolved && !rejected) {\n            return;\n        }\n\n        this.dispatching = true;\n        startActive();\n\n        const chain = <T>(firstPromise : ZalgoPromise<T>, secondPromise : ZalgoPromise<T>) => {\n            return firstPromise.then(res => {\n                secondPromise.resolve(res);\n            }, err => {\n                secondPromise.reject(err);\n            });\n        };\n\n        for (let i = 0; i < handlers.length; i++) {\n\n            let { onSuccess, onError, promise } = handlers[i];\n\n            let result;\n\n            if (resolved) {\n\n                try {\n                    result = onSuccess ? onSuccess(this.value) : this.value;\n                } catch (err) {\n                    promise.reject(err);\n                    continue;\n                }\n\n            } else if (rejected) {\n\n                if (!onError) {\n                    promise.reject(this.error);\n                    continue;\n                }\n\n                try {\n                    result = onError(this.error);\n                } catch (err) {\n                    promise.reject(err);\n                    continue;\n                }\n            }\n\n            if (result instanceof ZalgoPromise && (result.resolved || result.rejected)) {\n\n                if (result.resolved) {\n                    promise.resolve(result.value);\n                } else {\n                    promise.reject(result.error);\n                }\n\n                result.errorHandled = true;\n\n            } else if (isPromise(result)) {\n\n                if (result instanceof ZalgoPromise && (result.resolved || result.rejected)) {\n                    if (result.resolved) {\n                        promise.resolve(result.value);\n                    } else {\n                        promise.reject(result.error);\n                    }\n\n                } else {\n                    // $FlowFixMe\n                    chain(result, promise);\n                }\n\n            } else {\n\n                promise.resolve(result);\n            }\n        }\n\n        handlers.length = 0;\n        this.dispatching = false;\n        endActive();\n    }\n\n    then<X : mixed, Y : mixed>(onSuccess : void | (result : R) => (ZalgoPromise<X> | Y), onError : void | (error : mixed) => (ZalgoPromise<X> | Y)) : ZalgoPromise<X | Y> {\n\n        if (onSuccess && typeof onSuccess !== 'function' && !onSuccess.call) {\n            throw new Error('Promise.then expected a function for success handler');\n        }\n\n        if (onError && typeof onError !== 'function' && !onError.call) {\n            throw new Error('Promise.then expected a function for error handler');\n        }\n\n        let promise : ZalgoPromise<X | Y> = new ZalgoPromise();\n\n        this.handlers.push({\n            promise,\n            onSuccess,\n            onError\n        });\n\n        this.errorHandled = true;\n\n        this.dispatch();\n\n        return promise;\n    }\n\n    catch<X : mixed, Y : mixed>(onError : (error : mixed) => ZalgoPromise<X> | Y) : ZalgoPromise<X | Y> {\n        return this.then(undefined, onError);\n    }\n\n    finally(onFinally : () => mixed) : ZalgoPromise<R> {\n\n        if (onFinally && typeof onFinally !== 'function' && !onFinally.call) {\n            throw new Error('Promise.finally expected a function');\n        }\n\n        return this.then((result) => {\n            return ZalgoPromise.try(onFinally)\n                .then(() => {\n                    return result;\n                });\n        }, (err) => {\n            return ZalgoPromise.try(onFinally)\n                .then(() => {\n                    throw err;\n                });\n        });\n    }\n\n    timeout(time : number, err : ?Error) : ZalgoPromise<R> {\n\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        let timeout = setTimeout(() => {\n\n            if (this.resolved || this.rejected) {\n                return;\n            }\n\n            this.reject(err || new Error(`Promise timed out after ${ time }ms`));\n\n        }, time);\n\n        return this.then(result => {\n            clearTimeout(timeout);\n            return result;\n        });\n    }\n\n    // $FlowFixMe\n    toPromise() : Promise<R> {\n        // $FlowFixMe\n        if (typeof Promise === 'undefined') {\n            throw new TypeError(`Could not find Promise`);\n        }\n        // $FlowFixMe\n        return Promise.resolve(this); // eslint-disable-line compat/compat\n    }\n\n    static resolve<X : mixed>(value : X | ZalgoPromise<X>) : ZalgoPromise<X> {\n\n        if (value instanceof ZalgoPromise) {\n            return value;\n        }\n\n        if (isPromise(value)) {\n            // $FlowFixMe\n            return new ZalgoPromise((resolve, reject) => value.then(resolve, reject));\n        }\n\n        return new ZalgoPromise().resolve(value);\n    }\n\n    static reject(error : mixed) : ZalgoPromise<R> {\n        return new ZalgoPromise().reject(error);\n    }\n\n    static asyncReject(error : mixed) : ZalgoPromise<R> {\n        return new ZalgoPromise().asyncReject(error);\n    }\n\n    static all<X : Array<mixed>>(promises : X) : ZalgoPromise<$TupleMap<X, <Y>(ZalgoPromise<Y> | Y) => Y>> { // eslint-disable-line no-undef\n\n        let promise = new ZalgoPromise();\n        let count = promises.length;\n        let results = [];\n\n        if (!count) {\n            promise.resolve(results);\n            return promise;\n        }\n\n        const chain = <T>(i : number, firstPromise : ZalgoPromise<T>, secondPromise : ZalgoPromise<T>) => {\n            return firstPromise.then(res => {\n                results[i] = res;\n                count -= 1;\n                if (count === 0) {\n                    promise.resolve(results);\n                }\n            }, err => {\n                secondPromise.reject(err);\n            });\n        };\n\n        for (let i = 0; i < promises.length; i++) {\n            let prom = promises[i];\n\n            if (prom instanceof ZalgoPromise) {\n                if (prom.resolved) {\n                    results[i] = prom.value;\n                    count -= 1;\n                    continue;\n                }\n            } else if (!isPromise(prom)) {\n                results[i] = prom;\n                count -= 1;\n                continue;\n            }\n\n            chain(i, ZalgoPromise.resolve(prom), promise);\n        }\n\n        if (count === 0) {\n            promise.resolve(results);\n        }\n\n        return promise;\n    }\n\n    static hash<O : Object>(promises : O) : ZalgoPromise<$ObjMap<O, <Y>(ZalgoPromise<Y> | Y) => Y>> { // eslint-disable-line no-undef\n        let result = {};\n        \n        return ZalgoPromise.all(Object.keys(promises).map(key => {\n            return ZalgoPromise.resolve(promises[key]).then(value => {\n                result[key] = value;\n            });\n        })).then(() => {\n            return result;\n        });\n    }\n\n    static map<T, X>(items : Array<T>, method : (T) => (ZalgoPromise<X> | X)) : ZalgoPromise<Array<X>> {\n        // $FlowFixMe\n        return ZalgoPromise.all(items.map(method));\n    }\n\n    static onPossiblyUnhandledException(handler : (err : mixed) => void) : { cancel : () => void } {\n        return onPossiblyUnhandledException(handler);\n    }\n\n    static try<X : mixed, Y : mixed, C : mixed, A : Array<mixed>>(method : (...args : A) => (ZalgoPromise<X> | Y), context : ?C, args : ?A) : ZalgoPromise<X | Y> {\n\n        if (method && typeof method !== 'function' && !method.call) {\n            throw new Error('Promise.try expected a function');\n        }\n\n        let result;\n\n        startActive();\n        \n        try {\n            // $FlowFixMe\n            result = method.apply(context, args || []);\n        } catch (err) {\n            endActive();\n            return ZalgoPromise.reject(err);\n        }\n\n        endActive();\n\n        return ZalgoPromise.resolve(result);\n    }\n\n    static delay(delay : number) : ZalgoPromise<void> {\n        return new ZalgoPromise(resolve => {\n            setTimeout(resolve, delay);\n        });\n    }\n\n    static isPromise(value : mixed) : boolean {\n\n        if (value && value instanceof ZalgoPromise) {\n            return true;\n        }\n\n        return isPromise(value);\n    }\n\n    static flush() : ZalgoPromise<void> {\n        return awaitActive(ZalgoPromise);\n    }\n}\n","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","/* @flow */\n\nexport function safeIndexOf<T>(collection : Array<T>, item : T) : number {\n    for (let i = 0; i < collection.length; i++) {\n\n        try {\n            if (collection[i] === item) {\n                return i;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    return -1;\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : Array<mixed>) {\n    // pass\n}\n","/* @flow */\n\nimport { isWindow, isWindowClosed } from 'cross-domain-utils/src';\n\nimport { hasNativeWeakMap } from './native';\nimport { noop, safeIndexOf } from './util';\n\nexport class CrossDomainSafeWeakMap<K : Object, V : mixed> {\n\n    name : string\n    weakmap : ?WeakMap<K, V>\n    keys : Array<K>\n    values : Array<V>\n\n    constructor() {\n        // eslint-disable-next-line no-bitwise\n        this.name = `__weakmap_${ Math.random() * 1e9 >>> 0 }__`;\n\n        if (hasNativeWeakMap()) {\n            try {\n                this.weakmap = new WeakMap();\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this.keys  = [];\n        this.values = [];\n    }\n\n    _cleanupClosedWindows() {\n\n        let weakmap = this.weakmap;\n        let keys = this.keys;\n\n        for (let i = 0; i < keys.length; i++) {\n            let value = keys[i];\n\n            if (isWindow(value) && isWindowClosed(value)) {\n\n                if (weakmap) {\n                    try {\n                        weakmap.delete(value);\n                    } catch (err) {\n                        // pass\n                    }\n                }\n\n                keys.splice(i, 1);\n                this.values.splice(i, 1);\n\n                i -= 1;\n            }\n        }\n    }\n\n    isSafeToReadWrite(key : K) : boolean {\n\n        if (isWindow(key)) {\n            return false;\n        }\n\n        try {\n            noop(key && key.self);\n            noop(key && key[this.name]);\n        } catch (err) {\n            return false;\n        }\n\n        return true;\n    }\n\n    set(key : K, value : V) {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                weakmap.set(key, value);\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (this.isSafeToReadWrite(key)) {\n            try {\n                let name = this.name;\n                let entry = key[name];\n\n                if (entry && entry[0] === key) {\n                    entry[1] = value;\n                } else {\n                    Object.defineProperty(key, name, {\n                        value:    [ key, value ],\n                        writable: true\n                    });\n                }\n\n                return;\n\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this._cleanupClosedWindows();\n\n        let keys = this.keys;\n        let values = this.values;\n        let index = safeIndexOf(keys, key);\n\n        if (index === -1) {\n            keys.push(key);\n            values.push(value);\n        } else {\n            values[index] = value;\n        }\n    }\n\n    get(key : K) : V | void {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                if (weakmap.has(key)) {\n                    return weakmap.get(key);\n                }\n                \n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (this.isSafeToReadWrite(key)) {\n            try {\n                let entry = key[this.name];\n\n                if (entry && entry[0] === key) {\n                    return entry[1];\n                }\n\n                return;\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this._cleanupClosedWindows();\n\n        let keys = this.keys;\n        let index = safeIndexOf(keys, key);\n\n        if (index === -1) {\n            return;\n        }\n\n        return this.values[index];\n    }\n\n    delete(key : K) {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                weakmap.delete(key);\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (this.isSafeToReadWrite(key)) {\n            try {\n                let entry = key[this.name];\n\n                if (entry && entry[0] === key) {\n                    entry[0] = entry[1] = undefined;\n                }\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this._cleanupClosedWindows();\n\n        let keys = this.keys;\n        let index = safeIndexOf(keys, key);\n\n        if (index !== -1) {\n            keys.splice(index, 1);\n            this.values.splice(index, 1);\n        }\n    }\n\n    has(key : K) : boolean {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                if (weakmap.has(key)) {\n                    return true;\n                }\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (this.isSafeToReadWrite(key)) {\n            try {\n                let entry = key[this.name];\n\n                if (entry && entry[0] === key) {\n                    return true;\n                }\n\n                return false;\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this._cleanupClosedWindows();\n\n        let index = safeIndexOf(this.keys, key);\n        return index !== -1;\n    }\n\n    getOrSet(key : K, getter : () => V) : V {\n        if (this.has(key)) {\n            // $FlowFixMe\n            return this.get(key);\n        }\n\n        let value = getter();\n        this.set(key, value);\n        return value;\n    }\n}\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\n\nimport type { CancelableType } from './types';\n\nexport function getFunctionName <T : Function>(fn : T) : string {\n    return fn.name || fn.__name__ || fn.displayName || 'anonymous';\n}\n\nexport function setFunctionName <T : Function>(fn : T, name : string) : T {\n    try {\n        delete fn.name;\n        fn.name = name;\n    } catch (err) {\n        // pass\n    }\n\n    fn.__name__ = fn.displayName = name;\n    return fn;\n}\n\nexport function base64encode(str : string) : string {\n    if (typeof btoa === 'function') {\n        return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, (m, p1) => {\n            return String.fromCharCode(parseInt(p1, 16));\n        }));\n    }\n\n    if (typeof Buffer !== 'undefined') {\n        return Buffer.from(str, 'utf8').toString('base64');\n    }\n\n    throw new Error(`Can not find window.btoa or Buffer`);\n}\n\nexport function base64decode(str : string) : string {\n    if (typeof atob === 'function') {\n        return decodeURIComponent(Array.prototype.map.call(atob(str), c => {\n            // eslint-disable-next-line prefer-template\n            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n        }).join(''));\n    }\n\n    if (typeof Buffer !== 'undefined') {\n        return Buffer.from(str, 'base64').toString('utf8');\n    }\n\n    throw new Error(`Can not find window.atob or Buffer`);\n}\n\nexport function uniqueID() : string {\n\n    let chars = '0123456789abcdef';\n\n    let randomID = 'xxxxxxxxxx'.replace(/./g, () => {\n        return chars.charAt(Math.floor(Math.random() * chars.length));\n    });\n\n    let timeID = base64encode(\n        new Date().toISOString().slice(11, 19).replace('T', '.')\n    ).replace(/[^a-zA-Z0-9]/g, '').toLowerCase();\n\n    return `${ randomID }_${ timeID }`;\n}\n\nexport function getGlobal() : Object {\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n    if (typeof global !== 'undefined') {\n        return global;\n    }\n    if (typeof __GLOBAL__ !== 'undefined') {\n        return __GLOBAL__;\n    }\n    throw new Error(`No global found`);\n}\n\nlet objectIDs;\n\nexport function getObjectID(obj : Object) : string {\n\n    objectIDs = objectIDs || new WeakMap();\n\n    if (obj === null || obj === undefined || (typeof obj !== 'object' && typeof obj !== 'function')) {\n        throw new Error(`Invalid object`);\n    }\n\n    let uid = objectIDs.get(obj);\n\n    if (!uid) {\n        uid = `${ typeof obj }:${ uniqueID() }`;\n        objectIDs.set(obj, uid);\n    }\n\n    return uid;\n}\n\nfunction serializeArgs<T>(args : Array<T>) : string {\n    try {\n        return JSON.stringify(Array.prototype.slice.call(args), (subkey, val) => {\n            if (typeof val === 'function') {\n                return `memoize[${ getObjectID(val) }]`;\n            }\n            return val;\n        });\n    } catch (err) {\n        throw new Error(`Arguments not serializable -- can not be used to memoize`);\n    }\n}\nexport function memoize<A, R, F : (...args : Array<A>) => R, X : { (...args : Array<A>) : R, displayName : string, reset : () => void }>(method : F, options : { time? : number, thisNamespace? : boolean } = {}) : X {\n    let cacheMap = new WeakMap();\n\n    // $FlowFixMe\n    let memoizedFunction : X = function memoizedFunction(...args : Array<A>) : R {\n        let cache = cacheMap.getOrSet(options.thisNamespace ? this : method, () => ({}));\n\n        let key : string = serializeArgs(args);\n\n        let cacheTime = options.time;\n        if (cache[key] && cacheTime && (Date.now() - cache[key].time) < cacheTime) {\n            delete cache[key];\n        }\n\n        if (cache[key]) {\n            return cache[key].value;\n        }\n\n        let time  = Date.now();\n        let value = method.apply(this, arguments);\n\n        cache[key] = { time, value };\n\n        return cache[key].value;\n    };\n\n    memoizedFunction.reset = () => {\n        cacheMap.delete(options.thisNamespace ? this : method);\n    };\n\n    return setFunctionName(memoizedFunction, `${ getFunctionName(method) }::memoized`);\n}\n\nexport function promiseIdentity<T : mixed>(item : ZalgoPromise<T> | T) : ZalgoPromise<T> {\n    // $FlowFixMe\n    return ZalgoPromise.resolve(item);\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function memoizePromise<R>(method : (...args : Array<any>) => ZalgoPromise<R>) : ((...args : Array<any>) => ZalgoPromise<R>) {\n    let cache = {};\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    function memoizedPromiseFunction(...args : Array<any>) : ZalgoPromise<R> {\n        let key : string = serializeArgs(args);\n\n        if (cache.hasOwnProperty(key)) {\n            return cache[key];\n        }\n\n        cache[key] = ZalgoPromise.try(() => method.apply(this, arguments))\n            .finally(() => {\n                delete cache[key];\n            });\n\n        return cache[key];\n    }\n\n    memoizedPromiseFunction.reset = () => {\n        cache = {};\n    };\n\n    return setFunctionName(memoizedPromiseFunction, `${ getFunctionName(method) }::promiseMemoized`);\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function promisify<R>(method : (...args : Array<any>) => R, options : { name? : string } = {}) : ((...args : Array<any>) => ZalgoPromise<R>) {\n    function promisifiedFunction() : ZalgoPromise<R> {\n        return ZalgoPromise.try(method, this, arguments);\n    }\n\n    if (options.name) {\n        promisifiedFunction.displayName = `${ options.name }:promisified`;\n    }\n\n    return setFunctionName(promisifiedFunction, `${ getFunctionName(method) }::promisified`);\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function inlineMemoize<R>(method : (...args : Array<any>) => R, logic : (...args : Array<any>) => R, args : Array<any> = []) : R {\n    // $FlowFixMe\n    let cache = method.__inline_memoize_cache__ = method.__inline_memoize_cache__ || {};\n    let key = serializeArgs(args);\n\n    if (cache.hasOwnProperty(key)) {\n        return cache[key];\n    }\n    \n    let result = cache[key] = logic(...args);\n\n    return result;\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : Array<mixed>) {\n    // pass\n}\n\nexport function once(method : Function) : Function {\n    let called = false;\n\n    const onceFunction = function() : mixed {\n        if (!called) {\n            called = true;\n            return method.apply(this, arguments);\n        }\n    };\n\n    return setFunctionName(onceFunction, `${ getFunctionName(method) }::once`);\n}\n\nexport function hashStr(str : string) : number {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n        hash += str[i].charCodeAt(0) * Math.pow((i % 10) + 1, 5);\n    }\n    return Math.floor(Math.pow(Math.sqrt(hash), 5));\n}\n\nexport function strHashStr(str : string) : string {\n    let hash = '';\n\n    for (let i = 0; i < str.length; i++) {\n        let total = (str[i].charCodeAt(0) * i);\n\n        if (str[i + 1]) {\n            total += (str[i + 1].charCodeAt(0) * (i - 1));\n        }\n\n        hash += String.fromCharCode(97 + (Math.abs(total) % 26));\n    }\n\n    return hash;\n}\n\nexport function match(str : string, pattern : RegExp) : ?string {\n    let regmatch = str.match(pattern);\n    if (regmatch) {\n        return regmatch[1];\n    }\n}\n\nexport function awaitKey<T: mixed>(obj : Object, key : string) : ZalgoPromise<T> {\n    return new ZalgoPromise(resolve => {\n\n        let value = obj[key];\n\n        if (value) {\n            return resolve(value);\n        }\n\n        delete obj[key];\n\n        Object.defineProperty(obj, key, {\n\n            configurable: true,\n\n            set(item) {\n                value = item;\n\n                if (value) {\n                    resolve(value);\n                }\n            },\n\n            get() : mixed {\n                return value;\n            }\n        });\n    });\n}\n\nexport function stringifyError(err : mixed, level : number = 1) : string {\n\n    if (level >= 3) {\n        return 'stringifyError stack overflow';\n    }\n\n    try {\n        if (!err) {\n            return `<unknown error: ${ Object.prototype.toString.call(err) }>`;\n        }\n\n        if (typeof err === 'string') {\n            return err;\n        }\n\n        if (err instanceof Error) {\n            let stack = err && err.stack;\n            let message = err && err.message;\n\n            if (stack && message) {\n                if (stack.indexOf(message) !== -1) {\n                    return stack;\n                } else {\n                    return `${ message }\\n${ stack }`;\n                }\n            } else if (stack) {\n                return stack;\n            } else if (message) {\n                return message;\n            }\n        }\n\n        if (err && err.toString && typeof err.toString === 'function') {\n            // $FlowFixMe\n            return err.toString();\n        }\n\n        return Object.prototype.toString.call(err);\n\n    } catch (newErr) { // eslint-disable-line unicorn/catch-error-name\n        return `Error while stringifying error: ${ stringifyError(newErr, level + 1) }`;\n    }\n}\n\nexport function stringifyErrorMessage(err : mixed) : string {\n\n    let defaultMessage = `<unknown error: ${ Object.prototype.toString.call(err) }>`;\n\n    if (!err) {\n        return defaultMessage;\n    }\n\n    if (err instanceof Error) {\n        return err.message || defaultMessage;\n    }\n\n    if (typeof err.message === 'string') {\n        return err.message || defaultMessage;\n    }\n\n    return defaultMessage;\n}\n\nexport function stringify(item : mixed) : string {\n    if (typeof item === 'string') {\n        return item;\n    }\n\n    if (item && item.toString && typeof item.toString === 'function') {\n        // $FlowFixMe\n        return item.toString();\n    }\n\n    return Object.prototype.toString.call(item);\n}\n\nexport function domainMatches(hostname : string, domain : string) : boolean {\n    hostname = hostname.split('://')[1];\n    let index = hostname.indexOf(domain);\n    return (index !== -1 && hostname.slice(index) === domain);\n}\n\nexport function patchMethod(obj : Object, name : string, handler : Function) {\n    let original = obj[name];\n\n    obj[name] = function patchedMethod() : mixed {\n        return handler({\n            context:      this,\n            args:         Array.prototype.slice.call(arguments),\n            original,\n            callOriginal: () => original.apply(this, arguments)\n        });\n    };\n}\n\nexport function extend<T : Object | Function>(obj : T, source : Object) : T {\n    if (!source) {\n        return obj;\n    }\n\n    if (Object.assign) {\n        return Object.assign(obj, source);\n    }\n\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            obj[key] = source[key];\n        }\n    }\n\n    return obj;\n}\n\nexport function values<T>(obj : { [string] : T }) : Array<T> {\n    let result = [];\n    for (let key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            result.push(obj[key]);\n        }\n    }\n    return result;\n}\n\nexport function perc(pixels : number, percentage : number) : number {\n    return Math.round((pixels * percentage) / 100);\n}\n\nexport function min(...args : Array<number>) : number {\n    return Math.min(...args);\n}\n\nexport function max(...args : Array<number>) : number {\n    return Math.max(...args);\n}\n\nexport function regexMap<T>(str : string, regexp : RegExp, handler : () => T) : Array<T> {\n    let results = [];\n\n    // $FlowFixMe\n    str.replace(regexp, function regexMapMatcher(item) {\n        results.push(handler ? handler.apply(null, arguments) : item);\n    });\n\n    // $FlowFixMe\n    return results;\n}\n\nexport function svgToBase64(svg : string) : string {\n    return `data:image/svg+xml;base64,${ base64encode(svg) }`;\n}\n\nexport function objFilter<T, R>(obj : { [string] : T }, filter? : (T, ?string) => mixed = Boolean) : { [string] : R } {\n    let result = {};\n\n    for (let key in obj) {\n        if (!obj.hasOwnProperty(key) || !filter(obj[key], key)) {\n            continue;\n        }\n\n        result[key] = obj[key];\n    }\n\n    return result;\n}\n\nexport function identity <T>(item : T) : T {\n    return item;\n}\n\nexport function regexTokenize(text : string, regexp : RegExp) : Array<string> {\n    let result = [];\n    text.replace(regexp, token => {\n        result.push(token);\n        return '';\n    });\n    return result;\n}\n\nexport function promiseDebounce<T>(method : () => ZalgoPromise<T> | T, delay : number = 50) : () => ZalgoPromise<T> {\n\n    let promise;\n    let timeout;\n\n    const promiseDebounced = function() : ZalgoPromise<T> {\n        if (timeout) {\n            clearTimeout(timeout);\n        }\n\n        let localPromise = promise = promise || new ZalgoPromise();\n\n        timeout = setTimeout(() => {\n            promise = null;\n            timeout = null;\n\n            ZalgoPromise.try(method).then(\n                result => { localPromise.resolve(result); },\n                err => { localPromise.reject(err); }\n            );\n        }, delay);\n\n        return localPromise;\n    };\n\n    return setFunctionName(promiseDebounced, `${ getFunctionName(method) }::promiseDebounced`);\n}\n\nexport function safeInterval(method : Function, time : number) : { cancel : () => void } {\n\n    let timeout;\n\n    function loop() {\n        timeout = setTimeout(() => {\n            method();\n            loop();\n        }, time);\n    }\n\n    loop();\n\n    return {\n        cancel() {\n            clearTimeout(timeout);\n        }\n    };\n}\n\nexport function isInteger(str : string) : boolean {\n    return Boolean(str.match(/^[0-9]+$/));\n}\n\nexport function isFloat(str : string) : boolean {\n    return Boolean(str.match(/^[0-9]+\\.[0-9]+$/));\n}\n\nexport function serializePrimitive(value : string | number | boolean) : string {\n    return value.toString();\n}\n\nexport function deserializePrimitive(value : string) : string | number | boolean {\n    if (value === 'true') {\n        return true;\n    } else if (value === 'false') {\n        return false;\n    } else if (isInteger(value)) {\n        return parseInt(value, 10);\n    } else if (isFloat(value)) {\n        return parseFloat(value);\n    } else {\n        return value;\n    }\n}\n\nexport function dotify(obj : Object, prefix : string = '', newobj : Object = {}) : { [string] : string } {\n    prefix = prefix ? `${ prefix }.` : prefix;\n    for (let key in obj) {\n        if (!obj.hasOwnProperty(key) || obj[key] === undefined || obj[key] === null || typeof obj[key] === 'function') {\n            continue;\n        } else if (obj[key] && Array.isArray(obj[key]) && obj[key].length && obj[key].every(val => typeof val !== 'object')) {\n            newobj[`${ prefix }${ key }[]`] = obj[key].join(',');\n        } else if (obj[key] && typeof obj[key] === 'object') {\n            newobj = dotify(obj[key], `${ prefix }${ key }`, newobj);\n        } else {\n            newobj[`${ prefix }${ key }`] = serializePrimitive(obj[key]);\n        }\n    }\n    return newobj;\n}\n\nexport function undotify(obj : { [string] : string }) : Object {\n    \n    let result = {};\n\n    for (let key in obj) {\n        if (!obj.hasOwnProperty(key) || typeof obj[key] !== 'string') {\n            continue;\n        }\n\n        let value = obj[key];\n\n        if (key.match(/^.+\\[\\]$/)) {\n            key = key.slice(0, key.length - 2);\n            value = value.split(',').map(deserializePrimitive);\n        } else {\n            value = deserializePrimitive(value);\n        }\n\n        let keyResult = result;\n        let parts = key.split('.');\n        for (let i = 0; i < parts.length; i++) {\n            let part = parts[i];\n            let isLast = (i + 1 === parts.length);\n            let isIndex = !isLast && isInteger(parts[i + 1]);\n\n            if (part === 'constructor' || part === 'prototype' || part === '__proto__') {\n                throw new Error(`Disallowed key: ${ part }`);\n            }\n\n            if (isLast) {\n                // $FlowFixMe\n                keyResult[part] = value;\n            } else {\n                // $FlowFixMe\n                keyResult = keyResult[part] = keyResult[part] || (isIndex ? [] : {});\n            }\n        }\n    }\n\n    return result;\n}\n\nexport type EventEmitterType = {\n    on : (eventName : string, handler : Function) => CancelableType,\n    once : (eventName : string, handler : Function) => CancelableType,\n    trigger : (eventName : string, ...args : $ReadOnlyArray<mixed>) => ZalgoPromise<void>,\n    triggerOnce : (eventName : string, ...args : $ReadOnlyArray<mixed>) => ZalgoPromise<void>\n};\n\nexport function eventEmitter() : EventEmitterType {\n    let triggered = {};\n    let handlers = {};\n\n    return {\n\n        on(eventName : string, handler : Function) : CancelableType {\n            let handlerList = handlers[eventName] = handlers[eventName] || [];\n\n            handlerList.push(handler);\n\n            let cancelled = false;\n\n            return {\n                cancel() {\n                    if (!cancelled) {\n                        cancelled = true;\n                        handlerList.splice(handlerList.indexOf(handler), 1);\n                    }\n\n                }\n            };\n        },\n\n        once(eventName : string, handler : Function) : CancelableType {\n\n            let listener = this.on(eventName, () => {\n                listener.cancel();\n                handler();\n            });\n\n            return listener;\n        },\n\n        trigger(eventName : string, ...args : $ReadOnlyArray<mixed>) : ZalgoPromise<void> {\n\n            let handlerList = handlers[eventName];\n            let promises = [];\n\n            if (handlerList) {\n                for (let handler of handlerList) {\n                    promises.push(ZalgoPromise.try(() => handler(...args)));\n                }\n            }\n\n            return ZalgoPromise.all(promises).then(noop);\n        },\n\n        triggerOnce(eventName : string, ...args : $ReadOnlyArray<mixed>) : ZalgoPromise<void> {\n\n            if (triggered[eventName]) {\n                return ZalgoPromise.resolve();\n            }\n\n            triggered[eventName] = true;\n            return this.trigger(eventName, ...args);\n        }\n    };\n}\n\nexport function camelToDasherize(string : string) : string {\n    return string.replace(/([A-Z])/g, (g) => {\n        return `-${ g.toLowerCase() }`;\n    });\n}\n\nexport function dasherizeToCamel(string : string) : string {\n    return string.replace(/-([a-z])/g, (g) => {\n        return g[1].toUpperCase();\n    });\n}\n\nexport function capitalizeFirstLetter(string : string) : string {\n    return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n}\n\nexport function get(item : Object, path : string, def : mixed) : mixed {\n\n    if (!path) {\n        return def;\n    }\n\n    let pathParts = path.split('.');\n\n    // Loop through each section of our key path\n\n    for (let i = 0; i < pathParts.length; i++) {\n\n        // If we have an object, we can get the key\n        if (typeof item === 'object' && item !== null) {\n            item = item[pathParts[i]];\n\n        // Otherwise, we should return the default (undefined if not provided)\n        } else {\n            return def;\n        }\n    }\n\n    // If our final result is undefined, we should return the default\n\n    return item === undefined ? def : item;\n}\n\nexport function safeTimeout(method : Function, time : number) {\n\n    let interval = safeInterval(() => {\n        time -= 100;\n        if (time <= 0) {\n            interval.cancel();\n            method();\n        }\n    }, 100);\n}\n\nexport function defineLazyProp<T>(obj : Object | Array<mixed>, key : string | number, getter : () => T) {\n    if (Array.isArray(obj)) {\n        if (typeof key !== 'number') {\n            throw new TypeError(`Array key must be number`);\n        }\n    } else if (typeof obj === 'object' && obj !== null) {\n        if (typeof key !== 'string') {\n            throw new TypeError(`Object key must be string`);\n        }\n    }\n    \n    Object.defineProperty(obj, key, {\n        configurable: true,\n        enumerable:   true,\n        get:          () => {\n            // $FlowFixMe\n            delete obj[key];\n            let value = getter();\n            // $FlowFixMe\n            obj[key] = value;\n            return value;\n        },\n        set: (value : T) => {\n            // $FlowFixMe\n            delete obj[key];\n            // $FlowFixMe\n            obj[key] = value;\n        }\n    });\n}\n\nexport function arrayFrom<T>(item : Iterable<T>) : Array<T> { // eslint-disable-line no-undef\n    return Array.prototype.slice.call(item);\n}\n\nexport function isObject(item : mixed) : boolean {\n    return (typeof item === 'object' && item !== null);\n}\n\nexport function isObjectObject(obj : mixed) : boolean {\n    return isObject(obj) && Object.prototype.toString.call(obj) === '[object Object]';\n}\n\nexport function isPlainObject(obj : mixed) : boolean {\n    if (!isObjectObject(obj)) {\n        return false;\n    }\n\n    // $FlowFixMe\n    let constructor = obj.constructor;\n\n    if (typeof constructor !== 'function') {\n        return false;\n    }\n\n    let prototype = constructor.prototype;\n\n    if (!isObjectObject(prototype)) {\n        return false;\n    }\n\n    if (!prototype.hasOwnProperty('isPrototypeOf')) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function replaceObject<T : Array<mixed> | Object> (item : T, replacer : (mixed, string | number, string) => mixed, fullKey : string = '') : T {\n\n    if (Array.isArray(item)) {\n        let length = item.length;\n        let result : Array<mixed> = [];\n\n        for (let i = 0; i < length; i++) {\n\n            \n            defineLazyProp(result, i, () => {\n                let itemKey = fullKey ? `${ fullKey }.${ i }` : `${ i }`;\n                let el = item[i];\n\n                let child = replacer(el, i, itemKey);\n\n                if (isPlainObject(child) || Array.isArray(child)) {\n                    // $FlowFixMe\n                    child = replaceObject(child, replacer, itemKey);\n                }\n\n                return child;\n            });\n        }\n\n        // $FlowFixMe\n        return result;\n    } else if (isPlainObject(item)) {\n        let result = {};\n\n        for (let key in item) {\n            if (!item.hasOwnProperty(key)) {\n                continue;\n            }\n\n            defineLazyProp(result, key, () => {\n                let itemKey = fullKey ? `${ fullKey }.${ key }` : `${ key }`;\n                // $FlowFixMe\n                let el = item[key];\n\n                let child = replacer(el, key, itemKey);\n\n                if (isPlainObject(child) || Array.isArray(child)) {\n                    // $FlowFixMe\n                    child = replaceObject(child, replacer, itemKey);\n                }\n\n                return child;\n            });\n        }\n\n        // $FlowFixMe\n        return result;\n    } else {\n        throw new Error(`Pass an object or array`);\n    }\n}\n\n\nexport function copyProp(source : Object, target : Object, name : string, def : mixed) {\n    if (source.hasOwnProperty(name)) {\n        let descriptor = Object.getOwnPropertyDescriptor(source, name);\n        // $FlowFixMe\n        Object.defineProperty(target, name, descriptor);\n\n    } else {\n        target[name] = def;\n    }\n}\n\ntype RegexResultType = {\n    text : string,\n    groups : Array<string>,\n    start : number,\n    end : number,\n    length : number,\n    replace : (text : string) => string\n};\n\nexport function regex(pattern : string | RegExp, string : string, start : number = 0) : ?RegexResultType {\n\n    if (typeof pattern === 'string') {\n        // eslint-disable-next-line security/detect-non-literal-regexp\n        pattern = new RegExp(pattern);\n    }\n\n    let result = string.slice(start).match(pattern);\n\n    if (!result) {\n        return;\n    }\n\n    // $FlowFixMe\n    let index : number = result.index;\n    let regmatch = result[0];\n\n    return {\n        text:   regmatch,\n        groups: result.slice(1),\n        start:  start + index,\n        end:    start + index + regmatch.length,\n        length: regmatch.length,\n\n        replace(text : string) : string {\n\n            if (!regmatch) {\n                return '';\n            }\n\n            return `${ regmatch.slice(0, start + index) }${ text }${ regmatch.slice(index + regmatch.length) }`;\n        }\n    };\n}\n\nexport function regexAll(pattern : string | RegExp, string : string) : Array<RegexResultType> {\n\n    let matches = [];\n    let start = 0;\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        let regmatch = regex(pattern, string, start);\n\n        if (!regmatch) {\n            break;\n        }\n\n        matches.push(regmatch);\n        start = match.end;\n    }\n\n    return matches;\n}\n\nexport function isDefined(value : ?mixed) : boolean {\n    return value !== null && value !== undefined;\n}\n\nexport function cycle(method : Function) : ZalgoPromise<void> {\n    return ZalgoPromise.try(method).then(() => cycle(method));\n}\n\nexport function debounce<T>(method : (...args : Array<mixed>) => T, time : number = 100) : (...args : Array<mixed>) => void {\n\n    let timeout;\n\n    const debounceWrapper = function() {\n        clearTimeout(timeout);\n\n        timeout = setTimeout(() => {\n            return method.apply(this, arguments);\n        }, time);\n    };\n\n    return setFunctionName(debounceWrapper, `${ getFunctionName(method) }::debounced`);\n}\n\nexport function isRegex(item : mixed) : boolean {\n    return Object.prototype.toString.call(item) === '[object RegExp]';\n}\n\ntype FunctionProxy<T : Function> = (method : T) => T;\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport let weakMapMemoize : FunctionProxy<*> = <R : mixed>(method : (arg : any) => R) : ((...args : Array<any>) => R) => {\n\n    let weakmap = new WeakMap();\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    return function weakmapMemoized(arg : any) : R {\n        return weakmap.getOrSet(arg, () => method.call(this, arg));\n    };\n};\n\ntype FunctionPromiseProxy<R : mixed, T : (...args : $ReadOnlyArray<mixed>) => ZalgoPromise<R>> = (T) => T;\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport let weakMapMemoizePromise : FunctionPromiseProxy<*, *> = <R : mixed>(method : (arg : any) => ZalgoPromise<R>) : ((...args : Array<any>) => ZalgoPromise<R>) => {\n\n    let weakmap = new WeakMap();\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    return function weakmapMemoizedPromise(arg : any) : ZalgoPromise<R> {\n        return weakmap.getOrSet(arg, () =>\n            method.call(this, arg).finally(() => {\n                weakmap.delete(arg);\n            })\n        );\n    };\n};\n\nexport function getOrSet<O : Object, T : mixed>(obj : O, key : string, getter : () => T) : T {\n    if (obj.hasOwnProperty(key)) {\n        return obj[key];\n    }\n\n    const val = getter();\n    obj[key] = val;\n    return val;\n}\n\nexport type CleanupType = {|\n    set : <T : mixed>(string, T) => T, // eslint-disable-line no-undef\n    register : (Function) => void,\n    all : () => ZalgoPromise<void>\n|};\n\nexport function cleanup(obj : Object) : CleanupType {\n\n    const tasks = [];\n    let cleaned = false;\n\n    return {\n        set<T : mixed>(name : string, item : T) : T {\n            if (!cleaned) {\n                obj[name] = item;\n                this.register(() => {\n                    delete obj[name];\n                });\n            }\n            return item;\n        },\n\n        register(method : Function) {\n            if (cleaned) {\n                method();\n            } else {\n                tasks.push(once(method));\n            }\n        },\n\n        all() : ZalgoPromise<void> {\n            const results = [];\n            cleaned = true;\n\n            while (tasks.length) {\n                const task = tasks.pop();\n                results.push(task());\n            }\n\n            return ZalgoPromise.all(results).then(noop);\n        }\n    };\n}\n\nexport function tryCatch<T>(fn : () => T) : {| result : T, error : void |} | {| result : void, error : mixed |} {\n    let result;\n    let error;\n\n    try {\n        result = fn();\n    } catch (err) {\n        error = err;\n    }\n    \n    // $FlowFixMe\n    return { result, error };\n}\n\nexport function removeFromArray<X, T : Array<X>>(arr : T, item : X) {\n    const index = arr.indexOf(item);\n    if (index !== -1) {\n        arr.splice(index, 1);\n    }\n}\n\nexport function assertExists<T>(name : string, thing : void | null | T) : T {\n    if (thing === null || typeof thing === 'undefined') {\n        throw new Error(`Expected ${ name } to be present`);\n    }\n                            \n    return thing;\n}\n                            \nexport function unique(arr : $ReadOnlyArray<string>) : $ReadOnlyArray<string> {\n    const result = {};\n    for (const item of arr) {\n        // eslint-disable-next-line const-immutable/no-mutation\n        result[item] = true;\n    }\n    return Object.keys(result);\n}\n","/* @flow */\n\nexport function hasNativeWeakMap() : boolean {\n\n    if (typeof WeakMap === 'undefined') {\n        return false;\n    }\n\n    if (typeof Object.freeze === 'undefined') {\n        return false;\n    }\n\n    try {\n\n        let testWeakMap = new WeakMap();\n        let testKey = {};\n        let testValue = '__testvalue__';\n\n        Object.freeze(testKey);\n\n        testWeakMap.set(testKey, testValue);\n\n        if (testWeakMap.get(testKey) === testValue) {\n            return true;\n        }\n\n        return false;\n\n    } catch (err) {\n\n        return false;\n    }\n}\n","/* @flow */\n/* eslint max-lines: off */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { linkFrameWindow, isWindowClosed,\n    type SameDomainWindowType, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\n\nimport { inlineMemoize, noop, stringify, capitalizeFirstLetter,\n    once, extend, safeInterval, uniqueID, arrayFrom } from './util';\nimport { isDevice } from './device';\nimport { KEY_CODES } from './constants';\nimport type { CancelableType } from './types';\n\ntype ElementRefType = string | HTMLElement;\n\nexport function isDocumentReady() : boolean {\n    return Boolean(document.body) && document.readyState === 'complete';\n}\n\nexport function urlEncode(str : string) : string {\n    return str.replace(/\\?/g, '%3F').replace(/&/g, '%26').replace(/#/g, '%23').replace(/\\+/g, '%2B');\n}\n\nexport function waitForWindowReady() : ZalgoPromise<void> {\n    return inlineMemoize(waitForWindowReady, () : ZalgoPromise<void> => {\n        return new ZalgoPromise(resolve => {\n            if (isDocumentReady()) {\n                resolve();\n            }\n\n            window.addEventListener('load', () => resolve());\n        });\n    });\n}\n\nexport function waitForDocumentReady() : ZalgoPromise<void> {\n    return inlineMemoize(waitForDocumentReady, () : ZalgoPromise<void> => {\n        return new ZalgoPromise(resolve => {\n\n            if (isDocumentReady()) {\n                return resolve();\n            }\n\n            let interval = setInterval(() => {\n                if (isDocumentReady()) {\n                    clearInterval(interval);\n                    return resolve();\n                }\n            }, 10);\n        });\n    });\n}\n\nexport function waitForDocumentBody() : ZalgoPromise<HTMLBodyElement> {\n    return waitForDocumentReady().then(() => {\n        if (document.body) {\n            return document.body;\n        }\n\n        throw new Error('Document ready but document.body not present');\n    });\n}\n\nexport function parseQuery(queryString : string) : Object {\n    return inlineMemoize(parseQuery, () : Object => {\n        let params = {};\n\n        if (!queryString) {\n            return params;\n        }\n\n        if (queryString.indexOf('=') === -1) {\n            return params;\n        }\n\n        for (let pair of queryString.split('&')) {\n            pair = pair.split('=');\n\n            if (pair[0] && pair[1]) {\n                params[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n            }\n        }\n\n        return params;\n    }, [ queryString ]);\n}\n\n\nexport function getQueryParam(name : string) : string {\n    return parseQuery(window.location.search.slice(1))[name];\n}\n\nexport function urlWillRedirectPage(url : string) : boolean {\n\n    if (url.indexOf('#') === -1) {\n        return true;\n    }\n\n    if (url.indexOf('#') === 0) {\n        return false;\n    }\n\n    if (url.split('#')[0] === window.location.href.split('#')[0]) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function formatQuery(obj : { [ string ] : string } = {}) : string {\n\n    return Object.keys(obj).filter(key => {\n        return typeof obj[key] === 'string';\n    }).map(key => {\n        return `${ urlEncode(key) }=${ urlEncode(obj[key]) }`;\n    }).join('&');\n}\n\nexport function extendQuery(originalQuery : string, props : { [ string ] : string } = {}) : string {\n\n    if (!props || !Object.keys(props).length) {\n        return originalQuery;\n    }\n\n    return formatQuery({\n        ...parseQuery(originalQuery),\n        ...props\n    });\n}\n\nexport function extendUrl(url : string, options : { query? : { [string] : string }, hash? : { [string] : string } } = {}) : string {\n\n    let query = options.query || {};\n    let hash = options.hash || {};\n\n    let originalUrl;\n    let originalQuery;\n    let originalHash;\n\n    [ originalUrl, originalHash ] = url.split('#');\n    [ originalUrl, originalQuery ] = originalUrl.split('?');\n\n    let queryString = extendQuery(originalQuery, query);\n    let hashString = extendQuery(originalHash, hash);\n\n    if (queryString) {\n        originalUrl = `${ originalUrl }?${ queryString }`;\n    }\n\n    if (hashString) {\n        originalUrl = `${ originalUrl }#${ hashString }`;\n    }\n\n    return originalUrl;\n}\n\nexport function redirect(url : string, win : CrossDomainWindowType = window) : ZalgoPromise<void> {\n    return new ZalgoPromise(resolve => {\n        win.location = url;\n        if (!urlWillRedirectPage(url)) {\n            resolve();\n        }\n    });\n}\n\nexport function hasMetaViewPort() : boolean {\n    let meta = document.querySelector('meta[name=viewport]');\n\n    if (isDevice() && window.screen.width < 660 && !meta) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function isElementVisible(el : HTMLElement) : boolean {\n    return Boolean(el.offsetWidth || el.offsetHeight || el.getClientRects().length);\n}\n\nexport function enablePerformance() : boolean {\n    return inlineMemoize(enablePerformance, () : boolean => {\n        /* eslint-disable compat/compat */\n        return Boolean(\n            window.performance &&\n            performance.now &&\n            performance.timing &&\n            performance.timing.connectEnd &&\n            performance.timing.navigationStart &&\n            (Math.abs(performance.now() - Date.now()) > 1000) &&\n            (performance.now() - (performance.timing.connectEnd - performance.timing.navigationStart)) > 0\n        );\n        /* eslint-enable compat/compat */\n    });\n}\n\nexport function getPageRenderTime() : ZalgoPromise<?number> {\n    return waitForDocumentReady().then(() => {\n\n        if (!enablePerformance()) {\n            return;\n        }\n\n        let timing = window.performance.timing;\n\n        if (timing.connectEnd && timing.domInteractive) {\n            return timing.domInteractive - timing.connectEnd;\n        }\n    });\n}\n\nexport function htmlEncode(html : string = '') : string {\n    return html.toString()\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;')\n        .replace(/'/g, '&#39;')\n        .replace(/\\//g, '&#x2F;');\n}\n\nexport function isBrowser() : boolean {\n    return (typeof window !== 'undefined');\n}\n\nexport function querySelectorAll(selector : string, doc : HTMLElement = window.document) : Array<HTMLElement> {\n    return Array.prototype.slice.call(doc.querySelectorAll(selector));\n}\n\nexport function onClick(element : HTMLElement, handler : (Event) => void) {\n    element.addEventListener('touchstart', noop);\n    element.addEventListener('click', handler);\n    element.addEventListener('keypress', (event : Event) => {\n        // $FlowFixMe\n        if (event.keyCode === KEY_CODES.ENTER) {\n            return handler(event);\n        }\n    });\n}\n\nexport function getScript({ host = window.location.host, path } : { host? : string, path : string }) : ?HTMLScriptElement {\n    return inlineMemoize(getScript, () : ?HTMLScriptElement => {\n\n        let url = `${ host }${ path }`;\n        let scripts = Array.prototype.slice.call(document.getElementsByTagName('script'));\n\n        for (let script of scripts) {\n            if (!script.src) {\n                continue;\n            }\n\n            let src = script.src.replace(/^https?:\\/\\//, '').split('?')[0];\n\n            if (src === url) {\n                return script;\n            }\n        }\n    }, [ path ]);\n}\n\nexport function isLocalStorageEnabled() : boolean {\n    return inlineMemoize(isLocalStorageEnabled, () => {\n        try {\n            if (typeof window === 'undefined') {\n                return false;\n            }\n\n            if (window.localStorage) {\n                let value = Math.random().toString();\n                window.localStorage.setItem('__test__localStorage__', value);\n                let result = window.localStorage.getItem('__test__localStorage__');\n                window.localStorage.removeItem('__test__localStorage__');\n                if (value === result) {\n                    return true;\n                }\n            }\n        } catch (err) {\n            // pass\n        }\n        return false;\n    });\n}\n\nexport function getBrowserLocales() : Array<{ country? : string, lang : string }> {\n    let nav = window.navigator;\n\n    let locales = nav.languages\n        ? Array.prototype.slice.apply(nav.languages)\n        : [];\n\n    if (nav.language) {\n        locales.push(nav.language);\n    }\n\n    if (nav.userLanguage) {\n        locales.push(nav.userLanguage);\n    }\n\n    return locales.map(locale => {\n\n        if (locale && locale.match(/^[a-z]{2}[-_][A-Z]{2}$/)) {\n            let [ lang, country ] = locale.split(/[-_]/);\n            return { country, lang };\n        }\n\n        if (locale && locale.match(/^[a-z]{2}$/)) {\n            return { lang: locale };\n        }\n\n        return null;\n\n    }).filter(Boolean);\n}\n\n\nexport function appendChild(container : HTMLElement, child : HTMLElement | Text) {\n    container.appendChild(child);\n}\n\nexport function isElement(element : mixed) : boolean {\n\n    if (element instanceof window.Element) {\n        return true;\n    }\n\n    if (element !== null && typeof element === 'object' && element.nodeType === 1 && typeof element.style === 'object' && typeof element.ownerDocument === 'object') {\n        return true;\n    }\n\n    return false;\n}\n\nexport function getElementSafe(id : ElementRefType, doc : Document | HTMLElement = document) : ?HTMLElement {\n\n    if (isElement(id)) {\n        // $FlowFixMe\n        return id;\n    }\n\n    if (typeof id === 'string') {\n        return doc.querySelector(id);\n    }\n}\n\nexport function getElement(id : ElementRefType, doc : Document | HTMLElement = document) : HTMLElement {\n\n    let element = getElementSafe(id, doc);\n\n    if (element) {\n        return element;\n    }\n\n    throw new Error(`Can not find element: ${ stringify(id) }`);\n}\n\nexport function elementReady(id : ElementRefType) : ZalgoPromise<window.HTMLElement> {\n    return new ZalgoPromise((resolve, reject) => {\n\n        let name = stringify(id);\n        let el = getElementSafe(id);\n\n        if (el) {\n            return resolve(el);\n        }\n\n        if (isDocumentReady()) {\n            return reject(new Error(`Document is ready and element ${ name } does not exist`));\n        }\n\n        let interval = setInterval(() => {\n\n            el = getElementSafe(id);\n\n            if (el) {\n                clearInterval(interval);\n                return resolve(el);\n            }\n\n            if (isDocumentReady()) {\n                clearInterval(interval);\n                return reject(new Error(`Document is ready and element ${ name } does not exist`));\n            }\n        }, 10);\n    });\n}\n\nexport function PopupOpenError(message : string) {\n    this.message = message;\n}\n\nPopupOpenError.prototype = Object.create(Error.prototype);\n\ntype PopupOptions = {|\n    name? : string,\n    width? : number,\n    height? : number,\n    top? : number,\n    left? : number,\n    status? : 0 | 1,\n    resizable? : 0 | 1,\n    toolbar? : 0 | 1,\n    menubar? : 0 | 1,\n    scrollbars? : 0 | 1\n|};\n\nexport function popup(url : string, options? : PopupOptions) : CrossDomainWindowType {\n\n    // $FlowFixMe\n    options = options || {};\n\n    let { width, height } = options;\n\n    let top = 0;\n    let left = 0;\n\n    if (width) {\n        if (window.outerWidth) {\n            left = Math.round((window.outerWidth - width) / 2) + window.screenX;\n        } else if (window.screen.width) {\n            left = Math.round((window.screen.width - width) / 2);\n        }\n    }\n\n    if (height) {\n        if (window.outerHeight) {\n            top = Math.round((window.outerHeight - height) / 2) + window.screenY;\n        } else if (window.screen.height) {\n            top = Math.round((window.screen.height - height) / 2);\n        }\n    }\n\n    if (width && height) {\n        options = {\n            top,\n            left,\n            width,\n            height,\n            status:     1,\n            toolbar:    0,\n            menubar:    0,\n            resizable:  1,\n            scrollbars: 1,\n            ...options\n        };\n    }\n\n    let name = options.name || '';\n    delete options.name;\n\n    // eslint-disable-next-line array-callback-return\n    let params = Object.keys(options).map(key => {\n        // $FlowFixMe\n        if (options[key] !== null && options[key] !== undefined) {\n            return `${ key }=${ stringify(options[key]) }`;\n        }\n    }).filter(Boolean).join(',');\n\n    let win;\n\n    try {\n        win = window.open(url, name, params, true);\n    } catch (err) {\n        throw new PopupOpenError(`Can not open popup window - ${ err.stack || err.message }`);\n    }\n\n    if (isWindowClosed(win)) {\n        let err = new PopupOpenError(`Can not open popup window - blocked`);\n        throw err;\n    }\n\n    window.addEventListener('unload', () => win.close());\n\n    return win;\n}\n\n\nexport function writeToWindow(win : SameDomainWindowType, html : string) {\n    try {\n        win.document.open();\n        win.document.write(html);\n        win.document.close();\n    } catch (err) {\n        try {\n            win.location = `javascript: document.open(); document.write(${ JSON.stringify(html) }); document.close();`;\n        } catch (err2) {\n            // pass\n        }\n    }\n}\n\nexport function writeElementToWindow(win : SameDomainWindowType, el : HTMLElement) {\n\n    let tag = el.tagName.toLowerCase();\n\n    if (tag !== 'html') {\n        throw new Error(`Expected element to be html, got ${ tag }`);\n    }\n\n    let documentElement = win.document.documentElement;\n\n    for (const child of arrayFrom(documentElement.children)) {\n        documentElement.removeChild(child);\n    }\n\n    for (const child of arrayFrom(el.children)) {\n        documentElement.appendChild(child);\n    }\n}\n\nexport function setStyle(el : HTMLElement, styleText : string, doc : Document = window.document) {\n    // $FlowFixMe\n    if (el.styleSheet) {\n        // $FlowFixMe\n        el.styleSheet.cssText = styleText;\n    } else {\n        el.appendChild(doc.createTextNode(styleText));\n    }\n}\n\nexport type ElementOptionsType = {\n    style? : { [ string ] : string },\n    id? : string,\n    class? : ?Array<string>,\n    attributes? : { [ string ] : string },\n    styleSheet? : ?string,\n    html? : ?string\n};\n\nlet awaitFrameLoadPromises : WeakMap<HTMLIFrameElement, ZalgoPromise<HTMLIFrameElement>>;\n\nexport function awaitFrameLoad(frame : HTMLIFrameElement) : ZalgoPromise<HTMLIFrameElement> {\n    awaitFrameLoadPromises = awaitFrameLoadPromises || new WeakMap();\n\n    if (awaitFrameLoadPromises.has(frame)) {\n        let promise = awaitFrameLoadPromises.get(frame);\n        if (promise) {\n            return promise;\n        }\n    }\n\n    let promise = new ZalgoPromise((resolve, reject) => {\n        frame.addEventListener('load', () => {\n            linkFrameWindow(frame);\n            resolve(frame);\n        });\n\n        frame.addEventListener('error', (err : Event) => {\n            if (frame.contentWindow) {\n                resolve(frame);\n            } else {\n                reject(err);\n            }\n        });\n    });\n\n    awaitFrameLoadPromises.set(frame, promise);\n\n    return promise;\n}\n\nexport function awaitFrameWindow(frame : HTMLIFrameElement) : ZalgoPromise<CrossDomainWindowType> {\n    return awaitFrameLoad(frame).then(loadedFrame => {\n\n        if (!loadedFrame.contentWindow) {\n            throw new Error(`Could not find window in iframe`);\n        }\n\n        return loadedFrame.contentWindow;\n    });\n}\n\nexport function createElement(tag : string = 'div', options : ElementOptionsType = {}, container : ?HTMLElement) : HTMLElement {\n\n    tag = tag.toLowerCase();\n    let element = document.createElement(tag);\n\n    if (options.style) {\n        extend(element.style, options.style);\n    }\n\n    if (options.class) {\n        element.className = options.class.join(' ');\n    }\n\n    if (options.id) {\n        element.setAttribute('id', options.id);\n    }\n\n    if (options.attributes) {\n        for (let key of Object.keys(options.attributes)) {\n            element.setAttribute(key, options.attributes[key]);\n        }\n    }\n\n    if (options.styleSheet) {\n        setStyle(element, options.styleSheet);\n    }\n\n    if (container) {\n        appendChild(container, element);\n    }\n\n    if (options.html) {\n        if (tag === 'iframe') {\n            // $FlowFixMe\n            if (!container || !element.contentWindow) {\n                throw new Error(`Iframe html can not be written unless container provided and iframe in DOM`);\n            }\n\n            // $FlowFixMe\n            writeToWindow(element.contentWindow, options.html);\n\n        } else {\n            element.innerHTML = options.html;\n        }\n    }\n\n    return element;\n}\n\n\nexport type IframeElementOptionsType = {\n    style? : { [ string ] : string },\n    class? : ?Array<string>,\n    attributes? : { [ string ] : string },\n    styleSheet? : ?string,\n    html? : ?string,\n    url? : ?string\n};\n\nexport function iframe(options : IframeElementOptionsType = {}, container : ?HTMLElement) : HTMLIFrameElement {\n\n    let attributes = options.attributes || {};\n    let style = options.style || {};\n\n    let frame = createElement('iframe', {\n        attributes: {\n            allowTransparency: 'true',\n            ...attributes\n        },\n        style: {\n            backgroundColor: 'transparent',\n            border:          'none',\n            ...style\n        },\n        html:  options.html,\n        class: options.class\n    });\n\n    const isIE = window.navigator.userAgent.match(/MSIE|Edge/i);\n    \n    if (!frame.hasAttribute('id')) {\n        frame.setAttribute('id', uniqueID());\n    }\n\n    // $FlowFixMe\n    awaitFrameLoad(frame);\n\n    if (container) {\n        let el = getElement(container);\n        el.appendChild(frame);\n    }\n\n    if (options.url || isIE) {\n        frame.setAttribute('src', options.url || 'about:blank');\n    }\n\n    // $FlowFixMe\n    return frame;\n}\n\nexport function addEventListener(obj : HTMLElement, event : string, handler : (event : Event) => void) : CancelableType {\n    obj.addEventListener(event, handler);\n    return {\n        cancel() {\n            obj.removeEventListener(event, handler);\n        }\n    };\n}\n\nexport function bindEvents(element : HTMLElement, eventNames : Array<string>, handler : (event : Event) => void) : CancelableType {\n\n    handler = once(handler);\n\n    for (let eventName of eventNames) {\n        element.addEventListener(eventName, handler);\n    }\n\n    return {\n        cancel: once(() => {\n            for (let eventName of eventNames) {\n                element.removeEventListener(eventName, handler);\n            }\n        })\n    };\n}\n\nconst VENDOR_PREFIXES = [ 'webkit', 'moz', 'ms', 'o' ];\n\nexport function setVendorCSS(element : HTMLElement, name : string, value : string) {\n\n    // $FlowFixMe\n    element.style[name] = value;\n\n    let capitalizedName = capitalizeFirstLetter(name);\n\n    for (let prefix of VENDOR_PREFIXES) {\n        // $FlowFixMe\n        element.style[`${ prefix }${ capitalizedName }`] = value;\n    }\n}\n\nconst ANIMATION_START_EVENTS = [ 'animationstart', 'webkitAnimationStart', 'oAnimationStart', 'MSAnimationStart' ];\nconst ANIMATION_END_EVENTS   = [ 'animationend', 'webkitAnimationEnd', 'oAnimationEnd', 'MSAnimationEnd' ];\n\nexport function animate(element : ElementRefType, name : string, clean : (Function) => void, timeout : number = 1000) : ZalgoPromise<void> {\n    return new ZalgoPromise((resolve, reject) => {\n\n        let el = getElement(element);\n\n        if (!el) {\n            return resolve();\n        }\n\n        let hasStarted = false;\n\n        let startTimeout;\n        let endTimeout;\n        let startEvent;\n        let endEvent;\n\n        function cleanUp() {\n            clearTimeout(startTimeout);\n            clearTimeout(endTimeout);\n            startEvent.cancel();\n            endEvent.cancel();\n        }\n\n        startEvent = bindEvents(el, ANIMATION_START_EVENTS, event => {\n\n            // $FlowFixMe\n            if (event.target !== el || event.animationName !== name) {\n                return;\n            }\n\n            clearTimeout(startTimeout);\n\n            event.stopPropagation();\n\n            startEvent.cancel();\n            hasStarted = true;\n\n            endTimeout = setTimeout(() => {\n                cleanUp();\n                resolve();\n            }, timeout);\n        });\n\n        endEvent = bindEvents(el, ANIMATION_END_EVENTS, event => {\n\n            // $FlowFixMe\n            if (event.target !== el || event.animationName !== name) {\n                return;\n            }\n\n            cleanUp();\n\n            // $FlowFixMe\n            if (typeof event.animationName === 'string' && event.animationName !== name) {\n                return reject(`Expected animation name to be ${ name }, found ${ event.animationName }`);\n            }\n\n            return resolve();\n        });\n\n        setVendorCSS(el, 'animationName', name);\n\n        startTimeout = setTimeout(() => {\n            if (!hasStarted) {\n                cleanUp();\n                return resolve();\n            }\n        }, 200);\n\n        if (clean) {\n            clean(cleanUp);\n        }\n    });\n}\n\nconst STYLE = {\n\n    DISPLAY: {\n        NONE:  'none',\n        BLOCK: 'block'\n    },\n\n    VISIBILITY: {\n        VISIBLE: 'visible',\n        HIDDEN:  'hidden'\n    },\n\n    IMPORTANT: 'important'\n};\n\nexport function makeElementVisible(element : HTMLElement) {\n    element.style.setProperty('visibility', '');\n}\n\nexport function makeElementInvisible(element : HTMLElement) {\n    element.style.setProperty('visibility', STYLE.VISIBILITY.HIDDEN, STYLE.IMPORTANT);\n}\n\n\nexport function showElement(element : HTMLElement) {\n    element.style.setProperty('display', '');\n}\n\nexport function hideElement(element : HTMLElement) {\n    element.style.setProperty('display', STYLE.DISPLAY.NONE, STYLE.IMPORTANT);\n}\n\nexport function destroyElement(element : HTMLElement) {\n    if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n    }\n}\n\nexport function showAndAnimate(element : HTMLElement, name : string, clean : (Function) => void) : ZalgoPromise<void> {\n    let animation = animate(element, name, clean);\n    showElement(element);\n    return animation;\n}\n\nexport function animateAndHide(element : HTMLElement, name : string, clean : (Function) => void) : ZalgoPromise<void> {\n    return animate(element, name, clean).then(() => {\n        hideElement(element);\n    });\n}\n\nexport function addClass(element : HTMLElement, name : string) {\n    element.classList.add(name);\n}\n\nexport function removeClass(element : HTMLElement, name : string) {\n    element.classList.remove(name);\n}\n\nexport function isElementClosed(el : HTMLElement) : boolean {\n    if (!el || !el.parentNode) {\n        return true;\n    }\n    return false;\n}\n\nexport function watchElementForClose(element : HTMLElement, handler : () => mixed) : CancelableType {\n    handler = once(handler);\n\n    let interval;\n\n    if (isElementClosed(element)) {\n        handler();\n    } else {\n        interval = safeInterval(() => {\n            if (isElementClosed(element)) {\n                interval.cancel();\n                handler();\n            }\n        }, 50);\n    }\n\n    return {\n        cancel() {\n            if (interval) {\n                interval.cancel();\n            }\n        }\n    };\n}\n\nexport function fixScripts(el : HTMLElement, doc : Document = window.document) {\n    for (let script of querySelectorAll('script', el)) {\n        let parentNode = script.parentNode;\n\n        if (!parentNode) {\n            continue;\n        }\n\n        let newScript = doc.createElement('script');\n        newScript.text = script.textContent;\n        parentNode.replaceChild(newScript, script);\n    }\n}\n\ntype OnResizeOptions = {|\n    width? : boolean,\n    height? : boolean,\n    interval? : number,\n    win? : SameDomainWindowType\n|};\n\nexport function onResize(el : HTMLElement, handler : ({ width : number, height : number }) => void, { width = true, height = true, interval = 100, win = window } : OnResizeOptions = {}) : {} {\n    let currentWidth = el.offsetWidth;\n    let currentHeight = el.offsetHeight;\n\n    handler({ width: currentWidth, height: currentHeight });\n\n    let check = () => {\n        let newWidth = el.offsetWidth;\n        let newHeight = el.offsetHeight;\n\n        if ((width && newWidth !== currentWidth) || (height && newHeight !== currentHeight)) {\n            handler({ width: newWidth, height: newHeight });\n        }\n\n        currentWidth = newWidth;\n        currentHeight = newHeight;\n    };\n\n    let observer;\n    let timeout;\n\n    if (typeof win.ResizeObserver !== 'undefined') {\n        observer = new win.ResizeObserver(check);\n        observer.observe(el);\n\n    } else if (typeof win.MutationObserver !== 'undefined') {\n        observer = new win.MutationObserver(check);\n        observer.observe(el, {\n            attributes:    true,\n            childList:     true,\n            subtree:       true,\n            characterData: false\n        });\n        win.addEventListener('resize', check);\n    } else {\n        let loop = () => {\n            check();\n            timeout = setTimeout(loop, interval);\n        };\n        loop();\n    }\n\n    return {\n        cancel: () => {\n            observer.disconnect();\n            window.removeEventListener('resize', check);\n            clearTimeout(timeout);\n        }\n    };\n}\n\nexport function getResourceLoadTime(url : string) : ?number {\n\n    if (!enablePerformance()) {\n        return;\n    }\n\n    if (!window.performance || typeof window.performance.getEntries !== 'function') {\n        return;\n    }\n\n    const entries = window.performance.getEntries();\n\n    for (let i = 0; i < entries.length; i++) {\n        const entry = entries[i];\n\n        if (entry && entry.name && entry.name.indexOf(url) === 0 && typeof entry.duration === 'number') {\n            return Math.floor(entry.duration);\n        }\n    }\n}\n","/* @flow */\n\nexport const BRIDGE_TIMEOUT = 5000;\nexport const CHILD_WINDOW_TIMEOUT = 5000;\n\nexport const ACK_TIMEOUT = 2000;\nexport const ACK_TIMEOUT_KNOWN = 10000;\nexport const RES_TIMEOUT = __TEST__ ? 2000 : -1;\nexport const RESPONSE_CYCLE_TIME = 500;\n","/* @flow */\n\nexport const MESSAGE_TYPE = {\n    REQUEST:  ('postrobot_message_request' : 'postrobot_message_request'),\n    RESPONSE: ('postrobot_message_response' : 'postrobot_message_response'),\n    ACK:      ('postrobot_message_ack' : 'postrobot_message_ack')\n};\n\nexport const MESSAGE_ACK = {\n    SUCCESS: ('success' : 'success'),\n    ERROR:   ('error' : 'error')\n};\n\nexport const MESSAGE_NAME = {\n    METHOD:      ('postrobot_method' : 'postrobot_method'),\n    HELLO:       ('postrobot_hello' : 'postrobot_hello'),\n    OPEN_TUNNEL: ('postrobot_open_tunnel' : 'postrobot_open_tunnel')\n};\n\nexport const SEND_STRATEGY = {\n    POST_MESSAGE: ('postrobot_post_message' : 'postrobot_post_message'),\n    BRIDGE:       ('postrobot_bridge' : 'postrobot_bridge'),\n    GLOBAL:       ('postrobot_global' : 'postrobot_global')\n};\n\nexport const BRIDGE_NAME_PREFIX = '__postrobot_bridge__';\nexport const POSTROBOT_PROXY =    '__postrobot_proxy__';\n\nexport const WILDCARD = '*';\n\nexport const SERIALIZATION_TYPE = {\n    CROSS_DOMAIN_ZALGO_PROMISE: ('cross_domain_zalgo_promise' : 'cross_domain_zalgo_promise'),\n    CROSS_DOMAIN_FUNCTION:      ('cross_domain_function' : 'cross_domain_function'),\n    CROSS_DOMAIN_WINDOW:        ('cross_domain_window' : 'cross_domain_window')\n};\n","/* @flow */\n\nimport { type CrossDomainWindowType, type SameDomainWindowType } from 'cross-domain-utils/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\nimport { getOrSet } from 'belter/src';\n\nexport function getGlobal(win : SameDomainWindowType = window) : Object {\n    if (win !== window) {\n        return win[__POST_ROBOT__.__GLOBAL_KEY__];\n    }\n    const global : Object = win[__POST_ROBOT__.__GLOBAL_KEY__] = win[__POST_ROBOT__.__GLOBAL_KEY__] || {};\n    return global;\n}\n\nexport function deleteGlobal() {\n    delete window[__POST_ROBOT__.__GLOBAL_KEY__];\n}\n\ntype ObjectGetter = () => Object;\nconst getObj : ObjectGetter = () => ({});\n\ntype GetOrSet<T> = ((string, () => T) => T) & ((string, () => void) => void);\n\ntype GlobalStore<T> = {|\n    get : ((string, T) => T) & ((string, void) => T | void),\n    set : (string, T) => T,\n    has : (string) => boolean,\n    del : (string) => void,\n    getOrSet : GetOrSet<T>,\n    reset : () => void,\n    keys : () => $ReadOnlyArray<string>\n|};\n\nexport function globalStore<T : mixed>(key? : string = 'store', defStore? : ObjectGetter = getObj) : GlobalStore<T> {\n    return getOrSet(getGlobal(), key, () => {\n        let store = defStore();\n\n        return {\n            has: (storeKey) => {\n                return store.hasOwnProperty(storeKey);\n            },\n            get: (storeKey, defVal) => {\n                // $FlowFixMe\n                return store.hasOwnProperty(storeKey) ? store[storeKey] : defVal;\n            },\n            set: (storeKey, val) => {\n                store[storeKey] = val;\n                return val;\n            },\n            del: (storeKey) => {\n                delete store[storeKey];\n            },\n            getOrSet: (storeKey, getter) => {\n                // $FlowFixMe\n                return getOrSet(store, storeKey, getter);\n            },\n            reset: () => {\n                store = defStore();\n            },\n            keys: () => {\n                return Object.keys(store);\n            }\n        };\n    });\n}\n\nexport class WildCard {}\n\nexport function getWildcard() : WildCard {\n    const global = getGlobal();\n    global.WINDOW_WILDCARD = global.WINDOW_WILDCARD || new WildCard();\n    return global.WINDOW_WILDCARD;\n}\n\ntype WindowStore<T> = {|\n    get : ((CrossDomainWindowType | WildCard, T) => T) & ((CrossDomainWindowType | WildCard, void) => T | void),\n    set : (CrossDomainWindowType | WildCard, T) => T,\n    has : (CrossDomainWindowType | WildCard) => boolean,\n    del : (CrossDomainWindowType | WildCard) => void,\n    getOrSet : (CrossDomainWindowType | WildCard, () => T) => T\n|};\n\nexport function windowStore<T>(key? : string = 'store', defStore? : ObjectGetter = getObj) : WindowStore<T> {\n    return globalStore('windowStore').getOrSet(key, () => {\n        const winStore = new WeakMap();\n\n        const getStore = (win : CrossDomainWindowType | WildCard) : ObjectGetter => {\n            return winStore.getOrSet(win, defStore);\n        };\n    \n        return {\n            has: (win) => {\n                const store = getStore(win);\n                return store.hasOwnProperty(key);\n            },\n            get: (win, defVal) => {\n                const store = getStore(win);\n                // $FlowFixMe\n                return store.hasOwnProperty(key) ? store[key] : defVal;\n            },\n            set: (win, val) => {\n                const store = getStore(win);\n                store[key] = val;\n                return val;\n            },\n            del: (win) => {\n                const store = getStore(win);\n                delete store[key];\n            },\n            getOrSet: (win, getter) => {\n                const store = getStore(win);\n                return getOrSet(store, key, getter);\n            }\n        };\n    });\n}\n","/* @flow */\n\nimport { getAncestor, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { noop, uniqueID } from 'belter/src';\n\nimport { MESSAGE_NAME, WILDCARD } from '../conf';\nimport { windowStore, globalStore } from '../global';\nimport type { OnType, SendType, CancelableType } from '../types';\n\nfunction getInstanceID() : string {\n    return globalStore('instance').getOrSet('instanceID', uniqueID);\n}\n\nfunction getHelloPromise(win : CrossDomainWindowType) : ZalgoPromise<{ domain : string }> {\n    const helloPromises = windowStore('helloPromises');\n    return helloPromises.getOrSet(win, () => new ZalgoPromise());\n}\n\nfunction resolveHelloPromise(win : CrossDomainWindowType, { domain }) : ZalgoPromise<{ domain : string }> {\n    const helloPromises = windowStore('helloPromises');\n    const existingPromise = helloPromises.get(win);\n    if (existingPromise) {\n        existingPromise.resolve({ domain });\n    }\n    const newPromise = ZalgoPromise.resolve({ domain });\n    helloPromises.set(win, newPromise);\n    return newPromise;\n}\n\nfunction listenForHello({ on } : { on : OnType }) : CancelableType {\n    return on(MESSAGE_NAME.HELLO, { domain: WILDCARD }, ({ source, origin }) => {\n        resolveHelloPromise(source, { domain: origin });\n        return { instanceID: getInstanceID() };\n    });\n}\n\nexport function sayHello(win : CrossDomainWindowType, { send } : { send : SendType }) : ZalgoPromise<{ win : CrossDomainWindowType, domain : string, instanceID : string }> {\n    return send(win, MESSAGE_NAME.HELLO, { instanceID: getInstanceID() }, { domain: WILDCARD, timeout: -1 })\n        .then(({ origin, data: { instanceID } }) => {\n            resolveHelloPromise(win, { domain: origin });\n            return { win, domain: origin, instanceID };\n        });\n}\n\nexport function getWindowInstanceID(win : CrossDomainWindowType, { send } : { send : SendType }) : ZalgoPromise<string> {\n    return windowStore('windowInstanceIDPromises').getOrSet(win, () => {\n        return sayHello(win, { send }).then(({ instanceID }) => instanceID);\n    });\n}\n\nexport function initHello({ on, send } : { on : OnType, send : SendType }) : CancelableType {\n    return globalStore('builtinListeners').getOrSet('helloListener', () => {\n        const listener = listenForHello({ on });\n\n        const parent = getAncestor();\n        if (parent) {\n            sayHello(parent, { send }).catch(noop);\n        }\n\n        return listener;\n    });\n}\n\nexport function awaitWindowHello(win : CrossDomainWindowType, timeout : number = 5000, name : string = 'Window') : ZalgoPromise<{ domain : string }> {\n    let promise = getHelloPromise(win);\n\n    if (timeout !== -1) {\n        promise = promise.timeout(timeout, new Error(`${ name } did not load after ${ timeout }ms`));\n    }\n\n    return promise;\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType } from 'cross-domain-utils/src';\n\nimport { windowStore } from '../global';\n\nexport function markWindowKnown(win : CrossDomainWindowType) {\n    const knownWindows = windowStore('knownWindows');\n    knownWindows.set(win, true);\n}\n\nexport function isWindowKnown(win : CrossDomainWindowType) : boolean {\n    const knownWindows = windowStore('knownWindows');\n    return knownWindows.get(win, false);\n}\n","/* @flow */\n\nexport const TYPE = {\n    FUNCTION:  ('function' : 'function'),\n    ERROR:     ('error' : 'error'),\n    PROMISE:   ('promise' : 'promise'),\n    REGEX:     ('regex' : 'regex'),\n    DATE:      ('date' : 'date'),\n    ARRAY:     ('array' : 'array'),\n    OBJECT:    ('object' : 'object'),\n    STRING:    ('string' : 'string'),\n    NUMBER:    ('number' : 'number'),\n    BOOLEAN:   ('boolean' : 'boolean'),\n    NULL:      ('null' : 'null'),\n    UNDEFINED: ('undefined' : 'undefined')\n};\n","/* @flow */\n\nimport { TYPE } from './constants';\nimport type { CustomSerializedType } from './types';\n\nexport function isSerializedType(item : mixed) : boolean {\n    return (typeof item === 'object' && item !== null && typeof item.__type__ === 'string');\n}\n\nexport function determineType(val : mixed) : $Values<typeof TYPE> | void {\n    if (typeof val === 'undefined') {\n        return TYPE.UNDEFINED;\n    }\n\n    if (val === null) {\n        return TYPE.NULL;\n    }\n\n    if (Array.isArray(val)) {\n        return TYPE.ARRAY;\n    }\n\n    if (typeof val === 'function') {\n        return TYPE.FUNCTION;\n    }\n\n    if (typeof val === 'object') {\n\n        if (val instanceof Error) {\n            return TYPE.ERROR;\n        }\n\n        if (typeof val.then === 'function') {\n            return TYPE.PROMISE;\n        }\n\n        if (Object.prototype.toString.call(val) === '[object RegExp]') {\n            return TYPE.REGEX;\n        }\n\n        if (Object.prototype.toString.call(val) === '[object Date]') {\n            return TYPE.DATE;\n        }\n\n        return TYPE.OBJECT;\n    }\n\n    if (typeof val === 'string') {\n        return TYPE.STRING;\n    }\n\n    if (typeof val === 'number') {\n        return TYPE.NUMBER;\n    }\n\n    if (typeof val === 'boolean') {\n        return TYPE.BOOLEAN;\n    }\n}\n\nexport function serializeType<T : string, V : mixed>(type : T, val : V) : CustomSerializedType<T, V> {\n    return {\n        __type__: type,\n        __val__:  val\n    };\n}\n","/* @flow */\n\nimport { TYPE } from './constants';\nimport type { Thenable, CustomSerializedType, NativeSerializedType } from './types';\nimport { determineType, isSerializedType } from './common';\nimport {\n    serializeFunction,\n    serializeError, type SerializedError,\n    serializePromise,\n    serializeRegex, type SerializedRegex,\n    serializeDate, type SerializedDate,\n    serializeArray,\n    serializeObject,\n    serializeString,\n    serializeNumber,\n    serializeBoolean,\n    serializeNull\n} from './serializers';\n\ntype NativeSerializer<V : mixed, S : mixed, T : $Values<typeof TYPE>> = (value : V, key : string) => NativeSerializedType<T, S>;\ntype CustomSerializer<V : mixed, S : mixed, T : string> = (value : V, key : string) => CustomSerializedType<T, S>;\ntype PrimitiveSerializer<V : mixed, S : mixed> = (value : V, key : string) => S;\ntype CustomOrPrimitiveSerializer<V : mixed, T : string> = CustomSerializer<V, *, T> | PrimitiveSerializer<V, *>;\ntype NativeOrCustomOrPrimitiveSerializer<V : mixed, S : mixed, T : string> = NativeSerializer<V, S, T> | CustomOrPrimitiveSerializer<V, T>;\n\ntype Serializers = {|\n    function? : CustomOrPrimitiveSerializer<Function, typeof TYPE.FUNCTION>,\n    error? : NativeOrCustomOrPrimitiveSerializer<Error, SerializedError, typeof TYPE.ERROR>,\n    promise? : CustomOrPrimitiveSerializer<Thenable, typeof TYPE.PROMISE>,\n    regex? : NativeOrCustomOrPrimitiveSerializer<RegExp, SerializedRegex, typeof TYPE.REGEX>,\n    date? : NativeOrCustomOrPrimitiveSerializer<Date, SerializedDate, typeof TYPE.DATE>,\n    array? : CustomOrPrimitiveSerializer<$ReadOnlyArray<mixed>, typeof TYPE.ARRAY>,\n    object? : CustomOrPrimitiveSerializer<Object, typeof TYPE.OBJECT>,\n    string? : CustomOrPrimitiveSerializer<string, typeof TYPE.STRING>,\n    number? : CustomOrPrimitiveSerializer<number, typeof TYPE.NUMBER>,\n    boolean? : CustomOrPrimitiveSerializer<boolean, typeof TYPE.BOOLEAN>,\n    null? : CustomOrPrimitiveSerializer<null, typeof TYPE.NULL>\n|};\n\nconst SERIALIZER : Serializers = {\n    [ TYPE.FUNCTION ]:  serializeFunction,\n    [ TYPE.ERROR ]:     serializeError,\n    [ TYPE.PROMISE ]:   serializePromise,\n    [ TYPE.REGEX ]:     serializeRegex,\n    [ TYPE.DATE ]:      serializeDate,\n    [ TYPE.ARRAY ]:     serializeArray,\n    [ TYPE.OBJECT ]:    serializeObject,\n    [ TYPE.STRING ]:    serializeString,\n    [ TYPE.NUMBER ]:    serializeNumber,\n    [ TYPE.BOOLEAN ]:   serializeBoolean,\n    [ TYPE.NULL ]:      serializeNull\n};\n\n// $FlowFixMe\nconst defaultSerializers : Serializers = {};\n\nexport function serialize<T : mixed>(obj : T, serializers : Serializers = defaultSerializers) : string {\n\n    function replacer(key) : ?mixed {\n        const val = this[key];\n\n        if (isSerializedType(this)) {\n            return val;\n        }\n        \n        const type = determineType(val);\n\n        if (!type) {\n            return val;\n        }\n\n        // $FlowFixMe\n        const serializer = serializers[type] || SERIALIZER[type];\n\n        if (!serializer) {\n            return val;\n        }\n\n        return serializer(val, key);\n    }\n\n    const result = JSON.stringify(obj, replacer);\n\n    if (typeof result === 'undefined') {\n        return TYPE.UNDEFINED;\n    }\n\n    return result;\n}\n","/* @flow */\n\nexport type SerializedFunction = void;\n\nexport function serializeFunction() : SerializedFunction {\n    // pass\n}\n\nexport function deserializeFunction() {\n    throw new Error(`Function serialization is not implemented; nothing to deserialize`);\n}\n","/* @flow */\n\nimport { serializeType } from '../common';\nimport { TYPE } from '../constants';\nimport type { NativeSerializedType } from '../types';\n\nexport type SerializedError = {|\n    message : string,\n    stack : string,\n    code : string | number | void\n|};\n\n// $FlowFixMe\nexport function serializeError({ message, stack, code } : Error) : NativeSerializedType<typeof TYPE.ERROR, SerializedError> {\n    return serializeType(TYPE.ERROR, { message, stack, code });\n}\n\nexport function deserializeError({ message, stack, code } : SerializedError) : Error {\n    const error = new Error(message);\n    // $FlowFixMe\n    error.code = code;\n    error.stack = `${ stack }\\n\\n${ error.stack }`;\n    return error;\n}\n","/* @flow */\n\nexport type SerializedPromise = void;\n\nexport function serializePromise() : SerializedPromise {\n    // pass\n}\n\nexport function deserializePromise() {\n    throw new Error(`Promise serialization is not implemented; nothing to deserialize`);\n}\n","/* @flow */\n\nimport { serializeType } from '../common';\nimport { TYPE } from '../constants';\nimport type { NativeSerializedType } from '../types';\n\nexport type SerializedRegex = string;\n\nexport function serializeRegex(val : RegExp) : NativeSerializedType<typeof TYPE.REGEX, SerializedRegex> {\n    return serializeType(TYPE.REGEX, val.source);\n}\n\nexport function deserializeRegex(val : string) : RegExp {\n    // eslint-disable-next-line security/detect-non-literal-regexp\n    return new RegExp(val);\n}\n","/* @flow */\n\nimport { serializeType } from '../common';\nimport { TYPE } from '../constants';\nimport type { NativeSerializedType } from '../types';\n\nexport type SerializedDate = string;\n\nexport function serializeDate(val : Date) : NativeSerializedType<typeof TYPE.DATE, SerializedDate> {\n    return serializeType(TYPE.DATE, val.toJSON());\n}\n\nexport function deserializeDate(val : string) : Date {\n    return new Date(val);\n}\n","/* @flow */\n\nexport type SerializedArray<T : mixed = mixed> = $ReadOnlyArray<T>;\n\nexport function serializeArray<T : mixed>(val : $ReadOnlyArray<T>) : SerializedArray<T> {\n    return val;\n}\n\nexport function deserializeArray<T : mixed>(val : SerializedArray<T>) : $ReadOnlyArray<T> {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedObject = Object;\n\nexport function serializeObject(val : Object) : SerializedObject {\n    return val;\n}\n\nexport function deserializeObject(val : SerializedObject) : Object {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedString = string;\n\nexport function serializeString(val : string) : SerializedString {\n    return val;\n}\n\nexport function deserializeString(val : SerializedString) : string {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedNumber = number;\n\nexport function serializeNumber(val : number) : SerializedNumber {\n    return val;\n}\n\nexport function deserializeNumber(val : SerializedNumber) : number {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedBoolean = boolean;\n\nexport function serializeBoolean(val : boolean) : SerializedBoolean {\n    return val;\n}\n\nexport function deserializeBoolean(val : SerializedBoolean) : boolean {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedNull = null;\n\nexport function serializeNull(val : null) : SerializedNull {\n    return val;\n}\n\nexport function deserializeNull(val : SerializedNull) : null {\n    return val;\n}\n","/* @flow */\n\nimport type { Thenable } from './types';\nimport { TYPE } from './constants';\nimport { determineType, isSerializedType } from './common';\nimport {\n    deserializeFunction,\n    deserializeError, type SerializedError,\n    deserializePromise,\n    deserializeRegex, type SerializedRegex,\n    deserializeDate, type SerializedDate,\n    deserializeArray,\n    deserializeObject,\n    deserializeString,\n    deserializeNumber,\n    deserializeBoolean,\n    deserializeNull\n} from './serializers';\n\ntype Deserializer<V : mixed, S : mixed> = (serializedValue : S, key : string) => V;\ntype PrimitiveDeserializer<V, S = V> = (serializedValue : S, key : string) => V;\n\ntype Deserializers = {\n    function? : Deserializer<Function, *>,\n    error? : Deserializer<Error, SerializedError>,\n    promise? : Deserializer<Thenable, *>,\n    regex? : Deserializer<RegExp, SerializedRegex>,\n    date? : Deserializer<Date, SerializedDate>,\n    array? : PrimitiveDeserializer<$ReadOnlyArray<mixed>>,\n    object? : PrimitiveDeserializer<Object>,\n    string? : PrimitiveDeserializer<string>,\n    number? : PrimitiveDeserializer<number>,\n    boolean? : PrimitiveDeserializer<boolean>,\n    null? : PrimitiveDeserializer<null>,\n    [string] : Deserializer<mixed, *>\n};\n\n// $FlowFixMe\nconst DESERIALIZER : Deserializers = {\n    [ TYPE.FUNCTION ]:  deserializeFunction,\n    [ TYPE.ERROR ]:     deserializeError,\n    [ TYPE.PROMISE ]:   deserializePromise,\n    [ TYPE.REGEX ]:     deserializeRegex,\n    [ TYPE.DATE ]:      deserializeDate,\n    [ TYPE.ARRAY ]:     deserializeArray,\n    [ TYPE.OBJECT ]:    deserializeObject,\n    [ TYPE.STRING ]:    deserializeString,\n    [ TYPE.NUMBER ]:    deserializeNumber,\n    [ TYPE.BOOLEAN ]:   deserializeBoolean,\n    [ TYPE.NULL ]:      deserializeNull\n};\n\n// $FlowFixMe\nconst defaultDeserializers : Deserializers = {};\n\nexport function deserialize<T : mixed | null | void>(str : string, deserializers : Deserializers = defaultDeserializers) : T {\n    if (str === TYPE.UNDEFINED) {\n        // $FlowFixMe\n        return;\n    }\n\n    function replacer(key, val) : ?mixed {\n        if (isSerializedType(this)) {\n            return val;\n        }\n\n        let type;\n        let value;\n\n        if (isSerializedType(val)) {\n            type = val.__type__;\n            value = val.__val__;\n        } else {\n            type = determineType(val);\n            value = val;\n        }\n\n        if (!type) {\n            return value;\n        }\n\n        // $FlowFixMe\n        const deserializer = deserializers[type] || DESERIALIZER[type];\n\n        if (!deserializer) {\n            return value;\n        }\n\n        return deserializer(value, key);\n    }\n\n    return JSON.parse(str, replacer);\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { getDomain, isSameDomain, isOpener, isSameTopWindow, matchDomain, getUserAgent, getDomainFromUrl, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop } from 'belter/src';\n\nimport { BRIDGE_NAME_PREFIX } from '../conf';\nimport { windowStore } from '../global';\n\nexport function needsBridgeForBrowser() : boolean {\n\n    if (getUserAgent(window).match(/MSIE|trident|edge\\/12|edge\\/13/i)) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function needsBridgeForWin(win : CrossDomainWindowType) : boolean {\n\n    if (!isSameTopWindow(window, win)) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function needsBridgeForDomain(domain : ?string, win : ?CrossDomainWindowType) : boolean {\n\n    if (domain) {\n        if (getDomain() !== getDomainFromUrl(domain)) {\n            return true;\n        }\n    } else if (win) {\n        if (!isSameDomain(win))  {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function needsBridge({ win, domain } : { win? : CrossDomainWindowType, domain? : string }) : boolean {\n\n    if (!needsBridgeForBrowser()) {\n        return false;\n    }\n\n    if (domain && !needsBridgeForDomain(domain, win)) {\n        return false;\n    }\n\n    if (win && !needsBridgeForWin(win)) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function getBridgeName(domain : string) : string {\n\n    domain = domain || getDomainFromUrl(domain);\n\n    const sanitizedDomain = domain.replace(/[^a-zA-Z0-9]+/g, '_');\n\n    const id = `${ BRIDGE_NAME_PREFIX }_${ sanitizedDomain }`;\n\n    return id;\n}\n\nexport function isBridge() : boolean {\n    return Boolean(window.name && window.name === getBridgeName(getDomain()));\n}\n\nexport const documentBodyReady = new ZalgoPromise(resolve => {\n\n    if (window.document && window.document.body) {\n        return resolve(window.document.body);\n    }\n\n    const interval = setInterval(() => {\n        if (window.document && window.document.body) {\n            clearInterval(interval);\n            return resolve(window.document.body);\n        }\n    }, 10);\n});\n\nexport function registerRemoteWindow(win : CrossDomainWindowType) {\n    const remoteWindowPromises = windowStore('remoteWindowPromises');\n    remoteWindowPromises.getOrSet(win, () => new ZalgoPromise());\n}\n\nexport function findRemoteWindow(win : CrossDomainWindowType) : ZalgoPromise<(remoteWin : CrossDomainWindowType, message : string, remoteDomain : string) => void> {\n    const remoteWindowPromises = windowStore('remoteWindowPromises');\n    const remoteWinPromise = remoteWindowPromises.get(win);\n\n    if (!remoteWinPromise) {\n        throw new Error(`Remote window promise not found`);\n    }\n\n    return remoteWinPromise;\n}\n\ntype SendMessageType = {|\n    (string) : void,\n    fireAndForget : (string) => void\n|};\n\nexport function registerRemoteSendMessage(win : CrossDomainWindowType, domain : string, sendMessage : SendMessageType) {\n    const sendMessageWrapper = (remoteWin : CrossDomainWindowType, remoteDomain : string, message : string) => {\n        if (remoteWin !== win) {\n            throw new Error(`Remote window does not match window`);\n        }\n\n        if (!matchDomain(remoteDomain, domain)) {\n            throw new Error(`Remote domain ${ remoteDomain } does not match domain ${ domain }`);\n        }\n\n        sendMessage.fireAndForget(message);\n    };\n\n    findRemoteWindow(win).resolve(sendMessageWrapper);\n}\n\nexport function rejectRemoteSendMessage(win : CrossDomainWindowType, err : Error) {\n    findRemoteWindow(win).reject(err).catch(noop);\n}\n\nexport function sendBridgeMessage(win : CrossDomainWindowType, domain : string, message : string) : ZalgoPromise<void> {\n\n    const messagingChild  = isOpener(window, win);\n    const messagingParent = isOpener(win, window);\n\n    if (!messagingChild && !messagingParent) {\n        throw new Error(`Can only send messages to and from parent and popup windows`);\n    }\n\n    return findRemoteWindow(win).then(sendMessage => {\n        return sendMessage(win, domain, message);\n    });\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { getDomain, getFrameByName, isWindowClosed, getDomainFromUrl, normalizeMockUrl, type CrossDomainWindowType } from 'cross-domain-utils/src';\n\nimport { BRIDGE_TIMEOUT, MESSAGE_NAME } from '../conf';\nimport { awaitWindowHello } from '../lib';\nimport { windowStore, globalStore } from '../global';\nimport type { OnType, SendType, ReceiveMessageType } from '../types';\n\nimport { getBridgeName, documentBodyReady, registerRemoteSendMessage, registerRemoteWindow } from './common';\n\nexport function listenForOpenTunnel({ on, send, receiveMessage } : { on : OnType, send : SendType, receiveMessage : ReceiveMessageType }) {\n    const popupWindowsByName = globalStore('popupWindowsByName');\n\n    on(MESSAGE_NAME.OPEN_TUNNEL, ({ source, origin, data }) => {\n        const bridgePromise = globalStore('bridges').get(origin);\n\n        if (!bridgePromise) {\n            throw new Error(`Can not find bridge promise for domain ${ origin }`);\n        }\n\n        return bridgePromise.then(bridge => {\n            if (source !== bridge) {\n                throw new Error(`Message source does not matched registered bridge for domain ${ origin }`);\n            }\n\n            if (!data.name) {\n                throw new Error(`Register window expected to be passed window name`);\n            }\n\n            if (!data.sendMessage) {\n                throw new Error(`Register window expected to be passed sendMessage method`);\n            }\n\n            if (!popupWindowsByName.has(data.name)) {\n                throw new Error(`Window with name ${ data.name } does not exist, or was not opened by this window`);\n            }\n\n            if (!popupWindowsByName.get(data.name).domain) {\n                throw new Error(`We do not have a registered domain for window ${ data.name }`);\n            }\n\n            if (popupWindowsByName.get(data.name).domain !== origin) {\n                throw new Error(`Message origin ${ origin } does not matched registered window origin ${ popupWindowsByName.get(data.name).domain }`);\n            }\n\n            registerRemoteSendMessage(popupWindowsByName.get(data.name).win, origin, data.sendMessage);\n\n            return {\n                sendMessage(message) {\n\n                    if (!window || window.closed) {\n                        return;\n                    }\n\n                    const winDetails = popupWindowsByName.get(data.name);\n\n                    if (!winDetails) {\n                        return;\n                    }\n\n                    try {\n                        receiveMessage({\n                            data:   message,\n                            origin: winDetails.domain,\n                            source: winDetails.win\n                        }, { on, send });\n                    } catch (err) {\n                        ZalgoPromise.reject(err);\n                    }\n                }\n            };\n        });\n    });\n}\n\nfunction openBridgeFrame(name : string, url : string) : HTMLIFrameElement {\n\n    const iframe = document.createElement(`iframe`);\n\n    iframe.setAttribute(`name`, name);\n    iframe.setAttribute(`id`,   name);\n\n    iframe.setAttribute(`style`, `display: none; margin: 0; padding: 0; border: 0px none; overflow: hidden;`);\n    iframe.setAttribute(`frameborder`, `0`);\n    iframe.setAttribute(`border`, `0`);\n    iframe.setAttribute(`scrolling`, `no`);\n    iframe.setAttribute(`allowTransparency`, `true`);\n\n    iframe.setAttribute(`tabindex`, `-1`);\n    iframe.setAttribute(`hidden`, `true`);\n    iframe.setAttribute(`title`, ``);\n    iframe.setAttribute(`role`, `presentation`);\n\n    iframe.src = url;\n\n    return iframe;\n}\n\nexport function hasBridge(url : string, domain : string) : boolean {\n    const bridges = globalStore('bridges');\n    return bridges.has(domain || getDomainFromUrl(url));\n}\n\nexport function openBridge(url : string, domain : string) : ZalgoPromise<CrossDomainWindowType> {\n    const bridges = globalStore('bridges');\n    const bridgeFrames = globalStore('bridgeFrames');\n    \n    domain = domain || getDomainFromUrl(url);\n    \n    return bridges.getOrSet(domain, () => ZalgoPromise.try(() => {\n\n        if (getDomain() === domain) {\n            throw new Error(`Can not open bridge on the same domain as current domain: ${ domain }`);\n        }\n\n        const name  = getBridgeName(domain);\n        const frame = getFrameByName(window, name);\n\n        if (frame) {\n            throw new Error(`Frame with name ${ name } already exists on page`);\n        }\n\n        const iframe = openBridgeFrame(name, url);\n        bridgeFrames.set(domain, iframe);\n\n        return documentBodyReady.then(body => {\n\n            body.appendChild(iframe);\n            const bridge = iframe.contentWindow;\n\n            return new ZalgoPromise((resolve, reject) => {\n\n                iframe.addEventListener('load', resolve);\n                iframe.addEventListener('error', reject);\n\n            }).then(() => {\n\n                return awaitWindowHello(bridge, BRIDGE_TIMEOUT, `Bridge ${ url }`);\n\n            }).then(() => {\n\n                return bridge;\n            });\n        });\n    }));\n}\n\ntype WinDetails = {|\n    win : CrossDomainWindowType,\n    domain? : ?string,\n    name? : ?string\n|};\n\nexport function linkWindow({ win, name, domain } : WinDetails) : WinDetails {\n    const popupWindowsByName = globalStore('popupWindowsByName');\n    const popupWindowsByWin = windowStore('popupWindowsByWin');\n\n    for (const winName of popupWindowsByName.keys()) {\n        // $FlowFixMe\n        const details = popupWindowsByName.get(winName);\n        if (!details || isWindowClosed(details.win)) {\n            popupWindowsByName.del(winName);\n        }\n    }\n\n    const details = popupWindowsByWin.getOrSet(win, () : WinDetails => {\n        if (!name) {\n            return { win };\n        }\n        \n        return popupWindowsByName.getOrSet(name, () : WinDetails => {\n            return { win, name };\n        });\n    });\n\n    if (details.win && details.win !== win) {\n        throw new Error(`Different window already linked for window: ${ name || 'undefined' }`);\n    }\n\n    if (name) {\n        details.name = name;\n        popupWindowsByName.set(name, details);\n    }\n\n    if (domain) {\n        details.domain = domain;\n        registerRemoteWindow(win);\n    }\n\n    popupWindowsByWin.set(win, details);\n    \n    return details;\n}\n\nexport function linkUrl(win : CrossDomainWindowType, url : string) {\n    linkWindow({ win, domain: getDomainFromUrl(url) });\n}\n\nexport function listenForWindowOpen() {\n    const windowOpen = window.open;\n\n    window.open = function windowOpenWrapper(url : string, name : string, options : string, last : mixed) : mixed {\n        const win = windowOpen.call(this, normalizeMockUrl(url), name, options, last);\n    \n        if (!win) {\n            return win;\n        }\n    \n        linkWindow({ win, name, domain: url ? getDomainFromUrl(url) : null });\n    \n        return win;\n    };\n}\n\nexport function destroyBridges() {\n    const bridges = globalStore('bridges');\n    const bridgeFrames = globalStore('bridgeFrames');\n\n    for (const domain of bridgeFrames.keys()) {\n        const frame = bridgeFrames.get(domain);\n        if (frame && frame.parentNode) {\n            frame.parentNode.removeChild(frame);\n        }\n    }\n    bridgeFrames.reset();\n    bridges.reset();\n}\n","/* @flow */\n\nimport type { OnType, SendType, ReceiveMessageType } from '../types';\n\nimport { listenForWindowOpen, listenForOpenTunnel } from './parent';\nimport { setupOpenTunnelToParent } from './bridge';\nimport { openTunnelToOpener } from './child';\n\nexport function setupBridge({ on, send, receiveMessage } : { on : OnType, send : SendType, receiveMessage : ReceiveMessageType }) {\n    listenForWindowOpen();\n    listenForOpenTunnel({ on, send, receiveMessage });\n    setupOpenTunnelToParent({ on, send });\n    openTunnelToOpener({ on, send, receiveMessage });\n}\n","/* @flow */\n\nimport { type ZalgoPromise } from 'zalgo-promise/src';\nimport { getParent, isWindowClosed, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop, uniqueID } from 'belter/src';\n\nimport { MESSAGE_NAME, WILDCARD } from '../conf';\nimport { getGlobal, globalStore } from '../global';\nimport type { SendType, ResponseMessageEvent } from '../types';\n\nfunction cleanTunnelWindows() {\n    const tunnelWindows = globalStore('tunnelWindows');\n\n    for (const key of tunnelWindows.keys()) {\n        const tunnelWindow = tunnelWindows[key];\n\n        try {\n            noop(tunnelWindow.source);\n        } catch (err) {\n            tunnelWindows.del(key);\n            continue;\n        }\n\n        if (isWindowClosed(tunnelWindow.source)) {\n            tunnelWindows.del(key);\n        }\n    }\n}\n\ntype TunnelWindowDataType = {|\n    name : string,\n    source : CrossDomainWindowType,\n    canary : () => void,\n    sendMessage : (message : string) => void\n|};\n\nfunction addTunnelWindow({ name, source, canary, sendMessage } : TunnelWindowDataType) : string {\n    cleanTunnelWindows();\n    const id = uniqueID();\n    const tunnelWindows = globalStore('tunnelWindows');\n    tunnelWindows.set(id, { name, source, canary, sendMessage });\n    return id;\n}\n\nexport function setupOpenTunnelToParent({ send } : { send : SendType }) {\n    getGlobal(window).openTunnelToParent = function openTunnelToParent({ name, source, canary, sendMessage } : TunnelWindowDataType) : ZalgoPromise<ResponseMessageEvent> {\n\n        const tunnelWindows = globalStore('tunnelWindows');\n        const parentWindow = getParent(window);\n    \n        if (!parentWindow) {\n            throw new Error(`No parent window found to open tunnel to`);\n        }\n    \n        const id = addTunnelWindow({ name, source, canary, sendMessage });\n    \n        return send(parentWindow, MESSAGE_NAME.OPEN_TUNNEL, {\n    \n            name,\n    \n            sendMessage() {\n    \n                const tunnelWindow = tunnelWindows.get(id);\n    \n                try {\n                    // IE gets antsy if you try to even reference a closed window\n                    noop(tunnelWindow && tunnelWindow.source);\n                } catch (err) {\n                    tunnelWindows.del(id);\n                    return;\n                }\n    \n                if (!tunnelWindow || !tunnelWindow.source || isWindowClosed(tunnelWindow.source)) {\n                    return;\n                }\n    \n                try {\n                    tunnelWindow.canary();\n                } catch (err) {\n                    return;\n                }\n    \n                tunnelWindow.sendMessage.apply(this, arguments);\n            }\n    \n        }, { domain: WILDCARD });\n    };\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { isSameDomain, getOpener, getDomain, getFrameByName, assertSameDomain, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop } from 'belter/src';\n\nimport { getGlobal, windowStore } from '../global';\nimport type { OnType, SendType, ReceiveMessageType } from '../types';\n\nimport { needsBridge, registerRemoteWindow, rejectRemoteSendMessage, registerRemoteSendMessage, getBridgeName } from './common';\n\nfunction awaitRemoteBridgeForWindow (win : CrossDomainWindowType) : ZalgoPromise<?CrossDomainWindowType> {\n    return windowStore('remoteBridgeAwaiters').getOrSet(win, () => {\n        return ZalgoPromise.try(() => {\n            const frame = getFrameByName(win, getBridgeName(getDomain()));\n\n            if (!frame) {\n                return;\n            }\n\n            if (isSameDomain(frame) && getGlobal(assertSameDomain(frame))) {\n                return frame;\n            }\n\n            return new ZalgoPromise(resolve => {\n\n                let interval;\n                let timeout; // eslint-disable-line prefer-const\n\n                interval = setInterval(() => { // eslint-disable-line prefer-const\n                    if (frame && isSameDomain(frame) && getGlobal(assertSameDomain(frame))) {\n                        clearInterval(interval);\n                        clearTimeout(timeout);\n                        return resolve(frame);\n                    }\n                }, 100);\n\n                timeout = setTimeout(() => {\n                    clearInterval(interval);\n                    return resolve();\n                }, 2000);\n            });\n        });\n    });\n}\n\nexport function openTunnelToOpener({ on, send, receiveMessage } : { on : OnType, send : SendType, receiveMessage : ReceiveMessageType }) : ZalgoPromise<void> {\n    return ZalgoPromise.try(() => {\n        const opener = getOpener(window);\n        \n        if (!opener || !needsBridge({ win: opener })) {\n            return;\n        }\n\n        registerRemoteWindow(opener);\n\n        return awaitRemoteBridgeForWindow(opener).then(bridge => {\n\n            if (!bridge) {\n                return rejectRemoteSendMessage(opener, new Error(`Can not register with opener: no bridge found in opener`));\n            }\n\n            if (!window.name) {\n                return rejectRemoteSendMessage(opener, new Error(`Can not register with opener: window does not have a name`));\n            }\n\n            return getGlobal(assertSameDomain(bridge)).openTunnelToParent({\n\n                name: window.name,\n\n                source: window,\n\n                canary() {\n                    // pass\n                },\n\n                sendMessage(message) {\n\n                    try {\n                        noop(window);\n                    } catch (err) {\n                        return;\n                    }\n\n                    if (!window || window.closed) {\n                        return;\n                    }\n\n                    try {\n                        receiveMessage({\n                            data:   message,\n                            origin: this.origin,\n                            source: this.source\n                        }, { on, send });\n                    } catch (err) {\n                        ZalgoPromise.reject(err);\n                    }\n                }\n\n            }).then(({ source, origin, data }) => {\n\n                if (source !== opener) {\n                    throw new Error(`Source does not match opener`);\n                }\n\n                registerRemoteSendMessage(source, origin, data.sendMessage);\n\n            }).catch(err => {\n\n                rejectRemoteSendMessage(opener, err);\n                throw err;\n            });\n        });\n    });\n}\n","/* @flow */\n\nimport { isSameDomain, isWindowClosed, type CrossDomainWindowType, closeWindow,\n    type DomainMatcher, getOpener, WINDOW_TYPE, isWindow, assertSameDomain, getFrameForWindow } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { uniqueID, memoizePromise } from 'belter/src';\nimport { serializeType, type CustomSerializedType } from 'universal-serialize/src';\n\nimport { SERIALIZATION_TYPE } from '../conf';\nimport { windowStore, globalStore } from '../global';\nimport { getWindowInstanceID } from '../lib';\nimport { linkWindow } from '../bridge';\nimport type { SendType } from '../types';\n\nfunction cleanupProxyWindows() {\n    const idToProxyWindow = globalStore('idToProxyWindow');\n    for (const id of idToProxyWindow.keys()) {\n        // $FlowFixMe\n        if (idToProxyWindow.get(id).shouldClean()) {\n            idToProxyWindow.del(id);\n        }\n    }\n}\n\ntype SerializedWindowType = {|\n    id : string,\n    getType : () => ZalgoPromise<$Values<typeof WINDOW_TYPE>>,\n    close : () => ZalgoPromise<void>,\n    focus : () => ZalgoPromise<void>,\n    isClosed : () => ZalgoPromise<boolean>,\n    setLocation : (string) => ZalgoPromise<void>,\n    getName : () => ZalgoPromise<?string>,\n    setName : (string) => ZalgoPromise<void>,\n    getInstanceID : () => ZalgoPromise<string>\n|};\n\nfunction getSerializedWindow(winPromise : ZalgoPromise<CrossDomainWindowType>, { send, id = uniqueID() } : { send : SendType, id? : string }) : SerializedWindowType {\n    let windowName;\n    \n    return {\n        id,\n        getType: () => winPromise.then(win => {\n            return getOpener(win) ? WINDOW_TYPE.POPUP : WINDOW_TYPE.IFRAME;\n        }),\n        getInstanceID: memoizePromise(() => winPromise.then(win => getWindowInstanceID(win, { send }))),\n        close:         () => winPromise.then(closeWindow),\n        getName:       () => winPromise.then(win => {\n            if (isWindowClosed(win)) {\n                return;\n            }\n\n            return windowName;\n        }),\n        focus:   () => winPromise.then(win => {\n            win.focus();\n        }),\n        isClosed: () => winPromise.then(win => {\n            return isWindowClosed(win);\n        }),\n        setLocation: (href) => winPromise.then(win => {\n            if (isSameDomain(win)) {\n                try {\n                    if (win.location && typeof win.location.replace === 'function') {\n                        // $FlowFixMe\n                        win.location.replace(href);\n                        return;\n                    }\n                } catch (err) {\n                    // pass\n                }\n            }\n\n            win.location = href;\n        }),\n        setName: (name) => winPromise.then(win => {\n            if (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n                linkWindow({ win, name });\n            }\n\n            const sameDomain = isSameDomain(win);\n            const frame = getFrameForWindow(win);\n\n            if (sameDomain) {\n                assertSameDomain(win).name = name;\n            }\n\n            if (frame) {\n                frame.setAttribute('name', name);\n            }\n\n            if (!sameDomain && !frame) {\n                throw new Error(`Can not set name for cross-domain window: ${ name }`);\n            }\n\n            windowName = name;\n        })\n    };\n}\n\nexport class ProxyWindow {\n\n    id : string\n    isProxyWindow : true = true\n    serializedWindow : SerializedWindowType\n    actualWindow : ?CrossDomainWindowType\n    actualWindowPromise : ZalgoPromise<CrossDomainWindowType>\n    send : SendType\n    name : string\n\n    constructor({ send, win, serializedWindow } : { win? : CrossDomainWindowType, serializedWindow? : SerializedWindowType, send : SendType }) {\n        this.actualWindowPromise = new ZalgoPromise();\n        this.serializedWindow = serializedWindow || getSerializedWindow(this.actualWindowPromise, { send });\n        globalStore('idToProxyWindow').set(this.getID(), this);\n        if (win) {\n            this.setWindow(win, { send });\n        }\n    }\n\n    getID() : string {\n        return this.serializedWindow.id;\n    }\n\n    getType() : ZalgoPromise<$Values<typeof WINDOW_TYPE>> {\n        return this.serializedWindow.getType();\n    }\n\n    isPopup() : ZalgoPromise<boolean> {\n        return this.getType().then(type => {\n            return type === WINDOW_TYPE.POPUP;\n        });\n    }\n\n    setLocation(href : string) : ZalgoPromise<ProxyWindow> {\n        return this.serializedWindow.setLocation(href).then(() => this);\n    }\n\n    getName() : ZalgoPromise<?string> {\n        return this.serializedWindow.getName();\n    }\n\n    setName(name : string) : ZalgoPromise<ProxyWindow> {\n        return this.serializedWindow.setName(name).then(() => this);\n    }\n\n    close() : ZalgoPromise<ProxyWindow> {\n        return this.serializedWindow.close().then(() => this);\n    }\n\n    focus() : ZalgoPromise<ProxyWindow> {\n        const isPopupPromise = this.isPopup();\n        const getNamePromise = this.getName();\n\n        const reopenPromise = ZalgoPromise.hash({ isPopup: isPopupPromise, name: getNamePromise }).then(({ isPopup, name }) => {\n            if (isPopup && name) {\n                window.open('', name);\n            }\n        });\n        const focusPromise = this.serializedWindow.focus();\n\n        return ZalgoPromise.all([\n            reopenPromise,\n            focusPromise\n        ]).then(() => this);\n    }\n\n    isClosed() : ZalgoPromise<boolean> {\n        return this.serializedWindow.isClosed();\n    }\n\n    getWindow() : ?CrossDomainWindowType {\n        return this.actualWindow;\n    }\n\n    setWindow(win : CrossDomainWindowType, { send } : { send : SendType }) {\n        this.actualWindow = win;\n        this.actualWindowPromise.resolve(this.actualWindow);\n        this.serializedWindow = getSerializedWindow(this.actualWindowPromise, { send, id: this.getID() });\n        windowStore('winToProxyWindow').set(win, this);\n    }\n\n    awaitWindow() : ZalgoPromise<CrossDomainWindowType> {\n        return this.actualWindowPromise;\n    }\n\n    matchWindow(win : CrossDomainWindowType, { send } : { send : SendType }) : ZalgoPromise<boolean> {\n        return ZalgoPromise.try(() => {\n            if (this.actualWindow) {\n                return win === this.actualWindow;\n            }\n            \n            return ZalgoPromise.hash({\n                proxyInstanceID:       this.getInstanceID(),\n                knownWindowInstanceID: getWindowInstanceID(win, { send })\n            }).then(({ proxyInstanceID, knownWindowInstanceID }) => {\n                const match = proxyInstanceID === knownWindowInstanceID;\n\n                if (match) {\n                    this.setWindow(win, { send });\n                }\n\n                return match;\n            });\n        });\n    }\n\n    unwrap() : CrossDomainWindowType | ProxyWindow {\n        return this.actualWindow || this;\n    }\n\n    getInstanceID() : ZalgoPromise<string> {\n        return this.serializedWindow.getInstanceID();\n    }\n\n    shouldClean() : boolean {\n        return Boolean(this.actualWindow && isWindowClosed(this.actualWindow));\n    }\n\n    serialize() : SerializedWindowType {\n        return this.serializedWindow;\n    }\n\n    static unwrap(win : CrossDomainWindowType | ProxyWindow) : CrossDomainWindowType | ProxyWindow {\n        return ProxyWindow.isProxyWindow(win)\n            // $FlowFixMe\n            ? win.unwrap()\n            : win;\n    }\n\n    static serialize(win : CrossDomainWindowType | ProxyWindow, { send } : { send : SendType }) : SerializedWindowType {\n        cleanupProxyWindows();\n        return ProxyWindow.toProxyWindow(win, { send }).serialize();\n    }\n\n    static deserialize(serializedWindow : SerializedWindowType, { send } : { send : SendType }) : ProxyWindow {\n        cleanupProxyWindows();\n        return globalStore('idToProxyWindow').get(serializedWindow.id) || new ProxyWindow({ serializedWindow, send });\n    }\n\n    static isProxyWindow(obj : CrossDomainWindowType | ProxyWindow) : boolean {\n        // $FlowFixMe\n        return Boolean(obj && !isWindow(obj) && obj.isProxyWindow);\n    }\n\n    static toProxyWindow(win : CrossDomainWindowType | ProxyWindow, { send } : { send : SendType }) : ProxyWindow {\n        cleanupProxyWindows();\n\n        if (ProxyWindow.isProxyWindow(win)) {\n            // $FlowFixMe\n            return win;\n        }\n\n        // $FlowFixMe\n        const actualWindow : CrossDomainWindowType = win;\n        \n        return windowStore('winToProxyWindow').get(actualWindow) || new ProxyWindow({ win: actualWindow, send });\n    }\n}\n\nexport type SerializedWindow = CustomSerializedType<typeof SERIALIZATION_TYPE.CROSS_DOMAIN_WINDOW, SerializedWindowType>;\n\nexport function serializeWindow(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, win : CrossDomainWindowType, { send } : { send : SendType }) : SerializedWindow {\n    return serializeType(SERIALIZATION_TYPE.CROSS_DOMAIN_WINDOW, ProxyWindow.serialize(win, { send }));\n}\n\nexport function deserializeWindow(source : CrossDomainWindowType | ProxyWindow, origin : string, win : SerializedWindowType, { send } : { send : SendType }) : ProxyWindow {\n    return ProxyWindow.deserialize(win, { send });\n}\n","/* @flow */\n\nimport { matchDomain, getDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { uniqueID, isRegex } from 'belter/src';\nimport { serializeType, type CustomSerializedType } from 'universal-serialize/src';\n\nimport { MESSAGE_NAME, WILDCARD, SERIALIZATION_TYPE } from '../conf';\nimport { windowStore, globalStore } from '../global';\nimport type { OnType, SendType, CancelableType } from '../types';\n\nimport { ProxyWindow } from './window';\n\ntype StoredMethod = {|\n    name : string,\n    domain : DomainMatcher,\n    val : Function,\n    source : CrossDomainWindowType | ProxyWindow\n|};\n\nfunction addMethod(id : string, val : Function, name : string, source : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher) {\n    const methodStore = windowStore('methodStore');\n    const proxyWindowMethods = globalStore('proxyWindowMethods');\n    \n    if (ProxyWindow.isProxyWindow(source)) {\n        proxyWindowMethods.set(id, { val, name, domain, source });\n    } else {\n        proxyWindowMethods.del(id);\n        // $FlowFixMe\n        const methods = methodStore.getOrSet(source, () => ({}));\n        methods[id] = { domain, name, val, source };\n    }\n}\n\nfunction lookupMethod(source : CrossDomainWindowType, id : string) : ?StoredMethod {\n    const methodStore = windowStore('methodStore');\n    const proxyWindowMethods = globalStore('proxyWindowMethods');\n    const methods = methodStore.getOrSet(source, () => ({}));\n    return methods[id] || proxyWindowMethods.get(id);\n}\n\nfunction listenForFunctionCalls({ on, send } : { on : OnType, send : SendType }) : CancelableType {\n    return globalStore('builtinListeners').getOrSet('functionCalls', () => {\n        return on(MESSAGE_NAME.METHOD, { domain: WILDCARD }, ({ source, origin, data } : { source : CrossDomainWindowType, origin : string, data : Object }) => {\n            const { id, name } = data;\n\n            const meth = lookupMethod(source, id);\n    \n            if (!meth) {\n                throw new Error(`Could not find method '${ name }' with id: ${ data.id } in ${ getDomain(window) }`);\n            }\n\n            const { source: methodSource, domain, val } = meth;\n            \n            return ZalgoPromise.try(() => {\n                if (!matchDomain(domain, origin)) {\n                    // $FlowFixMe\n                    throw new Error(`Method '${ data.name }' domain ${ JSON.stringify(isRegex(meth.domain) ? meth.domain.source : meth.domain) } does not match origin ${ origin } in ${ getDomain(window) }`);\n                }\n                \n                if (ProxyWindow.isProxyWindow(methodSource)) {\n                    // $FlowFixMe\n                    return methodSource.matchWindow(source, { send }).then(match => {\n                        if (!match) {\n                            throw new Error(`Method call '${ data.name }' failed - proxy window does not match source in ${ getDomain(window) }`);\n                        }\n                    });\n                }\n            }).then(() => {\n                return val.apply({ source, origin }, data.args);\n            }, err => {\n                return ZalgoPromise.try(() => {\n                    if (val.onError) {\n                        return val.onError(err);\n                    }\n                }).then(() => {\n                    // $FlowFixMe\n                    if (err.stack) {\n                        // $FlowFixMe\n                        err.stack = `Remote call to ${ name }()\\n\\n${ err.stack }`;\n                    }\n\n                    throw err;\n                });\n            }).then(result => {\n                return { result, id, name };\n            });\n        });\n    });\n}\n\nexport type SerializedFunction = CustomSerializedType<typeof SERIALIZATION_TYPE.CROSS_DOMAIN_FUNCTION, {\n    id : string,\n    name : string\n}>;\n\n// eslint-disable-next-line flowtype/require-exact-type\ntype SerializableFunction<T> = {\n    () : ZalgoPromise<T> | T,\n    __id__? : string,\n    __name__? : string\n};\n\nexport function serializeFunction<T>(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, val : SerializableFunction<T>, key : string, { on, send } : { on : OnType, send : SendType }) : SerializedFunction {\n    listenForFunctionCalls({ on, send });\n    \n    const id = val.__id__ || uniqueID();\n    destination = ProxyWindow.unwrap(destination);\n    let name = val.__name__ || val.name || key;\n\n    if (typeof name === 'string' && typeof name.indexOf === 'function' && name.indexOf('anonymous::') === 0) {\n        name = name.replace('anonymous::', `${ key }::`);\n    }\n\n    if (ProxyWindow.isProxyWindow(destination)) {\n        addMethod(id, val, name, destination, domain);\n\n        // $FlowFixMe\n        destination.awaitWindow().then(win => {\n            addMethod(id, val, name, win, domain);\n        });\n    } else {\n        addMethod(id, val, name, destination, domain);\n    }\n\n    return serializeType(SERIALIZATION_TYPE.CROSS_DOMAIN_FUNCTION, { id, name });\n}\n\nexport function deserializeFunction<T>(source : CrossDomainWindowType | ProxyWindow, origin : string, { id, name } : { id : string, name : string }, { send } : { send : SendType }) : (...args : $ReadOnlyArray<mixed>) => ZalgoPromise<T> {\n    const getDeserializedFunction = (opts? : Object = {}) => {\n        function crossDomainFunctionWrapper<X : mixed>() : ZalgoPromise<X> {\n            let originalStack;\n    \n            if (__DEBUG__) {\n                originalStack = (new Error(`Original call to ${ name }():`)).stack;\n            }\n    \n            return ProxyWindow.toProxyWindow(source, { send }).awaitWindow().then(win => {\n                const meth = lookupMethod(win, id);\n    \n                if (meth && meth.val !== crossDomainFunctionWrapper) {\n                    return meth.val.apply({ source: window, origin: getDomain() }, arguments);\n                } else {\n                    // $FlowFixMe\n                    const options = { domain: origin, fireAndForget: opts.fireAndForget };\n                    const args = Array.prototype.slice.call(arguments);\n\n                    return send(win, MESSAGE_NAME.METHOD, { id, name, args }, options)\n                        .then(res => {\n                            if (!opts.fireAndForget) {\n                                return res.data.result;\n                            }\n                        });\n                }\n    \n            }).catch(err => {\n                // $FlowFixMe\n                if (__DEBUG__ && originalStack && err.stack) {\n                    // $FlowFixMe\n                    err.stack = `${ err.stack }\\n\\n${ originalStack }`;\n                }\n                throw err;\n            });\n        }\n\n        crossDomainFunctionWrapper.__name__ = name;\n        crossDomainFunctionWrapper.__origin__ = origin;\n        crossDomainFunctionWrapper.__source__ = source;\n        crossDomainFunctionWrapper.__id__ = id;\n\n        crossDomainFunctionWrapper.origin = origin;\n\n        return crossDomainFunctionWrapper;\n    };\n\n    const crossDomainFunctionWrapper = getDeserializedFunction();\n    crossDomainFunctionWrapper.fireAndForget = getDeserializedFunction({ fireAndForget: true });\n\n    return crossDomainFunctionWrapper;\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType, isWindow, type DomainMatcher } from 'cross-domain-utils/src';\nimport { TYPE, serialize, deserialize, type Thenable } from 'universal-serialize/src';\n\nimport { SERIALIZATION_TYPE } from '../conf';\nimport type { OnType, SendType } from '../types';\n\nimport { serializeFunction, deserializeFunction, type SerializedFunction } from './function';\nimport { serializePromise, deserializePromise, type SerializedPromise } from './promise';\nimport { serializeWindow, deserializeWindow, type SerializedWindow, ProxyWindow } from './window';\n\nexport function serializeMessage<T : mixed>(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, obj : T, { on, send } : { on : OnType, send : SendType }) : string {\n    return serialize(obj, {\n        [ TYPE.PROMISE ]:  (val : Thenable, key : string) : SerializedPromise => serializePromise(destination, domain, val, key, { on, send }),\n        [ TYPE.FUNCTION ]: (val : Function, key : string) : SerializedFunction => serializeFunction(destination, domain, val, key, { on, send }),\n        [ TYPE.OBJECT ]:   (val : CrossDomainWindowType) : Object | SerializedWindow => {\n            return (isWindow(val) || ProxyWindow.isProxyWindow(val)) ? serializeWindow(destination, domain, val, { on, send }) : val;\n        }\n    });\n}\n\nexport function deserializeMessage<T : mixed>(source : CrossDomainWindowType | ProxyWindow, origin : string, message : string, { on, send } : { on : OnType, send : SendType }) : T {\n    return deserialize(message, {\n        [ SERIALIZATION_TYPE.CROSS_DOMAIN_ZALGO_PROMISE ]: (serializedPromise)  => deserializePromise(source, origin, serializedPromise),\n        [ SERIALIZATION_TYPE.CROSS_DOMAIN_FUNCTION ]:      (serializedFunction) => deserializeFunction(source, origin, serializedFunction, { on, send }),\n        [ SERIALIZATION_TYPE.CROSS_DOMAIN_WINDOW ]:        (serializedWindow)   => deserializeWindow(source, origin, serializedWindow, { send })\n    });\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { serializeType, type CustomSerializedType, type Thenable } from 'universal-serialize/src';\n\nimport { SERIALIZATION_TYPE } from '../conf';\nimport type { OnType, SendType } from '../types';\n\nimport { serializeFunction, type SerializedFunction } from './function';\nimport { ProxyWindow } from './window';\n\nexport type SerializedPromise = CustomSerializedType<typeof SERIALIZATION_TYPE.CROSS_DOMAIN_ZALGO_PROMISE, {\n    then : SerializedFunction\n}>;\n\nexport function serializePromise(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, val : Thenable, key : string, { on, send } : { on : OnType, send : SendType }) : SerializedPromise {\n    return serializeType(SERIALIZATION_TYPE.CROSS_DOMAIN_ZALGO_PROMISE, {\n        then: serializeFunction(destination, domain, (resolve, reject) => val.then(resolve, reject), key, { on, send })\n    });\n}\n\nexport function deserializePromise<T>(source : CrossDomainWindowType | ProxyWindow, origin : string, { then } : { then : Function }) : ZalgoPromise<T> {\n    return new ZalgoPromise(then);\n}\n","/* @flow */\n\nimport { isSameDomain, isSameTopWindow, isActuallySameDomain, getActualDomain,\n    getDomain, type CrossDomainWindowType, type DomainMatcher, PROTOCOL } from 'cross-domain-utils/src';\n\nimport { SEND_STRATEGY, WILDCARD } from '../../conf';\nimport { needsGlobalMessagingForBrowser } from '../../lib';\nimport { getGlobal } from '../../global';\nimport { sendBridgeMessage, needsBridgeForBrowser, isBridge } from '../../bridge';\n\nexport const SEND_MESSAGE_STRATEGIES = {};\n\nSEND_MESSAGE_STRATEGIES[SEND_STRATEGY.POST_MESSAGE] = (win : CrossDomainWindowType, serializedMessage : string, domain : DomainMatcher) => {\n\n    if (__TEST__) {\n        if (needsGlobalMessagingForBrowser() && isSameTopWindow(window, win) === false) {\n            return;\n        }\n    }\n\n    let domains;\n\n    if (Array.isArray(domain)) {\n        domains = domain;\n    } else if (typeof domain === 'string') {\n        domains = [ domain ];\n    } else {\n        domains = [ WILDCARD ];\n    }\n\n    domains = domains.map(dom => {\n\n        if (__TEST__) {\n            if (dom.indexOf(PROTOCOL.MOCK) === 0) {\n                if (window.location.protocol === PROTOCOL.FILE) {\n                    return WILDCARD;\n                }\n\n                if (!isActuallySameDomain(win)) {\n                    throw new Error(`Attempting to send messsage to mock domain ${ dom }, but window is actually cross-domain`);\n                }\n\n                // $FlowFixMe\n                const windowDomain = getDomain(win);\n                \n                if (windowDomain !== dom) {\n                    throw new Error(`Mock domain target ${ dom } does not match window domain ${ windowDomain }`);\n                }\n\n                // $FlowFixMe\n                return getActualDomain(win);\n\n            }\n        }\n        \n        if (dom.indexOf(PROTOCOL.FILE) === 0) {\n            return WILDCARD;\n        }\n\n        return dom;\n    });\n\n    domains.forEach(dom => {\n        win.postMessage(serializedMessage, dom);\n    });\n};\n\nif (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n\n    SEND_MESSAGE_STRATEGIES[SEND_STRATEGY.BRIDGE] = (win : CrossDomainWindowType, serializedMessage : string, domain : string) => {\n\n        if (!needsBridgeForBrowser() && !isBridge()) {\n            throw new Error(`Bridge not needed for browser`);\n        }\n\n        if (isSameDomain(win)) {\n            throw new Error(`Post message through bridge disabled between same domain windows`);\n        }\n\n        if (isSameTopWindow(window, win) !== false) {\n            throw new Error(`Can only use bridge to communicate between two different windows, not between frames`);\n        }\n\n        sendBridgeMessage(win, domain, serializedMessage);\n    };\n}\n\nif (__POST_ROBOT__.__IE_POPUP_SUPPORT__ || __POST_ROBOT__.__GLOBAL_MESSAGE_SUPPORT__) {\n    \n    SEND_MESSAGE_STRATEGIES[SEND_STRATEGY.GLOBAL] = (win : CrossDomainWindowType, serializedMessage : string) => {\n\n        if (!needsGlobalMessagingForBrowser()) {\n            throw new Error(`Global messaging not needed for browser`);\n        }\n\n        if (!isSameDomain(win)) {\n            throw new Error(`Post message through global disabled between different domain windows`);\n        }\n\n        if (isSameTopWindow(window, win) !== false) {\n            throw new Error(`Can only use global to communicate between two different windows, not between frames`);\n        }\n\n        // $FlowFixMe\n        const foreignGlobal = getGlobal(win);\n\n        if (!foreignGlobal) {\n            throw new Error(`Can not find postRobot global on foreign window`);\n        }\n\n        foreignGlobal.receiveMessage({\n            source: window,\n            origin: getDomain(),\n            data:   serializedMessage\n        });\n    };\n}\n","/* @flow */\n\nimport { isWindowClosed, getDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { uniqueID, stringifyError } from 'belter/src';\n\nimport { serializeMessage } from '../../serialize';\nimport type { Message } from '../types';\nimport type { OnType, SendType } from '../../types';\n\nimport { SEND_MESSAGE_STRATEGIES } from './strategies';\n\nexport function sendMessage(win : CrossDomainWindowType, domain : DomainMatcher, message : Message, { on, send } : { on : OnType, send : SendType }) {\n    if (isWindowClosed(win)) {\n        throw new Error('Window is closed');\n    }\n    \n    const serializedMessage = serializeMessage(win, domain, {\n        [ __POST_ROBOT__.__GLOBAL_KEY__ ]: {\n            id:     uniqueID(),\n            origin: getDomain(window),\n            ...message\n        }\n    }, { on, send });\n\n    const strategies = Object.keys(SEND_MESSAGE_STRATEGIES);\n    const errors = [];\n\n    for (const strategyName of strategies) {\n        try {\n            SEND_MESSAGE_STRATEGIES[strategyName](win, serializedMessage, domain);\n        } catch (err) {\n            errors.push(err);\n        }\n    }\n\n    if (errors.length === strategies.length) {\n        throw new Error(`All post-robot messaging strategies failed:\\n\\n${ errors.map((err, i) => `${ i }. ${ stringifyError(err) }`).join('\\n\\n') }`);\n    }\n}\n","/* @flow */\n\nimport { getUserAgent } from 'cross-domain-utils/src';\n\nexport function needsGlobalMessagingForBrowser() : boolean {\n\n    if (getUserAgent(window).match(/MSIE|rv:11|trident|edge\\/12|edge\\/13/i)) {\n        return true;\n    }\n\n    return false;\n}\n","/* @flow */\n\nimport { type ZalgoPromise } from 'zalgo-promise/src';\nimport { matchDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { isRegex, getOrSet } from 'belter/src';\n\nimport { getWildcard, type WildCard, globalStore, windowStore } from '../global';\nimport { WILDCARD } from '../conf';\n\nexport function resetListeners() {\n    const responseListeners = globalStore('responseListeners');\n    const erroredResponseListeners = globalStore('erroredResponseListeners');\n    responseListeners.reset();\n    erroredResponseListeners.reset();\n}\n\nconst __DOMAIN_REGEX__ = '__domain_regex__';\n\nexport type RequestListenerType = {|\n    handler : ({ source : CrossDomainWindowType, origin : string, data : mixed }) => (mixed | ZalgoPromise<mixed>),\n    handleError : (err : mixed) => void,\n    window : ?CrossDomainWindowType,\n    name : string,\n    domain : DomainMatcher\n|};\n\nexport type ResponseListenerType = {|\n    name : string,\n    win : CrossDomainWindowType,\n    domain : DomainMatcher,\n    promise : ZalgoPromise<*>,\n    ack? : ?boolean,\n    cancelled? : ?boolean\n|};\n\nexport function addResponseListener(hash : string, listener : ResponseListenerType) {\n    const responseListeners = globalStore('responseListeners');\n    responseListeners.set(hash, listener);\n}\n\nexport function getResponseListener(hash : string) : ?ResponseListenerType {\n    const responseListeners = globalStore('responseListeners');\n    return responseListeners.get(hash);\n}\n\nexport function deleteResponseListener(hash : string) {\n    const responseListeners = globalStore('responseListeners');\n    responseListeners.del(hash);\n}\n\nexport function cancelResponseListeners() {\n    const responseListeners = globalStore('responseListeners');\n    for (const hash of responseListeners.keys()) {\n        const listener = responseListeners.get(hash);\n        if (listener) {\n            listener.cancelled = true;\n        }\n        responseListeners.del(hash);\n    }\n}\n\nexport function markResponseListenerErrored(hash : string) {\n    const erroredResponseListeners = globalStore('erroredResponseListeners');\n    erroredResponseListeners.set(hash, true);\n}\n\nexport function isResponseListenerErrored(hash : string) : boolean {\n    const erroredResponseListeners = globalStore('erroredResponseListeners');\n    return erroredResponseListeners.has(hash);\n}\n\nexport function getRequestListener({ name, win, domain } : { name : string, win : ?(CrossDomainWindowType | WildCard), domain : ?(string | RegExp) }) : ?RequestListenerType {\n    const requestListeners = windowStore('requestListeners');\n\n    if (win === WILDCARD) {\n        win = null;\n    }\n\n    if (domain === WILDCARD) {\n        domain = null;\n    }\n\n    if (!name) {\n        throw new Error(`Name required to get request listener`);\n    }\n\n    for (const winQualifier of [ win, getWildcard() ]) {\n        if (!winQualifier) {\n            continue;\n        }\n\n        const nameListeners = requestListeners.get(winQualifier);\n\n        if (!nameListeners) {\n            continue;\n        }\n\n        const domainListeners = nameListeners[name];\n\n        if (!domainListeners) {\n            continue;\n        }\n\n        if (domain && typeof domain === 'string') {\n            if (domainListeners[domain]) {\n                return domainListeners[domain];\n            }\n\n            if (domainListeners[__DOMAIN_REGEX__]) {\n                for (const { regex, listener } of domainListeners[__DOMAIN_REGEX__]) {\n                    if (matchDomain(regex, domain)) {\n                        return listener;\n                    }\n                }\n            }\n        }\n\n        if (domainListeners[WILDCARD]) {\n            return domainListeners[WILDCARD];\n        }\n    }\n}\n\nexport function addRequestListener({ name, win, domain } : { name : string, win : ?(CrossDomainWindowType | WildCard), domain : ?DomainMatcher }, listener : RequestListenerType) : { cancel : () => void } {\n    const requestListeners = windowStore('requestListeners');\n\n    if (!name || typeof name !== 'string') {\n        throw new Error(`Name required to add request listener`);\n    }\n\n    if (Array.isArray(win)) {\n        const listenersCollection = [];\n\n        for (const item of win) {\n            listenersCollection.push(addRequestListener({ name, domain, win: item }, listener));\n        }\n\n        return {\n            cancel() {\n                for (const cancelListener of listenersCollection) {\n                    cancelListener.cancel();\n                }\n            }\n        };\n    }\n\n    if (Array.isArray(domain)) {\n        const listenersCollection = [];\n\n        for (const item of domain) {\n            listenersCollection.push(addRequestListener({ name, win, domain: item }, listener));\n        }\n\n        return {\n            cancel() {\n                for (const cancelListener of listenersCollection) {\n                    cancelListener.cancel();\n                }\n            }\n        };\n    }\n\n    const existingListener = getRequestListener({ name, win, domain });\n\n    if (!win || win === WILDCARD) {\n        win = getWildcard();\n    }\n\n    domain = domain || WILDCARD;\n\n    if (existingListener) {\n        if (win && domain) {\n            throw new Error(`Request listener already exists for ${ name } on domain ${ domain.toString() } for ${ win === getWildcard() ? 'wildcard' : 'specified' } window`);\n        } else if (win) {\n            throw new Error(`Request listener already exists for ${ name } for ${ win === getWildcard() ? 'wildcard' : 'specified' } window`);\n        } else if (domain) {\n            throw new Error(`Request listener already exists for ${ name } on domain ${ domain.toString() }`);\n        } else {\n            throw new Error(`Request listener already exists for ${ name }`);\n        }\n    }\n\n    const nameListeners = requestListeners.getOrSet(win, () => ({}));\n    const domainListeners = getOrSet(nameListeners, name, () => ({}));\n\n    const strDomain = domain.toString();\n\n    let regexListeners;\n    let regexListener;\n\n    if (isRegex(domain)) {\n        regexListeners = getOrSet(domainListeners, __DOMAIN_REGEX__, () => []);\n        regexListener = { regex: domain, listener };\n        regexListeners.push(regexListener);\n    } else {\n        domainListeners[strDomain] = listener;\n    }\n\n    return {\n        cancel() {\n            delete domainListeners[strDomain];\n\n            if (regexListener) {\n                regexListeners.splice(regexListeners.indexOf(regexListener, 1));\n\n                if (!regexListeners.length) {\n                    delete domainListeners[__DOMAIN_REGEX__];\n                }\n            }\n\n            if (!Object.keys(domainListeners).length) {\n                delete nameListeners[name];\n            }\n\n            if (win && !Object.keys(nameListeners).length) {\n                requestListeners.del(win);\n            }\n        }\n    };\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { getDomain, isWindowClosed, matchDomain, stringifyDomainPattern, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop, stringifyError } from 'belter/src';\n\nimport { MESSAGE_TYPE, MESSAGE_ACK, MESSAGE_NAME } from '../../conf';\nimport { sendMessage } from '../send';\nimport { getRequestListener, getResponseListener, deleteResponseListener, isResponseListenerErrored } from '../listeners';\nimport type { RequestMessage, AckResponseMessage, SuccessResponseMessage, ErrorResponseMessage } from '../types';\nimport type { OnType, SendType } from '../../types';\n\nexport const RECEIVE_MESSAGE_TYPES = {\n\n    [ MESSAGE_TYPE.REQUEST ](source : CrossDomainWindowType, origin : string, message : RequestMessage, { on, send } : { on : OnType, send : SendType }) : ZalgoPromise<void> {\n\n        const options = getRequestListener({ name: message.name, win: source, domain: origin });\n\n        const logName = (message.name === MESSAGE_NAME.METHOD && message.data && typeof message.data.name === 'string') ? `${ message.data.name }()` : message.name;\n\n        if (__DEBUG__) {\n            // eslint-disable-next-line no-console\n            console.info('receive::req', logName, origin, '\\n\\n', message.data);\n        }\n\n        function sendResponse(type : $Values<typeof MESSAGE_TYPE>, ack? : $Values<typeof MESSAGE_ACK>, response = {}) {\n\n            if (message.fireAndForget || isWindowClosed(source)) {\n                return;\n            }\n\n            if (__DEBUG__ && type !== MESSAGE_TYPE.ACK) {\n                if (ack === MESSAGE_ACK.SUCCESS) {\n                    // $FlowFixMe\n                    console.info('respond::res', logName, origin, '\\n\\n', response.data);  // eslint-disable-line no-console\n                } else if (ack === MESSAGE_ACK.ERROR) {\n                    // $FlowFixMe\n                    console.error('respond::err', logName, origin, '\\n\\n', response.error); // eslint-disable-line no-console\n                }\n            }\n\n            try {\n                // $FlowFixMe\n                sendMessage(source, origin, {\n                    type,\n                    ack,\n                    hash:   message.hash,\n                    name:   message.name,\n                    ...response\n                }, { on, send });\n            } catch (err) {\n                throw new Error(`Send response message failed for ${ logName } in ${ getDomain() }\\n\\n${ stringifyError(err) }`);\n            }\n        }\n\n        return ZalgoPromise.all([\n\n            sendResponse(MESSAGE_TYPE.ACK),\n\n            ZalgoPromise.try(() => {\n\n                if (!options) {\n                    throw new Error(`No handler found for post message: ${ message.name } from ${ origin } in ${ window.location.protocol }//${ window.location.host }${ window.location.pathname }`);\n                }\n\n                if (!matchDomain(options.domain, origin)) {\n                    throw new Error(`Request origin ${ origin } does not match domain ${ options.domain.toString() }`);\n                }\n\n                const data = message.data;\n\n                return options.handler({ source, origin, data });\n\n            }).then(data => {\n                return sendResponse(MESSAGE_TYPE.RESPONSE, MESSAGE_ACK.SUCCESS, { data });\n\n            }, error => {\n                return sendResponse(MESSAGE_TYPE.RESPONSE, MESSAGE_ACK.ERROR, { error });\n            })\n\n        ]).then(noop).catch(err => {\n            if (options && options.handleError) {\n                return options.handleError(err);\n            } else {\n                throw err;\n            }\n        });\n    },\n\n    [ MESSAGE_TYPE.ACK ](source : CrossDomainWindowType, origin : string, message : AckResponseMessage) {\n\n        if (isResponseListenerErrored(message.hash)) {\n            return;\n        }\n\n        const options = getResponseListener(message.hash);\n\n        if (!options) {\n            throw new Error(`No handler found for post message ack for message: ${ message.name } from ${ origin } in ${ window.location.protocol }//${ window.location.host }${ window.location.pathname }`);\n        }\n\n        try {\n            if (!matchDomain(options.domain, origin)) {\n                throw new Error(`Ack origin ${ origin } does not match domain ${ options.domain.toString() }`);\n            }\n    \n            if (source !== options.win) {\n                throw new Error(`Ack source does not match registered window`);\n            }\n        } catch (err) {\n            options.promise.reject(err);\n        }\n\n        options.ack = true;\n    },\n\n    [ MESSAGE_TYPE.RESPONSE ](source : CrossDomainWindowType, origin : string, message : SuccessResponseMessage | ErrorResponseMessage) : void | ZalgoPromise<void> {\n\n        if (isResponseListenerErrored(message.hash)) {\n            return;\n        }\n\n        const options = getResponseListener(message.hash);\n\n        if (!options) {\n            throw new Error(`No handler found for post message response for message: ${ message.name } from ${ origin } in ${ window.location.protocol }//${ window.location.host }${ window.location.pathname }`);\n        }\n\n        if (!matchDomain(options.domain, origin)) {\n            throw new Error(`Response origin ${ origin } does not match domain ${ stringifyDomainPattern(options.domain) }`);\n        }\n\n        if (source !== options.win) {\n            throw new Error(`Response source does not match registered window`);\n        }\n\n        deleteResponseListener(message.hash);\n\n        const logName = (message.name === MESSAGE_NAME.METHOD && message.data && typeof message.data.name === 'string') ? `${ message.data.name }()` : message.name;\n\n        if (message.ack === MESSAGE_ACK.ERROR) {\n            if (__DEBUG__) {\n                console.error('receive::err', logName, origin, '\\n\\n', message.error); // eslint-disable-line no-console\n            }\n\n            options.promise.reject(message.error);\n\n        } else if (message.ack === MESSAGE_ACK.SUCCESS) {\n            if (__DEBUG__) {\n                console.info('receive::res', logName, origin, '\\n\\n', message.data); // eslint-disable-line no-console\n            }\n\n            options.promise.resolve({ source, origin, data: message.data });\n        }\n    }\n};\n","/* @flow */\n\nimport { isWindowClosed, type CrossDomainWindowType, getDomain, isSameTopWindow, PROTOCOL  } from 'cross-domain-utils/src';\nimport { addEventListener, noop } from 'belter/src';\n\nimport { markWindowKnown, needsGlobalMessagingForBrowser } from '../../lib';\nimport { deserializeMessage } from '../../serialize';\nimport { getGlobal, globalStore } from '../../global';\nimport type { OnType, SendType, MessageEvent, CancelableType } from '../../types';\n\nimport { RECEIVE_MESSAGE_TYPES } from './types';\n\nfunction parseMessage(message : string, source : CrossDomainWindowType, origin : string, { on, send } : { on : OnType, send : SendType }) : ?Object {\n    let parsedMessage;\n\n    try {\n        parsedMessage = deserializeMessage(source, origin, message, { on, send });\n    } catch (err) {\n        return;\n    }\n\n    if (!parsedMessage) {\n        return;\n    }\n\n    if (typeof parsedMessage !== 'object' || parsedMessage === null) {\n        return;\n    }\n\n    parsedMessage = parsedMessage[__POST_ROBOT__.__GLOBAL_KEY__];\n\n    if (!parsedMessage || typeof parsedMessage !== 'object' || parsedMessage === null) {\n        return;\n    }\n\n    if (!parsedMessage.type || typeof parsedMessage.type !== 'string') {\n        return;\n    }\n\n    if (!RECEIVE_MESSAGE_TYPES[parsedMessage.type]) {\n        return;\n    }\n\n    return parsedMessage;\n}\n\nexport function receiveMessage(event : MessageEvent, { on, send } : { on : OnType, send : SendType }) {\n    const receivedMessages = globalStore('receivedMessages');\n\n    if (!window || window.closed) {\n        throw new Error(`Message received in closed window`);\n    }\n\n    try {\n        if (!event.source) {\n            return;\n        }\n    } catch (err) {\n        return;\n    }\n\n    let { source, origin, data } = event;\n\n    if (__TEST__) {\n        // $FlowFixMe\n        origin = getDomain(source);\n    }\n\n    const message = parseMessage(data, source, origin, { on, send });\n\n    if (!message) {\n        return;\n    }\n\n    markWindowKnown(source);\n\n    if (receivedMessages.has(message.id)) {\n        return;\n    }\n\n    receivedMessages.set(message.id, true);\n\n    if (isWindowClosed(source) && !message.fireAndForget) {\n        return;\n    }\n\n    if (message.origin.indexOf(PROTOCOL.FILE) === 0) {\n        origin = `${ PROTOCOL.FILE }//`;\n    }\n\n    RECEIVE_MESSAGE_TYPES[message.type](source, origin, message, { on, send });\n}\n\nexport function setupGlobalReceiveMessage({ on, send } : { on : OnType, send : SendType }) {\n    const global = getGlobal();\n    global.receiveMessage = global.receiveMessage || (message => receiveMessage(message, { on, send }));\n}\n\ntype ListenerEvent = {|\n    source : CrossDomainWindowType,\n    origin : string,\n    data : string,\n    sourceElement : CrossDomainWindowType,\n    originalEvent? : { origin : string }\n|};\n\nexport function messageListener(event : ListenerEvent, { on, send } : { on : OnType, send : SendType }) {\n\n    try {\n        noop(event.source);\n    } catch (err) {\n        return;\n    }\n\n    const source = event.source || event.sourceElement;\n    let origin = event.origin || (event.originalEvent && event.originalEvent.origin);\n    const data = event.data;\n\n    if (origin === 'null') {\n        origin = `${ PROTOCOL.FILE }//`;\n    }\n\n    if (!source) {\n        return;\n    }\n\n    if (!origin) {\n        throw new Error(`Post message did not have origin domain`);\n    }\n\n    if (__TEST__) {\n        if (needsGlobalMessagingForBrowser() && isSameTopWindow(source, window) === false) {\n            return;\n        }\n    }\n\n    receiveMessage({ source, origin, data }, { on, send });\n}\n\nexport function listenForMessages({ on, send } : { on : OnType, send : SendType }) : CancelableType {\n    return globalStore().getOrSet('postMessageListener', () => {\n        return addEventListener(window, 'message', event => {\n            // $FlowFixMe\n            messageListener(event, { on, send });\n        });\n    });\n}\n\nexport function stopListenForMessages() {\n    const listener = globalStore().get('postMessageListener');\n    if (listener) {\n        listener.cancel();\n    }\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\n\nimport { addRequestListener, type RequestListenerType } from '../drivers';\nimport { WILDCARD } from '../conf';\nimport type { ServerOptionsType, HandlerType, CancelableType } from '../types';\n\nexport function on(name : string, options : ServerOptionsType | HandlerType, handler : ?HandlerType) : CancelableType {\n\n    if (!name) {\n        throw new Error('Expected name');\n    }\n\n    if (typeof options === 'function') {\n        handler = options;\n        // $FlowFixMe\n        options = {};\n    }\n\n    if (!handler) {\n        throw new Error('Expected handler');\n    }\n\n    options = options || {};\n    options.name = name;\n    options.handler = handler || options.handler;\n\n    const win = options.window;\n    const domain = options.domain;\n\n    const listenerOptions : RequestListenerType = {\n        handler:     options.handler,\n        handleError: options.errorHandler || (err => {\n            throw err;\n        }),\n        window: win,\n        domain: domain || WILDCARD,\n        name\n    };\n\n    const requestListener = addRequestListener({ name, win, domain }, listenerOptions);\n\n    return {\n        cancel() {\n            requestListener.cancel();\n        }\n    };\n}\n\nexport function once(name : string, options? : ServerOptionsType | HandlerType, handler? : HandlerType) : ZalgoPromise<{ source : mixed, origin : string, data : Object }> {\n    \n    // $FlowFixMe\n    options = options || {};\n    if (typeof options === 'function') {\n        handler = options;\n        // $FlowFixMe\n        options = {};\n    }\n\n    const promise = new ZalgoPromise();\n    let listener; // eslint-disable-line prefer-const\n\n    options.errorHandler = (err) => {\n        listener.cancel();\n        promise.reject(err);\n    };\n\n    listener = on(name, options, event => {\n        listener.cancel();\n        promise.resolve(event);\n        if (handler) {\n            return handler(event);\n        }\n    });\n\n    promise.cancel = listener.cancel;\n    return promise;\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { isAncestor, isWindowClosed, getDomain, matchDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { uniqueID, isRegex, noop, safeInterval, stringify, stringifyError } from 'belter/src';\n\n\nimport { CHILD_WINDOW_TIMEOUT, MESSAGE_TYPE, WILDCARD, MESSAGE_NAME, ACK_TIMEOUT, RES_TIMEOUT, ACK_TIMEOUT_KNOWN, RESPONSE_CYCLE_TIME } from '../conf';\nimport { sendMessage, addResponseListener, deleteResponseListener, markResponseListenerErrored, type ResponseListenerType } from '../drivers';\nimport { awaitWindowHello, sayHello, isWindowKnown } from '../lib';\nimport { windowStore } from '../global';\nimport type { SendType } from '../types';\n\nimport { on } from './on';\n\nfunction validateOptions(name : string, win : CrossDomainWindowType, domain : ?DomainMatcher) {\n    if (!name) {\n        throw new Error('Expected name');\n    }\n\n    if (domain) {\n        if (typeof domain !== 'string' && !Array.isArray(domain) && !isRegex(domain)) {\n            throw new TypeError(`Expected domain to be a string, array, or regex`);\n        }\n    }\n\n    if (isWindowClosed(win)) {\n        throw new Error('Target window is closed');\n    }\n}\n\nfunction normalizeDomain(win : CrossDomainWindowType, targetDomain : DomainMatcher, actualDomain : ?string, { send } : { send : SendType }) : ZalgoPromise<string | $ReadOnlyArray<string>> {\n    if (typeof targetDomain === 'string') {\n        return ZalgoPromise.resolve(targetDomain);\n    }\n    \n    return ZalgoPromise.try(() => {\n        return actualDomain || sayHello(win, { send }).then(({ domain }) => domain);\n\n    }).then(normalizedDomain => {\n        if (!matchDomain(targetDomain, targetDomain)) {\n            throw new Error(`Domain ${ stringify(targetDomain) } does not match ${ stringify(targetDomain) }`);\n        }\n\n        return normalizedDomain;\n    });\n}\n\nexport const send : SendType = (win, name, data, options) => {\n    options = options || {};\n    let domain = options.domain || WILDCARD;\n    const responseTimeout = options.timeout || RES_TIMEOUT;\n    const childTimeout = options.timeout || CHILD_WINDOW_TIMEOUT;\n    const fireAndForget = options.fireAndForget || false;\n\n    // $FlowFixMe\n    return ZalgoPromise.try(() => {\n        validateOptions(name, win, domain);\n\n        if (isAncestor(window, win)) {\n            return awaitWindowHello(win, childTimeout);\n        }\n        \n    }).then(({ domain: actualDomain } = {}) => {\n\n        return normalizeDomain(win, domain, actualDomain, { send });\n    }).then(targetDomain => {\n\n        domain = targetDomain;\n\n        const logName = (name === MESSAGE_NAME.METHOD && data && typeof data.name === 'string') ? `${ data.name }()` : name;\n\n        if (__DEBUG__) {\n            console.info('send::req', logName, domain, '\\n\\n', data); // eslint-disable-line no-console\n        }\n\n        const promise = new ZalgoPromise();\n        const hash = `${ name }_${ uniqueID() }`;\n\n        if (!fireAndForget) {\n            const responseListener : ResponseListenerType = { name, win, domain, promise };\n            addResponseListener(hash, responseListener);\n\n            const reqPromises = windowStore('requestPromises').getOrSet(win, () => []);\n            reqPromises.push(promise);\n\n            promise.catch(() => {\n                markResponseListenerErrored(hash);\n                deleteResponseListener(hash);\n            });\n\n            const totalAckTimeout = isWindowKnown(win) ? ACK_TIMEOUT_KNOWN : ACK_TIMEOUT;\n            const totalResTimeout = responseTimeout;\n\n            let ackTimeout = totalAckTimeout;\n            let resTimeout = totalResTimeout;\n        \n            const interval = safeInterval(() => {\n                if (isWindowClosed(win)) {\n                    return promise.reject(new Error(`Window closed for ${ name } before ${ responseListener.ack ? 'response' : 'ack' }`));\n                }\n\n                if (responseListener.cancelled) {\n                    return promise.reject(new Error(`Response listener was cancelled for ${ name }`));\n                }\n\n                ackTimeout = Math.max(ackTimeout - RESPONSE_CYCLE_TIME, 0);\n                if (resTimeout !== -1) {\n                    resTimeout = Math.max(resTimeout - RESPONSE_CYCLE_TIME, 0);\n                }\n\n                if (!responseListener.ack && ackTimeout === 0) {\n                    return promise.reject(new Error(`No ack for postMessage ${ logName } in ${ getDomain() } in ${ totalAckTimeout }ms`));\n\n                } else if (resTimeout === 0) {\n                    return promise.reject(new Error(`No response for postMessage ${ logName } in ${ getDomain() } in ${ totalResTimeout }ms`));\n                }\n            }, RESPONSE_CYCLE_TIME);\n\n            promise.finally(() => {\n                interval.cancel();\n                reqPromises.splice(reqPromises.indexOf(promise, 1));\n            }).catch(noop);\n        }\n\n        try {\n            sendMessage(win, domain, {\n                type: MESSAGE_TYPE.REQUEST,\n                hash,\n                name,\n                data,\n                fireAndForget\n            }, { on, send });\n        } catch (err) {\n            throw new Error(`Send request message failed for ${ logName } in ${ getDomain() }\\n\\n${ stringifyError(err) }`);\n        }\n    \n        return fireAndForget ? promise.resolve() : promise;\n    });\n};\n","/* @flow */\n\nimport { setup } from './setup';\nimport { setupBridge, openBridge, linkWindow, linkUrl, isBridge, needsBridge, needsBridgeForBrowser, hasBridge,\n    needsBridgeForWin, needsBridgeForDomain, destroyBridges } from './bridge';\n\nexport { ZalgoPromise as Promise } from 'zalgo-promise/src';\n\nexport * from './types';\nexport { ProxyWindow } from './serialize';\nexport { setup, destroy, serializeMessage, deserializeMessage, createProxyWindow, toProxyWindow } from './setup';\nexport { on, once, send } from './public';\nexport { markWindowKnown } from './lib';\nexport { cleanUpWindow } from './clean';\nexport let bridge;\n\nif (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n    bridge = { setupBridge, openBridge, linkWindow, linkUrl, isBridge, needsBridge,\n        needsBridgeForBrowser, hasBridge, needsBridgeForWin, needsBridgeForDomain, destroyBridges };\n}\n\nif (__POST_ROBOT__.__AUTO_SETUP__) {\n    setup();\n}\n","/* @flow */\n\nimport type { CrossDomainWindowType, DomainMatcher } from 'cross-domain-utils/src';\n\nimport { initHello } from './lib';\nimport { listenForMessages, stopListenForMessages, receiveMessage, setupGlobalReceiveMessage, cancelResponseListeners } from './drivers';\nimport { getGlobal, deleteGlobal } from './global';\nimport { on, send } from './public';\nimport { setupBridge } from './bridge';\nimport { serializeMessage as internalSerializeMessage, deserializeMessage as internalDeserializeMessage, ProxyWindow } from './serialize';\n\nexport function serializeMessage<T>(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, obj : T) : string {\n    return internalSerializeMessage(destination, domain, obj, { on, send });\n}\n\nexport function deserializeMessage<T : mixed>(source : CrossDomainWindowType | ProxyWindow, origin : string, message : string) : T {\n    return internalDeserializeMessage(source, origin, message, { on, send });\n}\n\nexport function createProxyWindow(win? : CrossDomainWindowType) : ProxyWindow {\n    return new ProxyWindow({ send, win });\n}\n\nexport function toProxyWindow(win : CrossDomainWindowType | ProxyWindow) : ProxyWindow {\n    return ProxyWindow.toProxyWindow(win, { send });\n}\n\nexport function setup() {\n    if (!getGlobal().initialized) {\n        getGlobal().initialized = true;\n    \n        setupGlobalReceiveMessage({ on, send });\n        listenForMessages({ on, send });\n    \n        if (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n            setupBridge({ on, send, receiveMessage });\n        }\n\n        initHello({ on, send });\n    }\n}\n\nexport function destroy() {\n    cancelResponseListeners();\n    stopListenForMessages();\n    deleteGlobal();\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop } from 'belter/src';\n\nimport { windowStore } from './global';\n\nexport function cleanUpWindow(win : CrossDomainWindowType) {\n    const requestPromises = windowStore('requestPromises');\n    for (const promise of requestPromises.get(win, [])) {\n        promise.reject(new Error(`Window cleaned up before response`)).catch(noop);\n    }\n}\n","/* @flow */\n\nimport type { ZalgoPromise } from 'zalgo-promise/src';\nimport type { CrossDomainWindowType, DomainMatcher } from 'cross-domain-utils/src';\n\n// export something to force webpack to see this as an ES module\nexport const TYPES = true;\n\n// eslint-disable-next-line flowtype/require-exact-type\nexport type CancelableType = {\n    cancel : () => void\n};\n\nexport type ErrorHandlerType = (err : mixed) => void;\n\nexport type HandlerType = ({\n    source : CrossDomainWindowType,\n    origin : string,\n    data : any // eslint-disable-line flowtype/no-weak-types\n}) => (void | any | ZalgoPromise<any>); // eslint-disable-line flowtype/no-weak-types\n\nexport type ServerOptionsType = {|\n    handler? : ?HandlerType,\n    errorHandler? : ?ErrorHandlerType,\n    window? : CrossDomainWindowType,\n    name? : ?string,\n    domain? : ?DomainMatcher,\n    once? : ?boolean,\n    errorOnClose? : ?boolean\n|};\n\nexport type OnType = (\n    name : string,\n    options : ServerOptionsType | HandlerType,\n    handler : ?HandlerType\n) => CancelableType;\n\ntype RegularRequestOptionsType = {|\n    domain? : ?DomainMatcher,\n    fireAndForget? : false,\n    timeout? : ?number\n|};\n\ntype FireAndForgetRequestOptionsType = {|\n    domain? : ?DomainMatcher,\n    fireAndForget : true,\n    timeout? : ?number\n|};\n\nexport type RequestOptionsType = RegularRequestOptionsType | FireAndForgetRequestOptionsType;\n\nexport type ResponseMessageEvent = {|\n    source : CrossDomainWindowType,\n    origin : string,\n    data : Object\n|};\n\ntype RegularSendType = (\n    win : CrossDomainWindowType,\n    name : string,\n    data : ?Object,\n    options? : RegularRequestOptionsType\n) => ZalgoPromise<ResponseMessageEvent>;\n\ntype FireAndForgetSendType = (\n    win : CrossDomainWindowType,\n    name : string,\n    data : ?Object,\n    options? : FireAndForgetRequestOptionsType\n) => ZalgoPromise<void>;\n\nexport type SendType = RegularSendType & FireAndForgetSendType;\n\nexport type MessageEvent = {|\n    source : CrossDomainWindowType,\n    origin : string,\n    data : string\n|};\n\n// eslint-disable-next-line flowtype/require-exact-type\nexport type CrossDomainFunctionType<A, R> = {\n    (...args : A) : ZalgoPromise<R>,\n    fireAndForget : (...args : A) => ZalgoPromise<void>,\n    __id__? : string,\n    __name__? : string\n};\n\nexport type ReceiveMessageType = (MessageEvent, { on : OnType, send : SendType }) => void;\n"],"sourceRoot":""}