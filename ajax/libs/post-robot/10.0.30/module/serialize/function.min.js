"use strict";exports.__esModule=!0,exports.serializeFunction=serializeFunction,exports.deserializeFunction=deserializeFunction;var _src=require("cross-domain-utils/src"),_src2=require("zalgo-promise/src"),_src3=require("belter/src"),_src4=require("universal-serialize/src"),_conf=require("../conf"),_global=require("../global"),_window=require("./window");function addMethod(o,n,e,r,i){const t=(0,_global.windowStore)("methodStore"),a=(0,_global.globalStore)("proxyWindowMethods");if(_window.ProxyWindow.isProxyWindow(r))a.set(o,{val:n,name:e,domain:i,source:r});else{a.del(o),t.getOrSet(r,()=>({}))[o]={domain:i,name:e,val:n,source:r}}}function lookupMethod(o,n){const e=(0,_global.windowStore)("methodStore"),r=(0,_global.globalStore)("proxyWindowMethods");return e.getOrSet(o,()=>({}))[n]||r.get(n)}function listenForFunctionCalls({on:o,send:n}){return(0,_global.globalStore)("builtinListeners").getOrSet("functionCalls",()=>o(_conf.MESSAGE_NAME.METHOD,{domain:_conf.WILDCARD},({source:o,origin:e,data:r})=>{const{id:i,name:t}=r,a=lookupMethod(o,i);if(!a)throw new Error(`Could not find method '${t}' with id: ${r.id} in ${(0,_src.getDomain)(window)}`);const{source:d,domain:s,val:c}=a;return _src2.ZalgoPromise.try(()=>{if(!(0,_src.matchDomain)(s,e))throw new Error(`Method '${r.name}' domain ${JSON.stringify((0,_src3.isRegex)(a.domain)?a.domain.source:a.domain)} does not match origin ${e} in ${(0,_src.getDomain)(window)}`);if(_window.ProxyWindow.isProxyWindow(d))return d.matchWindow(o,{send:n}).then(o=>{if(!o)throw new Error(`Method call '${r.name}' failed - proxy window does not match source in ${(0,_src.getDomain)(window)}`)})}).then(()=>c.apply({source:o,origin:e},r.args),o=>_src2.ZalgoPromise.try(()=>{if(c.onError)return c.onError(o)}).then(()=>{throw o.stack&&(o.stack=`Remote call to ${t}()\n\n${o.stack}`),o})).then(o=>({result:o,id:i,name:t}))}))}function serializeFunction(o,n,e,r,{on:i,send:t}){listenForFunctionCalls({on:i,send:t});const a=e.__id__||(0,_src3.uniqueID)();o=_window.ProxyWindow.unwrap(o);let d=e.__name__||e.name||r;return"string"==typeof d&&"function"==typeof d.indexOf&&0===d.indexOf("anonymous::")&&(d=d.replace("anonymous::",`${r}::`)),_window.ProxyWindow.isProxyWindow(o)?(addMethod(a,e,d,o,n),o.awaitWindow().then(o=>{addMethod(a,e,d,o,n)})):addMethod(a,e,d,o,n),(0,_src4.serializeType)(_conf.SERIALIZATION_TYPE.CROSS_DOMAIN_FUNCTION,{id:a,name:d})}function deserializeFunction(o,n,{id:e,name:r},{send:i}){const t=(t={})=>{function a(){let d;return __DEBUG__&&(d=new Error(`Original call to ${r}():`).stack),_window.ProxyWindow.toProxyWindow(o,{send:i}).awaitWindow().then(o=>{const d=lookupMethod(o,e);if(d&&d.val!==a)return d.val.apply({source:window,origin:(0,_src.getDomain)()},arguments);{const a={domain:n,fireAndForget:t.fireAndForget},d=Array.prototype.slice.call(arguments);return i(o,_conf.MESSAGE_NAME.METHOD,{id:e,name:r,args:d},a).then(o=>{if(!t.fireAndForget)return o.data.result})}}).catch(o=>{throw __DEBUG__&&d&&o.stack&&(o.stack=`Remote call to ${r}() failed\n\n${o.stack}\n\n${d}`),o})}return a.__name__=r,a.__origin__=n,a.__source__=o,a.__id__=e,a.origin=n,a},a=t();return a.fireAndForget=t({fireAndForget:!0}),a}