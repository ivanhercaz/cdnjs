"use strict";var __assign=this&&this.__assign||function(){return(__assign=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var s in t=arguments[n])Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s]);return e}).apply(this,arguments)},__awaiter=this&&this.__awaiter||function(r,c,i,o){return new(i=i||Promise)(function(e,t){function n(e){try{s(o.next(e))}catch(e){t(e)}}function a(e){try{s(o.throw(e))}catch(e){t(e)}}function s(t){t.done?e(t.value):new i(function(e){e(t.value)}).then(n,a)}s((o=o.apply(r,c||[])).next())})},__generator=this&&this.__generator||function(n,a){var s,r,c,e,i={label:0,sent:function(){if(1&c[0])throw c[1];return c[1]},trys:[],ops:[]};return e={next:t(0),throw:t(1),return:t(2)},"function"==typeof Symbol&&(e[Symbol.iterator]=function(){return this}),e;function t(t){return function(e){return function(t){if(s)throw new TypeError("Generator is already executing.");for(;i;)try{if(s=1,r&&(c=2&t[0]?r.return:t[0]?r.throw||((c=r.return)&&c.call(r),0):r.next)&&!(c=c.call(r,t[1])).done)return c;switch(r=0,c&&(t=[2&t[0],c.value]),t[0]){case 0:case 1:c=t;break;case 4:return i.label++,{value:t[1],done:!1};case 5:i.label++,r=t[1],t=[0];continue;case 7:t=i.ops.pop(),i.trys.pop();continue;default:if(!(c=0<(c=i.trys).length&&c[c.length-1])&&(6===t[0]||2===t[0])){i=0;continue}if(3===t[0]&&(!c||t[1]>c[0]&&t[1]<c[3])){i.label=t[1];break}if(6===t[0]&&i.label<c[1]){i.label=c[1],c=t;break}if(c&&i.label<c[2]){i.label=c[2],i.ops.push(t);break}c[2]&&i.ops.pop(),i.trys.pop();continue}t=a.call(n,i)}catch(e){t=[6,e],r=0}finally{s=c=0}if(5&t[0])throw t[1];return{value:t[0]?t[1]:void 0,done:!0}}([t,e])}}},_this=this;Object.defineProperty(exports,"__esModule",{value:!0});var BBPromise=require("bluebird"),chai_1=require("chai"),mocks_1=require("../test/mocks"),message_constants_1=require("../../binary-protocol/src/message-constants"),client_options_1=require("../client-options"),record_core_1=require("./record-core"),sinon_1=require("sinon"),constants_1=require("../constants");describe("record core",function(){describe("online scenario, not individual tests",function(){var t,n,e,a,s,r={};beforeEach(function(){t=sinon_1.spy(),a=mocks_1.getServicesMock(),s=mocks_1.getRecordServices(a),a.connectionMock.expects("sendMessage").once().withExactArgs({topic:message_constants_1.TOPIC.RECORD,action:message_constants_1.RECORD_ACTIONS.SUBSCRIBECREATEANDREAD,name:name}),a.storageMock.expects("get").once().callsArgWith(1,name,-1,null),e=__assign({},client_options_1.DefaultOptions,{discardTimeout:20,recordReadTimeout:20,subscriptionInterval:-1}),a.connection.isConnected=!0,(n=new record_core_1.RecordCore(name,a,e,s,t)).addReference(this)}),afterEach(function(){a.verify()}),it("doesn`t send updates before ready",function(){a.connectionMock.expects("sendMessage").never(),n.set({data:{firstname:"Wolfram"}})}),it("doesn`t send patches before ready",function(){a.connectionMock.expects("sendMessage").never(),n.set({path:"firstname",data:"Wolfram"})}),it("triggers ready callback on read response",function(){var e=sinon_1.spy();n.whenReady(r,e),s.readRegistry.recieve(READ_RESPONSE),sinon_1.assert.calledOnce(e),sinon_1.assert.calledWithExactly(e,r)}),it("triggers ready promise on read response",function(){return __awaiter(_this,void 0,void 0,function(){var t;return __generator(this,function(e){switch(e.label){case 0:return t=null,n.whenReady(r).then(function(e){return t=e}),s.readRegistry.recieve(READ_RESPONSE),[4,BBPromise.delay(0)];case 1:return e.sent(),chai_1.expect(t).to.equal(r),[2]}})})}),it("sends update messages for updates after when ready",function(){s.readRegistry.recieve(READ_RESPONSE),a.connectionMock.expects("sendMessage").once().withExactArgs({topic:message_constants_1.TOPIC.RECORD,action:message_constants_1.RECORD_ACTIONS.UPDATE,name:name,parsedData:{firstname:"Bob"},version:2}),n.set({data:{firstname:"Bob"}})}),it("sends patch messages for path changes after when ready",function(){s.readRegistry.recieve(READ_RESPONSE),a.connectionMock.expects("sendMessage").once().withExactArgs({topic:message_constants_1.TOPIC.RECORD,action:message_constants_1.RECORD_ACTIONS.PATCH,name:name,path:"firstname",parsedData:"Bob",version:2}),n.set({path:"firstname",data:"Bob"})}),it("sends update messages for updates write ack after when ready",function(){s.readRegistry.recieve(READ_RESPONSE),a.connectionMock.expects("sendMessage").once().withExactArgs({topic:message_constants_1.TOPIC.RECORD,action:message_constants_1.RECORD_ACTIONS.UPDATE_WITH_WRITE_ACK,name:name,parsedData:{firstname:"Bob"},correlationId:"1",version:2}),n.set({data:{firstname:"Bob"},callback:function(){}})}),it("sends patch messages for path changes after when ready",function(){s.readRegistry.recieve(READ_RESPONSE),a.connectionMock.expects("sendMessage").once().withExactArgs({topic:message_constants_1.TOPIC.RECORD,action:message_constants_1.RECORD_ACTIONS.PATCH_WITH_WRITE_ACK,name:name,path:"firstname",parsedData:"Bob",correlationId:"1",version:2}),n.set({path:"firstname",data:"Bob",callback:function(){}})}),it("sends erase messages for erase after when ready",function(){s.readRegistry.recieve(READ_RESPONSE),a.connectionMock.expects("sendMessage").once().withExactArgs({topic:message_constants_1.TOPIC.RECORD,action:message_constants_1.RECORD_ACTIONS.ERASE,name:name,path:"firstname",version:2}),n.set({path:"firstname"})}),it("sends erase write ack messages for erase after when ready",function(){s.readRegistry.recieve(READ_RESPONSE),a.connectionMock.expects("sendMessage").once().withExactArgs({topic:message_constants_1.TOPIC.RECORD,action:message_constants_1.RECORD_ACTIONS.ERASE_WITH_WRITE_ACK,name:name,path:"firstname",correlationId:"1",version:2}),n.set({path:"firstname",callback:function(){}})}),it("queues discarding record when no longer needed",function(){s.readRegistry.recieve(READ_RESPONSE),n.removeReference(this),chai_1.expect(n.recordState).to.equal("UNSUBSCRIBING"),chai_1.expect(n.isReady).to.equal(!0)}),it("removes pending discard when usages increases",function(){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(e){switch(e.label){case 0:return s.readRegistry.recieve(READ_RESPONSE),n.removeReference(this),n.addReference({}),[4,BBPromise.delay(30)];case 1:return e.sent(),chai_1.expect(n.recordState).to.equal("READY"),chai_1.expect(n.isReady).to.equal(!0),[2]}})})}),it("sends discard when unsubscribe timeout completed",function(){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(e){switch(e.label){case 0:return s.readRegistry.recieve(READ_RESPONSE),n.removeReference(this),a.connectionMock.expects("sendMessage").once().withExactArgs({topic:message_constants_1.TOPIC.RECORD,action:message_constants_1.RECORD_ACTIONS.UNSUBSCRIBE,name:name}),[4,BBPromise.delay(30)];case 1:return e.sent(),chai_1.expect(n.recordState).to.equal("UNSUBSCRIBED"),sinon_1.assert.calledOnce(t),sinon_1.assert.calledWithExactly(t,name),chai_1.expect(n.isReady).to.equal(!1),[2]}})})}),it("sends delete when ready",function(){return __awaiter(_this,void 0,void 0,function(){return __generator(this,function(e){return s.readRegistry.recieve(READ_RESPONSE),a.connectionMock.expects("sendMessage").once().withExactArgs({topic:message_constants_1.TOPIC.RECORD,action:message_constants_1.RECORD_ACTIONS.DELETE,name:name}),n.delete(),chai_1.expect(n.recordState).to.equal("DELETING"),sinon_1.assert.notCalled(t),chai_1.expect(n.isReady).to.equal(!0),[2]})})}),it("calls delete when delete is confirmed",function(){return __awaiter(_this,void 0,void 0,function(){return __generator(this,function(e){return s.readRegistry.recieve(READ_RESPONSE),a.connectionMock.expects("sendMessage").once(),n.delete(),n.handle({topic:message_constants_1.TOPIC.RECORD,action:message_constants_1.RECORD_ACTIONS.DELETE_SUCCESS,name:name}),chai_1.expect(n.recordState).to.equal("DELETED"),sinon_1.assert.calledOnce(t),sinon_1.assert.calledWithExactly(t,name),chai_1.expect(n.isReady).to.equal(!1),[2]})})}),it("calls delete when delete happens remotely",function(){return __awaiter(_this,void 0,void 0,function(){return __generator(this,function(e){return s.readRegistry.recieve(READ_RESPONSE),n.handle({topic:message_constants_1.TOPIC.RECORD,action:message_constants_1.RECORD_ACTIONS.DELETED,name:name}),chai_1.expect(n.recordState).to.equal("DELETED"),sinon_1.assert.calledOnce(t),sinon_1.assert.calledWithExactly(t,name),chai_1.expect(n.isReady).to.equal(!1),[2]})})})}),describe("record core offline",function(){var t,n,e,a,s;beforeEach(function(){t=sinon_1.spy(),a=mocks_1.getServicesMock(),s=mocks_1.getRecordServices(a),e=Object.assign({},client_options_1.DefaultOptions,{discardTimeout:20,recordReadTimeout:20}),a.connectionMock.expects("sendMessage").never(),a.storageMock.expects("get").once().callsArgWith(1,name,1,{firstname:"wolfram"}),a.connection.isConnected=!1,n=new record_core_1.RecordCore(name,a,e,s,t)}),afterEach(function(){a.verify(),s.verify()}),it("triggers ready callback on load",function(){var e={},t=sinon_1.spy();n.whenReady(e,t),sinon_1.assert.calledOnce(t),sinon_1.assert.calledWithExactly(t,e)}),it("sets update messages for updates after when ready",function(){a.storageMock.expects("set").once().withExactArgs(name,2,{firstname:"Bob"},sinon_1.match.func),n.set({data:{firstname:"Bob"}})}),it("sends patch messages for path changes after when ready",function(){a.storageMock.expects("set").once().withExactArgs(name,2,{firstname:"Bob"},sinon_1.match.func),n.set({path:"firstname",data:"Bob"})}),it("responds to update write acks with an offline error",function(){return __awaiter(_this,void 0,void 0,function(){var t;return __generator(this,function(e){switch(e.label){case 0:return t=sinon_1.spy(),a.storageMock.expects("set").once().withExactArgs(name,2,{firstname:"Bob"},sinon_1.match.func),n.set({data:{firstname:"Bob"},callback:t}),[4,BBPromise.delay(0)];case 1:return e.sent(),sinon_1.assert.calledOnce(t),sinon_1.assert.calledWithExactly(t,constants_1.EVENT.CLIENT_OFFLINE,name),[2]}})})}),it("sends patch messages for path changes after when ready",function(){return __awaiter(_this,void 0,void 0,function(){var t;return __generator(this,function(e){switch(e.label){case 0:return t=sinon_1.spy(),a.storageMock.expects("set").once().withExactArgs(name,2,{firstname:"Bob"},sinon_1.match.func),n.set({path:"firstname",data:"Bob",callback:t}),[4,BBPromise.delay(0)];case 1:return e.sent(),sinon_1.assert.calledOnce(t),sinon_1.assert.calledWithExactly(t,constants_1.EVENT.CLIENT_OFFLINE,name),[2]}})})}),it("sends erase messages for erase after when ready",function(){a.storageMock.expects("set").once().withExactArgs(name,2,{},sinon_1.match.func),n.set({path:"firstname"})}),it("sends erase write ack messages for erase after when ready",function(){return __awaiter(_this,void 0,void 0,function(){var t;return __generator(this,function(e){switch(e.label){case 0:return t=sinon_1.spy(),a.storageMock.expects("set").once().withExactArgs(name,2,{},sinon_1.match.func),n.set({path:"firstname",callback:t}),[4,BBPromise.delay(0)];case 1:return e.sent(),sinon_1.assert.calledOnce(t),sinon_1.assert.calledWithExactly(t,constants_1.EVENT.CLIENT_OFFLINE,name),[2]}})})}),it("queues discarding record when no longer needed",function(){n.removeReference(this),chai_1.expect(n.recordState).to.equal("UNSUBSCRIBING"),chai_1.expect(n.isReady).to.equal(!0)}),it("removes pending discard when usages increases",function(){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(e){switch(e.label){case 0:return n.removeReference(this),n.addReference({}),[4,BBPromise.delay(30)];case 1:return e.sent(),chai_1.expect(n.recordState).to.equal("READY"),chai_1.expect(n.isReady).to.equal(!0),[2]}})})}),it("removes record when completed",function(){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(e){switch(e.label){case 0:return n.removeReference(this),[4,BBPromise.delay(40)];case 1:return e.sent(),chai_1.expect(n.recordState).to.equal("UNSUBSCRIBED"),sinon_1.assert.calledOnce(t),sinon_1.assert.calledWithExactly(t,name),chai_1.expect(n.isReady).to.equal(!1),[2]}})})}),it.skip("sends delete when ready",function(){return __awaiter(_this,void 0,void 0,function(){return __generator(this,function(e){return a.storageMock.expects("delete").once().withExactArgs(name,sinon_1.match.func),n.delete(),chai_1.expect(n.recordState).to.equal("DELETING"),sinon_1.assert.notCalled(t),chai_1.expect(n.isReady).to.equal(!0),[2]})})}),it.skip("calls delete when delete is confirmed",function(){return __awaiter(_this,void 0,void 0,function(){return __generator(this,function(e){switch(e.label){case 0:return a.storageMock.expects("delete").once().withExactArgs(name,sinon_1.match.func).callsArgWith(1,name),n.delete(),[4,BBPromise.delay(0)];case 1:return e.sent(),chai_1.expect(n.recordState).to.equal("DELETED"),sinon_1.assert.calledOnce(t),sinon_1.assert.calledWithExactly(t,name),chai_1.expect(n.isReady).to.equal(!1),[2]}})})})})});var name="recordA",READ_RESPONSE={topic:message_constants_1.TOPIC.RECORD,action:message_constants_1.RECORD_ACTIONS.READ_RESPONSE,name:name,parsedData:{},version:1};