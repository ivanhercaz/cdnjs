"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const client_options_1=require("./client-options"),logger_1=require("./util/logger"),timeout_registry_1=require("./util/timeout-registry"),timer_registry_1=require("./util/timer-registry"),connection_1=require("./connection/connection"),socket_factory_1=require("./connection/socket-factory"),event_handler_1=require("./event/event-handler"),rpc_handler_1=require("./rpc/rpc-handler"),record_handler_1=require("./record/record-handler"),storage_service_1=require("./record/storage-service"),presence_handler_1=require("./presence/presence-handler"),EventEmitter=require("component-emitter2"),noop_storage_service_1=require("./record/noop-storage-service");class Client extends EventEmitter{constructor(e,t={}){super(),this.options=Object.assign({},client_options_1.DefaultOptions,t);const r={};r.logger=new logger_1.Logger(this),r.timerRegistry=new timer_registry_1.TimerRegistry(this.options.timerResolution),r.timeoutRegistry=new timeout_registry_1.TimeoutRegistry(r,this.options),r.socketFactory=this.options.socketFactory||socket_factory_1.socketFactory,r.connection=new connection_1.Connection(r,this.options,e,this),this.options.offlineEnabled?r.storage=this.options.storage||new storage_service_1.Storage(this.options):r.storage=new noop_storage_service_1.NoopStorage,this.services=r,this.services.connection.onLost(r.timeoutRegistry.onConnectionLost.bind(r.timeoutRegistry)),this.event=new event_handler_1.EventHandler(this.services,this.options),this.rpc=new rpc_handler_1.RPCHandler(this.services,this.options),this.record=new record_handler_1.RecordHandler(this.services,this.options),this.presence=new presence_handler_1.PresenceHandler(this.services,this.options)}login(e,t){if(e&&"object"==typeof e){if(!t)return new Promise((t,r)=>{this.services.connection.authenticate(e,(e,i)=>{e?t(i):r(i)})});this.services.connection.authenticate(e,t)}else{if("function"!=typeof e)return new Promise((e,t)=>{this.services.connection.authenticate({},(r,i)=>{r?e(i):t(i)})});this.services.connection.authenticate({},e)}}getConnectionState(){return this.services.connection.getConnectionState()}close(){this.services.connection.close()}pause(){this.services.connection.pause()}resume(e){if(!e)return new Promise((e,t)=>{this.services.connection.resume(r=>{r?t(r):e()})});this.services.connection.resume(e)}getUid(){return`${(new Date).getTime().toString(36)}-${(1e16*Math.random()).toString(36).replace(".","")}`}}exports.Client=Client;