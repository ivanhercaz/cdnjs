"use strict";var __awaiter=this&&this.__awaiter||function(e,s,t,n){return new(t||(t=Promise))(function(c,a){function i(e){try{r(n.next(e))}catch(e){a(e)}}function o(e){try{r(n.throw(e))}catch(e){a(e)}}function r(e){e.done?c(e.value):new t(function(s){s(e.value)}).then(i,o)}r((n=n.apply(e,s||[])).next())})};Object.defineProperty(exports,"__esModule",{value:!0});const chai_1=require("chai"),sinon=require("sinon"),mocks_1=require("../test/mocks"),constants_1=require("../constants"),message_constants_1=require("../../binary-protocol/src/message-constants"),bluebird_1=require("bluebird"),client_options_1=require("../client-options"),event_handler_1=require("./event-handler");describe("event handler",()=>{let e,s,t,n,c;const a="myEvent";beforeEach(()=>{e=mocks_1.getServicesMock(),s=mocks_1.getListenerMock(),t=new event_handler_1.EventHandler(e,Object.assign({},client_options_1.DefaultOptions,{subscriptionInterval:0}),s.listener),n=e.getHandle(),c=sinon.spy()}),afterEach(()=>{e.verify(),s.listenerMock.verify()}),it("validates parameters on subscribe, unsubscribe and emit",()=>{chai_1.expect(t.subscribe.bind(t,"",()=>{})).to.throw(),chai_1.expect(t.unsubscribe.bind(t,"",()=>{})).to.throw(),chai_1.expect(t.emit.bind(t,"",{})).to.throw()}),it("emits an event it has no listeners for",()=>{e.connectionMock.expects("sendMessage").once().withExactArgs({topic:message_constants_1.TOPIC.EVENT,action:message_constants_1.EVENT_ACTIONS.EMIT,name:a,parsedData:6}),t.emit(a,6)}),it("subscribes to an event",()=>{e.connectionMock.expects("sendMessage").once().withExactArgs({topic:message_constants_1.TOPIC.EVENT,action:message_constants_1.EVENT_ACTIONS.SUBSCRIBE,name:a}),e.timeoutRegistryMock.expects("add").once().withExactArgs({message:{topic:message_constants_1.TOPIC.EVENT,action:message_constants_1.EVENT_ACTIONS.SUBSCRIBE,name:a}}),t.subscribe(a,c)}),it("resubscribes to an event when connection reestablished",()=>{e.connectionMock.expects("sendMessage").twice().withExactArgs({topic:message_constants_1.TOPIC.EVENT,action:message_constants_1.EVENT_ACTIONS.SUBSCRIBE,name:a}),e.timeoutRegistryMock.expects("add").twice().withExactArgs({message:{topic:message_constants_1.TOPIC.EVENT,action:message_constants_1.EVENT_ACTIONS.SUBSCRIBE,name:a}}),t.subscribe(a,c),e.simulateConnectionReestablished()}),it("subscribes to an event twice",()=>{e.connectionMock.expects("sendMessage").once(),e.timeoutRegistryMock.expects("add").once(),t.subscribe(a,c),t.subscribe(a,c)}),it("unsubscribes to an event after subscribing",()=>{e.connectionMock.expects("sendMessage").once(),e.connectionMock.expects("sendMessage").once().withExactArgs({topic:message_constants_1.TOPIC.EVENT,action:message_constants_1.EVENT_ACTIONS.UNSUBSCRIBE,name:a}),e.timeoutRegistryMock.expects("add").once(),e.timeoutRegistryMock.expects("add").once().withExactArgs({message:{topic:message_constants_1.TOPIC.EVENT,action:message_constants_1.EVENT_ACTIONS.UNSUBSCRIBE,name:a}}),t.subscribe(a,c),t.unsubscribe(a,c)}),it("unsubscribes to an event after unsubscribing already",()=>{e.connectionMock.expects("sendMessage").once(),e.connectionMock.expects("sendMessage").once().withExactArgs({topic:message_constants_1.TOPIC.EVENT,action:message_constants_1.EVENT_ACTIONS.UNSUBSCRIBE,name:a}),e.timeoutRegistryMock.expects("add").once(),e.timeoutRegistryMock.expects("add").once().withExactArgs({message:{topic:message_constants_1.TOPIC.EVENT,action:message_constants_1.EVENT_ACTIONS.UNSUBSCRIBE,name:a}}),e.loggerMock.expects("warn").once().withExactArgs({topic:message_constants_1.TOPIC.EVENT,action:message_constants_1.EVENT_ACTIONS.NOT_SUBSCRIBED,name:a}),t.subscribe(a,c),t.unsubscribe(a,c),t.unsubscribe(a,c)}),it("notifies local listeners for local events",()=>{t.subscribe(a,c),t.emit(a,8),sinon.assert.calledOnce(c),sinon.assert.calledWithExactly(c,8)}),it("notifies local listeners for remote events",()=>{t.subscribe(a,c),n({topic:message_constants_1.TOPIC.EVENT,action:message_constants_1.EVENT_ACTIONS.EMIT,name:a,parsedData:8}),sinon.assert.calledOnce(c),sinon.assert.calledWithExactly(c,8)}),it("removes local listeners",()=>{t.subscribe(a,c),t.unsubscribe(a,c),t.emit(a,11),sinon.assert.callCount(c,0)}),it("notifies local listeners for remote events without data",()=>{t.subscribe(a,c),n({topic:message_constants_1.TOPIC.EVENT,action:message_constants_1.EVENT_ACTIONS.EMIT,name:a}),sinon.assert.calledOnce(c),sinon.assert.calledWithExactly(c,void 0)}),it("unsubscribes locally when it recieves a message denied",()=>{t.subscribe(a,c),n({topic:message_constants_1.TOPIC.EVENT,action:message_constants_1.EVENT_ACTIONS.MESSAGE_DENIED,originalAction:message_constants_1.EVENT_ACTIONS.SUBSCRIBE,name:a}),t.emit(a,11),sinon.assert.callCount(c,0)}),it("forwards subscribe ack messages",()=>{e.timeoutRegistryMock.expects("remove").once().withExactArgs({isAck:!0,topic:message_constants_1.TOPIC.EVENT,action:message_constants_1.EVENT_ACTIONS.SUBSCRIBE,name:a}),n({isAck:!0,topic:message_constants_1.TOPIC.EVENT,action:message_constants_1.EVENT_ACTIONS.SUBSCRIBE,name:a})}),it("forwards unsubscribe ack messages",()=>{e.timeoutRegistryMock.expects("remove").once().withExactArgs({isAck:!0,topic:message_constants_1.TOPIC.EVENT,action:message_constants_1.EVENT_ACTIONS.UNSUBSCRIBE,name:a}),n({isAck:!0,topic:message_constants_1.TOPIC.EVENT,action:message_constants_1.EVENT_ACTIONS.UNSUBSCRIBE,name:a})}),it("warns when a not subscribed is remotely recieved",()=>{e.loggerMock.expects("warn").once().withExactArgs({topic:message_constants_1.TOPIC.EVENT,action:message_constants_1.EVENT_ACTIONS.NOT_SUBSCRIBED,name:a}),n({topic:message_constants_1.TOPIC.EVENT,action:message_constants_1.EVENT_ACTIONS.NOT_SUBSCRIBED,name:a})}),it("listens for pattern",()=>{const e=()=>{};s.listenerMock.expects("listen").once().withExactArgs(".*",e),t.listen(".*",e)}),it("unlistens a pattern",()=>{s.listenerMock.expects("unlisten").once().withExactArgs(".*"),t.unlisten(".*")}),it("it forwards listeners' messages to listeners",()=>{const e={topic:message_constants_1.TOPIC.EVENT,action:message_constants_1.EVENT_ACTIONS.SUBSCRIPTION_FOR_PATTERN_FOUND,name:".*",subscription:"subscription"},t={topic:message_constants_1.TOPIC.EVENT,action:message_constants_1.EVENT_ACTIONS.SUBSCRIPTION_FOR_PATTERN_REMOVED,name:".*",subscription:"subscription"};s.listenerMock.expects("handle").once().withExactArgs(e),s.listenerMock.expects("handle").once().withExactArgs(t),n(e),n(t)}),it("logs an error event for unsolicited event messages",()=>{e.loggerMock.expects("error").once().withExactArgs({topic:message_constants_1.TOPIC.EVENT,action:-1},constants_1.EVENT.UNSOLICITED_MESSAGE),n({topic:message_constants_1.TOPIC.EVENT,action:-1})}),describe("limbo",()=>{beforeEach(()=>{e.connection.isConnected=!1,e.connection.isInLimbo=!0}),it("sends messages once re-established if in limbo",()=>__awaiter(this,void 0,void 0,function*(){t.emit(a,6),e.connectionMock.expects("sendMessage").once().withExactArgs({topic:message_constants_1.TOPIC.EVENT,action:message_constants_1.EVENT_ACTIONS.EMIT,parsedData:6,name:a}),e.simulateConnectionReestablished(),yield bluebird_1.Promise.delay(1)}))})});