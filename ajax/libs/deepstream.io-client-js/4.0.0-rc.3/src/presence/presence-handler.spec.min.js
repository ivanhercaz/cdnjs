"use strict";var __awaiter=this&&this.__awaiter||function(e,s,t,n){return new(t||(t=Promise))(function(i,o){function a(e){try{r(n.next(e))}catch(e){o(e)}}function c(e){try{r(n.throw(e))}catch(e){o(e)}}function r(e){e.done?i(e.value):new t(function(s){s(e.value)}).then(a,c)}r((n=n.apply(e,s||[])).next())})};Object.defineProperty(exports,"__esModule",{value:!0});const bluebird_1=require("bluebird"),chai_1=require("chai"),sinon_1=require("sinon"),mocks_1=require("../test/mocks"),constants_1=require("../constants"),message_constants_1=require("../../binary-protocol/src/message-constants"),client_options_1=require("../client-options"),presence_handler_1=require("./presence-handler");function message(e,s){return s?{name:s,topic:message_constants_1.TOPIC.PRESENCE,action:e}:{topic:message_constants_1.TOPIC.PRESENCE,action:e}}function messageResponseQueryAll(e,s){return{topic:message_constants_1.TOPIC.PRESENCE,action:message_constants_1.PRESENCE_ACTIONS.QUERY_ALL_RESPONSE,names:s,correlationId:e.toString()}}function messageResponseQuery(e,s){return{topic:message_constants_1.TOPIC.PRESENCE,action:message_constants_1.PRESENCE_ACTIONS.QUERY_RESPONSE,parsedData:s,correlationId:e.toString()}}function errorMessageResponseQueryAll(e,s){return{topic:message_constants_1.TOPIC.PRESENCE,action:s,originalAction:message_constants_1.PRESENCE_ACTIONS.QUERY_ALL,correlationId:e.toString(),isError:!0}}function errorMessageResponseQuery(e,s){return{topic:message_constants_1.TOPIC.PRESENCE,action:s,originalAction:message_constants_1.PRESENCE_ACTIONS.QUERY,correlationId:e.toString(),isError:!0}}describe("Presence handler",()=>{const e="userA",s="userB";let t,n,i,o,a,c;const r=Object.assign({},client_options_1.DefaultOptions,{subscriptionInterval:10});let l;beforeEach(()=>{t=mocks_1.getServicesMock(),n=new presence_handler_1.PresenceHandler(t,r),i=t.getHandle(),o=sinon_1.spy(),a=sinon_1.spy(),c=sinon_1.spy(),l=0}),afterEach(()=>{t.verify()}),it("validates parameters on subscribe, unsubscribe and getAll",()=>{chai_1.expect(n.subscribe.bind(n)).to.throw(),chai_1.expect(n.subscribe.bind(n,"name")).to.throw(),chai_1.expect(n.subscribe.bind(n,"",()=>{})).to.throw(),chai_1.expect(n.unsubscribe.bind(n,"")).to.throw()}),it("can't query getAll when client is offline",()=>__awaiter(this,void 0,void 0,function*(){t.connection.isConnected=!1,n.getAll(o),n.getAll().then(a).catch(c),yield bluebird_1.Promise.delay(5),sinon_1.assert.calledOnce(o),sinon_1.assert.calledWithExactly(o,constants_1.EVENT.CLIENT_OFFLINE),sinon_1.assert.notCalled(a),sinon_1.assert.calledOnce(c),sinon_1.assert.calledWithExactly(c,constants_1.EVENT.CLIENT_OFFLINE)})),it("calls query for all users callback with error message when connection is lost",()=>__awaiter(this,void 0,void 0,function*(){n.getAll(o),n.getAll().then(a).catch(c),t.simulateConnectionLost(),yield bluebird_1.Promise.delay(1),sinon_1.assert.calledOnce(o),sinon_1.assert.calledWithExactly(o,constants_1.EVENT.CLIENT_OFFLINE),sinon_1.assert.notCalled(a),sinon_1.assert.calledOnce(c),sinon_1.assert.calledWithExactly(c,constants_1.EVENT.CLIENT_OFFLINE)})),it("calls query for specific users callback with error message when connection is lost",()=>__awaiter(this,void 0,void 0,function*(){const e=["userA","userB"];n.getAll(e,o),n.getAll(e).then(a).catch(c),t.simulateConnectionLost(),yield bluebird_1.Promise.delay(1),sinon_1.assert.calledOnce(o),sinon_1.assert.calledWithExactly(o,constants_1.EVENT.CLIENT_OFFLINE),sinon_1.assert.notCalled(a),sinon_1.assert.calledOnce(c),sinon_1.assert.calledWithExactly(c,constants_1.EVENT.CLIENT_OFFLINE)})),it("subscribes to presence with user a",()=>__awaiter(this,void 0,void 0,function*(){const s={topic:message_constants_1.TOPIC.PRESENCE,action:message_constants_1.PRESENCE_ACTIONS.SUBSCRIBE_BULK,names:[e],correlationId:"0"};t.connectionMock.expects("sendMessage").once().withExactArgs(s),t.timeoutRegistryMock.expects("add").once().withExactArgs({message:s}),n.subscribe(e,o),yield bluebird_1.Promise.delay(2*r.subscriptionInterval)})),it("subscribes to presence for all users",()=>__awaiter(this,void 0,void 0,function*(){const e={topic:message_constants_1.TOPIC.PRESENCE,action:message_constants_1.PRESENCE_ACTIONS.SUBSCRIBE_ALL};t.connectionMock.expects("sendMessage").once().withExactArgs(e),t.timeoutRegistryMock.expects("add").once().withExactArgs({message:e}),n.subscribe(o),yield bluebird_1.Promise.delay(2*r.subscriptionInterval)})),it("queries for specific users presence",()=>{const e=["userA","userB"],s={topic:message_constants_1.TOPIC.PRESENCE,action:message_constants_1.PRESENCE_ACTIONS.QUERY,correlationId:l.toString(),names:e};t.connectionMock.expects("sendMessage").once().withExactArgs(s),t.timeoutRegistryMock.expects("add").once().withExactArgs({message:s}),n.getAll(e,o)}),it("queries for all users presence",()=>{const e={topic:message_constants_1.TOPIC.PRESENCE,action:message_constants_1.PRESENCE_ACTIONS.QUERY_ALL};t.connectionMock.expects("sendMessage").once().withExactArgs(e),t.timeoutRegistryMock.expects("add").once().withExactArgs({message:e}),n.getAll(o)}),it("sends unsubscribe for specific user presence",()=>__awaiter(this,void 0,void 0,function*(){const e={topic:message_constants_1.TOPIC.PRESENCE,action:message_constants_1.PRESENCE_ACTIONS.SUBSCRIBE_BULK,names:["user"],correlationId:"0"},s={topic:message_constants_1.TOPIC.PRESENCE,action:message_constants_1.PRESENCE_ACTIONS.UNSUBSCRIBE_BULK,names:["user"],correlationId:"1"};t.connectionMock.expects("sendMessage").once().withExactArgs(e),t.timeoutRegistryMock.expects("add").once().withExactArgs({message:e}),n.subscribe("user",o),yield bluebird_1.Promise.delay(2*r.subscriptionInterval),t.connectionMock.expects("sendMessage").once().withExactArgs(s),t.timeoutRegistryMock.expects("add").once().withExactArgs({message:s}),n.unsubscribe("user"),yield bluebird_1.Promise.delay(2*r.subscriptionInterval)})),it("sends unsubscribe for all users presence",()=>__awaiter(this,void 0,void 0,function*(){const e={topic:message_constants_1.TOPIC.PRESENCE,action:message_constants_1.PRESENCE_ACTIONS.SUBSCRIBE_ALL},s={topic:message_constants_1.TOPIC.PRESENCE,action:message_constants_1.PRESENCE_ACTIONS.UNSUBSCRIBE_ALL};t.connectionMock.expects("sendMessage").once().withExactArgs(e),t.timeoutRegistryMock.expects("add").once().withExactArgs({message:e}),n.subscribe(o),yield bluebird_1.Promise.delay(2*r.subscriptionInterval),t.connectionMock.expects("sendMessage").once().withExactArgs(s),t.timeoutRegistryMock.expects("add").once().withExactArgs({message:s}),n.unsubscribe(),yield bluebird_1.Promise.delay(2*r.subscriptionInterval)})),it("handles acks messages",()=>{const e={topic:message_constants_1.TOPIC.PRESENCE,action:message_constants_1.PRESENCE_ACTIONS.SUBSCRIBE_BULK_ACK,isAck:!0};t.timeoutRegistryMock.expects("remove").once().withExactArgs(e),i(e)}),it("resubscribes subscriptions when client reconnects",()=>__awaiter(this,void 0,void 0,function*(){const i=[e,s];n.subscribe(e,()=>{}),n.subscribe(s,()=>{}),n.subscribe(()=>{}),yield bluebird_1.Promise.delay(2*r.subscriptionInterval),l=parseInt(mocks_1.getLastMessageSent().correlationId,10)+1;const o=message(message_constants_1.PRESENCE_ACTIONS.SUBSCRIBE_ALL),a={topic:message_constants_1.TOPIC.PRESENCE,action:message_constants_1.PRESENCE_ACTIONS.SUBSCRIBE_BULK,names:i,correlationId:"1"};t.connectionMock.expects("sendMessage").once().withExactArgs(o),t.timeoutRegistryMock.expects("add").once().withExactArgs({message:o}),t.connectionMock.expects("sendMessage").once().withExactArgs(a),t.timeoutRegistryMock.expects("add").once().withExactArgs({message:a}),t.simulateConnectionReestablished(),yield bluebird_1.Promise.delay(2*r.subscriptionInterval)})),describe("when server responds for getAll for all users ",()=>{let e,s;beforeEach(()=>{e=sinon_1.spy(),s=["userA","userB"],n.getAll(e),n.getAll().then(a).catch(c)}),it("receives data for query all users",()=>__awaiter(this,void 0,void 0,function*(){const n=messageResponseQueryAll(l,s),o=messageResponseQueryAll(l+1,s);t.timeoutRegistryMock.expects("remove").once().withExactArgs(Object.assign({},n,{action:message_constants_1.PRESENCE_ACTIONS.QUERY_ALL_RESPONSE})),t.timeoutRegistryMock.expects("remove").once().withExactArgs(Object.assign({},o,{action:message_constants_1.PRESENCE_ACTIONS.QUERY_ALL_RESPONSE})),i(n),i(o),yield bluebird_1.Promise.delay(1),sinon_1.assert.calledOnce(e),sinon_1.assert.calledWithExactly(e,null,s),sinon_1.assert.notCalled(c),sinon_1.assert.calledOnce(a),sinon_1.assert.calledWithExactly(a,s)})),it("recieves error message for query all users",()=>__awaiter(this,void 0,void 0,function*(){const s=message_constants_1.PRESENCE_ACTIONS.MESSAGE_DENIED,n=errorMessageResponseQueryAll(l,s),o=errorMessageResponseQueryAll(l+1,s);t.timeoutRegistryMock.expects("remove").once().withExactArgs(n),t.timeoutRegistryMock.expects("remove").once().withExactArgs(o),i(n),i(o),yield bluebird_1.Promise.delay(1),sinon_1.assert.calledOnce(e),sinon_1.assert.calledWithExactly(e,message_constants_1.PRESENCE_ACTIONS[s]),sinon_1.assert.calledOnce(c),sinon_1.assert.calledWithExactly(c,message_constants_1.PRESENCE_ACTIONS[s]),sinon_1.assert.notCalled(a)}))}),describe("when server responds for getAll for specific users ",()=>{let e,s,o;beforeEach(()=>{e=sinon_1.spy(),s=["userA","userB"],o={userA:!0,userB:!1},n.getAll(s,e),n.getAll(s).then(a).catch(c)}),it("receives data for query specific users",()=>__awaiter(this,void 0,void 0,function*(){const s=messageResponseQuery(l,o),n=messageResponseQuery(l+1,o);t.timeoutRegistryMock.expects("remove").once().withExactArgs(Object.assign({},s,{action:message_constants_1.PRESENCE_ACTIONS.QUERY_RESPONSE})),t.timeoutRegistryMock.expects("remove").once().withExactArgs(Object.assign({},n,{action:message_constants_1.PRESENCE_ACTIONS.QUERY_RESPONSE})),i(s),i(n),yield bluebird_1.Promise.delay(2),sinon_1.assert.calledOnce(e),sinon_1.assert.calledWithExactly(e,null,o),sinon_1.assert.notCalled(c),sinon_1.assert.calledOnce(a),sinon_1.assert.calledWithExactly(a,o)})),it("recieves error message for query users",()=>__awaiter(this,void 0,void 0,function*(){const s=message_constants_1.PRESENCE_ACTIONS.MESSAGE_DENIED,n=errorMessageResponseQuery(l,s),o=errorMessageResponseQuery(l+1,s);t.timeoutRegistryMock.expects("remove").once().withExactArgs(n),t.timeoutRegistryMock.expects("remove").once().withExactArgs(o),i(n),i(o),yield bluebird_1.Promise.delay(1),sinon_1.assert.calledOnce(e),sinon_1.assert.calledWithExactly(e,message_constants_1.PRESENCE_ACTIONS[s]),sinon_1.assert.calledOnce(c),sinon_1.assert.calledWithExactly(c,message_constants_1.PRESENCE_ACTIONS[s]),sinon_1.assert.notCalled(a)}))}),describe("when subscribing to userA, userB and all",()=>{let t,o,a;beforeEach(()=>__awaiter(this,void 0,void 0,function*(){t=sinon_1.spy(),o=sinon_1.spy(),a=sinon_1.spy(),n.subscribe(e,t),n.subscribe(s,o),n.subscribe(a),yield bluebird_1.Promise.delay(2*r.subscriptionInterval)})),it("notifies when userA logs in",()=>{i(message(message_constants_1.PRESENCE_ACTIONS.PRESENCE_JOIN,e)),i(message(message_constants_1.PRESENCE_ACTIONS.PRESENCE_JOIN_ALL,e)),sinon_1.assert.calledOnce(t),sinon_1.assert.calledWithExactly(t,e,!0),sinon_1.assert.notCalled(o),sinon_1.assert.calledOnce(a),sinon_1.assert.calledWithExactly(a,e,!0)}),it("notifies when userB logs out",()=>{i(message(message_constants_1.PRESENCE_ACTIONS.PRESENCE_LEAVE,s)),i(message(message_constants_1.PRESENCE_ACTIONS.PRESENCE_LEAVE_ALL,s)),sinon_1.assert.notCalled(t),sinon_1.assert.calledOnce(o),sinon_1.assert.calledWithExactly(o,s,!1),sinon_1.assert.calledOnce(a),sinon_1.assert.calledWithExactly(a,s,!1)}),it("notifies only the all users callback when userC logs in",()=>{i(message(message_constants_1.PRESENCE_ACTIONS.PRESENCE_JOIN_ALL,"userC")),sinon_1.assert.notCalled(t),sinon_1.assert.notCalled(o),sinon_1.assert.calledOnce(a),sinon_1.assert.calledWithExactly(a,"userC",!0)}),it("notifies only the all users callback when userC logs out",()=>{i(message(message_constants_1.PRESENCE_ACTIONS.PRESENCE_LEAVE_ALL,"userC")),sinon_1.assert.notCalled(t),sinon_1.assert.notCalled(o),sinon_1.assert.calledOnce(a),sinon_1.assert.calledWithExactly(a,"userC",!1)}),it("doesn't notify callbacks when userA logs in after unsubscribing",()=>__awaiter(this,void 0,void 0,function*(){n.unsubscribe(e),yield bluebird_1.Promise.delay(2*r.subscriptionInterval),i(message(message_constants_1.PRESENCE_ACTIONS.PRESENCE_JOIN,e)),sinon_1.assert.notCalled(t),sinon_1.assert.notCalled(o),sinon_1.assert.notCalled(a)})),it("doesn't notify userA callback when userA logs in after unsubscribing",()=>__awaiter(this,void 0,void 0,function*(){n.unsubscribe(e,t),yield bluebird_1.Promise.delay(2*r.subscriptionInterval),i(message(message_constants_1.PRESENCE_ACTIONS.PRESENCE_JOIN,e)),i(message(message_constants_1.PRESENCE_ACTIONS.PRESENCE_JOIN_ALL,e)),sinon_1.assert.notCalled(t),sinon_1.assert.notCalled(o),sinon_1.assert.calledOnce(a),sinon_1.assert.calledWithExactly(a,e,!0)})),it("doesn't notify all users callback when userA logs in after unsubscribing",()=>__awaiter(this,void 0,void 0,function*(){n.unsubscribe(a),yield bluebird_1.Promise.delay(2*r.subscriptionInterval),i(message(message_constants_1.PRESENCE_ACTIONS.PRESENCE_JOIN,e)),i(message(message_constants_1.PRESENCE_ACTIONS.PRESENCE_JOIN_ALL,e)),sinon_1.assert.calledOnce(t),sinon_1.assert.calledWithExactly(t,e,!0),sinon_1.assert.notCalled(o),sinon_1.assert.notCalled(a)})),it("doesn't notify callbacks after unsubscribing all",()=>__awaiter(this,void 0,void 0,function*(){n.unsubscribe(),yield bluebird_1.Promise.delay(2*r.subscriptionInterval),[e,s].forEach(e=>{i(message(message_constants_1.PRESENCE_ACTIONS.PRESENCE_JOIN,e)),i(message(message_constants_1.PRESENCE_ACTIONS.PRESENCE_JOIN_ALL,e))}),sinon_1.assert.notCalled(t),sinon_1.assert.notCalled(o),sinon_1.assert.notCalled(a)}))}),describe("limbo",()=>{beforeEach(()=>{t.connection.isConnected=!1,t.connection.isInLimbo=!0}),it("returns client offline error once limbo state over",()=>__awaiter(this,void 0,void 0,function*(){n.getAll(o),t.simulateExitLimbo(),yield bluebird_1.Promise.delay(1),sinon_1.assert.calledOnce(o),sinon_1.assert.calledWithExactly(o,constants_1.EVENT.CLIENT_OFFLINE)})),it("sends messages once re-established if in limbo",()=>__awaiter(this,void 0,void 0,function*(){n.getAll(o),t.connectionMock.expects("sendMessage").once(),t.timeoutRegistryMock.expects("add").once(),t.simulateConnectionReestablished(),yield bluebird_1.Promise.delay(1)}))})});