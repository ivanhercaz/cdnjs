"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const message_constants_1=require("../../binary-protocol/src/message-constants");class RPC{constructor(s,e,t,i,o,n){this.name=s,this.correlationId=e,this.response=i,this.options=o,this.services=n,this.onTimeout=this.onTimeout.bind(this);const c={topic:message_constants_1.TOPIC.RPC,action:message_constants_1.RPC_ACTIONS.REQUEST,correlationId:e,name:s,parsedData:t};this.acceptTimeout=this.services.timeoutRegistry.add({message:{topic:message_constants_1.TOPIC.RPC,action:message_constants_1.RPC_ACTIONS.ACCEPT,name:this.name,correlationId:this.correlationId},event:message_constants_1.RPC_ACTIONS.ACCEPT_TIMEOUT,duration:this.options.rpcAcceptTimeout,callback:this.onTimeout}),this.responseTimeout=this.services.timeoutRegistry.add({message:{topic:message_constants_1.TOPIC.RPC,action:message_constants_1.RPC_ACTIONS.REQUEST,name:this.name,correlationId:this.correlationId},event:message_constants_1.RPC_ACTIONS.RESPONSE_TIMEOUT,duration:this.options.rpcResponseTimeout,callback:this.onTimeout}),this.services.connection.sendMessage(c)}accept(){this.services.timeoutRegistry.clear(this.acceptTimeout)}respond(s){this.response(null,s),this.complete()}error(s){this.response(s),this.complete()}onTimeout(s,e){this.response(message_constants_1.RPC_ACTIONS[s]),this.complete()}complete(){this.services.timeoutRegistry.clear(this.acceptTimeout),this.services.timeoutRegistry.clear(this.responseTimeout)}}exports.RPC=RPC;