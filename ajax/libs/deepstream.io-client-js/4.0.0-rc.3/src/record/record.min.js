"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const utils=require("../util/utils"),constants_1=require("../constants"),Emitter=require("component-emitter2");class Record extends Emitter{constructor(t){super(),this.record=t,this.subscriptions=[],this.record.on(constants_1.EVENT.RECORD_READY,this.emit.bind(this,constants_1.EVENT.RECORD_READY,this)),this.record.on(constants_1.EVENT.RECORD_DISCARDED,this.emit.bind(this,constants_1.EVENT.RECORD_DISCARDED)),this.record.on(constants_1.EVENT.RECORD_DELETED,this.emit.bind(this,constants_1.EVENT.RECORD_DELETED)),this.record.on(constants_1.EVENT.RECORD_ERROR,this.emit.bind(this,constants_1.EVENT.RECORD_ERROR))}get name(){return this.record.name}get isReady(){return this.record.isReady}get version(){return this.record.version}get hasProvider(){return this.record.hasProvider}whenReady(t){if(!t)return this.record.whenReady(this);this.record.whenReady(this,t)}get(t){return this.record.get(t)}set(t,e,s){return this.record.set(utils.normalizeSetArguments(arguments))}setWithAck(t,e,s){return this.record.setWithAck(utils.normalizeSetArguments(arguments))}erase(t){if(!t)throw new Error("unable to erase record data without path, consider using `delete`");this.set(t,void 0)}eraseWithAck(t,e){if(!t)throw new Error("unable to erase record data without path, consider using `delete`");if(!e)return this.setWithAck(t,void 0);this.setWithAck(t,void 0,e)}subscribe(t,e,s){const r=utils.normalizeArguments(arguments);this.subscriptions.push(r),this.record.subscribe(r)}unsubscribe(t,e){const s=utils.normalizeArguments(arguments);this.subscriptions=this.subscriptions.filter(t=>t.path!==s.path||t.callback!==s.callback),this.record.unsubscribe(s)}discard(){for(let t=0;t<this.subscriptions.length;t++)this.record.unsubscribe(this.subscriptions[t]);return this.record.discard()}delete(t){return this.record.delete(t)}setMergeStrategy(t){this.record.setMergeStrategy(t)}}exports.Record=Record;