"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const constants_1=require("../constants"),message_constants_1=require("../../binary-protocol/src/message-constants"),json_path_1=require("./json-path"),Emitter=require("component-emitter2"),utils=require("../util/utils"),state_machine_1=require("../util/state-machine");class RecordCore extends Emitter{constructor(e,t,s,i,n){if(super(),this.name=e,this.services=t,this.options=s,this.recordServices=i,this.whenComplete=n,this.readyCallbacks=[],this.emitter=new Emitter,this.data=Object.create(null),this.references=1,this.hasProvider=!1,this.pendingWrites=[],this.isReady=!1,this.offlineLoadingAborted=!1,this.version=null,this.responseTimeout=null,this.discardTimeout=null,this.deletedTimeout=null,this.readyTimer=-1,this.deleteResponse=null,"string"!=typeof e||0===e.length)throw new Error("invalid argument name");this.onConnectionLost=this.onConnectionLost.bind(this),this.onConnectionReestablished=this.onConnectionReestablished.bind(this),this.stateMachine=new state_machine_1.StateMachine(this.services.logger,{init:"INITIAL",context:this,onStateChanged:this.onStateChanged,transitions:recordStateTransitions}),this.recordServices.dirtyService.whenLoaded(this,this.onRecordLoadedFromStorage)}get recordState(){return this.stateMachine.state}set usages(e){this.references=e,1===this.references&&(this.services.timeoutRegistry.clear(this.discardTimeout),this.services.timerRegistry.remove(this.readyTimer),this.stateMachine.transition(message_constants_1.RECORD_ACTIONS.SUBSCRIBE))}get usages(){return this.references}onRecordLoadedFromStorage(){this.services.connection.isConnected?this.recordServices.dirtyService.isDirty(this.name)?this.services.storage.get(this.name,(e,t,s)=>{this.version=t,this.data=s,this.stateMachine.transition("RESUBSCRIBE")}):this.stateMachine.transition(message_constants_1.RECORD_ACTIONS.SUBSCRIBE):this.stateMachine.transition("LOAD"),this.services.connection.onReestablished(this.onConnectionReestablished),this.services.connection.onLost(this.onConnectionLost)}onStateChanged(e,t){this.emitter.emit(constants_1.EVENT.RECORD_STATE_CHANGED,e)}whenReady(e,t){if(!t)return new Promise(t=>this.whenReadyInternal(e,()=>t(e)));this.whenReadyInternal(e,e=>{t(e)})}whenReadyInternal(e,t){!0!==this.isReady?t&&this.readyCallbacks.push({callback:t,context:e}):t(e)}set({path:e,data:t,callback:s}){if(!e&&(null===t||"object"!=typeof t))throw new Error("invalid arguments, scalar values cannot be set without path");if(this.checkDestroyed("set"))return;if(!1===this.isReady)return void this.pendingWrites.push({path:e,data:t,callback:s});const i=this.data,n=json_path_1.setValue(i,e||null,t);i!==n?(this.applyChange(n),this.services.connection.isConnected?this.sendUpdate(e,t,s):(s&&s(constants_1.EVENT.CLIENT_OFFLINE,this.name),this.saveUpdate())):s&&this.services.timerRegistry.requestIdleCallback(()=>s(null,this.name))}setWithAck(e){if(!e.callback)return new Promise((t,s)=>{e.callback=(e=>null===e?t():s(e)),this.set(e)});this.set(e)}get(e){return json_path_1.get(this.data,e||null,this.options.recordDeepCopy)}subscribe(e){if(void 0!==e.path&&("string"!=typeof e.path||0===e.path.length))throw new Error("invalid argument path");if("function"!=typeof e.callback)throw new Error("invalid argument callback");this.checkDestroyed("subscribe")||(e.triggerNow?this.whenReadyInternal(null,()=>{this.emitter.on(e.path||"",e.callback),e.callback(this.get(e.path))}):this.emitter.on(e.path||"",e.callback))}unsubscribe(e){if(void 0!==e.path&&("string"!=typeof e.path||0===e.path.length))throw new Error("invalid argument path");if(void 0!==e.callback&&"function"!=typeof e.callback)throw new Error("invalid argument callback");this.checkDestroyed("unsubscribe")||this.emitter.off(e.path||"",e.callback)}discard(){this.checkDestroyed("discard")||(this.whenReadyInternal(null,()=>{this.references--,this.references<=0&&(this.readyTimer=this.services.timerRegistry.add({duration:this.options.recordReadTimeout,callback:this.stateMachine.transition,context:this.stateMachine,data:message_constants_1.RECORD_ACTIONS.UNSUBSCRIBE_ACK}))}),this.stateMachine.transition(message_constants_1.RECORD_ACTIONS.UNSUBSCRIBE))}delete(e){if(!this.services.connection.isConnected)return e?void this.services.timerRegistry.requestIdleCallback(()=>{e("Deleting while offline is not supported")}):Promise.reject("Deleting while offline is not supported");if(!this.checkDestroyed("delete")){if(this.stateMachine.transition(message_constants_1.RECORD_ACTIONS.DELETE),!e||"function"!=typeof e)return new Promise((e,t)=>{this.deleteResponse={resolve:e,reject:t},this.sendDelete()});this.deleteResponse={callback:e},this.sendDelete()}}setMergeStrategy(e){this.recordServices.mergeStrategy.setMergeStrategyByName(this.name,e)}saveRecordToOffline(){this.services.storage.set(this.name,this.version,this.data,()=>{})}onSubscribing(){this.recordServices.readRegistry.register(this.name,this,this.handleReadResponse),this.services.timeoutRegistry.add({message:{topic:message_constants_1.TOPIC.RECORD,action:message_constants_1.RECORD_ACTIONS.SUBSCRIBE,name:this.name}}),this.responseTimeout=this.services.timeoutRegistry.add({message:{topic:message_constants_1.TOPIC.RECORD,action:message_constants_1.RECORD_ACTIONS.READ_RESPONSE,name:this.name}}),this.recordServices.bulkSubscriptionService[message_constants_1.RECORD_ACTIONS.SUBSCRIBECREATEANDREAD_BULK].subscribe(this.name)}onResubscribing(){this.services.timerRegistry.remove(this.readyTimer),this.recordServices.headRegistry.register(this.name,this,this.handleHeadResponse),this.services.timeoutRegistry.add({message:{topic:message_constants_1.TOPIC.RECORD,action:message_constants_1.RECORD_ACTIONS.SUBSCRIBE,name:this.name}}),this.responseTimeout=this.services.timeoutRegistry.add({message:{topic:message_constants_1.TOPIC.RECORD,action:message_constants_1.RECORD_ACTIONS.HEAD,name:this.name}}),this.recordServices.bulkSubscriptionService[message_constants_1.RECORD_ACTIONS.SUBSCRIBEANDHEAD_BULK].subscribe(this.name)}onOfflineLoading(){this.services.storage.get(this.name,(e,t,s)=>{if(-1===t){if(this.offlineLoadingAborted)return void(this.offlineLoadingAborted=!1);this.data={},this.version=1,this.recordServices.dirtyService.setDirty(this.name,!0),this.services.storage.set(this.name,this.version,this.data,e=>{this.stateMachine.transition("LOADED")})}else this.data=s,this.version=t,this.stateMachine.transition("LOADED")})}abortOfflineLoading(){this.offlineLoadingAborted=!0,this.onResubscribing()}onReady(){this.services.timeoutRegistry.clear(this.responseTimeout),this.applyPendingWrites(),this.isReady=!0,this.readyCallbacks.forEach(({context:e,callback:t})=>{t.call(e,e)})}applyPendingWrites(){const e=[],t=this.data;let s=t;for(let t=0;t<this.pendingWrites.length;t++){const{callback:i,path:n,data:a}=this.pendingWrites[t];i&&e.push(i),s=json_path_1.setValue(s,n||null,a)}this.pendingWrites=[],this.applyChange(s);const i=t=>{for(let s=0;s<e.length;s++)e[s](t,this.name)};utils.deepEquals(t,s)?i(null):this.services.connection.isConnected?this.sendUpdate(null,s,i):(i(constants_1.EVENT.CLIENT_OFFLINE),this.saveUpdate())}onUnsubscribed(){if(this.services.connection.isConnected){const e={topic:message_constants_1.TOPIC.RECORD,action:message_constants_1.RECORD_ACTIONS.UNSUBSCRIBE,name:this.name};this.discardTimeout=this.services.timeoutRegistry.add({message:e}),this.services.connection.sendMessage(e)}this.emit(constants_1.EVENT.RECORD_DISCARDED),this.destroy()}onDeleted(){this.emit(constants_1.EVENT.RECORD_DELETED),this.destroy()}handle(e){if(e.isAck)this.services.timeoutRegistry.remove(e);else if(e.action!==message_constants_1.RECORD_ACTIONS.PATCH&&e.action!==message_constants_1.RECORD_ACTIONS.UPDATE&&e.action!==message_constants_1.RECORD_ACTIONS.ERASE){if(e.action===message_constants_1.RECORD_ACTIONS.DELETE_SUCCESS)return this.services.timeoutRegistry.clear(this.deletedTimeout),this.stateMachine.transition(e.action),void(this.deleteResponse.callback?this.deleteResponse.callback(null):this.deleteResponse.resolve&&this.deleteResponse.resolve());if(e.action!==message_constants_1.RECORD_ACTIONS.DELETED){if(e.action!==message_constants_1.RECORD_ACTIONS.VERSION_EXISTS){if(e.action===message_constants_1.RECORD_ACTIONS.MESSAGE_DENIED||e.action===message_constants_1.RECORD_ACTIONS.MESSAGE_PERMISSION_ERROR){if(e.originalAction===message_constants_1.RECORD_ACTIONS.SUBSCRIBECREATEANDREAD||e.originalAction===message_constants_1.RECORD_ACTIONS.SUBSCRIBEANDHEAD||e.originalAction===message_constants_1.RECORD_ACTIONS.SUBSCRIBEANDREAD){const t=Object.assign({},e,{originalAction:message_constants_1.RECORD_ACTIONS.SUBSCRIBE}),s=Object.assign({},e,{originalAction:e.originalAction===message_constants_1.RECORD_ACTIONS.SUBSCRIBECREATEANDREAD?message_constants_1.RECORD_ACTIONS.READ_RESPONSE:message_constants_1.RECORD_ACTIONS.HEAD_RESPONSE});this.services.timeoutRegistry.remove(t),this.services.timeoutRegistry.remove(s)}return this.emit(constants_1.EVENT.RECORD_ERROR,message_constants_1.RECORD_ACTIONS[message_constants_1.RECORD_ACTIONS.MESSAGE_DENIED],message_constants_1.RECORD_ACTIONS[e.originalAction]),void(e.originalAction===message_constants_1.RECORD_ACTIONS.DELETE&&(this.deleteResponse.callback?this.deleteResponse.callback(message_constants_1.RECORD_ACTIONS[message_constants_1.RECORD_ACTIONS.MESSAGE_DENIED]):this.deleteResponse.reject&&this.deleteResponse.reject(message_constants_1.RECORD_ACTIONS[message_constants_1.RECORD_ACTIONS.MESSAGE_DENIED])))}return e.action===message_constants_1.RECORD_ACTIONS.SUBSCRIPTION_HAS_PROVIDER||e.action===message_constants_1.RECORD_ACTIONS.SUBSCRIPTION_HAS_NO_PROVIDER?(this.hasProvider=e.action===message_constants_1.RECORD_ACTIONS.SUBSCRIPTION_HAS_PROVIDER,void this.emit(constants_1.EVENT.RECORD_HAS_PROVIDER_CHANGED,this.hasProvider)):void 0}}else this.stateMachine.transition(e.action)}else{if("MERGING"===this.stateMachine.state)return;this.applyUpdate(e)}}handleReadResponse(e){if("MERGING"===this.stateMachine.state)return this.recoverRecord(e.version,e.parsedData,e),void this.recordServices.dirtyService.setDirty(this.name,!1);this.version=e.version,this.applyChange(json_path_1.setValue(this.data,null,e.parsedData)),this.stateMachine.transition(message_constants_1.RECORD_ACTIONS.READ_RESPONSE)}handleHeadResponse(e){const t=e.version;this.recordServices.dirtyService.isDirty(this.name)?-1===t&&1===this.version?(this.stateMachine.transition("SUBSCRIBED"),this.sendCreateUpdate(this.data)):this.version===t+1?(this.sendUpdate(null,this.data),this.stateMachine.transition("RESUBSCRIBED")):(this.stateMachine.transition("INVALID_VERSION"),this.sendRead(),this.recordServices.readRegistry.register(this.name,this,this.handleReadResponse)):t<this.version||(this.version===t?this.stateMachine.transition("RESUBSCRIBED"):(this.stateMachine.transition("INVALID_VERSION"),this.sendRead(),this.recordServices.readRegistry.register(this.name,this,this.handleReadResponse)))}sendRead(){this.services.connection.sendMessage({topic:message_constants_1.TOPIC.RECORD,action:message_constants_1.RECORD_ACTIONS.READ,name:this.name})}saveUpdate(){this.recordServices.dirtyService.isDirty(this.name)||(this.version++,this.recordServices.dirtyService.setDirty(this.name,!0)),this.saveRecordToOffline()}sendUpdate(e=null,t,s){this.recordServices.dirtyService.isDirty(this.name)?this.recordServices.dirtyService.setDirty(this.name,!1):this.version++;const i={topic:message_constants_1.TOPIC.RECORD,version:this.version,name:this.name};e?void 0===t?Object.assign(i,{action:message_constants_1.RECORD_ACTIONS.ERASE,path:e}):Object.assign(i,{action:message_constants_1.RECORD_ACTIONS.PATCH,path:e,parsedData:t}):Object.assign(i,{action:message_constants_1.RECORD_ACTIONS.UPDATE,parsedData:t}),s?this.recordServices.writeAckService.send(i,s):this.services.connection.sendMessage(i)}sendCreateUpdate(e){this.services.connection.sendMessage({name:this.name,topic:message_constants_1.TOPIC.RECORD,action:message_constants_1.RECORD_ACTIONS.CREATEANDUPDATE,version:1,parsedData:e}),this.recordServices.dirtyService.setDirty(this.name,!1)}applyUpdate(e){const t=e.version,s=e.parsedData;if(null===this.version)this.version=t;else if(this.version+1!==t)return this.stateMachine.transition("INVALID_VERSION"),void(e.action===message_constants_1.RECORD_ACTIONS.PATCH?this.sendRead():this.recoverRecord(e.version,s,e));let i;this.version=t,i=e.action===message_constants_1.RECORD_ACTIONS.PATCH?json_path_1.setValue(this.data,e.path,s):e.action===message_constants_1.RECORD_ACTIONS.ERASE?json_path_1.setValue(this.data,e.path,void 0):json_path_1.setValue(this.data,null,s),this.applyChange(i)}applyChange(e){if(this.stateMachine.inEndState)return;const t=this.data;this.data=e;const s=this.emitter.eventNames();for(let i=0;i<s.length;i++){json_path_1.get(e,s[i],!1)!==json_path_1.get(t,s[i],!1)&&this.emitter.emit(s[i],this.get(s[i]))}}sendDelete(){this.whenReadyInternal(null,()=>{if(this.services.connection.isConnected){const e={topic:message_constants_1.TOPIC.RECORD,action:message_constants_1.RECORD_ACTIONS.DELETE,name:this.name};this.deletedTimeout=this.services.timeoutRegistry.add({message:e,event:constants_1.EVENT.RECORD_DELETE_TIMEOUT,duration:this.options.recordDeleteTimeout}),this.services.connection.sendMessage(e)}else this.services.storage.delete(this.name,()=>{this.services.timerRegistry.requestIdleCallback(()=>{this.stateMachine.transition(message_constants_1.RECORD_ACTIONS.DELETE_SUCCESS)})})})}recoverRecord(e,t,s){this.recordServices.mergeStrategy.merge(this.name,this.version,this.get(),e,t,this.onRecordRecovered,this)}onRecordRecovered(e,t,s,i,n){e&&this.services.logger.error({topic:message_constants_1.TOPIC.RECORD},constants_1.EVENT.RECORD_VERSION_EXISTS),this.version=i;const a=this.data;if(utils.deepEquals(a,n))return;const o=json_path_1.setValue(a,null,s);utils.deepEquals(s,n)?this.applyChange(s):this.applyChange(o),this.stateMachine.transition("MERGED")}checkDestroyed(e){return!!this.stateMachine.inEndState&&(this.services.logger.error({topic:message_constants_1.TOPIC.RECORD},constants_1.EVENT.RECORD_ALREADY_DESTROYED,{methodName:e}),!0)}destroy(){this.services.timerRegistry.remove(this.readyTimer),this.services.timeoutRegistry.clear(this.responseTimeout),this.services.timeoutRegistry.clear(this.deletedTimeout),this.services.timeoutRegistry.clear(this.discardTimeout),this.services.connection.removeOnReestablished(this.onConnectionReestablished),this.services.connection.removeOnLost(this.onConnectionLost),this.emitter.off(),this.isReady=!1,this.whenComplete(this.name)}onConnectionReestablished(){this.stateMachine.transition("RESUBSCRIBE")}onConnectionLost(){this.saveRecordToOffline()}}exports.RecordCore=RecordCore;const recordStateTransitions=[{name:message_constants_1.RECORD_ACTIONS.SUBSCRIBE,from:"INITIAL",to:"SUBSCRIBING",handler:RecordCore.prototype.onSubscribing},{name:"LOAD",from:"INITIAL",to:"LOADING_OFFLINE",handler:RecordCore.prototype.onOfflineLoading},{name:"LOADED",from:"LOADING_OFFLINE",to:"READY",handler:RecordCore.prototype.onReady},{name:"RESUBSCRIBE",from:"LOADING_OFFLINE",to:"RESUBSCRIBING",handler:RecordCore.prototype.abortOfflineLoading},{name:message_constants_1.RECORD_ACTIONS.READ_RESPONSE,from:"SUBSCRIBING",to:"READY",handler:RecordCore.prototype.onReady},{name:"SUBSCRIBED",from:"RESUBSCRIBING",to:"READY"},{name:"RESUBSCRIBE",from:"INITIAL",to:"RESUBSCRIBING",handler:RecordCore.prototype.onResubscribing},{name:"RESUBSCRIBE",from:"READY",to:"RESUBSCRIBING",handler:RecordCore.prototype.onResubscribing},{name:"RESUBSCRIBE",from:"UNSUBSCRIBING",to:"RESUBSCRIBING",handler:RecordCore.prototype.onResubscribing},{name:"RESUBSCRIBED",from:"RESUBSCRIBING",to:"READY"},{name:"INVALID_VERSION",from:"RESUBSCRIBING",to:"MERGING"},{name:"MERGED",from:"MERGING",to:"READY"},{name:message_constants_1.RECORD_ACTIONS.DELETE,from:"READY",to:"DELETING"},{name:message_constants_1.RECORD_ACTIONS.DELETED,from:"READY",to:"DELETED",handler:RecordCore.prototype.onDeleted},{name:message_constants_1.RECORD_ACTIONS.DELETE_SUCCESS,from:"DELETING",to:"DELETED",handler:RecordCore.prototype.onDeleted},{name:message_constants_1.RECORD_ACTIONS.UNSUBSCRIBE,from:"READY",to:"UNSUBSCRIBING"},{name:message_constants_1.RECORD_ACTIONS.SUBSCRIBE,from:"UNSUBSCRIBING",to:"READY"},{name:message_constants_1.RECORD_ACTIONS.UNSUBSCRIBE_ACK,from:"UNSUBSCRIBING",to:"UNSUBSCRIBED",handler:RecordCore.prototype.onUnsubscribed},{name:"INVALID_VERSION",from:"READY",to:"MERGING"}];