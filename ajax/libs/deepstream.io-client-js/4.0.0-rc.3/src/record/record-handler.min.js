"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const utils=require("../util/utils"),constants_1=require("../constants"),message_constants_1=require("../../binary-protocol/src/message-constants"),utils_1=require("../../binary-protocol/src/utils"),record_core_1=require("./record-core"),record_1=require("./record"),anonymous_record_1=require("./anonymous-record"),list_1=require("./list"),listener_1=require("../util/listener"),single_notifier_1=require("./single-notifier"),write_ack_service_1=require("./write-ack-service"),dirty_service_1=require("./dirty-service"),merge_strategy_service_1=require("./merge-strategy-service"),bulk_subscription_service_1=require("../util/bulk-subscription-service");class RecordHandler{constructor(e,t,s,r){this.services=e,this.options=t,this.listener=r||new listener_1.Listener(message_constants_1.TOPIC.RECORD,this.services),this.recordCores=new Map,this.recordServices=s||{bulkSubscriptionService:{[message_constants_1.RECORD_ACTIONS.SUBSCRIBECREATEANDREAD_BULK]:this.getBulkSubscriptionService(message_constants_1.RECORD_ACTIONS.SUBSCRIBECREATEANDREAD_BULK,message_constants_1.RECORD_ACTIONS.SUBSCRIBECREATEANDREAD),[message_constants_1.RECORD_ACTIONS.SUBSCRIBEANDHEAD_BULK]:this.getBulkSubscriptionService(message_constants_1.RECORD_ACTIONS.SUBSCRIBEANDHEAD_BULK,message_constants_1.RECORD_ACTIONS.SUBSCRIBEANDHEAD),[message_constants_1.RECORD_ACTIONS.SUBSCRIBEANDREAD_BULK]:this.getBulkSubscriptionService(message_constants_1.RECORD_ACTIONS.SUBSCRIBEANDREAD_BULK,message_constants_1.RECORD_ACTIONS.SUBSCRIBEANDREAD)},writeAckService:new write_ack_service_1.WriteAcknowledgementService(e),readRegistry:new single_notifier_1.SingleNotifier(e,message_constants_1.RECORD_ACTIONS.READ,t.recordReadTimeout),headRegistry:new single_notifier_1.SingleNotifier(e,message_constants_1.RECORD_ACTIONS.HEAD,t.recordReadTimeout),dirtyService:new dirty_service_1.DirtyService(e.storage,t.dirtyStorageName),mergeStrategy:new merge_strategy_service_1.MergeStrategyService(e,t.mergeStrategy)},this.dirtyService=this.recordServices.dirtyService,this.sendUpdatedData=this.sendUpdatedData.bind(this),this.onRecordUpdated=this.onRecordUpdated.bind(this),this.onMergeCompleted=this.onMergeCompleted.bind(this),this.getRecordCore=this.getRecordCore.bind(this),this.removeRecord=this.removeRecord.bind(this),this.services.connection.registerHandler(message_constants_1.TOPIC.RECORD,this.handle.bind(this)),this.services.connection.onReestablished(this.syncDirtyRecords.bind(this)),this.services.connection.isConnected&&this.syncDirtyRecords()}setMergeStrategy(e,t){if("function"!=typeof t)throw new Error("Invalid merge strategy: Must be a Function");this.recordServices.mergeStrategy.setMergeStrategyByName(e,t)}setMergeStrategyRegExp(e,t){if("function"!=typeof t)throw new Error("Invalid merge strategy: Must be a Function");this.recordServices.mergeStrategy.setMergeStrategyByPattern(e,t)}getRecord(e){return new record_1.Record(this.getRecordCore(e))}getList(e){return new list_1.List(this.getRecordCore(e))}getAnonymousRecord(){return new anonymous_record_1.AnonymousRecord(this.getRecordCore)}listen(e,t){this.listener.listen(e,t)}unlisten(e){this.listener.unlisten(e)}snapshot(e,t){if("string"!=typeof e||0===e.length)throw new Error("invalid argument: name");if(void 0!==t&&"function"!=typeof t)throw new Error("invalid argument: callback");const s=this.recordCores.get(e);return s?t?void s.whenReady(null,()=>{t(null,s.get())}):new Promise((e,t)=>{s.whenReady(null,()=>{e(s.get())})}):t?void this.recordServices.readRegistry.request(e,t):new Promise((t,s)=>{this.recordServices.readRegistry.request(e,(e,r)=>e?s(e):t(r))})}has(e,t){if("string"!=typeof e||0===e.length)throw new Error("invalid argument: name");if(void 0!==t&&"function"!=typeof t)throw new Error("invalid argument: callback");let s;if(!t)return new Promise((t,r)=>{s=((e,s)=>e?r(e):t(-1!==s)),this.head(e,s)});s=((e,s)=>e?t(e,null):t(null,-1!==s)),this.head(e,s)}head(e,t){if("string"!=typeof e||0===e.length)throw new Error("invalid argument: name");if(void 0!==t&&"function"!=typeof t)throw new Error("invalid argument: callback");const s=this.recordCores.get(e);return s?t?void s.whenReady(null,()=>{t(null,s.version)}):new Promise((e,t)=>{s.whenReady(null,()=>{e(s.version)})}):t?void this.recordServices.headRegistry.request(e,t):new Promise((t,s)=>{this.recordServices.headRegistry.request(e,(e,r)=>e?s(e):t(r))})}setDataWithAck(e,...t){const s=utils.normalizeSetArguments(arguments,1);if(!s.callback)return new Promise((t,r)=>{s.callback=(e=>null===e?t():r(e)),this.sendSetData(e,-1,s)});this.sendSetData(e,-1,s)}setData(e){const t=utils.normalizeSetArguments(arguments,1);this.sendSetData(e,-1,t)}sendSetData(e,t,s){const{path:r,data:i,callback:n}=s;if(!e||"string"!=typeof e||0===e.length)throw new Error("invalid argument: recordName must be an non empty string");if(!r&&(null===i||"object"!=typeof i))throw new Error("invalid argument: data must be an object when no path is provided");const o=this.recordCores.get(e);if(o)return void o.set({path:r,data:i,callback:n});let c;c=r?void 0===i?message_constants_1.RECORD_ACTIONS.ERASE:message_constants_1.RECORD_ACTIONS.CREATEANDPATCH:message_constants_1.RECORD_ACTIONS.CREATEANDUPDATE;const a={topic:message_constants_1.TOPIC.RECORD,action:c,name:e,path:r,version:t,parsedData:i};n?this.recordServices.writeAckService.send(a,n):this.services.connection.sendMessage(a)}handle(e){if(e.action===message_constants_1.RECORD_ACTIONS.SUBSCRIPTION_FOR_PATTERN_FOUND||e.action===message_constants_1.RECORD_ACTIONS.SUBSCRIPTION_FOR_PATTERN_REMOVED||e.action===message_constants_1.RECORD_ACTIONS.LISTEN||e.action===message_constants_1.RECORD_ACTIONS.UNLISTEN)return void this.listener.handle(e);if(utils_1.isWriteAck(e.action)||utils_1.isWriteAck(e.originalAction))return void this.recordServices.writeAckService.recieve(e);if(e.action===message_constants_1.RECORD_ACTIONS.READ_RESPONSE||e.originalAction===message_constants_1.RECORD_ACTIONS.READ)return void(e.isError?this.recordServices.readRegistry.recieve(e,message_constants_1.RECORD_ACTIONS[e.action]):this.recordServices.readRegistry.recieve(e,null,e.parsedData));e.action!==message_constants_1.RECORD_ACTIONS.HEAD_RESPONSE&&e.originalAction!==message_constants_1.RECORD_ACTIONS.HEAD||(e.isError?this.recordServices.headRegistry.recieve(e,message_constants_1.RECORD_ACTIONS[e.action]):this.recordServices.headRegistry.recieve(e,null,e.version));const t=this.recordCores.get(e.name);t?t.handle(e):e.action!==message_constants_1.RECORD_ACTIONS.VERSION_EXISTS&&e.action!==message_constants_1.RECORD_ACTIONS.SUBSCRIPTION_HAS_PROVIDER&&e.action!==message_constants_1.RECORD_ACTIONS.SUBSCRIPTION_HAS_NO_PROVIDER&&(e.isError?this.services.logger.error(e):this.services.logger.error(e,constants_1.EVENT.UNSOLICITED_MESSAGE))}removeRecord(e){this.recordCores.delete(e)}getRecordCore(e){let t=this.recordCores.get(e);return t?t.usages++:(t=new record_core_1.RecordCore(e,this.services,this.options,this.recordServices,this.removeRecord),this.recordCores.set(e,t)),t}syncDirtyRecords(){this.dirtyService.whenLoaded(this,this._syncDirtyRecords)}_syncDirtyRecords(){const e=this.dirtyService.getAll();for(const t in e){const e=this.recordCores.get(t);e&&e.usages>0||this.services.storage.get(t,this.sendUpdatedData)}}sendUpdatedData(e,t,s){this.sendSetData(e,t,{data:s,callback:this.onRecordUpdated})}onRecordUpdated(e,t){e||this.dirtyService.setDirty(t,!1)}onMergeCompleted(e,t,s,r,i){this.sendSetData(t,r+1,{data:s})}getBulkSubscriptionService(e,t){return new bulk_subscription_service_1.BulkSubscriptionService(this.services,this.options.subscriptionInterval,message_constants_1.TOPIC.RECORD,e,t,message_constants_1.RECORD_ACTIONS.UNSUBSCRIBE_BULK,message_constants_1.RECORD_ACTIONS.UNSUBSCRIBE)}}exports.RecordHandler=RecordHandler;