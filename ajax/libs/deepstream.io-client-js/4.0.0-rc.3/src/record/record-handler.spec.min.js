"use strict";var __awaiter=this&&this.__awaiter||function(e,s,t,a){return new(t||(t=Promise))(function(n,i){function o(e){try{r(a.next(e))}catch(e){i(e)}}function c(e){try{r(a.throw(e))}catch(e){i(e)}}function r(e){e.done?n(e.value):new t(function(s){s(e.value)}).then(o,c)}r((a=a.apply(e,s||[])).next())})};Object.defineProperty(exports,"__esModule",{value:!0});const bluebird_1=require("bluebird"),chai_1=require("chai"),sinon_1=require("sinon"),mocks_1=require("../test/mocks"),record_handler_1=require("./record-handler"),client_options_1=require("../client-options"),message_constants_1=require("../../binary-protocol/src/message-constants");describe("Record handler",()=>{const e="recordA";let s,t,a,n,i,o,c,r=Object.assign({},client_options_1.DefaultOptions);beforeEach(()=>{a=sinon_1.spy(),n=sinon_1.spy(),i=sinon_1.spy(),s=mocks_1.getServicesMock(),t=mocks_1.getRecordServices(s),o=new record_handler_1.RecordHandler(s,r,t),c=s.getHandle()}),afterEach(()=>{s.verify(),t.verify()}),it("validates on has, head and snapshot",()=>{chai_1.expect(o.has.bind(o,"")).to.throw(),chai_1.expect(o.has.bind(o,"",()=>{})).to.throw(),chai_1.expect(o.head.bind(o,"")).to.throw(),chai_1.expect(o.head.bind(o,"",()=>{})).to.throw(),chai_1.expect(o.snapshot.bind(o,"")).to.throw(),chai_1.expect(o.snapshot.bind(o,"",()=>{})).to.throw()}),it("snapshots record remotely using callback and promise style",()=>__awaiter(this,void 0,void 0,function*(){t.readRegistryMock.expects("request").twice().withExactArgs(e,sinon_1.match.func),o.snapshot(e,a),o.snapshot(e)})),it("snapshots local records using callback and promise style",()=>{}),describe("handling snapshot messages",()=>{let s;beforeEach(()=>{s={some:"data"},o.snapshot(e,a),o.snapshot(e).then(n).catch(i)}),it("handles success messages",()=>__awaiter(this,void 0,void 0,function*(){c({topic:message_constants_1.TOPIC.RECORD,action:message_constants_1.RECORD_ACTIONS.READ_RESPONSE,name:e,isError:!1,parsedData:s}),yield bluebird_1.Promise.delay(1),sinon_1.assert.calledOnce(a),sinon_1.assert.calledWithExactly(a,null,s),sinon_1.assert.calledOnce(n),sinon_1.assert.calledWithExactly(n,s),sinon_1.assert.notCalled(i)})),it("handles error messages",()=>__awaiter(this,void 0,void 0,function*(){c({topic:message_constants_1.TOPIC.RECORD,action:message_constants_1.RECORD_ACTIONS.MESSAGE_DENIED,originalAction:message_constants_1.RECORD_ACTIONS.READ,name:e,isError:!0}),yield bluebird_1.Promise.delay(1),sinon_1.assert.calledOnce(a),sinon_1.assert.calledWithExactly(a,message_constants_1.RECORD_ACTIONS[message_constants_1.RECORD_ACTIONS.MESSAGE_DENIED],void 0),sinon_1.assert.notCalled(n),sinon_1.assert.calledOnce(i),sinon_1.assert.calledWithExactly(i,message_constants_1.RECORD_ACTIONS[message_constants_1.RECORD_ACTIONS.MESSAGE_DENIED])}))}),it("queries for the record version remotely using callback and promise",()=>{t.headRegistryMock.expects("request").twice().withExactArgs(e,sinon_1.match.func),o.head(e,a),o.head(e).then(n).catch(i)}),it("queries for the record version in local records using callback and promise",()=>{}),describe("handling head messages from head calls",()=>{let s;beforeEach(()=>{s=1,o.head(e,a),o.head(e).then(n).catch(i)}),it("handles success messages",()=>__awaiter(this,void 0,void 0,function*(){c({topic:message_constants_1.TOPIC.RECORD,action:message_constants_1.RECORD_ACTIONS.HEAD_RESPONSE,name:e,isError:!1,version:s}),yield bluebird_1.Promise.delay(1),sinon_1.assert.calledOnce(a),sinon_1.assert.calledWithExactly(a,null,s),sinon_1.assert.calledOnce(n),sinon_1.assert.calledWithExactly(n,s),sinon_1.assert.notCalled(i)})),it("handles error messages",()=>__awaiter(this,void 0,void 0,function*(){c({topic:message_constants_1.TOPIC.RECORD,action:message_constants_1.RECORD_ACTIONS.MESSAGE_DENIED,originalAction:message_constants_1.RECORD_ACTIONS.HEAD,name:e,isError:!0}),yield bluebird_1.Promise.delay(1),sinon_1.assert.calledOnce(a),sinon_1.assert.calledWithExactly(a,message_constants_1.RECORD_ACTIONS[message_constants_1.RECORD_ACTIONS.MESSAGE_DENIED],void 0),sinon_1.assert.notCalled(n),sinon_1.assert.calledOnce(i),sinon_1.assert.calledWithExactly(i,message_constants_1.RECORD_ACTIONS[message_constants_1.RECORD_ACTIONS.MESSAGE_DENIED])}))}),it("queries for record exists remotely using callback and promise",()=>{t.headRegistryMock.expects("request").twice().withExactArgs(e,sinon_1.match.func),o.has(e,a),o.has(e).then(n).catch(i)}),it("queries for record exists in local records using callback and promise",()=>{}),describe("handling head messages from has calls",()=>{let s;beforeEach(()=>{s=1,o.has(e,a),o.has(e).then(n).catch(i)}),it("handles success messages",()=>__awaiter(this,void 0,void 0,function*(){c({topic:message_constants_1.TOPIC.RECORD,action:message_constants_1.RECORD_ACTIONS.HEAD_RESPONSE,name:e,isError:!1,version:s}),yield bluebird_1.Promise.delay(1),sinon_1.assert.calledOnce(a),sinon_1.assert.calledWithExactly(a,null,!0),sinon_1.assert.calledOnce(n),sinon_1.assert.calledWithExactly(n,!0),sinon_1.assert.notCalled(i)})),it("handles record not found error messages",()=>__awaiter(this,void 0,void 0,function*(){c({topic:message_constants_1.TOPIC.RECORD,action:message_constants_1.RECORD_ACTIONS.HEAD_RESPONSE,originalAction:message_constants_1.RECORD_ACTIONS.HEAD,version:-1,name:e}),yield bluebird_1.Promise.delay(1),sinon_1.assert.calledOnce(a),sinon_1.assert.calledWithExactly(a,null,!1),sinon_1.assert.calledOnce(n),sinon_1.assert.calledWithExactly(n,!1),sinon_1.assert.notCalled(i)})),it("handles error messages",()=>__awaiter(this,void 0,void 0,function*(){c({topic:message_constants_1.TOPIC.RECORD,action:message_constants_1.RECORD_ACTIONS.MESSAGE_DENIED,originalAction:message_constants_1.RECORD_ACTIONS.HEAD,name:e,isError:!0}),yield bluebird_1.Promise.delay(1),sinon_1.assert.calledOnce(a),sinon_1.assert.calledWithExactly(a,message_constants_1.RECORD_ACTIONS[message_constants_1.RECORD_ACTIONS.MESSAGE_DENIED],null),sinon_1.assert.notCalled(n),sinon_1.assert.calledOnce(i),sinon_1.assert.calledWithExactly(i,message_constants_1.RECORD_ACTIONS[message_constants_1.RECORD_ACTIONS.MESSAGE_DENIED])}))}),describe("record setData online",()=>{const a=message_constants_1.TOPIC.RECORD;beforeEach(()=>{s=mocks_1.getServicesMock(),t=mocks_1.getRecordServices(s),r=Object.assign({},client_options_1.DefaultOptions),s.connection.isConnected=!0,o=new record_handler_1.RecordHandler(s,r,t),c=s.getHandle()}),afterEach(()=>{s.verify(),t.verify()}),it("sends update messages for entire data changes",()=>{const t={firstname:"Wolfram"};s.connectionMock.expects("sendMessage").once().withExactArgs({topic:a,action:message_constants_1.RECORD_ACTIONS.CREATEANDUPDATE,name:e,path:void 0,parsedData:t,version:-1}),o.setData(e,t)}),it("sends update messages for path changes ",()=>{s.connectionMock.expects("sendMessage").once().withExactArgs({topic:a,action:message_constants_1.RECORD_ACTIONS.CREATEANDPATCH,name:e,path:"lastName",parsedData:"Hempel",version:-1}),o.setData(e,"lastName","Hempel")}),it("deletes value when sending undefined for a value",()=>{s.connectionMock.expects("sendMessage").once().withExactArgs({topic:a,action:message_constants_1.RECORD_ACTIONS.ERASE,name:e,path:"lastName",version:-1,parsedData:void 0}),o.setData(e,"lastName",void 0)}),it.skip("updates existent local record",()=>{}),it("throws error for invalid arguments",()=>{chai_1.expect(o.setData.bind(o)).to.throw(),chai_1.expect(o.setData.bind(o,e)).to.throw(),chai_1.expect(o.setData.bind(o,e,void 0)).to.throw(),chai_1.expect(o.setData.bind(o,e,void 0,()=>{})).to.throw(),chai_1.expect(o.setData.bind(o,e,null)).to.throw(),chai_1.expect(o.setData.bind(o,e,null,()=>{})).to.throw(),chai_1.expect(o.setData.bind(o,e,"","data")).to.throw(),chai_1.expect(o.setData.bind(o,e,"Some String")).to.throw(),chai_1.expect(o.setData.bind(o,e,100.24)).to.throw(),chai_1.expect(o.setData.bind(o,e,{},{not:"func"})).to.throw()}),describe("with ack",()=>{let s,n,i;beforeEach(()=>{n="key",s={some:"value"},i=(()=>{})}),it("sends update messages for entire data changes with ack callback",()=>{t.writeAckServiceMock.expects("send").once().withExactArgs({topic:a,action:message_constants_1.RECORD_ACTIONS.CREATEANDUPDATE,name:e,path:void 0,parsedData:s,version:-1},i),o.setData(e,s,i)}),it("sends update messages for path changes with ack callback",()=>{t.writeAckServiceMock.expects("send").once().withExactArgs({topic:a,action:message_constants_1.RECORD_ACTIONS.CREATEANDPATCH,name:e,path:n,parsedData:s,version:-1},i),o.setData(e,n,s,i)}),it("sends update messages for entire data changes with ack promise",()=>{t.writeAckServiceMock.expects("send").once().withExactArgs({topic:a,action:message_constants_1.RECORD_ACTIONS.CREATEANDUPDATE,name:e,path:void 0,parsedData:s,version:-1},sinon_1.match.func);const n=o.setDataWithAck(e,s);chai_1.expect(n).is.a("promise")}),it("sends update messages for path changes with ack promise",()=>{t.writeAckServiceMock.expects("send").once().withExactArgs({topic:a,action:message_constants_1.RECORD_ACTIONS.CREATEANDPATCH,name:e,path:n,parsedData:s,version:-1},sinon_1.match.func);const i=o.setDataWithAck(e,n,s);chai_1.expect(i).is.a("promise")}),it("deletes value when sending undefined for a path with ack callback",()=>{t.writeAckServiceMock.expects("send").once().withExactArgs({topic:a,action:message_constants_1.RECORD_ACTIONS.ERASE,name:e,path:n,version:-1,parsedData:void 0},i),o.setDataWithAck(e,n,void 0,i)}),it("deletes value when sending undefined for a path with ack promise",()=>{t.writeAckServiceMock.expects("send").once().withExactArgs({topic:a,action:message_constants_1.RECORD_ACTIONS.ERASE,name:e,path:n,version:-1,parsedData:void 0},sinon_1.match.func);const s=o.setDataWithAck(e,n,void 0);chai_1.expect(s).is.a("promise")})}),describe("handling acknowledgements",()=>{const s={some:"value"};let t,n,i;beforeEach(()=>{t=sinon_1.spy(),n=sinon_1.spy(),i=sinon_1.spy()});const r={topic:a,action:message_constants_1.RECORD_ACTIONS.MESSAGE_DENIED,originalAction:message_constants_1.RECORD_ACTIONS.CREATEANDUPDATE_WITH_WRITE_ACK,name:e,correlationId:"1",isError:!0,isWriteAck:!0};it("calls callbackAck with error",()=>__awaiter(this,void 0,void 0,function*(){o.setDataWithAck(e,s,t),c(r),yield bluebird_1.Promise.delay(1),sinon_1.assert.calledOnce(t),sinon_1.assert.calledWithExactly(t,message_constants_1.RECORD_ACTIONS[r.action])})),it("rejects promise with error",()=>__awaiter(this,void 0,void 0,function*(){o.setDataWithAck(e,"key",void 0).then(n).catch(i),c(r),yield bluebird_1.Promise.delay(1),sinon_1.assert.notCalled(n),sinon_1.assert.calledOnce(i),sinon_1.assert.calledWithExactly(i,message_constants_1.RECORD_ACTIONS[r.action])}));const _={topic:a,action:message_constants_1.RECORD_ACTIONS.WRITE_ACKNOWLEDGEMENT,originalAction:message_constants_1.RECORD_ACTIONS.CREATEANDUPDATE_WITH_WRITE_ACK,name:e,correlationId:"1",isWriteAck:!0};it("calls callbackAck for setData without path",()=>__awaiter(this,void 0,void 0,function*(){o.setDataWithAck(e,s,t),c(_),yield bluebird_1.Promise.delay(1),sinon_1.assert.calledOnce(t),sinon_1.assert.calledWithExactly(t,null)})),it("resolves promise for setData without path",()=>__awaiter(this,void 0,void 0,function*(){o.setDataWithAck(e,s).then(n).catch(i),c(_),yield bluebird_1.Promise.delay(1),sinon_1.assert.calledOnce(n),sinon_1.assert.notCalled(i)}));const l={topic:a,action:message_constants_1.RECORD_ACTIONS.WRITE_ACKNOWLEDGEMENT,originalAction:message_constants_1.RECORD_ACTIONS.CREATEANDPATCH_WITH_WRITE_ACK,name:e,correlationId:"1",isWriteAck:!0};it("calls callbackAck for setData with path",()=>__awaiter(this,void 0,void 0,function*(){o.setDataWithAck(e,"key",s,t),c(l),yield bluebird_1.Promise.delay(1),sinon_1.assert.calledOnce(t),sinon_1.assert.calledWithExactly(t,null)})),it("resolves promise for setData with path",()=>__awaiter(this,void 0,void 0,function*(){o.setDataWithAck(e,"key",s).then(n).catch(i),c(l),yield bluebird_1.Promise.delay(1),sinon_1.assert.calledOnce(n),sinon_1.assert.notCalled(i)}));const d={topic:a,action:message_constants_1.RECORD_ACTIONS.WRITE_ACKNOWLEDGEMENT,originalAction:message_constants_1.RECORD_ACTIONS.ERASE_WITH_WRITE_ACK,name:e,correlationId:"1",isWriteAck:!0};it("calls callbackAck for setData deleting values",()=>__awaiter(this,void 0,void 0,function*(){o.setDataWithAck(e,"key",void 0,t),c(d),yield bluebird_1.Promise.delay(1),sinon_1.assert.calledOnce(t),sinon_1.assert.calledWithExactly(t,null)})),it("resolves promise for setData deleting values",()=>__awaiter(this,void 0,void 0,function*(){o.setDataWithAck(e,"key",void 0).then(n).catch(i),c(d),yield bluebird_1.Promise.delay(1),sinon_1.assert.calledOnce(n),sinon_1.assert.notCalled(i)}))})})});