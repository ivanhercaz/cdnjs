"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const message_constants_1=require("../../binary-protocol/src/message-constants"),utils_1=require("../../binary-protocol/src/utils"),constants_1=require("../constants");class WriteAcknowledgementService{constructor(s){this.services=s,this.responses=new Map,this.count=1,this.services.connection.onLost(this.onConnectionLost.bind(this))}send(s,e){if(!1===this.services.connection.isConnected)return void this.services.timerRegistry.requestIdleCallback(e.bind(this,constants_1.EVENT.CLIENT_OFFLINE));const t=this.count.toString();this.responses.set(t,e),this.services.connection.sendMessage(Object.assign({},s,{correlationId:t,action:utils_1.ACTION_TO_WRITE_ACK[s.action]})),this.count++}recieve(s){const e=s.correlationId,t=this.responses.get(e);t&&(s.action===message_constants_1.RECORD_ACTIONS.WRITE_ACKNOWLEDGEMENT||s.isError)&&(s.isError?t(message_constants_1.RECORD_ACTIONS[s.action]):t(null),this.responses.delete(e))}onConnectionLost(){this.responses.forEach(s=>s(constants_1.EVENT.CLIENT_OFFLINE)),this.responses.clear()}}exports.WriteAcknowledgementService=WriteAcknowledgementService;