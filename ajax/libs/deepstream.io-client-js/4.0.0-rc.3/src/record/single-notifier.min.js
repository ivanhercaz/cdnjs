"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const message_constants_1=require("../../binary-protocol/src/message-constants"),constants_1=require("../constants");class SingleNotifier{constructor(e,s,t){this.services=e,this.action=s,this.requests=new Map,this.internalRequests=new Map,this.limboQueue=[],this.services.connection.onLost(this.onConnectionLost.bind(this)),this.services.connection.onExitLimbo(this.onExitLimbo.bind(this)),this.services.connection.onReestablished(this.onConnectionReestablished.bind(this))}request(e,s){const t=this.requests.get(e);if(t)return void t.push(s);this.requests.set(e,[s]);const i={topic:message_constants_1.TOPIC.RECORD,action:this.action,name:e};this.services.connection.isConnected?(this.services.connection.sendMessage(i),this.services.timeoutRegistry.add({message:i})):this.services.connection.isInLimbo?this.limboQueue.push(i):s(constants_1.EVENT.CLIENT_OFFLINE)}register(e,s,t){const i=this.internalRequests.get(e);i?i.push({callback:t,context:s}):this.internalRequests.set(e,[{callback:t,context:s}])}recieve(e,s,t){this.services.timeoutRegistry.remove(e);const i=e.name,n=this.requests.get(i)||[],o=this.internalRequests.get(i)||[];if(n||o){for(let s=0;s<o.length;s++)o[s].callback.call(o[s].context,e);this.internalRequests.delete(i);for(let e=0;e<n.length;e++)n[e](s,t);this.requests.delete(i)}}onConnectionLost(){this.requests.forEach(e=>{e.forEach(e=>e(constants_1.EVENT.CLIENT_OFFLINE))}),this.requests.clear()}onExitLimbo(){for(let e=0;e<this.limboQueue.length;e++){const s=this.limboQueue[e],t=this.requests.get(s.name);t&&t.forEach(e=>e(constants_1.EVENT.CLIENT_OFFLINE))}this.requests.clear(),this.limboQueue=[]}onConnectionReestablished(){for(let e=0;e<this.limboQueue.length;e++){const s=this.limboQueue[e];this.services.connection.sendMessage(s),this.services.timeoutRegistry.add({message:s})}}}exports.SingleNotifier=SingleNotifier;