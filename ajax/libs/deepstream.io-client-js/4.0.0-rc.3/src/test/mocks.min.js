"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const sinon_1=require("sinon"),constants_1=require("../constants"),timer_registry_1=require("../util/timer-registry"),message_constants_1=require("../../binary-protocol/src/message-constants"),single_notifier_1=require("../record/single-notifier"),write_ack_service_1=require("../record/write-ack-service"),dirty_service_1=require("../record/dirty-service"),listener_1=require("../util/listener"),bulk_subscription_service_1=require("../util/bulk-subscription-service");let lastMessageSent;exports.getLastMessageSent=(()=>lastMessageSent),exports.getServicesMock=(()=>{let e,s,t,r=null;const n={sendMessage:e=>{lastMessageSent=e},getConnectionState:sinon_1.stub().returns(constants_1.CONNECTION_STATE.OPEN),isConnected:!0,isInLimbo:!1,registerHandler:(e,s)=>{r=s},onReestablished:s=>{e=s},onLost:e=>{s=e},onExitLimbo:e=>{t=e},removeOnReestablished:()=>{},removeOnLost:()=>{}},i=sinon_1.mock(n),o={warn:()=>{},error:()=>{}},c=sinon_1.mock(o);c.expects("warn").never();const _=new timer_registry_1.TimerRegistry(1),a={add:()=>{},remove:()=>{},clear:()=>{}},g=sinon_1.mock(a);let R;const S={get:()=>{},set:()=>{},delete:()=>{}},C=sinon_1.mock(S);return{socketFactory:(e,s)=>R=new class{constructor(e){this.url=e}sendParsedMessage(e){}onparsedmessages(e){}onopen(){}onerror(){}onclose(){}close(){process.nextTick(this.onclose)}simulateRemoteClose(){this.close()}simulateOpen(){process.nextTick(this.onopen)}simulateError(){process.nextTick(this.onerror.bind(null,{code:1234}))}simulateMessages(e){process.nextTick(this.onparsedmessages.bind(this,e))}getTimeSinceLastMessage(){return 1}}(e),getSocket:()=>({socket:R,socketMock:sinon_1.mock(R)}),connection:n,connectionMock:i,timeoutRegistry:a,timeoutRegistryMock:g,logger:o,loggerMock:c,getLogger:()=>({logger:o,loggerMock:c}),timerRegistry:_,getHandle:()=>r,simulateConnectionLost:()=>s(),simulateConnectionReestablished:()=>e(),simulateExitLimbo:()=>t(),storage:S,storageMock:C,verify:()=>{i.verify(),g.verify(),c.verify(),C.verify()}}}),exports.getRecordServices=(e=>{e.storageMock.expects("get").withArgs("__ds__dirty_records",sinon_1.match.func).atLeast(0).callsArgWith(1,"__ds__dirty_records",1,[]),e.storageMock.expects("set").withArgs("__ds__dirty_records",1,sinon_1.match.any,sinon_1.match.func).atLeast(0);const s=new dirty_service_1.DirtyService(e.storage,"__ds__dirty_records"),t=new single_notifier_1.SingleNotifier(e,message_constants_1.RECORD_ACTIONS.HEAD,50),r=new single_notifier_1.SingleNotifier(e,message_constants_1.RECORD_ACTIONS.READ,50),n=new write_ack_service_1.WriteAcknowledgementService(e),i={[message_constants_1.RECORD_ACTIONS.SUBSCRIBECREATEANDREAD_BULK]:new bulk_subscription_service_1.BulkSubscriptionService(e,0,message_constants_1.TOPIC.RECORD,message_constants_1.RECORD_ACTIONS.SUBSCRIBECREATEANDREAD_BULK,message_constants_1.RECORD_ACTIONS.SUBSCRIBECREATEANDREAD,message_constants_1.RECORD_ACTIONS.UNSUBSCRIBE_BULK,message_constants_1.RECORD_ACTIONS.UNSUBSCRIBE),[message_constants_1.RECORD_ACTIONS.SUBSCRIBEANDHEAD_BULK]:new bulk_subscription_service_1.BulkSubscriptionService(e,0,message_constants_1.TOPIC.RECORD,message_constants_1.RECORD_ACTIONS.SUBSCRIBEANDHEAD_BULK,message_constants_1.RECORD_ACTIONS.SUBSCRIBEANDHEAD,message_constants_1.RECORD_ACTIONS.UNSUBSCRIBE_BULK,message_constants_1.RECORD_ACTIONS.UNSUBSCRIBE),[message_constants_1.RECORD_ACTIONS.SUBSCRIBEANDREAD_BULK]:new bulk_subscription_service_1.BulkSubscriptionService(e,0,message_constants_1.TOPIC.RECORD,message_constants_1.RECORD_ACTIONS.SUBSCRIBEANDREAD_BULK,message_constants_1.RECORD_ACTIONS.SUBSCRIBEANDREAD,message_constants_1.RECORD_ACTIONS.UNSUBSCRIBE_BULK,message_constants_1.RECORD_ACTIONS.UNSUBSCRIBE)},o=sinon_1.mock(s),c=sinon_1.mock(r),_=sinon_1.mock(t),a=sinon_1.mock(n);return{dirtyService:s,dirtyServiceMock:o,headRegistry:t,headRegistryMock:_,readRegistry:r,readRegistryMock:c,writeAckService:n,writeAckServiceMock:a,bulkSubscriptionService:i,verify:()=>{o.verify(),_.verify(),c.verify(),a.verify()}}}),exports.getListenerMock=(()=>{const e=listener_1.Listener.prototype;return{listener:e,listenerMock:sinon_1.mock(e)}});