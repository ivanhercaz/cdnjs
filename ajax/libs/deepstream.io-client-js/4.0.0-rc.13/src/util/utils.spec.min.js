"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var utils=require("./utils"),chai_1=require("chai");describe("deepEquals",function(){it("compares two primitive values",function(){chai_1.expect(utils.deepEquals("A","B")).to.equal(!1),chai_1.expect(utils.deepEquals("A","A")).to.equal(!0),chai_1.expect(utils.deepEquals(1,2)).to.equal(!1),chai_1.expect(utils.deepEquals(1,1)).to.equal(!0),chai_1.expect(utils.deepEquals(1.2,2.1)).to.equal(!1),chai_1.expect(utils.deepEquals(2.1,2.1)).to.equal(!0)}),it("compares two different simple objects",function(){chai_1.expect(utils.deepEquals({name:"Wolfram"},{name:"Egon"})).to.equal(!1)}),it("compares two equal simple objects",function(){chai_1.expect(utils.deepEquals({name:"Wolfram"},{name:"Wolfram"})).to.equal(!0)}),it("compares two different arrays",function(){chai_1.expect(utils.deepEquals(["a","b"],["a","c"])).to.equal(!1)}),it("compares two equal arrays",function(){chai_1.expect(utils.deepEquals(["a","b"],["a","b"])).to.equal(!0)}),it("compares two different complex objects",function(){chai_1.expect(utils.deepEquals({x:"y",a:["b",{q:"f"}]},{x:"y",a:["b",{q:"x"}]})).to.equal(!1)}),it("compares two equal complex objects",function(){chai_1.expect(utils.deepEquals({x:"y",a:["b",{q:"f"}]},{x:"y",a:["b",{q:"f"}]})).to.equal(!0)}),it("a complex object and a primitive",function(){var t={x:"y",a:["b",{q:"f"}]};chai_1.expect(utils.deepEquals(t,44)).to.equal(!1),chai_1.expect(utils.deepEquals(t,!1)).to.equal(!1),chai_1.expect(utils.deepEquals(t,44.44)).to.equal(!1),chai_1.expect(utils.deepEquals(t,"primitive")).to.equal(!1)}),it("handles undefined",function(){chai_1.expect(utils.deepEquals({x:"y",a:["b",{q:"f"}]},void 0)).to.be.equal(!1)}),it("handles empty objects",function(){chai_1.expect(utils.deepEquals({firstname:"Wolfram"},{})).to.equal(!1)}),it("finds additional paths on objB",function(){process.stdout.write(""+utils.deepEquals({a:"b"},{a:"b",c:"d"})),chai_1.expect(!1).to.equal(!1)})}),describe("deepCopy",function(){it("copies primitives",function(){chai_1.expect(utils.deepCopy("bla")).to.equal("bla"),chai_1.expect(utils.deepCopy(42)).to.equal(42)}),it("copies arrays",function(){var t=["a","b",2],e=utils.deepCopy(t);chai_1.expect(e).to.deep.equal(t)}),it("copies objects",function(){var t={firstname:"Wolfram",lastname:" Hempel"},e=utils.deepCopy(t);chai_1.expect(e).to.deep.equal(t)}),it("copies objects with null values",function(){var t={firstname:"Wolfram",lastname:null},e=utils.deepCopy(t);chai_1.expect(e).to.deep.equal(t)}),it("copies null values",function(){chai_1.expect(utils.deepCopy(null)).to.be.a("null")}),it("copies nested values",function(){var t={a:{b:"c",d:4}},e=utils.deepCopy(t);chai_1.expect(t).to.deep.equal(e),chai_1.expect(t.a).to.deep.equal(e.a)}),it("copies nested arrays",function(){var t={a:{b:"c",d:["a",{x:"y"}]}},e=utils.deepCopy(t);chai_1.expect(t).to.deep.equal(e),chai_1.expect(t.a.d).to.deep.equal(e.a.d),chai_1.expect(Array.isArray(e.a.d)).to.equal(!0),chai_1.expect(e.a.d[1]).to.deep.equal({x:"y"}),chai_1.expect(t.a.d[1]===e.a.d[1]).to.equal(!1)}),it("converts undefined",function(){var t=utils.deepCopy([void 0]);chai_1.expect(t[0]).to.be.a("null"),t=utils.deepCopy({x:void 0}),chai_1.expect(t).to.deep.equal({})})}),describe("shallowCopy",function(){it("copies primitives",function(){chai_1.expect(utils.shallowCopy("bla")).to.equal("bla"),chai_1.expect(utils.shallowCopy(42)).to.equal(42)}),it("copies arrays",function(){var t=["a","b",2],e=utils.shallowCopy(t);chai_1.expect(e).to.deep.equal(t)}),it("copies objects",function(){var t={firstname:"Wolfram",lastname:" Hempel"},e=utils.shallowCopy(t);chai_1.expect(e).to.deep.equal(t)}),it("copies objects with null values",function(){var t={firstname:"Wolfram",lastname:null},e=utils.shallowCopy(t);chai_1.expect(e).to.deep.equal(t)}),it("handles empty objects",function(){var t=utils.shallowCopy({});chai_1.expect(t).to.deep.equal({})}),it("throws error on null values",function(){chai_1.expect(function(){utils.shallowCopy(null)}).to.throw("Cannot convert undefined or null to object")})}),describe("normalizeSetArguments",function(){it("normalizes argument list containing only a data argument as object",function(){var t=utils.normalizeSetArguments([{title:"awesome post"}]);chai_1.expect(t).to.deep.equal({path:void 0,data:{title:"awesome post"},callback:void 0})}),it("normalizes argument list containing only a data argument as array",function(){var t=utils.normalizeSetArguments([[1,2,3,4]]);chai_1.expect(t).to.deep.equal({path:void 0,data:[1,2,3,4],callback:void 0})}),it("normalizes argument list containing only a data and a callback argument",function(){var t=utils.normalizeSetArguments([{title:"awesome post"},function(){}]);chai_1.expect(t).to.have.property("path").to.equal(void 0),chai_1.expect(t).to.have.property("data").to.deep.equal({title:"awesome post"}),chai_1.expect(t).to.have.property("callback").to.be.a("function")}),it("normalizes argument list containing only a path and a data argument as primitive",function(){var t=utils.normalizeSetArguments(["title","awesome post"]);chai_1.expect(t).to.deep.equal({path:"title",data:"awesome post",callback:void 0}),t=utils.normalizeSetArguments(["version",123]),chai_1.expect(t).to.deep.equal({path:"version",data:123,callback:void 0}),t=utils.normalizeSetArguments(["liked",!0]),chai_1.expect(t).to.deep.equal({path:"liked",data:!0,callback:void 0})}),it("normalizes argument list contaning a path, a data and a callback argument",function(){var t=utils.normalizeSetArguments(["post",{title:"awesome post"},function(){}]);chai_1.expect(t).to.have.property("path").to.equal("post"),chai_1.expect(t).to.have.property("data").to.deep.equal({title:"awesome post"}),chai_1.expect(t).to.have.property("callback").to.be.a("function")}),it("normalizes argument list contaning a path, a data and a callback argument with a start index",function(){var t=utils.normalizeSetArguments([{},"post",{title:"awesome post"},function(){}],1);chai_1.expect(t).to.have.property("path").to.equal("post"),chai_1.expect(t).to.have.property("data").to.deep.equal({title:"awesome post"}),chai_1.expect(t).to.have.property("callback").to.be.a("function")}),it("throws error on an empty argument list",function(){chai_1.expect(function(){utils.normalizeSetArguments([])}).to.throw("Invalid set arguments")}),it.skip("throws error on an argument list containing an invalid data argument",function(){chai_1.expect(function(){utils.normalizeSetArguments([void 0])}).to.throw("Invalid set data argument"),chai_1.expect(function(){utils.normalizeSetArguments([function(){}])}).to.throw("Invalid set data argument"),chai_1.expect(function(){utils.normalizeSetArguments(["data",function(){}])}).to.throw("Invalid set data argument"),chai_1.expect(function(){utils.normalizeSetArguments([134,function(){}])}).to.throw("Invalid set data argument"),chai_1.expect(function(){utils.normalizeSetArguments(["path",function(){},function(){}])}).to.throw("Invalid set data argument")}),it.skip("throws error on an argument list contaning an invalid path argument",function(){chai_1.expect(function(){utils.normalizeSetArguments([void 0,{title:"awesome post"}])}).to.throw("Invalid set path argument"),chai_1.expect(function(){utils.normalizeSetArguments(["",{title:"awesome post"}])}).to.throw("Invalid set path argument"),chai_1.expect(function(){utils.normalizeSetArguments([null,{title:"awesome post"}])}).to.throw("Invalid set path argument"),chai_1.expect(function(){utils.normalizeSetArguments([!0,{title:"awesome post"},function(){}])}).to.throw("Invalid set path argument")}),it("throws error on an argument list containing an invalid callback argument",function(){chai_1.expect(function(){utils.normalizeSetArguments(["title","awesome post",null])}).to.throw("Invalid set callback argument"),chai_1.expect(function(){utils.normalizeSetArguments(["title","awesome post",{}])}).to.throw("Invalid set callback argument"),chai_1.expect(function(){utils.normalizeSetArguments(["title","awesome post",[]])}).to.throw("Invalid set callback argument"),chai_1.expect(function(){utils.normalizeSetArguments(["title","awesome post",1])}).to.throw("Invalid set callback argument"),chai_1.expect(function(){utils.normalizeSetArguments(["title","awesome post",!1])}).to.throw("Invalid set callback argument")})}),describe("normalizeArguments",function(){it("normalizes argument list contaning an object",function(){var t=utils.normalizeArguments([{path:"title",callback:function(){},triggerNow:!1}]);chai_1.expect(t).to.have.property("path").to.equal("title"),chai_1.expect(t).to.have.property("callback").to.be.a("function"),chai_1.expect(t).to.have.property("triggerNow").to.equal(!1)}),it("normalizes argument list contaning path, callback and triggerNow arguments",function(){var t=utils.normalizeArguments([!0,function(){},"title"]);chai_1.expect(t).to.have.property("path").to.equal("title"),chai_1.expect(t).to.have.property("callback").to.be.a("function"),chai_1.expect(t).to.have.property("triggerNow").to.equal(!0)}),it("handles an empty arguments list",function(){var t=utils.normalizeArguments([]);chai_1.expect(t).to.deep.equal({})})}),describe("parseUrl adds all missing parts of the url",function(){it("accepts no protocol and default to ws",function(){chai_1.expect(utils.parseUrl("localhost","/deepstream")).to.equal("ws://localhost/deepstream")}),it("accepts // as protocol",function(){chai_1.expect(utils.parseUrl("//localhost:6020","/deepstream")).to.equal("ws://localhost:6020/deepstream")}),it("accepts ws protocols",function(){chai_1.expect(utils.parseUrl("ws://localhost:6020","/deepstream")).to.equal("ws://localhost:6020/deepstream"),chai_1.expect(utils.parseUrl("wss://localhost:6020","/deepstream")).to.equal("wss://localhost:6020/deepstream")}),it("rejects http protocols",function(){chai_1.expect(utils.parseUrl.bind(utils,"http://localhost:6020","/deepstream")).to.throw("Only ws and wss are supported"),chai_1.expect(utils.parseUrl.bind(utils,"https://localhost:6020","/deepstream")).to.throw("Only ws and wss are supported")}),it("accepts full url with protocol and path and doesn't change it",function(){chai_1.expect(utils.parseUrl("ws://localhost:6020/anotherdeepstream","")).to.equal("ws://localhost:6020/anotherdeepstream")}),it("respects queries and hash",function(){chai_1.expect(utils.parseUrl("localhost?query=value#login","/deepstream")).to.equal("ws://localhost/deepstream?query=value#login")}),it("rejects urls with no host",function(){chai_1.expect(utils.parseUrl.bind(utils,"","/deepstream")).to.throw("Invalid URL: ws://")})});