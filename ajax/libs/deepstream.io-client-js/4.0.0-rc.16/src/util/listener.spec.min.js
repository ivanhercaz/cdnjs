"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var chai_1=require("chai"),sinon=require("sinon"),mocks_1=require("../test/mocks"),message_constants_1=require("../../binary-protocol/src/message-constants"),constants_1=require("../constants"),listener_1=require("./listener");describe("listener",function(){var n,t,c,o=".*",i="subscription";beforeEach(function(){c=sinon.stub(),n=mocks_1.getServicesMock(),t=new listener_1.Listener(message_constants_1.TOPIC.EVENT,n)}),afterEach(function(){n.connectionMock.verify(),n.loggerMock.verify(),n.timeoutRegistryMock.verify()}),it("validates parameters on listen and unlisten",function(){chai_1.expect(t.listen.bind(t,"",c)).to.throw(),chai_1.expect(t.unlisten.bind(t,"")).to.throw()}),it("sends event listen message",function(){var e={topic:message_constants_1.TOPIC.EVENT,action:message_constants_1.EVENT_ACTIONS.LISTEN,name:o};n.connectionMock.expects("sendMessage").once().withExactArgs(e),n.timeoutRegistryMock.expects("add").once().withExactArgs({message:e}),t.listen(o,c)}),it("sends record listen message",function(){t=new listener_1.Listener(message_constants_1.TOPIC.RECORD,n);var e={topic:message_constants_1.TOPIC.RECORD,action:message_constants_1.RECORD_ACTIONS.LISTEN,name:o};n.connectionMock.expects("sendMessage").once().withExactArgs(e),n.timeoutRegistryMock.expects("add").once().withExactArgs({message:e}),t.listen(o,c)}),it("resubscribes all patterns when connection reestablished",function(){t=new listener_1.Listener(message_constants_1.TOPIC.RECORD,n);var e={topic:message_constants_1.TOPIC.RECORD,action:message_constants_1.RECORD_ACTIONS.LISTEN,name:o};n.connectionMock.expects("sendMessage").twice().withExactArgs(e),n.timeoutRegistryMock.expects("add").twice().withExactArgs({message:e}),t.listen(o,c),n.simulateConnectionReestablished()}),describe("when a pattern is listened to",function(){beforeEach(function(){t.listen(o,c),n.connectionMock.restore(),n.timeoutRegistryMock.restore()}),it("warns if listen invoked more than once",function(){n.loggerMock.expects("warn").once().withExactArgs({topic:message_constants_1.TOPIC.EVENT,action:constants_1.EVENT.LISTENER_EXISTS,name:o}),t.listen(o,c)}),it("sends unlisten message when unlistened",function(){var e={topic:message_constants_1.TOPIC.EVENT,action:message_constants_1.EVENT_ACTIONS.UNLISTEN,name:o};n.connectionMock.expects("sendMessage").once().withExactArgs(e),n.timeoutRegistryMock.expects("add").once().withExactArgs({message:e}),t.unlisten(o)}),it("warns if unlisten invoked more than once",function(){n.loggerMock.expects("warn").once().withExactArgs({topic:message_constants_1.TOPIC.EVENT,action:constants_1.EVENT.NOT_LISTENING,name:o}),t.unlisten(o),t.unlisten(o)}),it("logs unsolicited message if an unknown message is recieved",function(){var e={topic:message_constants_1.TOPIC.EVENT,action:message_constants_1.EVENT_ACTIONS.EMIT,name:o,subscription:i};n.loggerMock.expects("error").once().withExactArgs(e,constants_1.EVENT.UNSOLICITED_MESSAGE),t.handle(e)}),describe("gets a subscription for pattern found",function(){var s;beforeEach(function(){t.handle({topic:message_constants_1.TOPIC.EVENT,action:message_constants_1.EVENT_ACTIONS.SUBSCRIPTION_FOR_PATTERN_FOUND,name:o,subscription:i}),s=c.lastCall.args[1]}),it("calls the listen callback",function(){sinon.assert.calledOnce(c),sinon.assert.calledWithExactly(c,i,sinon.match.any)}),it("responds with accept",function(){n.connectionMock.expects("sendMessage").once().withExactArgs({topic:message_constants_1.TOPIC.EVENT,action:message_constants_1.EVENT_ACTIONS.LISTEN_ACCEPT,name:o,subscription:i}),s.accept()}),it("responds with reject",function(){n.connectionMock.expects("sendMessage").once().withExactArgs({topic:message_constants_1.TOPIC.EVENT,action:message_constants_1.EVENT_ACTIONS.LISTEN_REJECT,name:o,subscription:i}),s.reject()}),it("calls onStop subscription for pattern removed",function(){var e=sinon.spy();s.onStop(e),s.accept(),t.handle({topic:message_constants_1.TOPIC.EVENT,action:message_constants_1.EVENT_ACTIONS.SUBSCRIPTION_FOR_PATTERN_REMOVED,name:o,subscription:i}),sinon.assert.calledOnce(e),sinon.assert.calledWithExactly(e,i)}),it("deletes onStop callback once called",function(){var e=sinon.spy();s.onStop(e),s.accept(),t.handle({topic:message_constants_1.TOPIC.EVENT,action:message_constants_1.EVENT_ACTIONS.SUBSCRIPTION_FOR_PATTERN_REMOVED,name:o,subscription:i}),sinon.assert.calledOnce(e),sinon.assert.calledWithExactly(e,i)}),it("triggers all stop callbacks when connection lost",function(){var e=sinon.spy();s.onStop(e),s.accept(),n.simulateConnectionLost(),sinon.assert.calledOnce(e),sinon.assert.calledWithExactly(e,i)})})})});