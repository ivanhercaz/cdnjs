"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const jsonPath=require("../../src/record/json-path"),chai_1=require("chai");describe("objects are created from paths and their value is set correctly",()=>{it("sets simple values",()=>{const e=jsonPath.setValue({},"firstname","Wolfram");chai_1.expect(e).to.deep.equal({firstname:"Wolfram"})}),it("sets values for nested objects",()=>{const e=jsonPath.setValue({},"address.street","someStreet");chai_1.expect(e).to.deep.equal({address:{street:"someStreet"}})}),it("sets values for nested objects with numeric field names",()=>{const e=jsonPath.setValue({},"address.street.1","someStreet");chai_1.expect(e).to.deep.equal({address:{street:{1:"someStreet"}}})}),it("sets values for nested objects with multiple numeric field names",()=>{const e=jsonPath.setValue({},"address.99.street.1","someStreet");chai_1.expect(e).to.deep.equal({address:{99:{street:{1:"someStreet"}}}})}),it("sets values for nested objects with multiple mixed array and numeric field names",()=>{const e=jsonPath.setValue({},"address[2].99.street[2].1","someStreet");chai_1.expect(e).to.deep.equal({address:[null,null,{99:{street:[null,null,{1:"someStreet"}]}}]})}),it("sets first value of array",()=>{const e=jsonPath.setValue({},"items[0]",51);chai_1.expect(e).to.deep.equal({items:[51]})}),it("sets numeric obj member name of 0 (zero)",()=>{const e=jsonPath.setValue({},"items.0",51);chai_1.expect(e).to.deep.equal({items:{0:51}})}),it("sets values for arrays",()=>{const e=jsonPath.setValue({},"pastAddresses[1].street","someStreet");chai_1.expect(e).to.deep.equal({pastAddresses:[null,{street:"someStreet"}]})}),it("sets value AS arrays of arrays",()=>{const e=[void 0,["new-Street1","road1","blvd1"],["street2","road2","blvd2"]],t=jsonPath.setValue({},"addresses",e);chai_1.expect(t).to.deep.equal({addresses:[null,["new-Street1","road1","blvd1"],["street2","road2","blvd2"]]})}),it("sets value IN arrays of arrays",()=>{const e=jsonPath.setValue({addresses:[null,["street1","road1","blvd1"],["street2","road2","blvd2"]]},"addresses[1][0]","new-Street1");chai_1.expect(e).to.deep.equal({addresses:[null,["new-Street1","road1","blvd1"],["street2","road2","blvd2"]]})}),it("sets value IN deeper nested multi-dimensional arrays of arrays",()=>{const e={obj:{101:{addresses:[[void 0,[void 0,["street1","road1","blvd1"],["street2","road2","blvd2"]],[void 0,{a:"street1",b:"road1",c:"blvd1"},{1:"street2",2:"road2",3:"blvd2"}]],void 0,[[0,1,2,3],[9,8,7,6],[2,4,6,8]]]}}},t=jsonPath.setValue(e,"obj.101.addresses[0][1][1][0]","new-Street1");chai_1.expect(t).to.deep.equal({obj:{101:{addresses:[[null,[null,["new-Street1","road1","blvd1"],["street2","road2","blvd2"]],[null,{a:"street1",b:"road1",c:"blvd1"},{1:"street2",2:"road2",3:"blvd2"}]],null,[[0,1,2,3],[9,8,7,6],[2,4,6,8]]]}}})}),it("extends existing objects",()=>{const e=jsonPath.setValue({firstname:"Wolfram"},"lastname","Hempel");chai_1.expect(e).to.deep.equal({firstname:"Wolfram",lastname:"Hempel"})}),it("extends existing arrays",()=>{const e=jsonPath.setValue({firstname:"Wolfram",animals:["Bear","Cow","Ostrich"]},"animals[ 1 ]","Emu");chai_1.expect(e).to.deep.equal({firstname:"Wolfram",animals:["Bear","Emu","Ostrich"]})}),it("extends existing arrays with empty slot assigned a primitive",()=>{const e={firstname:"Wolfram",animals:[void 0,"Cow","Ostrich"]},t=jsonPath.setValue(e,"animals[0]","Emu");chai_1.expect(t).to.deep.equal({firstname:"Wolfram",animals:["Emu","Cow","Ostrich"]})}),it("extends existing arrays with objects",()=>{const e={firstname:"Wolfram",animals:[void 0,"Cow","Ostrich"]},t=jsonPath.setValue(e,"animals[0].xxx","Emu");chai_1.expect(t).to.deep.equal({firstname:"Wolfram",animals:[{xxx:"Emu"},"Cow","Ostrich"]})}),it("treats numbers with the path such as .0. as a key value",()=>{const e=jsonPath.setValue({},"animals.0.name","Emu");chai_1.expect(e).to.deep.equal({animals:{0:{name:"Emu"}}})}),it("treats numbers with the path such as [0] as an index value",()=>{const e=jsonPath.setValue({},"animals[0].name","Emu");chai_1.expect(e).to.deep.equal({animals:[{name:"Emu"}]})}),it("handles .xyz paths into non-objects",()=>{const e=jsonPath.setValue({animals:3},"animals.name","Emu");chai_1.expect(e).to.deep.equal({animals:{name:"Emu"}})}),it("handles .xyz paths through non-objects",()=>{const e=jsonPath.setValue({animals:3},"animals.name.length",7);chai_1.expect(e).to.deep.equal({animals:{name:{length:7}}})}),it("handles [0] paths into non-objects",()=>{const e=jsonPath.setValue({animals:3},"animals[0]",7);chai_1.expect(e).to.deep.equal({animals:[7]})})});