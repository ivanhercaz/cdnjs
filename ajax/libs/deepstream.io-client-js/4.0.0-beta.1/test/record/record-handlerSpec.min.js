"use strict";var __awaiter=this&&this.__awaiter||function(e,s,t,a){return new(t||(t=Promise))(function(n,o){function i(e){try{r(a.next(e))}catch(e){o(e)}}function c(e){try{r(a.throw(e))}catch(e){o(e)}}function r(e){e.done?n(e.value):new t(function(s){s(e.value)}).then(i,c)}r((a=a.apply(e,s||[])).next())})};Object.defineProperty(exports,"__esModule",{value:!0});const bluebird_1=require("bluebird"),chai_1=require("chai"),sinon_1=require("sinon"),mocks_1=require("../mocks"),message_constants_1=require("../../binary-protocol/src/message-constants"),record_handler_1=require("../../src/record/record-handler"),client_options_1=require("../../src/client-options");describe("Record handler",()=>{const e="recordA",s=Object.assign({},client_options_1.DefaultOptions);let t,a,n,o,i,c,r;beforeEach(()=>{n=sinon_1.spy(),o=sinon_1.spy(),i=sinon_1.spy(),t=mocks_1.getServicesMock(),a=mocks_1.getSingleNotifierMock().singleNotifierMock,c=new record_handler_1.RecordHandler(t,s),r=t.getHandle()}),afterEach(()=>{a.verify(),t.verify()}),it("validates on has, head and snapshot",()=>{chai_1.expect(c.has.bind(c,"")).to.throw(),chai_1.expect(c.has.bind(c,"",()=>{})).to.throw(),chai_1.expect(c.has.bind(c,123,()=>{})).to.throw(),chai_1.expect(c.has.bind(c,null,()=>{})).to.throw(),chai_1.expect(c.has.bind(c,e,null)).to.throw(),chai_1.expect(c.has.bind(c,e,123)).to.throw(),chai_1.expect(c.has.bind(c,e,[])).to.throw(),chai_1.expect(c.has.bind(c,e,{})).to.throw(),chai_1.expect(c.head.bind(c,"")).to.throw(),chai_1.expect(c.head.bind(c,"",()=>{})).to.throw(),chai_1.expect(c.head.bind(c,123,()=>{})).to.throw(),chai_1.expect(c.head.bind(c,null,()=>{})).to.throw(),chai_1.expect(c.head.bind(c,e,null)).to.throw(),chai_1.expect(c.head.bind(c,e,123)).to.throw(),chai_1.expect(c.head.bind(c,e,[])).to.throw(),chai_1.expect(c.head.bind(c,e,{})).to.throw(),chai_1.expect(c.snapshot.bind(c,"")).to.throw(),chai_1.expect(c.snapshot.bind(c,"",()=>{})).to.throw(),chai_1.expect(c.snapshot.bind(c,123,()=>{})).to.throw(),chai_1.expect(c.snapshot.bind(c,null,()=>{})).to.throw(),chai_1.expect(c.snapshot.bind(c,e,null)).to.throw(),chai_1.expect(c.snapshot.bind(c,e,123)).to.throw(),chai_1.expect(c.snapshot.bind(c,e,[])).to.throw(),chai_1.expect(c.snapshot.bind(c,e,{})).to.throw()}),it("snapshots record remotely using callback and promise style",()=>{a.expects("request").once().withExactArgs(e,{callback:n}),a.expects("request").once().withExactArgs(e,{resolve:sinon_1.match.func,reject:sinon_1.match.func}),c.snapshot(e,n),c.snapshot(e)}),it("snapshots local records using callback and promise style",()=>{}),describe("handling snapshot messages",()=>{let s;beforeEach(()=>{s={some:"data"},c.snapshot(e,n),c.snapshot(e).then(o).catch(i)}),it("handles success messages",()=>__awaiter(this,void 0,void 0,function*(){r({topic:message_constants_1.TOPIC.RECORD,action:message_constants_1.RECORD_ACTIONS.READ_RESPONSE,name:e,isError:!1,parsedData:s}),yield bluebird_1.Promise.delay(1),sinon_1.assert.calledOnce(n),sinon_1.assert.calledWithExactly(n,null,s),sinon_1.assert.calledOnce(o),sinon_1.assert.calledWithExactly(o,s),sinon_1.assert.notCalled(i)})),it("handles error messages",()=>__awaiter(this,void 0,void 0,function*(){r({topic:message_constants_1.TOPIC.RECORD,action:message_constants_1.RECORD_ACTIONS.MESSAGE_DENIED,originalAction:message_constants_1.RECORD_ACTIONS.READ,name:e,isError:!0}),yield bluebird_1.Promise.delay(1),sinon_1.assert.calledOnce(n),sinon_1.assert.calledWithExactly(n,message_constants_1.RECORD_ACTIONS[message_constants_1.RECORD_ACTIONS.MESSAGE_DENIED],void 0),sinon_1.assert.notCalled(o),sinon_1.assert.calledOnce(i),sinon_1.assert.calledWithExactly(i,message_constants_1.RECORD_ACTIONS[message_constants_1.RECORD_ACTIONS.MESSAGE_DENIED])}))}),it("queries for the record version remotely using callback and promise",()=>{a.expects("request").once().withExactArgs(e,{callback:n}),a.expects("request").once().withExactArgs(e,{resolve:sinon_1.match.func,reject:sinon_1.match.func}),c.head(e,n),c.head(e).then(o).catch(i)}),it("queries for the record version in local records using callback and promise",()=>{}),describe("handling head messages from head calls",()=>{let s;beforeEach(()=>{s=1,c.head(e,n),c.head(e).then(o).catch(i)}),it("handles success messages",()=>__awaiter(this,void 0,void 0,function*(){r({topic:message_constants_1.TOPIC.RECORD,action:message_constants_1.RECORD_ACTIONS.HEAD_RESPONSE,name:e,isError:!1,version:s}),yield bluebird_1.Promise.delay(1),sinon_1.assert.calledOnce(n),sinon_1.assert.calledWithExactly(n,null,s),sinon_1.assert.calledOnce(o),sinon_1.assert.calledWithExactly(o,s),sinon_1.assert.notCalled(i)})),it("handles error messages",()=>__awaiter(this,void 0,void 0,function*(){r({topic:message_constants_1.TOPIC.RECORD,action:message_constants_1.RECORD_ACTIONS.MESSAGE_DENIED,originalAction:message_constants_1.RECORD_ACTIONS.HEAD,name:e,isError:!0}),yield bluebird_1.Promise.delay(1),sinon_1.assert.calledOnce(n),sinon_1.assert.calledWithExactly(n,message_constants_1.RECORD_ACTIONS[message_constants_1.RECORD_ACTIONS.MESSAGE_DENIED],void 0),sinon_1.assert.notCalled(o),sinon_1.assert.calledOnce(i),sinon_1.assert.calledWithExactly(i,message_constants_1.RECORD_ACTIONS[message_constants_1.RECORD_ACTIONS.MESSAGE_DENIED])}))}),it("queries for record exists remotely using callback and promise",()=>{a.expects("request").twice().withExactArgs(e,{callback:sinon_1.match.func}),c.has(e,n),c.has(e).then(o).catch(i)}),it("queries for record exists in local records using callback and promise",()=>{}),describe("handling head messages from has calls",()=>{let s;beforeEach(()=>{s=1,c.has(e,n),c.has(e).then(o).catch(i)}),it("handles success messages",()=>__awaiter(this,void 0,void 0,function*(){r({topic:message_constants_1.TOPIC.RECORD,action:message_constants_1.RECORD_ACTIONS.HEAD_RESPONSE,name:e,isError:!1,version:s}),yield bluebird_1.Promise.delay(1),sinon_1.assert.calledOnce(n),sinon_1.assert.calledWithExactly(n,null,!0),sinon_1.assert.calledOnce(o),sinon_1.assert.calledWithExactly(o,!0),sinon_1.assert.notCalled(i)})),it("handles record not found error messages",()=>__awaiter(this,void 0,void 0,function*(){r({topic:message_constants_1.TOPIC.RECORD,action:message_constants_1.RECORD_ACTIONS.HEAD_RESPONSE,originalAction:message_constants_1.RECORD_ACTIONS.HEAD,version:-1,name:e}),yield bluebird_1.Promise.delay(1),sinon_1.assert.calledOnce(n),sinon_1.assert.calledWithExactly(n,null,!1),sinon_1.assert.calledOnce(o),sinon_1.assert.calledWithExactly(o,!1),sinon_1.assert.notCalled(i)})),it("handles error messages",()=>__awaiter(this,void 0,void 0,function*(){r({topic:message_constants_1.TOPIC.RECORD,action:message_constants_1.RECORD_ACTIONS.MESSAGE_DENIED,originalAction:message_constants_1.RECORD_ACTIONS.HEAD,name:e,isError:!0}),yield bluebird_1.Promise.delay(1),sinon_1.assert.calledOnce(n),sinon_1.assert.calledWithExactly(n,message_constants_1.RECORD_ACTIONS[message_constants_1.RECORD_ACTIONS.MESSAGE_DENIED],null),sinon_1.assert.notCalled(o),sinon_1.assert.calledOnce(i),sinon_1.assert.calledWithExactly(i,message_constants_1.RECORD_ACTIONS[message_constants_1.RECORD_ACTIONS.MESSAGE_DENIED])}))})});