"use strict";var __awaiter=this&&this.__awaiter||function(e,t,a,s){return new(a||(a=Promise))(function(i,n){function o(e){try{r(s.next(e))}catch(e){n(e)}}function c(e){try{r(s.throw(e))}catch(e){n(e)}}function r(e){e.done?i(e.value):new a(function(t){t(e.value)}).then(o,c)}r((s=s.apply(e,t||[])).next())})};Object.defineProperty(exports,"__esModule",{value:!0});const bluebird_1=require("bluebird"),chai_1=require("chai"),sinon_1=require("sinon"),mocks_1=require("../mocks"),message_constants_1=require("../../binary-protocol/src/message-constants"),client_options_1=require("../../src/client-options"),record_handler_1=require("../../src/record/record-handler");describe("record setData online",()=>{const e=message_constants_1.TOPIC.RECORD,t="testRecord";let a,s,i,n,o;beforeEach(()=>{n=mocks_1.getServicesMock(),a=mocks_1.getWriteAckNotifierMock().writeAckNotifierMock,i=Object.assign({},client_options_1.DefaultOptions),n.connection.isConnected=!0,s=new record_handler_1.RecordHandler(n,i),o=n.getHandle()}),afterEach(()=>{n.verify(),a.verify()}),it("sends update messages for entire data changes",()=>{const a={firstname:"Wolfram"};n.connectionMock.expects("sendMessage").once().withExactArgs({topic:e,action:message_constants_1.RECORD_ACTIONS.CREATEANDUPDATE,name:t,path:void 0,parsedData:a,version:-1}),s.setData(t,a)}),it("sends update messages for path changes ",()=>{n.connectionMock.expects("sendMessage").once().withExactArgs({topic:e,action:message_constants_1.RECORD_ACTIONS.CREATEANDPATCH,name:t,path:"lastName",parsedData:"Hempel",version:-1}),s.setData(t,"lastName","Hempel")}),it("deletes value when sending undefined for a path",()=>{n.connectionMock.expects("sendMessage").once().withExactArgs({topic:e,action:message_constants_1.RECORD_ACTIONS.ERASE,name:t,path:"lastName",version:-1,parsedData:void 0}),s.setData(t,"lastName",void 0)}),it.skip("updates existent local record",()=>{}),it("throws error for invalid arguments",()=>{chai_1.expect(s.setData.bind(s)).to.throw(),chai_1.expect(s.setData.bind(s,t)).to.throw();const e={some:"data"};chai_1.expect(s.setData.bind(s,void 0,e)).to.throw(),chai_1.expect(s.setData.bind(s,null,e)).to.throw(),chai_1.expect(s.setData.bind(s,123,e)).to.throw(),chai_1.expect(s.setData.bind(s,{},e)).to.throw(),chai_1.expect(s.setData.bind(s,t,void 0)).to.throw(),chai_1.expect(s.setData.bind(s,t,void 0,()=>{})).to.throw(),chai_1.expect(s.setData.bind(s,t,null)).to.throw(),chai_1.expect(s.setData.bind(s,t,null,()=>{})).to.throw(),chai_1.expect(s.setData.bind(s,t,"","data")).to.throw(),chai_1.expect(s.setData.bind(s,t,"Some String")).to.throw(),chai_1.expect(s.setData.bind(s,t,100.24)).to.throw(),chai_1.expect(s.setData.bind(s,t,{},{not:"func"})).to.throw(),chai_1.expect(s.setData.bind(s,t,"path","val",{not:"func"})).to.throw()}),describe("with ack",()=>{let i,n,o;beforeEach(()=>{n="key",i={some:"value"},o=(()=>{})}),it("sends update messages for entire data changes with ack callback",()=>{a.expects("send").once().withExactArgs({topic:e,action:message_constants_1.RECORD_ACTIONS.CREATEANDUPDATE,name:t,path:void 0,parsedData:i,version:-1},o),s.setData(t,i,o)}),it("sends update messages for path changes with ack callback",()=>{a.expects("send").once().withExactArgs({topic:e,action:message_constants_1.RECORD_ACTIONS.CREATEANDPATCH,name:t,path:n,parsedData:i,version:-1},o),s.setData(t,n,i,o)}),it("sends update messages for entire data changes with ack promise",()=>{a.expects("send").once().withExactArgs({topic:e,action:message_constants_1.RECORD_ACTIONS.CREATEANDUPDATE,name:t,path:void 0,parsedData:i,version:-1},sinon_1.match.func);const n=s.setDataWithAck(t,i);chai_1.expect(n).is.a("promise")}),it("sends update messages for path changes with ack promise",()=>{a.expects("send").once().withExactArgs({topic:e,action:message_constants_1.RECORD_ACTIONS.CREATEANDPATCH,name:t,path:n,parsedData:i,version:-1},sinon_1.match.func);const o=s.setDataWithAck(t,n,i);chai_1.expect(o).is.a("promise")}),it("deletes value when sending undefined for a path with ack callback",()=>{a.expects("send").once().withExactArgs({topic:e,action:message_constants_1.RECORD_ACTIONS.ERASE,name:t,path:n,version:-1,parsedData:void 0},o),s.setDataWithAck(t,n,void 0,o)}),it("deletes value when sending undefined for a path with ack promise",()=>{a.expects("send").once().withExactArgs({topic:e,action:message_constants_1.RECORD_ACTIONS.ERASE,name:t,path:n,version:-1,parsedData:void 0},sinon_1.match.func);const i=s.setDataWithAck(t,n,void 0);chai_1.expect(i).is.a("promise")})}),describe("handling acknowledgements",()=>{const a={some:"value"};let i,n,c;beforeEach(()=>{i=sinon_1.spy(),n=sinon_1.spy(),c=sinon_1.spy()});const r={topic:e,action:message_constants_1.RECORD_ACTIONS.MESSAGE_DENIED,originalAction:message_constants_1.RECORD_ACTIONS.CREATEANDUPDATE_WITH_WRITE_ACK,name:t,correlationId:"1",isError:!0,isWriteAck:!0};it("calls callbackAck with error",()=>__awaiter(this,void 0,void 0,function*(){s.setDataWithAck(t,a,i),o(r),yield bluebird_1.Promise.delay(1),sinon_1.assert.calledOnce(i),sinon_1.assert.calledWithExactly(i,message_constants_1.RECORD_ACTIONS[r.action])})),it("rejects promise with error",()=>__awaiter(this,void 0,void 0,function*(){s.setDataWithAck(t,"key",void 0).then(n).catch(c),o(r),yield bluebird_1.Promise.delay(1),sinon_1.assert.notCalled(n),sinon_1.assert.calledOnce(c),sinon_1.assert.calledWithExactly(c,message_constants_1.RECORD_ACTIONS[r.action])}));const d={topic:e,action:message_constants_1.RECORD_ACTIONS.WRITE_ACKNOWLEDGEMENT,originalAction:message_constants_1.RECORD_ACTIONS.CREATEANDUPDATE_WITH_WRITE_ACK,name:t,correlationId:"1",isWriteAck:!0};it("calls callbackAck for setData without path",()=>__awaiter(this,void 0,void 0,function*(){s.setDataWithAck(t,a,i),o(d),yield bluebird_1.Promise.delay(1),sinon_1.assert.calledOnce(i),sinon_1.assert.calledWithExactly(i,null)})),it("resolves promise for setData without path",()=>__awaiter(this,void 0,void 0,function*(){s.setDataWithAck(t,a).then(n).catch(c),o(d),yield bluebird_1.Promise.delay(1),sinon_1.assert.calledOnce(n),sinon_1.assert.notCalled(c)}));const _={topic:e,action:message_constants_1.RECORD_ACTIONS.WRITE_ACKNOWLEDGEMENT,originalAction:message_constants_1.RECORD_ACTIONS.CREATEANDPATCH_WITH_WRITE_ACK,name:t,correlationId:"1",isWriteAck:!0};it("calls callbackAck for setData with path",()=>__awaiter(this,void 0,void 0,function*(){s.setDataWithAck(t,"key",a,i),o(_),yield bluebird_1.Promise.delay(1),sinon_1.assert.calledOnce(i),sinon_1.assert.calledWithExactly(i,null)})),it("resolves promise for setData with path",()=>__awaiter(this,void 0,void 0,function*(){s.setDataWithAck(t,"key",a).then(n).catch(c),o(_),yield bluebird_1.Promise.delay(1),sinon_1.assert.calledOnce(n),sinon_1.assert.notCalled(c)}));const l={topic:e,action:message_constants_1.RECORD_ACTIONS.WRITE_ACKNOWLEDGEMENT,originalAction:message_constants_1.RECORD_ACTIONS.ERASE_WITH_WRITE_ACK,name:t,correlationId:"1",isWriteAck:!0};it("calls callbackAck for setData deleting values",()=>__awaiter(this,void 0,void 0,function*(){s.setDataWithAck(t,"key",void 0,i),o(l),yield bluebird_1.Promise.delay(1),sinon_1.assert.calledOnce(i),sinon_1.assert.calledWithExactly(i,null)})),it("resolves promise for setData deleting values",()=>__awaiter(this,void 0,void 0,function*(){s.setDataWithAck(t,"key",void 0).then(n).catch(c),o(l),yield bluebird_1.Promise.delay(1),sinon_1.assert.calledOnce(n),sinon_1.assert.notCalled(c)}))})});