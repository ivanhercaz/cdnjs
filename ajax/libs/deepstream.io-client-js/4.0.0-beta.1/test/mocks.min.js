"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const sinon_1=require("sinon"),constants_1=require("../src/constants"),timer_registry_1=require("../src/util/timer-registry"),single_notifier_1=require("../src/record/single-notifier"),write_ack_service_1=require("../src/record/write-ack-service");let lastMessageSent;exports.getLastMessageSent=(()=>lastMessageSent),exports.getServicesMock=(()=>{let e,t,s=null;const o={sendMessage:e=>{lastMessageSent=e},getConnectionState:sinon_1.stub().returns(constants_1.CONNECTION_STATE.OPEN),isConnected:!0,registerHandler:(e,t)=>{s=t},onReestablished:t=>{e=t},onLost:e=>{t=e}},r=sinon_1.mock(o),n={add:()=>{},remove:()=>{},clear:()=>{}},i=sinon_1.mock(n),c={warn:()=>{},error:()=>{}},l=sinon_1.mock(c);l.expects("warn").never();const g=new timer_registry_1.TimerRegistry;let a;const k={get:()=>{},set:()=>{},delete:()=>{}},_=sinon_1.mock(k);return{socketFactory:(e,t)=>a=new class{constructor(e){this.url=e}sendParsedMessage(e){}onparsedmessages(e){}onopen(){}onerror(){}onclose(){}close(){process.nextTick(this.onclose)}simulateRemoteClose(){this.close()}simulateOpen(){process.nextTick(this.onopen)}simulateError(){process.nextTick(this.onerror.bind(null,{code:1234}))}simulateMessages(e){process.nextTick(this.onparsedmessages.bind(this,e))}}(e),getSocket:()=>({socket:a,socketMock:sinon_1.mock(a)}),connection:o,connectionMock:r,timeoutRegistry:n,timeoutRegistryMock:i,logger:c,loggerMock:l,getLogger:()=>({logger:c,loggerMock:l}),timerRegistry:g,getHandle:()=>s,simulateConnectionLost:()=>t(),simulateConnectionReestablished:()=>e(),storage:k,storageMock:_,verify:()=>{r.verify(),i.verify(),l.verify(),_.verify()}}}),exports.getListenerMock=(()=>{const e={listen:()=>{},unlisten:()=>{},handle:()=>{}};return{listener:e,listenerMock:sinon_1.mock(e)}}),exports.getSingleNotifierMock=(()=>{const e=single_notifier_1.SingleNotifier.prototype;return{singleNotifier:e,singleNotifierMock:sinon_1.mock(e)}}),exports.getWriteAckNotifierMock=(()=>{const e=write_ack_service_1.WriteAcknowledgementService.prototype;return{writeAckNotifier:e,writeAckNotifierMock:sinon_1.mock(e)}});