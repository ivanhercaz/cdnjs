"use strict";var __awaiter=this&&this.__awaiter||function(e,s,t,n){return new(t||(t=Promise))(function(a,i){function o(e){try{r(n.next(e))}catch(e){i(e)}}function c(e){try{r(n.throw(e))}catch(e){i(e)}}function r(e){e.done?a(e.value):new t(function(s){s(e.value)}).then(o,c)}r((n=n.apply(e,s||[])).next())})};Object.defineProperty(exports,"__esModule",{value:!0});const bluebird_1=require("bluebird"),chai_1=require("chai"),sinon_1=require("sinon"),mocks_1=require("../mocks"),constants_1=require("../../src/constants"),message_constants_1=require("../../binary-protocol/src/message-constants"),client_options_1=require("../../src/client-options"),presence_handler_1=require("../../src/presence/presence-handler");function message(e,s){return s?{name:s,topic:message_constants_1.TOPIC.PRESENCE,action:e}:{topic:message_constants_1.TOPIC.PRESENCE,action:e}}function messageResponseQueryAll(e,s){return{topic:message_constants_1.TOPIC.PRESENCE,action:message_constants_1.PRESENCE_ACTIONS.QUERY_ALL_RESPONSE,names:s,correlationId:e.toString()}}function messageResponseQuery(e,s){return{topic:message_constants_1.TOPIC.PRESENCE,action:message_constants_1.PRESENCE_ACTIONS.QUERY_RESPONSE,parsedData:s,correlationId:e.toString()}}function errorMessageResponseQueryAll(e,s){return{topic:message_constants_1.TOPIC.PRESENCE,action:s,originalAction:message_constants_1.PRESENCE_ACTIONS.QUERY_ALL,correlationId:e.toString(),isError:!0}}function errorMessageResponseQuery(e,s){return{topic:message_constants_1.TOPIC.PRESENCE,action:s,originalAction:message_constants_1.PRESENCE_ACTIONS.QUERY,correlationId:e.toString(),isError:!0}}describe("Presence handler",()=>{const e="userA",s="userB";let t,n,a,i,o,c;const r=Object.assign({},client_options_1.DefaultOptions);let l;beforeEach(()=>{t=mocks_1.getServicesMock(),n=new presence_handler_1.PresenceHandler(t,r),a=t.getHandle(),i=sinon_1.spy(),o=sinon_1.spy(),c=sinon_1.spy(),l=0}),afterEach(()=>{t.verify()}),it("validates parameters on subscribe, unsubscribe and getAll",()=>{chai_1.expect(n.subscribe.bind(n)).to.throw(),chai_1.expect(n.subscribe.bind(n,"name")).to.throw(),chai_1.expect(n.subscribe.bind(n,"name",123)).to.throw(),chai_1.expect(n.subscribe.bind(n,"name",{})).to.throw(),chai_1.expect(n.subscribe.bind(n,"",()=>{})).to.throw(),chai_1.expect(n.subscribe.bind(n,123,()=>{})).to.throw(),chai_1.expect(n.subscribe.bind(n,null,()=>{})).to.throw(),chai_1.expect(n.subscribe.bind(n,void 0,()=>{})).to.throw(),chai_1.expect(n.unsubscribe.bind(n,"")).to.throw(),chai_1.expect(n.unsubscribe.bind(n,123)).to.throw(),chai_1.expect(n.unsubscribe.bind(n,null)).to.throw(),chai_1.expect(n.unsubscribe.bind(n,"name",1)).to.throw(),chai_1.expect(n.unsubscribe.bind(n,"name",{})).to.throw(),chai_1.expect(n.unsubscribe.bind(n,"name","name")).to.throw(),chai_1.expect(n.getAll.bind(n,"")).to.throw(),chai_1.expect(n.getAll.bind(n,123)).to.throw(),chai_1.expect(n.getAll.bind(n,null)).to.throw(),chai_1.expect(n.getAll.bind(n,"name",{})).to.throw(),chai_1.expect(n.getAll.bind(n,"name",1)).to.throw()}),it("cant't query getAll when client is offline",()=>__awaiter(this,void 0,void 0,function*(){t.connection.isConnected=!1,t.connectionMock.expects("sendMessage").never(),n.getAll(i),n.getAll().then(o).catch(c),yield bluebird_1.Promise.delay(0),sinon_1.assert.calledOnce(i),sinon_1.assert.calledWithExactly(i,constants_1.EVENT.CLIENT_OFFLINE),sinon_1.assert.notCalled(o),sinon_1.assert.calledOnce(c),sinon_1.assert.calledWithExactly(c,constants_1.EVENT.CLIENT_OFFLINE)})),it("calls query for all users callback with error message when connection is lost",()=>__awaiter(this,void 0,void 0,function*(){n.getAll(i),n.getAll().then(o).catch(c),t.simulateConnectionLost(),yield bluebird_1.Promise.delay(1),sinon_1.assert.calledOnce(i),sinon_1.assert.calledWithExactly(i,constants_1.EVENT.CLIENT_OFFLINE),sinon_1.assert.notCalled(o),sinon_1.assert.calledOnce(c),sinon_1.assert.calledWithExactly(c,constants_1.EVENT.CLIENT_OFFLINE)})),it("calls query for specific users callback with error message when connection is lost",()=>__awaiter(this,void 0,void 0,function*(){const e=["userA","userB"];n.getAll(e,i),n.getAll(e).then(o).catch(c),t.simulateConnectionLost(),yield bluebird_1.Promise.delay(1),sinon_1.assert.calledOnce(i),sinon_1.assert.calledWithExactly(i,constants_1.EVENT.CLIENT_OFFLINE),sinon_1.assert.notCalled(o),sinon_1.assert.calledOnce(c),sinon_1.assert.calledWithExactly(c,constants_1.EVENT.CLIENT_OFFLINE)})),it("subscribes to presence with user a",()=>__awaiter(this,void 0,void 0,function*(){const s={topic:message_constants_1.TOPIC.PRESENCE,action:message_constants_1.PRESENCE_ACTIONS.SUBSCRIBE,correlationId:l.toString(),names:[e]};t.connectionMock.expects("sendMessage").once().withExactArgs(s),t.timeoutRegistryMock.expects("add").once().withExactArgs({message:s}),n.subscribe(e,i),yield bluebird_1.Promise.delay(10)})),it("subscribes to presence for all users",()=>__awaiter(this,void 0,void 0,function*(){const e={topic:message_constants_1.TOPIC.PRESENCE,action:message_constants_1.PRESENCE_ACTIONS.SUBSCRIBE_ALL};t.connectionMock.expects("sendMessage").once().withExactArgs(e),t.timeoutRegistryMock.expects("add").once().withExactArgs({message:e}),n.subscribe(i),yield bluebird_1.Promise.delay(10)})),it("queries for specific users presence",()=>{const e=["userA","userB"],s={topic:message_constants_1.TOPIC.PRESENCE,action:message_constants_1.PRESENCE_ACTIONS.QUERY,correlationId:l.toString(),names:e};t.connectionMock.expects("sendMessage").once().withExactArgs(s),t.timeoutRegistryMock.expects("add").once().withExactArgs({message:s}),n.getAll(e,i)}),it("queries for all users presence",()=>{const e={topic:message_constants_1.TOPIC.PRESENCE,action:message_constants_1.PRESENCE_ACTIONS.QUERY_ALL};t.connectionMock.expects("sendMessage").once().withExactArgs(e),t.timeoutRegistryMock.expects("add").once().withExactArgs({message:e}),n.getAll(i)}),it("sends unsubscribe for specific user presence",()=>__awaiter(this,void 0,void 0,function*(){const e={topic:message_constants_1.TOPIC.PRESENCE,action:message_constants_1.PRESENCE_ACTIONS.SUBSCRIBE,correlationId:l.toString(),names:["user"]};l++;const s={topic:message_constants_1.TOPIC.PRESENCE,action:message_constants_1.PRESENCE_ACTIONS.UNSUBSCRIBE,correlationId:l.toString(),names:["user"]};t.connectionMock.expects("sendMessage").once().withExactArgs(e),t.timeoutRegistryMock.expects("add").once().withExactArgs({message:e}),n.subscribe("user",i),yield bluebird_1.Promise.delay(10),t.connectionMock.expects("sendMessage").once().withExactArgs(s),t.timeoutRegistryMock.expects("add").once().withExactArgs({message:s}),n.unsubscribe("user"),yield bluebird_1.Promise.delay(10)})),it("sends unsubscribe for all users presence",()=>__awaiter(this,void 0,void 0,function*(){const e={topic:message_constants_1.TOPIC.PRESENCE,action:message_constants_1.PRESENCE_ACTIONS.SUBSCRIBE_ALL},s={topic:message_constants_1.TOPIC.PRESENCE,action:message_constants_1.PRESENCE_ACTIONS.UNSUBSCRIBE_ALL};t.connectionMock.expects("sendMessage").once().withExactArgs(e),t.timeoutRegistryMock.expects("add").once().withExactArgs({message:e}),n.subscribe(i),yield bluebird_1.Promise.delay(10),t.connectionMock.expects("sendMessage").once().withExactArgs(s),t.timeoutRegistryMock.expects("add").once().withExactArgs({message:s}),n.unsubscribe(),yield bluebird_1.Promise.delay(10)})),it("handles acks messages",()=>{const e={topic:message_constants_1.TOPIC.PRESENCE,action:message_constants_1.PRESENCE_ACTIONS.SUBSCRIBE_ACK,isAck:!0};t.timeoutRegistryMock.expects("remove").once().withExactArgs(e),n.handle(e)}),it("resubscribes subscriptions when client reconnects",()=>__awaiter(this,void 0,void 0,function*(){const a=[e,s];n.subscribe(e,()=>{}),n.subscribe(s,()=>{}),n.subscribe(()=>{}),yield bluebird_1.Promise.delay(10),l=parseInt(mocks_1.getLastMessageSent().correlationId,10)+1;const i=message(message_constants_1.PRESENCE_ACTIONS.SUBSCRIBE_ALL),o={topic:message_constants_1.TOPIC.PRESENCE,action:message_constants_1.PRESENCE_ACTIONS.SUBSCRIBE,correlationId:l.toString(),names:a};t.connectionMock.expects("sendMessage").once().withExactArgs(i),t.timeoutRegistryMock.expects("add").once().withExactArgs({message:i}),t.connectionMock.expects("sendMessage").once().withExactArgs(o),t.timeoutRegistryMock.expects("add").once().withExactArgs({message:o}),t.simulateConnectionReestablished(),yield bluebird_1.Promise.delay(10)})),describe("when server responds for getAll for all users ",()=>{let e,s;beforeEach(()=>{e=sinon_1.spy(),s=["userA","userB"],n.getAll(e),n.getAll().then(o).catch(c)}),it("receives data for query all users",()=>__awaiter(this,void 0,void 0,function*(){const a=messageResponseQueryAll(l,s),i=messageResponseQueryAll(l+1,s);t.timeoutRegistryMock.expects("remove").once().withExactArgs(Object.assign({},a,{action:message_constants_1.PRESENCE_ACTIONS.QUERY_ALL})),t.timeoutRegistryMock.expects("remove").once().withExactArgs(Object.assign({},i,{action:message_constants_1.PRESENCE_ACTIONS.QUERY_ALL})),n.handle(a),n.handle(i),yield bluebird_1.Promise.delay(1),sinon_1.assert.calledOnce(e),sinon_1.assert.calledWithExactly(e,null,s),sinon_1.assert.notCalled(c),sinon_1.assert.calledOnce(o),sinon_1.assert.calledWithExactly(o,s)})),it("recieves error message for query all users",()=>__awaiter(this,void 0,void 0,function*(){const s=message_constants_1.PRESENCE_ACTIONS.MESSAGE_DENIED,a=errorMessageResponseQueryAll(l,s),i=errorMessageResponseQueryAll(l+1,s);t.timeoutRegistryMock.expects("remove").once().withExactArgs(a),t.timeoutRegistryMock.expects("remove").once().withExactArgs(i),n.handle(a),n.handle(i),yield bluebird_1.Promise.delay(1),sinon_1.assert.calledOnce(e),sinon_1.assert.calledWithExactly(e,message_constants_1.PRESENCE_ACTIONS[s]),sinon_1.assert.calledOnce(c),sinon_1.assert.calledWithExactly(c,message_constants_1.PRESENCE_ACTIONS[s]),sinon_1.assert.notCalled(o)}))}),describe("when server responds for getAll for specific users ",()=>{let e,s,a;beforeEach(()=>{e=sinon_1.spy(),s=["userA","userB"],a={userA:!0,userB:!1},n.getAll(s,e),n.getAll(s).then(o).catch(c)}),it("receives data for query specific users",()=>__awaiter(this,void 0,void 0,function*(){const s=messageResponseQuery(l,a),i=messageResponseQuery(l+1,a);t.timeoutRegistryMock.expects("remove").once().withExactArgs(Object.assign({},s,{action:message_constants_1.PRESENCE_ACTIONS.QUERY})),t.timeoutRegistryMock.expects("remove").once().withExactArgs(Object.assign({},i,{action:message_constants_1.PRESENCE_ACTIONS.QUERY})),n.handle(s),n.handle(i),yield bluebird_1.Promise.delay(1),sinon_1.assert.calledOnce(e),sinon_1.assert.calledWithExactly(e,null,a),sinon_1.assert.notCalled(c),sinon_1.assert.calledOnce(o),sinon_1.assert.calledWithExactly(o,a)})),it("recieves error message for query users",()=>__awaiter(this,void 0,void 0,function*(){const s=message_constants_1.PRESENCE_ACTIONS.MESSAGE_DENIED,a=errorMessageResponseQuery(l,s),i=errorMessageResponseQuery(l+1,s);t.timeoutRegistryMock.expects("remove").once().withExactArgs(a),t.timeoutRegistryMock.expects("remove").once().withExactArgs(i),n.handle(a),n.handle(i),yield bluebird_1.Promise.delay(1),sinon_1.assert.calledOnce(e),sinon_1.assert.calledWithExactly(e,message_constants_1.PRESENCE_ACTIONS[s]),sinon_1.assert.calledOnce(c),sinon_1.assert.calledWithExactly(c,message_constants_1.PRESENCE_ACTIONS[s]),sinon_1.assert.notCalled(o)}))}),describe("when subscribing to userA, userB and all",()=>{let t,a,i;beforeEach(()=>__awaiter(this,void 0,void 0,function*(){t=sinon_1.spy(),a=sinon_1.spy(),i=sinon_1.spy(),n.subscribe(e,t),n.subscribe(s,a),n.subscribe(i),yield bluebird_1.Promise.delay(10)})),it("notifies when userA logs in",()=>{n.handle(message(message_constants_1.PRESENCE_ACTIONS.PRESENCE_JOIN,e)),n.handle(message(message_constants_1.PRESENCE_ACTIONS.PRESENCE_JOIN_ALL,e)),sinon_1.assert.calledOnce(t),sinon_1.assert.calledWithExactly(t,e,!0),sinon_1.assert.notCalled(a),sinon_1.assert.calledOnce(i),sinon_1.assert.calledWithExactly(i,e,!0)}),it("notifies when userB logs out",()=>{n.handle(message(message_constants_1.PRESENCE_ACTIONS.PRESENCE_LEAVE,s)),n.handle(message(message_constants_1.PRESENCE_ACTIONS.PRESENCE_LEAVE_ALL,s)),sinon_1.assert.notCalled(t),sinon_1.assert.calledOnce(a),sinon_1.assert.calledWithExactly(a,s,!1),sinon_1.assert.calledOnce(i),sinon_1.assert.calledWithExactly(i,s,!1)}),it("notifies only the all users callback when userC logs in",()=>{n.handle(message(message_constants_1.PRESENCE_ACTIONS.PRESENCE_JOIN_ALL,"userC")),sinon_1.assert.notCalled(t),sinon_1.assert.notCalled(a),sinon_1.assert.calledOnce(i),sinon_1.assert.calledWithExactly(i,"userC",!0)}),it("notifies only the all users callback when userC logs out",()=>{n.handle(message(message_constants_1.PRESENCE_ACTIONS.PRESENCE_LEAVE_ALL,"userC")),sinon_1.assert.notCalled(t),sinon_1.assert.notCalled(a),sinon_1.assert.calledOnce(i),sinon_1.assert.calledWithExactly(i,"userC",!1)}),it("doesn't notify callbacks when userA logs in after unsubscribing",()=>__awaiter(this,void 0,void 0,function*(){n.unsubscribe(e),yield bluebird_1.Promise.delay(10),n.handle(message(message_constants_1.PRESENCE_ACTIONS.PRESENCE_JOIN,e)),sinon_1.assert.notCalled(t),sinon_1.assert.notCalled(a),sinon_1.assert.notCalled(i)})),it("doesn't notify userA callback when userA logs in after unsubscribing",()=>__awaiter(this,void 0,void 0,function*(){n.unsubscribe(e,t),yield bluebird_1.Promise.delay(10),n.handle(message(message_constants_1.PRESENCE_ACTIONS.PRESENCE_JOIN,e)),n.handle(message(message_constants_1.PRESENCE_ACTIONS.PRESENCE_JOIN_ALL,e)),sinon_1.assert.notCalled(t),sinon_1.assert.notCalled(a),sinon_1.assert.calledOnce(i),sinon_1.assert.calledWithExactly(i,e,!0)})),it("doesn't notify all users callback when userA logs in after unsubscribing",()=>__awaiter(this,void 0,void 0,function*(){n.unsubscribe(i),yield bluebird_1.Promise.delay(10),n.handle(message(message_constants_1.PRESENCE_ACTIONS.PRESENCE_JOIN,e)),n.handle(message(message_constants_1.PRESENCE_ACTIONS.PRESENCE_JOIN_ALL,e)),sinon_1.assert.calledOnce(t),sinon_1.assert.calledWithExactly(t,e,!0),sinon_1.assert.notCalled(a),sinon_1.assert.notCalled(i)})),it("doesn't notify callbacks after unsubscribing all",()=>__awaiter(this,void 0,void 0,function*(){n.unsubscribe(),yield bluebird_1.Promise.delay(10),[e,s].forEach(e=>{n.handle(message(message_constants_1.PRESENCE_ACTIONS.PRESENCE_JOIN,e)),n.handle(message(message_constants_1.PRESENCE_ACTIONS.PRESENCE_JOIN_ALL,e))}),sinon_1.assert.notCalled(t),sinon_1.assert.notCalled(a),sinon_1.assert.notCalled(i)}))})});