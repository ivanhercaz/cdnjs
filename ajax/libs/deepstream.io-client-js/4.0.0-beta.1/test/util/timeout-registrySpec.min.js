"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const timeout_registry_1=require("../../src/util/timeout-registry"),sinon=require("sinon"),mocks_1=require("../mocks"),client_options_1=require("../../src/client-options"),constants_1=require("../../src/constants"),message_constants_1=require("../../binary-protocol/src/message-constants");describe("timeout registry",()=>{let e,t,s,o;const n={topic:message_constants_1.TOPIC.EVENT,action:message_constants_1.EVENT_ACTIONS.SUBSCRIBE,name:"event"};beforeEach(()=>{(s=Object.assign({},client_options_1.DefaultOptions)).subscriptionTimeout=10,(t=mocks_1.getServicesMock()).connection.getConnectionState.returns(constants_1.CONNECTION_STATE.OPEN),e=new timeout_registry_1.TimeoutRegistry(t,s),t.connection.onLost(e.onConnectionLost.bind(e))}),afterEach(()=>{t.loggerMock.verify()}),describe("adding timeout when connection down",()=>{beforeEach(()=>{t.connection.isConnected=!1,o=e.add({message:n})}),it("does not invoke an error",e=>{setTimeout(e,20)})}),describe("generic timeout",()=>{beforeEach(()=>{o=e.add({message:n})}),it("invokes the error callback once the timeout has occured",e=>{t.loggerMock.expects("warn").once().withExactArgs(n,constants_1.EVENT.ACK_TIMEOUT),setTimeout(e,20)}),it("adding an entry twice does not throw error",()=>{e.add({message:n})}),it("receives an ACK message clears timeout",t=>{e.remove(n),setTimeout(t,10)}),it("clearing timer id clears timeout",t=>{e.clear(o),setTimeout(t,10)}),it("clears timeout when connection lost",e=>{t.simulateConnectionLost(),setTimeout(e,10)})}),describe("custom timeout and event",()=>{let s;beforeEach(()=>{s=sinon.spy(),o=e.add({message:n,event:message_constants_1.RPC_ACTIONS.RESPONSE_TIMEOUT,duration:25,callback:s})}),it("doesnt trigger timeout after generic subscriptionTimeout",e=>{setTimeout(()=>{sinon.assert.callCount(s,0),e()},20)}),it("triggers timeout with custom attributes",e=>{setTimeout(()=>{sinon.assert.calledOnce(s),sinon.assert.calledWithExactly(s,message_constants_1.RPC_ACTIONS.RESPONSE_TIMEOUT,n),e()},50)}),it("receives an ACK message clears timeout",t=>{e.remove(n),setTimeout(()=>{sinon.assert.callCount(s,0),t()},50)}),it("clearing timer id clears timeout",t=>{e.clear(o),setTimeout(()=>{sinon.assert.callCount(s,0),t()},50)}),it("clears timeout when connection lost",e=>{t.simulateConnectionLost(),setTimeout(e,10)})})});