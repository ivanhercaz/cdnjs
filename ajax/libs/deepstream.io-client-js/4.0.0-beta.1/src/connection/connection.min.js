"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const constants_1=require("../constants"),message_constants_1=require("../../binary-protocol/src/message-constants"),message_parser_1=require("../../binary-protocol/src/message-parser"),state_machine_1=require("../util/state-machine"),utils=require("../util/utils"),Emitter=require("component-emitter2");class Connection{constructor(t,s,e,n){this.options=s,this.services=t,this.authParams=null,this.handlers=new Map,this.isConnected=!1,this.authCallback=null,this.emitter=n,this.internalEmitter=new Emitter;let a=!1,i=!0;this.stateMachine=new state_machine_1.StateMachine(this.services.logger,{init:constants_1.CONNECTION_STATE.CLOSED,onStateChanged:(t,s)=>{t!==s&&(this.isConnected=t===constants_1.CONNECTION_STATE.OPEN,n.emit(constants_1.EVENT.CONNECTION_STATE_CHANGED,t),t===constants_1.CONNECTION_STATE.RECONNECTING?(a=!0,s!==constants_1.CONNECTION_STATE.RECONNECTING&&this.internalEmitter.emit(constants_1.EVENT.CONNECTION_LOST)):t===constants_1.CONNECTION_STATE.OPEN&&(a||i)&&(i=!1,this.internalEmitter.emit(constants_1.EVENT.CONNECTION_REESTABLISHED)))},transitions:[{name:"connected",from:constants_1.CONNECTION_STATE.CLOSED,to:constants_1.CONNECTION_STATE.AWAITING_CONNECTION},{name:"connected",from:constants_1.CONNECTION_STATE.REDIRECTING,to:constants_1.CONNECTION_STATE.AWAITING_CONNECTION},{name:"connected",from:constants_1.CONNECTION_STATE.RECONNECTING,to:constants_1.CONNECTION_STATE.AWAITING_CONNECTION},{name:"challenge",from:constants_1.CONNECTION_STATE.AWAITING_CONNECTION,to:constants_1.CONNECTION_STATE.CHALLENGING},{name:"redirected",from:constants_1.CONNECTION_STATE.CHALLENGING,to:constants_1.CONNECTION_STATE.REDIRECTING},{name:"challenge-denied",from:constants_1.CONNECTION_STATE.CHALLENGING,to:constants_1.CONNECTION_STATE.CHALLENGE_DENIED},{name:"accepted",from:constants_1.CONNECTION_STATE.CHALLENGING,to:constants_1.CONNECTION_STATE.AWAITING_AUTHENTICATION,handler:this.onAwaitingAuthentication.bind(this)},{name:"authentication-timeout",from:constants_1.CONNECTION_STATE.AWAITING_CONNECTION,to:constants_1.CONNECTION_STATE.AUTHENTICATION_TIMEOUT},{name:"authentication-timeout",from:constants_1.CONNECTION_STATE.AWAITING_AUTHENTICATION,to:constants_1.CONNECTION_STATE.AUTHENTICATION_TIMEOUT},{name:"authenticate",from:constants_1.CONNECTION_STATE.AWAITING_AUTHENTICATION,to:constants_1.CONNECTION_STATE.AUTHENTICATING},{name:"unsuccesful-login",from:constants_1.CONNECTION_STATE.AUTHENTICATING,to:constants_1.CONNECTION_STATE.AWAITING_AUTHENTICATION},{name:"succesful-login",from:constants_1.CONNECTION_STATE.AUTHENTICATING,to:constants_1.CONNECTION_STATE.OPEN},{name:"too-many-auth-attempts",from:constants_1.CONNECTION_STATE.AUTHENTICATING,to:constants_1.CONNECTION_STATE.TOO_MANY_AUTH_ATTEMPTS},{name:"too-many-auth-attempts",from:constants_1.CONNECTION_STATE.AWAITING_AUTHENTICATION,to:constants_1.CONNECTION_STATE.TOO_MANY_AUTH_ATTEMPTS},{name:"authentication-timeout",from:constants_1.CONNECTION_STATE.AWAITING_AUTHENTICATION,to:constants_1.CONNECTION_STATE.AUTHENTICATION_TIMEOUT},{name:"reconnect",from:constants_1.CONNECTION_STATE.RECONNECTING,to:constants_1.CONNECTION_STATE.RECONNECTING},{name:"closed",from:constants_1.CONNECTION_STATE.CLOSING,to:constants_1.CONNECTION_STATE.CLOSED},{name:"error",to:constants_1.CONNECTION_STATE.RECONNECTING},{name:"connection-lost",to:constants_1.CONNECTION_STATE.RECONNECTING},{name:"close",to:constants_1.CONNECTION_STATE.CLOSING}]}),this.originalUrl=utils.parseUrl(e,this.options.path),this.url=this.originalUrl,this.createEndpoint()}onLost(t){this.internalEmitter.on(constants_1.EVENT.CONNECTION_LOST,t)}onReestablished(t){this.internalEmitter.on(constants_1.EVENT.CONNECTION_REESTABLISHED,t)}registerHandler(t,s){this.handlers.set(t,s)}sendMessage(t){this.isOpen()?this.endpoint.sendParsedMessage(t):this.services.logger.error(t,constants_1.EVENT.IS_CLOSED)}authenticate(t,s){if(t&&"object"!=typeof t&&"function"!=typeof t)throw new Error("invalid argument authParamsOrCallback");if(s&&"function"!=typeof s)throw new Error("invalid argument callback");this.stateMachine.state!==constants_1.CONNECTION_STATE.CHALLENGE_DENIED&&this.stateMachine.state!==constants_1.CONNECTION_STATE.TOO_MANY_AUTH_ATTEMPTS&&this.stateMachine.state!==constants_1.CONNECTION_STATE.AUTHENTICATION_TIMEOUT?(t&&(this.authParams="object"==typeof t?t:{}),this.authCallback=t&&"function"==typeof t?t:s||(()=>{}),this.stateMachine.state===constants_1.CONNECTION_STATE.AWAITING_AUTHENTICATION&&this.authParams&&this.sendAuthParams()):this.services.logger.error({topic:message_constants_1.TOPIC.CONNECTION},constants_1.EVENT.IS_CLOSED)}getConnectionState(){return this.stateMachine.state}isOpen(){const t=this.getConnectionState();return t!==constants_1.CONNECTION_STATE.CLOSED&&t!==constants_1.CONNECTION_STATE.ERROR&&t!==constants_1.CONNECTION_STATE.CLOSING}close(){this.services.timerRegistry.remove(this.heartbeatInterval),this.sendMessage({topic:message_constants_1.TOPIC.CONNECTION,action:message_constants_1.CONNECTION_ACTIONS.CLOSING}),this.stateMachine.transition("close")}createEndpoint(){this.endpoint=this.services.socketFactory(this.url,this.options.socketOptions),this.endpoint.onopen=this.onOpen.bind(this),this.endpoint.onerror=this.onError.bind(this),this.endpoint.onclose=this.onClose.bind(this),this.endpoint.onparsedmessages=this.onMessages.bind(this)}onOpen(){this.clearReconnect(),this.lastHeartBeat=Date.now(),this.checkHeartBeat(),this.stateMachine.transition("connected"),this.sendMessage({topic:message_constants_1.TOPIC.CONNECTION,action:message_constants_1.CONNECTION_ACTIONS.CHALLENGE,url:this.originalUrl,protocolVersion:"0.1a"}),this.stateMachine.transition("challenge")}onError(t){setTimeout(()=>{let s;if("ECONNRESET"===t.code||"ECONNREFUSED"===t.code)s=`Can't connect! Deepstream server unreachable on ${this.originalUrl}`;else try{s=JSON.stringify(t)}catch(e){s=t.toString()}this.services.logger.error({topic:message_constants_1.TOPIC.CONNECTION},constants_1.EVENT.CONNECTION_ERROR,s)},1),this.services.timerRegistry.remove(this.heartbeatInterval),this.stateMachine.transition("error"),this.tryReconnect()}onClose(){this.services.timerRegistry.remove(this.heartbeatInterval),this.stateMachine.state!==constants_1.CONNECTION_STATE.REDIRECTING?this.stateMachine.state!==constants_1.CONNECTION_STATE.CHALLENGE_DENIED&&this.stateMachine.state!==constants_1.CONNECTION_STATE.TOO_MANY_AUTH_ATTEMPTS&&this.stateMachine.state!==constants_1.CONNECTION_STATE.AUTHENTICATION_TIMEOUT&&(this.stateMachine.state!==constants_1.CONNECTION_STATE.CLOSING?(this.stateMachine.transition("connection-lost"),this.tryReconnect()):this.stateMachine.transition("closed")):this.createEndpoint()}onMessages(t){t.forEach(t=>{if(t.parseError)return void this.services.logger.error({topic:message_constants_1.TOPIC.PARSER},t.action,t.raw&&t.raw.toString());const s=t,e=message_parser_1.parseData(s);if(!0!==e&&this.services.logger.error({topic:message_constants_1.TOPIC.PARSER},message_constants_1.PARSER_ACTIONS.INVALID_MESSAGE,e),null===s)return;if(s.topic===message_constants_1.TOPIC.CONNECTION)return void this.handleConnectionResponse(s);if(s.topic===message_constants_1.TOPIC.AUTH)return void this.handleAuthResponse(s);const n=this.handlers.get(s.topic);n&&n(s)})}sendAuthParams(){this.stateMachine.transition("authenticate"),this.sendMessage({topic:message_constants_1.TOPIC.AUTH,action:message_constants_1.AUTH_ACTIONS.REQUEST,parsedData:this.authParams})}checkHeartBeat(){const t=2*this.options.heartbeatInterval;if(Date.now()-this.lastHeartBeat>t)return this.services.timerRegistry.remove(this.heartbeatInterval),this.services.logger.error({topic:message_constants_1.TOPIC.CONNECTION},constants_1.EVENT.HEARTBEAT_TIMEOUT),void this.endpoint.close();this.heartbeatInterval=this.services.timerRegistry.add({duration:this.options.heartbeatInterval,callback:this.checkHeartBeat,context:this})}tryReconnect(){if(null===this.reconnectTimeout){if(this.reconnectionAttempt<this.options.maxReconnectAttempts)return this.stateMachine.transition("reconnect"),this.reconnectTimeout=setTimeout(this.tryOpen.bind(this),Math.min(this.options.maxReconnectInterval,this.options.reconnectIntervalIncrement*this.reconnectionAttempt)),void this.reconnectionAttempt++;this.emitter.emit(constants_1.EVENT[constants_1.EVENT.MAX_RECONNECTION_ATTEMPTS_REACHED],this.reconnectionAttempt),this.clearReconnect(),this.close()}}tryOpen(){this.stateMachine.state!==constants_1.CONNECTION_STATE.REDIRECTING&&(this.url=this.originalUrl),this.createEndpoint(),this.reconnectTimeout=null}clearReconnect(){this.reconnectTimeout&&clearTimeout(this.reconnectTimeout),this.reconnectTimeout=null,this.reconnectionAttempt=0}handleConnectionResponse(t){return t.action===message_constants_1.CONNECTION_ACTIONS.PING?(this.lastHeartBeat=Date.now(),void(this.getConnectionState()!==constants_1.CONNECTION_STATE.CLOSING&&this.sendMessage({topic:message_constants_1.TOPIC.CONNECTION,action:message_constants_1.CONNECTION_ACTIONS.PONG}))):t.action!==message_constants_1.CONNECTION_ACTIONS.ACCEPT?t.action===message_constants_1.CONNECTION_ACTIONS.REJECT?(this.stateMachine.transition("challenge-denied"),void this.endpoint.close()):t.action===message_constants_1.CONNECTION_ACTIONS.REDIRECT?(this.url=t.url,this.stateMachine.transition("redirected"),void this.endpoint.close()):void(t.action===message_constants_1.CONNECTION_ACTIONS.AUTHENTICATION_TIMEOUT&&(this.deliberateClose=!0,this.stateMachine.transition("authentication-timeout"),this.services.logger.error(t))):void this.stateMachine.transition("accepted")}handleAuthResponse(t){return t.action===message_constants_1.AUTH_ACTIONS.TOO_MANY_AUTH_ATTEMPTS?(this.deliberateClose=!0,this.stateMachine.transition("too-many-auth-attempts"),void this.services.logger.error(t)):t.action===message_constants_1.AUTH_ACTIONS.AUTH_UNSUCCESSFUL?(this.stateMachine.transition("unsuccesful-login"),void this.onAuthUnSuccessful()):t.action===message_constants_1.AUTH_ACTIONS.AUTH_SUCCESSFUL?(this.stateMachine.transition("succesful-login"),void this.onAuthSuccessful(t.parsedData)):void 0}onAwaitingAuthentication(){this.authParams&&this.sendAuthParams()}onAuthSuccessful(t){this.updateClientData(t),null!==this.authCallback&&(this.authCallback(!0,this.clientData),this.authCallback=null)}onAuthUnSuccessful(){const t={reason:constants_1.EVENT[constants_1.EVENT.INVALID_AUTHENTICATION_DETAILS]};null!==this.authCallback?(this.authCallback(!1,t),this.authCallback=null):this.emitter.emit(constants_1.EVENT.REAUTHENTICATION_FAILURE,t)}updateClientData(t){const s=t||null;(void 0!==this.clientData||null!==s&&0!==Object.keys(s).length)&&(utils.deepEquals(this.clientData,t)||(this.emitter.emit(constants_1.EVENT.CLIENT_DATA_CHANGED,Object.assign({},s)),this.clientData=s))}}exports.Connection=Connection;