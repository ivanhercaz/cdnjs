"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),require("source-map-support").install();const client_options_1=require("./client-options"),constants_1=require("./constants");exports.EVENT=constants_1.EVENT,exports.CONNECTION_STATE=constants_1.CONNECTION_STATE;const C=require("../binary-protocol/src/message-constants");exports.C=C;const logger_1=require("./util/logger"),timeout_registry_1=require("./util/timeout-registry"),timer_registry_1=require("./util/timer-registry"),connection_1=require("./connection/connection"),socket_factory_1=require("./connection/socket-factory"),event_handler_1=require("./event/event-handler"),rpc_handler_1=require("./rpc/rpc-handler"),record_handler_1=require("./record/record-handler"),presence_handler_1=require("./presence/presence-handler"),EventEmitter=require("component-emitter2");class Client extends EventEmitter{constructor(e,t={}){super(),this.options=Object.assign({},client_options_1.DefaultOptions,t);const n={};n.logger=new logger_1.Logger(this),n.timerRegistry=new timer_registry_1.TimerRegistry,n.timeoutRegistry=new timeout_registry_1.TimeoutRegistry(n,this.options),n.socketFactory=t.socketFactory||socket_factory_1.socketFactory,n.connection=new connection_1.Connection(n,this.options,e,this),this.services=n,this.services.connection.onLost(n.timeoutRegistry.onConnectionLost.bind(n.timeoutRegistry)),this.event=new event_handler_1.EventHandler(this.services,this.options),this.rpc=new rpc_handler_1.RPCHandler(this.services,this.options),this.record=new record_handler_1.RecordHandler(this.services,this.options),this.presence=new presence_handler_1.PresenceHandler(this.services,this.options)}login(e,t){if(e&&"object"==typeof e){if(!t)return new Promise((t,n)=>{this.services.connection.authenticate(e,(e,r)=>{e?t(r):n(r)})});this.services.connection.authenticate(e,t)}else{if("function"!=typeof e)return new Promise((e,t)=>{this.services.connection.authenticate({},(n,r)=>{n?e(r):t(r)})});this.services.connection.authenticate({},e)}}getConnectionState(){return this.services.connection.getConnectionState()}close(){this.services.connection.close()}getUid(){return`${(new Date).getTime().toString(36)}-${(1e16*Math.random()).toString(36).replace(".","")}`}}function deepstream(e,t){return new Client(e,t)}exports.Client=Client,exports.deepstream=deepstream;