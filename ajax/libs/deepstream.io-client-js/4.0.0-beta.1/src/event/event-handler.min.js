"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const message_constants_1=require("../../binary-protocol/src/message-constants"),constants_1=require("../constants"),listener_1=require("../util/listener"),Emitter=require("component-emitter2");class EventHandler{constructor(e,s,t){this.options=s,this.services=e,this.listeners=t||new listener_1.Listener(message_constants_1.TOPIC.EVENT,e),this.emitter=new Emitter,this.services.connection.registerHandler(message_constants_1.TOPIC.EVENT,this.handle.bind(this)),this.services.connection.onReestablished(this.resubscribe.bind(this))}subscribe(e,s){if("string"!=typeof e||0===e.length)throw new Error("invalid argument name");if("function"!=typeof s)throw new Error("invalid argument callback");this.emitter.hasListeners(e)||this.sendSubscriptionMessage(e),this.emitter.on(e,s)}unsubscribe(e,s){if(!e||"string"!=typeof e||0===e.length)throw new Error("invalid argument name");if(void 0!==s&&"function"!=typeof s)throw new Error("invalid argument callback");if(this.emitter.hasListeners(e)){if(this.emitter.off(e,s),!this.emitter.hasListeners(e)){const s={topic:message_constants_1.TOPIC.EVENT,action:message_constants_1.EVENT_ACTIONS.UNSUBSCRIBE,name:e};this.services.timeoutRegistry.add({message:s}),this.services.connection.sendMessage(s)}}else this.services.logger.warn({topic:message_constants_1.TOPIC.EVENT,action:message_constants_1.EVENT_ACTIONS.NOT_SUBSCRIBED,name:e})}emit(e,s){if("string"!=typeof e||0===e.length)throw new Error("invalid argument name");this.services.connection.isConnected&&this.services.connection.sendMessage({topic:message_constants_1.TOPIC.EVENT,action:message_constants_1.EVENT_ACTIONS.EMIT,name:e,parsedData:s}),this.emitter.emit(e,s)}listen(e,s){this.listeners.listen(e,s)}unlisten(e){this.listeners.unlisten(e)}handle(e){if(e.isAck)this.services.timeoutRegistry.remove(e);else{if(e.action!==message_constants_1.EVENT_ACTIONS.EMIT)return e.action===message_constants_1.EVENT_ACTIONS.MESSAGE_DENIED?(this.services.logger.error({topic:message_constants_1.TOPIC.EVENT},message_constants_1.EVENT_ACTIONS.MESSAGE_DENIED),this.services.timeoutRegistry.remove(e),void(e.originalAction===message_constants_1.EVENT_ACTIONS.SUBSCRIBE&&this.emitter.off(e.name))):e.action===message_constants_1.EVENT_ACTIONS.MULTIPLE_SUBSCRIPTIONS?(this.services.timeoutRegistry.remove(Object.assign({},e,{action:message_constants_1.EVENT_ACTIONS.SUBSCRIBE})),void this.services.logger.warn(e)):e.action===message_constants_1.EVENT_ACTIONS.NOT_SUBSCRIBED?(this.services.timeoutRegistry.remove(Object.assign({},e,{action:message_constants_1.EVENT_ACTIONS.SUBSCRIBE})),void this.services.logger.warn(e)):void(e.action!==message_constants_1.EVENT_ACTIONS.SUBSCRIPTION_FOR_PATTERN_FOUND&&e.action!==message_constants_1.EVENT_ACTIONS.SUBSCRIPTION_FOR_PATTERN_REMOVED?e.action!==message_constants_1.EVENT_ACTIONS.INVALID_LISTEN_REGEX?this.services.logger.error(e,constants_1.EVENT.UNSOLICITED_MESSAGE):this.services.logger.error(e):this.listeners.handle(e));void 0!==e.parsedData?this.emitter.emit(e.name,e.parsedData):this.emitter.emit(e.name,void 0)}}resubscribe(){const e=this.emitter.eventNames();for(const s of e)this.sendSubscriptionMessage(s)}sendSubscriptionMessage(e){const s={topic:message_constants_1.TOPIC.EVENT,action:message_constants_1.EVENT_ACTIONS.SUBSCRIBE,name:e};this.services.timeoutRegistry.add({message:s}),this.services.connection.sendMessage(s)}}exports.EventHandler=EventHandler;