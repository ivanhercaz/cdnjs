"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const message_constants_1=require("../../binary-protocol/src/message-constants");class RPCResponse{constructor(e,s,t){this.name=e.name,this.correlationId=e.correlationId,this.options=s,this.services=t,this.isAccepted=!1,this.isComplete=!1,this.autoAccept=!0,this.services.timerRegistry.requestIdleCallback(this.performAutoAck.bind(this))}accept(){!1===this.isAccepted&&(this.services.connection.sendMessage({topic:message_constants_1.TOPIC.RPC,action:message_constants_1.RPC_ACTIONS.ACCEPT,name:this.name,correlationId:this.correlationId}),this.isAccepted=!0)}reject(){if(!0===this.isComplete)throw new Error(`Rpc ${this.name} already completed`);this.autoAccept=!1,this.isComplete=!0,this.isAccepted=!0,this.services.connection.sendMessage({topic:message_constants_1.TOPIC.RPC,action:message_constants_1.RPC_ACTIONS.REJECT,name:this.name,correlationId:this.correlationId})}error(e){if(!0===this.isComplete)throw new Error(`Rpc ${this.name} already completed`);this.autoAccept=!1,this.isComplete=!0,this.isAccepted=!0,this.services.connection.sendMessage({topic:message_constants_1.TOPIC.RPC,action:message_constants_1.RPC_ACTIONS.REQUEST_ERROR,name:this.name,correlationId:this.correlationId,parsedData:e})}send(e){if(!0===this.isComplete)throw new Error(`Rpc ${this.name} already completed`);this.accept(),this.services.connection.sendMessage({topic:message_constants_1.TOPIC.RPC,action:message_constants_1.RPC_ACTIONS.RESPONSE,name:this.name,correlationId:this.correlationId,parsedData:e}),this.isComplete=!0}performAutoAck(){!0===this.autoAccept&&this.accept()}}exports.RPCResponse=RPCResponse;