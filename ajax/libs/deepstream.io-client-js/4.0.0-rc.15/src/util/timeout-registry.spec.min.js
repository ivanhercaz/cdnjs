"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var timeout_registry_1=require("./timeout-registry"),sinon=require("sinon"),mocks_1=require("../test/mocks"),client_options_1=require("../client-options"),constants_1=require("../constants"),message_constants_1=require("../../binary-protocol/src/message-constants");describe("timeout registry",function(){var n,o,e,i,s={topic:message_constants_1.TOPIC.EVENT,action:message_constants_1.EVENT_ACTIONS.SUBSCRIBE,name:"event"};beforeEach(function(){(e=Object.assign({},client_options_1.DefaultOptions)).subscriptionTimeout=10,(o=mocks_1.getServicesMock()).connection.getConnectionState.returns(constants_1.CONNECTION_STATE.OPEN),n=new timeout_registry_1.TimeoutRegistry(o,e),o.connection.onLost(n.onConnectionLost.bind(n))}),afterEach(function(){o.loggerMock.verify()}),describe("adding timeout when connection down",function(){beforeEach(function(){o.connection.isConnected=!1,i=n.add({message:s})}),it("does not invoke an error",function(e){setTimeout(e,20)})}),describe("generic timeout",function(){beforeEach(function(){i=n.add({message:s})}),it("invokes the error callback once the timeout has occured",function(e){o.loggerMock.expects("warn").once().withExactArgs(s,constants_1.EVENT.ACK_TIMEOUT),setTimeout(e,20)}),it("adding an entry twice does not throw error",function(){n.add({message:s})}),it("receives an ACK message clears timeout",function(e){n.remove(s),setTimeout(e,10)}),it("clearing timer id clears timeout",function(e){n.clear(i),setTimeout(e,10)}),it("clears timeout when connection lost",function(e){o.simulateConnectionLost(),setTimeout(e,10)})}),describe("custom timeout and event",function(){var t;beforeEach(function(){t=sinon.spy(),i=n.add({message:s,event:message_constants_1.RPC_ACTIONS.RESPONSE_TIMEOUT,duration:25,callback:t})}),it("doesnt trigger timeout after generic subscriptionTimeout",function(e){setTimeout(function(){sinon.assert.callCount(t,0),e()},20)}),it("triggers timeout with custom attributes",function(e){setTimeout(function(){sinon.assert.calledOnce(t),sinon.assert.calledWithExactly(t,message_constants_1.RPC_ACTIONS.RESPONSE_TIMEOUT,s),e()},50)}),it("receives an ACK message clears timeout",function(e){n.remove(s),setTimeout(function(){sinon.assert.callCount(t,0),e()},50)}),it("clearing timer id clears timeout",function(e){n.clear(i),setTimeout(function(){sinon.assert.callCount(t,0),e()},50)}),it("clears timeout when connection lost",function(e){o.simulateConnectionLost(),setTimeout(e,10)})})});