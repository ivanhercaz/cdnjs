define(["intern!object","intern/chai!assert","sinon","../../Deferred","../../promise/Promise","../../errors/CancelError"],function(e,s,i,c,r,l){e(function(){var n,t;return{name:"dojo/Deferred",beforeEach:function(){n=i.stub(),t=new c(n)},".resolve":{"deferred receives result after resolving":function(){var n={};return t.resolve(n),t.then(function(e){s.equal(e,n)})},"promise receives result after resolving":function(){var n={};return t.resolve(n),t.promise.then(function(e){s.equal(e,n)})},"resolve() returns promise":function(){var e=t.resolve({});s.instanceOf(e,r),s.equal(e,t.promise)},"isResolved() returns true after resolving":function(){s.isFalse(t.isResolved()),t.resolve(),s.isTrue(t.isResolved())},"isFulfilled() returns true after resolving":function(){s.isFalse(t.isFulfilled()),t.resolve(),s.isTrue(t.isFulfilled())},"resolve() is ignored after having been fulfilled":function(){s.doesNotThrow(function(){t.resolve(),t.resolve()})},"resolve() throws error after having been fulfilled and strict":function(){t.resolve(),s.throws(function(){t.resolve({},!0)},Error)},"resolve() watching success handlers are notified":function(){var n={},e=i.spy(function(e){s.equal(e,n)});t.then(e),s.isFalse(e.called),t.resolve(n),s.isTrue(e.called)},"resolve() is already bound to the deferred":function(){var n={};return(0,t.resolve)(n),t.then(function(e){s.equal(e,n)})}},".reject":{"deferred receives result after rejecting":function(){var n={};return t.reject(n),t.then(null,function(e){s.equal(e,n)})},"promise receives result after rejecting":function(){var n={};return t.reject(n),t.promise.then(null,function(e){s.equal(e,n)})},"reject() returns promise":function(){var e=t.reject({});s.instanceOf(e,r),s.equal(e,t.promise)},"isRejected() returns true after rejecting":function(){s.isFalse(t.isRejected()),t.reject(),s.isTrue(t.isRejected())},"isFulfilled() returns true after rejecting":function(){s.isFalse(t.isFulfilled()),t.reject(),s.isTrue(t.isFulfilled())},"reject() is ignored after having been fulfilled":function(){s.doesNotThrow(function(){t.reject(),t.reject()})},"reject() throws error after having been fulfilled and strict":function(){t.reject(),s.throws(function(){t.reject({},!0)},Error)},"reject() watching failure handlers are notified":function(){var n={},e=i.spy(function(e){s.equal(e,n)});t.then(null,e),s.isFalse(e.called),t.reject(n),s.isTrue(e.called)},"reject() is already bound to the deferred":function(){var n={};return(0,t.reject)(n),t.then(null,function(e){s.equal(e,n)})}},".progress":{"deferred receives result after progress":function(){var e={},n=i.stub();t.then(null,null,n),t.progress(e),s.isTrue(n.calledOnce),s.equal(n.lastCall.args[0],e)},"promise receives result after progres":function(){var e={},n=i.stub();t.promise.then(null,null,n),t.progress(e),s.isTrue(n.calledOnce),s.equal(n.lastCall.args[0],e)},"progress() returns promise":function(){var e=t.progress({});s.instanceOf(e,r),s.equal(e,t.promise)},"isResolved() returns false after progress":function(){s.isFalse(t.isResolved()),t.progress(),s.isFalse(t.isResolved())},"isRejected() returns false after progress":function(){s.isFalse(t.isRejected()),t.progress(),s.isFalse(t.isRejected())},"isFulfilled() returns false after progress":function(){s.isFalse(t.isFulfilled()),t.progress(),s.isFalse(t.isFulfilled())},"progress() is ignored after having been fulfilled":function(){var e=i.stub();t.promise.then(null,null,e),t.resolve(),t.progress(),s.isFalse(e.called)},"progress() throws error after having been fulfilled and strict":function(){t.resolve(),s.throws(function(){t.progress({},!0)},Error)},"progress() results are not cached":function(){var e={},n=i.stub();t.progress({}),t.then(null,null,n),t.progress(e),s.isTrue(n.calledOnce),s.equal(n.lastCall.args[0],e)},"progress() with chaining":function(){var e={},n=new c,r=i.stub();t.then(function(){return n}).then(null,null,r),t.resolve(),s.isFalse(r.called),n.progress(e),s.isTrue(r.calledOnce),s.equal(r.lastCall.args[0],e)},"after progress(), the progback return value is emitted on the returned promise":function(){var e=t.then(null,null,function(e){return e*e}),n=i.stub();e.then(null,null,n),t.progress(2),s.equal(n.lastCall.args[0],4)},"progress() is already bound to the deferred":function(){var e=t.progress,n=i.stub();t.then(null,null,n),e({}),s.isTrue(n.called)}},".cancel":{"cancel() invokes a canceler":function(){t.cancel(),s.isTrue(n.called)},"isCanceled() returns true after canceling":function(){s.isFalse(t.isCanceled()),t.cancel(),s.isTrue(t.isCanceled())},"isResolved() returns false after canceling":function(){s.isFalse(t.isResolved()),t.cancel(),s.isFalse(t.isResolved())},"isRejected() returns true after canceling":function(){s.isFalse(t.isRejected()),t.cancel(),s.isTrue(t.isRejected())},"isFulfilled() returns true after canceling":function(){s.isFalse(t.isFulfilled()),t.cancel(),s.isTrue(t.isFulfilled())},"cancel() is ignored after having been fulfilled":function(){t.resolve(),t.cancel(),s.isFalse(n.called)},"cancel() throws error after having been fulfilled and strict":function(){t.resolve(),s.throws(function(){t.cancel(null,!0)},Error)},"cancel() without reason results in CancelError":function(){var n=t.cancel();return t.then(null,function(e){s.equal(e,n),s.instanceOf(e,l)})},"cancel() returns default reason":function(){s.instanceOf(t.cancel(),l)},"reason is passed to canceler":function(){var e={};t.cancel(e),s.equal(n.lastCall.args[0],e)},"cancels with reason returned from canceler":function(){var n={},e=t.cancel(n);return s.equal(e,n),t.then(null,function(e){s.equal(e,n)})},"cancel() returns reason from canceler":function(){var e={};n.returns(e),s.equal(t.cancel(),e)},"cancel() returns reason from canceler, if canceler rejects with reason":function(){var e={},n=new c(function(){return n.reject(e),e}),r=n.cancel();s.equal(r,e)},"with canceler not returning anything, returns default CancelError":function(){var e=new c(function(){}),n=e.cancel();return e.then(null,function(e){s.equal(e,n),s.instanceOf(e,l)})},"with canceler not returning anything, still returns passed reason":function(){var e=new c(function(){}),n={},r=e.cancel(n);return s.equal(r,n),e.then(null,function(e){s.equal(e,n)})},"cancel() does not reject promise if canceler resolves deferred":function(){var e=new c(function(){e.resolve(n)}),n={};return e.cancel(),e.then(function(e){s.equal(e,n)})},"cancel() does not reject promise if canceler resolves a chain of promises":function(){var e=new c(function(){e.resolve(n)}),n={},r=e.then().then().then();return r.cancel(),s.isTrue(e.isCanceled()),s.isTrue(r.isCanceled()),r.then(function(e){s.equal(e,n)})},"cancel() returns undefined if canceler resolves deferred":function(){var e=new c(function(){e.resolve({})});s.isUndefined(e.cancel())},"cancel() does not change rejection value if canceler rejects deferred":function(){var e=new c(function(){e.reject(n)}),n={};return e.cancel(),e.then(null,function(e){s.equal(e,n)})},"cancel() does not change rejection value if canceler rejects a chain of promises":function(){var e=new c(function(){e.reject(n)}),n={},r=e.then().then().then();return r.cancel(),s.isTrue(e.isCanceled()),s.isTrue(r.isCanceled()),r.then(null,function(e){s.equal(e,n)})},"cancel() returns undefined if canceler rejects deferred":function(){var e=new c(function(){e.reject({})});s.isUndefined(e.cancel())},"cancel() a promise chain":function(){var e=i.stub(),n={};new c(e).then().then().then().cancel(n),s.isTrue(e.called),s.equal(e.lastCall.args[0],n)},"cancel() a returned promise":function(){var e={},n=i.stub(),r=new c(n),l=t.then(function(){return r});t.resolve(),l.cancel(e,!0),s.isTrue(n.calledOnce),s.equal(n.lastCall.args[0],e)},"cancel() is already bound to the deferred":function(){return(0,t.cancel)(),t.then(null,function(e){s.instanceOf(e,l)})}},".then":{"chained then()":function(){function e(e){return e*e}return t.resolve(2),t.then(e).then(e).then(function(e){s.equal(e,16)})},"asynchronously chained then()":function(){function e(e){var n=new c;return setTimeout(function(){n.resolve(e*e)},0),n.promise}return t.resolve(2),t.then(e).then(e).then(function(e){s.equal(e,16)})},"then() is already bound to the deferred":function(){var n={},e=t.then;return t.resolve(n),e(function(e){s.equal(e,n)})},"then() with progback: returned promise is not fulfilled when progress is emitted":function(){var e=i.stub(),n=t.then(null,null,e);t.progress(),s.isTrue(e.called,"Progress was received."),s.isFalse(n.isFulfilled(),"Promise is not fulfilled.")}}}})});