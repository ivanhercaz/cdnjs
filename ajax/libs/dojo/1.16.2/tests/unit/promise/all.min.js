define(["intern!object","intern/chai!assert","dojo/Deferred","../../../promise/all"],function(n,c,a,i){n({name:"dojo/promise/all","array argument":function(){var e=["foo","bar","baz"],n=[new a,new a,e[2]];n[1].resolve(e[1]),i(n).then(this.async().callback(function(n){c.deepEqual(n,e)})),n[0].resolve(e[0])},"object argument":function(){var e={a:"foo",b:"bar",c:"baz"},n={a:new a,b:new a,c:e.c};n.a.resolve(e.a),i(n).then(this.async().callback(function(n){c.deepEqual(n,e)})),n.b.resolve(e.b)},"without arguments":function(){i().then(this.async().callback(function(n){c.isTrue(void 0===n)}))},"with single non-object argument":function(){i(null).then(this.async().callback(function(n){c.isTrue(void 0===n)}))},"with empty array":function(){i([]).then(this.async().callback(function(n){c.deepEqual(n,[])}))},"with empty object":function(){i({}).then(this.async().callback(function(n){c.deepEqual(n,{})}))},"with one rejected promise":function(){var e={},n=[new a,new a,{}];n[1].reject(e),i(n).then(null,this.async().callback(function(n){c.strictEqual(n,e)}))},"with one promise rejected later":function(){var e={},n=[new a,new a,{}];i(n).then(null,this.async().callback(function(n){c.strictEqual(n,e)})),n[1].reject(e)},"with multiple promises rejected later":function(){var e,n={},t=[new a,new a,{}];i(t).then(null,function(n){e=n}),t[0].reject(n),t[1].reject({}),setTimeout(this.async().callback(function(){c.strictEqual(e,n)}),0)},"cancel only affects returned promise, not those we're waiting for":function(){var e={},t=!1,n=new a(function(){t=!0});i([new a,n,new a]).then(null,this.async().callback(function(n){c.strictEqual(n,e),c.isFalse(t)})).cancel(e)}})});