define(["intern!object","intern/chai!assert","dojo/Deferred","../../../promise/first"],function(n,t,c,i){var a={a:1,b:"two"};n({name:"dojo/promise/first","with array argument":function(){var n=[new c,(new c).resolve(a),{}];i(n).then(this.async().callback(function(n){t.deepEqual(n,a)}))},"with object argument":function(){var n={a:new c,b:(new c).resolve(a),c:{}};i(n).then(this.async().callback(function(n){t.deepEqual(n,a)}))},"without arguments":function(){i().then(this.async().callback(function(){t.equal(arguments.length,1),t.isTrue(void 0===arguments[0])}))},"with single non-object argument":function(){i(null).then(this.async().callback(function(){t.equal(arguments.length,1),t.isTrue(void 0===arguments[0])}))},"with empty array":function(){i([]).then(this.async().callback(function(n){t.isTrue(void 0===n)}))},"with empty object":function(){i({}).then(this.async().callback(function(n){t.isTrue(void 0===n)}))},"with one rejected promise":function(){var n=[new c,(new c).reject(a),{}];i(n).then(null,this.async().callback(function(n){t.deepEqual(n,a)}))},"with one promise rejected later":function(){var n=[new c,new c,new c];i(n).then(null,this.async().callback(function(n){t.deepEqual(n,a)})),n[1].reject(a)},"with multiple promises rejected later":function(){var e,n=[new c,new c,new c];i(n).then(null,function(n){e=n}),n[1].reject(a),n[0].reject({}),setTimeout(this.async().callback(function(){t.deepEqual(e,a)}),0)},"cancel only affects returned promise, not those we're waiting for":function(){function n(){0}var e=[new c(n),new c(n),new c(n)];i(e).then(null,this.async().callback(function(n){t.deepEqual(n,a)})).cancel(a)}})});