define(["intern!object","intern/chai!assert","../../Deferred","../../promise/Promise","../../when"],function(t,i,e,r,o){var a,c={};t({name:"dojo/when","return the same promise without callbacks":function(){var t=o(c);i.instanceOf(t,r),a=new e;var n=o(a.promise);i.instanceOf(n,r),i.strictEqual(a.promise,n)},"do not convert to promise if errback is passed but no callback":function(){var t=o(c,null,function(){});i.strictEqual(t,c)},"with a result value":function(){var n;o(c,function(t){n=t}),i.strictEqual(n,c)},"with a result value, return result of callback":function(){var n,t={},e={},r=o(t,function(t){return n=t,e});i.strictEqual(n,t),i.strictEqual(r,e)},"with a promise that gets resolved":function(){var n;a=new e,o(a.promise,function(t){n=t}),a.resolve(c),i.strictEqual(n,c)},"with a promise that gets rejected":function(){var n;a=new e,o(a.promise,null,function(t){n=t}),a.reject(c),i.strictEqual(n,c)},"with a promise that gets progress":function(){var n;a=new e,o(a.promise,null,null,function(t){n=t}),a.progress(c),i.strictEqual(n,c)},"with chaining of the result":function(){var n;function t(t){return t*t}o(2).then(t).then(t).then(function(t){n=t}),i.strictEqual(n,16)},"convert foreign promise":function(){var n,e,t=o({then:function(t){n=t}});t.then(function(t){e=t}),n(c),i.instanceOf(t,r),i.strictEqual(e,c)}})});