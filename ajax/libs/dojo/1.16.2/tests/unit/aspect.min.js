define(["intern!object","intern/chai!assert","../../aspect","sinon"],function(e,l,n,r){var u=Array.prototype.slice;function i(){return r.spy(function(e){return[e+1]})}e(function(){var a,o;return{name:"dojo/aspect",beforeEach:function(){o=r.spy(function(e){return e+1}),a={method:o}},".before":{"return value passed as arguments":function(){var e=i();n.before(a,"method",e),a.method(0),l.isTrue(e.calledBefore(o)),l.isTrue(e.calledOnce),l.isTrue(o.calledOnce),l.equal(e.lastCall.args[0],0),l.equal(o.lastCall.args[0],1),l.equal(o.returnValues[0],2)},"multiple aspect.before()":function(){var e=i(),t=i();n.before(a,"method",e),n.before(a,"method",t),a.method(5),l.isTrue(t.calledBefore(e)),l.isTrue(e.calledBefore(o)),l.equal(t.lastCall.args[0],5),l.equal(e.lastCall.args[0],6),l.equal(o.lastCall.args[0],7),l.equal(o.returnValues[0],8)},"multiple aspect.before() with removal inside handler":function(){var e=0,t=n.before(a,"method",function(){e++}),r=n.before(a,"method",function(){e++,r.remove(),t.remove()});l.doesNotThrow(function(){a.method()}),l.strictEqual(e,1,"Only one advising function should be called")}},".after":{"multiple dojo version":function(){var a=0;require({packages:[{name:"dojo1",location:"."},{name:"dojo2",location:"."}]},["dojo1/aspect","dojo2/aspect"],this.async().callback(function(e,t){var r={onclick:function(){}};e.after(r,"onclick",function(){a++}),t.after(r,"onclick",function(){a++}),t.after(r,"onclick",function(){a++}),r.onclick(),l.equal(a,3)}))},"overriding return value from original method":function(){var e="override!",t=r.stub().returns(e);n.after(a,"method",t),l.equal(a.method(0),e),l.isTrue(t.calledAfter(o))},"multiple aspect.after()":function(){var e=r.stub(),t=r.stub();n.after(a,"method",e),n.after(a,"method",t),a.method(0),l.isTrue(e.calledAfter(o)),l.isTrue(t.calledAfter(e))},"multiple aspect.after() with removal inside handler":function(){var e=0,t=n.after(a,"method",function(){t.remove(),r.remove(),e++}),r=n.after(a,"method",function(){e++});l.doesNotThrow(function(){a.method()}),l.strictEqual(e,1,"Only one advising function should be called")},"recieveArguments is true":{"provides the original arguments to the aspect method":function(){var e="expected",t=r.stub().returns(e);n.after(a,"method",t),l.equal(a.method(0),e),l.isTrue(t.calledAfter(o)),l.equal(t.lastCall.args[0],1),l.deepEqual(u.call(t.lastCall.args[1]),o.lastCall.args)},"not overriding return value":function(){var e=r.stub().returns(void 0);n.after(a,"method",e,!0),l.equal(a.method(0),1),l.isTrue(e.calledAfter(o))}}},".around":{"single around":function(){var e=r.stub().returns(5),t=r.stub().returns(e);n.around(a,"method",t),l.equal(a.method(0),5),l.isTrue(t.calledOnce),l.isTrue(e.calledOnce),l.equal(e.firstCall.args[0],0),l.isFalse(o.called),t.callArgWith(0,10),l.isTrue(o.calledOnce),l.equal(o.firstCall.args[0],10)}},"handle.remove()":{"prevents aspect from being called":function(){var e=i(),t=n.before(a,"method",e);a.method(0),l.notEqual(a.method,o),t.remove(),a.method(1),l.notEqual(a.method,o),l.isTrue(o.calledTwice),l.isTrue(e.calledOnce)},"can remove an aspect from the middle of a list":function(){var e=i(),t=i(),r=n.before(a,"method",e);n.before(a,"method",t),r.remove(),a.method(0),l.isTrue(o.called),l.isTrue(t.called),l.isFalse(e.called)},"removing a aspect stub":function(){var e={},t=r.stub();n.before(e,"method",r.stub()),n.before(e,"method",t).remove(),e.method(0),l.isFalse(t.called)},"removing the first of multiple aspects":function(){var e=r.stub(),t=r.stub().returns(e);n.around(a,"method",t).remove(),a.method(0),l.isTrue(t.calledOnce),l.isTrue(o.calledOnce),l.isFalse(e.called)}}}})});