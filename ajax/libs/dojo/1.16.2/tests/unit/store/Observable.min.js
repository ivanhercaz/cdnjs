define(["intern!object","intern/chai!assert","../../../store/Observable","../../../_base/declare","dojo/_base/lang","dojo/_base/array","../../../store/Memory","sinon"],function(e,r,a,n,i,o,t,l){function u(){var e=n([t],{get:function(){return this.inherited(arguments)}});return new a(new e({data:[{id:0,name:"zero",even:!0,prime:!1},{id:1,name:"one",prime:!1},{id:2,name:"two",even:!0,prime:!0},{id:3,name:"three",prime:!0},{id:4,name:"four",even:!0,prime:!1},{id:5,name:"five",prime:!0}]}))}function s(){var e,n=[];for(e=1;e<=100;e++)n.push({id:e,name:"item "+e,order:e});return a(new t({data:n}))}var c,f,d,g;e({name:"dojo/store/Observable",".get":function(){var e=u();r.equal(e.get(1).name,"one"),r.equal(e.get(4).name,"four"),r.isTrue(e.get(5).prime)},".query":{"empty query options":function(){var e=u().query({});r.lengthOf(e,6)}},".observe":{beforeEach:function(){c=u(),f=l.stub(),d=c.query({prime:!0}),g=d.observe(f)},"handler receives updates":{"update an existing matching record to no longer match query":function(){var e=d[0];e.prime=!1,c.put(e),r.deepEqual(f.firstCall.args[0],{id:2,name:"two",even:!0,prime:!1}),r.equal(f.firstCall.args[1],0),r.equal(f.firstCall.args[2],-1),r.lengthOf(d,2)},"updating an existing non-matching record to match the query":function(){var e=c.get(1);e.prime=!0,c.put(e),r.deepEqual(f.firstCall.args[0],{id:1,name:"one",prime:!0}),r.equal(f.firstCall.args[1],-1),r.equal(f.firstCall.args[2],3),r.lengthOf(d,4)},"does not receive updates from non-matching additions":function(){r.lengthOf(d,3),c.add({id:6,name:"six"}),r.lengthOf(d,3),r.isFalse(f.called)},"adding new matching record":function(){var e={id:7,name:"seven",prime:!0};c.add(e),r.isTrue(f.called),r.deepEqual(f.firstCall.args[0],e),r.equal(f.firstCall.args[1],-1),r.equal(f.firstCall.args[2],3),r.lengthOf(d,4)},includeObjectUpdates:{beforeEach:function(){g.cancel()},"is false; does not notify about object updates":function(){var e=d[0];d.observe(f,!1),e.name="newName",c.put(e),r.equal(f.callCount,0)},"is true, notifies about object updates":function(){var e=d[0];d.observe(f,!0),e.name="newName",c.put(e),r.equal(f.callCount,1),r.equal(f.firstCall.args[1],f.firstCall.args[2])}}},"observer#cancel() halts further updates":function(){var e=d[0];r.lengthOf(d,3),e.prime=!1,c.put(e),r.lengthOf(d,2),r.lengthOf(c.query({prime:!0}),2),r.equal(f.callCount,1),g.cancel(),e.prime=!0,c.put(e),r.lengthOf(d,2),r.equal(f.callCount,1),r.lengthOf(c.query({prime:!0}),3)},"observer#remove() is observer#cancel()":function(){r.isFunction(g.cancel),r.equal(g.cancel,g.remove)}},"behaves as a mixin wrapper":function(){r.notInstanceOf(u(),a),r.notInstanceOf(s(),a)},"paging tests":function(){var e={count:25,sort:[{attribute:"order"}]},n=s(),a=[n.query({},i.delegate(e,{start:0})),n.query({},i.delegate(e,{start:25})),n.query({},i.delegate(e,{start:50})),n.query({},i.delegate(e,{start:75}))],t=l.stub();o.forEach(a,function(e){e.observe(t,!0)}),n.add({id:101,name:"one oh one",order:2.5}),r.lengthOf(a[0],26),r.lengthOf(a[1],25),r.lengthOf(a[2],25),r.lengthOf(a[3],25),n.remove(101),r.equal(t.callCount,2),r.lengthOf(a[0],25),n.add({id:102,name:"one oh two",order:26.5}),r.lengthOf(a[0],25),r.lengthOf(a[1],26),r.lengthOf(a[2],25),r.equal(t.callCount,3)}})});