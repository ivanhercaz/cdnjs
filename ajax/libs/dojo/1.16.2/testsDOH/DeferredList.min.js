define(["../main","doh/main","../DeferredList"],function(l,d){d.register("testsDOH.DeferredList",[function(r){var e=new l.Deferred,a=new l.Deferred,t=new l.DeferredList([e,a]),s=!1;t.addCallback(function(e){return d.debug("debug from dojo.DeferredList callback"),e}),t.addCallback(function(e){return console.log("res: ",e,e.length),r.assertTrue(2==e.length),r.assertTrue(e[0][0]),r.assertEqual(e[0][1],"foo"),r.assertTrue(e[1][0]),r.assertEqual(e[1][1],"bar"),s=!0,e}),e.callback("foo"),a.callback("bar"),r.assertTrue(s)},function(r){var e=new l.Deferred,a=new l.Deferred,t=new l.DeferredList([e,a]),s=!1,n=new Error("foo"),u=new Error("bar");t.addCallback(function(e){return d.debug("debug from dojo.DeferredList callback"),e}),t.addCallback(function(e){return r.assertTrue(2==e.length),r.assertTrue(!e[0][0]),r.assertEqual(e[0][1],n),r.assertTrue(!e[1][0]),r.assertEqual(e[1][1],u),s=!0,e}),e.errback(n),a.errback(u),r.assertTrue(s)},function(r){var e=new l.Deferred,a=new l.Deferred,t=new l.DeferredList([e,a]),s=!1,n=new Error("foo");t.addCallback(function(e){return d.debug("debug from dojo.DeferredList callback"),e}),t.addCallback(function(e){return r.assertTrue(2==e.length),r.assertTrue(!e[0][0]),r.assertEqual(e[0][1],n),r.assertTrue(e[1][0]),r.assertEqual(e[1][1],"bar"),s=!0,e}),e.errback(n),a.callback("bar"),r.assertTrue(s)},function(r){var e=new l.Deferred,a=new l.Deferred,t=l.DeferredList.prototype.gatherResults([e,a]),s=!1;t.addCallback(function(e){return r.assertEqual(e[0],"foo"),r.assertEqual(e[1],"bar"),s=!0,e}),e.callback("foo"),a.callback("bar"),r.assertTrue(s)}]),d.register("testsDOH.DeferredList",[function(r){var e=new l.Deferred,a=new l.Deferred,t=new l.DeferredList([e,a]),s=!1;t.addCallback(function(e){return d.debug("debug from dojo.DeferredList callback"),e}),t.addCallback(function(e){return r.assertTrue(2==e.length),r.assertTrue(e[0][0]),r.assertEqual(e[0][1],"foo"),r.assertTrue(e[1][0]),r.assertEqual(e[1][1],"bar"),s=!0,e}),e.callback("foo"),a.callback("bar"),r.assertTrue(s)},function(r){var e=new l.Deferred,a=new l.Deferred,t=new l.DeferredList([e,a]),s=!1,n=new Error("foo"),u=new Error("bar");t.addCallback(function(e){return d.debug("debug from dojo.DeferredList callback"),e}),t.addCallback(function(e){return r.assertTrue(2==e.length),r.assertTrue(!e[0][0]),r.assertEqual(e[0][1],n),r.assertTrue(!e[1][0]),r.assertEqual(e[1][1],u),s=!0,e}),e.errback(n),a.errback(u),r.assertTrue(s)},function(r){var e=new l.Deferred,a=new l.Deferred,t=new l.DeferredList([e,a]),s=!1,n=new Error("foo");t.addCallback(function(e){return d.debug("debug from dojo.DeferredList callback"),e}),t.addCallback(function(e){return r.assertTrue(2==e.length),r.assertTrue(!e[0][0]),r.assertEqual(e[0][1],n),r.assertTrue(e[1][0]),r.assertEqual(e[1][1],"bar"),s=!0,e}),e.errback(n),a.callback("bar"),r.assertTrue(s)},function(r){var e=new l.Deferred,a=new l.Deferred,t=l.DeferredList.prototype.gatherResults([e,a]),s=!1;t.addCallback(function(e){return r.assertEqual(e[0],"foo"),r.assertEqual(e[1],"bar"),s=!0,e}),e.callback("foo"),a.callback("bar"),r.assertTrue(s)}])});